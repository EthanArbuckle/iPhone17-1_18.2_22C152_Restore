void sub_216977C94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  sub_21696C898(v26 - 144);
  _Unwind_Resume(a1);
}

BOOL sub_216977CF0(int a1)
{
  uint64_t v2 = sub_2169795E8();
  unsigned int v3 = atomic_load((unsigned int *)(v2 + 4 * a1));
  if (!v3)
  {
    uint64_t v5 = v2;
    uint64_t v6 = sub_2169795E8();
    pxrInternal__aapl__pxrReserved__::TfDebug::_InitializeNode((void *)(v6 + 4 * a1), off_264294450[a1]);
    unsigned int v3 = atomic_load((unsigned int *)(v5 + 4 * a1));
  }
  return v3 == 2;
}

void pxrInternal__aapl__pxrReserved__::Sdf_ComputeAnonLayerIdentifier(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (!a2)
  {
    v41 = "sdf/assetPathResolver.cpp";
    v42 = "Sdf_ComputeAnonLayerIdentifier";
    uint64_t v43 = 225;
    v44 = "string pxrInternal__aapl__pxrReserved__::Sdf_ComputeAnonLayerIdentifier(const string &, const SdfLayer *)";
    char v45 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v41, "layer", 0);
  }
  uint64_t v6 = *(unsigned __int8 *)(a1 + 23);
  int v7 = (char)v6;
  v9 = *(void **)a1;
  unint64_t v8 = *(void *)(a1 + 8);
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a1 + 8);
  }
  if (v7 >= 0) {
    v10 = (const char *)a1;
  }
  else {
    v10 = *(const char **)a1;
  }
  if (v6 >= 2)
  {
    v11 = &v10[v6];
    v12 = (char *)v10;
    do
    {
      v13 = (char *)memchr(v12, 37, v6 - 1);
      if (!v13) {
        break;
      }
      if (*(_WORD *)v13 == 28197)
      {
        if (v13 != v11 && v13 - v10 != -1)
        {
          v41 = "sdf/assetPathResolver.cpp";
          v42 = "Sdf_ComputeAnonLayerIdentifier";
          uint64_t v43 = 228;
          v44 = "string pxrInternal__aapl__pxrReserved__::Sdf_ComputeAnonLayerIdentifier(const string &, const SdfLayer *)";
          char v45 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Anon layer contains invalid character sequence '%%n': %s", v10);
          if (*(char *)(a1 + 23) < 0)
          {
            sub_216778F24((unsigned char *)a3, *(void **)a1, *(void *)(a1 + 8));
          }
          else
          {
            *(_OWORD *)a3 = *(_OWORD *)a1;
            *(void *)(a3 + 16) = *(void *)(a1 + 16);
          }
          return;
        }
        break;
      }
      v12 = v13 + 1;
      uint64_t v6 = v11 - v12;
    }
    while (v11 - v12 >= 2);
  }
  if (v7 < 0) {
    sub_216778F24(&__dst, v9, v8);
  }
  else {
    std::string __dst = *(std::string *)a1;
  }
  sub_216779094(__p, "anon:%p");
  if ((v39 & 0x80u) == 0) {
    v16 = __p;
  }
  else {
    v16 = (void **)__p[0];
  }
  if ((v39 & 0x80u) == 0) {
    int64_t v17 = v39;
  }
  else {
    int64_t v17 = (int64_t)__p[1];
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_dst = &__dst;
  }
  else {
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __dst.__r_.__value_.__l.__size_;
  }
  if (v17)
  {
    if ((uint64_t)size >= v17)
    {
      v22 = (char *)p_dst + size;
      int v23 = *(char *)v16;
      int64_t v24 = size;
      v25 = p_dst;
      do
      {
        int64_t v26 = v24 - v17;
        if (v26 == -1) {
          break;
        }
        v27 = (char *)memchr(v25, v23, v26 + 1);
        if (!v27) {
          break;
        }
        v28 = v27;
        if (!memcmp(v27, v16, v17))
        {
          if (v28 != v22)
          {
            int64_t v20 = v28 - (char *)p_dst;
            if (v28 - (char *)p_dst != -1) {
              goto LABEL_36;
            }
          }
          break;
        }
        v25 = (std::string *)(v28 + 1);
        int64_t v24 = v22 - (v28 + 1);
      }
      while (v24 >= v17);
    }
    v41 = "sdf/assetPathResolver.cpp";
    v42 = "Sdf_ComputeAnonLayerIdentifier";
    uint64_t v43 = 239;
    v44 = "string pxrInternal__aapl__pxrReserved__::Sdf_ComputeAnonLayerIdentifier(const string &, const SdfLayer *)";
    char v45 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Could not find expected prefix:\"anon:%%p\" in anonymous layer identifier.");
    if (*(char *)(a1 + 23) < 0)
    {
      sub_216778F24((unsigned char *)a3, *(void **)a1, *(void *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)a3 = *(_OWORD *)a1;
      *(void *)(a3 + 16) = *(void *)(a1 + 16);
    }
  }
  else
  {
    int64_t v20 = 0;
LABEL_36:
    unint64_t v21 = v17 + v20 - 1;
    if (size >= v21)
    {
      v29 = (char *)p_dst + v21;
      v30 = (char *)p_dst + size;
      while (1)
      {
        v15 = (char *)(v30 - v29);
        if (v30 - v29 < 1) {
          break;
        }
        v31 = memchr(v29, 37, (size_t)v15);
        if (!v31) {
          break;
        }
        if (*v31 == 37)
        {
          if (v31 != v30)
          {
            std::string::size_type v32 = v31 - (unsigned char *)p_dst;
            if (v31 - (unsigned char *)p_dst != -1)
            {
LABEL_60:
              std::string::insert(&__dst, v32, "%");
              std::string::size_type v33 = v32 + 2;
              std::string::size_type v34 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
              if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                p_dst = &__dst;
              }
              else {
                p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
              }
              if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                std::string::size_type v34 = __dst.__r_.__value_.__l.__size_;
              }
              if (v34 >= v33)
              {
                v35 = (char *)p_dst + v33;
                v36 = (char *)p_dst + v34;
                while (1)
                {
                  v15 = (char *)(v36 - v35);
                  if (v36 - v35 < 1) {
                    break;
                  }
                  v37 = memchr(v35, 37, (size_t)v15);
                  if (!v37) {
                    break;
                  }
                  if (*v37 == 37)
                  {
                    if (v37 != v36)
                    {
                      std::string::size_type v32 = v37 - (unsigned char *)p_dst;
                      if (v37 - (unsigned char *)p_dst != -1) {
                        goto LABEL_60;
                      }
                    }
                    goto LABEL_37;
                  }
                  v35 = v37 + 1;
                }
              }
            }
          }
          break;
        }
        v29 = v31 + 1;
      }
    }
LABEL_37:
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)p_dst, v14, v15, a2);
  }
  if ((char)v39 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_216978128(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_216978168()
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  v0 = (char *)atomic_load((unint64_t *)&qword_267B8EB58);
  if (!v0)
  {
    v0 = (char *)operator new(0x28uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0, "anon:", 0);
    uint64_t v2 = v0 + 8;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 8, ":SDF_FORMAT_ARGS:", 0);
    unsigned int v3 = *(atomic_uint **)v0;
    v15 = v3;
    if ((v3 & 7) != 0)
    {
      v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
        v15 = v4;
      }
    }
    uint64_t v5 = (atomic_uint *)*v2;
    v16 = v5;
    if ((v5 & 7) != 0)
    {
      uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
        v16 = v6;
      }
    }
    *((void *)v0 + 2) = 0;
    *((void *)v0 + 3) = 0;
    *((void *)v0 + 4) = 0;
    v13 = (void **)(v0 + 16);
    char v14 = 0;
    int v7 = (char *)operator new(0x10uLL);
    uint64_t v8 = 0;
    *((void *)v0 + 2) = v7;
    *((void *)v0 + 3) = v7;
    *((void *)v0 + 4) = v7 + 16;
    do
    {
      v9 = (&v15)[v8];
      *(void *)&v7[v8 * 8] = v9;
      if ((v9 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *(void *)&v7[v8 * 8] &= 0xFFFFFFFFFFFFFFF8;
      }
      ++v8;
    }
    while (v8 != 2);
    *((void *)v0 + 3) = v7 + 16;
    for (uint64_t i = 1; i != -1; --i)
    {
      v11 = (&v15)[i];
      if ((v11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    uint64_t v12 = 0;
    atomic_compare_exchange_strong(&qword_267B8EB58, (unint64_t *)&v12, (unint64_t)v0);
    if (v12)
    {
      v13 = (void **)(v0 + 16);
      sub_216889A04(&v13);
      if ((*v2 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*(void *)v0 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v0 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v0);
      return atomic_load((unint64_t *)&qword_267B8EB58);
    }
  }
  return (unint64_t)v0;
}

void sub_216978348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  sub_216889A04(&a10);
  uint64_t v15 = 8;
  while (1)
  {
    uint64_t v16 = *(void *)(&a12 + v15);
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v15 -= 8;
    if (v15 == -8)
    {
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v12);
      _Unwind_Resume(a1);
    }
  }
}

std::string *pxrInternal__aapl__pxrReserved__::Sdf_GetAnonLayerDisplayName@<X0>(std::string *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = a1;
  int v4 = SHIBYTE(a1->__r_.__value_.__r.__words[2]);
  uint64_t v5 = (const std::string *)a1->__r_.__value_.__r.__words[0];
  size_t size = a1->__r_.__value_.__l.__size_;
  size_t v7 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if (v4 >= 0)
  {
    size_t v8 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  }
  else
  {
    a1 = (std::string *)a1->__r_.__value_.__r.__words[0];
    size_t v8 = size;
  }
  v9 = (std::string *)((char *)a1 + v8);
  result = (std::string *)memchr(a1, 58, v8);
  if (result) {
    v11 = result;
  }
  else {
    v11 = v9;
  }
  if (v4 < 0)
  {
    uint64_t v12 = (std::string *)((char *)v5 + size);
    v13 = v5;
    size_t v14 = size;
  }
  else
  {
    uint64_t v12 = (std::string *)((char *)v2 + v7);
    v13 = v2;
    size_t v14 = v7;
  }
  if (v11 != v12)
  {
    uint64_t v15 = (std::string *)((char *)v13 + v14);
    result = (std::string *)memchr((char *)&v11->__r_.__value_.__l.__data_ + 1, 58, (char *)v13 + v14 - ((char *)&v11->__r_.__value_.__l.__data_ + 1));
    uint64_t v16 = result ? result : v15;
    if ((v7 & 0x80) != 0)
    {
      uint64_t v17 = (std::string *)((char *)v5 + size);
    }
    else
    {
      uint64_t v17 = (std::string *)((char *)v2 + v7);
      uint64_t v5 = v2;
    }
    if (v16 != v17) {
      return std::string::basic_string(a2, v2, (char *)v16 - (char *)v5 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v18);
    }
  }
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return result;
}

void pxrInternal__aapl__pxrReserved__::Sdf_GetAnonLayerIdentifierTemplate(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(a1 + 23))
    {
      std::string __dst = *(std::string *)a1;
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  if (*(void *)(a1 + 8))
  {
LABEL_5:
    pxrInternal__aapl__pxrReserved__::TfStringTrim(" \n\t\r", (const std::string *)a1, &__dst);
    goto LABEL_6;
  }
  sub_216778F24(&__dst, *(void **)a1, 0);
LABEL_6:
  sub_216779094(&v13, "%");
  sub_216779094(__p, "%%");
  pxrInternal__aapl__pxrReserved__::TfStringReplace((void **)&__dst.__r_.__value_.__l.__data_, (unsigned __int8 *)&v13, (unsigned __int8 *)__p, &v14);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  std::string __dst = v14;
  *((unsigned char *)&v14.__r_.__value_.__s + 23) = 0;
  v14.__r_.__value_.__s.__data_[0] = 0;
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  unsigned int v3 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216978168();
  if ((*(void *)v3 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)v3 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v3);
  }
  if (*((char *)EmptyString + 23) >= 0) {
    size_t v5 = *((unsigned __int8 *)EmptyString + 23);
  }
  else {
    size_t v5 = EmptyString[1];
  }
  uint64_t v6 = &v14;
  sub_2167940B4((uint64_t)&v14, v5 + 2);
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v6 = (std::string *)v14.__r_.__value_.__r.__words[0];
  }
  if (v5)
  {
    if (*((char *)EmptyString + 23) >= 0) {
      size_t v7 = EmptyString;
    }
    else {
      size_t v7 = (const void *)*EmptyString;
    }
    memmove(v6, v7, v5);
  }
  strcpy((char *)v6 + v5, "%p");
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!*((unsigned char *)&__dst.__r_.__value_.__s + 23))
    {
      std::string v13 = __dst;
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  if (__dst.__r_.__value_.__l.__size_)
  {
LABEL_29:
    std::operator+<char>();
    goto LABEL_30;
  }
  sub_216778F24(&v13, __dst.__r_.__value_.__l.__data_, 0);
LABEL_30:
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v8 = &v13;
  }
  else {
    size_t v8 = (std::string *)v13.__r_.__value_.__r.__words[0];
  }
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v13.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v13.__r_.__value_.__l.__size_;
  }
  v10 = std::string::append(&v14, (const std::string::value_type *)v8, size);
  *a2 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_216978704(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v27 - 41) < 0) {
    operator delete(*(void **)(v27 - 64));
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier(uint64_t a1@<X0>, void *a2@<X1>, std::string *a3@<X8>)
{
  unint64_t v6 = *(void *)(sub_216978168() + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v6)
  {
    size_t v7 = (const char *)(v6 + 16);
    if (*(char *)(v6 + 39) < 0) {
      size_t v7 = *(const char **)v7;
    }
  }
  else
  {
    size_t v7 = "";
  }
  memset(&v24, 0, sizeof(v24));
  v10 = (void *)*a2;
  size_t v8 = a2 + 1;
  v9 = v10;
  if (v10 != v8)
  {
    do
    {
      std::string::append(&v24, v7);
      int v11 = *((char *)v9 + 55);
      if (v11 >= 0) {
        char v12 = (const std::string::value_type *)(v9 + 4);
      }
      else {
        char v12 = (const std::string::value_type *)v9[4];
      }
      if (v11 >= 0) {
        std::string::size_type v13 = *((unsigned __int8 *)v9 + 55);
      }
      else {
        std::string::size_type v13 = v9[5];
      }
      std::string::append(&v24, v12, v13);
      std::string::push_back(&v24, 61);
      int v14 = *((char *)v9 + 79);
      if (v14 >= 0) {
        uint64_t v15 = (const std::string::value_type *)(v9 + 7);
      }
      else {
        uint64_t v15 = (const std::string::value_type *)v9[7];
      }
      if (v14 >= 0) {
        std::string::size_type v16 = *((unsigned __int8 *)v9 + 79);
      }
      else {
        std::string::size_type v16 = v9[8];
      }
      std::string::append(&v24, v15, v16);
      uint64_t v17 = (void *)v9[1];
      if (v17)
      {
        do
        {
          char v18 = v17;
          uint64_t v17 = (void *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          char v18 = (void *)v9[2];
          BOOL v19 = *v18 == (void)v9;
          v9 = v18;
        }
        while (!v19);
      }
      size_t v7 = "&";
      v9 = v18;
    }
    while (v18 != v8);
  }
  int v20 = *(char *)(a1 + 23);
  if (v20 >= 0) {
    unint64_t v21 = (const std::string::value_type *)a1;
  }
  else {
    unint64_t v21 = *(const std::string::value_type **)a1;
  }
  if (v20 >= 0) {
    std::string::size_type v22 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    std::string::size_type v22 = *(void *)(a1 + 8);
  }
  int v23 = std::string::insert(&v24, 0, v21, v22);
  *a3 = *v23;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
}

void sub_2169788F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_StripIdentifierArgumentsIfPresent(const std::string *a1, uint64_t a2)
{
  int v4 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216978168();
  if ((*((void *)v4 + 1) & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*((void *)v4 + 1) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v4);
  }
  std::string::size_type size = (char *)HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((char)size >= 0) {
    std::string::size_type v7 = (std::string::size_type)a1;
  }
  else {
    std::string::size_type v7 = a1->__r_.__value_.__r.__words[0];
  }
  int v8 = *((char *)EmptyString + 23);
  if (v8 >= 0) {
    v9 = (char *)EmptyString;
  }
  else {
    v9 = (char *)*EmptyString;
  }
  if (v8 >= 0) {
    int64_t v10 = *((unsigned __int8 *)EmptyString + 23);
  }
  else {
    int64_t v10 = EmptyString[1];
  }
  if (v10)
  {
    if ((char)size < 0) {
      std::string::size_type size = (char *)a1->__r_.__value_.__l.__size_;
    }
    if ((uint64_t)size >= v10)
    {
      std::string::size_type v13 = &size[v7];
      int v14 = *v9;
      uint64_t v15 = (void *)v7;
      do
      {
        std::string::size_type v16 = &size[-v10];
        if (v16 == (char *)-1) {
          break;
        }
        uint64_t result = (uint64_t)memchr(v15, v14, (size_t)(v16 + 1));
        if (!result) {
          return result;
        }
        uint64_t v17 = result;
        uint64_t result = memcmp((const void *)result, v9, v10);
        if (!result)
        {
          if ((char *)v17 != v13)
          {
            std::string::size_type v12 = v17 - v7;
            if (v17 - v7 != -1) {
              goto LABEL_19;
            }
          }
          return result;
        }
        uint64_t v15 = (void *)(v17 + 1);
        std::string::size_type size = &v13[-v17 - 1];
      }
      while ((uint64_t)size >= v10);
    }
    return 0;
  }
  else
  {
    std::string::size_type v12 = 0;
LABEL_19:
    std::string::basic_string(&v19, a1, 0, v12, (std::allocator<char> *)&v18);
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    *(std::string *)a2 = v19;
    return 1;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_SplitIdentifier(const std::string *a1, long long *a2, uint64_t a3)
{
  v26[0] = 0;
  v26[1] = 0;
  uint64_t v27 = 0;
  memset(&__p, 0, sizeof(__p));
  pxrInternal__aapl__pxrReserved__::Sdf_SplitIdentifier(a1, (uint64_t)v26, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
    if (!__p.__r_.__value_.__l.__size_) {
      goto LABEL_10;
    }
  }
  else
  {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if (!*((unsigned char *)&__p.__r_.__value_.__s + 23)) {
      goto LABEL_10;
    }
  }
  unint64_t v6 = *(void *)(sub_216978168() + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (*(char *)(v6 + 39) < 0) {
      unint64_t v6 = *(void *)(v6 + 24);
    }
    else {
      unint64_t v6 = *(unsigned __int8 *)(v6 + 39);
    }
  }
  if (size == v6)
  {
LABEL_10:
    sub_2167877AC(a3, *(void **)(a3 + 8));
    *(void *)a3 = a3 + 8;
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 8) = 0;
LABEL_11:
    uint64_t v7 = *((void *)a2 + 2);
    long long v8 = *a2;
    *a2 = *(_OWORD *)v26;
    *((void *)a2 + 2) = v27;
    *(_OWORD *)int64_t v26 = v8;
    uint64_t v27 = v7;
    uint64_t v9 = 1;
    goto LABEL_12;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v11 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v11 = __p.__r_.__value_.__l.__size_;
  }
  unint64_t v12 = *(void *)(sub_216978168() + 8) & 0xFFFFFFFFFFFFFFF8;
  if (v12)
  {
    if (*(char *)(v12 + 39) < 0) {
      unint64_t v12 = *(void *)(v12 + 24);
    }
    else {
      unint64_t v12 = *(unsigned __int8 *)(v12 + 39);
    }
  }
  if (v11 > v12
    || (v31.__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/assetPathResolver.cpp",
        v31.__r_.__value_.__l.__size_ = (std::string::size_type)"Sdf_DecodeArguments",
        v31.__r_.__value_.__r.__words[2] = 333,
        std::string::size_type v32 = "BOOL pxrInternal__aapl__pxrReserved__::Sdf_DecodeArguments(const string &, SdfLayer::FileFormatArguments *)",
        char v33 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v31, "argStringLength > _Tokens->ArgsDelimiter.size()", 0) & 1) != 0))
  {
    v30[0] = 0;
    v30[1] = 0;
    v29 = (uint64_t *)v30;
    unint64_t v13 = *(void *)(sub_216978168() + 8) & 0xFFFFFFFFFFFFFFF8;
    if (v13)
    {
      if (*(char *)(v13 + 39) < 0) {
        std::string::size_type v14 = *(void *)(v13 + 24);
      }
      else {
        std::string::size_type v14 = *(unsigned __int8 *)(v13 + 39);
      }
    }
    else
    {
      std::string::size_type v14 = 0;
    }
    while (1)
    {
      if (v14 >= v11)
      {
LABEL_43:
        sub_2168A6B2C((uint64_t *)a3, (uint64_t)&v29);
        sub_2167877AC((uint64_t)&v29, v30[0]);
        goto LABEL_11;
      }
      std::string::size_type v15 = std::string::find(&__p, 61, v14);
      if (v15 == -1) {
        break;
      }
      std::string::size_type v16 = v15;
      std::string::basic_string(&v31, &__p, v14, v15 - v14, (std::allocator<char> *)&v28);
      std::string::size_type v14 = v16 + 1;
      std::string::size_type v17 = std::string::find(&__p, 38, v16 + 1);
      if (v17 == -1)
      {
        std::string::basic_string(&v28, &__p, v16 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v34);
        v34[0] = (long long *)&v31;
        std::string::size_type v22 = sub_21677B174(&v29, (const void **)&v31.__r_.__value_.__l.__data_, (uint64_t)&unk_2174BFD90, v34);
        int v23 = (void **)(v22 + 7);
        if (*((char *)v22 + 79) < 0) {
          operator delete(*v23);
        }
        *(std::string *)int v23 = v28;
        int v21 = 3;
      }
      else
      {
        std::string::size_type v18 = v17;
        std::string::basic_string(&v28, &__p, v14, v17 - v14, (std::allocator<char> *)v34);
        v34[0] = (long long *)&v31;
        std::string v19 = sub_21677B174(&v29, (const void **)&v31.__r_.__value_.__l.__data_, (uint64_t)&unk_2174BFD90, v34);
        int v20 = (void **)(v19 + 7);
        if (*((char *)v19 + 79) < 0) {
          operator delete(*v20);
        }
        int v21 = 0;
        *(std::string *)int v20 = v28;
        std::string::size_type v14 = v18 + 1;
      }
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v31.__r_.__value_.__l.__data_);
        if (v21) {
          goto LABEL_43;
        }
      }
      else if (v21)
      {
        goto LABEL_43;
      }
    }
    v31.__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/assetPathResolver.cpp";
    v31.__r_.__value_.__l.__size_ = (std::string::size_type)"Sdf_DecodeArguments";
    v31.__r_.__value_.__r.__words[2] = 344;
    std::string::size_type v32 = "BOOL pxrInternal__aapl__pxrReserved__::Sdf_DecodeArguments(const string &, SdfLayer::FileFormatArguments *)";
    char v33 = 0;
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v31, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid file format arguments: %s", (const char *)p_p);
    sub_2167877AC((uint64_t)&v29, v30[0]);
  }
  uint64_t v9 = 0;
LABEL_12:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v27) < 0) {
    operator delete(v26[0]);
  }
  return v9;
}

void sub_216978E0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,void *a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Sdf_GetLayerDisplayName(const std::string *a1@<X0>, std::string *a2@<X8>)
{
  memset(&v9, 0, sizeof(v9));
  v7[0] = 0;
  v7[1] = 0;
  uint64_t v8 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_SplitIdentifier(a1, (uint64_t)&v9, (uint64_t)v7);
  if (pxrInternal__aapl__pxrReserved__::Sdf_IsAnonLayerIdentifier((uint64_t)&v9))
  {
    pxrInternal__aapl__pxrReserved__::Sdf_GetAnonLayerDisplayName(&v9, a2);
  }
  else if (pxrInternal__aapl__pxrReserved__::ArIsPackageRelativePath((uint64_t)&v9))
  {
    pxrInternal__aapl__pxrReserved__::ArSplitPackageRelativePathOuter((uint64_t)&v9, (uint64_t)&__p);
    pxrInternal__aapl__pxrReserved__::TfGetBaseName(&__p, &v3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = v3;
    pxrInternal__aapl__pxrReserved__::ArJoinPackageRelativePath((uint64_t)&__p, a2);
    if (v6 < 0) {
      operator delete(v5);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::TfGetBaseName(&v9, a2);
  }
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
}

void sub_216978F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_21682E578((uint64_t)va);
  if (*(char *)(v5 - 41) < 0) {
    operator delete(*(void **)(v5 - 64));
  }
  if (*(char *)(v5 - 17) < 0) {
    operator delete(*(void **)(v5 - 40));
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Sdf_GetExtension(const std::string *a1)
{
  v11[0] = 0;
  v11[1] = 0;
  uint64_t v12 = 0;
  uint64_t v2 = (std::string *)v11;
  int v3 = pxrInternal__aapl__pxrReserved__::Sdf_StripIdentifierArgumentsIfPresent(a1, (uint64_t)v11);
  if (!v3) {
    uint64_t v2 = (std::string *)a1;
  }
  BOOL IsAnonLayerIdentifier = pxrInternal__aapl__pxrReserved__::Sdf_IsAnonLayerIdentifier((uint64_t)v2);
  if (IsAnonLayerIdentifier)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_GetAnonLayerDisplayName(v2, &__p);
    pxrInternal__aapl__pxrReserved__::Sdf_GetExtension(&__p);
    goto LABEL_17;
  }
  uint64_t v5 = v11;
  if (v3) {
    p_data = v11;
  }
  else {
    p_data = (void **)&a1->__r_.__value_.__l.__data_;
  }
  int v7 = *((char *)p_data + 23);
  if (v7 < 0)
  {
    if (!v3) {
      uint64_t v5 = (void **)&a1->__r_.__value_.__l.__data_;
    }
    if (!v5[1]) {
      goto LABEL_19;
    }
    uint64_t v8 = (std::string *)v2->__r_.__value_.__r.__words[0];
  }
  else
  {
    uint64_t v8 = v2;
    if (!v7) {
      goto LABEL_19;
    }
  }
  if (v8->__r_.__value_.__s.__data_[0] != 46)
  {
LABEL_19:
    Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver((pxrInternal__aapl__pxrReserved__ *)IsAnonLayerIdentifier);
    pxrInternal__aapl__pxrReserved__::ArResolver::GetExtension((uint64_t)Resolver);
    goto LABEL_20;
  }
  std::operator+<char>();
  pxrInternal__aapl__pxrReserved__::Sdf_GetExtension(&__p);
LABEL_17:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_20:
  if (SHIBYTE(v12) < 0) {
    operator delete(v11[0]);
  }
}

void sub_2169790E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_IsPackageOrPackagedLayer(uint64_t *a1)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
  FileFormat = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetFileFormat(v2);
  int v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
  uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v4);

  return pxrInternal__aapl__pxrReserved__::Sdf_IsPackageOrPackagedLayer(FileFormat, Identifier);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_IsPackageOrPackagedLayer(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = sub_216979288(a1);
  if ((*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3)) {
    return 1;
  }

  return pxrInternal__aapl__pxrReserved__::ArIsPackageRelativePath(a2);
}

uint64_t sub_2169791E0(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1 + 1;
  if (!v3
    || ((v4 = *(unsigned __int8 *)(sub_216850B68(v2) + 14), result = *a1, v4) ? (BOOL v6 = result == 0) : (BOOL v6 = 1), v6))
  {
    int v7 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/weakPtrFacade.h", 47);
    v8[0] = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/weakPtrFacade.h", (uint64_t)v7, 0x2Fu);
    v8[1] = "operator->";
    v8[2] = 216;
    v8[3] = "DataType *pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr, pxr"
            "Internal__aapl__pxrReserved__::SdfLayer>::operator->() const [PtrTemplate = pxrInternal__aapl__pxrReserved__"
            "::TfWeakPtr, Type = pxrInternal__aapl__pxrReserved__::SdfLayer]";
    char v9 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError((uint64_t)v8, (pxrInternal__aapl__pxrReserved__ *)(0x8000000217468342 & 0x7FFFFFFFFFFFFFFFLL));
  }
  return result;
}

uint64_t sub_216979288(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1 + 1;
  if (!v3
    || ((v4 = *(unsigned __int8 *)(sub_216850B68(v2) + 14), result = *a1, v4) ? (BOOL v6 = result == 0) : (BOOL v6 = 1), v6))
  {
    int v7 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/weakPtrFacade.h", 47);
    v8[0] = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/weakPtrFacade.h", (uint64_t)v7, 0x2Fu);
    v8[1] = "operator->";
    v8[2] = 216;
    v8[3] = "DataType *pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr, con"
            "st pxrInternal__aapl__pxrReserved__::SdfFileFormat>::operator->() const [PtrTemplate = pxrInternal__aapl__px"
            "rReserved__::TfWeakPtr, Type = const pxrInternal__aapl__pxrReserved__::SdfFileFormat]";
    char v9 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError((uint64_t)v8, (pxrInternal__aapl__pxrReserved__ *)(0x8000000217467E92 & 0x7FFFFFFFFFFFFFFFLL));
  }
  return result;
}

char *sub_216979330(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_216778F24(__dst + 24, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)(__dst + 24) = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    sub_216778F24(__dst + 48, *((void **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v6 = a2[3];
    *((void *)__dst + 8) = *((void *)a2 + 8);
    *((_OWORD *)__dst + 3) = v6;
  }
  sub_2168EE4C4((void *)__dst + 9, (void *)a2 + 9);
  return __dst;
}

void sub_2169793F4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216979440(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

void *sub_216979450(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_21697945C()
{
  return 1;
}

unint64_t sub_216979464(double *a1)
{
  double v1 = *a1;
  if (*a1 == 0.0) {
    double v1 = 0.0;
  }
  return bswap64(0x9E3779B97F4A7C55 * *(void *)&v1);
}

BOOL sub_216979494(double *a1, double *a2)
{
  return *a1 == *a2;
}

BOOL sub_2169794D0(double *a1, double *a2)
{
  return *a1 == *a2;
}

uint64_t sub_216979510()
{
  return 0;
}

void *sub_21697951C(uint64_t a1, void *a2)
{
  return pxrInternal__aapl__pxrReserved__::Vt_StreamOutGeneric((uint64_t)&unk_26C754A88, a1, a2);
}

void *sub_216979530()
{
  return &unk_26C754A88;
}

uint64_t sub_21697953C()
{
  return 0;
}

uint64_t sub_216979544()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_216979550()
{
  return 0;
}

uint64_t sub_216979558()
{
  return 0;
}

BOOL sub_216979560(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x8000000217467E60 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_21697959C(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_26C754A88, a2, a3);
}

void *sub_2169795C0()
{
  return &unk_26C754A88;
}

void *sub_2169795D0@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  a2[1] = (char *)&off_26C7549D0 + 1;
  return result;
}

uint64_t sub_2169795E8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26798B298, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26798B298))
  {
    double v1 = operator new(0x14uLL);
    *double v1 = 0;
    v1[1] = 0;
    *((_DWORD *)v1 + 4) = 0;
    qword_26798B290 = (uint64_t)v1;
    __cxa_guard_release(&qword_26798B298);
  }
  return qword_26798B290;
}

void sub_216979650(_Unwind_Exception *a1)
{
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::GetInstance()
{
  unint64_t result = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_instance);
  if (!result) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_CreateInstance();
  }
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_CreateInstance(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x8000000217467EE0 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&v12);
  uint64_t v2 = std::string::insert(&v12, 0, "Create Singleton ");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  uint64_t v16 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  sub_216851098((uint64_t)&v13, "Tf", "TfSingleton::_CreateInstance", (char *)__p);
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (atomic_exchange(pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager*> &)::isInitializing, 1u))
  {
    while (!atomic_load(a1))
      sched_yield();
  }
  else
  {
    if (!atomic_load(a1))
    {
      char v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager *)operator new(0x60uLL);
      pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::Sdf_ChangeManager(v9);
      unint64_t v11 = atomic_load(a1);
      if (v11)
      {
        if (v9 != (pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager *)v11)
        {
          __p[0] = "tf/instantiateSingleton.h";
          __p[1] = "_CreateInstance";
          uint64_t v16 = 84;
          std::string::size_type v17 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeMana"
                "ger>::_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager]";
          char v18 = 0;
          int v19 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"race detected setting singleton instance", v10);
        }
      }
      else if (atomic_exchange((atomic_ullong *volatile)a1, (unint64_t)v9))
      {
        __p[0] = "tf/instantiateSingleton.h";
        __p[1] = "_CreateInstance";
        uint64_t v16 = 88;
        std::string::size_type v17 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManage"
              "r>::_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager]";
        char v18 = 0;
        int v19 = 4;
        pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v10, "instance.exchange(newInst) == nullptr");
      }
    }
    atomic_store(0, (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager*> &)::isInitializing);
  }
  unint64_t v5 = atomic_load(a1);
  while (v14--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v13);
  return v5;
}

void sub_21697984C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
}

BOOL pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::CurrentlyExists()
{
  unint64_t v0 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_instance);
  return v0 != 0;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::SetInstanceConstructed(unint64_t result, uint64_t a2, char *a3)
{
  if (atomic_exchange((atomic_ullong *volatile)&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_instance, result))
  {
    v3[0] = "tf/instantiateSingleton.h";
    v3[1] = "SetInstanceConstructed";
    v3[2] = 56;
    v3[3] = "static void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManage"
            "r>::SetInstanceConstructed(T &) [T = pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"this function may not be called after GetInstance() or another SetInstanceConstructed() has completed", a3);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::DeleteInstance()
{
  for (uint64_t i = (pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_instance);
        i;
        uint64_t i = v1)
  {
    double v1 = i;
    atomic_compare_exchange_strong((atomic_ullong *volatile)&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_instance, (unint64_t *)&v1, 0);
    if (v1 == i)
    {
      pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::~Sdf_ChangeManager(i);
      operator delete(v2);
      return;
    }
    sched_yield();
  }
}

double pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_Data::_Data(pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_Data *this)
{
  *((void *)this + 6) = 0;
  double result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return result;
}

{
  double result;

  *((void *)this + 6) = 0;
  double result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return result;
}

void pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_SendNoticesForChangeList(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a2);
  BOOL updated = pxrInternal__aapl__pxrReserved__::SdfLayer::_UpdateLastDirtinessState(v5);
  if (updated)
  {
    char v18 = &unk_26C759A58;
    sub_216979C44((pxrInternal__aapl__pxrReserved__::TfNotice *)&v18, a2);
    pxrInternal__aapl__pxrReserved__::SdfNotice::LayerDirtinessChanged::~LayerDirtinessChanged((pxrInternal__aapl__pxrReserved__::SdfNotice::LayerDirtinessChanged *)&v18);
  }
  int v7 = (unsigned int *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)updated);
  uint64_t Entry = pxrInternal__aapl__pxrReserved__::SdfChangeList::FindEntry((uint64_t *)a3, v7);
  uint64_t v9 = *(void *)a3;
  if (*(_DWORD *)(a3 + 204) < 2u) {
    uint64_t v9 = a3;
  }
  if (Entry != v9 + 200 * *(unsigned int *)(a3 + 200))
  {
    uint64_t v10 = Entry;
    unint64_t v11 = (unint64_t *)(Entry + 8);
    if (*(_DWORD *)(Entry + 132) >= 4u) {
      unint64_t v11 = (unint64_t *)*v11;
    }
    uint64_t v12 = *(unsigned int *)(Entry + 128);
    if (v12)
    {
      uint64_t v13 = 40 * v12;
      do
      {
        char v18 = &unk_26C759830;
        unint64_t v14 = *v11;
        unint64_t v19 = v14;
        if ((v14 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          v19 &= 0xFFFFFFFFFFFFFFF8;
        }
        sub_216979C44((pxrInternal__aapl__pxrReserved__::TfNotice *)&v18, a2);
        pxrInternal__aapl__pxrReserved__::SdfNotice::LayerInfoDidChange::~LayerInfoDidChange((pxrInternal__aapl__pxrReserved__::SdfNotice::LayerInfoDidChange *)&v18);
        v11 += 5;
        v13 -= 40;
      }
      while (v13);
    }
    LOBYTE(v15) = *(_WORD *)(v10 + 192);
    if (*(_WORD *)(v10 + 192))
    {
      uint64_t v16 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a2);
      uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v16);
      pxrInternal__aapl__pxrReserved__::SdfNotice::LayerIdentifierDidChange::LayerIdentifierDidChange(&v18, v10 + 168, Identifier);
      sub_216979C44((pxrInternal__aapl__pxrReserved__::TfNotice *)&v18, a2);
      pxrInternal__aapl__pxrReserved__::SdfNotice::LayerIdentifierDidChange::~LayerIdentifierDidChange((pxrInternal__aapl__pxrReserved__::SdfNotice::LayerIdentifierDidChange *)&v18);
      __int16 v15 = *(_WORD *)(v10 + 192);
    }
    if ((v15 & 4) != 0)
    {
      char v18 = &unk_26C7599B0;
      sub_216979C44((pxrInternal__aapl__pxrReserved__::TfNotice *)&v18, a2);
      pxrInternal__aapl__pxrReserved__::SdfNotice::LayerDidReplaceContent::~LayerDidReplaceContent((pxrInternal__aapl__pxrReserved__::SdfNotice::LayerDidReplaceContent *)&v18);
      __int16 v15 = *(_WORD *)(v10 + 192);
    }
    if ((v15 & 8) != 0)
    {
      char v18 = &unk_26C7599E8;
      sub_216979C44((pxrInternal__aapl__pxrReserved__::TfNotice *)&v18, a2);
      pxrInternal__aapl__pxrReserved__::SdfNotice::LayerDidReloadContent::~LayerDidReloadContent((pxrInternal__aapl__pxrReserved__::SdfNotice::LayerDidReloadContent *)&v18);
    }
  }
}

void sub_216979BF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfNotice::LayerDidReloadContent::~LayerDidReloadContent((pxrInternal__aapl__pxrReserved__::SdfNotice::LayerDidReloadContent *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216979C44(pxrInternal__aapl__pxrReserved__::TfNotice *a1, uint64_t *a2)
{
  char v4 = sub_21697CF14(a2);
  if (v5 & 1 | (unint64_t)v4)
  {
    long long v6 = (const std::type_info *)(sub_2169791E0(a2) + 16);
    int v7 = (char *)sub_216851B24((uint64_t)a2);
  }
  else
  {
    long long v6 = 0;
    int v7 = 0;
    uint64_t v8 = (const std::type_info *)MEMORY[0x263F8C288];
  }

  return pxrInternal__aapl__pxrReserved__::TfNotice::_Send(a1, v6, v7, v8);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_OpenChangeBlock(atomic_ullong *a1, uint64_t a2)
{
  char v4 = 0;
  uint64_t result = sub_2168520EC(a1, &v4);
  if (*(void *)(result + 24)) {
    return 0;
  }
  *(void *)(result + 24) = a2;
  return result;
}

void pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_CloseChangeBlock(pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager *this, const pxrInternal__aapl__pxrReserved__::SdfChangeBlock *a2, char *a3)
{
  if (*((const pxrInternal__aapl__pxrReserved__::SdfChangeBlock **)a3 + 3) != a2)
  {
    v6[0] = "sdf/changeManager.cpp";
    v6[1] = "_CloseChangeBlock";
    v6[2] = 109;
    v6[3] = "void pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_CloseChangeBlock(const SdfChangeBlock *, const void *)";
    char v7 = 0;
    char v5 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Improperly nested SdfChangeBlocks!", (const char *)a2, a3);
    this = (pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager *)pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v6, "data.outermostBlock == block", v5);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_ProcessRemoveIfInert(this, (pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_Data *)a3, a3);
  *((void *)a3 + 3) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_SendNotices(v4, (pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_Data *)a3);
}

void pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_ProcessRemoveIfInert(pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager *this, pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_Data *a2, char *a3)
{
  long long v3 = (void **)*((void *)a2 + 4);
  char v4 = (void **)*((void *)a2 + 5);
  if (v3 != v4)
  {
    v19[0] = *((void *)a2 + 4);
    v19[1] = v4;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    v19[2] = *((void *)a2 + 6);
    *((void *)a2 + 6) = 0;
    uint64_t v12 = v3;
    uint64_t v13 = v4;
    while (v12 != v13)
    {
      long long v6 = (uint64_t ***)sub_21697A378(&v12, (uint64_t)a2, a3);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(*v6, &v17);
      char v7 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(&v17);
      uint64_t v10 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_21697A3F4((uint64_t *)&v12, v8, v9);
      pxrInternal__aapl__pxrReserved__::SdfLayer::_RemoveIfInert(v7, v10);
      uint64_t v11 = v18;
      if (v18)
      {
        if (atomic_fetch_add_explicit((atomic_uint *volatile)(v18 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
          (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
        }
      }
      sub_21697A474(&v12);
    }
    if (*((void *)a2 + 4) != *((void *)a2 + 5))
    {
      uint64_t v12 = (void **)"sdf/changeManager.cpp";
      uint64_t v13 = (void **)"_ProcessRemoveIfInert";
      uint64_t v14 = 147;
      __int16 v15 = "void pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_ProcessRemoveIfInert(_Data *)";
      char v16 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v12, "data->removeIfInert.empty()", 0);
    }
    if (!*((void *)a2 + 3))
    {
      uint64_t v12 = (void **)"sdf/changeManager.cpp";
      uint64_t v13 = (void **)"_ProcessRemoveIfInert";
      uint64_t v14 = 150;
      __int16 v15 = "void pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_ProcessRemoveIfInert(_Data *)";
      char v16 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v12, "data->outermostBlock", 0);
    }
    uint64_t v12 = (void **)v19;
    sub_21697CA24(&v12);
  }
}

void sub_216979F30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  a9 = (void **)&a16;
  sub_21697CA24(&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_SendNotices(pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager *this, pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_Data *a2)
{
  long long v3 = *(uint64_t **)a2;
  long long v4 = *(_OWORD *)((char *)a2 + 8);
  *((void *)a2 + 2) = 0;
  char v5 = (char *)a2 + 16;
  std::string::size_type v32 = v3;
  long long v33 = v4;
  long long v6 = (uint64_t *)v4;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  if (v3 != (uint64_t *)v4)
  {
    while (1)
    {
      char v7 = sub_21697CF14(v3);
      if (!(v8 & 1 | (unint64_t)v7)) {
        break;
      }
      v3 += 29;
      if (v3 == v6)
      {
        long long v3 = v6;
        goto LABEL_11;
      }
    }
    if (v3 != v6)
    {
      for (uint64_t i = v3 + 29; i != v6; i += 29)
      {
        uint64_t v10 = sub_21697CF14(i);
        if (v11 & 1 | (unint64_t)v10)
        {
          sub_21697D0EC((uint64_t)v3, (uint64_t)i);
          sub_21697D164((uint64_t)(v3 + 2), (uint64_t)(i + 2));
          v3 += 29;
        }
      }
    }
  }
LABEL_11:
  uint64_t v12 = sub_21697A4F4((uint64_t)&v32, (uint64_t)v3, v33);
  uint64_t v13 = v32;
  uint64_t v14 = (uint64_t *)v33;
  if (v32 != (uint64_t *)v33)
  {
    do
    {
      pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_SendNoticesForChangeList(v12, v13, (uint64_t)(v13 + 2));
      uint64_t v12 = sub_216977CF0(1);
      if (v12)
      {
        uint64_t v12 = sub_216977CF0(1);
        if (v12)
        {
          __int16 v15 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(v13);
          uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v15);
          int v17 = *(char *)(Identifier + 23);
          uint64_t v18 = *(void *)Identifier;
          sub_21697A584((uint64_t)(v13 + 2));
          uint64_t v21 = v17 >= 0 ? Identifier : v18;
          std::string::size_type v22 = v31 >= 0 ? &__p : (void **)__p;
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Changes to layer %s:\n%s", v19, v20, v21, v22);
          if (SHIBYTE(v31) < 0) {
            operator delete(__p);
          }
        }
      }
      v13 += 29;
    }
    while (v13 != v14);
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B8EB68, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_267B8EB68))
    {
      __dmb(0xBu);
      qword_267B8EB70 = 1;
      qword_267B8EB60 = (uint64_t)&qword_267B8EB70;
      __cxa_guard_release(&qword_267B8EB68);
    }
    unint64_t add = atomic_fetch_add((atomic_ullong *volatile)qword_267B8EB60, 1uLL);
    v30 = &v32;
    int64_t v31 = add;
    std::string __p = &unk_26C759910;
    pxrInternal__aapl__pxrReserved__::TfNotice::Send((pxrInternal__aapl__pxrReserved__::TfNotice *)&__p);
    pxrInternal__aapl__pxrReserved__::SdfNotice::LayersDidChange::~LayersDidChange((pxrInternal__aapl__pxrReserved__::SdfNotice::LayersDidChange *)&__p);
    v30 = &v32;
    int64_t v31 = add;
    std::string __p = &unk_26C7598A8;
    std::string v24 = v32;
    v25 = (uint64_t *)v33;
    while (v24 != v25)
    {
      sub_216979C44((pxrInternal__aapl__pxrReserved__::TfNotice *)&__p, v24);
      v24 += 29;
    }
    if (*(void *)a2 == *((void *)a2 + 1))
    {
      sub_21697E070((void **)a2);
      int64_t v26 = v32;
      *(void *)a2 = v32;
      uint64_t v27 = v33;
      *(_OWORD *)((char *)a2 + 8) = v33;
      long long v33 = 0uLL;
      std::string::size_type v32 = 0;
      for (uint64_t j = v27; (uint64_t *)j != v26; sub_21697C668((uint64_t)v5, j))
        j -= 232;
      *((void *)a2 + 1) = v26;
    }
    pxrInternal__aapl__pxrReserved__::SdfNotice::LayersDidChangeSentPerLayer::~LayersDidChangeSentPerLayer((pxrInternal__aapl__pxrReserved__::SdfNotice::LayersDidChangeSentPerLayer *)&__p);
  }
  std::string __p = &v32;
  sub_21697C5D0((void ***)&__p);
}

void sub_21697A274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::string __p = &a17;
  sub_21697C5D0((void ***)&__p);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::SdfChangeBlock *pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::RemoveSpecIfInert(atomic_ullong *this, atomic_uint **a2)
{
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v10);
  char v11 = 0;
  uint64_t v4 = sub_2168520EC(this, &v11);
  uint64_t v5 = v4;
  long long v6 = *(atomic_uint ***)(v4 + 40);
  if ((unint64_t)v6 >= *(void *)(v4 + 48))
  {
    char v8 = sub_21697CF74((atomic_uint ***)(v4 + 32), a2);
  }
  else
  {
    char v7 = *a2;
    *long long v6 = *a2;
    if (v7) {
      atomic_fetch_add(v7, 1u);
    }
    char v8 = (char *)(v6 + 1);
  }
  *(void *)(v5 + 40) = v8;
  return sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v10);
}

void sub_21697A364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_21697A378(void *result, uint64_t a2, char *a3)
{
  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReserved__::SdfSpec"
            ">>::operator->() [T = std::vector<pxrInternal__aapl__pxrReserved__::SdfSpec>, Reverse = false]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

uint64_t sub_21697A3F4(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReserved__::SdfSpec"
            ">>::operator*() [T = std::vector<pxrInternal__aapl__pxrReserved__::SdfSpec>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_21697A46C()
{
}

void *sub_21697A474(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReser"
            "ved__::SdfSpec>>::operator++() [T = std::vector<pxrInternal__aapl__pxrReserved__::SdfSpec>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

uint64_t sub_21697A4F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    sub_21697E000((uint64_t)&v9, a3, *(void *)(a1 + 8), a2);
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        v7 -= 232;
        sub_21697C668(a1 + 16, v7);
      }
      while (v7 != v6);
    }
    *(void *)(a1 + 8) = v6;
  }
  return a2;
}

uint64_t sub_21697A584(uint64_t a1)
{
  sub_21677B834((uint64_t)v4);
  pxrInternal__aapl__pxrReserved__::operator<<(v4, a1, v2);
  std::stringbuf::str();
  v4[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v4 + *(void *)(v4[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v4[1] = MEMORY[0x263F8C318] + 16;
  if (v5 < 0) {
    operator delete((void *)v4[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x21D447E60](&v6);
}

void sub_21697A6B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21677B9CC((uint64_t)va);
  _Unwind_Resume(a1);
}

_WORD *pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::DidReplaceLayerContent(atomic_ullong *a1, uint64_t *a2)
{
  char v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a2);
  uint64_t result = (_WORD *)pxrInternal__aapl__pxrReserved__::SdfLayer::_ShouldNotify(v4);
  if (result)
  {
    char v8 = 0;
    uint64_t v6 = (uint64_t *)sub_2168520EC(a1, &v8);
    ListFor = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor((uint64_t)v6, v6, a2);
    return pxrInternal__aapl__pxrReserved__::SdfChangeList::DidReplaceLayerContent(ListFor);
  }
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor(uint64_t a1, uint64_t *a2, void *a3)
{
  unint64_t v5 = *a2;
  unint64_t v6 = a2[1];
  if (*a2 == v6) {
    goto LABEL_7;
  }
  while (1)
  {
    uint64_t v7 = sub_216851B24(v5);
    if (v7 == sub_216851B24((uint64_t)a3)) {
      break;
    }
    v5 += 232;
    if (v5 == v6)
    {
      unint64_t v5 = v6;
      break;
    }
  }
  if (v5 == a2[1])
  {
    unint64_t v5 = a2[1];
LABEL_7:
    char v11 = a3;
    if (v5 >= a2[2])
    {
      uint64_t v9 = sub_21697E820(a2, (uint64_t)&unk_2174BFD90, &v11);
    }
    else
    {
      uint64_t v8 = a3[1];
      *(void *)unint64_t v5 = *a3;
      *(void *)(v5 + 8) = v8;
      if (v8) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v8 + 8), 1u, memory_order_relaxed);
      }
      *(_OWORD *)(v5 + 192) = 0u;
      *(_OWORD *)(v5 + 208) = 0u;
      *(_OWORD *)(v5 + 160) = 0u;
      *(_OWORD *)(v5 + 176) = 0u;
      *(_OWORD *)(v5 + 128) = 0u;
      *(_OWORD *)(v5 + 144) = 0u;
      *(_OWORD *)(v5 + 96) = 0u;
      *(_OWORD *)(v5 + 112) = 0u;
      *(_OWORD *)(v5 + 64) = 0u;
      *(_OWORD *)(v5 + 80) = 0u;
      *(_OWORD *)(v5 + 32) = 0u;
      *(_OWORD *)(v5 + 48) = 0u;
      *(_OWORD *)(v5 + 16) = 0u;
      *(_DWORD *)(v5 + 220) = 1;
      uint64_t v9 = v5 + 232;
      *(void *)(v5 + 224) = 0;
    }
    a2[1] = v9;
    unint64_t v5 = v9 - 232;
  }
  return v5 + 16;
}

_WORD *pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::DidReloadLayerContent(atomic_ullong *a1, uint64_t *a2)
{
  char v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a2);
  uint64_t result = (_WORD *)pxrInternal__aapl__pxrReserved__::SdfLayer::_ShouldNotify(v4);
  if (result)
  {
    char v8 = 0;
    unint64_t v6 = (uint64_t *)sub_2168520EC(a1, &v8);
    ListFor = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor((uint64_t)v6, v6, a2);
    return pxrInternal__aapl__pxrReserved__::SdfChangeList::DidReloadLayerContent(ListFor);
  }
  return result;
}

std::string *pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::DidChangeLayerIdentifier(atomic_ullong *a1, uint64_t *a2, const std::string *a3)
{
  unint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a2);
  uint64_t result = (std::string *)pxrInternal__aapl__pxrReserved__::SdfLayer::_ShouldNotify(v6);
  if (result)
  {
    char v10 = 0;
    char v8 = (uint64_t *)sub_2168520EC(a1, &v10);
    ListFor = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor((uint64_t)v8, v8, a2);
    return pxrInternal__aapl__pxrReserved__::SdfChangeList::DidChangeLayerIdentifier(ListFor, a3);
  }
  return result;
}

_WORD *pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::DidChangeLayerResolvedPath(atomic_ullong *a1, uint64_t *a2)
{
  char v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a2);
  uint64_t result = (_WORD *)pxrInternal__aapl__pxrReserved__::SdfLayer::_ShouldNotify(v4);
  if (result)
  {
    char v8 = 0;
    unint64_t v6 = (uint64_t *)sub_2168520EC(a1, &v8);
    ListFor = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor((uint64_t)v6, v6, a2);
    return pxrInternal__aapl__pxrReserved__::SdfChangeList::DidChangeLayerResolvedPath(ListFor);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::DidChangeField(atomic_ullong *a1, uint64_t *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, uint64_t *a4, pxrInternal__aapl__pxrReserved__::VtValue *a5, pxrInternal__aapl__pxrReserved__::VtValue *a6)
{
  uint64_t v72 = *MEMORY[0x263EF8340];
  uint64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a2);
  uint64_t result = pxrInternal__aapl__pxrReserved__::SdfLayer::_ShouldNotify(v12);
  if (!result) {
    return result;
  }
  uint64_t v14 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v14) {
    uint64_t v14 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  __int16 v15 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v15) {
    __int16 v15 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  }
  LOBYTE(__p[0]) = 0;
  uint64_t result = sub_2168520EC(a1, __p);
  char v16 = (uint64_t *)result;
  unint64_t v17 = *a4 & 0xFFFFFFFFFFFFFFF8;
  if (v17 == (*((void *)v14 + 11) & 0xFFFFFFFFFFFFFFF8)) {
    goto LABEL_31;
  }
  if (v17 == (*((void *)v14 + 27) & 0xFFFFFFFFFFFFFFF8))
  {
    ListFor = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor(result, (uint64_t *)result, a2);
    uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::SdfChangeList::DidReorderPrims(ListFor, a3);
    goto LABEL_31;
  }
  if (v17 == (*((void *)v15 + 4) & 0xFFFFFFFFFFFFFFF8))
  {
    uint64_t result = sub_21697B404(a5, a6);
    if (result)
    {
      int v23 = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor(result, v16, a2);
      return (uint64_t)pxrInternal__aapl__pxrReserved__::SdfChangeList::DidReorderPrims(v23, a3);
    }
  }
  else
  {
    if (v17 == (*((void *)v14 + 34) & 0xFFFFFFFFFFFFFFF8))
    {
      std::string v24 = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor(result, (uint64_t *)result, a2);
      return (uint64_t)pxrInternal__aapl__pxrReserved__::SdfChangeList::DidReorderProperties(v24, a3);
    }
    if (v17 == (*((void *)v15 + 5) & 0xFFFFFFFFFFFFFFF8))
    {
      uint64_t result = sub_21697B404(a5, a6);
      if (result)
      {
        int64_t v26 = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor(result, v16, a2);
        return (uint64_t)pxrInternal__aapl__pxrReserved__::SdfChangeList::DidReorderProperties(v26, a3);
      }
    }
    else
    {
      if (v17 == (*((void *)v14 + 59) & 0xFFFFFFFFFFFFFFF8) || v17 == (*((void *)v15 + 8) & 0xFFFFFFFFFFFFFFF8))
      {
        v25 = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor(result, (uint64_t *)result, a2);
        uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::SdfChangeList::DidChangePrimVariantSets(v25, a3);
        goto LABEL_31;
      }
      if (v17 == (*((void *)v14 + 24) & 0xFFFFFFFFFFFFFFF8))
      {
        uint64_t v27 = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor(result, (uint64_t *)result, a2);
        uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::SdfChangeList::DidChangePrimInheritPaths(v27, a3);
        goto LABEL_31;
      }
      if (v17 == (*((void *)v14 + 38) & 0xFFFFFFFFFFFFFFF8))
      {
        std::string v28 = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor(result, (uint64_t *)result, a2);
        uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::SdfChangeList::DidChangePrimSpecializes(v28, a3);
        goto LABEL_31;
      }
      if (v17 == (*((void *)v14 + 35) & 0xFFFFFFFFFFFFFFF8))
      {
        v29 = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor(result, (uint64_t *)result, a2);
        uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::SdfChangeList::DidChangePrimReferences(v29, a3);
        goto LABEL_31;
      }
      if (v17 == (*((void *)v14 + 54) & 0xFFFFFFFFFFFFFFF8))
      {
        v30 = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor(result, (uint64_t *)result, a2);
        uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::SdfChangeList::DidChangeAttributeTimeSamples(v30, a3);
        goto LABEL_31;
      }
      if (v17 == (*((void *)v14 + 7) & 0xFFFFFFFFFFFFFFF8))
      {
        int64_t v31 = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor(result, (uint64_t *)result, a2);
        uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::SdfChangeList::DidChangeAttributeConnection(v31, a3);
        goto LABEL_31;
      }
      if (v17 == (*((void *)v14 + 53) & 0xFFFFFFFFFFFFFFF8))
      {
        std::string::size_type v32 = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor(result, (uint64_t *)result, a2);
        uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::SdfChangeList::DidChangeRelationshipTargets(v32, a3);
        goto LABEL_31;
      }
      if (v17 == (*((void *)v14 + 45) & 0xFFFFFFFFFFFFFFF8))
      {
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v67 = 0;
        long long v70 = 0uLL;
        uint64_t v71 = 0;
        v62 = 0;
        v63 = 0;
        uint64_t v64 = 0;
        sub_21697B580((uint64_t *)a5, (uint64_t)&v62, (uint64_t)v65);
        v60 = (void **)&v62;
        sub_216782F20(&v60);
        v60 = 0;
        long long v61 = 0uLL;
        sub_21697B580((uint64_t *)a6, (uint64_t)&v60, (uint64_t)&v62);
        v58 = (const void **)&v60;
        sub_216782F20((void ***)&v58);
        sub_21697E284((uint64_t)&v60, (const void **)v65[0], (const void **)v65[1]);
        sub_21697E284((uint64_t)&v58, (const void **)v62, (const void **)&v63->__vftable);
        sub_21697B610((long long *)v60, &v61, v58, (const void **)&v59, (uint64_t *)&v70);
        sub_21697B610((long long *)v58, &v59, (const void **)v60, (const void **)&v61, (uint64_t *)__p);
        if (__p[0] == __p[1] && (void)v70 == *((void *)&v70 + 1))
        {
          sub_21680CCCC((uint64_t *)&v70, (std::string *)v70, v60, &v61);
          sub_21680CCCC((uint64_t *)__p, (std::string *)__p[1], v58, &v59);
        }
        sub_21678A498((uint64_t)&v58, (char *)v59);
        sub_21678A498((uint64_t)&v60, (char *)v61);
        v60 = (void **)&v62;
        sub_216782F20(&v60);
        v62 = v65;
        sub_216782F20(&v62);
        *(_OWORD *)v65 = *(_OWORD *)__p;
        while (v65[0] != v65[1])
        {
          std::string::size_type v34 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor((uint64_t)v33, v16, a2);
          uint64_t v37 = sub_21686731C((uint64_t *)v65, v35, v36);
          pxrInternal__aapl__pxrReserved__::SdfChangeList::DidChangeSublayerPaths(v34, v37, 0);
          long long v33 = sub_21686739C(v65);
        }
        *(_OWORD *)v65 = v70;
        while (v65[0] != v65[1])
        {
          v38 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor((uint64_t)v33, v16, a2);
          uint64_t v41 = sub_21686731C((uint64_t *)v65, v39, v40);
          pxrInternal__aapl__pxrReserved__::SdfChangeList::DidChangeSublayerPaths(v38, v41, 1);
          long long v33 = sub_21686739C(v65);
        }
        v65[0] = &v70;
        sub_216782F20((void ***)v65);
        *(void *)&long long v70 = __p;
        sub_216782F20((void ***)&v70);
        goto LABEL_31;
      }
      if (v17 == (*((void *)v14 + 46) & 0xFFFFFFFFFFFFFFF8))
      {
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v67 = 0;
        sub_21697B658((uint64_t *)a5, (uint64_t)__p, &v70);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v67 = 0;
        sub_21697B658((uint64_t *)a6, (uint64_t)__p, v65);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        v42 = v65[0];
        if ((void *)(*((void *)&v70 + 1) - v70) == (void *)((char *)v65[1] - (char *)v65[0]))
        {
          uint64_t v43 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a2);
          pxrInternal__aapl__pxrReserved__::SdfLayer::GetSubLayerPaths(v43, (uint64_t)&v62);
          char v45 = v65[0];
          v44 = v65[1];
          if (sub_21697B6DC((uint64_t)&v62) == (v44 - v45) >> 4
            || (__p[0] = "sdf/changeManager.cpp",
                __p[1] = "DidChangeField",
                uint64_t v67 = 411,
                v68 = "void pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::DidChangeField(const SdfLayerHandle &, c"
                      "onst SdfPath &, const TfToken &, VtValue &&, const VtValue &)",
                char v69 = 0,
                (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)__p, "newOffsets.size() == subLayers.size()", 0) & 1) != 0))
          {
            v46 = (char *)v65[0];
            if (v65[1] != v65[0])
            {
              uint64_t v47 = 0;
              unint64_t v48 = 0;
              do
              {
                BOOL v49 = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator==((double *)(v70 + v47), (double *)&v46[v47]);
                if (!v49)
                {
                  v50 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor(v49, v16, a2);
                  sub_21697E720((uint64_t *)&v62, v48, __p);
                  pxrInternal__aapl__pxrReserved__::SdfChangeList::DidChangeSublayerPaths(v50, (uint64_t)__p, 2);
                  if (SHIBYTE(v67) < 0) {
                    operator delete(__p[0]);
                  }
                }
                ++v48;
                v46 = (char *)v65[0];
                v47 += 16;
              }
              while (v48 < ((char *)v65[1] - (char *)v65[0]) >> 4);
            }
          }
          if (v63) {
            sub_216784EC4(v63);
          }
          v42 = v65[0];
        }
        if (v42)
        {
          v65[1] = v42;
          operator delete(v42);
        }
        uint64_t result = v70;
        if ((void)v70)
        {
          *((void *)&v70 + 1) = v70;
          operator delete((void *)v70);
        }
        goto LABEL_31;
      }
      if (v17 == (*((void *)v14 + 56) & 0xFFFFFFFFFFFFFFF8))
      {
        uint64_t result = pxrInternal__aapl__pxrReserved__::SdfPath::IsMapperPath(a3);
        if ((result & 1) != 0
          || (uint64_t result = pxrInternal__aapl__pxrReserved__::SdfPath::IsExpressionPath(a3), result))
        {
          v51 = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor(result, v16, a2);
          pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a3, __p);
          pxrInternal__aapl__pxrReserved__::SdfChangeList::DidChangeAttributeConnection(v51, (const pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
          return (uint64_t)sub_21697B754(__p);
        }
        goto LABEL_31;
      }
      uint64_t v18 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v14 + 440);
      if (v17 == (*((void *)v14 + 55) & 0xFFFFFFFFFFFFFFF8))
      {
        if (*(void *)a3 == *(void *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)result)
          || (__p[0] = "sdf/changeManager.cpp",
              __p[1] = "DidChangeField",
              uint64_t v67 = 436,
              v68 = "void pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::DidChangeField(const SdfLayerHandle &, con"
                    "st SdfPath &, const TfToken &, VtValue &&, const VtValue &)",
              char v69 = 0,
              uint64_t result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)__p, "path == SdfPath::AbsoluteRootPath()", 0), (result & 1) != 0))
        {
          if (*((void *)a5 + 1))
          {
            sub_2168EE4C4(__p, a5);
          }
          else
          {
            v54 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a2);
            pxrInternal__aapl__pxrReserved__::SdfLayer::GetField(v54, a3, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v14 + 168), (pxrInternal__aapl__pxrReserved__::VtValue *)__p);
          }
          if (*((void *)a6 + 1))
          {
            uint64_t Field = (uint64_t)sub_2168EE4C4(&v70, a6);
          }
          else
          {
            v56 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a2);
            uint64_t Field = pxrInternal__aapl__pxrReserved__::SdfLayer::GetField(v56, a3, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v14 + 168), (pxrInternal__aapl__pxrReserved__::VtValue *)&v70);
          }
          v57 = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor(Field, v16, a2);
          pxrInternal__aapl__pxrReserved__::SdfChangeList::DidChangeInfo(v57, a3, (uint64_t *)v14 + 55, __p, &v70);
          sub_2168EE084((uint64_t)&v70);
          return sub_2168EE084((uint64_t)__p);
        }
        unint64_t v17 = *a4 & 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v20 = *((void *)v14 + 21);
      unint64_t v19 = (uint64_t *)((char *)v14 + 168);
      if (v17 != (v20 & 0xFFFFFFFFFFFFFFF8))
      {
LABEL_24:
        if (v17 == (*(void *)v15 & 0xFFFFFFFFFFFFFFF8)
          || v17 == (*((void *)v15 + 1) & 0xFFFFFFFFFFFFFFF8)
          || v17 == (*((void *)v15 + 6) & 0xFFFFFFFFFFFFFFF8)
          || v17 == (*((void *)v15 + 7) & 0xFFFFFFFFFFFFFFF8)
          || v17 == (*((void *)v15 + 8) & 0xFFFFFFFFFFFFFFF8))
        {
          return result;
        }
LABEL_31:
        std::string::size_type v22 = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor(result, v16, a2);
        return (uint64_t)pxrInternal__aapl__pxrReserved__::SdfChangeList::DidChangeInfo(v22, a3, a4, a5, a6);
      }
      uint64_t result = pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)result);
      if (*(void *)a3 != *(void *)result)
      {
        __p[0] = "sdf/changeManager.cpp";
        __p[1] = "DidChangeField";
        uint64_t v67 = 451;
        v68 = "void pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::DidChangeField(const SdfLayerHandle &, const Sdf"
              "Path &, const TfToken &, VtValue &&, const VtValue &)";
        char v69 = 0;
        uint64_t result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)__p, "path == SdfPath::AbsoluteRootPath()", 0);
        if ((result & 1) == 0)
        {
          unint64_t v17 = *a4 & 0xFFFFFFFFFFFFFFF8;
          goto LABEL_24;
        }
      }
      v52 = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor(result, v16, a2);
      sub_2168EE4C4(__p, a5);
      pxrInternal__aapl__pxrReserved__::SdfChangeList::DidChangeInfo(v52, a3, v19, __p, a6);
      sub_2168EE084((uint64_t)__p);
      v53 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a2);
      uint64_t result = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v53, a3, v18, 0);
      if ((result & 1) == 0) {
        return (uint64_t)pxrInternal__aapl__pxrReserved__::SdfChangeList::DidChangeInfo(v52, a3, (uint64_t *)v18, a5, a6);
      }
    }
  }
  return result;
}

void sub_21697B298(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a17) {
    sub_216784EC4(a17);
  }
  if (__p) {
    operator delete(__p);
  }
  v30 = *(void **)(v28 + 48);
  if (v30)
  {
    *(void *)(v28 + 56) = v30;
    operator delete(v30);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_21697B404(pxrInternal__aapl__pxrReserved__::VtValue *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  if (*((void *)a1 + 1)) {
    BOOL v2 = *((void *)a2 + 1) == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2) {
    return 0;
  }
  uint64_t v4 = sub_21697BF28(a1);
  unint64_t v5 = (uint64_t **)sub_21697BF28(a2);
  unint64_t v6 = *(uint64_t **)(v4 + 8);
  if ((uint64_t *)((char *)v6 - *(void *)v4) != (uint64_t *)((char *)v5[1] - (char *)*v5)) {
    return 0;
  }
  uint64_t v7 = v5;
  sub_21697C0D8((uint64_t)&v19, *(uint64_t **)v4, v6);
  sub_21697C0D8((uint64_t)v18, *v7, v7[1]);
  if (v20[1] == (void *)v18[2])
  {
    char v8 = v19;
    if (v19 == v20)
    {
      BOOL v12 = 1;
    }
    else
    {
      uint64_t v9 = (void *)v18[0];
      do
      {
        unint64_t v10 = v8[4] & 0xFFFFFFFFFFFFFFF8;
        unint64_t v11 = v9[4] & 0xFFFFFFFFFFFFFFF8;
        BOOL v12 = v10 == v11;
        if (v10 != v11) {
          break;
        }
        uint64_t v13 = (void *)v8[1];
        uint64_t v14 = v8;
        if (v13)
        {
          do
          {
            char v8 = v13;
            uint64_t v13 = (void *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            char v8 = (void *)v14[2];
            BOOL v2 = *v8 == (void)v14;
            uint64_t v14 = v8;
          }
          while (!v2);
        }
        __int16 v15 = (void *)v9[1];
        if (v15)
        {
          do
          {
            char v16 = v15;
            __int16 v15 = (void *)*v15;
          }
          while (v15);
        }
        else
        {
          do
          {
            char v16 = (void *)v9[2];
            BOOL v2 = *v16 == (void)v9;
            uint64_t v9 = v16;
          }
          while (!v2);
        }
        uint64_t v9 = v16;
      }
      while (v8 != v20);
    }
  }
  else
  {
    BOOL v12 = 0;
  }
  sub_2168CB05C((uint64_t)v18, (void *)v18[1]);
  sub_2168CB05C((uint64_t)&v19, v20[0]);
  return v12;
}

void sub_21697B568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, void *a15)
{
}

char *sub_21697B580@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (sub_21697E1F8((pxrInternal__aapl__pxrReserved__::VtValue *)a1))
  {
    uint64_t v6 = a1[1];
    if ((v6 & 4) != 0) {
      a2 = (*(uint64_t (**)(uint64_t *))((v6 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
    }
    else {
      a2 = *a1;
    }
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v7 = *(long long **)a2;
  char v8 = *(long long **)(a2 + 8);
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v8 - *(void *)a2) >> 3);

  return sub_216812BD8((char *)a3, v7, v8, v9);
}

uint64_t sub_21697B610(long long *a1, long long *a2, const void **a3, const void **a4, uint64_t *a5)
{
  unint64_t v11 = a2;
  BOOL v12 = a1;
  unint64_t v9 = a4;
  unint64_t v10 = a3;
  char v8 = a5;
  sub_21697E308(&v12, &v11, &v10, &v9, &v8, (uint64_t)&v7);
  return v5;
}

void *sub_21697B658@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (sub_21697E5A0((pxrInternal__aapl__pxrReserved__::VtValue *)a1))
  {
    uint64_t v6 = a1[1];
    if ((v6 & 4) != 0) {
      a2 = (*(uint64_t (**)(uint64_t *))((v6 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
    }
    else {
      a2 = *a1;
    }
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  char v7 = *(const void **)a2;
  uint64_t v8 = *(void *)(a2 + 8);
  unint64_t v9 = (v8 - *(void *)a2) >> 4;

  return sub_21697E62C(a3, v7, v8, v9);
}

unint64_t sub_21697B6DC(uint64_t a1)
{
  if (!sub_21697E6A8(a1)) {
    return 0;
  }
  unint64_t result = *(void *)a1;
  if (*(void *)a1)
  {
    long long v3 = (void *)(*(uint64_t (**)(unint64_t, void))(*(void *)result + 112))(result, *(unsigned int *)(a1 + 16));
    return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[1] - *v3) >> 3);
  }
  return result;
}

_DWORD *sub_21697B754(_DWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);

  return sub_21697C414(a1);
}

_WORD *pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::DidChangeAttributeTimeSamples(atomic_ullong *a1, void *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  char v8 = 0;
  uint64_t v5 = (uint64_t *)sub_2168520EC(a1, &v8);
  ListFor = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor((uint64_t)v5, v5, a2);
  return pxrInternal__aapl__pxrReserved__::SdfChangeList::DidChangeAttributeTimeSamples(ListFor, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::DidMoveSpec(atomic_ullong *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, pxrInternal__aapl__pxrReserved__::SdfPath *a4)
{
  char v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a2);
  uint64_t result = pxrInternal__aapl__pxrReserved__::SdfLayer::_ShouldNotify(v8);
  if (result)
  {
    LOBYTE(v35) = 0;
    unint64_t v10 = (uint64_t *)sub_2168520EC(a1, &v35);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a3, &v35);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a4, &v34);
    uint64_t v12 = v34;
    uint64_t v11 = v35;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v34 + 1);
    sub_21697C414(&v34);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v35 + 1);
    sub_21697C414(&v35);
    BOOL IsPrimPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(a3);
    if (v11 == v12)
    {
      if (IsPrimPath)
      {
        ListFor = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor(IsPrimPath, v10, a2);
        return (uint64_t)pxrInternal__aapl__pxrReserved__::SdfChangeList::DidChangePrimName(ListFor, a3, a4);
      }
      uint64_t IsPropertyPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(a3);
      if (IsPropertyPath)
      {
        unint64_t v17 = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor(IsPropertyPath, v10, a2);
        return (uint64_t)pxrInternal__aapl__pxrReserved__::SdfChangeList::DidChangePropertyName(v17, a3, a4);
      }
      uint64_t result = pxrInternal__aapl__pxrReserved__::SdfPath::IsTargetPath(a3);
      if (result)
      {
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a3, &v35);
        std::string::size_type v22 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a2);
        uint64_t SpecType = pxrInternal__aapl__pxrReserved__::SdfLayer::GetSpecType(v22, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v35);
        if (SpecType == 8)
        {
          v30 = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor(SpecType, v10, a2);
          pxrInternal__aapl__pxrReserved__::SdfChangeList::DidChangeRelationshipTargets(v30, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v35);
        }
        else if (SpecType == 1)
        {
          std::string v24 = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor(SpecType, v10, a2);
          pxrInternal__aapl__pxrReserved__::SdfChangeList::DidChangeAttributeConnection(v24, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v35);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v35 + 1);
        return (uint64_t)sub_21697C414(&v35);
      }
    }
    else
    {
      if (IsPrimPath)
      {
        __int16 v15 = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor(IsPrimPath, v10, a2);
        return (uint64_t)pxrInternal__aapl__pxrReserved__::SdfChangeList::DidMovePrim(v15, a3, a4);
      }
      uint64_t v18 = pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(a3);
      if (v18)
      {
        unint64_t v19 = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor(v18, v10, a2);
        uint64_t v20 = pxrInternal__aapl__pxrReserved__::SdfChangeList::DidRemoveProperty(v19, a3, 0);
        uint64_t v21 = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor(v20, v10, a2);
        return pxrInternal__aapl__pxrReserved__::SdfChangeList::DidAddProperty(v21, a4, 0);
      }
      uint64_t result = pxrInternal__aapl__pxrReserved__::SdfPath::IsTargetPath(a3);
      if (result)
      {
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a3, &v35);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a4, &v34);
        v25 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a2);
        uint64_t v26 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetSpecType(v25, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v35);
        if (v26 == 8)
        {
          int64_t v31 = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor(v26, v10, a2);
          std::string::size_type v32 = pxrInternal__aapl__pxrReserved__::SdfChangeList::DidChangeRelationshipTargets(v31, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v35);
          long long v33 = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor((uint64_t)v32, v10, a2);
          pxrInternal__aapl__pxrReserved__::SdfChangeList::DidChangeRelationshipTargets(v33, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v34);
        }
        else if (v26 == 1)
        {
          uint64_t v27 = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor(v26, v10, a2);
          uint64_t v28 = pxrInternal__aapl__pxrReserved__::SdfChangeList::DidChangeAttributeConnection(v27, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v35);
          v29 = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor((uint64_t)v28, v10, a2);
          pxrInternal__aapl__pxrReserved__::SdfChangeList::DidChangeAttributeConnection(v29, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v34);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v34 + 1);
        sub_21697C414(&v34);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v35 + 1);
        return (uint64_t)sub_21697C414(&v35);
      }
    }
  }
  return result;
}

void sub_21697BA8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::DidAddSpec(atomic_ullong *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, int a4)
{
  char v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a2);
  if (pxrInternal__aapl__pxrReserved__::SdfLayer::_ShouldNotify(v8))
  {
    LOBYTE(v23[0]) = 0;
    unint64_t v9 = (uint64_t *)sub_2168520EC(a1, v23);
    uint64_t IsPrimPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(a3);
    if ((IsPrimPath & 1) != 0
      || (uint64_t IsPrimPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimVariantSelectionPath(a3), IsPrimPath))
    {
      ListFor = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor(IsPrimPath, v9, a2);
      pxrInternal__aapl__pxrReserved__::SdfChangeList::DidAddPrim(ListFor, a3, a4);
    }
    else
    {
      uint64_t IsPropertyPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(a3);
      if (IsPropertyPath)
      {
        uint64_t v13 = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor(IsPropertyPath, v9, a2);
        pxrInternal__aapl__pxrReserved__::SdfChangeList::DidAddProperty(v13, a3, a4);
      }
      else
      {
        uint64_t IsTargetPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsTargetPath(a3);
        if (IsTargetPath)
        {
          __int16 v15 = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor(IsTargetPath, v9, a2);
          pxrInternal__aapl__pxrReserved__::SdfChangeList::DidAddTarget(v15, a3);
        }
        else if ((pxrInternal__aapl__pxrReserved__::SdfPath::IsMapperPath(a3) & 1) == 0 {
               && (pxrInternal__aapl__pxrReserved__::SdfPath::IsMapperArgPath(a3) & 1) == 0)
        }
        {
          uint64_t IsExpressionPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsExpressionPath(a3);
          if (IsExpressionPath)
          {
            unint64_t v17 = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor(IsExpressionPath, v9, a2);
            pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a3, v23);
            pxrInternal__aapl__pxrReserved__::SdfChangeList::DidChangeAttributeConnection(v17, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v23);
            sub_21697B754(v23);
          }
          else
          {
            v23[0] = "sdf/changeManager.cpp";
            v23[1] = "DidAddSpec";
            v23[2] = 582;
            v23[3] = "void pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::DidAddSpec(const SdfLayerHandle &, const "
                     "SdfPath &, BOOL)";
            char v24 = 0;
            pxrInternal__aapl__pxrReserved__::SdfPath::GetString(a3);
            std::operator+<char>();
            uint64_t v18 = std::string::append(&v20, ">");
            long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
            std::string::size_type v22 = v18->__r_.__value_.__r.__words[2];
            *(_OWORD *)std::string __p = v19;
            v18->__r_.__value_.__l.__size_ = 0;
            v18->__r_.__value_.__r.__words[2] = 0;
            v18->__r_.__value_.__r.__words[0] = 0;
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v23, 1, (uint64_t *)__p);
            if (SHIBYTE(v22) < 0) {
              operator delete(__p[0]);
            }
            if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v20.__r_.__value_.__l.__data_);
            }
          }
        }
      }
    }
  }
}

void sub_21697BC94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::DidRemoveSpec(atomic_ullong *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, int a4)
{
  char v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a2);
  if (pxrInternal__aapl__pxrReserved__::SdfLayer::_ShouldNotify(v8))
  {
    LOBYTE(v23[0]) = 0;
    unint64_t v9 = (uint64_t *)sub_2168520EC(a1, v23);
    uint64_t IsPrimPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(a3);
    if ((IsPrimPath & 1) != 0
      || (uint64_t IsPrimPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimVariantSelectionPath(a3), IsPrimPath))
    {
      ListFor = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor(IsPrimPath, v9, a2);
      pxrInternal__aapl__pxrReserved__::SdfChangeList::DidRemovePrim(ListFor, a3, a4);
    }
    else
    {
      uint64_t IsPropertyPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(a3);
      if (IsPropertyPath)
      {
        uint64_t v13 = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor(IsPropertyPath, v9, a2);
        pxrInternal__aapl__pxrReserved__::SdfChangeList::DidRemoveProperty(v13, a3, a4);
      }
      else
      {
        uint64_t IsTargetPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsTargetPath(a3);
        if (IsTargetPath)
        {
          __int16 v15 = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor(IsTargetPath, v9, a2);
          pxrInternal__aapl__pxrReserved__::SdfChangeList::DidRemoveTarget(v15, a3);
        }
        else if ((pxrInternal__aapl__pxrReserved__::SdfPath::IsMapperPath(a3) & 1) == 0 {
               && (pxrInternal__aapl__pxrReserved__::SdfPath::IsMapperArgPath(a3) & 1) == 0)
        }
        {
          uint64_t IsExpressionPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsExpressionPath(a3);
          if (IsExpressionPath)
          {
            unint64_t v17 = (pxrInternal__aapl__pxrReserved__::SdfChangeList *)pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_GetListFor(IsExpressionPath, v9, a2);
            pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a3, v23);
            pxrInternal__aapl__pxrReserved__::SdfChangeList::DidChangeAttributeConnection(v17, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v23);
            sub_21697B754(v23);
          }
          else
          {
            v23[0] = "sdf/changeManager.cpp";
            v23[1] = "DidRemoveSpec";
            v23[2] = 613;
            v23[3] = "void pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::DidRemoveSpec(const SdfLayerHandle &, con"
                     "st SdfPath &, BOOL)";
            char v24 = 0;
            pxrInternal__aapl__pxrReserved__::SdfPath::GetString(a3);
            std::operator+<char>();
            uint64_t v18 = std::string::append(&v20, ">");
            long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
            std::string::size_type v22 = v18->__r_.__value_.__r.__words[2];
            *(_OWORD *)std::string __p = v19;
            v18->__r_.__value_.__l.__size_ = 0;
            v18->__r_.__value_.__r.__words[2] = 0;
            v18->__r_.__value_.__r.__words[0] = 0;
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v23, 1, (uint64_t *)__p);
            if (SHIBYTE(v22) < 0) {
              operator delete(__p[0]);
            }
            if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v20.__r_.__value_.__l.__data_);
            }
          }
        }
      }
    }
  }
}

void sub_21697BEAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::SdfChangeBlock *sub_21697BEF0(pxrInternal__aapl__pxrReserved__::SdfChangeBlock *a1)
{
  if (*(void *)a1) {
    pxrInternal__aapl__pxrReserved__::SdfChangeBlock::_CloseChangeBlock(a1, *(char **)a1);
  }
  return a1;
}

uint64_t sub_21697BF28(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (sub_21697BFBC(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_21697C048, (uint64_t)&stru_26C74C2D0);
  }
}

uint64_t sub_21697BFBC(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000002174694DALL & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;

  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C74C2D0);
}

void *sub_21697C048@<X0>(void *a1@<X8>)
{
  uint64_t result = operator new(0x18uLL);
  result[1] = 0;
  result[2] = 0;
  void *result = 0;
  *a1 = result;
  a1[1] = sub_21697C094;
  a1[2] = &stru_26C74C2D0;
  return result;
}

void sub_21697C094(void **a1)
{
  if (a1)
  {
    uint64_t v2 = a1;
    sub_216889A04(&v2);
    operator delete(a1);
  }
}

uint64_t sub_21697C0D8(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_21697C15C((uint64_t **)a1, v4, v6, v6);
      ++v6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_21697C144(_Unwind_Exception *a1)
{
  sub_2168CB05C(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_21697C15C(uint64_t **a1, void *a2, void *a3, uint64_t *a4)
{
  uint64_t v6 = (uint64_t **)sub_21697C1E0(a1, a2, &v10, &v9, a3);
  uint64_t result = *v6;
  if (!*v6)
  {
    sub_21697C3A4((uint64_t)a1, a4, (uint64_t)&v8);
    sub_21677B358(a1, v10, v6, v8);
    return v8;
  }
  return result;
}

void *sub_21697C1E0(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (unint64_t v6 = *a5 & 0xFFFFFFFFFFFFFFF8, v7 = a2[4] & 0xFFFFFFFFFFFFFFF8, v6 < v7))
  {
    uint64_t v8 = *a2;
    if ((void *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      uint64_t v9 = (void *)*a2;
      do
      {
        uint64_t v10 = v9;
        uint64_t v9 = (void *)v9[1];
      }
      while (v9);
    }
    else
    {
      uint64_t v13 = a2;
      do
      {
        uint64_t v10 = (void *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        uint64_t v13 = v10;
      }
      while (v14);
    }
    unint64_t v15 = *a5 & 0xFFFFFFFFFFFFFFF8;
    if ((v10[4] & 0xFFFFFFFFFFFFFFF8) < v15) {
      goto LABEL_17;
    }
    char v16 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          unint64_t v17 = v16;
          unint64_t v18 = v16[4] & 0xFFFFFFFFFFFFFFF8;
          if (v15 >= v18) {
            break;
          }
          char v16 = (void *)*v17;
          uint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        uint64_t v5 = v17 + 1;
        char v16 = (void *)v17[1];
      }
      while (v16);
    }
    else
    {
      unint64_t v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    uint64_t v12 = (void *)a2[1];
    do
    {
      a4 = v12;
      uint64_t v12 = (void *)*v12;
    }
    while (v12);
  }
  else
  {
    long long v19 = a2;
    do
    {
      a4 = (void *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      long long v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= (a4[4] & 0xFFFFFFFFFFFFFFF8))
  {
    std::string v20 = (void *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v21 = v20;
          unint64_t v22 = v20[4] & 0xFFFFFFFFFFFFFFF8;
          if (v6 >= v22) {
            break;
          }
          std::string v20 = (void *)*v21;
          uint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        uint64_t v5 = v21 + 1;
        std::string v20 = (void *)v21[1];
      }
      while (v20);
    }
    else
    {
      uint64_t v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void *sub_21697C3A4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t result = operator new(0x28uLL);
  *(void *)a3 = result;
  *(void *)(a3 + 8) = v5;
  uint64_t v7 = *a2;
  result[4] = *a2;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    result[4] &= 0xFFFFFFFFFFFFFFF8;
  }
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

_DWORD *sub_21697C414(_DWORD *a1)
{
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a1))
  {
    Ptr = (atomic_uint *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(a1);
    if ((atomic_fetch_add(Ptr + 2, 0xFFFFFFFF) & 0x7FFFFFFF) == 1) {
      sub_21697C468((pxrInternal__aapl__pxrReserved__::Sdf_PathNode *)Ptr);
    }
  }
  return a1;
}

void sub_21697C468(pxrInternal__aapl__pxrReserved__::Sdf_PathNode *a1)
{
  switch(*((unsigned char *)a1 + 14))
  {
    case 0:
      uint64_t v1 = sub_21697C53C(a1);
      goto LABEL_5;
    case 1:
      pxrInternal__aapl__pxrReserved__::Sdf_PrimPathNode::~Sdf_PrimPathNode(a1);
      goto LABEL_5;
    case 2:
      pxrInternal__aapl__pxrReserved__::Sdf_PrimVariantSelectionNode::~Sdf_PrimVariantSelectionNode(a1);
LABEL_5:
      pxrInternal__aapl__pxrReserved__::Sdf_PrimPartPathNode::operator delete((uint64_t)v1);
      return;
    case 3:
      pxrInternal__aapl__pxrReserved__::Sdf_PrimPropertyPathNode::~Sdf_PrimPropertyPathNode(a1);
      goto LABEL_14;
    case 4:
      pxrInternal__aapl__pxrReserved__::Sdf_TargetPathNode::~Sdf_TargetPathNode(a1);
      goto LABEL_14;
    case 5:
      pxrInternal__aapl__pxrReserved__::Sdf_MapperPathNode::~Sdf_MapperPathNode(a1);
      goto LABEL_14;
    case 6:
      pxrInternal__aapl__pxrReserved__::Sdf_RelationalAttributePathNode::~Sdf_RelationalAttributePathNode(a1);
      goto LABEL_14;
    case 7:
      pxrInternal__aapl__pxrReserved__::Sdf_MapperArgPathNode::~Sdf_MapperArgPathNode(a1);
      goto LABEL_14;
    case 8:
      pxrInternal__aapl__pxrReserved__::Sdf_ExpressionPathNode::~Sdf_ExpressionPathNode(a1);
LABEL_14:
      pxrInternal__aapl__pxrReserved__::Sdf_PropPartPathNode::operator delete(v2);
      break;
    default:
      return;
  }
}

uint64_t *sub_21697C53C(pxrInternal__aapl__pxrReserved__::Sdf_PathNode *this)
{
  if ((*((_DWORD *)this + 2) & 0x80000000) != 0) {
    pxrInternal__aapl__pxrReserved__::Sdf_PathNode::_RemovePathTokenFromTable((unint64_t)this);
  }

  return sub_21697C584((uint64_t *)this);
}

uint64_t *sub_21697C584(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2 && (atomic_fetch_add((atomic_uint *volatile)(v2 + 8), 0xFFFFFFFF) & 0x7FFFFFFF) == 1) {
    sub_21697C468();
  }
  return a1;
}

void sub_21697C5D0(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 232;
        sub_21697C668((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

atomic_uint *sub_21697C668(uint64_t a1, uint64_t a2)
{
  long long v3 = (void **)(a2 + 16);
  sub_21697C6F8((uint64_t *)(a2 + 224), 0);
  sub_21697C7F8(v3);
  uint64_t result = *(atomic_uint **)(a2 + 8);
  if (result && atomic_fetch_add_explicit(result + 2, 0xFFFFFFFF, memory_order_release) == 1)
  {
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)result + 8);
    return (atomic_uint *)v5();
  }
  return result;
}

void sub_21697C6F8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_21697C738(v3);
    operator delete(v4);
  }
}

uint64_t sub_21697C738(uint64_t a1)
{
  sub_21697C774(a1, *(_DWORD **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_21697C774(uint64_t a1, _DWORD *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = *(_DWORD **)v2;
      sub_21697C7B8(v2 + 4);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

_DWORD *sub_21697C7B8(_DWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);

  return sub_21697C414(a1);
}

void **sub_21697C7F8(void **a1)
{
  if (*((_DWORD *)a1 + 51) >= 2u) {
    free(*a1);
  }
  return a1;
}

_DWORD *sub_21697C838(_DWORD *result)
{
  uint64_t v1 = result;
  if (result[51] >= 2u) {
    uint64_t v1 = *(_DWORD **)result;
  }
  unsigned int v2 = result[50];
  if (v2)
  {
    unint64_t v3 = 0;
    uint64_t v4 = 200 * v2;
    do
    {
      uint64_t v5 = (void **)&v1[v3 / 4];
      if (SHIBYTE(v1[v3 / 4 + 47]) < 0) {
        operator delete(v5[21]);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v5 + 41);
      sub_21697C414(&v1[v3 / 4 + 40]);
      unint64_t v6 = (void **)&v1[v3 / 4 + 34];
      sub_2168706D8(&v6);
      sub_21697C960((uint64_t)(v5 + 1));
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v1[v3 / 4 + 1]);
      uint64_t result = sub_21697C414(&v1[v3 / 4]);
      v3 += 200;
    }
    while (v4 != v3);
  }
  return result;
}

uint64_t sub_21697C8FC(uint64_t a1)
{
  if (*(char *)(a1 + 183) < 0) {
    operator delete(*(void **)(a1 + 160));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 156));
  sub_21697C414((_DWORD *)(a1 + 152));
  unint64_t v3 = (void **)(a1 + 128);
  sub_2168706D8(&v3);
  return sub_21697C960(a1);
}

uint64_t sub_21697C960(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 124) >= 4u) {
    free(*(void **)a1);
  }
  return a1;
}

uint64_t sub_21697C9A0(uint64_t result)
{
  uint64_t v1 = result;
  if (*(_DWORD *)(result + 124) >= 4u) {
    uint64_t v1 = *(void *)result;
  }
  uint64_t v2 = *(unsigned int *)(result + 120);
  if (v2)
  {
    uint64_t v3 = 40 * v2;
    uint64_t v4 = v1 + 24;
    do
    {
      sub_2168EE084(v4);
      uint64_t result = sub_2168EE084(v4 - 16);
      uint64_t v5 = *(void *)(v4 - 24);
      if ((v5 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      v4 += 40;
      v3 -= 40;
    }
    while (v3);
  }
  return result;
}

void sub_21697CA24(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(v4 - 8));
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager *pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::Sdf_ChangeManager(pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager *this)
{
  *(void *)this = &unk_26C74B518;
  __dmb(0xBu);
  *((void *)this + 1) = 0;
  __dmb(0xBu);
  *((void *)this + 2) = 0;
  *(void *)this = &unk_26C754AA8;
  uint64_t v2 = (void *)tbb::internal::allocate_via_handler_v3((tbb::internal *)8);
  *uint64_t v2 = &unk_26C754B08;
  *((void *)this + 3) = v2;
  for (uint64_t i = 72; i != 96; i += 8)
    *(void *)((char *)this + i) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 8) = (char *)this + 72;
  *((void *)this + 5) = sub_21697CD14;
  return this;
}

void sub_21697CB74(_Unwind_Exception *a1)
{
  *uint64_t v1 = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_21697CB7C(uint64_t a1)
{
  uint64_t v2 = tbb::internal::concurrent_vector_base_v3::internal_grow_by((atomic_ullong *)(a1 + 40), 1uLL, (void *)0x80, (void (*)(void *, const void *, unint64_t))tbb::concurrent_vector<tbb::internal::padded<tbb::interface6::internal::ets_element<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_Data>,128ul>,tbb::cache_aligned_allocator<tbb::internal::padded<tbb::interface6::internal::ets_element<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_Data>,128ul>>>::initialize_array, 0);
  unint64_t v3 = sub_216851020((unint64_t)v2);
  uint64_t v4 = *(void *)(a1 + 64);
  __dmb(0xBu);
  uint64_t v5 = *(void *)(v4 + 8 * v3) + (((void)v2 - ((1 << v3) & 0x1FFFFFFFFFFFFFELL)) << 7);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24), v5);
  *(unsigned char *)(v5 + 56) = 1;
  return v5;
}

uint64_t sub_21697CC24(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return tbb::internal::NFS_Allocate((unint64_t)(a2 + 7) >> 3, 8, 0, a4);
}

uint64_t sub_21697CC38(int a1, tbb::internal *this)
{
  return tbb::internal::NFS_Free(this, this);
}

void sub_21697CC40(pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::~Sdf_ChangeManager(a1);

  operator delete(v1);
}

void *sub_21697CC68()
{
  uint64_t result = (void *)tbb::internal::allocate_via_handler_v3((tbb::internal *)8);
  void *result = &unk_26C754B08;
  return result;
}

uint64_t sub_21697CCA0(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);

  return tbb::internal::deallocate_via_handler_v3(a1, v2);
}

double sub_21697CD00(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 48) = 0;
  double result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  return result;
}

uint64_t sub_21697CD14(int a1, tbb::internal *this, uint64_t a3, void *a4)
{
  return tbb::internal::NFS_Allocate((unint64_t)this, 128, 0, a4);
}

void tbb::concurrent_vector<tbb::internal::padded<tbb::interface6::internal::ets_element<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_Data>,128ul>,tbb::cache_aligned_allocator<tbb::internal::padded<tbb::interface6::internal::ets_element<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_Data>,128ul>>>::initialize_array(void *a1, uint64_t a2, uint64_t a3)
{
  if (a3) {
    bzero(a1, a3 << 7);
  }
}

void pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::~Sdf_ChangeManager(pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager *this)
{
  *(void *)this = &unk_26C754AA8;
  uint64_t v2 = *((void *)this + 3);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  sub_216850D6C((uint64_t)this);
  sub_21697CDD0((unint64_t *)this + 4);
  *(void *)this = &unk_26C74B518;
}

unint64_t *sub_21697CDD0(unint64_t *a1)
{
  uint64_t v2 = (tbb::internal::concurrent_vector_base_v3 *)(a1 + 1);
  unint64_t v3 = (void *)a1[4];
  unint64_t v4 = tbb::internal::concurrent_vector_base_v3::internal_clear((tbb::internal::concurrent_vector_base_v3 *)(a1 + 1), (void (*)(void *, unint64_t))tbb::concurrent_vector<tbb::internal::padded<tbb::interface6::internal::ets_element<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_Data>,128ul>,tbb::cache_aligned_allocator<tbb::internal::padded<tbb::interface6::internal::ets_element<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_Data>,128ul>>>::destroy_array);
  sub_216850F48((uint64_t)a1, v3, v4, a1[2]);
  tbb::internal::concurrent_vector_base_v3::~concurrent_vector_base_v3(v2, v5);
  return a1;
}

uint64_t tbb::concurrent_vector<tbb::internal::padded<tbb::interface6::internal::ets_element<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_Data>,128ul>,tbb::cache_aligned_allocator<tbb::internal::padded<tbb::interface6::internal::ets_element<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_Data>,128ul>>>::destroy_array(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    double result = result + (a2 << 7) - 128;
    do
    {
      --v2;
      double result = sub_21697CE7C(result) - 128;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_21697CE7C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 56))
  {
    unint64_t v3 = (void **)(a1 + 32);
    sub_21697CA24(&v3);
    unint64_t v3 = (void **)a1;
    sub_21697C5D0(&v3);
    *(unsigned char *)(a1 + 56) = 0;
  }
  return a1;
}

uint64_t sub_21697CED0(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1 + 1;
  if (!v3) {
    return 0;
  }
  if (*(unsigned char *)(sub_216850B68(v2) + 14)) {
    return *a1;
  }
  return 0;
}

uint64_t (*sub_21697CF14(void *a1))(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1 + 1;
  if (!v3) {
    return 0;
  }
  int v4 = *(unsigned __int8 *)(sub_216850B68(v2) + 14);
  if (*a1) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    return 0;
  }
  else {
    return sub_21697CED0;
  }
}

char *sub_21697CF74(atomic_uint ***a1, atomic_uint **a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1] - *a1;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 61) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = (char *)a1[2] - (char *)v3;
  if (v8 >> 2 > v5) {
    unint64_t v5 = v8 >> 2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  v25 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_21677CB28(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = (atomic_uint **)&v10[8 * v4];
  unint64_t v22 = v10;
  v23.i64[0] = (uint64_t)v11;
  v23.i64[1] = (uint64_t)v11;
  char v24 = &v10[8 * v9];
  uint64_t v12 = *a2;
  long long *v11 = *a2;
  if (v12)
  {
    atomic_fetch_add(v12, 1u);
    uint64_t v13 = (char *)v23.i64[1];
    uint64_t v11 = (atomic_uint **)v23.i64[0];
  }
  else
  {
    uint64_t v13 = &v10[8 * v4];
  }
  BOOL v14 = v13 + 8;
  v23.i64[1] = (uint64_t)(v13 + 8);
  char v16 = *a1;
  unint64_t v15 = (unint64_t)a1[1];
  if ((atomic_uint **)v15 == *a1)
  {
    int64x2_t v19 = vdupq_n_s64(v15);
  }
  else
  {
    do
    {
      unint64_t v18 = *(atomic_uint **)(v15 - 8);
      v15 -= 8;
      unint64_t v17 = v18;
      *--uint64_t v11 = v18;
      if (v18) {
        atomic_fetch_add(v17, 1u);
      }
    }
    while ((atomic_uint **)v15 != v16);
    int64x2_t v19 = *(int64x2_t *)a1;
    BOOL v14 = (char *)v23.i64[1];
  }
  *a1 = v11;
  a1[1] = (atomic_uint **)v14;
  int64x2_t v23 = v19;
  std::string v20 = (char *)a1[2];
  a1[2] = (atomic_uint **)v24;
  char v24 = v20;
  unint64_t v22 = (char *)v19.i64[0];
  sub_21697D09C((uint64_t)&v22);
  return v14;
}

uint64_t sub_21697D09C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(i - 8));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_21697D0EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(atomic_uint **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a2 + 8) = 0;
  if (v4 && atomic_fetch_add_explicit(v4 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v4 + 8))(v4);
  }
  *(void *)a2 = 0;
  return a1;
}

uint64_t sub_21697D164(uint64_t a1, uint64_t a2)
{
  if (a1 != a2) {
    sub_21697D1B0(a1, (int *)a2);
  }
  uint64_t v4 = *(void *)(a2 + 208);
  *(void *)(a2 + 208) = 0;
  sub_21697C6F8((uint64_t *)(a1 + 208), v4);
  return a1;
}

uint64_t sub_21697D1B0(uint64_t result, int *a2)
{
  uint64_t v2 = result;
  unsigned int v3 = a2[51];
  if (*(_DWORD *)(result + 204) > 1u)
  {
    if (v3 >= 2)
    {
      uint64_t v31 = *(void *)result;
      *(void *)double result = *(void *)a2;
      *(void *)a2 = v31;
      LODWORD(v31) = *(_DWORD *)(result + 200);
      *(_DWORD *)(result + 200) = a2[50];
      a2[50] = v31;
      LODWORD(v31) = *(_DWORD *)(result + 204);
      *(_DWORD *)(result + 204) = a2[51];
      a2[51] = v31;
      return result;
    }
    uint64_t v20 = (uint64_t)a2;
  }
  else
  {
    if (v3 <= 1)
    {
      unsigned int v4 = *(_DWORD *)(result + 200);
      unsigned int v5 = a2[50];
      if (v4 >= v5) {
        unint64_t v6 = a2;
      }
      else {
        unint64_t v6 = (int *)result;
      }
      if (v4 >= v5) {
        uint64_t v7 = (int *)result;
      }
      else {
        uint64_t v7 = a2;
      }
      uint64_t v8 = v6;
      if (v6[51] >= 2) {
        uint64_t v8 = *(int **)v6;
      }
      unsigned int v9 = v6[50];
      uint64_t v10 = v7;
      if (v7[51] >= 2) {
        uint64_t v10 = *(int **)v7;
      }
      if (v9)
      {
        uint64_t v11 = 200 * v9;
        do
        {
          double result = sub_21697D478(v8, v10);
          v8 += 50;
          v10 += 50;
          v11 -= 200;
        }
        while (v11);
        unsigned int v9 = v6[50];
      }
      LODWORD(v12) = v7[50];
      if (v9 < v12)
      {
        unint64_t v13 = v9;
        uint64_t v14 = 50 * v9;
        do
        {
          unint64_t v15 = v6;
          if (v6[51] >= 2) {
            unint64_t v15 = *(int **)v6;
          }
          char v16 = v7;
          if (v7[51] >= 2) {
            char v16 = *(int **)v7;
          }
          sub_21697DF48((uint64_t)&v15[v14], (uint64_t)&v16[v14]);
          unint64_t v17 = v7;
          if (v7[51] >= 2) {
            unint64_t v17 = *(int **)v7;
          }
          unint64_t v18 = &v17[v14];
          if (SHIBYTE(v17[v14 + 47]) < 0) {
            operator delete(*((void **)v18 + 21));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v18 + 41);
          int64x2_t v19 = &v17[v14];
          sub_21697C414(v19 + 40);
          std::string::size_type v32 = (void **)(v19 + 34);
          sub_2168706D8(&v32);
          sub_21697C960((uint64_t)(v18 + 2));
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v19 + 1);
          double result = (uint64_t)sub_21697C414(v18);
          ++v13;
          unint64_t v12 = v7[50];
          v14 += 50;
        }
        while (v13 < v12);
        unsigned int v9 = v6[50];
      }
      v6[50] = v12;
      v7[50] = v9;
      return result;
    }
    uint64_t v20 = result;
    uint64_t v2 = (uint64_t)a2;
  }
  uint64_t v21 = *(void *)v2;
  LODWORD(v22) = *(_DWORD *)(v20 + 200);
  if (v22)
  {
    uint64_t v23 = 0;
    unint64_t v24 = 0;
    do
    {
      uint64_t v25 = v20;
      if (*(_DWORD *)(v20 + 204) >= 2u) {
        uint64_t v25 = *(void *)v20;
      }
      sub_21697DF48(v2 + v23, v25 + v23);
      uint64_t v26 = v20;
      if (*(_DWORD *)(v20 + 204) >= 2u) {
        uint64_t v26 = *(void *)v20;
      }
      uint64_t v27 = v26 + v23;
      if (*(char *)(v26 + v23 + 191) < 0) {
        operator delete(*(void **)(v27 + 168));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v27 + 164));
      uint64_t v28 = v26 + v23;
      sub_21697C414((_DWORD *)(v28 + 160));
      std::string::size_type v32 = (void **)(v28 + 136);
      sub_2168706D8(&v32);
      sub_21697C960(v27 + 8);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v28 + 4));
      double result = (uint64_t)sub_21697C414((_DWORD *)v27);
      ++v24;
      unint64_t v22 = *(unsigned int *)(v20 + 200);
      v23 += 200;
    }
    while (v24 < v22);
  }
  *(void *)uint64_t v20 = v21;
  int v29 = *(_DWORD *)(v2 + 200);
  *(_DWORD *)(v2 + 200) = v22;
  *(_DWORD *)(v20 + 200) = v29;
  int v30 = *(_DWORD *)(v2 + 204);
  *(_DWORD *)(v2 + 204) = *(_DWORD *)(v20 + 204);
  *(_DWORD *)(v20 + 204) = v30;
  return result;
}

uint64_t sub_21697D478(int *a1, int *a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a1, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a1 + 1, a2 + 1);

  return sub_21697D4C4((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
}

uint64_t sub_21697D4C4(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  sub_21697D760((uint64_t)v10, a1);
  long long v11 = *(_OWORD *)(a1 + 128);
  uint64_t v12 = *(void *)(a1 + 144);
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  int v13 = *(_DWORD *)(a1 + 152);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(a1 + 152));
  int v14 = *(_DWORD *)(a1 + 156);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(a1 + 156));
  long long v15 = *(_OWORD *)(a1 + 160);
  uint64_t v16 = *(void *)(a1 + 176);
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 160) = 0;
  __int16 v17 = *(_WORD *)(a1 + 184);
  char v18 = *(unsigned char *)(a1 + 186);
  if (a1 != a2) {
    sub_21697D8F0(a1, a2);
  }
  unsigned int v4 = (void **)(a1 + 160);
  sub_21697DE58((uint64_t *)(a1 + 128));
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  *(void *)(a2 + 144) = 0;
  sub_21697DE94((int *)(a1 + 152), (int *)(a2 + 152));
  sub_21697DEEC((int *)(a1 + 156), (int *)(a2 + 156));
  if (*(char *)(a1 + 183) < 0) {
    operator delete(*v4);
  }
  long long v5 = *(_OWORD *)(a2 + 160);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(_OWORD *)unsigned int v4 = v5;
  *(unsigned char *)(a2 + 183) = 0;
  __int16 v6 = *(_WORD *)(a2 + 184);
  *(unsigned char *)(a2 + 160) = 0;
  *(unsigned char *)(a1 + 186) = *(unsigned char *)(a2 + 186);
  *(_WORD *)(a1 + 184) = v6;
  if (v10 != (unsigned char *)a2) {
    sub_21697D8F0(a2, (uint64_t)v10);
  }
  uint64_t v7 = (void **)(a2 + 160);
  sub_21697DE58((uint64_t *)(a2 + 128));
  *(_OWORD *)(a2 + 128) = v11;
  *(void *)(a2 + 144) = v12;
  uint64_t v12 = 0;
  long long v11 = 0uLL;
  sub_21697DE94((int *)(a2 + 152), &v13);
  sub_21697DEEC((int *)(a2 + 156), &v14);
  if (*(char *)(a2 + 183) < 0) {
    operator delete(*v7);
  }
  *(_OWORD *)uint64_t v7 = v15;
  *(void *)(a2 + 176) = v16;
  HIBYTE(v16) = 0;
  LOBYTE(v15) = 0;
  *(_WORD *)(a2 + 184) = v17;
  *(unsigned char *)(a2 + 186) = v18;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
  sub_21697C414(&v13);
  unsigned int v9 = (void **)&v11;
  sub_2168706D8(&v9);
  return sub_21697C960((uint64_t)v10);
}

void sub_21697D72C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21697D760(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 120) = 0x300000000;
  unsigned int v4 = *(_DWORD *)(a2 + 120);
  if (v4 < 4)
  {
    if (*(_DWORD *)(a2 + 124) >= 4u) {
      long long v5 = *(void **)a2;
    }
    else {
      long long v5 = (void *)a2;
    }
    sub_21697D7F4(v5, &v5[5 * v4], (void *)a1);
    sub_21697C9A0(a2);
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
    *(_DWORD *)(a2 + 124) = 3;
  }
  int v6 = *(_DWORD *)(a1 + 120);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a2 + 120) = v6;
  return a1;
}

void *sub_21697D7F4(void *a1, void *a2, void *a3)
{
  unsigned int v3 = a3;
  if (a1 == a2) {
    return a3;
  }
  long long v5 = a1;
  int v6 = a3;
  do
  {
    uint64_t v7 = v5 + 3;
    *int v6 = *v5;
    v6 += 5;
    uint64_t v8 = v5 + 1;
    *long long v5 = 0;
    v5 += 5;
    sub_2168EDFA8(v3 + 1, v8);
    sub_2168EDFA8(v3 + 3, v7);
    unsigned int v3 = v6;
  }
  while (v5 != a2);
  return v6;
}

_DWORD *sub_21697D878(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(a2);
  return a1;
}

_DWORD *sub_21697D8B4(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=(a2);
  return a1;
}

uint64_t sub_21697D8F0(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  unsigned int v3 = *(_DWORD *)(a2 + 124);
  if (*(_DWORD *)(result + 124) > 3u)
  {
    if (v3 >= 4)
    {
      uint64_t v32 = *(void *)result;
      *(void *)double result = *(void *)a2;
      *(void *)a2 = v32;
      LODWORD(v32) = *(_DWORD *)(result + 120);
      *(_DWORD *)(result + 120) = *(_DWORD *)(a2 + 120);
      *(_DWORD *)(a2 + 120) = v32;
      LODWORD(v32) = *(_DWORD *)(result + 124);
      *(_DWORD *)(result + 124) = *(_DWORD *)(a2 + 124);
      *(_DWORD *)(a2 + 124) = v32;
      return result;
    }
    uint64_t v20 = a2;
  }
  else
  {
    if (v3 <= 3)
    {
      unsigned int v4 = *(_DWORD *)(result + 120);
      unsigned int v5 = *(_DWORD *)(a2 + 120);
      if (v4 >= v5) {
        uint64_t v6 = a2;
      }
      else {
        uint64_t v6 = result;
      }
      if (v4 >= v5) {
        uint64_t v7 = result;
      }
      else {
        uint64_t v7 = a2;
      }
      uint64_t v8 = (void *)v6;
      if (*(_DWORD *)(v6 + 124) >= 4u) {
        uint64_t v8 = *(void **)v6;
      }
      unsigned int v9 = (void *)v7;
      if (*(_DWORD *)(v7 + 124) >= 4u) {
        unsigned int v9 = *(void **)v7;
      }
      double result = (uint64_t)sub_21697DB78(v8, &v8[5 * *(unsigned int *)(v6 + 120)], v9);
      unint64_t v10 = *(unsigned int *)(v6 + 120);
      LODWORD(v11) = *(_DWORD *)(v7 + 120);
      if (v10 < v11)
      {
        uint64_t v12 = 5 * v10;
        do
        {
          int v13 = (void *)v6;
          if (*(_DWORD *)(v6 + 124) >= 4u) {
            int v13 = *(void **)v6;
          }
          int v14 = (void *)v7;
          if (*(_DWORD *)(v7 + 124) >= 4u) {
            int v14 = *(void **)v7;
          }
          long long v15 = &v14[v12];
          v13[v12] = v14[v12];
          uint64_t v16 = &v13[v12 + 3];
          v14[v12] = 0;
          sub_2168EDFA8(&v13[v12 + 1], &v14[v12 + 1]);
          sub_2168EDFA8(v16, v15 + 3);
          __int16 v17 = (void *)v7;
          if (*(_DWORD *)(v7 + 124) >= 4u) {
            __int16 v17 = *(void **)v7;
          }
          char v18 = &v17[v12];
          uint64_t v19 = (uint64_t)&v17[v12 + 1];
          sub_2168EE084((uint64_t)&v17[v12 + 3]);
          double result = sub_2168EE084(v19);
          if ((*v18 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          ++v10;
          unint64_t v11 = *(unsigned int *)(v7 + 120);
          v12 += 5;
        }
        while (v10 < v11);
        LODWORD(v10) = *(_DWORD *)(v6 + 120);
      }
      *(_DWORD *)(v6 + 120) = v11;
      *(_DWORD *)(v7 + 120) = v10;
      return result;
    }
    uint64_t v20 = result;
    uint64_t v2 = a2;
  }
  uint64_t v21 = *(void *)v2;
  LODWORD(v22) = *(_DWORD *)(v20 + 120);
  if (v22)
  {
    uint64_t v23 = 0;
    unint64_t v24 = 0;
    do
    {
      uint64_t v25 = v20;
      if (*(_DWORD *)(v20 + 124) >= 4u) {
        uint64_t v25 = *(void *)v20;
      }
      uint64_t v26 = v25 + v23;
      *(void *)(v2 + v23) = *(void *)(v25 + v23);
      *(void *)(v25 + v23) = 0;
      sub_2168EDFA8((void *)(v2 + v23 + 8), (void *)(v25 + v23 + 8));
      sub_2168EDFA8((void *)(v2 + v23 + 24), (void *)(v26 + 24));
      uint64_t v27 = v20;
      if (*(_DWORD *)(v20 + 124) >= 4u) {
        uint64_t v27 = *(void *)v20;
      }
      uint64_t v28 = (void *)(v27 + v23);
      uint64_t v29 = v27 + v23 + 8;
      sub_2168EE084(v27 + v23 + 24);
      double result = sub_2168EE084(v29);
      if ((*v28 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      ++v24;
      unint64_t v22 = *(unsigned int *)(v20 + 120);
      v23 += 40;
    }
    while (v24 < v22);
  }
  *(void *)uint64_t v20 = v21;
  int v30 = *(_DWORD *)(v2 + 120);
  *(_DWORD *)(v2 + 120) = v22;
  *(_DWORD *)(v20 + 120) = v30;
  int v31 = *(_DWORD *)(v2 + 124);
  *(_DWORD *)(v2 + 124) = *(_DWORD *)(v20 + 124);
  *(_DWORD *)(v20 + 124) = v31;
  return result;
}

void *sub_21697DB78(void *a1, void *a2, void *a3)
{
  unsigned int v3 = a3;
  unsigned int v4 = a1;
  if (a1 == a2) {
    return a1;
  }
  unsigned int v5 = a2;
  uint64_t v6 = a1;
  uint64_t v7 = a3;
  do
  {
    uint64_t v9 = *v6;
    v6 += 5;
    uint64_t v8 = v9;
    uint64_t v10 = *v7;
    v7 += 5;
    void *v4 = v10;
    *unsigned int v3 = v8;
    sub_21697DC0C(v4 + 1, v3 + 1);
    sub_21697DC0C(v4 + 3, v3 + 3);
    unsigned int v3 = v7;
    unsigned int v4 = v6;
  }
  while (v6 != v5);
  return v5;
}

void *sub_21697DC0C(void *a1, void *a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (a1[1])
  {
    uint64_t v13 = 0;
    sub_2168EDEE4((uint64_t)v14, (uint64_t)&v12);
    uint64_t v4 = a1[1];
    int v5 = ~*((_DWORD *)a1 + 2);
    uint64_t v13 = v4;
    if ((v5 & 3) != 0) {
      (*(void (**)(void *, uint64_t *))((v4 & 0xFFFFFFFFFFFFFFF8) + 40))(a1, &v12);
    }
    else {
      uint64_t v12 = *a1;
    }
    a1[1] = 0;
    if (v15) {
      (*(void (**)(unsigned char *))(v15 + 32))(v14);
    }
    uint64_t v6 = a2 + 1;
    if (!a2[1])
    {
      uint64_t v8 = a1[1];
      if (v8 && (a1[1] & 3) != 3) {
        (*(void (**)(void *))((v8 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
      }
      a1[1] = 0;
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v6 = a2 + 1;
    if (!a2[1]) {
      return a1;
    }
    uint64_t v13 = 0;
  }
  sub_2168EDEE4((uint64_t)v14, (uint64_t)a1);
  uint64_t v7 = *v6;
  a1[1] = *v6;
  if ((~*(_DWORD *)v6 & 3) != 0) {
    (*(void (**)(void *, void *))((v7 & 0xFFFFFFFFFFFFFFF8) + 40))(a2, a1);
  }
  else {
    *a1 = *a2;
  }
  *uint64_t v6 = 0;
  if (v15) {
    (*(void (**)(unsigned char *))(v15 + 32))(v14);
  }
LABEL_19:
  if (v13)
  {
    sub_2168EDEE4((uint64_t)v14, (uint64_t)a2);
    uint64_t v9 = v13;
    char v10 = ~(_BYTE)v13;
    *uint64_t v6 = v13;
    if ((v10 & 3) != 0) {
      (*(void (**)(uint64_t *, void *))((v9 & 0xFFFFFFFFFFFFFFF8) + 40))(&v12, a2);
    }
    else {
      *a2 = v12;
    }
    uint64_t v13 = 0;
    if (v15) {
      (*(void (**)(unsigned char *))(v15 + 32))(v14);
    }
  }
  else
  {
    if (*v6 && (*v6 & 3) != 3) {
      (*(void (**)(void *))((*v6 & 0xFFFFFFFFFFFFFFF8) + 32))(a2);
    }
    *uint64_t v6 = 0;
  }
  sub_2168EE084((uint64_t)&v12);
  return a1;
}

void sub_21697DE10(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_21675DB74(a1);
  }
  _Unwind_Resume(a1);
}

void sub_21697DE58(uint64_t *a1)
{
  if (*a1)
  {
    sub_21687072C(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

int *sub_21697DE94(int *a1, int *a2)
{
  int v4 = *a2;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(a2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(&v4, a1);
  sub_21697C414(&v4);
  return a1;
}

int *sub_21697DEEC(int *a1, int *a2)
{
  int v4 = *a2;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=(a2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(&v4, a1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v4);
  return a1;
}

uint64_t sub_21697DF48(uint64_t a1, uint64_t a2)
{
  int v4 = sub_21697D878((_DWORD *)a1, (_DWORD *)a2);
  sub_21697D8B4(v4 + 1, (_DWORD *)(a2 + 4));
  sub_21697D760(a1 + 8, a2 + 8);
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a2 + 136) = 0;
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 152) = 0;
  sub_21697D878((_DWORD *)(a1 + 160), (_DWORD *)(a2 + 160));
  sub_21697D8B4((_DWORD *)(a1 + 164), (_DWORD *)(a2 + 164));
  long long v5 = *(_OWORD *)(a2 + 168);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = v5;
  *(void *)(a2 + 168) = 0;
  *(void *)(a2 + 176) = 0;
  *(void *)(a2 + 184) = 0;
  __int16 v6 = *(_WORD *)(a2 + 192);
  *(unsigned char *)(a1 + 194) = *(unsigned char *)(a2 + 194);
  *(_WORD *)(a1 + 192) = v6;
  return a1;
}

void sub_21697DFEC(_Unwind_Exception *a1)
{
  sub_21697B754(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21697E000(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    sub_21697D0EC(a4, v5);
    sub_21697D164(a4 + 16, v5 + 16);
    a4 += 232;
    v5 += 232;
  }
  while (v5 != v6);
  return v6;
}

void sub_21697E070(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    int v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 232;
        sub_21697C668((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      int v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *sub_21697E0E0(atomic_ullong *a1)
{
  double result = sub_21697E128();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType::~SdfFieldKeys_StaticTokenType(result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *sub_21697E128()
{
  unint64_t v0 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)operator new(0x208uLL);
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType::SdfFieldKeys_StaticTokenType(v0);
  return v0;
}

void sub_21697E158(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *sub_21697E16C(atomic_ullong *a1)
{
  double result = sub_21697E1B4();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType::~SdfChildrenKeys_StaticTokenType(result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *sub_21697E1B4()
{
  unint64_t v0 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)operator new(0x60uLL);
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType::SdfChildrenKeys_StaticTokenType(v0);
  return v0;
}

void sub_21697E1E4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21697E1F8(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000217478F42 & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;

  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C74C3F0);
}

uint64_t sub_21697E284(uint64_t a1, const void **a2, const void **a3)
{
  *(void *)(a1 + 8) = 0;
  int v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_216814A8C((uint64_t **)a1, v4, v6, (uint64_t)v6);
      v6 += 3;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_21697E2F0(_Unwind_Exception *a1)
{
  sub_21678A498(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

long long *sub_21697E308(long long **a1, long long **a2, const void ***a3, const void ***a4, uint64_t **a5, uint64_t a6)
{
  uint64_t v9 = *a1;
  char v10 = *a2;
  if (*a1 == *a2)
  {
LABEL_31:
    char v10 = v9;
    return sub_21697E510((uint64_t)&v28, v9, v10, *a5);
  }
  uint64_t v12 = *a3;
  if (*a3 != *a4)
  {
    while (1)
    {
      if (sub_21677B108(a6, (const void **)v9 + 4, v12 + 4))
      {
        sub_21697E4BC(a5, *a1 + 2);
        uint64_t v15 = *a1;
        uint64_t v16 = (long long *)*((void *)*a1 + 1);
        if (v16)
        {
          do
          {
            __int16 v17 = v16;
            uint64_t v16 = *(long long **)v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            __int16 v17 = (long long *)*((void *)v15 + 2);
            BOOL v18 = *(void *)v17 == (void)v15;
            uint64_t v15 = v17;
          }
          while (!v18);
        }
        *a1 = v17;
      }
      else
      {
        if (sub_21677B108(a6, *a3 + 4, (const void **)*a1 + 4))
        {
          uint64_t v19 = *a3;
          uint64_t v20 = (const void **)(*a3)[1];
          if (v20)
          {
            do
            {
              uint64_t v21 = (const void ***)v20;
              uint64_t v20 = (const void **)*v20;
            }
            while (v20);
          }
          else
          {
            do
            {
              uint64_t v21 = (const void ***)v19[2];
              BOOL v18 = *v21 == v19;
              uint64_t v19 = (const void **)v21;
            }
            while (!v18);
          }
        }
        else
        {
          unint64_t v22 = *a1;
          uint64_t v23 = (long long *)*((void *)*a1 + 1);
          if (v23)
          {
            do
            {
              unint64_t v24 = v23;
              uint64_t v23 = *(long long **)v23;
            }
            while (v23);
          }
          else
          {
            do
            {
              unint64_t v24 = (long long *)*((void *)v22 + 2);
              BOOL v18 = *(void *)v24 == (void)v22;
              unint64_t v22 = v24;
            }
            while (!v18);
          }
          *a1 = v24;
          uint64_t v25 = *a3;
          uint64_t v26 = (const void **)(*a3)[1];
          if (v26)
          {
            do
            {
              uint64_t v21 = (const void ***)v26;
              uint64_t v26 = (const void **)*v26;
            }
            while (v26);
          }
          else
          {
            do
            {
              uint64_t v21 = (const void ***)v25[2];
              BOOL v18 = *v21 == v25;
              uint64_t v25 = (const void **)v21;
            }
            while (!v18);
          }
        }
        *a3 = (const void **)v21;
      }
      uint64_t v9 = *a1;
      char v10 = *a2;
      if (*a1 == *a2) {
        break;
      }
      uint64_t v12 = *a3;
      if (*a3 == *a4) {
        return sub_21697E510((uint64_t)&v28, v9, v10, *a5);
      }
    }
    goto LABEL_31;
  }
  return sub_21697E510((uint64_t)&v28, v9, v10, *a5);
}

uint64_t **sub_21697E4BC(uint64_t **a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v5 = (*a1)[1];
  unint64_t v4 = (*a1)[2];
  uint64_t v6 = *a1;
  if (v5 >= v4)
  {
    uint64_t v7 = sub_2167E9A44(v6, a2);
  }
  else
  {
    sub_2167E99E4(v6, a2);
    uint64_t v7 = v5 + 24;
  }
  v3[1] = v7;
  return a1;
}

long long *sub_21697E510(uint64_t a1, long long *a2, long long *a3, uint64_t *a4)
{
  unint64_t v4 = a2;
  char v10 = a4;
  if (a2 == a3) {
    return a2;
  }
  unint64_t v5 = a3;
  do
  {
    sub_21697E4BC(&v10, v4 + 2);
    uint64_t v6 = (long long *)*((void *)v4 + 1);
    if (v6)
    {
      do
      {
        uint64_t v7 = v6;
        uint64_t v6 = *(long long **)v6;
      }
      while (v6);
    }
    else
    {
      do
      {
        uint64_t v7 = (long long *)*((void *)v4 + 2);
        BOOL v8 = *(void *)v7 == (void)v4;
        unint64_t v4 = v7;
      }
      while (!v8);
    }
    unint64_t v4 = v7;
  }
  while (v7 != v5);
  return v5;
}

uint64_t sub_21697E5A0(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000217478F98 & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;

  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C754B90);
}

void *sub_21697E62C(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    double result = sub_21682BF78(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      double result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_21697E68C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21697E6A8(uint64_t a1)
{
  if (!*(void *)a1) {
    return 0;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(*(void *)a1 + 8)))
  {
    v2[0] = "sdf/listProxy.h";
    v2[1] = "_Validate";
    v2[2] = 702;
    v2[3] = "BOOL pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfSubLayerTypePolicy>"
            "::_Validate() const [_TypePolicy = pxrInternal__aapl__pxrReserved__::SdfSubLayerTypePolicy]";
    char v3 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v2, 1, (pxrInternal__aapl__pxrReserved__ *)"Accessing expired list editor");
    return 0;
  }
  return 1;
}

void *sub_21697E720@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  double result = (void *)sub_21697E6A8((uint64_t)a1);
  if (result)
  {
    uint64_t v7 = *a1;
    return sub_21697E790(v7, a2, (uint64_t)a3);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  return result;
}

void *sub_21697E790@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  double result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  uint64_t v6 = *result + 24 * a2;
  if (*(char *)(v6 + 23) < 0)
  {
    size_t v8 = *(void **)v6;
    unint64_t v9 = *(void *)(v6 + 8);
    return sub_216778F24((unsigned char *)a3, v8, v9);
  }
  else
  {
    long long v7 = *(_OWORD *)v6;
    *(void *)(a3 + 16) = *(void *)(v6 + 16);
    *(_OWORD *)a3 = v7;
  }
  return result;
}

uint64_t sub_21697E820(uint64_t *a1, uint64_t a2, void **a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = 0x34F72C234F72C235 * ((a1[1] - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) > 0x11A7B9611A7B961) {
    sub_21677CB10();
  }
  uint64_t v8 = (uint64_t)(a1 + 2);
  unint64_t v9 = 0x34F72C234F72C235 * ((a1[2] - v4) >> 3);
  if (2 * v9 > v6) {
    unint64_t v6 = 2 * v9;
  }
  if (v9 >= 0x8D3DCB08D3DCB0) {
    unint64_t v10 = 0x11A7B9611A7B961;
  }
  else {
    unint64_t v10 = v6;
  }
  v18[4] = a1 + 2;
  if (v10) {
    unint64_t v11 = (char *)sub_21697EA00(v8, v10);
  }
  else {
    unint64_t v11 = 0;
  }
  uint64_t v12 = &v11[232 * v5];
  v18[0] = v11;
  v18[1] = v12;
  void v18[3] = &v11[232 * v10];
  uint64_t v13 = *a3;
  *(void *)uint64_t v12 = **a3;
  uint64_t v14 = v13[1];
  *((void *)v12 + 1) = v14;
  if (v14) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 + 8), 1u, memory_order_relaxed);
  }
  uint64_t v15 = &v11[232 * v5];
  *((_OWORD *)v15 + 12) = 0u;
  *((_OWORD *)v15 + 13) = 0u;
  *((_OWORD *)v15 + 1) = 0u;
  *((_OWORD *)v15 + 2) = 0u;
  *((_OWORD *)v15 + 10) = 0u;
  *((_OWORD *)v15 + 11) = 0u;
  *((_OWORD *)v15 + 8) = 0u;
  *((_OWORD *)v15 + 9) = 0u;
  *((_OWORD *)v15 + 6) = 0u;
  *((_OWORD *)v15 + 7) = 0u;
  *((_OWORD *)v15 + 4) = 0u;
  *((_OWORD *)v15 + 5) = 0u;
  *((_OWORD *)v15 + 3) = 0u;
  *((_DWORD *)v15 + 55) = 1;
  *((void *)v15 + 28) = 0;
  v18[2] = v12 + 232;
  sub_21697E988(a1, v18);
  uint64_t v16 = a1[1];
  sub_21697EBF4((atomic_uint *)v18);
  return v16;
}

void sub_21697E974(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697EBF4((atomic_uint *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21697E988(uint64_t *a1, void *a2)
{
  uint64_t result = sub_21697EA4C((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_21697EA00(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x11A7B9611A7B962) {
    sub_21677CA1C();
  }
  return operator new(232 * a2);
}

uint64_t sub_21697EA4C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    unint64_t v9 = a3;
    do
    {
      v9 -= 29;
      sub_21697EB08((void *)(v7 - 232), v9);
      uint64_t v7 = *((void *)&v15 + 1) - 232;
      *((void *)&v15 + 1) -= 232;
    }
    while (v9 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_21697EB68((uint64_t)v12);
  return v10;
}

void sub_21697EAF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_21697EB08(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 + 8), 1u, memory_order_relaxed);
  }
  pxrInternal__aapl__pxrReserved__::SdfChangeList::SdfChangeList((pxrInternal__aapl__pxrReserved__::SdfChangeList *)(a1 + 2), (const pxrInternal__aapl__pxrReserved__::SdfChangeList *)(a2 + 2));
  return a1;
}

void sub_21697EB50(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(atomic_uint **)(v1 + 8);
  if (v3) {
    sub_217324328(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21697EB68(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_21697EBA0((uint64_t *)a1);
  }
  return a1;
}

uint64_t *sub_21697EBA0(uint64_t *result)
{
  uint64_t v1 = *(void *)(result[2] + 8);
  uint64_t v2 = *(void *)(result[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *result;
    do
    {
      uint64_t result = (uint64_t *)sub_21697C668(v3, v1);
      v1 += 232;
    }
    while (v1 != v2);
  }
  return result;
}

atomic_uint *sub_21697EBF4(atomic_uint *a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

atomic_uint *sub_21697EC28(atomic_uint *result)
{
  uint64_t v2 = *((void *)result + 1);
  uint64_t v1 = *((void *)result + 2);
  if (v1 != v2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = *((void *)v3 + 4);
      *((void *)v3 + 2) = v1 - 232;
      uint64_t result = sub_21697C668(v4, v1 - 232);
      uint64_t v1 = *((void *)v3 + 2);
    }
    while (v1 != v2);
  }
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker>::GetInstance()
{
  unint64_t result = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker>::_instance);
  if (!result) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker>::_CreateInstance();
  }
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker>::_CreateInstance(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x8000000217468128 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&v15);
  uint64_t v2 = std::string::insert(&v15, 0, "Create Singleton ");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  uint64_t v19 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  sub_216851098((uint64_t)&v16, "Tf", "TfSingleton::_CreateInstance", (char *)__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  if (atomic_exchange(pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker*> &)::isInitializing, 1u))
  {
    while (!atomic_load(a1))
      sched_yield();
  }
  else
  {
    if (!atomic_load(a1))
    {
      unint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker *)operator new(0x20uLL);
      *(void *)&double v13 = pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::Sdf_CleanupTracker(v9, v10, v11).n128_u64[0];
      unint64_t v14 = atomic_load(a1);
      if (v14)
      {
        if (v9 != (pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker *)v14)
        {
          __p[0] = "tf/instantiateSingleton.h";
          __p[1] = "_CreateInstance";
          uint64_t v19 = 84;
          uint64_t v20 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_CleanupTra"
                "cker>::_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker]";
          char v21 = 0;
          int v22 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"race detected setting singleton instance", v12, v13);
        }
      }
      else if (atomic_exchange((atomic_ullong *volatile)a1, (unint64_t)v9))
      {
        __p[0] = "tf/instantiateSingleton.h";
        __p[1] = "_CreateInstance";
        uint64_t v19 = 88;
        uint64_t v20 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_CleanupTrack"
              "er>::_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker]";
        char v21 = 0;
        int v22 = 4;
        pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v12, v13, "instance.exchange(newInst) == nullptr");
      }
    }
    atomic_store(0, (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker*> &)::isInitializing);
  }
  unint64_t v5 = atomic_load(a1);
  while (v17--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v16);
  return v5;
}

void sub_21697EE54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
}

BOOL pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker>::CurrentlyExists()
{
  unint64_t v0 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker>::_instance);
  return v0 != 0;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker>::SetInstanceConstructed(unint64_t result, uint64_t a2, char *a3)
{
  if (atomic_exchange((atomic_ullong *volatile)&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker>::_instance, result))
  {
    v3[0] = "tf/instantiateSingleton.h";
    v3[1] = "SetInstanceConstructed";
    v3[2] = 56;
    v3[3] = "static void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_CleanupTrack"
            "er>::SetInstanceConstructed(T &) [T = pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"this function may not be called after GetInstance() or another SetInstanceConstructed() has completed", a3);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker>::DeleteInstance()
{
  for (unint64_t i = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker>::_instance);
        i;
        unint64_t i = v1)
  {
    unint64_t v1 = i;
    atomic_compare_exchange_strong((atomic_ullong *volatile)&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker>::_instance, &v1, 0);
    if (v1 == i)
    {
      char v4 = (void **)(i + 8);
      sub_21697CA24(&v4);
      long long v3 = sub_216859A88((uint64_t *)i, v2);
      operator delete(v3);
      return;
    }
    sched_yield();
  }
}

void pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::~Sdf_CleanupTracker(pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker *this)
{
  long long v3 = (void **)((char *)this + 8);
  sub_21697CA24(&v3);
  sub_216859A88((uint64_t *)this, v2);
}

{
  const void *v2;
  void **v3;

  long long v3 = (void **)((char *)this + 8);
  sub_21697CA24(&v3);
  sub_216859A88((uint64_t *)this, v2);
}

unint64_t pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::GetInstance(pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker *this)
{
  unint64_t result = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker>::_instance);
  if (!result) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker>::_CreateInstance();
  }
  return result;
}

__n128 pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::Sdf_CleanupTracker(pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker *this, uint64_t a2, char *a3)
{
  __n128 result = 0uLL;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  if (atomic_exchange((atomic_ullong *volatile)&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker>::_instance, (unint64_t)this))
  {
    v4[0] = "tf/instantiateSingleton.h";
    v4[1] = "SetInstanceConstructed";
    v4[2] = 56;
    v4[3] = "static void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_CleanupTrack"
            "er>::SetInstanceConstructed(T &) [T = pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker]";
    char v5 = 0;
    int v6 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v4, (pxrInternal__aapl__pxrReserved__ *)"this function may not be called after GetInstance() or another SetInstanceConstructed() has completed", a3);
  }
  return result;
}

void sub_21697F09C(_Unwind_Exception *a1)
{
  *(void *)(v2 - 24) = v1 + 1;
  sub_21697CA24((void ***)(v2 - 24));
  sub_216859A88(v1, v4);
  _Unwind_Resume(a1);
}

char *pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::AddSpecIfTracking(uint64_t a1, atomic_uint **a2)
{
  __n128 result = (char *)pxrInternal__aapl__pxrReserved__::SdfCleanupEnabler::IsCleanupEnabled((pxrInternal__aapl__pxrReserved__::SdfCleanupEnabler *)a1);
  if (result)
  {
    char v5 = *(atomic_uint ***)(a1 + 8);
    int v6 = *(pxrInternal__aapl__pxrReserved__::Sdf_Identity ***)(a1 + 16);
    if (v5 != (atomic_uint **)v6)
    {
      char IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(v6 - 1);
      char v5 = *(atomic_uint ***)(a1 + 16);
      if ((IsDormant & 1) == 0)
      {
        __n128 result = (char *)pxrInternal__aapl__pxrReserved__::SdfSpec::operator==(v5 - 1, a2);
        if (result) {
          return result;
        }
        char v5 = *(atomic_uint ***)(a1 + 16);
      }
    }
    if ((unint64_t)v5 >= *(void *)(a1 + 24))
    {
      __n128 result = sub_21697CF74((atomic_uint ***)(a1 + 8), a2);
    }
    else
    {
      uint64_t v8 = *a2;
      *char v5 = *a2;
      if (v8) {
        atomic_fetch_add(v8, 1u);
      }
      __n128 result = (char *)(v5 + 1);
    }
    *(void *)(a1 + 16) = result;
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::CleanupSpecs(pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker *this)
{
  for (uint64_t i = *((void *)this + 2); *((void *)this + 1) != i; uint64_t i = *((void *)this + 2))
  {
    long long v3 = *(atomic_uint **)(i - 8);
    uint64_t v10 = v3;
    if (v3)
    {
      atomic_fetch_add(v3, 1u);
      uint64_t i = *((void *)this + 2);
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(i - 8));
    *((void *)this + 2) = v4;
    if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v10) & 1) == 0)
    {
      char v5 = (uint64_t **)sub_21697F2E0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v10);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v5, &v8);
      int v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(&v8);
      pxrInternal__aapl__pxrReserved__::SdfLayer::ScheduleRemoveIfInert(v6, &v10);
      uint64_t v7 = v9;
      if (v9)
      {
        if (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
          (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
        }
      }
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v10);
  }
}

void sub_21697F280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, atomic_uint *a4, ...)
{
  va_start(va, a4);
  if (a4)
  {
    if (atomic_fetch_add_explicit(a4 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a4 + 8))(a4);
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Sdf_Identity **sub_21697F2E0(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1)
{
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a1))
  {
    v7[0] = "sdf/declareHandles.h";
    v7[1] = "operator->";
    v7[2] = 96;
    v7[3] = "SpecType *pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfSpec>::operator->"
            "() const [T = pxrInternal__aapl__pxrReserved__::SdfSpec]";
    char v8 = 0;
    int v9 = 4;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x8000000217468314 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v5);
    if (v6 >= 0) {
      uint64_t v4 = v5;
    }
    else {
      uint64_t v4 = (void *)v5[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v7, (pxrInternal__aapl__pxrReserved__ *)"Dereferenced an invalid %s", v3, v4);
  }
  return a1;
}

void sub_21697F388(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x21697F300);
}

void sub_21697F3A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionListEditor::Sdf_AttributeConnectionListEditor(void *a1, atomic_uint **a2, atomic_uint **a3)
{
  char v6 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v6) {
    char v6 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  sub_216980810(a1, a2, (uint64_t *)v6 + 7, a3);
}

void pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionListEditor::~Sdf_AttributeConnectionListEditor(pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionListEditor *this)
{
  pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionListEditor::~Sdf_AttributeConnectionListEditor(this);

  operator delete(v1);
}

{
  void **v2;

  *(void *)this = &unk_26C754D48;
  uint64_t v2 = (void **)((char *)this + 160);
  sub_216981168(&v2);
  uint64_t v2 = (void **)((char *)this + 136);
  sub_216981168(&v2);
  uint64_t v2 = (void **)((char *)this + 112);
  sub_216981168(&v2);
  uint64_t v2 = (void **)((char *)this + 88);
  sub_216981168(&v2);
  uint64_t v2 = (void **)((char *)this + 64);
  sub_216981168(&v2);
  uint64_t v2 = (void **)((char *)this + 40);
  sub_216981168(&v2);
  sub_216980C58(this);
}

_DWORD *pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionListEditor::_OnEdit(_DWORD *a1, int a2, const pxrInternal__aapl__pxrReserved__::SdfPath **a3, const pxrInternal__aapl__pxrReserved__::SdfPath **a4)
{
  return sub_21697F480(a1, a2, 2, a3, a4);
}

_DWORD *sub_21697F480(_DWORD *result, int a2, uint64_t a3, const pxrInternal__aapl__pxrReserved__::SdfPath **a4, const pxrInternal__aapl__pxrReserved__::SdfPath **a5)
{
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    uint64_t v7 = (uint64_t)result;
    sub_21698131C((uint64_t)result, &v32);
    sub_2169813A0(v7, &v30);
    v29[0] = 0;
    v29[1] = 0;
    v27[1] = 0;
    char v28 = (uint64_t *)v29;
    uint64_t v26 = (uint64_t *)v27;
    v27[0] = 0;
    char v8 = *a4;
    int v9 = a4[1];
    uint64_t v10 = *a5;
    unint64_t v11 = a5[1];
    if (v8 != v9 && v10 != v11)
    {
      do
      {
        if (*(void *)v8 != *(void *)v10) {
          break;
        }
        char v8 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v8 + 8);
        uint64_t v10 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v10 + 8);
        if (v8 == v9) {
          break;
        }
      }
      while (v10 != v11);
    }
    while (v8 != v9)
    {
      sub_2169814FC(&v28, v29, v8, v8);
      char v8 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v8 + 8);
    }
    while (v10 != v11)
    {
      sub_2169814FC(&v26, v27, v10, v10);
      uint64_t v10 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v10 + 8);
    }
    long long v24 = 0uLL;
    uint64_t v25 = 0;
    *(void *)&long long v21 = v28;
    *(void *)&long long i = v29;
    v36 = (uint64_t *)v27;
    uint64_t v37 = v26;
    uint64_t v35 = &v24;
    sub_216981918((uint64_t)&v21, (void **)&i, (uint64_t)&v37, &v36, (uint64_t **)&v35);
    long long v21 = v24;
    if ((void)v24 != *((void *)&v24 + 1))
    {
      sub_2169813FC((uint64_t *)&v21, v13, v14);
      pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionChildPolicy>::RemoveChild();
    }
    long long v21 = 0uLL;
    uint64_t v22 = 0;
    *(void *)&long long i = v26;
    v36 = v28;
    uint64_t v37 = v27;
    uint64_t v34 = &v21;
    uint64_t v35 = (long long *)v29;
    sub_216981918((uint64_t)&i, &v37, (uint64_t)&v36, &v35, (uint64_t **)&v34);
    for (long long i = v21; (void)i != *((void *)&i + 1); sub_21698147C(&i))
    {
      int v17 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)sub_2169813FC((uint64_t *)&i, v15, v16);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget((pxrInternal__aapl__pxrReserved__::SdfPath *)&v32, v17, &v37);
      BOOL v18 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(&v30);
      if ((pxrInternal__aapl__pxrReserved__::SdfLayer::HasSpec(v18, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v37) & 1) == 0)pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionChildPolicy>::CreateSpec(); {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v37 + 1);
      }
      sub_21697C414(&v37);
    }
    uint64_t v23 = (void **)&v21;
    sub_216981168(&v23);
    uint64_t v23 = (void **)&v24;
    sub_216981168(&v23);
    sub_216981EE8((uint64_t)&v26, v27[0]);
    sub_216981EE8((uint64_t)&v28, v29[0]);
    uint64_t v19 = v31;
    if (v31 && atomic_fetch_add_explicit((atomic_uint *volatile)(v31 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v33);
    return sub_21697C414(&v32);
  }
  return result;
}

void sub_21697F81C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,void *a26,uint64_t a27,char a28,void *a29)
{
  a16 = (void **)&a13;
  sub_216981168(&a16);
  a16 = (void **)&a21;
  sub_216981168(&a16);
  sub_216981EE8((uint64_t)&a25, a26);
  sub_216981EE8((uint64_t)&a28, a29);
  uint64_t v31 = *(atomic_uint **)(v29 - 136);
  if (v31)
  {
    if (atomic_fetch_add_explicit(v31 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v31 + 8))(v31);
    }
  }
  sub_21697B754((_DWORD *)(v29 - 124));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Sdf_RelationshipTargetListEditor::Sdf_RelationshipTargetListEditor(void *a1, atomic_uint **a2, atomic_uint **a3)
{
  char v6 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v6) {
    char v6 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  sub_216980810(a1, a2, (uint64_t *)v6 + 53, a3);
}

void pxrInternal__aapl__pxrReserved__::Sdf_RelationshipTargetListEditor::~Sdf_RelationshipTargetListEditor(pxrInternal__aapl__pxrReserved__::Sdf_RelationshipTargetListEditor *this)
{
  pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionListEditor::~Sdf_AttributeConnectionListEditor(this);

  operator delete(v1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::Sdf_RelationshipTargetListEditor::_OnEdit(_DWORD *a1, int a2, const pxrInternal__aapl__pxrReserved__::SdfPath **a3, const pxrInternal__aapl__pxrReserved__::SdfPath **a4)
{
  return sub_21697F9C8(a1, a2, 9, a3, a4);
}

_DWORD *sub_21697F9C8(_DWORD *result, int a2, uint64_t a3, const pxrInternal__aapl__pxrReserved__::SdfPath **a4, const pxrInternal__aapl__pxrReserved__::SdfPath **a5)
{
  if ((a2 & 0xFFFFFFFE) != 2)
  {
    uint64_t v7 = (uint64_t)result;
    sub_21698131C((uint64_t)result, &v32);
    sub_2169813A0(v7, &v30);
    v29[0] = 0;
    v29[1] = 0;
    v27[1] = 0;
    char v28 = (uint64_t *)v29;
    uint64_t v26 = (uint64_t *)v27;
    v27[0] = 0;
    char v8 = *a4;
    int v9 = a4[1];
    uint64_t v10 = *a5;
    unint64_t v11 = a5[1];
    if (v8 != v9 && v10 != v11)
    {
      do
      {
        if (*(void *)v8 != *(void *)v10) {
          break;
        }
        char v8 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v8 + 8);
        uint64_t v10 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v10 + 8);
        if (v8 == v9) {
          break;
        }
      }
      while (v10 != v11);
    }
    while (v8 != v9)
    {
      sub_2169814FC(&v28, v29, v8, v8);
      char v8 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v8 + 8);
    }
    while (v10 != v11)
    {
      sub_2169814FC(&v26, v27, v10, v10);
      uint64_t v10 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v10 + 8);
    }
    long long v24 = 0uLL;
    uint64_t v25 = 0;
    *(void *)&long long v21 = v28;
    *(void *)&long long i = v29;
    v36 = (uint64_t *)v27;
    uint64_t v37 = v26;
    uint64_t v35 = &v24;
    sub_216981918((uint64_t)&v21, (void **)&i, (uint64_t)&v37, &v36, (uint64_t **)&v35);
    long long v21 = v24;
    if ((void)v24 != *((void *)&v24 + 1))
    {
      sub_2169813FC((uint64_t *)&v21, v13, v14);
      pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipTargetChildPolicy>::RemoveChild();
    }
    long long v21 = 0uLL;
    uint64_t v22 = 0;
    *(void *)&long long i = v26;
    v36 = v28;
    uint64_t v37 = v27;
    uint64_t v34 = &v21;
    uint64_t v35 = (long long *)v29;
    sub_216981918((uint64_t)&i, &v37, (uint64_t)&v36, &v35, (uint64_t **)&v34);
    for (long long i = v21; (void)i != *((void *)&i + 1); sub_21698147C(&i))
    {
      int v17 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)sub_2169813FC((uint64_t *)&i, v15, v16);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget((pxrInternal__aapl__pxrReserved__::SdfPath *)&v32, v17, &v37);
      BOOL v18 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(&v30);
      if ((pxrInternal__aapl__pxrReserved__::SdfLayer::HasSpec(v18, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v37) & 1) == 0)pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipTargetChildPolicy>::CreateSpec(); {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v37 + 1);
      }
      sub_21697C414(&v37);
    }
    uint64_t v23 = (void **)&v21;
    sub_216981168(&v23);
    uint64_t v23 = (void **)&v24;
    sub_216981168(&v23);
    sub_216981EE8((uint64_t)&v26, v27[0]);
    sub_216981EE8((uint64_t)&v28, v29[0]);
    uint64_t v19 = v31;
    if (v31 && atomic_fetch_add_explicit((atomic_uint *volatile)(v31 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v33);
    return sub_21697C414(&v32);
  }
  return result;
}

void sub_21697FD64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,void *a26,uint64_t a27,char a28,void *a29)
{
  a16 = (void **)&a13;
  sub_216981168(&a16);
  a16 = (void **)&a21;
  sub_216981168(&a16);
  sub_216981EE8((uint64_t)&a25, a26);
  sub_216981EE8((uint64_t)&a28, a29);
  uint64_t v31 = *(atomic_uint **)(v29 - 136);
  if (v31)
  {
    if (atomic_fetch_add_explicit(v31 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v31 + 8))(v31);
    }
  }
  sub_21697B754((_DWORD *)(v29 - 124));
  _Unwind_Resume(a1);
}

uint64_t sub_21697FE4C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

double sub_21697FE54@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v3 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8);
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8)))
  {
    uint64_t v4 = "List editor is expired";
  }
  else
  {
    char v5 = sub_21697F2E0(v3);
    if (pxrInternal__aapl__pxrReserved__::SdfSpec::PermissionToEdit(v5))
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 24) = 0;
      return result;
    }
    uint64_t v4 = "Permission denied";
  }
  sub_216779094(&v7, v4);
  double result = *(double *)&v7;
  *(_OWORD *)a2 = v7;
  *(void *)(a2 + 16) = v8;
  *(unsigned char *)(a2 + 24) = 1;
  return result;
}

BOOL sub_21697FEDC(uint64_t a1, void *lpsrc)
{
  long long v3 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C754CB0, (const struct __class_type_info *)&unk_26C754CC0, 0);
  uint64_t v4 = v3;
  if (v3)
  {
    sub_216981F44(a1, v3 + 32, 0);
  }
  else
  {
    v6[0] = "sdf/listOpListEditor.h";
    v6[1] = "CopyEdits";
    v6[2] = 221;
    v6[3] = "virtual BOOL pxrInternal__aapl__pxrReserved__::Sdf_ListOpListEditor<pxrInternal__aapl__pxrReserved__::SdfPat"
            "hKeyPolicy>::CopyEdits(const Sdf_ListEditor<TP> &) [TypePolicy = pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy]";
    char v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v6, 1, (pxrInternal__aapl__pxrReserved__ *)"Could not copy from list editor of different type");
  }
  return v4 != 0;
}

void sub_21697FFAC()
{
}

void sub_216980054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_216980068()
{
}

void sub_216980118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_21698012C(uint64_t a1, uint64_t a2)
{
  void v5[4] = *MEMORY[0x263EF8340];
  sub_216980D74((uint64_t)&v4, a1 + 32);
  v5[0] = &unk_26C754F20;
  v5[1] = a1;
  void v5[2] = a2;
  v5[3] = v5;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::ModifyOperations();
}

void sub_216980240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_21698026C()
{
}

void sub_216980274(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _DWORD **a5)
{
  int v9 = a2;
  sub_216980D74((uint64_t)v8, a1 + 32);
  sub_216982FA8((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 24), a5, v7);
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::ReplaceOperations();
}

void sub_216980384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216980BCC((void **)va);
  _Unwind_Resume(a1);
}

void sub_2169803B0(uint64_t a1, int a2, void *lpsrc)
{
  int v6 = a2;
  if (__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C754CB0, (const struct __class_type_info *)&unk_26C754CC0, 0))
  {
    sub_216980D74((uint64_t)v4, a1 + 32);
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::ComposeOperations();
  }
  v4[0] = "sdf/listOpListEditor.h";
  v4[1] = "ApplyList";
  v4[2] = 296;
  v4[3] = "virtual void pxrInternal__aapl__pxrReserved__::Sdf_ListOpListEditor<pxrInternal__aapl__pxrReserved__::SdfPathK"
          "eyPolicy>::ApplyList(SdfListOpType, const Sdf_ListEditor<TP> &) [TypePolicy = pxrInternal__aapl__pxrReserved__"
          "::SdfPathKeyPolicy]";
  char v5 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot apply from list editor of different type");
}

void sub_216980508(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216980BCC((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21698051C(uint64_t a1, uint64_t a2, void *a3, pxrInternal__aapl__pxrReserved__::SdfPath **a4)
{
  uint64_t v5 = a3[1];
  int v6 = *a4;
  char v7 = a4[1];
  BOOL v8 = *a3 == v5 || v6 == v7;
  int v9 = *a4;
  if (!v8)
  {
    uint64_t v20 = *a3 + 8;
    int v9 = *a4;
    do
    {
      if (*(void *)(v20 - 8) != *(void *)v9) {
        break;
      }
      int v9 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v9 + 8);
      if (v20 == v5) {
        break;
      }
      v20 += 8;
    }
    while (v9 != v7);
  }
  if (v9 != v7)
  {
    uint64_t v10 = v9;
    while (v6 == v10)
    {
LABEL_12:
      uint64_t v10 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v10 + 8);
      if (v10 == v7) {
        goto LABEL_13;
      }
    }
    unint64_t v11 = *a4;
    while (*(void *)v10 != *(void *)v11)
    {
      unint64_t v11 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v11 + 8);
      if (v11 == v10) {
        goto LABEL_12;
      }
    }
    int v32 = "sdf/listEditor.h";
    int v33 = "_ValidateEdit";
    uint64_t v34 = 262;
    uint64_t v35 = "virtual BOOL pxrInternal__aapl__pxrReserved__::Sdf_ListEditor<pxrInternal__aapl__pxrReserved__::SdfPathKeyPoli"
          "cy>::_ValidateEdit(SdfListOpType, const value_vector_type &, const value_vector_type &) const [TypePolicy = px"
          "rInternal__aapl__pxrReserved__::SdfPathKeyPolicy]";
    char v36 = 0;
    int v17 = __p;
    sub_216983118(v10);
    if (v28 < 0) {
      int v17 = (void **)__p[0];
    }
    unint64_t v18 = *(void *)(a1 + 16) & 0xFFFFFFFFFFFFFFF8;
    if (v18)
    {
      uint64_t v19 = (const char *)(v18 + 16);
      if (*(char *)(v18 + 39) < 0) {
        uint64_t v19 = *(const char **)v19;
      }
    }
    else
    {
      uint64_t v19 = "";
    }
    sub_21698131C(a1, &v30);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v30);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 1, (pxrInternal__aapl__pxrReserved__ *)"Duplicate item '%s' not allowed for field '%s' on <%s>", (const char *)v17, v19, Text);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v31);
    sub_21697C414(&v30);
LABEL_30:
    if (v28 < 0) {
      operator delete(__p[0]);
    }
    return 0;
  }
LABEL_13:
  uint64_t v12 = sub_21697F2E0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8));
  Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(v12);
  FieldDefinition = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFieldDefinition(Schema, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 16));
  if (FieldDefinition)
  {
    if (v9 != v7)
    {
      uint64_t v15 = FieldDefinition;
      while (1)
      {
        sub_216983260(v15, v9, __p);
        if (v29) {
          break;
        }
        int v9 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v9 + 8);
        if (v9 == v7) {
          return 1;
        }
      }
      int v32 = "sdf/listEditor.h";
      int v33 = "_ValidateEdit";
      uint64_t v34 = 279;
      uint64_t v35 = "virtual BOOL pxrInternal__aapl__pxrReserved__::Sdf_ListEditor<pxrInternal__aapl__pxrReserved__::SdfPathKeyPo"
            "licy>::_ValidateEdit(SdfListOpType, const value_vector_type &, const value_vector_type &) const [TypePolicy "
            "= pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy]";
      char v36 = 0;
      WhyNot = pxrInternal__aapl__pxrReserved__::SdfAllowed::GetWhyNot((uint64_t *)__p);
      if (*((char *)WhyNot + 23) >= 0) {
        uint64_t v26 = (const char *)WhyNot;
      }
      else {
        uint64_t v26 = (const char *)*WhyNot;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 1, (pxrInternal__aapl__pxrReserved__ *)"%s", v26);
      if (!v29) {
        return 0;
      }
      goto LABEL_30;
    }
    return 1;
  }
  else
  {
    int v32 = "sdf/listEditor.h";
    int v33 = "_ValidateEdit";
    uint64_t v34 = 273;
    uint64_t v35 = "virtual BOOL pxrInternal__aapl__pxrReserved__::Sdf_ListEditor<pxrInternal__aapl__pxrReserved__::SdfPathKeyPoli"
          "cy>::_ValidateEdit(SdfListOpType, const value_vector_type &, const value_vector_type &) const [TypePolicy = px"
          "rInternal__aapl__pxrReserved__::SdfPathKeyPolicy]";
    char v36 = 0;
    unint64_t v23 = *(void *)(a1 + 16) & 0xFFFFFFFFFFFFFFF8;
    if (v23)
    {
      long long v24 = (const char *)(v23 + 16);
      if (*(char *)(v23 + 39) < 0) {
        long long v24 = *(const char **)v24;
      }
    }
    else
    {
      long long v24 = "";
    }
    uint64_t v16 = 1;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 1, (pxrInternal__aapl__pxrReserved__ *)"No field definition for field '%s'", v24);
  }
  return v16;
}

void sub_2169807C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, int a20,__int16 a21,char a22,char a23)
{
  if (a19)
  {
    if (a18 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_216980808()
{
}

void sub_216980810(void *a1, atomic_uint **a2, uint64_t *a3, atomic_uint **a4)
{
  *sub_216980A94(a1, a2, a3, a4) = &unk_26C754D48;
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SdfListOp();
}

void sub_216980A54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216980BCC((void **)va);
  sub_216980BCC(v3);
  sub_216980C58(v2);
  _Unwind_Resume(a1);
}

void *sub_216980A94(void *result, atomic_uint **a2, uint64_t *a3, atomic_uint **a4)
{
  uint64_t v4 = *a2;
  char *result = &unk_26C754DD0;
  result[1] = v4;
  if (v4) {
    atomic_fetch_add(v4, 1u);
  }
  uint64_t v5 = *a3;
  result[2] = *a3;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    result[2] &= 0xFFFFFFFFFFFFFFF8;
  }
  int v6 = *a4;
  result[3] = *a4;
  if (v6) {
    atomic_fetch_add(v6, 1u);
  }
  return result;
}

uint64_t sub_216980B04@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(a1, a2, (pxrInternal__aapl__pxrReserved__::VtValue *)&v7);
  if (v8 && (sub_216980CE8((pxrInternal__aapl__pxrReserved__::VtValue *)&v7) & 1) != 0)
  {
    if ((v8 & 4) != 0) {
      a3 = (*(uint64_t (**)(uint64_t *))((v8 & 0xFFFFFFFFFFFFFFF8) + 168))(&v7);
    }
    else {
      a3 = v7;
    }
  }
  sub_216980D74(a4, a3);
  return sub_2168EE084((uint64_t)&v7);
}

void sub_216980BB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void **sub_216980BCC(void **a1)
{
  long long v3 = a1 + 16;
  sub_216981168(&v3);
  long long v3 = a1 + 13;
  sub_216981168(&v3);
  long long v3 = a1 + 10;
  sub_216981168(&v3);
  long long v3 = a1 + 7;
  sub_216981168(&v3);
  long long v3 = a1 + 4;
  sub_216981168(&v3);
  long long v3 = a1 + 1;
  sub_216981168(&v3);
  return a1;
}

void *sub_216980C58(void *a1)
{
  *a1 = &unk_26C754DD0;
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(a1 + 3));
  uint64_t v2 = a1[2];
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(a1 + 1));
  return a1;
}

void sub_216980CC0(pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionListEditor *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionListEditor::~Sdf_AttributeConnectionListEditor(a1);

  operator delete(v1);
}

uint64_t sub_216980CE8(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000217469458 & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;

  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C754E48);
}

uint64_t sub_216980D74(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  sub_216980EEC((void *)(a1 + 8), *(_DWORD **)(a2 + 8), *(_DWORD **)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  sub_216980EEC((void *)(a1 + 32), *(_DWORD **)(a2 + 32), *(_DWORD **)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  sub_216980EEC((void *)(a1 + 56), *(_DWORD **)(a2 + 56), *(_DWORD **)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3);
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  sub_216980EEC((void *)(a1 + 80), *(_DWORD **)(a2 + 80), *(_DWORD **)(a2 + 88), (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 3);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  sub_216980EEC((void *)(a1 + 104), *(_DWORD **)(a2 + 104), *(_DWORD **)(a2 + 112), (uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 3);
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  sub_216980EEC((void *)(a1 + 128), *(_DWORD **)(a2 + 128), *(_DWORD **)(a2 + 136), (uint64_t)(*(void *)(a2 + 136) - *(void *)(a2 + 128)) >> 3);
  return a1;
}

void sub_216980E84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216981168((void ***)va);
  sub_216981168((void ***)va);
  sub_216981168((void ***)va);
  sub_216981168((void ***)va);
  sub_216981168((void ***)va);
  _Unwind_Resume(a1);
}

void *sub_216980EEC(void *result, _DWORD *a2, _DWORD *a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    sub_21677CACC(result, a4);
    double result = sub_216980F74((uint64_t)(v6 + 2), a2, a3, (_DWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_216980F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_216981168(&a9);
  _Unwind_Resume(a1);
}

_DWORD *sub_216980F74(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  unint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    int v6 = a2;
    do
    {
      sub_216981010(v4, v6);
      sub_21698105C(v4 + 1, v6 + 1);
      v6 += 2;
      uint64_t v4 = v11 + 2;
      v11 += 2;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  sub_21698109C((uint64_t)v8);
  return v4;
}

_DWORD *sub_216981010(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a1)) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::GetPtr(a1)+ 8), 1u, memory_order_relaxed);
  }
  return a1;
}

_DWORD *sub_21698105C(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1)) {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::GetPtr(a1);
  }
  return a1;
}

uint64_t sub_21698109C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_2169810D4((uint64_t *)a1);
  }
  return a1;
}

uint64_t *sub_2169810D4(uint64_t *result)
{
  uint64_t v2 = (void *)result[1];
  uint64_t v1 = (_DWORD **)result[2];
  long long v3 = *v1;
  uint64_t v4 = (_DWORD *)*v2;
  if (*v1 != (_DWORD *)*v2)
  {
    uint64_t v5 = *result;
    do
    {
      v3 -= 2;
      double result = (uint64_t *)sub_216981128(v5, v3);
    }
    while (v3 != v4);
  }
  return result;
}

_DWORD *sub_216981128(uint64_t a1, _DWORD *a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a2 + 1);

  return sub_21697C414(a2);
}

void sub_216981168(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 2;
        sub_216981128((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_216981200(void *a1)
{
  uint64_t v1 = (_DWORD *)*a1;
  if (*a1)
  {
    long long v3 = (_DWORD *)a1[1];
    uint64_t v4 = (_DWORD *)*a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 2;
        sub_216981128((uint64_t)(a1 + 2), v3);
      }
      while (v3 != v1);
      uint64_t v4 = (_DWORD *)*a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

_DWORD *sub_21698131C@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  long long v3 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8);
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8)))
  {
    *(void *)a2 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a2);
    return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a2 + 1);
  }
  else
  {
    uint64_t v5 = sub_21697F2E0(v3);
    return pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v5, a2);
  }
}

uint64_t sub_2169813A0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  long long v3 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8);
  uint64_t result = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8));
  if (result)
  {
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    uint64_t v5 = (uint64_t **)sub_21697F2E0(v3);
    return (uint64_t)pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v5, a2);
  }
  return result;
}

uint64_t sub_2169813FC(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    void v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReserved__::SdfPath"
            ">>::operator*() [T = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_216981474()
{
}

void *sub_21698147C(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReser"
            "ved__::SdfPath>>::operator++() [T = std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

uint64_t *sub_2169814FC(uint64_t **a1, void *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, _DWORD *a4)
{
  char v6 = sub_2169815BC(a1, a2, &v13, &v12, a3);
  int v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    int v7 = (uint64_t *)operator new(0x28uLL);
    v10[1] = a1 + 1;
    sub_216981010((_DWORD *)v7 + 7, a4);
    sub_21698105C((_DWORD *)v7 + 8, a4 + 1);
    char v11 = 1;
    sub_21677B358(a1, v13, v8, v7);
    v10[0] = 0;
    sub_216981880((uint64_t)v10, 0);
  }
  return v7;
}

uint64_t *sub_2169815BC(void *a1, void *a2, void *a3, uint64_t *a4, const pxrInternal__aapl__pxrReserved__::SdfPath *a5)
{
  char v9 = a1 + 1;
  if (a1 + 1 != a2
    && !sub_2169817E8(a5, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)a2 + 28)))
  {
    if (!sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)a2 + 28), a5))
    {
      *a3 = a2;
      *a4 = (uint64_t)a2;
      return a4;
    }
    a4 = a2 + 1;
    uint64_t v13 = a2[1];
    if (v13)
    {
      unint64_t v14 = (void *)a2[1];
      do
      {
        uint64_t v15 = v14;
        unint64_t v14 = (void *)*v14;
      }
      while (v14);
    }
    else
    {
      unint64_t v18 = a2;
      do
      {
        uint64_t v15 = (void *)v18[2];
        BOOL v17 = *v15 == (void)v18;
        unint64_t v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!sub_2169817E8(a5, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v15 + 28))) {
        goto LABEL_28;
      }
      uint64_t v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  if ((void *)*a1 == a2)
  {
    uint64_t v12 = a2;
LABEL_16:
    if (*a2)
    {
      *a3 = v12;
      return v12 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  char v11 = (void *)*a2;
  if (*a2)
  {
    do
    {
      uint64_t v12 = v11;
      char v11 = (void *)v11[1];
    }
    while (v11);
  }
  else
  {
    uint64_t v16 = a2;
    do
    {
      uint64_t v12 = (void *)v16[2];
      BOOL v17 = *v12 == (void)v16;
      uint64_t v16 = v12;
    }
    while (v17);
  }
  if (sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v12 + 28), a5)) {
    goto LABEL_16;
  }
LABEL_28:

  return sub_216981754((uint64_t)a1, a3, a5);
}

void *sub_216981754(uint64_t a1, void *a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  char v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        int v7 = v4;
        uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v4 + 28);
        if (!sub_2169817E8(a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v4 + 28))) {
          break;
        }
        char v4 = (void *)*v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!sub_2169817E8(v8, a3)) {
        break;
      }
      uint64_t v5 = v7 + 1;
      char v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    int v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t sub_2169817E8(pxrInternal__aapl__pxrReserved__::SdfPath *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  if (*(void *)a1 == *(void *)a2) {
    return 0;
  }
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a1)
    || !pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a2))
  {
    if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a1)) {
      return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a2);
    }
    return 0;
  }

  return pxrInternal__aapl__pxrReserved__::SdfPath::_LessThanInternal(a1, a2, v4);
}

void sub_216981880(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(_DWORD **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_2169818D8(v2 + 7);
    }
    operator delete(v2);
  }
}

_DWORD *sub_2169818D8(_DWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);

  return sub_21697C414(a1);
}

void *sub_216981918(uint64_t a1, void **a2, uint64_t a3, void *a4, uint64_t **a5)
{
  uint64_t v8 = *(void **)a1;
  char v9 = *a2;
  if (*(void **)a1 == *a2)
  {
LABEL_31:
    char v9 = v8;
    return sub_216981E58((uint64_t)&v26, v8, v9, *a5);
  }
  char v11 = *(void **)a3;
  if (*(void *)a3 != *a4)
  {
    while (1)
    {
      if (sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v8 + 28), (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v11 + 28)))
      {
        sub_216981AC0(a5, (_DWORD *)(*(void *)a1 + 28));
        uint64_t v13 = *(void **)a1;
        unint64_t v14 = *(void **)(*(void *)a1 + 8);
        if (v14)
        {
          do
          {
            uint64_t v15 = v14;
            unint64_t v14 = (void *)*v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            uint64_t v15 = (void *)v13[2];
            BOOL v16 = *v15 == (void)v13;
            uint64_t v13 = v15;
          }
          while (!v16);
        }
        *(void *)a1 = v15;
      }
      else
      {
        if (sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)(*(void *)a3 + 28), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(*(void *)a1 + 28)))
        {
          BOOL v17 = *(void **)a3;
          unint64_t v18 = *(void **)(*(void *)a3 + 8);
          if (v18)
          {
            do
            {
              uint64_t v19 = v18;
              unint64_t v18 = (void *)*v18;
            }
            while (v18);
          }
          else
          {
            do
            {
              uint64_t v19 = (void *)v17[2];
              BOOL v16 = *v19 == (void)v17;
              BOOL v17 = v19;
            }
            while (!v16);
          }
        }
        else
        {
          uint64_t v20 = *(void **)a1;
          long long v21 = *(void **)(*(void *)a1 + 8);
          if (v21)
          {
            do
            {
              uint64_t v22 = v21;
              long long v21 = (void *)*v21;
            }
            while (v21);
          }
          else
          {
            do
            {
              uint64_t v22 = (void *)v20[2];
              BOOL v16 = *v22 == (void)v20;
              uint64_t v20 = v22;
            }
            while (!v16);
          }
          *(void *)a1 = v22;
          unint64_t v23 = *(void **)a3;
          long long v24 = *(void **)(*(void *)a3 + 8);
          if (v24)
          {
            do
            {
              uint64_t v19 = v24;
              long long v24 = (void *)*v24;
            }
            while (v24);
          }
          else
          {
            do
            {
              uint64_t v19 = (void *)v23[2];
              BOOL v16 = *v19 == (void)v23;
              unint64_t v23 = v19;
            }
            while (!v16);
          }
        }
        *(void *)a3 = v19;
      }
      uint64_t v8 = *(void **)a1;
      char v9 = *a2;
      if (*(void **)a1 == *a2) {
        break;
      }
      char v11 = *(void **)a3;
      if (*(void *)a3 == *a4) {
        return sub_216981E58((uint64_t)&v26, v8, v9, *a5);
      }
    }
    goto LABEL_31;
  }
  return sub_216981E58((uint64_t)&v26, v8, v9, *a5);
}

uint64_t **sub_216981AC0(uint64_t **a1, _DWORD *a2)
{
  char v4 = *a1;
  unint64_t v5 = (*a1)[1];
  if (v5 >= (*a1)[2])
  {
    uint64_t v6 = sub_216981B30(*a1, a2);
  }
  else
  {
    sub_216981010((_DWORD *)(*a1)[1], a2);
    sub_21698105C((_DWORD *)(v5 + 4), a2 + 1);
    uint64_t v6 = v5 + 8;
  }
  v4[1] = v6;
  return a1;
}

uint64_t sub_216981B30(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 3;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 61) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 2 > v5) {
    unint64_t v5 = v8 >> 2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  BOOL v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_21677CB28(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v13 = v10;
  unint64_t v14 = &v10[8 * v4];
  BOOL v16 = &v10[8 * v9];
  sub_216981010(v14, a2);
  sub_21698105C((_DWORD *)v14 + 1, a2 + 1);
  uint64_t v15 = v14 + 8;
  sub_216981C20(a1, &v13);
  uint64_t v11 = a1[1];
  sub_216981DDC(&v13);
  return v11;
}

void sub_216981C0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216981DDC((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216981C20(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216981C98((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216981C98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      sub_21697D878((_DWORD *)(v7 - 8), (_DWORD *)(v9 - 8));
      sub_21697D8B4((_DWORD *)(v7 - 4), (_DWORD *)(v9 - 4));
      uint64_t v7 = *((void *)&v15 + 1) - 8;
      *((void *)&v15 + 1) -= 8;
      v9 -= 8;
    }
    while (v9 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_216981D50((uint64_t)v12);
  return v10;
}

uint64_t sub_216981D50(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216981D88((uint64_t *)a1);
  }
  return a1;
}

uint64_t *sub_216981D88(uint64_t *result)
{
  uint64_t v1 = *(_DWORD **)(result[2] + 8);
  uint64_t v2 = *(_DWORD **)(result[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *result;
    do
    {
      uint64_t result = (uint64_t *)sub_216981128(v3, v1);
      v1 += 2;
    }
    while (v1 != v2);
  }
  return result;
}

void **sub_216981DDC(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

_DWORD *sub_216981E10(_DWORD *result)
{
  uint64_t v2 = *((void *)result + 1);
  uint64_t v1 = *((void *)result + 2);
  if (v1 != v2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = *((void *)v3 + 4);
      *((void *)v3 + 2) = v1 - 8;
      uint64_t result = sub_216981128(v4, (_DWORD *)(v1 - 8));
      uint64_t v1 = *((void *)v3 + 2);
    }
    while (v1 != v2);
  }
  return result;
}

void *sub_216981E58(uint64_t a1, void *a2, void *a3, uint64_t *a4)
{
  uint64_t v4 = a2;
  uint64_t v10 = a4;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v5 = a3;
  do
  {
    sub_216981AC0(&v10, (_DWORD *)v4 + 7);
    uint64_t v6 = (void *)v4[1];
    if (v6)
    {
      do
      {
        uint64_t v7 = v6;
        uint64_t v6 = (void *)*v6;
      }
      while (v6);
    }
    else
    {
      do
      {
        uint64_t v7 = (void *)v4[2];
        BOOL v8 = *v7 == (void)v4;
        uint64_t v4 = v7;
      }
      while (!v8);
    }
    uint64_t v4 = v7;
  }
  while (v7 != v5);
  return v5;
}

void sub_216981EE8(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_216981EE8(a1, *a2);
    sub_216981EE8(a1, a2[1]);
    sub_2169818D8((_DWORD *)a2 + 7);
    operator delete(a2);
  }
}

void sub_216981F44(uint64_t a1, unsigned char *a2, _DWORD *a3)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8);
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8)))
  {
    long long v15 = "sdf/listOpListEditor.h";
    BOOL v16 = "_UpdateListOp";
    uint64_t v17 = 113;
    unint64_t v18 = "void pxrInternal__aapl__pxrReserved__::Sdf_ListOpListEditor<pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy"
          ">::_UpdateListOp(const ListOpType &, const SdfListOpType *) [TypePolicy = pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy]";
    char v19 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid owner.");
  }
  else
  {
    uint64_t v7 = (uint64_t **)sub_21697F2E0(v6);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v7, (uint64_t *)&v15);
    BOOL v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)&v15);
    char v9 = pxrInternal__aapl__pxrReserved__::SdfLayer::PermissionToEdit(v8);
    uint64_t v10 = v16;
    if (v16 && atomic_fetch_add_explicit((atomic_uint *volatile)v16 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(const char *))(*(void *)v10 + 8))(v10);
    }
    if (v9)
    {
      v21[0] = xmmword_217468380;
      v21[1] = unk_217468390;
      v21[2] = xmmword_2174683A0;
      uint64_t v11 = 0;
      uint64_t v12 = v21;
      uint64_t v13 = 1;
      long long v14 = (char *)v21 + 8;
      do
      {
        if (!a3 || *a3 == *v12) {
          sub_216982388();
        }
        ++v11;
        uint64_t v12 = (_DWORD *)v21 + 2 * v11;
        ++v13;
        v14 += 8;
      }
      while (v13 != 7);
      if ((*a2 != 0) != (*(unsigned char *)(a1 + 32) != 0))
      {
        pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v20);
        sub_216980D74((uint64_t)&v15, (uint64_t)a2);
        pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::Swap();
      }
    }
    else
    {
      long long v15 = "sdf/listOpListEditor.h";
      BOOL v16 = "_UpdateListOp";
      uint64_t v17 = 118;
      unint64_t v18 = "void pxrInternal__aapl__pxrReserved__::Sdf_ListOpListEditor<pxrInternal__aapl__pxrReserved__::SdfPathKeyPoli"
            "cy>::_UpdateListOp(const ListOpType &, const SdfListOpType *) [TypePolicy = pxrInternal__aapl__pxrReserved__"
            "::SdfPathKeyPolicy]";
      char v19 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 1, (pxrInternal__aapl__pxrReserved__ *)"Layer is not editable.");
    }
  }
}

void sub_216982330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  sub_2168EE084(v30 - 160);
  sub_216980BCC(&a11);
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&a30);
  _Unwind_Resume(a1);
}

void sub_216982388()
{
}

uint64_t *sub_216982420(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 152), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *sub_216982440(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_216982550(a1);
}

uint64_t sub_216982450()
{
  return 1;
}

unint64_t sub_216982458(unsigned __int8 **a1)
{
  return sub_216982604(*a1);
}

void sub_216982460()
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::operator==();
}

void sub_21698246C()
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::operator==();
}

uint64_t sub_216982478()
{
  return 0;
}

void sub_216982484()
{
}

void *sub_216982494()
{
  return &unk_26C754E48;
}

uint64_t sub_2169824A0()
{
  return 0;
}

uint64_t sub_2169824A8()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_2169824B4()
{
  return 0;
}

uint64_t sub_2169824BC()
{
  return 0;
}

BOOL sub_2169824C4(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x8000000217469458 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_216982500(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C754E48, a2, a3);
}

void *sub_216982524()
{
  return &unk_26C754E48;
}

uint64_t sub_216982530(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_216982538@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  *(void *)(a2 + 8) = &off_26C754E58;
  return sub_216982A54((unsigned int **)a2, v2);
}

uint64_t *sub_216982550(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 152), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    uint64_t v4 = (void **)(v2 + 128);
    sub_216981168(&v4);
    uint64_t v4 = (void **)(v2 + 104);
    sub_216981168(&v4);
    uint64_t v4 = (void **)(v2 + 80);
    sub_216981168(&v4);
    uint64_t v4 = (void **)(v2 + 56);
    sub_216981168(&v4);
    uint64_t v4 = (void **)(v2 + 32);
    sub_216981168(&v4);
    uint64_t v4 = (void **)(v2 + 8);
    sub_216981168(&v4);
    operator delete((void *)v2);
  }
  return a1;
}

unint64_t sub_216982604(unsigned __int8 *a1)
{
  uint64_t v2 = 0;
  char v3 = 0;
  sub_216982670((uint64_t)&v2, a1, (uint64_t)(a1 + 8), (uint64_t)(a1 + 32), (uint64_t)(a1 + 56), (uint64_t)(a1 + 80), (uint64_t)(a1 + 104), (uint64_t)(a1 + 128));
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v2));
}

uint64_t sub_216982670(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  if (*(unsigned char *)(a1 + 8)) {
    v8 += (unint64_t)(*(void *)a1 + v8 + (*(void *)a1 + v8) * (*(void *)a1 + v8)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v8;
  return sub_2169826B8(a1, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_2169826B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  long long v14 = *(unsigned int **)a2;
  uint64_t v15 = *(void *)(a2 + 8) - (void)v14;
  if (v15)
  {
    uint64_t v16 = v15 >> 3;
    do
    {
      --v16;
      uint64_t v17 = v14 + 2;
      sub_2169827F8(a1, v14);
      long long v14 = v17;
    }
    while (v16);
  }

  return sub_21698275C(a1, a3, a4, a5, a6, a7);
}

uint64_t sub_21698275C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = *(unsigned int **)a2;
  uint64_t v13 = *(void *)(a2 + 8) - (void)v12;
  if (v13)
  {
    uint64_t v14 = v13 >> 3;
    do
    {
      --v14;
      uint64_t v15 = v12 + 2;
      sub_2169827F8(a1, v12);
      uint64_t v12 = v15;
    }
    while (v14);
  }

  return sub_216982834(a1, a3, a4, a5, a6);
}

uint64_t sub_2169827F8(uint64_t result, unsigned int *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (*(unsigned char *)(result + 8)) {
    v3 += (unint64_t)(*(void *)result + v3 + (*(void *)result + v3) * (*(void *)result + v3)) >> 1;
  }
  else {
    *(unsigned char *)(result + 8) = 1;
  }
  *(void *)uint64_t result = v2 + ((unint64_t)(v3 + v2 + (v3 + v2) * (v3 + v2)) >> 1);
  return result;
}

uint64_t sub_216982834(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(unsigned int **)a2;
  uint64_t v11 = *(void *)(a2 + 8) - (void)v10;
  if (v11)
  {
    uint64_t v12 = v11 >> 3;
    do
    {
      --v12;
      uint64_t v13 = v10 + 2;
      sub_2169827F8(a1, v10);
      uint64_t v10 = v13;
    }
    while (v12);
  }

  return sub_2169828C0(a1, a3, a4, a5);
}

uint64_t sub_2169828C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(unsigned int **)a2;
  uint64_t v9 = *(void *)(a2 + 8) - (void)v8;
  if (v9)
  {
    uint64_t v10 = v9 >> 3;
    do
    {
      --v10;
      uint64_t v11 = v8 + 2;
      sub_2169827F8(a1, v8);
      uint64_t v8 = v11;
    }
    while (v10);
  }

  return sub_216982944(a1, a3, a4);
}

uint64_t sub_216982944(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  uint64_t v6 = *(unsigned int **)a2;
  uint64_t v7 = *(void *)(a2 + 8) - (void)v6;
  if (v7)
  {
    uint64_t v8 = v7 >> 3;
    do
    {
      --v8;
      uint64_t v9 = v6 + 2;
      uint64_t result = sub_2169827F8(v5, v6);
      uint64_t v6 = v9;
    }
    while (v8);
  }
  uint64_t v10 = *(unsigned int **)a3;
  uint64_t v11 = *(void *)(a3 + 8) - *(void *)a3;
  if (v11)
  {
    uint64_t v12 = v11 >> 3;
    do
    {
      --v12;
      uint64_t v13 = v10 + 2;
      uint64_t result = sub_2169827F8(v5, v10);
      uint64_t v10 = v13;
    }
    while (v12);
  }
  return result;
}

uint64_t sub_2169829C8(uint64_t *a1)
{
  unsigned int v2 = atomic_load((unsigned int *)(*a1 + 152));
  if (v2 != 1)
  {
    uint64_t v3 = (unsigned int *)operator new(0xA0uLL);
    sub_216980D74((uint64_t)v3, *a1);
    atomic_store(0, v3 + 38);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 38, 1u, memory_order_relaxed);
    uint64_t v5 = *a1;
    *a1 = (uint64_t)v3;
    sub_216982550(&v5);
  }
  return *a1;
}

void sub_216982A40(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216982A54(unsigned int **a1, uint64_t a2)
{
  uint64_t v4 = (unsigned int *)operator new(0xA0uLL);
  uint64_t result = sub_216980D74((uint64_t)v4, a2);
  atomic_store(0, v4 + 38);
  *a1 = v4;
  atomic_fetch_add_explicit((atomic_uint *volatile)v4 + 38, 1u, memory_order_relaxed);
  return result;
}

void sub_216982AA8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 sub_216982AC4(uint64_t a1)
{
  unsigned int v2 = (char *)operator new(0x18uLL);
  *(void *)unsigned int v2 = &unk_26C754F20;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_216982B10(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C754F20;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_216982B40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_216982B9C(*(void *)(a1 + 16), (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(*(void *)(a1 + 8) + 24), a2);
}

uint64_t sub_216982B50(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C754F90)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_216982B90()
{
  return &unk_26C754F90;
}

uint64_t sub_216982B9C@<X0>(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    sub_21683A7CC();
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v3 + 48))(&v9);
  if (v10)
  {
    sub_216982C8C(a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v9, &v7);
    sub_21697D878((_DWORD *)a3, &v7);
    sub_21697D8B4((_DWORD *)(a3 + 4), &v8);
    *(unsigned char *)(a3 + 8) = 1;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
    sub_21697C414(&v7);
  }
  else
  {
    sub_216982E5C(a3, (uint64_t)&v9);
  }
  return sub_216982EE4((uint64_t)&v9);
}

void sub_216982C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, char a12)
{
}

_DWORD *sub_216982C8C@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1@<X0>, pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, int *a3@<X8>)
{
  sub_216982DA4(a1, &v6);
  sub_216982D0C(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v6, a3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  return sub_21697C414(&v6);
}

void sub_216982CF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

void sub_216982D0C(pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X1>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X2>, int *a3@<X8>)
{
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a1))
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath(a1, a2, a3);
  }
  else
  {
    *(void *)a3 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a3);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a3 + 1);
  }
}

_DWORD *sub_216982DA4@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a1);
  if (IsDormant)
  {
    uint64_t v5 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)IsDormant);
    sub_216981010(a2, v5);
    return sub_21698105C(a2 + 1, v5 + 1);
  }
  else
  {
    int v7 = sub_21697F2E0(a1);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v7, &v8);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v8, a2);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
    return sub_21697C414(&v8);
  }
}

void sub_216982E48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216982E5C(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
  sub_216982EA0((_DWORD *)a1, a2);
  return a1;
}

void sub_216982E8C(_Unwind_Exception *a1)
{
  sub_216982EE4(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_216982EA0(_DWORD *result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 8))
  {
    uint64_t v3 = result;
    uint64_t v4 = sub_216981010(result, (_DWORD *)a2);
    __n128 result = sub_21698105C(v4 + 1, (_DWORD *)(a2 + 4));
    *((unsigned char *)v3 + 8) = 1;
  }
  return result;
}

uint64_t sub_216982EE4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));
    sub_21697C414((_DWORD *)a1);
  }
  return a1;
}

void *sub_216982F24(void *a1)
{
  unsigned int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_216982FA8@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1@<X0>, _DWORD **a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *a2;
  if (v5 == a2[1])
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return sub_216980EEC(a3, v5, v5, 0);
  }
  else
  {
    sub_216982DA4(a1, &v16);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    sub_216980EEC(a3, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 3);
    *(_OWORD *)uint64_t v15 = *(_OWORD *)a3;
    while (v15[0] != v15[1])
    {
      int v8 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_2169813FC(v15, v6, v7);
      sub_216982D0C(v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v16, &v13);
      uint64_t v11 = (int *)sub_2169813FC(v15, v9, v10);
      sub_21697DE94(v11, &v13);
      sub_21697DEEC(v11 + 1, &v14);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
      sub_21697C414(&v13);
      sub_21698147C(v15);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
    return sub_21697C414(&v16);
  }
}

void sub_2169830D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216983118(pxrInternal__aapl__pxrReserved__::SdfPath *a1)
{
  sub_21677B834((uint64_t)v3);
  pxrInternal__aapl__pxrReserved__::operator<<(v3, a1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v3 + *(void *)(v3[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v3[1] = MEMORY[0x263F8C318] + 16;
  if (v4 < 0) {
    operator delete((void *)v3[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x21D447E60](&v5);
}

void sub_21698324C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21677B9CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_216983260@<X0>(uint64_t *result@<X0>, _DWORD *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v3 = (void (*)(uint64_t, int *))result[9];
  if (v3)
  {
    uint64_t v5 = *result;
    int v8 = (char *)&off_26C754FA0 + 1;
    sub_216981010(&v6, a2);
    sub_21698105C(&v7, a2 + 1);
    v3(v5, &v6);
    return (uint64_t *)sub_2168EE084((uint64_t)&v6);
  }
  else
  {
    *a3 = 0;
    a3[24] = 0;
  }
  return result;
}

void sub_216983320(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_216983334(_DWORD *a1, _DWORD *a2)
{
  sub_216981010(a2, a1);

  return sub_21698105C(a2 + 1, a1 + 1);
}

_DWORD *sub_21698337C(_DWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);

  return sub_21697C414(a1);
}

_DWORD *sub_2169833BC(_DWORD *a1, _DWORD *a2)
{
  sub_21697D878(a2, a1);
  sub_21697D8B4(a2 + 1, a1 + 1);

  return sub_21698337C(a1);
}

uint64_t sub_21698340C()
{
  return 1;
}

unint64_t sub_216983414(unsigned int *a1)
{
  return bswap64(0x9E3779B97F4A7C55* (a1[1]+ ((a1[1] + (unint64_t)*a1 + (a1[1] + (unint64_t)*a1) * (a1[1] + (unint64_t)*a1)) >> 1)));
}

BOOL sub_216983440(void *a1, void *a2)
{
  return *a1 == *a2;
}

BOOL sub_216983454(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_21698346C()
{
  return 0;
}

void *sub_216983478(pxrInternal__aapl__pxrReserved__::SdfPath *a1, void *a2)
{
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, a1);
}

void *sub_216983488()
{
  return &unk_26C755058;
}

uint64_t sub_216983494()
{
  return 0;
}

uint64_t sub_21698349C()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_2169834A8()
{
  return 0;
}

uint64_t sub_2169834B0()
{
  return 0;
}

BOOL sub_2169834B8(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x80000002174695B8 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2169834F4(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_26C755058, a2, a3);
}

void *sub_216983518()
{
  return &unk_26C755058;
}

_DWORD *sub_216983528@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = (char *)&off_26C754FA0 + 1;
  uint64_t v3 = sub_216981010((_DWORD *)a2, a1) + 1;

  return sub_21698105C(v3, a1 + 1);
}

void sub_21698357C()
{
  sub_216779094(v8, "SDF_ASSET");
  std::string __p = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C755068, 0, (uint64_t)v8, (uint64_t)&__p);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  uint64_t v0 = sub_2169795E8();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v0, "SDF_ASSET", "Sdf asset resolution diagnostics");
  sub_216779094(v8, "SDF_CHANGES");
  std::string __p = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C755068, 1, (uint64_t)v8, (uint64_t)&__p);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  uint64_t v1 = sub_2169795E8();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v1 + 4, "SDF_CHANGES", "Sdf layer change notifications");
  sub_216779094(v8, "SDF_FILE_FORMAT");
  std::string __p = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C755068, 2, (uint64_t)v8, (uint64_t)&__p);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  uint64_t v2 = sub_2169795E8();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v2 + 8, "SDF_FILE_FORMAT", "Sdf file format registration");
  sub_216779094(v8, "SDF_LAYER");
  std::string __p = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C755068, 3, (uint64_t)v8, (uint64_t)&__p);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  uint64_t v3 = sub_2169795E8();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v3 + 12, "SDF_LAYER", "Sdf layer loading and lifetime");
  sub_216779094(v8, "SDF_VARIABLE_EXPRESSION_PARSING");
  std::string __p = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C755068, 4, (uint64_t)v8, (uint64_t)&__p);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  uint64_t v4 = sub_2169795E8();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v4 + 16, "SDF_VARIABLE_EXPRESSION_PARSING", "Sdf variable expression parsing");
}

void sub_2169837B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_Info::GetFileFormat@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_Info *this@<X0>, uint64_t *a2@<X8>)
{
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)this + 112);
  if (v4)
  {
    *a2 = *((void *)this + 15);
    return (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)sub_2168BD80C(a2);
  }
  else
  {
    uint64_t v5 = sub_2168E79D8((void *)this + 4);
    if (v6 & 1 | (unint64_t)v5)
    {
      int v8 = (pxrInternal__aapl__pxrReserved__::PlugPlugin *)sub_2168E5D78((uint64_t *)this + 4);
      pxrInternal__aapl__pxrReserved__::PlugPlugin::Load(v8);
    }
    int v16 = 0;
    char v9 = sub_216983994((pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_Info *)((char *)this + 8), v6, v7);
    if (v9)
    {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **__return_ptr))(*(void *)v9 + 16))(&v15);
      uint64_t v11 = v15;
      char v10 = v16;
      uint64_t v15 = 0;
      int v16 = v11;
      sub_2168BD378((int)&v16, v10);
      sub_216986288(&v15);
    }
    if (v16)
    {
      std::mutex::lock((std::mutex *)((char *)this + 48));
      unsigned __int8 v12 = atomic_load((unsigned __int8 *)this + 112);
      if ((v12 & 1) == 0)
      {
        int v13 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*((void *)this + 15);
        *((void *)this + 15) = v16;
        sub_2168BD80C((uint64_t *)&v16);
        sub_2168BD378(this + 120, v13);
        atomic_store(1u, (unsigned __int8 *)this + 112);
      }
      std::mutex::unlock((std::mutex *)((char *)this + 48));
    }
    *a2 = *((void *)this + 15);
    sub_2168BD80C(a2);
    return sub_216986288(&v16);
  }
}

void sub_216983954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
  std::mutex::unlock(v10);
  sub_216986288(&a10);
  _Unwind_Resume(a1);
}

void *sub_216983994(pxrInternal__aapl__pxrReserved__::TfType *a1, uint64_t a2, char *a3)
{
  __n128 result = (void *)pxrInternal__aapl__pxrReserved__::TfType::_GetFactory(a1, a2, a3);
  if (result)
  {
  }
  return result;
}

double pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::Sdf_FileFormatRegistry(pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry *this)
{
  double result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_DWORD *)this + 18) = 1065353216;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 28) = 1065353216;
  *((unsigned char *)this + 120) = 0;
  *((void *)this + 16) = 850045863;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *((void *)this + 23) = 0;
  return result;
}

{
  double result;

  double result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_DWORD *)this + 18) = 1065353216;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 28) = 1065353216;
  *((unsigned char *)this + 120) = 0;
  *((void *)this + 16) = 850045863;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *((void *)this + 23) = 0;
  return result;
}

void pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::FindById(pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t *a3@<X8>)
{
  if (!*(void *)a2)
  {
    v7[0] = "sdf/fileFormatRegistry.cpp";
    v7[1] = "FindById";
    v7[2] = 115;
    void v7[3] = "SdfFileFormatConstPtr pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::FindById(const TfToken &)";
    char v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot find file format for empty id");
    goto LABEL_7;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_RegisterFormatPlugins((uint64_t)this);
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_Info **)sub_2168CB1F4(this, a2);
  if (!v6)
  {
LABEL_7:
    *a3 = 0;
    a3[1] = 0;
    return;
  }

  pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_GetFileFormat(v6 + 3, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_RegisterFormatPlugins(uint64_t this)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)(this + 120));
  if (v1) {
    return this;
  }
  uint64_t v2 = this;
  memset(v191, 0, sizeof(v191));
  int v192 = 1065353216;
  memset(v189, 0, sizeof(v189));
  int v190 = 1065353216;
  long long v186 = 0u;
  long long v187 = 0u;
  int v188 = 1065353216;
  BOOL v3 = sub_216977CF0(2);
  if (v3) {
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Sdf_FileFormatRegistry::_RegisterFormatPlugins", v4, v5);
  }
  pxrInternal__aapl__pxrReserved__::PlugRegistry::GetInstance((pxrInternal__aapl__pxrReserved__::PlugRegistry *)v3);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/fileFormatRegistry.cpp";
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)"_RegisterFormatPlugins";
  __p.__r_.__value_.__r.__words[2] = 287;
  v183 = "void pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_RegisterFormatPlugins()";
  char v184 = 0;
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::TfScopeDescription(v185, "Registering file format plugins", &__p);
  v181[0] = 0;
  v181[1] = 0;
  v180 = (uint64_t *)v181;
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)__dst);
  if (__dst[0] != v8
    || (__p.__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/fileFormatRegistry.cpp",
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)"_RegisterFormatPlugins",
        __p.__r_.__value_.__r.__words[2] = 291,
        v183 = "void pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_RegisterFormatPlugins()",
        char v184 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&__p, "!formatBaseType.IsUnknown()", 0) & 1) != 0))
  {
    pxrInternal__aapl__pxrReserved__::PlugRegistry::GetAllDerivedTypes((uint64_t)v8, &v180);
  }
  uint64_t v11 = v180;
  if (v180 != (uint64_t *)v181)
  {
    do
    {
      uint64_t v179 = v11[4];
      if (sub_216977CF0(2))
      {
        uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v179);
        if (*(char *)(TypeName + 23) >= 0) {
          uint64_t v15 = TypeName;
        }
        else {
          uint64_t v15 = *(void *)TypeName;
        }
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"_RegisterFormatPlugins: Type '%s'\n", v13, v14, v15);
      }
      pxrInternal__aapl__pxrReserved__::PlugRegistry::GetPluginForType(v179, &v177);
      int v16 = sub_2168E79D8(&v177);
      if (v9 & 1 | (unint64_t)v16)
      {
        if (sub_216977CF0(2))
        {
          uint64_t v17 = sub_2168E5D78(&v177);
          uint64_t v20 = (void *)(v17 + 8);
          if (*(char *)(v17 + 31) < 0) {
            uint64_t v20 = (void *)*v20;
          }
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"_RegisterFormatPlugins:   plugin '%s'\n", v18, v19, v20);
        }
        uint64_t v21 = v179;
        uint64_t v22 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_2169858CC();
        if ((*(void *)v22 & 0xFFFFFFFFFFFFFFF8) != 0) {
          Emptyunint64_t String = (uint64_t *)((*(void *)v22 & 0xFFFFFFFFFFFFFFF8) + 16);
        }
        else {
          Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v22);
        }
        pxrInternal__aapl__pxrReserved__::PlugRegistry::GetDataFromPluginMetaData(v21, (const void **)EmptyString, (pxrInternal__aapl__pxrReserved__::JsValue *)v175);
        if (pxrInternal__aapl__pxrReserved__::JsValue::IsNull((pxrInternal__aapl__pxrReserved__::JsValue *)v175))
        {
          if (sub_216977CF0(2))
          {
            uint64_t v24 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v179);
            if (*(char *)(v24 + 23) >= 0) {
              uint64_t v27 = v24;
            }
            else {
              uint64_t v27 = *(void *)v24;
            }
            pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"_RegisterFormatPlugins: No format identifier for type '%s', skipping.", v25, v26, v27);
          }
        }
        else if (pxrInternal__aapl__pxrReserved__::JsValue::IsString((pxrInternal__aapl__pxrReserved__::JsValue *)v175))
        {
          unint64_t String = pxrInternal__aapl__pxrReserved__::JsValue::GetString((pxrInternal__aapl__pxrReserved__::JsValue *)v175);
          if (*(char *)(String + 23) < 0)
          {
            sub_216778F24(__dst, *(void **)String, *(void *)(String + 8));
          }
          else
          {
            long long v29 = *(_OWORD *)String;
            uint64_t v174 = *(void *)(String + 16);
            *(_OWORD *)std::string __dst = v29;
          }
          int v32 = (void *)HIBYTE(v174);
          if (v174 < 0) {
            int v32 = __dst[1];
          }
          if (v32)
          {
            if (sub_216977CF0(2))
            {
              uint64_t v35 = __dst;
              if (v174 < 0) {
                uint64_t v35 = (void **)__dst[0];
              }
              pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"_RegisterFormatPlugins:   formatId '%s'\n", v33, v34, v35);
            }
            uint64_t v36 = v179;
            uint64_t v37 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_2169858CC();
            if ((*((void *)v37 + 1) & 0xFFFFFFFFFFFFFFF8) != 0) {
              v38 = (uint64_t *)((*((void *)v37 + 1) & 0xFFFFFFFFFFFFFFF8) + 16);
            }
            else {
              v38 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v37);
            }
            pxrInternal__aapl__pxrReserved__::PlugRegistry::GetDataFromPluginMetaData(v36, (const void **)v38, (pxrInternal__aapl__pxrReserved__::JsValue *)&v171);
            if (pxrInternal__aapl__pxrReserved__::JsValue::IsNull((pxrInternal__aapl__pxrReserved__::JsValue *)&v171))
            {
              if (sub_216977CF0(2))
              {
                uint64_t v45 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v179);
                if (*(char *)(v45 + 23) >= 0) {
                  uint64_t v48 = v45;
                }
                else {
                  uint64_t v48 = *(void *)v45;
                }
                pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"_RegisterFormatPlugins: No extensions registered for type '%s', skipping.", v46, v47, v48);
              }
            }
            else if (pxrInternal__aapl__pxrReserved__::JsValue::IsArray((pxrInternal__aapl__pxrReserved__::JsValue *)&v171))
            {
              unint64_t JsArray = pxrInternal__aapl__pxrReserved__::JsValue::GetJsArray(&v171);
              v51 = *(pxrInternal__aapl__pxrReserved__::JsValue **)JsArray;
              v50 = *(pxrInternal__aapl__pxrReserved__::JsValue **)(JsArray + 8);
              while (v51 != v50)
              {
                if (!pxrInternal__aapl__pxrReserved__::JsValue::IsString(v51)) {
                  goto LABEL_65;
                }
                v51 = (pxrInternal__aapl__pxrReserved__::JsValue *)((char *)v51 + 16);
              }
              v54 = (pxrInternal__aapl__pxrReserved__::JsValue **)pxrInternal__aapl__pxrReserved__::JsValue::GetJsArray(&v171);
              sub_216782DE0(&v169, (v54[1] - *v54) >> 4);
              v56 = *v54;
              v55 = v54[1];
              if (*v54 != v55)
              {
                v57 = v169;
                do
                {
                  unint64_t v58 = pxrInternal__aapl__pxrReserved__::JsValue::GetString(v56);
                  if (*(char *)(v58 + 23) < 0)
                  {
                    sub_216778F24(&__p, *(void **)v58, *(void *)(v58 + 8));
                  }
                  else
                  {
                    long long v59 = *(_OWORD *)v58;
                    __p.__r_.__value_.__r.__words[2] = *(void *)(v58 + 16);
                    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v59;
                  }
                  if (*((char *)v57 + 23) < 0) {
                    operator delete(*(void **)v57);
                  }
                  long long v60 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
                  *((void *)v57 + 2) = *((void *)&__p.__r_.__value_.__l + 2);
                  long long *v57 = v60;
                  v57 = (long long *)((char *)v57 + 24);
                  v56 = (pxrInternal__aapl__pxrReserved__::JsValue *)((char *)v56 + 16);
                }
                while (v56 != v55);
              }
              v62 = v169;
              long long v61 = v170;
              if (v169 == v170)
              {
                __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/fileFormatRegistry.cpp";
                __p.__r_.__value_.__l.__size_ = (std::string::size_type)"_RegisterFormatPlugins";
                __p.__r_.__value_.__r.__words[2] = 355;
                v183 = "void pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_RegisterFormatPlugins()";
                char v184 = 0;
                uint64_t v74 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v179);
                if (*(char *)(v74 + 23) >= 0) {
                  v75 = (const char *)v74;
                }
                else {
                  v75 = *(const char **)v74;
                }
                unint64_t v76 = *(void *)(sub_2169858CC() + 8) & 0xFFFFFFFFFFFFFFF8;
                if (v76)
                {
                  v77 = (const char *)(v76 + 16);
                  if (*(char *)(v76 + 39) < 0) {
                    v77 = *(const char **)v77;
                  }
                }
                else
                {
                  v77 = "";
                }
                pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"File format '%s' plugin meta data '%s' is empty", v75, v77);
              }
              else
              {
                do
                {
                  pxrInternal__aapl__pxrReserved__::TfStringToLowerAscii((unsigned __int8 *)v62, (uint64_t)&__p);
                  if (*((char *)v62 + 23) < 0) {
                    operator delete(*(void **)v62);
                  }
                  long long v63 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
                  *((void *)v62 + 2) = *((void *)&__p.__r_.__value_.__l + 2);
                  long long *v62 = v63;
                  v62 = (long long *)((char *)v62 + 24);
                }
                while (v62 != v61);
                pxrInternal__aapl__pxrReserved__::JsValue::JsValue((pxrInternal__aapl__pxrReserved__::JsValue *)&v168);
                memset(&__p, 0, sizeof(__p));
                pxrInternal__aapl__pxrReserved__::TfType::GetAllAncestorTypes((pxrInternal__aapl__pxrReserved__::TfType *)&v179, (void **)&__p.__r_.__value_.__l.__data_, v64);
                *(_OWORD *)v166 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
                while (v166[0] != v166[1])
                {
                  uint64_t v67 = *(void *)sub_2168E78D4((uint64_t *)v166, v65, v66);
                  v68 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_2169858CC();
                  if ((*((void *)v68 + 2) & 0xFFFFFFFFFFFFFFF8) != 0) {
                    char v69 = (uint64_t *)((*((void *)v68 + 2) & 0xFFFFFFFFFFFFFFF8) + 16);
                  }
                  else {
                    char v69 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v68);
                  }
                  pxrInternal__aapl__pxrReserved__::PlugRegistry::GetDataFromPluginMetaData(v67, (const void **)v69, (pxrInternal__aapl__pxrReserved__::JsValue *)&__str);
                  long long v70 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
                  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = 0uLL;
                  uint64_t v71 = (std::__shared_weak_count *)*((void *)&v168 + 1);
                  long long v168 = v70;
                  if (v71)
                  {
                    sub_216784EC4(v71);
                    if (__str.__r_.__value_.__l.__size_) {
                      sub_216784EC4((std::__shared_weak_count *)__str.__r_.__value_.__l.__size_);
                    }
                  }
                  if (!pxrInternal__aapl__pxrReserved__::JsValue::IsNull((pxrInternal__aapl__pxrReserved__::JsValue *)&v168))
                  {
                    if (sub_216977CF0(2))
                    {
                      uint64_t v78 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v179);
                      if (*(char *)(v78 + 23) >= 0) {
                        uint64_t v79 = v78;
                      }
                      else {
                        uint64_t v79 = *(void *)v78;
                      }
                      v80 = (pxrInternal__aapl__pxrReserved__::TfType **)sub_21688D334(v166);
                      uint64_t v81 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(*v80);
                      if (*(char *)(v81 + 23) >= 0) {
                        uint64_t v84 = v81;
                      }
                      else {
                        uint64_t v84 = *(void *)v81;
                      }
                      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"_RegisterFormatPlugins:     Found target for type '%s' from type '%s'\n", v82, v83, v79, v84);
                    }
                    break;
                  }
                  sub_21688D3C0(v166);
                }
                if (__p.__r_.__value_.__r.__words[0])
                {
                  __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                if (pxrInternal__aapl__pxrReserved__::JsValue::IsNull((pxrInternal__aapl__pxrReserved__::JsValue *)&v168))
                {
                  if (sub_216977CF0(2))
                  {
                    uint64_t v85 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v179);
                    if (*(char *)(v85 + 23) >= 0) {
                      uint64_t v88 = v85;
                    }
                    else {
                      uint64_t v88 = *(void *)v85;
                    }
                    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"_RegisterFormatPlugins: No target for type '%s', skipping.\n", v86, v87, v88);
                  }
                }
                else if (pxrInternal__aapl__pxrReserved__::JsValue::IsString((pxrInternal__aapl__pxrReserved__::JsValue *)&v168))
                {
                  unint64_t v89 = pxrInternal__aapl__pxrReserved__::JsValue::GetString((pxrInternal__aapl__pxrReserved__::JsValue *)&v168);
                  if (*(char *)(v89 + 23) < 0)
                  {
                    sub_216778F24(v166, *(void **)v89, *(void *)(v89 + 8));
                  }
                  else
                  {
                    long long v91 = *(_OWORD *)v89;
                    uint64_t v167 = *(void *)(v89 + 16);
                    *(_OWORD *)v166 = v91;
                  }
                  v94 = (void *)HIBYTE(v167);
                  if (v167 < 0) {
                    v94 = v166[1];
                  }
                  if (v94)
                  {
                    int v165 = 0;
                    int v165 = pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_ParseFormatCapabilities((pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry *)&v179, v90);
                    if (sub_216977CF0(2))
                    {
                      v97 = v166;
                      if (v167 < 0) {
                        v97 = (void **)v166[0];
                      }
                      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"_RegisterFormatPlugins:   target '%s'\n", v95, v96, v97);
                    }
                    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v164, __dst, 0);
                    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v164;
                    v98 = sub_2169862B8((uint64_t)v191, &v164, (uint64_t)&unk_2174BFD90, (uint64_t **)&__p);
                    v99 = (long long *)(v98 + 3);
                    if (!v98[3])
                    {
                      pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&__str, v166, 0);
                      sub_216986604(&v164, &v179, (uint64_t *)&__str, &v177, &v165, &__p);
                      long long v107 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
                      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
                      v108 = (std::__shared_weak_count *)v98[4];
                      *(_OWORD *)(v98 + 3) = v107;
                      if (v108)
                      {
                        sub_216784EC4(v108);
                        if (__p.__r_.__value_.__l.__size_) {
                          sub_216784EC4((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
                        }
                      }
                      if ((__str.__r_.__value_.__s.__data_[0] & 7) != 0) {
                        atomic_fetch_add_explicit((atomic_uint *volatile)(__str.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                      }
                      v109 = v169;
                      v110 = v170;
                      while (2)
                      {
                        if (v109 == v110) {
                          goto LABEL_139;
                        }
                        if (*((char *)v109 + 23) < 0)
                        {
                          sub_216778F24(&__str, *(void **)v109, *((void *)v109 + 1));
                        }
                        else
                        {
                          long long v111 = *v109;
                          __str.__r_.__value_.__r.__words[2] = *((void *)v109 + 2);
                          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v111;
                        }
                        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                        {
                          if (__str.__r_.__value_.__l.__size_)
                          {
                            p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
                            goto LABEL_168;
                          }
LABEL_189:
                          operator delete(__str.__r_.__value_.__l.__data_);
                        }
                        else if (*((unsigned char *)&__str.__r_.__value_.__s + 23))
                        {
                          p_str = &__str;
LABEL_168:
                          if (p_str->__r_.__value_.__s.__data_[0] == 46)
                          {
                            std::string::basic_string(&__p, &__str, 1uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v193);
                            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                              operator delete(__str.__r_.__value_.__l.__data_);
                            }
                            std::string __str = __p;
                          }
                          if (sub_216977CF0(2))
                          {
                            v115 = &__str;
                            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                              v115 = (std::string *)__str.__r_.__value_.__r.__words[0];
                            }
                            pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"_RegisterFormatPlugins:   extension '%s'\n", v113, v114, v115);
                          }
                          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
                          v118 = (uint64_t *)(sub_2169868C4((uint64_t)&v186, (unsigned __int8 *)&__str, (uint64_t)&unk_2174BFD90, (long long **)&__p)+ 40);
                          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)v118;
                          while (1)
                          {
                            if (__p.__r_.__value_.__r.__words[0] == __p.__r_.__value_.__l.__size_)
                            {
                              sub_216985E90(v118, v99);
                              goto LABEL_188;
                            }
                            unint64_t v119 = *(void *)(*(void *)sub_216985D90((uint64_t *)&__p, v116, v117) + 16) & 0xFFFFFFFFFFFFFFF8;
                            unint64_t v120 = *(void *)(*(void *)v99 + 16) & 0xFFFFFFFFFFFFFFF8;
                            if (v119 == v120) {
                              break;
                            }
                            sub_216985E10(&__p);
                          }
                          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/fileFormatRegistry.cpp";
                          __p.__r_.__value_.__l.__size_ = (std::string::size_type)"_RegisterFormatPlugins";
                          __p.__r_.__value_.__r.__words[2] = 454;
                          v183 = "void pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_RegisterFormatPlugins()";
                          char v184 = 0;
                          if (v120)
                          {
                            v121 = (const char *)(v119 + 16);
                            if (*(char *)(v119 + 39) < 0) {
                              v121 = *(const char **)v121;
                            }
                          }
                          else
                          {
                            v121 = "";
                          }
                          v122 = &__str;
                          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                            v122 = (std::string *)__str.__r_.__value_.__r.__words[0];
                          }
                          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Multiple file formats with target '%s' registered for extension '%s', skipping.", v121, (const char *)v122);
LABEL_188:
                          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                            goto LABEL_189;
                          }
                        }
                        v109 = (long long *)((char *)v109 + 24);
                        continue;
                      }
                    }
                    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/fileFormatRegistry.cpp";
                    __p.__r_.__value_.__l.__size_ = (std::string::size_type)"_RegisterFormatPlugins";
                    __p.__r_.__value_.__r.__words[2] = 420;
                    v183 = "void pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_RegisterFormatPlugins()";
                    char v184 = 0;
                    v100 = __dst;
                    if (v174 < 0) {
                      v100 = (void **)__dst[0];
                    }
                    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Duplicate registration for file format '%s'", (const char *)v100);
LABEL_139:
                    if ((v164 & 7) != 0) {
                      atomic_fetch_add_explicit((atomic_uint *volatile)(v164 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                    }
                  }
                  else
                  {
                    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/fileFormatRegistry.cpp";
                    __p.__r_.__value_.__l.__size_ = (std::string::size_type)"_RegisterFormatPlugins";
                    __p.__r_.__value_.__r.__words[2] = 406;
                    v183 = "void pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_RegisterFormatPlugins()";
                    char v184 = 0;
                    uint64_t v103 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v179);
                    if (*(char *)(v103 + 23) >= 0) {
                      v104 = (const char *)v103;
                    }
                    else {
                      v104 = *(const char **)v103;
                    }
                    unint64_t v105 = *(void *)(sub_2169858CC() + 16) & 0xFFFFFFFFFFFFFFF8;
                    if (v105)
                    {
                      v106 = (const char *)(v105 + 16);
                      if (*(char *)(v105 + 39) < 0) {
                        v106 = *(const char **)v106;
                      }
                    }
                    else
                    {
                      v106 = "";
                    }
                    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"File format '%s' plugin meta data '%s' is empty", v104, v106);
                  }
                  if (SHIBYTE(v167) < 0) {
                    operator delete(v166[0]);
                  }
                }
                else
                {
                  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/fileFormatRegistry.cpp";
                  __p.__r_.__value_.__l.__size_ = (std::string::size_type)"_RegisterFormatPlugins";
                  __p.__r_.__value_.__r.__words[2] = 398;
                  v183 = "void pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_RegisterFormatPlugins()";
                  char v184 = 0;
                  unint64_t v92 = *(void *)(sub_2169858CC() + 16) & 0xFFFFFFFFFFFFFFF8;
                  if (v92)
                  {
                    v93 = (const char *)(v92 + 16);
                    if (*(char *)(v92 + 39) < 0) {
                      v93 = *(const char **)v93;
                    }
                  }
                  else
                  {
                    v93 = "";
                  }
                  uint64_t v101 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v179);
                  if (*(char *)(v101 + 23) >= 0) {
                    v102 = (const char *)v101;
                  }
                  else {
                    v102 = *(const char **)v101;
                  }
                  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected value type for key '%s' in plugin meta data for file format type '%s'", v93, v102);
                }
                if (*((void *)&v168 + 1)) {
                  sub_216784EC4(*((std::__shared_weak_count **)&v168 + 1));
                }
              }
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v169;
              sub_216782F20((void ***)&__p);
            }
            else
            {
LABEL_65:
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/fileFormatRegistry.cpp";
              __p.__r_.__value_.__l.__size_ = (std::string::size_type)"_RegisterFormatPlugins";
              __p.__r_.__value_.__r.__words[2] = 347;
              v183 = "void pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_RegisterFormatPlugins()";
              char v184 = 0;
              unint64_t v52 = *(void *)(sub_2169858CC() + 8) & 0xFFFFFFFFFFFFFFF8;
              if (v52)
              {
                v53 = (const char *)(v52 + 16);
                if (*(char *)(v52 + 39) < 0) {
                  v53 = *(const char **)v53;
                }
              }
              else
              {
                v53 = "";
              }
              uint64_t v72 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v179);
              if (*(char *)(v72 + 23) >= 0) {
                v73 = (const char *)v72;
              }
              else {
                v73 = *(const char **)v72;
              }
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected value type for key '%s' in plugin meta data for file format type '%s'", v53, v73);
            }
            if (v172) {
              sub_216784EC4(v172);
            }
          }
          else
          {
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/fileFormatRegistry.cpp";
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)"_RegisterFormatPlugins";
            __p.__r_.__value_.__r.__words[2] = 327;
            v183 = "void pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_RegisterFormatPlugins()";
            char v184 = 0;
            uint64_t v41 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v179);
            if (*(char *)(v41 + 23) >= 0) {
              v42 = (const char *)v41;
            }
            else {
              v42 = *(const char **)v41;
            }
            unint64_t v43 = *(void *)sub_2169858CC() & 0xFFFFFFFFFFFFFFF8;
            if (v43)
            {
              v44 = (const char *)(v43 + 16);
              if (*(char *)(v43 + 39) < 0) {
                v44 = *(const char **)v44;
              }
            }
            else
            {
              v44 = "";
            }
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"File format '%s' plugin meta data '%s' is empty", v42, v44);
          }
          if (SHIBYTE(v174) < 0) {
            operator delete(__dst[0]);
          }
        }
        else
        {
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/fileFormatRegistry.cpp";
          __p.__r_.__value_.__l.__size_ = (std::string::size_type)"_RegisterFormatPlugins";
          __p.__r_.__value_.__r.__words[2] = 319;
          v183 = "void pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_RegisterFormatPlugins()";
          char v184 = 0;
          unint64_t v30 = *(void *)sub_2169858CC() & 0xFFFFFFFFFFFFFFF8;
          if (v30)
          {
            int v31 = (const char *)(v30 + 16);
            if (*(char *)(v30 + 39) < 0) {
              int v31 = *(const char **)v31;
            }
          }
          else
          {
            int v31 = "";
          }
          uint64_t v39 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v179);
          if (*(char *)(v39 + 23) >= 0) {
            v40 = (const char *)v39;
          }
          else {
            v40 = *(const char **)v39;
          }
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected value type for key '%s' in plugin meta data for file format type '%s'", v31, v40);
        }
        if (v176) {
          sub_216784EC4(v176);
        }
      }
      uint64_t v123 = v178;
      if (v178 && atomic_fetch_add_explicit((atomic_uint *volatile)(v178 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t))(*(void *)v123 + 8))(v123);
      }
      v124 = (uint64_t *)v11[1];
      if (v124)
      {
        do
        {
          v125 = v124;
          v124 = (uint64_t *)*v124;
        }
        while (v124);
      }
      else
      {
        do
        {
          v125 = (uint64_t *)v11[2];
          BOOL v126 = *v125 == (void)v11;
          uint64_t v11 = v125;
        }
        while (!v126);
      }
      uint64_t v11 = v125;
    }
    while (v125 != (uint64_t *)v181);
  }
  __dst[1] = 0;
  uint64_t v174 = 0;
  __dst[0] = &__dst[1];
  v169 = (long long *)v187;
  v170 = 0;
  v127 = "";
LABEL_214:
  if (v169 != v170)
  {
    uint64_t v128 = v2;
    uint64_t v129 = *sub_216985FAC(&v169, v9, v10);
    v132 = sub_216985FAC(&v169, v130, v131);
    uint64_t v135 = *v132;
    v136 = *(void **)(*v132 + 40);
    v137 = *(unsigned char **)(*v132 + 48);
    if (v136 == (void *)v137)
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/fileFormatRegistry.cpp";
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)"_RegisterFormatPlugins";
      __p.__r_.__value_.__r.__words[2] = 470;
      v183 = "void pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_RegisterFormatPlugins()";
      char v184 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&__p, "!infos.empty()", 0);
      v136 = *(void **)(v135 + 40);
      v137 = *(unsigned char **)(v135 + 48);
    }
    v138 = (const char *)(v129 + 16);
    if (v137 - (unsigned char *)v136 == 16)
    {
      uint64_t v140 = *v136;
      v139 = (std::__shared_weak_count *)v136[1];
      if (v139) {
        atomic_fetch_add_explicit(&v139->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v140)
      {
LABEL_259:
        __p.__r_.__value_.__r.__words[0] = v129 + 16;
        v159 = sub_216986DCC((uint64_t)v189, (unsigned __int8 *)(v129 + 16), (uint64_t)&unk_2174BFD90, (long long **)&__p);
        if (v139) {
          atomic_fetch_add_explicit(&v139->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v160 = (std::__shared_weak_count *)*((void *)v159 + 6);
        *((void *)v159 + 5) = v140;
        *((void *)v159 + 6) = v139;
        if (v160) {
          sub_216784EC4(v160);
        }
      }
      goto LABEL_263;
    }
    uint64_t v140 = 0;
    v139 = 0;
    v166[0] = v136;
    v166[1] = v137;
    while (1)
    {
      if (v166[0] == v166[1])
      {
LABEL_258:
        if (v140) {
          goto LABEL_259;
        }
        sub_21680EE0C((uint64_t **)__dst, (const void **)(v129 + 16), v129 + 16);
        if (v161)
        {
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/fileFormatRegistry.cpp";
          __p.__r_.__value_.__l.__size_ = (std::string::size_type)"_RegisterFormatPlugins";
          __p.__r_.__value_.__r.__words[2] = 516;
          v183 = "void pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_RegisterFormatPlugins()";
          char v184 = 0;
          if (*(char *)(v129 + 39) < 0) {
            v138 = *(const char **)v138;
          }
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"No primary file format specified for extension '%s', skipping.", v138);
        }
LABEL_263:
        if (v139) {
          sub_216784EC4(v139);
        }
        sub_216986028((uint64_t)&v169);
        uint64_t v2 = v128;
        goto LABEL_214;
      }
      uint64_t v141 = *(void *)(*(void *)sub_216985374((uint64_t *)v166, v133, v134) + 8);
      v142 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_2169858CC();
      if ((*((void *)v142 + 3) & 0xFFFFFFFFFFFFFFF8) != 0) {
        v143 = (uint64_t *)((*((void *)v142 + 3) & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        v143 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v142);
      }
      pxrInternal__aapl__pxrReserved__::PlugRegistry::GetDataFromPluginMetaData(v141, (const void **)v143, (pxrInternal__aapl__pxrReserved__::JsValue *)&__str);
      if (pxrInternal__aapl__pxrReserved__::JsValue::IsNull((pxrInternal__aapl__pxrReserved__::JsValue *)&__str)) {
        goto LABEL_247;
      }
      if (!pxrInternal__aapl__pxrReserved__::JsValue::IsBool((pxrInternal__aapl__pxrReserved__::JsValue *)&__str)) {
        break;
      }
      if (pxrInternal__aapl__pxrReserved__::JsValue::GetBool((pxrInternal__aapl__pxrReserved__::JsValue *)&__str))
      {
        if (v140)
        {
          if (v139) {
            sub_216784EC4(v139);
          }
          sub_21680EE0C((uint64_t **)__dst, (const void **)(v129 + 16), v129 + 16);
          if (v146)
          {
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/fileFormatRegistry.cpp";
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)"_RegisterFormatPlugins";
            __p.__r_.__value_.__r.__words[2] = 506;
            v183 = "void pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_RegisterFormatPlugins()";
            char v184 = 0;
            v147 = (const char *)(v129 + 16);
            if (*(char *)(v129 + 39) < 0) {
              v147 = *(const char **)v138;
            }
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Multiple primary file formats specified for extension '%s', skipping.", v147);
          }
          uint64_t v140 = 0;
          v139 = 0;
          int v148 = 15;
        }
        else
        {
          v156 = (uint64_t *)sub_216985374((uint64_t *)v166, v144, v145);
          v157 = v127;
          uint64_t v140 = *v156;
          v158 = (std::__shared_weak_count *)v156[1];
          if (v158) {
            atomic_fetch_add_explicit(&v158->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v139) {
            sub_216784EC4(v139);
          }
          int v148 = 0;
          v139 = v158;
          v127 = v157;
        }
      }
      else
      {
        int v148 = 0;
      }
LABEL_248:
      if (__str.__r_.__value_.__l.__size_) {
        sub_216784EC4((std::__shared_weak_count *)__str.__r_.__value_.__l.__size_);
      }
      if (v148 != 17 && v148) {
        goto LABEL_258;
      }
      sub_2169853F4(v166);
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/fileFormatRegistry.cpp";
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)"_RegisterFormatPlugins";
    __p.__r_.__value_.__r.__words[2] = 488;
    v183 = "void pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_RegisterFormatPlugins()";
    char v184 = 0;
    unint64_t v151 = *(void *)(sub_2169858CC() + 24) & 0xFFFFFFFFFFFFFFF8;
    if (v151)
    {
      v152 = (const char *)(v151 + 16);
      if (*(char *)(v151 + 39) < 0) {
        v152 = *(const char **)v152;
      }
    }
    else
    {
      v152 = v127;
    }
    uint64_t v153 = sub_216985374((uint64_t *)v166, v149, v150);
    uint64_t v154 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)(*(void *)v153 + 8));
    if (*(char *)(v154 + 23) >= 0) {
      v155 = (const char *)v154;
    }
    else {
      v155 = *(const char **)v154;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected value type for key '%s' in plugin meta data for file format type '%s'", v152, v155);
LABEL_247:
    int v148 = 17;
    goto LABEL_248;
  }
  std::mutex::lock((std::mutex *)(v2 + 128));
  unsigned __int8 v162 = atomic_load((unsigned __int8 *)(v2 + 120));
  if ((v162 & 1) == 0)
  {
    if (*(void *)(v2 + 24))
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/fileFormatRegistry.cpp";
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)"_RegisterFormatPlugins";
      __p.__r_.__value_.__r.__words[2] = 530;
      v183 = "void pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_RegisterFormatPlugins()";
      char v184 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&__p, "_formatInfo.empty()", 0);
    }
    if (*(void *)(v2 + 64))
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/fileFormatRegistry.cpp";
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)"_RegisterFormatPlugins";
      __p.__r_.__value_.__r.__words[2] = 531;
      v183 = "void pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_RegisterFormatPlugins()";
      char v184 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&__p, "_extensionIndex.empty()", 0);
    }
    if (*(void *)(v2 + 104))
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/fileFormatRegistry.cpp";
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)"_RegisterFormatPlugins";
      __p.__r_.__value_.__r.__words[2] = 532;
      v183 = "void pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_RegisterFormatPlugins()";
      char v184 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&__p, "_fullExtensionIndex.empty()", 0);
    }
    sub_21698718C(v2, (uint64_t)v191);
    sub_21698718C(v2 + 40, (uint64_t)v189);
    sub_21698718C(v2 + 80, (uint64_t)&v186);
    atomic_store(1u, (unsigned __int8 *)(v2 + 120));
  }
  std::mutex::unlock((std::mutex *)(v2 + 128));
  sub_21678A498((uint64_t)__dst, (char *)__dst[1]);
  sub_2167FB780((uint64_t)&v180, v181[0]);
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::~TfScopeDescription((pxrInternal__aapl__pxrReserved__::TfScopeDescription *)v185);
  sub_2169861C0((uint64_t)&v186);
  sub_216966C20((uint64_t)v189);
  return sub_21698611C((uint64_t)v191);
}

void sub_216984DE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,char *a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  std::mutex::unlock(v56);
  sub_21678A498((uint64_t)&a35, a36);
  sub_2167FB780((uint64_t)&a47, a48);
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::~TfScopeDescription((pxrInternal__aapl__pxrReserved__::TfScopeDescription *)&a56);
  sub_2169861C0(v57 - 240);
  sub_216966C20(v57 - 192);
  sub_21698611C(v57 - 144);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_GetFileFormat@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_Info **a1@<X1>, uint64_t *a2@<X8>)
{
  BOOL v3 = *a1;
  if (!*a1)
  {
    v6[0] = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)"sdf/fileFormatRegistry.cpp";
    v6[1] = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)"_GetFileFormat";
    v6[2] = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)547;
    v6[3] = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)"SdfFileFormatConstPtr pxrInternal__aapl_"
                                                                                "_pxrReserved__::Sdf_FileFormatRegistry::"
                                                                                "_GetFileFormat(const _InfoSharedPtr &)";
    char v7 = 0;
    double result = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v6, "info", 0);
    if (!result)
    {
      *a2 = 0;
      a2[1] = 0;
      return result;
    }
    BOOL v3 = *a1;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_Info::GetFileFormat(v3, (uint64_t *)v6);
  sub_21698729C(a2, (uint64_t *)v6);
  return sub_216986288(v6);
}

void sub_216985130(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216986288((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_GetFormatInfo(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(a2 + 8);
  }
  if (v5)
  {
    pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetFileExtension(a2, (uint64_t)__p);
    pxrInternal__aapl__pxrReserved__::TfStringToLowerAscii((unsigned __int8 *)__p, (uint64_t)v22);
    if (SHIBYTE(v25) < 0) {
      operator delete(__p[0]);
    }
    unint64_t v9 = v23;
    if ((v23 & 0x80u) != 0) {
      unint64_t v9 = (unint64_t)v22[1];
    }
    if (v9)
    {
      pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_RegisterFormatPlugins(a1);
      uint64_t v10 = *(unsigned __int8 *)(a3 + 23);
      if ((v10 & 0x80u) != 0) {
        uint64_t v10 = *(void *)(a3 + 8);
      }
      if (v10)
      {
        uint64_t v11 = sub_2168602D4((void *)(a1 + 80), (unsigned __int8 *)v22);
        if (v11)
        {
          *(_OWORD *)std::string __p = *(_OWORD *)(v11 + 40);
          while (__p[0] != __p[1])
          {
            uint64_t v14 = sub_216985374((uint64_t *)__p, v12, v13);
            if (pxrInternal__aapl__pxrReserved__::TfToken::operator==((pxrInternal__aapl__pxrReserved__::TfToken *)(*(void *)v14 + 16), (unsigned __int8 *)a3))
            {
              uint64_t v21 = (uint64_t *)sub_216985374((uint64_t *)__p, v15, v16);
              uint64_t v20 = *v21;
              uint64_t v19 = v21[1];
              if (v19) {
                goto LABEL_24;
              }
              goto LABEL_25;
            }
            sub_2169853F4(__p);
          }
        }
      }
      else
      {
        unint64_t v18 = sub_2168602D4((void *)(a1 + 40), (unsigned __int8 *)v22);
        if (v18)
        {
          uint64_t v20 = *((void *)v18 + 5);
          uint64_t v19 = *((void *)v18 + 6);
          if (v19) {
LABEL_24:
          }
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
LABEL_25:
          *a4 = v20;
          a4[1] = v19;
        }
      }
    }
    else
    {
      __p[0] = "sdf/fileFormatRegistry.cpp";
      __p[1] = "_GetFormatInfo";
      uint64_t v25 = 143;
      char v26 = "Sdf_FileFormatRegistry::_InfoSharedPtr pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_GetFormatI"
            "nfo(const string &, const string &)";
      char v27 = 0;
      if (*(char *)(a2 + 23) >= 0) {
        uint64_t v17 = (const char *)a2;
      }
      else {
        uint64_t v17 = *(const char **)a2;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Unable to determine extension for '%s'", v17);
    }
    if ((char)v23 < 0) {
      operator delete(v22[0]);
    }
  }
  else
  {
    __p[0] = "sdf/fileFormatRegistry.cpp";
    __p[1] = "_GetFormatInfo";
    uint64_t v25 = 135;
    char v26 = "Sdf_FileFormatRegistry::_InfoSharedPtr pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_GetFormatInf"
          "o(const string &, const string &)";
    char v27 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot find file format for empty string");
  }
}

void sub_216985328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216985374(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    void v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<std::shared_ptr<pxrInternal__aapl__"
            "pxrReserved__::Sdf_FileFormatRegistry::_Info>>>::operator*() [T = const std::vector<std::shared_ptr<pxrInter"
            "nal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_Info>>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_2169853EC()
{
}

void *sub_2169853F4(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<std::shared_ptr<pxrIn"
            "ternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_Info>>>::operator++() [T = const std::vector<std::shar"
            "ed_ptr<pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_Info>>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 16;
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::FindByExtension(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_GetFormatInfo(a1, a2, a3, &v6);
  if (v6)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_GetFileFormat(&v6, a4);
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
  }
  uint64_t v5 = v7;
  if (v7)
  {
    sub_216784EC4(v5);
  }
}

void sub_2169854E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::FindAllFileFormatExtensions@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_RegisterFormatPlugins((uint64_t)this);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)a2 = a2 + 8;
  for (long long i = (const void **)((char *)this + 56); ; result = (uint64_t)sub_21680EE0C((uint64_t **)a2, i + 2, (uint64_t)(i + 2)))
  {
    long long i = (const void **)*i;
    if (!i) {
      break;
    }
  }
  return result;
}

void sub_216985558(_Unwind_Exception *a1)
{
  sub_21678A498(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::FindAllDerivedFileFormatExtensions(pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfType *a2@<X1>, uint64_t a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_RegisterFormatPlugins((uint64_t)this);
  if (pxrInternal__aapl__pxrReserved__::TfType::IsA((char *)a2, *v8, v9))
  {
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)a3 = a3 + 8;
    for (long long i = (const void **)*((void *)this + 12); i; long long i = (const void **)*i)
    {
      uint64_t v12 = (char *)i[5];
      for (uint64_t j = (char *)i[6]; v12 != j; v12 += 16)
      {
        if (pxrInternal__aapl__pxrReserved__::TfType::IsA((char *)(*(void *)v12 + 8), *(void *)a2, v10))sub_21680EE0C((uint64_t **)a3, i + 2, (uint64_t)(i + 2)); {
      }
        }
    }
  }
  else
  {
    v16[0] = "sdf/fileFormatRegistry.cpp";
    v16[1] = "FindAllDerivedFileFormatExtensions";
    v16[2] = 204;
    v16[3] = "std::set<std::string> pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::FindAllDerivedFileFormatExt"
             "ensions(const TfType &)";
    char v17 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(a2);
    if (*(char *)(TypeName + 23) >= 0) {
      uint64_t v15 = (const char *)TypeName;
    }
    else {
      uint64_t v15 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v16, 1, (pxrInternal__aapl__pxrReserved__ *)"Type %s does not derive from SdfFileFormat", v15);
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)a3 = a3 + 8;
  }
}

void sub_21698569C(_Unwind_Exception *a1)
{
  sub_21678A498(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::GetPrimaryFormatForExtension(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, atomic_uint **a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_RegisterFormatPlugins(a1);
  pxrInternal__aapl__pxrReserved__::TfStringToLowerAscii(a2, (uint64_t)__p);
  char v6 = sub_2168602D4((void *)(a1 + 40), (unsigned __int8 *)__p);
  int v7 = v6;
  if (v11 < 0)
  {
    operator delete(__p[0]);
    if (v7) {
      goto LABEL_3;
    }
LABEL_7:
    unint64_t v9 = 0;
LABEL_8:
    *a3 = v9;
    return;
  }
  if (!v6) {
    goto LABEL_7;
  }
LABEL_3:
  char v8 = (atomic_uint *)**((void **)v7 + 5);
  *a3 = v8;
  if ((v8 & 7) != 0)
  {
    unint64_t v9 = (atomic_uint *)((unint64_t)v8 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v9, 2u, memory_order_relaxed) & 1) == 0) {
      goto LABEL_8;
    }
  }
}

void sub_216985758(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_ParseFormatCapabilities(pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry *this, const pxrInternal__aapl__pxrReserved__::TfType *a2)
{
  unint64_t Instance = pxrInternal__aapl__pxrReserved__::PlugRegistry::GetInstance(this);
  uint64_t v4 = *(void *)this;
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_2169858CC();
  if ((*((void *)v5 + 4) & 0xFFFFFFFFFFFFFFF8) != 0) {
    Emptyunint64_t String = (uint64_t *)((*((void *)v5 + 4) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v5);
  }
  unsigned int v7 = sub_216985854(Instance, v4, (const void **)EmptyString);
  uint64_t v8 = *(void *)this;
  unint64_t v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_2169858CC();
  if ((*((void *)v9 + 5) & 0xFFFFFFFFFFFFFFF8) != 0) {
    uint64_t v10 = (uint64_t *)((*((void *)v9 + 5) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    uint64_t v10 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
  }
  BOOL v11 = sub_216985854(Instance, v8, (const void **)v10);
  uint64_t v12 = *(void *)this;
  int v13 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_2169858CC();
  if ((*((void *)v13 + 6) & 0xFFFFFFFFFFFFFFF8) != 0) {
    uint64_t v14 = (uint64_t *)((*((void *)v13 + 6) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    uint64_t v14 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v13);
  }
  if (v11) {
    v7 |= 2u;
  }
  if (sub_216985854(Instance, v12, (const void **)v14)) {
    return v7 | 4;
  }
  else {
    return v7;
  }
}

BOOL sub_216985854(uint64_t a1, uint64_t a2, const void **a3)
{
  pxrInternal__aapl__pxrReserved__::PlugRegistry::GetDataFromPluginMetaData(a2, a3, (pxrInternal__aapl__pxrReserved__::JsValue *)&v5);
  BOOL v3 = !pxrInternal__aapl__pxrReserved__::JsValue::IsBool((pxrInternal__aapl__pxrReserved__::JsValue *)&v5)
    || pxrInternal__aapl__pxrReserved__::JsValue::GetBool((pxrInternal__aapl__pxrReserved__::JsValue *)&v5);
  if (v6) {
    sub_216784EC4(v6);
  }
  return v3;
}

void sub_2169858B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_2169858CC()
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  uint64_t v0 = (char *)atomic_load((unint64_t *)&qword_267B8EB78);
  if (!v0)
  {
    uint64_t v0 = (char *)operator new(0x50uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0, "formatId", 0);
    uint64_t v2 = v0 + 8;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 8, "extensions", 0);
    BOOL v3 = v0 + 16;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 16, "target", 0);
    uint64_t v4 = v0 + 24;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 24, "primary", 0);
    uint64_t v5 = v0 + 32;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 32, "supportsReading", 0);
    char v6 = v0 + 40;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 40, "supportsWriting", 0);
    unsigned int v7 = v0 + 48;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 48, "supportsEditing", 0);
    uint64_t v8 = *(void ***)v0;
    char v28 = v8;
    if ((v8 & 7) != 0)
    {
      unint64_t v9 = (void **)((unint64_t)v8 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit((atomic_uint *volatile)v9, 2u, memory_order_relaxed) & 1) == 0) {
        char v28 = v9;
      }
    }
    uint64_t v10 = (atomic_uint *)*v2;
    long long v29 = v10;
    if ((v10 & 7) != 0)
    {
      BOOL v11 = (atomic_uint *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v11, 2u, memory_order_relaxed) & 1) == 0) {
        long long v29 = v11;
      }
    }
    uint64_t v12 = (atomic_uint *)*v3;
    unint64_t v30 = v12;
    if ((v12 & 7) != 0)
    {
      int v13 = (atomic_uint *)((unint64_t)v12 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v13, 2u, memory_order_relaxed) & 1) == 0) {
        unint64_t v30 = v13;
      }
    }
    uint64_t v14 = (atomic_uint *)*v4;
    int v31 = v14;
    if ((v14 & 7) != 0)
    {
      uint64_t v15 = (atomic_uint *)((unint64_t)v14 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v15, 2u, memory_order_relaxed) & 1) == 0) {
        int v31 = v15;
      }
    }
    int v16 = (atomic_uint *)*v5;
    int v32 = v16;
    if ((v16 & 7) != 0)
    {
      char v17 = (atomic_uint *)((unint64_t)v16 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v17, 2u, memory_order_relaxed) & 1) == 0) {
        int v32 = v17;
      }
    }
    unint64_t v18 = (atomic_uint *)*v6;
    int v33 = v18;
    if ((v18 & 7) != 0)
    {
      uint64_t v19 = (atomic_uint *)((unint64_t)v18 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v19, 2u, memory_order_relaxed) & 1) == 0) {
        int v33 = v19;
      }
    }
    uint64_t v20 = (atomic_uint *)*v7;
    uint64_t v34 = v20;
    if ((v20 & 7) != 0)
    {
      uint64_t v21 = (atomic_uint *)((unint64_t)v20 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v21, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v34 = v21;
      }
    }
    *((void *)v0 + 7) = 0;
    *((void *)v0 + 8) = 0;
    *((void *)v0 + 9) = 0;
    uint64_t v22 = (char *)operator new(0x38uLL);
    uint64_t v23 = 0;
    *((void *)v0 + 7) = v22;
    *((void *)v0 + 8) = v22;
    *((void *)v0 + 9) = v22 + 56;
    do
    {
      unint64_t v24 = (unint64_t)(&v28)[v23];
      *(void *)&v22[v23 * 8] = v24;
      if ((v24 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *(void *)&v22[v23 * 8] &= 0xFFFFFFFFFFFFFFF8;
      }
      ++v23;
    }
    while (v23 != 7);
    *((void *)v0 + 8) = v22 + 56;
    for (uint64_t i = 6; i != -1; --i)
    {
      unint64_t v26 = (unint64_t)(&v28)[i];
      if ((v26 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    uint64_t v27 = 0;
    atomic_compare_exchange_strong(&qword_267B8EB78, (unint64_t *)&v27, (unint64_t)v0);
    if (v27)
    {
      char v28 = (void **)(v0 + 56);
      sub_216889A04(&v28);
      if ((*v7 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v6 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v5 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v4 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v3 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v2 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*(void *)v0 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v0 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v0);
      return atomic_load((unint64_t *)&qword_267B8EB78);
    }
  }
  return (unint64_t)v0;
}

void sub_216985C68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  sub_216889A04(&a9);
  uint64_t v19 = 48;
  while (1)
  {
    uint64_t v20 = *(void *)(&a11 + v19);
    if ((v20 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v19 -= 8;
    if (v19 == -8)
    {
      if ((*v17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v11);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t sub_216985D90(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    void v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<std::shared_ptr<pxrInternal__aapl__pxrRes"
            "erved__::Sdf_FileFormatRegistry::_Info>>>::operator*() [T = std::vector<std::shared_ptr<pxrInternal__aapl__p"
            "xrReserved__::Sdf_FileFormatRegistry::_Info>>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_216985E08()
{
}

void *sub_216985E10(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<std::shared_ptr<pxrInternal"
            "__aapl__pxrReserved__::Sdf_FileFormatRegistry::_Info>>>::operator++() [T = std::vector<std::shared_ptr<pxrIn"
            "ternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_Info>>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 16;
  }
  return a1;
}

void **sub_216985E90(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  int v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      sub_21677CB10();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    uint64_t v14 = (char *)sub_216787EE0((uint64_t)result, v13);
    uint64_t v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    void v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)uint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    sub_216986C88(a1, v18);
    unint64_t v9 = (void *)a1[1];
    uint64_t result = sub_216788028(v18);
  }
  else
  {
    *int v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_216985F98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216788028((void **)va);
  _Unwind_Resume(a1);
}

void *sub_216985FAC(void *result, uint64_t a2, char *a3)
{
  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::TfHashMap<std::stri"
            "ng, std::vector<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_Info>>, pxrIntern"
            "al__aapl__pxrReserved__::TfHash>>::operator->() [T = pxrInternal__aapl__pxrReserved__::TfHashMap<std::string"
            ", std::vector<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_Info>>, pxrInternal"
            "__aapl__pxrReserved__::TfHash>, Reverse = false]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

uint64_t sub_216986028(uint64_t a1)
{
  if (*(void *)a1 == *(void *)(a1 + 8))
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::TfHas"
            "hMap<std::string, std::vector<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_Inf"
            "o>>, pxrInternal__aapl__pxrReserved__::TfHash>>::operator++() [T = pxrInternal__aapl__pxrReserved__::TfHashM"
            "ap<std::string, std::vector<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_Info>"
            ">, pxrInternal__aapl__pxrReserved__::TfHash>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *(void *)a1 = **(void **)a1;
  }
  return a1;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::FormatSupportsReading(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_FormatSupportsCapability(a1, a2, a3, 1);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_FormatSupportsCapability(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_GetFormatInfo(a1, a2, a3, &v7);
  if (v7) {
    BOOL v5 = (*(_DWORD *)(v7 + 24) & a4) != 0;
  }
  else {
    BOOL v5 = 0;
  }
  if (v8) {
    sub_216784EC4(v8);
  }
  return v5;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::FormatSupportsWriting(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_FormatSupportsCapability(a1, a2, a3, 2);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::FormatSupportsEditing(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::_FormatSupportsCapability(a1, a2, a3, 4);
}

uint64_t sub_21698611C(uint64_t a1)
{
  sub_216986158(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_216986158(int a1, void *__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      BOOL v3 = (void *)*v2;
      char v4 = (std::__shared_weak_count *)v2[4];
      if (v4) {
        sub_216784EC4(v4);
      }
      uint64_t v5 = v2[2];
      if ((v5 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_2169861C0(uint64_t a1)
{
  sub_2169861FC(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_2169861FC(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      BOOL v3 = (void *)*v2;
      sub_216986240((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_216986240(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 24);
  sub_216787968(&v2);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_216986288(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  return a1;
}

void *sub_2169862B8(uint64_t a1, void *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v6 = *a2 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = bswap64(0x9E3779B97F4A7C55 * v6);
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = v7;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = v7 & (v8 - 1);
    }
    uint64_t v10 = *(void **)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t result = (void *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = result[1];
          if (v12 == v7)
          {
            if ((result[2] & 0xFFFFFFFFFFFFFFF8) == v6) {
              return result;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t result = (void *)*result;
        }
        while (result);
      }
    }
  }
  sub_216986510(a1, v7, a4, (uint64_t)&v21);
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_21678A04C(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v4);
  if (v19)
  {
    *uint64_t v21 = *v19;
    *uint64_t v19 = v21;
  }
  else
  {
    *uint64_t v21 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v21;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*v21)
    {
      unint64_t v20 = *(void *)(*v21 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v20 >= v8) {
          v20 %= v8;
        }
      }
      else
      {
        v20 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v20) = v21;
    }
  }
  uint64_t result = v21;
  ++*(void *)(a1 + 24);
  return result;
}

void sub_2169864EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    sub_216986590((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216986510@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t result = operator new(0x28uLL);
  *(void *)a4 = result;
  *(void *)(a4 + 8) = v7;
  void *result = 0;
  result[1] = a2;
  uint64_t v9 = **a3;
  result[2] = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    result[2] &= 0xFFFFFFFFFFFFFFF8;
  }
  result[3] = 0;
  result[4] = 0;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_216986590(uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    BOOL v3 = (std::__shared_weak_count *)__p[4];
    if (v3) {
      sub_216784EC4(v3);
    }
    uint64_t v4 = __p[2];
    if ((v4 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void *sub_216986604@<X0>(uint64_t *a1@<X1>, void *a2@<X2>, uint64_t *a3@<X3>, void *a4@<X4>, int *a5@<X5>, void *a6@<X8>)
{
  unint64_t v12 = operator new(0x98uLL);
  uint64_t result = sub_216986690(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;
  return result;
}

void sub_21698667C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_216986690(void *a1, uint64_t *a2, void *a3, uint64_t *a4, void *a5, int *a6)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C755088;
  sub_216986780((uint64_t)(a1 + 3), a2, a3, a4, a5, *a6);
  return a1;
}

void sub_2169866DC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_2169866F0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C755088;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_216986710(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C755088;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

atomic_uint *sub_216986754(uint64_t a1)
{
  return sub_216986824((uint64_t)&v2, a1 + 24);
}

double sub_216986780(uint64_t a1, uint64_t *a2, void *a3, uint64_t *a4, void *a5, int a6)
{
  uint64_t v6 = *a2;
  *(void *)a1 = *a2;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(a1 + 8) = *a3;
  uint64_t v7 = *a4;
  *(void *)(a1 + 16) = *a4;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 16) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_DWORD *)(a1 + 24) = a6;
  uint64_t v8 = a5[1];
  *(void *)(a1 + 32) = *a5;
  *(void *)(a1 + 40) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 + 8), 1u, memory_order_relaxed);
  }
  *(void *)(a1 + 48) = 850045863;
  *(void *)(a1 + 120) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 97) = 0u;
  return result;
}

atomic_uint *sub_216986824(uint64_t a1, uint64_t a2)
{
  sub_216986288((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a2 + 120));
  std::mutex::~mutex((std::mutex *)(a2 + 48));
  double result = *(atomic_uint **)(a2 + 40);
  if (result && atomic_fetch_add_explicit(result + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    double result = (atomic_uint *)(*(uint64_t (**)(atomic_uint *))(*(void *)result + 8))(result);
  }
  uint64_t v4 = *(void *)(a2 + 16);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

unsigned __int8 *sub_2169868C4(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = a2;
  unint64_t v26 = 0;
  char v27 = 0;
  uint64_t v8 = (char *)*((void *)a2 + 1);
  if ((a2[23] & 0x80u) == 0)
  {
    uint64_t v9 = (char *)a2[23];
  }
  else
  {
    a2 = *(unsigned __int8 **)a2;
    uint64_t v9 = v8;
  }
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v26, (pxrInternal__aapl__pxrReserved__ *)a2, v9);
  unint64_t v10 = bswap64(0x9E3779B97F4A7C55 * (void)v26);
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
    float v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (sub_2168513F8(a1 + 32, i + 16, v6)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  sub_216986B8C(a1, v10, a4, (uint64_t)&v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_21678A04C(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v23 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)unint64_t v26 = *v23;
    *uint64_t v23 = v26;
  }
  else
  {
    *(void *)unint64_t v26 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26)
    {
      unint64_t v24 = *(void *)(*(void *)v26 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26;
    }
  }
  uint64_t i = v26;
  unint64_t v26 = 0;
  ++*(void *)(a1 + 24);
  sub_216986C30((uint64_t)&v26, 0);
  return i;
}

void sub_216986B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216986C30((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unsigned char *sub_216986B8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *uint64_t v8 = 0;
  v8[1] = a2;
  double result = v8 + 2;
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    double result = sub_216778F24(result, *(void **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    void v8[4] = *((void *)v10 + 2);
    *(_OWORD *)double result = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_216986C18(_Unwind_Exception *a1)
{
  sub_216986C30(v1, 0);
  _Unwind_Resume(a1);
}

void sub_216986C30(uint64_t a1, uint64_t a2)
{
  char v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216986240((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

uint64_t sub_216986C88(uint64_t *a1, void *a2)
{
  uint64_t result = sub_216986D00((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216986D00(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_216986D94((uint64_t)v12);
  return v10;
}

uint64_t sub_216986D94(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216787FE4(a1);
  }
  return a1;
}

unsigned __int8 *sub_216986DCC(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = a2;
  unint64_t v26 = 0;
  char v27 = 0;
  uint64_t v8 = (char *)*((void *)a2 + 1);
  if ((a2[23] & 0x80u) == 0)
  {
    long long v9 = (char *)a2[23];
  }
  else
  {
    a2 = *(unsigned __int8 **)a2;
    long long v9 = v8;
  }
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v26, (pxrInternal__aapl__pxrReserved__ *)a2, v9);
  unint64_t v10 = bswap64(0x9E3779B97F4A7C55 * (void)v26);
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
    long long v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (sub_2168513F8(a1 + 32, i + 16, v6)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  sub_216987094(a1, v10, a4, (uint64_t)&v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_21678A04C(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v23 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)unint64_t v26 = *v23;
    *uint64_t v23 = v26;
  }
  else
  {
    *(void *)unint64_t v26 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26)
    {
      unint64_t v24 = *(void *)(*(void *)v26 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26;
    }
  }
  uint64_t i = v26;
  unint64_t v26 = 0;
  ++*(void *)(a1 + 24);
  sub_216987134((uint64_t)&v26, 0);
  return i;
}

void sub_21698707C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216987134((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unsigned char *sub_216987094@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = operator new(0x38uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *uint64_t v8 = 0;
  v8[1] = a2;
  uint64_t result = v8 + 2;
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    uint64_t result = sub_216778F24(result, *(void **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    void v8[4] = *((void *)v10 + 2);
    *(_OWORD *)uint64_t result = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_21698711C(_Unwind_Exception *a1)
{
  sub_216987134(v1, 0);
  _Unwind_Resume(a1);
}

void sub_216987134(uint64_t a1, uint64_t a2)
{
  char v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_216812F30((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void sub_21698718C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  uint64_t v5 = *(void **)a2;
  *(void *)a2 = 0;
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = v5;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = *(void **)a2;
  *(void *)a2 = v4;
  if (v7) {
    operator delete(v7);
  }
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = v9;
  uint64_t v11 = *(void *)(a1 + 24);
  uint64_t v12 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = v10;
  *(void *)(a1 + 24) = v12;
  *(void *)(a2 + 16) = v8;
  *(void *)(a2 + 24) = v11;
  int v13 = *(_DWORD *)(a1 + 32);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = v13;
  if (*(void *)(a1 + 24))
  {
    unint64_t v14 = *(void *)(a1 + 8);
    unint64_t v15 = *(void *)(*(void *)(a1 + 16) + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v15 >= v14) {
        v15 %= v14;
      }
    }
    else
    {
      v15 &= v14 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v15) = a1 + 16;
  }
  if (v11)
  {
    unint64_t v16 = *(void *)(a2 + 8);
    unint64_t v17 = *(void *)(*(void *)(a2 + 16) + 8);
    if ((v16 & (v16 - 1)) != 0)
    {
      if (v17 >= v16) {
        v17 %= v16;
      }
    }
    else
    {
      v17 &= v16 - 1;
    }
    *(void *)(*(void *)a2 + 8 * v17) = a2 + 16;
  }
}

uint64_t *sub_21698729C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  a1[1] = 0;
  if (v3)
  {
    sub_21685203C((unint64_t *)(v3 + 16), &v7);
    unint64_t v4 = (atomic_uint *)a1[1];
    a1[1] = v7;
    uint64_t v7 = 0;
    if (v4)
    {
      if (atomic_fetch_add_explicit(v4 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v4 + 8))(v4);
      }
      uint64_t v5 = v7;
      if (v7 && atomic_fetch_add_explicit((atomic_uint *volatile)(v7 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
      }
    }
  }
  return a1;
}

void sub_21698736C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(atomic_uint **)(v1 + 8);
  if (v3) {
    sub_217323F90(v3);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Sdf_StreamWritableAsset::~Sdf_StreamWritableAsset(pxrInternal__aapl__pxrReserved__::Sdf_StreamWritableAsset *this)
{
  pxrInternal__aapl__pxrReserved__::ArWritableAsset::~ArWritableAsset(this);

  operator delete(v1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_WriteToStream(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, uint64_t a2, uint64_t a3)
{
  sub_2169875F4((uint64_t)v18, a2);
  unsigned int SpecType = pxrInternal__aapl__pxrReserved__::SdfSpec::GetSpecType(a1);
  switch(SpecType)
  {
    case 1u:
      uint64_t v6 = *a1;
      v16[0] = (uint64_t *)v6;
      if (v6) {
        atomic_fetch_add((atomic_uint *volatile)v6, 1u);
      }
      sub_216987924((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v16, v18, a3);
      goto LABEL_23;
    case 6u:
      uint64_t v9 = *a1;
      v16[0] = (uint64_t *)v9;
      if (v9) {
        atomic_fetch_add((atomic_uint *volatile)v9, 1u);
      }
      sub_216987680((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v16, (pxrInternal__aapl__pxrReserved__::TfToken *)v18, a3);
    case 8u:
      uint64_t v10 = *a1;
      v16[0] = (uint64_t *)v10;
      if (v10) {
        atomic_fetch_add((atomic_uint *volatile)v10, 1u);
      }
      sub_2169885A0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v16, v18, a3);
      goto LABEL_23;
    case 0xAu:
      uint64_t v11 = *a1;
      v16[0] = (uint64_t *)v11;
      if (v11) {
        atomic_fetch_add((atomic_uint *volatile)v11, 1u);
      }
      sub_216989310(v16, v18, a3);
LABEL_23:
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)v16);
      uint64_t v8 = 1;
      break;
    case 0xBu:
      uint64_t v12 = *a1;
      v16[0] = (uint64_t *)v12;
      if (v12) {
        atomic_fetch_add((atomic_uint *volatile)v12, 1u);
      }
      sub_2169891B4(v16);
    default:
      v16[0] = (uint64_t *)"sdf/fileIO.cpp";
      v16[1] = (uint64_t *)"Sdf_WriteToStream";
      v16[2] = (uint64_t *)89;
      v16[3] = (uint64_t *)"BOOL pxrInternal__aapl__pxrReserved__::Sdf_WriteToStream(const SdfSpec &, std::ostream &, size_t)";
      char v17 = 0;
      pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_26C755200, SpecType, (uint64_t)__p);
      if (v15 >= 0) {
        uint64_t v7 = __p;
      }
      else {
        uint64_t v7 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v16, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot write spec of type %s to stream", (const char *)v7);
      if (v15 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v8 = 0;
      break;
  }
  sub_216993048(v18);
  return v8;
}

void sub_216987578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_216993048((void *)(v17 - 64));
  _Unwind_Resume(a1);
}

uint64_t sub_2169875F4(uint64_t a1, uint64_t a2)
{
  sub_216989478(a2, &v4);
  long long v5 = v4;
  long long v4 = 0uLL;
  sub_2169895DC(a1, (uint64_t)&v5);
  if (*((void *)&v5 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v5 + 1));
  }
  if (*((void *)&v4 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v4 + 1));
  }
  return a1;
}

void sub_21698765C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_216784EC4(a12);
  }
  if (a10) {
    sub_216784EC4(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_216987680(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t a3)
{
  unsigned int Specifier = pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetSpecifier(a1);
  if (Specifier != 1) {
    goto LABEL_5;
  }
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v7) {
    uint64_t v7 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::HasField(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v7 + 448)))
  {
LABEL_5:
    pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetTypeName(a1, (atomic_uint **)&__p);
    std::string::size_type v8 = __p.__r_.__value_.__r.__words[0];
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::SdfTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfTokens);
    if (!v9) {
      uint64_t v9 = sub_21698B188(&pxrInternal__aapl__pxrReserved__::SdfTokens);
    }
    uint64_t v10 = (atomic_uint *)(v8 & 0xFFFFFFFFFFFFFFF8);
    if ((v8 & 0xFFFFFFFFFFFFFFF8) != (*(void *)v9 & 0xFFFFFFFFFFFFFFF8))
    {
LABEL_11:
      uint64_t v11 = pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Stringify(Specifier);
      uint64_t v12 = " ";
      int v13 = "";
      if (v8)
      {
        unint64_t v14 = v8 & 0xFFFFFFFFFFFFFFF8;
        if ((v8 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          int v13 = (const char *)(v14 + 16);
          if (*(char *)(v14 + 39) < 0) {
            int v13 = *(const char **)v13;
          }
        }
      }
      else
      {
        uint64_t v12 = "";
      }
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, a3, (pxrInternal__aapl__pxrReserved__ *)"%s%s%s ", v11, v12, v13);
      Name = pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetName((pxrInternal__aapl__pxrReserved__::SdfPrimSpec *)a1);
      if (*((char *)Name + 23) >= 0) {
        unint64_t v16 = (char *)Name;
      }
      else {
        unint64_t v16 = (char *)*Name;
      }
      sub_216779094(&__p, v16);
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteQuotedString(a2, 0, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if ((v8 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      sub_21698963C(a1, a2, a3);
      sub_216779094(&__p, "\n");
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, 0, (uint64_t)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      sub_216779094(&__p, "{\n");
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, a3, (uint64_t)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      sub_21698AB54((atomic_uint **)a1, a2, a3);
    }
    if ((v8 & 7) != 0)
    {
      std::string::size_type v8 = 0;
      atomic_fetch_add_explicit(v10, 0xFFFFFFFE, memory_order_release);
      goto LABEL_11;
    }
  }
  std::string::size_type v8 = 0;
  goto LABEL_11;
}

void sub_2169878BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
}

void sub_216987924(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, void *a2, uint64_t a3)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  int Variability = pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetVariability(a1);
  uint64_t v6 = (char *)pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Stringify(Variability);
  sub_216779094(&v78, v6);
  std::string::size_type size = HIBYTE(v78.__r_.__value_.__r.__words[2]);
  if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v78.__r_.__value_.__l.__size_;
  }
  if (size) {
    std::string::push_back(&v78, 32);
  }
  pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetComment(a1, (uint64_t)&v83);
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
  {
    BOOL v8 = v83.__r_.__value_.__l.__size_ == 0;
    operator delete(v83.__r_.__value_.__l.__data_);
  }
  else
  {
    BOOL v8 = SHIBYTE(v83.__r_.__value_.__r.__words[2]) == 0;
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v9) {
    uint64_t v9 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  unsigned int v10 = pxrInternal__aapl__pxrReserved__::SdfSpec::HasField(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v9 + 88));
  int IsCustom = pxrInternal__aapl__pxrReserved__::SdfPropertySpec::IsCustom(a1);
  uint64_t v11 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v11) {
    uint64_t v11 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  unsigned int v12 = pxrInternal__aapl__pxrReserved__::SdfSpec::HasField(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v11 + 56));
  int v13 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v13) {
    int v13 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  unsigned int v14 = pxrInternal__aapl__pxrReserved__::SdfSpec::HasField(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v13 + 432));
  if (!atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames)) {
    sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  uint64_t TypeName = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetTypeName(a1);
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::GetSerializationName(&TypeName, (atomic_uint **)&v83);
  if ((v83.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) != 0) {
    Emptyunint64_t String = (uint64_t *)((v83.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v16);
  }
  if (*((char *)EmptyString + 23) < 0)
  {
    sub_216778F24(__p, (void *)*EmptyString, EmptyString[1]);
  }
  else
  {
    long long v18 = *(_OWORD *)EmptyString;
    uint64_t v77 = EmptyString[2];
    *(_OWORD *)std::string __p = v18;
  }
  if ((v83.__r_.__value_.__s.__data_[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v83.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::ListFields(a1, v75);
  unint64_t v19 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!v19) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
  }
  unint64_t v20 = (uint64_t *)(v19 + 128);
  if (!*(unsigned char *)(v19 + 192)) {
    unint64_t v20 = 0;
  }
  uint64_t TypeName = v20;
  unint64_t v21 = sub_216991520(v75[0], v75[1], (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition **)&TypeName);
  size_t v22 = v21;
  BOOL v23 = v8;
  if (v8)
  {
    BOOL v24 = v75[0] != v21;
    if (v75[0] == v21) {
      int v25 = v10;
    }
    else {
      int v25 = 1;
    }
    if (v25 | IsCustom) != 1 && ((v12 | v14))
    {
      if (!v14) {
        goto LABEL_108;
      }
      goto LABEL_100;
    }
  }
  else
  {
    BOOL v24 = 1;
  }
  uint64_t v81 = 0;
  if (v10)
  {
    pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetDefaultValue(a1, &v83);
    sub_2168ED33C(&TypeName, &v83);
    sub_2168EE084((uint64_t)&v83);
  }
  unsigned int v70 = v14;
  unsigned int v71 = v12;
  int v26 = SHIBYTE(v78.__r_.__value_.__r.__words[2]);
  std::string::size_type v27 = v78.__r_.__value_.__r.__words[0];
  int v28 = SHIBYTE(v77);
  long long v29 = (void **)__p[0];
  Name = pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetName((pxrInternal__aapl__pxrReserved__::SdfPropertySpec *)a1);
  int v31 = __p;
  if (v28 < 0) {
    int v31 = v29;
  }
  int v32 = &v78;
  if (v26 < 0) {
    int v32 = (std::string *)v27;
  }
  int v33 = "custom ";
  if (!IsCustom) {
    int v33 = "";
  }
  if (*((char *)Name + 23) >= 0) {
    uint64_t v34 = (const char *)Name;
  }
  else {
    uint64_t v34 = (const char *)*Name;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, a3, (pxrInternal__aapl__pxrReserved__ *)"%s%s%s %s", v33, (const char *)v32, (const char *)v31, v34);
  if (v81)
  {
    sub_2168EE4C4(v79, &TypeName);
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteDefaultValue(a2, a3, (pxrInternal__aapl__pxrReserved__::VtValue *)v79);
    sub_2168EE084((uint64_t)v79);
  }
  if (v23)
  {
    int v35 = 0;
  }
  else
  {
    int v35 = pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::OpenParensIfNeeded(a2, 0, v24);
    pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetComment(a1, (uint64_t)&v83);
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteQuotedString(a2, a3 + 1, &v83);
    if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v83.__r_.__value_.__l.__data_);
    }
    sub_216779094(&v83, "\n");
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, 0, (uint64_t)&v83);
    if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v83.__r_.__value_.__l.__data_);
    }
  }
  unint64_t v36 = 126 - 2 * __clz((v22 - v75[0]) >> 3);
  if (v22 == v75[0]) {
    uint64_t v37 = 0;
  }
  else {
    uint64_t v37 = v36;
  }
  sub_21698BD44(v75[0], (char *)v22, (uint64_t)&v74, v37, 1);
  v38 = v75[0];
  if (v75[0] != v22)
  {
    uint64_t v39 = a3 + 1;
    if (v24) {
      uint64_t v40 = a3 + 1;
    }
    else {
      uint64_t v40 = 0;
    }
    if (v24) {
      uint64_t v41 = "\n";
    }
    else {
      uint64_t v41 = "";
    }
    do
    {
      int v35 = pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::OpenParensIfNeeded(a2, v35 & 1, v24);
      v42 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v42) {
        v42 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      if ((*(void *)v38 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v42 + 17) & 0xFFFFFFFFFFFFFFF8))
      {
        sub_216779094(&v83, "doc = ");
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, v39, (uint64_t)&v83);
        if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v83.__r_.__value_.__l.__data_);
        }
        pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetDocumentation(a1, (uint64_t)&v83);
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteQuotedString(a2, 0, &v83);
        if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v83.__r_.__value_.__l.__data_);
        }
        sub_216779094(&v83, "\n");
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, 0, (uint64_t)&v83);
        if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v83.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        unint64_t v43 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v43) {
          unint64_t v43 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        if ((*(void *)v38 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v43 + 31) & 0xFFFFFFFFFFFFFFF8))
        {
          int Permission = pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetPermission(a1);
          uint64_t v47 = pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Stringify(Permission);
          pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, v40, (pxrInternal__aapl__pxrReserved__ *)"permission = %s%s", v47, v41);
        }
        else
        {
          v44 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if (!v44) {
            v44 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          }
          if ((*(void *)v38 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v44 + 52) & 0xFFFFFFFFFFFFFFF8))
          {
            pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetSymmetryFunction(a1, (atomic_uint **)&v83);
            std::string::size_type v48 = v83.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8;
            if ((v83.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) != 0)
            {
              BOOL v49 = (const char *)(v48 + 16);
              if (*(char *)(v48 + 39) < 0) {
                BOOL v49 = *(const char **)v49;
              }
            }
            else
            {
              BOOL v49 = "";
            }
            pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, v40, (pxrInternal__aapl__pxrReserved__ *)"symmetryFunction = %s%s", v49, v41);
            if ((v83.__r_.__value_.__s.__data_[0] & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v83.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
          }
          else
          {
            uint64_t v45 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            if (!v45) {
              uint64_t v45 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            }
            if ((*(void *)v38 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v45 + 16) & 0xFFFFFFFFFFFFFFF8))
            {
              v83.__r_.__value_.__r.__words[0] = pxrInternal__aapl__pxrReserved__::SdfAttributeSpec::GetDisplayUnit(a1);
              v83.__r_.__value_.__l.__size_ = (std::string::size_type)v50;
              NameForUnit = pxrInternal__aapl__pxrReserved__::SdfGetNameForUnit((pxrInternal__aapl__pxrReserved__ *)&v83, v50);
              if (*((char *)NameForUnit + 23) >= 0) {
                unint64_t v52 = (const char *)NameForUnit;
              }
              else {
                unint64_t v52 = (const char *)*NameForUnit;
              }
              pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, v40, (pxrInternal__aapl__pxrReserved__ *)"displayUnit = %s%s", v52, v41);
            }
            else
            {
              sub_21698B608(a2, v39, a1, v38);
            }
          }
        }
      }
      v38 = (pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v38 + 8);
    }
    while (v38 != v22);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::CloseParensIfNeeded(a2, a3, v35, v24);
  sub_216779094(&v83, "\n");
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, 0, (uint64_t)&v83);
  unsigned int v12 = v71;
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v83.__r_.__value_.__l.__data_);
  }
  sub_2168EE084((uint64_t)&TypeName);
  if (!v70)
  {
LABEL_108:
    if (!v12) {
      goto LABEL_154;
    }
    goto LABEL_109;
  }
LABEL_100:
  int v53 = SHIBYTE(v78.__r_.__value_.__r.__words[2]);
  std::string::size_type v54 = v78.__r_.__value_.__r.__words[0];
  int v55 = SHIBYTE(v77);
  v56 = (void **)__p[0];
  uint64_t v57 = pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetName((pxrInternal__aapl__pxrReserved__::SdfPropertySpec *)a1);
  unint64_t v58 = __p;
  if (v55 < 0) {
    unint64_t v58 = v56;
  }
  long long v59 = &v78;
  if (v53 < 0) {
    long long v59 = (std::string *)v54;
  }
  if (*((char *)v57 + 23) >= 0) {
    long long v60 = (const char *)v57;
  }
  else {
    long long v60 = (const char *)*v57;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, a3, (pxrInternal__aapl__pxrReserved__ *)"%s%s %s.timeSamples = {\n", (const char *)v59, (const char *)v58, v60);
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteTimeSamples(a2, a3, a1);
  sub_216779094(&v83, "}\n");
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, a3, (uint64_t)&v83);
  if ((SHIBYTE(v83.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
    goto LABEL_108;
  }
  operator delete(v83.__r_.__value_.__l.__data_);
  if (!v12) {
    goto LABEL_154;
  }
LABEL_109:
  pxrInternal__aapl__pxrReserved__::SdfAttributeSpec::GetConnectionPathList((atomic_uint **)a1, &v74);
  long long v61 = pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetName((pxrInternal__aapl__pxrReserved__::SdfPropertySpec *)a1);
  if (sub_2169918D8((uint64_t)&v74)
    && !(*(unsigned int (**)(void))(*(void *)v74 + 16))(v74))
  {
    *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v74;
    if (*((void *)&v74 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v74 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    LODWORD(v83.__r_.__value_.__r.__words[2]) = 2;
    if (sub_216991950((uint64_t)&v83))
    {
      sub_216779094(&TypeName, "delete ");
      sub_21699162C(a2, a3, (uint64_t *)&v83, (uint64_t)&TypeName, (uint64_t)&v78, (uint64_t)__p, (uint64_t)v61);
      if (v82 < 0) {
        operator delete(TypeName);
      }
    }
    long long v62 = v74;
    if (*((void *)&v74 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v74 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    long long v63 = (std::__shared_weak_count *)v83.__r_.__value_.__l.__size_;
    *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v62;
    if (v63) {
      sub_216784EC4(v63);
    }
    LODWORD(v83.__r_.__value_.__r.__words[2]) = 1;
    if (sub_216991950((uint64_t)&v83))
    {
      sub_216779094(&TypeName, "add ");
      sub_21699162C(a2, a3, (uint64_t *)&v83, (uint64_t)&TypeName, (uint64_t)&v78, (uint64_t)__p, (uint64_t)v61);
      if (v82 < 0) {
        operator delete(TypeName);
      }
    }
    long long v64 = v74;
    if (*((void *)&v74 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v74 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v65 = (std::__shared_weak_count *)v83.__r_.__value_.__l.__size_;
    *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v64;
    if (v65) {
      sub_216784EC4(v65);
    }
    LODWORD(v83.__r_.__value_.__r.__words[2]) = 4;
    if (sub_216991950((uint64_t)&v83))
    {
      sub_216779094(&TypeName, "prepend ");
      sub_21699162C(a2, a3, (uint64_t *)&v83, (uint64_t)&TypeName, (uint64_t)&v78, (uint64_t)__p, (uint64_t)v61);
      if (v82 < 0) {
        operator delete(TypeName);
      }
    }
    long long v66 = v74;
    if (*((void *)&v74 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v74 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v67 = (std::__shared_weak_count *)v83.__r_.__value_.__l.__size_;
    *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v66;
    if (v67) {
      sub_216784EC4(v67);
    }
    LODWORD(v83.__r_.__value_.__r.__words[2]) = 5;
    if (sub_216991950((uint64_t)&v83))
    {
      sub_216779094(&TypeName, "append ");
      sub_21699162C(a2, a3, (uint64_t *)&v83, (uint64_t)&TypeName, (uint64_t)&v78, (uint64_t)__p, (uint64_t)v61);
      if (v82 < 0) {
        operator delete(TypeName);
      }
    }
    long long v68 = v74;
    if (*((void *)&v74 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v74 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    char v69 = (std::__shared_weak_count *)v83.__r_.__value_.__l.__size_;
    *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v68;
    if (v69) {
      sub_216784EC4(v69);
    }
    LODWORD(v83.__r_.__value_.__r.__words[2]) = 3;
    if (!sub_216991950((uint64_t)&v83)) {
      goto LABEL_150;
    }
    sub_216779094(&TypeName, "reorder ");
    sub_21699162C(a2, a3, (uint64_t *)&v83, (uint64_t)&TypeName, (uint64_t)&v78, (uint64_t)__p, (uint64_t)v61);
  }
  else
  {
    *(_OWORD *)&v83.__r_.__value_.__l.__data_ = v74;
    if (*((void *)&v74 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v74 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    LODWORD(v83.__r_.__value_.__r.__words[2]) = 0;
    sub_216779094(&TypeName, "");
    sub_21699162C(a2, a3, (uint64_t *)&v83, (uint64_t)&TypeName, (uint64_t)&v78, (uint64_t)__p, (uint64_t)v61);
  }
  if (v82 < 0) {
    operator delete(TypeName);
  }
LABEL_150:
  if (v83.__r_.__value_.__l.__size_) {
    sub_216784EC4((std::__shared_weak_count *)v83.__r_.__value_.__l.__size_);
  }
  if (*((void *)&v74 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v74 + 1));
  }
LABEL_154:
  v83.__r_.__value_.__r.__words[0] = (std::string::size_type)v75;
  sub_216889A04((void ***)&v83);
  if (SHIBYTE(v77) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v78.__r_.__value_.__l.__data_);
  }
}

void sub_2169883E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2169885A0(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, void *a2, uint64_t a3)
{
  uint64_t v98 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetComment(a1, (uint64_t)&v93);
  if (v95 < 0)
  {
    BOOL v5 = v94 == 0;
    operator delete(v93);
  }
  else
  {
    BOOL v5 = v95 == 0;
  }
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v6) {
    uint64_t v6 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  unsigned int v7 = pxrInternal__aapl__pxrReserved__::SdfSpec::HasField(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v6 + 424));
  BOOL v8 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v8) {
    BOOL v8 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  unsigned int v83 = pxrInternal__aapl__pxrReserved__::SdfSpec::HasField(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v8 + 88));
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v9) {
    uint64_t v9 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  unsigned int v84 = pxrInternal__aapl__pxrReserved__::SdfSpec::HasField(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v9 + 432));
  int IsCustom = pxrInternal__aapl__pxrReserved__::SdfPropertySpec::IsCustom(a1);
  pxrInternal__aapl__pxrReserved__::SdfSpec::ListFields(a1, &v93);
  unint64_t v11 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!v11) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
  }
  std::string::size_type v12 = v11 + 632;
  if (!*(unsigned char *)(v11 + 696)) {
    std::string::size_type v12 = 0;
  }
  __p.__r_.__value_.__r.__words[0] = v12;
  int v13 = sub_216991ED4(v93, v94, (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition **)&__p);
  int v14 = v93 != v13 || !v5;
  if (v7)
  {
    pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::GetTargetPathList((atomic_uint **)a1, &v90);
    if (sub_2169918D8((uint64_t)&v90)
      && !(*(unsigned int (**)(void *))(*(void *)v90 + 16))(v90))
    {
      unsigned int v7 = 0;
    }
    else if (sub_2169918D8((uint64_t)&v90))
    {
      unsigned int v7 = sub_216991F78((uint64_t)v90);
    }
    else
    {
      unsigned int v7 = 1;
    }
    if (sub_2169918D8((uint64_t)&v90)
      && ((*(uint64_t (**)(void *))(*(void *)v90 + 16))(v90) & 1) == 0)
    {
      if (sub_2169918D8((uint64_t)&v90)) {
        int v87 = sub_216991F78((uint64_t)v90);
      }
      else {
        int v87 = 1;
      }
    }
    else
    {
      int v87 = 0;
    }
    if (v91) {
      sub_216784EC4(v91);
    }
  }
  else
  {
    int v87 = 0;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetVariability(a1)) {
    char v15 = "";
  }
  else {
    char v15 = "varying ";
  }
  sub_216779094(&v90, v15);
  if (((v14 | v7) & 1) == 0
    && ((v87 & 1) != 0 || (pxrInternal__aapl__pxrReserved__::SdfPropertySpec::IsCustom(a1) & 1) != 0))
  {
    if (IsCustom)
    {
      int v20 = v92;
      unint64_t v21 = (void **)v90;
      Name = pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetName((pxrInternal__aapl__pxrReserved__::SdfPropertySpec *)a1);
      BOOL v23 = &v90;
      if (v20 < 0) {
        BOOL v23 = v21;
      }
      if (*((char *)Name + 23) >= 0) {
        BOOL v24 = (const char *)Name;
      }
      else {
        BOOL v24 = (const char *)*Name;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, a3, (pxrInternal__aapl__pxrReserved__ *)"custom %srel %s\n", (const char *)v23, v24);
    }
  }
  else
  {
    int v16 = v92;
    uint64_t v17 = (void **)v90;
    long long v18 = pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetName((pxrInternal__aapl__pxrReserved__::SdfPropertySpec *)a1);
    if (IsCustom) {
      unint64_t v19 = "custom %srel %s";
    }
    else {
      unint64_t v19 = "%srel %s";
    }
    int v25 = &v90;
    if (v16 < 0) {
      int v25 = v17;
    }
    if (*((char *)v18 + 23) >= 0) {
      uint64_t v26 = (uint64_t)v18;
    }
    else {
      uint64_t v26 = *v18;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, a3, (pxrInternal__aapl__pxrReserved__ *)v19, v25, v26);
    if (v7)
    {
      pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::GetTargetPathList((atomic_uint **)a1, &v97);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v97;
      if (*((void *)&v97 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v97 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      LODWORD(__p.__r_.__value_.__r.__words[2]) = 0;
      if (sub_216991950((uint64_t)&__p)) {
        sub_216991D4C((uint64_t *)&__p, a2, a3, 3);
      }
      else {
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, 0, (pxrInternal__aapl__pxrReserved__ *)" = None");
      }
      if (__p.__r_.__value_.__l.__size_) {
        sub_216784EC4((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
      }
      if (*((void *)&v97 + 1)) {
        sub_216784EC4(*((std::__shared_weak_count **)&v97 + 1));
      }
    }
    if (v5)
    {
      int v27 = 0;
    }
    else
    {
      int v27 = pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::OpenParensIfNeeded(a2, 0, 1);
      pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetComment(a1, (uint64_t)&__p);
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteQuotedString(a2, a3 + 1, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, 0, (pxrInternal__aapl__pxrReserved__ *)"\n");
    }
    unint64_t v28 = 126 - 2 * __clz((v13 - v93) >> 3);
    if (v13 == v93) {
      uint64_t v29 = 0;
    }
    else {
      uint64_t v29 = v28;
    }
    sub_21698BD44(v93, (char *)v13, (uint64_t)&__p, v29, 1);
    unint64_t v30 = v93;
    if (v93 != v13)
    {
      uint64_t v31 = a3 + 1;
      if (v14) {
        uint64_t v32 = a3 + 1;
      }
      else {
        uint64_t v32 = 0;
      }
      int v33 = "";
      if (v14) {
        int v33 = "\n";
      }
      uint64_t v85 = v33;
      uint64_t v86 = v32;
      do
      {
        int v27 = pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::OpenParensIfNeeded(a2, v27 & 1, v14);
        uint64_t v34 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v34) {
          uint64_t v34 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        if ((*(void *)v30 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v34 + 17) & 0xFFFFFFFFFFFFFFF8))
        {
          pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, v31, (pxrInternal__aapl__pxrReserved__ *)"doc = ");
          pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetDocumentation(a1, (uint64_t)&__p);
          pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteQuotedString(a2, 0, &__p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, 0, (pxrInternal__aapl__pxrReserved__ *)"\n");
        }
        else
        {
          int v35 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if (!v35) {
            int v35 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          }
          if ((*(void *)v30 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v35 + 31) & 0xFFFFFFFFFFFFFFF8))
          {
            int Permission = pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetPermission(a1);
            pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Stringify(Permission);
            if (v14) {
              pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, v31, (pxrInternal__aapl__pxrReserved__ *)"permission = %s\n");
            }
            else {
              pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, 0, (pxrInternal__aapl__pxrReserved__ *)"permission = %s");
            }
          }
          else
          {
            unint64_t v36 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            if (!v36) {
              unint64_t v36 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            }
            if ((*(void *)v30 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v36 + 52) & 0xFFFFFFFFFFFFFFF8))
            {
              pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetSymmetryFunction(a1, (atomic_uint **)&__p);
              std::string::size_type v38 = __p.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8;
              if ((__p.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) != 0)
              {
                uint64_t v39 = (const char *)(v38 + 16);
                if (*(char *)(v38 + 39) < 0) {
                  uint64_t v39 = *(const char **)v39;
                }
              }
              else
              {
                uint64_t v39 = "";
              }
              pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, v86, (pxrInternal__aapl__pxrReserved__ *)"symmetryFunction = %s%s", v39, v85);
              if ((__p.__r_.__value_.__s.__data_[0] & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(__p.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
            }
            else
            {
              sub_21698B608(a2, v31, a1, v30);
            }
          }
        }
        unint64_t v30 = (pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v30 + 8);
      }
      while (v30 != v13);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::CloseParensIfNeeded(a2, a3, v27, v14);
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, 0, (pxrInternal__aapl__pxrReserved__ *)"\n");
  }
  if (v87)
  {
    pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec::GetTargetPathList((atomic_uint **)a1, &v97);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v97;
    if (*((void *)&v97 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v97 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    LODWORD(__p.__r_.__value_.__r.__words[2]) = 2;
    if (sub_216991950((uint64_t)&__p))
    {
      int v40 = v92;
      uint64_t v41 = (void **)v90;
      v42 = pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetName((pxrInternal__aapl__pxrReserved__::SdfPropertySpec *)a1);
      unint64_t v43 = &v90;
      if (v40 < 0) {
        unint64_t v43 = v41;
      }
      if (*((char *)v42 + 23) >= 0) {
        v44 = (const char *)v42;
      }
      else {
        v44 = (const char *)*v42;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, a3, (pxrInternal__aapl__pxrReserved__ *)"delete %srel %s", (const char *)v43, v44);
      sub_216991D4C((uint64_t *)&__p, a2, a3, 0);
    }
    long long v45 = v97;
    if (*((void *)&v97 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v97 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    std::string::size_type size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v45;
    if (size) {
      sub_216784EC4(size);
    }
    LODWORD(__p.__r_.__value_.__r.__words[2]) = 1;
    if (sub_216991950((uint64_t)&__p))
    {
      int v47 = v92;
      std::string::size_type v48 = (void **)v90;
      BOOL v49 = pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetName((pxrInternal__aapl__pxrReserved__::SdfPropertySpec *)a1);
      v50 = &v90;
      if (v47 < 0) {
        v50 = v48;
      }
      if (*((char *)v49 + 23) >= 0) {
        v51 = (const char *)v49;
      }
      else {
        v51 = (const char *)*v49;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, a3, (pxrInternal__aapl__pxrReserved__ *)"add %srel %s", (const char *)v50, v51);
      sub_216991D4C((uint64_t *)&__p, a2, a3, 1);
    }
    long long v52 = v97;
    if (*((void *)&v97 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v97 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    int v53 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v52;
    if (v53) {
      sub_216784EC4(v53);
    }
    LODWORD(__p.__r_.__value_.__r.__words[2]) = 4;
    if (sub_216991950((uint64_t)&__p))
    {
      int v54 = v92;
      int v55 = (void **)v90;
      v56 = pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetName((pxrInternal__aapl__pxrReserved__::SdfPropertySpec *)a1);
      uint64_t v57 = &v90;
      if (v54 < 0) {
        uint64_t v57 = v55;
      }
      if (*((char *)v56 + 23) >= 0) {
        unint64_t v58 = (const char *)v56;
      }
      else {
        unint64_t v58 = (const char *)*v56;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, a3, (pxrInternal__aapl__pxrReserved__ *)"prepend %srel %s", (const char *)v57, v58);
      sub_216991D4C((uint64_t *)&__p, a2, a3, 1);
    }
    long long v59 = v97;
    if (*((void *)&v97 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v97 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    long long v60 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v59;
    if (v60) {
      sub_216784EC4(v60);
    }
    LODWORD(__p.__r_.__value_.__r.__words[2]) = 5;
    if (sub_216991950((uint64_t)&__p))
    {
      int v61 = v92;
      long long v62 = (void **)v90;
      long long v63 = pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetName((pxrInternal__aapl__pxrReserved__::SdfPropertySpec *)a1);
      long long v64 = &v90;
      if (v61 < 0) {
        long long v64 = v62;
      }
      if (*((char *)v63 + 23) >= 0) {
        uint64_t v65 = (const char *)v63;
      }
      else {
        uint64_t v65 = (const char *)*v63;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, a3, (pxrInternal__aapl__pxrReserved__ *)"append %srel %s", (const char *)v64, v65);
      sub_216991D4C((uint64_t *)&__p, a2, a3, 1);
    }
    long long v66 = v97;
    if (*((void *)&v97 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v97 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v67 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v66;
    if (v67) {
      sub_216784EC4(v67);
    }
    LODWORD(__p.__r_.__value_.__r.__words[2]) = 3;
    if (sub_216991950((uint64_t)&__p))
    {
      int v68 = v92;
      char v69 = (void **)v90;
      unsigned int v70 = pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetName((pxrInternal__aapl__pxrReserved__::SdfPropertySpec *)a1);
      unsigned int v71 = &v90;
      if (v68 < 0) {
        unsigned int v71 = v69;
      }
      if (*((char *)v70 + 23) >= 0) {
        uint64_t v72 = (const char *)v70;
      }
      else {
        uint64_t v72 = (const char *)*v70;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, a3, (pxrInternal__aapl__pxrReserved__ *)"reorder %srel %s", (const char *)v71, v72);
      sub_216991D4C((uint64_t *)&__p, a2, a3, 0);
    }
    if (__p.__r_.__value_.__l.__size_) {
      sub_216784EC4((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
    }
    if (*((void *)&v97 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v97 + 1));
    }
  }
  if (v84)
  {
    int v73 = v92;
    long long v74 = (void **)v90;
    v75 = pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetName((pxrInternal__aapl__pxrReserved__::SdfPropertySpec *)a1);
    unint64_t v76 = &v90;
    if (v73 < 0) {
      unint64_t v76 = v74;
    }
    if (*((char *)v75 + 23) >= 0) {
      uint64_t v77 = (const char *)v75;
    }
    else {
      uint64_t v77 = (const char *)*v75;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, a3, (pxrInternal__aapl__pxrReserved__ *)"%srel %s.timeSamples = {\n", (const char *)v76, v77);
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteTimeSamples(a2, a3, a1);
    sub_216779094(&__p, "}\n");
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, a3, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  if (v83)
  {
    pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetDefaultValue(a1, &v97);
    if (*((void *)&v97 + 1))
    {
      int v78 = v92;
      uint64_t v79 = (void **)v90;
      v80 = pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetName((pxrInternal__aapl__pxrReserved__::SdfPropertySpec *)a1);
      uint64_t v81 = &v90;
      if (v78 < 0) {
        uint64_t v81 = v79;
      }
      if (*((char *)v80 + 23) >= 0) {
        char v82 = (const char *)v80;
      }
      else {
        char v82 = (const char *)*v80;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, a3, (pxrInternal__aapl__pxrReserved__ *)"%srel %s.default = ", (const char *)v81, v82);
      sub_2168EE4C4(v96, &v97);
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteDefaultValue(a2, 0, (pxrInternal__aapl__pxrReserved__::VtValue *)v96);
      sub_2168EE084((uint64_t)v96);
      sub_216779094(&__p, "\n");
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, a3, (uint64_t)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    sub_2168EE084((uint64_t)&v97);
  }
  if (v92 < 0) {
    operator delete(v90);
  }
  v90 = &v93;
  sub_216889A04((void ***)&v90);
}

void sub_216989094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,uint64_t a30,char a31)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  sub_2168EE084(v31 - 112);
  if (a27 < 0) {
    operator delete(a22);
  }
  a22 = &a28;
  sub_216889A04((void ***)&a22);
  _Unwind_Resume(a1);
}

void sub_2169891B4(uint64_t **a1)
{
}

void sub_2169892D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::string __p = &a15;
  sub_216991094((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_216989310(uint64_t **a1, void *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::SdfVariantSpec::GetPrimSpec(a1, &__p);
  unsigned int v7 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)__p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0]) {
    atomic_fetch_add((atomic_uint *volatile)__p.__r_.__value_.__l.__data_, 1u);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&__p);
  pxrInternal__aapl__pxrReserved__::SdfVariantSpec::GetName((pxrInternal__aapl__pxrReserved__::SdfVariantSpec *)a1, (uint64_t)&__p);
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteQuotedString(a2, a3, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  sub_21698963C(&v7, a2, a3);
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, 0, (pxrInternal__aapl__pxrReserved__ *)" {\n");
  sub_21698AB54(&v7, a2, a3);
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, 0, (pxrInternal__aapl__pxrReserved__ *)"\n");
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, a3, (pxrInternal__aapl__pxrReserved__ *)"}\n");
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v7);
}

void sub_2169893FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_21698942C()
{
  return 1;
}

uint64_t sub_21698944C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

void *sub_216989478@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  long long v4 = operator new(0x28uLL);
  uint64_t result = sub_2169894D4(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_2169894C0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_2169894D4(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C755120;
  pxrInternal__aapl__pxrReserved__::ArWritableAsset::ArWritableAsset(a1 + 3);
  a1[3] = &unk_26C7550D8;
  a1[4] = a2;
  return a1;
}

void sub_21698953C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_216989550(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C755120;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_216989570(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C755120;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2169895B4(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t sub_2169895DC(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_OWORD *)(a1 + 16) = xmmword_217468640;
  *(void *)(a1 + 32) = operator new[](0x1000uLL);
  *(void *)(a1 + 40) = 0;
  return a1;
}

void sub_216989624(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    sub_216784EC4(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_21698963C(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, void *a2, uint64_t a3)
{
  v82[2] = *(void **)MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::SdfSpec::ListFields(a1, v78);
  unint64_t v6 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!v6) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
  }
  unint64_t v7 = v6 + 488;
  if (!*(unsigned char *)(v6 + 552)) {
    unint64_t v7 = 0;
  }
  *(void *)&long long v79 = v7;
  BOOL v8 = sub_21698BA74(v78[0], v78[1], (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition **)&v79);
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetComment(a1, (uint64_t)&v77);
  std::string::size_type size = HIBYTE(v77.__r_.__value_.__r.__words[2]);
  if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v77.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    int v10 = pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::OpenParensIfNeeded(a2, 0, 1);
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteQuotedString(a2, a3 + 1, &v77);
    sub_216779094(__p, "\n");
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, 0, (uint64_t)__p);
    if (SBYTE7(v71[0]) < 0) {
      operator delete(__p[0]);
    }
    BOOL v11 = 1;
    std::string::size_type v12 = v78[0];
  }
  else
  {
    int v10 = 0;
    std::string::size_type v12 = v78[0];
    BOOL v11 = v78[0] != v8;
  }
  unint64_t v13 = 126 - 2 * __clz((v8 - v12) >> 3);
  if (v8 == v12) {
    uint64_t v14 = 0;
  }
  else {
    uint64_t v14 = v13;
  }
  sub_21698BD44(v12, (char *)v8, (uint64_t)&v79, v14, 1);
  char v15 = v78[0];
  if (v78[0] != v8)
  {
    uint64_t v16 = a3 + 1;
    if (v11) {
      uint64_t v17 = a3 + 1;
    }
    else {
      uint64_t v17 = 0;
    }
    long long v18 = "";
    if (v11) {
      long long v18 = "\n";
    }
    long long v64 = v18;
    uint64_t v65 = v17;
    while (1)
    {
      int v10 = pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::OpenParensIfNeeded(a2, v10 & 1, v11);
      unint64_t v19 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v19) {
        unint64_t v19 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      if ((*(void *)v15 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v19 + 17) & 0xFFFFFFFFFFFFFFF8))
      {
        sub_216779094(__p, "doc = ");
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, v16, (uint64_t)__p);
        if (SBYTE7(v71[0]) < 0) {
          operator delete(__p[0]);
        }
        pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetDocumentation(a1, (uint64_t)__p);
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteQuotedString(a2, 0, (const std::string *)__p);
        if (SBYTE7(v71[0]) < 0) {
          operator delete(__p[0]);
        }
        sub_216779094(__p, "\n");
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, 0, (uint64_t)__p);
        if (SBYTE7(v71[0]) < 0) {
          operator delete(__p[0]);
        }
        goto LABEL_135;
      }
      int v20 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v20) {
        int v20 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      if ((*(void *)v15 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v20 + 31) & 0xFFFFFFFFFFFFFFF8))
      {
        int Permission = pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetPermission(a1);
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Stringify(Permission);
        if (v11) {
          pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, v16, (pxrInternal__aapl__pxrReserved__ *)"permission = %s\n");
        }
        else {
          pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, 0, (pxrInternal__aapl__pxrReserved__ *)"permission = %s");
        }
        goto LABEL_135;
      }
      unint64_t v21 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v21) {
        unint64_t v21 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      if ((*(void *)v15 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v21 + 52) & 0xFFFFFFFFFFFFFFF8))
      {
        pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetSymmetryFunction(a1, (atomic_uint **)__p);
        unint64_t v32 = (unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8;
        if (((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          int v33 = (const char *)(v32 + 16);
          if (*(char *)(v32 + 39) < 0) {
            int v33 = *(const char **)v33;
          }
        }
        else
        {
          int v33 = "";
        }
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, v65, (pxrInternal__aapl__pxrReserved__ *)"symmetryFunction = %s%s", v33, v64);
        if (((uint64_t)__p[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        goto LABEL_135;
      }
      size_t v22 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v22) {
        size_t v22 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      if ((*(void *)v15 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v22 + 30) & 0xFFFFFFFFFFFFFFF8)) {
        break;
      }
      BOOL v23 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v23) {
        BOOL v23 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      if ((*(void *)v15 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v23 + 35) & 0xFFFFFFFFFFFFFFF8))
      {
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(a1, v15, (pxrInternal__aapl__pxrReserved__::VtValue *)&v81);
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)__p, "references");
        if (sub_21698E9D8((pxrInternal__aapl__pxrReserved__::VtValue *)&v81))
        {
          if (((uint64_t)v82[0] & 4) != 0) {
            (*(void (**)(unsigned int **))(((unint64_t)v82[0] & 0xFFFFFFFFFFFFFFF8) + 168))(&v81);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteListOp<pxrInternal__aapl__pxrReserved__::SdfReference>();
        }
        if (((uint64_t)__p[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        __p[0] = "sdf/fileIO_Common.h";
        __p[1] = "Sdf_WritePrimMetadata";
        *(void *)&v71[0] = 397;
        *((void *)&v71[0] + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Sdf_WritePrimMetadata(const SdfPrimSpec &, Sdf"
                                   "_TextOutput &, size_t)";
        LOBYTE(v71[1]) = 0;
        unint64_t v42 = *(void *)v15 & 0xFFFFFFFFFFFFFFF8;
        if (v42)
        {
          std::string::size_type v38 = (const char *)(v42 + 16);
          if (*(char *)(v42 + 39) < 0) {
            std::string::size_type v38 = *(const char **)v38;
          }
        }
        else
        {
          std::string::size_type v38 = "";
        }
        pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((pxrInternal__aapl__pxrReserved__::VtValue *)&v81, v40, v41, (uint64_t)&v79);
        int v47 = (const char *)&v79;
        if (v80 < 0) {
          int v47 = (const char *)v79;
        }
        goto LABEL_132;
      }
      BOOL v24 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v24) {
        BOOL v24 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      if ((*(void *)v15 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v24 + 59) & 0xFFFFFFFFFFFFFFF8)) {
        pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetVariantSetNameList((atomic_uint **)a1);
      }
      int v25 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v25) {
        int v25 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      if ((*(void *)v15 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v25 + 24) & 0xFFFFFFFFFFFFFFF8))
      {
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(a1, v15, (pxrInternal__aapl__pxrReserved__::VtValue *)&v81);
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)__p, "inherits");
        char v43 = sub_21698B2B0((uint64_t)a2, v16, (uint64_t)__p, (pxrInternal__aapl__pxrReserved__::VtValue *)&v81);
        if (((uint64_t)__p[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((v43 & 1) == 0)
        {
          __p[0] = "sdf/fileIO_Common.h";
          __p[1] = "Sdf_WritePrimMetadata";
          *(void *)&v71[0] = 448;
          *((void *)&v71[0] + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Sdf_WritePrimMetadata(const SdfPrimSpec &, S"
                                     "df_TextOutput &, size_t)";
          LOBYTE(v71[1]) = 0;
          unint64_t v46 = *(void *)v15 & 0xFFFFFFFFFFFFFFF8;
          if (v46)
          {
            std::string::size_type v38 = (const char *)(v46 + 16);
            if (*(char *)(v46 + 39) < 0) {
              std::string::size_type v38 = *(const char **)v38;
            }
          }
          else
          {
            std::string::size_type v38 = "";
          }
          pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((pxrInternal__aapl__pxrReserved__::VtValue *)&v81, v44, v45, (uint64_t)&v79);
          int v47 = (const char *)&v79;
          if (v80 < 0) {
            int v47 = (const char *)v79;
          }
          goto LABEL_132;
        }
        goto LABEL_134;
      }
      uint64_t v26 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v26) {
        uint64_t v26 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      if ((*(void *)v15 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v26 + 38) & 0xFFFFFFFFFFFFFFF8))
      {
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(a1, v15, (pxrInternal__aapl__pxrReserved__::VtValue *)&v81);
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)__p, "specializes");
        char v48 = sub_21698B2B0((uint64_t)a2, v16, (uint64_t)__p, (pxrInternal__aapl__pxrReserved__::VtValue *)&v81);
        if (((uint64_t)__p[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if ((v48 & 1) == 0)
        {
          __p[0] = "sdf/fileIO_Common.h";
          __p[1] = "Sdf_WritePrimMetadata";
          *(void *)&v71[0] = 457;
          *((void *)&v71[0] + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Sdf_WritePrimMetadata(const SdfPrimSpec &, S"
                                     "df_TextOutput &, size_t)";
          LOBYTE(v71[1]) = 0;
          unint64_t v51 = *(void *)v15 & 0xFFFFFFFFFFFFFFF8;
          if (v51)
          {
            std::string::size_type v38 = (const char *)(v51 + 16);
            if (*(char *)(v51 + 39) < 0) {
              std::string::size_type v38 = *(const char **)v38;
            }
          }
          else
          {
            std::string::size_type v38 = "";
          }
          pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((pxrInternal__aapl__pxrReserved__::VtValue *)&v81, v49, v50, (uint64_t)&v79);
          int v47 = (const char *)&v79;
          if (v80 < 0) {
            int v47 = (const char *)v79;
          }
          goto LABEL_132;
        }
        goto LABEL_134;
      }
      int v27 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v27) {
        int v27 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      if ((*(void *)v15 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v27 + 36) & 0xFFFFFFFFFFFFFFF8))
      {
        v82[0] = 0;
        v82[1] = 0;
        uint64_t v81 = (unsigned int *)v82;
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)a1, &v76);
        v75[0] = 0;
        v75[1] = 0;
        long long v74 = (uint64_t *)v75;
        pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetRelocates(a1, &v72);
        memset(v71, 0, sizeof(v71));
        *(_OWORD *)std::string __p = 0u;
        sub_21698EBCC(&v72, &v79);
        *(_OWORD *)std::string __p = v79;
        *(void *)&v71[0] = v80;
        sub_21698ED3C(&v72, (uint64_t **)&v79);
        *(_OWORD *)((char *)v71 + 8) = v79;
        *((void *)&v71[1] + 1) = v80;
        while (!sub_21698EDEC((uint64_t)__p, (uint64_t)v71 + 8))
        {
          uint64_t v52 = sub_21698B334((uint64_t)__p);
          int v53 = sub_21698EEC4(*(uint64_t **)v52, *(void *)(v52 + 8), *(char **)(v52 + 16));
          pxrInternal__aapl__pxrReserved__::SdfPath::MakeRelativePath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v53 + 8), &v76, &v68);
          uint64_t v54 = sub_21698B334((uint64_t)__p);
          int v55 = sub_21698EEC4(*(uint64_t **)v54, *(void *)(v54 + 8), *(char **)(v54 + 16));
          pxrInternal__aapl__pxrReserved__::SdfPath::MakeRelativePath((pxrInternal__aapl__pxrReserved__::SdfPath *)v55, &v76, &v66);
          *(void *)&long long v79 = &v66;
          v56 = sub_21698F06C(&v74, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v66, (uint64_t)&unk_2174BFD90, (_DWORD **)&v79);
          sub_21697DE94((int *)v56 + 9, &v68);
          sub_21697DEEC((int *)v56 + 10, &v69);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v67);
          sub_21697C414(&v66);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v69);
          sub_21697C414(&v68);
          sub_21698B3B0((uint64_t)__p);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteRelocates(a2, v16, v11, &v74);
        if (v73) {
          sub_216784EC4(v73);
        }
        sub_21698F21C((uint64_t)&v74, v75[0]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v76 + 1);
        sub_21697C414(&v76);
        sub_21698F21C((uint64_t)&v81, v82[0]);
        goto LABEL_135;
      }
      unint64_t v28 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v28) {
        unint64_t v28 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      if ((*(void *)v15 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v28 + 33) & 0xFFFFFFFFFFFFFFF8))
      {
        pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetPrefixSubstitutions(a1, (pxrInternal__aapl__pxrReserved__::VtDictionary *)&v79);
        sub_216779094(__p, "prefixSubstitutions = ");
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, v16, (uint64_t)__p);
        if (SBYTE7(v71[0]) < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        uint64_t v29 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v29) {
          uint64_t v29 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        if ((*(void *)v15 & 0xFFFFFFFFFFFFFFF8) != (*((void *)v29 + 48) & 0xFFFFFFFFFFFFFFF8))
        {
          unint64_t v30 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          if (!v30) {
            unint64_t v30 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
          }
          if ((*(void *)v15 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v30 + 57) & 0xFFFFFFFFFFFFFFF8))
          {
            pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetVariantSelections(a1, &v79);
            sub_21698B45C(&v79, (uint64_t *)__p);
            if (*((void *)&v79 + 1)) {
              sub_216784EC4(*((std::__shared_weak_count **)&v79 + 1));
            }
            if (*(void *)&v71[0])
            {
              long long v74 = 0;
              *(void **)&long long v79 = __p[0];
              *((void *)&v79 + 1) = &__p[1];
              while ((void)v79 != *((void *)&v79 + 1))
              {
                uint64_t v59 = *sub_21698B4E4(&v79, v57, v58) + 56;
                v82[0] = &off_26C750BB8;
                sub_21691B31C(&v81, v59);
                long long v62 = sub_21698B4E4(&v79, v60, v61);
                long long v63 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v74, (long long *)(*v62 + 32));
                sub_2168ED33C(v63, &v81);
                sub_2168EE084((uint64_t)&v81);
                sub_21698B560(&v79);
              }
              sub_216779094(&v79, "variants = ");
              pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, v16, (uint64_t)&v79);
              if (SHIBYTE(v80) < 0) {
                operator delete((void *)v79);
              }
              pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteDictionary(a2, v16, v11, (pxrInternal__aapl__pxrReserved__::VtDictionary *)&v74, 0);
              sub_2168EBBB8((void ***)&v74, 0);
            }
            sub_2167877AC((uint64_t)__p, (void *)__p[1]);
          }
          else
          {
            sub_21698B608(a2, v16, a1, v15);
          }
          goto LABEL_135;
        }
        pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetSuffixSubstitutions(a1, (pxrInternal__aapl__pxrReserved__::VtDictionary *)&v79);
        sub_216779094(__p, "suffixSubstitutions = ");
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, v16, (uint64_t)__p);
        if (SBYTE7(v71[0]) < 0) {
          operator delete(__p[0]);
        }
      }
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteDictionary(a2, v16, v11, (pxrInternal__aapl__pxrReserved__::VtDictionary *)&v79, 1);
      sub_2168EBBB8((void ***)&v79, 0);
LABEL_135:
      char v15 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v15 + 8);
      if (v15 == v8) {
        goto LABEL_147;
      }
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(a1, v15, (pxrInternal__aapl__pxrReserved__::VtValue *)&v81);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)__p, "payload");
    if (sub_21698E94C((pxrInternal__aapl__pxrReserved__::VtValue *)&v81))
    {
      if (((uint64_t)v82[0] & 4) != 0) {
        (*(void (**)(unsigned int **))(((unint64_t)v82[0] & 0xFFFFFFFFFFFFFFF8) + 168))(&v81);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>();
    }
    if (((uint64_t)__p[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    __p[0] = "sdf/fileIO_Common.h";
    __p[1] = "Sdf_WritePrimMetadata";
    *(void *)&v71[0] = 388;
    *((void *)&v71[0] + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Sdf_WritePrimMetadata(const SdfPrimSpec &, Sdf_Tex"
                               "tOutput &, size_t)";
    LOBYTE(v71[1]) = 0;
    unint64_t v37 = *(void *)v15 & 0xFFFFFFFFFFFFFFF8;
    if (v37)
    {
      std::string::size_type v38 = (const char *)(v37 + 16);
      if (*(char *)(v37 + 39) < 0) {
        std::string::size_type v38 = *(const char **)v38;
      }
    }
    else
    {
      std::string::size_type v38 = "";
    }
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((pxrInternal__aapl__pxrReserved__::VtValue *)&v81, v35, v36, (uint64_t)&v79);
    int v47 = (const char *)&v79;
    if (v80 < 0) {
      int v47 = (const char *)v79;
    }
LABEL_132:
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"'%s' field holding unexpected type '%s'", v38, v47);
    if (SHIBYTE(v80) < 0) {
      operator delete((void *)v79);
    }
LABEL_134:
    sub_2168EE084((uint64_t)&v81);
    goto LABEL_135;
  }
LABEL_147:
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::CloseParensIfNeeded(a2, a3, v10, v11);
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v77.__r_.__value_.__l.__data_);
  }
  __p[0] = v78;
  sub_216889A04((void ***)__p);
}

void sub_21698A810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,int a22,__int16 a23,char a24,char a25,void *__p,void *a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  sub_2168EBBB8((void ***)&a38, 0);
  sub_2167877AC((uint64_t)&__p, a27);
  if (*(char *)(v41 - 177) < 0) {
    operator delete(*(void **)(v41 - 200));
  }
  std::string __p = (void *)(v41 - 176);
  sub_216889A04((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_21698AB54(atomic_uint **a1, pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetPropertyOrder(a1, (uint64_t)&__p);
  sub_21698F998((uint64_t)&__p, v12);
  if (v7) {
    sub_216784EC4(v7);
  }
  if ((void *)((char *)v12[1] - (char *)v12[0]) >= (void *)9)
  {
    sub_216779094(&__p, "reorder properties = ");
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, a3 + 1, (uint64_t)&__p);
    if (v8 < 0) {
      operator delete(__p);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteNameVector(a2, a3 + 1, (uint64_t *)v12);
    sub_216779094(&__p, "\n");
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, 0, (uint64_t)&__p);
    if (v8 < 0) {
      operator delete(__p);
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetNameChildrenOrder(a1, (uint64_t)&p_p);
  sub_21698F998((uint64_t)&p_p, &__p);
  if (v10) {
    sub_216784EC4(v10);
  }
  if ((unint64_t)((char *)v7 - (unsigned char *)__p) >= 9)
  {
    sub_216779094(&p_p, "reorder nameChildren = ");
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, a3 + 1, (uint64_t)&p_p);
    if (v11 < 0) {
      operator delete(p_p);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteNameVector(a2, a3 + 1, (uint64_t *)&__p);
    sub_216779094(&p_p, "\n");
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a2, 0, (uint64_t)&p_p);
    if (v11 < 0) {
      operator delete(p_p);
    }
  }
  p_p = &__p;
  sub_216889A04((void ***)&p_p);
  std::string __p = v12;
  sub_216889A04((void ***)&__p);
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetProperties((uint64_t **)a1);
}

void sub_21698AFE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::SdfTokens_StaticTokenType *sub_21698B188(atomic_ullong *a1)
{
  uint64_t result = sub_21698B1D0();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::SdfTokens_StaticTokenType::~SdfTokens_StaticTokenType(result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::SdfTokens_StaticTokenType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::SdfTokens_StaticTokenType *sub_21698B1D0()
{
  uint64_t v0 = (pxrInternal__aapl__pxrReserved__::SdfTokens_StaticTokenType *)operator new(0x20uLL);
  pxrInternal__aapl__pxrReserved__::SdfTokens_StaticTokenType::SdfTokens_StaticTokenType(v0);
  return v0;
}

void sub_21698B200(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_21698B214@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = *(char **)a1;
  if (result)
  {
    uint64_t v5 = (*(uint64_t (**)(char *, void))(*(void *)result + 112))(result, *(unsigned int *)(a1 + 16));
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)a2 = 0;
    unint64_t v6 = *(long long **)v5;
    unint64_t v7 = *(long long **)(v5 + 8);
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *(void *)v5) >> 3);
    return sub_216812BD8((char *)a2, v6, v7, v8);
  }
  else
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  return result;
}

uint64_t sub_21698B2B0(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  uint64_t v5 = sub_216980CE8(a4);
  if (v5)
  {
    uint64_t v6 = *((void *)a4 + 1);
    if ((v6 & 4) != 0) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v6 & 0xFFFFFFFFFFFFFFF8) + 168))(a4);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteListOp<pxrInternal__aapl__pxrReserved__::SdfPath>();
  }
  return v5;
}

uint64_t sub_21698B334(uint64_t a1)
{
  if (sub_21698EDEC(a1, a1 + 24))
  {
    v4[0] = "tf/iterator.h";
    v4[1] = "operator->";
    v4[2] = 287;
    v4[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__::SdfMapEditPro"
            "xy<std::map<pxrInternal__aapl__pxrReserved__::SdfPath, pxrInternal__aapl__pxrReserved__::SdfPath>, pxrIntern"
            "al__aapl__pxrReserved__::SdfRelocatesMapProxyValuePolicy>>::operator->() [T = const pxrInternal__aapl__pxrRe"
            "served__::SdfMapEditProxy<std::map<pxrInternal__aapl__pxrReserved__::SdfPath, pxrInternal__aapl__pxrReserved"
            "__::SdfPath>, pxrInternal__aapl__pxrReserved__::SdfRelocatesMapProxyValuePolicy>, Reverse = false]";
    char v5 = 0;
    int v6 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v4, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", v2);
  }
  return a1;
}

uint64_t sub_21698B3B0(uint64_t a1)
{
  if (sub_21698EDEC(a1, a1 + 24))
  {
    v7[0] = "tf/iterator.h";
    v7[1] = "operator++";
    v7[2] = 250;
    void v7[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__:"
            ":SdfMapEditProxy<std::map<pxrInternal__aapl__pxrReserved__::SdfPath, pxrInternal__aapl__pxrReserved__::SdfPa"
            "th>, pxrInternal__aapl__pxrReserved__::SdfRelocatesMapProxyValuePolicy>>::operator++() [T = const pxrInterna"
            "l__aapl__pxrReserved__::SdfMapEditProxy<std::map<pxrInternal__aapl__pxrReserved__::SdfPath, pxrInternal__aap"
            "l__pxrReserved__::SdfPath>, pxrInternal__aapl__pxrReserved__::SdfRelocatesMapProxyValuePolicy>, Reverse = false]";
    char v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    char v2 = *(void **)(a1 + 16);
    uint64_t v3 = (void *)v2[1];
    if (v3)
    {
      do
      {
        long long v4 = v3;
        uint64_t v3 = (void *)*v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        long long v4 = (void *)v2[2];
        BOOL v5 = *v4 == (void)v2;
        char v2 = v4;
      }
      while (!v5);
    }
    *(void *)(a1 + 16) = v4;
  }
  return a1;
}

uint64_t *sub_21698B45C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (uint64_t *)sub_21698F278(a1);
  if (result)
  {
    BOOL v5 = (const void ***)(*(uint64_t (**)(void))(*(void *)*a1 + 48))();
    return sub_2167898D0(a2, v5);
  }
  else
  {
    a2[2] = 0;
    a2[1] = 0;
    *a2 = (uint64_t)(a2 + 1);
  }
  return result;
}

void *sub_21698B4E4(void *result, uint64_t a2, char *a3)
{
  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<std::map<std::string, std::string>>::operator->() [T "
            "= std::map<std::string, std::string>, Reverse = false]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void *sub_21698B560(void *a1)
{
  char v2 = (void *)*a1;
  if (*a1 == a1[1])
  {
    v7[0] = "tf/iterator.h";
    v7[1] = "operator++";
    v7[2] = 250;
    void v7[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::map<std::string, std::string>>::op"
            "erator++() [T = std::map<std::string, std::string>, Reverse = false]";
    char v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    uint64_t v3 = (void *)v2[1];
    if (v3)
    {
      do
      {
        char v4 = v3;
        uint64_t v3 = (void *)*v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        char v4 = (void *)v2[2];
        BOOL v5 = *v4 == (void)v2;
        char v2 = v4;
      }
      while (!v5);
    }
    *a1 = v4;
  }
  return a1;
}

uint64_t sub_21698B608(void *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(this, a4, (pxrInternal__aapl__pxrReserved__::VtValue *)&v21);
  if (sub_21698F4F4((pxrInternal__aapl__pxrReserved__::VtValue *)&v21))
  {
    if ((v22 & 4) != 0) {
      (*(void (**)(const std::string **))((v22 & 0xFFFFFFFFFFFFFFF8) + 168))(&v21);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteListOp<int>();
  }
  if (sub_21698F580((pxrInternal__aapl__pxrReserved__::VtValue *)&v21))
  {
    if ((v22 & 4) != 0) {
      (*(void (**)(const std::string **))((v22 & 0xFFFFFFFFFFFFFFF8) + 168))(&v21);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteListOp<long long>();
  }
  if (sub_21698F60C((pxrInternal__aapl__pxrReserved__::VtValue *)&v21))
  {
    if ((v22 & 4) != 0) {
      (*(void (**)(const std::string **))((v22 & 0xFFFFFFFFFFFFFFF8) + 168))(&v21);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteListOp<unsigned int>();
  }
  if (sub_21698F698((pxrInternal__aapl__pxrReserved__::VtValue *)&v21))
  {
    if ((v22 & 4) != 0) {
      (*(void (**)(const std::string **))((v22 & 0xFFFFFFFFFFFFFFF8) + 168))(&v21);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteListOp<unsigned long long>();
  }
  if (sub_21698F724((pxrInternal__aapl__pxrReserved__::VtValue *)&v21))
  {
    if ((v22 & 4) != 0) {
      (*(void (**)(const std::string **))((v22 & 0xFFFFFFFFFFFFFFF8) + 168))(&v21);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteListOp<std::string>();
  }
  if (sub_21698F7B0((pxrInternal__aapl__pxrReserved__::VtValue *)&v21))
  {
    if ((v22 & 4) != 0) {
      (*(void (**)(const std::string **))((v22 & 0xFFFFFFFFFFFFFFF8) + 168))(&v21);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteListOp<pxrInternal__aapl__pxrReserved__::TfToken>();
  }
  if (sub_21698F348((pxrInternal__aapl__pxrReserved__::VtValue *)&v21))
  {
    char v8 = (pxrInternal__aapl__pxrReserved__::VtValue *)sub_21698F3D4((pxrInternal__aapl__pxrReserved__::VtValue *)&v21);
    if (sub_21698F468(v8))
    {
      uint64_t v9 = *((void *)v8 + 1);
      if ((v9 & 4) != 0) {
        (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v8);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>();
    }
    unint64_t v12 = *(void *)a4 & 0xFFFFFFFFFFFFFFF8;
    if (v12)
    {
      unint64_t v13 = (const char *)(v12 + 16);
      if (*(char *)(v12 + 39) < 0) {
        unint64_t v13 = *(const char **)v13;
      }
    }
    else
    {
      unint64_t v13 = "";
    }
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, a2, (pxrInternal__aapl__pxrReserved__ *)"%s = ", v13);
    if (sub_2168EC434(v8))
    {
      uint64_t v17 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)sub_2168EF25C(v8);
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteDictionary(a1, a2, 1, v17, 0);
    }
    else if (sub_21695C360(v8))
    {
      uint64_t v18 = sub_21695A928(v8);
      if (*(char *)(v18 + 23) >= 0) {
        unint64_t v19 = (const char *)v18;
      }
      else {
        unint64_t v19 = *(const char **)v18;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, 0, (pxrInternal__aapl__pxrReserved__ *)"%s\n", v19);
    }
  }
  else
  {
    unint64_t v10 = *(void *)a4 & 0xFFFFFFFFFFFFFFF8;
    if (v10)
    {
      char v11 = (const char *)(v10 + 16);
      if (*(char *)(v10 + 39) < 0) {
        char v11 = *(const char **)v11;
      }
    }
    else
    {
      char v11 = "";
    }
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, a2, (pxrInternal__aapl__pxrReserved__ *)"%s = ", v11);
    if (sub_2168EC434((pxrInternal__aapl__pxrReserved__::VtValue *)&v21))
    {
      uint64_t v14 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)sub_2168EF25C((pxrInternal__aapl__pxrReserved__::VtValue *)&v21);
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteDictionary(a1, a2, 1, v14, 0);
    }
    else
    {
      if (sub_216959490((pxrInternal__aapl__pxrReserved__::VtValue *)&v21))
      {
        char v15 = (unsigned __int8 *)sub_216958184((pxrInternal__aapl__pxrReserved__::VtValue *)&v21);
        pxrInternal__aapl__pxrReserved__::TfStringify((pxrInternal__aapl__pxrReserved__ *)*v15, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::StringFromVtValue(&v21, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
      }
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, 0, (pxrInternal__aapl__pxrReserved__ *)"%s\n", (const char *)p_p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
  return sub_2168EE084((uint64_t)&v21);
}

void sub_21698BA2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_2168EE084((uint64_t)&a17);
  _Unwind_Resume(a1);
}

const pxrInternal__aapl__pxrReserved__::TfToken *sub_21698BA74(const pxrInternal__aapl__pxrReserved__::TfToken *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition **a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    BOOL v5 = a1;
    uint64_t v3 = a2;
    while (2)
    {
      while (sub_21698BB18(a3, v5))
      {
        BOOL v5 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v5 + 8);
        if (v5 == v3) {
          return v3;
        }
      }
      do
      {
        uint64_t v3 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v3 - 8);
        if (v3 == v5) {
          return v5;
        }
      }
      while (!sub_21698BB18(a3, v3));
      uint64_t v6 = *(void *)v5;
      *(void *)BOOL v5 = *(void *)v3;
      BOOL v5 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v5 + 8);
      *(void *)uint64_t v3 = v6;
      if (v3 != v5) {
        continue;
      }
      break;
    }
  }
  return v3;
}

BOOL sub_21698BB18(pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  char v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    char v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v4 + 56) & 0xFFFFFFFFFFFFFFF8)) {
    return 0;
  }
  if (sub_21698BCEC(a1, a2)) {
    return 1;
  }
  BOOL v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v5) {
    BOOL v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v5 + 30) & 0xFFFFFFFFFFFFFFF8)) {
    return 1;
  }
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v6) {
    uint64_t v6 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v6 + 35) & 0xFFFFFFFFFFFFFFF8)) {
    return 1;
  }
  unint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v7) {
    unint64_t v7 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v7 + 36) & 0xFFFFFFFFFFFFFFF8)) {
    return 1;
  }
  char v8 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v8) {
    char v8 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v8 + 24) & 0xFFFFFFFFFFFFFFF8)) {
    return 1;
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v9) {
    uint64_t v9 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v9 + 38) & 0xFFFFFFFFFFFFFFF8)) {
    return 1;
  }
  unint64_t v10 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v10) {
    unint64_t v10 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v10 + 59) & 0xFFFFFFFFFFFFFFF8)) {
    return 1;
  }
  char v11 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v11) {
    char v11 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  return (*(void *)a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v11 + 57) & 0xFFFFFFFFFFFFFFF8);
}

uint64_t sub_21698BCEC(pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  if (!pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition::IsValidField(*a1, a2)) {
    return 1;
  }
  char v4 = *a1;

  return pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition::IsMetadataField(v4, a2);
}

pxrInternal__aapl__pxrReserved__::TfToken *sub_21698BD44(pxrInternal__aapl__pxrReserved__::TfToken *result, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v10 = (uint64_t *)result;
LABEL_2:
  char v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    unint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = a2 - (char *)v11;
    unint64_t v15 = (a2 - (char *)v11) >> 3;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          if ((*((void *)a2 - 1) & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            uint64_t v33 = (*((void *)a2 - 1) & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          else
          {
            uint64_t result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
            uint64_t v33 = (uint64_t)result;
          }
          if ((*v11 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            uint64_t v34 = (*v11 & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          else
          {
            uint64_t result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
            uint64_t v34 = (uint64_t)result;
          }
          if (*(char *)(v33 + 23) >= 0) {
            int v35 = (char *)v33;
          }
          else {
            int v35 = *(char **)v33;
          }
          int v36 = *v35;
          if (*(char *)(v34 + 23) >= 0) {
            unint64_t v37 = (char *)v34;
          }
          else {
            unint64_t v37 = *(char **)v34;
          }
          if (v36 < 0
            || (int v38 = *v37, v38 < 0)
            || ((unsigned int v39 = v36,
                 unsigned int v40 = v38,
                 unsigned int v41 = (v38 ^ v39) & 0xFFFFFFDF,
                 v39 >= 0x40)
              ? (BOOL v42 = v41 == 0)
              : (BOOL v42 = 1),
                v42 || v40 < 0x40))
          {
            uint64_t result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, v33, v34);
            if (!result) {
              return result;
            }
          }
          else if ((((_BYTE)v39 + 5) & 0x1Fu) >= (((_BYTE)v40 + 5) & 0x1Fu))
          {
            return result;
          }
          uint64_t v43 = *v11;
          uint64_t *v11 = *((void *)a2 - 1);
          *((void *)a2 - 1) = v43;
          return result;
        case 3uLL:
          return (pxrInternal__aapl__pxrReserved__::TfToken *)sub_21698C700((uint64_t)v11, v11 + 1, (uint64_t *)a2 - 1, a3);
        case 4uLL:
          return sub_21698D908(v11, v11 + 1, v11 + 2, (uint64_t *)a2 - 1, a3);
        case 5uLL:
          return sub_21698DBA8(v11, v11 + 1, v11 + 2, v11 + 3, (uint64_t *)a2 - 1, a3);
        default:
          JUMPOUT(0);
      }
    }
    if (v14 <= 191) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != (uint64_t *)a2)
      {
        return (pxrInternal__aapl__pxrReserved__::TfToken *)sub_21698DF1C((pxrInternal__aapl__pxrReserved__::TfToken *)v11, a2, (uint64_t *)a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    uint64_t v17 = &v11[v15 >> 1];
    if ((unint64_t)v14 >= 0x401)
    {
      sub_21698C700((uint64_t)v11, &v11[v15 >> 1], (uint64_t *)a2 - 1, a3);
      sub_21698C700((uint64_t)(v11 + 1), v17 - 1, (uint64_t *)a2 - 2, a3);
      sub_21698C700((uint64_t)(v11 + 2), &v11[v16 + 1], (uint64_t *)a2 - 3, a3);
      Emptyunint64_t String = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_21698C700((uint64_t)(v17 - 1), v17, &v11[v16 + 1], a3);
      uint64_t v18 = *v11;
      uint64_t *v11 = *v17;
      *uint64_t v17 = v18;
      if (a5) {
        goto LABEL_33;
      }
    }
    else
    {
      Emptyunint64_t String = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_21698C700((uint64_t)&v11[v15 >> 1], v11, (uint64_t *)a2 - 1, a3);
      if (a5) {
        goto LABEL_33;
      }
    }
    if ((*(v11 - 1) & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      uint64_t v20 = (*(v11 - 1) & 0xFFFFFFFFFFFFFFF8) + 16;
    }
    else
    {
      Emptyunint64_t String = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
      uint64_t v20 = (uint64_t)EmptyString;
    }
    if ((*v11 & 0xFFFFFFFFFFFFFFF8) != 0) {
      unint64_t v21 = (uint64_t *)((*v11 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      unint64_t v21 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    }
    if (*(char *)(v20 + 23) >= 0) {
      uint64_t v22 = (char *)v20;
    }
    else {
      uint64_t v22 = *(char **)v20;
    }
    int v23 = *v22;
    if (*((char *)v21 + 23) >= 0) {
      BOOL v24 = (char *)v21;
    }
    else {
      BOOL v24 = (char *)*v21;
    }
    if (v23 < 0
      || (int v25 = *v24, v25 < 0)
      || ((unsigned int v26 = v23,
           unsigned int v27 = v25,
           unsigned int v28 = (v25 ^ v26) & 0xFFFFFFDF,
           v26 >= 0x40)
        ? (BOOL v29 = v28 == 0)
        : (BOOL v29 = 1),
          v29 || v27 < 0x40))
    {
      if ((pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, v20, (uint64_t)v21) & 1) == 0)
      {
LABEL_38:
        uint64_t result = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_21698CB24((uint64_t)v11, (uint64_t *)a2, a3);
        char v11 = (uint64_t *)result;
LABEL_40:
        a5 = 0;
        a4 = -v13;
        goto LABEL_3;
      }
    }
    else if ((((_BYTE)v26 + 5) & 0x1Fu) >= (((_BYTE)v27 + 5) & 0x1Fu))
    {
      goto LABEL_38;
    }
LABEL_33:
    unint64_t v30 = sub_21698D054((uint64_t)v11, (uint64_t *)a2, a3);
    if ((v31 & 1) == 0) {
      goto LABEL_39;
    }
    char v32 = sub_21698D4DC(v11, v30, a3);
    char v11 = v30 + 1;
    uint64_t result = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_21698D4DC(v30 + 1, (uint64_t *)a2, a3);
    if (result)
    {
      a4 = -v13;
      a2 = (char *)v30;
      if (v32) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if ((v32 & 1) == 0)
    {
LABEL_39:
      uint64_t result = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_21698BD44(v10, v30, a3, -v13, a5 & 1);
      char v11 = v30 + 1;
      goto LABEL_40;
    }
  }
  if (a5)
  {
    return sub_21698C250((pxrInternal__aapl__pxrReserved__::TfToken *)v11, (pxrInternal__aapl__pxrReserved__::TfToken *)a2, a3);
  }
  else
  {
    return (pxrInternal__aapl__pxrReserved__::TfToken *)sub_21698C4C4((uint64_t)v11, a2, a3);
  }
}

pxrInternal__aapl__pxrReserved__::TfToken *sub_21698C250(pxrInternal__aapl__pxrReserved__::TfToken *result, pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v3 = a2;
    char v4 = result;
    char v5 = (pxrInternal__aapl__pxrReserved__::TfToken *)((char *)result + 8);
    if ((pxrInternal__aapl__pxrReserved__::TfToken *)((char *)result + 8) != a2)
    {
      uint64_t v6 = 0;
      unint64_t v7 = result;
      do
      {
        char v8 = v7;
        unint64_t v7 = v5;
        if ((*((void *)v8 + 1) & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          uint64_t v9 = (*((void *)v8 + 1) & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else
        {
          uint64_t result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
          uint64_t v9 = (uint64_t)result;
        }
        if ((*(void *)v8 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          uint64_t v10 = (*(void *)v8 & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else
        {
          uint64_t result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
          uint64_t v10 = (uint64_t)result;
        }
        if (*(char *)(v9 + 23) >= 0) {
          char v11 = (char *)v9;
        }
        else {
          char v11 = *(char **)v9;
        }
        int v12 = *v11;
        if (*(char *)(v10 + 23) >= 0) {
          uint64_t v13 = (char *)v10;
        }
        else {
          uint64_t v13 = *(char **)v10;
        }
        if (v12 < 0
          || (int v14 = *v13, v14 < 0)
          || ((unsigned int v15 = v12,
               unsigned int v16 = v14,
               unsigned int v17 = (v14 ^ v15) & 0xFFFFFFDF,
               v15 >= 0x40)
            ? (BOOL v18 = v17 == 0)
            : (BOOL v18 = 1),
              v18 || v16 < 0x40))
        {
          uint64_t result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, v9, v10);
          if (result)
          {
LABEL_24:
            uint64_t v19 = *(void *)v7;
            *(void *)unint64_t v7 = 0;
            for (uint64_t i = v6; ; i -= 8)
            {
              unint64_t v21 = (uint64_t *)((char *)v4 + i);
              uint64_t v22 = *(void *)((char *)v4 + i + 8);
              if ((v22 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              uint64_t v23 = *v21;
              *unint64_t v21 = 0;
              v21[1] = v23;
              if (!i) {
                break;
              }
              uint64_t v24 = (v19 & 0xFFFFFFFFFFFFFFF8) + 16;
              if ((v19 & 0xFFFFFFFFFFFFFFF8) == 0)
              {
                uint64_t result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
                uint64_t v24 = (uint64_t)result;
              }
              if ((*(void *)((unsigned char *)v4 + i - 8) & 0xFFFFFFFFFFFFFFF8) != 0)
              {
                uint64_t v25 = (*(void *)((unsigned char *)v4 + i - 8) & 0xFFFFFFFFFFFFFFF8) + 16;
              }
              else
              {
                uint64_t result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
                uint64_t v25 = (uint64_t)result;
              }
              if (*(char *)(v24 + 23) >= 0) {
                unsigned int v26 = (char *)v24;
              }
              else {
                unsigned int v26 = *(char **)v24;
              }
              int v27 = *v26;
              if (*(char *)(v25 + 23) >= 0) {
                unsigned int v28 = (char *)v25;
              }
              else {
                unsigned int v28 = *(char **)v25;
              }
              if (v27 < 0
                || (int v29 = *v28, v29 < 0)
                || ((unsigned int v30 = v27,
                     unsigned int v31 = v29,
                     unsigned int v32 = (v29 ^ v30) & 0xFFFFFFDF,
                     v30 >= 0x40)
                  ? (BOOL v33 = v32 == 0)
                  : (BOOL v33 = 1),
                    v33 || v31 < 0x40))
              {
                uint64_t result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, v24, v25);
                if (!result)
                {
                  char v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v4 + i);
                  goto LABEL_51;
                }
              }
              else if ((((_BYTE)v30 + 5) & 0x1Fu) >= (((_BYTE)v31 + 5) & 0x1Fu))
              {
                goto LABEL_51;
              }
              char v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v8 - 8);
            }
            char v8 = v4;
LABEL_51:
            uint64_t v3 = a2;
            if ((*(void *)v8 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            *(void *)char v8 = v19;
          }
        }
        else if ((((_BYTE)v15 + 5) & 0x1Fu) < (((_BYTE)v16 + 5) & 0x1Fu))
        {
          goto LABEL_24;
        }
        char v5 = (pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v7 + 8);
        v6 += 8;
      }
      while ((pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v7 + 8) != v3);
    }
  }
  return result;
}

uint64_t sub_21698C4C4(uint64_t result, void *a2, uint64_t a3)
{
  if ((void *)result != a2)
  {
    char v4 = (void *)result;
    char v5 = (void *)(result + 8);
    while (v4 + 1 != a2)
    {
      unint64_t v7 = v4;
      char v4 = v5;
      if ((v7[1] & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        uint64_t v8 = (v7[1] & 0xFFFFFFFFFFFFFFF8) + 16;
      }
      else
      {
        uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
        uint64_t v8 = result;
      }
      if ((*v7 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        uint64_t v9 = (*v7 & 0xFFFFFFFFFFFFFFF8) + 16;
      }
      else
      {
        uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
        uint64_t v9 = result;
      }
      if (*(char *)(v8 + 23) >= 0) {
        uint64_t v10 = (char *)v8;
      }
      else {
        uint64_t v10 = *(char **)v8;
      }
      int v11 = *v10;
      if (*(char *)(v9 + 23) >= 0) {
        int v12 = (char *)v9;
      }
      else {
        int v12 = *(char **)v9;
      }
      if (v11 < 0
        || (int v13 = *v12, v13 < 0)
        || ((unsigned int v14 = v11,
             unsigned int v15 = v13,
             unsigned int v16 = (v13 ^ v14) & 0xFFFFFFDF,
             v14 >= 0x40)
          ? (BOOL v17 = v16 == 0)
          : (BOOL v17 = 1),
            v17 || v15 < 0x40))
      {
        uint64_t result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, v8, v9);
        if (result)
        {
LABEL_23:
          uint64_t v18 = *v4;
          void *v4 = 0;
          do
          {
            while (1)
            {
              uint64_t v19 = v7;
              uint64_t v20 = v7[1];
              if ((v20 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              uint64_t v21 = *v7;
              *unint64_t v7 = 0;
              v7[1] = v21;
              uint64_t v22 = (v18 & 0xFFFFFFFFFFFFFFF8) + 16;
              if ((v18 & 0xFFFFFFFFFFFFFFF8) == 0)
              {
                uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
                uint64_t v22 = result;
              }
              --v7;
              if ((*(v19 - 1) & 0xFFFFFFFFFFFFFFF8) != 0)
              {
                uint64_t v23 = (*(v19 - 1) & 0xFFFFFFFFFFFFFFF8) + 16;
              }
              else
              {
                uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
                uint64_t v23 = result;
              }
              uint64_t v24 = *(char *)(v22 + 23) >= 0 ? (char *)v22 : *(char **)v22;
              int v25 = *v24;
              unsigned int v26 = *(char *)(v23 + 23) >= 0 ? (char *)v23 : *(char **)v23;
              if (v25 < 0) {
                break;
              }
              int v27 = *v26;
              if (v27 < 0) {
                break;
              }
              unsigned int v28 = v25;
              unsigned int v29 = v27;
              unsigned int v30 = (v27 ^ v28) & 0xFFFFFFDF;
              BOOL v31 = v28 < 0x40 || v30 == 0;
              if (v31 || v29 < 0x40) {
                break;
              }
              if ((((_BYTE)v28 + 5) & 0x1Fu) >= (((_BYTE)v29 + 5) & 0x1Fu)) {
                goto LABEL_47;
              }
            }
            uint64_t result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, v22, v23);
          }
          while ((result & 1) != 0);
LABEL_47:
          if ((*v19 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          *uint64_t v19 = v18;
        }
      }
      else if ((((_BYTE)v14 + 5) & 0x1Fu) < (((_BYTE)v15 + 5) & 0x1Fu))
      {
        goto LABEL_23;
      }
      char v5 = v4 + 1;
    }
  }
  return result;
}

uint64_t sub_21698C700(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6 = a2;
  unint64_t v7 = (uint64_t *)result;
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v8 = (*a2 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
    uint64_t v8 = result;
  }
  if ((*v7 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v9 = (*v7 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
    uint64_t v9 = result;
  }
  if (*(char *)(v8 + 23) >= 0) {
    uint64_t v10 = (char *)v8;
  }
  else {
    uint64_t v10 = *(char **)v8;
  }
  int v11 = *v10;
  if (*(char *)(v9 + 23) >= 0) {
    int v12 = (char *)v9;
  }
  else {
    int v12 = *(char **)v9;
  }
  if (v11 < 0
    || (int v13 = *v12, v13 < 0)
    || ((unsigned int v14 = v11,
         unsigned int v15 = v13,
         unsigned int v16 = (v13 ^ v14) & 0xFFFFFFDF,
         v14 >= 0x40)
      ? (BOOL v17 = v16 == 0)
      : (BOOL v17 = 1),
        v17 || v15 < 0x40))
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a4, v8, v9);
    if (result)
    {
LABEL_21:
      if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        uint64_t v18 = (*a3 & 0xFFFFFFFFFFFFFFF8) + 16;
      }
      else
      {
        uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
        uint64_t v18 = result;
      }
      if ((*v6 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        uint64_t v19 = (*v6 & 0xFFFFFFFFFFFFFFF8) + 16;
      }
      else
      {
        uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
        uint64_t v19 = result;
      }
      if (*(char *)(v18 + 23) >= 0) {
        uint64_t v20 = (char *)v18;
      }
      else {
        uint64_t v20 = *(char **)v18;
      }
      int v21 = *v20;
      if (*(char *)(v19 + 23) >= 0) {
        uint64_t v22 = (char *)v19;
      }
      else {
        uint64_t v22 = *(char **)v19;
      }
      if (v21 < 0
        || (int v23 = *v22, v23 < 0)
        || ((unsigned int v24 = v21,
             unsigned int v25 = v23,
             unsigned int v26 = (v23 ^ v24) & 0xFFFFFFDF,
             v24 >= 0x40)
          ? (BOOL v27 = v26 == 0)
          : (BOOL v27 = 1),
            v27 || v25 < 0x40))
      {
        uint64_t result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a4, v18, v19);
        if (result) {
          goto LABEL_41;
        }
      }
      else if ((((_BYTE)v24 + 5) & 0x1Fu) < (((_BYTE)v25 + 5) & 0x1Fu))
      {
LABEL_41:
        uint64_t result = 1;
LABEL_107:
        uint64_t v6 = a3;
        goto LABEL_108;
      }
      uint64_t v49 = *v7;
      *unint64_t v7 = *v6;
      *uint64_t v6 = v49;
      if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        uint64_t v50 = (*a3 & 0xFFFFFFFFFFFFFFF8) + 16;
      }
      else
      {
        uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
        uint64_t v50 = result;
        uint64_t v49 = *v6;
      }
      unint64_t v51 = v49 & 0xFFFFFFFFFFFFFFF8;
      if (v51) {
        Emptyunint64_t String = (uint64_t *)(v51 + 16);
      }
      else {
        Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
      }
      if (*(char *)(v50 + 23) >= 0) {
        int v53 = (char *)v50;
      }
      else {
        int v53 = *(char **)v50;
      }
      int v54 = *v53;
      if (*((char *)EmptyString + 23) >= 0) {
        int v55 = (char *)EmptyString;
      }
      else {
        int v55 = (char *)*EmptyString;
      }
      if (v54 < 0
        || (int v56 = *v55, v56 < 0)
        || ((unsigned int v57 = v54,
             unsigned int v58 = v56,
             unsigned int v59 = (v56 ^ v57) & 0xFFFFFFDF,
             v57 >= 0x40)
          ? (BOOL v60 = v59 == 0)
          : (BOOL v60 = 1),
            v60 || v58 < 0x40))
      {
        if (pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a4, v50, (uint64_t)EmptyString))goto LABEL_106; {
      }
        }
      else if ((((_BYTE)v57 + 5) & 0x1Fu) < (((_BYTE)v58 + 5) & 0x1Fu))
      {
LABEL_106:
        uint64_t result = 2;
        unint64_t v7 = v6;
        goto LABEL_107;
      }
      return 1;
    }
  }
  else if ((((_BYTE)v14 + 5) & 0x1Fu) < (((_BYTE)v15 + 5) & 0x1Fu))
  {
    goto LABEL_21;
  }
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v28 = (*a3 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
    uint64_t v28 = result;
  }
  if ((*v6 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v29 = (*v6 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
    uint64_t v29 = result;
  }
  if (*(char *)(v28 + 23) >= 0) {
    unsigned int v30 = (char *)v28;
  }
  else {
    unsigned int v30 = *(char **)v28;
  }
  int v31 = *v30;
  if (*(char *)(v29 + 23) >= 0) {
    unsigned int v32 = (char *)v29;
  }
  else {
    unsigned int v32 = *(char **)v29;
  }
  if ((v31 & 0x80000000) == 0)
  {
    int v33 = *v32;
    if ((v33 & 0x80000000) == 0)
    {
      unsigned int v34 = v31;
      unsigned int v35 = v33;
      unsigned int v36 = (v33 ^ v34) & 0xFFFFFFDF;
      BOOL v37 = v34 < 0x40 || v36 == 0;
      if (!v37 && v35 >= 0x40)
      {
        if ((((_BYTE)v34 + 5) & 0x1Fu) >= (((_BYTE)v35 + 5) & 0x1Fu)) {
          return 0;
        }
LABEL_63:
        uint64_t v38 = *v6;
        *uint64_t v6 = *a3;
        *a3 = v38;
        if ((*v6 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          uint64_t v39 = (*v6 & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else
        {
          uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
          uint64_t v39 = result;
        }
        if ((*v7 & 0xFFFFFFFFFFFFFFF8) != 0) {
          unsigned int v40 = (uint64_t *)((*v7 & 0xFFFFFFFFFFFFFFF8) + 16);
        }
        else {
          unsigned int v40 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
        }
        if (*(char *)(v39 + 23) >= 0) {
          unsigned int v41 = (char *)v39;
        }
        else {
          unsigned int v41 = *(char **)v39;
        }
        int v42 = *v41;
        if (*((char *)v40 + 23) >= 0) {
          uint64_t v43 = (char *)v40;
        }
        else {
          uint64_t v43 = (char *)*v40;
        }
        if (v42 < 0
          || (int v44 = *v43, v44 < 0)
          || ((unsigned int v45 = v42,
               unsigned int v46 = v44,
               unsigned int v47 = (v44 ^ v45) & 0xFFFFFFDF,
               v45 >= 0x40)
            ? (BOOL v48 = v47 == 0)
            : (BOOL v48 = 1),
              v48 || v46 < 0x40))
        {
          if (pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a4, v39, (uint64_t)v40)) {
            goto LABEL_84;
          }
        }
        else if ((((_BYTE)v45 + 5) & 0x1Fu) < (((_BYTE)v46 + 5) & 0x1Fu))
        {
LABEL_84:
          uint64_t result = 2;
LABEL_108:
          uint64_t v61 = *v7;
          *unint64_t v7 = *v6;
          *uint64_t v6 = v61;
          return result;
        }
        return 1;
      }
    }
  }
  uint64_t result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a4, v28, v29);
  if (result) {
    goto LABEL_63;
  }
  return result;
}

uint64_t *sub_21698CB24(uint64_t EmptyString, uint64_t *a2, uint64_t a3)
{
  char v5 = (uint64_t *)EmptyString;
  uint64_t v6 = *(void *)EmptyString;
  *(void *)Emptyunint64_t String = 0;
  unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFF8;
  if ((v6 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v8 = v7 + 16;
  }
  else
  {
    Emptyunint64_t String = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyString);
    uint64_t v8 = EmptyString;
  }
  if ((*(a2 - 1) & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v9 = (*(a2 - 1) & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    Emptyunint64_t String = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyString);
    uint64_t v9 = EmptyString;
  }
  if (*(char *)(v8 + 23) >= 0) {
    uint64_t v10 = (char *)v8;
  }
  else {
    uint64_t v10 = *(char **)v8;
  }
  int v11 = *v10;
  if (*(char *)(v9 + 23) >= 0) {
    int v12 = (char *)v9;
  }
  else {
    int v12 = *(char **)v9;
  }
  if (v11 < 0
    || (int v13 = *v12, v13 < 0)
    || ((unsigned int v14 = v11,
         unsigned int v15 = v13,
         unsigned int v16 = (v13 ^ v14) & 0xFFFFFFDF,
         v14 >= 0x40)
      ? (BOOL v17 = v16 == 0)
      : (BOOL v17 = 1),
        v17 || v15 < 0x40))
  {
    Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, v8, v9);
    if (EmptyString) {
      goto LABEL_21;
    }
  }
  else if ((((_BYTE)v14 + 5) & 0x1Fu) < (((_BYTE)v15 + 5) & 0x1Fu))
  {
LABEL_21:
    for (uint64_t i = v5 + 1; ; ++i)
    {
      uint64_t v19 = v7 + 16;
      if (!v7)
      {
        Emptyunint64_t String = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyString);
        uint64_t v19 = EmptyString;
      }
      if ((*i & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        uint64_t v20 = (*i & 0xFFFFFFFFFFFFFFF8) + 16;
      }
      else
      {
        Emptyunint64_t String = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyString);
        uint64_t v20 = EmptyString;
      }
      if (*(char *)(v19 + 23) >= 0) {
        int v21 = (char *)v19;
      }
      else {
        int v21 = *(char **)v19;
      }
      int v22 = *v21;
      if (*(char *)(v20 + 23) >= 0) {
        int v23 = (char *)v20;
      }
      else {
        int v23 = *(char **)v20;
      }
      if (v22 < 0
        || (int v24 = *v23, v24 < 0)
        || ((unsigned int v25 = v22,
             unsigned int v26 = v24,
             unsigned int v27 = (v24 ^ v25) & 0xFFFFFFDF,
             v25 >= 0x40)
          ? (BOOL v28 = v27 == 0)
          : (BOOL v28 = 1),
            v28 || v26 < 0x40))
      {
        Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, v19, v20);
        if (EmptyString) {
          goto LABEL_68;
        }
      }
      else if ((((_BYTE)v25 + 5) & 0x1Fu) < (((_BYTE)v26 + 5) & 0x1Fu))
      {
        goto LABEL_68;
      }
    }
  }
  for (uint64_t i = v5 + 1; i < a2; ++i)
  {
    uint64_t v29 = v7 + 16;
    if (!v7)
    {
      Emptyunint64_t String = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyString);
      uint64_t v29 = EmptyString;
    }
    if ((*i & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      uint64_t v30 = (*i & 0xFFFFFFFFFFFFFFF8) + 16;
    }
    else
    {
      Emptyunint64_t String = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyString);
      uint64_t v30 = EmptyString;
    }
    if (*(char *)(v29 + 23) >= 0) {
      int v31 = (char *)v29;
    }
    else {
      int v31 = *(char **)v29;
    }
    int v32 = *v31;
    if (*(char *)(v30 + 23) >= 0) {
      int v33 = (char *)v30;
    }
    else {
      int v33 = *(char **)v30;
    }
    if (v32 < 0
      || (int v34 = *v33, v34 < 0)
      || ((unsigned int v35 = v32,
           unsigned int v36 = v34,
           unsigned int v37 = (v34 ^ v35) & 0xFFFFFFDF,
           v35 >= 0x40)
        ? (BOOL v38 = v37 == 0)
        : (BOOL v38 = 1),
          v38 || v36 < 0x40))
    {
      Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, v29, v30);
      if (EmptyString) {
        break;
      }
    }
    else if ((((_BYTE)v35 + 5) & 0x1Fu) < (((_BYTE)v36 + 5) & 0x1Fu))
    {
      break;
    }
  }
LABEL_68:
  if (i < a2)
  {
    do
    {
      while (1)
      {
        --a2;
        uint64_t v39 = v7 + 16;
        if (!v7)
        {
          Emptyunint64_t String = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyString);
          uint64_t v39 = EmptyString;
        }
        if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          uint64_t v40 = (*a2 & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else
        {
          Emptyunint64_t String = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyString);
          uint64_t v40 = EmptyString;
        }
        unsigned int v41 = *(char *)(v39 + 23) >= 0 ? (char *)v39 : *(char **)v39;
        int v42 = *v41;
        uint64_t v43 = *(char *)(v40 + 23) >= 0 ? (char *)v40 : *(char **)v40;
        if (v42 < 0) {
          break;
        }
        int v44 = *v43;
        if (v44 < 0) {
          break;
        }
        unsigned int v45 = v42;
        unsigned int v46 = v44;
        unsigned int v47 = (v44 ^ v45) & 0xFFFFFFDF;
        BOOL v48 = v45 < 0x40 || v47 == 0;
        if (v48 || v46 < 0x40) {
          break;
        }
        if ((((_BYTE)v45 + 5) & 0x1Fu) >= (((_BYTE)v46 + 5) & 0x1Fu)) {
          goto LABEL_90;
        }
      }
      Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, v39, v40);
    }
    while (EmptyString);
  }
LABEL_90:
  if (i >= a2) {
    goto LABEL_135;
  }
  do
  {
    uint64_t v49 = *i;
    *i++ = *a2;
    *a2 = v49;
    while (1)
    {
      uint64_t v50 = v7 + 16;
      if (!v7)
      {
        Emptyunint64_t String = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyString);
        uint64_t v50 = EmptyString;
      }
      if ((*i & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        uint64_t v51 = (*i & 0xFFFFFFFFFFFFFFF8) + 16;
      }
      else
      {
        Emptyunint64_t String = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyString);
        uint64_t v51 = EmptyString;
      }
      uint64_t v52 = *(char *)(v50 + 23) >= 0 ? (char *)v50 : *(char **)v50;
      int v53 = *v52;
      int v54 = *(char *)(v51 + 23) >= 0 ? (char *)v51 : *(char **)v51;
      if (v53 < 0) {
        break;
      }
      int v55 = *v54;
      if (v55 < 0) {
        break;
      }
      unsigned int v56 = v53;
      unsigned int v57 = v55;
      unsigned int v58 = (v55 ^ v56) & 0xFFFFFFDF;
      BOOL v59 = v56 < 0x40 || v58 == 0;
      if (v59 || v57 < 0x40) {
        break;
      }
      if ((((_BYTE)v56 + 5) & 0x1Fu) < (((_BYTE)v57 + 5) & 0x1Fu)) {
        goto LABEL_113;
      }
LABEL_111:
      ++i;
    }
    Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, v50, v51);
    if ((EmptyString & 1) == 0) {
      goto LABEL_111;
    }
    do
    {
      while (1)
      {
LABEL_113:
        --a2;
        uint64_t v60 = v7 + 16;
        if (!v7)
        {
          Emptyunint64_t String = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyString);
          uint64_t v60 = EmptyString;
        }
        if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          uint64_t v61 = (*a2 & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else
        {
          Emptyunint64_t String = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyString);
          uint64_t v61 = EmptyString;
        }
        long long v62 = *(char *)(v60 + 23) >= 0 ? (char *)v60 : *(char **)v60;
        int v63 = *v62;
        long long v64 = *(char *)(v61 + 23) >= 0 ? (char *)v61 : *(char **)v61;
        if (v63 < 0) {
          break;
        }
        int v65 = *v64;
        if (v65 < 0) {
          break;
        }
        unsigned int v66 = v63;
        unsigned int v67 = v65;
        unsigned int v68 = (v65 ^ v66) & 0xFFFFFFDF;
        BOOL v69 = v66 < 0x40 || v68 == 0;
        if (v69 || v67 < 0x40) {
          break;
        }
        if ((((_BYTE)v66 + 5) & 0x1Fu) >= (((_BYTE)v67 + 5) & 0x1Fu)) {
          goto LABEL_134;
        }
      }
      Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, v60, v61);
    }
    while (EmptyString);
LABEL_134:
    ;
  }
  while (i < a2);
LABEL_135:
  unsigned int v70 = i - 1;
  uint64_t v71 = *v5;
  uint64_t v72 = *v5 & 7;
  if (i - 1 == v5)
  {
    if (v72) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v71 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    if (v72) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v71 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    *char v5 = *v70;
    *unsigned int v70 = 0;
  }
  *(i - 1) = v6;
  return i;
}

void sub_21698D02C(_Unwind_Exception *a1)
{
  if ((v1 & 7) != 0) {
    atomic_fetch_add_explicit(v2, 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_21698D054(uint64_t EmptyString, uint64_t *a2, uint64_t a3)
{
  char v5 = (uint64_t *)EmptyString;
  uint64_t v6 = 0;
  uint64_t v7 = *(void *)EmptyString;
  *(void *)Emptyunint64_t String = 0;
  unint64_t v8 = v7 & 0xFFFFFFFFFFFFFFF8;
  while (1)
  {
    if ((v5[v6 + 1] & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      uint64_t v9 = (v5[v6 + 1] & 0xFFFFFFFFFFFFFFF8) + 16;
    }
    else
    {
      Emptyunint64_t String = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyString);
      uint64_t v9 = EmptyString;
    }
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 16;
    if (!v8)
    {
      Emptyunint64_t String = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyString);
      uint64_t v10 = EmptyString;
    }
    int v11 = *(char *)(v9 + 23) >= 0 ? (char *)v9 : *(char **)v9;
    int v12 = *v11;
    int v13 = *(char *)(v10 + 23) >= 0 ? (char *)v10 : *(char **)v10;
    if (v12 < 0) {
      break;
    }
    int v14 = *v13;
    if (v14 < 0) {
      break;
    }
    unsigned int v15 = v12;
    unsigned int v16 = v14;
    unsigned int v17 = (v14 ^ v15) & 0xFFFFFFDF;
    BOOL v18 = v15 < 0x40 || v17 == 0;
    if (v18 || v16 < 0x40) {
      break;
    }
    if ((((_BYTE)v15 + 5) & 0x1Fu) >= (((_BYTE)v16 + 5) & 0x1Fu)) {
      goto LABEL_23;
    }
LABEL_21:
    ++v6;
  }
  Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, v9, v10);
  if (EmptyString) {
    goto LABEL_21;
  }
LABEL_23:
  uint64_t v19 = &v5[v6];
  unint64_t v20 = (unint64_t)&v5[v6 + 1];
  if (v6 * 8)
  {
    do
    {
      while (1)
      {
        uint64_t v21 = *--a2;
        unint64_t v22 = v21 & 0xFFFFFFFFFFFFFFF8;
        if ((v21 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          uint64_t v23 = v22 + 16;
        }
        else
        {
          Emptyunint64_t String = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyString);
          uint64_t v23 = EmptyString;
        }
        uint64_t v24 = (v7 & 0xFFFFFFFFFFFFFFF8) + 16;
        if (!v8)
        {
          Emptyunint64_t String = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyString);
          uint64_t v24 = EmptyString;
        }
        unsigned int v25 = *(char *)(v23 + 23) >= 0 ? (char *)v23 : *(char **)v23;
        int v26 = *v25;
        unsigned int v27 = *(char *)(v24 + 23) >= 0 ? (char *)v24 : *(char **)v24;
        if (v26 < 0) {
          break;
        }
        int v28 = *v27;
        if (v28 < 0) {
          break;
        }
        unsigned int v29 = v26;
        unsigned int v30 = v28;
        unsigned int v31 = (v28 ^ v29) & 0xFFFFFFDF;
        BOOL v32 = v29 < 0x40 || v31 == 0;
        if (v32 || v30 < 0x40) {
          break;
        }
        if ((((_BYTE)v29 + 5) & 0x1Fu) < (((_BYTE)v30 + 5) & 0x1Fu)) {
          goto LABEL_75;
        }
      }
      Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, v23, v24);
    }
    while ((EmptyString & 1) == 0);
  }
  else if (v20 < (unint64_t)a2)
  {
    do
    {
      while (1)
      {
        uint64_t v33 = *--a2;
        unint64_t v34 = v33 & 0xFFFFFFFFFFFFFFF8;
        if ((v33 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          uint64_t v35 = v34 + 16;
        }
        else
        {
          Emptyunint64_t String = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyString);
          uint64_t v35 = EmptyString;
        }
        uint64_t v36 = (v7 & 0xFFFFFFFFFFFFFFF8) + 16;
        if (!v8)
        {
          Emptyunint64_t String = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyString);
          uint64_t v36 = EmptyString;
        }
        unsigned int v37 = *(char *)(v35 + 23) >= 0 ? (char *)v35 : *(char **)v35;
        int v38 = *v37;
        uint64_t v39 = *(char *)(v36 + 23) >= 0 ? (char *)v36 : *(char **)v36;
        if (v38 < 0) {
          break;
        }
        int v40 = *v39;
        if (v40 < 0) {
          break;
        }
        unsigned int v41 = v38;
        unsigned int v42 = v40;
        unsigned int v43 = (v40 ^ v41) & 0xFFFFFFDF;
        BOOL v44 = v41 < 0x40 || v43 == 0;
        if (v44 || v42 < 0x40) {
          break;
        }
        if ((((_BYTE)v41 + 5) & 0x1Fu) < (((_BYTE)v42 + 5) & 0x1Fu) || v20 >= (unint64_t)a2) {
          goto LABEL_75;
        }
      }
      Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, v35, v36);
      if (v20 >= (unint64_t)a2) {
        char v46 = 1;
      }
      else {
        char v46 = EmptyString;
      }
    }
    while ((v46 & 1) == 0);
  }
LABEL_75:
  if (v20 >= (unint64_t)a2) {
    goto LABEL_122;
  }
  unsigned int v47 = (uint64_t *)v20;
  BOOL v48 = a2;
  while (2)
  {
    uint64_t v49 = *v47;
    *v47++ = *v48;
    *BOOL v48 = v49;
    while (2)
    {
      if ((*v47 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        uint64_t v50 = (*v47 & 0xFFFFFFFFFFFFFFF8) + 16;
      }
      else
      {
        Emptyunint64_t String = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyString);
        uint64_t v50 = EmptyString;
      }
      uint64_t v51 = (v7 & 0xFFFFFFFFFFFFFFF8) + 16;
      if (!v8)
      {
        Emptyunint64_t String = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyString);
        uint64_t v51 = EmptyString;
      }
      if (*(char *)(v50 + 23) >= 0) {
        uint64_t v52 = (char *)v50;
      }
      else {
        uint64_t v52 = *(char **)v50;
      }
      int v53 = *v52;
      if (*(char *)(v51 + 23) >= 0) {
        int v54 = (char *)v51;
      }
      else {
        int v54 = *(char **)v51;
      }
      if ((v53 & 0x80000000) == 0)
      {
        int v55 = *v54;
        if ((v55 & 0x80000000) == 0)
        {
          unsigned int v56 = v53;
          unsigned int v57 = v55;
          unsigned int v58 = (v55 ^ v56) & 0xFFFFFFDF;
          BOOL v59 = v56 < 0x40 || v58 == 0;
          if (!v59 && v57 >= 0x40)
          {
            if ((((_BYTE)v56 + 5) & 0x1Fu) >= (((_BYTE)v57 + 5) & 0x1Fu)) {
              goto LABEL_99;
            }
            goto LABEL_97;
          }
        }
      }
      Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, v50, v51);
      if (EmptyString)
      {
LABEL_97:
        ++v47;
        continue;
      }
      break;
    }
    do
    {
      while (1)
      {
LABEL_99:
        uint64_t v60 = *--v48;
        unint64_t v61 = v60 & 0xFFFFFFFFFFFFFFF8;
        if ((v60 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          uint64_t v62 = v61 + 16;
        }
        else
        {
          Emptyunint64_t String = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyString);
          uint64_t v62 = EmptyString;
        }
        uint64_t v63 = (v7 & 0xFFFFFFFFFFFFFFF8) + 16;
        if (!v8)
        {
          Emptyunint64_t String = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyString);
          uint64_t v63 = EmptyString;
        }
        long long v64 = *(char *)(v62 + 23) >= 0 ? (char *)v62 : *(char **)v62;
        int v65 = *v64;
        unsigned int v66 = *(char *)(v63 + 23) >= 0 ? (char *)v63 : *(char **)v63;
        if (v65 < 0) {
          break;
        }
        int v67 = *v66;
        if (v67 < 0) {
          break;
        }
        unsigned int v68 = v65;
        unsigned int v69 = v67;
        unsigned int v70 = (v67 ^ v68) & 0xFFFFFFDF;
        BOOL v71 = v68 < 0x40 || v70 == 0;
        if (v71 || v69 < 0x40) {
          break;
        }
        if ((((_BYTE)v68 + 5) & 0x1Fu) < (((_BYTE)v69 + 5) & 0x1Fu)) {
          goto LABEL_120;
        }
      }
      Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, v62, v63);
    }
    while ((EmptyString & 1) == 0);
LABEL_120:
    if (v47 < v48) {
      continue;
    }
    break;
  }
  uint64_t v19 = v47 - 1;
LABEL_122:
  uint64_t v72 = *v5;
  uint64_t v73 = *v5 & 7;
  if (v19 == v5)
  {
    if (v73) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v72 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    if (v73) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v72 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    *char v5 = *v19;
    *uint64_t v19 = 0;
  }
  *uint64_t v19 = v7;
  return v19;
}

void sub_21698D4B8(_Unwind_Exception *a1)
{
  if ((v1 & 7) != 0) {
    atomic_fetch_add_explicit(v2, 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_21698D4DC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  char v4 = a2;
  uint64_t v6 = a2 - a1;
  uint64_t result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if ((*(a2 - 1) & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        uint64_t v8 = (*(a2 - 1) & 0xFFFFFFFFFFFFFFF8) + 16;
      }
      else
      {
        uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)1);
        uint64_t v8 = result;
      }
      if ((*a1 & 0xFFFFFFFFFFFFFFF8) != 0) {
        Emptyunint64_t String = (uint64_t *)((*a1 & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
      }
      if (*(char *)(v8 + 23) >= 0) {
        uint64_t v39 = (char *)v8;
      }
      else {
        uint64_t v39 = *(char **)v8;
      }
      int v40 = *v39;
      if (*((char *)EmptyString + 23) >= 0) {
        unsigned int v41 = (char *)EmptyString;
      }
      else {
        unsigned int v41 = (char *)*EmptyString;
      }
      if ((v40 & 0x80000000) == 0)
      {
        int v42 = *v41;
        if ((v42 & 0x80000000) == 0)
        {
          unsigned int v43 = v40;
          unsigned int v44 = v42;
          unsigned int v45 = (v42 ^ v43) & 0xFFFFFFDF;
          BOOL v46 = v43 < 0x40 || v45 == 0;
          if (!v46 && v44 >= 0x40)
          {
            if ((((_BYTE)v43 + 5) & 0x1Fu) >= (((_BYTE)v44 + 5) & 0x1Fu)) {
              return 1;
            }
            goto LABEL_83;
          }
        }
      }
      if (pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, v8, (uint64_t)EmptyString))
      {
LABEL_83:
        uint64_t v47 = *a1;
        *a1 = *(v4 - 1);
        *(v4 - 1) = v47;
      }
      return 1;
    case 3:
      sub_21698C700((uint64_t)a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_21698D908(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_21698DBA8(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      uint64_t v9 = a1 + 2;
      uint64_t v10 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_21698C700((uint64_t)a1, a1 + 1, a1 + 2, a3);
      int v11 = a1 + 3;
      if (a1 + 3 == v4) {
        return 1;
      }
      BOOL v48 = v4;
      uint64_t v12 = 0;
      int v13 = 0;
      while (2)
      {
        if ((*v11 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          uint64_t v14 = (*v11 & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else
        {
          uint64_t v10 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v10);
          uint64_t v14 = (uint64_t)v10;
        }
        if ((*v9 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          uint64_t v15 = (*v9 & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else
        {
          uint64_t v10 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v10);
          uint64_t v15 = (uint64_t)v10;
        }
        if (*(char *)(v14 + 23) >= 0) {
          unsigned int v16 = (char *)v14;
        }
        else {
          unsigned int v16 = *(char **)v14;
        }
        int v17 = *v16;
        if (*(char *)(v15 + 23) >= 0) {
          BOOL v18 = (char *)v15;
        }
        else {
          BOOL v18 = *(char **)v15;
        }
        if (v17 < 0
          || (int v19 = *v18, v19 < 0)
          || ((unsigned int v20 = v17,
               unsigned int v21 = v19,
               unsigned int v22 = (v19 ^ v20) & 0xFFFFFFDF,
               v20 >= 0x40)
            ? (BOOL v23 = v22 == 0)
            : (BOOL v23 = 1),
              v23 || v21 < 0x40))
        {
          uint64_t v10 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, v14, v15);
          if (!v10) {
            goto LABEL_58;
          }
        }
        else if ((((_BYTE)v20 + 5) & 0x1Fu) >= (((_BYTE)v21 + 5) & 0x1Fu))
        {
          goto LABEL_58;
        }
        uint64_t v24 = *v11;
        uint64_t *v11 = 0;
        for (uint64_t i = v12; ; i -= 8)
        {
          int v26 = (uint64_t *)((char *)a1 + i + 24);
          unsigned int v27 = (uint64_t *)((char *)a1 + i + 16);
          if (v27 != v26)
          {
            if ((*v26 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(*v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            *int v26 = *v27;
            void *v27 = 0;
          }
          if (i == -16) {
            break;
          }
          uint64_t v28 = (v24 & 0xFFFFFFFFFFFFFFF8) + 16;
          if ((v24 & 0xFFFFFFFFFFFFFFF8) == 0)
          {
            uint64_t v10 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v10);
            uint64_t v28 = (uint64_t)v10;
          }
          if ((*(uint64_t *)((char *)a1 + i + 8) & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            uint64_t v29 = (*(uint64_t *)((char *)a1 + i + 8) & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          else
          {
            uint64_t v10 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v10);
            uint64_t v29 = (uint64_t)v10;
          }
          if (*(char *)(v28 + 23) >= 0) {
            unsigned int v30 = (char *)v28;
          }
          else {
            unsigned int v30 = *(char **)v28;
          }
          int v31 = *v30;
          if (*(char *)(v29 + 23) >= 0) {
            BOOL v32 = (char *)v29;
          }
          else {
            BOOL v32 = *(char **)v29;
          }
          if (v31 < 0
            || (int v33 = *v32, v33 < 0)
            || ((unsigned int v34 = v31,
                 unsigned int v35 = v33,
                 unsigned int v36 = (v33 ^ v34) & 0xFFFFFFDF,
                 v34 >= 0x40)
              ? (BOOL v37 = v36 == 0)
              : (BOOL v37 = 1),
                v37 || v35 < 0x40))
          {
            uint64_t v10 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, v28, v29);
            if (!v10)
            {
              uint64_t v9 = (uint64_t *)((char *)a1 + i + 16);
              goto LABEL_55;
            }
          }
          else if ((((_BYTE)v34 + 5) & 0x1Fu) >= (((_BYTE)v35 + 5) & 0x1Fu))
          {
            goto LABEL_55;
          }
          --v9;
        }
        uint64_t v9 = a1;
LABEL_55:
        char v4 = v48;
        if ((*v9 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        uint64_t *v9 = v24;
        if (++v13 != 8)
        {
LABEL_58:
          uint64_t v9 = v11;
          v12 += 8;
          if (++v11 == v4) {
            return 1;
          }
          continue;
        }
        return v11 + 1 == v48;
      }
  }
}

pxrInternal__aapl__pxrReserved__::TfToken *sub_21698D908(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t result = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_21698C700((uint64_t)a1, a2, a3, a5);
  if ((*a4 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v11 = (*a4 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    uint64_t result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    uint64_t v11 = (uint64_t)result;
  }
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v12 = (*a3 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    uint64_t result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    uint64_t v12 = (uint64_t)result;
  }
  if (*(char *)(v11 + 23) >= 0) {
    int v13 = (char *)v11;
  }
  else {
    int v13 = *(char **)v11;
  }
  int v14 = *v13;
  if (*(char *)(v12 + 23) >= 0) {
    uint64_t v15 = (char *)v12;
  }
  else {
    uint64_t v15 = *(char **)v12;
  }
  if (v14 < 0
    || (int v16 = *v15, v16 < 0)
    || ((unsigned int v17 = v14,
         unsigned int v18 = v16,
         unsigned int v19 = (v16 ^ v17) & 0xFFFFFFDF,
         v17 >= 0x40)
      ? (BOOL v20 = v19 == 0)
      : (BOOL v20 = 1),
        v20 || v18 < 0x40))
  {
    uint64_t result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a5, v11, v12);
    if (!result) {
      return result;
    }
  }
  else if ((((_BYTE)v17 + 5) & 0x1Fu) >= (((_BYTE)v18 + 5) & 0x1Fu))
  {
    return result;
  }
  uint64_t v21 = *a3;
  *a3 = *a4;
  *a4 = v21;
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v22 = (*a3 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    uint64_t result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    uint64_t v22 = (uint64_t)result;
  }
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v23 = (*a2 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    uint64_t result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    uint64_t v23 = (uint64_t)result;
  }
  if (*(char *)(v22 + 23) >= 0) {
    uint64_t v24 = (char *)v22;
  }
  else {
    uint64_t v24 = *(char **)v22;
  }
  int v25 = *v24;
  if (*(char *)(v23 + 23) >= 0) {
    int v26 = (char *)v23;
  }
  else {
    int v26 = *(char **)v23;
  }
  if (v25 < 0
    || (int v27 = *v26, v27 < 0)
    || ((unsigned int v28 = v25,
         unsigned int v29 = v27,
         unsigned int v30 = (v27 ^ v28) & 0xFFFFFFDF,
         v28 >= 0x40)
      ? (BOOL v31 = v30 == 0)
      : (BOOL v31 = 1),
        v31 || v29 < 0x40))
  {
    uint64_t result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a5, v22, v23);
    if (!result) {
      return result;
    }
  }
  else if ((((_BYTE)v28 + 5) & 0x1Fu) >= (((_BYTE)v29 + 5) & 0x1Fu))
  {
    return result;
  }
  uint64_t v32 = *a2;
  *a2 = *a3;
  *a3 = v32;
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v33 = (*a2 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    uint64_t result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    uint64_t v33 = (uint64_t)result;
  }
  if ((*a1 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v34 = (*a1 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    uint64_t result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    uint64_t v34 = (uint64_t)result;
  }
  if (*(char *)(v33 + 23) >= 0) {
    unsigned int v35 = (char *)v33;
  }
  else {
    unsigned int v35 = *(char **)v33;
  }
  int v36 = *v35;
  if (*(char *)(v34 + 23) >= 0) {
    BOOL v37 = (char *)v34;
  }
  else {
    BOOL v37 = *(char **)v34;
  }
  if (v36 < 0
    || (int v38 = *v37, v38 < 0)
    || v36 < 0x40u
    || ((v38 ^ v36) & 0xFFFFFFDF) == 0
    || v38 < 0x40u)
  {
    uint64_t result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a5, v33, v34);
    if (!result) {
      return result;
    }
  }
  else if ((((_BYTE)v36 + 5) & 0x1Fu) >= (((_BYTE)v38 + 5) & 0x1Fu))
  {
    return result;
  }
  uint64_t v39 = *a1;
  *a1 = *a2;
  *a2 = v39;
  return result;
}

pxrInternal__aapl__pxrReserved__::TfToken *sub_21698DBA8(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  uint64_t result = sub_21698D908(a1, a2, a3, a4, a6);
  if ((*a5 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v13 = (*a5 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    uint64_t result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    uint64_t v13 = (uint64_t)result;
  }
  if ((*a4 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v14 = (*a4 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    uint64_t result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    uint64_t v14 = (uint64_t)result;
  }
  if (*(char *)(v13 + 23) >= 0) {
    uint64_t v15 = (char *)v13;
  }
  else {
    uint64_t v15 = *(char **)v13;
  }
  int v16 = *v15;
  if (*(char *)(v14 + 23) >= 0) {
    unsigned int v17 = (char *)v14;
  }
  else {
    unsigned int v17 = *(char **)v14;
  }
  if (v16 < 0
    || (int v18 = *v17, v18 < 0)
    || ((unsigned int v19 = v16,
         unsigned int v20 = v18,
         unsigned int v21 = (v18 ^ v19) & 0xFFFFFFDF,
         v19 >= 0x40)
      ? (BOOL v22 = v21 == 0)
      : (BOOL v22 = 1),
        v22 || v20 < 0x40))
  {
    uint64_t result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a6, v13, v14);
    if (!result) {
      return result;
    }
  }
  else if ((((_BYTE)v19 + 5) & 0x1Fu) >= (((_BYTE)v20 + 5) & 0x1Fu))
  {
    return result;
  }
  uint64_t v23 = *a4;
  *a4 = *a5;
  *a5 = v23;
  if ((*a4 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v24 = (*a4 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    uint64_t result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    uint64_t v24 = (uint64_t)result;
  }
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v25 = (*a3 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    uint64_t result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    uint64_t v25 = (uint64_t)result;
  }
  if (*(char *)(v24 + 23) >= 0) {
    int v26 = (char *)v24;
  }
  else {
    int v26 = *(char **)v24;
  }
  int v27 = *v26;
  if (*(char *)(v25 + 23) >= 0) {
    unsigned int v28 = (char *)v25;
  }
  else {
    unsigned int v28 = *(char **)v25;
  }
  if (v27 < 0
    || (int v29 = *v28, v29 < 0)
    || ((unsigned int v30 = v27,
         unsigned int v31 = v29,
         unsigned int v32 = (v29 ^ v30) & 0xFFFFFFDF,
         v30 >= 0x40)
      ? (BOOL v33 = v32 == 0)
      : (BOOL v33 = 1),
        v33 || v31 < 0x40))
  {
    uint64_t result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a6, v24, v25);
    if (!result) {
      return result;
    }
  }
  else if ((((_BYTE)v30 + 5) & 0x1Fu) >= (((_BYTE)v31 + 5) & 0x1Fu))
  {
    return result;
  }
  uint64_t v34 = *a3;
  *a3 = *a4;
  *a4 = v34;
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v35 = (*a3 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    uint64_t result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    uint64_t v35 = (uint64_t)result;
  }
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v36 = (*a2 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    uint64_t result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    uint64_t v36 = (uint64_t)result;
  }
  if (*(char *)(v35 + 23) >= 0) {
    BOOL v37 = (char *)v35;
  }
  else {
    BOOL v37 = *(char **)v35;
  }
  int v38 = *v37;
  if (*(char *)(v36 + 23) >= 0) {
    uint64_t v39 = (char *)v36;
  }
  else {
    uint64_t v39 = *(char **)v36;
  }
  if (v38 < 0
    || (int v40 = *v39, v40 < 0)
    || v38 < 0x40u
    || ((v40 ^ v38) & 0xFFFFFFDF) == 0
    || v40 < 0x40u)
  {
    uint64_t result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a6, v35, v36);
    if (!result) {
      return result;
    }
  }
  else if ((((_BYTE)v38 + 5) & 0x1Fu) >= (((_BYTE)v40 + 5) & 0x1Fu))
  {
    return result;
  }
  uint64_t v41 = *a2;
  *a2 = *a3;
  *a3 = v41;
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v42 = (*a2 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    uint64_t result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    uint64_t v42 = (uint64_t)result;
  }
  if ((*a1 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v43 = (*a1 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    uint64_t result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(result);
    uint64_t v43 = (uint64_t)result;
  }
  if (*(char *)(v42 + 23) >= 0) {
    unsigned int v44 = (char *)v42;
  }
  else {
    unsigned int v44 = *(char **)v42;
  }
  int v45 = *v44;
  if (*(char *)(v43 + 23) >= 0) {
    BOOL v46 = (char *)v43;
  }
  else {
    BOOL v46 = *(char **)v43;
  }
  if (v45 < 0
    || (int v47 = *v46, v47 < 0)
    || v45 < 0x40u
    || ((v47 ^ v45) & 0xFFFFFFDF) == 0
    || v47 < 0x40u)
  {
    uint64_t result = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a6, v42, v43);
    if (!result) {
      return result;
    }
  }
  else if ((((_BYTE)v45 + 5) & 0x1Fu) >= (((_BYTE)v47 + 5) & 0x1Fu))
  {
    return result;
  }
  uint64_t v48 = *a1;
  *a1 = *a2;
  *a2 = v48;
  return result;
}

uint64_t *sub_21698DF1C(pxrInternal__aapl__pxrReserved__::TfToken *EmptyString, char *a2, uint64_t *a3, uint64_t a4)
{
  if (EmptyString != (pxrInternal__aapl__pxrReserved__::TfToken *)a2)
  {
    uint64_t v7 = (uint64_t *)EmptyString;
    uint64_t v8 = a2 - (char *)EmptyString;
    uint64_t v9 = (a2 - (char *)EmptyString) >> 3;
    if (a2 - (char *)EmptyString >= 9)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = (uint64_t *)((char *)EmptyString + 8 * v10);
      do
      {
        Emptyunint64_t String = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_21698E15C((uint64_t)v7, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = (uint64_t *)a2;
    if (a2 != (char *)a3)
    {
      uint64_t v14 = (uint64_t *)a2;
      while (1)
      {
        if ((*v14 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          uint64_t v15 = (*v14 & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else
        {
          Emptyunint64_t String = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
          uint64_t v15 = (uint64_t)EmptyString;
        }
        if ((*v7 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          uint64_t v16 = (*v7 & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else
        {
          Emptyunint64_t String = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
          uint64_t v16 = (uint64_t)EmptyString;
        }
        unsigned int v17 = *(char *)(v15 + 23) >= 0 ? (char *)v15 : *(char **)v15;
        int v18 = *v17;
        unsigned int v19 = *(char *)(v16 + 23) >= 0 ? (char *)v16 : *(char **)v16;
        if (v18 < 0) {
          break;
        }
        int v20 = *v19;
        if (v20 < 0) {
          break;
        }
        unsigned int v21 = v18;
        unsigned int v22 = v20;
        unsigned int v23 = (v20 ^ v21) & 0xFFFFFFDF;
        BOOL v24 = v21 < 0x40 || v23 == 0;
        if (v24 || v22 < 0x40) {
          break;
        }
        if ((((_BYTE)v21 + 5) & 0x1Fu) < (((_BYTE)v22 + 5) & 0x1Fu)) {
          goto LABEL_27;
        }
LABEL_28:
        if (++v14 == a3)
        {
          uint64_t v13 = a3;
          goto LABEL_32;
        }
      }
      Emptyunint64_t String = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a4, v15, v16);
      if (!EmptyString) {
        goto LABEL_28;
      }
LABEL_27:
      uint64_t v25 = *v14;
      uint64_t *v14 = *v7;
      *uint64_t v7 = v25;
      Emptyunint64_t String = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_21698E15C((uint64_t)v7, a4, v9, v7);
      goto LABEL_28;
    }
LABEL_32:
    if (v8 >= 9)
    {
      uint64_t v26 = (unint64_t)v8 >> 3;
      int v27 = (uint64_t *)(a2 - 8);
      do
      {
        uint64_t v28 = *v7;
        *uint64_t v7 = 0;
        int v29 = sub_21698E584((pxrInternal__aapl__pxrReserved__::TfToken *)v7, a4, v26);
        uint64_t v30 = *(void *)v29;
        uint64_t v31 = *(void *)v29 & 7;
        if (v27 == (uint64_t *)v29)
        {
          if (v31) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          *(void *)int v29 = v28;
        }
        else
        {
          if (v31) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          *(void *)int v29 = *v27;
          uint64_t *v27 = v28;
          sub_21698E708((uint64_t)v7, (uint64_t)v29 + 8, a4, ((pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v29 + 8)- (pxrInternal__aapl__pxrReserved__::TfToken *)v7) >> 3);
        }
        --v27;
      }
      while (v26-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_21698E15C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 < 2) {
    return result;
  }
  char v5 = a4;
  uint64_t v6 = result;
  uint64_t v61 = v4 >> 1;
  if ((uint64_t)(v4 >> 1) < ((uint64_t)a4 - result) >> 3) {
    return result;
  }
  uint64_t v9 = ((uint64_t)a4 - result) >> 2;
  uint64_t v10 = v9 + 1;
  unint64_t v11 = (uint64_t *)(result + 8 * (v9 + 1));
  uint64_t v12 = v9 + 2;
  if (v9 + 2 >= a3) {
    goto LABEL_25;
  }
  if ((*v11 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v13 = (*v11 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
    uint64_t v13 = result;
  }
  if ((v11[1] & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v14 = (v11[1] & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
    uint64_t v14 = result;
  }
  if (*(char *)(v13 + 23) >= 0) {
    uint64_t v15 = (char *)v13;
  }
  else {
    uint64_t v15 = *(char **)v13;
  }
  int v16 = *v15;
  if (*(char *)(v14 + 23) >= 0) {
    unsigned int v17 = (char *)v14;
  }
  else {
    unsigned int v17 = *(char **)v14;
  }
  if (v16 < 0
    || (int v18 = *v17, v18 < 0)
    || ((unsigned int v19 = v16,
         unsigned int v20 = v18,
         unsigned int v21 = (v18 ^ v19) & 0xFFFFFFDF,
         v19 >= 0x40)
      ? (BOOL v22 = v21 == 0)
      : (BOOL v22 = 1),
        v22 || v20 < 0x40))
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a2, v13, v14);
    if (!result) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if ((((_BYTE)v19 + 5) & 0x1Fu) < (((_BYTE)v20 + 5) & 0x1Fu))
  {
LABEL_24:
    ++v11;
    uint64_t v10 = v12;
  }
LABEL_25:
  if ((*v11 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v23 = (*v11 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
    uint64_t v23 = result;
  }
  if ((*v5 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v24 = (*v5 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
    uint64_t v24 = result;
  }
  if (*(char *)(v23 + 23) >= 0) {
    uint64_t v25 = (char *)v23;
  }
  else {
    uint64_t v25 = *(char **)v23;
  }
  int v26 = *v25;
  if (*(char *)(v24 + 23) >= 0) {
    int v27 = (char *)v24;
  }
  else {
    int v27 = *(char **)v24;
  }
  if (v26 < 0
    || (int v28 = *v27, v28 < 0)
    || ((unsigned int v29 = v26,
         unsigned int v30 = v28,
         unsigned int v31 = (v28 ^ v29) & 0xFFFFFFDF,
         v29 >= 0x40)
      ? (BOOL v32 = v31 == 0)
      : (BOOL v32 = 1),
        v32 || v30 < 0x40))
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a2, v23, v24);
    if (result) {
      return result;
    }
  }
  else if ((((_BYTE)v29 + 5) & 0x1Fu) < (((_BYTE)v30 + 5) & 0x1Fu))
  {
    return result;
  }
  uint64_t v33 = *v5;
  *char v5 = 0;
  uint64_t v59 = a2;
  uint64_t v60 = v33;
  unint64_t v34 = v33 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v35 = (v33 & 0xFFFFFFFFFFFFFFF8) + 16;
  while (1)
  {
    uint64_t v36 = v11;
    if (v11 != v5)
    {
      if ((*v5 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      *char v5 = *v11;
      uint64_t *v11 = 0;
    }
    if (v61 < v10) {
      break;
    }
    uint64_t v37 = 2 * v10;
    uint64_t v10 = (2 * v10) | 1;
    unint64_t v11 = (uint64_t *)(v6 + 8 * v10);
    uint64_t v38 = v37 + 2;
    if (v37 + 2 < a3)
    {
      if ((*v11 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        uint64_t v39 = (*v11 & 0xFFFFFFFFFFFFFFF8) + 16;
      }
      else
      {
        uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
        uint64_t v39 = result;
      }
      if ((v11[1] & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        uint64_t v40 = (v11[1] & 0xFFFFFFFFFFFFFFF8) + 16;
      }
      else
      {
        uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
        uint64_t v40 = result;
      }
      if (*(char *)(v39 + 23) >= 0) {
        uint64_t v41 = (char *)v39;
      }
      else {
        uint64_t v41 = *(char **)v39;
      }
      int v42 = *v41;
      if (*(char *)(v40 + 23) >= 0) {
        uint64_t v43 = (char *)v40;
      }
      else {
        uint64_t v43 = *(char **)v40;
      }
      if (v42 < 0
        || (int v44 = *v43, v44 < 0)
        || ((unsigned int v45 = v42,
             unsigned int v46 = v44,
             unsigned int v47 = (v44 ^ v45) & 0xFFFFFFDF,
             v45 >= 0x40)
          ? (BOOL v48 = v47 == 0)
          : (BOOL v48 = 1),
            v48 || v46 < 0x40))
      {
        uint64_t result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(v59, v39, v40);
        if (!result) {
          goto LABEL_73;
        }
LABEL_72:
        ++v11;
        uint64_t v10 = v38;
        goto LABEL_73;
      }
      if ((((_BYTE)v45 + 5) & 0x1Fu) < (((_BYTE)v46 + 5) & 0x1Fu)) {
        goto LABEL_72;
      }
    }
LABEL_73:
    if ((*v11 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      uint64_t v49 = (*v11 & 0xFFFFFFFFFFFFFFF8) + 16;
    }
    else
    {
      uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
      uint64_t v49 = result;
    }
    uint64_t v50 = v35;
    if (!v34)
    {
      uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
      uint64_t v50 = result;
    }
    if (*(char *)(v49 + 23) >= 0) {
      uint64_t v51 = (char *)v49;
    }
    else {
      uint64_t v51 = *(char **)v49;
    }
    int v52 = *v51;
    if (*(char *)(v50 + 23) >= 0) {
      int v53 = (char *)v50;
    }
    else {
      int v53 = *(char **)v50;
    }
    if (v52 < 0
      || (int v54 = *v53, v54 < 0)
      || ((unsigned int v55 = v52,
           unsigned int v56 = v54,
           unsigned int v57 = (v54 ^ v55) & 0xFFFFFFDF,
           v55 >= 0x40)
        ? (BOOL v58 = v57 == 0)
        : (BOOL v58 = 1),
          v58 || v56 < 0x40))
    {
      uint64_t result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(v59, v49, v50);
      char v5 = v36;
      if (result) {
        break;
      }
    }
    else
    {
      char v5 = v36;
      if ((((_BYTE)v55 + 5) & 0x1Fu) < (((_BYTE)v56 + 5) & 0x1Fu)) {
        break;
      }
    }
  }
  if ((*v36 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*v36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t *v36 = v60;
  return result;
}

pxrInternal__aapl__pxrReserved__::TfToken *sub_21698E584(pxrInternal__aapl__pxrReserved__::TfToken *EmptyString, uint64_t a2, uint64_t a3)
{
  char v5 = EmptyString;
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v5 + 8 * v6 + 8);
    uint64_t v10 = 2 * v6;
    uint64_t v6 = (2 * v6) | 1;
    uint64_t v11 = v10 + 2;
    if (v10 + 2 >= a3) {
      goto LABEL_26;
    }
    if ((*(void *)v9 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      uint64_t v12 = (*(void *)v9 & 0xFFFFFFFFFFFFFFF8) + 16;
    }
    else
    {
      Emptyunint64_t String = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
      uint64_t v12 = (uint64_t)EmptyString;
    }
    if ((*((void *)v9 + 1) & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      uint64_t v13 = (*((void *)v9 + 1) & 0xFFFFFFFFFFFFFFF8) + 16;
    }
    else
    {
      Emptyunint64_t String = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
      uint64_t v13 = (uint64_t)EmptyString;
    }
    if (*(char *)(v12 + 23) >= 0) {
      uint64_t v14 = (char *)v12;
    }
    else {
      uint64_t v14 = *(char **)v12;
    }
    int v15 = *v14;
    if (*(char *)(v13 + 23) >= 0) {
      int v16 = (char *)v13;
    }
    else {
      int v16 = *(char **)v13;
    }
    if ((v15 & 0x80000000) == 0)
    {
      int v17 = *v16;
      if ((v17 & 0x80000000) == 0)
      {
        unsigned int v18 = v15;
        unsigned int v19 = v17;
        unsigned int v20 = (v17 ^ v18) & 0xFFFFFFDF;
        BOOL v21 = v18 < 0x40 || v20 == 0;
        if (!v21 && v19 >= 0x40)
        {
          if ((((_BYTE)v18 + 5) & 0x1Fu) >= (((_BYTE)v19 + 5) & 0x1Fu)) {
            goto LABEL_26;
          }
LABEL_25:
          uint64_t v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v9 + 8);
          uint64_t v6 = v11;
          goto LABEL_26;
        }
      }
    }
    Emptyunint64_t String = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a2, v12, v13);
    if (EmptyString) {
      goto LABEL_25;
    }
LABEL_26:
    if (v9 != v5)
    {
      if ((*(void *)v5 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      *(void *)char v5 = *(void *)v9;
      *(void *)uint64_t v9 = 0;
    }
    char v5 = v9;
  }
  while (v6 <= v8);
  return v9;
}

uint64_t sub_21698E708(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v7 = result;
    unint64_t v8 = v4 >> 1;
    uint64_t v9 = (uint64_t *)(result + 8 * (v4 >> 1));
    if ((*v9 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      uint64_t v10 = (*v9 & 0xFFFFFFFFFFFFFFF8) + 16;
    }
    else
    {
      uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
      uint64_t v10 = result;
    }
    uint64_t v12 = *(void *)(a2 - 8);
    uint64_t v11 = (uint64_t *)(a2 - 8);
    unint64_t v13 = v12 & 0xFFFFFFFFFFFFFFF8;
    if ((v12 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      uint64_t v14 = v13 + 16;
    }
    else
    {
      uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
      uint64_t v14 = result;
    }
    if (*(char *)(v10 + 23) >= 0) {
      int v15 = (char *)v10;
    }
    else {
      int v15 = *(char **)v10;
    }
    int v16 = *v15;
    if (*(char *)(v14 + 23) >= 0) {
      int v17 = (char *)v14;
    }
    else {
      int v17 = *(char **)v14;
    }
    if (v16 < 0
      || (int v18 = *v17, v18 < 0)
      || ((unsigned int v19 = v16,
           unsigned int v20 = v18,
           unsigned int v21 = (v18 ^ v19) & 0xFFFFFFDF,
           v19 >= 0x40)
        ? (BOOL v22 = v21 == 0)
        : (BOOL v22 = 1),
          v22 || v20 < 0x40))
    {
      uint64_t result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, v10, v14);
      if (!result) {
        return result;
      }
    }
    else if ((((_BYTE)v19 + 5) & 0x1Fu) >= (((_BYTE)v20 + 5) & 0x1Fu))
    {
      return result;
    }
    uint64_t v23 = *v11;
    uint64_t *v11 = 0;
    while (1)
    {
      uint64_t v24 = v9;
      if (v9 != v11)
      {
        if ((*v11 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        uint64_t *v11 = *v9;
        uint64_t *v9 = 0;
      }
      if (!v8) {
        break;
      }
      unint64_t v8 = (v8 - 1) >> 1;
      uint64_t v9 = (uint64_t *)(v7 + 8 * v8);
      if ((*v9 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        uint64_t v25 = (*v9 & 0xFFFFFFFFFFFFFFF8) + 16;
      }
      else
      {
        uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
        uint64_t v25 = result;
      }
      uint64_t v26 = (v23 & 0xFFFFFFFFFFFFFFF8) + 16;
      if ((v23 & 0xFFFFFFFFFFFFFFF8) == 0)
      {
        uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
        uint64_t v26 = result;
      }
      if (*(char *)(v25 + 23) >= 0) {
        int v27 = (char *)v25;
      }
      else {
        int v27 = *(char **)v25;
      }
      int v28 = *v27;
      if (*(char *)(v26 + 23) >= 0) {
        unsigned int v29 = (char *)v26;
      }
      else {
        unsigned int v29 = *(char **)v26;
      }
      if (v28 < 0
        || (int v30 = *v29, v30 < 0)
        || ((unsigned int v31 = v28,
             unsigned int v32 = v30,
             unsigned int v33 = (v30 ^ v31) & 0xFFFFFFDF,
             v31 >= 0x40)
          ? (BOOL v34 = v33 == 0)
          : (BOOL v34 = 1),
            v34 || v32 < 0x40))
      {
        uint64_t result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, v25, v26);
        uint64_t v11 = v24;
        if ((result & 1) == 0) {
          break;
        }
      }
      else
      {
        uint64_t v11 = v24;
        if ((((_BYTE)v31 + 5) & 0x1Fu) >= (((_BYTE)v32 + 5) & 0x1Fu)) {
          break;
        }
      }
    }
    if ((*v24 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    *uint64_t v24 = v23;
  }
  return result;
}

uint64_t sub_21698E94C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000217469498 & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;

  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C755160);
}

uint64_t sub_21698E9D8(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000002174750CCLL & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;

  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C755170);
}

uint64_t sub_21698EA64(uint64_t a1)
{
  if (!*(void *)a1) {
    return 0;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(*(void *)a1 + 8)))
  {
    v2[0] = "sdf/listEditorProxy.h";
    v2[1] = "_Validate";
    v2[2] = 423;
    v2[3] = "BOOL pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrReserved__::SdfNameKeyPolicy"
            ">::_Validate() const [_TypePolicy = pxrInternal__aapl__pxrReserved__::SdfNameKeyPolicy]";
    char v3 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v2, 1, (pxrInternal__aapl__pxrReserved__ *)"Accessing expired list editor");
    return 0;
  }
  return 1;
}

unint64_t sub_21698EADC(uint64_t a1)
{
  if (!sub_21698EB54(a1)) {
    return 0;
  }
  unint64_t result = *(void *)a1;
  if (*(void *)a1)
  {
    char v3 = (void *)(*(uint64_t (**)(unint64_t, void))(*(void *)result + 112))(result, *(unsigned int *)(a1 + 16));
    return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3[1] - *v3) >> 3);
  }
  return result;
}

uint64_t sub_21698EB54(uint64_t a1)
{
  if (!*(void *)a1) {
    return 0;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(*(void *)a1 + 8)))
  {
    v2[0] = "sdf/listProxy.h";
    v2[1] = "_Validate";
    v2[2] = 702;
    v2[3] = "BOOL pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfNameKeyPolicy>::_Va"
            "lidate() const [_TypePolicy = pxrInternal__aapl__pxrReserved__::SdfNameKeyPolicy]";
    char v3 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v2, 1, (pxrInternal__aapl__pxrReserved__ *)"Accessing expired list editor");
    return 0;
  }
  return 1;
}

uint64_t *sub_21698EBCC@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  unint64_t result = (uint64_t *)sub_21698EC6C(a1);
  if (result)
  {
    uint64_t v5 = (*(uint64_t (**)(void))(*(void *)*a1 + 48))();
    unint64_t result = (uint64_t *)(*(uint64_t (**)(void))(*(void *)*a1 + 48))();
    uint64_t v6 = *result;
    *a2 = a1;
    a2[1] = v5;
    a2[2] = v6;
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  return result;
}

uint64_t sub_21698EC6C(void *a1)
{
  uint64_t v2 = *a1;
  if (v2
    && (*(uint64_t (**)(uint64_t))(*(void *)v2 + 48))(v2)
    && (!*a1 || !(*(unsigned int (**)(void))(*(void *)*a1 + 32))(*a1)))
  {
    return 1;
  }
  v4[0] = "sdf/mapEditProxy.h";
  v4[1] = "_Validate";
  v4[2] = 772;
  v4[3] = "BOOL pxrInternal__aapl__pxrReserved__::SdfMapEditProxy<std::map<pxrInternal__aapl__pxrReserved__::SdfPath, pxr"
          "Internal__aapl__pxrReserved__::SdfPath>, pxrInternal__aapl__pxrReserved__::SdfRelocatesMapProxyValuePolicy>::_"
          "Validate() const [T = std::map<pxrInternal__aapl__pxrReserved__::SdfPath, pxrInternal__aapl__pxrReserved__::Sd"
          "fPath>, _ValuePolicy = pxrInternal__aapl__pxrReserved__::SdfRelocatesMapProxyValuePolicy]";
  char v5 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"Accessing an invalid map proxy");
  return 0;
}

uint64_t sub_21698ED3C@<X0>(uint64_t *a1@<X0>, uint64_t **a2@<X8>)
{
  uint64_t result = sub_21698EC6C(a1);
  if (result)
  {
    uint64_t result = *a1;
    if (*a1)
    {
      uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)result + 48))(result);
      uint64_t result = *a1;
      if (*a1) {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 48))(result);
      }
    }
    else
    {
      uint64_t v5 = 0;
    }
    *a2 = a1;
    a2[1] = (uint64_t *)v5;
    a2[2] = (uint64_t *)(result + 8);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  return result;
}

BOOL sub_21698EDEC(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(uint64_t **)a1;
  uint64_t v5 = *(uint64_t **)a2;
  if (*(void *)a1 == *(void *)a2 && *(void *)(a1 + 16) == *(void *)(a2 + 16)) {
    return 1;
  }
  if (v4)
  {
    uint64_t v6 = *v4;
    if (*v4) {
      uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 48))(v6);
    }
    if (*(void *)(a1 + 16) != v6 + 8) {
      return 0;
    }
    uint64_t v5 = *(uint64_t **)a2;
  }
  if (!v5) {
    return 1;
  }
  uint64_t v8 = *v5;
  if (*v5) {
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 48))(v8);
  }
  return *(void *)(a2 + 16) == v8 + 8;
}

char *sub_21698EEC4(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t v7 = a3;
  if (!a1)
  {
    v4[0] = "sdf/mapEditProxy.h";
    v4[1] = "Dereference";
    v4[2] = 225;
    v4[3] = "static const value_type &pxrInternal__aapl__pxrReserved__::SdfMapEditProxy<std::map<pxrInternal__aapl__pxrRe"
            "served__::SdfPath, pxrInternal__aapl__pxrReserved__::SdfPath>, pxrInternal__aapl__pxrReserved__::SdfRelocate"
            "sMapProxyValuePolicy>::Traits::Dereference(const This *, const Type *, const_inner_iterator) [T = std::map<p"
            "xrInternal__aapl__pxrReserved__::SdfPath, pxrInternal__aapl__pxrReserved__::SdfPath>, _ValuePolicy = pxrInte"
            "rnal__aapl__pxrReserved__::SdfRelocatesMapProxyValuePolicy]";
    char v5 = 0;
    int v6 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v4, (pxrInternal__aapl__pxrReserved__ *)"Dereferenced an invalid map proxy iterator", a3);
  }
  return sub_21698EF48(a1, a2, (uint64_t)&v7);
}

char *sub_21698EF48(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  if (v6) {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 48))(v6);
  }
  if (v6 == a2)
  {
    uint64_t v8 = *(void **)a3;
  }
  else
  {
    uint64_t v7 = *a1;
    if (*a1) {
      uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 48))(v7);
    }
    uint64_t v8 = sub_21698EFF0(v7, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(*(void *)a3 + 28));
  }
  return (char *)v8 + 28;
}

void *sub_21698EFF0(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  char v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  char v5 = (void *)(a1 + 8);
  do
  {
    int v6 = sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v3 + 28), a2);
    uint64_t v7 = v3 + 1;
    if (!v6)
    {
      uint64_t v7 = v3;
      char v5 = v3;
    }
    char v3 = (void *)*v7;
  }
  while (*v7);
  if (v5 == v2 || sub_2169817E8(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v5 + 28))) {
    return v2;
  }
  return v5;
}

uint64_t *sub_21698F06C(uint64_t **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, _DWORD **a4)
{
  int v6 = (void **)sub_216981754((uint64_t)a1, &v12, a2);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = (uint64_t *)operator new(0x30uLL);
    v10[1] = a1 + 1;
    sub_21698F11C((_DWORD *)v7 + 7, *a4);
    char v11 = 1;
    sub_21677B358(a1, v12, v8, v7);
    v10[0] = 0;
    sub_21698F170((uint64_t)v10, 0);
  }
  return v7;
}

_DWORD *sub_21698F11C(_DWORD *a1, _DWORD *a2)
{
  unint64_t v4 = sub_21697D878(a1, a2);
  sub_21697D8B4(v4 + 1, a2 + 1);
  *((void *)a1 + 1) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a1 + 2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a1 + 3);
  return a1;
}

void sub_21698F170(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(_DWORD **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_21698F1C8(v2 + 7);
    }
    operator delete(v2);
  }
}

_DWORD *sub_21698F1C8(_DWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 3);
  sub_21697C414(a1 + 2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);

  return sub_21697C414(a1);
}

void sub_21698F21C(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_21698F21C(a1, *a2);
    sub_21698F21C(a1, a2[1]);
    sub_21698F1C8((_DWORD *)a2 + 7);
    operator delete(a2);
  }
}

uint64_t sub_21698F278(void *a1)
{
  uint64_t v2 = *a1;
  if (v2
    && (*(uint64_t (**)(uint64_t))(*(void *)v2 + 48))(v2)
    && (!*a1 || !(*(unsigned int (**)(void))(*(void *)*a1 + 32))(*a1)))
  {
    return 1;
  }
  v4[0] = "sdf/mapEditProxy.h";
  v4[1] = "_Validate";
  v4[2] = 772;
  v4[3] = "BOOL pxrInternal__aapl__pxrReserved__::SdfMapEditProxy<std::map<std::string, std::string>>::_Validate() const "
          "[T = std::map<std::string, std::string>, _ValuePolicy = pxrInternal__aapl__pxrReserved__::SdfIdentityMapEditPr"
          "oxyValuePolicy<std::map<std::string, std::string>>]";
  char v5 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"Accessing an invalid map proxy");
  return 0;
}

uint64_t sub_21698F348(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000002174693E0 & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;

  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C7551E0);
}

uint64_t sub_21698F3D4(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (sub_21698F348(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      unint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_21698F83C, (uint64_t)&stru_26C7551E0);
  }
}

uint64_t sub_21698F468(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000217478E00 & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;

  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C7551F0);
}

uint64_t sub_21698F4F4(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000002174686FFLL & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;

  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C755180);
}

uint64_t sub_21698F580(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000217478D2CLL & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;

  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C755190);
}

uint64_t sub_21698F60C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000217469618 & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;

  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C7551A0);
}

uint64_t sub_21698F698(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000217478D90 & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;

  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C7551B0);
}

uint64_t sub_21698F724(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000217474036 & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;

  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C7551C0);
}

uint64_t sub_21698F7B0(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000217478DC2 & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;

  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C7551D0);
}

uint64_t sub_21698F840@<X0>(void *a1@<X8>)
{
  sub_21698F894(v4);
  uint64_t v2 = (uint64_t (*)(void))v4[1];
  *a1 = v4[0];
  a1[1] = v2;
  v4[0] = 0;
  a1[2] = &unk_26C7551E0;
  return v2(0);
}

uint64_t sub_21698F894@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x10uLL);
  uint64_t result = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::SdfUnregisteredValue((uint64_t)v2);
  *a1 = v2;
  a1[1] = sub_21698F8E8;
  return result;
}

void sub_21698F8D4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_21698F8E8(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = (void *)sub_2168EE084(a1);
    operator delete(v1);
  }
}

void sub_21698F918()
{
}

void sub_21698F958()
{
}

void *sub_21698F998@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = *(void **)a1;
  if (result)
  {
    uint64_t v5 = (*(uint64_t (**)(void *, void))(*result + 112))(result, *(unsigned int *)(a1 + 16));
    a2[1] = 0;
    a2[2] = 0;
    *a2 = 0;
    int v6 = *(uint64_t **)v5;
    uint64_t v7 = *(uint64_t **)(v5 + 8);
    unint64_t v8 = ((uint64_t)v7 - *(void *)v5) >> 3;
    return sub_21698FA28(a2, v6, v7, v8);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  return result;
}

void *sub_21698FA28(void *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = (uint64_t)result;
    sub_21677CACC(result, a4);
    return (void *)sub_21698FAA0(v6, a2, a3);
  }
  return result;
}

void sub_21698FA8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t sub_21698FAA0(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  for (uint64_t i = *(uint64_t **)(result + 8); a2 != a3; ++i)
  {
    uint64_t v4 = *a2;
    *uint64_t i = *a2;
    if ((v4 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *i &= 0xFFFFFFFFFFFFFFF8;
    }
    ++a2;
  }
  *(void *)(result + 8) = i;
  return result;
}

void sub_21698FAF0(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::GetSize();
}

void sub_21698FB68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_216991094((void ***)va);
  _Unwind_Resume(a1);
}

void sub_21698FB80(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, void *a6@<X8>)
{
  if (a2 != a3) {
    sub_21698FC2C();
  }
  *a6 = a1;
  a6[1] = a2;
  a6[2] = a4;
  a6[3] = a5;
}

void sub_21698FC18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

void sub_21698FC2C()
{
}

atomic_uint **sub_21698FC78(uint64_t a1, uint64_t a2, atomic_uint **a3)
{
  uint64_t v4 = (atomic_uint **)a2;
  unint64_t v6 = *(void *)(a1 + 8);
  unint64_t v9 = *(void *)(a1 + 16);
  uint64_t v7 = a1 + 16;
  unint64_t v8 = v9;
  if (v6 >= v9)
  {
    uint64_t v10 = *(atomic_uint ***)a1;
    unint64_t v11 = ((uint64_t)(v6 - *(void *)a1) >> 3) + 1;
    if (v11 >> 61) {
      sub_21677CB10();
    }
    uint64_t v12 = (a2 - (uint64_t)v10) >> 3;
    uint64_t v13 = v8 - (void)v10;
    uint64_t v14 = v13 >> 2;
    if (v13 >> 2 <= v11) {
      uint64_t v14 = ((uint64_t)(v6 - *(void *)a1) >> 3) + 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v14;
    }
    uint64_t v23 = v7;
    if (v15) {
      int v16 = (char *)sub_21677CB28(v7, v15);
    }
    else {
      int v16 = 0;
    }
    unsigned int v19 = v16;
    unsigned int v20 = &v16[8 * v12];
    unsigned int v21 = v20;
    BOOL v22 = &v16[8 * v15];
    sub_21698FE50(&v19, a3);
    uint64_t v4 = sub_21698FFD0((atomic_uint ***)a1, &v19, v4);
    sub_216990084((uint64_t)&v19);
  }
  else if (a2 == v6)
  {
    int v17 = *a3;
    *(void *)a2 = *a3;
    if (v17) {
      atomic_fetch_add(v17, 1u);
    }
    *(void *)(a1 + 8) = a2 + 8;
  }
  else
  {
    sub_21698FDB4((atomic_uint **)a1, a2, v6, (atomic_uint *)(a2 + 8));
    pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v4, a3);
  }
  return v4;
}

void sub_21698FDA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216990084((uint64_t)va);
  _Unwind_Resume(a1);
}

atomic_uint **sub_21698FDB4(atomic_uint **result, uint64_t a2, unint64_t a3, atomic_uint *a4)
{
  uint64_t v4 = result[1];
  uint64_t v5 = (atomic_uint **)(a2 + (char *)v4 - (char *)a4);
  if ((unint64_t)v5 >= a3)
  {
    unint64_t v6 = result[1];
  }
  else
  {
    unint64_t v6 = result[1];
    do
    {
      uint64_t v7 = *v5;
      *(void *)unint64_t v6 = *v5;
      if (v7) {
        atomic_fetch_add(v7, 1u);
      }
      ++v5;
      v6 += 2;
    }
    while ((unint64_t)v5 < a3);
  }
  result[1] = v6;
  if (v4 != a4)
  {
    unint64_t v8 = (atomic_uint **)(v4 - 2);
    uint64_t v9 = 8 * (((char *)v4 - (char *)a4) >> 3);
    uint64_t v10 = a2 - 8;
    do
    {
      uint64_t result = pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v8--, (atomic_uint **)(v10 + v9));
      v9 -= 8;
    }
    while (v9);
  }
  return result;
}

void *sub_21698FE50(void *result, atomic_uint **a2)
{
  char v3 = result;
  uint64_t v4 = (atomic_uint **)result[2];
  if (v4 == (atomic_uint **)result[3])
  {
    uint64_t v5 = (atomic_uint **)result[1];
    uint64_t v6 = (uint64_t)v5 - *result;
    if ((unint64_t)v5 <= *result)
    {
      if (v4 == (atomic_uint **)*result) {
        unint64_t v13 = 1;
      }
      else {
        unint64_t v13 = ((uint64_t)v4 - *result) >> 2;
      }
      uint64_t v14 = result[4];
      uint64_t v31 = v3[4];
      unint64_t v15 = (char *)sub_21677CB28(v14, v13);
      int v16 = (atomic_uint **)&v15[8 * (v13 >> 2)];
      int v28 = v15;
      v29.i64[0] = (uint64_t)v16;
      int v18 = &v15[8 * v17];
      v29.i64[1] = (uint64_t)v16;
      int v30 = v18;
      unsigned int v19 = (atomic_uint **)v3[1];
      uint64_t v20 = v3[2] - (void)v19;
      if (v20)
      {
        uint64_t v21 = v20 >> 3;
        BOOL v22 = (char *)v16 + (v20 & 0xFFFFFFFFFFFFFFF8);
        uint64_t v23 = 8 * v21;
        do
        {
          uint64_t v24 = *v19;
          char *v16 = *v19;
          if (v24) {
            atomic_fetch_add(v24, 1u);
          }
          ++v16;
          ++v19;
          v23 -= 8;
        }
        while (v23);
        unint64_t v15 = v28;
        int v16 = (atomic_uint **)v29.i64[0];
        int64x2_t v25 = *(int64x2_t *)(v3 + 1);
        int v18 = v30;
      }
      else
      {
        int64x2_t v25 = vdupq_n_s64((unint64_t)v19);
        BOOL v22 = &v15[8 * (v13 >> 2)];
      }
      int v28 = (char *)*v3;
      *char v3 = v15;
      v3[1] = v16;
      int64x2_t v29 = v25;
      uint64_t v26 = (char *)v3[3];
      v3[2] = v22;
      v3[3] = v18;
      int v30 = v26;
      uint64_t result = (void *)sub_216990084((uint64_t)&v28);
      uint64_t v4 = (atomic_uint **)v3[2];
    }
    else
    {
      uint64_t v7 = v6 >> 3;
      BOOL v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      if (v5 == v4)
      {
        uint64_t v12 = &v5[-(v10 >> 1)];
      }
      else
      {
        do
        {
          uint64_t result = pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(&v5[v11], v5);
          ++v5;
        }
        while (v5 != v4);
        uint64_t v4 = (atomic_uint **)v3[1];
        uint64_t v12 = &v5[v11];
      }
      v3[1] = &v4[v11];
      v3[2] = v12;
      uint64_t v4 = v12;
    }
  }
  int v27 = *a2;
  atomic_uint *v4 = *a2;
  if (v27)
  {
    atomic_fetch_add(v27, 1u);
    uint64_t v4 = (atomic_uint **)v3[2];
  }
  v3[2] = v4 + 1;
  return result;
}

atomic_uint **sub_21698FFD0(atomic_uint ***a1, void *a2, atomic_uint **a3)
{
  uint64_t result = (atomic_uint **)a2[1];
  uint64_t v5 = *a1;
  uint64_t v6 = result;
  if (*a1 != a3)
  {
    uint64_t v7 = a3;
    uint64_t v6 = (atomic_uint **)a2[1];
    do
    {
      uint64_t v9 = *--v7;
      BOOL v8 = v9;
      *--uint64_t v6 = v9;
      if (v9) {
        atomic_fetch_add(v8, 1u);
      }
    }
    while (v7 != v5);
  }
  a2[1] = v6;
  uint64_t v10 = a1[1];
  uint64_t v11 = (atomic_uint **)a2[2];
  if (v10 != a3)
  {
    do
    {
      uint64_t v12 = *a3;
      uint64_t *v11 = *a3;
      if (v12) {
        atomic_fetch_add(v12, 1u);
      }
      ++a3;
      ++v11;
    }
    while (a3 != v10);
    uint64_t v6 = (atomic_uint **)a2[1];
  }
  a2[2] = v11;
  unint64_t v13 = *a1;
  *a1 = v6;
  a2[1] = v13;
  uint64_t v14 = a1[1];
  a1[1] = (atomic_uint **)a2[2];
  a2[2] = v14;
  unint64_t v15 = a1[2];
  a1[2] = (atomic_uint **)a2[3];
  a2[3] = v15;
  *a2 = a2[1];
  return result;
}

uint64_t sub_216990084(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(i - 8));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_2169900D4(atomic_uint **a1, atomic_uint **a2, uint64_t a3, char a4)
{
  BOOL v8 = a2;
  uint64_t v9 = a1;
  long long v74 = a2;
  v75 = a1;
  while (1)
  {
    uint64_t v10 = (char *)v8 - (char *)v9;
    uint64_t v11 = v8 - v9;
    if (!(!v5 & v4))
    {
      switch(v11)
      {
        case 0:
        case 1:
          return;
        case 2:
          long long v74 = v8 - 1;
          if (sub_216990958((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v8 - 1, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v9))sub_216990ADC(&v75, &v74); {
          break;
          }
        case 3:
          long long v74 = v8 - 1;
          sub_216990C14(v9, v9 + 1, v8 - 1);
          break;
        case 4:
          long long v74 = v8 - 1;
          sub_216990FF8(v9, v9 + 1, v9 + 2, v8 - 1);
          break;
        case 5:
          long long v74 = v8 - 1;
          sub_216990B4C(v9, v9 + 1, v9 + 2, v9 + 3, v8 - 1);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v10 <= 191) {
      break;
    }
    if (!a3)
    {
      if (v9 != v8)
      {
        uint64_t v73 = v8;
        int64_t v48 = (unint64_t)(v11 - 2) >> 1;
        int64_t v49 = v48;
        do
        {
          int64_t v50 = v49;
          if (v48 >= v49)
          {
            uint64_t v51 = (2 * v49) | 1;
            int v52 = &v9[v51];
            if (2 * v49 + 2 < v11
              && sub_216990958((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v9[v51], (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v52 + 1))
            {
              ++v52;
              uint64_t v51 = 2 * v50 + 2;
            }
            int v53 = &v9[v50];
            if ((sub_216990958((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v52, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v53) & 1) == 0)
            {
              int v54 = *v53;
              int v78 = (atomic_uint **)v54;
              if (v54) {
                atomic_fetch_add(v54, 1u);
              }
              do
              {
                unsigned int v55 = v52;
                pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v53, v52);
                if (v48 < v51) {
                  break;
                }
                uint64_t v56 = (2 * v51) | 1;
                int v52 = &v9[v56];
                uint64_t v51 = 2 * v51 + 2;
                if (v51 < v11)
                {
                  if (sub_216990958((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v9[v56], (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v52 + 1))++v52; {
                  else
                  }
                    uint64_t v51 = v56;
                }
                else
                {
                  uint64_t v51 = v56;
                }
                int v53 = v55;
              }
              while (!sub_216990958((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v52, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v78));
              pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v55, (atomic_uint **)&v78);
              pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v78);
            }
          }
          int64_t v49 = v50 - 1;
        }
        while (v50);
        uint64_t v57 = (unint64_t)v10 >> 3;
        BOOL v58 = v73;
        do
        {
          uint64_t v59 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)*v9;
          std::string v77 = (atomic_uint **)v59;
          if (v59) {
            atomic_fetch_add((atomic_uint *volatile)v59, 1u);
          }
          uint64_t v60 = 0;
          uint64_t v61 = v9;
          do
          {
            uint64_t v62 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v61[v60 + 1];
            uint64_t v63 = 2 * v60;
            uint64_t v60 = (2 * v60) | 1;
            uint64_t v64 = v63 + 2;
            if (v63 + 2 < v57 && sub_216990958(v62, v62 + 1))
            {
              ++v62;
              uint64_t v60 = v64;
            }
            pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v61, (atomic_uint **)v62);
            uint64_t v61 = (atomic_uint **)v62;
          }
          while (v60 <= (uint64_t)((unint64_t)(v57 - 2) >> 1));
          if (v62 == (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)--v58)
          {
            pxrInternal__aapl__pxrReserved__::SdfSpec::operator=((atomic_uint **)v62, (atomic_uint **)&v77);
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::SdfSpec::operator=((atomic_uint **)v62, v58);
            pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v58, (atomic_uint **)&v77);
            uint64_t v65 = (char *)v62 - (char *)v9 + 8;
            if (v65 >= 9)
            {
              unint64_t v66 = (((unint64_t)v65 >> 3) - 2) >> 1;
              int v67 = &v9[v66];
              if (sub_216990958((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v67, v62))
              {
                unsigned int v68 = *v62;
                int v78 = (atomic_uint **)v68;
                if (v68) {
                  atomic_fetch_add((atomic_uint *volatile)v68, 1u);
                }
                do
                {
                  unsigned int v69 = v67;
                  pxrInternal__aapl__pxrReserved__::SdfSpec::operator=((atomic_uint **)v62, v67);
                  if (!v66) {
                    break;
                  }
                  unint64_t v66 = (v66 - 1) >> 1;
                  int v67 = &v9[v66];
                  uint64_t v62 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v69;
                }
                while ((sub_216990958((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v67, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v78) & 1) != 0);
                pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v69, (atomic_uint **)&v78);
                pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v78);
              }
            }
          }
          pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v77);
        }
        while (v57-- > 2);
      }
      return;
    }
    unint64_t v12 = (unint64_t)v11 >> 1;
    unint64_t v13 = v8 - 1;
    if ((unint64_t)v10 < 0x401)
    {
      sub_216990C14(&v9[v12], v9, v13);
    }
    else
    {
      sub_216990C14(v9, &v9[v12], v13);
      uint64_t v14 = 8 * v12 - 8;
      sub_216990C14(v75 + 1, (atomic_uint **)((char *)v75 + v14), v74 - 2);
      uint64_t v15 = 8 * v12 + 8;
      sub_216990C14(v75 + 2, (atomic_uint **)((char *)v75 + v15), v74 - 3);
      sub_216990C14((atomic_uint **)((char *)v75 + v14), &v75[v12], (atomic_uint **)((char *)v75 + v15));
      int v78 = &v75[v12];
      sub_216990CC8(&v75, &v78);
    }
    --a3;
    if (a4)
    {
      int v16 = v74;
    }
    else
    {
      char v17 = sub_216990958((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v75 - 1, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v75);
      int v16 = v74;
      if ((v17 & 1) == 0)
      {
        int64x2_t v29 = v75;
        std::string v77 = v74;
        int v78 = v75;
        int v30 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)*v75;
        unint64_t v76 = (atomic_uint *)v30;
        if (v30)
        {
          atomic_fetch_add((atomic_uint *volatile)v30, 1u);
          int v16 = v77;
        }
        char v31 = sub_216990958((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v76, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v16 - 1);
        unsigned int v32 = v78 + 1;
        if (v31)
        {
          do
          {
            int v78 = v32;
            char v33 = sub_216990958((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v76, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v32++);
          }
          while ((v33 & 1) == 0);
        }
        else
        {
          do
          {
            int v78 = v32;
            if (v32 >= v77) {
              break;
            }
            int v34 = sub_216990958((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v76, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v32++);
          }
          while (!v34);
        }
        uint64_t v36 = v77;
        unint64_t v35 = v78;
        if (v78 < v77)
        {
          do
            std::string v77 = --v36;
          while ((sub_216990958((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v76, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v36) & 1) != 0);
          unint64_t v35 = v78;
        }
        if (v35 < v36)
        {
          do
          {
            sub_216990ADC(&v78, &v77);
            do
              ++v78;
            while (!sub_216990958((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v76, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v78));
            do
              --v77;
            while ((sub_216990958((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v76, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v77) & 1) != 0);
            unint64_t v35 = v78;
          }
          while (v78 < v77);
        }
        uint64_t v37 = v35 - 1;
        if (v35 - 1 != v29) {
          pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v29, v35 - 1);
        }
        pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v37, &v76);
        uint64_t v9 = v78;
        pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v76);
        goto LABEL_52;
      }
    }
    int v18 = v75;
    std::string v77 = v16;
    int v78 = v75;
    unsigned int v19 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)*v75;
    unint64_t v76 = (atomic_uint *)v19;
    uint64_t v20 = v75;
    if (v19)
    {
      atomic_fetch_add((atomic_uint *volatile)v19, 1u);
      uint64_t v20 = v78;
    }
    uint64_t v21 = v20 + 1;
    do
    {
      int v78 = v21;
      char v22 = sub_216990958((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v21++, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v76);
    }
    while ((v22 & 1) != 0);
    uint64_t v23 = v77;
    uint64_t v24 = v78;
    if (v78 - 1 == v18)
    {
      do
      {
        if (v24 >= v23) {
          break;
        }
        std::string v77 = --v23;
      }
      while ((sub_216990958((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v23, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v76) & 1) == 0);
    }
    else
    {
      int64x2_t v25 = v77 - 1;
      do
      {
        std::string v77 = v25;
        int v26 = sub_216990958((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v25--, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v76);
      }
      while (!v26);
      uint64_t v24 = v78;
    }
    int v27 = v77;
    uint64_t v9 = v24;
    if (v24 < v77)
    {
      do
      {
        sub_216990ADC(&v78, &v77);
        do
          ++v78;
        while ((sub_216990958((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v78, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v76) & 1) != 0);
        do
          --v77;
        while (!sub_216990958((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v77, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v76));
        uint64_t v9 = v78;
      }
      while (v78 < v77);
    }
    if (v9 - 1 != v18) {
      pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v18, v9 - 1);
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v9 - 1, &v76);
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v76);
    if (v24 < v27) {
      goto LABEL_30;
    }
    int v28 = sub_216990D38(v75, v9 - 1);
    if (!sub_216990D38(v9, v74))
    {
      if (v28) {
        goto LABEL_53;
      }
LABEL_30:
      sub_2169900D4(v75, v9 - 1, a3, a4 & 1);
LABEL_52:
      a4 = 0;
LABEL_53:
      v75 = v9;
      goto LABEL_54;
    }
    if (v28) {
      return;
    }
    long long v74 = v9 - 1;
    uint64_t v9 = v75;
LABEL_54:
    BOOL v8 = v74;
  }
  uint64_t v38 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(v9 + 1);
  BOOL v40 = v9 == v8 || v38 == (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v8;
  if (a4)
  {
    if (!v40)
    {
      uint64_t v41 = 0;
      int v42 = (atomic_uint ***)v9;
      do
      {
        uint64_t v43 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v42;
        int v42 = (atomic_uint ***)v38;
        if (sub_216990958(v38, v43))
        {
          int v44 = *v42;
          int v78 = v44;
          if (v44) {
            atomic_fetch_add((atomic_uint *volatile)v44, 1u);
          }
          uint64_t v45 = v41;
          while (1)
          {
            pxrInternal__aapl__pxrReserved__::SdfSpec::operator=((atomic_uint **)((char *)v9 + v45 + 8), (atomic_uint **)((char *)v9 + v45));
            if (!v45) {
              break;
            }
            char v46 = sub_216990958((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v78, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)((char *)v9 + v45 - 8));
            v45 -= 8;
            if ((v46 & 1) == 0)
            {
              unsigned int v47 = (atomic_uint **)((char *)v9 + v45 + 8);
              goto LABEL_80;
            }
          }
          unsigned int v47 = v9;
LABEL_80:
          pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v47, (atomic_uint **)&v78);
          pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v78);
        }
        uint64_t v38 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(v42 + 1);
        v41 += 8;
      }
      while (v42 + 1 != (atomic_uint ***)v8);
    }
  }
  else if (!v40)
  {
    do
    {
      BOOL v71 = (atomic_uint ***)v38;
      if (sub_216990958(v38, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v9))
      {
        uint64_t v72 = *v71;
        int v78 = v72;
        if (v72) {
          atomic_fetch_add((atomic_uint *volatile)v72, 1u);
        }
        do
        {
          pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v9 + 1, v9);
          --v9;
        }
        while ((sub_216990958((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v78, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v9) & 1) != 0);
        pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v9 + 1, (atomic_uint **)&v78);
        pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v78);
      }
      uint64_t v38 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(v71 + 1);
      uint64_t v9 = (atomic_uint **)v71;
    }
    while (v71 + 1 != (atomic_uint ***)v8);
  }
}

void sub_2169908B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va1);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216990958(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a2)
{
  char v4 = sub_216990F1C(a1);
  Name = pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetName((pxrInternal__aapl__pxrReserved__::SdfPropertySpec *)v4);
  uint64_t v6 = sub_216990F1C(a2);
  uint64_t v7 = pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetName((pxrInternal__aapl__pxrReserved__::SdfPropertySpec *)v6);
  uint64_t v8 = (uint64_t)v7;
  uint64_t v9 = *((unsigned __int8 *)Name + 23);
  char v10 = v9;
  if ((v9 & 0x80u) == 0) {
    uint64_t v11 = *((unsigned __int8 *)Name + 23);
  }
  else {
    uint64_t v11 = Name[1];
  }
  uint64_t v12 = *((unsigned __int8 *)v7 + 23);
  int v13 = (char)v12;
  if ((v12 & 0x80u) != 0) {
    uint64_t v12 = v7[1];
  }
  if (v11 != v12) {
    goto LABEL_20;
  }
  if (v13 >= 0) {
    uint64_t v14 = (unsigned __int8 *)v7;
  }
  else {
    uint64_t v14 = (unsigned __int8 *)*v7;
  }
  if ((char)v9 < 0)
  {
    if (memcmp((const void *)*Name, v14, Name[1])) {
      goto LABEL_20;
    }
  }
  else if ((_BYTE)v9)
  {
    uint64_t v15 = Name;
    while (*(unsigned __int8 *)v15 == *v14)
    {
      uint64_t v15 = (uint64_t *)((char *)v15 + 1);
      ++v14;
      if (!--v9) {
        goto LABEL_17;
      }
    }
    goto LABEL_20;
  }
LABEL_17:
  int v16 = sub_216990F1C(a1);
  int SpecType = pxrInternal__aapl__pxrReserved__::SdfSpec::GetSpecType(v16);
  int v18 = sub_216990F1C(a2);
  if (SpecType < (int)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSpecType(v18)) {
    return 1;
  }
  char v10 = *((unsigned char *)Name + 23);
  LOBYTE(v13) = *(unsigned char *)(v8 + 23);
LABEL_20:
  if (v10 >= 0) {
    uint64_t v20 = (char *)Name;
  }
  else {
    uint64_t v20 = (char *)*Name;
  }
  int v21 = *v20;
  if ((v13 & 0x80u) == 0) {
    char v22 = (char *)v8;
  }
  else {
    char v22 = *(char **)v8;
  }
  if (v21 < 0) {
    return pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v28, (uint64_t)Name, v8);
  }
  int v23 = *v22;
  if (v23 < 0) {
    return pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v28, (uint64_t)Name, v8);
  }
  unsigned int v24 = v21;
  unsigned int v25 = v23;
  unsigned int v26 = (v23 ^ v24) & 0xFFFFFFDF;
  BOOL v27 = v24 < 0x40 || v26 == 0;
  if (v27 || v25 < 0x40) {
    return pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl((uint64_t)&v28, (uint64_t)Name, v8);
  }
  else {
    return (((_BYTE)v24 + 5) & 0x1Fu) < (((_BYTE)v25 + 5) & 0x1Fu);
  }
}

void sub_216990ADC(atomic_uint ***a1, atomic_uint ***a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  char v4 = *v2;
  char v5 = v4;
  if (v4) {
    atomic_fetch_add(v4, 1u);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v2, v3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v3, &v5);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v5);
}

void sub_216990B38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

void sub_216990B4C(atomic_uint **a1, atomic_uint **a2, atomic_uint **a3, atomic_uint **a4, atomic_uint **a5)
{
  int v13 = a2;
  uint64_t v14 = a1;
  uint64_t v11 = a4;
  uint64_t v12 = a3;
  char v10 = a5;
  sub_216990FF8(a1, a2, a3, a4);
  if (sub_216990958((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a5, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a4))
  {
    sub_216990ADC(&v11, &v10);
    if (sub_216990958((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v11, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a3))
    {
      sub_216990ADC(&v12, &v11);
      if (sub_216990958((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v12, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a2))
      {
        sub_216990ADC(&v13, &v12);
        if (sub_216990958((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v13, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a1))sub_216990ADC(&v14, &v13); {
      }
        }
    }
  }
}

void sub_216990C14(atomic_uint **a1, atomic_uint **a2, atomic_uint **a3)
{
  char v10 = a2;
  uint64_t v11 = a1;
  uint64_t v9 = a3;
  char v5 = sub_216990958((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a2, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a1);
  int v6 = sub_216990958((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a3, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a2);
  if (v5)
  {
    if (v6)
    {
      uint64_t v7 = &v11;
    }
    else
    {
      sub_216990ADC(&v11, &v10);
      if (!sub_216990958((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v9, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v10))return; {
      uint64_t v7 = &v10;
      }
    }
    uint64_t v8 = &v9;
    goto LABEL_10;
  }
  if (v6)
  {
    sub_216990ADC(&v10, &v9);
    if (sub_216990958((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v10, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v11))
    {
      uint64_t v7 = &v11;
      uint64_t v8 = &v10;
LABEL_10:
      sub_216990ADC(v7, v8);
    }
  }
}

void sub_216990CC8(atomic_uint ***a1, atomic_uint ***a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  char v4 = *v2;
  char v5 = v4;
  if (v4) {
    atomic_fetch_add(v4, 1u);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v2, v3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v3, &v5);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v5);
}

void sub_216990D24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216990D38(atomic_uint **a1, atomic_uint **a2)
{
  uint64_t v12 = a2;
  int v13 = a1;
  BOOL v4 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v4;
    case 2:
      uint64_t v12 = a2 - 1;
      if (sub_216990958((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a2 - 1, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a1))sub_216990ADC(&v13, &v12); {
      return v4;
      }
    case 3:
      sub_216990C14(a1, a1 + 1, a2 - 1);
      return v4;
    case 4:
      sub_216990FF8(a1, a1 + 1, a1 + 2, a2 - 1);
      return v4;
    case 5:
      sub_216990B4C(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return v4;
    default:
      char v5 = a1 + 2;
      sub_216990C14(a1, a1 + 1, a1 + 2);
      int v6 = a1 + 3;
      BOOL v4 = 1;
      if (v6 == a2) {
        return v4;
      }
      int v7 = 0;
      break;
  }
  while (!sub_216990958((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v6, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v5))
  {
LABEL_13:
    char v5 = v6++;
    if (v6 == v12) {
      return 1;
    }
  }
  uint64_t v8 = *v6;
  uint64_t v11 = v8;
  if (v8) {
    atomic_fetch_add(v8, 1u);
  }
  do
  {
    uint64_t v9 = v5;
    pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v5 + 1, v5);
    if (v5 == v13) {
      break;
    }
    --v5;
  }
  while ((sub_216990958((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v11, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v9 - 1) & 1) != 0);
  pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v9, &v11);
  if (++v7 != 8)
  {
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v11);
    goto LABEL_13;
  }
  BOOL v4 = v6 + 1 == v12;
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v11);
  return v4;
}

void sub_216990EEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Sdf_Identity **sub_216990F1C(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1)
{
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a1))
  {
    v7[0] = "sdf/declareHandles.h";
    v7[1] = "operator->";
    v7[2] = 96;
    void v7[3] = "SpecType *pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPropertySpec>::op"
            "erator->() const [T = pxrInternal__aapl__pxrReserved__::SdfPropertySpec]";
    char v8 = 0;
    int v9 = 4;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x8000000217468731 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v5);
    if (v6 >= 0) {
      BOOL v4 = v5;
    }
    else {
      BOOL v4 = (void *)v5[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v7, (pxrInternal__aapl__pxrReserved__ *)"Dereferenced an invalid %s", v3, v4);
  }
  return a1;
}

void sub_216990FC4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x216990F3CLL);
}

void sub_216990FDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216990FF8(atomic_uint **a1, atomic_uint **a2, atomic_uint **a3, atomic_uint **a4)
{
  char v10 = a2;
  uint64_t v11 = a1;
  char v8 = a4;
  int v9 = a3;
  sub_216990C14(a1, a2, a3);
  if (sub_216990958((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a4, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a3))
  {
    sub_216990ADC(&v9, &v8);
    if (sub_216990958((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v9, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a2))
    {
      sub_216990ADC(&v10, &v9);
      if (sub_216990958((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v10, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a1))sub_216990ADC(&v11, &v10); {
    }
      }
  }
}

void sub_216991094(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    BOOL v4 = (char *)v1[1];
    char v5 = v2;
    if (v4 != v2)
    {
      do
        pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(v4 - 8));
      while (v4 != v2);
      char v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_216991118(uint64_t a1)
{
  char v5 = (void **)(a1 + 40);
  sub_216889A04(&v5);
  uint64_t v2 = *(void *)(a1 + 24);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_21697C414((_DWORD *)(a1 + 16));
  uint64_t v3 = *(atomic_uint **)(a1 + 8);
  if (v3 && atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t sub_2169911C0(uint64_t a1)
{
  char v5 = (void **)(a1 + 40);
  sub_216889A04(&v5);
  uint64_t v2 = *(void *)(a1 + 24);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_21697C414((_DWORD *)(a1 + 16));
  uint64_t v3 = *(atomic_uint **)(a1 + 8);
  if (v3 && atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

void sub_216991268()
{
}

uint64_t sub_2169912B4(uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }

  return sub_216991430(a1);
}

void sub_2169912F8()
{
}

void sub_216991380()
{
}

void sub_2169913D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

void sub_2169913E4()
{
}

uint64_t sub_216991430(uint64_t a1)
{
  char v5 = (void **)(a1 + 40);
  sub_216889A04(&v5);
  uint64_t v2 = *(void *)(a1 + 24);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_21697C414((_DWORD *)(a1 + 16));
  uint64_t v3 = *(atomic_uint **)(a1 + 8);
  if (v3 && atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *sub_2169914D8(pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *a1)
{
  uint64_t result = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init::New(a1);
  uint64_t v3 = 0;
  atomic_compare_exchange_strong((atomic_ullong *volatile)a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::~Sdf_ValueTypeNamesType(result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

const pxrInternal__aapl__pxrReserved__::TfToken *sub_216991520(const pxrInternal__aapl__pxrReserved__::TfToken *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition **a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    char v5 = a1;
    uint64_t v3 = a2;
    while (2)
    {
      while (sub_2169915C4(a3, v5))
      {
        char v5 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v5 + 8);
        if (v5 == v3) {
          return v3;
        }
      }
      do
      {
        uint64_t v3 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v3 - 8);
        if (v3 == v5) {
          return v5;
        }
      }
      while (!sub_2169915C4(a3, v3));
      uint64_t v6 = *(void *)v5;
      *(void *)char v5 = *(void *)v3;
      char v5 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v5 + 8);
      *(void *)uint64_t v3 = v6;
      if (v3 != v5) {
        continue;
      }
      break;
    }
  }
  return v3;
}

BOOL sub_2169915C4(pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  if (sub_21698BCEC(a1, a2)) {
    return 1;
  }
  BOOL v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    BOOL v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  return (*(void *)a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v4 + 16) & 0xFFFFFFFFFFFFFFF8);
}

void sub_21699162C(void *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (*(char *)(a4 + 23) >= 0) {
    char v10 = (const char *)a4;
  }
  else {
    char v10 = *(const char **)a4;
  }
  if (*(char *)(a5 + 23) >= 0) {
    uint64_t v11 = (const char *)a5;
  }
  else {
    uint64_t v11 = *(const char **)a5;
  }
  if (*(char *)(a6 + 23) >= 0) {
    uint64_t v12 = (const char *)a6;
  }
  else {
    uint64_t v12 = *(const char **)a6;
  }
  if (*(char *)(a7 + 23) >= 0) {
    int v13 = (const char *)a7;
  }
  else {
    int v13 = *(const char **)a7;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, a2, (pxrInternal__aapl__pxrReserved__ *)"%s%s%s %s.connect = ", v10, v11, v12, v13);
  if (sub_216991950((uint64_t)a3))
  {
    if (sub_216991950((uint64_t)a3) == 1)
    {
      sub_216991B40(a3, 0, __p);
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteSdfPath(a1, 0, (pxrInternal__aapl__pxrReserved__::SdfPath *)__p);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
      sub_21697C414(__p);
      sub_216779094(__p, "\n");
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a1, 0, (uint64_t)__p);
    }
    else
    {
      sub_216779094(__p, "[\n");
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a1, 0, (uint64_t)__p);
      if (SHIBYTE(v18) < 0) {
        operator delete(__p[0]);
      }
      v19[1] = 0;
      v19[2] = 0;
      if (sub_216991AC8((uint64_t)a3)) {
        uint64_t v14 = a3;
      }
      else {
        uint64_t v14 = 0;
      }
      __p[1] = v14;
      uint64_t v18 = 0;
      sub_216991C48((uint64_t)a3, (uint64_t)v19);
      while (!sub_216991CCC((uint64_t)__p, (uint64_t)v19))
      {
        sub_2169919BC((uint64_t)__p, v15);
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteSdfPath(a1, a2 + 1, (pxrInternal__aapl__pxrReserved__::SdfPath *)v15);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v15 + 1);
        sub_21697C414(v15);
        sub_216779094(v15, ",\n");
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a1, 0, (uint64_t)v15);
        if (v16 < 0) {
          operator delete(v15[0]);
        }
        sub_216991A44((uint64_t)__p);
      }
      sub_216779094(__p, "]\n");
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a1, a2, (uint64_t)__p);
    }
  }
  else
  {
    sub_216779094(__p, "None\n");
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a1, 0, (uint64_t)__p);
  }
  if (SHIBYTE(v18) < 0) {
    operator delete(__p[0]);
  }
}

void sub_216991878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2169918D8(uint64_t a1)
{
  if (!*(void *)a1) {
    return 0;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(*(void *)a1 + 8)))
  {
    v2[0] = "sdf/listEditorProxy.h";
    v2[1] = "_Validate";
    v2[2] = 423;
    v2[3] = "BOOL pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy"
            ">::_Validate() const [_TypePolicy = pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy]";
    char v3 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v2, 1, (pxrInternal__aapl__pxrReserved__ *)"Accessing expired list editor");
    return 0;
  }
  return 1;
}

uint64_t sub_216991950(uint64_t a1)
{
  if (!sub_216991AC8(a1)) {
    return 0;
  }
  uint64_t result = *(void *)a1;
  if (*(void *)a1)
  {
    char v3 = (void *)(*(uint64_t (**)(uint64_t, void))(*(void *)result + 112))(result, *(unsigned int *)(a1 + 16));
    return (uint64_t)(v3[1] - *v3) >> 3;
  }
  return result;
}

_DWORD *sub_2169919BC@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  if (sub_216991CCC(a1, a1 + 24))
  {
    v6[0] = "tf/iterator.h";
    v6[1] = "operator*";
    v6[2] = 271;
    v6[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__::SdfListProxy<"
            "pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy>>::operator*() [T = const pxrInternal__aapl__pxrReserved_"
            "_::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy>, Reverse = false]";
    char v7 = 0;
    int v8 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v6, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", v4);
  }
  return sub_216991B40(*(uint64_t **)(a1 + 8), *(void *)(a1 + 16), a2);
}

uint64_t sub_216991A44(uint64_t a1)
{
  if (sub_216991CCC(a1, a1 + 24))
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__:"
            ":SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy>>::operator++() [T = const pxrInternal__aap"
            "l__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    ++*(void *)(a1 + 16);
  }
  return a1;
}

uint64_t sub_216991AC8(uint64_t a1)
{
  if (!*(void *)a1) {
    return 0;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(*(void *)a1 + 8)))
  {
    v2[0] = "sdf/listProxy.h";
    v2[1] = "_Validate";
    v2[2] = 702;
    v2[3] = "BOOL pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy>::_Va"
            "lidate() const [_TypePolicy = pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy]";
    char v3 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v2, 1, (pxrInternal__aapl__pxrReserved__ *)"Accessing expired list editor");
    return 0;
  }
  return 1;
}

_DWORD *sub_216991B40@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  if (sub_216991AC8((uint64_t)a1))
  {
    uint64_t v6 = *a1;
    return sub_216991BD4(v6, a2, a3);
  }
  else
  {
    *(void *)a3 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a3);
    return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a3 + 1);
  }
}

_DWORD *sub_216991BD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, _DWORD *a3@<X8>)
{
  char v4 = (_DWORD *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1) + 8 * a2);
  sub_216981010(a3, v4);

  return sub_21698105C(a3 + 1, v4 + 1);
}

void *sub_216991C48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = sub_216991AC8(a1);
  uint64_t result = *(void **)a1;
  if (*(void *)a1)
  {
    uint64_t result = (void *)(*(uint64_t (**)(void *, void))(*result + 112))(result, *(unsigned int *)(a1 + 16));
    uint64_t v6 = (uint64_t)(result[1] - *result) >> 3;
  }
  else
  {
    uint64_t v6 = 0;
  }
  if (v4) {
    uint64_t v7 = a1;
  }
  else {
    uint64_t v7 = 0;
  }
  *(void *)(a2 + 8) = v7;
  *(void *)(a2 + 16) = v6;
  return result;
}

BOOL sub_216991CCC(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8) == *(void *)(a2 + 8)) {
    return *(void *)(a1 + 16) == *(void *)(a2 + 16);
  }
  v3[0] = "sdf/listProxy.h";
  v3[1] = "equal";
  v3[2] = 268;
  v3[3] = "BOOL pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy>::_Iter"
          "ator<const pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy> "
          "*, pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy>::_ConstG"
          "etHelper>::equal(const This &) const [_TypePolicy = pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy, Owner "
          "= const pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy> *, "
          "GetItem = pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy>::"
          "_ConstGetHelper]";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"Comparing SdfListProxy iterators from different proxies!");
  return 0;
}

void sub_216991D4C(uint64_t *a1, void *a2, uint64_t a3, char a4)
{
  if ((unint64_t)sub_216991950((uint64_t)a1) < 2)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, 0, (pxrInternal__aapl__pxrReserved__ *)" = ");
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, 0, (pxrInternal__aapl__pxrReserved__ *)" = [\n");
    ++a3;
  }
  if (sub_216991950((uint64_t)a1))
  {
    unint64_t v8 = 0;
    do
    {
      if ((unint64_t)sub_216991950((uint64_t)a1) >= 2) {
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, a3, (pxrInternal__aapl__pxrReserved__ *)"");
      }
      sub_216991B40(a1, v8, &v9);
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteSdfPath(a2, 0, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v9);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
      sub_21697C414(&v9);
      if ((unint64_t)sub_216991950((uint64_t)a1) >= 2) {
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, 0, (pxrInternal__aapl__pxrReserved__ *)",\n");
      }
      ++v8;
    }
    while (v8 < sub_216991950((uint64_t)a1));
  }
  if ((unint64_t)sub_216991950((uint64_t)a1) > 1) {
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, a3 - 1, (pxrInternal__aapl__pxrReserved__ *)"]");
  }
  if ((a4 & 2) == 0) {
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a2, 0, (pxrInternal__aapl__pxrReserved__ *)"\n");
  }
}

void sub_216991EC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

const pxrInternal__aapl__pxrReserved__::TfToken *sub_216991ED4(const pxrInternal__aapl__pxrReserved__::TfToken *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition **a3)
{
  char v3 = a1;
  if (a1 != a2)
  {
    char v5 = a1;
    char v3 = a2;
    while (2)
    {
      while ((sub_21698BCEC(a3, v5) & 1) != 0)
      {
        char v5 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v5 + 8);
        if (v5 == v3) {
          return v3;
        }
      }
      do
      {
        char v3 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v3 - 8);
        if (v3 == v5) {
          return v5;
        }
      }
      while (!sub_21698BCEC(a3, v3));
      uint64_t v6 = *(void *)v5;
      *(void *)char v5 = *(void *)v3;
      char v5 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v5 + 8);
      *(void *)char v3 = v6;
      if (v3 != v5) {
        continue;
      }
      break;
    }
  }
  return v3;
}

uint64_t sub_216991F78(uint64_t a1)
{
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1)) {
    return 1;
  }
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  char v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 112);
  if (v3)
  {
    char v5 = (void *)v4(a1, 3);
    return *v5 != v5[1];
  }
  uint64_t v2 = 1;
  uint64_t v6 = (void *)v4(a1, 1);
  if (*v6 == v6[1])
  {
    uint64_t v7 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 112))(a1, 4);
    if (*v7 == v7[1])
    {
      unint64_t v8 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 112))(a1, 5);
      if (*v8 == v8[1])
      {
        int v9 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 112))(a1, 2);
        if (*v9 == v9[1])
        {
          char v5 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 112))(a1, 3);
          return *v5 != v5[1];
        }
      }
    }
  }
  return v2;
}

void sub_21699211C(atomic_uint **a1, atomic_uint **a2, uint64_t a3, char a4)
{
  unint64_t v8 = a2;
  int v9 = a1;
  long long v74 = a2;
  v75 = a1;
  while (1)
  {
    uint64_t v10 = (char *)v8 - (char *)v9;
    uint64_t v11 = v8 - v9;
    if (!(!v5 & v4))
    {
      switch(v11)
      {
        case 0:
        case 1:
          return;
        case 2:
          long long v74 = v8 - 1;
          if (sub_2169929A0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v8 - 1, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v9))
          {
            sub_216992A90(&v75, &v74);
          }
          break;
        case 3:
          long long v74 = v8 - 1;
          sub_216992BC8(v9, v9 + 1, v8 - 1);
          break;
        case 4:
          long long v74 = v8 - 1;
          sub_216992FAC(v9, v9 + 1, v9 + 2, v8 - 1);
          break;
        case 5:
          long long v74 = v8 - 1;
          sub_216992B00(v9, v9 + 1, v9 + 2, v9 + 3, v8 - 1);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v10 <= 191) {
      break;
    }
    if (!a3)
    {
      if (v9 != v8)
      {
        uint64_t v73 = v8;
        int64_t v48 = (unint64_t)(v11 - 2) >> 1;
        int64_t v49 = v48;
        do
        {
          int64_t v50 = v49;
          if (v48 >= v49)
          {
            uint64_t v51 = (2 * v49) | 1;
            int v52 = &v9[v51];
            if (2 * v49 + 2 < v11
              && sub_2169929A0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v9[v51], (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v52 + 1))
            {
              ++v52;
              uint64_t v51 = 2 * v50 + 2;
            }
            int v53 = &v9[v50];
            if (!sub_2169929A0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v52, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v53))
            {
              int v54 = *v53;
              int v78 = (atomic_uint **)v54;
              if (v54) {
                atomic_fetch_add(v54, 1u);
              }
              do
              {
                unsigned int v55 = v52;
                pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v53, v52);
                if (v48 < v51) {
                  break;
                }
                uint64_t v56 = (2 * v51) | 1;
                int v52 = &v9[v56];
                uint64_t v51 = 2 * v51 + 2;
                if (v51 < v11)
                {
                  if (sub_2169929A0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v9[v56], (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v52 + 1))
                  {
                    ++v52;
                  }
                  else
                  {
                    uint64_t v51 = v56;
                  }
                }
                else
                {
                  uint64_t v51 = v56;
                }
                int v53 = v55;
              }
              while (!sub_2169929A0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v52, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v78));
              pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v55, (atomic_uint **)&v78);
              pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v78);
            }
          }
          int64_t v49 = v50 - 1;
        }
        while (v50);
        uint64_t v57 = (unint64_t)v10 >> 3;
        BOOL v58 = v73;
        do
        {
          uint64_t v59 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)*v9;
          std::string v77 = (atomic_uint **)v59;
          if (v59) {
            atomic_fetch_add((atomic_uint *volatile)v59, 1u);
          }
          uint64_t v60 = 0;
          uint64_t v61 = v9;
          do
          {
            uint64_t v62 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v61[v60 + 1];
            uint64_t v63 = 2 * v60;
            uint64_t v60 = (2 * v60) | 1;
            uint64_t v64 = v63 + 2;
            if (v63 + 2 < v57 && sub_2169929A0(v62, v62 + 1))
            {
              ++v62;
              uint64_t v60 = v64;
            }
            pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v61, (atomic_uint **)v62);
            uint64_t v61 = (atomic_uint **)v62;
          }
          while (v60 <= (uint64_t)((unint64_t)(v57 - 2) >> 1));
          if (v62 == (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)--v58)
          {
            pxrInternal__aapl__pxrReserved__::SdfSpec::operator=((atomic_uint **)v62, (atomic_uint **)&v77);
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::SdfSpec::operator=((atomic_uint **)v62, v58);
            pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v58, (atomic_uint **)&v77);
            uint64_t v65 = (char *)v62 - (char *)v9 + 8;
            if (v65 >= 9)
            {
              unint64_t v66 = (((unint64_t)v65 >> 3) - 2) >> 1;
              int v67 = &v9[v66];
              if (sub_2169929A0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v67, v62))
              {
                unsigned int v68 = *v62;
                int v78 = (atomic_uint **)v68;
                if (v68) {
                  atomic_fetch_add((atomic_uint *volatile)v68, 1u);
                }
                do
                {
                  unsigned int v69 = v67;
                  pxrInternal__aapl__pxrReserved__::SdfSpec::operator=((atomic_uint **)v62, v67);
                  if (!v66) {
                    break;
                  }
                  unint64_t v66 = (v66 - 1) >> 1;
                  int v67 = &v9[v66];
                  uint64_t v62 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v69;
                }
                while (sub_2169929A0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v67, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v78));
                pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v69, (atomic_uint **)&v78);
                pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v78);
              }
            }
          }
          pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v77);
        }
        while (v57-- > 2);
      }
      return;
    }
    unint64_t v12 = (unint64_t)v11 >> 1;
    int v13 = v8 - 1;
    if ((unint64_t)v10 < 0x401)
    {
      sub_216992BC8(&v9[v12], v9, v13);
    }
    else
    {
      sub_216992BC8(v9, &v9[v12], v13);
      uint64_t v14 = 8 * v12 - 8;
      sub_216992BC8(v75 + 1, (atomic_uint **)((char *)v75 + v14), v74 - 2);
      uint64_t v15 = 8 * v12 + 8;
      sub_216992BC8(v75 + 2, (atomic_uint **)((char *)v75 + v15), v74 - 3);
      sub_216992BC8((atomic_uint **)((char *)v75 + v14), &v75[v12], (atomic_uint **)((char *)v75 + v15));
      int v78 = &v75[v12];
      sub_216992C7C(&v75, &v78);
    }
    --a3;
    if (a4)
    {
      char v16 = v74;
    }
    else
    {
      BOOL v17 = sub_2169929A0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v75 - 1, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v75);
      char v16 = v74;
      if (!v17)
      {
        int64x2_t v29 = v75;
        std::string v77 = v74;
        int v78 = v75;
        int v30 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)*v75;
        unint64_t v76 = (atomic_uint *)v30;
        if (v30)
        {
          atomic_fetch_add((atomic_uint *volatile)v30, 1u);
          char v16 = v77;
        }
        BOOL v31 = sub_2169929A0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v76, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v16 - 1);
        unsigned int v32 = v78 + 1;
        if (v31)
        {
          do
            int v78 = v32;
          while (!sub_2169929A0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v76, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v32++));
        }
        else
        {
          do
          {
            int v78 = v32;
            if (v32 >= v77) {
              break;
            }
          }
          while (!sub_2169929A0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v76, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v32++));
        }
        uint64_t v36 = v77;
        unint64_t v35 = v78;
        if (v78 < v77)
        {
          do
            std::string v77 = --v36;
          while (sub_2169929A0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v76, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v36));
          unint64_t v35 = v78;
        }
        if (v35 < v36)
        {
          do
          {
            sub_216992A90(&v78, &v77);
            do
              ++v78;
            while (!sub_2169929A0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v76, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v78));
            do
              --v77;
            while (sub_2169929A0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v76, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v77));
            unint64_t v35 = v78;
          }
          while (v78 < v77);
        }
        uint64_t v37 = v35 - 1;
        if (v35 - 1 != v29) {
          pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v29, v35 - 1);
        }
        pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v37, &v76);
        int v9 = v78;
        pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v76);
        goto LABEL_52;
      }
    }
    uint64_t v18 = v75;
    std::string v77 = v16;
    int v78 = v75;
    unsigned int v19 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity *)*v75;
    unint64_t v76 = (atomic_uint *)v19;
    uint64_t v20 = v75;
    if (v19)
    {
      atomic_fetch_add((atomic_uint *volatile)v19, 1u);
      uint64_t v20 = v78;
    }
    int v21 = v20 + 1;
    do
      int v78 = v21;
    while (sub_2169929A0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v21++, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v76));
    int v23 = v77;
    unsigned int v24 = v78;
    if (v78 - 1 == v18)
    {
      do
      {
        if (v24 >= v23) {
          break;
        }
        std::string v77 = --v23;
      }
      while (!sub_2169929A0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v23, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v76));
    }
    else
    {
      unsigned int v25 = v77 - 1;
      do
        std::string v77 = v25;
      while (!sub_2169929A0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v25--, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v76));
      unsigned int v24 = v78;
    }
    BOOL v27 = v77;
    int v9 = v24;
    if (v24 < v77)
    {
      do
      {
        sub_216992A90(&v78, &v77);
        do
          ++v78;
        while (sub_2169929A0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v78, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v76));
        do
          --v77;
        while (!sub_2169929A0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v77, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v76));
        int v9 = v78;
      }
      while (v78 < v77);
    }
    if (v9 - 1 != v18) {
      pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v18, v9 - 1);
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v9 - 1, &v76);
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v76);
    if (v24 < v27) {
      goto LABEL_30;
    }
    int v28 = sub_216992CEC(v75, v9 - 1);
    if (!sub_216992CEC(v9, v74))
    {
      if (v28) {
        goto LABEL_53;
      }
LABEL_30:
      sub_21699211C(v75, v9 - 1, a3, a4 & 1);
LABEL_52:
      a4 = 0;
LABEL_53:
      v75 = v9;
      goto LABEL_54;
    }
    if (v28) {
      return;
    }
    long long v74 = v9 - 1;
    int v9 = v75;
LABEL_54:
    unint64_t v8 = v74;
  }
  uint64_t v38 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(v9 + 1);
  BOOL v40 = v9 == v8 || v38 == (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v8;
  if (a4)
  {
    if (!v40)
    {
      uint64_t v41 = 0;
      int v42 = (atomic_uint ***)v9;
      do
      {
        uint64_t v43 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v42;
        int v42 = (atomic_uint ***)v38;
        if (sub_2169929A0(v38, v43))
        {
          int v44 = *v42;
          int v78 = v44;
          if (v44) {
            atomic_fetch_add((atomic_uint *volatile)v44, 1u);
          }
          uint64_t v45 = v41;
          while (1)
          {
            pxrInternal__aapl__pxrReserved__::SdfSpec::operator=((atomic_uint **)((char *)v9 + v45 + 8), (atomic_uint **)((char *)v9 + v45));
            if (!v45) {
              break;
            }
            BOOL v46 = sub_2169929A0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v78, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)((char *)v9 + v45 - 8));
            v45 -= 8;
            if (!v46)
            {
              unsigned int v47 = (atomic_uint **)((char *)v9 + v45 + 8);
              goto LABEL_80;
            }
          }
          unsigned int v47 = v9;
LABEL_80:
          pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v47, (atomic_uint **)&v78);
          pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v78);
        }
        uint64_t v38 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(v42 + 1);
        v41 += 8;
      }
      while (v42 + 1 != (atomic_uint ***)v8);
    }
  }
  else if (!v40)
  {
    do
    {
      BOOL v71 = (atomic_uint ***)v38;
      if (sub_2169929A0(v38, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v9))
      {
        uint64_t v72 = *v71;
        int v78 = v72;
        if (v72) {
          atomic_fetch_add((atomic_uint *volatile)v72, 1u);
        }
        do
        {
          pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v9 + 1, v9);
          --v9;
        }
        while (sub_2169929A0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v78, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v9));
        pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v9 + 1, (atomic_uint **)&v78);
        pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v78);
      }
      uint64_t v38 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(v71 + 1);
      int v9 = (atomic_uint **)v71;
    }
    while (v71 + 1 != (atomic_uint ***)v8);
  }
}

void sub_2169928F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va1);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

BOOL sub_2169929A0(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a2)
{
  int v3 = sub_216992ED0(a1);
  pxrInternal__aapl__pxrReserved__::SdfVariantSpec::GetName((pxrInternal__aapl__pxrReserved__::SdfVariantSpec *)v3, (uint64_t)__p);
  char v4 = sub_216992ED0(a2);
  pxrInternal__aapl__pxrReserved__::SdfVariantSpec::GetName((pxrInternal__aapl__pxrReserved__::SdfVariantSpec *)v4, (uint64_t)v15);
  int v5 = (char)v16;
  uint64_t v6 = (void *)v15[0];
  unsigned __int8 v7 = v18;
  if ((v18 & 0x80u) == 0) {
    size_t v8 = v18;
  }
  else {
    size_t v8 = (size_t)__p[1];
  }
  if ((v18 & 0x80u) == 0) {
    int v9 = __p;
  }
  else {
    int v9 = (void **)__p[0];
  }
  if ((v16 & 0x80u) == 0) {
    size_t v10 = v16;
  }
  else {
    size_t v10 = v15[1];
  }
  if ((v16 & 0x80u) == 0) {
    uint64_t v11 = v15;
  }
  else {
    uint64_t v11 = (void *)v15[0];
  }
  if (v10 >= v8) {
    size_t v12 = v8;
  }
  else {
    size_t v12 = v10;
  }
  int v13 = memcmp(v9, v11, v12);
  if (v5 < 0)
  {
    operator delete(v6);
    if ((v18 & 0x80) == 0) {
      goto LABEL_18;
    }
  }
  else if ((v7 & 0x80) == 0)
  {
    goto LABEL_18;
  }
  operator delete(__p[0]);
LABEL_18:
  if (v13) {
    return v13 < 0;
  }
  else {
    return v8 < v10;
  }
}

void sub_216992A74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216992A90(atomic_uint ***a1, atomic_uint ***a2)
{
  uint64_t v2 = *a1;
  int v3 = *a2;
  char v4 = *v2;
  int v5 = v4;
  if (v4) {
    atomic_fetch_add(v4, 1u);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v2, v3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v3, &v5);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v5);
}

void sub_216992AEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

void sub_216992B00(atomic_uint **a1, atomic_uint **a2, atomic_uint **a3, atomic_uint **a4, atomic_uint **a5)
{
  int v13 = a2;
  uint64_t v14 = a1;
  uint64_t v11 = a4;
  size_t v12 = a3;
  size_t v10 = a5;
  sub_216992FAC(a1, a2, a3, a4);
  if (sub_2169929A0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a5, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a4))
  {
    sub_216992A90(&v11, &v10);
    if (sub_2169929A0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v11, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a3))
    {
      sub_216992A90(&v12, &v11);
      if (sub_2169929A0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v12, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a2))
      {
        sub_216992A90(&v13, &v12);
        if (sub_2169929A0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v13, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a1))
        {
          sub_216992A90(&v14, &v13);
        }
      }
    }
  }
}

void sub_216992BC8(atomic_uint **a1, atomic_uint **a2, atomic_uint **a3)
{
  size_t v10 = a2;
  uint64_t v11 = a1;
  int v9 = a3;
  BOOL v5 = sub_2169929A0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a2, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a1);
  BOOL v6 = sub_2169929A0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a3, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a2);
  if (v5)
  {
    if (v6)
    {
      unsigned __int8 v7 = &v11;
    }
    else
    {
      sub_216992A90(&v11, &v10);
      if (!sub_2169929A0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v9, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v10))return; {
      unsigned __int8 v7 = &v10;
      }
    }
    size_t v8 = &v9;
    goto LABEL_10;
  }
  if (v6)
  {
    sub_216992A90(&v10, &v9);
    if (sub_2169929A0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v10, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v11))
    {
      unsigned __int8 v7 = &v11;
      size_t v8 = &v10;
LABEL_10:
      sub_216992A90(v7, v8);
    }
  }
}

void sub_216992C7C(atomic_uint ***a1, atomic_uint ***a2)
{
  uint64_t v2 = *a1;
  int v3 = *a2;
  char v4 = *v2;
  BOOL v5 = v4;
  if (v4) {
    atomic_fetch_add(v4, 1u);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v2, v3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v3, &v5);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v5);
}

void sub_216992CD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216992CEC(atomic_uint **a1, atomic_uint **a2)
{
  size_t v12 = a2;
  int v13 = a1;
  BOOL v4 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v4;
    case 2:
      size_t v12 = a2 - 1;
      if (sub_2169929A0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a2 - 1, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a1))
      {
        sub_216992A90(&v13, &v12);
      }
      return v4;
    case 3:
      sub_216992BC8(a1, a1 + 1, a2 - 1);
      return v4;
    case 4:
      sub_216992FAC(a1, a1 + 1, a1 + 2, a2 - 1);
      return v4;
    case 5:
      sub_216992B00(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return v4;
    default:
      BOOL v5 = a1 + 2;
      sub_216992BC8(a1, a1 + 1, a1 + 2);
      BOOL v6 = a1 + 3;
      BOOL v4 = 1;
      if (v6 == a2) {
        return v4;
      }
      int v7 = 0;
      break;
  }
  while (!sub_2169929A0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v6, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v5))
  {
LABEL_13:
    BOOL v5 = v6++;
    if (v6 == v12) {
      return 1;
    }
  }
  size_t v8 = *v6;
  uint64_t v11 = v8;
  if (v8) {
    atomic_fetch_add(v8, 1u);
  }
  do
  {
    int v9 = v5;
    pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v5 + 1, v5);
    if (v5 == v13) {
      break;
    }
    --v5;
  }
  while (sub_2169929A0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v11, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v9 - 1));
  pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(v9, &v11);
  if (++v7 != 8)
  {
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v11);
    goto LABEL_13;
  }
  BOOL v4 = v6 + 1 == v12;
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v11);
  return v4;
}

void sub_216992EA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Sdf_Identity **sub_216992ED0(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1)
{
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a1))
  {
    v7[0] = "sdf/declareHandles.h";
    v7[1] = "operator->";
    v7[2] = 96;
    void v7[3] = "SpecType *pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfVariantSpec>::ope"
            "rator->() const [T = pxrInternal__aapl__pxrReserved__::SdfVariantSpec]";
    char v8 = 0;
    int v9 = 4;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x8000000217473E06 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v5);
    if (v6 >= 0) {
      BOOL v4 = v5;
    }
    else {
      BOOL v4 = (void *)v5[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v7, (pxrInternal__aapl__pxrReserved__ *)"Dereferenced an invalid %s", v3, v4);
  }
  return a1;
}

void sub_216992F78(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x216992EF0);
}

void sub_216992F90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216992FAC(atomic_uint **a1, atomic_uint **a2, atomic_uint **a3, atomic_uint **a4)
{
  size_t v10 = a2;
  uint64_t v11 = a1;
  char v8 = a4;
  int v9 = a3;
  sub_216992BC8(a1, a2, a3);
  if (sub_2169929A0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a4, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a3))
  {
    sub_216992A90(&v9, &v8);
    if (sub_2169929A0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v9, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a2))
    {
      sub_216992A90(&v10, &v9);
      if (sub_2169929A0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v10, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a1))
      {
        sub_216992A90(&v11, &v10);
      }
    }
  }
}

void *sub_216993048(void *a1)
{
  if (*a1) {
    sub_21699309C(a1);
  }
  uint64_t v2 = (void *)a1[4];
  a1[4] = 0;
  if (v2) {
    operator delete[](v2);
  }
  int v3 = (std::__shared_weak_count *)a1[1];
  if (v3) {
    sub_216784EC4(v3);
  }
  return a1;
}

uint64_t sub_21699309C(void *a1)
{
  if (!*a1) {
    return 1;
  }
  if (sub_21699311C(a1)) {
    uint64_t v2 = (*(uint64_t (**)(void))(*(void *)*a1 + 16))();
  }
  else {
    uint64_t v2 = 0;
  }
  int v3 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  if (v3) {
    sub_216784EC4(v3);
  }
  return v2;
}

uint64_t sub_21699311C(void *a1)
{
  uint64_t v1 = a1[5];
  if (!v1) {
    return 1;
  }
  uint64_t v3 = (*(uint64_t (**)(void, void, uint64_t, void))(*(void *)*a1 + 24))(*a1, a1[4], v1, a1[2]);
  if (v3 == a1[5])
  {
    a1[2] += v3;
    a1[5] = 0;
    return 1;
  }
  v5[0] = "sdf/fileIO.h";
  v5[1] = "_FlushBuffer";
  void v5[2] = 163;
  v5[3] = "BOOL pxrInternal__aapl__pxrReserved__::Sdf_TextOutput::_FlushBuffer()";
  char v6 = 0;
  int v7 = 3;
  pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"Failed to write bytes");
  return 0;
}

void pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteListOp<pxrInternal__aapl__pxrReserved__::SdfPath>(pxrInternal__aapl__pxrReserved__::TfToken *a1, uint64_t a2, void *a3, uint64_t a4)
{
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0) {
    Emptyunint64_t String = (uint64_t *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  }
  if (*(unsigned char *)a4)
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v12 = 0;
    sub_2169981CC(a1, a2, (uint64_t)EmptyString, a4 + 8, (uint64_t)__p);
    goto LABEL_20;
  }
  if (*(void *)(a4 + 104) != *(void *)(a4 + 112))
  {
    sub_216779094(__p, "delete");
    sub_2169981CC(a1, a2, (uint64_t)EmptyString, a4 + 104, (uint64_t)__p);
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[0]);
    }
  }
  if (*(void *)(a4 + 32) != *(void *)(a4 + 40))
  {
    sub_216779094(__p, "add");
    sub_2169981CC(a1, a2, (uint64_t)EmptyString, a4 + 32, (uint64_t)__p);
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[0]);
    }
  }
  if (*(void *)(a4 + 56) != *(void *)(a4 + 64))
  {
    sub_216779094(__p, "prepend");
    sub_2169981CC(a1, a2, (uint64_t)EmptyString, a4 + 56, (uint64_t)__p);
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[0]);
    }
  }
  if (*(void *)(a4 + 80) != *(void *)(a4 + 88))
  {
    sub_216779094(__p, "append");
    sub_2169981CC(a1, a2, (uint64_t)EmptyString, a4 + 80, (uint64_t)__p);
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v8 = *(void *)(a4 + 128);
  uint64_t v9 = *(void *)(a4 + 136);
  uint64_t v10 = a4 + 128;
  if (v8 != v9)
  {
    sub_216779094(__p, "reorder");
    sub_2169981CC(a1, a2, (uint64_t)EmptyString, v10, (uint64_t)__p);
LABEL_20:
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_2169933D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>(pxrInternal__aapl__pxrReserved__::TfToken *a1, uint64_t a2, void *a3, uint64_t a4)
{
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0) {
    Emptyunint64_t String = (uint64_t *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  }
  if (*(unsigned char *)a4)
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v12 = 0;
    sub_2169985B8(a1, a2, (uint64_t)EmptyString, (uint64_t *)(a4 + 8), (uint64_t)__p);
    goto LABEL_20;
  }
  if (*(void *)(a4 + 104) != *(void *)(a4 + 112))
  {
    sub_216779094(__p, "delete");
    sub_2169985B8(a1, a2, (uint64_t)EmptyString, (uint64_t *)(a4 + 104), (uint64_t)__p);
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[0]);
    }
  }
  if (*(void *)(a4 + 32) != *(void *)(a4 + 40))
  {
    sub_216779094(__p, "add");
    sub_2169985B8(a1, a2, (uint64_t)EmptyString, (uint64_t *)(a4 + 32), (uint64_t)__p);
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[0]);
    }
  }
  if (*(void *)(a4 + 56) != *(void *)(a4 + 64))
  {
    sub_216779094(__p, "prepend");
    sub_2169985B8(a1, a2, (uint64_t)EmptyString, (uint64_t *)(a4 + 56), (uint64_t)__p);
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[0]);
    }
  }
  if (*(void *)(a4 + 80) != *(void *)(a4 + 88))
  {
    sub_216779094(__p, "append");
    sub_2169985B8(a1, a2, (uint64_t)EmptyString, (uint64_t *)(a4 + 80), (uint64_t)__p);
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v8 = *(void *)(a4 + 128);
  uint64_t v9 = *(void *)(a4 + 136);
  uint64_t v10 = (uint64_t *)(a4 + 128);
  if (v8 != v9)
  {
    sub_216779094(__p, "reorder");
    sub_2169985B8(a1, a2, (uint64_t)EmptyString, v10, (uint64_t)__p);
LABEL_20:
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_2169935EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteListOp<pxrInternal__aapl__pxrReserved__::SdfReference>(pxrInternal__aapl__pxrReserved__::TfToken *a1, uint64_t a2, void *a3, uint64_t a4)
{
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0) {
    Emptyunint64_t String = (uint64_t *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  }
  if (*(unsigned char *)a4)
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v12 = 0;
    sub_216998A34(a1, a2, (uint64_t)EmptyString, (uint64_t *)(a4 + 8), (uint64_t)__p);
    goto LABEL_20;
  }
  if (*(void *)(a4 + 104) != *(void *)(a4 + 112))
  {
    sub_216779094(__p, "delete");
    sub_216998A34(a1, a2, (uint64_t)EmptyString, (uint64_t *)(a4 + 104), (uint64_t)__p);
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[0]);
    }
  }
  if (*(void *)(a4 + 32) != *(void *)(a4 + 40))
  {
    sub_216779094(__p, "add");
    sub_216998A34(a1, a2, (uint64_t)EmptyString, (uint64_t *)(a4 + 32), (uint64_t)__p);
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[0]);
    }
  }
  if (*(void *)(a4 + 56) != *(void *)(a4 + 64))
  {
    sub_216779094(__p, "prepend");
    sub_216998A34(a1, a2, (uint64_t)EmptyString, (uint64_t *)(a4 + 56), (uint64_t)__p);
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[0]);
    }
  }
  if (*(void *)(a4 + 80) != *(void *)(a4 + 88))
  {
    sub_216779094(__p, "append");
    sub_216998A34(a1, a2, (uint64_t)EmptyString, (uint64_t *)(a4 + 80), (uint64_t)__p);
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v8 = *(void *)(a4 + 128);
  uint64_t v9 = *(void *)(a4 + 136);
  uint64_t v10 = (uint64_t *)(a4 + 128);
  if (v8 != v9)
  {
    sub_216779094(__p, "reorder");
    sub_216998A34(a1, a2, (uint64_t)EmptyString, v10, (uint64_t)__p);
LABEL_20:
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_216993808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteListOp<int>(pxrInternal__aapl__pxrReserved__::TfToken *a1, uint64_t a2, void *a3, uint64_t a4)
{
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0) {
    Emptyunint64_t String = (uint64_t *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  }
  if (*(unsigned char *)a4)
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v12 = 0;
    sub_216998FD0(a1, a2, (uint64_t)EmptyString, (void *)(a4 + 8), (uint64_t)__p);
    goto LABEL_20;
  }
  if (*(void *)(a4 + 104) != *(void *)(a4 + 112))
  {
    sub_216779094(__p, "delete");
    sub_216998FD0(a1, a2, (uint64_t)EmptyString, (void *)(a4 + 104), (uint64_t)__p);
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[0]);
    }
  }
  if (*(void *)(a4 + 32) != *(void *)(a4 + 40))
  {
    sub_216779094(__p, "add");
    sub_216998FD0(a1, a2, (uint64_t)EmptyString, (void *)(a4 + 32), (uint64_t)__p);
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[0]);
    }
  }
  if (*(void *)(a4 + 56) != *(void *)(a4 + 64))
  {
    sub_216779094(__p, "prepend");
    sub_216998FD0(a1, a2, (uint64_t)EmptyString, (void *)(a4 + 56), (uint64_t)__p);
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[0]);
    }
  }
  if (*(void *)(a4 + 80) != *(void *)(a4 + 88))
  {
    sub_216779094(__p, "append");
    sub_216998FD0(a1, a2, (uint64_t)EmptyString, (void *)(a4 + 80), (uint64_t)__p);
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v8 = *(void *)(a4 + 128);
  uint64_t v9 = *(void *)(a4 + 136);
  uint64_t v10 = (void *)(a4 + 128);
  if (v8 != v9)
  {
    sub_216779094(__p, "reorder");
    sub_216998FD0(a1, a2, (uint64_t)EmptyString, v10, (uint64_t)__p);
LABEL_20:
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_216993A24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteListOp<long long>(pxrInternal__aapl__pxrReserved__::TfToken *a1, uint64_t a2, void *a3, uint64_t a4)
{
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0) {
    Emptyunint64_t String = (uint64_t *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  }
  if (*(unsigned char *)a4)
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v12 = 0;
    sub_216999364(a1, a2, (uint64_t)EmptyString, (void *)(a4 + 8), (uint64_t)__p);
    goto LABEL_20;
  }
  if (*(void *)(a4 + 104) != *(void *)(a4 + 112))
  {
    sub_216779094(__p, "delete");
    sub_216999364(a1, a2, (uint64_t)EmptyString, (void *)(a4 + 104), (uint64_t)__p);
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[0]);
    }
  }
  if (*(void *)(a4 + 32) != *(void *)(a4 + 40))
  {
    sub_216779094(__p, "add");
    sub_216999364(a1, a2, (uint64_t)EmptyString, (void *)(a4 + 32), (uint64_t)__p);
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[0]);
    }
  }
  if (*(void *)(a4 + 56) != *(void *)(a4 + 64))
  {
    sub_216779094(__p, "prepend");
    sub_216999364(a1, a2, (uint64_t)EmptyString, (void *)(a4 + 56), (uint64_t)__p);
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[0]);
    }
  }
  if (*(void *)(a4 + 80) != *(void *)(a4 + 88))
  {
    sub_216779094(__p, "append");
    sub_216999364(a1, a2, (uint64_t)EmptyString, (void *)(a4 + 80), (uint64_t)__p);
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v8 = *(void *)(a4 + 128);
  uint64_t v9 = *(void *)(a4 + 136);
  uint64_t v10 = (void *)(a4 + 128);
  if (v8 != v9)
  {
    sub_216779094(__p, "reorder");
    sub_216999364(a1, a2, (uint64_t)EmptyString, v10, (uint64_t)__p);
LABEL_20:
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_216993C40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteListOp<unsigned int>(pxrInternal__aapl__pxrReserved__::TfToken *a1, uint64_t a2, void *a3, uint64_t a4)
{
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0) {
    Emptyunint64_t String = (uint64_t *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  }
  if (*(unsigned char *)a4)
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v12 = 0;
    sub_216999840(a1, a2, (uint64_t)EmptyString, (void *)(a4 + 8), (uint64_t)__p);
    goto LABEL_20;
  }
  if (*(void *)(a4 + 104) != *(void *)(a4 + 112))
  {
    sub_216779094(__p, "delete");
    sub_216999840(a1, a2, (uint64_t)EmptyString, (void *)(a4 + 104), (uint64_t)__p);
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[0]);
    }
  }
  if (*(void *)(a4 + 32) != *(void *)(a4 + 40))
  {
    sub_216779094(__p, "add");
    sub_216999840(a1, a2, (uint64_t)EmptyString, (void *)(a4 + 32), (uint64_t)__p);
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[0]);
    }
  }
  if (*(void *)(a4 + 56) != *(void *)(a4 + 64))
  {
    sub_216779094(__p, "prepend");
    sub_216999840(a1, a2, (uint64_t)EmptyString, (void *)(a4 + 56), (uint64_t)__p);
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[0]);
    }
  }
  if (*(void *)(a4 + 80) != *(void *)(a4 + 88))
  {
    sub_216779094(__p, "append");
    sub_216999840(a1, a2, (uint64_t)EmptyString, (void *)(a4 + 80), (uint64_t)__p);
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v8 = *(void *)(a4 + 128);
  uint64_t v9 = *(void *)(a4 + 136);
  uint64_t v10 = (void *)(a4 + 128);
  if (v8 != v9)
  {
    sub_216779094(__p, "reorder");
    sub_216999840(a1, a2, (uint64_t)EmptyString, v10, (uint64_t)__p);
LABEL_20:
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_216993E5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteListOp<unsigned long long>(pxrInternal__aapl__pxrReserved__::TfToken *a1, uint64_t a2, void *a3, uint64_t a4)
{
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0) {
    Emptyunint64_t String = (uint64_t *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  }
  if (*(unsigned char *)a4)
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v12 = 0;
    sub_216999BD4(a1, a2, (uint64_t)EmptyString, (void *)(a4 + 8), (uint64_t)__p);
    goto LABEL_20;
  }
  if (*(void *)(a4 + 104) != *(void *)(a4 + 112))
  {
    sub_216779094(__p, "delete");
    sub_216999BD4(a1, a2, (uint64_t)EmptyString, (void *)(a4 + 104), (uint64_t)__p);
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[0]);
    }
  }
  if (*(void *)(a4 + 32) != *(void *)(a4 + 40))
  {
    sub_216779094(__p, "add");
    sub_216999BD4(a1, a2, (uint64_t)EmptyString, (void *)(a4 + 32), (uint64_t)__p);
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[0]);
    }
  }
  if (*(void *)(a4 + 56) != *(void *)(a4 + 64))
  {
    sub_216779094(__p, "prepend");
    sub_216999BD4(a1, a2, (uint64_t)EmptyString, (void *)(a4 + 56), (uint64_t)__p);
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[0]);
    }
  }
  if (*(void *)(a4 + 80) != *(void *)(a4 + 88))
  {
    sub_216779094(__p, "append");
    sub_216999BD4(a1, a2, (uint64_t)EmptyString, (void *)(a4 + 80), (uint64_t)__p);
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v8 = *(void *)(a4 + 128);
  uint64_t v9 = *(void *)(a4 + 136);
  uint64_t v10 = (void *)(a4 + 128);
  if (v8 != v9)
  {
    sub_216779094(__p, "reorder");
    sub_216999BD4(a1, a2, (uint64_t)EmptyString, v10, (uint64_t)__p);
LABEL_20:
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_216994078(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteListOp<std::string>(pxrInternal__aapl__pxrReserved__::TfToken *a1, uint64_t a2, void *a3, uint64_t a4)
{
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0) {
    Emptyunint64_t String = (uint64_t *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  }
  if (*(unsigned char *)a4)
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v12 = 0;
    sub_21699A0B0(a1, a2, (uint64_t)EmptyString, (void *)(a4 + 8), (uint64_t)__p);
    goto LABEL_20;
  }
  if (*(void *)(a4 + 104) != *(void *)(a4 + 112))
  {
    sub_216779094(__p, "delete");
    sub_21699A0B0(a1, a2, (uint64_t)EmptyString, (void *)(a4 + 104), (uint64_t)__p);
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[0]);
    }
  }
  if (*(void *)(a4 + 32) != *(void *)(a4 + 40))
  {
    sub_216779094(__p, "add");
    sub_21699A0B0(a1, a2, (uint64_t)EmptyString, (void *)(a4 + 32), (uint64_t)__p);
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[0]);
    }
  }
  if (*(void *)(a4 + 56) != *(void *)(a4 + 64))
  {
    sub_216779094(__p, "prepend");
    sub_21699A0B0(a1, a2, (uint64_t)EmptyString, (void *)(a4 + 56), (uint64_t)__p);
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[0]);
    }
  }
  if (*(void *)(a4 + 80) != *(void *)(a4 + 88))
  {
    sub_216779094(__p, "append");
    sub_21699A0B0(a1, a2, (uint64_t)EmptyString, (void *)(a4 + 80), (uint64_t)__p);
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v8 = *(void *)(a4 + 128);
  uint64_t v9 = *(void *)(a4 + 136);
  uint64_t v10 = (void *)(a4 + 128);
  if (v8 != v9)
  {
    sub_216779094(__p, "reorder");
    sub_21699A0B0(a1, a2, (uint64_t)EmptyString, v10, (uint64_t)__p);
LABEL_20:
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_216994294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteListOp<pxrInternal__aapl__pxrReserved__::TfToken>(pxrInternal__aapl__pxrReserved__::TfToken *a1, uint64_t a2, void *a3, uint64_t a4)
{
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0) {
    Emptyunint64_t String = (uint64_t *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  }
  if (*(unsigned char *)a4)
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v12 = 0;
    sub_21699A304(a1, a2, (uint64_t)EmptyString, (void *)(a4 + 8), (uint64_t)__p);
    goto LABEL_20;
  }
  if (*(void *)(a4 + 104) != *(void *)(a4 + 112))
  {
    sub_216779094(__p, "delete");
    sub_21699A304(a1, a2, (uint64_t)EmptyString, (void *)(a4 + 104), (uint64_t)__p);
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[0]);
    }
  }
  if (*(void *)(a4 + 32) != *(void *)(a4 + 40))
  {
    sub_216779094(__p, "add");
    sub_21699A304(a1, a2, (uint64_t)EmptyString, (void *)(a4 + 32), (uint64_t)__p);
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[0]);
    }
  }
  if (*(void *)(a4 + 56) != *(void *)(a4 + 64))
  {
    sub_216779094(__p, "prepend");
    sub_21699A304(a1, a2, (uint64_t)EmptyString, (void *)(a4 + 56), (uint64_t)__p);
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[0]);
    }
  }
  if (*(void *)(a4 + 80) != *(void *)(a4 + 88))
  {
    sub_216779094(__p, "append");
    sub_21699A304(a1, a2, (uint64_t)EmptyString, (void *)(a4 + 80), (uint64_t)__p);
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v8 = *(void *)(a4 + 128);
  uint64_t v9 = *(void *)(a4 + 136);
  uint64_t v10 = (void *)(a4 + 128);
  if (v8 != v9)
  {
    sub_216779094(__p, "reorder");
    sub_21699A304(a1, a2, (uint64_t)EmptyString, v10, (uint64_t)__p);
LABEL_20:
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_2169944B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>(pxrInternal__aapl__pxrReserved__::TfToken *a1, uint64_t a2, void *a3, uint64_t a4)
{
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) != 0) {
    Emptyunint64_t String = (uint64_t *)((*a3 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  }
  if (*(unsigned char *)a4)
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v12 = 0;
    sub_21699A670(a1, a2, (uint64_t)EmptyString, (void *)(a4 + 8), (uint64_t)__p);
    goto LABEL_20;
  }
  if (*(void *)(a4 + 104) != *(void *)(a4 + 112))
  {
    sub_216779094(__p, "delete");
    sub_21699A670(a1, a2, (uint64_t)EmptyString, (void *)(a4 + 104), (uint64_t)__p);
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[0]);
    }
  }
  if (*(void *)(a4 + 32) != *(void *)(a4 + 40))
  {
    sub_216779094(__p, "add");
    sub_21699A670(a1, a2, (uint64_t)EmptyString, (void *)(a4 + 32), (uint64_t)__p);
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[0]);
    }
  }
  if (*(void *)(a4 + 56) != *(void *)(a4 + 64))
  {
    sub_216779094(__p, "prepend");
    sub_21699A670(a1, a2, (uint64_t)EmptyString, (void *)(a4 + 56), (uint64_t)__p);
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[0]);
    }
  }
  if (*(void *)(a4 + 80) != *(void *)(a4 + 88))
  {
    sub_216779094(__p, "append");
    sub_21699A670(a1, a2, (uint64_t)EmptyString, (void *)(a4 + 80), (uint64_t)__p);
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v8 = *(void *)(a4 + 128);
  uint64_t v9 = *(void *)(a4 + 136);
  uint64_t v10 = (void *)(a4 + 128);
  if (v8 != v9)
  {
    sub_216779094(__p, "reorder");
    sub_21699A670(a1, a2, (uint64_t)EmptyString, v10, (uint64_t)__p);
LABEL_20:
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_2169946CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(void *a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v5 = a2;
    do
    {
      sub_216997948(a1, "    ", 4uLL);
      --v5;
    }
    while (v5);
  }
  int v6 = *(char *)(a3 + 23);
  if (v6 >= 0) {
    int v7 = (char *)a3;
  }
  else {
    int v7 = *(char **)a3;
  }
  if (v6 >= 0) {
    unint64_t v8 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    unint64_t v8 = *(void *)(a3 + 8);
  }

  return sub_216997948(a1, v7, v8);
}

void pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(void *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__ *this, ...)
{
  va_start(va, this);
  if (a2)
  {
    uint64_t v5 = a2;
    do
    {
      sub_216997948(a1, "    ", 4uLL);
      --v5;
    }
    while (v5);
  }
  va_copy(v10, va);
  pxrInternal__aapl__pxrReserved__::TfVStringPrintf((uint64_t *)__p, this, va, (char *)this);
  if ((v9 & 0x80u) == 0) {
    int v6 = (char *)__p;
  }
  else {
    int v6 = (char *)__p[0];
  }
  if ((v9 & 0x80u) == 0) {
    unint64_t v7 = v9;
  }
  else {
    unint64_t v7 = (unint64_t)__p[1];
  }
  sub_216997948(a1, v6, v7);
  if ((char)v9 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216994824(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::OpenParensIfNeeded(void *a1, char a2, int a3)
{
  if (a2)
  {
    if (a3) {
      return 1;
    }
    sub_216779094(&__p, "; ");
    if ((v10 & 0x80u) == 0) {
      p_p = (char *)&__p;
    }
    else {
      p_p = (char *)__p;
    }
    if ((v10 & 0x80u) == 0) {
      unint64_t v5 = v10;
    }
    else {
      unint64_t v5 = v9;
    }
  }
  else
  {
    if (a3) {
      int v6 = " (\n";
    }
    else {
      int v6 = " (";
    }
    sub_216779094(&__p, v6);
    if ((v10 & 0x80u) == 0) {
      p_p = (char *)&__p;
    }
    else {
      p_p = (char *)__p;
    }
    if ((v10 & 0x80u) == 0) {
      unint64_t v5 = v10;
    }
    else {
      unint64_t v5 = v9;
    }
  }
  sub_216997948(a1, p_p, v5);
  if ((char)v10 < 0) {
    operator delete(__p);
  }
  return 1;
}

void sub_216994900(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::CloseParensIfNeeded(void *a1, uint64_t a2, int a3, int a4)
{
  if (a3)
  {
    if (!a4) {
      a2 = 0;
    }
    sub_216779094(__p, ")");
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a1, a2, (uint64_t)__p);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_216994984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteQuotedString(void *a1, uint64_t a2, const std::string *a3)
{
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Quote(a3, &__p);
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a1, a2, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_2169949F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Quote@<X0>(const std::string *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = (std::string *)a1;
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  int v4 = 34;
  if (std::string::find(a1, 34, 0) != -1)
  {
    if (std::string::find(v2, 39, 0) == -1) {
      int v4 = 39;
    }
    else {
      int v4 = 34;
    }
  }
  std::string::size_type v5 = std::string::find(v2, 10, 0);
  if (v5 != -1)
  {
    std::string::push_back(a2, v4);
    std::string::push_back(a2, v4);
  }
  std::string::push_back(a2, v4);
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
  }
  unsigned __int8 v6 = v2->__r_.__value_.__s.__data_[0];
  if (v2->__r_.__value_.__s.__data_[0])
  {
    do
    {
      if ((v6 & 0xE0) == 0xC0)
      {
        unsigned int v7 = 2;
      }
      else if ((v6 & 0xF0) == 0xE0)
      {
        unsigned int v7 = 3;
      }
      else
      {
        if ((v6 & 0xF8) != 0xF0) {
          goto LABEL_20;
        }
        unsigned int v7 = 4;
      }
      uint64_t v8 = v7;
      uint64_t v9 = 1;
      while ((v2->__r_.__value_.__s.__data_[v9] & 0xC0) == 0x80)
      {
        if (v8 == ++v9)
        {
          sub_216882688(a2, (char *)v2, (char *)v2 + v8);
          uint64_t v2 = (std::string *)((char *)v2 + (v8 - 1));
          goto LABEL_35;
        }
      }
LABEL_20:
      if ((char)v6 > 12)
      {
        if (v6 == 13)
        {
          unsigned __int8 v10 = "\\r";
        }
        else
        {
          if (v6 != 92)
          {
LABEL_31:
            if (v4 == v6)
            {
              std::string::push_back(a2, 92);
              unsigned __int8 v6 = v4;
            }
            else if ((v6 - 32) >= 0x5Fu)
            {
              strcpy(__s, "\\x__");
              __s[2] = a0123456789abcd[v6 >> 4];
              __s[3] = a0123456789abcd[v6 & 0xF];
              std::string::append(a2, __s);
              goto LABEL_35;
            }
LABEL_34:
            std::string::push_back(a2, v6);
            goto LABEL_35;
          }
          unsigned __int8 v10 = "\\\\"";
        }
      }
      else if (v6 == 9)
      {
        unsigned __int8 v10 = "\\t";
      }
      else
      {
        if (v6 != 10) {
          goto LABEL_31;
        }
        if (v5 != -1) {
          goto LABEL_34;
        }
        unsigned __int8 v10 = "\\n";
      }
      std::string::append(a2, v10);
LABEL_35:
      int v11 = v2->__r_.__value_.__s.__data_[1];
      uint64_t v2 = (std::string *)((char *)v2 + 1);
      unsigned __int8 v6 = v11;
    }
    while (v11);
  }
  if (v5 == -1) {
    std::string::size_type v12 = 1;
  }
  else {
    std::string::size_type v12 = 3;
  }
  return std::string::append(a2, v12, v4);
}

void sub_216994C84(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteAssetPath(void *a1, uint64_t a2, const std::string *a3)
{
  sub_216994D1C(a3, &__p);
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a1, a2, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_216994D00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_216994D1C@<X0>(const std::string *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = a1;
  std::string::size_type v4 = std::string::find(a1, 64, 0);
  std::string::size_type v5 = v4;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  std::string::size_type size = HIBYTE(v2->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0) {
    std::string::size_type size = v2->__r_.__value_.__l.__size_;
  }
  uint64_t v7 = 2;
  if (v4 != -1) {
    uint64_t v7 = 6;
  }
  std::string::reserve(a2, size + v7);
  if (v5 == -1) {
    std::string::size_type v8 = 1;
  }
  else {
    std::string::size_type v8 = 3;
  }
  std::string::append(a2, v8, 64);
  if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v2 = (const std::string *)v2->__r_.__value_.__r.__words[0];
  }
  std::string::value_type v9 = v2->__r_.__value_.__s.__data_[0];
  if (v2->__r_.__value_.__s.__data_[0])
  {
    do
    {
      if (v5 != -1 && v9 == 64 && v2->__r_.__value_.__s.__data_[1] == 64 && v2->__r_.__value_.__s.__data_[2] == 64)
      {
        std::string::push_back(a2, 92);
        std::string::append(a2, 3uLL, 64);
        uint64_t v2 = (const std::string *)((char *)v2 + 2);
      }
      else
      {
        std::string::push_back(a2, v9);
      }
      int v10 = v2->__r_.__value_.__s.__data_[1];
      uint64_t v2 = (const std::string *)((char *)v2 + 1);
      std::string::value_type v9 = v10;
    }
    while (v10);
  }
  return std::string::append(a2, v8, 64);
}

void sub_216994E44(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteDefaultValue(void *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  if (sub_216994F90(a3))
  {
    unsigned __int8 v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216995078(a3);
    unint64_t String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString(v6);
    if (*((char *)String + 23) >= 0) {
      std::string::size_type v8 = (const char *)String;
    }
    else {
      std::string::size_type v8 = (const char *)*String;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, a2, (pxrInternal__aapl__pxrReserved__ *)"<%s>", v8);
  }
  else if (sub_21699510C(a3))
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/fileIO_Common.cpp";
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)"WriteDefaultValue";
    __p.__r_.__value_.__r.__words[2] = 487;
    int v11 = "static void pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteDefaultValue(Sdf_TextOutput &, size_t, VtValue)";
    char v12 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Tried to write opaque value to layer");
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::StringFromVtValue((const std::string **)a3, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, 0, (pxrInternal__aapl__pxrReserved__ *)" = %s", (const char *)p_p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_216994F74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216994F90(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000002174695B8 & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;

  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C755058);
}

void pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteSdfPath(void *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  unint64_t String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString(a3);
  if (*((char *)String + 23) >= 0) {
    unsigned __int8 v6 = (const char *)String;
  }
  else {
    unsigned __int8 v6 = (const char *)*String;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, a2, (pxrInternal__aapl__pxrReserved__ *)"<%s>", v6);
}

uint64_t sub_216995078(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (sub_216994F90(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      std::string::size_type v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return (uint64_t)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_2169979E0, (uint64_t)&stru_26C755058);
  }
}

uint64_t sub_21699510C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000217468799 & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;

  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C755210);
}

void pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::StringFromVtValue(const std::string **this@<X0>, std::string *a2@<X8>)
{
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility *)this;
  memset(&__p, 0, sizeof(__p));
  if ((sub_216996B08((uint64_t)&__p, this) & 1) != 0
    || (sub_216996CCC((uint64_t)&__p, v3) & 1) != 0
    || (sub_216996E94((uint64_t)&__p, (const std::string **)v3) & 1) != 0)
  {
LABEL_35:
    *a2 = __p;
    memset(&__p, 0, sizeof(__p));
    goto LABEL_36;
  }
  if (sub_21699AB4C(v3))
  {
    uint64_t v5 = *((void *)v3 + 1);
    if ((v5 & 4) != 0) {
      unsigned __int8 v6 = (pxrInternal__aapl__pxrReserved__::SdfPathExpression *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(v3);
    }
    else {
      unsigned __int8 v6 = *(pxrInternal__aapl__pxrReserved__::SdfPathExpression **)v3;
    }
    sub_21699ABD8(v6, &v21);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = v21;
    goto LABEL_35;
  }
  if (sub_21699AC40(v3))
  {
    uint64_t v7 = *((void *)v3 + 1);
    if ((v7 & 4) != 0) {
      std::string::size_type v8 = (pxrInternal__aapl__pxrReserved__::SdfPathExpression *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility *))((v7 & 0xFFFFFFFFFFFFFFF8) + 168))(v3);
    }
    else {
      std::string::size_type v8 = *(pxrInternal__aapl__pxrReserved__::SdfPathExpression **)v3;
    }
    std::string::append(&__p, "[");
    std::string::value_type v9 = (pxrInternal__aapl__pxrReserved__::SdfPathExpression *)*((void *)v8 + 4);
    if (v9)
    {
      uint64_t v10 = *(void *)v8;
      if (v10)
      {
        sub_21699ABD8(v9, &v21);
        if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v11 = &v21;
        }
        else {
          int v11 = (std::string *)v21.__r_.__value_.__r.__words[0];
        }
        if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v21.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v21.__r_.__value_.__l.__size_;
        }
        std::string::append(&__p, (const std::string::value_type *)v11, size);
        if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v21.__r_.__value_.__l.__data_);
        }
        uint64_t v13 = v10 - 1;
        if (v10 != 1)
        {
          uint64_t v14 = (pxrInternal__aapl__pxrReserved__::SdfPathExpression *)((char *)v9 + 96);
          do
          {
            std::string::append(&__p, ", ");
            sub_21699ABD8(v14, &v21);
            if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v15 = &v21;
            }
            else {
              uint64_t v15 = (std::string *)v21.__r_.__value_.__r.__words[0];
            }
            if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v16 = HIBYTE(v21.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v16 = v21.__r_.__value_.__l.__size_;
            }
            std::string::append(&__p, (const std::string::value_type *)v15, v16);
            if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v21.__r_.__value_.__l.__data_);
            }
            uint64_t v14 = (pxrInternal__aapl__pxrReserved__::SdfPathExpression *)((char *)v14 + 96);
            --v13;
          }
          while (v13);
        }
      }
    }
    std::string::append(&__p, "]");
    goto LABEL_35;
  }
  if (sub_216997438(v3))
  {
    uint64_t v17 = *((void *)v3 + 1);
    if ((v17 & 4) != 0) {
      uint64_t v3 = (pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility *))((v17 & 0xFFFFFFFFFFFFFFF8) + 168))(v3);
    }
LABEL_42:
    LODWORD(v21.__r_.__value_.__l.__data_) = *(char *)v3;
    sub_216997470();
    goto LABEL_36;
  }
  if (sub_2169975B8(v3))
  {
    uint64_t v18 = *((void *)v3 + 1);
    if ((v18 & 4) != 0) {
      uint64_t v3 = (pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility *))((v18 & 0xFFFFFFFFFFFFFFF8) + 168))(v3);
    }
    LODWORD(v21.__r_.__value_.__l.__data_) = *(unsigned __int8 *)v3;
    sub_2169975F0();
  }
  else
  {
    if (sub_216997738(v3))
    {
      uint64_t v19 = *((void *)v3 + 1);
      if ((v19 & 4) != 0) {
        uint64_t v3 = (pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility *))((v19 & 0xFFFFFFFFFFFFFFF8) + 168))(v3);
      }
      goto LABEL_42;
    }
    sub_216928738((uint64_t)v3);
  }
LABEL_36:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_216995474(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteNameVector(void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a3) >> 3);
  if (v7 >= 2)
  {
    sub_216779094(&__p, "[");
    std::string::size_type v8 = (v20 & 0x80u) == 0 ? (char *)&__p : (char *)__p;
    unint64_t v9 = (v20 & 0x80u) == 0 ? v20 : v19;
    sub_216997948(a1, v8, v9);
    if ((char)v20 < 0) {
      operator delete(__p);
    }
  }
  if (v5 != v6)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    if (v7 <= 1) {
      uint64_t v12 = 1;
    }
    else {
      uint64_t v12 = v7;
    }
    do
    {
      if (v11)
      {
        sub_216779094(&__p, ", ");
        uint64_t v13 = (v20 & 0x80u) == 0 ? (char *)&__p : (char *)__p;
        unint64_t v14 = (v20 & 0x80u) == 0 ? v20 : v19;
        sub_216997948(a1, v13, v14);
        if ((char)v20 < 0) {
          operator delete(__p);
        }
      }
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteQuotedString(a1, 0, (const std::string *)(*a3 + v10));
      ++v11;
      v10 += 24;
    }
    while (v12 != v11);
  }
  if (v7 >= 2)
  {
    sub_216779094(&__p, "]");
    if ((v20 & 0x80u) == 0) {
      p_p = (char *)&__p;
    }
    else {
      p_p = (char *)__p;
    }
    if ((v20 & 0x80u) == 0) {
      unint64_t v16 = v20;
    }
    else {
      unint64_t v16 = v19;
    }
    sub_216997948(a1, p_p, v16);
    if ((char)v20 < 0) {
      operator delete(__p);
    }
  }
  return 1;
}

void sub_21699563C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteNameVector(pxrInternal__aapl__pxrReserved__::TfToken *a1, uint64_t a2, uint64_t *a3)
{
  std::string::size_type v4 = a1;
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  uint64_t v7 = v5 - *a3;
  if ((unint64_t)v7 >= 9)
  {
    sub_216779094(&__p, "[");
    std::string::size_type v8 = (v20 & 0x80u) == 0 ? (char *)&__p : (char *)__p;
    unint64_t v9 = (v20 & 0x80u) == 0 ? v20 : v19;
    a1 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216997948(v4, v8, v9);
    if ((char)v20 < 0) {
      operator delete(__p);
    }
  }
  if (v5 != v6)
  {
    uint64_t v10 = 0;
    if ((unint64_t)(v7 >> 3) <= 1) {
      uint64_t v11 = 1;
    }
    else {
      uint64_t v11 = v7 >> 3;
    }
    do
    {
      if (v10)
      {
        sub_216779094(&__p, ", ");
        uint64_t v12 = (v20 & 0x80u) == 0 ? (char *)&__p : (char *)__p;
        unint64_t v13 = (v20 & 0x80u) == 0 ? v20 : v19;
        a1 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216997948(v4, v12, v13);
        if ((char)v20 < 0) {
          operator delete(__p);
        }
      }
      if ((*(void *)(*a3 + 8 * v10) & 0xFFFFFFFFFFFFFFF8) != 0) {
        Emptyunint64_t String = (const std::string *)((*(void *)(*a3 + 8 * v10) & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        Emptyunint64_t String = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteQuotedString(v4, 0, EmptyString);
      ++v10;
    }
    while (v11 != v10);
  }
  if ((unint64_t)v7 >= 9)
  {
    sub_216779094(&__p, "]");
    if ((v20 & 0x80u) == 0) {
      p_p = (char *)&__p;
    }
    else {
      p_p = (char *)__p;
    }
    if ((v20 & 0x80u) == 0) {
      unint64_t v16 = v20;
    }
    else {
      unint64_t v16 = v19;
    }
    sub_216997948(v4, p_p, v16);
    if ((char)v20 < 0) {
      operator delete(__p);
    }
  }
  return 1;
}

void sub_2169957E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteTimeSamples(void *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v6) {
    uint64_t v6 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v6 + 432), (pxrInternal__aapl__pxrReserved__::VtValue *)&v36);
  if (sub_216995B54((pxrInternal__aapl__pxrReserved__::VtValue *)&v36))
  {
    if ((v37 & 4) != 0) {
      uint64_t v7 = (*(uint64_t (**)(uint64_t *))((v37 & 0xFFFFFFFFFFFFFFF8) + 168))(&v36);
    }
    else {
      uint64_t v7 = v36;
    }
    sub_216997AE0((uint64_t *)&v33, v7);
    BOOL v31 = (void **)v33;
    unsigned int v32 = &v34;
    uint64_t v10 = a2 + 1;
    while (v31 != v32)
    {
      uint64_t v11 = sub_216995BE0(&v31, v8, v9);
      pxrInternal__aapl__pxrReserved__::TfStringify(*(double *)(*v11 + 32), &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, v10, (pxrInternal__aapl__pxrReserved__ *)"%s: ", (const char *)p_p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v15 = sub_216995BE0(&v31, v13, v14);
      if (sub_216994F90((pxrInternal__aapl__pxrReserved__::VtValue *)(*v15 + 40)))
      {
        uint64_t v18 = sub_216995BE0(&v31, v16, v17);
        unint64_t v19 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216995078((pxrInternal__aapl__pxrReserved__::VtValue *)(*v18 + 40));
        unint64_t String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString(v19);
        if (*((char *)String + 23) >= 0) {
          std::string v21 = (const char *)String;
        }
        else {
          std::string v21 = (const char *)*String;
        }
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, 0, (pxrInternal__aapl__pxrReserved__ *)"<%s>", v21);
      }
      else
      {
        char v22 = sub_216995BE0(&v31, v16, v17);
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::StringFromVtValue((const std::string **)(*v22 + 40), &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v23 = &__p;
        }
        else {
          int v23 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
        sub_216997948(a1, (char *)v23, size);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      sub_216779094(&__p, ",\n");
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unsigned int v25 = &__p;
      }
      else {
        unsigned int v25 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v26 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v26 = __p.__r_.__value_.__l.__size_;
      }
      sub_216997948(a1, (char *)v25, v26);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      sub_216995C5C(&v31);
    }
    sub_216997EC4((uint64_t)&v33, v34);
  }
  else if (sub_216995D04((pxrInternal__aapl__pxrReserved__::VtValue *)&v36))
  {
    uint64_t v27 = (v37 & 4) != 0 ? (*(uint64_t (**)(uint64_t *))((v37 & 0xFFFFFFFFFFFFFFF8) + 168))(&v36) : v36;
    sub_216995D90(v27);
    int v28 = v35 >= 0 ? (const char *)&v33 : (const char *)v33;
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, a2 + 1, (pxrInternal__aapl__pxrReserved__ *)"%s\n", v28);
    if (v35 < 0) {
      operator delete(v33);
    }
  }
  sub_2168EE084((uint64_t)&v36);
  return 1;
}

void sub_216995AD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
}

uint64_t sub_216995B54(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000217479096 & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;

  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C755220);
}

void *sub_216995BE0(void *result, uint64_t a2, char *a3)
{
  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<std::map<double, pxrInternal__aapl__pxrReserved__::Vt"
            "Value>>::operator->() [T = std::map<double, pxrInternal__aapl__pxrReserved__::VtValue>, Reverse = false]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void *sub_216995C5C(void *a1)
{
  uint64_t v2 = (void *)*a1;
  if (*a1 == a1[1])
  {
    v7[0] = "tf/iterator.h";
    v7[1] = "operator++";
    v7[2] = 250;
    void v7[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::map<double, pxrInternal__aapl__pxr"
            "Reserved__::VtValue>>::operator++() [T = std::map<double, pxrInternal__aapl__pxrReserved__::VtValue>, Reverse = false]";
    char v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    uint64_t v3 = (void *)v2[1];
    if (v3)
    {
      do
      {
        char v4 = v3;
        uint64_t v3 = (void *)*v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        char v4 = (void *)v2[2];
        BOOL v5 = *v4 == (void)v2;
        uint64_t v2 = v4;
      }
      while (!v5);
    }
    *a1 = v4;
  }
  return a1;
}

uint64_t sub_216995D04(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000002174687CELL & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;

  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C755230);
}

uint64_t sub_216995D90(uint64_t a1)
{
  sub_21677B834((uint64_t)v3);
  pxrInternal__aapl__pxrReserved__::operator<<(v3, a1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v3 + *(void *)(v3[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v3[1] = MEMORY[0x263F8C318] + 16;
  if (v4 < 0) {
    operator delete((void *)v3[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x21D447E60](&v5);
}

void sub_216995EC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21677B9CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteRelocates(void *a1, uint64_t a2, int a3, void *a4)
{
  char v8 = "{ ";
  if (a3) {
    char v8 = "{\n";
  }
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, a2, (pxrInternal__aapl__pxrReserved__ *)"relocates = %s", v8);
  uint64_t v11 = a4[2];
  char v33 = (void *)*a4;
  int v34 = a4 + 1;
  if (v33 != a4 + 1)
  {
    uint64_t v12 = v11 - 1;
    do
    {
      uint64_t v13 = sub_216996180(&v33, v9, v10);
      unint64_t String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(*v13 + 28));
      if (*((char *)String + 23) >= 0) {
        uint64_t v15 = (const char *)String;
      }
      else {
        uint64_t v15 = (const char *)*String;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, a2 + 1, (pxrInternal__aapl__pxrReserved__ *)"<%s>", v15);
      sub_216779094(&__p, ": ");
      if ((v32 & 0x80u) == 0) {
        p_p = (char *)&__p;
      }
      else {
        p_p = (char *)__p;
      }
      if ((v32 & 0x80u) == 0) {
        unint64_t v17 = v32;
      }
      else {
        unint64_t v17 = v31;
      }
      sub_216997948(a1, p_p, v17);
      if ((char)v32 < 0) {
        operator delete(__p);
      }
      unsigned __int8 v20 = sub_216996180(&v33, v18, v19);
      std::string v21 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(*v20 + 36));
      if (*((char *)v21 + 23) >= 0) {
        char v22 = (const char *)v21;
      }
      else {
        char v22 = (const char *)*v21;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, 0, (pxrInternal__aapl__pxrReserved__ *)"<%s>", v22);
      if (v12
        && ((sub_216779094(&__p, ", "), (v32 & 0x80u) == 0) ? (int v23 = (char *)&__p) : (int v23 = (char *)__p),
            (v32 & 0x80u) == 0 ? (unint64_t v24 = v32) : (unint64_t v24 = v31),
            sub_216997948(a1, v23, v24),
            (char)v32 < 0))
      {
        operator delete(__p);
        if (a3)
        {
LABEL_28:
          sub_216779094(&__p, "\n");
          if ((v32 & 0x80u) == 0) {
            unsigned int v25 = (char *)&__p;
          }
          else {
            unsigned int v25 = (char *)__p;
          }
          if ((v32 & 0x80u) == 0) {
            unint64_t v26 = v32;
          }
          else {
            unint64_t v26 = v31;
          }
          sub_216997948(a1, v25, v26);
          if ((char)v32 < 0) {
            operator delete(__p);
          }
        }
      }
      else if (a3)
      {
        goto LABEL_28;
      }
      sub_2169961FC(&v33);
      --v12;
    }
    while (v33 != v34);
  }
  if (a3)
  {
    sub_216779094(&__p, "}\n");
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a1, a2, (uint64_t)&__p);
  }
  else
  {
    sub_216779094(&__p, " }");
    if ((v32 & 0x80u) == 0) {
      uint64_t v27 = (char *)&__p;
    }
    else {
      uint64_t v27 = (char *)__p;
    }
    if ((v32 & 0x80u) == 0) {
      unint64_t v28 = v32;
    }
    else {
      unint64_t v28 = v31;
    }
    sub_216997948(a1, v27, v28);
  }
  if ((char)v32 < 0) {
    operator delete(__p);
  }
  return 1;
}

void sub_216996154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216996180(void *result, uint64_t a2, char *a3)
{
  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const std::map<pxrInternal__aapl__pxrReserved__::SdfP"
            "ath, pxrInternal__aapl__pxrReserved__::SdfPath>>::operator->() [T = const std::map<pxrInternal__aapl__pxrRes"
            "erved__::SdfPath, pxrInternal__aapl__pxrReserved__::SdfPath>, Reverse = false]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void *sub_2169961FC(void *a1)
{
  uint64_t v2 = (void *)*a1;
  if (*a1 == a1[1])
  {
    v7[0] = "tf/iterator.h";
    v7[1] = "operator++";
    v7[2] = 250;
    void v7[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::map<pxrInternal__aapl__pxrRe"
            "served__::SdfPath, pxrInternal__aapl__pxrReserved__::SdfPath>>::operator++() [T = const std::map<pxrInternal"
            "__aapl__pxrReserved__::SdfPath, pxrInternal__aapl__pxrReserved__::SdfPath>, Reverse = false]";
    char v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    uint64_t v3 = (void *)v2[1];
    if (v3)
    {
      do
      {
        char v4 = v3;
        uint64_t v3 = (void *)*v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        char v4 = (void *)v2[2];
        BOOL v5 = *v4 == (void)v2;
        uint64_t v2 = v4;
      }
      while (!v5);
    }
    *a1 = v4;
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::_WriteDictionary(void *a1, uint64_t a2, uint64_t a3, void *a4, int a5)
{
  uint64_t v78 = *MEMORY[0x263EF8340];
  if (a3) {
    uint64_t v9 = "{\n";
  }
  else {
    uint64_t v9 = "{ ";
  }
  sub_216779094(__p, v9);
  if ((SBYTE7(v71) & 0x80u) == 0) {
    uint64_t v10 = (char *)__p;
  }
  else {
    uint64_t v10 = (char *)__p[0];
  }
  if ((SBYTE7(v71) & 0x80u) == 0) {
    unint64_t v11 = BYTE7(v71);
  }
  else {
    unint64_t v11 = (unint64_t)__p[1];
  }
  sub_216997948(a1, v10, v11);
  if (SBYTE7(v71) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v14 = a4[2];
  uint64_t v73 = (void *)*a4;
  long long v74 = a4 + 1;
  if (v73 != a4 + 1)
  {
    if (a3) {
      uint64_t v15 = a2 + 1;
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v67 = v15;
    do
    {
      uint64_t v16 = sub_216996A8C(&v73, v12, v13);
      --v14;
      unint64_t v19 = *(pxrInternal__aapl__pxrReserved__::VtValue **)(*v16 + 40);
      if (a5)
      {
        if (sub_21695C360(*(pxrInternal__aapl__pxrReserved__::VtValue **)(*v16 + 40)))
        {
          char v22 = sub_216996A8C(&v73, v20, v21);
          pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteQuotedString(a1, v67, *(const std::string **)(*v22 + 32));
          pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, 0, (pxrInternal__aapl__pxrReserved__ *)": ");
          int v23 = (const std::string *)sub_21695A928(v19);
          pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteQuotedString(a1, 0, v23);
          if (v14
            && ((sub_216779094(__p, ", "), (SBYTE7(v71) & 0x80u) == 0) ? (unint64_t v24 = (char *)__p) : (unint64_t v24 = (char *)__p[0]),
                (SBYTE7(v71) & 0x80u) == 0 ? (unint64_t v25 = BYTE7(v71)) : (unint64_t v25 = (unint64_t)__p[1]),
                sub_216997948(a1, v24, v25),
                SBYTE7(v71) < 0))
          {
            operator delete(__p[0]);
            if (a3)
            {
LABEL_28:
              sub_216779094(__p, "\n");
              if ((SBYTE7(v71) & 0x80u) == 0) {
                unint64_t v26 = (char *)__p;
              }
              else {
                unint64_t v26 = (char *)__p[0];
              }
              if ((SBYTE7(v71) & 0x80u) == 0) {
                unint64_t v27 = BYTE7(v71);
              }
              else {
                unint64_t v27 = (unint64_t)__p[1];
              }
              goto LABEL_117;
            }
          }
          else if (a3)
          {
            goto LABEL_28;
          }
        }
        else
        {
          __p[0] = "sdf/fileIO_Common.cpp";
          __p[1] = "_WriteDictionary";
          *(void *)&long long v71 = 617;
          *((void *)&v71 + 1) = "static void pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::_WriteDictionary(Sdf_"
                                  "TextOutput &, size_t, BOOL, Sdf_FileIOUtility::_OrderedDictionary &, BOOL)";
          char v72 = 0;
          int v30 = *(const char **)(*sub_216996A8C(&v73, v20, v21) + 32);
          if (v30[23] < 0) {
            int v30 = *(const char **)v30;
          }
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Dictionary has a non-string value under key \"%s\"; skipping",
            v30);
        }
      }
      else
      {
        unint64_t v28 = *(long long **)(*sub_216996A8C(&v73, v17, v18) + 32);
        if (*((char *)v28 + 23) < 0)
        {
          sub_216778F24(__dst, *(void **)v28, *((void *)v28 + 1));
        }
        else
        {
          long long v29 = *v28;
          *(void *)&__dst[16] = *((void *)v28 + 2);
          *(_OWORD *)std::string __dst = v29;
        }
        if (__dst[23] >= 0) {
          unint64_t v31 = __dst;
        }
        else {
          unint64_t v31 = *(unsigned char **)__dst;
        }
        int v32 = (char)*v31;
        if (*v31) {
          BOOL v33 = (v32 - 48) >= 0xA;
        }
        else {
          BOOL v33 = 0;
        }
        if (!v33) {
          goto LABEL_61;
        }
        if (v32 != 95 && (v32 & 0xFFFFFFDF) - 65 > 0x19) {
          goto LABEL_61;
        }
        do
        {
          int v36 = (char)*v31++;
          char v35 = v36;
          unsigned int v37 = (v36 & 0xFFFFFFDF) - 65;
          unsigned int v38 = v36 - 48;
        }
        while (v36 == 95 || v37 < 0x1A || v38 < 0xA);
        if (v35)
        {
LABEL_61:
          std::operator+<char>();
          uint64_t v41 = std::string::append((std::string *)__p, "\"");
          std::string::size_type v42 = v41->__r_.__value_.__r.__words[0];
          *(void *)&long long v76 = v41->__r_.__value_.__l.__size_;
          *(void *)((char *)&v76 + 7) = *(std::string::size_type *)((char *)&v41->__r_.__value_.__r.__words[1] + 7);
          char v43 = HIBYTE(v41->__r_.__value_.__r.__words[2]);
          v41->__r_.__value_.__l.__size_ = 0;
          v41->__r_.__value_.__r.__words[2] = 0;
          v41->__r_.__value_.__r.__words[0] = 0;
          if ((__dst[23] & 0x80000000) != 0) {
            operator delete(*(void **)__dst);
          }
          *(void *)std::string __dst = v42;
          *(void *)&__dst[8] = v76;
          *(void *)&__dst[15] = *(void *)((char *)&v76 + 7);
          __dst[23] = v43;
          if (SBYTE7(v71) < 0) {
            operator delete(__p[0]);
          }
        }
        if (sub_2168EC434(v19))
        {
          if (__dst[23] >= 0) {
            int v44 = __dst;
          }
          else {
            int v44 = *(const char **)__dst;
          }
          pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, v67, (pxrInternal__aapl__pxrReserved__ *)"dictionary %s = ", v44);
          uint64_t v45 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)sub_2168EF25C(v19);
          *((void *)&v76 + 1) = 0;
          uint64_t v77 = 0;
          *(void *)&long long v76 = (char *)&v76 + 8;
          *(_OWORD *)std::string __p = 0u;
          long long v71 = 0u;
          __p[0] = (void *)pxrInternal__aapl__pxrReserved__::VtDictionary::begin(v45);
          __p[1] = v46;
          *(void *)&long long v71 = pxrInternal__aapl__pxrReserved__::VtDictionary::end(v45);
          *((void *)&v71 + 1) = v47;
          while (__p[1] != *((void **)&v71 + 1) || __p[1] && __p[0] != (void *)v71)
          {
            uint64_t v49 = *sub_2168ED218(__p, v47, v48);
            unsigned int v68 = (const void **)(*sub_2168ED218(__p, v50, v51) + 32);
            unint64_t v75 = (unint64_t)&v68;
            sub_216997F20((uint64_t **)&v76, &v68, (uint64_t)&unk_2174BFD90, (uint64_t **)&v75)[5] = v49 + 56;
            sub_2168ED448(__p, v52, v53);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::_WriteDictionary(a1, a2 + 1, a3, &v76, 0);
          sub_2167FB780((uint64_t)&v76, *((void **)&v76 + 1));
        }
        else
        {
          if (!atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames)) {
            sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::GetSerializationName(v19, (atomic_uint **)&v75);
          unint64_t v55 = v75 & 0xFFFFFFFFFFFFFFF8;
          if ((v75 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            uint64_t v56 = (const char *)(v55 + 16);
            if (*(char *)(v55 + 39) < 0) {
              uint64_t v56 = *(const char **)v56;
            }
          }
          else
          {
            uint64_t v56 = "";
          }
          if (__dst[23] >= 0) {
            uint64_t v57 = __dst;
          }
          else {
            uint64_t v57 = *(const char **)__dst;
          }
          pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, v67, (pxrInternal__aapl__pxrReserved__ *)"%s %s = ", v56, v57);
          __p[0] = 0;
          __p[1] = 0;
          *(void *)&long long v71 = 0;
          if ((sub_216996B08((uint64_t)__p, (const std::string **)v19) & 1) != 0
            || (sub_216996CCC((uint64_t)__p, v19) & 1) != 0
            || sub_216996E94((uint64_t)__p, (const std::string **)v19))
          {
            if ((SBYTE7(v71) & 0x80u) == 0) {
              BOOL v58 = (char *)__p;
            }
            else {
              BOOL v58 = (char *)__p[0];
            }
            if ((SBYTE7(v71) & 0x80u) == 0) {
              unint64_t v59 = BYTE7(v71);
            }
            else {
              unint64_t v59 = (unint64_t)__p[1];
            }
            sub_216997948(a1, v58, v59);
          }
          else
          {
            sub_216928738((uint64_t)v19);
            if (v77 >= 0) {
              uint64_t v62 = (char *)&v76;
            }
            else {
              uint64_t v62 = (char *)v76;
            }
            if (v77 >= 0) {
              unint64_t v63 = HIBYTE(v77);
            }
            else {
              unint64_t v63 = *((void *)&v76 + 1);
            }
            sub_216997948(a1, v62, v63);
            if (SHIBYTE(v77) < 0) {
              operator delete((void *)v76);
            }
          }
          if (a3)
          {
            sub_216779094(&v76, "\n");
            uint64_t v60 = v77 >= 0 ? (char *)&v76 : (char *)v76;
            unint64_t v61 = v77 >= 0 ? HIBYTE(v77) : *((void *)&v76 + 1);
            sub_216997948(a1, v60, v61);
            if (SHIBYTE(v77) < 0) {
              operator delete((void *)v76);
            }
          }
          if (SBYTE7(v71) < 0) {
            operator delete(__p[0]);
          }
          if ((v75 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v75 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
        }
        if ((__dst[23] & 0x80000000) != 0) {
          operator delete(*(void **)__dst);
        }
      }
      if ((a3 & 1) == 0 && v14)
      {
        sub_216779094(__p, "; ");
        if ((SBYTE7(v71) & 0x80u) == 0) {
          unint64_t v26 = (char *)__p;
        }
        else {
          unint64_t v26 = (char *)__p[0];
        }
        if ((SBYTE7(v71) & 0x80u) == 0) {
          unint64_t v27 = BYTE7(v71);
        }
        else {
          unint64_t v27 = (unint64_t)__p[1];
        }
LABEL_117:
        sub_216997948(a1, v26, v27);
        if (SBYTE7(v71) < 0) {
          operator delete(__p[0]);
        }
      }
      sub_216997058(&v73);
    }
    while (v73 != v74);
  }
  if (a3)
  {
    sub_216779094(__p, "}\n");
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a1, a2, (uint64_t)__p);
  }
  else
  {
    sub_216779094(__p, " }");
    if ((SBYTE7(v71) & 0x80u) == 0) {
      uint64_t v64 = (char *)__p;
    }
    else {
      uint64_t v64 = (char *)__p[0];
    }
    if ((SBYTE7(v71) & 0x80u) == 0) {
      unint64_t v65 = BYTE7(v71);
    }
    else {
      unint64_t v65 = (unint64_t)__p[1];
    }
    sub_216997948(a1, v64, v65);
  }
  if (SBYTE7(v71) < 0) {
    operator delete(__p[0]);
  }
}

void sub_2169969A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216996A8C(void *result, uint64_t a2, char *a3)
{
  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<std::map<const std::string *, const pxrInternal__aapl"
            "__pxrReserved__::VtValue *, pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::_StringLessThan>>::operator"
            "->() [T = std::map<const std::string *, const pxrInternal__aapl__pxrReserved__::VtValue *, pxrInternal__aapl"
            "__pxrReserved__::Sdf_FileIOUtility::_StringLessThan>, Reverse = false]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

uint64_t sub_216996B08(uint64_t a1, const std::string **a2)
{
  if (sub_21695C360((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    char v4 = a2[1];
    if ((v4 & 4) != 0) {
      int v5 = (const std::string *)(*(uint64_t (**)(const std::string **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                + 168))(a2);
    else {
      int v5 = *a2;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Quote(v5, &__p);
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    *(std::string *)a1 = __p;
  }
  else
  {
    uint64_t result = sub_216998044((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if (!result) {
      return result;
    }
    uint64_t v7 = a2[1];
    if ((v7 & 4) != 0) {
      char v8 = (const std::string *)(*(uint64_t (**)(const std::string **))(((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                + 168))(a2);
    else {
      char v8 = *a2;
    }
    std::string::append((std::string *)a1, "[");
    std::string::size_type size = (const std::string *)v8[1].__r_.__value_.__l.__size_;
    if (size)
    {
      std::string::size_type v10 = v8->__r_.__value_.__r.__words[0];
      if (v10)
      {
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Quote(size, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v12 = __p.__r_.__value_.__l.__size_;
        }
        std::string::append((std::string *)a1, (const std::string::value_type *)p_p, v12);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        std::string::size_type v13 = v10 - 1;
        if (v10 != 1)
        {
          uint64_t v14 = size + 1;
          do
          {
            std::string::append((std::string *)a1, ", ");
            pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Quote(v14, &__p);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v15 = &__p;
            }
            else {
              uint64_t v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v16 = __p.__r_.__value_.__l.__size_;
            }
            std::string::append((std::string *)a1, (const std::string::value_type *)v15, v16);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            ++v14;
            --v13;
          }
          while (v13);
        }
      }
    }
    std::string::append((std::string *)a1, "]");
  }
  return 1;
}

void sub_216996CAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216996CCC(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v2 = a2;
  if (sub_21695DC44(a2))
  {
    uint64_t v4 = *((void *)v2 + 1);
    if ((v4 & 4) != 0) {
      uint64_t v2 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Quote(v2, &__p);
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    *(std::string *)a1 = __p;
  }
  else
  {
    uint64_t result = sub_21699807C(v2);
    if (!result) {
      return result;
    }
    uint64_t v6 = *((void *)v2 + 1);
    if ((v6 & 4) != 0) {
      uint64_t v7 = (uint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v6 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                             + 168))(v2);
    else {
      uint64_t v7 = *(uint64_t **)v2;
    }
    std::string::append((std::string *)a1, "[");
    char v8 = (pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility *)v7[4];
    if (v8)
    {
      uint64_t v9 = *v7;
      if (v9)
      {
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Quote(v8, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
        std::string::append((std::string *)a1, (const std::string::value_type *)p_p, size);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        uint64_t v12 = v9 - 1;
        if (v9 != 1)
        {
          std::string::size_type v13 = (pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility *)((char *)v8 + 8);
          do
          {
            std::string::append((std::string *)a1, ", ");
            pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Quote(v13, &__p);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v14 = &__p;
            }
            else {
              uint64_t v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v15 = __p.__r_.__value_.__l.__size_;
            }
            std::string::append((std::string *)a1, (const std::string::value_type *)v14, v15);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            std::string::size_type v13 = (pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility *)((char *)v13 + 8);
            --v12;
          }
          while (v12);
        }
      }
    }
    std::string::append((std::string *)a1, "]");
  }
  return 1;
}

void sub_216996E74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216996E94(uint64_t a1, const std::string **a2)
{
  if (sub_2169980B4((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    uint64_t v4 = a2[1];
    if ((v4 & 4) != 0) {
      int v5 = (const std::string *)(*(uint64_t (**)(const std::string **))(((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                + 168))(a2);
    else {
      int v5 = *a2;
    }
    sub_216994D1C(v5, &__p);
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    *(std::string *)a1 = __p;
  }
  else
  {
    uint64_t result = sub_216998140((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if (!result) {
      return result;
    }
    uint64_t v7 = a2[1];
    if ((v7 & 4) != 0) {
      char v8 = (const std::string *)(*(uint64_t (**)(const std::string **))(((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8)
    }
                                                                                + 168))(a2);
    else {
      char v8 = *a2;
    }
    std::string::append((std::string *)a1, "[");
    std::string::size_type size = (const std::string *)v8[1].__r_.__value_.__l.__size_;
    if (size)
    {
      std::string::size_type v10 = v8->__r_.__value_.__r.__words[0];
      if (v10)
      {
        sub_216994D1C(size, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v12 = __p.__r_.__value_.__l.__size_;
        }
        std::string::append((std::string *)a1, (const std::string::value_type *)p_p, v12);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        std::string::size_type v13 = v10 - 1;
        if (v10 != 1)
        {
          uint64_t v14 = size + 2;
          do
          {
            std::string::append((std::string *)a1, ", ");
            sub_216994D1C(v14, &__p);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v15 = &__p;
            }
            else {
              std::string::size_type v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v16 = __p.__r_.__value_.__l.__size_;
            }
            std::string::append((std::string *)a1, (const std::string::value_type *)v15, v16);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            v14 += 2;
            --v13;
          }
          while (v13);
        }
      }
    }
    std::string::append((std::string *)a1, "]");
  }
  return 1;
}

void sub_216997038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_216997058(void *a1)
{
  uint64_t v2 = (void *)*a1;
  if (*a1 == a1[1])
  {
    v7[0] = "tf/iterator.h";
    v7[1] = "operator++";
    v7[2] = 250;
    void v7[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::map<const std::string *, const pxr"
            "Internal__aapl__pxrReserved__::VtValue *, pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::_StringLessTh"
            "an>>::operator++() [T = std::map<const std::string *, const pxrInternal__aapl__pxrReserved__::VtValue *, pxr"
            "Internal__aapl__pxrReserved__::Sdf_FileIOUtility::_StringLessThan>, Reverse = false]";
    char v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    uint64_t v3 = (void *)v2[1];
    if (v3)
    {
      do
      {
        uint64_t v4 = v3;
        uint64_t v3 = (void *)*v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        uint64_t v4 = (void *)v2[2];
        BOOL v5 = *v4 == (void)v2;
        uint64_t v2 = v4;
      }
      while (!v5);
    }
    *a1 = v4;
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteDictionary(void *a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtDictionary *this, int a5)
{
  v24[0] = 0;
  v24[1] = 0;
  int v23 = (uint64_t *)v24;
  uint64_t v19 = pxrInternal__aapl__pxrReserved__::VtDictionary::begin(this);
  uint64_t v20 = v10;
  uint64_t v21 = pxrInternal__aapl__pxrReserved__::VtDictionary::end(this);
  uint64_t v22 = v11;
  while (v20 != v22 || v20 && v19 != v21)
  {
    uint64_t v13 = *sub_2168ED218(&v19, v11, v12);
    uint64_t v18 = (const void **)(*sub_2168ED218(&v19, v14, v15) + 32);
    unint64_t v25 = &v18;
    sub_216997F20(&v23, &v18, (uint64_t)&unk_2174BFD90, (uint64_t **)&v25)[5] = v13 + 56;
    sub_2168ED448(&v19, v16, v17);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::_WriteDictionary(a1, a2, a3, &v23, a5);
  sub_2167FB780((uint64_t)&v23, v24[0]);
}

void sub_21699721C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, void *a15)
{
}

void pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteLayerOffset(void *a1, uint64_t a2, int a3, double *a4)
{
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)__p, 0.0, 1.0);
  if (!pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator==(a4, (double *)__p))
  {
    if ((a3 & 1) == 0) {
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, 0, (pxrInternal__aapl__pxrReserved__ *)" (");
    }
    double v9 = *a4;
    double v8 = a4[1];
    if (*a4 != 0.0)
    {
      pxrInternal__aapl__pxrReserved__::TfStringify(v9, __p);
      if (v17 >= 0) {
        uint64_t v10 = __p;
      }
      else {
        uint64_t v10 = (void **)__p[0];
      }
      if (a3) {
        uint64_t v11 = a2;
      }
      else {
        uint64_t v11 = 0;
      }
      std::string::size_type v12 = "";
      if (a3) {
        std::string::size_type v12 = "\n";
      }
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, v11, (pxrInternal__aapl__pxrReserved__ *)"offset = %s%s", (const char *)v10, v12);
      if (v17 < 0) {
        operator delete(__p[0]);
      }
    }
    if (v8 != 1.0)
    {
      if (v9 != 0.0 && (a3 & 1) == 0) {
        pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, 0, (pxrInternal__aapl__pxrReserved__ *)"; ");
      }
      pxrInternal__aapl__pxrReserved__::TfStringify(v8, __p);
      if (v17 >= 0) {
        uint64_t v13 = __p;
      }
      else {
        uint64_t v13 = (void **)__p[0];
      }
      if (a3) {
        uint64_t v14 = a2;
      }
      else {
        uint64_t v14 = 0;
      }
      std::string::size_type v15 = "";
      if (a3) {
        std::string::size_type v15 = "\n";
      }
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, v14, (pxrInternal__aapl__pxrReserved__ *)"scale = %s%s", (const char *)v13, v15);
      if (v17 < 0) {
        operator delete(__p[0]);
      }
    }
    if ((a3 & 1) == 0) {
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, 0, (pxrInternal__aapl__pxrReserved__ *)")");
    }
  }
}

void sub_2169973CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Quote@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility *this@<X0>, std::string *a2@<X8>)
{
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) != 0) {
    Emptyunint64_t String = (const std::string *)((*(void *)this & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    Emptyunint64_t String = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
  }

  return pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Quote(EmptyString, a2);
}

uint64_t sub_216997438(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 1) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, MEMORY[0x263F8C238]);
  }
  else {
    return 0;
  }
}

uint64_t sub_216997470()
{
  sub_21677B834((uint64_t)v1);
  std::ostream::operator<<();
  std::stringbuf::str();
  v1[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v1 + *(void *)(v1[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v1[1] = MEMORY[0x263F8C318] + 16;
  if (v2 < 0) {
    operator delete((void *)v1[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x21D447E60](&v3);
}

void sub_2169975A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21677B9CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2169975B8(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 2) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, MEMORY[0x263F8C250]);
  }
  else {
    return 0;
  }
}

uint64_t sub_2169975F0()
{
  sub_21677B834((uint64_t)v1);
  std::ostream::operator<<();
  std::stringbuf::str();
  v1[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v1 + *(void *)(v1[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v1[1] = MEMORY[0x263F8C318] + 16;
  if (v2 < 0) {
    operator delete((void *)v1[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x21D447E60](&v3);
}

void sub_216997724(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21677B9CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_216997738(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(MEMORY[0x263F8C228] + 8) & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;
  uint64_t v4 = (const std::type_info *)MEMORY[0x263F8C228];

  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, v4);
}

const char *pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Stringify(int a1)
{
  if (!a1) {
    return "public";
  }
  if (a1 == 1) {
    return "private";
  }
  uint64_t v6 = v1;
  uint64_t v7 = v2;
  v4[0] = "sdf/fileIO_Common.cpp";
  v4[1] = "Stringify";
  void v4[2] = 882;
  v4[3] = "static const char *pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Stringify(SdfPermission)";
  char v5 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"unknown value");
  return "";
}

{
  uint64_t v1;
  uint64_t v2;
  void v4[4];
  char v5;
  uint64_t v6;
  uint64_t v7;

  if (!a1) {
    return "";
  }
  if (a1 == 1) {
    return "uniform";
  }
  uint64_t v6 = v1;
  uint64_t v7 = v2;
  v4[0] = "sdf/fileIO_Common.cpp";
  v4[1] = "Stringify";
  void v4[2] = 911;
  v4[3] = "static const char *pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Stringify(SdfVariability)";
  char v5 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"unknown value");
  return "";
}

const char *pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Stringify(unsigned int a1)
{
  if (a1 < 3) {
    return off_264294478[a1];
  }
  v2[0] = "sdf/fileIO_Common.cpp";
  v2[1] = "Stringify";
  v2[2] = 897;
  v2[3] = "static const char *pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Stringify(SdfSpecifier)";
  char v3 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v2, 1, (pxrInternal__aapl__pxrReserved__ *)"unknown value");
  return "";
}

uint64_t sub_216997948(void *a1, char *__src, unint64_t a3)
{
  if (!a3) {
    return 1;
  }
  unint64_t v3 = a3;
  while (1)
  {
    uint64_t v6 = a1[5];
    size_t v7 = v3 >= a1[3] - v6 ? a1[3] - v6 : v3;
    memcpy((void *)(a1[4] + v6), __src, v7);
    size_t v8 = a1[5] + v7;
    a1[5] = v8;
    if (v8 == a1[3])
    {
      uint64_t result = sub_21699311C(a1);
      if (!result) {
        break;
      }
    }
    __src += v7;
    v3 -= v7;
    if (!v3) {
      return 1;
    }
  }
  return result;
}

uint64_t sub_2169979E4@<X0>(void *a1@<X8>)
{
  sub_216997A38(v4);
  uint64_t v2 = (uint64_t (*)(void))v4[1];
  *a1 = v4[0];
  a1[1] = v2;
  v4[0] = 0;
  a1[2] = &unk_26C755058;
  return v2(0);
}

_DWORD *sub_216997A38@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(8uLL);
  *(void *)uint64_t v2 = 0;
  unint64_t v3 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(v2);
  uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(v3 + 1);
  *a1 = v2;
  a1[1] = sub_216997A8C;
  return result;
}

void sub_216997A8C(_DWORD *a1)
{
  if (a1)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);
    uint64_t v2 = sub_21697C414(a1);
    operator delete(v2);
  }
}

uint64_t *sub_216997AE0(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_216997B38(a1, *(double **)a2, (double *)(a2 + 8));
  return a1;
}

void sub_216997B20(_Unwind_Exception *a1)
{
  sub_216997EC4(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_216997B38(uint64_t *result, double *a2, double *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    char v5 = (uint64_t **)result;
    uint64_t v6 = (double *)(result + 1);
    do
    {
      uint64_t result = sub_216997BC4(v5, v6, v4 + 4, (void *)v4 + 4);
      size_t v7 = (double *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          size_t v8 = v7;
          size_t v7 = *(double **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          size_t v8 = (double *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_216997BC4(uint64_t **a1, double *a2, double *a3, void *a4)
{
  uint64_t v6 = sub_216997C5C(a1, a2, &v12, &v11, a3);
  size_t v7 = *(uint64_t **)v6;
  if (!*(void *)v6)
  {
    size_t v8 = (uint64_t **)v6;
    sub_216997DF8((uint64_t)a1, a4, (uint64_t)v10);
    sub_21677B358(a1, (uint64_t)v12, v8, v10[0]);
    size_t v7 = v10[0];
    v10[0] = 0;
    sub_216997E6C((uint64_t)v10, 0);
  }
  return v7;
}

double *sub_216997C5C(void *a1, double *a2, double **a3, double *a4, double *a5)
{
  char v5 = (double *)(a1 + 1);
  if (a1 + 1 == (void *)a2 || (double v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    size_t v8 = *(uint64_t **)a2;
    if ((double *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      BOOL v9 = *(uint64_t **)a2;
      do
      {
        uint64_t v10 = (double *)v9;
        BOOL v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      uint64_t v13 = a2;
      do
      {
        uint64_t v10 = (double *)*((void *)v13 + 2);
        BOOL v14 = *(void *)v10 == (void)v13;
        uint64_t v13 = v10;
      }
      while (v14);
    }
    double v15 = *a5;
    if (v10[4] < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = *(double **)v5;
    if (*(void *)v5)
    {
      do
      {
        while (1)
        {
          char v17 = v16;
          double v18 = v16[4];
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *(double **)v16;
          char v5 = v17;
          if (!*(void *)v17) {
            goto LABEL_43;
          }
        }
        if (v18 >= v15) {
          break;
        }
        char v5 = v16 + 1;
        uint64_t v16 = (double *)*((void *)v16 + 1);
      }
      while (v16);
      goto LABEL_43;
    }
LABEL_42:
    char v17 = (double *)(a1 + 1);
LABEL_43:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *(void *)a4 = a2;
    return a4;
  }
  uint64_t v11 = *((void *)a2 + 1);
  if (v11)
  {
    std::string::size_type v12 = (double *)*((void *)a2 + 1);
    do
    {
      a4 = v12;
      std::string::size_type v12 = *(double **)v12;
    }
    while (v12);
  }
  else
  {
    uint64_t v19 = a2;
    do
    {
      a4 = (double *)*((void *)v19 + 2);
      BOOL v14 = *(void *)a4 == (void)v19;
      uint64_t v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    uint64_t v20 = *(double **)v5;
    if (*(void *)v5)
    {
      do
      {
        while (1)
        {
          char v17 = v20;
          double v21 = v20[4];
          if (v6 >= v21) {
            break;
          }
          uint64_t v20 = *(double **)v20;
          char v5 = v17;
          if (!*(void *)v17) {
            goto LABEL_43;
          }
        }
        if (v21 >= v6) {
          break;
        }
        char v5 = v20 + 1;
        uint64_t v20 = (double *)*((void *)v20 + 1);
      }
      while (v20);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void *sub_216997DF8@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  double v6 = operator new(0x38uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  void v6[4] = *a2;
  uint64_t result = sub_2168EE4C4(v6 + 5, a2 + 1);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_216997E54(_Unwind_Exception *a1)
{
  sub_216997E6C(v1, 0);
  _Unwind_Resume(a1);
}

void sub_216997E6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_2168EE084((uint64_t)v2 + 40);
    }
    operator delete(v2);
  }
}

void sub_216997EC4(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_216997EC4(a1, *a2);
    sub_216997EC4(a1, a2[1]);
    sub_2168EE084((uint64_t)(a2 + 5));
    operator delete(a2);
  }
}

uint64_t *sub_216997F20(uint64_t **a1, const void ***a2, uint64_t a3, uint64_t **a4)
{
  double v6 = sub_216997FA8((uint64_t)a1, &v10, a2);
  double v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    size_t v8 = (uint64_t **)v6;
    double v7 = (uint64_t *)operator new(0x30uLL);
    void v7[4] = **a4;
    v7[5] = 0;
    sub_21677B358(a1, v10, v8, v7);
  }
  return v7;
}

uint64_t *sub_216997FA8(uint64_t a1, void *a2, const void ***a3)
{
  uint64_t v5 = (uint64_t *)(a1 + 8);
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        size_t v8 = v4;
        if (!sub_21677B108(v7, *a3, (const void **)v4[4])) {
          break;
        }
        uint64_t v4 = (uint64_t *)*v8;
        uint64_t v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (!sub_21677B108(v7, (const void **)v8[4], *a3)) {
        break;
      }
      uint64_t v5 = v8 + 1;
      uint64_t v4 = (uint64_t *)v8[1];
    }
    while (v4);
  }
  else
  {
    size_t v8 = (uint64_t *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t sub_216998044(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 59) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C74E280);
  }
  else {
    return 0;
  }
}

uint64_t sub_21699807C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 60) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C74E298);
  }
  else {
    return 0;
  }
}

uint64_t sub_2169980B4(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000021746880ALL & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;

  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C755240);
}

uint64_t sub_216998140(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000021746883DLL & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;

  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C755250);
}

void sub_2169981CC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *(unsigned __int8 *)(a5 + 23);
  if ((v8 & 0x80u) == 0) {
    BOOL v9 = (const char *)a5;
  }
  else {
    BOOL v9 = *(const char **)a5;
  }
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a5 + 8);
  }
  if (v8) {
    uint64_t v10 = " ";
  }
  else {
    uint64_t v10 = "";
  }
  if (*(char *)(a3 + 23) >= 0) {
    uint64_t v11 = (const char *)a3;
  }
  else {
    uint64_t v11 = *(const char **)a3;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, a2, (pxrInternal__aapl__pxrReserved__ *)"%s%s%s = ", v9, v10, v11);
  std::string::size_type v12 = *(pxrInternal__aapl__pxrReserved__::SdfPath **)a4;
  uint64_t v13 = *(void *)(a4 + 8);
  if (*(void *)a4 == v13)
  {
    sub_216779094(__p, "None\n");
    if ((v30 & 0x80u) == 0) {
      uint64_t v16 = (char *)__p;
    }
    else {
      uint64_t v16 = (char *)__p[0];
    }
    if ((v30 & 0x80u) == 0) {
      unint64_t v17 = v30;
    }
    else {
      unint64_t v17 = (unint64_t)__p[1];
    }
    goto LABEL_23;
  }
  if (v13 - (void)v12 == 8)
  {
    unint64_t String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString(v12);
    if (*((char *)String + 23) >= 0) {
      double v15 = (const char *)String;
    }
    else {
      double v15 = (const char *)*String;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, 0, (pxrInternal__aapl__pxrReserved__ *)"<%s>", v15);
    sub_216779094(__p, "\n");
    if ((v30 & 0x80u) == 0) {
      uint64_t v16 = (char *)__p;
    }
    else {
      uint64_t v16 = (char *)__p[0];
    }
    if ((v30 & 0x80u) == 0) {
      unint64_t v17 = v30;
    }
    else {
      unint64_t v17 = (unint64_t)__p[1];
    }
LABEL_23:
    sub_216997948(a1, v16, v17);
    goto LABEL_59;
  }
  sub_216779094(__p, "[\n");
  if ((v30 & 0x80u) == 0) {
    double v18 = (char *)__p;
  }
  else {
    double v18 = (char *)__p[0];
  }
  if ((v30 & 0x80u) == 0) {
    unint64_t v19 = v30;
  }
  else {
    unint64_t v19 = (unint64_t)__p[1];
  }
  sub_216997948(a1, v18, v19);
  if ((char)v30 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v22 = *(void *)(a4 + 8);
  *(void *)&long long v28 = *(void *)a4;
  *((void *)&v28 + 1) = v22;
  while ((void)v28 != *((void *)&v28 + 1))
  {
    int v23 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_2169984B8((uint64_t *)&v28, v20, v21);
    unint64_t v24 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString(v23);
    if (*((char *)v24 + 23) >= 0) {
      unint64_t v25 = (const char *)v24;
    }
    else {
      unint64_t v25 = (const char *)*v24;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, a2 + 1, (pxrInternal__aapl__pxrReserved__ *)"<%s>", v25);
    *(_OWORD *)std::string __p = v28;
    sub_216998538(__p);
    if (__p[0] == __p[1])
    {
      sub_216779094(__p, "\n");
      if ((v30 & 0x80u) == 0) {
        unint64_t v26 = (char *)__p;
      }
      else {
        unint64_t v26 = (char *)__p[0];
      }
      if ((v30 & 0x80u) == 0) {
        unint64_t v27 = v30;
      }
      else {
        unint64_t v27 = (unint64_t)__p[1];
      }
    }
    else
    {
      sub_216779094(__p, ",\n");
      if ((v30 & 0x80u) == 0) {
        unint64_t v26 = (char *)__p;
      }
      else {
        unint64_t v26 = (char *)__p[0];
      }
      if ((v30 & 0x80u) == 0) {
        unint64_t v27 = v30;
      }
      else {
        unint64_t v27 = (unint64_t)__p[1];
      }
    }
    sub_216997948(a1, v26, v27);
    if ((char)v30 < 0) {
      operator delete(__p[0]);
    }
    sub_216998538(&v28);
  }
  sub_216779094(__p, "]\n");
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a1, a2, (uint64_t)__p);
LABEL_59:
  if ((char)v30 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216998488(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2169984B8(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    void v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__pxrReserved__::S"
            "dfPath>>::operator*() [T = const std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_216998530()
{
}

void *sub_216998538(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__px"
            "rReserved__::SdfPath>>::operator++() [T = const std::vector<pxrInternal__aapl__pxrReserved__::SdfPath>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

void sub_2169985B8(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v8 = *(unsigned __int8 *)(a5 + 23);
  if ((v8 & 0x80u) == 0) {
    BOOL v9 = (const char *)a5;
  }
  else {
    BOOL v9 = *(const char **)a5;
  }
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a5 + 8);
  }
  if (v8) {
    uint64_t v10 = " ";
  }
  else {
    uint64_t v10 = "";
  }
  if (*(char *)(a3 + 23) >= 0) {
    uint64_t v11 = (const char *)a3;
  }
  else {
    uint64_t v11 = *(const char **)a3;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, a2, (pxrInternal__aapl__pxrReserved__ *)"%s%s%s = ", v9, v10, v11);
  uint64_t v12 = *a4;
  uint64_t v13 = a4[1];
  if (*a4 == v13)
  {
    sub_216779094(__p, "None\n");
    if ((v26 & 0x80u) == 0) {
      BOOL v14 = (char *)__p;
    }
    else {
      BOOL v14 = (char *)__p[0];
    }
    if ((v26 & 0x80u) == 0) {
      unint64_t v15 = v26;
    }
    else {
      unint64_t v15 = (unint64_t)__p[1];
    }
    goto LABEL_20;
  }
  if (v13 - v12 == 48)
  {
    sub_21699885C(a1, 0, v12);
    sub_216779094(__p, "\n");
    if ((v26 & 0x80u) == 0) {
      BOOL v14 = (char *)__p;
    }
    else {
      BOOL v14 = (char *)__p[0];
    }
    if ((v26 & 0x80u) == 0) {
      unint64_t v15 = v26;
    }
    else {
      unint64_t v15 = (unint64_t)__p[1];
    }
LABEL_20:
    sub_216997948(a1, v14, v15);
    goto LABEL_53;
  }
  sub_216779094(__p, "[\n");
  if ((v26 & 0x80u) == 0) {
    uint64_t v16 = (char *)__p;
  }
  else {
    uint64_t v16 = (char *)__p[0];
  }
  if ((v26 & 0x80u) == 0) {
    unint64_t v17 = v26;
  }
  else {
    unint64_t v17 = (unint64_t)__p[1];
  }
  sub_216997948(a1, v16, v17);
  if ((char)v26 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v20 = a4[1];
  *(void *)&long long v24 = *a4;
  *((void *)&v24 + 1) = v20;
  while ((void)v24 != *((void *)&v24 + 1))
  {
    uint64_t v21 = sub_216998934((uint64_t *)&v24, v18, v19);
    sub_21699885C(a1, a2 + 1, v21);
    *(_OWORD *)std::string __p = v24;
    sub_2169989B4(__p);
    if (__p[0] == __p[1])
    {
      sub_216779094(__p, "\n");
      if ((v26 & 0x80u) == 0) {
        uint64_t v22 = (char *)__p;
      }
      else {
        uint64_t v22 = (char *)__p[0];
      }
      if ((v26 & 0x80u) == 0) {
        unint64_t v23 = v26;
      }
      else {
        unint64_t v23 = (unint64_t)__p[1];
      }
    }
    else
    {
      sub_216779094(__p, ",\n");
      if ((v26 & 0x80u) == 0) {
        uint64_t v22 = (char *)__p;
      }
      else {
        uint64_t v22 = (char *)__p[0];
      }
      if ((v26 & 0x80u) == 0) {
        unint64_t v23 = v26;
      }
      else {
        unint64_t v23 = (unint64_t)__p[1];
      }
    }
    sub_216997948(a1, v22, v23);
    if ((char)v26 < 0) {
      operator delete(__p[0]);
    }
    sub_2169989B4(&v24);
  }
  sub_216779094(__p, "]\n");
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a1, a2, (uint64_t)__p);
LABEL_53:
  if ((char)v26 < 0) {
    operator delete(__p[0]);
  }
}

void sub_21699882C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21699885C(void *a1, uint64_t a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, a2, (pxrInternal__aapl__pxrReserved__ *)"");
  uint64_t v6 = *(unsigned __int8 *)(a3 + 23);
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a3 + 8);
  }
  if (!v6)
  {
    int v7 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(a3 + 24);
    goto LABEL_7;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteAssetPath(a1, 0, (const std::string *)a3);
  int v7 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(a3 + 24);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a3 + 24)))
  {
LABEL_7:
    unint64_t String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString(v7);
    if (*((char *)String + 23) >= 0) {
      BOOL v9 = (const char *)String;
    }
    else {
      BOOL v9 = (const char *)*String;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, 0, (pxrInternal__aapl__pxrReserved__ *)"<%s>", v9);
  }

  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteLayerOffset(a1, a2 + 1, 0, (double *)(a3 + 32));
}

uint64_t sub_216998934(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    void v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__pxrReserved__::S"
            "dfPayload>>::operator*() [T = const std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_2169989AC()
{
}

void *sub_2169989B4(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__px"
            "rReserved__::SdfPayload>>::operator++() [T = const std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>"
            ", Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 48;
  }
  return a1;
}

void sub_216998A34(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v8 = *(unsigned __int8 *)(a5 + 23);
  if ((v8 & 0x80u) == 0) {
    BOOL v9 = (const char *)a5;
  }
  else {
    BOOL v9 = *(const char **)a5;
  }
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a5 + 8);
  }
  if (v8) {
    uint64_t v10 = " ";
  }
  else {
    uint64_t v10 = "";
  }
  if (*(char *)(a3 + 23) >= 0) {
    uint64_t v11 = (const char *)a3;
  }
  else {
    uint64_t v11 = *(const char **)a3;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, a2, (pxrInternal__aapl__pxrReserved__ *)"%s%s%s = ", v9, v10, v11);
  uint64_t v12 = *a4;
  uint64_t v13 = a4[1];
  if (*a4 == v13)
  {
    sub_216779094(__p, "None\n");
    if ((v26 & 0x80u) == 0) {
      BOOL v14 = (char *)__p;
    }
    else {
      BOOL v14 = (char *)__p[0];
    }
    if ((v26 & 0x80u) == 0) {
      unint64_t v15 = v26;
    }
    else {
      unint64_t v15 = (unint64_t)__p[1];
    }
    goto LABEL_53;
  }
  if (v13 - v12 == 56
    && pxrInternal__aapl__pxrReserved__::VtDictionary::empty((pxrInternal__aapl__pxrReserved__::VtDictionary *)(v12 + 48)))
  {
    sub_216998CE8(a1, 0, *a4);
    sub_216779094(__p, "\n");
    if ((v26 & 0x80u) == 0) {
      BOOL v14 = (char *)__p;
    }
    else {
      BOOL v14 = (char *)__p[0];
    }
    if ((v26 & 0x80u) == 0) {
      unint64_t v15 = v26;
    }
    else {
      unint64_t v15 = (unint64_t)__p[1];
    }
LABEL_53:
    sub_216997948(a1, v14, v15);
    goto LABEL_54;
  }
  sub_216779094(__p, "[\n");
  if ((v26 & 0x80u) == 0) {
    uint64_t v16 = (char *)__p;
  }
  else {
    uint64_t v16 = (char *)__p[0];
  }
  if ((v26 & 0x80u) == 0) {
    unint64_t v17 = v26;
  }
  else {
    unint64_t v17 = (unint64_t)__p[1];
  }
  sub_216997948(a1, v16, v17);
  if ((char)v26 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v20 = a4[1];
  *(void *)&long long v24 = *a4;
  *((void *)&v24 + 1) = v20;
  while ((void)v24 != *((void *)&v24 + 1))
  {
    uint64_t v21 = sub_216998ED0((uint64_t *)&v24, v18, v19);
    sub_216998CE8(a1, a2 + 1, v21);
    *(_OWORD *)std::string __p = v24;
    sub_216998F50(__p);
    if (__p[0] == __p[1])
    {
      sub_216779094(__p, "\n");
      if ((v26 & 0x80u) == 0) {
        uint64_t v22 = (char *)__p;
      }
      else {
        uint64_t v22 = (char *)__p[0];
      }
      if ((v26 & 0x80u) == 0) {
        unint64_t v23 = v26;
      }
      else {
        unint64_t v23 = (unint64_t)__p[1];
      }
    }
    else
    {
      sub_216779094(__p, ",\n");
      if ((v26 & 0x80u) == 0) {
        uint64_t v22 = (char *)__p;
      }
      else {
        uint64_t v22 = (char *)__p[0];
      }
      if ((v26 & 0x80u) == 0) {
        unint64_t v23 = v26;
      }
      else {
        unint64_t v23 = (unint64_t)__p[1];
      }
    }
    sub_216997948(a1, v22, v23);
    if ((char)v26 < 0) {
      operator delete(__p[0]);
    }
    sub_216998F50(&v24);
  }
  sub_216779094(__p, "]\n");
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a1, a2, (uint64_t)__p);
LABEL_54:
  if ((char)v26 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216998CB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_216998CE8(void *a1, uint64_t a2, uint64_t a3)
{
  char v6 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)(a3 + 48);
  BOOL v7 = pxrInternal__aapl__pxrReserved__::VtDictionary::empty((pxrInternal__aapl__pxrReserved__::VtDictionary *)(a3 + 48));
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, a2, (pxrInternal__aapl__pxrReserved__ *)"");
  uint64_t v8 = *(unsigned __int8 *)(a3 + 23);
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a3 + 8);
  }
  if (!v8)
  {
    BOOL v9 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(a3 + 24);
LABEL_8:
    unint64_t String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString(v9);
    if (*((char *)String + 23) >= 0) {
      uint64_t v11 = (const char *)String;
    }
    else {
      uint64_t v11 = (const char *)*String;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, 0, (pxrInternal__aapl__pxrReserved__ *)"<%s>", v11);
    if (v7) {
      goto LABEL_20;
    }
    goto LABEL_12;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteAssetPath(a1, 0, (const std::string *)a3);
  BOOL v9 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(a3 + 24);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a3 + 24))) {
    goto LABEL_8;
  }
  if (v7) {
    goto LABEL_20;
  }
LABEL_12:
  sub_216779094(__p, " (\n");
  if ((v15 & 0x80u) == 0) {
    uint64_t v12 = (char *)__p;
  }
  else {
    uint64_t v12 = (char *)__p[0];
  }
  if ((v15 & 0x80u) == 0) {
    unint64_t v13 = v15;
  }
  else {
    unint64_t v13 = (unint64_t)__p[1];
  }
  sub_216997948(a1, v12, v13);
  if ((char)v15 < 0) {
    operator delete(__p[0]);
  }
LABEL_20:
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteLayerOffset(a1, a2 + 1, !v7, (double *)(a3 + 32));
  if (!pxrInternal__aapl__pxrReserved__::VtDictionary::empty(v6))
  {
    sub_216779094(__p, "customData = ");
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a1, a2 + 1, (uint64_t)__p);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteDictionary(a1, a2 + 1, 1, v6, 0);
  }
  if (!v7)
  {
    sub_216779094(__p, ")");
    pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Puts(a1, a2, (uint64_t)__p);
    if ((char)v15 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_216998EA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216998ED0(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    void v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__pxrReserved__::S"
            "dfReference>>::operator*() [T = const std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_216998F48()
{
}

void *sub_216998F50(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__px"
            "rReserved__::SdfReference>>::operator++() [T = const std::vector<pxrInternal__aapl__pxrReserved__::SdfRefere"
            "nce>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 56;
  }
  return a1;
}

void sub_216998FD0(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v7 = *(unsigned __int8 *)(a5 + 23);
  if ((v7 & 0x80u) == 0) {
    uint64_t v8 = (const char *)a5;
  }
  else {
    uint64_t v8 = *(const char **)a5;
  }
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a5 + 8);
  }
  if (v7) {
    BOOL v9 = " ";
  }
  else {
    BOOL v9 = "";
  }
  if (*(char *)(a3 + 23) >= 0) {
    uint64_t v10 = (const char *)a3;
  }
  else {
    uint64_t v10 = *(const char **)a3;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, a2, (pxrInternal__aapl__pxrReserved__ *)"%s%s%s = ", v8, v9, v10);
  if (*a4 == a4[1])
  {
    sub_216779094(__p, "None\n");
    if ((v25 & 0x80u) == 0) {
      uint64_t v21 = (char *)__p;
    }
    else {
      uint64_t v21 = (char *)__p[0];
    }
    if ((v25 & 0x80u) == 0) {
      unint64_t v22 = v25;
    }
    else {
      unint64_t v22 = (unint64_t)__p[1];
    }
    sub_216997948(a1, v21, v22);
  }
  else
  {
    sub_216779094(__p, "[");
    if ((v25 & 0x80u) == 0) {
      uint64_t v11 = (char *)__p;
    }
    else {
      uint64_t v11 = (char *)__p[0];
    }
    if ((v25 & 0x80u) == 0) {
      unint64_t v12 = v25;
    }
    else {
      unint64_t v12 = (unint64_t)__p[1];
    }
    sub_216997948(a1, v11, v12);
    if ((char)v25 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v15 = a4[1];
    *(void *)&long long v23 = *a4;
    *((void *)&v23 + 1) = v15;
    while ((void)v23 != *((void *)&v23 + 1))
    {
      sub_216999264((uint64_t *)&v23, v13, v14);
      sub_216997470();
      if ((v25 & 0x80u) == 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, 0, (pxrInternal__aapl__pxrReserved__ *)"%s", (const char *)v16);
      if ((char)v25 < 0) {
        operator delete(__p[0]);
      }
      *(_OWORD *)std::string __p = v23;
      sub_2169992E4(__p);
      if (__p[0] == __p[1])
      {
        sub_216779094(__p, "");
        if ((v25 & 0x80u) == 0) {
          unint64_t v17 = (char *)__p;
        }
        else {
          unint64_t v17 = (char *)__p[0];
        }
        if ((v25 & 0x80u) == 0) {
          unint64_t v18 = v25;
        }
        else {
          unint64_t v18 = (unint64_t)__p[1];
        }
      }
      else
      {
        sub_216779094(__p, ", ");
        if ((v25 & 0x80u) == 0) {
          unint64_t v17 = (char *)__p;
        }
        else {
          unint64_t v17 = (char *)__p[0];
        }
        if ((v25 & 0x80u) == 0) {
          unint64_t v18 = v25;
        }
        else {
          unint64_t v18 = (unint64_t)__p[1];
        }
      }
      sub_216997948(a1, v17, v18);
      if ((char)v25 < 0) {
        operator delete(__p[0]);
      }
      sub_2169992E4(&v23);
    }
    sub_216779094(__p, "]\n");
    if ((v25 & 0x80u) == 0) {
      unint64_t v19 = (char *)__p;
    }
    else {
      unint64_t v19 = (char *)__p[0];
    }
    if ((v25 & 0x80u) == 0) {
      unint64_t v20 = v25;
    }
    else {
      unint64_t v20 = (unint64_t)__p[1];
    }
    sub_216997948(a1, v19, v20);
  }
  if ((char)v25 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216999234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216999264(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    void v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<int>>::operator*() [T = const std::"
            "vector<int>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_2169992DC()
{
}

void *sub_2169992E4(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<int>>::operator++() ["
            "T = const std::vector<int>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 4;
  }
  return a1;
}

void sub_216999364(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v7 = *(unsigned __int8 *)(a5 + 23);
  if ((v7 & 0x80u) == 0) {
    uint64_t v8 = (const char *)a5;
  }
  else {
    uint64_t v8 = *(const char **)a5;
  }
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a5 + 8);
  }
  if (v7) {
    BOOL v9 = " ";
  }
  else {
    BOOL v9 = "";
  }
  if (*(char *)(a3 + 23) >= 0) {
    uint64_t v10 = (const char *)a3;
  }
  else {
    uint64_t v10 = *(const char **)a3;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, a2, (pxrInternal__aapl__pxrReserved__ *)"%s%s%s = ", v8, v9, v10);
  if (*a4 == a4[1])
  {
    sub_216779094(__p, "None\n");
    if ((v25 & 0x80u) == 0) {
      uint64_t v21 = (char *)__p;
    }
    else {
      uint64_t v21 = (char *)__p[0];
    }
    if ((v25 & 0x80u) == 0) {
      unint64_t v22 = v25;
    }
    else {
      unint64_t v22 = (unint64_t)__p[1];
    }
    sub_216997948(a1, v21, v22);
  }
  else
  {
    sub_216779094(__p, "[");
    if ((v25 & 0x80u) == 0) {
      uint64_t v11 = (char *)__p;
    }
    else {
      uint64_t v11 = (char *)__p[0];
    }
    if ((v25 & 0x80u) == 0) {
      unint64_t v12 = v25;
    }
    else {
      unint64_t v12 = (unint64_t)__p[1];
    }
    sub_216997948(a1, v11, v12);
    if ((char)v25 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v15 = a4[1];
    *(void *)&long long v23 = *a4;
    *((void *)&v23 + 1) = v15;
    while ((void)v23 != *((void *)&v23 + 1))
    {
      sub_2169995F8((uint64_t *)&v23, v13, v14);
      sub_2169996F8();
      if ((v25 & 0x80u) == 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, 0, (pxrInternal__aapl__pxrReserved__ *)"%s", (const char *)v16);
      if ((char)v25 < 0) {
        operator delete(__p[0]);
      }
      *(_OWORD *)std::string __p = v23;
      sub_216999678(__p);
      if (__p[0] == __p[1])
      {
        sub_216779094(__p, "");
        if ((v25 & 0x80u) == 0) {
          unint64_t v17 = (char *)__p;
        }
        else {
          unint64_t v17 = (char *)__p[0];
        }
        if ((v25 & 0x80u) == 0) {
          unint64_t v18 = v25;
        }
        else {
          unint64_t v18 = (unint64_t)__p[1];
        }
      }
      else
      {
        sub_216779094(__p, ", ");
        if ((v25 & 0x80u) == 0) {
          unint64_t v17 = (char *)__p;
        }
        else {
          unint64_t v17 = (char *)__p[0];
        }
        if ((v25 & 0x80u) == 0) {
          unint64_t v18 = v25;
        }
        else {
          unint64_t v18 = (unint64_t)__p[1];
        }
      }
      sub_216997948(a1, v17, v18);
      if ((char)v25 < 0) {
        operator delete(__p[0]);
      }
      sub_216999678(&v23);
    }
    sub_216779094(__p, "]\n");
    if ((v25 & 0x80u) == 0) {
      unint64_t v19 = (char *)__p;
    }
    else {
      unint64_t v19 = (char *)__p[0];
    }
    if ((v25 & 0x80u) == 0) {
      unint64_t v20 = v25;
    }
    else {
      unint64_t v20 = (unint64_t)__p[1];
    }
    sub_216997948(a1, v19, v20);
  }
  if ((char)v25 < 0) {
    operator delete(__p[0]);
  }
}

void sub_2169995C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2169995F8(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    void v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<long long>>::operator*() [T = const"
            " std::vector<long long>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_216999670()
{
}

void *sub_216999678(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<long long>>::operator"
            "++() [T = const std::vector<long long>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

uint64_t sub_2169996F8()
{
  sub_21677B834((uint64_t)v1);
  std::ostream::operator<<();
  std::stringbuf::str();
  v1[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v1 + *(void *)(v1[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v1[1] = MEMORY[0x263F8C318] + 16;
  if (v2 < 0) {
    operator delete((void *)v1[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x21D447E60](&v3);
}

void sub_21699982C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21677B9CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216999840(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v7 = *(unsigned __int8 *)(a5 + 23);
  if ((v7 & 0x80u) == 0) {
    uint64_t v8 = (const char *)a5;
  }
  else {
    uint64_t v8 = *(const char **)a5;
  }
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a5 + 8);
  }
  if (v7) {
    BOOL v9 = " ";
  }
  else {
    BOOL v9 = "";
  }
  if (*(char *)(a3 + 23) >= 0) {
    uint64_t v10 = (const char *)a3;
  }
  else {
    uint64_t v10 = *(const char **)a3;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, a2, (pxrInternal__aapl__pxrReserved__ *)"%s%s%s = ", v8, v9, v10);
  if (*a4 == a4[1])
  {
    sub_216779094(__p, "None\n");
    if ((v25 & 0x80u) == 0) {
      uint64_t v21 = (char *)__p;
    }
    else {
      uint64_t v21 = (char *)__p[0];
    }
    if ((v25 & 0x80u) == 0) {
      unint64_t v22 = v25;
    }
    else {
      unint64_t v22 = (unint64_t)__p[1];
    }
    sub_216997948(a1, v21, v22);
  }
  else
  {
    sub_216779094(__p, "[");
    if ((v25 & 0x80u) == 0) {
      uint64_t v11 = (char *)__p;
    }
    else {
      uint64_t v11 = (char *)__p[0];
    }
    if ((v25 & 0x80u) == 0) {
      unint64_t v12 = v25;
    }
    else {
      unint64_t v12 = (unint64_t)__p[1];
    }
    sub_216997948(a1, v11, v12);
    if ((char)v25 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v15 = a4[1];
    *(void *)&long long v23 = *a4;
    *((void *)&v23 + 1) = v15;
    while ((void)v23 != *((void *)&v23 + 1))
    {
      sub_216999AD4((uint64_t *)&v23, v13, v14);
      sub_2169975F0();
      if ((v25 & 0x80u) == 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, 0, (pxrInternal__aapl__pxrReserved__ *)"%s", (const char *)v16);
      if ((char)v25 < 0) {
        operator delete(__p[0]);
      }
      *(_OWORD *)std::string __p = v23;
      sub_216999B54(__p);
      if (__p[0] == __p[1])
      {
        sub_216779094(__p, "");
        if ((v25 & 0x80u) == 0) {
          unint64_t v17 = (char *)__p;
        }
        else {
          unint64_t v17 = (char *)__p[0];
        }
        if ((v25 & 0x80u) == 0) {
          unint64_t v18 = v25;
        }
        else {
          unint64_t v18 = (unint64_t)__p[1];
        }
      }
      else
      {
        sub_216779094(__p, ", ");
        if ((v25 & 0x80u) == 0) {
          unint64_t v17 = (char *)__p;
        }
        else {
          unint64_t v17 = (char *)__p[0];
        }
        if ((v25 & 0x80u) == 0) {
          unint64_t v18 = v25;
        }
        else {
          unint64_t v18 = (unint64_t)__p[1];
        }
      }
      sub_216997948(a1, v17, v18);
      if ((char)v25 < 0) {
        operator delete(__p[0]);
      }
      sub_216999B54(&v23);
    }
    sub_216779094(__p, "]\n");
    if ((v25 & 0x80u) == 0) {
      unint64_t v19 = (char *)__p;
    }
    else {
      unint64_t v19 = (char *)__p[0];
    }
    if ((v25 & 0x80u) == 0) {
      unint64_t v20 = v25;
    }
    else {
      unint64_t v20 = (unint64_t)__p[1];
    }
    sub_216997948(a1, v19, v20);
  }
  if ((char)v25 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216999AA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216999AD4(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    void v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<unsigned int>>::operator*() [T = co"
            "nst std::vector<unsigned int>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_216999B4C()
{
}

void *sub_216999B54(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<unsigned int>>::opera"
            "tor++() [T = const std::vector<unsigned int>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 4;
  }
  return a1;
}

void sub_216999BD4(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v7 = *(unsigned __int8 *)(a5 + 23);
  if ((v7 & 0x80u) == 0) {
    uint64_t v8 = (const char *)a5;
  }
  else {
    uint64_t v8 = *(const char **)a5;
  }
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a5 + 8);
  }
  if (v7) {
    BOOL v9 = " ";
  }
  else {
    BOOL v9 = "";
  }
  if (*(char *)(a3 + 23) >= 0) {
    uint64_t v10 = (const char *)a3;
  }
  else {
    uint64_t v10 = *(const char **)a3;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, a2, (pxrInternal__aapl__pxrReserved__ *)"%s%s%s = ", v8, v9, v10);
  if (*a4 == a4[1])
  {
    sub_216779094(__p, "None\n");
    if ((v25 & 0x80u) == 0) {
      uint64_t v21 = (char *)__p;
    }
    else {
      uint64_t v21 = (char *)__p[0];
    }
    if ((v25 & 0x80u) == 0) {
      unint64_t v22 = v25;
    }
    else {
      unint64_t v22 = (unint64_t)__p[1];
    }
    sub_216997948(a1, v21, v22);
  }
  else
  {
    sub_216779094(__p, "[");
    if ((v25 & 0x80u) == 0) {
      uint64_t v11 = (char *)__p;
    }
    else {
      uint64_t v11 = (char *)__p[0];
    }
    if ((v25 & 0x80u) == 0) {
      unint64_t v12 = v25;
    }
    else {
      unint64_t v12 = (unint64_t)__p[1];
    }
    sub_216997948(a1, v11, v12);
    if ((char)v25 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v15 = a4[1];
    *(void *)&long long v23 = *a4;
    *((void *)&v23 + 1) = v15;
    while ((void)v23 != *((void *)&v23 + 1))
    {
      sub_216999E68((uint64_t *)&v23, v13, v14);
      sub_216999F68();
      if ((v25 & 0x80u) == 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, 0, (pxrInternal__aapl__pxrReserved__ *)"%s", (const char *)v16);
      if ((char)v25 < 0) {
        operator delete(__p[0]);
      }
      *(_OWORD *)std::string __p = v23;
      sub_216999EE8(__p);
      if (__p[0] == __p[1])
      {
        sub_216779094(__p, "");
        if ((v25 & 0x80u) == 0) {
          unint64_t v17 = (char *)__p;
        }
        else {
          unint64_t v17 = (char *)__p[0];
        }
        if ((v25 & 0x80u) == 0) {
          unint64_t v18 = v25;
        }
        else {
          unint64_t v18 = (unint64_t)__p[1];
        }
      }
      else
      {
        sub_216779094(__p, ", ");
        if ((v25 & 0x80u) == 0) {
          unint64_t v17 = (char *)__p;
        }
        else {
          unint64_t v17 = (char *)__p[0];
        }
        if ((v25 & 0x80u) == 0) {
          unint64_t v18 = v25;
        }
        else {
          unint64_t v18 = (unint64_t)__p[1];
        }
      }
      sub_216997948(a1, v17, v18);
      if ((char)v25 < 0) {
        operator delete(__p[0]);
      }
      sub_216999EE8(&v23);
    }
    sub_216779094(__p, "]\n");
    if ((v25 & 0x80u) == 0) {
      unint64_t v19 = (char *)__p;
    }
    else {
      unint64_t v19 = (char *)__p[0];
    }
    if ((v25 & 0x80u) == 0) {
      unint64_t v20 = v25;
    }
    else {
      unint64_t v20 = (unint64_t)__p[1];
    }
    sub_216997948(a1, v19, v20);
  }
  if ((char)v25 < 0) {
    operator delete(__p[0]);
  }
}

void sub_216999E38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_216999E68(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    void v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<unsigned long long>>::operator*() ["
            "T = const std::vector<unsigned long long>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_216999EE0()
{
}

void *sub_216999EE8(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<unsigned long long>>:"
            ":operator++() [T = const std::vector<unsigned long long>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

uint64_t sub_216999F68()
{
  sub_21677B834((uint64_t)v1);
  std::ostream::operator<<();
  std::stringbuf::str();
  v1[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v1 + *(void *)(v1[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v1[1] = MEMORY[0x263F8C318] + 16;
  if (v2 < 0) {
    operator delete((void *)v1[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x21D447E60](&v3);
}

void sub_21699A09C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21677B9CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_21699A0B0(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v7 = *(unsigned __int8 *)(a5 + 23);
  if ((v7 & 0x80u) == 0) {
    uint64_t v8 = (const char *)a5;
  }
  else {
    uint64_t v8 = *(const char **)a5;
  }
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a5 + 8);
  }
  if (v7) {
    BOOL v9 = " ";
  }
  else {
    BOOL v9 = "";
  }
  if (*(char *)(a3 + 23) >= 0) {
    uint64_t v10 = (const char *)a3;
  }
  else {
    uint64_t v10 = *(const char **)a3;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, a2, (pxrInternal__aapl__pxrReserved__ *)"%s%s%s = ", v8, v9, v10);
  if (*a4 == a4[1])
  {
    sub_216779094(__p, "None\n");
    if ((v25 & 0x80u) == 0) {
      uint64_t v21 = (char *)__p;
    }
    else {
      uint64_t v21 = (char *)__p[0];
    }
    if ((v25 & 0x80u) == 0) {
      unint64_t v22 = v25;
    }
    else {
      unint64_t v22 = (unint64_t)__p[1];
    }
    sub_216997948(a1, v21, v22);
  }
  else
  {
    sub_216779094(__p, "[");
    if ((v25 & 0x80u) == 0) {
      uint64_t v11 = (char *)__p;
    }
    else {
      uint64_t v11 = (char *)__p[0];
    }
    if ((v25 & 0x80u) == 0) {
      unint64_t v12 = v25;
    }
    else {
      unint64_t v12 = (unint64_t)__p[1];
    }
    sub_216997948(a1, v11, v12);
    if ((char)v25 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v15 = a4[1];
    *(void *)&long long v23 = *a4;
    *((void *)&v23 + 1) = v15;
    while ((void)v23 != *((void *)&v23 + 1))
    {
      uint64_t v16 = (const std::string *)sub_2168E5C08((uint64_t *)&v23, v13, v14);
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteQuotedString(a1, 0, v16);
      *(_OWORD *)std::string __p = v23;
      sub_2168E5E20(__p);
      if (__p[0] == __p[1])
      {
        sub_216779094(__p, "");
        if ((v25 & 0x80u) == 0) {
          unint64_t v17 = (char *)__p;
        }
        else {
          unint64_t v17 = (char *)__p[0];
        }
        if ((v25 & 0x80u) == 0) {
          unint64_t v18 = v25;
        }
        else {
          unint64_t v18 = (unint64_t)__p[1];
        }
      }
      else
      {
        sub_216779094(__p, ", ");
        if ((v25 & 0x80u) == 0) {
          unint64_t v17 = (char *)__p;
        }
        else {
          unint64_t v17 = (char *)__p[0];
        }
        if ((v25 & 0x80u) == 0) {
          unint64_t v18 = v25;
        }
        else {
          unint64_t v18 = (unint64_t)__p[1];
        }
      }
      sub_216997948(a1, v17, v18);
      if ((char)v25 < 0) {
        operator delete(__p[0]);
      }
      sub_2168E5E20(&v23);
    }
    sub_216779094(__p, "]\n");
    if ((v25 & 0x80u) == 0) {
      unint64_t v19 = (char *)__p;
    }
    else {
      unint64_t v19 = (char *)__p[0];
    }
    if ((v25 & 0x80u) == 0) {
      unint64_t v20 = v25;
    }
    else {
      unint64_t v20 = (unint64_t)__p[1];
    }
    sub_216997948(a1, v19, v20);
  }
  if ((char)v25 < 0) {
    operator delete(__p[0]);
  }
}

void sub_21699A2D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21699A304(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v7 = *(unsigned __int8 *)(a5 + 23);
  if ((v7 & 0x80u) == 0) {
    uint64_t v8 = (const char *)a5;
  }
  else {
    uint64_t v8 = *(const char **)a5;
  }
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a5 + 8);
  }
  if (v7) {
    BOOL v9 = " ";
  }
  else {
    BOOL v9 = "";
  }
  if (*(char *)(a3 + 23) >= 0) {
    uint64_t v10 = (const char *)a3;
  }
  else {
    uint64_t v10 = *(const char **)a3;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, a2, (pxrInternal__aapl__pxrReserved__ *)"%s%s%s = ", v8, v9, v10);
  if (*a4 == a4[1])
  {
    sub_216779094(__p, "None\n");
    if ((v26 & 0x80u) == 0) {
      unint64_t v22 = (char *)__p;
    }
    else {
      unint64_t v22 = (char *)__p[0];
    }
    if ((v26 & 0x80u) == 0) {
      unint64_t v23 = v26;
    }
    else {
      unint64_t v23 = (unint64_t)__p[1];
    }
    sub_216997948(a1, v22, v23);
  }
  else
  {
    sub_216779094(__p, "[");
    if ((v26 & 0x80u) == 0) {
      uint64_t v11 = (char *)__p;
    }
    else {
      uint64_t v11 = (char *)__p[0];
    }
    if ((v26 & 0x80u) == 0) {
      unint64_t v12 = v26;
    }
    else {
      unint64_t v12 = (unint64_t)__p[1];
    }
    sub_216997948(a1, v11, v12);
    if ((char)v26 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v15 = a4[1];
    *(void *)&long long v24 = *a4;
    *((void *)&v24 + 1) = v15;
    while ((void)v24 != *((void *)&v24 + 1))
    {
      uint64_t v16 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_21699A570((uint64_t *)&v24, v13, v14);
      if ((*(void *)v16 & 0xFFFFFFFFFFFFFFF8) != 0) {
        Emptyunint64_t String = (const std::string *)((*(void *)v16 & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        Emptyunint64_t String = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v16);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::WriteQuotedString(a1, 0, EmptyString);
      *(_OWORD *)std::string __p = v24;
      sub_21699A5F0(__p);
      if (__p[0] == __p[1])
      {
        sub_216779094(__p, "");
        if ((v26 & 0x80u) == 0) {
          unint64_t v18 = (char *)__p;
        }
        else {
          unint64_t v18 = (char *)__p[0];
        }
        if ((v26 & 0x80u) == 0) {
          unint64_t v19 = v26;
        }
        else {
          unint64_t v19 = (unint64_t)__p[1];
        }
      }
      else
      {
        sub_216779094(__p, ", ");
        if ((v26 & 0x80u) == 0) {
          unint64_t v18 = (char *)__p;
        }
        else {
          unint64_t v18 = (char *)__p[0];
        }
        if ((v26 & 0x80u) == 0) {
          unint64_t v19 = v26;
        }
        else {
          unint64_t v19 = (unint64_t)__p[1];
        }
      }
      sub_216997948(a1, v18, v19);
      if ((char)v26 < 0) {
        operator delete(__p[0]);
      }
      sub_21699A5F0(&v24);
    }
    sub_216779094(__p, "]\n");
    if ((v26 & 0x80u) == 0) {
      unint64_t v20 = (char *)__p;
    }
    else {
      unint64_t v20 = (char *)__p[0];
    }
    if ((v26 & 0x80u) == 0) {
      unint64_t v21 = v26;
    }
    else {
      unint64_t v21 = (unint64_t)__p[1];
    }
    sub_216997948(a1, v20, v21);
  }
  if ((char)v26 < 0) {
    operator delete(__p[0]);
  }
}

void sub_21699A544(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21699A570(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    void v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__pxrReserved__::T"
            "fToken>>::operator*() [T = const std::vector<pxrInternal__aapl__pxrReserved__::TfToken>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_21699A5E8()
{
}

void *sub_21699A5F0(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__px"
            "rReserved__::TfToken>>::operator++() [T = const std::vector<pxrInternal__aapl__pxrReserved__::TfToken>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

void sub_21699A670(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v7 = *(unsigned __int8 *)(a5 + 23);
  if ((v7 & 0x80u) == 0) {
    uint64_t v8 = (const char *)a5;
  }
  else {
    uint64_t v8 = *(const char **)a5;
  }
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a5 + 8);
  }
  if (v7) {
    BOOL v9 = " ";
  }
  else {
    BOOL v9 = "";
  }
  if (*(char *)(a3 + 23) >= 0) {
    uint64_t v10 = (const char *)a3;
  }
  else {
    uint64_t v10 = *(const char **)a3;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, a2, (pxrInternal__aapl__pxrReserved__ *)"%s%s%s = ", v8, v9, v10);
  if (*a4 == a4[1])
  {
    sub_216779094(__p, "None\n");
    if ((v26 & 0x80u) == 0) {
      unint64_t v22 = (char *)__p;
    }
    else {
      unint64_t v22 = (char *)__p[0];
    }
    if ((v26 & 0x80u) == 0) {
      unint64_t v23 = v26;
    }
    else {
      unint64_t v23 = (unint64_t)__p[1];
    }
    sub_216997948(a1, v22, v23);
  }
  else
  {
    sub_216779094(__p, "[");
    if ((v26 & 0x80u) == 0) {
      uint64_t v11 = (char *)__p;
    }
    else {
      uint64_t v11 = (char *)__p[0];
    }
    if ((v26 & 0x80u) == 0) {
      unint64_t v12 = v26;
    }
    else {
      unint64_t v12 = (unint64_t)__p[1];
    }
    sub_216997948(a1, v11, v12);
    if ((char)v26 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v15 = a4[1];
    *(void *)&long long v24 = *a4;
    *((void *)&v24 + 1) = v15;
    while ((void)v24 != *((void *)&v24 + 1))
    {
      uint64_t v16 = sub_21699A904((uint64_t *)&v24, v13, v14);
      sub_21699AA04(v16);
      if ((v26 & 0x80u) == 0) {
        unint64_t v17 = __p;
      }
      else {
        unint64_t v17 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Write(a1, 0, (pxrInternal__aapl__pxrReserved__ *)"%s", (const char *)v17);
      if ((char)v26 < 0) {
        operator delete(__p[0]);
      }
      *(_OWORD *)std::string __p = v24;
      sub_21699A984(__p);
      if (__p[0] == __p[1])
      {
        sub_216779094(__p, "");
        if ((v26 & 0x80u) == 0) {
          unint64_t v18 = (char *)__p;
        }
        else {
          unint64_t v18 = (char *)__p[0];
        }
        if ((v26 & 0x80u) == 0) {
          unint64_t v19 = v26;
        }
        else {
          unint64_t v19 = (unint64_t)__p[1];
        }
      }
      else
      {
        sub_216779094(__p, ", ");
        if ((v26 & 0x80u) == 0) {
          unint64_t v18 = (char *)__p;
        }
        else {
          unint64_t v18 = (char *)__p[0];
        }
        if ((v26 & 0x80u) == 0) {
          unint64_t v19 = v26;
        }
        else {
          unint64_t v19 = (unint64_t)__p[1];
        }
      }
      sub_216997948(a1, v18, v19);
      if ((char)v26 < 0) {
        operator delete(__p[0]);
      }
      sub_21699A984(&v24);
    }
    sub_216779094(__p, "]\n");
    if ((v26 & 0x80u) == 0) {
      unint64_t v20 = (char *)__p;
    }
    else {
      unint64_t v20 = (char *)__p[0];
    }
    if ((v26 & 0x80u) == 0) {
      unint64_t v21 = v26;
    }
    else {
      unint64_t v21 = (unint64_t)__p[1];
    }
    sub_216997948(a1, v20, v21);
  }
  if ((char)v26 < 0) {
    operator delete(__p[0]);
  }
}

void sub_21699A8D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21699A904(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    void v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__pxrReserved__::S"
            "dfUnregisteredValue>>::operator*() [T = const std::vector<pxrInternal__aapl__pxrReserved__::SdfUnregisteredV"
            "alue>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_21699A97C()
{
}

void *sub_21699A984(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__px"
            "rReserved__::SdfUnregisteredValue>>::operator++() [T = const std::vector<pxrInternal__aapl__pxrReserved__::S"
            "dfUnregisteredValue>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 16;
  }
  return a1;
}

uint64_t sub_21699AA04(uint64_t a1)
{
  sub_21677B834((uint64_t)v3);
  pxrInternal__aapl__pxrReserved__::operator<<(v3, a1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v3 + *(void *)(v3[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v3[1] = MEMORY[0x263F8C318] + 16;
  if (v4 < 0) {
    operator delete((void *)v3[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x21D447E60](&v5);
}

void sub_21699AB38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21677B9CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21699AB4C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000217478EC2 & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;

  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C755268);
}

void sub_21699ABD8(pxrInternal__aapl__pxrReserved__::SdfPathExpression *a1@<X0>, std::string *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfPathExpression::GetText((uint64_t *)&__p, a1);
  pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Quote(&__p, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_21699AC24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21699AC40(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000217478EFALL & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;

  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C755278);
}

double pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry::Sdf_LayerRegistry(pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry *this)
{
  double result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_DWORD *)this + 18) = 1065353216;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 28) = 1065353216;
  return result;
}

{
  double result;

  double result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_DWORD *)this + 18) = 1065353216;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 28) = 1065353216;
  return result;
}

void pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry::_Layers::Update(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  sub_21699B1CC(a3, (uint64_t)&v54);
  sub_21699B1CC(a4, (uint64_t)v48);
  uint64_t v7 = v62;
  if ((v62 & 0x80u) == 0) {
    size_t v8 = v62;
  }
  else {
    size_t v8 = __n;
  }
  unint64_t v9 = v53;
  if ((v53 & 0x80u) != 0) {
    unint64_t v9 = (unint64_t)__p[1];
  }
  if (v8 == v9)
  {
    if ((v53 & 0x80u) == 0) {
      uint64_t v10 = __p;
    }
    else {
      uint64_t v10 = (void **)__p[0];
    }
    if ((v62 & 0x80) != 0)
    {
      if (!memcmp(__s1, v10, __n)) {
        goto LABEL_37;
      }
    }
    else
    {
      if (!v62) {
        goto LABEL_37;
      }
      p_s1 = &__s1;
      while (*(unsigned __int8 *)p_s1 == *(unsigned __int8 *)v10)
      {
        p_s1 = (void **)((char *)p_s1 + 1);
        uint64_t v10 = (void **)((char *)v10 + 1);
        if (!--v7) {
          goto LABEL_37;
        }
      }
    }
  }
  if (sub_21699B3E0((uint64_t)&__s1, (uint64_t)a2, a1) && sub_216977CF0(3))
  {
    if ((v62 & 0x80u) == 0) {
      BOOL v14 = &__s1;
    }
    else {
      BOOL v14 = __s1;
    }
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Removed realPath '%s' for update.\n", v12, v13, v14);
  }
  unint64_t v15 = v53;
  if ((v53 & 0x80u) != 0) {
    unint64_t v15 = (unint64_t)__p[1];
  }
  if (v15)
  {
    sub_21699D064((uint64_t)a1, (unsigned __int8 *)__p, (long long *)__p, a2);
    if (v16)
    {
      if (sub_216977CF0(3))
      {
        if ((v53 & 0x80u) == 0) {
          unint64_t v22 = __p;
        }
        else {
          unint64_t v22 = (void **)__p[0];
        }
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Updated realPath '%s'.\n", v20, v21, v22);
      }
    }
    else
    {
      MEMORY[0x21D4477E0](v50, "");
      MEMORY[0x21D4477E0](v48, "");
      if (sub_216977CF0(3))
      {
        if ((v53 & 0x80u) == 0) {
          unint64_t v19 = __p;
        }
        else {
          unint64_t v19 = (void **)__p[0];
        }
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Updated realPath '%s' would create collision. Dangling layer created instead.\n", v17, v18, v19);
      }
    }
  }
LABEL_37:
  uint64_t v23 = v59;
  if ((v59 & 0x80u) == 0) {
    size_t v24 = v59;
  }
  else {
    size_t v24 = v58;
  }
  unint64_t v25 = v51;
  if ((v51 & 0x80u) != 0) {
    unint64_t v25 = (unint64_t)v50[1];
  }
  if (v24 == v25)
  {
    if ((v51 & 0x80u) == 0) {
      unsigned __int8 v26 = v50;
    }
    else {
      unsigned __int8 v26 = (void **)v50[0];
    }
    if ((v59 & 0x80) != 0)
    {
      if (!memcmp(v57, v26, v58)) {
        goto LABEL_67;
      }
    }
    else
    {
      if (!v59) {
        goto LABEL_67;
      }
      unint64_t v27 = &v57;
      while (*(unsigned __int8 *)v27 == *(unsigned __int8 *)v26)
      {
        unint64_t v27 = (void **)((char *)v27 + 1);
        unsigned __int8 v26 = (void **)((char *)v26 + 1);
        if (!--v23) {
          goto LABEL_67;
        }
      }
    }
  }
  if (sub_21699B484((unsigned __int8 *)&v57, (uint64_t)a2, a1 + 10) && sub_216977CF0(3))
  {
    if ((v59 & 0x80u) == 0) {
      unsigned __int8 v30 = &v57;
    }
    else {
      unsigned __int8 v30 = v57;
    }
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Removed repositoryPath '%s' for update.\n", v28, v29, v30);
  }
  unint64_t v31 = v51;
  if ((v51 & 0x80u) != 0) {
    unint64_t v31 = (unint64_t)v50[1];
  }
  if (v31)
  {
    sub_21699D418(a1 + 10, (long long *)v50, a2);
    if (sub_216977CF0(3))
    {
      if ((v51 & 0x80u) == 0) {
        int v34 = v50;
      }
      else {
        int v34 = (void **)v50[0];
      }
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Updated repositoryPath '%s'.\n", v32, v33, v34);
    }
  }
LABEL_67:
  uint64_t v35 = v56;
  if ((v56 & 0x80u) == 0) {
    size_t v36 = v56;
  }
  else {
    size_t v36 = v55;
  }
  unint64_t v37 = v49;
  if ((v49 & 0x80u) != 0) {
    unint64_t v37 = (unint64_t)v48[1];
  }
  if (v36 == v37)
  {
    if ((v49 & 0x80u) == 0) {
      unsigned int v38 = v48;
    }
    else {
      unsigned int v38 = (void **)v48[0];
    }
    if ((v56 & 0x80) != 0)
    {
      if (!memcmp(v54, v38, v55)) {
        goto LABEL_95;
      }
    }
    else
    {
      if (!v56) {
        goto LABEL_95;
      }
      uint64_t v39 = &v54;
      while (*(unsigned __int8 *)v39 == *(unsigned __int8 *)v38)
      {
        uint64_t v39 = (void **)((char *)v39 + 1);
        unsigned int v38 = (void **)((char *)v38 + 1);
        if (!--v35) {
          goto LABEL_95;
        }
      }
    }
  }
  BOOL v40 = a1 + 5;
  if (sub_21699B484((unsigned __int8 *)&v54, (uint64_t)a2, v40) && sub_216977CF0(3))
  {
    char v43 = &v54;
    if ((v56 & 0x80u) != 0) {
      char v43 = v54;
    }
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Removed identifier '%s' for update.\n", v41, v42, v43);
  }
  unint64_t v44 = v49;
  if ((v49 & 0x80u) != 0) {
    unint64_t v44 = (unint64_t)v48[1];
  }
  if (v44)
  {
    sub_21699D418(v40, (long long *)v48, a2);
    if (sub_216977CF0(3))
    {
      uint64_t v47 = v48;
      if ((v49 & 0x80u) != 0) {
        uint64_t v47 = (void **)v48[0];
      }
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Updated identifier '%s'.\n", v45, v46, v47);
    }
  }
LABEL_95:
  if ((char)v53 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v51 < 0) {
    operator delete(v50[0]);
  }
  if ((char)v49 < 0) {
    operator delete(v48[0]);
  }
  if ((char)v62 < 0) {
    operator delete(__s1);
  }
  if ((char)v59 < 0) {
    operator delete(v57);
  }
  if ((char)v56 < 0) {
    operator delete(v54);
  }
}

void sub_21699B188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  sub_216812650((uint64_t)va);
  sub_216812650((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_21699B1CC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v15[0] = 0;
  v15[1] = 0;
  uint64_t v16 = 0;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v14 = 0;
  if ((pxrInternal__aapl__pxrReserved__::Sdf_SplitIdentifier((const std::string *)a1, (uint64_t)v15, (uint64_t)__p) & 1) == 0)
  {
    uint64_t v8 = "sdf/layerRegistry.cpp";
    uint64_t v9 = "_AssetInfoToAliases";
    uint64_t v10 = 69;
    uint64_t v11 = "Sdf_RegistryAliases pxrInternal__aapl__pxrReserved__::_AssetInfoToAliases(const Sdf_AssetInfo &)";
    char v12 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v8, "Sdf_SplitIdentifier( assetInfo.identifier, &identifierSansArguments, &arguments)", 0);
  }
  uint64_t v4 = *(unsigned __int8 *)(a1 + 23);
  char v5 = v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a1 + 8);
  }
  if (v4)
  {
    if ((v5 & 0x80) == 0)
    {
LABEL_7:
      *(_OWORD *)a2 = *(_OWORD *)a1;
      *(void *)(a2 + 16) = *(void *)(a1 + 16);
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v8 = "sdf/layerRegistry.cpp";
    uint64_t v9 = "_AssetInfoToAliases";
    uint64_t v10 = 72;
    uint64_t v11 = "Sdf_RegistryAliases pxrInternal__aapl__pxrReserved__::_AssetInfoToAliases(const Sdf_AssetInfo &)";
    char v12 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v8, "!assetInfo.identifier.empty()", 0);
    if ((*(unsigned char *)(a1 + 23) & 0x80) == 0) {
      goto LABEL_7;
    }
  }
  sub_216778F24((unsigned char *)a2, *(void **)a1, *(void *)(a1 + 8));
LABEL_10:
  uint64_t v6 = *(unsigned __int8 *)(a1 + 143);
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a1 + 128);
  }
  if (v6) {
    pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier((const void **)(a1 + 120), (const void **)__p, a2 + 24);
  }
  else {
    sub_216779094((void *)(a2 + 24), "");
  }
  uint64_t v7 = *(unsigned __int8 *)(a1 + 47);
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a1 + 32);
  }
  if (v7) {
    pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier((const void **)(a1 + 24), (const void **)__p, a2 + 48);
  }
  else {
    sub_216779094((void *)(a2 + 48), "");
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v16) < 0) {
    operator delete(v15[0]);
  }
}

void sub_21699B37C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v20 - 33) < 0) {
    operator delete(*(void **)(v20 - 56));
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *sub_21699B3E0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(unsigned __int8 *)(a1 + 23);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a1 + 8);
  }
  if (!v3) {
    return 0;
  }
  double result = sub_2168602D4(a3, (unsigned __int8 *)a1);
  if (!result) {
    return result;
  }
  uint64_t v7 = result;
  uint64_t v8 = sub_216851B24((uint64_t)(result + 40));
  if (v8 != sub_216851B24(a2)) {
    return 0;
  }
  sub_216851DB0(a3, v7, (uint64_t)v9);
  sub_2168E8C30((uint64_t)v9, 0);
  return (unsigned __int8 *)1;
}

uint64_t sub_21699B484(unsigned __int8 *a1, uint64_t a2, void *a3)
{
  char v5 = sub_21699CFF8(a3, a1);
  if (v5 == v6) {
    return 0;
  }
  uint64_t v7 = v5;
  uint64_t v8 = v6;
  while (1)
  {
    uint64_t v9 = sub_216851B24((uint64_t)(v7 + 40));
    if (v9 == sub_216851B24(a2)) {
      break;
    }
    uint64_t v7 = *(unsigned __int8 **)v7;
    if (v7 == v8) {
      return 0;
    }
  }
  if (v7 == v8) {
    return 0;
  }
  sub_216851DB0(a3, v7, (uint64_t)v11);
  sub_2168E8C30((uint64_t)v11, 0);
  return 1;
}

void pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry::_Layers::Insert(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_21699B1CC(a3, (uint64_t)v25);
  uint64_t v7 = sub_2168602D4(a1, (unsigned __int8 *)__p);
  if (v7)
  {
    char v8 = 0;
    uint64_t v9 = *((void *)v7 + 6);
    *(void *)a4 = *((void *)v7 + 5);
    *(void *)(a4 + 8) = v9;
    if (!v9) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  unint64_t v10 = v30;
  if ((v30 & 0x80u) != 0) {
    unint64_t v10 = (unint64_t)__p[1];
  }
  if (v10)
  {
    sub_21699D064((uint64_t)a1, (unsigned __int8 *)__p, (long long *)__p, a2);
    if ((v11 & 1) == 0)
    {
      v23[0] = "sdf/layerRegistry.cpp";
      v23[1] = "Insert";
      v23[2] = 195;
      v23[3] = "std::pair<SdfLayerHandle, BOOL> pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry::_Layers::Insert(cons"
               "t SdfLayerHandle &, const Sdf_AssetInfo &)";
      char v24 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v23, "_byRealPath.emplace(aliases.realPath, layer).second", 0);
    }
    if (sub_216977CF0(3))
    {
      if ((v30 & 0x80u) == 0) {
        uint64_t v14 = __p;
      }
      else {
        uint64_t v14 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Inserted realPath '%s' into registry\n", v12, v13, v14);
    }
  }
  unint64_t v15 = v28;
  if ((v28 & 0x80u) != 0) {
    unint64_t v15 = (unint64_t)v27[1];
  }
  if (v15)
  {
    sub_21699D418(a1 + 10, (long long *)v27, a2);
    if (sub_216977CF0(3))
    {
      if ((v28 & 0x80u) == 0) {
        unint64_t v18 = v27;
      }
      else {
        unint64_t v18 = (void **)v27[0];
      }
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Inserted repositoryPath '%s' into registry\n", v16, v17, v18);
    }
  }
  unint64_t v19 = v26;
  if ((v26 & 0x80u) != 0) {
    unint64_t v19 = (unint64_t)v25[1];
  }
  if (v19)
  {
    sub_21699D418(a1 + 5, (long long *)v25, a2);
    if (sub_216977CF0(3))
    {
      unint64_t v22 = v25;
      if ((v26 & 0x80u) != 0) {
        unint64_t v22 = (void **)v25[0];
      }
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Inserted identifier '%s' into registry\n", v20, v21, v22);
    }
  }
  uint64_t v9 = a2[1];
  *(void *)a4 = *a2;
  *(void *)(a4 + 8) = v9;
  char v8 = 1;
  if (v9) {
LABEL_3:
  }
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 + 8), 1u, memory_order_relaxed);
LABEL_4:
  *(unsigned char *)(a4 + 16) = v8;
  if ((char)v30 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v28 < 0) {
    operator delete(v27[0]);
  }
  if ((char)v26 < 0) {
    operator delete(v25[0]);
  }
}

void sub_21699B748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_216812650((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry::_Layers::Erase(void *a1, uint64_t a2, uint64_t a3)
{
  sub_21699B1CC(a3, (uint64_t)v16);
  uint64_t v5 = (uint64_t)sub_21699B3E0((uint64_t)__p, a2, a1);
  if (v5 && sub_216977CF0(3))
  {
    if (v21 >= 0) {
      char v8 = __p;
    }
    else {
      char v8 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Erased realPath '%s' from registry.\n", v6, v7, v8);
  }
  if (sub_21699B484((unsigned __int8 *)v18, a2, a1 + 10))
  {
    if (sub_216977CF0(3))
    {
      if (v19 >= 0) {
        char v11 = v18;
      }
      else {
        char v11 = (void **)v18[0];
      }
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Erased repositoryPath '%s' from registry.\n", v9, v10, v11);
    }
    uint64_t v5 = 1;
  }
  if (sub_21699B484((unsigned __int8 *)v16, a2, a1 + 5))
  {
    if (sub_216977CF0(3))
    {
      if (v19 >= 0) {
        uint64_t v14 = v18;
      }
      else {
        uint64_t v14 = (void **)v18[0];
      }
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Erased identifier '%s' from registry.\n", v12, v13, v14);
    }
    uint64_t v5 = 1;
  }
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  if (v19 < 0) {
    operator delete(v18[0]);
  }
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  return v5;
}

void sub_21699B8C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216812650((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry::Insert(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = sub_21697CF14(a2);
  if (v7 & 1 | (unint64_t)v6)
  {
    if (sub_216977CF0(3))
    {
      sub_21699BBD0(a2, &v31);
      unint64_t v10 = v33 >= 0 ? (void **)&v31 : (void **)v31;
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Sdf_LayerRegistry::Insert(%s)\n", v8, v9, v10);
      if (SHIBYTE(v33) < 0) {
        operator delete(v31);
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry::_Layers::Insert(a1, a2, a3, (uint64_t)&v28);
    if (!v30)
    {
      unint64_t v31 = "sdf/layerRegistry.cpp";
      int v32 = "Insert";
      uint64_t v33 = 273;
      int v34 = "void pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry::Insert(const SdfLayerHandle &, const Sdf_AssetInfo &)";
      char v35 = 0;
      char v11 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a2);
      FileFormat = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetFileFormat(v11);
      uint64_t v13 = (pxrInternal__aapl__pxrReserved__::SdfFileFormat *)sub_216979288(FileFormat);
      unint64_t v14 = *(void *)pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetFormatId(v13) & 0xFFFFFFFFFFFFFFF8;
      if (v14)
      {
        unint64_t v15 = (const char *)(v14 + 16);
        if (*(char *)(v14 + 39) < 0) {
          unint64_t v15 = *(const char **)v15;
        }
      }
      else
      {
        unint64_t v15 = "";
      }
      sub_21699BBD0(a2, v26);
      if (v27 >= 0) {
        uint64_t v16 = v26;
      }
      else {
        uint64_t v16 = (void **)v26[0];
      }
      char v17 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(&v28);
      unint64_t v18 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetFileFormat(v17);
      char v19 = (pxrInternal__aapl__pxrReserved__::SdfFileFormat *)sub_216979288(v18);
      unint64_t v20 = *(void *)pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetFormatId(v19) & 0xFFFFFFFFFFFFFFF8;
      if (v20)
      {
        char v21 = (const char *)(v20 + 16);
        if (*(char *)(v20 + 39) < 0) {
          char v21 = *(const char **)v21;
        }
      }
      else
      {
        char v21 = "";
      }
      sub_21699BBD0(&v28, __p);
      if (v25 >= 0) {
        unint64_t v22 = __p;
      }
      else {
        unint64_t v22 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v31, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot insert duplicate registry entry for %s layer %s over existing entry for %s layer %s", v15, (const char *)v16, v21, (const char *)v22);
      if (v25 < 0) {
        operator delete(__p[0]);
      }
      if (v27 < 0) {
        operator delete(v26[0]);
      }
    }
    uint64_t v23 = v29;
    if (v29)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v29 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
      }
    }
  }
  else
  {
    unint64_t v31 = "sdf/layerRegistry.cpp";
    int v32 = "Insert";
    uint64_t v33 = 254;
    int v34 = "void pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry::Insert(const SdfLayerHandle &, const Sdf_AssetInfo &)";
    char v35 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v31, 1, (pxrInternal__aapl__pxrReserved__ *)"Expired layer handle");
  }
}

void sub_21699BB34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,atomic_uint *a26)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a26)
  {
    if (atomic_fetch_add_explicit(a26 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a26 + 8))(a26);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_21699BBD0(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = sub_21697CF14(a1);
  if (v5 & 1 | (unint64_t)v4)
  {
    uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v6);
    std::operator+<char>();
    char v7 = std::string::append(&v18, "', '");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v19.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a1);
    uint64_t RealPath = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v9);
    int v11 = *(char *)(RealPath + 23);
    if (v11 >= 0) {
      char v12 = (const std::string::value_type *)RealPath;
    }
    else {
      char v12 = *(const std::string::value_type **)RealPath;
    }
    if (v11 >= 0) {
      std::string::size_type v13 = *(unsigned __int8 *)(RealPath + 23);
    }
    else {
      std::string::size_type v13 = *(void *)(RealPath + 8);
    }
    unint64_t v14 = std::string::append(&v19, v12, v13);
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v20.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    uint64_t v16 = std::string::append(&v20, "')");
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    a2[2] = *((void *)&v16->__r_.__value_.__l + 2);
    *(_OWORD *)a2 = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v19.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v18.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    sub_216779094(a2, "None");
  }
}

void sub_21699BD1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v21 - 25) < 0) {
    operator delete(*(void **)(v21 - 48));
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry::Update(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  long long v8 = sub_21697CF14(a2);
  if (v9 & 1 | (unint64_t)v8)
  {
    if (sub_216977CF0(3))
    {
      sub_21699BBD0(a2, __p);
      if (v14 >= 0) {
        char v12 = __p;
      }
      else {
        char v12 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Sdf_LayerRegistry::Update(%s)\n", v10, v11, v12);
      if (SHIBYTE(v14) < 0) {
        operator delete(__p[0]);
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry::_Layers::Update(a1, a2, a3, a4);
  }
  else
  {
    __p[0] = "sdf/layerRegistry.cpp";
    __p[1] = "Update";
    uint64_t v14 = 286;
    long long v15 = "void pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry::Update(const SdfLayerHandle &, const Sdf_AssetInfo &"
          ", const Sdf_AssetInfo &)";
    char v16 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Expired layer handle");
  }
}

void sub_21699BE60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry::Erase(void *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry::_Layers::Erase(a1, (uint64_t)a2, a3);
  if (sub_216977CF0(3))
  {
    sub_21699BBD0(a2, __p);
    if (v10 >= 0) {
      char v7 = __p;
    }
    else {
      char v7 = (void **)__p[0];
    }
    long long v8 = "Failed";
    if (v4) {
      long long v8 = "Success";
    }
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Sdf_LayerRegistry::Erase(%s) => %s\n", v5, v6, v7, v8);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_21699BF18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry::Find(void *a1@<X0>, uint64_t a2@<X1>, void **a3@<X2>, uint64_t *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  BOOL IsAnonLayerIdentifier = pxrInternal__aapl__pxrReserved__::Sdf_IsAnonLayerIdentifier(a2);
  if (IsAnonLayerIdentifier)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry::_FindByIdentifier((uint64_t)a1, (unsigned __int8 *)a2, (uint64_t)v33);
    char v9 = (atomic_uint *)a4[1];
    *(_OWORD *)a4 = *(_OWORD *)v33;
    v33[1] = 0;
    if (v9)
    {
      if (atomic_fetch_add_explicit(v9 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v9 + 8))(v9);
      }
      char v10 = v33[1];
      v33[0] = 0;
      if (v33[1] && atomic_fetch_add_explicit((atomic_uint *volatile)v33[1] + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(void *))(*(void *)v10 + 8))(v10);
      }
    }
  }
  else
  {
    Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver((pxrInternal__aapl__pxrReserved__ *)IsAnonLayerIdentifier);
    v33[0] = 0;
    v33[1] = 0;
    uint64_t v34 = 0;
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v32 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_SplitIdentifier((const std::string *)a2, (uint64_t)v33, (uint64_t)__p);
    if ((pxrInternal__aapl__pxrReserved__::ArResolver::IsContextDependentPath((uint64_t)Resolver) & 1) == 0)
    {
      pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry::_FindByIdentifier((uint64_t)a1, (unsigned __int8 *)a2, (uint64_t)&v30);
      char v12 = (atomic_uint *)a4[1];
      *(_OWORD *)a4 = v30;
      *((void *)&v30 + 1) = 0;
      if (v12)
      {
        if (atomic_fetch_add_explicit(v12 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v12 + 8))(v12);
        }
        uint64_t v13 = *((void *)&v30 + 1);
        *(void *)&long long v30 = 0;
        if (*((void *)&v30 + 1)
          && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v30 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
        {
          (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
        }
      }
    }
    int IsRepositoryPath = pxrInternal__aapl__pxrReserved__::ArResolver::IsRepositoryPath((uint64_t)Resolver);
    long long v15 = sub_21697CF14(a4);
    if (v16 & 1 | (unint64_t)v15) {
      int v17 = 0;
    }
    else {
      int v17 = IsRepositoryPath;
    }
    if (v17 == 1)
    {
      pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry::_FindByRepositoryPath((uint64_t)a1, (unsigned __int8 *)a2, (uint64_t)&v30);
      std::string v18 = (atomic_uint *)a4[1];
      *(_OWORD *)a4 = v30;
      *((void *)&v30 + 1) = 0;
      if (v18)
      {
        if (atomic_fetch_add_explicit(v18 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v18 + 8))(v18);
        }
        uint64_t v19 = *((void *)&v30 + 1);
        *(void *)&long long v30 = 0;
        if (*((void *)&v30 + 1)
          && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v30 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
        {
          (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
        }
      }
    }
    std::string v20 = sub_21697CF14(a4);
    if (!(v21 & 1 | (unint64_t)v20))
    {
      pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry::_FindByRealPath(a1, (const std::string *)a2, a3, (uint64_t)&v30);
      unint64_t v22 = (atomic_uint *)a4[1];
      *(_OWORD *)a4 = v30;
      *((void *)&v30 + 1) = 0;
      if (v22)
      {
        if (atomic_fetch_add_explicit(v22 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v22 + 8))(v22);
        }
        uint64_t v23 = *((void *)&v30 + 1);
        *(void *)&long long v30 = 0;
        if (*((void *)&v30 + 1)
          && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v30 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
        {
          (*(void (**)(uint64_t))(*(void *)v23 + 8))(v23);
        }
      }
    }
    if (SHIBYTE(v32) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v34) < 0) {
      operator delete(v33[0]);
    }
  }
  if (sub_216977CF0(3))
  {
    int v24 = *(char *)(a2 + 23);
    uint64_t v25 = *(void *)a2;
    sub_21699BBD0(a4, v33);
    if (v24 >= 0) {
      uint64_t v28 = a2;
    }
    else {
      uint64_t v28 = v25;
    }
    if (v34 >= 0) {
      uint64_t v29 = v33;
    }
    else {
      uint64_t v29 = (void **)v33[0];
    }
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Sdf_LayerRegistry::Find('%s') => %s\n", v26, v27, v28, v29, (void)v30);
    if (SHIBYTE(v34) < 0) {
      operator delete(v33[0]);
    }
  }
}

void sub_21699C308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  char v27 = *(atomic_uint **)(v25 + 8);
  if (v27)
  {
    if (atomic_fetch_add_explicit(v27 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v27 + 8))(v27);
    }
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry::_FindByIdentifier(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  char v5 = sub_2168512B4((void *)(a1 + 40), a2);
  if (v5)
  {
    *(void *)a3 = *((void *)v5 + 5);
    sub_2168CD2FC((atomic_uint **)(a3 + 8), (atomic_uint **)v5 + 6);
  }
  if (sub_216977CF0(3))
  {
    int v6 = (char)a2[23];
    char v7 = *(uint64_t **)a2;
    long long v8 = sub_21697CF14((void *)a3);
    if (v6 >= 0) {
      int v11 = (uint64_t *)a2;
    }
    else {
      int v11 = v7;
    }
    if (v9 & 1 | (unint64_t)v8) {
      char v12 = "Found";
    }
    else {
      char v12 = "Not Found";
    }
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Sdf_LayerRegistry::_FindByIdentifier('%s') => %s\n", v9, v10, v11, v12);
  }
}

void sub_21699C450(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(atomic_uint **)(v1 + 8);
  if (v3)
  {
    if (atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry::_FindByRepositoryPath(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  uint64_t v4 = a2[23];
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v4)
  {
    int v6 = sub_2168512B4((void *)(a1 + 80), a2);
    if (v6)
    {
      *(void *)a3 = *((void *)v6 + 5);
      sub_2168CD2FC((atomic_uint **)(a3 + 8), (atomic_uint **)v6 + 6);
    }
    if (sub_216977CF0(3))
    {
      int v7 = (char)a2[23];
      long long v8 = *(uint64_t **)a2;
      char v9 = sub_21697CF14((void *)a3);
      if (v7 >= 0) {
        char v12 = (uint64_t *)a2;
      }
      else {
        char v12 = v8;
      }
      if (v10 & 1 | (unint64_t)v9) {
        uint64_t v13 = "Found";
      }
      else {
        uint64_t v13 = "Not Found";
      }
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Sdf_LayerRegistry::_FindByRepositoryPath('%s') => %s\n", v10, v11, v12, v13);
    }
  }
}

void sub_21699C568(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(atomic_uint **)(v1 + 8);
  if (v3)
  {
    if (atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry::_FindByRealPath(void *a1@<X0>, const std::string *a2@<X1>, void **a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0) {
    std::string::size_type size = a2->__r_.__value_.__l.__size_;
  }
  if (size)
  {
    memset(&v42, 0, sizeof(v42));
    v40[0] = 0;
    v40[1] = 0;
    uint64_t v41 = 0;
    if (pxrInternal__aapl__pxrReserved__::Sdf_SplitIdentifier(a2, (uint64_t)&v42, (uint64_t)v40))
    {
      pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v39);
      if (*((char *)a3 + 23) >= 0) {
        char v9 = (void *)*((unsigned __int8 *)a3 + 23);
      }
      else {
        char v9 = a3[1];
      }
      if (!v9)
      {
        a3 = __p;
        pxrInternal__aapl__pxrReserved__::Sdf_ComputeFilePath((pxrInternal__aapl__pxrReserved__ *)&v42, (uint64_t)__p);
      }
      std::string::operator=(&v42, (const std::string *)a3);
      if (!v9 && v38 < 0) {
        operator delete(__p[0]);
      }
      unint64_t v10 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      if (!v10) {
        pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
      }
      unint64_t v11 = v39;
      unint64_t v12 = atomic_load((unint64_t *)(v10 + 144));
      if (v11 < v12
        && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v39, (atomic_ullong *)v10))
      {
        memset(&__dst, 0, sizeof(__dst));
        uint64_t v13 = sub_216862604(&v39, 0);
        uint64_t v14 = sub_216878D10();
        if (v13 != (void *)v14)
        {
          std::string::size_type v15 = __dst.__r_.__value_.__l.__size_;
          do
          {
            char v16 = (long long *)(v13 + 7);
            if (v15 >= __dst.__r_.__value_.__r.__words[2])
            {
              std::string::size_type v15 = sub_2167E9A44((uint64_t *)&__dst, v16);
            }
            else
            {
              if (*((char *)v13 + 79) < 0)
              {
                sub_216778F24((unsigned char *)v15, (void *)v13[7], v13[8]);
              }
              else
              {
                long long v17 = *v16;
                *(void *)(v15 + 16) = v13[9];
                *(_OWORD *)std::string::size_type v15 = v17;
              }
              v15 += 24;
            }
            __dst.__r_.__value_.__l.__size_ = v15;
            uint64_t v13 = (void *)v13[1];
          }
          while (v13 != (void *)v14);
        }
        if (sub_216977CF0(3))
        {
          int v18 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
          uint64_t v19 = (const std::string *)a2->__r_.__value_.__r.__words[0];
          pxrInternal__aapl__pxrReserved__::TfStringJoin(", ", (std::string **)&__dst, &v35);
          uint64_t v22 = (uint64_t)(v18 >= 0 ? a2 : v19);
          uint64_t v23 = (v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &v35
              : (std::string *)v35.__r_.__value_.__r.__words[0];
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Sdf_LayerRegistry::_FindByRealPath('%s'): Failed to compute real path: %s\n", v20, v21, v22, v23);
          if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v35.__r_.__value_.__l.__data_);
          }
        }
        int v24 = (atomic_ullong *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
        if (!v24) {
          pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
        }
        uint64_t v25 = sub_216862604(&v39, 0);
        char v43 = 0;
        unsigned __int8 v26 = (void *)sub_2168520EC(v24 + 19, &v43);
        if (v26 != v25) {
          pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(v24, v25, v26);
        }
        v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
        sub_216782F20((void ***)&v35);
      }
      pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v39);
      pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier((const void **)&v42.__r_.__value_.__l.__data_, (const void **)v40, (uint64_t)&__dst);
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v42.__r_.__value_.__l.__data_);
      }
      std::string v42 = __dst;
      char v27 = sub_2168512B4(a1, (unsigned __int8 *)&v42);
      if (v27)
      {
        *(void *)a4 = *((void *)v27 + 5);
        sub_2168CD2FC((atomic_uint **)(a4 + 8), (atomic_uint **)v27 + 6);
      }
      if (sub_216977CF0(3))
      {
        int v28 = SHIBYTE(v42.__r_.__value_.__r.__words[2]);
        std::string::size_type v29 = v42.__r_.__value_.__r.__words[0];
        long long v30 = sub_21697CF14((void *)a4);
        uint64_t v33 = &v42;
        if (v28 < 0) {
          uint64_t v33 = (std::string *)v29;
        }
        if (v31 & 1 | (unint64_t)v30) {
          uint64_t v34 = "Found";
        }
        else {
          uint64_t v34 = "Not Found";
        }
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Sdf_LayerRegistry::_FindByRealPath('%s') => %s\n", v31, v32, v33, v34);
      }
    }
    if (SHIBYTE(v41) < 0) {
      operator delete(v40[0]);
    }
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v42.__r_.__value_.__l.__data_);
    }
  }
}

void sub_21699C900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  std::string __p = &a18;
  sub_216782F20((void ***)&__p);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&a27);
  if (a33 < 0) {
    operator delete(a28);
  }
  if (*(char *)(v34 - 73) < 0) {
    operator delete(*(void **)(v34 - 96));
  }
  size_t v36 = *(atomic_uint **)(v33 + 8);
  if (v36)
  {
    if (atomic_fetch_add_explicit(v36 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v36 + 8))(v36);
    }
  }
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry::GetLayers@<X0>(void *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)a2 = a2 + 8;
  for (uint64_t i = (void *)this[7]; i; uint64_t i = (void *)*i)
  {
    uint64_t v4 = i[6];
    uint64_t v11 = i[5];
    unint64_t v12 = (void *)v4;
    if (v4) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v4 + 8), 1u, memory_order_relaxed);
    }
    char v5 = sub_21697CF14(&v11);
    if (v6 & 1 | (unint64_t)v5
      || (v9[0] = "sdf/layerRegistry.cpp",
          v9[1] = "GetLayers",
          v9[2] = 467,
          v9[3] = "SdfLayerHandleSet pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry::GetLayers() const",
          char v10 = 0,
          long long v8 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Found expired layer in registry", v6, v7), (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v9, "layer", v8) & 1) != 0))
    {
      sub_21699DAC4((uint64_t **)a2, (uint64_t)&v11, &v11);
    }
    this = v12;
    if (v12)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)v12 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
      }
    }
  }
  return this;
}

void sub_21699CB34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, atomic_uint *a16)
{
  if (a16)
  {
    if (atomic_fetch_add_explicit(a16 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a16 + 8))(a16);
    }
  }
  sub_21699DA30(v16, *(void **)(v16 + 8));
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::operator<<(void *a1, pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry *this)
{
  pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry::GetLayers(this, (uint64_t)&v51);
  unsigned __int8 v49 = v51;
  uint64_t v50 = &v52;
  while (v49 != v50)
  {
    char v5 = (uint64_t *)sub_21699CED0(&v49, v3, v4);
    uint64_t v6 = v5[1];
    uint64_t v47 = *v5;
    uint64_t v48 = v6;
    if (v6) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v6 + 8), 1u, memory_order_relaxed);
    }
    int v7 = sub_21697CF14(&v47);
    if (v8 & 1 | (unint64_t)v7)
    {
      uint64_t v9 = sub_216851B24((uint64_t)&v47);
      int v10 = *(_DWORD *)(sub_2169791E0(&v47) + 8);
      if (v10 >= 0) {
        uint64_t v11 = v10;
      }
      else {
        uint64_t v11 = -v10;
      }
      unint64_t v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(&v47);
      FileFormat = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetFileFormat(v12);
      uint64_t v14 = (pxrInternal__aapl__pxrReserved__::SdfFileFormat *)sub_216979288(FileFormat);
      unint64_t v15 = *(void *)pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetFormatId(v14) & 0xFFFFFFFFFFFFFFF8;
      if (v15)
      {
        uint64_t v16 = (const char *)(v15 + 16);
        if (*(char *)(v15 + 39) < 0) {
          uint64_t v16 = *(const char **)v16;
        }
      }
      else
      {
        uint64_t v16 = "";
      }
      long long v17 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(&v47);
      uint64_t Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v17);
      if (*(char *)(Identifier + 23) >= 0) {
        uint64_t v19 = Identifier;
      }
      else {
        uint64_t v19 = *(void *)Identifier;
      }
      std::string v20 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(&v47);
      uint64_t RepositoryPath = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRepositoryPath(v20);
      if (*(char *)(RepositoryPath + 23) >= 0) {
        uint64_t v22 = RepositoryPath;
      }
      else {
        uint64_t v22 = *(void *)RepositoryPath;
      }
      uint64_t v23 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(&v47);
      uint64_t RealPath = pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(v23);
      if (*(char *)(RealPath + 23) >= 0) {
        uint64_t v25 = RealPath;
      }
      else {
        uint64_t v25 = *(void *)RealPath;
      }
      unsigned __int8 v26 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(&v47);
      uint64_t Version = pxrInternal__aapl__pxrReserved__::SdfLayer::GetVersion(v26);
      if (*(char *)(Version + 23) >= 0) {
        uint64_t v28 = Version;
      }
      else {
        uint64_t v28 = *(void *)Version;
      }
      std::string::size_type v29 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(&v47);
      uint64_t AssetInfo = pxrInternal__aapl__pxrReserved__::SdfLayer::GetAssetInfo(v29);
      sub_216928738(AssetInfo);
      if (v44 >= 0) {
        unint64_t v31 = &v43;
      }
      else {
        unint64_t v31 = v43;
      }
      uint64_t v32 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(&v47);
      if (pxrInternal__aapl__pxrReserved__::SdfLayer::IsMuted(v32)) {
        uint64_t v33 = "True";
      }
      else {
        uint64_t v33 = "False";
      }
      uint64_t v34 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(&v47);
      BOOL IsAnonymous = pxrInternal__aapl__pxrReserved__::SdfLayer::IsAnonymous(v34);
      char v38 = "False";
      if (IsAnonymous) {
        char v38 = "True";
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%p[ref=%zu]:\n    format           = %s\n    identifier       = '%s'\n    repositoryPath   = '%s'\n    realPath         = '%s'\n    version          = '%s'\n    assetInfo        = \n'%s'\n    muted            = %s\n    anonymous        = %s\n\n", v36, v37, v9, v11, v16, v19, v22, v25,
        v28,
        v31,
        v33,
        v38);
      if ((v46 & 0x80u) == 0) {
        unint64_t v39 = __p;
      }
      else {
        unint64_t v39 = (void **)__p[0];
      }
      if ((v46 & 0x80u) == 0) {
        uint64_t v40 = v46;
      }
      else {
        uint64_t v40 = (uint64_t)__p[1];
      }
      sub_216779180(a1, (uint64_t)v39, v40);
      if ((char)v46 < 0) {
        operator delete(__p[0]);
      }
      if (v44 < 0) {
        operator delete(v43);
      }
    }
    uint64_t v41 = v48;
    if (v48)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v48 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t))(*(void *)v41 + 8))(v41);
      }
    }
    sub_21699CF50(&v49);
  }
  sub_21699DA30((uint64_t)&v51, v52);
  return a1;
}

void sub_21699CE34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,atomic_uint *a32)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a32)
  {
    if (atomic_fetch_add_explicit(a32 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a32 + 8))(a32);
    }
  }
  sub_21699DA30(v32 - 112, *(void **)(v32 - 104));
  _Unwind_Resume(a1);
}

uint64_t sub_21699CED0(void *a1, uint64_t a2, char *a3)
{
  if (*a1 == a1[1])
  {
    v4[0] = "tf/iterator.h";
    v4[1] = "operator*";
    void v4[2] = 271;
    v4[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<std::set<pxrInternal__aapl__pxrReserved__::TfWeakPtr<"
            "pxrInternal__aapl__pxrReserved__::SdfLayer>>>::operator*() [T = std::set<pxrInternal__aapl__pxrReserved__::T"
            "fWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>, Reverse = false]";
    char v5 = 0;
    int v6 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v4, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return *a1 + 32;
}

void sub_21699CF48()
{
}

void *sub_21699CF50(void *a1)
{
  char v2 = (void *)*a1;
  if (*a1 == a1[1])
  {
    v7[0] = "tf/iterator.h";
    v7[1] = "operator++";
    v7[2] = 250;
    void v7[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::set<pxrInternal__aapl__pxrReserved"
            "__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>::operator++() [T = std::set<pxrInternal__aapl__p"
            "xrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>, Reverse = false]";
    char v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    uint64_t v3 = (void *)v2[1];
    if (v3)
    {
      do
      {
        uint64_t v4 = v3;
        uint64_t v3 = (void *)*v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        uint64_t v4 = (void *)v2[2];
        BOOL v5 = *v4 == (void)v2;
        char v2 = v4;
      }
      while (!v5);
    }
    *a1 = v4;
  }
  return a1;
}

unsigned __int8 *sub_21699CFF8(void *a1, unsigned __int8 *a2)
{
  uint64_t v4 = sub_2168602D4(a1, a2);
  BOOL v5 = v4;
  if (v4)
  {
    uint64_t v6 = (uint64_t)(a1 + 4);
    int v7 = v4;
    do
      int v7 = *(unsigned __int8 **)v7;
    while (v7 && (sub_2168513F8(v6, v7 + 16, a2) & 1) != 0);
  }
  return v5;
}

unsigned __int8 *sub_21699D064(uint64_t a1, unsigned __int8 *a2, long long *a3, void *a4)
{
  int v7 = a2;
  char v27 = 0;
  char v28 = 0;
  uint64_t v9 = (char *)*((void *)a2 + 1);
  if ((a2[23] & 0x80u) == 0)
  {
    int v10 = (char *)a2[23];
  }
  else
  {
    a2 = *(unsigned __int8 **)a2;
    int v10 = v9;
  }
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v27, (pxrInternal__aapl__pxrReserved__ *)a2, v10);
  unint64_t v11 = bswap64(0x9E3779B97F4A7C55 * (void)v27);
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    unint64_t v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v11;
      if (v11 >= v12) {
        unint64_t v4 = v11 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v11;
    }
    unint64_t v15 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      for (uint64_t i = *v15; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v17 = *((void *)i + 1);
        if (v17 == v11)
        {
          if (sub_2168513F8(a1 + 32, i + 16, v7)) {
            return i;
          }
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12) {
              v17 %= v12;
            }
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v4) {
            break;
          }
        }
      }
    }
  }
  sub_21699D324(a1, v11, a3, a4, (uint64_t)&v27);
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v12 || (float)(v19 * (float)v12) < v18)
  {
    BOOL v20 = 1;
    if (v12 >= 3) {
      BOOL v20 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v12);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    sub_21678A04C(a1, v23);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        unint64_t v4 = v11 % v12;
      }
      else {
        unint64_t v4 = v11;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v11;
    }
  }
  int v24 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *(void *)char v27 = *v24;
    *int v24 = v27;
  }
  else
  {
    *(void *)char v27 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v27;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v27)
    {
      unint64_t v25 = *(void *)(*(void *)v27 + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v25 >= v12) {
          v25 %= v12;
        }
      }
      else
      {
        v25 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v25) = v27;
    }
  }
  uint64_t i = v27;
  char v27 = 0;
  ++*(void *)(a1 + 24);
  sub_2168E8C30((uint64_t)&v27, 0);
  return i;
}

void sub_21699D30C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168E8C30((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *sub_21699D324@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  int v10 = operator new(0x38uLL);
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v9;
  *(unsigned char *)(a5 + 16) = 0;
  void *v10 = 0;
  v10[1] = a2;
  double result = sub_21699D3AC(v10 + 2, a3, a4);
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

void sub_21699D394(_Unwind_Exception *a1)
{
  sub_2168E8C30(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_21699D3AC(void *__dst, long long *a2, void *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v5;
  }
  uint64_t v6 = a3[1];
  __dst[3] = *a3;
  __dst[4] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 + 8), 1u, memory_order_relaxed);
  }
  return __dst;
}

uint64_t sub_21699D418(void *a1, long long *a2, void *a3)
{
  sub_21699D484((uint64_t)a1, a2, a3, (uint64_t)v6);
  uint64_t v4 = sub_21699D558(a1, v6[0]);
  v6[0] = 0;
  sub_2168E8C30((uint64_t)v6, 0);
  return v4;
}

void sub_21699D46C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168E8C30((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t sub_21699D484@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  char v8 = (char *)operator new(0x38uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)char v8 = 0;
  *((void *)v8 + 1) = 0;
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__ *)sub_21699D3AC((void *)v8 + 2, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  uint64_t v14 = 0;
  char v15 = 0;
  int v10 = v8[39];
  if (v10 >= 0) {
    unint64_t v11 = v9;
  }
  else {
    unint64_t v11 = (pxrInternal__aapl__pxrReserved__ *)*((void *)v8 + 2);
  }
  if (v10 >= 0) {
    unint64_t v12 = (char *)v8[39];
  }
  else {
    unint64_t v12 = (char *)*((void *)v8 + 3);
  }
  unint64_t result = pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v14, v11, v12);
  *((void *)v8 + 1) = bswap64(0x9E3779B97F4A7C55 * v14);
  return result;
}

void sub_21699D540(_Unwind_Exception *a1)
{
  sub_2168E8C30(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_21699D558(void *a1, uint64_t a2)
{
  uint64_t v12 = 0;
  char v13 = 0;
  uint64_t v4 = (char *)*(unsigned __int8 *)(a2 + 39);
  long long v5 = (unsigned __int8 *)(a2 + 16);
  uint64_t v6 = *(char **)(a2 + 24);
  if ((char)v4 >= 0) {
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__ *)(a2 + 16);
  }
  else {
    uint64_t v7 = *(pxrInternal__aapl__pxrReserved__ **)(a2 + 16);
  }
  if ((char)v4 >= 0) {
    char v8 = v4;
  }
  else {
    char v8 = v6;
  }
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v12, v7, v8);
  unint64_t v9 = bswap64(0x9E3779B97F4A7C55 * v12);
  *(void *)(a2 + 8) = v9;
  int v10 = sub_21699D5FC((uint64_t)a1, v9, v5);
  sub_216862FF0(a1, (void *)a2, v10);
  return a2;
}

unsigned __int8 *sub_21699D5FC(uint64_t a1, unint64_t a2, unsigned __int8 *a3)
{
  uint64_t v6 = a1 + 32;
  float v7 = *(float *)(a1 + 32);
  unint64_t v8 = *(void *)(a1 + 8);
  float v9 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  if (!v8 || (float)(v7 * (float)v8) < v9)
  {
    BOOL v10 = 1;
    if (v8 >= 3) {
      BOOL v10 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v11 = v10 | (2 * v8);
    unint64_t v12 = vcvtps_u32_f32(v9 / v7);
    if (v11 <= v12) {
      size_t v13 = v12;
    }
    else {
      size_t v13 = v11;
    }
    sub_21699D770(a1, v13);
    unint64_t v8 = *(void *)(a1 + 8);
  }
  uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
  v14.i16[0] = vaddlv_u8(v14);
  unint64_t v15 = v14.u32[0];
  if (v14.u32[0] > 1uLL)
  {
    unint64_t v16 = a2;
    if (v8 <= a2) {
      unint64_t v16 = a2 % v8;
    }
  }
  else
  {
    unint64_t v16 = (v8 - 1) & a2;
  }
  unint64_t v17 = *(unsigned __int8 **)(*(void *)a1 + 8 * v16);
  if (v17)
  {
    float v18 = *(unsigned __int8 **)v17;
    if (*(void *)v17)
    {
      int v19 = 0;
      do
      {
        unint64_t v20 = *((void *)v18 + 1);
        if (v15 > 1)
        {
          unint64_t v21 = *((void *)v18 + 1);
          if (v20 >= v8) {
            unint64_t v21 = v20 % v8;
          }
        }
        else
        {
          unint64_t v21 = v20 & (v8 - 1);
        }
        if (v21 != v16) {
          break;
        }
        int v22 = v20 == a2 ? sub_2168513F8(v6, v18 + 16, a3) : 0;
        if (v19 & (v22 ^ 1)) {
          break;
        }
        v19 |= v22;
        unint64_t v17 = *(unsigned __int8 **)v17;
        float v18 = *(unsigned __int8 **)v17;
      }
      while (*(void *)v17);
    }
  }
  return v17;
}

void sub_21699D770(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      sub_21699D860(a1, prime);
    }
  }
}

void sub_21699D860(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      sub_21677CA1C();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(unsigned __int8 ***)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = (unint64_t)v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      unint64_t v10 = v9.u32[0];
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      unint64_t v12 = *v7;
      if (*v7)
      {
        unint64_t v18 = v9.u32[0];
        do
        {
          unint64_t v13 = *((void *)v12 + 1);
          if (v10 > 1)
          {
            if (v13 >= a2) {
              v13 %= a2;
            }
          }
          else
          {
            v13 &= a2 - 1;
          }
          if (v13 == v8)
          {
            uint64_t v7 = (unsigned __int8 **)v12;
          }
          else if (*(void *)(*(void *)a1 + 8 * v13))
          {
            uint8x8_t v14 = *(unsigned __int8 **)v12;
            if (*(void *)v12)
            {
              unint64_t v15 = v12;
              while (1)
              {
                int v16 = sub_2168513F8(a1 + 32, v12 + 16, v14 + 16);
                unint64_t v17 = *(unsigned __int8 **)v15;
                if (!v16) {
                  break;
                }
                uint8x8_t v14 = *(unsigned __int8 **)v17;
                unint64_t v15 = *(unsigned __int8 **)v15;
                if (!*(void *)v17) {
                  goto LABEL_32;
                }
              }
              uint8x8_t v14 = *(unsigned __int8 **)v15;
              unint64_t v17 = v15;
LABEL_32:
              unint64_t v10 = v18;
            }
            else
            {
              unint64_t v17 = v12;
            }
            *uint64_t v7 = v14;
            *(void *)unint64_t v17 = **(void **)(*(void *)a1 + 8 * v13);
            **(void **)(*(void *)a1 + 8 * v13) = v12;
          }
          else
          {
            *(void *)(*(void *)a1 + 8 * v13) = v7;
            uint64_t v7 = (unsigned __int8 **)v12;
            unint64_t v8 = v13;
          }
          unint64_t v12 = *v7;
        }
        while (*v7);
      }
    }
  }
  else
  {
    unint64_t v11 = *(void **)a1;
    *(void *)a1 = 0;
    if (v11) {
      operator delete(v11);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void sub_21699DA30(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_21699DA30(a1, *a2);
    sub_21699DA30(a1, a2[1]);
    int8x8_t v4 = (atomic_uint *)a2[5];
    if (v4 && atomic_fetch_add_explicit(v4 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v4 + 8))(v4);
    }
    operator delete(a2);
  }
}

uint64_t *sub_21699DAC4(uint64_t **a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v5 = (uint64_t **)sub_21699DB58((uint64_t)a1, &v10, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = v5;
    uint64_t v6 = (uint64_t *)operator new(0x30uLL);
    uint64_t v8 = a3[1];
    void v6[4] = *a3;
    v6[5] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v8 + 8), 1u, memory_order_relaxed);
    }
    sub_21677B358(a1, v10, v7, v6);
  }
  return v6;
}

void *sub_21699DB58(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v5 = (void *)(a1 + 8);
  int8x8_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = v4;
        uint64_t v8 = (uint64_t)(v4 + 4);
        unint64_t v9 = sub_216851B24(a3);
        if (v9 >= sub_216851B24(v8)) {
          break;
        }
        int8x8_t v4 = (void *)*v7;
        unint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      unint64_t v10 = sub_216851B24(v8);
      if (v10 >= sub_216851B24(a3)) {
        break;
      }
      unint64_t v5 = v7 + 1;
      int8x8_t v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::GetValueFactoryForMenvaName(const void **a1, unsigned char *a2)
{
  unint64_t v4 = atomic_load((unint64_t *)&qword_267B8EB80);
  if (!v4) {
    unint64_t v4 = sub_21699E578();
  }
  uint64_t v5 = sub_21678C2D8(v4, a1);
  unint64_t v6 = atomic_load((unint64_t *)&qword_267B8EB80);
  if (!v6) {
    unint64_t v6 = sub_21699E578();
  }
  if (v6 + 8 == v5)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B8EB90, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_267B8EB90))
    {
      uint64_t v8 = (uint64_t **)atomic_load((unint64_t *)&qword_267B8EB80);
      if (!v8) {
        uint64_t v8 = (uint64_t **)sub_21699E578();
      }
      sub_216779094(__p, "None");
      unint64_t v12 = __p;
      unint64_t v9 = (char *)sub_21699E330(v8, (const void **)__p, (uint64_t)&unk_2174BFD90, (_OWORD **)&v12) + 56;
      if (v11 < 0) {
        operator delete(__p[0]);
      }
      qword_267B8EB88 = (uint64_t)v9;
      __cxa_guard_release(&qword_267B8EB90);
    }
    *a2 = 0;
    return qword_267B8EB88;
  }
  else
  {
    *a2 = 1;
    return v5 + 56;
  }
}

void sub_21699DD28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_BoolFromString(uint64_t a1, unsigned char *a2)
{
  if (a2) {
    *a2 = 1;
  }
  if (*(char *)(a1 + 23) < 0)
  {
    sub_216778F24(__s1, *(void **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)__s1 = *(_OWORD *)a1;
    uint64_t v12 = *(void *)(a1 + 16);
  }
  char v3 = HIBYTE(v12);
  if (v12 >= 0) {
    unint64_t v4 = (char *)__s1 + HIBYTE(v12);
  }
  else {
    unint64_t v4 = &__s1[0][(unint64_t)__s1[1]];
  }
  if (v12 >= 0) {
    uint64_t v5 = __s1;
  }
  else {
    uint64_t v5 = (char **)__s1[0];
  }
  if (v5 != (char **)v4)
  {
    do
    {
      *(unsigned char *)uint64_t v5 = __tolower(*(char *)v5);
      uint64_t v5 = (char **)((char *)v5 + 1);
    }
    while (v5 != (char **)v4);
    char v3 = HIBYTE(v12);
  }
  if (v3 < 0)
  {
    uint64_t v7 = __s1[0];
    if (strcmp(__s1[0], "false"))
    {
      if (!strcmp(v7, "true")) {
        goto LABEL_37;
      }
      if (!strcmp(v7, "no")) {
        goto LABEL_36;
      }
      if (!strcmp(v7, "yes"))
      {
LABEL_37:
        uint64_t v9 = 1;
        goto LABEL_39;
      }
      if (strcmp(v7, "0"))
      {
LABEL_30:
        int v8 = strcmp(v7, "1");
        if (a2 && v8) {
          *a2 = 0;
        }
        if ((v3 & 0x80) == 0) {
          return 1;
        }
        uint64_t v9 = 1;
        uint64_t v7 = __s1[0];
LABEL_39:
        operator delete(v7);
        return v9;
      }
    }
LABEL_36:
    uint64_t v9 = 0;
    goto LABEL_39;
  }
  if (LODWORD(__s1[0]) == 1936482662 && WORD2(__s1[0]) == 101) {
    return 0;
  }
  if (LODWORD(__s1[0]) ^ 0x65757274 | BYTE4(__s1[0]))
  {
    if (!(LOWORD(__s1[0]) ^ 0x6F6E | BYTE2(__s1[0]))) {
      return 0;
    }
    if (LODWORD(__s1[0]) != 7562617)
    {
      if (LOWORD(__s1[0]) != 48)
      {
        uint64_t v7 = (char *)__s1;
        goto LABEL_30;
      }
      return 0;
    }
  }
  return 1;
}

void sub_21699DF3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Sdf_EvalQuotedString(pxrInternal__aapl__pxrReserved__ *this@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, _DWORD *a4@<X3>, unsigned __int8 *a5@<X8>)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  *(void *)a5 = 0;
  *((void *)a5 + 1) = 0;
  *((void *)a5 + 2) = 0;
  if ((unint64_t)a2 > 2 * a3)
  {
    uint64_t v10 = (uint64_t)&a2[-2 * a3];
    if ((unint64_t)v10 < 0x801) {
      char v11 = v31;
    }
    else {
      char v11 = malloc((size_t)&a2[-2 * a3]);
    }
    uint64_t v12 = (char *)this + a3;
    std::string::size_type v29 = v12;
    std::string __dst = v11;
    if (v10 < 1)
    {
LABEL_19:
      sub_216799F58(__p, v11, (unsigned char *)__dst - v11);
      uint64_t v19 = v26;
      long long v20 = *(_OWORD *)__p;
      *(_OWORD *)std::string __p = *(_OWORD *)a5;
      uint64_t v26 = *((void *)a5 + 2);
      *(_OWORD *)a5 = v20;
      *((void *)a5 + 2) = v19;
      if (SHIBYTE(v26) < 0) {
        operator delete(__p[0]);
      }
      if (v11 != v31) {
        free(v11);
      }
      if (a4)
      {
        uint64_t v21 = a5[23];
        if ((v21 & 0x80u) == 0) {
          int v22 = a5;
        }
        else {
          int v22 = *(unsigned __int8 **)a5;
        }
        int v23 = 0;
        if ((v21 & 0x80u) != 0) {
          uint64_t v21 = *((void *)a5 + 1);
        }
        for (; v21; --v21)
        {
          int v24 = *v22++;
          if (v24 == 10) {
            ++v23;
          }
        }
        *a4 = v23;
      }
    }
    else
    {
      unint64_t v13 = &v12[v10];
      uint64_t v14 = 2048;
      if ((unint64_t)v10 > 0x800) {
        uint64_t v14 = v10;
      }
      uint64_t v15 = v14 + 1;
      while (*v12)
      {
        if (!--v15)
        {
          __p[0] = "sdf/parserHelpers.cpp";
          __p[1] = "Sdf_EvalQuotedString";
          uint64_t v26 = 596;
          char v27 = "std::string pxrInternal__aapl__pxrReserved__::Sdf_EvalQuotedString(const char *, size_t, size_t, unsigned int *)";
          char v28 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Unable to evaluate quoted string");
          goto LABEL_19;
        }
        int v16 = memchr(v12, 92, v13 - v12);
        if (v16) {
          unint64_t v17 = v16;
        }
        else {
          unint64_t v17 = v13;
        }
        memcpy(__dst, v12, v17 - v12);
        std::string __dst = (char *)__dst + v17 - v12;
        uint64_t v12 = &v29[v17 - v12];
        std::string::size_type v29 = v12;
        if (v17 != v13)
        {
          pxrInternal__aapl__pxrReserved__::TfEscapeStringReplaceChar((uint64_t *)&v29, (const char **)&__dst, v18);
          uint64_t v12 = ++v29;
        }
        if (v12 >= v13) {
          goto LABEL_19;
        }
      }
      if (v11 != v31) {
        free(v11);
      }
    }
  }
}

void pxrInternal__aapl__pxrReserved__::Sdf_EvalAssetPath(pxrInternal__aapl__pxrReserved__ *this@<X0>, const char *a2@<X1>, int a3@<W2>, std::string *a4@<X8>)
{
  if (a3) {
    uint64_t v6 = 3;
  }
  else {
    uint64_t v6 = 1;
  }
  sub_216799F58(&__dst, (char *)this + v6, (size_t)&a2[-(2 * v6)]);
  if (a3)
  {
    sub_216779094(v12, "\\@@@");
    sub_216779094(__p, "@@@");
    pxrInternal__aapl__pxrReserved__::TfStringReplace((void **)&__dst.__r_.__value_.__l.__data_, (unsigned __int8 *)v12, (unsigned __int8 *)__p, &v7);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    std::string __dst = v7;
    *((unsigned char *)&v7.__r_.__value_.__s + 23) = 0;
    v7.__r_.__value_.__s.__data_[0] = 0;
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    if (v13 < 0) {
      operator delete(v12[0]);
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(&v7);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    sub_216778F24(a4, v7.__r_.__value_.__l.__data_, v7.__r_.__value_.__l.__size_);
  }
  else {
    *a4 = v7;
  }
  if (v9 < 0) {
    operator delete(v8);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_21699E2D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  sub_21682E578((uint64_t)&a9);
  if (*(char *)(v26 - 25) < 0) {
    operator delete(*(void **)(v26 - 48));
  }
  _Unwind_Resume(a1);
}

_OWORD *sub_21699E330(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v6 = (void **)sub_21677B220((uint64_t)a1, &v14, a2);
  std::string v7 = *v6;
  if (!*v6)
  {
    int v8 = (uint64_t **)v6;
    std::string v7 = operator new(0x90uLL);
    v12[1] = a1 + 1;
    char v9 = *a4;
    uint64_t v10 = *((void *)*a4 + 2);
    v7[2] = **a4;
    *((void *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    void *v9 = 0;
    *((void *)v7 + 8) = 0;
    *((void *)v7 + 9) = 0;
    *((void *)v7 + 7) = 0;
    *((void *)v7 + 12) = 0;
    *((void *)v7 + 17) = 0;
    char v13 = 1;
    sub_21677B358(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0;
    sub_21699E400((uint64_t)v12, 0);
  }
  return v7;
}

void sub_21699E400(uint64_t a1, uint64_t a2)
{
  char v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_21699E458((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void sub_21699E458(uint64_t a1)
{
  sub_21699E4F4((void *)(a1 + 80));
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    char v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t sub_21699E4B8(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_21699E4F4(void *a1)
{
  char v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

unint64_t sub_21699E578()
{
  v105[4] = *MEMORY[0x263EF8340];
  uint64_t v0 = (uint64_t **)operator new(0x18uLL);
  v0[1] = 0;
  v0[2] = 0;
  pxrInternal__aapl__pxrReserved__::SdfTokens_StaticTokenType *v0 = (uint64_t *)(v0 + 1);
  v99 = v0;
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v1) {
    uint64_t v1 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_21699F5EC(&v99, v1, 0);
  char v2 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v2) {
    char v2 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_21699FB10(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v2 + 8), 0);
  char v3 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v3) {
    char v3 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A0034(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v3 + 16), 0);
  unint64_t v4 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v4) {
    unint64_t v4 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A0558(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v4 + 24), 0);
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v5) {
    uint64_t v5 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A0A7C(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v5 + 32), 0);
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v6) {
    uint64_t v6 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A0FA0(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v6 + 40), 0);
  std::string v7 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v7) {
    std::string v7 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A14C4(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v7 + 48), 0);
  int v8 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v8) {
    int v8 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A19E8(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v8 + 56), 0);
  char v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    char v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A1F0C(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 64), 0);
  uint64_t v10 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v10) {
    uint64_t v10 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A2430(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v10 + 72), 0);
  char v11 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v11) {
    char v11 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A2954(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v11 + 80), 0);
  uint64_t v12 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v12) {
    uint64_t v12 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A2E78(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v12 + 88), 0);
  char v13 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v13) {
    char v13 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A339C(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v13 + 96), 0);
  uint64_t v14 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v14) {
    uint64_t v14 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A38C0(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v14 + 424), 0);
  uint64_t v15 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v15) {
    uint64_t v15 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A38C0(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v15 + 432), 0);
  int v16 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v16) {
    int v16 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A3DE4(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v16 + 440), 0);
  unint64_t v17 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v17) {
    unint64_t v17 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A4308(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v17 + 104), 0);
  unint64_t v18 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v18) {
    unint64_t v18 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A482C(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v18 + 128), 0);
  uint64_t v19 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v19) {
    uint64_t v19 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A4D50(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v19 + 152), 0);
  long long v20 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v20) {
    long long v20 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A5274(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v20 + 176), 0);
  uint64_t v21 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v21) {
    uint64_t v21 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A5798(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v21 + 112), 0);
  int v22 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v22) {
    int v22 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A5CBC(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v22 + 136), 0);
  int v23 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v23) {
    int v23 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A61E0(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v23 + 160), 0);
  int v24 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v24) {
    int v24 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A6704(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v24 + 184), 0);
  unint64_t v25 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v25) {
    unint64_t v25 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A6C28(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v25 + 120), 0);
  uint64_t v26 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v26) {
    uint64_t v26 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A714C(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v26 + 144), 0);
  char v27 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v27) {
    char v27 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A7670(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v27 + 168), 0);
  char v28 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v28) {
    char v28 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A7B94(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v28 + 192), 0);
  std::string::size_type v29 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v29) {
    std::string::size_type v29 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A5CBC(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v29 + 200), 0);
  long long v30 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v30) {
    long long v30 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A61E0(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v30 + 208), 0);
  unint64_t v31 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v31) {
    unint64_t v31 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A6704(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v31 + 216), 0);
  uint64_t v32 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v32) {
    uint64_t v32 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A5CBC(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v32 + 224), 0);
  uint64_t v33 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v33) {
    uint64_t v33 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A61E0(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v33 + 232), 0);
  uint64_t v34 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v34) {
    uint64_t v34 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A6704(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v34 + 240), 0);
  std::string v35 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v35) {
    std::string v35 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A5CBC(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v35 + 248), 0);
  size_t v36 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v36) {
    size_t v36 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A61E0(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v36 + 256), 0);
  unint64_t v37 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v37) {
    unint64_t v37 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A6704(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v37 + 264), 0);
  char v38 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v38) {
    char v38 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A5CBC(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v38 + 272), 0);
  unint64_t v39 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v39) {
    unint64_t v39 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A61E0(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v39 + 280), 0);
  uint64_t v40 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v40) {
    uint64_t v40 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A6704(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v40 + 288), 0);
  uint64_t v41 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v41) {
    uint64_t v41 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A714C(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v41 + 296), 0);
  std::string v42 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v42) {
    std::string v42 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A7670(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v42 + 304), 0);
  char v43 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v43) {
    char v43 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A7B94(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v43 + 312), 0);
  char v44 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v44) {
    char v44 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A80B8(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v44 + 320), 0);
  uint64_t v45 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v45) {
    uint64_t v45 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A85DC(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v45 + 328), 0);
  unsigned __int8 v46 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v46) {
    unsigned __int8 v46 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A8B00(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v46 + 336), 0);
  uint64_t v47 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v47) {
    uint64_t v47 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A9024(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v47 + 344), 0);
  uint64_t v48 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v48) {
    uint64_t v48 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A9548(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v48 + 352), 0);
  unsigned __int8 v49 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v49) {
    unsigned __int8 v49 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A9A6C(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v49 + 360), 0);
  uint64_t v50 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v50) {
    uint64_t v50 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A9A6C(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v50 + 368), 0);
  unsigned __int8 v51 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v51) {
    unsigned __int8 v51 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A4D50(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v51 + 384), 0);
  uint64_t v52 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v52) {
    uint64_t v52 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A5274(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v52 + 392), 0);
  unsigned __int8 v53 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v53) {
    unsigned __int8 v53 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A482C(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v53 + 376), 0);
  int v54 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v54) {
    int v54 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A61E0(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v54 + 408), 0);
  size_t v55 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v55) {
    size_t v55 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A6704(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v55 + 416), 0);
  unsigned __int8 v56 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v56) {
    unsigned __int8 v56 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A5CBC(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v56 + 400), 0);
  uint64_t v57 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v57) {
    uint64_t v57 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A4308(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v57 + 104), "Vec2i");
  size_t v58 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v58) {
    size_t v58 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A482C(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v58 + 128), "Vec2h");
  unsigned __int8 v59 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v59) {
    unsigned __int8 v59 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A4D50(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v59 + 152), "Vec2f");
  uint64_t v60 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v60) {
    uint64_t v60 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A5274(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v60 + 176), "Vec2d");
  unint64_t v61 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v61) {
    unint64_t v61 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A5798(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v61 + 112), "Vec3i");
  unsigned __int8 v62 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v62) {
    unsigned __int8 v62 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A5CBC(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v62 + 136), "Vec3h");
  unint64_t v63 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v63) {
    unint64_t v63 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A61E0(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v63 + 160), "Vec3f");
  uint64_t v64 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v64) {
    uint64_t v64 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A6704(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v64 + 184), "Vec3d");
  unint64_t v65 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v65) {
    unint64_t v65 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A6C28(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v65 + 120), "Vec4i");
  unint64_t v66 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v66) {
    unint64_t v66 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A714C(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v66 + 144), "Vec4h");
  uint64_t v67 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v67) {
    uint64_t v67 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A7670(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v67 + 168), "Vec4f");
  unsigned int v68 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v68) {
    unsigned int v68 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A7B94(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v68 + 192), "Vec4d");
  unsigned int v69 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v69) {
    unsigned int v69 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A61E0(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v69 + 208), "PointFloat");
  unsigned int v70 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v70) {
    unsigned int v70 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A6704(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v70 + 216), "Point");
  long long v71 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v71) {
    long long v71 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A61E0(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v71 + 232), "NormalFloat");
  char v72 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v72) {
    char v72 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A6704(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v72 + 240), "Normal");
  uint64_t v73 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v73) {
    uint64_t v73 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A61E0(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v73 + 256), "VectorFloat");
  long long v74 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v74) {
    long long v74 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A6704(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v74 + 264), "Vector");
  unint64_t v75 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v75) {
    unint64_t v75 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A61E0(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v75 + 280), "ColorFloat");
  long long v76 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v76) {
    long long v76 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A6704(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v76 + 288), "Color");
  uint64_t v77 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v77) {
    uint64_t v77 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A80B8(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v77 + 320), "Quath");
  uint64_t v78 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v78) {
    uint64_t v78 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A85DC(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v78 + 328), "Quatf");
  long long v79 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v79) {
    long long v79 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A8B00(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v79 + 336), "Quatd");
  uint64_t v80 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v80) {
    uint64_t v80 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A9024(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v80 + 344), "Matrix2d");
  uint64_t v81 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v81) {
    uint64_t v81 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A9548(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v81 + 352), "Matrix3d");
  char v82 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v82) {
    char v82 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A9A6C(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v82 + 360), "Matrix4d");
  unsigned int v83 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v83) {
    unsigned int v83 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A9A6C(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v83 + 368), "Frame");
  unsigned int v84 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v84) {
    unsigned int v84 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A9A6C(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v84 + 360), "Transform");
  uint64_t v85 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v85) {
    uint64_t v85 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A0034(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v85 + 16), "PointIndex");
  uint64_t v86 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v86) {
    uint64_t v86 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A0034(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v86 + 16), "EdgeIndex");
  int v87 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v87) {
    int v87 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A0034(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v87 + 16), "FaceIndex");
  uint64_t v88 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v88) {
    uint64_t v88 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2169A2E78(&v99, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v88 + 88), "Schema");
  sub_216779094(v97, "");
  uint64_t v96 = 0;
  v101[3] = 0;
  sub_2169C20E4((char *)__dst, (long long *)v97, &v95, 0, (uint64_t)v101);
  sub_216779094(__p, "None");
  v100 = __p;
  unint64_t v89 = sub_21699E330(v0, (const void **)__p, (uint64_t)&unk_2174BFD90, (_OWORD **)&v100);
  v90 = (void **)v89 + 7;
  if (*((char *)v89 + 79) < 0) {
    operator delete(*v90);
  }
  *(_OWORD *)v90 = *(_OWORD *)__dst;
  *((void *)v89 + 9) = v103;
  HIBYTE(v103) = 0;
  LOBYTE(__dst[0]) = 0;
  v89[5] = v104[0];
  *(_OWORD *)((char *)v89 + 89) = *(_OWORD *)((char *)v104 + 9);
  sub_2169C221C((void *)v89 + 14, (uint64_t)v105);
  if (v94 < 0) {
    operator delete(__p[0]);
  }
  sub_21699E4F4(v105);
  if (SHIBYTE(v103) < 0) {
    operator delete(__dst[0]);
  }
  sub_21699E4F4(v101);
  if (v98 < 0) {
    operator delete(v97[0]);
  }
  uint64_t v91 = 0;
  atomic_compare_exchange_strong(&qword_267B8EB80, (unint64_t *)&v91, (unint64_t)v0);
  if (v91)
  {
    sub_2169C2328((uint64_t)v0, v0[1]);
    operator delete(v0);
    return atomic_load((unint64_t *)&qword_267B8EB80);
  }
  return (unint64_t)v0;
}

void sub_21699F574(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_21699F5EC(uint64_t ***a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this, char *a3)
{
  v37[4] = *MEMORY[0x263EF8340];
  ArrayType = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(this);
  if (a3)
  {
    sub_216779094(&__dst, a3);
    uint64_t v6 = (std::string *)sub_216779094(&v34, a3);
    std::string v7 = std::string::append(v6, "[]");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    uint64_t v27 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)uint64_t v26 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v35) < 0) {
      operator delete((void *)v34);
    }
  }
  else
  {
    AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)this, (atomic_uint **)&v34);
    if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0) {
      Emptyunint64_t String = (uint64_t *)((v34 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
    }
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_216778F24(&__dst, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      long long v11 = *(_OWORD *)EmptyString;
      uint64_t v29 = EmptyString[2];
      long long __dst = v11;
    }
    if ((v34 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&ArrayType, (atomic_uint **)&v34);
    if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0) {
      char v13 = (uint64_t *)((v34 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      char v13 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
    }
    if (*((char *)v13 + 23) < 0)
    {
      sub_216778F24(v26, (void *)*v13, v13[1]);
    }
    else
    {
      long long v14 = *(_OWORD *)v13;
      uint64_t v27 = v13[2];
      *(_OWORD *)uint64_t v26 = v14;
    }
    if ((v34 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  uint64_t v15 = *a1;
  if (SHIBYTE(v29) < 0)
  {
    sub_216778F24(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)std::string __p = __dst;
    uint64_t v25 = v29;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions((uint64_t **)this, &v23);
  v33[0] = &unk_26C755310;
  v33[1] = sub_2169A9F90;
  v33[3] = v33;
  sub_2169C20E4((char *)&v34, (long long *)__p, (long long *)&v23, 0, (uint64_t)v33);
  p_dst = (void **)&__dst;
  int v16 = sub_2169AA770(v15, (const void **)&__dst, (uint64_t)&unk_2174BFD90, (long long **)&p_dst);
  unint64_t v17 = (void **)(v16 + 7);
  if (*((char *)v16 + 79) < 0) {
    operator delete(*v17);
  }
  *(_OWORD *)unint64_t v17 = v34;
  v16[9] = v35;
  HIBYTE(v35) = 0;
  LOBYTE(v34) = 0;
  *((_OWORD *)v16 + 5) = v36[0];
  *(_OWORD *)((char *)v16 + 89) = *(_OWORD *)((char *)v36 + 9);
  sub_2169C221C(v16 + 14, (uint64_t)v37);
  sub_21699E4F4(v37);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  sub_21699E4F4(v33);
  if (SHIBYTE(v25) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v27) < 0)
  {
    sub_216778F24(v21, v26[0], (unint64_t)v26[1]);
  }
  else
  {
    *(_OWORD *)uint64_t v21 = *(_OWORD *)v26;
    uint64_t v22 = v27;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions(&ArrayType, &v20);
  v32[0] = &unk_26C755310;
  v32[1] = sub_2169AA06C;
  v32[3] = v32;
  sub_2169C20E4((char *)&v34, (long long *)v21, (long long *)&v20, 1, (uint64_t)v32);
  p_dst = v26;
  unint64_t v18 = sub_2169AA770(v15, (const void **)v26, (uint64_t)&unk_2174BFD90, (long long **)&p_dst);
  uint64_t v19 = (void **)(v18 + 7);
  if (*((char *)v18 + 79) < 0) {
    operator delete(*v19);
  }
  *(_OWORD *)uint64_t v19 = v34;
  v18[9] = v35;
  HIBYTE(v35) = 0;
  LOBYTE(v34) = 0;
  *((_OWORD *)v18 + 5) = v36[0];
  *(_OWORD *)((char *)v18 + 89) = *(_OWORD *)((char *)v36 + 9);
  sub_2169C221C(v18 + 14, (uint64_t)v37);
  sub_21699E4F4(v37);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  sub_21699E4F4(v32);
  if (SHIBYTE(v22) < 0) {
    operator delete(v21[0]);
  }
  if (SHIBYTE(v27) < 0) {
    operator delete(v26[0]);
  }
  if (SHIBYTE(v29) < 0) {
    operator delete((void *)__dst);
  }
}

void sub_21699F9F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v47 = *(void *)(v45 - 144);
  if ((v47 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a41 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_21699FB08()
{
}

void sub_21699FB10(uint64_t ***a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this, char *a3)
{
  v37[4] = *MEMORY[0x263EF8340];
  ArrayType = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(this);
  if (a3)
  {
    sub_216779094(&__dst, a3);
    uint64_t v6 = (std::string *)sub_216779094(&v34, a3);
    std::string v7 = std::string::append(v6, "[]");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    uint64_t v27 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)uint64_t v26 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v35) < 0) {
      operator delete((void *)v34);
    }
  }
  else
  {
    AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)this, (atomic_uint **)&v34);
    if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0) {
      Emptyunint64_t String = (uint64_t *)((v34 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
    }
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_216778F24(&__dst, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      long long v11 = *(_OWORD *)EmptyString;
      uint64_t v29 = EmptyString[2];
      long long __dst = v11;
    }
    if ((v34 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&ArrayType, (atomic_uint **)&v34);
    if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0) {
      char v13 = (uint64_t *)((v34 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      char v13 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
    }
    if (*((char *)v13 + 23) < 0)
    {
      sub_216778F24(v26, (void *)*v13, v13[1]);
    }
    else
    {
      long long v14 = *(_OWORD *)v13;
      uint64_t v27 = v13[2];
      *(_OWORD *)uint64_t v26 = v14;
    }
    if ((v34 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  uint64_t v15 = *a1;
  if (SHIBYTE(v29) < 0)
  {
    sub_216778F24(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)std::string __p = __dst;
    uint64_t v25 = v29;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions((uint64_t **)this, &v23);
  v33[0] = &unk_26C755310;
  v33[1] = sub_2169AAFF0;
  v33[3] = v33;
  sub_2169C20E4((char *)&v34, (long long *)__p, (long long *)&v23, 0, (uint64_t)v33);
  p_dst = (void **)&__dst;
  int v16 = sub_2169AA770(v15, (const void **)&__dst, (uint64_t)&unk_2174BFD90, (long long **)&p_dst);
  unint64_t v17 = (void **)(v16 + 7);
  if (*((char *)v16 + 79) < 0) {
    operator delete(*v17);
  }
  *(_OWORD *)unint64_t v17 = v34;
  v16[9] = v35;
  HIBYTE(v35) = 0;
  LOBYTE(v34) = 0;
  *((_OWORD *)v16 + 5) = v36[0];
  *(_OWORD *)((char *)v16 + 89) = *(_OWORD *)((char *)v36 + 9);
  sub_2169C221C(v16 + 14, (uint64_t)v37);
  sub_21699E4F4(v37);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  sub_21699E4F4(v33);
  if (SHIBYTE(v25) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v27) < 0)
  {
    sub_216778F24(v21, v26[0], (unint64_t)v26[1]);
  }
  else
  {
    *(_OWORD *)uint64_t v21 = *(_OWORD *)v26;
    uint64_t v22 = v27;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions(&ArrayType, &v20);
  v32[0] = &unk_26C755310;
  v32[1] = sub_2169AB0CC;
  v32[3] = v32;
  sub_2169C20E4((char *)&v34, (long long *)v21, (long long *)&v20, 1, (uint64_t)v32);
  p_dst = v26;
  unint64_t v18 = sub_2169AA770(v15, (const void **)v26, (uint64_t)&unk_2174BFD90, (long long **)&p_dst);
  uint64_t v19 = (void **)(v18 + 7);
  if (*((char *)v18 + 79) < 0) {
    operator delete(*v19);
  }
  *(_OWORD *)uint64_t v19 = v34;
  v18[9] = v35;
  HIBYTE(v35) = 0;
  LOBYTE(v34) = 0;
  *((_OWORD *)v18 + 5) = v36[0];
  *(_OWORD *)((char *)v18 + 89) = *(_OWORD *)((char *)v36 + 9);
  sub_2169C221C(v18 + 14, (uint64_t)v37);
  sub_21699E4F4(v37);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  sub_21699E4F4(v32);
  if (SHIBYTE(v22) < 0) {
    operator delete(v21[0]);
  }
  if (SHIBYTE(v27) < 0) {
    operator delete(v26[0]);
  }
  if (SHIBYTE(v29) < 0) {
    operator delete((void *)__dst);
  }
}

void sub_21699FF1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v47 = *(void *)(v45 - 144);
  if ((v47 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a41 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2169A002C()
{
}

void sub_2169A0034(uint64_t ***a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this, char *a3)
{
  v37[4] = *MEMORY[0x263EF8340];
  ArrayType = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(this);
  if (a3)
  {
    sub_216779094(&__dst, a3);
    uint64_t v6 = (std::string *)sub_216779094(&v34, a3);
    std::string v7 = std::string::append(v6, "[]");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    uint64_t v27 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)uint64_t v26 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v35) < 0) {
      operator delete((void *)v34);
    }
  }
  else
  {
    AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)this, (atomic_uint **)&v34);
    if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0) {
      Emptyunint64_t String = (uint64_t *)((v34 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
    }
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_216778F24(&__dst, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      long long v11 = *(_OWORD *)EmptyString;
      uint64_t v29 = EmptyString[2];
      long long __dst = v11;
    }
    if ((v34 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&ArrayType, (atomic_uint **)&v34);
    if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0) {
      char v13 = (uint64_t *)((v34 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      char v13 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
    }
    if (*((char *)v13 + 23) < 0)
    {
      sub_216778F24(v26, (void *)*v13, v13[1]);
    }
    else
    {
      long long v14 = *(_OWORD *)v13;
      uint64_t v27 = v13[2];
      *(_OWORD *)uint64_t v26 = v14;
    }
    if ((v34 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  uint64_t v15 = *a1;
  if (SHIBYTE(v29) < 0)
  {
    sub_216778F24(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)std::string __p = __dst;
    uint64_t v25 = v29;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions((uint64_t **)this, &v23);
  v33[0] = &unk_26C755310;
  v33[1] = sub_2169ABA64;
  v33[3] = v33;
  sub_2169C20E4((char *)&v34, (long long *)__p, (long long *)&v23, 0, (uint64_t)v33);
  p_dst = (void **)&__dst;
  int v16 = sub_2169AA770(v15, (const void **)&__dst, (uint64_t)&unk_2174BFD90, (long long **)&p_dst);
  unint64_t v17 = (void **)(v16 + 7);
  if (*((char *)v16 + 79) < 0) {
    operator delete(*v17);
  }
  *(_OWORD *)unint64_t v17 = v34;
  v16[9] = v35;
  HIBYTE(v35) = 0;
  LOBYTE(v34) = 0;
  *((_OWORD *)v16 + 5) = v36[0];
  *(_OWORD *)((char *)v16 + 89) = *(_OWORD *)((char *)v36 + 9);
  sub_2169C221C(v16 + 14, (uint64_t)v37);
  sub_21699E4F4(v37);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  sub_21699E4F4(v33);
  if (SHIBYTE(v25) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v27) < 0)
  {
    sub_216778F24(v21, v26[0], (unint64_t)v26[1]);
  }
  else
  {
    *(_OWORD *)uint64_t v21 = *(_OWORD *)v26;
    uint64_t v22 = v27;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions(&ArrayType, &v20);
  v32[0] = &unk_26C755310;
  v32[1] = sub_2169ABB40;
  v32[3] = v32;
  sub_2169C20E4((char *)&v34, (long long *)v21, (long long *)&v20, 1, (uint64_t)v32);
  p_dst = v26;
  unint64_t v18 = sub_2169AA770(v15, (const void **)v26, (uint64_t)&unk_2174BFD90, (long long **)&p_dst);
  uint64_t v19 = (void **)(v18 + 7);
  if (*((char *)v18 + 79) < 0) {
    operator delete(*v19);
  }
  *(_OWORD *)uint64_t v19 = v34;
  v18[9] = v35;
  HIBYTE(v35) = 0;
  LOBYTE(v34) = 0;
  *((_OWORD *)v18 + 5) = v36[0];
  *(_OWORD *)((char *)v18 + 89) = *(_OWORD *)((char *)v36 + 9);
  sub_2169C221C(v18 + 14, (uint64_t)v37);
  sub_21699E4F4(v37);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  sub_21699E4F4(v32);
  if (SHIBYTE(v22) < 0) {
    operator delete(v21[0]);
  }
  if (SHIBYTE(v27) < 0) {
    operator delete(v26[0]);
  }
  if (SHIBYTE(v29) < 0) {
    operator delete((void *)__dst);
  }
}

void sub_2169A0440(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v47 = *(void *)(v45 - 144);
  if ((v47 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a41 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2169A0550()
{
}

void sub_2169A0558(uint64_t ***a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this, char *a3)
{
  v37[4] = *MEMORY[0x263EF8340];
  ArrayType = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(this);
  if (a3)
  {
    sub_216779094(&__dst, a3);
    uint64_t v6 = (std::string *)sub_216779094(&v34, a3);
    std::string v7 = std::string::append(v6, "[]");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    uint64_t v27 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)uint64_t v26 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v35) < 0) {
      operator delete((void *)v34);
    }
  }
  else
  {
    AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)this, (atomic_uint **)&v34);
    if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0) {
      Emptyunint64_t String = (uint64_t *)((v34 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
    }
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_216778F24(&__dst, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      long long v11 = *(_OWORD *)EmptyString;
      uint64_t v29 = EmptyString[2];
      long long __dst = v11;
    }
    if ((v34 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&ArrayType, (atomic_uint **)&v34);
    if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0) {
      char v13 = (uint64_t *)((v34 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      char v13 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
    }
    if (*((char *)v13 + 23) < 0)
    {
      sub_216778F24(v26, (void *)*v13, v13[1]);
    }
    else
    {
      long long v14 = *(_OWORD *)v13;
      uint64_t v27 = v13[2];
      *(_OWORD *)uint64_t v26 = v14;
    }
    if ((v34 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  uint64_t v15 = *a1;
  if (SHIBYTE(v29) < 0)
  {
    sub_216778F24(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)std::string __p = __dst;
    uint64_t v25 = v29;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions((uint64_t **)this, &v23);
  v33[0] = &unk_26C755310;
  v33[1] = sub_2169AC530;
  v33[3] = v33;
  sub_2169C20E4((char *)&v34, (long long *)__p, (long long *)&v23, 0, (uint64_t)v33);
  p_dst = (void **)&__dst;
  int v16 = sub_2169AA770(v15, (const void **)&__dst, (uint64_t)&unk_2174BFD90, (long long **)&p_dst);
  unint64_t v17 = (void **)(v16 + 7);
  if (*((char *)v16 + 79) < 0) {
    operator delete(*v17);
  }
  *(_OWORD *)unint64_t v17 = v34;
  v16[9] = v35;
  HIBYTE(v35) = 0;
  LOBYTE(v34) = 0;
  *((_OWORD *)v16 + 5) = v36[0];
  *(_OWORD *)((char *)v16 + 89) = *(_OWORD *)((char *)v36 + 9);
  sub_2169C221C(v16 + 14, (uint64_t)v37);
  sub_21699E4F4(v37);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  sub_21699E4F4(v33);
  if (SHIBYTE(v25) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v27) < 0)
  {
    sub_216778F24(v21, v26[0], (unint64_t)v26[1]);
  }
  else
  {
    *(_OWORD *)uint64_t v21 = *(_OWORD *)v26;
    uint64_t v22 = v27;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions(&ArrayType, &v20);
  v32[0] = &unk_26C755310;
  v32[1] = sub_2169AC60C;
  v32[3] = v32;
  sub_2169C20E4((char *)&v34, (long long *)v21, (long long *)&v20, 1, (uint64_t)v32);
  p_dst = v26;
  unint64_t v18 = sub_2169AA770(v15, (const void **)v26, (uint64_t)&unk_2174BFD90, (long long **)&p_dst);
  uint64_t v19 = (void **)(v18 + 7);
  if (*((char *)v18 + 79) < 0) {
    operator delete(*v19);
  }
  *(_OWORD *)uint64_t v19 = v34;
  v18[9] = v35;
  HIBYTE(v35) = 0;
  LOBYTE(v34) = 0;
  *((_OWORD *)v18 + 5) = v36[0];
  *(_OWORD *)((char *)v18 + 89) = *(_OWORD *)((char *)v36 + 9);
  sub_2169C221C(v18 + 14, (uint64_t)v37);
  sub_21699E4F4(v37);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  sub_21699E4F4(v32);
  if (SHIBYTE(v22) < 0) {
    operator delete(v21[0]);
  }
  if (SHIBYTE(v27) < 0) {
    operator delete(v26[0]);
  }
  if (SHIBYTE(v29) < 0) {
    operator delete((void *)__dst);
  }
}

void sub_2169A0964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v47 = *(void *)(v45 - 144);
  if ((v47 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a41 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2169A0A74()
{
}

void sub_2169A0A7C(uint64_t ***a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this, char *a3)
{
  v37[4] = *MEMORY[0x263EF8340];
  ArrayType = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(this);
  if (a3)
  {
    sub_216779094(&__dst, a3);
    uint64_t v6 = (std::string *)sub_216779094(&v34, a3);
    std::string v7 = std::string::append(v6, "[]");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    uint64_t v27 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)uint64_t v26 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v35) < 0) {
      operator delete((void *)v34);
    }
  }
  else
  {
    AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)this, (atomic_uint **)&v34);
    if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0) {
      Emptyunint64_t String = (uint64_t *)((v34 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
    }
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_216778F24(&__dst, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      long long v11 = *(_OWORD *)EmptyString;
      uint64_t v29 = EmptyString[2];
      long long __dst = v11;
    }
    if ((v34 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&ArrayType, (atomic_uint **)&v34);
    if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0) {
      char v13 = (uint64_t *)((v34 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      char v13 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
    }
    if (*((char *)v13 + 23) < 0)
    {
      sub_216778F24(v26, (void *)*v13, v13[1]);
    }
    else
    {
      long long v14 = *(_OWORD *)v13;
      uint64_t v27 = v13[2];
      *(_OWORD *)uint64_t v26 = v14;
    }
    if ((v34 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  uint64_t v15 = *a1;
  if (SHIBYTE(v29) < 0)
  {
    sub_216778F24(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)std::string __p = __dst;
    uint64_t v25 = v29;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions((uint64_t **)this, &v23);
  v33[0] = &unk_26C755310;
  v33[1] = sub_2169ACFF8;
  v33[3] = v33;
  sub_2169C20E4((char *)&v34, (long long *)__p, (long long *)&v23, 0, (uint64_t)v33);
  p_dst = (void **)&__dst;
  int v16 = sub_2169AA770(v15, (const void **)&__dst, (uint64_t)&unk_2174BFD90, (long long **)&p_dst);
  unint64_t v17 = (void **)(v16 + 7);
  if (*((char *)v16 + 79) < 0) {
    operator delete(*v17);
  }
  *(_OWORD *)unint64_t v17 = v34;
  v16[9] = v35;
  HIBYTE(v35) = 0;
  LOBYTE(v34) = 0;
  *((_OWORD *)v16 + 5) = v36[0];
  *(_OWORD *)((char *)v16 + 89) = *(_OWORD *)((char *)v36 + 9);
  sub_2169C221C(v16 + 14, (uint64_t)v37);
  sub_21699E4F4(v37);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  sub_21699E4F4(v33);
  if (SHIBYTE(v25) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v27) < 0)
  {
    sub_216778F24(v21, v26[0], (unint64_t)v26[1]);
  }
  else
  {
    *(_OWORD *)uint64_t v21 = *(_OWORD *)v26;
    uint64_t v22 = v27;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions(&ArrayType, &v20);
  v32[0] = &unk_26C755310;
  v32[1] = sub_2169AD0D0;
  v32[3] = v32;
  sub_2169C20E4((char *)&v34, (long long *)v21, (long long *)&v20, 1, (uint64_t)v32);
  p_dst = v26;
  unint64_t v18 = sub_2169AA770(v15, (const void **)v26, (uint64_t)&unk_2174BFD90, (long long **)&p_dst);
  uint64_t v19 = (void **)(v18 + 7);
  if (*((char *)v18 + 79) < 0) {
    operator delete(*v19);
  }
  *(_OWORD *)uint64_t v19 = v34;
  v18[9] = v35;
  HIBYTE(v35) = 0;
  LOBYTE(v34) = 0;
  *((_OWORD *)v18 + 5) = v36[0];
  *(_OWORD *)((char *)v18 + 89) = *(_OWORD *)((char *)v36 + 9);
  sub_2169C221C(v18 + 14, (uint64_t)v37);
  sub_21699E4F4(v37);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  sub_21699E4F4(v32);
  if (SHIBYTE(v22) < 0) {
    operator delete(v21[0]);
  }
  if (SHIBYTE(v27) < 0) {
    operator delete(v26[0]);
  }
  if (SHIBYTE(v29) < 0) {
    operator delete((void *)__dst);
  }
}

void sub_2169A0E88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v47 = *(void *)(v45 - 144);
  if ((v47 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a41 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2169A0F98()
{
}

void sub_2169A0FA0(uint64_t ***a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this, char *a3)
{
  v37[4] = *MEMORY[0x263EF8340];
  ArrayType = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(this);
  if (a3)
  {
    sub_216779094(&__dst, a3);
    uint64_t v6 = (std::string *)sub_216779094(&v34, a3);
    std::string v7 = std::string::append(v6, "[]");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    uint64_t v27 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)uint64_t v26 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v35) < 0) {
      operator delete((void *)v34);
    }
  }
  else
  {
    AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)this, (atomic_uint **)&v34);
    if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0) {
      Emptyunint64_t String = (uint64_t *)((v34 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
    }
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_216778F24(&__dst, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      long long v11 = *(_OWORD *)EmptyString;
      uint64_t v29 = EmptyString[2];
      long long __dst = v11;
    }
    if ((v34 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&ArrayType, (atomic_uint **)&v34);
    if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0) {
      char v13 = (uint64_t *)((v34 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      char v13 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
    }
    if (*((char *)v13 + 23) < 0)
    {
      sub_216778F24(v26, (void *)*v13, v13[1]);
    }
    else
    {
      long long v14 = *(_OWORD *)v13;
      uint64_t v27 = v13[2];
      *(_OWORD *)uint64_t v26 = v14;
    }
    if ((v34 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  uint64_t v15 = *a1;
  if (SHIBYTE(v29) < 0)
  {
    sub_216778F24(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)std::string __p = __dst;
    uint64_t v25 = v29;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions((uint64_t **)this, &v23);
  v33[0] = &unk_26C755310;
  v33[1] = sub_2169AE0D0;
  v33[3] = v33;
  sub_2169C20E4((char *)&v34, (long long *)__p, (long long *)&v23, 0, (uint64_t)v33);
  p_dst = (void **)&__dst;
  int v16 = sub_2169AA770(v15, (const void **)&__dst, (uint64_t)&unk_2174BFD90, (long long **)&p_dst);
  unint64_t v17 = (void **)(v16 + 7);
  if (*((char *)v16 + 79) < 0) {
    operator delete(*v17);
  }
  *(_OWORD *)unint64_t v17 = v34;
  v16[9] = v35;
  HIBYTE(v35) = 0;
  LOBYTE(v34) = 0;
  *((_OWORD *)v16 + 5) = v36[0];
  *(_OWORD *)((char *)v16 + 89) = *(_OWORD *)((char *)v36 + 9);
  sub_2169C221C(v16 + 14, (uint64_t)v37);
  sub_21699E4F4(v37);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  sub_21699E4F4(v33);
  if (SHIBYTE(v25) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v27) < 0)
  {
    sub_216778F24(v21, v26[0], (unint64_t)v26[1]);
  }
  else
  {
    *(_OWORD *)uint64_t v21 = *(_OWORD *)v26;
    uint64_t v22 = v27;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions(&ArrayType, &v20);
  v32[0] = &unk_26C755310;
  v32[1] = sub_2169AE1A8;
  v32[3] = v32;
  sub_2169C20E4((char *)&v34, (long long *)v21, (long long *)&v20, 1, (uint64_t)v32);
  p_dst = v26;
  unint64_t v18 = sub_2169AA770(v15, (const void **)v26, (uint64_t)&unk_2174BFD90, (long long **)&p_dst);
  uint64_t v19 = (void **)(v18 + 7);
  if (*((char *)v18 + 79) < 0) {
    operator delete(*v19);
  }
  *(_OWORD *)uint64_t v19 = v34;
  v18[9] = v35;
  HIBYTE(v35) = 0;
  LOBYTE(v34) = 0;
  *((_OWORD *)v18 + 5) = v36[0];
  *(_OWORD *)((char *)v18 + 89) = *(_OWORD *)((char *)v36 + 9);
  sub_2169C221C(v18 + 14, (uint64_t)v37);
  sub_21699E4F4(v37);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  sub_21699E4F4(v32);
  if (SHIBYTE(v22) < 0) {
    operator delete(v21[0]);
  }
  if (SHIBYTE(v27) < 0) {
    operator delete(v26[0]);
  }
  if (SHIBYTE(v29) < 0) {
    operator delete((void *)__dst);
  }
}

void sub_2169A13AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v47 = *(void *)(v45 - 144);
  if ((v47 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a41 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2169A14BC()
{
}

void sub_2169A14C4(uint64_t ***a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this, char *a3)
{
  v37[4] = *MEMORY[0x263EF8340];
  ArrayType = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(this);
  if (a3)
  {
    sub_216779094(&__dst, a3);
    uint64_t v6 = (std::string *)sub_216779094(&v34, a3);
    std::string v7 = std::string::append(v6, "[]");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    uint64_t v27 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)uint64_t v26 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v35) < 0) {
      operator delete((void *)v34);
    }
  }
  else
  {
    AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)this, (atomic_uint **)&v34);
    if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0) {
      Emptyunint64_t String = (uint64_t *)((v34 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
    }
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_216778F24(&__dst, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      long long v11 = *(_OWORD *)EmptyString;
      uint64_t v29 = EmptyString[2];
      long long __dst = v11;
    }
    if ((v34 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&ArrayType, (atomic_uint **)&v34);
    if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0) {
      char v13 = (uint64_t *)((v34 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      char v13 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
    }
    if (*((char *)v13 + 23) < 0)
    {
      sub_216778F24(v26, (void *)*v13, v13[1]);
    }
    else
    {
      long long v14 = *(_OWORD *)v13;
      uint64_t v27 = v13[2];
      *(_OWORD *)uint64_t v26 = v14;
    }
    if ((v34 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  uint64_t v15 = *a1;
  if (SHIBYTE(v29) < 0)
  {
    sub_216778F24(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)std::string __p = __dst;
    uint64_t v25 = v29;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions((uint64_t **)this, &v23);
  v33[0] = &unk_26C755310;
  v33[1] = sub_2169AF118;
  v33[3] = v33;
  sub_2169C20E4((char *)&v34, (long long *)__p, (long long *)&v23, 0, (uint64_t)v33);
  p_dst = (void **)&__dst;
  int v16 = sub_2169AA770(v15, (const void **)&__dst, (uint64_t)&unk_2174BFD90, (long long **)&p_dst);
  unint64_t v17 = (void **)(v16 + 7);
  if (*((char *)v16 + 79) < 0) {
    operator delete(*v17);
  }
  *(_OWORD *)unint64_t v17 = v34;
  v16[9] = v35;
  HIBYTE(v35) = 0;
  LOBYTE(v34) = 0;
  *((_OWORD *)v16 + 5) = v36[0];
  *(_OWORD *)((char *)v16 + 89) = *(_OWORD *)((char *)v36 + 9);
  sub_2169C221C(v16 + 14, (uint64_t)v37);
  sub_21699E4F4(v37);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  sub_21699E4F4(v33);
  if (SHIBYTE(v25) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v27) < 0)
  {
    sub_216778F24(v21, v26[0], (unint64_t)v26[1]);
  }
  else
  {
    *(_OWORD *)uint64_t v21 = *(_OWORD *)v26;
    uint64_t v22 = v27;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions(&ArrayType, &v20);
  v32[0] = &unk_26C755310;
  v32[1] = sub_2169AF1F0;
  v32[3] = v32;
  sub_2169C20E4((char *)&v34, (long long *)v21, (long long *)&v20, 1, (uint64_t)v32);
  p_dst = v26;
  unint64_t v18 = sub_2169AA770(v15, (const void **)v26, (uint64_t)&unk_2174BFD90, (long long **)&p_dst);
  uint64_t v19 = (void **)(v18 + 7);
  if (*((char *)v18 + 79) < 0) {
    operator delete(*v19);
  }
  *(_OWORD *)uint64_t v19 = v34;
  v18[9] = v35;
  HIBYTE(v35) = 0;
  LOBYTE(v34) = 0;
  *((_OWORD *)v18 + 5) = v36[0];
  *(_OWORD *)((char *)v18 + 89) = *(_OWORD *)((char *)v36 + 9);
  sub_2169C221C(v18 + 14, (uint64_t)v37);
  sub_21699E4F4(v37);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  sub_21699E4F4(v32);
  if (SHIBYTE(v22) < 0) {
    operator delete(v21[0]);
  }
  if (SHIBYTE(v27) < 0) {
    operator delete(v26[0]);
  }
  if (SHIBYTE(v29) < 0) {
    operator delete((void *)__dst);
  }
}

void sub_2169A18D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v47 = *(void *)(v45 - 144);
  if ((v47 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a41 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2169A19E0()
{
}

void sub_2169A19E8(uint64_t ***a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this, char *a3)
{
  v37[4] = *MEMORY[0x263EF8340];
  ArrayType = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(this);
  if (a3)
  {
    sub_216779094(&__dst, a3);
    uint64_t v6 = (std::string *)sub_216779094(&v34, a3);
    std::string v7 = std::string::append(v6, "[]");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    uint64_t v27 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)uint64_t v26 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v35) < 0) {
      operator delete((void *)v34);
    }
  }
  else
  {
    AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)this, (atomic_uint **)&v34);
    if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0) {
      Emptyunint64_t String = (uint64_t *)((v34 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
    }
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_216778F24(&__dst, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      long long v11 = *(_OWORD *)EmptyString;
      uint64_t v29 = EmptyString[2];
      long long __dst = v11;
    }
    if ((v34 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&ArrayType, (atomic_uint **)&v34);
    if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0) {
      char v13 = (uint64_t *)((v34 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      char v13 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
    }
    if (*((char *)v13 + 23) < 0)
    {
      sub_216778F24(v26, (void *)*v13, v13[1]);
    }
    else
    {
      long long v14 = *(_OWORD *)v13;
      uint64_t v27 = v13[2];
      *(_OWORD *)uint64_t v26 = v14;
    }
    if ((v34 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  uint64_t v15 = *a1;
  if (SHIBYTE(v29) < 0)
  {
    sub_216778F24(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)std::string __p = __dst;
    uint64_t v25 = v29;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions((uint64_t **)this, &v23);
  v33[0] = &unk_26C755310;
  v33[1] = sub_2169AF9B0;
  v33[3] = v33;
  sub_2169C20E4((char *)&v34, (long long *)__p, (long long *)&v23, 0, (uint64_t)v33);
  p_dst = (void **)&__dst;
  int v16 = sub_2169AA770(v15, (const void **)&__dst, (uint64_t)&unk_2174BFD90, (long long **)&p_dst);
  unint64_t v17 = (void **)(v16 + 7);
  if (*((char *)v16 + 79) < 0) {
    operator delete(*v17);
  }
  *(_OWORD *)unint64_t v17 = v34;
  v16[9] = v35;
  HIBYTE(v35) = 0;
  LOBYTE(v34) = 0;
  *((_OWORD *)v16 + 5) = v36[0];
  *(_OWORD *)((char *)v16 + 89) = *(_OWORD *)((char *)v36 + 9);
  sub_2169C221C(v16 + 14, (uint64_t)v37);
  sub_21699E4F4(v37);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  sub_21699E4F4(v33);
  if (SHIBYTE(v25) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v27) < 0)
  {
    sub_216778F24(v21, v26[0], (unint64_t)v26[1]);
  }
  else
  {
    *(_OWORD *)uint64_t v21 = *(_OWORD *)v26;
    uint64_t v22 = v27;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions(&ArrayType, &v20);
  v32[0] = &unk_26C755310;
  v32[1] = sub_2169AFB44;
  v32[3] = v32;
  sub_2169C20E4((char *)&v34, (long long *)v21, (long long *)&v20, 1, (uint64_t)v32);
  p_dst = v26;
  unint64_t v18 = sub_2169AA770(v15, (const void **)v26, (uint64_t)&unk_2174BFD90, (long long **)&p_dst);
  uint64_t v19 = (void **)(v18 + 7);
  if (*((char *)v18 + 79) < 0) {
    operator delete(*v19);
  }
  *(_OWORD *)uint64_t v19 = v34;
  v18[9] = v35;
  HIBYTE(v35) = 0;
  LOBYTE(v34) = 0;
  *((_OWORD *)v18 + 5) = v36[0];
  *(_OWORD *)((char *)v18 + 89) = *(_OWORD *)((char *)v36 + 9);
  sub_2169C221C(v18 + 14, (uint64_t)v37);
  sub_21699E4F4(v37);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  sub_21699E4F4(v32);
  if (SHIBYTE(v22) < 0) {
    operator delete(v21[0]);
  }
  if (SHIBYTE(v27) < 0) {
    operator delete(v26[0]);
  }
  if (SHIBYTE(v29) < 0) {
    operator delete((void *)__dst);
  }
}

void sub_2169A1DF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v47 = *(void *)(v45 - 144);
  if ((v47 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a41 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2169A1F04()
{
}

void sub_2169A1F0C(uint64_t ***a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this, char *a3)
{
  v37[4] = *MEMORY[0x263EF8340];
  ArrayType = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(this);
  if (a3)
  {
    sub_216779094(&__dst, a3);
    uint64_t v6 = (std::string *)sub_216779094(&v34, a3);
    std::string v7 = std::string::append(v6, "[]");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    uint64_t v27 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)uint64_t v26 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v35) < 0) {
      operator delete((void *)v34);
    }
  }
  else
  {
    AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)this, (atomic_uint **)&v34);
    if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0) {
      Emptyunint64_t String = (uint64_t *)((v34 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
    }
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_216778F24(&__dst, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      long long v11 = *(_OWORD *)EmptyString;
      uint64_t v29 = EmptyString[2];
      long long __dst = v11;
    }
    if ((v34 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&ArrayType, (atomic_uint **)&v34);
    if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0) {
      char v13 = (uint64_t *)((v34 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      char v13 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
    }
    if (*((char *)v13 + 23) < 0)
    {
      sub_216778F24(v26, (void *)*v13, v13[1]);
    }
    else
    {
      long long v14 = *(_OWORD *)v13;
      uint64_t v27 = v13[2];
      *(_OWORD *)uint64_t v26 = v14;
    }
    if ((v34 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  uint64_t v15 = *a1;
  if (SHIBYTE(v29) < 0)
  {
    sub_216778F24(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)std::string __p = __dst;
    uint64_t v25 = v29;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions((uint64_t **)this, &v23);
  v33[0] = &unk_26C755310;
  v33[1] = sub_2169AFF10;
  v33[3] = v33;
  sub_2169C20E4((char *)&v34, (long long *)__p, (long long *)&v23, 0, (uint64_t)v33);
  p_dst = (void **)&__dst;
  int v16 = sub_2169AA770(v15, (const void **)&__dst, (uint64_t)&unk_2174BFD90, (long long **)&p_dst);
  unint64_t v17 = (void **)(v16 + 7);
  if (*((char *)v16 + 79) < 0) {
    operator delete(*v17);
  }
  *(_OWORD *)unint64_t v17 = v34;
  v16[9] = v35;
  HIBYTE(v35) = 0;
  LOBYTE(v34) = 0;
  *((_OWORD *)v16 + 5) = v36[0];
  *(_OWORD *)((char *)v16 + 89) = *(_OWORD *)((char *)v36 + 9);
  sub_2169C221C(v16 + 14, (uint64_t)v37);
  sub_21699E4F4(v37);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  sub_21699E4F4(v33);
  if (SHIBYTE(v25) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v27) < 0)
  {
    sub_216778F24(v21, v26[0], (unint64_t)v26[1]);
  }
  else
  {
    *(_OWORD *)uint64_t v21 = *(_OWORD *)v26;
    uint64_t v22 = v27;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions(&ArrayType, &v20);
  v32[0] = &unk_26C755310;
  v32[1] = sub_2169B00A4;
  v32[3] = v32;
  sub_2169C20E4((char *)&v34, (long long *)v21, (long long *)&v20, 1, (uint64_t)v32);
  p_dst = v26;
  unint64_t v18 = sub_2169AA770(v15, (const void **)v26, (uint64_t)&unk_2174BFD90, (long long **)&p_dst);
  uint64_t v19 = (void **)(v18 + 7);
  if (*((char *)v18 + 79) < 0) {
    operator delete(*v19);
  }
  *(_OWORD *)uint64_t v19 = v34;
  v18[9] = v35;
  HIBYTE(v35) = 0;
  LOBYTE(v34) = 0;
  *((_OWORD *)v18 + 5) = v36[0];
  *(_OWORD *)((char *)v18 + 89) = *(_OWORD *)((char *)v36 + 9);
  sub_2169C221C(v18 + 14, (uint64_t)v37);
  sub_21699E4F4(v37);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  sub_21699E4F4(v32);
  if (SHIBYTE(v22) < 0) {
    operator delete(v21[0]);
  }
  if (SHIBYTE(v27) < 0) {
    operator delete(v26[0]);
  }
  if (SHIBYTE(v29) < 0) {
    operator delete((void *)__dst);
  }
}

void sub_2169A2318(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v47 = *(void *)(v45 - 144);
  if ((v47 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a41 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2169A2428()
{
}

void sub_2169A2430(uint64_t ***a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this, char *a3)
{
  v37[4] = *MEMORY[0x263EF8340];
  ArrayType = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(this);
  if (a3)
  {
    sub_216779094(&__dst, a3);
    uint64_t v6 = (std::string *)sub_216779094(&v34, a3);
    std::string v7 = std::string::append(v6, "[]");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    uint64_t v27 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)uint64_t v26 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v35) < 0) {
      operator delete((void *)v34);
    }
  }
  else
  {
    AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)this, (atomic_uint **)&v34);
    if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0) {
      Emptyunint64_t String = (uint64_t *)((v34 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
    }
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_216778F24(&__dst, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      long long v11 = *(_OWORD *)EmptyString;
      uint64_t v29 = EmptyString[2];
      long long __dst = v11;
    }
    if ((v34 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&ArrayType, (atomic_uint **)&v34);
    if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0) {
      char v13 = (uint64_t *)((v34 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      char v13 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
    }
    if (*((char *)v13 + 23) < 0)
    {
      sub_216778F24(v26, (void *)*v13, v13[1]);
    }
    else
    {
      long long v14 = *(_OWORD *)v13;
      uint64_t v27 = v13[2];
      *(_OWORD *)uint64_t v26 = v14;
    }
    if ((v34 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  uint64_t v15 = *a1;
  if (SHIBYTE(v29) < 0)
  {
    sub_216778F24(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)std::string __p = __dst;
    uint64_t v25 = v29;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions((uint64_t **)this, &v23);
  v33[0] = &unk_26C755310;
  v33[1] = sub_2169B07E0;
  v33[3] = v33;
  sub_2169C20E4((char *)&v34, (long long *)__p, (long long *)&v23, 0, (uint64_t)v33);
  p_dst = (void **)&__dst;
  int v16 = sub_2169AA770(v15, (const void **)&__dst, (uint64_t)&unk_2174BFD90, (long long **)&p_dst);
  unint64_t v17 = (void **)(v16 + 7);
  if (*((char *)v16 + 79) < 0) {
    operator delete(*v17);
  }
  *(_OWORD *)unint64_t v17 = v34;
  v16[9] = v35;
  HIBYTE(v35) = 0;
  LOBYTE(v34) = 0;
  *((_OWORD *)v16 + 5) = v36[0];
  *(_OWORD *)((char *)v16 + 89) = *(_OWORD *)((char *)v36 + 9);
  sub_2169C221C(v16 + 14, (uint64_t)v37);
  sub_21699E4F4(v37);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  sub_21699E4F4(v33);
  if (SHIBYTE(v25) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v27) < 0)
  {
    sub_216778F24(v21, v26[0], (unint64_t)v26[1]);
  }
  else
  {
    *(_OWORD *)uint64_t v21 = *(_OWORD *)v26;
    uint64_t v22 = v27;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions(&ArrayType, &v20);
  v32[0] = &unk_26C755310;
  v32[1] = sub_2169B0974;
  v32[3] = v32;
  sub_2169C20E4((char *)&v34, (long long *)v21, (long long *)&v20, 1, (uint64_t)v32);
  p_dst = v26;
  unint64_t v18 = sub_2169AA770(v15, (const void **)v26, (uint64_t)&unk_2174BFD90, (long long **)&p_dst);
  uint64_t v19 = (void **)(v18 + 7);
  if (*((char *)v18 + 79) < 0) {
    operator delete(*v19);
  }
  *(_OWORD *)uint64_t v19 = v34;
  v18[9] = v35;
  HIBYTE(v35) = 0;
  LOBYTE(v34) = 0;
  *((_OWORD *)v18 + 5) = v36[0];
  *(_OWORD *)((char *)v18 + 89) = *(_OWORD *)((char *)v36 + 9);
  sub_2169C221C(v18 + 14, (uint64_t)v37);
  sub_21699E4F4(v37);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  sub_21699E4F4(v32);
  if (SHIBYTE(v22) < 0) {
    operator delete(v21[0]);
  }
  if (SHIBYTE(v27) < 0) {
    operator delete(v26[0]);
  }
  if (SHIBYTE(v29) < 0) {
    operator delete((void *)__dst);
  }
}

void sub_2169A283C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v47 = *(void *)(v45 - 144);
  if ((v47 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a41 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2169A294C()
{
}

void sub_2169A2954(uint64_t ***a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this, char *a3)
{
  v37[4] = *MEMORY[0x263EF8340];
  ArrayType = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(this);
  if (a3)
  {
    sub_216779094(&__dst, a3);
    uint64_t v6 = (std::string *)sub_216779094(&v34, a3);
    std::string v7 = std::string::append(v6, "[]");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    uint64_t v27 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)uint64_t v26 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v35) < 0) {
      operator delete((void *)v34);
    }
  }
  else
  {
    AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)this, (atomic_uint **)&v34);
    if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0) {
      Emptyunint64_t String = (uint64_t *)((v34 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
    }
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_216778F24(&__dst, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      long long v11 = *(_OWORD *)EmptyString;
      uint64_t v29 = EmptyString[2];
      long long __dst = v11;
    }
    if ((v34 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&ArrayType, (atomic_uint **)&v34);
    if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0) {
      char v13 = (uint64_t *)((v34 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      char v13 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
    }
    if (*((char *)v13 + 23) < 0)
    {
      sub_216778F24(v26, (void *)*v13, v13[1]);
    }
    else
    {
      long long v14 = *(_OWORD *)v13;
      uint64_t v27 = v13[2];
      *(_OWORD *)uint64_t v26 = v14;
    }
    if ((v34 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  uint64_t v15 = *a1;
  if (SHIBYTE(v29) < 0)
  {
    sub_216778F24(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)std::string __p = __dst;
    uint64_t v25 = v29;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions((uint64_t **)this, &v23);
  v33[0] = &unk_26C755310;
  v33[1] = sub_2169B14D8;
  v33[3] = v33;
  sub_2169C20E4((char *)&v34, (long long *)__p, (long long *)&v23, 0, (uint64_t)v33);
  p_dst = (void **)&__dst;
  int v16 = sub_2169AA770(v15, (const void **)&__dst, (uint64_t)&unk_2174BFD90, (long long **)&p_dst);
  unint64_t v17 = (void **)(v16 + 7);
  if (*((char *)v16 + 79) < 0) {
    operator delete(*v17);
  }
  *(_OWORD *)unint64_t v17 = v34;
  v16[9] = v35;
  HIBYTE(v35) = 0;
  LOBYTE(v34) = 0;
  *((_OWORD *)v16 + 5) = v36[0];
  *(_OWORD *)((char *)v16 + 89) = *(_OWORD *)((char *)v36 + 9);
  sub_2169C221C(v16 + 14, (uint64_t)v37);
  sub_21699E4F4(v37);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  sub_21699E4F4(v33);
  if (SHIBYTE(v25) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v27) < 0)
  {
    sub_216778F24(v21, v26[0], (unint64_t)v26[1]);
  }
  else
  {
    *(_OWORD *)uint64_t v21 = *(_OWORD *)v26;
    uint64_t v22 = v27;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions(&ArrayType, &v20);
  v32[0] = &unk_26C755310;
  v32[1] = sub_2169B15E4;
  v32[3] = v32;
  sub_2169C20E4((char *)&v34, (long long *)v21, (long long *)&v20, 1, (uint64_t)v32);
  p_dst = v26;
  unint64_t v18 = sub_2169AA770(v15, (const void **)v26, (uint64_t)&unk_2174BFD90, (long long **)&p_dst);
  uint64_t v19 = (void **)(v18 + 7);
  if (*((char *)v18 + 79) < 0) {
    operator delete(*v19);
  }
  *(_OWORD *)uint64_t v19 = v34;
  v18[9] = v35;
  HIBYTE(v35) = 0;
  LOBYTE(v34) = 0;
  *((_OWORD *)v18 + 5) = v36[0];
  *(_OWORD *)((char *)v18 + 89) = *(_OWORD *)((char *)v36 + 9);
  sub_2169C221C(v18 + 14, (uint64_t)v37);
  sub_21699E4F4(v37);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  sub_21699E4F4(v32);
  if (SHIBYTE(v22) < 0) {
    operator delete(v21[0]);
  }
  if (SHIBYTE(v27) < 0) {
    operator delete(v26[0]);
  }
  if (SHIBYTE(v29) < 0) {
    operator delete((void *)__dst);
  }
}

void sub_2169A2D60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v47 = *(void *)(v45 - 144);
  if ((v47 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a41 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2169A2E70()
{
}

void sub_2169A2E78(uint64_t ***a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this, char *a3)
{
  v37[4] = *MEMORY[0x263EF8340];
  ArrayType = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(this);
  if (a3)
  {
    sub_216779094(&__dst, a3);
    uint64_t v6 = (std::string *)sub_216779094(&v34, a3);
    std::string v7 = std::string::append(v6, "[]");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    uint64_t v27 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)uint64_t v26 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v35) < 0) {
      operator delete((void *)v34);
    }
  }
  else
  {
    AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)this, (atomic_uint **)&v34);
    if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0) {
      Emptyunint64_t String = (uint64_t *)((v34 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
    }
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_216778F24(&__dst, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      long long v11 = *(_OWORD *)EmptyString;
      uint64_t v29 = EmptyString[2];
      long long __dst = v11;
    }
    if ((v34 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&ArrayType, (atomic_uint **)&v34);
    if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0) {
      char v13 = (uint64_t *)((v34 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      char v13 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
    }
    if (*((char *)v13 + 23) < 0)
    {
      sub_216778F24(v26, (void *)*v13, v13[1]);
    }
    else
    {
      long long v14 = *(_OWORD *)v13;
      uint64_t v27 = v13[2];
      *(_OWORD *)uint64_t v26 = v14;
    }
    if ((v34 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  uint64_t v15 = *a1;
  if (SHIBYTE(v29) < 0)
  {
    sub_216778F24(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)std::string __p = __dst;
    uint64_t v25 = v29;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions((uint64_t **)this, &v23);
  v33[0] = &unk_26C755310;
  v33[1] = sub_2169B247C;
  v33[3] = v33;
  sub_2169C20E4((char *)&v34, (long long *)__p, (long long *)&v23, 0, (uint64_t)v33);
  p_dst = (void **)&__dst;
  int v16 = sub_2169AA770(v15, (const void **)&__dst, (uint64_t)&unk_2174BFD90, (long long **)&p_dst);
  unint64_t v17 = (void **)(v16 + 7);
  if (*((char *)v16 + 79) < 0) {
    operator delete(*v17);
  }
  *(_OWORD *)unint64_t v17 = v34;
  v16[9] = v35;
  HIBYTE(v35) = 0;
  LOBYTE(v34) = 0;
  *((_OWORD *)v16 + 5) = v36[0];
  *(_OWORD *)((char *)v16 + 89) = *(_OWORD *)((char *)v36 + 9);
  sub_2169C221C(v16 + 14, (uint64_t)v37);
  sub_21699E4F4(v37);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  sub_21699E4F4(v33);
  if (SHIBYTE(v25) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v27) < 0)
  {
    sub_216778F24(v21, v26[0], (unint64_t)v26[1]);
  }
  else
  {
    *(_OWORD *)uint64_t v21 = *(_OWORD *)v26;
    uint64_t v22 = v27;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions(&ArrayType, &v20);
  v32[0] = &unk_26C755310;
  v32[1] = sub_2169B25A8;
  v32[3] = v32;
  sub_2169C20E4((char *)&v34, (long long *)v21, (long long *)&v20, 1, (uint64_t)v32);
  p_dst = v26;
  unint64_t v18 = sub_2169AA770(v15, (const void **)v26, (uint64_t)&unk_2174BFD90, (long long **)&p_dst);
  uint64_t v19 = (void **)(v18 + 7);
  if (*((char *)v18 + 79) < 0) {
    operator delete(*v19);
  }
  *(_OWORD *)uint64_t v19 = v34;
  v18[9] = v35;
  HIBYTE(v35) = 0;
  LOBYTE(v34) = 0;
  *((_OWORD *)v18 + 5) = v36[0];
  *(_OWORD *)((char *)v18 + 89) = *(_OWORD *)((char *)v36 + 9);
  sub_2169C221C(v18 + 14, (uint64_t)v37);
  sub_21699E4F4(v37);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  sub_21699E4F4(v32);
  if (SHIBYTE(v22) < 0) {
    operator delete(v21[0]);
  }
  if (SHIBYTE(v27) < 0) {
    operator delete(v26[0]);
  }
  if (SHIBYTE(v29) < 0) {
    operator delete((void *)__dst);
  }
}

void sub_2169A3284(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v47 = *(void *)(v45 - 144);
  if ((v47 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a41 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2169A3394()
{
}

void sub_2169A339C(uint64_t ***a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this, char *a3)
{
  v37[4] = *MEMORY[0x263EF8340];
  ArrayType = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(this);
  if (a3)
  {
    sub_216779094(&__dst, a3);
    uint64_t v6 = (std::string *)sub_216779094(&v34, a3);
    std::string v7 = std::string::append(v6, "[]");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    uint64_t v27 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)uint64_t v26 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v35) < 0) {
      operator delete((void *)v34);
    }
  }
  else
  {
    AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)this, (atomic_uint **)&v34);
    if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0) {
      Emptyunint64_t String = (uint64_t *)((v34 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
    }
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_216778F24(&__dst, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      long long v11 = *(_OWORD *)EmptyString;
      uint64_t v29 = EmptyString[2];
      long long __dst = v11;
    }
    if ((v34 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&ArrayType, (atomic_uint **)&v34);
    if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0) {
      char v13 = (uint64_t *)((v34 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      char v13 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
    }
    if (*((char *)v13 + 23) < 0)
    {
      sub_216778F24(v26, (void *)*v13, v13[1]);
    }
    else
    {
      long long v14 = *(_OWORD *)v13;
      uint64_t v27 = v13[2];
      *(_OWORD *)uint64_t v26 = v14;
    }
    if ((v34 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  uint64_t v15 = *a1;
  if (SHIBYTE(v29) < 0)
  {
    sub_216778F24(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)std::string __p = __dst;
    uint64_t v25 = v29;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions((uint64_t **)this, &v23);
  v33[0] = &unk_26C755310;
  v33[1] = sub_2169B32EC;
  v33[3] = v33;
  sub_2169C20E4((char *)&v34, (long long *)__p, (long long *)&v23, 0, (uint64_t)v33);
  p_dst = (void **)&__dst;
  int v16 = sub_2169AA770(v15, (const void **)&__dst, (uint64_t)&unk_2174BFD90, (long long **)&p_dst);
  unint64_t v17 = (void **)(v16 + 7);
  if (*((char *)v16 + 79) < 0) {
    operator delete(*v17);
  }
  *(_OWORD *)unint64_t v17 = v34;
  v16[9] = v35;
  HIBYTE(v35) = 0;
  LOBYTE(v34) = 0;
  *((_OWORD *)v16 + 5) = v36[0];
  *(_OWORD *)((char *)v16 + 89) = *(_OWORD *)((char *)v36 + 9);
  sub_2169C221C(v16 + 14, (uint64_t)v37);
  sub_21699E4F4(v37);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  sub_21699E4F4(v33);
  if (SHIBYTE(v25) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v27) < 0)
  {
    sub_216778F24(v21, v26[0], (unint64_t)v26[1]);
  }
  else
  {
    *(_OWORD *)uint64_t v21 = *(_OWORD *)v26;
    uint64_t v22 = v27;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions(&ArrayType, &v20);
  v32[0] = &unk_26C755310;
  v32[1] = sub_2169B340C;
  v32[3] = v32;
  sub_2169C20E4((char *)&v34, (long long *)v21, (long long *)&v20, 1, (uint64_t)v32);
  p_dst = v26;
  unint64_t v18 = sub_2169AA770(v15, (const void **)v26, (uint64_t)&unk_2174BFD90, (long long **)&p_dst);
  uint64_t v19 = (void **)(v18 + 7);
  if (*((char *)v18 + 79) < 0) {
    operator delete(*v19);
  }
  *(_OWORD *)uint64_t v19 = v34;
  v18[9] = v35;
  HIBYTE(v35) = 0;
  LOBYTE(v34) = 0;
  *((_OWORD *)v18 + 5) = v36[0];
  *(_OWORD *)((char *)v18 + 89) = *(_OWORD *)((char *)v36 + 9);
  sub_2169C221C(v18 + 14, (uint64_t)v37);
  sub_21699E4F4(v37);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  sub_21699E4F4(v32);
  if (SHIBYTE(v22) < 0) {
    operator delete(v21[0]);
  }
  if (SHIBYTE(v27) < 0) {
    operator delete(v26[0]);
  }
  if (SHIBYTE(v29) < 0) {
    operator delete((void *)__dst);
  }
}

void sub_2169A37A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v47 = *(void *)(v45 - 144);
  if ((v47 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a41 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2169A38B8()
{
}

void sub_2169A38C0(uint64_t ***a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this, char *a3)
{
  v37[4] = *MEMORY[0x263EF8340];
  ArrayType = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(this);
  if (a3)
  {
    sub_216779094(&__dst, a3);
    uint64_t v6 = (std::string *)sub_216779094(&v34, a3);
    std::string v7 = std::string::append(v6, "[]");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    uint64_t v27 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)uint64_t v26 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v35) < 0) {
      operator delete((void *)v34);
    }
  }
  else
  {
    AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)this, (atomic_uint **)&v34);
    if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0) {
      Emptyunint64_t String = (uint64_t *)((v34 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
    }
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_216778F24(&__dst, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      long long v11 = *(_OWORD *)EmptyString;
      uint64_t v29 = EmptyString[2];
      long long __dst = v11;
    }
    if ((v34 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&ArrayType, (atomic_uint **)&v34);
    if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0) {
      char v13 = (uint64_t *)((v34 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      char v13 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
    }
    if (*((char *)v13 + 23) < 0)
    {
      sub_216778F24(v26, (void *)*v13, v13[1]);
    }
    else
    {
      long long v14 = *(_OWORD *)v13;
      uint64_t v27 = v13[2];
      *(_OWORD *)uint64_t v26 = v14;
    }
    if ((v34 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  uint64_t v15 = *a1;
  if (SHIBYTE(v29) < 0)
  {
    sub_216778F24(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)std::string __p = __dst;
    uint64_t v25 = v29;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions((uint64_t **)this, &v23);
  v33[0] = &unk_26C755310;
  v33[1] = sub_2169B4A8C;
  v33[3] = v33;
  sub_2169C20E4((char *)&v34, (long long *)__p, (long long *)&v23, 0, (uint64_t)v33);
  p_dst = (void **)&__dst;
  int v16 = sub_2169AA770(v15, (const void **)&__dst, (uint64_t)&unk_2174BFD90, (long long **)&p_dst);
  unint64_t v17 = (void **)(v16 + 7);
  if (*((char *)v16 + 79) < 0) {
    operator delete(*v17);
  }
  *(_OWORD *)unint64_t v17 = v34;
  v16[9] = v35;
  HIBYTE(v35) = 0;
  LOBYTE(v34) = 0;
  *((_OWORD *)v16 + 5) = v36[0];
  *(_OWORD *)((char *)v16 + 89) = *(_OWORD *)((char *)v36 + 9);
  sub_2169C221C(v16 + 14, (uint64_t)v37);
  sub_21699E4F4(v37);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  sub_21699E4F4(v33);
  if (SHIBYTE(v25) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v27) < 0)
  {
    sub_216778F24(v21, v26[0], (unint64_t)v26[1]);
  }
  else
  {
    *(_OWORD *)uint64_t v21 = *(_OWORD *)v26;
    uint64_t v22 = v27;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions(&ArrayType, &v20);
  v32[0] = &unk_26C755310;
  v32[1] = sub_2169B4BB8;
  v32[3] = v32;
  sub_2169C20E4((char *)&v34, (long long *)v21, (long long *)&v20, 1, (uint64_t)v32);
  p_dst = v26;
  unint64_t v18 = sub_2169AA770(v15, (const void **)v26, (uint64_t)&unk_2174BFD90, (long long **)&p_dst);
  uint64_t v19 = (void **)(v18 + 7);
  if (*((char *)v18 + 79) < 0) {
    operator delete(*v19);
  }
  *(_OWORD *)uint64_t v19 = v34;
  v18[9] = v35;
  HIBYTE(v35) = 0;
  LOBYTE(v34) = 0;
  *((_OWORD *)v18 + 5) = v36[0];
  *(_OWORD *)((char *)v18 + 89) = *(_OWORD *)((char *)v36 + 9);
  sub_2169C221C(v18 + 14, (uint64_t)v37);
  sub_21699E4F4(v37);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  sub_21699E4F4(v32);
  if (SHIBYTE(v22) < 0) {
    operator delete(v21[0]);
  }
  if (SHIBYTE(v27) < 0) {
    operator delete(v26[0]);
  }
  if (SHIBYTE(v29) < 0) {
    operator delete((void *)__dst);
  }
}

void sub_2169A3CCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v47 = *(void *)(v45 - 144);
  if ((v47 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a41 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2169A3DDC()
{
}

void sub_2169A3DE4(uint64_t ***a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this, char *a3)
{
  v37[4] = *MEMORY[0x263EF8340];
  ArrayType = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(this);
  if (a3)
  {
    sub_216779094(&__dst, a3);
    uint64_t v6 = (std::string *)sub_216779094(&v34, a3);
    std::string v7 = std::string::append(v6, "[]");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    uint64_t v27 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)uint64_t v26 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v35) < 0) {
      operator delete((void *)v34);
    }
  }
  else
  {
    AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)this, (atomic_uint **)&v34);
    if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0) {
      Emptyunint64_t String = (uint64_t *)((v34 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
    }
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_216778F24(&__dst, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      long long v11 = *(_OWORD *)EmptyString;
      uint64_t v29 = EmptyString[2];
      long long __dst = v11;
    }
    if ((v34 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&ArrayType, (atomic_uint **)&v34);
    if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0) {
      char v13 = (uint64_t *)((v34 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      char v13 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
    }
    if (*((char *)v13 + 23) < 0)
    {
      sub_216778F24(v26, (void *)*v13, v13[1]);
    }
    else
    {
      long long v14 = *(_OWORD *)v13;
      uint64_t v27 = v13[2];
      *(_OWORD *)uint64_t v26 = v14;
    }
    if ((v34 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  uint64_t v15 = *a1;
  if (SHIBYTE(v29) < 0)
  {
    sub_216778F24(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)std::string __p = __dst;
    uint64_t v25 = v29;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions((uint64_t **)this, &v23);
  v33[0] = &unk_26C755310;
  v33[1] = sub_2169B53DC;
  v33[3] = v33;
  sub_2169C20E4((char *)&v34, (long long *)__p, (long long *)&v23, 0, (uint64_t)v33);
  p_dst = (void **)&__dst;
  int v16 = sub_2169AA770(v15, (const void **)&__dst, (uint64_t)&unk_2174BFD90, (long long **)&p_dst);
  unint64_t v17 = (void **)(v16 + 7);
  if (*((char *)v16 + 79) < 0) {
    operator delete(*v17);
  }
  *(_OWORD *)unint64_t v17 = v34;
  v16[9] = v35;
  HIBYTE(v35) = 0;
  LOBYTE(v34) = 0;
  *((_OWORD *)v16 + 5) = v36[0];
  *(_OWORD *)((char *)v16 + 89) = *(_OWORD *)((char *)v36 + 9);
  sub_2169C221C(v16 + 14, (uint64_t)v37);
  sub_21699E4F4(v37);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  sub_21699E4F4(v33);
  if (SHIBYTE(v25) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v27) < 0)
  {
    sub_216778F24(v21, v26[0], (unint64_t)v26[1]);
  }
  else
  {
    *(_OWORD *)uint64_t v21 = *(_OWORD *)v26;
    uint64_t v22 = v27;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions(&ArrayType, &v20);
  v32[0] = &unk_26C755310;
  v32[1] = sub_2169B551C;
  v32[3] = v32;
  sub_2169C20E4((char *)&v34, (long long *)v21, (long long *)&v20, 1, (uint64_t)v32);
  p_dst = v26;
  unint64_t v18 = sub_2169AA770(v15, (const void **)v26, (uint64_t)&unk_2174BFD90, (long long **)&p_dst);
  uint64_t v19 = (void **)(v18 + 7);
  if (*((char *)v18 + 79) < 0) {
    operator delete(*v19);
  }
  *(_OWORD *)uint64_t v19 = v34;
  v18[9] = v35;
  HIBYTE(v35) = 0;
  LOBYTE(v34) = 0;
  *((_OWORD *)v18 + 5) = v36[0];
  *(_OWORD *)((char *)v18 + 89) = *(_OWORD *)((char *)v36 + 9);
  sub_2169C221C(v18 + 14, (uint64_t)v37);
  sub_21699E4F4(v37);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  sub_21699E4F4(v32);
  if (SHIBYTE(v22) < 0) {
    operator delete(v21[0]);
  }
  if (SHIBYTE(v27) < 0) {
    operator delete(v26[0]);
  }
  if (SHIBYTE(v29) < 0) {
    operator delete((void *)__dst);
  }
}

void sub_2169A41F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v47 = *(void *)(v45 - 144);
  if ((v47 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a41 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2169A4300()
{
}

void sub_2169A4308(uint64_t ***a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this, char *a3)
{
  v37[4] = *MEMORY[0x263EF8340];
  ArrayType = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(this);
  if (a3)
  {
    sub_216779094(&__dst, a3);
    uint64_t v6 = (std::string *)sub_216779094(&v34, a3);
    std::string v7 = std::string::append(v6, "[]");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    uint64_t v27 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)uint64_t v26 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v35) < 0) {
      operator delete((void *)v34);
    }
  }
  else
  {
    AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)this, (atomic_uint **)&v34);
    if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0) {
      Emptyunint64_t String = (uint64_t *)((v34 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
    }
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_216778F24(&__dst, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      long long v11 = *(_OWORD *)EmptyString;
      uint64_t v29 = EmptyString[2];
      long long __dst = v11;
    }
    if ((v34 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&ArrayType, (atomic_uint **)&v34);
    if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0) {
      char v13 = (uint64_t *)((v34 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      char v13 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
    }
    if (*((char *)v13 + 23) < 0)
    {
      sub_216778F24(v26, (void *)*v13, v13[1]);
    }
    else
    {
      long long v14 = *(_OWORD *)v13;
      uint64_t v27 = v13[2];
      *(_OWORD *)uint64_t v26 = v14;
    }
    if ((v34 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  uint64_t v15 = *a1;
  if (SHIBYTE(v29) < 0)
  {
    sub_216778F24(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)std::string __p = __dst;
    uint64_t v25 = v29;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions((uint64_t **)this, &v23);
  v33[0] = &unk_26C755310;
  v33[1] = sub_2169B8F2C;
  v33[3] = v33;
  sub_2169C20E4((char *)&v34, (long long *)__p, (long long *)&v23, 0, (uint64_t)v33);
  p_dst = (void **)&__dst;
  int v16 = sub_2169AA770(v15, (const void **)&__dst, (uint64_t)&unk_2174BFD90, (long long **)&p_dst);
  unint64_t v17 = (void **)(v16 + 7);
  if (*((char *)v16 + 79) < 0) {
    operator delete(*v17);
  }
  *(_OWORD *)unint64_t v17 = v34;
  v16[9] = v35;
  HIBYTE(v35) = 0;
  LOBYTE(v34) = 0;
  *((_OWORD *)v16 + 5) = v36[0];
  *(_OWORD *)((char *)v16 + 89) = *(_OWORD *)((char *)v36 + 9);
  sub_2169C221C(v16 + 14, (uint64_t)v37);
  sub_21699E4F4(v37);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  sub_21699E4F4(v33);
  if (SHIBYTE(v25) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v27) < 0)
  {
    sub_216778F24(v21, v26[0], (unint64_t)v26[1]);
  }
  else
  {
    *(_OWORD *)uint64_t v21 = *(_OWORD *)v26;
    uint64_t v22 = v27;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions(&ArrayType, &v20);
  v32[0] = &unk_26C755310;
  v32[1] = sub_2169B9000;
  v32[3] = v32;
  sub_2169C20E4((char *)&v34, (long long *)v21, (long long *)&v20, 1, (uint64_t)v32);
  p_dst = v26;
  unint64_t v18 = sub_2169AA770(v15, (const void **)v26, (uint64_t)&unk_2174BFD90, (long long **)&p_dst);
  uint64_t v19 = (void **)(v18 + 7);
  if (*((char *)v18 + 79) < 0) {
    operator delete(*v19);
  }
  *(_OWORD *)uint64_t v19 = v34;
  v18[9] = v35;
  HIBYTE(v35) = 0;
  LOBYTE(v34) = 0;
  *((_OWORD *)v18 + 5) = v36[0];
  *(_OWORD *)((char *)v18 + 89) = *(_OWORD *)((char *)v36 + 9);
  sub_2169C221C(v18 + 14, (uint64_t)v37);
  sub_21699E4F4(v37);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  sub_21699E4F4(v32);
  if (SHIBYTE(v22) < 0) {
    operator delete(v21[0]);
  }
  if (SHIBYTE(v27) < 0) {
    operator delete(v26[0]);
  }
  if (SHIBYTE(v29) < 0) {
    operator delete((void *)__dst);
  }
}

void sub_2169A4714(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v47 = *(void *)(v45 - 144);
  if ((v47 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a41 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2169A4824()
{
}

void sub_2169A482C(uint64_t ***a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this, char *a3)
{
  v37[4] = *MEMORY[0x263EF8340];
  ArrayType = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(this);
  if (a3)
  {
    sub_216779094(&__dst, a3);
    uint64_t v6 = (std::string *)sub_216779094(&v34, a3);
    std::string v7 = std::string::append(v6, "[]");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    uint64_t v27 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)uint64_t v26 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v35) < 0) {
      operator delete((void *)v34);
    }
  }
  else
  {
    AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)this, (atomic_uint **)&v34);
    if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0) {
      Emptyunint64_t String = (uint64_t *)((v34 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
    }
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_216778F24(&__dst, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      long long v11 = *(_OWORD *)EmptyString;
      uint64_t v29 = EmptyString[2];
      long long __dst = v11;
    }
    if ((v34 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&ArrayType, (atomic_uint **)&v34);
    if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0) {
      char v13 = (uint64_t *)((v34 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      char v13 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
    }
    if (*((char *)v13 + 23) < 0)
    {
      sub_216778F24(v26, (void *)*v13, v13[1]);
    }
    else
    {
      long long v14 = *(_OWORD *)v13;
      uint64_t v27 = v13[2];
      *(_OWORD *)uint64_t v26 = v14;
    }
    if ((v34 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  uint64_t v15 = *a1;
  if (SHIBYTE(v29) < 0)
  {
    sub_216778F24(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)std::string __p = __dst;
    uint64_t v25 = v29;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions((uint64_t **)this, &v23);
  v33[0] = &unk_26C755310;
  v33[1] = sub_2169B9CEC;
  v33[3] = v33;
  sub_2169C20E4((char *)&v34, (long long *)__p, (long long *)&v23, 0, (uint64_t)v33);
  p_dst = (void **)&__dst;
  int v16 = sub_2169AA770(v15, (const void **)&__dst, (uint64_t)&unk_2174BFD90, (long long **)&p_dst);
  unint64_t v17 = (void **)(v16 + 7);
  if (*((char *)v16 + 79) < 0) {
    operator delete(*v17);
  }
  *(_OWORD *)unint64_t v17 = v34;
  v16[9] = v35;
  HIBYTE(v35) = 0;
  LOBYTE(v34) = 0;
  *((_OWORD *)v16 + 5) = v36[0];
  *(_OWORD *)((char *)v16 + 89) = *(_OWORD *)((char *)v36 + 9);
  sub_2169C221C(v16 + 14, (uint64_t)v37);
  sub_21699E4F4(v37);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  sub_21699E4F4(v33);
  if (SHIBYTE(v25) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v27) < 0)
  {
    sub_216778F24(v21, v26[0], (unint64_t)v26[1]);
  }
  else
  {
    *(_OWORD *)uint64_t v21 = *(_OWORD *)v26;
    uint64_t v22 = v27;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions(&ArrayType, &v20);
  v32[0] = &unk_26C755310;
  v32[1] = sub_2169B9DC4;
  v32[3] = v32;
  sub_2169C20E4((char *)&v34, (long long *)v21, (long long *)&v20, 1, (uint64_t)v32);
  p_dst = v26;
  unint64_t v18 = sub_2169AA770(v15, (const void **)v26, (uint64_t)&unk_2174BFD90, (long long **)&p_dst);
  uint64_t v19 = (void **)(v18 + 7);
  if (*((char *)v18 + 79) < 0) {
    operator delete(*v19);
  }
  *(_OWORD *)uint64_t v19 = v34;
  v18[9] = v35;
  HIBYTE(v35) = 0;
  LOBYTE(v34) = 0;
  *((_OWORD *)v18 + 5) = v36[0];
  *(_OWORD *)((char *)v18 + 89) = *(_OWORD *)((char *)v36 + 9);
  sub_2169C221C(v18 + 14, (uint64_t)v37);
  sub_21699E4F4(v37);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  sub_21699E4F4(v32);
  if (SHIBYTE(v22) < 0) {
    operator delete(v21[0]);
  }
  if (SHIBYTE(v27) < 0) {
    operator delete(v26[0]);
  }
  if (SHIBYTE(v29) < 0) {
    operator delete((void *)__dst);
  }
}

void sub_2169A4C38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v47 = *(void *)(v45 - 144);
  if ((v47 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a41 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2169A4D48()
{
}

void sub_2169A4D50(uint64_t ***a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this, char *a3)
{
  v37[4] = *MEMORY[0x263EF8340];
  ArrayType = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(this);
  if (a3)
  {
    sub_216779094(&__dst, a3);
    uint64_t v6 = (std::string *)sub_216779094(&v34, a3);
    std::string v7 = std::string::append(v6, "[]");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    uint64_t v27 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)uint64_t v26 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v35) < 0) {
      operator delete((void *)v34);
    }
  }
  else
  {
    AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)this, (atomic_uint **)&v34);
    if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0) {
      Emptyunint64_t String = (uint64_t *)((v34 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
    }
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_216778F24(&__dst, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      long long v11 = *(_OWORD *)EmptyString;
      uint64_t v29 = EmptyString[2];
      long long __dst = v11;
    }
    if ((v34 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&ArrayType, (atomic_uint **)&v34);
    if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0) {
      char v13 = (uint64_t *)((v34 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      char v13 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
    }
    if (*((char *)v13 + 23) < 0)
    {
      sub_216778F24(v26, (void *)*v13, v13[1]);
    }
    else
    {
      long long v14 = *(_OWORD *)v13;
      uint64_t v27 = v13[2];
      *(_OWORD *)uint64_t v26 = v14;
    }
    if ((v34 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  uint64_t v15 = *a1;
  if (SHIBYTE(v29) < 0)
  {
    sub_216778F24(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)std::string __p = __dst;
    uint64_t v25 = v29;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions((uint64_t **)this, &v23);
  v33[0] = &unk_26C755310;
  v33[1] = sub_2169BA288;
  v33[3] = v33;
  sub_2169C20E4((char *)&v34, (long long *)__p, (long long *)&v23, 0, (uint64_t)v33);
  p_dst = (void **)&__dst;
  int v16 = sub_2169AA770(v15, (const void **)&__dst, (uint64_t)&unk_2174BFD90, (long long **)&p_dst);
  unint64_t v17 = (void **)(v16 + 7);
  if (*((char *)v16 + 79) < 0) {
    operator delete(*v17);
  }
  *(_OWORD *)unint64_t v17 = v34;
  v16[9] = v35;
  HIBYTE(v35) = 0;
  LOBYTE(v34) = 0;
  *((_OWORD *)v16 + 5) = v36[0];
  *(_OWORD *)((char *)v16 + 89) = *(_OWORD *)((char *)v36 + 9);
  sub_2169C221C(v16 + 14, (uint64_t)v37);
  sub_21699E4F4(v37);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  sub_21699E4F4(v33);
  if (SHIBYTE(v25) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v27) < 0)
  {
    sub_216778F24(v21, v26[0], (unint64_t)v26[1]);
  }
  else
  {
    *(_OWORD *)uint64_t v21 = *(_OWORD *)v26;
    uint64_t v22 = v27;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions(&ArrayType, &v20);
  v32[0] = &unk_26C755310;
  v32[1] = sub_2169BA35C;
  v32[3] = v32;
  sub_2169C20E4((char *)&v34, (long long *)v21, (long long *)&v20, 1, (uint64_t)v32);
  p_dst = v26;
  unint64_t v18 = sub_2169AA770(v15, (const void **)v26, (uint64_t)&unk_2174BFD90, (long long **)&p_dst);
  uint64_t v19 = (void **)(v18 + 7);
  if (*((char *)v18 + 79) < 0) {
    operator delete(*v19);
  }
  *(_OWORD *)uint64_t v19 = v34;
  v18[9] = v35;
  HIBYTE(v35) = 0;
  LOBYTE(v34) = 0;
  *((_OWORD *)v18 + 5) = v36[0];
  *(_OWORD *)((char *)v18 + 89) = *(_OWORD *)((char *)v36 + 9);
  sub_2169C221C(v18 + 14, (uint64_t)v37);
  sub_21699E4F4(v37);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  sub_21699E4F4(v32);
  if (SHIBYTE(v22) < 0) {
    operator delete(v21[0]);
  }
  if (SHIBYTE(v27) < 0) {
    operator delete(v26[0]);
  }
  if (SHIBYTE(v29) < 0) {
    operator delete((void *)__dst);
  }
}

void sub_2169A515C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v47 = *(void *)(v45 - 144);
  if ((v47 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a41 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2169A526C()
{
}

void sub_2169A5274(uint64_t ***a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this, char *a3)
{
  v37[4] = *MEMORY[0x263EF8340];
  ArrayType = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(this);
  if (a3)
  {
    sub_216779094(&__dst, a3);
    uint64_t v6 = (std::string *)sub_216779094(&v34, a3);
    std::string v7 = std::string::append(v6, "[]");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    uint64_t v27 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)uint64_t v26 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v35) < 0) {
      operator delete((void *)v34);
    }
  }
  else
  {
    AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)this, (atomic_uint **)&v34);
    if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0) {
      Emptyunint64_t String = (uint64_t *)((v34 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
    }
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_216778F24(&__dst, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      long long v11 = *(_OWORD *)EmptyString;
      uint64_t v29 = EmptyString[2];
      long long __dst = v11;
    }
    if ((v34 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&ArrayType, (atomic_uint **)&v34);
    if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0) {
      char v13 = (uint64_t *)((v34 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      char v13 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
    }
    if (*((char *)v13 + 23) < 0)
    {
      sub_216778F24(v26, (void *)*v13, v13[1]);
    }
    else
    {
      long long v14 = *(_OWORD *)v13;
      uint64_t v27 = v13[2];
      *(_OWORD *)uint64_t v26 = v14;
    }
    if ((v34 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  uint64_t v15 = *a1;
  if (SHIBYTE(v29) < 0)
  {
    sub_216778F24(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)std::string __p = __dst;
    uint64_t v25 = v29;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions((uint64_t **)this, &v23);
  v33[0] = &unk_26C755310;
  v33[1] = sub_2169BA794;
  v33[3] = v33;
  sub_2169C20E4((char *)&v34, (long long *)__p, (long long *)&v23, 0, (uint64_t)v33);
  p_dst = (void **)&__dst;
  int v16 = sub_2169AA770(v15, (const void **)&__dst, (uint64_t)&unk_2174BFD90, (long long **)&p_dst);
  unint64_t v17 = (void **)(v16 + 7);
  if (*((char *)v16 + 79) < 0) {
    operator delete(*v17);
  }
  *(_OWORD *)unint64_t v17 = v34;
  v16[9] = v35;
  HIBYTE(v35) = 0;
  LOBYTE(v34) = 0;
  *((_OWORD *)v16 + 5) = v36[0];
  *(_OWORD *)((char *)v16 + 89) = *(_OWORD *)((char *)v36 + 9);
  sub_2169C221C(v16 + 14, (uint64_t)v37);
  sub_21699E4F4(v37);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  sub_21699E4F4(v33);
  if (SHIBYTE(v25) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v27) < 0)
  {
    sub_216778F24(v21, v26[0], (unint64_t)v26[1]);
  }
  else
  {
    *(_OWORD *)uint64_t v21 = *(_OWORD *)v26;
    uint64_t v22 = v27;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions(&ArrayType, &v20);
  v32[0] = &unk_26C755310;
  v32[1] = sub_2169BA888;
  v32[3] = v32;
  sub_2169C20E4((char *)&v34, (long long *)v21, (long long *)&v20, 1, (uint64_t)v32);
  p_dst = v26;
  unint64_t v18 = sub_2169AA770(v15, (const void **)v26, (uint64_t)&unk_2174BFD90, (long long **)&p_dst);
  uint64_t v19 = (void **)(v18 + 7);
  if (*((char *)v18 + 79) < 0) {
    operator delete(*v19);
  }
  *(_OWORD *)uint64_t v19 = v34;
  v18[9] = v35;
  HIBYTE(v35) = 0;
  LOBYTE(v34) = 0;
  *((_OWORD *)v18 + 5) = v36[0];
  *(_OWORD *)((char *)v18 + 89) = *(_OWORD *)((char *)v36 + 9);
  sub_2169C221C(v18 + 14, (uint64_t)v37);
  sub_21699E4F4(v37);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  sub_21699E4F4(v32);
  if (SHIBYTE(v22) < 0) {
    operator delete(v21[0]);
  }
  if (SHIBYTE(v27) < 0) {
    operator delete(v26[0]);
  }
  if (SHIBYTE(v29) < 0) {
    operator delete((void *)__dst);
  }
}

void sub_2169A5680(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v47 = *(void *)(v45 - 144);
  if ((v47 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a41 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2169A5790()
{
}

void sub_2169A5798(uint64_t ***a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this, char *a3)
{
  v37[4] = *MEMORY[0x263EF8340];
  ArrayType = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(this);
  if (a3)
  {
    sub_216779094(&__dst, a3);
    uint64_t v6 = (std::string *)sub_216779094(&v34, a3);
    std::string v7 = std::string::append(v6, "[]");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    uint64_t v27 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)uint64_t v26 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v35) < 0) {
      operator delete((void *)v34);
    }
  }
  else
  {
    AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)this, (atomic_uint **)&v34);
    if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0) {
      Emptyunint64_t String = (uint64_t *)((v34 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
    }
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_216778F24(&__dst, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      long long v11 = *(_OWORD *)EmptyString;
      uint64_t v29 = EmptyString[2];
      long long __dst = v11;
    }
    if ((v34 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&ArrayType, (atomic_uint **)&v34);
    if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0) {
      char v13 = (uint64_t *)((v34 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      char v13 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
    }
    if (*((char *)v13 + 23) < 0)
    {
      sub_216778F24(v26, (void *)*v13, v13[1]);
    }
    else
    {
      long long v14 = *(_OWORD *)v13;
      uint64_t v27 = v13[2];
      *(_OWORD *)uint64_t v26 = v14;
    }
    if ((v34 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  uint64_t v15 = *a1;
  if (SHIBYTE(v29) < 0)
  {
    sub_216778F24(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)std::string __p = __dst;
    uint64_t v25 = v29;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions((uint64_t **)this, &v23);
  v33[0] = &unk_26C755310;
  v33[1] = sub_2169BACC0;
  v33[3] = v33;
  sub_2169C20E4((char *)&v34, (long long *)__p, (long long *)&v23, 0, (uint64_t)v33);
  p_dst = (void **)&__dst;
  int v16 = sub_2169AA770(v15, (const void **)&__dst, (uint64_t)&unk_2174BFD90, (long long **)&p_dst);
  unint64_t v17 = (void **)(v16 + 7);
  if (*((char *)v16 + 79) < 0) {
    operator delete(*v17);
  }
  *(_OWORD *)unint64_t v17 = v34;
  v16[9] = v35;
  HIBYTE(v35) = 0;
  LOBYTE(v34) = 0;
  *((_OWORD *)v16 + 5) = v36[0];
  *(_OWORD *)((char *)v16 + 89) = *(_OWORD *)((char *)v36 + 9);
  sub_2169C221C(v16 + 14, (uint64_t)v37);
  sub_21699E4F4(v37);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  sub_21699E4F4(v33);
  if (SHIBYTE(v25) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v27) < 0)
  {
    sub_216778F24(v21, v26[0], (unint64_t)v26[1]);
  }
  else
  {
    *(_OWORD *)uint64_t v21 = *(_OWORD *)v26;
    uint64_t v22 = v27;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions(&ArrayType, &v20);
  v32[0] = &unk_26C755310;
  v32[1] = sub_2169BADBC;
  v32[3] = v32;
  sub_2169C20E4((char *)&v34, (long long *)v21, (long long *)&v20, 1, (uint64_t)v32);
  p_dst = v26;
  unint64_t v18 = sub_2169AA770(v15, (const void **)v26, (uint64_t)&unk_2174BFD90, (long long **)&p_dst);
  uint64_t v19 = (void **)(v18 + 7);
  if (*((char *)v18 + 79) < 0) {
    operator delete(*v19);
  }
  *(_OWORD *)uint64_t v19 = v34;
  v18[9] = v35;
  HIBYTE(v35) = 0;
  LOBYTE(v34) = 0;
  *((_OWORD *)v18 + 5) = v36[0];
  *(_OWORD *)((char *)v18 + 89) = *(_OWORD *)((char *)v36 + 9);
  sub_2169C221C(v18 + 14, (uint64_t)v37);
  sub_21699E4F4(v37);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  sub_21699E4F4(v32);
  if (SHIBYTE(v22) < 0) {
    operator delete(v21[0]);
  }
  if (SHIBYTE(v27) < 0) {
    operator delete(v26[0]);
  }
  if (SHIBYTE(v29) < 0) {
    operator delete((void *)__dst);
  }
}

void sub_2169A5BA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v47 = *(void *)(v45 - 144);
  if ((v47 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a41 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2169A5CB4()
{
}

void sub_2169A5CBC(uint64_t ***a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this, char *a3)
{
  v37[4] = *MEMORY[0x263EF8340];
  ArrayType = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(this);
  if (a3)
  {
    sub_216779094(&__dst, a3);
    uint64_t v6 = (std::string *)sub_216779094(&v34, a3);
    std::string v7 = std::string::append(v6, "[]");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    uint64_t v27 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)uint64_t v26 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v35) < 0) {
      operator delete((void *)v34);
    }
  }
  else
  {
    AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)this, (atomic_uint **)&v34);
    if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0) {
      Emptyunint64_t String = (uint64_t *)((v34 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
    }
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_216778F24(&__dst, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      long long v11 = *(_OWORD *)EmptyString;
      uint64_t v29 = EmptyString[2];
      long long __dst = v11;
    }
    if ((v34 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&ArrayType, (atomic_uint **)&v34);
    if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0) {
      char v13 = (uint64_t *)((v34 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      char v13 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
    }
    if (*((char *)v13 + 23) < 0)
    {
      sub_216778F24(v26, (void *)*v13, v13[1]);
    }
    else
    {
      long long v14 = *(_OWORD *)v13;
      uint64_t v27 = v13[2];
      *(_OWORD *)uint64_t v26 = v14;
    }
    if ((v34 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  uint64_t v15 = *a1;
  if (SHIBYTE(v29) < 0)
  {
    sub_216778F24(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)std::string __p = __dst;
    uint64_t v25 = v29;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions((uint64_t **)this, &v23);
  v33[0] = &unk_26C755310;
  v33[1] = sub_2169BBD08;
  v33[3] = v33;
  sub_2169C20E4((char *)&v34, (long long *)__p, (long long *)&v23, 0, (uint64_t)v33);
  p_dst = (void **)&__dst;
  int v16 = sub_2169AA770(v15, (const void **)&__dst, (uint64_t)&unk_2174BFD90, (long long **)&p_dst);
  unint64_t v17 = (void **)(v16 + 7);
  if (*((char *)v16 + 79) < 0) {
    operator delete(*v17);
  }
  *(_OWORD *)unint64_t v17 = v34;
  v16[9] = v35;
  HIBYTE(v35) = 0;
  LOBYTE(v34) = 0;
  *((_OWORD *)v16 + 5) = v36[0];
  *(_OWORD *)((char *)v16 + 89) = *(_OWORD *)((char *)v36 + 9);
  sub_2169C221C(v16 + 14, (uint64_t)v37);
  sub_21699E4F4(v37);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  sub_21699E4F4(v33);
  if (SHIBYTE(v25) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v27) < 0)
  {
    sub_216778F24(v21, v26[0], (unint64_t)v26[1]);
  }
  else
  {
    *(_OWORD *)uint64_t v21 = *(_OWORD *)v26;
    uint64_t v22 = v27;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions(&ArrayType, &v20);
  v32[0] = &unk_26C755310;
  v32[1] = sub_2169BBDE8;
  v32[3] = v32;
  sub_2169C20E4((char *)&v34, (long long *)v21, (long long *)&v20, 1, (uint64_t)v32);
  p_dst = v26;
  unint64_t v18 = sub_2169AA770(v15, (const void **)v26, (uint64_t)&unk_2174BFD90, (long long **)&p_dst);
  uint64_t v19 = (void **)(v18 + 7);
  if (*((char *)v18 + 79) < 0) {
    operator delete(*v19);
  }
  *(_OWORD *)uint64_t v19 = v34;
  v18[9] = v35;
  HIBYTE(v35) = 0;
  LOBYTE(v34) = 0;
  *((_OWORD *)v18 + 5) = v36[0];
  *(_OWORD *)((char *)v18 + 89) = *(_OWORD *)((char *)v36 + 9);
  sub_2169C221C(v18 + 14, (uint64_t)v37);
  sub_21699E4F4(v37);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  sub_21699E4F4(v32);
  if (SHIBYTE(v22) < 0) {
    operator delete(v21[0]);
  }
  if (SHIBYTE(v27) < 0) {
    operator delete(v26[0]);
  }
  if (SHIBYTE(v29) < 0) {
    operator delete((void *)__dst);
  }
}

void sub_2169A60C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v47 = *(void *)(v45 - 144);
  if ((v47 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a41 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2169A61D8()
{
}

void sub_2169A61E0(uint64_t ***a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this, char *a3)
{
  v37[4] = *MEMORY[0x263EF8340];
  ArrayType = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(this);
  if (a3)
  {
    sub_216779094(&__dst, a3);
    uint64_t v6 = (std::string *)sub_216779094(&v34, a3);
    std::string v7 = std::string::append(v6, "[]");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    uint64_t v27 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)uint64_t v26 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v35) < 0) {
      operator delete((void *)v34);
    }
  }
  else
  {
    AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)this, (atomic_uint **)&v34);
    if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0) {
      Emptyunint64_t String = (uint64_t *)((v34 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
    }
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_216778F24(&__dst, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      long long v11 = *(_OWORD *)EmptyString;
      uint64_t v29 = EmptyString[2];
      long long __dst = v11;
    }
    if ((v34 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&ArrayType, (atomic_uint **)&v34);
    if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0) {
      char v13 = (uint64_t *)((v34 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      char v13 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
    }
    if (*((char *)v13 + 23) < 0)
    {
      sub_216778F24(v26, (void *)*v13, v13[1]);
    }
    else
    {
      long long v14 = *(_OWORD *)v13;
      uint64_t v27 = v13[2];
      *(_OWORD *)uint64_t v26 = v14;
    }
    if ((v34 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  uint64_t v15 = *a1;
  if (SHIBYTE(v29) < 0)
  {
    sub_216778F24(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)std::string __p = __dst;
    uint64_t v25 = v29;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions((uint64_t **)this, &v23);
  v33[0] = &unk_26C755310;
  v33[1] = sub_2169BC314;
  v33[3] = v33;
  sub_2169C20E4((char *)&v34, (long long *)__p, (long long *)&v23, 0, (uint64_t)v33);
  p_dst = (void **)&__dst;
  int v16 = sub_2169AA770(v15, (const void **)&__dst, (uint64_t)&unk_2174BFD90, (long long **)&p_dst);
  unint64_t v17 = (void **)(v16 + 7);
  if (*((char *)v16 + 79) < 0) {
    operator delete(*v17);
  }
  *(_OWORD *)unint64_t v17 = v34;
  v16[9] = v35;
  HIBYTE(v35) = 0;
  LOBYTE(v34) = 0;
  *((_OWORD *)v16 + 5) = v36[0];
  *(_OWORD *)((char *)v16 + 89) = *(_OWORD *)((char *)v36 + 9);
  sub_2169C221C(v16 + 14, (uint64_t)v37);
  sub_21699E4F4(v37);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  sub_21699E4F4(v33);
  if (SHIBYTE(v25) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v27) < 0)
  {
    sub_216778F24(v21, v26[0], (unint64_t)v26[1]);
  }
  else
  {
    *(_OWORD *)uint64_t v21 = *(_OWORD *)v26;
    uint64_t v22 = v27;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions(&ArrayType, &v20);
  v32[0] = &unk_26C755310;
  v32[1] = sub_2169BC410;
  v32[3] = v32;
  sub_2169C20E4((char *)&v34, (long long *)v21, (long long *)&v20, 1, (uint64_t)v32);
  p_dst = v26;
  unint64_t v18 = sub_2169AA770(v15, (const void **)v26, (uint64_t)&unk_2174BFD90, (long long **)&p_dst);
  uint64_t v19 = (void **)(v18 + 7);
  if (*((char *)v18 + 79) < 0) {
    operator delete(*v19);
  }
  *(_OWORD *)uint64_t v19 = v34;
  v18[9] = v35;
  HIBYTE(v35) = 0;
  LOBYTE(v34) = 0;
  *((_OWORD *)v18 + 5) = v36[0];
  *(_OWORD *)((char *)v18 + 89) = *(_OWORD *)((char *)v36 + 9);
  sub_2169C221C(v18 + 14, (uint64_t)v37);
  sub_21699E4F4(v37);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  sub_21699E4F4(v32);
  if (SHIBYTE(v22) < 0) {
    operator delete(v21[0]);
  }
  if (SHIBYTE(v27) < 0) {
    operator delete(v26[0]);
  }
  if (SHIBYTE(v29) < 0) {
    operator delete((void *)__dst);
  }
}

void sub_2169A65EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v47 = *(void *)(v45 - 144);
  if ((v47 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a41 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2169A66FC()
{
}

void sub_2169A6704(uint64_t ***a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this, char *a3)
{
  v37[4] = *MEMORY[0x263EF8340];
  ArrayType = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(this);
  if (a3)
  {
    sub_216779094(&__dst, a3);
    uint64_t v6 = (std::string *)sub_216779094(&v34, a3);
    std::string v7 = std::string::append(v6, "[]");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    uint64_t v27 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)uint64_t v26 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v35) < 0) {
      operator delete((void *)v34);
    }
  }
  else
  {
    AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)this, (atomic_uint **)&v34);
    if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0) {
      Emptyunint64_t String = (uint64_t *)((v34 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
    }
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_216778F24(&__dst, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      long long v11 = *(_OWORD *)EmptyString;
      uint64_t v29 = EmptyString[2];
      long long __dst = v11;
    }
    if ((v34 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&ArrayType, (atomic_uint **)&v34);
    if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0) {
      char v13 = (uint64_t *)((v34 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      char v13 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
    }
    if (*((char *)v13 + 23) < 0)
    {
      sub_216778F24(v26, (void *)*v13, v13[1]);
    }
    else
    {
      long long v14 = *(_OWORD *)v13;
      uint64_t v27 = v13[2];
      *(_OWORD *)uint64_t v26 = v14;
    }
    if ((v34 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  uint64_t v15 = *a1;
  if (SHIBYTE(v29) < 0)
  {
    sub_216778F24(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)std::string __p = __dst;
    uint64_t v25 = v29;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions((uint64_t **)this, &v23);
  v33[0] = &unk_26C755310;
  v33[1] = sub_2169BC868;
  v33[3] = v33;
  sub_2169C20E4((char *)&v34, (long long *)__p, (long long *)&v23, 0, (uint64_t)v33);
  p_dst = (void **)&__dst;
  int v16 = sub_2169AA770(v15, (const void **)&__dst, (uint64_t)&unk_2174BFD90, (long long **)&p_dst);
  unint64_t v17 = (void **)(v16 + 7);
  if (*((char *)v16 + 79) < 0) {
    operator delete(*v17);
  }
  *(_OWORD *)unint64_t v17 = v34;
  v16[9] = v35;
  HIBYTE(v35) = 0;
  LOBYTE(v34) = 0;
  *((_OWORD *)v16 + 5) = v36[0];
  *(_OWORD *)((char *)v16 + 89) = *(_OWORD *)((char *)v36 + 9);
  sub_2169C221C(v16 + 14, (uint64_t)v37);
  sub_21699E4F4(v37);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  sub_21699E4F4(v33);
  if (SHIBYTE(v25) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v27) < 0)
  {
    sub_216778F24(v21, v26[0], (unint64_t)v26[1]);
  }
  else
  {
    *(_OWORD *)uint64_t v21 = *(_OWORD *)v26;
    uint64_t v22 = v27;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions(&ArrayType, &v20);
  v32[0] = &unk_26C755310;
  v32[1] = sub_2169BC964;
  v32[3] = v32;
  sub_2169C20E4((char *)&v34, (long long *)v21, (long long *)&v20, 1, (uint64_t)v32);
  p_dst = v26;
  unint64_t v18 = sub_2169AA770(v15, (const void **)v26, (uint64_t)&unk_2174BFD90, (long long **)&p_dst);
  uint64_t v19 = (void **)(v18 + 7);
  if (*((char *)v18 + 79) < 0) {
    operator delete(*v19);
  }
  *(_OWORD *)uint64_t v19 = v34;
  v18[9] = v35;
  HIBYTE(v35) = 0;
  LOBYTE(v34) = 0;
  *((_OWORD *)v18 + 5) = v36[0];
  *(_OWORD *)((char *)v18 + 89) = *(_OWORD *)((char *)v36 + 9);
  sub_2169C221C(v18 + 14, (uint64_t)v37);
  sub_21699E4F4(v37);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  sub_21699E4F4(v32);
  if (SHIBYTE(v22) < 0) {
    operator delete(v21[0]);
  }
  if (SHIBYTE(v27) < 0) {
    operator delete(v26[0]);
  }
  if (SHIBYTE(v29) < 0) {
    operator delete((void *)__dst);
  }
}

void sub_2169A6B10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v47 = *(void *)(v45 - 144);
  if ((v47 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a41 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2169A6C20()
{
}

void sub_2169A6C28(uint64_t ***a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this, char *a3)
{
  v37[4] = *MEMORY[0x263EF8340];
  ArrayType = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(this);
  if (a3)
  {
    sub_216779094(&__dst, a3);
    uint64_t v6 = (std::string *)sub_216779094(&v34, a3);
    std::string v7 = std::string::append(v6, "[]");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    uint64_t v27 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)uint64_t v26 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v35) < 0) {
      operator delete((void *)v34);
    }
  }
  else
  {
    AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)this, (atomic_uint **)&v34);
    if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0) {
      Emptyunint64_t String = (uint64_t *)((v34 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
    }
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_216778F24(&__dst, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      long long v11 = *(_OWORD *)EmptyString;
      uint64_t v29 = EmptyString[2];
      long long __dst = v11;
    }
    if ((v34 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&ArrayType, (atomic_uint **)&v34);
    if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0) {
      char v13 = (uint64_t *)((v34 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      char v13 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
    }
    if (*((char *)v13 + 23) < 0)
    {
      sub_216778F24(v26, (void *)*v13, v13[1]);
    }
    else
    {
      long long v14 = *(_OWORD *)v13;
      uint64_t v27 = v13[2];
      *(_OWORD *)uint64_t v26 = v14;
    }
    if ((v34 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  uint64_t v15 = *a1;
  if (SHIBYTE(v29) < 0)
  {
    sub_216778F24(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)std::string __p = __dst;
    uint64_t v25 = v29;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions((uint64_t **)this, &v23);
  v33[0] = &unk_26C755310;
  v33[1] = sub_2169BCDBC;
  v33[3] = v33;
  sub_2169C20E4((char *)&v34, (long long *)__p, (long long *)&v23, 0, (uint64_t)v33);
  p_dst = (void **)&__dst;
  int v16 = sub_2169AA770(v15, (const void **)&__dst, (uint64_t)&unk_2174BFD90, (long long **)&p_dst);
  unint64_t v17 = (void **)(v16 + 7);
  if (*((char *)v16 + 79) < 0) {
    operator delete(*v17);
  }
  *(_OWORD *)unint64_t v17 = v34;
  v16[9] = v35;
  HIBYTE(v35) = 0;
  LOBYTE(v34) = 0;
  *((_OWORD *)v16 + 5) = v36[0];
  *(_OWORD *)((char *)v16 + 89) = *(_OWORD *)((char *)v36 + 9);
  sub_2169C221C(v16 + 14, (uint64_t)v37);
  sub_21699E4F4(v37);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  sub_21699E4F4(v33);
  if (SHIBYTE(v25) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v27) < 0)
  {
    sub_216778F24(v21, v26[0], (unint64_t)v26[1]);
  }
  else
  {
    *(_OWORD *)uint64_t v21 = *(_OWORD *)v26;
    uint64_t v22 = v27;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions(&ArrayType, &v20);
  v32[0] = &unk_26C755310;
  v32[1] = sub_2169BCEB0;
  v32[3] = v32;
  sub_2169C20E4((char *)&v34, (long long *)v21, (long long *)&v20, 1, (uint64_t)v32);
  p_dst = v26;
  unint64_t v18 = sub_2169AA770(v15, (const void **)v26, (uint64_t)&unk_2174BFD90, (long long **)&p_dst);
  uint64_t v19 = (void **)(v18 + 7);
  if (*((char *)v18 + 79) < 0) {
    operator delete(*v19);
  }
  *(_OWORD *)uint64_t v19 = v34;
  v18[9] = v35;
  HIBYTE(v35) = 0;
  LOBYTE(v34) = 0;
  *((_OWORD *)v18 + 5) = v36[0];
  *(_OWORD *)((char *)v18 + 89) = *(_OWORD *)((char *)v36 + 9);
  sub_2169C221C(v18 + 14, (uint64_t)v37);
  sub_21699E4F4(v37);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  sub_21699E4F4(v32);
  if (SHIBYTE(v22) < 0) {
    operator delete(v21[0]);
  }
  if (SHIBYTE(v27) < 0) {
    operator delete(v26[0]);
  }
  if (SHIBYTE(v29) < 0) {
    operator delete((void *)__dst);
  }
}

void sub_2169A7034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v47 = *(void *)(v45 - 144);
  if ((v47 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a41 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2169A7144()
{
}

void sub_2169A714C(uint64_t ***a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this, char *a3)
{
  v37[4] = *MEMORY[0x263EF8340];
  ArrayType = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(this);
  if (a3)
  {
    sub_216779094(&__dst, a3);
    uint64_t v6 = (std::string *)sub_216779094(&v34, a3);
    std::string v7 = std::string::append(v6, "[]");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    uint64_t v27 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)uint64_t v26 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v35) < 0) {
      operator delete((void *)v34);
    }
  }
  else
  {
    AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)this, (atomic_uint **)&v34);
    if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0) {
      Emptyunint64_t String = (uint64_t *)((v34 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
    }
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_216778F24(&__dst, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      long long v11 = *(_OWORD *)EmptyString;
      uint64_t v29 = EmptyString[2];
      long long __dst = v11;
    }
    if ((v34 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&ArrayType, (atomic_uint **)&v34);
    if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0) {
      char v13 = (uint64_t *)((v34 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      char v13 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
    }
    if (*((char *)v13 + 23) < 0)
    {
      sub_216778F24(v26, (void *)*v13, v13[1]);
    }
    else
    {
      long long v14 = *(_OWORD *)v13;
      uint64_t v27 = v13[2];
      *(_OWORD *)uint64_t v26 = v14;
    }
    if ((v34 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  uint64_t v15 = *a1;
  if (SHIBYTE(v29) < 0)
  {
    sub_216778F24(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)std::string __p = __dst;
    uint64_t v25 = v29;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions((uint64_t **)this, &v23);
  v33[0] = &unk_26C755310;
  v33[1] = sub_2169BDDC0;
  v33[3] = v33;
  sub_2169C20E4((char *)&v34, (long long *)__p, (long long *)&v23, 0, (uint64_t)v33);
  p_dst = (void **)&__dst;
  int v16 = sub_2169AA770(v15, (const void **)&__dst, (uint64_t)&unk_2174BFD90, (long long **)&p_dst);
  unint64_t v17 = (void **)(v16 + 7);
  if (*((char *)v16 + 79) < 0) {
    operator delete(*v17);
  }
  *(_OWORD *)unint64_t v17 = v34;
  v16[9] = v35;
  HIBYTE(v35) = 0;
  LOBYTE(v34) = 0;
  *((_OWORD *)v16 + 5) = v36[0];
  *(_OWORD *)((char *)v16 + 89) = *(_OWORD *)((char *)v36 + 9);
  sub_2169C221C(v16 + 14, (uint64_t)v37);
  sub_21699E4F4(v37);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  sub_21699E4F4(v33);
  if (SHIBYTE(v25) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v27) < 0)
  {
    sub_216778F24(v21, v26[0], (unint64_t)v26[1]);
  }
  else
  {
    *(_OWORD *)uint64_t v21 = *(_OWORD *)v26;
    uint64_t v22 = v27;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions(&ArrayType, &v20);
  v32[0] = &unk_26C755310;
  v32[1] = sub_2169BDE94;
  v32[3] = v32;
  sub_2169C20E4((char *)&v34, (long long *)v21, (long long *)&v20, 1, (uint64_t)v32);
  p_dst = v26;
  unint64_t v18 = sub_2169AA770(v15, (const void **)v26, (uint64_t)&unk_2174BFD90, (long long **)&p_dst);
  uint64_t v19 = (void **)(v18 + 7);
  if (*((char *)v18 + 79) < 0) {
    operator delete(*v19);
  }
  *(_OWORD *)uint64_t v19 = v34;
  v18[9] = v35;
  HIBYTE(v35) = 0;
  LOBYTE(v34) = 0;
  *((_OWORD *)v18 + 5) = v36[0];
  *(_OWORD *)((char *)v18 + 89) = *(_OWORD *)((char *)v36 + 9);
  sub_2169C221C(v18 + 14, (uint64_t)v37);
  sub_21699E4F4(v37);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  sub_21699E4F4(v32);
  if (SHIBYTE(v22) < 0) {
    operator delete(v21[0]);
  }
  if (SHIBYTE(v27) < 0) {
    operator delete(v26[0]);
  }
  if (SHIBYTE(v29) < 0) {
    operator delete((void *)__dst);
  }
}

void sub_2169A7558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v47 = *(void *)(v45 - 144);
  if ((v47 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a41 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2169A7668()
{
}

void sub_2169A7670(uint64_t ***a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this, char *a3)
{
  v37[4] = *MEMORY[0x263EF8340];
  ArrayType = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(this);
  if (a3)
  {
    sub_216779094(&__dst, a3);
    uint64_t v6 = (std::string *)sub_216779094(&v34, a3);
    std::string v7 = std::string::append(v6, "[]");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    uint64_t v27 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)uint64_t v26 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v35) < 0) {
      operator delete((void *)v34);
    }
  }
  else
  {
    AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)this, (atomic_uint **)&v34);
    if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0) {
      Emptyunint64_t String = (uint64_t *)((v34 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
    }
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_216778F24(&__dst, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      long long v11 = *(_OWORD *)EmptyString;
      uint64_t v29 = EmptyString[2];
      long long __dst = v11;
    }
    if ((v34 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&ArrayType, (atomic_uint **)&v34);
    if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0) {
      char v13 = (uint64_t *)((v34 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      char v13 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
    }
    if (*((char *)v13 + 23) < 0)
    {
      sub_216778F24(v26, (void *)*v13, v13[1]);
    }
    else
    {
      long long v14 = *(_OWORD *)v13;
      uint64_t v27 = v13[2];
      *(_OWORD *)uint64_t v26 = v14;
    }
    if ((v34 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  uint64_t v15 = *a1;
  if (SHIBYTE(v29) < 0)
  {
    sub_216778F24(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)std::string __p = __dst;
    uint64_t v25 = v29;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions((uint64_t **)this, &v23);
  v33[0] = &unk_26C755310;
  v33[1] = sub_2169BE420;
  v33[3] = v33;
  sub_2169C20E4((char *)&v34, (long long *)__p, (long long *)&v23, 0, (uint64_t)v33);
  p_dst = (void **)&__dst;
  int v16 = sub_2169AA770(v15, (const void **)&__dst, (uint64_t)&unk_2174BFD90, (long long **)&p_dst);
  unint64_t v17 = (void **)(v16 + 7);
  if (*((char *)v16 + 79) < 0) {
    operator delete(*v17);
  }
  *(_OWORD *)unint64_t v17 = v34;
  v16[9] = v35;
  HIBYTE(v35) = 0;
  LOBYTE(v34) = 0;
  *((_OWORD *)v16 + 5) = v36[0];
  *(_OWORD *)((char *)v16 + 89) = *(_OWORD *)((char *)v36 + 9);
  sub_2169C221C(v16 + 14, (uint64_t)v37);
  sub_21699E4F4(v37);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  sub_21699E4F4(v33);
  if (SHIBYTE(v25) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v27) < 0)
  {
    sub_216778F24(v21, v26[0], (unint64_t)v26[1]);
  }
  else
  {
    *(_OWORD *)uint64_t v21 = *(_OWORD *)v26;
    uint64_t v22 = v27;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions(&ArrayType, &v20);
  v32[0] = &unk_26C755310;
  v32[1] = sub_2169BE514;
  v32[3] = v32;
  sub_2169C20E4((char *)&v34, (long long *)v21, (long long *)&v20, 1, (uint64_t)v32);
  p_dst = v26;
  unint64_t v18 = sub_2169AA770(v15, (const void **)v26, (uint64_t)&unk_2174BFD90, (long long **)&p_dst);
  uint64_t v19 = (void **)(v18 + 7);
  if (*((char *)v18 + 79) < 0) {
    operator delete(*v19);
  }
  *(_OWORD *)uint64_t v19 = v34;
  v18[9] = v35;
  HIBYTE(v35) = 0;
  LOBYTE(v34) = 0;
  *((_OWORD *)v18 + 5) = v36[0];
  *(_OWORD *)((char *)v18 + 89) = *(_OWORD *)((char *)v36 + 9);
  sub_2169C221C(v18 + 14, (uint64_t)v37);
  sub_21699E4F4(v37);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  sub_21699E4F4(v32);
  if (SHIBYTE(v22) < 0) {
    operator delete(v21[0]);
  }
  if (SHIBYTE(v27) < 0) {
    operator delete(v26[0]);
  }
  if (SHIBYTE(v29) < 0) {
    operator delete((void *)__dst);
  }
}

void sub_2169A7A7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v47 = *(void *)(v45 - 144);
  if ((v47 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a41 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2169A7B8C()
{
}

void sub_2169A7B94(uint64_t ***a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this, char *a3)
{
  v37[4] = *MEMORY[0x263EF8340];
  ArrayType = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(this);
  if (a3)
  {
    sub_216779094(&__dst, a3);
    uint64_t v6 = (std::string *)sub_216779094(&v34, a3);
    std::string v7 = std::string::append(v6, "[]");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    uint64_t v27 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)uint64_t v26 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v35) < 0) {
      operator delete((void *)v34);
    }
  }
  else
  {
    AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)this, (atomic_uint **)&v34);
    if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0) {
      Emptyunint64_t String = (uint64_t *)((v34 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
    }
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_216778F24(&__dst, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      long long v11 = *(_OWORD *)EmptyString;
      uint64_t v29 = EmptyString[2];
      long long __dst = v11;
    }
    if ((v34 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&ArrayType, (atomic_uint **)&v34);
    if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0) {
      char v13 = (uint64_t *)((v34 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      char v13 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
    }
    if (*((char *)v13 + 23) < 0)
    {
      sub_216778F24(v26, (void *)*v13, v13[1]);
    }
    else
    {
      long long v14 = *(_OWORD *)v13;
      uint64_t v27 = v13[2];
      *(_OWORD *)uint64_t v26 = v14;
    }
    if ((v34 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  uint64_t v15 = *a1;
  if (SHIBYTE(v29) < 0)
  {
    sub_216778F24(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)std::string __p = __dst;
    uint64_t v25 = v29;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions((uint64_t **)this, &v23);
  v33[0] = &unk_26C755310;
  v33[1] = sub_2169BE984;
  v33[3] = v33;
  sub_2169C20E4((char *)&v34, (long long *)__p, (long long *)&v23, 0, (uint64_t)v33);
  p_dst = (void **)&__dst;
  int v16 = sub_2169AA770(v15, (const void **)&__dst, (uint64_t)&unk_2174BFD90, (long long **)&p_dst);
  unint64_t v17 = (void **)(v16 + 7);
  if (*((char *)v16 + 79) < 0) {
    operator delete(*v17);
  }
  *(_OWORD *)unint64_t v17 = v34;
  v16[9] = v35;
  HIBYTE(v35) = 0;
  LOBYTE(v34) = 0;
  *((_OWORD *)v16 + 5) = v36[0];
  *(_OWORD *)((char *)v16 + 89) = *(_OWORD *)((char *)v36 + 9);
  sub_2169C221C(v16 + 14, (uint64_t)v37);
  sub_21699E4F4(v37);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  sub_21699E4F4(v33);
  if (SHIBYTE(v25) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v27) < 0)
  {
    sub_216778F24(v21, v26[0], (unint64_t)v26[1]);
  }
  else
  {
    *(_OWORD *)uint64_t v21 = *(_OWORD *)v26;
    uint64_t v22 = v27;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions(&ArrayType, &v20);
  v32[0] = &unk_26C755310;
  v32[1] = sub_2169BEA78;
  v32[3] = v32;
  sub_2169C20E4((char *)&v34, (long long *)v21, (long long *)&v20, 1, (uint64_t)v32);
  p_dst = v26;
  unint64_t v18 = sub_2169AA770(v15, (const void **)v26, (uint64_t)&unk_2174BFD90, (long long **)&p_dst);
  uint64_t v19 = (void **)(v18 + 7);
  if (*((char *)v18 + 79) < 0) {
    operator delete(*v19);
  }
  *(_OWORD *)uint64_t v19 = v34;
  v18[9] = v35;
  HIBYTE(v35) = 0;
  LOBYTE(v34) = 0;
  *((_OWORD *)v18 + 5) = v36[0];
  *(_OWORD *)((char *)v18 + 89) = *(_OWORD *)((char *)v36 + 9);
  sub_2169C221C(v18 + 14, (uint64_t)v37);
  sub_21699E4F4(v37);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  sub_21699E4F4(v32);
  if (SHIBYTE(v22) < 0) {
    operator delete(v21[0]);
  }
  if (SHIBYTE(v27) < 0) {
    operator delete(v26[0]);
  }
  if (SHIBYTE(v29) < 0) {
    operator delete((void *)__dst);
  }
}

void sub_2169A7FA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v47 = *(void *)(v45 - 144);
  if ((v47 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a41 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2169A80B0()
{
}

void sub_2169A80B8(uint64_t ***a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this, char *a3)
{
  v37[4] = *MEMORY[0x263EF8340];
  ArrayType = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(this);
  if (a3)
  {
    sub_216779094(&__dst, a3);
    uint64_t v6 = (std::string *)sub_216779094(&v34, a3);
    std::string v7 = std::string::append(v6, "[]");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    uint64_t v27 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)uint64_t v26 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v35) < 0) {
      operator delete((void *)v34);
    }
  }
  else
  {
    AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)this, (atomic_uint **)&v34);
    if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0) {
      Emptyunint64_t String = (uint64_t *)((v34 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
    }
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_216778F24(&__dst, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      long long v11 = *(_OWORD *)EmptyString;
      uint64_t v29 = EmptyString[2];
      long long __dst = v11;
    }
    if ((v34 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&ArrayType, (atomic_uint **)&v34);
    if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0) {
      char v13 = (uint64_t *)((v34 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      char v13 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
    }
    if (*((char *)v13 + 23) < 0)
    {
      sub_216778F24(v26, (void *)*v13, v13[1]);
    }
    else
    {
      long long v14 = *(_OWORD *)v13;
      uint64_t v27 = v13[2];
      *(_OWORD *)uint64_t v26 = v14;
    }
    if ((v34 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  uint64_t v15 = *a1;
  if (SHIBYTE(v29) < 0)
  {
    sub_216778F24(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)std::string __p = __dst;
    uint64_t v25 = v29;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions((uint64_t **)this, &v23);
  v33[0] = &unk_26C755310;
  v33[1] = sub_2169BEEE8;
  v33[3] = v33;
  sub_2169C20E4((char *)&v34, (long long *)__p, (long long *)&v23, 0, (uint64_t)v33);
  p_dst = (void **)&__dst;
  int v16 = sub_2169AA770(v15, (const void **)&__dst, (uint64_t)&unk_2174BFD90, (long long **)&p_dst);
  unint64_t v17 = (void **)(v16 + 7);
  if (*((char *)v16 + 79) < 0) {
    operator delete(*v17);
  }
  *(_OWORD *)unint64_t v17 = v34;
  v16[9] = v35;
  HIBYTE(v35) = 0;
  LOBYTE(v34) = 0;
  *((_OWORD *)v16 + 5) = v36[0];
  *(_OWORD *)((char *)v16 + 89) = *(_OWORD *)((char *)v36 + 9);
  sub_2169C221C(v16 + 14, (uint64_t)v37);
  sub_21699E4F4(v37);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  sub_21699E4F4(v33);
  if (SHIBYTE(v25) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v27) < 0)
  {
    sub_216778F24(v21, v26[0], (unint64_t)v26[1]);
  }
  else
  {
    *(_OWORD *)uint64_t v21 = *(_OWORD *)v26;
    uint64_t v22 = v27;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions(&ArrayType, &v20);
  v32[0] = &unk_26C755310;
  v32[1] = sub_2169BEFBC;
  v32[3] = v32;
  sub_2169C20E4((char *)&v34, (long long *)v21, (long long *)&v20, 1, (uint64_t)v32);
  p_dst = v26;
  unint64_t v18 = sub_2169AA770(v15, (const void **)v26, (uint64_t)&unk_2174BFD90, (long long **)&p_dst);
  uint64_t v19 = (void **)(v18 + 7);
  if (*((char *)v18 + 79) < 0) {
    operator delete(*v19);
  }
  *(_OWORD *)uint64_t v19 = v34;
  v18[9] = v35;
  HIBYTE(v35) = 0;
  LOBYTE(v34) = 0;
  *((_OWORD *)v18 + 5) = v36[0];
  *(_OWORD *)((char *)v18 + 89) = *(_OWORD *)((char *)v36 + 9);
  sub_2169C221C(v18 + 14, (uint64_t)v37);
  sub_21699E4F4(v37);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  sub_21699E4F4(v32);
  if (SHIBYTE(v22) < 0) {
    operator delete(v21[0]);
  }
  if (SHIBYTE(v27) < 0) {
    operator delete(v26[0]);
  }
  if (SHIBYTE(v29) < 0) {
    operator delete((void *)__dst);
  }
}

void sub_2169A84C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v47 = *(void *)(v45 - 144);
  if ((v47 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a41 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2169A85D4()
{
}

void sub_2169A85DC(uint64_t ***a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this, char *a3)
{
  v37[4] = *MEMORY[0x263EF8340];
  ArrayType = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(this);
  if (a3)
  {
    sub_216779094(&__dst, a3);
    uint64_t v6 = (std::string *)sub_216779094(&v34, a3);
    std::string v7 = std::string::append(v6, "[]");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    uint64_t v27 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)uint64_t v26 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v35) < 0) {
      operator delete((void *)v34);
    }
  }
  else
  {
    AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)this, (atomic_uint **)&v34);
    if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0) {
      Emptyunint64_t String = (uint64_t *)((v34 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
    }
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_216778F24(&__dst, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      long long v11 = *(_OWORD *)EmptyString;
      uint64_t v29 = EmptyString[2];
      long long __dst = v11;
    }
    if ((v34 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&ArrayType, (atomic_uint **)&v34);
    if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0) {
      char v13 = (uint64_t *)((v34 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      char v13 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
    }
    if (*((char *)v13 + 23) < 0)
    {
      sub_216778F24(v26, (void *)*v13, v13[1]);
    }
    else
    {
      long long v14 = *(_OWORD *)v13;
      uint64_t v27 = v13[2];
      *(_OWORD *)uint64_t v26 = v14;
    }
    if ((v34 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  uint64_t v15 = *a1;
  if (SHIBYTE(v29) < 0)
  {
    sub_216778F24(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)std::string __p = __dst;
    uint64_t v25 = v29;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions((uint64_t **)this, &v23);
  v33[0] = &unk_26C755310;
  v33[1] = sub_2169BF3F0;
  v33[3] = v33;
  sub_2169C20E4((char *)&v34, (long long *)__p, (long long *)&v23, 0, (uint64_t)v33);
  p_dst = (void **)&__dst;
  int v16 = sub_2169AA770(v15, (const void **)&__dst, (uint64_t)&unk_2174BFD90, (long long **)&p_dst);
  unint64_t v17 = (void **)(v16 + 7);
  if (*((char *)v16 + 79) < 0) {
    operator delete(*v17);
  }
  *(_OWORD *)unint64_t v17 = v34;
  v16[9] = v35;
  HIBYTE(v35) = 0;
  LOBYTE(v34) = 0;
  *((_OWORD *)v16 + 5) = v36[0];
  *(_OWORD *)((char *)v16 + 89) = *(_OWORD *)((char *)v36 + 9);
  sub_2169C221C(v16 + 14, (uint64_t)v37);
  sub_21699E4F4(v37);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  sub_21699E4F4(v33);
  if (SHIBYTE(v25) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v27) < 0)
  {
    sub_216778F24(v21, v26[0], (unint64_t)v26[1]);
  }
  else
  {
    *(_OWORD *)uint64_t v21 = *(_OWORD *)v26;
    uint64_t v22 = v27;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions(&ArrayType, &v20);
  v32[0] = &unk_26C755310;
  v32[1] = sub_2169BF4E0;
  v32[3] = v32;
  sub_2169C20E4((char *)&v34, (long long *)v21, (long long *)&v20, 1, (uint64_t)v32);
  p_dst = v26;
  unint64_t v18 = sub_2169AA770(v15, (const void **)v26, (uint64_t)&unk_2174BFD90, (long long **)&p_dst);
  uint64_t v19 = (void **)(v18 + 7);
  if (*((char *)v18 + 79) < 0) {
    operator delete(*v19);
  }
  *(_OWORD *)uint64_t v19 = v34;
  v18[9] = v35;
  HIBYTE(v35) = 0;
  LOBYTE(v34) = 0;
  *((_OWORD *)v18 + 5) = v36[0];
  *(_OWORD *)((char *)v18 + 89) = *(_OWORD *)((char *)v36 + 9);
  sub_2169C221C(v18 + 14, (uint64_t)v37);
  sub_21699E4F4(v37);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  sub_21699E4F4(v32);
  if (SHIBYTE(v22) < 0) {
    operator delete(v21[0]);
  }
  if (SHIBYTE(v27) < 0) {
    operator delete(v26[0]);
  }
  if (SHIBYTE(v29) < 0) {
    operator delete((void *)__dst);
  }
}

void sub_2169A89E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v47 = *(void *)(v45 - 144);
  if ((v47 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a41 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2169A8AF8()
{
}

void sub_2169A8B00(uint64_t ***a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this, char *a3)
{
  v37[4] = *MEMORY[0x263EF8340];
  ArrayType = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(this);
  if (a3)
  {
    sub_216779094(&__dst, a3);
    uint64_t v6 = (std::string *)sub_216779094(&v34, a3);
    std::string v7 = std::string::append(v6, "[]");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    uint64_t v27 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)uint64_t v26 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v35) < 0) {
      operator delete((void *)v34);
    }
  }
  else
  {
    AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)this, (atomic_uint **)&v34);
    if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0) {
      Emptyunint64_t String = (uint64_t *)((v34 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
    }
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_216778F24(&__dst, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      long long v11 = *(_OWORD *)EmptyString;
      uint64_t v29 = EmptyString[2];
      long long __dst = v11;
    }
    if ((v34 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&ArrayType, (atomic_uint **)&v34);
    if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0) {
      char v13 = (uint64_t *)((v34 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      char v13 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
    }
    if (*((char *)v13 + 23) < 0)
    {
      sub_216778F24(v26, (void *)*v13, v13[1]);
    }
    else
    {
      long long v14 = *(_OWORD *)v13;
      uint64_t v27 = v13[2];
      *(_OWORD *)uint64_t v26 = v14;
    }
    if ((v34 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  uint64_t v15 = *a1;
  if (SHIBYTE(v29) < 0)
  {
    sub_216778F24(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)std::string __p = __dst;
    uint64_t v25 = v29;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions((uint64_t **)this, &v23);
  v33[0] = &unk_26C755310;
  v33[1] = sub_2169BF974;
  v33[3] = v33;
  sub_2169C20E4((char *)&v34, (long long *)__p, (long long *)&v23, 0, (uint64_t)v33);
  p_dst = (void **)&__dst;
  int v16 = sub_2169AA770(v15, (const void **)&__dst, (uint64_t)&unk_2174BFD90, (long long **)&p_dst);
  unint64_t v17 = (void **)(v16 + 7);
  if (*((char *)v16 + 79) < 0) {
    operator delete(*v17);
  }
  *(_OWORD *)unint64_t v17 = v34;
  v16[9] = v35;
  HIBYTE(v35) = 0;
  LOBYTE(v34) = 0;
  *((_OWORD *)v16 + 5) = v36[0];
  *(_OWORD *)((char *)v16 + 89) = *(_OWORD *)((char *)v36 + 9);
  sub_2169C221C(v16 + 14, (uint64_t)v37);
  sub_21699E4F4(v37);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  sub_21699E4F4(v33);
  if (SHIBYTE(v25) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v27) < 0)
  {
    sub_216778F24(v21, v26[0], (unint64_t)v26[1]);
  }
  else
  {
    *(_OWORD *)uint64_t v21 = *(_OWORD *)v26;
    uint64_t v22 = v27;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions(&ArrayType, &v20);
  v32[0] = &unk_26C755310;
  v32[1] = sub_2169BFA64;
  v32[3] = v32;
  sub_2169C20E4((char *)&v34, (long long *)v21, (long long *)&v20, 1, (uint64_t)v32);
  p_dst = v26;
  unint64_t v18 = sub_2169AA770(v15, (const void **)v26, (uint64_t)&unk_2174BFD90, (long long **)&p_dst);
  uint64_t v19 = (void **)(v18 + 7);
  if (*((char *)v18 + 79) < 0) {
    operator delete(*v19);
  }
  *(_OWORD *)uint64_t v19 = v34;
  v18[9] = v35;
  HIBYTE(v35) = 0;
  LOBYTE(v34) = 0;
  *((_OWORD *)v18 + 5) = v36[0];
  *(_OWORD *)((char *)v18 + 89) = *(_OWORD *)((char *)v36 + 9);
  sub_2169C221C(v18 + 14, (uint64_t)v37);
  sub_21699E4F4(v37);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  sub_21699E4F4(v32);
  if (SHIBYTE(v22) < 0) {
    operator delete(v21[0]);
  }
  if (SHIBYTE(v27) < 0) {
    operator delete(v26[0]);
  }
  if (SHIBYTE(v29) < 0) {
    operator delete((void *)__dst);
  }
}

void sub_2169A8F0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v47 = *(void *)(v45 - 144);
  if ((v47 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a41 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2169A901C()
{
}

void sub_2169A9024(uint64_t ***a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this, char *a3)
{
  v37[4] = *MEMORY[0x263EF8340];
  ArrayType = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(this);
  if (a3)
  {
    sub_216779094(&__dst, a3);
    uint64_t v6 = (std::string *)sub_216779094(&v34, a3);
    std::string v7 = std::string::append(v6, "[]");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    uint64_t v27 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)uint64_t v26 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v35) < 0) {
      operator delete((void *)v34);
    }
  }
  else
  {
    AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)this, (atomic_uint **)&v34);
    if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0) {
      Emptyunint64_t String = (uint64_t *)((v34 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
    }
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_216778F24(&__dst, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      long long v11 = *(_OWORD *)EmptyString;
      uint64_t v29 = EmptyString[2];
      long long __dst = v11;
    }
    if ((v34 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&ArrayType, (atomic_uint **)&v34);
    if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0) {
      char v13 = (uint64_t *)((v34 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      char v13 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
    }
    if (*((char *)v13 + 23) < 0)
    {
      sub_216778F24(v26, (void *)*v13, v13[1]);
    }
    else
    {
      long long v14 = *(_OWORD *)v13;
      uint64_t v27 = v13[2];
      *(_OWORD *)uint64_t v26 = v14;
    }
    if ((v34 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  uint64_t v15 = *a1;
  if (SHIBYTE(v29) < 0)
  {
    sub_216778F24(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)std::string __p = __dst;
    uint64_t v25 = v29;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions((uint64_t **)this, &v23);
  v33[0] = &unk_26C755310;
  v33[1] = sub_2169BFEF8;
  v33[3] = v33;
  sub_2169C20E4((char *)&v34, (long long *)__p, (long long *)&v23, 0, (uint64_t)v33);
  p_dst = (void **)&__dst;
  int v16 = sub_2169AA770(v15, (const void **)&__dst, (uint64_t)&unk_2174BFD90, (long long **)&p_dst);
  unint64_t v17 = (void **)(v16 + 7);
  if (*((char *)v16 + 79) < 0) {
    operator delete(*v17);
  }
  *(_OWORD *)unint64_t v17 = v34;
  v16[9] = v35;
  HIBYTE(v35) = 0;
  LOBYTE(v34) = 0;
  *((_OWORD *)v16 + 5) = v36[0];
  *(_OWORD *)((char *)v16 + 89) = *(_OWORD *)((char *)v36 + 9);
  sub_2169C221C(v16 + 14, (uint64_t)v37);
  sub_21699E4F4(v37);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  sub_21699E4F4(v33);
  if (SHIBYTE(v25) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v27) < 0)
  {
    sub_216778F24(v21, v26[0], (unint64_t)v26[1]);
  }
  else
  {
    *(_OWORD *)uint64_t v21 = *(_OWORD *)v26;
    uint64_t v22 = v27;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions(&ArrayType, &v20);
  v32[0] = &unk_26C755310;
  v32[1] = sub_2169BFFEC;
  v32[3] = v32;
  sub_2169C20E4((char *)&v34, (long long *)v21, (long long *)&v20, 1, (uint64_t)v32);
  p_dst = v26;
  unint64_t v18 = sub_2169AA770(v15, (const void **)v26, (uint64_t)&unk_2174BFD90, (long long **)&p_dst);
  uint64_t v19 = (void **)(v18 + 7);
  if (*((char *)v18 + 79) < 0) {
    operator delete(*v19);
  }
  *(_OWORD *)uint64_t v19 = v34;
  v18[9] = v35;
  HIBYTE(v35) = 0;
  LOBYTE(v34) = 0;
  *((_OWORD *)v18 + 5) = v36[0];
  *(_OWORD *)((char *)v18 + 89) = *(_OWORD *)((char *)v36 + 9);
  sub_2169C221C(v18 + 14, (uint64_t)v37);
  sub_21699E4F4(v37);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  sub_21699E4F4(v32);
  if (SHIBYTE(v22) < 0) {
    operator delete(v21[0]);
  }
  if (SHIBYTE(v27) < 0) {
    operator delete(v26[0]);
  }
  if (SHIBYTE(v29) < 0) {
    operator delete((void *)__dst);
  }
}

void sub_2169A9430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v47 = *(void *)(v45 - 144);
  if ((v47 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a41 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2169A9540()
{
}

void sub_2169A9548(uint64_t ***a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this, char *a3)
{
  v37[4] = *MEMORY[0x263EF8340];
  ArrayType = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(this);
  if (a3)
  {
    sub_216779094(&__dst, a3);
    uint64_t v6 = (std::string *)sub_216779094(&v34, a3);
    std::string v7 = std::string::append(v6, "[]");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    uint64_t v27 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)uint64_t v26 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v35) < 0) {
      operator delete((void *)v34);
    }
  }
  else
  {
    AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)this, (atomic_uint **)&v34);
    if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0) {
      Emptyunint64_t String = (uint64_t *)((v34 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
    }
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_216778F24(&__dst, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      long long v11 = *(_OWORD *)EmptyString;
      uint64_t v29 = EmptyString[2];
      long long __dst = v11;
    }
    if ((v34 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&ArrayType, (atomic_uint **)&v34);
    if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0) {
      char v13 = (uint64_t *)((v34 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      char v13 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
    }
    if (*((char *)v13 + 23) < 0)
    {
      sub_216778F24(v26, (void *)*v13, v13[1]);
    }
    else
    {
      long long v14 = *(_OWORD *)v13;
      uint64_t v27 = v13[2];
      *(_OWORD *)uint64_t v26 = v14;
    }
    if ((v34 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  uint64_t v15 = *a1;
  if (SHIBYTE(v29) < 0)
  {
    sub_216778F24(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)std::string __p = __dst;
    uint64_t v25 = v29;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions((uint64_t **)this, &v23);
  v33[0] = &unk_26C755310;
  v33[1] = sub_2169C0B34;
  v33[3] = v33;
  sub_2169C20E4((char *)&v34, (long long *)__p, (long long *)&v23, 0, (uint64_t)v33);
  p_dst = (void **)&__dst;
  int v16 = sub_2169AA770(v15, (const void **)&__dst, (uint64_t)&unk_2174BFD90, (long long **)&p_dst);
  unint64_t v17 = (void **)(v16 + 7);
  if (*((char *)v16 + 79) < 0) {
    operator delete(*v17);
  }
  *(_OWORD *)unint64_t v17 = v34;
  v16[9] = v35;
  HIBYTE(v35) = 0;
  LOBYTE(v34) = 0;
  *((_OWORD *)v16 + 5) = v36[0];
  *(_OWORD *)((char *)v16 + 89) = *(_OWORD *)((char *)v36 + 9);
  sub_2169C221C(v16 + 14, (uint64_t)v37);
  sub_21699E4F4(v37);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  sub_21699E4F4(v33);
  if (SHIBYTE(v25) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v27) < 0)
  {
    sub_216778F24(v21, v26[0], (unint64_t)v26[1]);
  }
  else
  {
    *(_OWORD *)uint64_t v21 = *(_OWORD *)v26;
    uint64_t v22 = v27;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions(&ArrayType, &v20);
  v32[0] = &unk_26C755310;
  v32[1] = sub_2169C0C40;
  v32[3] = v32;
  sub_2169C20E4((char *)&v34, (long long *)v21, (long long *)&v20, 1, (uint64_t)v32);
  p_dst = v26;
  unint64_t v18 = sub_2169AA770(v15, (const void **)v26, (uint64_t)&unk_2174BFD90, (long long **)&p_dst);
  uint64_t v19 = (void **)(v18 + 7);
  if (*((char *)v18 + 79) < 0) {
    operator delete(*v19);
  }
  *(_OWORD *)uint64_t v19 = v34;
  v18[9] = v35;
  HIBYTE(v35) = 0;
  LOBYTE(v34) = 0;
  *((_OWORD *)v18 + 5) = v36[0];
  *(_OWORD *)((char *)v18 + 89) = *(_OWORD *)((char *)v36 + 9);
  sub_2169C221C(v18 + 14, (uint64_t)v37);
  sub_21699E4F4(v37);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  sub_21699E4F4(v32);
  if (SHIBYTE(v22) < 0) {
    operator delete(v21[0]);
  }
  if (SHIBYTE(v27) < 0) {
    operator delete(v26[0]);
  }
  if (SHIBYTE(v29) < 0) {
    operator delete((void *)__dst);
  }
}

void sub_2169A9954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v47 = *(void *)(v45 - 144);
  if ((v47 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a41 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2169A9A64()
{
}

void sub_2169A9A6C(uint64_t ***a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *this, char *a3)
{
  v37[4] = *MEMORY[0x263EF8340];
  ArrayType = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(this);
  if (a3)
  {
    sub_216779094(&__dst, a3);
    uint64_t v6 = (std::string *)sub_216779094(&v34, a3);
    std::string v7 = std::string::append(v6, "[]");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    uint64_t v27 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)uint64_t v26 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v35) < 0) {
      operator delete((void *)v34);
    }
  }
  else
  {
    AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)this, (atomic_uint **)&v34);
    if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0) {
      Emptyunint64_t String = (uint64_t *)((v34 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
    }
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_216778F24(&__dst, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      long long v11 = *(_OWORD *)EmptyString;
      uint64_t v29 = EmptyString[2];
      long long __dst = v11;
    }
    if ((v34 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&ArrayType, (atomic_uint **)&v34);
    if ((v34 & 0xFFFFFFFFFFFFFFF8) != 0) {
      char v13 = (uint64_t *)((v34 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      char v13 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
    }
    if (*((char *)v13 + 23) < 0)
    {
      sub_216778F24(v26, (void *)*v13, v13[1]);
    }
    else
    {
      long long v14 = *(_OWORD *)v13;
      uint64_t v27 = v13[2];
      *(_OWORD *)uint64_t v26 = v14;
    }
    if ((v34 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  uint64_t v15 = *a1;
  if (SHIBYTE(v29) < 0)
  {
    sub_216778F24(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)std::string __p = __dst;
    uint64_t v25 = v29;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions((uint64_t **)this, &v23);
  v33[0] = &unk_26C755310;
  v33[1] = sub_2169C1A18;
  v33[3] = v33;
  sub_2169C20E4((char *)&v34, (long long *)__p, (long long *)&v23, 0, (uint64_t)v33);
  p_dst = (void **)&__dst;
  int v16 = sub_2169AA770(v15, (const void **)&__dst, (uint64_t)&unk_2174BFD90, (long long **)&p_dst);
  unint64_t v17 = (void **)(v16 + 7);
  if (*((char *)v16 + 79) < 0) {
    operator delete(*v17);
  }
  *(_OWORD *)unint64_t v17 = v34;
  v16[9] = v35;
  HIBYTE(v35) = 0;
  LOBYTE(v34) = 0;
  *((_OWORD *)v16 + 5) = v36[0];
  *(_OWORD *)((char *)v16 + 89) = *(_OWORD *)((char *)v36 + 9);
  sub_2169C221C(v16 + 14, (uint64_t)v37);
  sub_21699E4F4(v37);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  sub_21699E4F4(v33);
  if (SHIBYTE(v25) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v27) < 0)
  {
    sub_216778F24(v21, v26[0], (unint64_t)v26[1]);
  }
  else
  {
    *(_OWORD *)uint64_t v21 = *(_OWORD *)v26;
    uint64_t v22 = v27;
  }
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDimensions(&ArrayType, &v20);
  v32[0] = &unk_26C755310;
  v32[1] = sub_2169C1B24;
  v32[3] = v32;
  sub_2169C20E4((char *)&v34, (long long *)v21, (long long *)&v20, 1, (uint64_t)v32);
  p_dst = v26;
  unint64_t v18 = sub_2169AA770(v15, (const void **)v26, (uint64_t)&unk_2174BFD90, (long long **)&p_dst);
  uint64_t v19 = (void **)(v18 + 7);
  if (*((char *)v18 + 79) < 0) {
    operator delete(*v19);
  }
  *(_OWORD *)uint64_t v19 = v34;
  v18[9] = v35;
  HIBYTE(v35) = 0;
  LOBYTE(v34) = 0;
  *((_OWORD *)v18 + 5) = v36[0];
  *(_OWORD *)((char *)v18 + 89) = *(_OWORD *)((char *)v36 + 9);
  sub_2169C221C(v18 + 14, (uint64_t)v37);
  sub_21699E4F4(v37);
  if (SHIBYTE(v35) < 0) {
    operator delete((void *)v34);
  }
  sub_21699E4F4(v32);
  if (SHIBYTE(v22) < 0) {
    operator delete(v21[0]);
  }
  if (SHIBYTE(v27) < 0) {
    operator delete(v26[0]);
  }
  if (SHIBYTE(v29) < 0) {
    operator delete((void *)__dst);
  }
}

void sub_2169A9E78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v47 = *(void *)(v45 - 144);
  if ((v47 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a41 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2169A9F88()
{
}

uint64_t sub_2169A9F90@<X0>(uint64_t *a1@<X1>, unint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  char v5 = 0;
  uint64_t result = sub_2169AA264(&v5, a1, a2);
  *(void *)(a3 + 8) = &unk_26C7501AB;
  *(unsigned char *)a3 = v5;
  return result;
}

void sub_2169AA06C(void *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = a1[1];
  if (*a1 == v5)
  {
    uint64_t v21 = 0;
    memset(v20, 0, sizeof(v20));
    a4[1] = &off_26C7553B0;
    sub_2168F8DBC(a4, (uint64_t)v20);
    sub_2168F83DC((uint64_t)v20);
  }
  else
  {
    *(void *)&v20[0] = *a1;
    *((void *)&v20[0] + 1) = v5;
    LODWORD(v8) = 1;
    do
    {
      unint64_t v8 = (*(_DWORD *)sub_216999AD4((uint64_t *)v20, (uint64_t)a2, a3) * v8);
      sub_216999B54(v20);
    }
    while (*(void *)&v20[0] != *((void *)&v20[0] + 1));
    sub_2169AA8E8((uint64_t)v20, v8);
    sub_2169AAF5C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v9, v10);
    uint64_t v11 = v21;
    sub_2169AAF5C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v12, v13);
    uint64_t v16 = 0;
    uint64_t v18 = v11;
    uint64_t v19 = v21 + *(void *)&v20[0];
    while (v18 != v19)
    {
      unint64_t v17 = (unsigned char *)sub_2169AA95C(&v18, v14, v15);
      sub_2169AA264(v17, a2, (unint64_t *)a3);
      ++v16;
      sub_2169AA9DC(&v18);
    }
    a4[1] = &off_26C7553B0;
    sub_2168F8DBC(a4, (uint64_t)v20);
    sub_2168F83DC((uint64_t)v20);
  }
}

void sub_2169AA1AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2169AA1DC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, long long a12, uint64_t a13)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to parse at element %zd (at sub-part %zd if there are multiple parts)", v15, v16);
    if (*(char *)(v14 + 23) < 0) {
      operator delete(*(void **)v14);
    }
    *(_OWORD *)uint64_t v14 = a12;
    *(void *)(v14 + 16) = a13;
    *(void *)(v13 + 8) = 0;
    __cxa_end_catch();
    JUMPOUT(0x2169AA154);
  }
  JUMPOUT(0x2169AA1C4);
}

void sub_2169AA254()
{
}

uint64_t sub_2169AA264(unsigned char *a1, uint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *a3;
  unint64_t v4 = *a3 + 1;
  uint64_t v5 = *a2;
  if (v4 > 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3))
  {
    v11[0] = "sdf/parserHelpers.cpp";
    v11[1] = "MakeScalarValueImpl";
    v11[2] = 113;
    v11[3] = "std::enable_if_t<std::is_integral<Int>::value> pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeSca"
             "larValueImpl(Int *, const vector<Value> &, size_t &) [Int = BOOL]";
    char v12 = 0;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(MEMORY[0x263F8C230] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&v10);
    if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v8 = &v10;
    }
    else {
      unint64_t v8 = (std::string *)v10.__r_.__value_.__r.__words[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v11, 1, (pxrInternal__aapl__pxrReserved__ *)"Not enough values to parse value of type %s", (const char *)v8);
    std::string::~string(&v10);
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &unk_26C7552B8;
    __cxa_throw(exception, (struct type_info *)&unk_26C755290, (void (*)(void *))std::exception::~exception);
  }
  *a3 = v4;
  uint64_t result = sub_2169AA3A4(v5 + 56 * v3);
  *a1 = result;
  return result;
}

void sub_2169AA384(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2169AA3A4(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 48);
  if (v1 == -1) {
    sub_2168BBB60();
  }
  unint64_t v4 = &v3;
  return ((uint64_t (*)(char **, uint64_t))off_26C7552D0[v1])(&v4, a1);
}

void sub_2169AA3F8()
{
}

void sub_2169AA454()
{
}

void sub_2169AA468(std::exception *a1)
{
  std::exception::~exception(a1);

  operator delete(v1);
}

const char *sub_2169AA490()
{
  return "boost::bad_get: failed value get using boost::get";
}

BOOL sub_2169AA49C(uint64_t a1, void *a2)
{
  return *a2 != 0;
}

BOOL sub_2169AA4AC(uint64_t a1, void *a2)
{
  return *a2 != 0;
}

BOOL sub_2169AA4BC(uint64_t a1, double *a2)
{
  return *a2 != 0.0;
}

uint64_t sub_2169AA4CC(uint64_t *a1, uint64_t a2)
{
  return sub_2169AA4E0(*a1, a2);
}

uint64_t sub_2169AA4D4(pxrInternal__aapl__pxrReserved__::TfToken **a1, void *a2)
{
  return sub_2169AA554(*a1, a2);
}

uint64_t sub_2169AA4E0(uint64_t a1, uint64_t a2)
{
  char v4 = 0;
  uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_BoolFromString(a2, &v4);
  if (!v4)
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &unk_26C7552B8;
    __cxa_throw(exception, (struct type_info *)&unk_26C755290, (void (*)(void *))std::exception::~exception);
  }
  return result;
}

uint64_t sub_2169AA554(pxrInternal__aapl__pxrReserved__::TfToken *a1, void *a2)
{
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0) {
    Emptyunint64_t String = (uint64_t *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  }

  return sub_2169AA4E0((uint64_t)a1, (uint64_t)EmptyString);
}

void sub_2169AA5A4(uint64_t a1, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(&v4, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    uint64_t v5 = *((void *)a2 + 2);
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_216778F24(&v6, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    uint64_t v7 = *((void *)a2 + 5);
  }
  exception = __cxa_allocate_exception(8uLL);
  void *exception = &unk_26C7552B8;
  __cxa_throw(exception, (struct type_info *)&unk_26C755290, (void (*)(void *))std::exception::~exception);
}

void sub_2169AA658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2169AA694(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26C755310;
  result[1] = v3;
  return result;
}

uint64_t sub_2169AA6DC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C755310;
  a2[1] = v2;
  return result;
}

uint64_t sub_2169AA708(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(a1 + 8))(a2, a3, a4, *a5);
}

uint64_t sub_2169AA724(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C755390)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2169AA764()
{
  return &unk_26C755390;
}

uint64_t *sub_2169AA770(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  long long v6 = (uint64_t **)sub_21677B220((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    unint64_t v8 = v6;
    sub_2169AA81C((uint64_t)a1, a4, (uint64_t)v10);
    sub_21677B358(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    sub_21699E400((uint64_t)v10, 0);
  }
  return v7;
}

void *sub_2169AA81C@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  long long v6 = operator new(0x90uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = sub_2169AA888(v6 + 4, *a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_2169AA870(_Unwind_Exception *a1)
{
  sub_21699E400(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_2169AA888(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v3;
  }
  __dst[3] = 0;
  __dst[4] = 0;
  __dst[5] = 0;
  __dst[8] = 0;
  __dst[13] = 0;
  return __dst;
}

uint64_t sub_2169AA8E8(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  char v5 = 0;
  sub_2168F845C((void *)a1);
  long long v6 = &v5;
  sub_2169AAD2C((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_2169AA944(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2169AA95C(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    void v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>::ope"
            "rator*() [T = pxrInternal__aapl__pxrReserved__::VtArray<BOOL>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_2169AA9D4()
{
}

void *sub_2169AA9DC(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArr"
            "ay<BOOL>>::operator++() [T = pxrInternal__aapl__pxrReserved__::VtArray<BOOL>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    ++*a1;
  }
  return a1;
}

uint64_t *sub_2169AAA5C(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

atomic_uint **sub_2169AAA7C(atomic_uint **a1, atomic_uint **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2169AAC24(a1);
}

uint64_t sub_2169AAA8C()
{
  return 1;
}

unint64_t sub_2169AAA94(char ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  char v5 = 1;
  char v4 = v2;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, (pxrInternal__aapl__pxrReserved__ *)v1[4], v2);
  return bswap64(0x9E3779B97F4A7C55 * (void)v4);
}

uint64_t sub_2169AAAEC(uint64_t *a1, uint64_t *a2)
{
  return sub_216908A98(*a1, *a2);
}

uint64_t sub_2169AAAF8(uint64_t *a1, uint64_t a2)
{
  return sub_216908A98(*a1, a2);
}

uint64_t sub_2169AAB04()
{
  return 0;
}

void *sub_2169AAB10(uint64_t **a1, void *a2)
{
  long long v3 = *a1;
  uint64_t v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, void *))sub_2169AAD18);
  return a2;
}

void *sub_2169AAB64()
{
  return &unk_26C74E160;
}

uint64_t sub_2169AAB70()
{
  return 1;
}

uint64_t sub_2169AAB78()
{
  return MEMORY[0x263F8C230];
}

uint64_t sub_2169AAB84(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_2169AAB8C(uint64_t a1)
{
  return **(void **)a1;
}

BOOL sub_2169AAB98(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x80000002174E465ELL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2169AABD4(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74E160, a2, a3);
}

void *sub_2169AABF8()
{
  return &unk_26C74E160;
}

uint64_t sub_2169AAC04(uint64_t a1)
{
  return *(void *)a1;
}

void *sub_2169AAC0C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  a2[1] = &off_26C7553B0;
  return sub_2168F8DBC(a2, v2);
}

atomic_uint **sub_2169AAC24(atomic_uint **a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit(v2 + 10, 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_2168F83DC((uint64_t)v2);
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_2169AAC7C(_OWORD **a1)
{
  unsigned int v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    long long v3 = operator new(0x30uLL);
    char v4 = *a1;
    long long v5 = (*a1)[1];
    *(_OWORD *)long long v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    uint64_t v6 = *((void *)v4 + 4);
    *((void *)v3 + 4) = v6;
    if (v6)
    {
      int v7 = (atomic_ullong *)*((void *)v3 + 3);
      unint64_t v8 = (atomic_ullong *)(v6 - 16);
      if (!v7) {
        int v7 = v8;
      }
      atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
      char v4 = *a1;
    }
    atomic_store(0, (unsigned int *)v3 + 10);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 10, 1u, memory_order_relaxed);
    std::string v10 = (atomic_uint *)v4;
    *a1 = v3;
    sub_2169AAC24(&v10);
  }
  return (uint64_t)*a1;
}

uint64_t sub_2169AAD18(void *a1)
{
  return pxrInternal__aapl__pxrReserved__::VtStreamOut();
}

void sub_2169AAD2C(unint64_t *a1, unint64_t a2, unsigned char **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    int v7 = (unint64_t *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              std::string v10 = sub_2169AAECC((uint64_t)a1, a2);
              int v7 = v10;
              if (v3)
              {
                for (uint64_t i = 0; i != v3; ++i)
                  *((unsigned char *)v10 + i) = *(unsigned char *)(v9 + i);
              }
            }
            char v12 = *a3;
            do
              *((unsigned char *)v7 + v3++) = *v12;
            while (a2 != v3);
          }
          uint64_t v13 = v7;
          goto LABEL_30;
        }
        int v7 = (unint64_t *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v17 = a2;
      }
      else {
        unint64_t v17 = *a1;
      }
      uint64_t v18 = sub_2169AAECC((uint64_t)a1, a2);
      uint64_t v13 = v18;
      if (v17)
      {
        uint64_t v19 = v18;
        do
        {
          char v20 = *(unsigned char *)v7;
          int v7 = (unint64_t *)((char *)v7 + 1);
          *(unsigned char *)uint64_t v19 = v20;
          uint64_t v19 = (unint64_t *)((char *)v19 + 1);
          --v17;
        }
        while (v17);
      }
      if (v3 < a2)
      {
        uint64_t v21 = *a3;
        do
          *((unsigned char *)v18 + v3++) = *v21;
        while (a2 != v3);
      }
      goto LABEL_30;
    }
    uint64_t v14 = sub_2169AAECC((uint64_t)a1, a2);
    uint64_t v13 = v14;
    uint64_t v15 = 0;
    uint64_t v16 = *a3;
    do
      *((unsigned char *)v14 + v15++) = *v16;
    while (a2 != v15);
LABEL_30:
    if (v13 != (unint64_t *)a1[4])
    {
      sub_2168F83DC((uint64_t)a1);
      a1[4] = (unint64_t)v13;
    }
    *a1 = a2;
    return;
  }

  sub_2168F845C(a1);
}

void *sub_2169AAECC(uint64_t a1, unint64_t a2)
{
  sub_216851EE4((uint64_t)&v7, "VtArray::_AllocateNew", "value_type *pxrInternal__aapl__pxrReserved__::VtArray<BOOL>::_AllocateNew(size_t) [T = BOOL]");
  if (a2 >= 0xFFFFFFFFFFFFFFF0) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = a2 + 16;
  }
  char v4 = operator new(v3);
  void *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_2169AAF44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2169AAF5C(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    if (*((void *)this + 3) || (unint64_t v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<BOOL>::_DetachIfNotUnique() [T = BOOL]", a3);
      uint64_t v6 = (char *)*((void *)this + 4);
      uint64_t v7 = *(void *)this;
      int v8 = sub_2169AAECC((uint64_t)this, *(void *)this);
      unint64_t v9 = v8;
      if (v7)
      {
        std::string v10 = v8;
        do
        {
          char v11 = *v6++;
          *v10++ = v11;
          --v7;
        }
        while (v7);
      }
      sub_2168F83DC((uint64_t)this);
      *((void *)this + 4) = v9;
    }
  }
}

uint64_t sub_2169AAFF0@<X0>(uint64_t *a1@<X1>, unint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  char v5 = 0;
  uint64_t result = sub_2169AB2C4(&v5, a1, a2);
  *(void *)(a3 + 8) = &unk_26C75031B;
  *(unsigned char *)a3 = v5;
  return result;
}

void sub_2169AB0CC(void *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = a1[1];
  if (*a1 == v5)
  {
    uint64_t v21 = 0;
    memset(v20, 0, sizeof(v20));
    a4[1] = &off_26C74FB20;
    sub_2168F8DBC(a4, (uint64_t)v20);
    sub_2168F83DC((uint64_t)v20);
  }
  else
  {
    *(void *)&v20[0] = *a1;
    *((void *)&v20[0] + 1) = v5;
    LODWORD(v8) = 1;
    do
    {
      unint64_t v8 = (*(_DWORD *)sub_216999AD4((uint64_t *)v20, (uint64_t)a2, a3) * v8);
      sub_216999B54(v20);
    }
    while (*(void *)&v20[0] != *((void *)&v20[0] + 1));
    sub_21690833C((uint64_t)v20, v8);
    sub_216908624((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v9, v10);
    uint64_t v11 = v21;
    sub_216908624((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v12, v13);
    uint64_t v16 = 0;
    uint64_t v18 = v11;
    uint64_t v19 = v21 + *(void *)&v20[0];
    while (v18 != v19)
    {
      unint64_t v17 = (unsigned char *)sub_2169AB964(&v18, v14, v15);
      sub_2169AB2C4(v17, a2, (unint64_t *)a3);
      ++v16;
      sub_2169AB9E4(&v18);
    }
    a4[1] = &off_26C74FB20;
    sub_2168F8DBC(a4, (uint64_t)v20);
    sub_2168F83DC((uint64_t)v20);
  }
}

void sub_2169AB20C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2169AB23C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, long long a12, uint64_t a13)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to parse at element %zd (at sub-part %zd if there are multiple parts)", v15, v16);
    if (*(char *)(v14 + 23) < 0) {
      operator delete(*(void **)v14);
    }
    *(_OWORD *)uint64_t v14 = a12;
    *(void *)(v14 + 16) = a13;
    *(void *)(v13 + 8) = 0;
    __cxa_end_catch();
    JUMPOUT(0x2169AB1B4);
  }
  JUMPOUT(0x2169AB224);
}

void sub_2169AB2B4()
{
}

uint64_t sub_2169AB2C4(unsigned char *a1, uint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *a3;
  unint64_t v4 = *a3 + 1;
  uint64_t v5 = *a2;
  if (v4 > 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3))
  {
    v11[0] = "sdf/parserHelpers.cpp";
    v11[1] = "MakeScalarValueImpl";
    v11[2] = 113;
    v11[3] = "std::enable_if_t<std::is_integral<Int>::value> pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeSca"
             "larValueImpl(Int *, const vector<Value> &, size_t &) [Int = unsigned char]";
    char v12 = 0;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(MEMORY[0x263F8C250] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&v10);
    if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v8 = &v10;
    }
    else {
      unint64_t v8 = (std::string *)v10.__r_.__value_.__r.__words[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v11, 1, (pxrInternal__aapl__pxrReserved__ *)"Not enough values to parse value of type %s", (const char *)v8);
    std::string::~string(&v10);
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &unk_26C7552B8;
    __cxa_throw(exception, (struct type_info *)&unk_26C755290, (void (*)(void *))std::exception::~exception);
  }
  *a3 = v4;
  uint64_t result = sub_2169AB400(v5 + 56 * v3);
  *a1 = result;
  return result;
}

void sub_2169AB3E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2169AB400(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 48);
  if (v1 == -1) {
    sub_2168BBB60();
  }
  unint64_t v4 = &v3;
  return ((uint64_t (*)(char **, uint64_t))off_26C755468[v1])(&v4, a1);
}

void sub_2169AB454()
{
}

void sub_2169AB4B0()
{
}

uint64_t sub_2169AB4C4(uint64_t *a1, unint64_t *a2)
{
  return sub_2169AB4F4(*a1, *a2);
}

uint64_t sub_2169AB4D0(uint64_t *a1, uint64_t *a2)
{
  return sub_2169AB5A0(*a1, *a2);
}

uint64_t sub_2169AB4DC(uint64_t a1, double *a2)
{
  return sub_2169AB654(*a2);
}

uint64_t sub_2169AB4F4(uint64_t a1, unint64_t a2)
{
  unsigned __int8 v2 = a2;
  sub_216912AE4((uint64_t)&v4, 2 * (a2 > 0xFF));
  return v2;
}

uint64_t sub_2169AB5A0(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2 = a2;
  if (a2 < 0) {
    int v3 = 1;
  }
  else {
    int v3 = 2 * (a2 > 255);
  }
  sub_216912AE4((uint64_t)&v5, v3);
  return v2;
}

uint64_t sub_2169AB654(double a1)
{
  if ((*(void *)&a1 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &unk_26C7552B8;
    __cxa_throw(exception, (struct type_info *)&unk_26C755290, (void (*)(void *))std::exception::~exception);
  }
  return sub_2169AB6C4(a1);
}

uint64_t sub_2169AB6C4(double a1)
{
  return sub_216917184(a1);
}

void sub_2169AB750(uint64_t a1, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(&v3, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    uint64_t v4 = *((void *)a2 + 2);
  }
  exception = __cxa_allocate_exception(8uLL);
  void *exception = &unk_26C7552B8;
  __cxa_throw(exception, (struct type_info *)&unk_26C755290, (void (*)(void *))std::exception::~exception);
}

void sub_2169AB7D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2169AB7F0(uint64_t a1, void *a2)
{
  if ((*a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*a2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed);
  }
  exception = __cxa_allocate_exception(8uLL);
  void *exception = &unk_26C7552B8;
  __cxa_throw(exception, (struct type_info *)&unk_26C755290, (void (*)(void *))std::exception::~exception);
}

void sub_2169AB87C(uint64_t a1, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(&v4, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    uint64_t v5 = *((void *)a2 + 2);
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_216778F24(&v6, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    uint64_t v7 = *((void *)a2 + 5);
  }
  exception = __cxa_allocate_exception(8uLL);
  void *exception = &unk_26C7552B8;
  __cxa_throw(exception, (struct type_info *)&unk_26C755290, (void (*)(void *))std::exception::~exception);
}

void sub_2169AB930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2169AB964(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    void v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArray<unsigned ch"
            "ar>>::operator*() [T = pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_2169AB9DC()
{
}

void *sub_2169AB9E4(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArr"
            "ay<unsigned char>>::operator++() [T = pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    ++*a1;
  }
  return a1;
}

uint64_t sub_2169ABA64@<X0>(uint64_t *a1@<X1>, unint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  int v5 = 0;
  uint64_t result = sub_2169ABD38(&v5, a1, a2);
  *(void *)(a3 + 8) = &unk_26C750543;
  *(_DWORD *)a3 = v5;
  return result;
}

void sub_2169ABB40(void *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = a1[1];
  if (*a1 == v5)
  {
    uint64_t v21 = 0;
    memset(v20, 0, sizeof(v20));
    a4[1] = &off_26C74FA68;
    sub_2168F8DBC(a4, (uint64_t)v20);
    sub_2168F83DC((uint64_t)v20);
  }
  else
  {
    *(void *)&v20[0] = *a1;
    *((void *)&v20[0] + 1) = v5;
    LODWORD(v8) = 1;
    do
    {
      unint64_t v8 = (*(_DWORD *)sub_216999AD4((uint64_t *)v20, (uint64_t)a2, a3) * v8);
      sub_216999B54(v20);
    }
    while (*(void *)&v20[0] != *((void *)&v20[0] + 1));
    sub_216907954((uint64_t)v20, v8);
    sub_216907C74((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v9, v10);
    uint64_t v11 = v21;
    sub_216907C74((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v12, v13);
    uint64_t v16 = 0;
    uint64_t v18 = v11;
    uint64_t v19 = v21 + 4 * *(void *)&v20[0];
    while (v18 != v19)
    {
      unint64_t v17 = (_DWORD *)sub_2169AC430(&v18, v14, v15);
      sub_2169ABD38(v17, a2, (unint64_t *)a3);
      ++v16;
      sub_2169AC4B0(&v18);
    }
    a4[1] = &off_26C74FA68;
    sub_2168F8DBC(a4, (uint64_t)v20);
    sub_2168F83DC((uint64_t)v20);
  }
}

void sub_2169ABC80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2169ABCB0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, long long a12, uint64_t a13)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to parse at element %zd (at sub-part %zd if there are multiple parts)", v15, v16);
    if (*(char *)(v14 + 23) < 0) {
      operator delete(*(void **)v14);
    }
    *(_OWORD *)uint64_t v14 = a12;
    *(void *)(v14 + 16) = a13;
    *(void *)(v13 + 8) = 0;
    __cxa_end_catch();
    JUMPOUT(0x2169ABC28);
  }
  JUMPOUT(0x2169ABC98);
}

void sub_2169ABD28()
{
}

uint64_t sub_2169ABD38(_DWORD *a1, uint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *a3;
  unint64_t v4 = *a3 + 1;
  uint64_t v5 = *a2;
  if (v4 > 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3))
  {
    v11[0] = "sdf/parserHelpers.cpp";
    v11[1] = "MakeScalarValueImpl";
    v11[2] = 113;
    v11[3] = "std::enable_if_t<std::is_integral<Int>::value> pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeSca"
             "larValueImpl(Int *, const vector<Value> &, size_t &) [Int = int]";
    char v12 = 0;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(MEMORY[0x263F8C258] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&v10);
    if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v8 = &v10;
    }
    else {
      unint64_t v8 = (std::string *)v10.__r_.__value_.__r.__words[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v11, 1, (pxrInternal__aapl__pxrReserved__ *)"Not enough values to parse value of type %s", (const char *)v8);
    std::string::~string(&v10);
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &unk_26C7552B8;
    __cxa_throw(exception, (struct type_info *)&unk_26C755290, (void (*)(void *))std::exception::~exception);
  }
  *a3 = v4;
  uint64_t result = sub_2169ABE74(v5 + 56 * v3);
  *a1 = result;
  return result;
}

void sub_2169ABE58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2169ABE74(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 48);
  if (v1 == -1) {
    sub_2168BBB60();
  }
  unint64_t v4 = &v3;
  return ((uint64_t (*)(char **, uint64_t))off_26C755498[v1])(&v4, a1);
}

void sub_2169ABEC8()
{
}

void sub_2169ABF24()
{
}

uint64_t sub_2169ABF38(uint64_t *a1, uint64_t *a2)
{
  return sub_2169ABF68(*a1, *a2);
}

int64_t sub_2169ABF44(uint64_t *a1, int64_t *a2)
{
  return sub_2169AC014(*a1, *a2);
}

uint64_t sub_2169ABF50(uint64_t a1, double *a2)
{
  return sub_2169AC0D0(*a2);
}

uint64_t sub_2169ABF68(uint64_t a1, uint64_t a2)
{
  sub_216912AE4((uint64_t)&v4, 2 * ((a2 & 0xFFFFFFFF80000000) != 0));
  return a2;
}

int64_t sub_2169AC014(uint64_t a1, int64_t a2)
{
  if (a2 <= (uint64_t)0xFFFFFFFF7FFFFFFFLL) {
    int v3 = 1;
  }
  else {
    int v3 = 2 * (a2 > 0x7FFFFFFF);
  }
  sub_216912AE4((uint64_t)&v5, v3);
  return a2;
}

uint64_t sub_2169AC0D0(double a1)
{
  if ((*(void *)&a1 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &unk_26C7552B8;
    __cxa_throw(exception, (struct type_info *)&unk_26C755290, (void (*)(void *))std::exception::~exception);
  }
  return sub_2169AC140(a1);
}

uint64_t sub_2169AC140(double a1)
{
  if (a1 <= -2147483650.0) {
    int v2 = 1;
  }
  else {
    int v2 = 2 * (a1 >= 2147483650.0);
  }
  sub_216912AE4((uint64_t)&v6, v2);
  double v3 = ceil(a1);
  double v4 = floor(a1);
  if (a1 >= 0.0) {
    double v3 = v4;
  }
  return (int)v3;
}

void sub_2169AC21C(uint64_t a1, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(&v3, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    uint64_t v4 = *((void *)a2 + 2);
  }
  exception = __cxa_allocate_exception(8uLL);
  void *exception = &unk_26C7552B8;
  __cxa_throw(exception, (struct type_info *)&unk_26C755290, (void (*)(void *))std::exception::~exception);
}

void sub_2169AC2A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2169AC2BC(uint64_t a1, void *a2)
{
  if ((*a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*a2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed);
  }
  exception = __cxa_allocate_exception(8uLL);
  void *exception = &unk_26C7552B8;
  __cxa_throw(exception, (struct type_info *)&unk_26C755290, (void (*)(void *))std::exception::~exception);
}

void sub_2169AC348(uint64_t a1, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(&v4, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    uint64_t v5 = *((void *)a2 + 2);
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_216778F24(&v6, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    uint64_t v7 = *((void *)a2 + 5);
  }
  exception = __cxa_allocate_exception(8uLL);
  void *exception = &unk_26C7552B8;
  __cxa_throw(exception, (struct type_info *)&unk_26C755290, (void (*)(void *))std::exception::~exception);
}

void sub_2169AC3FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2169AC430(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    void v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArray<int>>::oper"
            "ator*() [T = pxrInternal__aapl__pxrReserved__::VtArray<int>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_2169AC4A8()
{
}

void *sub_2169AC4B0(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArr"
            "ay<int>>::operator++() [T = pxrInternal__aapl__pxrReserved__::VtArray<int>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 4;
  }
  return a1;
}

uint64_t sub_2169AC530@<X0>(uint64_t *a1@<X1>, unint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  int v5 = 0;
  uint64_t result = sub_2169AC804(&v5, a1, a2);
  *(void *)(a3 + 8) = &unk_26C7505FB;
  *(_DWORD *)a3 = v5;
  return result;
}

void sub_2169AC60C(void *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = a1[1];
  if (*a1 == v5)
  {
    uint64_t v21 = 0;
    memset(v20, 0, sizeof(v20));
    a4[1] = &off_26C74F9B0;
    sub_2168F8DBC(a4, (uint64_t)v20);
    sub_2168F83DC((uint64_t)v20);
  }
  else
  {
    *(void *)&v20[0] = *a1;
    *((void *)&v20[0] + 1) = v5;
    LODWORD(v8) = 1;
    do
    {
      unint64_t v8 = (*(_DWORD *)sub_216999AD4((uint64_t *)v20, (uint64_t)a2, a3) * v8);
      sub_216999B54(v20);
    }
    while (*(void *)&v20[0] != *((void *)&v20[0] + 1));
    sub_216906CDC((uint64_t)v20, v8);
    sub_216907098((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v9, v10);
    uint64_t v11 = v21;
    sub_216907098((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v12, v13);
    uint64_t v16 = 0;
    uint64_t v18 = v11;
    uint64_t v19 = v21 + 4 * *(void *)&v20[0];
    while (v18 != v19)
    {
      unint64_t v17 = (_DWORD *)sub_2169ACEF8(&v18, v14, v15);
      sub_2169AC804(v17, a2, (unint64_t *)a3);
      ++v16;
      sub_2169ACF78(&v18);
    }
    a4[1] = &off_26C74F9B0;
    sub_2168F8DBC(a4, (uint64_t)v20);
    sub_2168F83DC((uint64_t)v20);
  }
}

void sub_2169AC74C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2169AC77C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, long long a12, uint64_t a13)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to parse at element %zd (at sub-part %zd if there are multiple parts)", v15, v16);
    if (*(char *)(v14 + 23) < 0) {
      operator delete(*(void **)v14);
    }
    *(_OWORD *)uint64_t v14 = a12;
    *(void *)(v14 + 16) = a13;
    *(void *)(v13 + 8) = 0;
    __cxa_end_catch();
    JUMPOUT(0x2169AC6F4);
  }
  JUMPOUT(0x2169AC764);
}

void sub_2169AC7F4()
{
}

uint64_t sub_2169AC804(_DWORD *a1, uint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *a3;
  unint64_t v4 = *a3 + 1;
  uint64_t v5 = *a2;
  if (v4 > 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3))
  {
    v11[0] = "sdf/parserHelpers.cpp";
    v11[1] = "MakeScalarValueImpl";
    v11[2] = 113;
    v11[3] = "std::enable_if_t<std::is_integral<Int>::value> pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeSca"
             "larValueImpl(Int *, const vector<Value> &, size_t &) [Int = unsigned int]";
    char v12 = 0;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(MEMORY[0x263F8C260] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&v10);
    if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v8 = &v10;
    }
    else {
      unint64_t v8 = (std::string *)v10.__r_.__value_.__r.__words[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v11, 1, (pxrInternal__aapl__pxrReserved__ *)"Not enough values to parse value of type %s", (const char *)v8);
    std::string::~string(&v10);
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &unk_26C7552B8;
    __cxa_throw(exception, (struct type_info *)&unk_26C755290, (void (*)(void *))std::exception::~exception);
  }
  *a3 = v4;
  uint64_t result = sub_2169AC940(v5 + 56 * v3);
  *a1 = result;
  return result;
}

void sub_2169AC924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2169AC940(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 48);
  if (v1 == -1) {
    sub_2168BBB60();
  }
  unint64_t v4 = &v3;
  return ((uint64_t (*)(char **, uint64_t))off_26C7554C8[v1])(&v4, a1);
}

void sub_2169AC994()
{
}

void sub_2169AC9F0()
{
}

unint64_t sub_2169ACA04(uint64_t *a1, unint64_t *a2)
{
  return sub_2169ACA34(*a1, *a2);
}

uint64_t sub_2169ACA10(uint64_t *a1, uint64_t *a2)
{
  return sub_2169ACAE4(*a1, *a2);
}

uint64_t sub_2169ACA1C(uint64_t a1, double *a2)
{
  return sub_2169ACB9C(*a2);
}

unint64_t sub_2169ACA34(uint64_t a1, unint64_t a2)
{
  sub_216912AE4((uint64_t)&v4, 2 * (HIDWORD(a2) != 0));
  return a2;
}

uint64_t sub_2169ACAE4(uint64_t a1, uint64_t a2)
{
  if (a2 < 0) {
    int v3 = 1;
  }
  else {
    int v3 = 2 * (a2 > 0xFFFFFFFFLL);
  }
  sub_216912AE4((uint64_t)&v5, v3);
  return a2;
}

uint64_t sub_2169ACB9C(double a1)
{
  if ((*(void *)&a1 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &unk_26C7552B8;
    __cxa_throw(exception, (struct type_info *)&unk_26C755290, (void (*)(void *))std::exception::~exception);
  }
  return sub_2169ACC0C(a1);
}

uint64_t sub_2169ACC0C(double a1)
{
  if (a1 <= -1.0) {
    int v2 = 1;
  }
  else {
    int v2 = 2 * (a1 >= 4294967300.0);
  }
  sub_216912AE4((uint64_t)&v6, v2);
  double v3 = ceil(a1);
  double v4 = floor(a1);
  if (a1 >= 0.0) {
    return v4;
  }
  return v3;
}

void sub_2169ACCE4(uint64_t a1, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(&v3, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    uint64_t v4 = *((void *)a2 + 2);
  }
  exception = __cxa_allocate_exception(8uLL);
  void *exception = &unk_26C7552B8;
  __cxa_throw(exception, (struct type_info *)&unk_26C755290, (void (*)(void *))std::exception::~exception);
}

void sub_2169ACD68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2169ACD84(uint64_t a1, void *a2)
{
  if ((*a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*a2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed);
  }
  exception = __cxa_allocate_exception(8uLL);
  void *exception = &unk_26C7552B8;
  __cxa_throw(exception, (struct type_info *)&unk_26C755290, (void (*)(void *))std::exception::~exception);
}

void sub_2169ACE10(uint64_t a1, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(&v4, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    uint64_t v5 = *((void *)a2 + 2);
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_216778F24(&v6, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    uint64_t v7 = *((void *)a2 + 5);
  }
  exception = __cxa_allocate_exception(8uLL);
  void *exception = &unk_26C7552B8;
  __cxa_throw(exception, (struct type_info *)&unk_26C755290, (void (*)(void *))std::exception::~exception);
}

void sub_2169ACEC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2169ACEF8(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    void v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArray<unsigned in"
            "t>>::operator*() [T = pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_2169ACF70()
{
}

void *sub_2169ACF78(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArr"
            "ay<unsigned int>>::operator++() [T = pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 4;
  }
  return a1;
}

uint64_t sub_2169ACFF8@<X0>(uint64_t *a1@<X1>, unint64_t *a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = 0;
  uint64_t result = sub_2169AD2C8(&v5, a1, a2);
  *a3 = v5;
  a3[1] = &unk_26C750823;
  return result;
}

void sub_2169AD0D0(void *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = a1[1];
  if (*a1 == v5)
  {
    uint64_t v21 = 0;
    memset(v20, 0, sizeof(v20));
    a4[1] = &off_26C755528;
    sub_2168F8DBC(a4, (uint64_t)v20);
    sub_2168F83DC((uint64_t)v20);
  }
  else
  {
    *(void *)&v20[0] = *a1;
    *((void *)&v20[0] + 1) = v5;
    LODWORD(v8) = 1;
    do
    {
      unint64_t v8 = (*(_DWORD *)sub_216999AD4((uint64_t *)v20, (uint64_t)a2, a3) * v8);
      sub_216999B54(v20);
    }
    while (*(void *)&v20[0] != *((void *)&v20[0] + 1));
    sub_2169AD8FC((uint64_t)v20, v8);
    sub_2169AE038((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v9, v10);
    uint64_t v11 = v21;
    sub_2169AE038((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v12, v13);
    uint64_t v16 = 0;
    uint64_t v18 = v11;
    uint64_t v19 = v21 + 8 * *(void *)&v20[0];
    while (v18 != v19)
    {
      unint64_t v17 = (uint64_t *)sub_2169AD970(&v18, v14, v15);
      sub_2169AD2C8(v17, a2, (unint64_t *)a3);
      ++v16;
      sub_2169AD9F0(&v18);
    }
    a4[1] = &off_26C755528;
    sub_2168F8DBC(a4, (uint64_t)v20);
    sub_2168F83DC((uint64_t)v20);
  }
}

void sub_2169AD210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2169AD240(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, long long a12, uint64_t a13)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to parse at element %zd (at sub-part %zd if there are multiple parts)", v15, v16);
    if (*(char *)(v14 + 23) < 0) {
      operator delete(*(void **)v14);
    }
    *(_OWORD *)uint64_t v14 = a12;
    *(void *)(v14 + 16) = a13;
    *(void *)(v13 + 8) = 0;
    __cxa_end_catch();
    JUMPOUT(0x2169AD1B8);
  }
  JUMPOUT(0x2169AD228);
}

void sub_2169AD2B8()
{
}

uint64_t sub_2169AD2C8(uint64_t *a1, uint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *a3;
  unint64_t v4 = *a3 + 1;
  uint64_t v5 = *a2;
  if (v4 > 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3))
  {
    v11[0] = "sdf/parserHelpers.cpp";
    v11[1] = "MakeScalarValueImpl";
    v11[2] = 113;
    v11[3] = "std::enable_if_t<std::is_integral<Int>::value> pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeSca"
             "larValueImpl(Int *, const vector<Value> &, size_t &) [Int = long long]";
    char v12 = 0;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(MEMORY[0x263F8C290] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&v10);
    if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v8 = &v10;
    }
    else {
      unint64_t v8 = (std::string *)v10.__r_.__value_.__r.__words[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v11, 1, (pxrInternal__aapl__pxrReserved__ *)"Not enough values to parse value of type %s", (const char *)v8);
    std::string::~string(&v10);
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &unk_26C7552B8;
    __cxa_throw(exception, (struct type_info *)&unk_26C755290, (void (*)(void *))std::exception::~exception);
  }
  *a3 = v4;
  uint64_t result = sub_2169AD404(v5 + 56 * v3);
  *a1 = result;
  return result;
}

void sub_2169AD3E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2169AD404(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 48);
  if (v1 == -1) {
    sub_2168BBB60();
  }
  unint64_t v4 = &v3;
  return ((uint64_t (*)(char **, uint64_t))off_26C7554F8[v1])(&v4, a1);
}

void sub_2169AD458()
{
}

void sub_2169AD4B4()
{
}

unint64_t sub_2169AD4C8(uint64_t *a1, unint64_t *a2)
{
  return sub_2169AD4F4(*a1, *a2);
}

uint64_t sub_2169AD4D4(uint64_t a1, uint64_t a2)
{
  return *(void *)a2;
}

uint64_t sub_2169AD4DC(uint64_t a1, double *a2)
{
  return sub_2169AD59C(*a2);
}

unint64_t sub_2169AD4F4(uint64_t a1, unint64_t a2)
{
  sub_216912AE4((uint64_t)&v4, (a2 >> 62) & 2);
  return a2;
}

uint64_t sub_2169AD59C(double a1)
{
  if ((*(void *)&a1 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &unk_26C7552B8;
    __cxa_throw(exception, (struct type_info *)&unk_26C755290, (void (*)(void *))std::exception::~exception);
  }
  return sub_2169AD60C(a1);
}

uint64_t sub_2169AD60C(double a1)
{
  if (a1 <= -9.22337204e18) {
    int v2 = 1;
  }
  else {
    int v2 = 2 * (a1 >= 9.22337204e18);
  }
  sub_216912AE4((uint64_t)&v6, v2);
  double v3 = ceil(a1);
  double v4 = floor(a1);
  if (a1 >= 0.0) {
    return (uint64_t)v4;
  }
  return (uint64_t)v3;
}

void sub_2169AD6E8(uint64_t a1, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(&v3, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    uint64_t v4 = *((void *)a2 + 2);
  }
  exception = __cxa_allocate_exception(8uLL);
  void *exception = &unk_26C7552B8;
  __cxa_throw(exception, (struct type_info *)&unk_26C755290, (void (*)(void *))std::exception::~exception);
}

void sub_2169AD76C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2169AD788(uint64_t a1, void *a2)
{
  if ((*a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*a2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed);
  }
  exception = __cxa_allocate_exception(8uLL);
  void *exception = &unk_26C7552B8;
  __cxa_throw(exception, (struct type_info *)&unk_26C755290, (void (*)(void *))std::exception::~exception);
}

void sub_2169AD814(uint64_t a1, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(&v4, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    uint64_t v5 = *((void *)a2 + 2);
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_216778F24(&v6, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    uint64_t v7 = *((void *)a2 + 5);
  }
  exception = __cxa_allocate_exception(8uLL);
  void *exception = &unk_26C7552B8;
  __cxa_throw(exception, (struct type_info *)&unk_26C755290, (void (*)(void *))std::exception::~exception);
}

void sub_2169AD8C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2169AD8FC(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v5 = 0;
  sub_2168F845C((void *)a1);
  long long v6 = &v5;
  sub_2169ADDD0((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_2169AD958(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2169AD970(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    void v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArray<long long>>"
            "::operator*() [T = pxrInternal__aapl__pxrReserved__::VtArray<long long>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_2169AD9E8()
{
}

void *sub_2169AD9F0(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArr"
            "ay<long long>>::operator++() [T = pxrInternal__aapl__pxrReserved__::VtArray<long long>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

uint64_t *sub_2169ADA70(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

atomic_uint **sub_2169ADA90(atomic_uint **a1, atomic_uint **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2169ADC3C(a1);
}

uint64_t sub_2169ADAA0()
{
  return 1;
}

unint64_t sub_2169ADAA8(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  char v5 = 1;
  uint64_t v4 = v2;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, (pxrInternal__aapl__pxrReserved__ *)v1[4], (char *)(8 * v2));
  return bswap64(0x9E3779B97F4A7C55 * v4);
}

uint64_t sub_2169ADB04(uint64_t *a1, uint64_t *a2)
{
  return sub_2169ADC94(*a1, *a2);
}

uint64_t sub_2169ADB10(uint64_t *a1, uint64_t a2)
{
  return sub_2169ADC94(*a1, a2);
}

uint64_t sub_2169ADB1C()
{
  return 0;
}

void *sub_2169ADB28(uint64_t **a1, void *a2)
{
  long long v3 = *a1;
  uint64_t v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, void *))sub_2169ADDB8);
  return a2;
}

void *sub_2169ADB7C()
{
  return &unk_26C74E208;
}

uint64_t sub_2169ADB88()
{
  return 1;
}

uint64_t sub_2169ADB90()
{
  return MEMORY[0x263F8C290];
}

uint64_t sub_2169ADB9C(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_2169ADBA4(uint64_t a1)
{
  return **(void **)a1;
}

BOOL sub_2169ADBB0(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x80000002174695E8 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2169ADBEC(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74E208, a2, a3);
}

void *sub_2169ADC10()
{
  return &unk_26C74E208;
}

uint64_t sub_2169ADC1C(uint64_t a1)
{
  return *(void *)a1;
}

void *sub_2169ADC24@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  a2[1] = &off_26C755528;
  return sub_2168F8DBC(a2, v2);
}

atomic_uint **sub_2169ADC3C(atomic_uint **a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit(v2 + 10, 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_2168F83DC((uint64_t)v2);
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_2169ADC94(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 32) == *(void *)(a2 + 32)
    && sub_2168F8C2C(a1, a2)
    && *(void *)(a1 + 24) == *(void *)(a2 + 24))
  {
    return 1;
  }
  uint64_t result = sub_2168F8C2C(a1, a2);
  if (result) {
    return memcmp(*(const void **)(a1 + 32), *(const void **)(a2 + 32), 8 * *(void *)a1) == 0;
  }
  return result;
}

uint64_t sub_2169ADD1C(_OWORD **a1)
{
  unsigned int v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    long long v3 = operator new(0x30uLL);
    uint64_t v4 = *a1;
    long long v5 = (*a1)[1];
    *(_OWORD *)long long v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    uint64_t v6 = *((void *)v4 + 4);
    *((void *)v3 + 4) = v6;
    if (v6)
    {
      int v7 = (atomic_ullong *)*((void *)v3 + 3);
      unint64_t v8 = (atomic_ullong *)(v6 - 16);
      if (!v7) {
        int v7 = v8;
      }
      atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
      uint64_t v4 = *a1;
    }
    atomic_store(0, (unsigned int *)v3 + 10);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 10, 1u, memory_order_relaxed);
    std::string v10 = (atomic_uint *)v4;
    *a1 = v3;
    sub_2169ADC3C(&v10);
  }
  return (uint64_t)*a1;
}

uint64_t sub_2169ADDB8(void *a1)
{
  *a1 += 8;
  return std::ostream::operator<<();
}

void sub_2169ADDD0(unint64_t *a1, unint64_t a2, uint64_t **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    int v7 = (uint64_t *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load((unint64_t *)v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              std::string v10 = sub_2169ADF98((uint64_t)a1, a2);
              int v7 = v10;
              if (v3)
              {
                for (uint64_t i = 0; i != v3; ++i)
                  v10[i] = *(void *)(v9 + i * 8);
              }
            }
            char v12 = *a3;
            uint64_t v13 = v3;
            do
              v7[v13++] = *v12;
            while (a2 != v13);
          }
          uint64_t v14 = v7;
          goto LABEL_31;
        }
        int v7 = (uint64_t *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v19 = a2;
      }
      else {
        unint64_t v19 = *a1;
      }
      char v20 = sub_2169ADF98((uint64_t)a1, a2);
      uint64_t v14 = v20;
      if (v19)
      {
        uint64_t v21 = 8 * v19;
        uint64_t v22 = v20;
        do
        {
          uint64_t v23 = *v7++;
          *v22++ = v23;
          v21 -= 8;
        }
        while (v21);
      }
      if (v3 < a2)
      {
        int v24 = *a3;
        uint64_t v25 = v3;
        do
          v20[v25++] = *v24;
        while (a2 != v25);
      }
      goto LABEL_31;
    }
    uint64_t v15 = 8 * a2;
    if (8 * a2 / a2 == 8)
    {
      uint64_t v16 = sub_2169ADF98((uint64_t)a1, a2);
      uint64_t v14 = v16;
      unint64_t v17 = 0;
      uint64_t v18 = *a3;
      do
      {
        v16[v17 / 8] = *v18;
        v17 += 8;
      }
      while (v15 != v17);
LABEL_31:
      if (v14 != (uint64_t *)a1[4])
      {
        sub_2168F83DC((uint64_t)a1);
        a1[4] = (unint64_t)v14;
      }
      *a1 = a2;
      return;
    }
  }

  sub_2168F845C(a1);
}

void *sub_2169ADF98(uint64_t a1, unint64_t a2)
{
  sub_216851EE4((uint64_t)&v7, "VtArray::_AllocateNew", "value_type *pxrInternal__aapl__pxrReserved__::VtArray<long long>::_AllocateNew(size_t) [T = long long]");
  if (a2 > 0x1FFFFFFFFFFFFFFDLL) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 8 * a2 + 16;
  }
  uint64_t v4 = operator new(v3);
  void *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_2169AE020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2169AE038(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    if (*((void *)this + 3) || (unint64_t v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<long long>::_DetachIfNotUnique() [T = long long]", a3);
      uint64_t v6 = (uint64_t *)*((void *)this + 4);
      uint64_t v7 = *(void *)this;
      int v8 = sub_2169ADF98((uint64_t)this, *(void *)this);
      unint64_t v9 = v8;
      if (v7)
      {
        uint64_t v10 = 8 * v7;
        uint64_t v11 = v8;
        do
        {
          uint64_t v12 = *v6++;
          *v11++ = v12;
          v10 -= 8;
        }
        while (v10);
      }
      sub_2168F83DC((uint64_t)this);
      *((void *)this + 4) = v9;
    }
  }
}

uint64_t sub_2169AE0D0@<X0>(uint64_t *a1@<X1>, unint64_t *a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = 0;
  uint64_t result = sub_2169AE3A0(&v5, a1, a2);
  *a3 = v5;
  a3[1] = &unk_26C7508DB;
  return result;
}

void sub_2169AE1A8(void *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = a1[1];
  if (*a1 == v5)
  {
    uint64_t v21 = 0;
    memset(v20, 0, sizeof(v20));
    a4[1] = &off_26C755610;
    sub_2168F8DBC(a4, (uint64_t)v20);
    sub_2168F83DC((uint64_t)v20);
  }
  else
  {
    *(void *)&v20[0] = *a1;
    *((void *)&v20[0] + 1) = v5;
    LODWORD(v8) = 1;
    do
    {
      unint64_t v8 = (*(_DWORD *)sub_216999AD4((uint64_t *)v20, (uint64_t)a2, a3) * v8);
      sub_216999B54(v20);
    }
    while (*(void *)&v20[0] != *((void *)&v20[0] + 1));
    sub_2169AE9CC((uint64_t)v20, v8);
    sub_2169AF080((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v9, v10);
    uint64_t v11 = v21;
    sub_2169AF080((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v12, v13);
    uint64_t v16 = 0;
    uint64_t v18 = v11;
    uint64_t v19 = v21 + 8 * *(void *)&v20[0];
    while (v18 != v19)
    {
      unint64_t v17 = (uint64_t *)sub_2169AEA40(&v18, v14, v15);
      sub_2169AE3A0(v17, a2, (unint64_t *)a3);
      ++v16;
      sub_2169AEAC0(&v18);
    }
    a4[1] = &off_26C755610;
    sub_2168F8DBC(a4, (uint64_t)v20);
    sub_2168F83DC((uint64_t)v20);
  }
}

void sub_2169AE2E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2169AE318(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, long long a12, uint64_t a13)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to parse at element %zd (at sub-part %zd if there are multiple parts)", v15, v16);
    if (*(char *)(v14 + 23) < 0) {
      operator delete(*(void **)v14);
    }
    *(_OWORD *)uint64_t v14 = a12;
    *(void *)(v14 + 16) = a13;
    *(void *)(v13 + 8) = 0;
    __cxa_end_catch();
    JUMPOUT(0x2169AE290);
  }
  JUMPOUT(0x2169AE300);
}

void sub_2169AE390()
{
}

uint64_t sub_2169AE3A0(uint64_t *a1, uint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *a3;
  unint64_t v4 = *a3 + 1;
  uint64_t v5 = *a2;
  if (v4 > 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3))
  {
    v11[0] = "sdf/parserHelpers.cpp";
    v11[1] = "MakeScalarValueImpl";
    v11[2] = 113;
    v11[3] = "std::enable_if_t<std::is_integral<Int>::value> pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeSca"
             "larValueImpl(Int *, const vector<Value> &, size_t &) [Int = unsigned long long]";
    char v12 = 0;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(MEMORY[0x263F8C298] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&v10);
    if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v8 = &v10;
    }
    else {
      unint64_t v8 = (std::string *)v10.__r_.__value_.__r.__words[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v11, 1, (pxrInternal__aapl__pxrReserved__ *)"Not enough values to parse value of type %s", (const char *)v8);
    std::string::~string(&v10);
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &unk_26C7552B8;
    __cxa_throw(exception, (struct type_info *)&unk_26C755290, (void (*)(void *))std::exception::~exception);
  }
  *a3 = v4;
  uint64_t result = sub_2169AE4DC(v5 + 56 * v3);
  *a1 = result;
  return result;
}

void sub_2169AE4C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2169AE4DC(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 48);
  if (v1 == -1) {
    sub_2168BBB60();
  }
  unint64_t v4 = &v3;
  return ((uint64_t (*)(char **, uint64_t))off_26C7555E0[v1])(&v4, a1);
}

void sub_2169AE530()
{
}

void sub_2169AE58C()
{
}

uint64_t sub_2169AE5A0(uint64_t a1, uint64_t a2)
{
  return *(void *)a2;
}

unint64_t sub_2169AE5A8(uint64_t *a1, unint64_t *a2)
{
  return sub_2169AE5CC(*a1, *a2);
}

unint64_t sub_2169AE5B4(uint64_t a1, double *a2)
{
  return sub_2169AE670(*a2);
}

unint64_t sub_2169AE5CC(uint64_t a1, unint64_t a2)
{
  sub_216912AE4((uint64_t)&v4, a2 >> 63);
  return a2;
}

unint64_t sub_2169AE670(double a1)
{
  if ((*(void *)&a1 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &unk_26C7552B8;
    __cxa_throw(exception, (struct type_info *)&unk_26C755290, (void (*)(void *))std::exception::~exception);
  }
  return sub_2169AE6E0(a1);
}

unint64_t sub_2169AE6E0(double a1)
{
  if (a1 <= -1.0) {
    int v2 = 1;
  }
  else {
    int v2 = 2 * (a1 >= 1.84467441e19);
  }
  sub_216912AE4((uint64_t)&v6, v2);
  double v3 = ceil(a1);
  double v4 = floor(a1);
  if (a1 >= 0.0) {
    return (unint64_t)v4;
  }
  return (unint64_t)v3;
}

void sub_2169AE7B8(uint64_t a1, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(&v3, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    uint64_t v4 = *((void *)a2 + 2);
  }
  exception = __cxa_allocate_exception(8uLL);
  void *exception = &unk_26C7552B8;
  __cxa_throw(exception, (struct type_info *)&unk_26C755290, (void (*)(void *))std::exception::~exception);
}

void sub_2169AE83C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2169AE858(uint64_t a1, void *a2)
{
  if ((*a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*a2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed);
  }
  exception = __cxa_allocate_exception(8uLL);
  void *exception = &unk_26C7552B8;
  __cxa_throw(exception, (struct type_info *)&unk_26C755290, (void (*)(void *))std::exception::~exception);
}

void sub_2169AE8E4(uint64_t a1, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(&v4, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    uint64_t v5 = *((void *)a2 + 2);
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_216778F24(&v6, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    uint64_t v7 = *((void *)a2 + 5);
  }
  exception = __cxa_allocate_exception(8uLL);
  void *exception = &unk_26C7552B8;
  __cxa_throw(exception, (struct type_info *)&unk_26C755290, (void (*)(void *))std::exception::~exception);
}

void sub_2169AE998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2169AE9CC(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v5 = 0;
  sub_2168F845C((void *)a1);
  long long v6 = &v5;
  sub_2169AEE18((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_2169AEA28(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2169AEA40(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    void v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArray<unsigned lo"
            "ng long>>::operator*() [T = pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_2169AEAB8()
{
}

void *sub_2169AEAC0(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArr"
            "ay<unsigned long long>>::operator++() [T = pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

uint64_t *sub_2169AEB40(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

atomic_uint **sub_2169AEB60(atomic_uint **a1, atomic_uint **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2169AED0C(a1);
}

uint64_t sub_2169AEB70()
{
  return 1;
}

unint64_t sub_2169AEB78(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  char v5 = 1;
  uint64_t v4 = v2;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, (pxrInternal__aapl__pxrReserved__ *)v1[4], (char *)(8 * v2));
  return bswap64(0x9E3779B97F4A7C55 * v4);
}

uint64_t sub_2169AEBD4(uint64_t *a1, uint64_t *a2)
{
  return sub_2169ADC94(*a1, *a2);
}

uint64_t sub_2169AEBE0(uint64_t *a1, uint64_t a2)
{
  return sub_2169ADC94(*a1, a2);
}

uint64_t sub_2169AEBEC()
{
  return 0;
}

void *sub_2169AEBF8(uint64_t **a1, void *a2)
{
  long long v3 = *a1;
  uint64_t v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, void *))sub_2169AEE00);
  return a2;
}

void *sub_2169AEC4C()
{
  return &unk_26C74E220;
}

uint64_t sub_2169AEC58()
{
  return 1;
}

uint64_t sub_2169AEC60()
{
  return MEMORY[0x263F8C298];
}

uint64_t sub_2169AEC6C(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_2169AEC74(uint64_t a1)
{
  return **(void **)a1;
}

BOOL sub_2169AEC80(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000021746964CLL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2169AECBC(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74E220, a2, a3);
}

void *sub_2169AECE0()
{
  return &unk_26C74E220;
}

uint64_t sub_2169AECEC(uint64_t a1)
{
  return *(void *)a1;
}

void *sub_2169AECF4@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  a2[1] = &off_26C755610;
  return sub_2168F8DBC(a2, v2);
}

atomic_uint **sub_2169AED0C(atomic_uint **a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit(v2 + 10, 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_2168F83DC((uint64_t)v2);
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_2169AED64(_OWORD **a1)
{
  unsigned int v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    long long v3 = operator new(0x30uLL);
    uint64_t v4 = *a1;
    long long v5 = (*a1)[1];
    *(_OWORD *)long long v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    uint64_t v6 = *((void *)v4 + 4);
    *((void *)v3 + 4) = v6;
    if (v6)
    {
      int v7 = (atomic_ullong *)*((void *)v3 + 3);
      unint64_t v8 = (atomic_ullong *)(v6 - 16);
      if (!v7) {
        int v7 = v8;
      }
      atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
      uint64_t v4 = *a1;
    }
    atomic_store(0, (unsigned int *)v3 + 10);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 10, 1u, memory_order_relaxed);
    std::string v10 = (atomic_uint *)v4;
    *a1 = v3;
    sub_2169AED0C(&v10);
  }
  return (uint64_t)*a1;
}

uint64_t sub_2169AEE00(void *a1)
{
  *a1 += 8;
  return std::ostream::operator<<();
}

void sub_2169AEE18(unint64_t *a1, unint64_t a2, uint64_t **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    int v7 = (uint64_t *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load((unint64_t *)v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              std::string v10 = sub_2169AEFE0((uint64_t)a1, a2);
              int v7 = v10;
              if (v3)
              {
                for (uint64_t i = 0; i != v3; ++i)
                  v10[i] = *(void *)(v9 + i * 8);
              }
            }
            char v12 = *a3;
            uint64_t v13 = v3;
            do
              v7[v13++] = *v12;
            while (a2 != v13);
          }
          uint64_t v14 = v7;
          goto LABEL_31;
        }
        int v7 = (uint64_t *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v19 = a2;
      }
      else {
        unint64_t v19 = *a1;
      }
      char v20 = sub_2169AEFE0((uint64_t)a1, a2);
      uint64_t v14 = v20;
      if (v19)
      {
        uint64_t v21 = 8 * v19;
        uint64_t v22 = v20;
        do
        {
          uint64_t v23 = *v7++;
          *v22++ = v23;
          v21 -= 8;
        }
        while (v21);
      }
      if (v3 < a2)
      {
        int v24 = *a3;
        uint64_t v25 = v3;
        do
          v20[v25++] = *v24;
        while (a2 != v25);
      }
      goto LABEL_31;
    }
    uint64_t v15 = 8 * a2;
    if (8 * a2 / a2 == 8)
    {
      uint64_t v16 = sub_2169AEFE0((uint64_t)a1, a2);
      uint64_t v14 = v16;
      unint64_t v17 = 0;
      uint64_t v18 = *a3;
      do
      {
        v16[v17 / 8] = *v18;
        v17 += 8;
      }
      while (v15 != v17);
LABEL_31:
      if (v14 != (uint64_t *)a1[4])
      {
        sub_2168F83DC((uint64_t)a1);
        a1[4] = (unint64_t)v14;
      }
      *a1 = a2;
      return;
    }
  }

  sub_2168F845C(a1);
}

void *sub_2169AEFE0(uint64_t a1, unint64_t a2)
{
  sub_216851EE4((uint64_t)&v7, "VtArray::_AllocateNew", "value_type *pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>::_AllocateNew(size_t) [T = unsigned long long]");
  if (a2 > 0x1FFFFFFFFFFFFFFDLL) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 8 * a2 + 16;
  }
  uint64_t v4 = operator new(v3);
  void *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_2169AF068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2169AF080(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    if (*((void *)this + 3) || (unint64_t v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>::_DetachIfNotUnique() [T = unsigned long long]", a3);
      uint64_t v6 = (uint64_t *)*((void *)this + 4);
      uint64_t v7 = *(void *)this;
      int v8 = sub_2169AEFE0((uint64_t)this, *(void *)this);
      unint64_t v9 = v8;
      if (v7)
      {
        uint64_t v10 = 8 * v7;
        uint64_t v11 = v8;
        do
        {
          uint64_t v12 = *v6++;
          *v11++ = v12;
          v10 -= 8;
        }
        while (v10);
      }
      sub_2168F83DC((uint64_t)this);
      *((void *)this + 4) = v9;
    }
  }
}

uint64_t sub_2169AF118@<X0>(uint64_t *a1@<X1>, unint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t result = sub_2169AF3E8(&v5, a1, a2);
  *(void *)(a3 + 8) = (char *)&off_26C750990 + 3;
  *(_WORD *)a3 = v5;
  return result;
}

void sub_2169AF1F0(void *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = a1[1];
  if (*a1 == v5)
  {
    uint64_t v21 = 0;
    memset(v20, 0, sizeof(v20));
    a4[1] = off_26C74ED78;
    sub_2168F8DBC(a4, (uint64_t)v20);
    sub_2168F83DC((uint64_t)v20);
  }
  else
  {
    *(void *)&v20[0] = *a1;
    *((void *)&v20[0] + 1) = v5;
    LODWORD(v8) = 1;
    do
    {
      unint64_t v8 = (*(_DWORD *)sub_216999AD4((uint64_t *)v20, (uint64_t)a2, a3) * v8);
      sub_216999B54(v20);
    }
    while (*(void *)&v20[0] != *((void *)&v20[0] + 1));
    sub_2168F8F50((uint64_t)v20, v8);
    sub_2168F930C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v9, v10);
    uint64_t v11 = v21;
    sub_2168F930C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v12, v13);
    uint64_t v16 = 0;
    uint64_t v18 = v11;
    uint64_t v19 = v21 + 2 * *(void *)&v20[0];
    while (v18 != v19)
    {
      unint64_t v17 = (_WORD *)sub_2169AF8B0(&v18, v14, v15);
      sub_2169AF3E8(v17, a2, (unint64_t *)a3);
      ++v16;
      sub_2169AF930(&v18);
    }
    a4[1] = off_26C74ED78;
    sub_2168F8DBC(a4, (uint64_t)v20);
    sub_2168F83DC((uint64_t)v20);
  }
}

void sub_2169AF330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2169AF360(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, long long a12, uint64_t a13)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to parse at element %zd (at sub-part %zd if there are multiple parts)", v15, v16);
    if (*(char *)(v14 + 23) < 0) {
      operator delete(*(void **)v14);
    }
    *(_OWORD *)uint64_t v14 = a12;
    *(void *)(v14 + 16) = a13;
    *(void *)(v13 + 8) = 0;
    __cxa_end_catch();
    JUMPOUT(0x2169AF2D8);
  }
  JUMPOUT(0x2169AF348);
}

void sub_2169AF3D8()
{
}

uint64_t sub_2169AF3E8(_WORD *a1, uint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *a3;
  unint64_t v4 = *a3 + 1;
  uint64_t v5 = *a2;
  if (v4 > 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3))
  {
    uint64_t v9 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", 47);
    v11[0] = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", (uint64_t)v9, 0x2Fu);
    v11[1] = "MakeScalarValueImpl";
    v11[2] = 99;
    v11[3] = "void pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeScalarValueImpl(GfHalf *, const vector<Value> &, size_t &)";
    char v12 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v11, 1, (pxrInternal__aapl__pxrReserved__ *)"Not enough values to parse value of type %s", "half");
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &unk_26C7552B8;
    __cxa_throw(exception, (struct type_info *)&unk_26C755290, (void (*)(void *))std::exception::~exception);
  }
  *a3 = v4;
  sub_2169AF53C(v5 + 56 * v3);
  if (v7 == 0.0)
  {
    uint64_t result = HIWORD(LODWORD(v7));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v7) >> 23])
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v7) >> 23]
           + (((LODWORD(v7) & 0x7FFFFF) + ((LODWORD(v7) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v7));
  }
  *a1 = result;
  return result;
}

uint64_t sub_2169AF53C(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 48);
  if (v1 == -1) {
    sub_2168BBB60();
  }
  unint64_t v4 = &v3;
  return ((uint64_t (*)(char **, uint64_t))off_26C7556C8[v1])(&v4, a1);
}

void sub_2169AF590()
{
}

void sub_2169AF5EC()
{
}

float sub_2169AF600(uint64_t a1, unint64_t *a2)
{
  return (float)*a2;
}

float sub_2169AF60C(uint64_t a1, uint64_t *a2)
{
  return (float)*a2;
}

float sub_2169AF618(uint64_t a1, uint64_t a2)
{
  return *(double *)a2;
}

float sub_2169AF624(uint64_t *a1, uint64_t *a2)
{
  return sub_2169AF638(*a1, a2);
}

float sub_2169AF62C(pxrInternal__aapl__pxrReserved__::TfToken **a1, void *a2)
{
  return sub_2169AF778(*a1, a2);
}

float sub_2169AF638(uint64_t a1, uint64_t *a2)
{
  if ((*((char *)a2 + 23) & 0x80000000) == 0)
  {
    int v2 = *((unsigned __int8 *)a2 + 23);
    if (v2 != 3)
    {
      if (v2 != 4 || *(_DWORD *)a2 != 1718511917) {
        goto LABEL_29;
      }
      return -INFINITY;
    }
    if (*(_WORD *)a2 != 28265 || *((unsigned char *)a2 + 2) != 102) {
      goto LABEL_20;
    }
    return INFINITY;
  }
  uint64_t v3 = a2[1];
  if (v3 == 3 && *(_WORD *)*a2 == 28265 && *(unsigned char *)(*a2 + 2) == 102) {
    return INFINITY;
  }
  if (v3 == 4)
  {
    if (*(_DWORD *)*a2 == 1718511917) {
      return -INFINITY;
    }
    uint64_t v3 = a2[1];
  }
  if (v3 != 3) {
    goto LABEL_29;
  }
  a2 = (uint64_t *)*a2;
LABEL_20:
  if (*(_WORD *)a2 != 24942 || *((unsigned char *)a2 + 2) != 110)
  {
LABEL_29:
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &unk_26C7552B8;
    __cxa_throw(exception, (struct type_info *)&unk_26C755290, (void (*)(void *))std::exception::~exception);
  }
  return NAN;
}

float sub_2169AF778(pxrInternal__aapl__pxrReserved__::TfToken *a1, void *a2)
{
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0) {
    Emptyunint64_t String = (uint64_t *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  }

  return sub_2169AF638((uint64_t)a1, EmptyString);
}

void sub_2169AF7C8(uint64_t a1, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(&v4, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    uint64_t v5 = *((void *)a2 + 2);
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_216778F24(&v6, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    uint64_t v7 = *((void *)a2 + 5);
  }
  exception = __cxa_allocate_exception(8uLL);
  void *exception = &unk_26C7552B8;
  __cxa_throw(exception, (struct type_info *)&unk_26C755290, (void (*)(void *))std::exception::~exception);
}

void sub_2169AF87C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2169AF8B0(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    void v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal"
            "__aapl__pxrReserved__::pxr_half::half>>::operator*() [T = pxrInternal__aapl__pxrReserved__::VtArray<pxrInter"
            "nal__aapl__pxrReserved__::pxr_half::half>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_2169AF928()
{
}

void *sub_2169AF930(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArr"
            "ay<pxrInternal__aapl__pxrReserved__::pxr_half::half>>::operator++() [T = pxrInternal__aapl__pxrReserved__::V"
            "tArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 2;
  }
  return a1;
}

uint64_t sub_2169AF9B0@<X0>(uint64_t *a1@<X1>, unint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  unint64_t v4 = *a2;
  unint64_t v5 = *a2 + 1;
  uint64_t v6 = *a1;
  if (v5 > 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3))
  {
    v10[0] = "sdf/parserHelpers.cpp";
    v10[1] = "MakeScalarValueImpl";
    void v10[2] = 93;
    v10[3] = "void pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeScalarValueImpl(float *, const vector<Value> &, size_t &)";
    char v11 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Not enough values to parse value of type %s", "float");
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &unk_26C7552B8;
    __cxa_throw(exception, (struct type_info *)&unk_26C755290, (void (*)(void *))std::exception::~exception);
  }
  *a2 = v5;
  uint64_t result = sub_2169AF53C(v6 + 56 * v4);
  *(void *)(a3 + 8) = &unk_26C750A4B;
  *(_DWORD *)a3 = v8;
  return result;
}

void sub_2169AFB44(void *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = a1[1];
  if (*a1 == v5)
  {
    uint64_t v30 = 0;
    long long v28 = 0u;
    long long v29 = 0u;
    a4[1] = &off_26C74ECC0;
    sub_2168F8DBC(a4, (uint64_t)&v28);
    sub_2168F83DC((uint64_t)&v28);
  }
  else
  {
    *(void *)&long long v28 = *a1;
    *((void *)&v28 + 1) = v5;
    LODWORD(v8) = 1;
    do
    {
      unint64_t v8 = (*(_DWORD *)sub_216999AD4((uint64_t *)&v28, (uint64_t)a2, a3) * v8);
      sub_216999B54(&v28);
    }
    while ((void)v28 != *((void *)&v28 + 1));
    sub_2168F8250((uint64_t)v26, v8);
    sub_2168F8710((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v26, v9, v10);
    uint64_t v11 = v27;
    sub_2168F8710((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v26, v12, v13);
    uint64_t v16 = 0;
    uint64_t v24 = v11;
    uint64_t v25 = v27 + 4 * v26[0];
    while (v24 != v25)
    {
      uint64_t v17 = sub_2169AFE10(&v24, v14, v15);
      uint64_t v18 = *(void *)a3;
      unint64_t v19 = *(void *)a3 + 1;
      uint64_t v20 = *a2;
      if (v19 > 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3))
      {
        *(void *)&long long v28 = "sdf/parserHelpers.cpp";
        *((void *)&v28 + 1) = "MakeScalarValueImpl";
        *(void *)&long long v29 = 93;
        *((void *)&v29 + 1) = "void pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeScalarValueImpl(float *, c"
                                "onst vector<Value> &, size_t &)";
        LOBYTE(v30) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"Not enough values to parse value of type %s", "float");
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &unk_26C7552B8;
        __cxa_throw(exception, (struct type_info *)&unk_26C755290, (void (*)(void *))std::exception::~exception);
      }
      uint64_t v21 = (_DWORD *)v17;
      *(void *)a3 = v19;
      sub_2169AF53C(v20 + 56 * v18);
      *uint64_t v21 = v22;
      ++v16;
      sub_2169AFE90(&v24);
    }
    a4[1] = &off_26C74ECC0;
    sub_2168F8DBC(a4, (uint64_t)v26);
    sub_2168F83DC((uint64_t)v26);
  }
}

void sub_2169AFD5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2169AFD8C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11, uint64_t a12)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to parse at element %zd (at sub-part %zd if there are multiple parts)", v14, v15);
    if (*(char *)(v13 + 23) < 0) {
      operator delete(*(void **)v13);
    }
    *(_OWORD *)uint64_t v13 = a11;
    *(void *)(v13 + 16) = a12;
    *(void *)(v12 + 8) = 0;
    __cxa_end_catch();
    JUMPOUT(0x2169AFC74);
  }
  JUMPOUT(0x2169AFD74);
}

void sub_2169AFE00()
{
}

uint64_t sub_2169AFE10(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    void v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArray<float>>::op"
            "erator*() [T = pxrInternal__aapl__pxrReserved__::VtArray<float>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_2169AFE88()
{
}

void *sub_2169AFE90(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArr"
            "ay<float>>::operator++() [T = pxrInternal__aapl__pxrReserved__::VtArray<float>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 4;
  }
  return a1;
}

uint64_t sub_2169AFF10@<X0>(uint64_t *a1@<X1>, unint64_t *a2@<X2>, void *a3@<X8>)
{
  unint64_t v4 = *a2;
  unint64_t v5 = *a2 + 1;
  uint64_t v6 = *a1;
  if (v5 > 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3))
  {
    v10[0] = "sdf/parserHelpers.cpp";
    v10[1] = "MakeScalarValueImpl";
    void v10[2] = 87;
    v10[3] = "void pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeScalarValueImpl(double *, const vector<Value> &, size_t &)";
    char v11 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Not enough values to parse value of type %s", "double");
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &unk_26C7552B8;
    __cxa_throw(exception, (struct type_info *)&unk_26C755290, (void (*)(void *))std::exception::~exception);
  }
  *a2 = v5;
  uint64_t result = sub_2169B0370(v6 + 56 * v4);
  a3[1] = &unk_26C750B03;
  *a3 = v8;
  return result;
}

void sub_2169B00A4(void *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = a1[1];
  if (*a1 == v5)
  {
    uint64_t v30 = 0;
    long long v28 = 0u;
    long long v29 = 0u;
    a4[1] = &off_26C74EE30;
    sub_2168F8DBC(a4, (uint64_t)&v28);
    sub_2168F83DC((uint64_t)&v28);
  }
  else
  {
    *(void *)&long long v28 = *a1;
    *((void *)&v28 + 1) = v5;
    LODWORD(v8) = 1;
    do
    {
      unint64_t v8 = (*(_DWORD *)sub_216999AD4((uint64_t *)&v28, (uint64_t)a2, a3) * v8);
      sub_216999B54(&v28);
    }
    while ((void)v28 != *((void *)&v28 + 1));
    sub_2168F9ADC((uint64_t)v26, v8);
    sub_2168F9DFC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v26, v9, v10);
    uint64_t v11 = v27;
    sub_2168F9DFC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v26, v12, v13);
    uint64_t v16 = 0;
    uint64_t v24 = v11;
    uint64_t v25 = v27 + 8 * v26[0];
    while (v24 != v25)
    {
      uint64_t v17 = sub_2169B06E0(&v24, v14, v15);
      uint64_t v18 = *(void *)a3;
      unint64_t v19 = *(void *)a3 + 1;
      uint64_t v20 = *a2;
      if (v19 > 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3))
      {
        *(void *)&long long v28 = "sdf/parserHelpers.cpp";
        *((void *)&v28 + 1) = "MakeScalarValueImpl";
        *(void *)&long long v29 = 87;
        *((void *)&v29 + 1) = "void pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeScalarValueImpl(double *, "
                                "const vector<Value> &, size_t &)";
        LOBYTE(v30) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"Not enough values to parse value of type %s", "double");
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &unk_26C7552B8;
        __cxa_throw(exception, (struct type_info *)&unk_26C755290, (void (*)(void *))std::exception::~exception);
      }
      uint64_t v21 = (void *)v17;
      *(void *)a3 = v19;
      sub_2169B0370(v20 + 56 * v18);
      *uint64_t v21 = v22;
      ++v16;
      sub_2169B0760(&v24);
    }
    a4[1] = &off_26C74EE30;
    sub_2168F8DBC(a4, (uint64_t)v26);
    sub_2168F83DC((uint64_t)v26);
  }
}

void sub_2169B02BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2169B02EC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11, uint64_t a12)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to parse at element %zd (at sub-part %zd if there are multiple parts)", v14, v15);
    if (*(char *)(v13 + 23) < 0) {
      operator delete(*(void **)v13);
    }
    *(_OWORD *)uint64_t v13 = a11;
    *(void *)(v13 + 16) = a12;
    *(void *)(v12 + 8) = 0;
    __cxa_end_catch();
    JUMPOUT(0x2169B01D4);
  }
  JUMPOUT(0x2169B02D4);
}

void sub_2169B0360()
{
}

uint64_t sub_2169B0370(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 48);
  if (v1 == -1) {
    sub_2168BBB60();
  }
  unint64_t v4 = &v3;
  return ((uint64_t (*)(char **, uint64_t))off_26C7556F8[v1])(&v4, a1);
}

void sub_2169B03C4()
{
}

void sub_2169B0420()
{
}

double sub_2169B0434(uint64_t a1, unint64_t *a2)
{
  return (double)*a2;
}

double sub_2169B0440(uint64_t a1, uint64_t *a2)
{
  return (double)*a2;
}

double sub_2169B044C(uint64_t a1, uint64_t a2)
{
  return *(double *)a2;
}

double sub_2169B0454(uint64_t *a1, uint64_t *a2)
{
  return sub_2169B0468(*a1, a2);
}

double sub_2169B045C(pxrInternal__aapl__pxrReserved__::TfToken **a1, void *a2)
{
  return sub_2169B05A8(*a1, a2);
}

double sub_2169B0468(uint64_t a1, uint64_t *a2)
{
  if ((*((char *)a2 + 23) & 0x80000000) == 0)
  {
    int v2 = *((unsigned __int8 *)a2 + 23);
    if (v2 != 3)
    {
      if (v2 != 4 || *(_DWORD *)a2 != 1718511917) {
        goto LABEL_29;
      }
      return -INFINITY;
    }
    if (*(_WORD *)a2 != 28265 || *((unsigned char *)a2 + 2) != 102) {
      goto LABEL_20;
    }
    return INFINITY;
  }
  uint64_t v3 = a2[1];
  if (v3 == 3 && *(_WORD *)*a2 == 28265 && *(unsigned char *)(*a2 + 2) == 102) {
    return INFINITY;
  }
  if (v3 == 4)
  {
    if (*(_DWORD *)*a2 == 1718511917) {
      return -INFINITY;
    }
    uint64_t v3 = a2[1];
  }
  if (v3 != 3) {
    goto LABEL_29;
  }
  a2 = (uint64_t *)*a2;
LABEL_20:
  if (*(_WORD *)a2 != 24942 || *((unsigned char *)a2 + 2) != 110)
  {
LABEL_29:
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &unk_26C7552B8;
    __cxa_throw(exception, (struct type_info *)&unk_26C755290, (void (*)(void *))std::exception::~exception);
  }
  return NAN;
}

double sub_2169B05A8(pxrInternal__aapl__pxrReserved__::TfToken *a1, void *a2)
{
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0) {
    Emptyunint64_t String = (uint64_t *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  }

  return sub_2169B0468((uint64_t)a1, EmptyString);
}

void sub_2169B05F8(uint64_t a1, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(&v4, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    uint64_t v5 = *((void *)a2 + 2);
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_216778F24(&v6, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    uint64_t v7 = *((void *)a2 + 5);
  }
  exception = __cxa_allocate_exception(8uLL);
  void *exception = &unk_26C7552B8;
  __cxa_throw(exception, (struct type_info *)&unk_26C755290, (void (*)(void *))std::exception::~exception);
}

void sub_2169B06AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2169B06E0(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    void v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArray<double>>::o"
            "perator*() [T = pxrInternal__aapl__pxrReserved__::VtArray<double>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_2169B0758()
{
}

void *sub_2169B0760(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArr"
            "ay<double>>::operator++() [T = pxrInternal__aapl__pxrReserved__::VtArray<double>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

uint64_t sub_2169B07E0@<X0>(uint64_t *a1@<X1>, unint64_t *a2@<X2>, void *a3@<X8>)
{
  unint64_t v4 = *a2;
  unint64_t v5 = *a2 + 1;
  uint64_t v6 = *a1;
  if (v5 > 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3))
  {
    v10[0] = "sdf/parserHelpers.cpp";
    v10[1] = "MakeScalarValueImpl";
    void v10[2] = 106;
    v10[3] = "void pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeScalarValueImpl(SdfTimeCode *, const vector<V"
             "alue> &, size_t &)";
    char v11 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Not enough values to parse value of type %s", "timecode");
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &unk_26C7552B8;
    __cxa_throw(exception, (struct type_info *)&unk_26C755290, (void (*)(void *))std::exception::~exception);
  }
  *a2 = v5;
  uint64_t result = sub_2169B0370(v6 + 56 * v4);
  a3[1] = (char *)&off_26C755728 + 1;
  *a3 = v8;
  return result;
}

void sub_2169B0974(void *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = a1[1];
  if (*a1 == v5)
  {
    uint64_t v30 = 0;
    long long v28 = 0u;
    long long v29 = 0u;
    a4[1] = &off_26C7557F0;
    sub_2168F8DBC(a4, (uint64_t)&v28);
    sub_2168F83DC((uint64_t)&v28);
  }
  else
  {
    *(void *)&long long v28 = *a1;
    *((void *)&v28 + 1) = v5;
    LODWORD(v8) = 1;
    do
    {
      unint64_t v8 = (*(_DWORD *)sub_216999AD4((uint64_t *)&v28, (uint64_t)a2, a3) * v8);
      sub_216999B54(&v28);
    }
    while ((void)v28 != *((void *)&v28 + 1));
    sub_2169B0D90((uint64_t)v26, v8);
    sub_2169B1440((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v26, v9, v10);
    uint64_t v11 = v27;
    sub_2169B1440((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v26, v12, v13);
    uint64_t v16 = 0;
    uint64_t v24 = v11;
    uint64_t v25 = v27 + 8 * v26[0];
    while (v24 != v25)
    {
      uint64_t v17 = sub_2169B0E04(&v24, v14, v15);
      uint64_t v18 = *(void *)a3;
      unint64_t v19 = *(void *)a3 + 1;
      uint64_t v20 = *a2;
      if (v19 > 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3))
      {
        *(void *)&long long v28 = "sdf/parserHelpers.cpp";
        *((void *)&v28 + 1) = "MakeScalarValueImpl";
        *(void *)&long long v29 = 106;
        *((void *)&v29 + 1) = "void pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeScalarValueImpl(SdfTimeCod"
                                "e *, const vector<Value> &, size_t &)";
        LOBYTE(v30) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"Not enough values to parse value of type %s", "timecode");
        exception = __cxa_allocate_exception(8uLL);
        void *exception = &unk_26C7552B8;
        __cxa_throw(exception, (struct type_info *)&unk_26C755290, (void (*)(void *))std::exception::~exception);
      }
      uint64_t v21 = (void *)v17;
      *(void *)a3 = v19;
      sub_2169B0370(v20 + 56 * v18);
      *uint64_t v21 = v22;
      ++v16;
      sub_2169B0E84(&v24);
    }
    a4[1] = &off_26C7557F0;
    sub_2168F8DBC(a4, (uint64_t)v26);
    sub_2168F83DC((uint64_t)v26);
  }
}

void sub_2169B0B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2169B0BBC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11, uint64_t a12)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to parse at element %zd (at sub-part %zd if there are multiple parts)", v14, v15);
    if (*(char *)(v13 + 23) < 0) {
      operator delete(*(void **)v13);
    }
    *(_OWORD *)uint64_t v13 = a11;
    *(void *)(v13 + 16) = a12;
    *(void *)(v12 + 8) = 0;
    __cxa_end_catch();
    JUMPOUT(0x2169B0AA4);
  }
  JUMPOUT(0x2169B0BA4);
}

void sub_2169B0C30()
{
}

void *sub_2169B0C40(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

void *sub_2169B0C50(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_2169B0C5C()
{
  return 1;
}

unint64_t sub_2169B0C64(double *a1)
{
  unint64_t v1 = 0x9E3779B97F4A7C55 * *(void *)a1;
  if (*a1 == 0.0) {
    unint64_t v1 = 0;
  }
  return bswap64(v1);
}

BOOL sub_2169B0C90(double *a1, double *a2)
{
  return *a1 == *a2;
}

BOOL sub_2169B0CA4(double *a1, double *a2)
{
  return *a1 == *a2;
}

uint64_t sub_2169B0CBC()
{
  return 0;
}

uint64_t sub_2169B0CC8()
{
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void *sub_2169B0CD8()
{
  return &unk_26C7557E0;
}

uint64_t sub_2169B0CE4()
{
  return 0;
}

uint64_t sub_2169B0CEC()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_2169B0CF8()
{
  return 0;
}

uint64_t sub_2169B0D00()
{
  return 0;
}

BOOL sub_2169B0D08(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x8000000217468BA7 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2169B0D44(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_26C7557E0, a2, a3);
}

void *sub_2169B0D68()
{
  return &unk_26C7557E0;
}

void *sub_2169B0D78@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  a2[1] = (char *)&off_26C755728 + 1;
  return result;
}

uint64_t sub_2169B0D90(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v5 = 0;
  sub_2168F845C((void *)a1);
  uint64_t v6 = &v5;
  sub_2169B11D8((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_2169B0DEC(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2169B0E04(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    void v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal"
            "__aapl__pxrReserved__::SdfTimeCode>>::operator*() [T = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal"
            "__aapl__pxrReserved__::SdfTimeCode>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_2169B0E7C()
{
}

void *sub_2169B0E84(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArr"
            "ay<pxrInternal__aapl__pxrReserved__::SdfTimeCode>>::operator++() [T = pxrInternal__aapl__pxrReserved__::VtAr"
            "ray<pxrInternal__aapl__pxrReserved__::SdfTimeCode>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

uint64_t *sub_2169B0F04(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

atomic_uint **sub_2169B0F24(atomic_uint **a1, atomic_uint **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2169B107C(a1);
}

uint64_t sub_2169B0F34()
{
  return 1;
}

unint64_t sub_2169B0F3C(unint64_t **a1)
{
  return sub_2169B10D4(*a1);
}

BOOL sub_2169B0F44(void **a1, uint64_t *a2)
{
  return sub_2168FA278(*a1, *a2);
}

BOOL sub_2169B0F50(void **a1, uint64_t a2)
{
  return sub_2168FA278(*a1, a2);
}

uint64_t sub_2169B0F5C()
{
  return 0;
}

void *sub_2169B0F68(uint64_t **a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, void *))sub_2169B11C0);
  return a2;
}

void *sub_2169B0FBC()
{
  return &unk_26C7558A8;
}

uint64_t sub_2169B0FC8()
{
  return 1;
}

void *sub_2169B0FD0()
{
  return &unk_26C7557E0;
}

uint64_t sub_2169B0FDC(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_2169B0FE4(uint64_t a1)
{
  return **(void **)a1;
}

BOOL sub_2169B0FF0(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x8000000217468BD9 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2169B102C(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_26C7558A8, a2, a3);
}

void *sub_2169B1050()
{
  return &unk_26C7558A8;
}

uint64_t sub_2169B105C(uint64_t a1)
{
  return *(void *)a1;
}

void *sub_2169B1064@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  a2[1] = &off_26C7557F0;
  return sub_2168F8DBC(a2, v2);
}

atomic_uint **sub_2169B107C(atomic_uint **a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit(v2 + 10, 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_2168F83DC((uint64_t)v2);
    operator delete(v2);
  }
  return a1;
}

unint64_t sub_2169B10D4(unint64_t *a1)
{
  unint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v2 = (double *)a1[4];
    unint64_t v3 = *a1;
    do
    {
      double v4 = *v2++;
      double v5 = v4;
      if (v4 == 0.0) {
        double v5 = 0.0;
      }
      unint64_t v1 = *(void *)&v5 + ((*(void *)&v5 + v1 + (*(void *)&v5 + v1) * (*(void *)&v5 + v1)) >> 1);
      --v3;
    }
    while (v3);
    v1 *= 0x9E3779B97F4A7C55;
  }
  return bswap64(v1);
}

uint64_t sub_2169B1124(_OWORD **a1)
{
  unsigned int v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    unint64_t v3 = operator new(0x30uLL);
    double v4 = *a1;
    long long v5 = (*a1)[1];
    *(_OWORD *)unint64_t v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    uint64_t v6 = *((void *)v4 + 4);
    *((void *)v3 + 4) = v6;
    if (v6)
    {
      int v7 = (atomic_ullong *)*((void *)v3 + 3);
      unint64_t v8 = (atomic_ullong *)(v6 - 16);
      if (!v7) {
        int v7 = v8;
      }
      atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
      double v4 = *a1;
    }
    atomic_store(0, (unsigned int *)v3 + 10);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 10, 1u, memory_order_relaxed);
    uint64_t v10 = (atomic_uint *)v4;
    *a1 = v3;
    sub_2169B107C(&v10);
  }
  return (uint64_t)*a1;
}

uint64_t sub_2169B11C0(void *a1)
{
  *a1 += 8;
  return pxrInternal__aapl__pxrReserved__::operator<<();
}

void sub_2169B11D8(unint64_t *a1, unint64_t a2, uint64_t **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    int v7 = (uint64_t *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load((unint64_t *)v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              uint64_t v10 = sub_2169B13A0((uint64_t)a1, a2);
              int v7 = v10;
              if (v3)
              {
                for (uint64_t i = 0; i != v3; ++i)
                  v10[i] = *(void *)(v9 + i * 8);
              }
            }
            uint64_t v12 = *a3;
            uint64_t v13 = v3;
            do
              v7[v13++] = *v12;
            while (a2 != v13);
          }
          uint64_t v14 = v7;
          goto LABEL_31;
        }
        int v7 = (uint64_t *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v19 = a2;
      }
      else {
        unint64_t v19 = *a1;
      }
      uint64_t v20 = sub_2169B13A0((uint64_t)a1, a2);
      uint64_t v14 = v20;
      if (v19)
      {
        uint64_t v21 = 8 * v19;
        uint64_t v22 = v20;
        do
        {
          uint64_t v23 = *v7++;
          *v22++ = v23;
          v21 -= 8;
        }
        while (v21);
      }
      if (v3 < a2)
      {
        uint64_t v24 = *a3;
        uint64_t v25 = v3;
        do
          v20[v25++] = *v24;
        while (a2 != v25);
      }
      goto LABEL_31;
    }
    uint64_t v15 = 8 * a2;
    if (8 * a2 / a2 == 8)
    {
      uint64_t v16 = sub_2169B13A0((uint64_t)a1, a2);
      uint64_t v14 = v16;
      unint64_t v17 = 0;
      uint64_t v18 = *a3;
      do
      {
        v16[v17 / 8] = *v18;
        v17 += 8;
      }
      while (v15 != v17);
LABEL_31:
      if (v14 != (uint64_t *)a1[4])
      {
        sub_2168F83DC((uint64_t)a1);
        a1[4] = (unint64_t)v14;
      }
      *a1 = a2;
      return;
    }
  }

  sub_2168F845C(a1);
}

void *sub_2169B13A0(uint64_t a1, unint64_t a2)
{
  sub_216851EE4((uint64_t)&v7, "VtArray::_AllocateNew", "value_type *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfTimeCode>::_AllocateNew(size_t) [ELEM = pxrInternal__aapl__pxrReserved__::SdfTimeCode]");
  if (a2 > 0x1FFFFFFFFFFFFFFDLL) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 8 * a2 + 16;
  }
  double v4 = operator new(v3);
  void *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_2169B1428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2169B1440(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    if (*((void *)this + 3) || (unint64_t v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfTimeCode>::_DetachIfNotUnique() [ELEM = pxrInternal__aapl__pxrReserved__::SdfTimeCode]", a3);
      uint64_t v6 = (uint64_t *)*((void *)this + 4);
      uint64_t v7 = *(void *)this;
      int v8 = sub_2169B13A0((uint64_t)this, *(void *)this);
      unint64_t v9 = v8;
      if (v7)
      {
        uint64_t v10 = 8 * v7;
        uint64_t v11 = v8;
        do
        {
          uint64_t v12 = *v6++;
          *v11++ = v12;
          v10 -= 8;
        }
        while (v10);
      }
      sub_2168F83DC((uint64_t)this);
      *((void *)this + 4) = v9;
    }
  }
}

void sub_2169B14D8(uint64_t *a1@<X1>, unint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  memset(&__p, 0, sizeof(__p));
  sub_2169B17E0(&__p, a1, a2);
  *(void *)(a3 + 8) = &off_26C750BB8;
  sub_21691B31C((unsigned int **)a3, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_2169B1554(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2169B15D4()
{
}

void sub_2169B15E4(void *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = a1[1];
  if (*a1 == v5)
  {
    uint64_t v21 = 0;
    memset(v20, 0, sizeof(v20));
    a4[1] = off_26C7558C0;
    sub_2168F8DBC(a4, (uint64_t)v20);
    sub_2169B1EE4(v20);
  }
  else
  {
    *(void *)&v20[0] = *a1;
    *((void *)&v20[0] + 1) = v5;
    LODWORD(v8) = 1;
    do
    {
      unint64_t v8 = (*(_DWORD *)sub_216999AD4((uint64_t *)v20, (uint64_t)a2, a3) * v8);
      sub_216999B54(v20);
    }
    while (*(void *)&v20[0] != *((void *)&v20[0] + 1));
    sub_2169B19A0((uint64_t)v20, v8);
    sub_2169B23EC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v9, v10);
    uint64_t v11 = v21;
    sub_2169B23EC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v12, v13);
    uint64_t v16 = 0;
    uint64_t v18 = v11;
    uint64_t v19 = v21 + 24 * *(void *)&v20[0];
    while (v18 != v19)
    {
      unint64_t v17 = (std::string *)sub_2169B1A38(&v18, v14, v15);
      sub_2169B17E0(v17, a2, (unint64_t *)a3);
      ++v16;
      sub_2169B1AB8(&v18);
    }
    a4[1] = off_26C7558C0;
    sub_2168F8DBC(a4, (uint64_t)v20);
    sub_2169B1EE4(v20);
  }
}

void sub_2169B1728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2169B1EE4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2169B1758(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, long long a12, uint64_t a13)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to parse at element %zd (at sub-part %zd if there are multiple parts)", v15, v16);
    if (*(char *)(v14 + 23) < 0) {
      operator delete(*(void **)v14);
    }
    *(_OWORD *)uint64_t v14 = a12;
    *(void *)(v14 + 16) = a13;
    *(void *)(v13 + 8) = 0;
    __cxa_end_catch();
    JUMPOUT(0x2169B16D0);
  }
  JUMPOUT(0x2169B1740);
}

void sub_2169B17D0()
{
}

std::string *sub_2169B17E0(std::string *a1, uint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *a3;
  unint64_t v4 = *a3 + 1;
  uint64_t v5 = *a2;
  if (v4 > 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3))
  {
    uint64_t v9 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", 47);
    v11[0] = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", (uint64_t)v9, 0x2Fu);
    v11[1] = "MakeScalarValueImpl";
    v11[2] = 74;
    v11[3] = "void pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeScalarValueImpl(string *, const vector<Value> &, size_t &)";
    char v12 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v11, 1, (pxrInternal__aapl__pxrReserved__ *)"Not enough values to parse value of type %s", "string");
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &unk_26C7552B8;
    __cxa_throw(exception, (struct type_info *)&unk_26C755290, (void (*)(void *))std::exception::~exception);
  }
  *a3 = v4;
  uint64_t v7 = (const std::string *)sub_2169B1904(v5 + 56 * v3);

  return std::string::operator=(a1, v7);
}

uint64_t sub_2169B1904(uint64_t result)
{
  if (*(_DWORD *)(result + 48) != 3) {
    sub_2168BBB60();
  }
  return result;
}

void sub_2169B1930()
{
}

void sub_2169B198C()
{
}

uint64_t sub_2169B19A0(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v6 = 0;
  sub_2169B1FA0((void *)a1);
  uint64_t v7 = __p;
  sub_2169B2028((unint64_t *)a1, a2, (long long **)&v7);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_2169B1A10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_2169B1EE4(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_2169B1A38(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    void v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArray<std::string"
            ">>::operator*() [T = pxrInternal__aapl__pxrReserved__::VtArray<std::string>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_2169B1AB0()
{
}

void *sub_2169B1AB8(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArr"
            "ay<std::string>>::operator++() [T = pxrInternal__aapl__pxrReserved__::VtArray<std::string>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 24;
  }
  return a1;
}

uint64_t *sub_2169B1B38(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *sub_2169B1B58(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2169B1D00(a1);
}

uint64_t sub_2169B1B68()
{
  return 1;
}

unint64_t sub_2169B1B70(uint64_t **a1)
{
  unint64_t v1 = *a1;
  uint64_t v2 = **a1;
  char v5 = 1;
  uint64_t v4 = v2;
  sub_216960068((unint64_t)&v4, (uint64_t *)v1[4], v2);
  return bswap64(0x9E3779B97F4A7C55 * v4);
}

uint64_t sub_2169B1BC8(uint64_t **a1, uint64_t *a2)
{
  return sub_2169B1D58(*a1, *a2);
}

uint64_t sub_2169B1BD4(uint64_t **a1, uint64_t a2)
{
  return sub_2169B1D58(*a1, a2);
}

uint64_t sub_2169B1BE0()
{
  return 0;
}

void *sub_2169B1BEC(uint64_t **a1, void *a2)
{
  unint64_t v3 = *a1;
  uint64_t v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, void *))sub_2169B1EB4);
  return a2;
}

void *sub_2169B1C40()
{
  return &unk_26C74E280;
}

uint64_t sub_2169B1C4C()
{
  return 1;
}

void *sub_2169B1C54()
{
  return &unk_26C747090;
}

uint64_t sub_2169B1C60(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_2169B1C68(uint64_t a1)
{
  return **(void **)a1;
}

BOOL sub_2169B1C74(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000021746967CLL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2169B1CB0(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74E280, a2, a3);
}

void *sub_2169B1CD4()
{
  return &unk_26C74E280;
}

uint64_t sub_2169B1CE0(uint64_t a1)
{
  return *(void *)a1;
}

void *sub_2169B1CE8@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  a2[1] = off_26C7558C0;
  return sub_2168F8DBC(a2, v2);
}

uint64_t *sub_2169B1D00(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_2169B1EE4((void *)v2);
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t sub_2169B1D58(uint64_t *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32) && sub_2168F8C2C((uint64_t)a1, a2) && a1[3] == *(void *)(a2 + 24)) {
    return 1;
  }
  uint64_t result = sub_2168F8C2C((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  uint64_t v5 = *a1;
  if (!*a1) {
    return 1;
  }
  char v6 = (unsigned __int8 *)a1[4];
  int v7 = *(unsigned __int8 **)(a2 + 32);
  uint64_t v8 = 24 * v5 - 24;
  do
  {
    uint64_t result = sub_2168513F8((uint64_t)&v10, v6, v7);
    if (!result) {
      break;
    }
    v6 += 24;
    v7 += 24;
    uint64_t v9 = v8;
    v8 -= 24;
  }
  while (v9);
  return result;
}

uint64_t sub_2169B1E18(_OWORD **a1)
{
  unsigned int v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    unint64_t v3 = operator new(0x30uLL);
    uint64_t v4 = *a1;
    long long v5 = (*a1)[1];
    *(_OWORD *)unint64_t v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    uint64_t v6 = *((void *)v4 + 4);
    *((void *)v3 + 4) = v6;
    if (v6)
    {
      int v7 = (atomic_ullong *)*((void *)v3 + 3);
      uint64_t v8 = (atomic_ullong *)(v6 - 16);
      if (!v7) {
        int v7 = v8;
      }
      atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
      uint64_t v4 = *a1;
    }
    atomic_store(0, (unsigned int *)v3 + 10);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 10, 1u, memory_order_relaxed);
    char v10 = v4;
    *a1 = v3;
    sub_2169B1D00((uint64_t *)&v10);
  }
  return (uint64_t)*a1;
}

void *sub_2169B1EB4(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  *a1 += 24;
  int v4 = *(char *)(v3 + 23);
  if (v4 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = *(void *)v3;
  }
  if (v4 >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(v3 + 23);
  }
  else {
    uint64_t v6 = *(void *)(v3 + 8);
  }
  return sub_216779180(a2, v5, v6);
}

void sub_2169B1EE4(void *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    int v4 = a1 + 3;
    uint64_t v3 = (atomic_ullong *)a1[3];
    if (v3)
    {
      if (atomic_fetch_add_explicit(v3, 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
      {
        __dmb(9u);
        int v7 = *(void (**)(void))(*v4 + 8);
        if (v7) {
          v7();
        }
      }
    }
    else if (atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 - 16), 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
    {
      __dmb(9u);
      uint64_t v5 = a1[4];
      if (*a1)
      {
        uint64_t v6 = 24 * *a1;
        do
        {
          if (*(char *)(v5 + 23) < 0) {
            operator delete(*(void **)v5);
          }
          v5 += 24;
          v6 -= 24;
        }
        while (v6);
        uint64_t v5 = a1[4];
      }
      operator delete((void *)(v5 - 16));
    }
    void *v4 = 0;
    v4[1] = 0;
  }
}

void sub_2169B1FA0(void *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    if (a1[3] || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      sub_2169B1EE4(a1);
    }
    else if (*a1)
    {
      uint64_t v4 = a1[4];
      uint64_t v5 = 24 * *a1;
      do
      {
        if (*(char *)(v4 + 23) < 0) {
          operator delete(*(void **)v4);
        }
        v4 += 24;
        v5 -= 24;
      }
      while (v5);
    }
    *a1 = 0;
  }
}

void sub_2169B2028(unint64_t *a1, unint64_t a2, long long **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    int v7 = (void *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 >= a2)
          {
            uint64_t v13 = 3 * a2;
            do
            {
              if (SHIBYTE(v7[v13 + 2]) < 0) {
                operator delete((void *)v7[v13]);
              }
              v13 += 3;
            }
            while (3 * v3 != v13);
            goto LABEL_25;
          }
          uint64_t v9 = a1[4];
          if (*(void *)(v9 - 8) < a2)
          {
            int v7 = sub_2169B21D0((uint64_t)a1, a2);
            sub_2169B232C(v9, v9 + 24 * v3, (uint64_t)v7);
          }
LABEL_19:
          uint64_t v10 = (uint64_t)&v7[3 * v3];
          goto LABEL_20;
        }
        int v7 = (void *)a1[4];
      }
      uint64_t v11 = (uint64_t)v7;
      if (v3 >= a2) {
        unint64_t v12 = a2;
      }
      else {
        unint64_t v12 = *a1;
      }
      int v7 = sub_2169B21D0((uint64_t)a1, a2);
      sub_2169B232C(v11, v11 + 24 * v12, (uint64_t)v7);
      if (v3 >= a2) {
        goto LABEL_25;
      }
      goto LABEL_19;
    }
    if (a2 <= 0xAAAAAAAAAAAAAAALL)
    {
      int v7 = sub_2169B21D0((uint64_t)a1, a2);
      uint64_t v10 = (uint64_t)v7;
LABEL_20:
      sub_2169B2278(a3, v10, (uint64_t)&v7[3 * a2]);
LABEL_25:
      if (v7 != (void *)a1[4])
      {
        sub_2169B1EE4(a1);
        a1[4] = (unint64_t)v7;
      }
      *a1 = a2;
      return;
    }
  }

  sub_2169B1FA0(a1);
}

void *sub_2169B21D0(uint64_t a1, unint64_t a2)
{
  sub_216851EE4((uint64_t)&v7, "VtArray::_AllocateNew", "value_type *pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_AllocateNew(size_t) [T = std::string]");
  if (a2 > 0xAAAAAAAAAAAAAA9) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 24 * a2 + 16;
  }
  uint64_t v4 = operator new(v3);
  void *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_2169B2260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

long long **sub_2169B2278(long long **result, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    uint64_t v5 = 0;
    uint64_t v6 = *result;
    do
    {
      uint64_t result = (long long **)(a2 + v5);
      if (*((char *)v6 + 23) < 0)
      {
        uint64_t result = (long long **)sub_216778F24(result, *(void **)v6, *((void *)v6 + 1));
      }
      else
      {
        long long v7 = *v6;
        result[2] = (long long *)*((void *)v6 + 2);
        *(_OWORD *)uint64_t result = v7;
      }
      v5 += 24;
    }
    while (a2 + v5 != a3);
  }
  return result;
}

void sub_2169B22EC(void *a1)
{
  __cxa_begin_catch(a1);
  for (; v2; v2 -= 24)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 24;
  }
  __cxa_rethrow();
}

void sub_2169B2318(_Unwind_Exception *a1)
{
}

uint64_t sub_2169B232C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = a3 + v6;
      int v8 = (long long *)(a1 + v6);
      if (*(char *)(a1 + v6 + 23) < 0)
      {
        sub_216778F24((unsigned char *)v7, *(void **)v8, *((void *)v8 + 1));
      }
      else
      {
        long long v9 = *v8;
        *(void *)(v7 + 16) = *((void *)v8 + 2);
        *(_OWORD *)uint64_t v7 = v9;
      }
      v6 += 24;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

void sub_2169B23AC(void *a1)
{
  __cxa_begin_catch(a1);
  for (; v2; v2 -= 24)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 24;
  }
  __cxa_rethrow();
}

void sub_2169B23D8(_Unwind_Exception *a1)
{
}

void sub_2169B23EC(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    if (*((void *)this + 3) || (unint64_t v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<std::string>::_DetachIfNotUnique() [T = std::string]", a3);
      uint64_t v6 = *((void *)this + 4);
      uint64_t v7 = *(void *)this;
      int v8 = sub_2169B21D0((uint64_t)this, *(void *)this);
      sub_2169B232C(v6, v6 + 24 * v7, (uint64_t)v8);
      sub_2169B1EE4(this);
      *((void *)this + 4) = v8;
    }
  }
}

uint64_t sub_2169B247C@<X0>(uint64_t *a1@<X1>, unint64_t *a2@<X2>, atomic_uint **a3@<X8>)
{
  uint64_t v7 = 0;
  uint64_t result = sub_2169B27A0(&v7, a1, a2);
  uint64_t v5 = v7;
  *a3 = (atomic_uint *)v7;
  a3[1] = (atomic_uint *)((char *)&off_26C750C70 + 1);
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)(v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      *a3 = v6;
    }
  }
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void sub_2169B25A8(void *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = a1[1];
  if (*a1 == v5)
  {
    uint64_t v21 = 0;
    memset(v20, 0, sizeof(v20));
    a4[1] = off_26C755978;
    sub_2168F8DBC(a4, (uint64_t)v20);
    sub_2169B2E0C(v20);
  }
  else
  {
    *(void *)&v20[0] = *a1;
    *((void *)&v20[0] + 1) = v5;
    LODWORD(v8) = 1;
    do
    {
      unint64_t v8 = (*(_DWORD *)sub_216999AD4((uint64_t *)v20, (uint64_t)a2, a3) * v8);
      sub_216999B54(v20);
    }
    while (*(void *)&v20[0] != *((void *)&v20[0] + 1));
    sub_2169B28F8((uint64_t)v20, v8);
    sub_2169B3278((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v9, v10);
    uint64_t v11 = v21;
    sub_2169B3278((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v12, v13);
    uint64_t v16 = 0;
    uint64_t v18 = v11;
    uint64_t v19 = v21 + 8 * *(void *)&v20[0];
    while (v18 != v19)
    {
      unint64_t v17 = (uint64_t *)sub_2169B299C(&v18, v14, v15);
      sub_2169B27A0(v17, a2, (unint64_t *)a3);
      ++v16;
      sub_2169B2A1C(&v18);
    }
    a4[1] = off_26C755978;
    sub_2168F8DBC(a4, (uint64_t)v20);
    sub_2169B2E0C(v20);
  }
}

void sub_2169B26E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2169B2E0C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2169B2718(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, long long a12, uint64_t a13)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to parse at element %zd (at sub-part %zd if there are multiple parts)", v15, v16);
    if (*(char *)(v14 + 23) < 0) {
      operator delete(*(void **)v14);
    }
    *(_OWORD *)uint64_t v14 = a12;
    *(void *)(v14 + 16) = a13;
    *(void *)(v13 + 8) = 0;
    __cxa_end_catch();
    JUMPOUT(0x2169B2690);
  }
  JUMPOUT(0x2169B2700);
}

void sub_2169B2790()
{
}

uint64_t sub_2169B27A0(uint64_t *a1, uint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *a3;
  unint64_t v4 = *a3 + 1;
  uint64_t v5 = *a2;
  if (v4 > 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3))
  {
    uint64_t v10 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", 47);
    v12[0] = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", (uint64_t)v10, 0x2Fu);
    v12[1] = "MakeScalarValueImpl";
    void v12[2] = 80;
    void v12[3] = "void pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeScalarValueImpl(TfToken *, const vector<Value> &, size_t &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Not enough values to parse value of type %s", "token");
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &unk_26C7552B8;
    __cxa_throw(exception, (struct type_info *)&unk_26C755290, (void (*)(void *))std::exception::~exception);
  }
  *a3 = v4;
  sub_2169B1904(v5 + 56 * v3);
  uint64_t result = pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v12);
  uint64_t v8 = *a1;
  uint64_t v9 = *a1 & 7;
  if (v12 == a1)
  {
    if (v9) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    if (v9) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    *a1 = v12[0];
  }
  return result;
}

uint64_t sub_2169B28F8(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v5 = 0;
  sub_2169B2EC0((void *)a1);
  uint64_t v6 = &v5;
  sub_2169B2F44((uint64_t *)a1, a2, &v6);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

void sub_2169B296C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if ((a9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_2169B2E0C(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_2169B299C(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    void v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal"
            "__aapl__pxrReserved__::TfToken>>::operator*() [T = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aa"
            "pl__pxrReserved__::TfToken>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_2169B2A14()
{
}

void *sub_2169B2A1C(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArr"
            "ay<pxrInternal__aapl__pxrReserved__::TfToken>>::operator++() [T = pxrInternal__aapl__pxrReserved__::VtArray<"
            "pxrInternal__aapl__pxrReserved__::TfToken>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

uint64_t *sub_2169B2A9C(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *sub_2169B2ABC(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2169B2C58(a1);
}

uint64_t sub_2169B2ACC()
{
  return 1;
}

unint64_t sub_2169B2AD4(unint64_t **a1)
{
  unint64_t v1 = **a1;
  if (v1)
  {
    uint64_t v2 = (uint64_t *)(*a1)[4];
    unint64_t v3 = **a1;
    do
    {
      uint64_t v4 = *v2++;
      unint64_t v1 = (v4 & 0xFFFFFFFFFFFFFFF8)
         + (((v4 & 0xFFFFFFFFFFFFFFF8) + v1 + ((v4 & 0xFFFFFFFFFFFFFFF8) + v1) * ((v4 & 0xFFFFFFFFFFFFFFF8) + v1)) >> 1);
      --v3;
    }
    while (v3);
    v1 *= 0x9E3779B97F4A7C55;
  }
  return bswap64(v1);
}

BOOL sub_2169B2B20(void **a1, uint64_t *a2)
{
  return sub_2169B2CB0(*a1, *a2);
}

BOOL sub_2169B2B2C(void **a1, uint64_t a2)
{
  return sub_2169B2CB0(*a1, a2);
}

uint64_t sub_2169B2B38()
{
  return 0;
}

void *sub_2169B2B44(uint64_t **a1, void *a2)
{
  unint64_t v3 = *a1;
  uint64_t v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, void *))sub_2169B2DF4);
  return a2;
}

void *sub_2169B2B98()
{
  return &unk_26C74E298;
}

uint64_t sub_2169B2BA4()
{
  return 1;
}

void *sub_2169B2BAC()
{
  return &unk_26C74C2C0;
}

uint64_t sub_2169B2BB8(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_2169B2BC0(uint64_t a1)
{
  return **(void **)a1;
}

BOOL sub_2169B2BCC(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x80000002174696ECLL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2169B2C08(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74E298, a2, a3);
}

void *sub_2169B2C2C()
{
  return &unk_26C74E298;
}

uint64_t sub_2169B2C38(uint64_t a1)
{
  return *(void *)a1;
}

void *sub_2169B2C40@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  a2[1] = off_26C755978;
  return sub_2168F8DBC(a2, v2);
}

uint64_t *sub_2169B2C58(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_2169B2E0C((void *)v2);
    operator delete((void *)v2);
  }
  return a1;
}

BOOL sub_2169B2CB0(void *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32) && sub_2168F8C2C((uint64_t)a1, a2) && a1[3] == *(void *)(a2 + 24)) {
    return 1;
  }
  BOOL result = sub_2168F8C2C((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  if (!*a1) {
    return 1;
  }
  uint64_t v5 = (uint64_t *)a1[4];
  char v6 = *(uint64_t **)(a2 + 32);
  uint64_t v7 = 8 * *a1 - 8;
  do
  {
    uint64_t v8 = *v5++;
    unint64_t v9 = v8 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v10 = *v6++;
    BOOL result = v9 == (v10 & 0xFFFFFFFFFFFFFFF8);
    BOOL v11 = v9 != (v10 & 0xFFFFFFFFFFFFFFF8) || v7 == 0;
    v7 -= 8;
  }
  while (!v11);
  return result;
}

uint64_t sub_2169B2D58(_OWORD **a1)
{
  unsigned int v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    unint64_t v3 = operator new(0x30uLL);
    uint64_t v4 = *a1;
    long long v5 = (*a1)[1];
    *(_OWORD *)unint64_t v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    uint64_t v6 = *((void *)v4 + 4);
    *((void *)v3 + 4) = v6;
    if (v6)
    {
      uint64_t v7 = (atomic_ullong *)*((void *)v3 + 3);
      uint64_t v8 = (atomic_ullong *)(v6 - 16);
      if (!v7) {
        uint64_t v7 = v8;
      }
      atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
      uint64_t v4 = *a1;
    }
    atomic_store(0, (unsigned int *)v3 + 10);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 10, 1u, memory_order_relaxed);
    uint64_t v10 = v4;
    *a1 = v3;
    sub_2169B2C58((uint64_t *)&v10);
  }
  return (uint64_t)*a1;
}

void *sub_2169B2DF4(void **a1, void *a2)
{
  unint64_t v3 = (*a1)++;
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, v3);
}

void sub_2169B2E0C(void *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    unint64_t v3 = a1 + 3;
    unsigned int v2 = (atomic_ullong *)a1[3];
    if (v2)
    {
      if (atomic_fetch_add_explicit(v2, 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
      {
        __dmb(9u);
        uint64_t v6 = *(void (**)(void))(*v3 + 8);
        if (v6) {
          v6();
        }
      }
    }
    else if (atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 - 16), 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
    {
      __dmb(9u);
      uint64_t v4 = (void *)a1[4];
      if (*a1)
      {
        uint64_t v5 = 8 * *a1;
        do
        {
          if ((*v4 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          ++v4;
          v5 -= 8;
        }
        while (v5);
        uint64_t v4 = (void *)a1[4];
      }
      operator delete(v4 - 2);
    }
    *unint64_t v3 = 0;
    v3[1] = 0;
  }
}

void sub_2169B2EC0(void *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    if (a1[3] || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      sub_2169B2E0C(a1);
    }
    else if (*a1)
    {
      uint64_t v4 = (void *)a1[4];
      uint64_t v5 = 8 * *a1;
      do
      {
        if ((*v4 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        ++v4;
        v5 -= 8;
      }
      while (v5);
    }
    *a1 = 0;
  }
}

void sub_2169B2F44(uint64_t *a1, unint64_t a2, uint64_t **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    uint64_t v7 = (uint64_t *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load((unint64_t *)v7 - 2);
        if (v8 == 1)
        {
          if (v3 >= a2)
          {
            uint64_t v23 = a2;
            do
            {
              uint64_t v24 = v7[v23];
              if ((v24 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
              ++v23;
            }
            while (v3 != v23);
          }
          else
          {
            unint64_t v9 = (uint64_t *)a1[4];
            if (*(v9 - 1) < a2) {
              uint64_t v7 = sub_2169B3204((uint64_t)a1, v9, a2, *a1);
            }
            uint64_t v10 = *a3;
            uint64_t v11 = v3;
            do
            {
              uint64_t v12 = *v10;
              v7[v11] = *v10;
              if ((v12 & 7) != 0
                && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
              {
                v7[v11] &= 0xFFFFFFFFFFFFFFF8;
              }
              ++v11;
            }
            while (a2 != v11);
          }
LABEL_40:
          if (v7 != (uint64_t *)a1[4])
          {
            sub_2169B2E0C(a1);
            a1[4] = (uint64_t)v7;
          }
          *a1 = a2;
          return;
        }
        uint64_t v7 = (uint64_t *)a1[4];
      }
      if (v3 >= a2) {
        uint64_t v18 = a2;
      }
      else {
        uint64_t v18 = *a1;
      }
      uint64_t v19 = sub_2169B3204((uint64_t)a1, v7, a2, v18);
      uint64_t v7 = v19;
      if (v3 < a2)
      {
        uint64_t v20 = *a3;
        uint64_t v21 = v3;
        do
        {
          uint64_t v22 = *v20;
          v19[v21] = *v20;
          if ((v22 & 7) != 0
            && (atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
          {
            v19[v21] &= 0xFFFFFFFFFFFFFFF8;
          }
          ++v21;
        }
        while (a2 != v21);
      }
      goto LABEL_40;
    }
    uint64_t v13 = 8 * a2;
    if (8 * a2 / a2 == 8)
    {
      uint64_t v14 = sub_2169B3164((uint64_t)a1, a2);
      uint64_t v7 = v14;
      unint64_t v15 = 0;
      uint64_t v16 = *a3;
      do
      {
        uint64_t v17 = *v16;
        v14[v15 / 8] = *v16;
        if ((v17 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          v14[v15 / 8] &= 0xFFFFFFFFFFFFFFF8;
        }
        v15 += 8;
      }
      while (v13 != v15);
      goto LABEL_40;
    }
  }

  sub_2169B2EC0(a1);
}

void *sub_2169B3164(uint64_t a1, unint64_t a2)
{
  sub_216851EE4((uint64_t)&v7, "VtArray::_AllocateNew", "value_type *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_AllocateNew(size_t) [T = pxrInternal__aapl__pxrReserved__::TfToken]");
  if (a2 > 0x1FFFFFFFFFFFFFFDLL) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 8 * a2 + 16;
  }
  uint64_t v4 = operator new(v3);
  void *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_2169B31EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_2169B3204(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t a4)
{
  BOOL result = sub_2169B3164(a1, a3);
  if (a4)
  {
    uint64_t v7 = 8 * a4;
    int v8 = result;
    do
    {
      uint64_t v9 = *a2;
      *int v8 = *a2;
      if ((v9 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *v8 &= 0xFFFFFFFFFFFFFFF8;
      }
      ++a2;
      ++v8;
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

void sub_2169B3278(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    if (*((void *)this + 3) || (unint64_t v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::TfToken]", a3);
      uint64_t v6 = sub_2169B3204((uint64_t)this, *((uint64_t **)this + 4), *(void *)this, *(void *)this);
      sub_2169B2E0C(this);
      *((void *)this + 4) = v6;
    }
  }
}

void sub_2169B32EC(uint64_t *a1@<X1>, unint64_t *a2@<X2>, void *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)v6);
  sub_2169B3608((uint64_t)v6, a1, a2);
  a3[1] = &off_26C755A30;
  sub_2169B3DA8(a3, (long long *)v6);
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
}

void sub_2169B3384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_21682E578((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2169B33FC()
{
}

void sub_2169B340C(void *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = a1[1];
  if (*a1 == v5)
  {
    uint64_t v21 = 0;
    memset(v20, 0, sizeof(v20));
    a4[1] = off_26C755AE8;
    sub_2168F8DBC(a4, (uint64_t)v20);
    sub_2169B4408(v20);
  }
  else
  {
    *(void *)&v20[0] = *a1;
    *((void *)&v20[0] + 1) = v5;
    LODWORD(v8) = 1;
    do
    {
      unint64_t v8 = (*(_DWORD *)sub_216999AD4((uint64_t *)v20, (uint64_t)a2, a3) * v8);
      sub_216999B54(v20);
    }
    while (*(void *)&v20[0] != *((void *)&v20[0] + 1));
    sub_2169B3E0C((uint64_t)v20, v8);
    sub_2169B49FC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v9, v10);
    uint64_t v11 = v21;
    sub_2169B49FC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v12, v13);
    uint64_t v16 = 0;
    uint64_t v18 = v11;
    uint64_t v19 = v21 + 48 * *(void *)&v20[0];
    while (v18 != v19)
    {
      uint64_t v17 = sub_2169B3EB8(&v18, v14, v15);
      sub_2169B3608(v17, a2, (unint64_t *)a3);
      ++v16;
      sub_2169B3F38(&v18);
    }
    a4[1] = off_26C755AE8;
    sub_2168F8DBC(a4, (uint64_t)v20);
    sub_2169B4408(v20);
  }
}

void sub_2169B3550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2169B4408((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2169B3580(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, long long a12, uint64_t a13)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to parse at element %zd (at sub-part %zd if there are multiple parts)", v15, v16);
    if (*(char *)(v14 + 23) < 0) {
      operator delete(*(void **)v14);
    }
    *(_OWORD *)uint64_t v14 = a12;
    *(void *)(v14 + 16) = a13;
    *(void *)(v13 + 8) = 0;
    __cxa_end_catch();
    JUMPOUT(0x2169B34F8);
  }
  JUMPOUT(0x2169B3568);
}

void sub_2169B35F8()
{
}

void sub_2169B3608(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *a3;
  unint64_t v4 = *a3 + 1;
  uint64_t v5 = *a2;
  if (v4 > 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3))
  {
    uint64_t v9 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", 47);
    __p[0] = (void *)sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", (uint64_t)v9, 0x2Fu);
    __p[1] = "MakeScalarValueImpl";
    uint64_t v12 = 294;
    *(void *)&long long v13 = "void pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeScalarValueImpl(SdfAssetPath *, cons"
                      "t vector<Value> &, size_t &)";
    BYTE8(v13) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Not enough values to parse value of type %s", "asset");
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &unk_26C7552B8;
    __cxa_throw(exception, (struct type_info *)&unk_26C755290, (void (*)(void *))std::exception::~exception);
  }
  *a3 = v4;
  sub_2169B3790(v5 + 56 * v3, (uint64_t)__p);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)__p;
  *(void *)(a1 + 16) = v12;
  HIBYTE(v12) = 0;
  LOBYTE(__p[0]) = 0;
  char v7 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*v7);
    int v8 = SHIBYTE(v12);
    *(_OWORD *)char v7 = v13;
    *(void *)(a1 + 40) = v14;
    HIBYTE(v14) = 0;
    LOBYTE(v13) = 0;
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)char v7 = v13;
    *(void *)(a1 + 40) = v14;
  }
}

unsigned char *sub_2169B3790@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_2169B382C(a1, a2);
}

unsigned char *sub_2169B382C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  int v4 = *(_DWORD *)(a1 + 48);
  if (v4 == 5)
  {
    if (*(char *)(a1 + 23) < 0)
    {
      sub_216778F24((unsigned char *)a2, *(void **)a1, *(void *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)a2 = *(_OWORD *)a1;
      *(void *)(a2 + 16) = *(void *)(a1 + 16);
    }
    BOOL result = (unsigned char *)(a2 + 24);
    if (*(char *)(a1 + 47) < 0)
    {
      return sub_216778F24(result, *(void **)(a1 + 24), *(void *)(a1 + 32));
    }
    else
    {
      *(_OWORD *)BOOL result = *(_OWORD *)(a1 + 24);
      *(void *)(a2 + 40) = *(void *)(a1 + 40);
    }
  }
  else
  {
    if (v4 != 3) {
      sub_2168BBB60();
    }
    return (unsigned char *)pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(a2);
  }
  return result;
}

void sub_2169B38E0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2169B38FC(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 48), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *sub_2169B391C(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2169B3A7C(a1);
}

uint64_t sub_2169B392C()
{
  return 1;
}

unint64_t sub_2169B3934(pxrInternal__aapl__pxrReserved__ **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (uint64_t)*a1 + 24;
  uint64_t v4 = 0;
  char v5 = 0;
  sub_2169B3AE8((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, v1, v2);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v4));
}

uint64_t sub_2169B398C(unsigned __int8 **a1, unsigned __int8 **a2)
{
  return sub_2169B3B54(*a1, *a2);
}

uint64_t sub_2169B3998(unsigned __int8 **a1, unsigned __int8 *a2)
{
  return sub_2169B3B54(*a1, a2);
}

uint64_t sub_2169B39A4()
{
  return 0;
}

void *sub_2169B39B0(uint64_t *a1, void *a2)
{
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, *a1);
}

void *sub_2169B39C0()
{
  return &unk_26C755240;
}

uint64_t sub_2169B39CC()
{
  return 0;
}

uint64_t sub_2169B39D4()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_2169B39E0()
{
  return 0;
}

uint64_t sub_2169B39E8()
{
  return 0;
}

BOOL sub_2169B39F0(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000021746880ALL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2169B3A2C(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C755240, a2, a3);
}

void *sub_2169B3A50()
{
  return &unk_26C755240;
}

uint64_t sub_2169B3A5C(uint64_t a1)
{
  return *(void *)a1;
}

char *sub_2169B3A64@<X0>(long long **a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  a2[1] = &off_26C755A30;
  return sub_2169B3DA8(a2, v2);
}

uint64_t *sub_2169B3A7C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 48), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    if (*(char *)(v2 + 47) < 0) {
      operator delete(*(void **)(v2 + 24));
    }
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    operator delete((void *)v2);
  }
  return a1;
}

unint64_t sub_2169B3AE8(pxrInternal__aapl__pxrReserved__::Tf_HashState *a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3)
{
  char v5 = (char *)*((void *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    uint64_t v6 = (char *)*((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = *(pxrInternal__aapl__pxrReserved__ **)a2;
    uint64_t v6 = v5;
  }
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes(a1, a2, v6);
  int v7 = *(char *)(a3 + 23);
  if (v7 >= 0) {
    int v8 = (pxrInternal__aapl__pxrReserved__ *)a3;
  }
  else {
    int v8 = *(pxrInternal__aapl__pxrReserved__ **)a3;
  }
  if (v7 >= 0) {
    uint64_t v9 = (char *)*(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v9 = *(char **)(a3 + 8);
  }

  return pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes(a1, v8, v9);
}

uint64_t sub_2169B3B54(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0;
  }
  uint64_t v6 = a2;
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, a2, *((void *)a1 + 1))) {
      return 0;
    }
  }
  else if (a1[23])
  {
    int v8 = a1;
    while (*v8 == *a2)
    {
      ++v8;
      ++a2;
      if (!--v2) {
        goto LABEL_16;
      }
    }
    return 0;
  }
LABEL_16:
  uint64_t v9 = a1[47];
  if ((v9 & 0x80u) == 0) {
    uint64_t v10 = a1[47];
  }
  else {
    uint64_t v10 = *((void *)a1 + 4);
  }
  uint64_t v11 = v6[47];
  int v12 = (char)v11;
  if ((v11 & 0x80u) != 0) {
    uint64_t v11 = *((void *)v6 + 4);
  }
  if (v10 != v11) {
    return 0;
  }
  long long v13 = (const void **)(a1 + 24);
  uint64_t v16 = (unsigned __int8 *)*((void *)v6 + 3);
  unint64_t v15 = v6 + 24;
  uint64_t v14 = v16;
  if (v12 >= 0) {
    uint64_t v17 = v15;
  }
  else {
    uint64_t v17 = v14;
  }
  if ((v9 & 0x80) != 0) {
    return memcmp(*v13, v17, *((void *)a1 + 4)) == 0;
  }
  if (!a1[47]) {
    return 1;
  }
  uint64_t v18 = v9 - 1;
  do
  {
    int v20 = *(unsigned __int8 *)v13;
    long long v13 = (const void **)((char *)v13 + 1);
    int v19 = v20;
    int v22 = *v17++;
    int v21 = v22;
    BOOL v24 = v18-- != 0;
    uint64_t result = v19 == v21;
  }
  while (v19 == v21 && v24);
  return result;
}

long long *sub_2169B3C80(long long **a1)
{
  unsigned int v2 = atomic_load((unsigned int *)*a1 + 12);
  if (v2 != 1)
  {
    uint64_t v3 = operator new(0x38uLL);
    sub_2169B3D08((char *)v3, *a1);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 12, 1u, memory_order_relaxed);
    int v5 = *a1;
    *a1 = (long long *)v3;
    sub_2169B3A7C((uint64_t *)&v5);
  }
  return *a1;
}

void sub_2169B3CF4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_2169B3D08(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  int v5 = __dst + 24;
  if (*((char *)a2 + 47) < 0)
  {
    sub_216778F24(v5, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)int v5 = v6;
  }
  atomic_store(0, (unsigned int *)__dst + 12);
  return __dst;
}

void sub_2169B3D8C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_2169B3DA8(void *a1, long long *a2)
{
  long long v4 = operator new(0x38uLL);
  uint64_t result = sub_2169B3D08((char *)v4, a2);
  *a1 = v4;
  atomic_fetch_add_explicit((atomic_uint *volatile)v4 + 12, 1u, memory_order_relaxed);
  return result;
}

void sub_2169B3DF8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2169B3E0C(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)v5);
  sub_2169B44D8((void *)a1);
  uint64_t v9 = v5;
  sub_2169B4574((unint64_t *)a1, a2, (long long **)&v9);
  if (v8 < 0) {
    operator delete(__p);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  return a1;
}

void sub_2169B3E90(_Unwind_Exception *a1)
{
  sub_2169B4408(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2169B3EB8(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    void v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal"
            "__aapl__pxrReserved__::SdfAssetPath>>::operator*() [T = pxrInternal__aapl__pxrReserved__::VtArray<pxrInterna"
            "l__aapl__pxrReserved__::SdfAssetPath>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_2169B3F30()
{
}

void *sub_2169B3F38(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArr"
            "ay<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>::operator++() [T = pxrInternal__aapl__pxrReserved__::VtA"
            "rray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 48;
  }
  return a1;
}

uint64_t *sub_2169B3FB8(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *sub_2169B3FD8(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2169B4150(a1);
}

uint64_t sub_2169B3FE8()
{
  return 1;
}

unint64_t sub_2169B3FF0(uint64_t **a1)
{
  return sub_2169B41A8((uint64_t)&v2, *a1);
}

uint64_t sub_2169B4018(uint64_t **a1, uint64_t *a2)
{
  return sub_2169B42A0(*a1, *a2);
}

uint64_t sub_2169B4024(uint64_t **a1, uint64_t a2)
{
  return sub_2169B42A0(*a1, a2);
}

uint64_t sub_2169B4030()
{
  return 0;
}

void *sub_2169B403C(uint64_t **a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, void *))sub_2169B43F0);
  return a2;
}

void *sub_2169B4090()
{
  return &unk_26C755250;
}

uint64_t sub_2169B409C()
{
  return 1;
}

void *sub_2169B40A4()
{
  return &unk_26C755240;
}

uint64_t sub_2169B40B0(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_2169B40B8(uint64_t a1)
{
  return **(void **)a1;
}

BOOL sub_2169B40C4(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000021746883DLL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2169B4100(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C755250, a2, a3);
}

void *sub_2169B4124()
{
  return &unk_26C755250;
}

uint64_t sub_2169B4130(uint64_t a1)
{
  return *(void *)a1;
}

void *sub_2169B4138@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  a2[1] = off_26C755AE8;
  return sub_2168F8DBC(a2, v2);
}

uint64_t *sub_2169B4150(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_2169B4408((void *)v2);
    operator delete((void *)v2);
  }
  return a1;
}

unint64_t sub_2169B41A8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  char v8 = 1;
  uint64_t v7 = v2;
  if (v2)
  {
    uint64_t v3 = (pxrInternal__aapl__pxrReserved__ *)a2[4];
    do
    {
      --v2;
      char v4 = (pxrInternal__aapl__pxrReserved__ *)((char *)v3 + 48);
      sub_2169B4220((uint64_t)&v7, v3);
      uint64_t v3 = v4;
    }
    while (v2);
    unint64_t v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    unint64_t v5 = 0;
  }
  return bswap64(v5);
}

unint64_t sub_2169B4220(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2)
{
  uint64_t v5 = 0;
  char v6 = 0;
  unint64_t result = sub_2169B3AE8((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v5, a2, (uint64_t)a2 + 24);
  unint64_t v4 = bswap64(0x9E3779B97F4A7C55 * v5);
  if (*(unsigned char *)(a1 + 8)) {
    v4 += (*(void *)a1 + v4 + (*(void *)a1 + v4) * (*(void *)a1 + v4)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v4;
  return result;
}

uint64_t sub_2169B42A0(uint64_t *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32) && sub_2168F8C2C((uint64_t)a1, a2) && a1[3] == *(void *)(a2 + 24)) {
    return 1;
  }
  uint64_t result = sub_2168F8C2C((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  uint64_t v5 = *a1;
  if (!*a1) {
    return 1;
  }
  char v6 = (unsigned __int8 *)a1[4];
  uint64_t v7 = *(unsigned __int8 **)(a2 + 32);
  uint64_t v8 = 48 * v5 - 48;
  do
  {
    uint64_t result = sub_2169B3B54(v6, v7);
    if (!result) {
      break;
    }
    v6 += 48;
    v7 += 48;
    uint64_t v9 = v8;
    v8 -= 48;
  }
  while (v9);
  return result;
}

uint64_t sub_2169B4354(_OWORD **a1)
{
  unsigned int v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    uint64_t v3 = operator new(0x30uLL);
    unint64_t v4 = *a1;
    long long v5 = (*a1)[1];
    *(_OWORD *)uint64_t v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    uint64_t v6 = *((void *)v4 + 4);
    *((void *)v3 + 4) = v6;
    if (v6)
    {
      uint64_t v7 = (atomic_ullong *)*((void *)v3 + 3);
      uint64_t v8 = (atomic_ullong *)(v6 - 16);
      if (!v7) {
        uint64_t v7 = v8;
      }
      atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
      unint64_t v4 = *a1;
    }
    atomic_store(0, (unsigned int *)v3 + 10);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 10, 1u, memory_order_relaxed);
    uint64_t v10 = v4;
    *a1 = v3;
    sub_2169B4150((uint64_t *)&v10);
  }
  return (uint64_t)*a1;
}

void *sub_2169B43F0(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  *a1 += 48;
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, v3);
}

void sub_2169B4408(void *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    unint64_t v4 = a1 + 3;
    uint64_t v3 = (atomic_ullong *)a1[3];
    if (v3)
    {
      if (atomic_fetch_add_explicit(v3, 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
      {
        __dmb(9u);
        uint64_t v8 = *(void (**)(void))(*v4 + 8);
        if (v8) {
          v8();
        }
      }
    }
    else if (atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 - 16), 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
    {
      __dmb(9u);
      uint64_t v5 = a1[4];
      if (*a1)
      {
        uint64_t v6 = 48 * *a1;
        uint64_t v7 = (char *)(v5 + 23);
        do
        {
          if (v7[24] < 0) {
            operator delete(*(void **)(v7 + 1));
          }
          if (*v7 < 0) {
            operator delete(*(void **)(v7 - 23));
          }
          v7 += 48;
          v6 -= 48;
        }
        while (v6);
        uint64_t v5 = a1[4];
      }
      operator delete((void *)(v5 - 16));
    }
    void *v4 = 0;
    v4[1] = 0;
  }
}

void sub_2169B44D8(void *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    if (a1[3] || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      sub_2169B4408(a1);
    }
    else if (*a1)
    {
      uint64_t v4 = 48 * *a1;
      uint64_t v5 = (char *)(a1[4] + 23);
      do
      {
        if (v5[24] < 0) {
          operator delete(*(void **)(v5 + 1));
        }
        if (*v5 < 0) {
          operator delete(*(void **)(v5 - 23));
        }
        v5 += 48;
        v4 -= 48;
      }
      while (v4);
    }
    *a1 = 0;
  }
}

void sub_2169B4574(unint64_t *a1, unint64_t a2, long long **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    uint64_t v7 = (void *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 >= a2)
          {
            uint64_t v13 = 48 * v3;
            uint64_t v14 = 48 * a2;
            do
            {
              unint64_t v15 = &v7[(unint64_t)v14 / 8];
              if (SHIBYTE(v7[(unint64_t)v14 / 8 + 5]) < 0) {
                operator delete((void *)v15[3]);
              }
              if (*((char *)v15 + 23) < 0) {
                operator delete((void *)v7[(unint64_t)v14 / 8]);
              }
              v14 += 48;
            }
            while (v13 != v14);
            goto LABEL_27;
          }
          uint64_t v9 = a1[4];
          if (*(void *)(v9 - 8) < a2)
          {
            uint64_t v7 = sub_2169B4728((uint64_t)a1, a2);
            sub_2169B48DC(v9, v9 + 48 * v3, (uint64_t)v7);
          }
LABEL_19:
          uint64_t v10 = &v7[6 * v3];
          goto LABEL_20;
        }
        uint64_t v7 = (void *)a1[4];
      }
      uint64_t v11 = (uint64_t)v7;
      if (v3 >= a2) {
        unint64_t v12 = a2;
      }
      else {
        unint64_t v12 = *a1;
      }
      uint64_t v7 = sub_2169B4728((uint64_t)a1, a2);
      sub_2169B48DC(v11, v11 + 48 * v12, (uint64_t)v7);
      if (v3 >= a2) {
        goto LABEL_27;
      }
      goto LABEL_19;
    }
    if (a2 <= 0x555555555555555)
    {
      uint64_t v10 = sub_2169B4728((uint64_t)a1, a2);
      uint64_t v7 = v10;
LABEL_20:
      sub_2169B47CC((uint64_t)v10, (uint64_t)&v7[6 * a2], *a3);
LABEL_27:
      if (v7 != (void *)a1[4])
      {
        sub_2169B4408(a1);
        a1[4] = (unint64_t)v7;
      }
      *a1 = a2;
      return;
    }
  }

  sub_2169B44D8(a1);
}

void *sub_2169B4728(uint64_t a1, unint64_t a2)
{
  sub_216851EE4((uint64_t)&v7, "VtArray::_AllocateNew", "value_type *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_AllocateNew(size_t) [ELEM = pxrInternal__aapl__pxrReserved__::SdfAssetPath]");
  if (a2 > 0x555555555555554) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 48 * a2 + 16;
  }
  uint64_t v4 = operator new(v3);
  void *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_2169B47B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2169B47CC(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = (long long *)((char *)a3 + 24);
    do
    {
      uint64_t v8 = v3 + v6;
      if (*((char *)a3 + 23) < 0)
      {
        sub_216778F24((unsigned char *)v8, *(void **)a3, *((void *)a3 + 1));
      }
      else
      {
        long long v9 = *a3;
        *(void *)(v8 + 16) = *((void *)a3 + 2);
        *(_OWORD *)uint64_t v8 = v9;
      }
      uint64_t v10 = (unsigned char *)(v3 + v6 + 24);
      if (*((char *)a3 + 47) < 0)
      {
        sub_216778F24(v10, *((void **)a3 + 3), *((void *)a3 + 4));
      }
      else
      {
        long long v11 = *v7;
        *(void *)(v3 + v6 + 40) = *((void *)v7 + 2);
        *(_OWORD *)uint64_t v10 = v11;
      }
      v6 += 48;
    }
    while (v3 + v6 != a2);
    return a2;
  }
  return v3;
}

void sub_2169B4880(void *a1)
{
  __cxa_begin_catch(a1);
  for (; v2; v2 -= 48)
  {
    sub_21677B5A0(v1);
    v1 += 48;
  }
  __cxa_rethrow();
}

void sub_2169B48C8(_Unwind_Exception *a1)
{
}

uint64_t sub_2169B48DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 == a2) {
    return a1;
  }
  uint64_t v5 = a2;
  uint64_t v6 = 0;
  do
  {
    uint64_t v7 = a3 + v6;
    uint64_t v8 = (long long *)(a1 + v6);
    if (*(char *)(a1 + v6 + 23) < 0)
    {
      sub_216778F24((unsigned char *)v7, *(void **)v8, *((void *)v8 + 1));
    }
    else
    {
      long long v9 = *v8;
      *(void *)(v7 + 16) = *((void *)v8 + 2);
      *(_OWORD *)uint64_t v7 = v9;
    }
    uint64_t v10 = (unsigned char *)(a3 + v6 + 24);
    long long v11 = (void **)(a1 + v6 + 24);
    if (*(char *)(a1 + v6 + 47) < 0)
    {
      sub_216778F24(v10, *v11, *(void *)(a1 + v6 + 32));
    }
    else
    {
      long long v12 = *(_OWORD *)v11;
      *(void *)(a3 + v6 + 40) = *(void *)(a1 + v6 + 40);
      *(_OWORD *)uint64_t v10 = v12;
    }
    v6 += 48;
  }
  while (a1 + v6 != v5);
  return v5;
}

void sub_2169B49A0(void *a1)
{
  __cxa_begin_catch(a1);
  for (; v2; v2 -= 48)
  {
    sub_21677B5A0(v1);
    v1 += 48;
  }
  __cxa_rethrow();
}

void sub_2169B49E8(_Unwind_Exception *a1)
{
}

void sub_2169B49FC(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    if (*((void *)this + 3) || (unint64_t v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>::_DetachIfNotUnique() [ELEM = pxrInternal__aapl__pxrReserved__::SdfAssetPath]", a3);
      uint64_t v6 = *((void *)this + 4);
      uint64_t v7 = *(void *)this;
      uint64_t v8 = sub_2169B4728((uint64_t)this, *(void *)this);
      sub_2169B48DC(v6, v6 + 48 * v7, (uint64_t)v8);
      sub_2169B4408(this);
      *((void *)this + 4) = v8;
    }
  }
}

void sub_2169B4A8C()
{
  v1[0] = "sdf/parserHelpers.cpp";
  v1[1] = "MakeScalarValueImpl";
  v1[2] = 308;
  v1[3] = "void pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeScalarValueImpl(SdfOpaqueValue *, const vector<V"
          "alue> &, size_t &)";
  char v2 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v1, 1, (pxrInternal__aapl__pxrReserved__ *)"Found authored opinion for opaque attribute");
  exception = __cxa_allocate_exception(8uLL);
  void *exception = &unk_26C7552B8;
  __cxa_throw(exception, (struct type_info *)&unk_26C755290, (void (*)(void *))std::exception::~exception);
}

void sub_2169B4BB8(void *a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = a1[1];
  if (*a1 == v5)
  {
    uint64_t v20 = 0;
    long long v18 = 0u;
    long long v19 = 0u;
    a4[1] = &off_26C755BA0;
    sub_2168F8DBC(a4, (uint64_t)&v18);
    sub_2168F83DC((uint64_t)&v18);
  }
  else
  {
    *(void *)&long long v18 = *a1;
    *((void *)&v18 + 1) = v5;
    LODWORD(v6) = 1;
    do
    {
      unint64_t v6 = (*(_DWORD *)sub_216999AD4((uint64_t *)&v18, a2, a3) * v6);
      sub_216999B54(&v18);
    }
    while ((void)v18 != *((void *)&v18 + 1));
    sub_2169B4DEC((uint64_t)v16, v6);
    sub_2169B5370((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v16, v7, v8);
    uint64_t v9 = v17;
    sub_2169B5370((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v16, v10, v11);
    v15[0] = v9;
    v15[1] = v17 + v16[0];
    if (v9 != v17 + v16[0])
    {
      sub_2169B4E5C(v15, v12, v13);
      *(void *)&long long v18 = "sdf/parserHelpers.cpp";
      *((void *)&v18 + 1) = "MakeScalarValueImpl";
      *(void *)&long long v19 = 308;
      *((void *)&v19 + 1) = "void pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeScalarValueImpl(SdfOpaqueVal"
                              "ue *, const vector<Value> &, size_t &)";
      LOBYTE(v20) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Found authored opinion for opaque attribute");
      exception = __cxa_allocate_exception(8uLL);
      void *exception = &unk_26C7552B8;
      __cxa_throw(exception, (struct type_info *)&unk_26C755290, (void (*)(void *))std::exception::~exception);
    }
    a4[1] = &off_26C755BA0;
    sub_2168F8DBC(a4, (uint64_t)v16);
    sub_2168F83DC((uint64_t)v16);
  }
}

void sub_2169B4D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2169B4DEC(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  sub_2168F845C((void *)a1);
  unint64_t v6 = &v5;
  sub_2169B521C((unint64_t *)a1, a2);
  return a1;
}

void sub_2169B4E44(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2169B4E5C(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    void v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal"
            "__aapl__pxrReserved__::SdfOpaqueValue>>::operator*() [T = pxrInternal__aapl__pxrReserved__::VtArray<pxrInter"
            "nal__aapl__pxrReserved__::SdfOpaqueValue>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_2169B4ED4()
{
}

uint64_t *sub_2169B4EDC(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

atomic_uint **sub_2169B4EFC(atomic_uint **a1, atomic_uint **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2169B5094(a1);
}

uint64_t sub_2169B4F0C()
{
  return 1;
}

unint64_t sub_2169B4F14(unint64_t **a1)
{
  unint64_t v1 = **a1;
  if (v1)
  {
    unint64_t v2 = **a1;
    do
    {
      unint64_t v1 = (((v1 + 10) * (v1 + 9)) >> 1) + 9;
      --v2;
    }
    while (v2);
    v1 *= 0x9E3779B97F4A7C55;
  }
  return bswap64(v1);
}

BOOL sub_2169B4F5C(uint64_t *a1, uint64_t *a2)
{
  return sub_2169B50EC(*a1, *a2);
}

BOOL sub_2169B4F68(uint64_t *a1, uint64_t a2)
{
  return sub_2169B50EC(*a1, a2);
}

uint64_t sub_2169B4F74()
{
  return 0;
}

void *sub_2169B4F80(uint64_t **a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, void *))sub_2169B5204);
  return a2;
}

void *sub_2169B4FD4()
{
  return &unk_26C755C58;
}

uint64_t sub_2169B4FE0()
{
  return 1;
}

void *sub_2169B4FE8()
{
  return &unk_26C755210;
}

uint64_t sub_2169B4FF4(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_2169B4FFC(uint64_t a1)
{
  return **(void **)a1;
}

BOOL sub_2169B5008(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x8000000217468C19 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2169B5044(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_26C755C58, a2, a3);
}

void *sub_2169B5068()
{
  return &unk_26C755C58;
}

uint64_t sub_2169B5074(uint64_t a1)
{
  return *(void *)a1;
}

void *sub_2169B507C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  a2[1] = &off_26C755BA0;
  return sub_2168F8DBC(a2, v2);
}

atomic_uint **sub_2169B5094(atomic_uint **a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit(v2 + 10, 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_2168F83DC((uint64_t)v2);
    operator delete(v2);
  }
  return a1;
}

BOOL sub_2169B50EC(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 32) == *(void *)(a2 + 32)
    && sub_2168F8C2C(a1, a2)
    && *(void *)(a1 + 24) == *(void *)(a2 + 24))
  {
    return 1;
  }

  return sub_2168F8C2C(a1, a2);
}

uint64_t sub_2169B5168(_OWORD **a1)
{
  unsigned int v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    uint64_t v3 = operator new(0x30uLL);
    uint64_t v4 = *a1;
    long long v5 = (*a1)[1];
    *(_OWORD *)uint64_t v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    uint64_t v6 = *((void *)v4 + 4);
    *((void *)v3 + 4) = v6;
    if (v6)
    {
      int v7 = (atomic_ullong *)*((void *)v3 + 3);
      uint64_t v8 = (atomic_ullong *)(v6 - 16);
      if (!v7) {
        int v7 = v8;
      }
      atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
      uint64_t v4 = *a1;
    }
    atomic_store(0, (unsigned int *)v3 + 10);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 10, 1u, memory_order_relaxed);
    uint64_t v10 = (atomic_uint *)v4;
    *a1 = v3;
    sub_2169B5094(&v10);
  }
  return (uint64_t)*a1;
}

void *sub_2169B5204(void *a1, void *a2)
{
  return pxrInternal__aapl__pxrReserved__::operator<<(a2);
}

void sub_2169B521C(unint64_t *a1, unint64_t a2)
{
  if (*a1 != a2)
  {
    if (a2)
    {
      uint64_t v4 = (void *)a1[4];
      if (!v4 || a1[3] || (unint64_t v5 = atomic_load(v4 - 2), v5 != 1) || *a1 < a2 && *(void *)(a1[4] - 8) < a2) {
        uint64_t v4 = sub_2169B52E0((uint64_t)a1, a2);
      }
      if (v4 != (void *)a1[4])
      {
        sub_2168F83DC((uint64_t)a1);
        a1[4] = (unint64_t)v4;
      }
      *a1 = a2;
    }
    else
    {
      sub_2168F845C(a1);
    }
  }
}

void *sub_2169B52E0(uint64_t a1, unint64_t a2)
{
  sub_216851EE4((uint64_t)&v7, "VtArray::_AllocateNew", "value_type *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfOpaqueValue>::_AllocateNew(size_t) [ELEM = pxrInternal__aapl__pxrReserved__::SdfOpaqueValue]");
  if (a2 >= 0xFFFFFFFFFFFFFFF0) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = a2 + 16;
  }
  uint64_t v4 = operator new(v3);
  void *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_2169B5358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2169B5370(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    if (*((void *)this + 3) || (unint64_t v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfOpaqueValue>::_DetachIfNotUnique() [ELEM = pxrInternal__aapl__pxrReserved__::SdfOpaqueValue]", a3);
      uint64_t v6 = sub_2169B52E0((uint64_t)this, *(void *)this);
      sub_2168F83DC((uint64_t)this);
      *((void *)this + 4) = v6;
    }
  }
}

void sub_2169B53DC(uint64_t *a1@<X1>, unint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  *(_OWORD *)std::string __p = 0u;
  long long v9 = 0u;
  long long v7 = 0u;
  *(_OWORD *)unint64_t v5 = 0u;
  memset(v6, 0, sizeof(v6));
  sub_2169B5718((uint64_t)v5, a1, a2);
  *(void *)(a3 + 8) = &off_26C755C70;
  sub_2169B8284((unsigned int **)a3, (uint64_t)v5);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[1]);
  }
  v4[0] = (void **)&v7;
  sub_2169B81EC(v4);
  v4[0] = (void **)v6 + 1;
  sub_2169B74B8(v4);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
}

void sub_2169B5494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_2169B5940((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2169B550C()
{
}

void sub_2169B551C(void *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = a1[1];
  if (*a1 == v5)
  {
    uint64_t v21 = 0;
    memset(v20, 0, sizeof(v20));
    a4[1] = off_26C755D28;
    sub_2168F8DBC(a4, (uint64_t)v20);
    sub_2169B88CC(v20);
  }
  else
  {
    *(void *)&v20[0] = *a1;
    *((void *)&v20[0] + 1) = v5;
    LODWORD(v8) = 1;
    do
    {
      unint64_t v8 = (*(_DWORD *)sub_216999AD4((uint64_t *)v20, (uint64_t)a2, a3) * v8);
      sub_216999B54(v20);
    }
    while (*(void *)&v20[0] != *((void *)&v20[0] + 1));
    sub_2169B82EC((uint64_t)v20, v8);
    sub_2169B8E9C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v9, v10);
    uint64_t v11 = v21;
    sub_2169B8E9C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v12, v13);
    uint64_t v16 = 0;
    uint64_t v18 = v11;
    uint64_t v19 = v21 + 96 * *(void *)&v20[0];
    while (v18 != v19)
    {
      uint64_t v17 = sub_2169B83B4(&v18, v14, v15);
      sub_2169B5718(v17, a2, (unint64_t *)a3);
      ++v16;
      sub_2169B8434(&v18);
    }
    a4[1] = off_26C755D28;
    sub_2168F8DBC(a4, (uint64_t)v20);
    sub_2169B88CC(v20);
  }
}

void sub_2169B5660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2169B88CC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2169B5690(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, long long a12, uint64_t a13)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to parse at element %zd (at sub-part %zd if there are multiple parts)", v15, v16);
    if (*(char *)(v14 + 23) < 0) {
      operator delete(*(void **)v14);
    }
    *(_OWORD *)uint64_t v14 = a12;
    *(void *)(v14 + 16) = a13;
    *(void *)(v13 + 8) = 0;
    __cxa_end_catch();
    JUMPOUT(0x2169B5608);
  }
  JUMPOUT(0x2169B5678);
}

void sub_2169B5708()
{
}

void sub_2169B5718(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *a3;
  unint64_t v4 = *a3 + 1;
  uint64_t v5 = *a2;
  if (v4 > 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3))
  {
    uint64_t v10 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", 47);
    __p[0] = (void *)sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", (uint64_t)v10, 0x2Fu);
    __p[1] = "MakeScalarValueImpl";
    uint64_t v15 = 301;
    *(void *)&long long v16 = "void pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeScalarValueImpl(SdfPathExpression *,"
                      " const vector<Value> &, size_t &)";
    BYTE8(v16) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Not enough values to parse value of type %s", "pathExpression");
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &unk_26C7552B8;
    __cxa_throw(exception, (struct type_info *)&unk_26C755290, (void (*)(void *))std::exception::~exception);
  }
  *a3 = v4;
  uint64_t v7 = sub_2169B1904(v5 + 56 * v3);
  v12[0] = 0;
  v12[1] = 0;
  uint64_t v13 = 0;
  pxrInternal__aapl__pxrReserved__::SdfPathExpression::SdfPathExpression(__p, v7, v12);
  unint64_t v8 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v8;
    operator delete(v8);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  *(_OWORD *)a1 = *(_OWORD *)__p;
  *(void *)(a1 + 16) = v15;
  __p[1] = 0;
  uint64_t v15 = 0;
  __p[0] = 0;
  sub_2169B59AC((void **)(a1 + 24));
  *(_OWORD *)(a1 + 24) = v16;
  *(void *)(a1 + 40) = v17;
  uint64_t v17 = 0;
  long long v16 = 0uLL;
  sub_2169B5A6C((void **)(a1 + 48));
  *(_OWORD *)(a1 + 48) = v18;
  *(void *)(a1 + 64) = v19;
  uint64_t v19 = 0;
  long long v18 = 0uLL;
  uint64_t v9 = (void **)(a1 + 72);
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*v9);
  }
  *(_OWORD *)uint64_t v9 = v20;
  *(void *)(a1 + 88) = v21;
  HIBYTE(v21) = 0;
  LOBYTE(v20) = 0;
  int v22 = (void **)&v18;
  sub_2169B81EC(&v22);
  int v22 = (void **)&v16;
  sub_2169B74B8(&v22);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(v12[0]);
  }
}

void sub_2169B5924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2169B5940(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  unint64_t v4 = (void **)(a1 + 48);
  sub_2169B81EC(&v4);
  unint64_t v4 = (void **)(a1 + 24);
  sub_2169B74B8(&v4);
  unsigned int v2 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_2169B59AC(void **a1)
{
  unint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    unint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 32;
        sub_2169B5A1C((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      unint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

_DWORD *sub_2169B5A1C(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 31) < 0) {
    operator delete(*(void **)(a2 + 8));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 4));

  return sub_21697C414((_DWORD *)a2);
}

void sub_2169B5A6C(void **a1)
{
  unint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    unint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 64;
        sub_2169B5ADC((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      unint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

_DWORD *sub_2169B5ADC(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (void **)(a2 + 32);
  sub_2169B5B38(&v4);
  unint64_t v4 = (void **)(a2 + 8);
  sub_2168706D8(&v4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 4));
  return sub_21697C414((_DWORD *)a2);
}

void sub_2169B5B38(void ***a1)
{
  unint64_t v1 = *a1;
  unsigned int v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 72;
        sub_2169B5BD0((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_2169B5BD0(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 71) < 0) {
    operator delete(*(void **)(a2 + 48));
  }
  uint64_t v4 = (void **)(a2 + 24);
  sub_2169B5C28(&v4);
  uint64_t v3 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v3;
    operator delete(v3);
  }
}

void sub_2169B5C28(void ***a1)
{
  unint64_t v1 = *a1;
  unsigned int v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        sub_2169B5CC0((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_2169B5CC0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void **)(a2 + 32);
  sub_2169B5D08(&v3);
  if (*(char *)(a2 + 31) < 0) {
    operator delete(*(void **)(a2 + 8));
  }
}

void sub_2169B5D08(void ***a1)
{
  unint64_t v1 = *a1;
  unsigned int v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 40;
        sub_2169B5DA0((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_2169B5DA0(uint64_t a1, uint64_t a2)
{
  sub_2168EE084(a2 + 24);
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v3 = *(void **)a2;
    operator delete(v3);
  }
}

uint64_t *sub_2169B5DF0(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 96), 1u, memory_order_relaxed);
  }
  return result;
}

atomic_uint **sub_2169B5E10(atomic_uint **a1, atomic_uint **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2169B5FE0(a1);
}

uint64_t sub_2169B5E20()
{
  return 1;
}

unint64_t sub_2169B5E28(void **a1)
{
  return sub_2169B6074((uint64_t)&v2, *a1);
}

uint64_t sub_2169B5E50(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = *a1 + 24;
  uint64_t v4 = *a1 + 48;
  uint64_t v5 = *a1 + 72;
  v8[0] = *a1;
  v8[1] = v3;
  v8[2] = v4;
  void v8[3] = v5;
  v7[0] = v2;
  v7[1] = v2 + 24;
  v7[2] = v2 + 48;
  void v7[3] = v2 + 72;
  return sub_2169B66D4((uint64_t)&v9, (uint64_t)v8, (uint64_t)v7);
}

uint64_t sub_2169B5EAC(void *a1, uint64_t a2)
{
  uint64_t v2 = *a1 + 24;
  uint64_t v3 = *a1 + 48;
  uint64_t v4 = *a1 + 72;
  v7[0] = *a1;
  v7[1] = v2;
  v7[2] = v3;
  void v7[3] = v4;
  v6[0] = a2;
  v6[1] = a2 + 24;
  _OWORD v6[2] = a2 + 48;
  uint64_t v6[3] = a2 + 72;
  return sub_2169B66D4((uint64_t)&v8, (uint64_t)v7, (uint64_t)v6);
}

uint64_t sub_2169B5F08()
{
  return 0;
}

void *sub_2169B5F14(pxrInternal__aapl__pxrReserved__::SdfPathExpression **a1, void *a2)
{
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, *a1);
}

void *sub_2169B5F24()
{
  return &unk_26C755268;
}

uint64_t sub_2169B5F30()
{
  return 0;
}

uint64_t sub_2169B5F38()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_2169B5F44()
{
  return 0;
}

uint64_t sub_2169B5F4C()
{
  return 0;
}

BOOL sub_2169B5F54(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x8000000217478EC2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2169B5F90(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C755268, a2, a3);
}

void *sub_2169B5FB4()
{
  return &unk_26C755268;
}

uint64_t sub_2169B5FC0(uint64_t a1)
{
  return *(void *)a1;
}

void *sub_2169B5FC8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  *(void *)(a2 + 8) = &off_26C755C70;
  return sub_2169B8284((unsigned int **)a2, v2);
}

atomic_uint **sub_2169B5FE0(atomic_uint **a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit(v2 + 24, 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    if (*((char *)v2 + 95) < 0) {
      operator delete(*((void **)v2 + 9));
    }
    uint64_t v5 = (void **)(v2 + 12);
    sub_2169B81EC(&v5);
    uint64_t v5 = (void **)(v2 + 6);
    sub_2169B74B8(&v5);
    uint64_t v3 = *(void **)v2;
    if (*(void *)v2)
    {
      *((void *)v2 + 1) = v3;
      operator delete(v3);
    }
    operator delete(v2);
  }
  return a1;
}

unint64_t sub_2169B6074(uint64_t a1, void *a2)
{
  uint64_t v11 = 0;
  char v12 = 0;
  uint64_t v2 = (unsigned int *)*a2;
  uint64_t v3 = a2[1];
  uint64_t v4 = v3 - *a2;
  if (v3 != *a2)
  {
    int v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = v4 >> 2;
    do
    {
      unsigned int v9 = *v2++;
      uint64_t v8 = v9;
      if (v5) {
        v8 += (unint64_t)(v6 + v8 + (v6 + v8) * (v6 + v8)) >> 1;
      }
      else {
        int v5 = 1;
      }
      uint64_t v11 = v8;
      uint64_t v6 = v8;
      --v7;
    }
    while (v7);
    char v12 = v5;
  }
  sub_2169B615C((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v11, a2 + 3, a2 + 6, (uint64_t)(a2 + 9));
  return bswap64(0x9E3779B97F4A7C55 * v11);
}

uint64_t *sub_2169B6110(uint64_t *result, unsigned int **a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = (char *)a2[1] - (char *)*a2;
  if (v3)
  {
    uint64_t v4 = v3 >> 2;
    int v5 = *((unsigned __int8 *)result + 8);
    uint64_t v6 = *result;
    do
    {
      unsigned int v8 = *v2++;
      uint64_t v7 = v8;
      if (v5)
      {
        v7 += (unint64_t)(v6 + v7 + (v6 + v7) * (v6 + v7)) >> 1;
      }
      else
      {
        int v5 = 1;
        *((unsigned char *)result + 8) = 1;
      }
      char *result = v7;
      uint64_t v6 = v7;
      --v4;
    }
    while (v4);
  }
  return result;
}

unint64_t sub_2169B615C(pxrInternal__aapl__pxrReserved__::Tf_HashState *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1] - v8;
  if (v9)
  {
    uint64_t v10 = v9 >> 5;
    do
    {
      --v10;
      uint64_t v11 = v8 + 32;
      sub_2169B6244(a1, v8);
      uint64_t v8 = v11;
    }
    while (v10);
  }

  return sub_2169B61E0(a1, a3, a4);
}

unint64_t sub_2169B61E0(pxrInternal__aapl__pxrReserved__::Tf_HashState *a1, uint64_t *a2, uint64_t a3)
{
  sub_2169B629C((unint64_t)a1, *a2, (a2[1] - *a2) >> 6);
  int v5 = *(char *)(a3 + 23);
  if (v5 >= 0) {
    uint64_t v6 = (pxrInternal__aapl__pxrReserved__ *)a3;
  }
  else {
    uint64_t v6 = *(pxrInternal__aapl__pxrReserved__ **)a3;
  }
  if (v5 >= 0) {
    uint64_t v7 = (char *)*(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v7 = *(char **)(a3 + 8);
  }

  return pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes(a1, v6, v7);
}

unint64_t sub_2169B6244(pxrInternal__aapl__pxrReserved__::Tf_HashState *a1, uint64_t a2)
{
  sub_2169827F8((uint64_t)a1, (unsigned int *)a2);
  uint64_t v6 = *(pxrInternal__aapl__pxrReserved__ **)(a2 + 8);
  uint64_t v5 = a2 + 8;
  uint64_t v4 = v6;
  int v7 = *(char *)(v5 + 23);
  if (v7 >= 0) {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__ *)v5;
  }
  else {
    uint64_t v8 = v4;
  }
  if (v7 >= 0) {
    uint64_t v9 = (char *)*(unsigned __int8 *)(v5 + 23);
  }
  else {
    uint64_t v9 = *(char **)(v5 + 8);
  }

  return pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes(a1, v8, v9);
}

unint64_t sub_2169B629C(unint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = a3;
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::Tf_HashState *)result;
    do
    {
      --v3;
      sub_2169827F8((uint64_t)v5, (unsigned int *)a2);
      uint64_t result = sub_2169B6300(v5, a2 + 8, a2 + 32, (unsigned __int8 *)(a2 + 56));
      a2 += 64;
    }
    while (v3);
  }
  return result;
}

unint64_t sub_2169B6300(pxrInternal__aapl__pxrReserved__::Tf_HashState *a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  uint64_t v8 = *(uint64_t **)a2;
  uint64_t v9 = *(void *)(a2 + 8) - (void)v8;
  if (v9)
  {
    uint64_t v10 = v9 >> 5;
    do
    {
      --v10;
      uint64_t v11 = v8 + 4;
      sub_2169B63D8(a1, v8);
      uint64_t v8 = v11;
    }
    while (v10);
  }

  return sub_2169B6384((unint64_t)a1, a3, a4);
}

unint64_t sub_2169B6384(unint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  unint64_t result = sub_2169B6484(a1, a2);
  uint64_t v6 = *a3;
  if (*(unsigned char *)(a1 + 8)) {
    v6 += (unint64_t)(*(void *)a1 + v6 + (*(void *)a1 + v6) * (*(void *)a1 + v6)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v6;
  return result;
}

uint64_t sub_2169B63D8(pxrInternal__aapl__pxrReserved__::Tf_HashState *a1, uint64_t *a2)
{
  uint64_t v3 = (int *)(a2 + 3);
  uint64_t v4 = (unsigned __int8 *)a2 + 28;
  uint64_t v5 = (char *)a2[1];
  if (*((char *)a2 + 23) >= 0)
  {
    uint64_t v6 = (char *)*((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = (uint64_t *)*a2;
    uint64_t v6 = v5;
  }
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes(a1, (pxrInternal__aapl__pxrReserved__ *)a2, v6);

  return sub_2169B6440((uint64_t)a1, v3, v4);
}

uint64_t sub_2169B6440(uint64_t result, int *a2, unsigned __int8 *a3)
{
  uint64_t v3 = *a2;
  if (*(unsigned char *)(result + 8)) {
    v3 += (unint64_t)(*(void *)result + v3 + (*(void *)result + v3) * (*(void *)result + v3)) >> 1;
  }
  else {
    *(unsigned char *)(result + 8) = 1;
  }
  *(void *)unint64_t result = v3;
  *(void *)unint64_t result = *a3 + ((v3 + *a3 + (v3 + *a3) * (v3 + (unint64_t)*a3)) >> 1);
  return result;
}

unint64_t sub_2169B6484(unint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int ***)a2;
  uint64_t v3 = *(void *)(a2 + 8) - *(void *)a2;
  if (v3)
  {
    uint64_t v4 = (uint64_t *)result;
    unint64_t v5 = 0x8E38E38E38E38E39 * (v3 >> 3);
    do
    {
      --v5;
      unint64_t result = sub_2169B64F0(v4, v2, (uint64_t)(v2 + 3), (uint64_t)(v2 + 6));
      v2 += 9;
    }
    while (v5);
  }
  return result;
}

unint64_t sub_2169B64F0(uint64_t *a1, unsigned int **a2, uint64_t a3, uint64_t a4)
{
  sub_2169B6110(a1, a2);
  sub_2169B655C((unint64_t)a1, a3);
  int v7 = *(char *)(a4 + 23);
  if (v7 >= 0) {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__ *)a4;
  }
  else {
    uint64_t v8 = *(pxrInternal__aapl__pxrReserved__ **)a4;
  }
  if (v7 >= 0) {
    uint64_t v9 = (char *)*(unsigned __int8 *)(a4 + 23);
  }
  else {
    uint64_t v9 = *(char **)(a4 + 8);
  }

  return pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)a1, v8, v9);
}

unint64_t sub_2169B655C(unint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int **)a2;
  uint64_t v3 = *(void *)(a2 + 8) - *(void *)a2;
  if (v3)
  {
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::Tf_HashState *)result;
    uint64_t v5 = 0x6DB6DB6DB6DB6DB7 * (v3 >> 3);
    do
    {
      --v5;
      unint64_t result = sub_2169B65C8(v4, v2, (pxrInternal__aapl__pxrReserved__ *)(v2 + 2), (uint64_t)(v2 + 8));
      v2 += 14;
    }
    while (v5);
  }
  return result;
}

unint64_t sub_2169B65C8(pxrInternal__aapl__pxrReserved__::Tf_HashState *a1, unsigned int *a2, pxrInternal__aapl__pxrReserved__ *a3, uint64_t a4)
{
  uint64_t v4 = *a2;
  if (*((unsigned char *)a1 + 8)) {
    v4 += (unint64_t)(*(void *)a1 + v4 + (*(void *)a1 + v4) * (*(void *)a1 + v4)) >> 1;
  }
  else {
    *((unsigned char *)a1 + 8) = 1;
  }
  *(void *)a1 = v4;
  return sub_2169B6600(a1, a3, a4);
}

unint64_t sub_2169B6600(pxrInternal__aapl__pxrReserved__::Tf_HashState *a1, pxrInternal__aapl__pxrReserved__ *a2, uint64_t a3)
{
  uint64_t v5 = (char *)*((void *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    uint64_t v6 = (char *)*((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = *(pxrInternal__aapl__pxrReserved__ **)a2;
    uint64_t v6 = v5;
  }
  unint64_t result = pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes(a1, a2, v6);
  uint64_t v8 = *(uint64_t **)a3;
  uint64_t v9 = *(void *)(a3 + 8) - *(void *)a3;
  if (v9)
  {
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * (v9 >> 3);
    do
    {
      --v10;
      uint64_t v11 = v8 + 5;
      unint64_t result = sub_2169B667C(a1, v8);
      uint64_t v8 = v11;
    }
    while (v10);
  }
  return result;
}

uint64_t sub_2169B667C(pxrInternal__aapl__pxrReserved__::Tf_HashState *a1, uint64_t *a2)
{
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::VtValue *)(a2 + 3);
  uint64_t v4 = (char *)a2[1];
  if (*((char *)a2 + 23) >= 0)
  {
    uint64_t v5 = (char *)*((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = (uint64_t *)*a2;
    uint64_t v5 = v4;
  }
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes(a1, (pxrInternal__aapl__pxrReserved__ *)a2, v5);

  return sub_2168EEDCC((uint64_t)a1, v3);
}

uint64_t sub_2169B66D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_2169B67A0((uint64_t)&v20, a2, a3);
  if (result)
  {
    uint64_t v6 = *(unsigned __int8 **)(a2 + 24);
    int v7 = *(unsigned __int8 ***)(a3 + 24);
    uint64_t v8 = v6[23];
    if ((v8 & 0x80u) == 0) {
      uint64_t v9 = (unsigned __int8 *)v6[23];
    }
    else {
      uint64_t v9 = (unsigned __int8 *)*((void *)v6 + 1);
    }
    unint64_t v10 = (unsigned __int8 *)*((unsigned __int8 *)v7 + 23);
    int v11 = (char)v10;
    if ((char)v10 < 0) {
      unint64_t v10 = v7[1];
    }
    if (v9 == v10)
    {
      if (v11 >= 0) {
        char v12 = *(unsigned __int8 **)(a3 + 24);
      }
      else {
        char v12 = *v7;
      }
      if ((v8 & 0x80) != 0)
      {
        return memcmp(*(const void **)v6, v12, *((void *)v6 + 1)) == 0;
      }
      else if (v6[23])
      {
        uint64_t v13 = v8 - 1;
        do
        {
          int v15 = *v6++;
          int v14 = v15;
          int v17 = *v12++;
          int v16 = v17;
          BOOL v19 = v13-- != 0;
          uint64_t result = v14 == v16;
        }
        while (v14 == v16 && v19);
      }
      else
      {
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_2169B67A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_2169B6838((uint64_t)&v11, a2, a3);
  if (result)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    uint64_t v7 = *(void *)(a3 + 16);
    uint64_t v8 = *(void **)v6;
    uint64_t v9 = *(void **)(v6 + 8);
    unint64_t v10 = *(void **)v7;
    if ((void *)((char *)v9 - *(void *)v6) == (void *)(*(void *)(v7 + 8) - *(void *)v7))
    {
      if (v8 == v9)
      {
        return 1;
      }
      else
      {
        do
        {
          uint64_t result = sub_2169B69E0(v8, v10);
          if (!result) {
            break;
          }
          v8 += 8;
          v10 += 8;
        }
        while (v8 != v9);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_2169B6838(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = **(char ***)a2;
  uint64_t v3 = *(char **)(*(void *)a2 + 8);
  uint64_t v5 = **(_DWORD ***)a3;
  if (v3 - v4 != *(void *)(*(void *)a3 + 8) - (void)v5) {
    return 0;
  }
  while (v4 != v3)
  {
    if (*(_DWORD *)v4 != *v5) {
      return 0;
    }
    v4 += 4;
    ++v5;
  }
  uint64_t v6 = *(uint64_t **)(a2 + 8);
  uint64_t v7 = *(uint64_t **)(a3 + 8);
  uint64_t v9 = *v6;
  uint64_t v8 = v6[1];
  uint64_t v10 = *v7;
  if (v8 - *v6 != v7[1] - *v7) {
    return 0;
  }
  if (v9 == v8) {
    return 1;
  }
  uint64_t v11 = v9 + 32;
  do
  {
    v15[0] = v9;
    v15[1] = v9 + 8;
    v14[0] = v10;
    v14[1] = v10 + 8;
    uint64_t result = sub_2169B6920((uint64_t)&v16, (uint64_t)v15, (uint64_t)v14);
    if (!result) {
      break;
    }
    v10 += 32;
    v9 += 32;
    BOOL v13 = v11 == v8;
    v11 += 32;
  }
  while (!v13);
  return result;
}

uint64_t sub_2169B6920(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (**(void **)a2 != **(void **)a3) {
    return 0;
  }
  uint64_t v3 = *(unsigned __int8 **)(a2 + 8);
  uint64_t v4 = *(unsigned __int8 ***)(a3 + 8);
  uint64_t v5 = v3[23];
  if ((v5 & 0x80u) == 0) {
    uint64_t v6 = (unsigned __int8 *)v3[23];
  }
  else {
    uint64_t v6 = (unsigned __int8 *)*((void *)v3 + 1);
  }
  uint64_t v7 = (unsigned __int8 *)*((unsigned __int8 *)v4 + 23);
  int v8 = (char)v7;
  if ((char)v7 < 0) {
    uint64_t v7 = v4[1];
  }
  if (v6 != v7) {
    return 0;
  }
  if (v8 >= 0) {
    uint64_t v9 = *(unsigned __int8 **)(a3 + 8);
  }
  else {
    uint64_t v9 = *v4;
  }
  if ((v5 & 0x80) != 0) {
    return memcmp(*(const void **)v3, v9, *((void *)v3 + 1)) == 0;
  }
  if (!v3[23]) {
    return 1;
  }
  uint64_t v10 = v5 - 1;
  do
  {
    int v12 = *v3++;
    int v11 = v12;
    int v14 = *v9++;
    int v13 = v14;
    BOOL v16 = v10-- != 0;
    uint64_t result = v11 == v13;
  }
  while (v11 == v13 && v16);
  return result;
}

uint64_t sub_2169B69E0(void *a1, void *a2)
{
  v5[0] = a1;
  v5[1] = a1 + 1;
  void v5[2] = a1 + 4;
  uint64_t v6 = (unsigned __int8 *)(a1 + 7);
  v3[0] = a2;
  v3[1] = a2 + 1;
  v3[2] = a2 + 4;
  uint64_t v4 = (unsigned __int8 *)(a2 + 7);
  uint64_t result = sub_2169B6A50((uint64_t)&v7, v5, v3);
  if (result) {
    return *v6 == *v4;
  }
  return result;
}

uint64_t sub_2169B6A50(uint64_t a1, void **a2, void **a3)
{
  uint64_t result = sub_2169B6B0C((uint64_t)&v11, a2, a3);
  if (result)
  {
    uint64_t v6 = a2[2];
    char v7 = a3[2];
    uint64_t v9 = *v6;
    uint64_t v8 = v6[1];
    uint64_t v10 = *v7;
    if (v8 - *v6 == v7[1] - *v7)
    {
      if (v9 == v8)
      {
        return 1;
      }
      else
      {
        do
        {
          v13[0] = v9;
          v13[1] = v9 + 24;
          v13[2] = v9 + 48;
          v12[0] = v10;
          v12[1] = v10 + 24;
          void v12[2] = v10 + 48;
          uint64_t result = sub_2169B6CE4((uint64_t)&v14, (uint64_t)v13, (uint64_t)v12);
          if (!result) {
            break;
          }
          v9 += 72;
          v10 += 72;
        }
        while (v9 != v8);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL sub_2169B6B0C(uint64_t a1, void **a2, void **a3)
{
  if (**a2 != **a3) {
    return 0;
  }
  uint64_t v3 = a2[1];
  uint64_t v4 = a3[1];
  uint64_t v6 = *v3;
  uint64_t v5 = v3[1];
  uint64_t v7 = *v4;
  if (v5 - *v3 != v4[1] - *v4) {
    return 0;
  }
  if (v6 == v5) {
    return 1;
  }
  do
  {
    v10[0] = v6;
    v10[1] = v6 + 24;
    void v10[2] = v6 + 28;
    v9[0] = v7;
    v9[1] = v7 + 24;
    v9[2] = v7 + 28;
    BOOL result = sub_2169B6BCC((uint64_t)&v11, (uint64_t)v10, (uint64_t)v9);
    if (!result) {
      break;
    }
    v6 += 32;
    v7 += 32;
  }
  while (v6 != v5);
  return result;
}

BOOL sub_2169B6BCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (sub_2169B6C3C((uint64_t)&v6, (const void ***)a2, (unsigned __int8 **)a3) & 1) != 0
      && **(_DWORD **)(a2 + 8) == **(_DWORD **)(a3 + 8)
      && **(unsigned __int8 **)(a2 + 16) == **(unsigned __int8 **)(a3 + 16);
}

uint64_t sub_2169B6C3C(uint64_t a1, const void ***a2, unsigned __int8 **a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a3;
  uint64_t v5 = *((unsigned __int8 *)*a2 + 23);
  size_t v6 = (size_t)(*a2)[1];
  if ((v5 & 0x80u) == 0) {
    uint64_t v7 = (const void *)*((unsigned __int8 *)*a2 + 23);
  }
  else {
    uint64_t v7 = (*a2)[1];
  }
  uint64_t v8 = (const void *)v4[23];
  int v9 = (char)v8;
  if ((char)v8 < 0) {
    uint64_t v8 = (const void *)*((void *)v4 + 1);
  }
  if (v7 != v8) {
    return 0;
  }
  if (v9 >= 0) {
    uint64_t v10 = v4;
  }
  else {
    uint64_t v10 = *(unsigned __int8 **)v4;
  }
  if ((v5 & 0x80) != 0) {
    return memcmp(*v3, v10, v6) == 0;
  }
  if (!v5) {
    return 1;
  }
  uint64_t v11 = v5 - 1;
  do
  {
    int v13 = *(unsigned __int8 *)v3;
    uint64_t v3 = (const void **)((char *)v3 + 1);
    int v12 = v13;
    int v15 = *v10++;
    int v14 = v15;
    BOOL v17 = v11-- != 0;
    uint64_t result = v12 == v14;
  }
  while (v12 == v14 && v17);
  return result;
}

uint64_t sub_2169B6CE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_2169B6DB0((uint64_t)&v20, a2, a3);
  if (result)
  {
    size_t v6 = *(unsigned __int8 **)(a2 + 16);
    uint64_t v7 = *(unsigned __int8 ***)(a3 + 16);
    uint64_t v8 = v6[23];
    if ((v8 & 0x80u) == 0) {
      int v9 = (unsigned __int8 *)v6[23];
    }
    else {
      int v9 = (unsigned __int8 *)*((void *)v6 + 1);
    }
    uint64_t v10 = (unsigned __int8 *)*((unsigned __int8 *)v7 + 23);
    int v11 = (char)v10;
    if ((char)v10 < 0) {
      uint64_t v10 = v7[1];
    }
    if (v9 == v10)
    {
      if (v11 >= 0) {
        int v12 = *(unsigned __int8 **)(a3 + 16);
      }
      else {
        int v12 = *v7;
      }
      if ((v8 & 0x80) != 0)
      {
        return memcmp(*(const void **)v6, v12, *((void *)v6 + 1)) == 0;
      }
      else if (v6[23])
      {
        uint64_t v13 = v8 - 1;
        do
        {
          int v15 = *v6++;
          int v14 = v15;
          int v17 = *v12++;
          int v16 = v17;
          BOOL v19 = v13-- != 0;
          uint64_t result = v14 == v16;
        }
        while (v14 == v16 && v19);
      }
      else
      {
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_2169B6DB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = **(char ***)a2;
  uint64_t v3 = *(char **)(*(void *)a2 + 8);
  uint64_t v5 = **(_DWORD ***)a3;
  if (v3 - v4 != *(void *)(*(void *)a3 + 8) - (void)v5) {
    return 0;
  }
  while (v4 != v3)
  {
    if (*(_DWORD *)v4 != *v5) {
      return 0;
    }
    v4 += 4;
    ++v5;
  }
  size_t v6 = *(uint64_t **)(a2 + 8);
  uint64_t v7 = *(uint64_t **)(a3 + 8);
  uint64_t v9 = *v6;
  uint64_t v8 = v6[1];
  uint64_t v10 = *v7;
  if (v8 - *v6 != v7[1] - *v7) {
    return 0;
  }
  if (v9 == v8) {
    return 1;
  }
  do
  {
    v13[0] = v9;
    v13[1] = v9 + 8;
    v13[2] = v9 + 32;
    v12[0] = v10;
    v12[1] = v10 + 8;
    void v12[2] = v10 + 32;
    uint64_t result = sub_2169B6E9C((uint64_t)&v14, (uint64_t)v13, (uint64_t)v12);
    if (!result) {
      break;
    }
    v9 += 56;
    v10 += 56;
  }
  while (v9 != v8);
  return result;
}

uint64_t sub_2169B6E9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_2169B6F54((uint64_t)&v13, a2, a3);
  if (result)
  {
    size_t v6 = *(uint64_t **)(a2 + 16);
    uint64_t v7 = *(uint64_t **)(a3 + 16);
    uint64_t v9 = *v6;
    uint64_t v8 = v6[1];
    uint64_t v10 = *v7;
    if (v8 - *v6 == v7[1] - *v7)
    {
      if (v9 == v8)
      {
        return 1;
      }
      else
      {
        uint64_t v11 = v9 + 40;
        do
        {
          v15[0] = v9;
          v15[1] = v9 + 24;
          v14[0] = v10;
          v14[1] = v10 + 24;
          uint64_t result = sub_2169B7014((uint64_t)&v16, (uint64_t)v15, (uint64_t)v14);
          if (!result) {
            break;
          }
          v10 += 40;
          v9 += 40;
          BOOL v12 = v11 == v8;
          v11 += 40;
        }
        while (!v12);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_2169B6F54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (**(_DWORD **)a2 != **(_DWORD **)a3) {
    return 0;
  }
  uint64_t v3 = *(unsigned __int8 **)(a2 + 8);
  uint64_t v4 = *(unsigned __int8 ***)(a3 + 8);
  uint64_t v5 = v3[23];
  if ((v5 & 0x80u) == 0) {
    size_t v6 = (unsigned __int8 *)v3[23];
  }
  else {
    size_t v6 = (unsigned __int8 *)*((void *)v3 + 1);
  }
  uint64_t v7 = (unsigned __int8 *)*((unsigned __int8 *)v4 + 23);
  int v8 = (char)v7;
  if ((char)v7 < 0) {
    uint64_t v7 = v4[1];
  }
  if (v6 != v7) {
    return 0;
  }
  if (v8 >= 0) {
    uint64_t v9 = *(unsigned __int8 **)(a3 + 8);
  }
  else {
    uint64_t v9 = *v4;
  }
  if ((v5 & 0x80) != 0) {
    return memcmp(*(const void **)v3, v9, *((void *)v3 + 1)) == 0;
  }
  if (!v3[23]) {
    return 1;
  }
  uint64_t v10 = v5 - 1;
  do
  {
    int v12 = *v3++;
    int v11 = v12;
    int v14 = *v9++;
    int v13 = v14;
    BOOL v16 = v10-- != 0;
    uint64_t result = v11 == v13;
  }
  while (v11 == v13 && v16);
  return result;
}

uint64_t sub_2169B7014(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_2169B6C3C((uint64_t)&v7, (const void ***)a2, (unsigned __int8 **)a3);
  if (result) {
    return pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(*(pxrInternal__aapl__pxrReserved__::VtValue **)(a2 + 8), *(std::type_info **)(a3 + 8), v6);
  }
  return result;
}

uint64_t sub_2169B7058(uint64_t *a1)
{
  unsigned int v2 = atomic_load((unsigned int *)(*a1 + 96));
  if (v2 != 1)
  {
    uint64_t v3 = (unsigned int *)operator new(0x68uLL);
    sub_2169B70E4(v3, *a1);
    atomic_store(0, v3 + 24);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 24, 1u, memory_order_relaxed);
    uint64_t v5 = (atomic_uint *)*a1;
    *a1 = (uint64_t)v3;
    sub_2169B5FE0(&v5);
  }
  return *a1;
}

void sub_2169B70D0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_2169B70E4(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_2169B71E8(a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  sub_2169B7264(a1 + 3, *(void *)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 5);
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  sub_2169B7550(a1 + 6, *(void *)(a2 + 48), *(void *)(a2 + 56), (uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 6);
  uint64_t v4 = a1 + 9;
  if (*(char *)(a2 + 95) < 0)
  {
    sub_216778F24(v4, *(void **)(a2 + 72), *(void *)(a2 + 80));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 72);
    a1[11] = *(void *)(a2 + 88);
    *(_OWORD *)uint64_t v4 = v5;
  }
  return a1;
}

void sub_2169B71A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2169B81EC((void ***)va);
  sub_2169B74B8((void ***)va);
  uint64_t v4 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

void *sub_2169B71E8(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    size_t v6 = result;
    uint64_t result = sub_216781458(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2169B7248(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2169B7264(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    size_t v6 = result;
    sub_2168C5234(result, a4);
    uint64_t result = (void *)sub_2169B72EC((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_2169B72CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_2169B74B8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2169B72EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_2169B7398(a1, v4, v6);
      v6 += 32;
      uint64_t v4 = v12 + 32;
      v12 += 32;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  sub_2169B742C((uint64_t)v9);
  return v4;
}

void sub_2169B7384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unsigned char *sub_2169B7398(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_216981010((_DWORD *)a2, (_DWORD *)a3);
  sub_21698105C((_DWORD *)(a2 + 4), (_DWORD *)(a3 + 4));
  uint64_t result = (unsigned char *)(a2 + 8);
  if (*(char *)(a3 + 31) < 0) {
    return sub_216778F24(result, *(void **)(a3 + 8), *(void *)(a3 + 16));
  }
  long long v6 = *(_OWORD *)(a3 + 8);
  *(void *)(a2 + 24) = *(void *)(a3 + 24);
  *(_OWORD *)uint64_t result = v6;
  return result;
}

void sub_2169B740C(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v2);
  sub_21697C414(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2169B742C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_2169B7464((uint64_t *)a1);
  }
  return a1;
}

uint64_t *sub_2169B7464(uint64_t *result)
{
  uint64_t v2 = (uint64_t *)result[1];
  uint64_t v1 = (uint64_t *)result[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *result;
    do
    {
      v3 -= 32;
      uint64_t result = (uint64_t *)sub_2169B5A1C(v5, v3);
    }
    while (v3 != v4);
  }
  return result;
}

void sub_2169B74B8(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 32;
        sub_2169B5A1C((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *sub_2169B7550(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    sub_2169B75D8(result, a4);
    uint64_t result = (void *)sub_2169B7654((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_2169B75B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_2169B81EC(&a9);
  _Unwind_Resume(a1);
}

char *sub_2169B75D8(void *a1, unint64_t a2)
{
  if (a2 >> 58) {
    sub_21677CB10();
  }
  uint64_t result = (char *)sub_2169B761C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[64 * v4];
  return result;
}

void *sub_2169B761C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 58) {
    sub_21677CA1C();
  }
  return operator new(a2 << 6);
}

uint64_t sub_2169B7654(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_2169B76F8(v4, v6);
      v6 += 64;
      uint64_t v4 = v11 + 64;
      v11 += 64;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  sub_2169B8160((uint64_t)v8);
  return v4;
}

void sub_2169B76E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2169B76F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_216981010((_DWORD *)a1, (_DWORD *)a2);
  sub_21698105C(v4 + 1, (_DWORD *)(a2 + 4));
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  sub_2169B77D0((void *)(a1 + 8), *(long long **)(a2 + 8), *(long long **)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 5);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  sub_2169B79AC((void *)(a1 + 32), *(void *)(a2 + 32), *(void *)(a2 + 40), 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3));
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

void sub_2169B779C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168706D8((void ***)va);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v3);
  sub_21697C414(v2);
  _Unwind_Resume(a1);
}

void *sub_2169B77D0(void *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_2168C5234(result, a4);
    uint64_t result = sub_2169B7858((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_2169B7838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_2168706D8(&a9);
  _Unwind_Resume(a1);
}

void *sub_2169B7858(uint64_t a1, long long *a2, long long *a3, void *__dst)
{
  uint64_t v4 = __dst;
  int v13 = __dst;
  int v14 = __dst;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  char v12 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_216778F24(v4, *(void **)v6, *((void *)v6 + 1));
        size_t v8 = v14;
      }
      else
      {
        long long v7 = *v6;
        void v4[2] = *((void *)v6 + 2);
        *(_OWORD *)uint64_t v4 = v7;
        size_t v8 = v4;
      }
      int v9 = *((_DWORD *)v6 + 6);
      *((unsigned char *)v4 + 28) = *((unsigned char *)v6 + 28);
      *((_DWORD *)v4 + 6) = v9;
      v6 += 2;
      uint64_t v4 = v8 + 4;
      int v14 = v8 + 4;
    }
    while (v6 != a3);
  }
  char v12 = 1;
  sub_2169B792C((uint64_t)v11);
  return v4;
}

void sub_2169B7918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2169B792C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_2169B7964(a1);
  }
  return a1;
}

void sub_2169B7964(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 9) < 0) {
      operator delete(*(void **)(v1 - 32));
    }
    v1 -= 32;
  }
}

void *sub_2169B79AC(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_216873544(result, a4);
    uint64_t result = sub_2169B7A34((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_2169B7A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_2169B5B38(&a9);
  _Unwind_Resume(a1);
}

void *sub_2169B7A34(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_2169B7AD8(v4, v6);
      v6 += 72;
      uint64_t v4 = v11 + 9;
      v11 += 9;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  sub_2169B80D4((uint64_t)v8);
  return v4;
}

void sub_2169B7AC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_2169B7AD8(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_2169B7BBC(a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  sub_2169B7C38(a1 + 3, *(void *)(a2 + 24), *(void *)(a2 + 32), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 3));
  uint64_t v4 = a1 + 6;
  if (*(char *)(a2 + 71) < 0)
  {
    sub_216778F24(v4, *(void **)(a2 + 48), *(void *)(a2 + 56));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 48);
    a1[8] = *(void *)(a2 + 64);
    *(_OWORD *)uint64_t v4 = v5;
  }
  return a1;
}

void sub_2169B7B8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2169B5C28((void ***)va);
  uint64_t v4 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

void *sub_2169B7BBC(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_216781458(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2169B7C1C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2169B7C38(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_2167B8760(result, a4);
    uint64_t result = (void *)sub_2169B7CC0((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_2169B7CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_2169B5C28(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2169B7CC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_2169B7D6C(a1, v4, v6);
      v6 += 56;
      uint64_t v4 = v12 + 56;
      v12 += 56;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  sub_2169B8048((uint64_t)v9);
  return v4;
}

void sub_2169B7D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_2169B7D6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a2 = *(_DWORD *)a3;
  long long v5 = (unsigned char *)(a2 + 8);
  if (*(char *)(a3 + 31) < 0)
  {
    sub_216778F24(v5, *(void **)(a3 + 8), *(void *)(a3 + 16));
  }
  else
  {
    long long v6 = *(_OWORD *)(a3 + 8);
    *(void *)(a2 + 24) = *(void *)(a3 + 24);
    *(_OWORD *)long long v5 = v6;
  }
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  return sub_2169B7E14((void *)(a2 + 32), *(long long **)(a3 + 32), *(long long **)(a3 + 40), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a3 + 40) - *(void *)(a3 + 32)) >> 3));
}

void sub_2169B7DF8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 31) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2169B7E14(void *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    sub_2168724E8(result, a4);
    uint64_t result = sub_2169B7E9C((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_2169B7E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_2169B5D08(&a9);
  _Unwind_Resume(a1);
}

void *sub_2169B7E9C(uint64_t a1, long long *a2, long long *a3, void *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v11 = __dst;
  uint64_t v12 = (char *)__dst;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    long long v6 = a2;
    int v7 = a1;
    do
    {
      sub_2169B7F48(v7, v4, v6);
      long long v6 = (long long *)((char *)v6 + 40);
      uint64_t v4 = v12 + 40;
      v12 += 40;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  sub_2169B7FBC((uint64_t)v9);
  return v4;
}

void sub_2169B7F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_2169B7F48(int a1, void *__dst, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    __dst[2] = *((void *)a3 + 2);
    *(_OWORD *)long long __dst = v5;
  }
  return sub_2168EE4C4(__dst + 3, (void *)a3 + 3);
}

void sub_2169B7FA0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2169B7FBC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_2169B7FF4((uint64_t *)a1);
  }
  return a1;
}

void sub_2169B7FF4(uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 40;
      sub_2169B5DA0(v5, v3);
    }
    while (v3 != v4);
  }
}

uint64_t sub_2169B8048(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_2169B8080((uint64_t *)a1);
  }
  return a1;
}

void sub_2169B8080(uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 56;
      sub_2169B5CC0(v5, v3);
    }
    while (v3 != v4);
  }
}

uint64_t sub_2169B80D4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_2169B810C((uint64_t *)a1);
  }
  return a1;
}

void sub_2169B810C(uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 72;
      sub_2169B5BD0(v5, v3);
    }
    while (v3 != v4);
  }
}

uint64_t sub_2169B8160(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_2169B8198((uint64_t *)a1);
  }
  return a1;
}

uint64_t *sub_2169B8198(uint64_t *result)
{
  uint64_t v2 = (uint64_t *)result[1];
  uint64_t v1 = (uint64_t *)result[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *result;
    do
    {
      v3 -= 64;
      uint64_t result = (uint64_t *)sub_2169B5ADC(v5, v3);
    }
    while (v3 != v4);
  }
  return result;
}

void sub_2169B81EC(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 64;
        sub_2169B5ADC((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *sub_2169B8284(unsigned int **a1, uint64_t a2)
{
  uint64_t v4 = (unsigned int *)operator new(0x68uLL);
  uint64_t result = sub_2169B70E4(v4, a2);
  atomic_store(0, v4 + 24);
  *a1 = v4;
  atomic_fetch_add_explicit((atomic_uint *volatile)v4 + 24, 1u, memory_order_relaxed);
  return result;
}

void sub_2169B82D8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2169B82EC(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)std::string __p = 0u;
  long long v9 = 0u;
  long long v7 = 0u;
  *(_OWORD *)uint64_t v5 = 0u;
  memset(v6, 0, sizeof(v6));
  sub_2169B89C0((void *)a1);
  char v10 = v5;
  sub_2169B8A80((unint64_t *)a1, a2, (uint64_t *)&v10);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[1]);
  }
  char v10 = (void **)&v7;
  sub_2169B81EC(&v10);
  char v10 = (void **)v6 + 1;
  sub_2169B74B8(&v10);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  return a1;
}

void sub_2169B8394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2169B5940((uint64_t)&a9);
  sub_2169B88CC(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_2169B83B4(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    void v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal"
            "__aapl__pxrReserved__::SdfPathExpression>>::operator*() [T = pxrInternal__aapl__pxrReserved__::VtArray<pxrIn"
            "ternal__aapl__pxrReserved__::SdfPathExpression>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_2169B842C()
{
}

void *sub_2169B8434(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArr"
            "ay<pxrInternal__aapl__pxrReserved__::SdfPathExpression>>::operator++() [T = pxrInternal__aapl__pxrReserved__"
            "::VtArray<pxrInternal__aapl__pxrReserved__::SdfPathExpression>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 96;
  }
  return a1;
}

uint64_t *sub_2169B84B4(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *sub_2169B84D4(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2169B867C(a1);
}

uint64_t sub_2169B84E4()
{
  return 1;
}

unint64_t sub_2169B84EC(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  char v5 = 1;
  uint64_t v4 = v2;
  sub_2169B86D4((unint64_t)&v4, v1[4], v2);
  return bswap64(0x9E3779B97F4A7C55 * v4);
}

uint64_t sub_2169B8544(uint64_t **a1, uint64_t *a2)
{
  return sub_2169B8738(*a1, *a2);
}

uint64_t sub_2169B8550(uint64_t **a1, uint64_t a2)
{
  return sub_2169B8738(*a1, a2);
}

uint64_t sub_2169B855C()
{
  return 0;
}

void *sub_2169B8568(uint64_t **a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, void *))sub_2169B88B4);
  return a2;
}

void *sub_2169B85BC()
{
  return &unk_26C755278;
}

uint64_t sub_2169B85C8()
{
  return 1;
}

void *sub_2169B85D0()
{
  return &unk_26C755268;
}

uint64_t sub_2169B85DC(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_2169B85E4(uint64_t a1)
{
  return **(void **)a1;
}

BOOL sub_2169B85F0(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x8000000217478EFALL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2169B862C(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C755278, a2, a3);
}

void *sub_2169B8650()
{
  return &unk_26C755278;
}

uint64_t sub_2169B865C(uint64_t a1)
{
  return *(void *)a1;
}

void *sub_2169B8664@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  a2[1] = off_26C755D28;
  return sub_2168F8DBC(a2, v2);
}

uint64_t *sub_2169B867C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_2169B88CC((void *)v2);
    operator delete((void *)v2);
  }
  return a1;
}

unint64_t sub_2169B86D4(unint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = a3;
    uint64_t v5 = (uint64_t *)result;
    do
    {
      --v3;
      sub_2169B6110(v5, (unsigned int **)a2);
      uint64_t result = sub_2169B615C((pxrInternal__aapl__pxrReserved__::Tf_HashState *)v5, (uint64_t *)(a2 + 24), (uint64_t *)(a2 + 48), a2 + 72);
      a2 += 96;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_2169B8738(uint64_t *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32) && sub_2168F8C2C((uint64_t)a1, a2) && a1[3] == *(void *)(a2 + 24)) {
    return 1;
  }
  uint64_t result = sub_2168F8C2C((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  uint64_t v5 = *a1;
  if (!*a1) {
    return 1;
  }
  uint64_t v6 = a1[4];
  uint64_t v7 = v6 + 96 * v5;
  uint64_t v8 = *(void *)(a2 + 32);
  do
  {
    v10[0] = v6;
    v10[1] = v6 + 24;
    void v10[2] = v6 + 48;
    void v10[3] = v6 + 72;
    v9[0] = v8;
    v9[1] = v8 + 24;
    v9[2] = v8 + 48;
    void v9[3] = v8 + 72;
    uint64_t result = sub_2169B66D4((uint64_t)&v11, (uint64_t)v10, (uint64_t)v9);
    if (!result) {
      break;
    }
    v6 += 96;
    v8 += 96;
  }
  while (v6 != v7);
  return result;
}

uint64_t sub_2169B8818(_OWORD **a1)
{
  unsigned int v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    uint64_t v3 = operator new(0x30uLL);
    uint64_t v4 = *a1;
    long long v5 = (*a1)[1];
    *(_OWORD *)uint64_t v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    uint64_t v6 = *((void *)v4 + 4);
    *((void *)v3 + 4) = v6;
    if (v6)
    {
      uint64_t v7 = (atomic_ullong *)*((void *)v3 + 3);
      uint64_t v8 = (atomic_ullong *)(v6 - 16);
      if (!v7) {
        uint64_t v7 = v8;
      }
      atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
      uint64_t v4 = *a1;
    }
    atomic_store(0, (unsigned int *)v3 + 10);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 10, 1u, memory_order_relaxed);
    char v10 = v4;
    *a1 = v3;
    sub_2169B867C((uint64_t *)&v10);
  }
  return (uint64_t)*a1;
}

void *sub_2169B88B4(pxrInternal__aapl__pxrReserved__::SdfPathExpression **a1, void *a2)
{
  uint64_t v3 = *a1;
  *a1 = (pxrInternal__aapl__pxrReserved__::SdfPathExpression *)((char *)*a1 + 96);
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, v3);
}

void sub_2169B88CC(void *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    uint64_t v4 = a1 + 3;
    uint64_t v3 = (atomic_ullong *)a1[3];
    if (v3)
    {
      if (atomic_fetch_add_explicit(v3, 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
      {
        __dmb(9u);
        long long v9 = *(void (**)(void))(*v4 + 8);
        if (v9) {
          v9();
        }
      }
    }
    else if (atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 - 16), 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
    {
      __dmb(9u);
      uint64_t v5 = a1[4];
      if (*a1)
      {
        uint64_t v6 = 96 * *a1;
        uint64_t v7 = v5 + 48;
        do
        {
          if (*(char *)(v7 + 47) < 0) {
            operator delete(*(void **)(v7 + 24));
          }
          char v10 = (void **)v7;
          sub_2169B81EC(&v10);
          char v10 = (void **)(v7 - 24);
          sub_2169B74B8(&v10);
          uint64_t v8 = *(void **)(v7 - 48);
          if (v8)
          {
            *(void *)(v7 - 40) = v8;
            operator delete(v8);
          }
          v7 += 96;
          v6 -= 96;
        }
        while (v6);
        uint64_t v5 = a1[4];
      }
      operator delete((void *)(v5 - 16));
    }
    void *v4 = 0;
    v4[1] = 0;
  }
}

void sub_2169B89C0(void *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    if (a1[3] || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      sub_2169B88CC(a1);
    }
    else if (*a1)
    {
      uint64_t v4 = 96 * *a1;
      uint64_t v5 = a1[4] + 48;
      do
      {
        if (*(char *)(v5 + 47) < 0) {
          operator delete(*(void **)(v5 + 24));
        }
        uint64_t v7 = (void **)v5;
        sub_2169B81EC(&v7);
        uint64_t v7 = (void **)(v5 - 24);
        sub_2169B74B8(&v7);
        uint64_t v6 = *(void **)(v5 - 48);
        if (v6)
        {
          *(void *)(v5 - 40) = v6;
          operator delete(v6);
        }
        v5 += 96;
        v4 -= 96;
      }
      while (v4);
    }
    *a1 = 0;
  }
}

void sub_2169B8A80(unint64_t *a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    uint64_t v7 = (void *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 >= a2)
          {
            uint64_t v13 = 96 * v3;
            uint64_t v14 = 96 * a2;
            do
            {
              int v15 = (void **)&v7[(unint64_t)v14 / 8];
              if (SHIBYTE(v7[(unint64_t)v14 / 8 + 11]) < 0) {
                operator delete(v15[9]);
              }
              int v17 = v15 + 6;
              sub_2169B81EC(&v17);
              int v17 = v15 + 3;
              sub_2169B74B8(&v17);
              BOOL v16 = *v15;
              if (*v15)
              {
                v7[(unint64_t)v14 / 8 + 1] = v16;
                operator delete(v16);
              }
              v14 += 96;
            }
            while (v13 != v14);
            goto LABEL_27;
          }
          uint64_t v9 = a1[4];
          if (*(void *)(v9 - 8) < a2)
          {
            uint64_t v7 = sub_2169B8C68((uint64_t)a1, a2);
            sub_2169B8E04(v9, v9 + 96 * v3, (uint64_t)v7);
          }
LABEL_19:
          uint64_t v10 = (uint64_t)&v7[12 * v3];
          goto LABEL_20;
        }
        uint64_t v7 = (void *)a1[4];
      }
      uint64_t v11 = (uint64_t)v7;
      if (v3 >= a2) {
        unint64_t v12 = a2;
      }
      else {
        unint64_t v12 = *a1;
      }
      uint64_t v7 = sub_2169B8C68((uint64_t)a1, a2);
      sub_2169B8E04(v11, v11 + 96 * v12, (uint64_t)v7);
      if (v3 >= a2) {
        goto LABEL_27;
      }
      goto LABEL_19;
    }
    if (a2 <= 0x2AAAAAAAAAAAAAALL)
    {
      uint64_t v7 = sub_2169B8C68((uint64_t)a1, a2);
      uint64_t v10 = (uint64_t)v7;
LABEL_20:
      sub_2169B8D0C(a3, v10, (uint64_t)&v7[12 * a2]);
LABEL_27:
      if (v7 != (void *)a1[4])
      {
        sub_2169B88CC(a1);
        a1[4] = (unint64_t)v7;
      }
      *a1 = a2;
      return;
    }
  }

  sub_2169B89C0(a1);
}

void *sub_2169B8C68(uint64_t a1, unint64_t a2)
{
  sub_216851EE4((uint64_t)&v7, "VtArray::_AllocateNew", "value_type *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfPathExpression>::_AllocateNew(size_t) [ELEM = pxrInternal__aapl__pxrReserved__::SdfPathExpression]");
  if (a2 > 0x2AAAAAAAAAAAAAALL) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = (96 * a2) | 0x10;
  }
  uint64_t v4 = operator new(v3);
  void *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_2169B8CF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_2169B8D0C(uint64_t *result, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    uint64_t v5 = 0;
    uint64_t v6 = *result;
    do
    {
      uint64_t result = sub_2169B70E4((void *)(a2 + v5), v6);
      v5 += 96;
    }
    while (a2 + v5 != a3);
  }
  return result;
}

void sub_2169B8D64(void *a1)
{
  __cxa_begin_catch(a1);
  for (; v2; v2 -= 96)
  {
    sub_2169B8D9C(v1);
    v1 += 96;
  }
  __cxa_rethrow();
}

void sub_2169B8D88(_Unwind_Exception *a1)
{
}

void sub_2169B8D9C(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  size_t v3 = (void **)(a1 + 48);
  sub_2169B81EC(&v3);
  size_t v3 = (void **)(a1 + 24);
  sub_2169B74B8(&v3);
  uint64_t v2 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
}

uint64_t sub_2169B8E04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = 0;
    do
    {
      sub_2169B70E4((void *)(a3 + v6), a1 + v6);
      v6 += 96;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

void sub_2169B8E64(void *a1)
{
  __cxa_begin_catch(a1);
  for (; v2; v2 -= 96)
  {
    sub_2169B8D9C(v1);
    v1 += 96;
  }
  __cxa_rethrow();
}

void sub_2169B8E88(_Unwind_Exception *a1)
{
}

void sub_2169B8E9C(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    if (*((void *)this + 3) || (unint64_t v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfPathExpression>::_DetachIfNotUnique() [ELEM = pxrInternal__aapl__pxrReserved__::SdfPathExpression]", a3);
      uint64_t v6 = *((void *)this + 4);
      uint64_t v7 = *(void *)this;
      int v8 = sub_2169B8C68((uint64_t)this, *(void *)this);
      sub_2169B8E04(v6, v6 + 96 * v7, (uint64_t)v8);
      sub_2169B88CC(this);
      *((void *)this + 4) = v8;
    }
  }
}

uint64_t sub_2169B8F2C@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  uint64_t result = sub_2169B91F8(&v5, a1, a2);
  *a3 = v5;
  a3[1] = (char *)&off_26C755DE0 + 3;
  return result;
}

void sub_2169B9000(void *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = a1[1];
  if (*a1 == v5)
  {
    uint64_t v21 = 0;
    memset(v20, 0, sizeof(v20));
    a4[1] = off_26C755E98;
    sub_2168F8DBC(a4, (uint64_t)v20);
    sub_2168F83DC((uint64_t)v20);
  }
  else
  {
    *(void *)&v20[0] = *a1;
    *((void *)&v20[0] + 1) = v5;
    LODWORD(v8) = 1;
    do
    {
      unint64_t v8 = (*(_DWORD *)sub_216999AD4((uint64_t *)v20, (uint64_t)a2, a3) * v8);
      sub_216999B54(v20);
    }
    while (*(void *)&v20[0] != *((void *)&v20[0] + 1));
    sub_2169B94DC((uint64_t)v20, v8);
    sub_2169B9C54((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v9, v10);
    uint64_t v11 = v21;
    sub_2169B9C54((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v12, v13);
    uint64_t v16 = 0;
    uint64_t v18 = v11;
    uint64_t v19 = v21 + 8 * *(void *)&v20[0];
    while (v18 != v19)
    {
      int v17 = (_DWORD *)sub_2169B9550(&v18, v14, v15);
      sub_2169B91F8(v17, a2, (uint64_t *)a3);
      ++v16;
      sub_2169B95D0(&v18);
    }
    a4[1] = off_26C755E98;
    sub_2168F8DBC(a4, (uint64_t)v20);
    sub_2168F83DC((uint64_t)v20);
  }
}

void sub_2169B9140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2169B9170(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, long long a12, uint64_t a13)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to parse at element %zd (at sub-part %zd if there are multiple parts)", v15, v16);
    if (*(char *)(v14 + 23) < 0) {
      operator delete(*(void **)v14);
    }
    *(_OWORD *)uint64_t v14 = a12;
    *(void *)(v14 + 16) = a13;
    *(void *)(v13 + 8) = 0;
    __cxa_end_catch();
    JUMPOUT(0x2169B90E8);
  }
  JUMPOUT(0x2169B9158);
}

void sub_2169B91E8()
{
}

uint64_t sub_2169B91F8(_DWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = *a2;
  if (*a3 + 2 > (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3)))
  {
    uint64_t v10 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", 47);
    v12[0] = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", (uint64_t)v10, 0x2Fu);
    v12[1] = "MakeScalarValueImpl";
    void v12[2] = 141;
    void v12[3] = "void pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeScalarValueImpl(GfVec2i *, const vector<Value> &, size_t &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Not enough values to parse value of type %s", "Vec2i");
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &unk_26C7552B8;
    __cxa_throw(exception, (struct type_info *)&unk_26C755290, (void (*)(void *))std::exception::~exception);
  }
  *a3 = v3 + 1;
  *a1 = sub_2169ABE74(v4 + 56 * v3);
  uint64_t v8 = (*a3)++;
  uint64_t result = sub_2169ABE74(*a2 + 56 * v8);
  a1[1] = result;
  return result;
}

void *sub_2169B9338(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

void *sub_2169B9348(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_2169B9354()
{
  return 1;
}

unint64_t sub_2169B935C(int *a1)
{
  return bswap64(0x9E3779B97F4A7C55* bswap64(0x9E3779B97F4A7C55* (a1[1] + ((unint64_t)(a1[1] + (uint64_t)*a1 + (a1[1] + (uint64_t)*a1) * (a1[1] + (uint64_t)*a1)) >> 1))));
}

BOOL sub_2169B9390(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

BOOL sub_2169B93A8(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

uint64_t sub_2169B93C4()
{
  return 0;
}

void *sub_2169B93D0(uint64_t a1, void *a2)
{
  return pxrInternal__aapl__pxrReserved__::operator<<(a2);
}

void *sub_2169B93E0()
{
  return &unk_26C74C720;
}

uint64_t sub_2169B93EC()
{
  return 0;
}

uint64_t sub_2169B93F4()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_2169B9400()
{
  return 0;
}

uint64_t sub_2169B9408()
{
  return 0;
}

BOOL sub_2169B9410(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x80000002174E4396 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2169B944C(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C720, a2, a3);
}

void *sub_2169B9470()
{
  return &unk_26C74C720;
}

void *sub_2169B9480@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  a2[1] = (char *)&off_26C755DE0 + 3;
  return result;
}

uint64_t sub_2169B9498(uint64_t result, int *a2, int *a3)
{
  uint64_t v3 = *a2;
  if (*(unsigned char *)(result + 8)) {
    v3 += (unint64_t)(*(void *)result + v3 + (*(void *)result + v3) * (*(void *)result + v3)) >> 1;
  }
  else {
    *(unsigned char *)(result + 8) = 1;
  }
  *(void *)uint64_t result = v3;
  *(void *)uint64_t result = *a3 + ((unint64_t)(v3 + *a3 + (v3 + *a3) * (v3 + *a3)) >> 1);
  return result;
}

uint64_t sub_2169B94DC(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v5 = 0;
  sub_2168F845C((void *)a1);
  uint64_t v6 = &v5;
  sub_2169B99EC((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_2169B9538(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2169B9550(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    void v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal"
            "__aapl__pxrReserved__::GfVec2i>>::operator*() [T = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aa"
            "pl__pxrReserved__::GfVec2i>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_2169B95C8()
{
}

void *sub_2169B95D0(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArr"
            "ay<pxrInternal__aapl__pxrReserved__::GfVec2i>>::operator++() [T = pxrInternal__aapl__pxrReserved__::VtArray<"
            "pxrInternal__aapl__pxrReserved__::GfVec2i>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

uint64_t *sub_2169B9650(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

atomic_uint **sub_2169B9670(atomic_uint **a1, atomic_uint **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2169B97E8(a1);
}

uint64_t sub_2169B9680()
{
  return 1;
}

unint64_t sub_2169B9688(unint64_t **a1)
{
  return sub_2169B9840((uint64_t)&v2, *a1);
}

BOOL sub_2169B96B0(void **a1, uint64_t *a2)
{
  return sub_2169B9898(*a1, *a2);
}

BOOL sub_2169B96BC(void **a1, uint64_t a2)
{
  return sub_2169B9898(*a1, a2);
}

uint64_t sub_2169B96C8()
{
  return 0;
}

void *sub_2169B96D4(uint64_t **a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, void *))sub_2169B99D4);
  return a2;
}

void *sub_2169B9728()
{
  return &unk_26C74DE78;
}

uint64_t sub_2169B9734()
{
  return 1;
}

void *sub_2169B973C()
{
  return &unk_26C74C720;
}

uint64_t sub_2169B9748(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_2169B9750(uint64_t a1)
{
  return **(void **)a1;
}

BOOL sub_2169B975C(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x80000002174E52A0 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2169B9798(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74DE78, a2, a3);
}

void *sub_2169B97BC()
{
  return &unk_26C74DE78;
}

uint64_t sub_2169B97C8(uint64_t a1)
{
  return *(void *)a1;
}

void *sub_2169B97D0@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  a2[1] = off_26C755E98;
  return sub_2168F8DBC(a2, v2);
}

atomic_uint **sub_2169B97E8(atomic_uint **a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit(v2 + 10, 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_2168F83DC((uint64_t)v2);
    operator delete(v2);
  }
  return a1;
}

unint64_t sub_2169B9840(uint64_t a1, unint64_t *a2)
{
  unint64_t v2 = *a2;
  if (*a2)
  {
    uint64_t v3 = (int *)a2[4];
    unint64_t v4 = *a2;
    do
    {
      uint64_t v5 = *v3;
      uint64_t v6 = v3[1];
      v3 += 2;
      unint64_t v7 = bswap64(0x9E3779B97F4A7C55 * (v6 + ((unint64_t)(v6 + v5 + (v6 + v5) * (v6 + v5)) >> 1)));
      unint64_t v2 = v7 + ((v7 + v2 + (v7 + v2) * (v7 + v2)) >> 1);
      --v4;
    }
    while (v4);
    v2 *= 0x9E3779B97F4A7C55;
  }
  return bswap64(v2);
}

BOOL sub_2169B9898(void *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32) && sub_2168F8C2C((uint64_t)a1, a2) && a1[3] == *(void *)(a2 + 24)) {
    return 1;
  }
  BOOL result = sub_2168F8C2C((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  if (!*a1) {
    return 1;
  }
  uint64_t v5 = (int *)a1[4];
  uint64_t v6 = &v5[2 * *a1];
  unint64_t v7 = *(int **)(a2 + 32);
  do
  {
    int v8 = *v5;
    int v9 = v5[1];
    v5 += 2;
    int v10 = *v7;
    int v11 = v7[1];
    v7 += 2;
    BOOL result = v8 == v10 && v9 == v11;
  }
  while (result && v5 != v6);
  return result;
}

uint64_t sub_2169B9938(_OWORD **a1)
{
  unsigned int v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    uint64_t v3 = operator new(0x30uLL);
    unint64_t v4 = *a1;
    long long v5 = (*a1)[1];
    *(_OWORD *)uint64_t v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    uint64_t v6 = *((void *)v4 + 4);
    *((void *)v3 + 4) = v6;
    if (v6)
    {
      unint64_t v7 = (atomic_ullong *)*((void *)v3 + 3);
      int v8 = (atomic_ullong *)(v6 - 16);
      if (!v7) {
        unint64_t v7 = v8;
      }
      atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
      unint64_t v4 = *a1;
    }
    atomic_store(0, (unsigned int *)v3 + 10);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 10, 1u, memory_order_relaxed);
    int v10 = (atomic_uint *)v4;
    *a1 = v3;
    sub_2169B97E8(&v10);
  }
  return (uint64_t)*a1;
}

void *sub_2169B99D4(void *a1, void *a2)
{
  *a1 += 8;
  return pxrInternal__aapl__pxrReserved__::operator<<(a2);
}

void sub_2169B99EC(unint64_t *a1, unint64_t a2, uint64_t **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    unint64_t v7 = (uint64_t *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load((unint64_t *)v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              int v10 = sub_2169B9BB4((uint64_t)a1, a2);
              unint64_t v7 = v10;
              if (v3)
              {
                for (uint64_t i = 0; i != v3; ++i)
                  v10[i] = *(void *)(v9 + i * 8);
              }
            }
            uint64_t v12 = *a3;
            uint64_t v13 = v3;
            do
              v7[v13++] = *v12;
            while (a2 != v13);
          }
          uint64_t v14 = v7;
          goto LABEL_31;
        }
        unint64_t v7 = (uint64_t *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v19 = a2;
      }
      else {
        unint64_t v19 = *a1;
      }
      char v20 = sub_2169B9BB4((uint64_t)a1, a2);
      uint64_t v14 = v20;
      if (v19)
      {
        uint64_t v21 = 8 * v19;
        int v22 = v20;
        do
        {
          uint64_t v23 = *v7++;
          *v22++ = v23;
          v21 -= 8;
        }
        while (v21);
      }
      if (v3 < a2)
      {
        BOOL v24 = *a3;
        uint64_t v25 = v3;
        do
          v20[v25++] = *v24;
        while (a2 != v25);
      }
      goto LABEL_31;
    }
    uint64_t v15 = 8 * a2;
    if (8 * a2 / a2 == 8)
    {
      uint64_t v16 = sub_2169B9BB4((uint64_t)a1, a2);
      uint64_t v14 = v16;
      unint64_t v17 = 0;
      uint64_t v18 = *a3;
      do
      {
        v16[v17 / 8] = *v18;
        v17 += 8;
      }
      while (v15 != v17);
LABEL_31:
      if (v14 != (uint64_t *)a1[4])
      {
        sub_2168F83DC((uint64_t)a1);
        a1[4] = (unint64_t)v14;
      }
      *a1 = a2;
      return;
    }
  }

  sub_2168F845C(a1);
}

void *sub_2169B9BB4(uint64_t a1, unint64_t a2)
{
  sub_216851EE4((uint64_t)&v7, "VtArray::_AllocateNew", "value_type *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>::_AllocateNew(size_t) [T = pxrInternal__aapl__pxrReserved__::GfVec2i]");
  if (a2 > 0x1FFFFFFFFFFFFFFDLL) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 8 * a2 + 16;
  }
  unint64_t v4 = operator new(v3);
  void *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_2169B9C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2169B9C54(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    if (*((void *)this + 3) || (unint64_t v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec2i]", a3);
      uint64_t v6 = (uint64_t *)*((void *)this + 4);
      uint64_t v7 = *(void *)this;
      int v8 = sub_2169B9BB4((uint64_t)this, *(void *)this);
      unint64_t v9 = v8;
      if (v7)
      {
        uint64_t v10 = 8 * v7;
        int v11 = v8;
        do
        {
          uint64_t v12 = *v6++;
          *v11++ = v12;
          v10 -= 8;
        }
        while (v10);
      }
      sub_2168F83DC((uint64_t)this);
      *((void *)this + 4) = v9;
    }
  }
}

uint64_t sub_2169B9CEC@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t result = sub_2169B9FBC(&v5, a1, a2);
  *(void *)(a3 + 8) = (char *)&off_26C74E2B0 + 3;
  *(_DWORD *)a3 = v5;
  return result;
}

void sub_2169B9DC4(void *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = a1[1];
  if (*a1 == v5)
  {
    uint64_t v21 = 0;
    memset(v20, 0, sizeof(v20));
    a4[1] = off_26C74EFA0;
    sub_2168F8DBC(a4, (uint64_t)v20);
    sub_2168F83DC((uint64_t)v20);
  }
  else
  {
    *(void *)&v20[0] = *a1;
    *((void *)&v20[0] + 1) = v5;
    LODWORD(v8) = 1;
    do
    {
      unint64_t v8 = (*(_DWORD *)sub_216999AD4((uint64_t *)v20, (uint64_t)a2, a3) * v8);
      sub_216999B54(v20);
    }
    while (*(void *)&v20[0] != *((void *)&v20[0] + 1));
    sub_2168FB500((uint64_t)v20, v8);
    sub_2168FB8BC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v9, v10);
    uint64_t v11 = v21;
    sub_2168FB8BC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v12, v13);
    uint64_t v16 = 0;
    uint64_t v18 = v11;
    uint64_t v19 = v21 + 4 * *(void *)&v20[0];
    while (v18 != v19)
    {
      unint64_t v17 = (_WORD *)sub_2169BA188(&v18, v14, v15);
      sub_2169B9FBC(v17, a2, (uint64_t *)a3);
      ++v16;
      sub_2169BA208(&v18);
    }
    a4[1] = off_26C74EFA0;
    sub_2168F8DBC(a4, (uint64_t)v20);
    sub_2168F83DC((uint64_t)v20);
  }
}

void sub_2169B9F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2169B9F34(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, long long a12, uint64_t a13)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to parse at element %zd (at sub-part %zd if there are multiple parts)", v15, v16);
    if (*(char *)(v14 + 23) < 0) {
      operator delete(*(void **)v14);
    }
    *(_OWORD *)uint64_t v14 = a12;
    *(void *)(v14 + 16) = a13;
    *(void *)(v13 + 8) = 0;
    __cxa_end_catch();
    JUMPOUT(0x2169B9EACLL);
  }
  JUMPOUT(0x2169B9F1CLL);
}

void sub_2169B9FAC()
{
}

uint64_t sub_2169B9FBC(_WORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = *a2;
  if (*a3 + 2 > (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3)))
  {
    uint64_t v13 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", 47);
    v15[0] = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", (uint64_t)v13, 0x2Fu);
    v15[1] = "MakeScalarValueImpl";
    void v15[2] = 134;
    uint64_t v15[3] = "void pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeScalarValueImpl(GfVec2h *, const vector<Value> &, size_t &)";
    char v16 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v15, 1, (pxrInternal__aapl__pxrReserved__ *)"Not enough values to parse value of type %s", "Vec2h");
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &unk_26C7552B8;
    __cxa_throw(exception, (struct type_info *)&unk_26C755290, (void (*)(void *))std::exception::~exception);
  }
  *a3 = v3 + 1;
  sub_2169AF53C(v4 + 56 * v3);
  if (v8 == 0.0)
  {
    unsigned int v9 = HIWORD(LODWORD(v8));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v8) >> 23])
  {
    unsigned int v9 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v8) >> 23]
       + (((LODWORD(v8) & 0x7FFFFF) + ((LODWORD(v8) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v9) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v8));
  }
  *a1 = v9;
  uint64_t v10 = (*a3)++;
  sub_2169AF53C(*a2 + 56 * v10);
  if (v11 == 0.0)
  {
    uint64_t result = HIWORD(LODWORD(v11));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v11) >> 23])
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v11) >> 23]
           + (((LODWORD(v11) & 0x7FFFFF) + ((LODWORD(v11) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v11));
  }
  a1[1] = result;
  return result;
}

uint64_t sub_2169BA188(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    void v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal"
            "__aapl__pxrReserved__::GfVec2h>>::operator*() [T = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aa"
            "pl__pxrReserved__::GfVec2h>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_2169BA200()
{
}

void *sub_2169BA208(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArr"
            "ay<pxrInternal__aapl__pxrReserved__::GfVec2h>>::operator++() [T = pxrInternal__aapl__pxrReserved__::VtArray<"
            "pxrInternal__aapl__pxrReserved__::GfVec2h>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 4;
  }
  return a1;
}

uint64_t sub_2169BA288@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  uint64_t result = sub_2169BA554(&v5, a1, a2);
  *a3 = v5;
  a3[1] = (char *)&off_26C74E368 + 3;
  return result;
}

void sub_2169BA35C(void *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = a1[1];
  if (*a1 == v5)
  {
    uint64_t v21 = 0;
    memset(v20, 0, sizeof(v20));
    a4[1] = off_26C74EEE8;
    sub_2168F8DBC(a4, (uint64_t)v20);
    sub_2168F83DC((uint64_t)v20);
  }
  else
  {
    *(void *)&v20[0] = *a1;
    *((void *)&v20[0] + 1) = v5;
    LODWORD(v8) = 1;
    do
    {
      unint64_t v8 = (*(_DWORD *)sub_216999AD4((uint64_t *)v20, (uint64_t)a2, a3) * v8);
      sub_216999B54(v20);
    }
    while (*(void *)&v20[0] != *((void *)&v20[0] + 1));
    sub_2168FA95C((uint64_t)v20, v8);
    sub_2168FAD50((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v9, v10);
    uint64_t v11 = v21;
    sub_2168FAD50((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v12, v13);
    uint64_t v16 = 0;
    uint64_t v18 = v11;
    uint64_t v19 = v21 + 8 * *(void *)&v20[0];
    while (v18 != v19)
    {
      unint64_t v17 = (_DWORD *)sub_2169BA694(&v18, v14, v15);
      sub_2169BA554(v17, a2, (uint64_t *)a3);
      ++v16;
      sub_2169BA714(&v18);
    }
    a4[1] = off_26C74EEE8;
    sub_2168F8DBC(a4, (uint64_t)v20);
    sub_2168F83DC((uint64_t)v20);
  }
}

void sub_2169BA49C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2169BA4CC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, long long a12, uint64_t a13)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to parse at element %zd (at sub-part %zd if there are multiple parts)", v15, v16);
    if (*(char *)(v14 + 23) < 0) {
      operator delete(*(void **)v14);
    }
    *(_OWORD *)uint64_t v14 = a12;
    *(void *)(v14 + 16) = a13;
    *(void *)(v13 + 8) = 0;
    __cxa_end_catch();
    JUMPOUT(0x2169BA444);
  }
  JUMPOUT(0x2169BA4B4);
}

void sub_2169BA544()
{
}

uint64_t sub_2169BA554(_DWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = *a2;
  if (*a3 + 2 > (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3)))
  {
    uint64_t v12 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", 47);
    v14[0] = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", (uint64_t)v12, 0x2Fu);
    v14[1] = "MakeScalarValueImpl";
    void v14[2] = 127;
    v14[3] = "void pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeScalarValueImpl(GfVec2f *, const vector<Value> &, size_t &)";
    char v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Not enough values to parse value of type %s", "Vec2f");
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &unk_26C7552B8;
    __cxa_throw(exception, (struct type_info *)&unk_26C755290, (void (*)(void *))std::exception::~exception);
  }
  *a3 = v3 + 1;
  sub_2169AF53C(v4 + 56 * v3);
  *a1 = v8;
  uint64_t v9 = (*a3)++;
  uint64_t result = sub_2169AF53C(*a2 + 56 * v9);
  a1[1] = v11;
  return result;
}

uint64_t sub_2169BA694(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    void v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal"
            "__aapl__pxrReserved__::GfVec2f>>::operator*() [T = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aa"
            "pl__pxrReserved__::GfVec2f>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_2169BA70C()
{
}

void *sub_2169BA714(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArr"
            "ay<pxrInternal__aapl__pxrReserved__::GfVec2f>>::operator++() [T = pxrInternal__aapl__pxrReserved__::VtArray<"
            "pxrInternal__aapl__pxrReserved__::GfVec2f>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

unsigned int *sub_2169BA794@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, unsigned int **a3@<X8>)
{
  sub_2169BAA80(&v5, a1, a2);
  a3[1] = (unsigned int *)((char *)&off_26C74E420 + 2);
  uint64_t result = (unsigned int *)operator new(0x18uLL);
  *(_OWORD *)uint64_t result = v5;
  atomic_store(0, result + 4);
  *a3 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 4, 1u, memory_order_relaxed);
  return result;
}

void sub_2169BA888(void *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = a1[1];
  if (*a1 == v5)
  {
    uint64_t v21 = 0;
    memset(v20, 0, sizeof(v20));
    a4[1] = off_26C74F058;
    sub_2168F8DBC(a4, (uint64_t)v20);
    sub_2168F83DC((uint64_t)v20);
  }
  else
  {
    *(void *)&v20[0] = *a1;
    *((void *)&v20[0] + 1) = v5;
    LODWORD(v8) = 1;
    do
    {
      unint64_t v8 = (*(_DWORD *)sub_216999AD4((uint64_t *)v20, (uint64_t)a2, a3) * v8);
      sub_216999B54(v20);
    }
    while (*(void *)&v20[0] != *((void *)&v20[0] + 1));
    sub_2168FC144((uint64_t)v20, v8);
    sub_2168FC460((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v9, v10);
    uint64_t v11 = v21;
    sub_2168FC460((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v12, v13);
    uint64_t v16 = 0;
    uint64_t v18 = v11;
    uint64_t v19 = v21 + 16 * *(void *)&v20[0];
    while (v18 != v19)
    {
      unint64_t v17 = (void *)sub_2169BABC0(&v18, v14, v15);
      sub_2169BAA80(v17, a2, (uint64_t *)a3);
      ++v16;
      sub_2169BAC40(&v18);
    }
    a4[1] = off_26C74F058;
    sub_2168F8DBC(a4, (uint64_t)v20);
    sub_2168F83DC((uint64_t)v20);
  }
}

void sub_2169BA9C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2169BA9F8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, long long a12, uint64_t a13)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to parse at element %zd (at sub-part %zd if there are multiple parts)", v15, v16);
    if (*(char *)(v14 + 23) < 0) {
      operator delete(*(void **)v14);
    }
    *(_OWORD *)uint64_t v14 = a12;
    *(void *)(v14 + 16) = a13;
    *(void *)(v13 + 8) = 0;
    __cxa_end_catch();
    JUMPOUT(0x2169BA970);
  }
  JUMPOUT(0x2169BA9E0);
}

void sub_2169BAA70()
{
}

uint64_t sub_2169BAA80(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = *a2;
  if (*a3 + 2 > (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3)))
  {
    uint64_t v12 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", 47);
    v14[0] = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", (uint64_t)v12, 0x2Fu);
    v14[1] = "MakeScalarValueImpl";
    void v14[2] = 120;
    v14[3] = "void pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeScalarValueImpl(GfVec2d *, const vector<Value> &, size_t &)";
    char v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Not enough values to parse value of type %s", "Vec2d");
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &unk_26C7552B8;
    __cxa_throw(exception, (struct type_info *)&unk_26C755290, (void (*)(void *))std::exception::~exception);
  }
  *a3 = v3 + 1;
  sub_2169B0370(v4 + 56 * v3);
  *a1 = v8;
  uint64_t v9 = (*a3)++;
  uint64_t result = sub_2169B0370(*a2 + 56 * v9);
  a1[1] = v11;
  return result;
}

uint64_t sub_2169BABC0(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    void v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal"
            "__aapl__pxrReserved__::GfVec2d>>::operator*() [T = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aa"
            "pl__pxrReserved__::GfVec2d>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_2169BAC38()
{
}

void *sub_2169BAC40(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArr"
            "ay<pxrInternal__aapl__pxrReserved__::GfVec2d>>::operator++() [T = pxrInternal__aapl__pxrReserved__::VtArray<"
            "pxrInternal__aapl__pxrReserved__::GfVec2d>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 16;
  }
  return a1;
}

_DWORD *sub_2169BACC0@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  sub_2169BAFB8(&v5, a1, a2);
  a3[1] = (char *)&off_26C755F50 + 2;
  uint64_t result = operator new(0x10uLL);
  *(void *)uint64_t result = v5;
  result[2] = v6;
  atomic_store(0, result + 3);
  *a3 = result;
  atomic_fetch_add_explicit(result + 3, 1u, memory_order_relaxed);
  return result;
}

void sub_2169BADBC(void *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = a1[1];
  if (*a1 == v5)
  {
    uint64_t v21 = 0;
    memset(v20, 0, sizeof(v20));
    a4[1] = off_26C756008;
    sub_2168F8DBC(a4, (uint64_t)v20);
    sub_2168F83DC((uint64_t)v20);
  }
  else
  {
    *(void *)&v20[0] = *a1;
    *((void *)&v20[0] + 1) = v5;
    LODWORD(v8) = 1;
    do
    {
      unint64_t v8 = (*(_DWORD *)sub_216999AD4((uint64_t *)v20, (uint64_t)a2, a3) * v8);
      sub_216999B54(v20);
    }
    while (*(void *)&v20[0] != *((void *)&v20[0] + 1));
    sub_2169BB3AC((uint64_t)v20, v8);
    sub_2169BBC60((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v9, v10);
    uint64_t v11 = v21;
    sub_2169BBC60((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v12, v13);
    uint64_t v16 = 0;
    uint64_t v18 = v11;
    uint64_t v19 = v21 + 12 * *(void *)&v20[0];
    while (v18 != v19)
    {
      unint64_t v17 = (_DWORD *)sub_2169BB424(&v18, v14, v15);
      sub_2169BAFB8(v17, a2, (uint64_t *)a3);
      ++v16;
      sub_2169BB4A4(&v18);
    }
    a4[1] = off_26C756008;
    sub_2168F8DBC(a4, (uint64_t)v20);
    sub_2168F83DC((uint64_t)v20);
  }
}

void sub_2169BAF00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2169BAF30(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, long long a12, uint64_t a13)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to parse at element %zd (at sub-part %zd if there are multiple parts)", v15, v16);
    if (*(char *)(v14 + 23) < 0) {
      operator delete(*(void **)v14);
    }
    *(_OWORD *)uint64_t v14 = a12;
    *(void *)(v14 + 16) = a13;
    *(void *)(v13 + 8) = 0;
    __cxa_end_catch();
    JUMPOUT(0x2169BAEA8);
  }
  JUMPOUT(0x2169BAF18);
}

void sub_2169BAFA8()
{
}

uint64_t sub_2169BAFB8(_DWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = *a2;
  if (*a3 + 3 > (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3)))
  {
    uint64_t v11 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", 47);
    v13[0] = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", (uint64_t)v11, 0x2Fu);
    v13[1] = "MakeScalarValueImpl";
    v13[2] = 172;
    void v13[3] = "void pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeScalarValueImpl(GfVec3i *, const vector<Value> &, size_t &)";
    char v14 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Not enough values to parse value of type %s", "Vec3i");
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &unk_26C7552B8;
    __cxa_throw(exception, (struct type_info *)&unk_26C755290, (void (*)(void *))std::exception::~exception);
  }
  *a3 = v3 + 1;
  *a1 = sub_2169ABE74(v4 + 56 * v3);
  uint64_t v8 = (*a3)++;
  a1[1] = sub_2169ABE74(*a2 + 56 * v8);
  uint64_t v9 = (*a3)++;
  uint64_t result = sub_2169ABE74(*a2 + 56 * v9);
  a1[2] = result;
  return result;
}

uint64_t *sub_2169BB114(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 12), 1u, memory_order_relaxed);
  }
  return result;
}

void sub_2169BB130(atomic_uint **a1)
{
  uint64_t v1 = *a1;
  if (v1)
  {
    if (atomic_fetch_add_explicit(v1 + 3, 0xFFFFFFFF, memory_order_release) == 1)
    {
      __dmb(9u);
      operator delete(v1);
    }
  }
}

void *sub_2169BB158(void *result, void *a2)
{
  *a2 = *result;
  _DWORD *result = 0;
  return result;
}

uint64_t sub_2169BB168()
{
  return 1;
}

unint64_t sub_2169BB170(int **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *a1 + 1;
  uint64_t v3 = *a1 + 2;
  uint64_t v5 = 0;
  char v6 = 0;
  sub_2169BB374((uint64_t)&v5, v1, v2, v3);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v5));
}

BOOL sub_2169BB1CC(void *a1, void *a2)
{
  uint64_t v2 = (_DWORD *)*a1;
  uint64_t v3 = (_DWORD *)*a2;
  return *(_DWORD *)*a1 == *(_DWORD *)*a2 && v2[1] == v3[1] && v2[2] == v3[2];
}

BOOL sub_2169BB210(void *a1, _DWORD *a2)
{
  uint64_t v2 = (_DWORD *)*a1;
  return *(_DWORD *)*a1 == *a2 && v2[1] == a2[1] && v2[2] == a2[2];
}

uint64_t sub_2169BB254()
{
  return 0;
}

void *sub_2169BB260(uint64_t a1, void *a2)
{
  return pxrInternal__aapl__pxrReserved__::operator<<(a2);
}

void *sub_2169BB270()
{
  return &unk_26C74C760;
}

uint64_t sub_2169BB27C()
{
  return 0;
}

uint64_t sub_2169BB284()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_2169BB290()
{
  return 0;
}

uint64_t sub_2169BB298()
{
  return 0;
}

BOOL sub_2169BB2A0(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x80000002174E4456 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2169BB2DC(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C760, a2, a3);
}

void *sub_2169BB300()
{
  return &unk_26C74C760;
}

uint64_t sub_2169BB30C(uint64_t a1)
{
  return *(void *)a1;
}

_DWORD *sub_2169BB314@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  a2[1] = (char *)&off_26C755F50 + 2;
  uint64_t result = operator new(0x10uLL);
  int v5 = *(_DWORD *)(v3 + 8);
  *(void *)uint64_t result = *(void *)v3;
  result[2] = v5;
  atomic_store(0, result + 3);
  *a2 = result;
  atomic_fetch_add_explicit(result + 3, 1u, memory_order_relaxed);
  return result;
}

uint64_t sub_2169BB374(uint64_t a1, int *a2, int *a3, int *a4)
{
  uint64_t v4 = *a2;
  if (*(unsigned char *)(a1 + 8)) {
    v4 += (unint64_t)(*(void *)a1 + v4 + (*(void *)a1 + v4) * (*(void *)a1 + v4)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v4;
  return sub_2169B9498(a1, a3, a4);
}

uint64_t sub_2169BB3AC(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  int v6 = 0;
  uint64_t v5 = 0;
  sub_2168F845C((void *)a1);
  int v7 = &v5;
  sub_2169BB98C((unint64_t *)a1, a2, &v7);
  return a1;
}

void sub_2169BB40C(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2169BB424(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    void v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal"
            "__aapl__pxrReserved__::GfVec3i>>::operator*() [T = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aa"
            "pl__pxrReserved__::GfVec3i>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_2169BB49C()
{
}

void *sub_2169BB4A4(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArr"
            "ay<pxrInternal__aapl__pxrReserved__::GfVec3i>>::operator++() [T = pxrInternal__aapl__pxrReserved__::VtArray<"
            "pxrInternal__aapl__pxrReserved__::GfVec3i>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 12;
  }
  return a1;
}

uint64_t *sub_2169BB524(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

atomic_uint **sub_2169BB544(atomic_uint **a1, atomic_uint **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2169BB6BC(a1);
}

uint64_t sub_2169BB554()
{
  return 1;
}

unint64_t sub_2169BB55C(uint64_t **a1)
{
  return sub_2169BB714((uint64_t)&v2, *a1);
}

BOOL sub_2169BB584(void **a1, uint64_t *a2)
{
  return sub_2169BB810(*a1, *a2);
}

BOOL sub_2169BB590(void **a1, uint64_t a2)
{
  return sub_2169BB810(*a1, a2);
}

uint64_t sub_2169BB59C()
{
  return 0;
}

void *sub_2169BB5A8(uint64_t **a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, void *))sub_2169BB974);
  return a2;
}

void *sub_2169BB5FC()
{
  return &unk_26C74DE60;
}

uint64_t sub_2169BB608()
{
  return 1;
}

void *sub_2169BB610()
{
  return &unk_26C74C760;
}

uint64_t sub_2169BB61C(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_2169BB624(uint64_t a1)
{
  return **(void **)a1;
}

BOOL sub_2169BB630(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x8000000217456E68 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2169BB66C(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74DE60, a2, a3);
}

void *sub_2169BB690()
{
  return &unk_26C74DE60;
}

uint64_t sub_2169BB69C(uint64_t a1)
{
  return *(void *)a1;
}

void *sub_2169BB6A4@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  a2[1] = off_26C756008;
  return sub_2168F8DBC(a2, v2);
}

atomic_uint **sub_2169BB6BC(atomic_uint **a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit(v2 + 10, 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_2168F83DC((uint64_t)v2);
    operator delete(v2);
  }
  return a1;
}

unint64_t sub_2169BB714(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  char v8 = 1;
  uint64_t v7 = v2;
  if (v2)
  {
    uint64_t v3 = (int *)a2[4];
    do
    {
      --v2;
      char v4 = v3 + 3;
      sub_2169BB78C((uint64_t)&v7, v3);
      uint64_t v3 = v4;
    }
    while (v2);
    unint64_t v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    unint64_t v5 = 0;
  }
  return bswap64(v5);
}

uint64_t sub_2169BB78C(uint64_t a1, int *a2)
{
  uint64_t v5 = 0;
  char v6 = 0;
  uint64_t result = sub_2169BB374((uint64_t)&v5, a2, a2 + 1, a2 + 2);
  unint64_t v4 = bswap64(0x9E3779B97F4A7C55 * v5);
  if (*(unsigned char *)(a1 + 8)) {
    v4 += (*(void *)a1 + v4 + (*(void *)a1 + v4) * (*(void *)a1 + v4)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v4;
  return result;
}

BOOL sub_2169BB810(void *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32) && sub_2168F8C2C((uint64_t)a1, a2) && a1[3] == *(void *)(a2 + 24)) {
    return 1;
  }
  BOOL result = sub_2168F8C2C((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  if (!*a1) {
    return 1;
  }
  uint64_t v5 = (_DWORD *)a1[4];
  char v6 = &v5[3 * *a1];
  for (uint64_t i = *(_DWORD **)(a2 + 32); *v5 == *i && v5[1] == i[1] && v5[2] == i[2]; i += 3)
  {
    v5 += 3;
    if (v5 == v6) {
      return 1;
    }
  }
  return 0;
}

uint64_t sub_2169BB8D8(_OWORD **a1)
{
  unsigned int v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    uint64_t v3 = operator new(0x30uLL);
    unint64_t v4 = *a1;
    long long v5 = (*a1)[1];
    *(_OWORD *)uint64_t v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    uint64_t v6 = *((void *)v4 + 4);
    *((void *)v3 + 4) = v6;
    if (v6)
    {
      uint64_t v7 = (atomic_ullong *)*((void *)v3 + 3);
      char v8 = (atomic_ullong *)(v6 - 16);
      if (!v7) {
        uint64_t v7 = v8;
      }
      atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
      unint64_t v4 = *a1;
    }
    atomic_store(0, (unsigned int *)v3 + 10);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 10, 1u, memory_order_relaxed);
    uint64_t v10 = (atomic_uint *)v4;
    *a1 = v3;
    sub_2169BB6BC(&v10);
  }
  return (uint64_t)*a1;
}

void *sub_2169BB974(void *a1, void *a2)
{
  *a1 += 12;
  return pxrInternal__aapl__pxrReserved__::operator<<(a2);
}

void sub_2169BB98C(unint64_t *a1, unint64_t a2, uint64_t **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    uint64_t v7 = (void *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              uint64_t v10 = sub_2169BBBB8((uint64_t)a1, a2);
              uint64_t v7 = v10;
              if (v3)
              {
                uint64_t v11 = 0;
                do
                {
                  uint64_t v12 = (char *)v10 + v11;
                  uint64_t v13 = *(void *)(v9 + v11);
                  *((_DWORD *)v12 + 2) = *(_DWORD *)(v9 + v11 + 8);
                  *(void *)uint64_t v12 = v13;
                  v11 += 12;
                }
                while (12 * v3 != v11);
              }
            }
            char v14 = *a3;
            uint64_t v15 = 12 * v3;
            do
            {
              uint64_t v16 = (char *)v7 + v15;
              uint64_t v17 = *v14;
              *((_DWORD *)v16 + 2) = *((_DWORD *)v14 + 2);
              *(void *)uint64_t v16 = v17;
              v15 += 12;
            }
            while (12 * a2 != v15);
          }
          uint64_t v18 = v7;
          goto LABEL_31;
        }
        uint64_t v7 = (void *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v24 = a2;
      }
      else {
        unint64_t v24 = *a1;
      }
      uint64_t v25 = sub_2169BBBB8((uint64_t)a1, a2);
      uint64_t v18 = v25;
      if (v24)
      {
        uint64_t v26 = 12 * v24;
        uint64_t v27 = v25;
        do
        {
          uint64_t v28 = *v7;
          *((_DWORD *)v27 + 2) = *((_DWORD *)v7 + 2);
          void *v27 = v28;
          uint64_t v27 = (void *)((char *)v27 + 12);
          uint64_t v7 = (void *)((char *)v7 + 12);
          v26 -= 12;
        }
        while (v26);
      }
      if (v3 < a2)
      {
        long long v29 = *a3;
        uint64_t v30 = 12 * v3;
        do
        {
          unint64_t v31 = (char *)v25 + v30;
          uint64_t v32 = *v29;
          *((_DWORD *)v31 + 2) = *((_DWORD *)v29 + 2);
          *(void *)unint64_t v31 = v32;
          v30 += 12;
        }
        while (12 * a2 != v30);
      }
      goto LABEL_31;
    }
    if (a2 < 0x1555555555555556)
    {
      uint64_t v19 = sub_2169BBBB8((uint64_t)a1, a2);
      uint64_t v18 = v19;
      uint64_t v20 = 0;
      uint64_t v21 = *a3;
      do
      {
        int v22 = (char *)v19 + v20;
        uint64_t v23 = *v21;
        *((_DWORD *)v22 + 2) = *((_DWORD *)v21 + 2);
        *(void *)int v22 = v23;
        v20 += 12;
      }
      while (12 * a2 != v20);
LABEL_31:
      if (v18 != (void *)a1[4])
      {
        sub_2168F83DC((uint64_t)a1);
        a1[4] = (unint64_t)v18;
      }
      *a1 = a2;
      return;
    }
  }

  sub_2168F845C(a1);
}

void *sub_2169BBBB8(uint64_t a1, unint64_t a2)
{
  sub_216851EE4((uint64_t)&v7, "VtArray::_AllocateNew", "value_type *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>::_AllocateNew(size_t) [T = pxrInternal__aapl__pxrReserved__::GfVec3i]");
  if (a2 > 0x1555555555555553) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 12 * a2 + 16;
  }
  unint64_t v4 = operator new(v3);
  void *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_2169BBC48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2169BBC60(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    if (*((void *)this + 3) || (unint64_t v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec3i]", a3);
      uint64_t v6 = (uint64_t *)*((void *)this + 4);
      uint64_t v7 = *(void *)this;
      int v8 = sub_2169BBBB8((uint64_t)this, *(void *)this);
      unint64_t v9 = v8;
      if (v7)
      {
        uint64_t v10 = 12 * v7;
        uint64_t v11 = v8;
        do
        {
          uint64_t v12 = *v6;
          *((_DWORD *)v11 + 2) = *((_DWORD *)v6 + 2);
          void *v11 = v12;
          uint64_t v11 = (void *)((char *)v11 + 12);
          uint64_t v6 = (uint64_t *)((char *)v6 + 12);
          v10 -= 12;
        }
        while (v10);
      }
      sub_2168F83DC((uint64_t)this);
      *((void *)this + 4) = v9;
    }
  }
}

uint64_t sub_2169BBD08@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t result = sub_2169BBFE4(&v5, a1, a2);
  *(void *)(a3 + 8) = (char *)&off_26C74E4D8 + 3;
  *(_DWORD *)a3 = v5;
  *(_WORD *)(a3 + 4) = v6;
  return result;
}

void sub_2169BBDE8(void *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = a1[1];
  if (*a1 == v5)
  {
    uint64_t v21 = 0;
    memset(v20, 0, sizeof(v20));
    a4[1] = off_26C74F1C8;
    sub_2168F8DBC(a4, (uint64_t)v20);
    sub_2168F83DC((uint64_t)v20);
  }
  else
  {
    *(void *)&v20[0] = *a1;
    *((void *)&v20[0] + 1) = v5;
    LODWORD(v8) = 1;
    do
    {
      unint64_t v8 = (*(_DWORD *)sub_216999AD4((uint64_t *)v20, (uint64_t)a2, a3) * v8);
      sub_216999B54(v20);
    }
    while (*(void *)&v20[0] != *((void *)&v20[0] + 1));
    sub_2168FDCC0((uint64_t)v20, v8);
    sub_2168FE0EC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v9, v10);
    uint64_t v11 = v21;
    sub_2168FE0EC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v12, v13);
    uint64_t v16 = 0;
    uint64_t v18 = v11;
    uint64_t v19 = v21 + 6 * *(void *)&v20[0];
    while (v18 != v19)
    {
      uint64_t v17 = (_WORD *)sub_2169BC214(&v18, v14, v15);
      sub_2169BBFE4(v17, a2, (uint64_t *)a3);
      ++v16;
      sub_2169BC294(&v18);
    }
    a4[1] = off_26C74F1C8;
    sub_2168F8DBC(a4, (uint64_t)v20);
    sub_2168F83DC((uint64_t)v20);
  }
}

void sub_2169BBF2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2169BBF5C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, long long a12, uint64_t a13)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to parse at element %zd (at sub-part %zd if there are multiple parts)", v15, v16);
    if (*(char *)(v14 + 23) < 0) {
      operator delete(*(void **)v14);
    }
    *(_OWORD *)uint64_t v14 = a12;
    *(void *)(v14 + 16) = a13;
    *(void *)(v13 + 8) = 0;
    __cxa_end_catch();
    JUMPOUT(0x2169BBED4);
  }
  JUMPOUT(0x2169BBF44);
}

void sub_2169BBFD4()
{
}

uint64_t sub_2169BBFE4(_WORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = *a2;
  if (*a3 + 3 > (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3)))
  {
    uint64_t v16 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", 47);
    v18[0] = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", (uint64_t)v16, 0x2Fu);
    v18[1] = "MakeScalarValueImpl";
    v18[2] = 164;
    void v18[3] = "void pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeScalarValueImpl(GfVec3h *, const vector<Value> &, size_t &)";
    char v19 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Not enough values to parse value of type %s", "Vec3h");
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &unk_26C7552B8;
    __cxa_throw(exception, (struct type_info *)&unk_26C755290, (void (*)(void *))std::exception::~exception);
  }
  *a3 = v3 + 1;
  sub_2169AF53C(v4 + 56 * v3);
  if (v8 == 0.0)
  {
    unsigned int v9 = HIWORD(LODWORD(v8));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v8) >> 23])
  {
    unsigned int v9 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v8) >> 23]
       + (((LODWORD(v8) & 0x7FFFFF) + ((LODWORD(v8) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v9) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v8));
  }
  *a1 = v9;
  uint64_t v10 = (*a3)++;
  sub_2169AF53C(*a2 + 56 * v10);
  if (v11 == 0.0)
  {
    unsigned int v12 = HIWORD(LODWORD(v11));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v11) >> 23])
  {
    unsigned int v12 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v11) >> 23]
        + (((LODWORD(v11) & 0x7FFFFF) + ((LODWORD(v11) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v12) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v11));
  }
  a1[1] = v12;
  uint64_t v13 = (*a3)++;
  sub_2169AF53C(*a2 + 56 * v13);
  if (v14 == 0.0)
  {
    uint64_t result = HIWORD(LODWORD(v14));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v14) >> 23])
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v14) >> 23]
           + (((LODWORD(v14) & 0x7FFFFF) + ((LODWORD(v14) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v14));
  }
  a1[2] = result;
  return result;
}

uint64_t sub_2169BC214(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    void v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal"
            "__aapl__pxrReserved__::GfVec3h>>::operator*() [T = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aa"
            "pl__pxrReserved__::GfVec3h>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_2169BC28C()
{
}

void *sub_2169BC294(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArr"
            "ay<pxrInternal__aapl__pxrReserved__::GfVec3h>>::operator++() [T = pxrInternal__aapl__pxrReserved__::VtArray<"
            "pxrInternal__aapl__pxrReserved__::GfVec3h>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 6;
  }
  return a1;
}

_DWORD *sub_2169BC314@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  sub_2169BC60C(&v5, a1, a2);
  a3[1] = (char *)&off_26C74E590 + 2;
  uint64_t result = operator new(0x10uLL);
  *(void *)uint64_t result = v5;
  result[2] = v6;
  atomic_store(0, result + 3);
  *a3 = result;
  atomic_fetch_add_explicit(result + 3, 1u, memory_order_relaxed);
  return result;
}

void sub_2169BC410(void *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = a1[1];
  if (*a1 == v5)
  {
    uint64_t v21 = 0;
    memset(v20, 0, sizeof(v20));
    a4[1] = off_26C74F110;
    sub_2168F8DBC(a4, (uint64_t)v20);
    sub_2168F83DC((uint64_t)v20);
  }
  else
  {
    *(void *)&v20[0] = *a1;
    *((void *)&v20[0] + 1) = v5;
    LODWORD(v8) = 1;
    do
    {
      unint64_t v8 = (*(_DWORD *)sub_216999AD4((uint64_t *)v20, (uint64_t)a2, a3) * v8);
      sub_216999B54(v20);
    }
    while (*(void *)&v20[0] != *((void *)&v20[0] + 1));
    sub_2168FD0E8((uint64_t)v20, v8);
    sub_2168FD54C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v9, v10);
    uint64_t v11 = v21;
    sub_2168FD54C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v12, v13);
    uint64_t v16 = 0;
    uint64_t v18 = v11;
    uint64_t v19 = v21 + 12 * *(void *)&v20[0];
    while (v18 != v19)
    {
      uint64_t v17 = (_DWORD *)sub_2169BC768(&v18, v14, v15);
      sub_2169BC60C(v17, a2, (uint64_t *)a3);
      ++v16;
      sub_2169BC7E8(&v18);
    }
    a4[1] = off_26C74F110;
    sub_2168F8DBC(a4, (uint64_t)v20);
    sub_2168F83DC((uint64_t)v20);
  }
}

void sub_2169BC554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2169BC584(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, long long a12, uint64_t a13)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to parse at element %zd (at sub-part %zd if there are multiple parts)", v15, v16);
    if (*(char *)(v14 + 23) < 0) {
      operator delete(*(void **)v14);
    }
    *(_OWORD *)uint64_t v14 = a12;
    *(void *)(v14 + 16) = a13;
    *(void *)(v13 + 8) = 0;
    __cxa_end_catch();
    JUMPOUT(0x2169BC4FCLL);
  }
  JUMPOUT(0x2169BC56CLL);
}

void sub_2169BC5FC()
{
}

uint64_t sub_2169BC60C(_DWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = *a2;
  if (*a3 + 3 > (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3)))
  {
    uint64_t v14 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", 47);
    v16[0] = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", (uint64_t)v14, 0x2Fu);
    v16[1] = "MakeScalarValueImpl";
    v16[2] = 156;
    v16[3] = "void pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeScalarValueImpl(GfVec3f *, const vector<Value> &, size_t &)";
    char v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v16, 1, (pxrInternal__aapl__pxrReserved__ *)"Not enough values to parse value of type %s", "Vec3f");
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &unk_26C7552B8;
    __cxa_throw(exception, (struct type_info *)&unk_26C755290, (void (*)(void *))std::exception::~exception);
  }
  *a3 = v3 + 1;
  sub_2169AF53C(v4 + 56 * v3);
  *a1 = v8;
  uint64_t v9 = (*a3)++;
  sub_2169AF53C(*a2 + 56 * v9);
  a1[1] = v10;
  uint64_t v11 = (*a3)++;
  uint64_t result = sub_2169AF53C(*a2 + 56 * v11);
  a1[2] = v13;
  return result;
}

uint64_t sub_2169BC768(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    void v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal"
            "__aapl__pxrReserved__::GfVec3f>>::operator*() [T = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aa"
            "pl__pxrReserved__::GfVec3f>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_2169BC7E0()
{
}

void *sub_2169BC7E8(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArr"
            "ay<pxrInternal__aapl__pxrReserved__::GfVec3f>>::operator++() [T = pxrInternal__aapl__pxrReserved__::VtArray<"
            "pxrInternal__aapl__pxrReserved__::GfVec3f>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 12;
  }
  return a1;
}

void *sub_2169BC868@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  sub_2169BCB60(&v5, a1, a2);
  a3[1] = (char *)&off_26C74E648 + 2;
  uint64_t result = operator new(0x20uLL);
  *(_OWORD *)uint64_t result = v5;
  *((void *)result + 2) = v6;
  atomic_store(0, (unsigned int *)result + 6);
  *a3 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 6, 1u, memory_order_relaxed);
  return result;
}

void sub_2169BC964(void *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = a1[1];
  if (*a1 == v5)
  {
    uint64_t v21 = 0;
    memset(v20, 0, sizeof(v20));
    a4[1] = off_26C74F280;
    sub_2168F8DBC(a4, (uint64_t)v20);
    sub_2168F83DC((uint64_t)v20);
  }
  else
  {
    *(void *)&v20[0] = *a1;
    *((void *)&v20[0] + 1) = v5;
    LODWORD(v8) = 1;
    do
    {
      unint64_t v8 = (*(_DWORD *)sub_216999AD4((uint64_t *)v20, (uint64_t)a2, a3) * v8);
      sub_216999B54(v20);
    }
    while (*(void *)&v20[0] != *((void *)&v20[0] + 1));
    sub_2168FE9F8((uint64_t)v20, v8);
    sub_2168FED88((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v9, v10);
    uint64_t v11 = v21;
    sub_2168FED88((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v12, v13);
    uint64_t v16 = 0;
    uint64_t v18 = v11;
    uint64_t v19 = v21 + 24 * *(void *)&v20[0];
    while (v18 != v19)
    {
      char v17 = (void *)sub_2169BCCBC(&v18, v14, v15);
      sub_2169BCB60(v17, a2, (uint64_t *)a3);
      ++v16;
      sub_2169BCD3C(&v18);
    }
    a4[1] = off_26C74F280;
    sub_2168F8DBC(a4, (uint64_t)v20);
    sub_2168F83DC((uint64_t)v20);
  }
}

void sub_2169BCAA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2169BCAD8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, long long a12, uint64_t a13)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to parse at element %zd (at sub-part %zd if there are multiple parts)", v15, v16);
    if (*(char *)(v14 + 23) < 0) {
      operator delete(*(void **)v14);
    }
    *(_OWORD *)uint64_t v14 = a12;
    *(void *)(v14 + 16) = a13;
    *(void *)(v13 + 8) = 0;
    __cxa_end_catch();
    JUMPOUT(0x2169BCA50);
  }
  JUMPOUT(0x2169BCAC0);
}

void sub_2169BCB50()
{
}

uint64_t sub_2169BCB60(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = *a2;
  if (*a3 + 3 > (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3)))
  {
    uint64_t v14 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", 47);
    v16[0] = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", (uint64_t)v14, 0x2Fu);
    v16[1] = "MakeScalarValueImpl";
    v16[2] = 148;
    v16[3] = "void pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeScalarValueImpl(GfVec3d *, const vector<Value> &, size_t &)";
    char v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v16, 1, (pxrInternal__aapl__pxrReserved__ *)"Not enough values to parse value of type %s", "Vec3d");
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &unk_26C7552B8;
    __cxa_throw(exception, (struct type_info *)&unk_26C755290, (void (*)(void *))std::exception::~exception);
  }
  *a3 = v3 + 1;
  sub_2169B0370(v4 + 56 * v3);
  *a1 = v8;
  uint64_t v9 = (*a3)++;
  sub_2169B0370(*a2 + 56 * v9);
  a1[1] = v10;
  uint64_t v11 = (*a3)++;
  uint64_t result = sub_2169B0370(*a2 + 56 * v11);
  a1[2] = v13;
  return result;
}

uint64_t sub_2169BCCBC(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    void v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal"
            "__aapl__pxrReserved__::GfVec3d>>::operator*() [T = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aa"
            "pl__pxrReserved__::GfVec3d>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_2169BCD34()
{
}

void *sub_2169BCD3C(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArr"
            "ay<pxrInternal__aapl__pxrReserved__::GfVec3d>>::operator++() [T = pxrInternal__aapl__pxrReserved__::VtArray<"
            "pxrInternal__aapl__pxrReserved__::GfVec3d>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 24;
  }
  return a1;
}

unsigned int *sub_2169BCDBC@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, unsigned int **a3@<X8>)
{
  sub_2169BD0A8(&v5, a1, a2);
  a3[1] = (unsigned int *)((char *)&off_26C7560C0 + 2);
  uint64_t result = (unsigned int *)operator new(0x14uLL);
  *(_OWORD *)uint64_t result = v5;
  atomic_store(0, result + 4);
  *a3 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 4, 1u, memory_order_relaxed);
  return result;
}

void sub_2169BCEB0(void *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = a1[1];
  if (*a1 == v5)
  {
    uint64_t v21 = 0;
    memset(v20, 0, sizeof(v20));
    a4[1] = off_26C756178;
    sub_2168F8DBC(a4, (uint64_t)v20);
    sub_2168F83DC((uint64_t)v20);
  }
  else
  {
    *(void *)&v20[0] = *a1;
    *((void *)&v20[0] + 1) = v5;
    LODWORD(v8) = 1;
    do
    {
      unint64_t v8 = (*(_DWORD *)sub_216999AD4((uint64_t *)v20, (uint64_t)a2, a3) * v8);
      sub_216999B54(v20);
    }
    while (*(void *)&v20[0] != *((void *)&v20[0] + 1));
    sub_2169BD4D8((uint64_t)v20, v8);
    sub_2169BDD28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v9, v10);
    uint64_t v11 = v21;
    sub_2169BDD28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v12, v13);
    uint64_t v16 = 0;
    uint64_t v18 = v11;
    uint64_t v19 = v21 + 16 * *(void *)&v20[0];
    while (v18 != v19)
    {
      char v17 = (_DWORD *)sub_2169BD54C(&v18, v14, v15);
      sub_2169BD0A8(v17, a2, (uint64_t *)a3);
      ++v16;
      sub_2169BD5CC(&v18);
    }
    a4[1] = off_26C756178;
    sub_2168F8DBC(a4, (uint64_t)v20);
    sub_2168F83DC((uint64_t)v20);
  }
}

void sub_2169BCFF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2169BD020(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, long long a12, uint64_t a13)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to parse at element %zd (at sub-part %zd if there are multiple parts)", v15, v16);
    if (*(char *)(v14 + 23) < 0) {
      operator delete(*(void **)v14);
    }
    *(_OWORD *)uint64_t v14 = a12;
    *(void *)(v14 + 16) = a13;
    *(void *)(v13 + 8) = 0;
    __cxa_end_catch();
    JUMPOUT(0x2169BCF98);
  }
  JUMPOUT(0x2169BD008);
}

void sub_2169BD098()
{
}

uint64_t sub_2169BD0A8(_DWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = *a2;
  if (*a3 + 4 > (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3)))
  {
    uint64_t v12 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", 47);
    v14[0] = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", (uint64_t)v12, 0x2Fu);
    v14[1] = "MakeScalarValueImpl";
    void v14[2] = 207;
    v14[3] = "void pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeScalarValueImpl(GfVec4i *, const vector<Value> &, size_t &)";
    char v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Not enough values to parse value of type %s", "Vec4i");
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &unk_26C7552B8;
    __cxa_throw(exception, (struct type_info *)&unk_26C755290, (void (*)(void *))std::exception::~exception);
  }
  *a3 = v3 + 1;
  *a1 = sub_2169ABE74(v4 + 56 * v3);
  uint64_t v8 = (*a3)++;
  a1[1] = sub_2169ABE74(*a2 + 56 * v8);
  uint64_t v9 = (*a3)++;
  a1[2] = sub_2169ABE74(*a2 + 56 * v9);
  uint64_t v10 = (*a3)++;
  uint64_t result = sub_2169ABE74(*a2 + 56 * v10);
  a1[3] = result;
  return result;
}

uint64_t *sub_2169BD220(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 16), 1u, memory_order_relaxed);
  }
  return result;
}

void sub_2169BD23C(atomic_uint **a1)
{
  uint64_t v1 = *a1;
  if (v1)
  {
    if (atomic_fetch_add_explicit(v1 + 4, 0xFFFFFFFF, memory_order_release) == 1)
    {
      __dmb(9u);
      operator delete(v1);
    }
  }
}

void *sub_2169BD264(void *result, void *a2)
{
  *a2 = *result;
  unsigned int *result = 0;
  return result;
}

uint64_t sub_2169BD274()
{
  return 1;
}

unint64_t sub_2169BD27C(int **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = *a1 + 1;
  uint64_t v3 = *a1 + 2;
  uint64_t v4 = *a1 + 3;
  uint64_t v6 = 0;
  char v7 = 0;
  sub_2169BD49C((uint64_t)&v6, v1, v2, v3, v4);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v6));
}

BOOL sub_2169BD2DC(void *a1, void *a2)
{
  uint64_t v2 = (_DWORD *)*a1;
  uint64_t v3 = (_DWORD *)*a2;
  return *(_DWORD *)*a1 == *(_DWORD *)*a2 && v2[1] == v3[1] && v2[2] == v3[2] && v2[3] == v3[3];
}

BOOL sub_2169BD330(void *a1, _DWORD *a2)
{
  uint64_t v2 = (_DWORD *)*a1;
  return *(_DWORD *)*a1 == *a2 && v2[1] == a2[1] && v2[2] == a2[2] && v2[3] == a2[3];
}

uint64_t sub_2169BD384()
{
  return 0;
}

void *sub_2169BD390(uint64_t a1, void *a2)
{
  return pxrInternal__aapl__pxrReserved__::operator<<(a2);
}

void *sub_2169BD3A0()
{
  return &unk_26C74C7A0;
}

uint64_t sub_2169BD3AC()
{
  return 0;
}

uint64_t sub_2169BD3B4()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_2169BD3C0()
{
  return 0;
}

uint64_t sub_2169BD3C8()
{
  return 0;
}

BOOL sub_2169BD3D0(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x80000002174E4516 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2169BD40C(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C7A0, a2, a3);
}

void *sub_2169BD430()
{
  return &unk_26C74C7A0;
}

uint64_t sub_2169BD43C(uint64_t a1)
{
  return *(void *)a1;
}

unsigned int *sub_2169BD444@<X0>(_OWORD **a1@<X0>, unsigned int **a2@<X8>)
{
  uint64_t v3 = *a1;
  a2[1] = (unsigned int *)((char *)&off_26C7560C0 + 2);
  uint64_t result = (unsigned int *)operator new(0x14uLL);
  *(_OWORD *)uint64_t result = *v3;
  atomic_store(0, result + 4);
  *a2 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 4, 1u, memory_order_relaxed);
  return result;
}

uint64_t sub_2169BD49C(uint64_t a1, int *a2, int *a3, int *a4, int *a5)
{
  uint64_t v5 = *a2;
  if (*(unsigned char *)(a1 + 8)) {
    v5 += (unint64_t)(*(void *)a1 + v5 + (*(void *)a1 + v5) * (*(void *)a1 + v5)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v5;
  return sub_2169BB374(a1, a3, a4, a5);
}

uint64_t sub_2169BD4D8(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v5[0] = 0;
  v5[1] = 0;
  sub_2168F845C((void *)a1);
  uint64_t v6 = v5;
  sub_2169BDAC4((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_2169BD534(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2169BD54C(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    void v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal"
            "__aapl__pxrReserved__::GfVec4i>>::operator*() [T = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aa"
            "pl__pxrReserved__::GfVec4i>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_2169BD5C4()
{
}

void *sub_2169BD5CC(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArr"
            "ay<pxrInternal__aapl__pxrReserved__::GfVec4i>>::operator++() [T = pxrInternal__aapl__pxrReserved__::VtArray<"
            "pxrInternal__aapl__pxrReserved__::GfVec4i>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 16;
  }
  return a1;
}

uint64_t *sub_2169BD64C(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

atomic_uint **sub_2169BD66C(atomic_uint **a1, atomic_uint **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2169BD7E4(a1);
}

uint64_t sub_2169BD67C()
{
  return 1;
}

unint64_t sub_2169BD684(uint64_t **a1)
{
  return sub_2169BD83C((uint64_t)&v2, *a1);
}

BOOL sub_2169BD6AC(void **a1, uint64_t *a2)
{
  return sub_2169BD93C(*a1, *a2);
}

BOOL sub_2169BD6B8(void **a1, uint64_t a2)
{
  return sub_2169BD93C(*a1, a2);
}

uint64_t sub_2169BD6C4()
{
  return 0;
}

void *sub_2169BD6D0(uint64_t **a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, void *))sub_2169BDAAC);
  return a2;
}

void *sub_2169BD724()
{
  return &unk_26C74DE48;
}

uint64_t sub_2169BD730()
{
  return 1;
}

void *sub_2169BD738()
{
  return &unk_26C74C7A0;
}

uint64_t sub_2169BD744(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_2169BD74C(uint64_t a1)
{
  return **(void **)a1;
}

BOOL sub_2169BD758(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x80000002174E5392 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2169BD794(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74DE48, a2, a3);
}

void *sub_2169BD7B8()
{
  return &unk_26C74DE48;
}

uint64_t sub_2169BD7C4(uint64_t a1)
{
  return *(void *)a1;
}

void *sub_2169BD7CC@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  a2[1] = off_26C756178;
  return sub_2168F8DBC(a2, v2);
}

atomic_uint **sub_2169BD7E4(atomic_uint **a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit(v2 + 10, 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_2168F83DC((uint64_t)v2);
    operator delete(v2);
  }
  return a1;
}

unint64_t sub_2169BD83C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  char v8 = 1;
  uint64_t v7 = v2;
  if (v2)
  {
    uint64_t v3 = (int *)a2[4];
    do
    {
      --v2;
      char v4 = v3 + 4;
      sub_2169BD8B4((uint64_t)&v7, v3);
      uint64_t v3 = v4;
    }
    while (v2);
    unint64_t v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    unint64_t v5 = 0;
  }
  return bswap64(v5);
}

uint64_t sub_2169BD8B4(uint64_t a1, int *a2)
{
  uint64_t v5 = 0;
  char v6 = 0;
  uint64_t result = sub_2169BD49C((uint64_t)&v5, a2, a2 + 1, a2 + 2, a2 + 3);
  unint64_t v4 = bswap64(0x9E3779B97F4A7C55 * v5);
  if (*(unsigned char *)(a1 + 8)) {
    v4 += (*(void *)a1 + v4 + (*(void *)a1 + v4) * (*(void *)a1 + v4)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v4;
  return result;
}

BOOL sub_2169BD93C(void *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32) && sub_2168F8C2C((uint64_t)a1, a2) && a1[3] == *(void *)(a2 + 24)) {
    return 1;
  }
  BOOL result = sub_2168F8C2C((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  if (!*a1) {
    return 1;
  }
  uint64_t v5 = (_DWORD *)a1[4];
  char v6 = &v5[4 * *a1];
  for (uint64_t i = *(_DWORD **)(a2 + 32); *v5 == *i && v5[1] == i[1] && v5[2] == i[2] && v5[3] == i[3]; i += 4)
  {
    v5 += 4;
    if (v5 == v6) {
      return 1;
    }
  }
  return 0;
}

uint64_t sub_2169BDA10(_OWORD **a1)
{
  unsigned int v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    uint64_t v3 = operator new(0x30uLL);
    unint64_t v4 = *a1;
    long long v5 = (*a1)[1];
    *(_OWORD *)uint64_t v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    uint64_t v6 = *((void *)v4 + 4);
    *((void *)v3 + 4) = v6;
    if (v6)
    {
      uint64_t v7 = (atomic_ullong *)*((void *)v3 + 3);
      char v8 = (atomic_ullong *)(v6 - 16);
      if (!v7) {
        uint64_t v7 = v8;
      }
      atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
      unint64_t v4 = *a1;
    }
    atomic_store(0, (unsigned int *)v3 + 10);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 10, 1u, memory_order_relaxed);
    uint64_t v10 = (atomic_uint *)v4;
    *a1 = v3;
    sub_2169BD7E4(&v10);
  }
  return (uint64_t)*a1;
}

void *sub_2169BDAAC(void *a1, void *a2)
{
  *a1 += 16;
  return pxrInternal__aapl__pxrReserved__::operator<<(a2);
}

void sub_2169BDAC4(unint64_t *a1, unint64_t a2, _OWORD **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    uint64_t v7 = (unint64_t *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              uint64_t v10 = sub_2169BDC8C((uint64_t)a1, a2);
              uint64_t v7 = v10;
              if (v3)
              {
                uint64_t v11 = 0;
                do
                {
                  *(_OWORD *)&v10[v11] = *(_OWORD *)(v9 + v11 * 8);
                  v11 += 2;
                }
                while (2 * v3 != v11);
              }
            }
            uint64_t v12 = *a3;
            uint64_t v13 = 2 * v3;
            do
            {
              *(_OWORD *)&v7[v13] = *v12;
              v13 += 2;
            }
            while (2 * a2 != v13);
          }
          uint64_t v14 = v7;
          goto LABEL_31;
        }
        uint64_t v7 = (unint64_t *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v19 = a2;
      }
      else {
        unint64_t v19 = *a1;
      }
      uint64_t v20 = sub_2169BDC8C((uint64_t)a1, a2);
      uint64_t v14 = v20;
      if (v19)
      {
        uint64_t v21 = 16 * v19;
        int v22 = v20;
        do
        {
          long long v23 = *(_OWORD *)v7;
          v7 += 2;
          *(_OWORD *)int v22 = v23;
          v22 += 2;
          v21 -= 16;
        }
        while (v21);
      }
      if (v3 < a2)
      {
        unint64_t v24 = *a3;
        uint64_t v25 = 2 * v3;
        do
        {
          *(_OWORD *)&v20[v25] = *v24;
          v25 += 2;
        }
        while (2 * a2 != v25);
      }
      goto LABEL_31;
    }
    uint64_t v15 = 16 * a2;
    if (16 * a2 / a2 == 16)
    {
      uint64_t v16 = sub_2169BDC8C((uint64_t)a1, a2);
      uint64_t v14 = v16;
      unint64_t v17 = 0;
      uint64_t v18 = *a3;
      do
      {
        *(_OWORD *)&v16[v17 / 8] = *v18;
        v17 += 16;
      }
      while (v15 != v17);
LABEL_31:
      if (v14 != (unint64_t *)a1[4])
      {
        sub_2168F83DC((uint64_t)a1);
        a1[4] = (unint64_t)v14;
      }
      *a1 = a2;
      return;
    }
  }

  sub_2168F845C(a1);
}

void *sub_2169BDC8C(uint64_t a1, unint64_t a2)
{
  sub_216851EE4((uint64_t)&v7, "VtArray::_AllocateNew", "value_type *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>::_AllocateNew(size_t) [T = pxrInternal__aapl__pxrReserved__::GfVec4i]");
  if (a2 > 0xFFFFFFFFFFFFFFELL) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 16 * a2 + 16;
  }
  unint64_t v4 = operator new(v3);
  void *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_2169BDD10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2169BDD28(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    if (*((void *)this + 3) || (unint64_t v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec4i]", a3);
      uint64_t v6 = (long long *)*((void *)this + 4);
      uint64_t v7 = *(void *)this;
      int v8 = sub_2169BDC8C((uint64_t)this, *(void *)this);
      unint64_t v9 = v8;
      if (v7)
      {
        uint64_t v10 = 16 * v7;
        uint64_t v11 = v8;
        do
        {
          long long v12 = *v6++;
          *v11++ = v12;
          v10 -= 16;
        }
        while (v10);
      }
      sub_2168F83DC((uint64_t)this);
      *((void *)this + 4) = v9;
    }
  }
}

uint64_t sub_2169BDDC0@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  uint64_t result = sub_2169BE08C(&v5, a1, a2);
  *a3 = v5;
  a3[1] = (char *)&off_26C74E700 + 3;
  return result;
}

void sub_2169BDE94(void *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = a1[1];
  if (*a1 == v5)
  {
    uint64_t v21 = 0;
    memset(v20, 0, sizeof(v20));
    a4[1] = off_26C74F3F0;
    sub_2168F8DBC(a4, (uint64_t)v20);
    sub_2168F83DC((uint64_t)v20);
  }
  else
  {
    *(void *)&v20[0] = *a1;
    *((void *)&v20[0] + 1) = v5;
    LODWORD(v8) = 1;
    do
    {
      unint64_t v8 = (*(_DWORD *)sub_216999AD4((uint64_t *)v20, (uint64_t)a2, a3) * v8);
      sub_216999B54(v20);
    }
    while (*(void *)&v20[0] != *((void *)&v20[0] + 1));
    sub_216900518((uint64_t)v20, v8);
    sub_2169008D4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v9, v10);
    uint64_t v11 = v21;
    sub_2169008D4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v12, v13);
    uint64_t v16 = 0;
    uint64_t v18 = v11;
    uint64_t v19 = v21 + 8 * *(void *)&v20[0];
    while (v18 != v19)
    {
      unint64_t v17 = (_WORD *)sub_2169BE320(&v18, v14, v15);
      sub_2169BE08C(v17, a2, (uint64_t *)a3);
      ++v16;
      sub_2169BE3A0(&v18);
    }
    a4[1] = off_26C74F3F0;
    sub_2168F8DBC(a4, (uint64_t)v20);
    sub_2168F83DC((uint64_t)v20);
  }
}

void sub_2169BDFD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2169BE004(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, long long a12, uint64_t a13)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to parse at element %zd (at sub-part %zd if there are multiple parts)", v15, v16);
    if (*(char *)(v14 + 23) < 0) {
      operator delete(*(void **)v14);
    }
    *(_OWORD *)uint64_t v14 = a12;
    *(void *)(v14 + 16) = a13;
    *(void *)(v13 + 8) = 0;
    __cxa_end_catch();
    JUMPOUT(0x2169BDF7CLL);
  }
  JUMPOUT(0x2169BDFECLL);
}

void sub_2169BE07C()
{
}

uint64_t sub_2169BE08C(_WORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = *a2;
  if (*a3 + 4 > (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3)))
  {
    uint64_t v19 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", 47);
    v21[0] = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", (uint64_t)v19, 0x2Fu);
    v21[1] = "MakeScalarValueImpl";
    v21[2] = 198;
    _OWORD v21[3] = "void pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeScalarValueImpl(GfVec4h *, const vector<Value> &, size_t &)";
    char v22 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v21, 1, (pxrInternal__aapl__pxrReserved__ *)"Not enough values to parse value of type %s", "Vec4h");
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &unk_26C7552B8;
    __cxa_throw(exception, (struct type_info *)&unk_26C755290, (void (*)(void *))std::exception::~exception);
  }
  *a3 = v3 + 1;
  sub_2169AF53C(v4 + 56 * v3);
  if (v8 == 0.0)
  {
    unsigned int v9 = HIWORD(LODWORD(v8));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v8) >> 23])
  {
    unsigned int v9 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v8) >> 23]
       + (((LODWORD(v8) & 0x7FFFFF) + ((LODWORD(v8) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v9) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v8));
  }
  *a1 = v9;
  uint64_t v10 = (*a3)++;
  sub_2169AF53C(*a2 + 56 * v10);
  if (v11 == 0.0)
  {
    unsigned int v12 = HIWORD(LODWORD(v11));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v11) >> 23])
  {
    unsigned int v12 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v11) >> 23]
        + (((LODWORD(v11) & 0x7FFFFF) + ((LODWORD(v11) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v12) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v11));
  }
  a1[1] = v12;
  uint64_t v13 = (*a3)++;
  sub_2169AF53C(*a2 + 56 * v13);
  if (v14 == 0.0)
  {
    unsigned int v15 = HIWORD(LODWORD(v14));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v14) >> 23])
  {
    unsigned int v15 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v14) >> 23]
        + (((LODWORD(v14) & 0x7FFFFF) + ((LODWORD(v14) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v15) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v14));
  }
  a1[2] = v15;
  uint64_t v16 = (*a3)++;
  sub_2169AF53C(*a2 + 56 * v16);
  if (v17 == 0.0)
  {
    uint64_t result = HIWORD(LODWORD(v17));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v17) >> 23])
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v17) >> 23]
           + (((LODWORD(v17) & 0x7FFFFF) + ((LODWORD(v17) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v17));
  }
  a1[3] = result;
  return result;
}

uint64_t sub_2169BE320(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    void v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal"
            "__aapl__pxrReserved__::GfVec4h>>::operator*() [T = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aa"
            "pl__pxrReserved__::GfVec4h>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_2169BE398()
{
}

void *sub_2169BE3A0(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArr"
            "ay<pxrInternal__aapl__pxrReserved__::GfVec4h>>::operator++() [T = pxrInternal__aapl__pxrReserved__::VtArray<"
            "pxrInternal__aapl__pxrReserved__::GfVec4h>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

unsigned int *sub_2169BE420@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, unsigned int **a3@<X8>)
{
  sub_2169BE70C(&v5, a1, a2);
  a3[1] = (unsigned int *)((char *)&off_26C74E7B8 + 2);
  uint64_t result = (unsigned int *)operator new(0x14uLL);
  *(_OWORD *)uint64_t result = v5;
  atomic_store(0, result + 4);
  *a3 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 4, 1u, memory_order_relaxed);
  return result;
}

void sub_2169BE514(void *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = a1[1];
  if (*a1 == v5)
  {
    uint64_t v21 = 0;
    memset(v20, 0, sizeof(v20));
    a4[1] = off_26C74F338;
    sub_2168F8DBC(a4, (uint64_t)v20);
    sub_2168F83DC((uint64_t)v20);
  }
  else
  {
    *(void *)&v20[0] = *a1;
    *((void *)&v20[0] + 1) = v5;
    LODWORD(v8) = 1;
    do
    {
      unint64_t v8 = (*(_DWORD *)sub_216999AD4((uint64_t *)v20, (uint64_t)a2, a3) * v8);
      sub_216999B54(v20);
    }
    while (*(void *)&v20[0] != *((void *)&v20[0] + 1));
    sub_2168FF930((uint64_t)v20, v8);
    sub_2168FFD20((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v9, v10);
    uint64_t v11 = v21;
    sub_2168FFD20((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v12, v13);
    uint64_t v16 = 0;
    uint64_t v18 = v11;
    uint64_t v19 = v21 + 16 * *(void *)&v20[0];
    while (v18 != v19)
    {
      float v17 = (_DWORD *)sub_2169BE884(&v18, v14, v15);
      sub_2169BE70C(v17, a2, (uint64_t *)a3);
      ++v16;
      sub_2169BE904(&v18);
    }
    a4[1] = off_26C74F338;
    sub_2168F8DBC(a4, (uint64_t)v20);
    sub_2168F83DC((uint64_t)v20);
  }
}

void sub_2169BE654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2169BE684(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, long long a12, uint64_t a13)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to parse at element %zd (at sub-part %zd if there are multiple parts)", v15, v16);
    if (*(char *)(v14 + 23) < 0) {
      operator delete(*(void **)v14);
    }
    *(_OWORD *)uint64_t v14 = a12;
    *(void *)(v14 + 16) = a13;
    *(void *)(v13 + 8) = 0;
    __cxa_end_catch();
    JUMPOUT(0x2169BE5FCLL);
  }
  JUMPOUT(0x2169BE66CLL);
}

void sub_2169BE6FC()
{
}

uint64_t sub_2169BE70C(_DWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = *a2;
  if (*a3 + 4 > (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3)))
  {
    uint64_t v16 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", 47);
    v18[0] = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", (uint64_t)v16, 0x2Fu);
    v18[1] = "MakeScalarValueImpl";
    v18[2] = 189;
    void v18[3] = "void pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeScalarValueImpl(GfVec4f *, const vector<Value> &, size_t &)";
    char v19 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Not enough values to parse value of type %s", "Vec4f");
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &unk_26C7552B8;
    __cxa_throw(exception, (struct type_info *)&unk_26C755290, (void (*)(void *))std::exception::~exception);
  }
  *a3 = v3 + 1;
  sub_2169AF53C(v4 + 56 * v3);
  *a1 = v8;
  uint64_t v9 = (*a3)++;
  sub_2169AF53C(*a2 + 56 * v9);
  a1[1] = v10;
  uint64_t v11 = (*a3)++;
  sub_2169AF53C(*a2 + 56 * v11);
  a1[2] = v12;
  uint64_t v13 = (*a3)++;
  uint64_t result = sub_2169AF53C(*a2 + 56 * v13);
  a1[3] = v15;
  return result;
}

uint64_t sub_2169BE884(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    void v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal"
            "__aapl__pxrReserved__::GfVec4f>>::operator*() [T = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aa"
            "pl__pxrReserved__::GfVec4f>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_2169BE8FC()
{
}

void *sub_2169BE904(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArr"
            "ay<pxrInternal__aapl__pxrReserved__::GfVec4f>>::operator++() [T = pxrInternal__aapl__pxrReserved__::VtArray<"
            "pxrInternal__aapl__pxrReserved__::GfVec4f>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 16;
  }
  return a1;
}

void *sub_2169BE984@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  sub_2169BEC70(v6, a1, a2);
  a3[1] = (char *)&off_26C74E870 + 2;
  uint64_t result = operator new(0x28uLL);
  long long v5 = v6[1];
  *(_OWORD *)uint64_t result = v6[0];
  *((_OWORD *)result + 1) = v5;
  atomic_store(0, (unsigned int *)result + 8);
  *a3 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 8, 1u, memory_order_relaxed);
  return result;
}

void sub_2169BEA78(void *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = a1[1];
  if (*a1 == v5)
  {
    uint64_t v21 = 0;
    memset(v20, 0, sizeof(v20));
    a4[1] = off_26C74F4A8;
    sub_2168F8DBC(a4, (uint64_t)v20);
    sub_2168F83DC((uint64_t)v20);
  }
  else
  {
    *(void *)&v20[0] = *a1;
    *((void *)&v20[0] + 1) = v5;
    LODWORD(v8) = 1;
    do
    {
      unint64_t v8 = (*(_DWORD *)sub_216999AD4((uint64_t *)v20, (uint64_t)a2, a3) * v8);
      sub_216999B54(v20);
    }
    while (*(void *)&v20[0] != *((void *)&v20[0] + 1));
    sub_216901170((uint64_t)v20, v8);
    sub_2169014A0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v9, v10);
    uint64_t v11 = v21;
    sub_2169014A0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v12, v13);
    uint64_t v16 = 0;
    uint64_t v18 = v11;
    uint64_t v19 = v21 + 32 * *(void *)&v20[0];
    while (v18 != v19)
    {
      float v17 = (void *)sub_2169BEDE8(&v18, v14, v15);
      sub_2169BEC70(v17, a2, (uint64_t *)a3);
      ++v16;
      sub_2169BEE68(&v18);
    }
    a4[1] = off_26C74F4A8;
    sub_2168F8DBC(a4, (uint64_t)v20);
    sub_2168F83DC((uint64_t)v20);
  }
}

void sub_2169BEBB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2169BEBE8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, long long a12, uint64_t a13)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to parse at element %zd (at sub-part %zd if there are multiple parts)", v15, v16);
    if (*(char *)(v14 + 23) < 0) {
      operator delete(*(void **)v14);
    }
    *(_OWORD *)uint64_t v14 = a12;
    *(void *)(v14 + 16) = a13;
    *(void *)(v13 + 8) = 0;
    __cxa_end_catch();
    JUMPOUT(0x2169BEB60);
  }
  JUMPOUT(0x2169BEBD0);
}

void sub_2169BEC60()
{
}

uint64_t sub_2169BEC70(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = *a2;
  if (*a3 + 4 > (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3)))
  {
    uint64_t v16 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", 47);
    v18[0] = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", (uint64_t)v16, 0x2Fu);
    v18[1] = "MakeScalarValueImpl";
    v18[2] = 180;
    void v18[3] = "void pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeScalarValueImpl(GfVec4d *, const vector<Value> &, size_t &)";
    char v19 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Not enough values to parse value of type %s", "Vec4d");
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &unk_26C7552B8;
    __cxa_throw(exception, (struct type_info *)&unk_26C755290, (void (*)(void *))std::exception::~exception);
  }
  *a3 = v3 + 1;
  sub_2169B0370(v4 + 56 * v3);
  *a1 = v8;
  uint64_t v9 = (*a3)++;
  sub_2169B0370(*a2 + 56 * v9);
  a1[1] = v10;
  uint64_t v11 = (*a3)++;
  sub_2169B0370(*a2 + 56 * v11);
  a1[2] = v12;
  uint64_t v13 = (*a3)++;
  uint64_t result = sub_2169B0370(*a2 + 56 * v13);
  a1[3] = v15;
  return result;
}

uint64_t sub_2169BEDE8(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    void v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal"
            "__aapl__pxrReserved__::GfVec4d>>::operator*() [T = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aa"
            "pl__pxrReserved__::GfVec4d>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_2169BEE60()
{
}

void *sub_2169BEE68(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArr"
            "ay<pxrInternal__aapl__pxrReserved__::GfVec4d>>::operator++() [T = pxrInternal__aapl__pxrReserved__::VtArray<"
            "pxrInternal__aapl__pxrReserved__::GfVec4d>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 32;
  }
  return a1;
}

uint64_t sub_2169BEEE8@<X0>(uint64_t *a1@<X1>, unint64_t *a2@<X2>, void *a3@<X8>)
{
  uint64_t result = sub_2169BF1B4((uint64_t)&v5, a1, a2);
  *a3 = v5;
  a3[1] = (char *)&off_26C74EB50 + 1;
  return result;
}

void sub_2169BEFBC(void *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = a1[1];
  if (*a1 == v5)
  {
    uint64_t v21 = 0;
    memset(v20, 0, sizeof(v20));
    a4[1] = off_26C74F788;
    sub_2168F8DBC(a4, (uint64_t)v20);
    sub_2168F83DC((uint64_t)v20);
  }
  else
  {
    *(void *)&v20[0] = *a1;
    *((void *)&v20[0] + 1) = v5;
    LODWORD(v8) = 1;
    do
    {
      unint64_t v8 = (*(_DWORD *)sub_216999AD4((uint64_t *)v20, (uint64_t)a2, a3) * v8);
      sub_216999B54(v20);
    }
    while (*(void *)&v20[0] != *((void *)&v20[0] + 1));
    sub_2169046B8((uint64_t)v20, v8);
    sub_216904A70((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v9, v10);
    uint64_t v11 = v21;
    sub_216904A70((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v12, v13);
    uint64_t v16 = 0;
    uint64_t v18 = v11;
    uint64_t v19 = v21 + 8 * *(void *)&v20[0];
    while (v18 != v19)
    {
      uint64_t v17 = sub_2169BF2F0(&v18, v14, v15);
      sub_2169BF1B4(v17, a2, (unint64_t *)a3);
      ++v16;
      sub_2169BF370(&v18);
    }
    a4[1] = off_26C74F788;
    sub_2168F8DBC(a4, (uint64_t)v20);
    sub_2168F83DC((uint64_t)v20);
  }
}

void sub_2169BF0FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2169BF12C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, long long a12, uint64_t a13)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to parse at element %zd (at sub-part %zd if there are multiple parts)", v15, v16);
    if (*(char *)(v14 + 23) < 0) {
      operator delete(*(void **)v14);
    }
    *(_OWORD *)uint64_t v14 = a12;
    *(void *)(v14 + 16) = a13;
    *(void *)(v13 + 8) = 0;
    __cxa_end_catch();
    JUMPOUT(0x2169BF0A4);
  }
  JUMPOUT(0x2169BF114);
}

void sub_2169BF1A4()
{
}

uint64_t sub_2169BF1B4(uint64_t a1, uint64_t *a2, unint64_t *a3)
{
  if (*a3 + 4 > 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3))
  {
    int v7 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", 47);
    v10[0] = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", (uint64_t)v7, 0x2Fu);
    v10[1] = "MakeScalarValueImpl";
    void v10[2] = 282;
    void v10[3] = "void pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeScalarValueImpl(GfQuath *, const vector<Value> &, size_t &)";
    char v11 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Not enough values to parse value of type %s", "Quath");
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &unk_26C7552B8;
    __cxa_throw(exception, (struct type_info *)&unk_26C755290, (void (*)(void *))std::exception::~exception);
  }
  sub_2169AF3E8(&v9, a2, a3);
  *(_WORD *)(a1 + 6) = v9;
  uint64_t result = sub_2169BBFE4(v10, a2, (uint64_t *)a3);
  *(_DWORD *)a1 = v10[0];
  *(_WORD *)(a1 + 4) = WORD2(v10[0]);
  return result;
}

uint64_t sub_2169BF2F0(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    void v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal"
            "__aapl__pxrReserved__::GfQuath>>::operator*() [T = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aa"
            "pl__pxrReserved__::GfQuath>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_2169BF368()
{
}

void *sub_2169BF370(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArr"
            "ay<pxrInternal__aapl__pxrReserved__::GfQuath>>::operator++() [T = pxrInternal__aapl__pxrReserved__::VtArray<"
            "pxrInternal__aapl__pxrReserved__::GfQuath>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

unsigned int *sub_2169BF3F0@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, unsigned int **a3@<X8>)
{
  sub_2169BF6D8((uint64_t)&v5, a1, a2);
  a3[1] = (unsigned int *)&off_26C74EA98;
  uint64_t result = (unsigned int *)operator new(0x14uLL);
  *(_OWORD *)uint64_t result = v5;
  atomic_store(0, result + 4);
  *a3 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 4, 1u, memory_order_relaxed);
  return result;
}

void sub_2169BF4E0(void *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = a1[1];
  if (*a1 == v5)
  {
    uint64_t v21 = 0;
    memset(v20, 0, sizeof(v20));
    a4[1] = off_26C74F6D0;
    sub_2168F8DBC(a4, (uint64_t)v20);
    sub_2168F83DC((uint64_t)v20);
  }
  else
  {
    *(void *)&v20[0] = *a1;
    *((void *)&v20[0] + 1) = v5;
    LODWORD(v8) = 1;
    do
    {
      unint64_t v8 = (*(_DWORD *)sub_216999AD4((uint64_t *)v20, (uint64_t)a2, a3) * v8);
      sub_216999B54(v20);
    }
    while (*(void *)&v20[0] != *((void *)&v20[0] + 1));
    sub_216903AC8((uint64_t)v20, v8);
    sub_216903EB4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v9, v10);
    uint64_t v11 = v21;
    sub_216903EB4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v12, v13);
    uint64_t v16 = 0;
    uint64_t v18 = v11;
    uint64_t v19 = v21 + 16 * *(void *)&v20[0];
    while (v18 != v19)
    {
      uint64_t v17 = sub_2169BF874(&v18, v14, v15);
      sub_2169BF6D8(v17, a2, (uint64_t *)a3);
      ++v16;
      sub_2169BF8F4(&v18);
    }
    a4[1] = off_26C74F6D0;
    sub_2168F8DBC(a4, (uint64_t)v20);
    sub_2168F83DC((uint64_t)v20);
  }
}

void sub_2169BF620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2169BF650(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, long long a12, uint64_t a13)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to parse at element %zd (at sub-part %zd if there are multiple parts)", v15, v16);
    if (*(char *)(v14 + 23) < 0) {
      operator delete(*(void **)v14);
    }
    *(_OWORD *)uint64_t v14 = a12;
    *(void *)(v14 + 16) = a13;
    *(void *)(v13 + 8) = 0;
    __cxa_end_catch();
    JUMPOUT(0x2169BF5C8);
  }
  JUMPOUT(0x2169BF638);
}

void sub_2169BF6C8()
{
}

uint64_t sub_2169BF6D8(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = *a2;
  unint64_t v5 = 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3);
  if (*a3 + 4 > v5)
  {
    uint64_t v11 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", 47);
    unint64_t v15 = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", (uint64_t)v11, 0x2Fu);
    uint64_t v16 = "MakeScalarValueImpl";
    uint64_t v17 = 271;
    uint64_t v18 = "void pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeScalarValueImpl(GfQuatf *, const vector<Value> &, size_t &)";
    char v19 = 0;
    uint64_t v12 = "Quatf";
    goto LABEL_6;
  }
  if (v3 + 1 > v5)
  {
    uint64_t v13 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", 47);
    unint64_t v15 = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", (uint64_t)v13, 0x2Fu);
    uint64_t v16 = "MakeScalarValueImpl";
    uint64_t v17 = 93;
    uint64_t v18 = "void pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeScalarValueImpl(float *, const vector<Value> &, size_t &)";
    char v19 = 0;
    uint64_t v12 = "float";
LABEL_6:
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 1, (pxrInternal__aapl__pxrReserved__ *)"Not enough values to parse value of type %s", v12);
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &unk_26C7552B8;
    __cxa_throw(exception, (struct type_info *)&unk_26C755290, (void (*)(void *))std::exception::~exception);
  }
  *a3 = v3 + 1;
  sub_2169AF53C(v4 + 56 * v3);
  *(_DWORD *)(a1 + 12) = v9;
  uint64_t result = sub_2169BC60C(&v15, a2, a3);
  *(void *)a1 = v15;
  *(_DWORD *)(a1 + 8) = v16;
  return result;
}

uint64_t sub_2169BF874(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    void v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal"
            "__aapl__pxrReserved__::GfQuatf>>::operator*() [T = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aa"
            "pl__pxrReserved__::GfQuatf>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_2169BF8EC()
{
}

void *sub_2169BF8F4(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArr"
            "ay<pxrInternal__aapl__pxrReserved__::GfQuatf>>::operator++() [T = pxrInternal__aapl__pxrReserved__::VtArray<"
            "pxrInternal__aapl__pxrReserved__::GfQuatf>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 16;
  }
  return a1;
}

void *sub_2169BF974@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  sub_2169BFC5C((uint64_t)v6, a1, a2);
  a3[1] = &off_26C74EC08;
  uint64_t result = operator new(0x28uLL);
  long long v5 = v6[1];
  *(_OWORD *)uint64_t result = v6[0];
  *((_OWORD *)result + 1) = v5;
  atomic_store(0, (unsigned int *)result + 8);
  *a3 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 8, 1u, memory_order_relaxed);
  return result;
}

void sub_2169BFA64(void *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = a1[1];
  if (*a1 == v5)
  {
    uint64_t v21 = 0;
    memset(v20, 0, sizeof(v20));
    a4[1] = off_26C74F840;
    sub_2168F8DBC(a4, (uint64_t)v20);
    sub_2168F83DC((uint64_t)v20);
  }
  else
  {
    *(void *)&v20[0] = *a1;
    *((void *)&v20[0] + 1) = v5;
    LODWORD(v8) = 1;
    do
    {
      unint64_t v8 = (*(_DWORD *)sub_216999AD4((uint64_t *)v20, (uint64_t)a2, a3) * v8);
      sub_216999B54(v20);
    }
    while (*(void *)&v20[0] != *((void *)&v20[0] + 1));
    sub_216905300((uint64_t)v20, v8);
    sub_21690562C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v9, v10);
    uint64_t v11 = v21;
    sub_21690562C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v12, v13);
    uint64_t v16 = 0;
    uint64_t v18 = v11;
    uint64_t v19 = v21 + 32 * *(void *)&v20[0];
    while (v18 != v19)
    {
      uint64_t v17 = sub_2169BFDF8(&v18, v14, v15);
      sub_2169BFC5C(v17, a2, (uint64_t *)a3);
      ++v16;
      sub_2169BFE78(&v18);
    }
    a4[1] = off_26C74F840;
    sub_2168F8DBC(a4, (uint64_t)v20);
    sub_2168F83DC((uint64_t)v20);
  }
}

void sub_2169BFBA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2169BFBD4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, long long a12, uint64_t a13)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to parse at element %zd (at sub-part %zd if there are multiple parts)", v15, v16);
    if (*(char *)(v14 + 23) < 0) {
      operator delete(*(void **)v14);
    }
    *(_OWORD *)uint64_t v14 = a12;
    *(void *)(v14 + 16) = a13;
    *(void *)(v13 + 8) = 0;
    __cxa_end_catch();
    JUMPOUT(0x2169BFB4CLL);
  }
  JUMPOUT(0x2169BFBBCLL);
}

void sub_2169BFC4C()
{
}

double sub_2169BFC5C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = *a2;
  unint64_t v5 = 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3);
  if (*a3 + 4 > v5)
  {
    uint64_t v11 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", 47);
    *(void *)&long long v15 = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", (uint64_t)v11, 0x2Fu);
    *((void *)&v15 + 1) = "MakeScalarValueImpl";
    uint64_t v16 = 260;
    uint64_t v17 = "void pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeScalarValueImpl(GfQuatd *, const vector<Value> &, size_t &)";
    char v18 = 0;
    uint64_t v12 = "Quatd";
    goto LABEL_6;
  }
  if (v3 + 1 > v5)
  {
    uint64_t v13 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", 47);
    *(void *)&long long v15 = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", (uint64_t)v13, 0x2Fu);
    *((void *)&v15 + 1) = "MakeScalarValueImpl";
    uint64_t v16 = 87;
    uint64_t v17 = "void pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeScalarValueImpl(double *, const vector<Value> &, size_t &)";
    char v18 = 0;
    uint64_t v12 = "double";
LABEL_6:
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 1, (pxrInternal__aapl__pxrReserved__ *)"Not enough values to parse value of type %s", v12);
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &unk_26C7552B8;
    __cxa_throw(exception, (struct type_info *)&unk_26C755290, (void (*)(void *))std::exception::~exception);
  }
  *a3 = v3 + 1;
  sub_2169B0370(v4 + 56 * v3);
  *(void *)(a1 + 24) = v9;
  sub_2169BCB60(&v15, a2, a3);
  double result = *(double *)&v15;
  *(_OWORD *)a1 = v15;
  *(void *)(a1 + 16) = v16;
  return result;
}

uint64_t sub_2169BFDF8(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    void v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal"
            "__aapl__pxrReserved__::GfQuatd>>::operator*() [T = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aa"
            "pl__pxrReserved__::GfQuatd>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_2169BFE70()
{
}

void *sub_2169BFE78(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArr"
            "ay<pxrInternal__aapl__pxrReserved__::GfQuatd>>::operator++() [T = pxrInternal__aapl__pxrReserved__::VtArray<"
            "pxrInternal__aapl__pxrReserved__::GfQuatd>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 32;
  }
  return a1;
}

void *sub_2169BFEF8@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  sub_2169C01E4(v6, a1, a2);
  a3[1] = (char *)&off_26C7526A0 + 2;
  uint64_t result = operator new(0x28uLL);
  long long v5 = v6[1];
  *(_OWORD *)uint64_t result = v6[0];
  *((_OWORD *)result + 1) = v5;
  atomic_store(0, (unsigned int *)result + 8);
  *a3 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 8, 1u, memory_order_relaxed);
  return result;
}

void sub_2169BFFEC(void *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = a1[1];
  if (*a1 == v5)
  {
    uint64_t v21 = 0;
    memset(v20, 0, sizeof(v20));
    a4[1] = off_26C756230;
    sub_2168F8DBC(a4, (uint64_t)v20);
    sub_2168F83DC((uint64_t)v20);
  }
  else
  {
    *(void *)&v20[0] = *a1;
    *((void *)&v20[0] + 1) = v5;
    LODWORD(v8) = 1;
    do
    {
      unint64_t v8 = (*(_DWORD *)sub_216999AD4((uint64_t *)v20, (uint64_t)a2, a3) * v8);
      sub_216999B54(v20);
    }
    while (*(void *)&v20[0] != *((void *)&v20[0] + 1));
    sub_2169C035C((uint64_t)v20, v8);
    sub_2169C0A9C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v9, v10);
    uint64_t v11 = v21;
    sub_2169C0A9C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v12, v13);
    uint64_t v16 = 0;
    uint64_t v18 = v11;
    uint64_t v19 = v21 + 32 * *(void *)&v20[0];
    while (v18 != v19)
    {
      uint64_t v17 = (void *)sub_2169C03D0(&v18, v14, v15);
      sub_2169C01E4(v17, a2, (uint64_t *)a3);
      ++v16;
      sub_2169C0450(&v18);
    }
    a4[1] = off_26C756230;
    sub_2168F8DBC(a4, (uint64_t)v20);
    sub_2168F83DC((uint64_t)v20);
  }
}

void sub_2169C012C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2169C015C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, long long a12, uint64_t a13)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to parse at element %zd (at sub-part %zd if there are multiple parts)", v15, v16);
    if (*(char *)(v14 + 23) < 0) {
      operator delete(*(void **)v14);
    }
    *(_OWORD *)uint64_t v14 = a12;
    *(void *)(v14 + 16) = a13;
    *(void *)(v13 + 8) = 0;
    __cxa_end_catch();
    JUMPOUT(0x2169C00D4);
  }
  JUMPOUT(0x2169C0144);
}

void sub_2169C01D4()
{
}

uint64_t sub_2169C01E4(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = *a2;
  if (*a3 + 4 > (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3)))
  {
    uint64_t v16 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", 47);
    v18[0] = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", (uint64_t)v16, 0x2Fu);
    v18[1] = "MakeScalarValueImpl";
    v18[2] = 216;
    void v18[3] = "void pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeScalarValueImpl(GfMatrix2d *, const vector<Va"
             "lue> &, size_t &)";
    char v19 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Not enough values to parse value of type %s", "Matrix2d");
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &unk_26C7552B8;
    __cxa_throw(exception, (struct type_info *)&unk_26C755290, (void (*)(void *))std::exception::~exception);
  }
  *a3 = v3 + 1;
  sub_2169B0370(v4 + 56 * v3);
  *a1 = v8;
  uint64_t v9 = (*a3)++;
  sub_2169B0370(*a2 + 56 * v9);
  a1[1] = v10;
  uint64_t v11 = (*a3)++;
  sub_2169B0370(*a2 + 56 * v11);
  a1[2] = v12;
  uint64_t v13 = (*a3)++;
  uint64_t result = sub_2169B0370(*a2 + 56 * v13);
  a1[3] = v15;
  return result;
}

uint64_t sub_2169C035C(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  memset(v5, 0, sizeof(v5));
  sub_2168F845C((void *)a1);
  char v6 = v5;
  sub_2169C0824((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_2169C03B8(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2169C03D0(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    _OWORD v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal"
            "__aapl__pxrReserved__::GfMatrix2d>>::operator*() [T = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal_"
            "_aapl__pxrReserved__::GfMatrix2d>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_2169C0448()
{
}

void *sub_2169C0450(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArr"
            "ay<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>::operator++() [T = pxrInternal__aapl__pxrReserved__::VtArr"
            "ay<pxrInternal__aapl__pxrReserved__::GfMatrix2d>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 32;
  }
  return a1;
}

uint64_t *sub_2169C04D0(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

atomic_uint **sub_2169C04F0(atomic_uint **a1, atomic_uint **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2169C0668(a1);
}

uint64_t sub_2169C0500()
{
  return 1;
}

unint64_t sub_2169C0508(uint64_t **a1)
{
  return sub_2169018E8((uint64_t)&v2, *a1);
}

BOOL sub_2169C0530(uint64_t **a1, uint64_t *a2)
{
  return sub_2169C06C0(*a1, *a2);
}

BOOL sub_2169C053C(uint64_t **a1, uint64_t a2)
{
  return sub_2169C06C0(*a1, a2);
}

uint64_t sub_2169C0548()
{
  return 0;
}

void *sub_2169C0554(uint64_t **a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, void *))sub_2169C080C);
  return a2;
}

void *sub_2169C05A8()
{
  return &unk_26C74DFE0;
}

uint64_t sub_2169C05B4()
{
  return 1;
}

void *sub_2169C05BC()
{
  return &unk_26C74C570;
}

uint64_t sub_2169C05C8(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_2169C05D0(uint64_t a1)
{
  return **(void **)a1;
}

BOOL sub_2169C05DC(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000021745704CLL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2169C0618(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74DFE0, a2, a3);
}

void *sub_2169C063C()
{
  return &unk_26C74DFE0;
}

uint64_t sub_2169C0648(uint64_t a1)
{
  return *(void *)a1;
}

void *sub_2169C0650@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  a2[1] = off_26C756230;
  return sub_2168F8DBC(a2, v2);
}

atomic_uint **sub_2169C0668(atomic_uint **a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit(v2 + 10, 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_2168F83DC((uint64_t)v2);
    operator delete(v2);
  }
  return a1;
}

BOOL sub_2169C06C0(uint64_t *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32) && sub_2168F8C2C((uint64_t)a1, a2) && a1[3] == *(void *)(a2 + 24)) {
    return 1;
  }
  BOOL result = sub_2168F8C2C((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  uint64_t v5 = *a1;
  if (!*a1) {
    return 1;
  }
  char v6 = (double *)a1[4];
  int v7 = *(double **)(a2 + 32);
  uint64_t v8 = 32 * v5 - 32;
  do
  {
    BOOL result = pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator==(v6, v7);
    if (!result) {
      break;
    }
    v6 += 4;
    v7 += 4;
    uint64_t v9 = v8;
    v8 -= 32;
  }
  while (v9);
  return result;
}

uint64_t sub_2169C0770(_OWORD **a1)
{
  unsigned int v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    uint64_t v3 = operator new(0x30uLL);
    char v4 = *a1;
    long long v5 = (*a1)[1];
    *(_OWORD *)uint64_t v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    uint64_t v6 = *((void *)v4 + 4);
    *((void *)v3 + 4) = v6;
    if (v6)
    {
      int v7 = (atomic_ullong *)*((void *)v3 + 3);
      uint64_t v8 = (atomic_ullong *)(v6 - 16);
      if (!v7) {
        int v7 = v8;
      }
      atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
      char v4 = *a1;
    }
    atomic_store(0, (unsigned int *)v3 + 10);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 10, 1u, memory_order_relaxed);
    uint64_t v10 = (atomic_uint *)v4;
    *a1 = v3;
    sub_2169C0668(&v10);
  }
  return (uint64_t)*a1;
}

void *sub_2169C080C(double **a1, void *a2)
{
  uint64_t v3 = *a1;
  *a1 += 4;
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, v3);
}

void sub_2169C0824(unint64_t *a1, unint64_t a2, _OWORD **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    int v7 = (unint64_t *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              uint64_t v10 = sub_2169C0A00((uint64_t)a1, a2);
              int v7 = v10;
              if (v3)
              {
                uint64_t v11 = 0;
                do
                {
                  uint64_t v12 = &v10[v11];
                  long long v13 = *(_OWORD *)(v9 + v11 * 8 + 16);
                  *(_OWORD *)uint64_t v12 = *(_OWORD *)(v9 + v11 * 8);
                  *((_OWORD *)v12 + 1) = v13;
                  v11 += 4;
                }
                while (4 * v3 != v11);
              }
            }
            uint64_t v14 = *a3;
            uint64_t v15 = 4 * v3;
            do
            {
              uint64_t v16 = &v7[v15];
              long long v17 = v14[1];
              *(_OWORD *)uint64_t v16 = *v14;
              *((_OWORD *)v16 + 1) = v17;
              v15 += 4;
            }
            while (4 * a2 != v15);
          }
          uint64_t v18 = v7;
          goto LABEL_31;
        }
        int v7 = (unint64_t *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v25 = a2;
      }
      else {
        unint64_t v25 = *a1;
      }
      uint64_t v26 = sub_2169C0A00((uint64_t)a1, a2);
      uint64_t v18 = v26;
      if (v25)
      {
        uint64_t v27 = 32 * v25;
        uint64_t v28 = v26;
        do
        {
          long long v29 = *(_OWORD *)v7;
          long long v30 = *((_OWORD *)v7 + 1);
          v7 += 4;
          *(_OWORD *)uint64_t v28 = v29;
          *((_OWORD *)v28 + 1) = v30;
          v28 += 4;
          v27 -= 32;
        }
        while (v27);
      }
      if (v3 < a2)
      {
        unint64_t v31 = *a3;
        uint64_t v32 = 4 * v3;
        do
        {
          uint64_t v33 = &v26[v32];
          long long v34 = v31[1];
          *(_OWORD *)uint64_t v33 = *v31;
          *((_OWORD *)v33 + 1) = v34;
          v32 += 4;
        }
        while (4 * a2 != v32);
      }
      goto LABEL_31;
    }
    uint64_t v19 = 32 * a2;
    if (32 * a2 / a2 == 32)
    {
      uint64_t v20 = sub_2169C0A00((uint64_t)a1, a2);
      uint64_t v18 = v20;
      unint64_t v21 = 0;
      char v22 = *a3;
      do
      {
        long long v23 = &v20[v21 / 8];
        long long v24 = v22[1];
        *(_OWORD *)long long v23 = *v22;
        *((_OWORD *)v23 + 1) = v24;
        v21 += 32;
      }
      while (v19 != v21);
LABEL_31:
      if (v18 != (unint64_t *)a1[4])
      {
        sub_2168F83DC((uint64_t)a1);
        a1[4] = (unint64_t)v18;
      }
      *a1 = a2;
      return;
    }
  }

  sub_2168F845C(a1);
}

void *sub_2169C0A00(uint64_t a1, unint64_t a2)
{
  sub_216851EE4((uint64_t)&v7, "VtArray::_AllocateNew", "value_type *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::_AllocateNew(size_t) [T = pxrInternal__aapl__pxrReserved__::GfMatrix2d]");
  if (a2 >> 59) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = (32 * a2) | 0x10;
  }
  char v4 = operator new(v3);
  void *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_2169C0A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2169C0A9C(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    if (*((void *)this + 3) || (unint64_t v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfMatrix2d]", a3);
      uint64_t v6 = (long long *)*((void *)this + 4);
      uint64_t v7 = *(void *)this;
      int v8 = sub_2169C0A00((uint64_t)this, *(void *)this);
      unint64_t v9 = v8;
      if (v7)
      {
        uint64_t v10 = 32 * v7;
        uint64_t v11 = v8;
        do
        {
          long long v12 = *v6;
          long long v13 = v6[1];
          v6 += 2;
          _OWORD *v11 = v12;
          v11[1] = v13;
          v11 += 2;
          v10 -= 32;
        }
        while (v10);
      }
      sub_2168F83DC((uint64_t)this);
      *((void *)this + 4) = v9;
    }
  }
}

void *sub_2169C0B34@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  sub_2169C0E3C(v7, a1, a2);
  a3[1] = (char *)&off_26C752928 + 2;
  BOOL result = operator new(0x50uLL);
  long long v5 = v7[3];
  *((_OWORD *)result + 2) = v7[2];
  *((_OWORD *)result + 3) = v5;
  *((void *)result + 8) = v8;
  long long v6 = v7[1];
  *(_OWORD *)BOOL result = v7[0];
  *((_OWORD *)result + 1) = v6;
  atomic_store(0, (unsigned int *)result + 18);
  *a3 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 18, 1u, memory_order_relaxed);
  return result;
}

void sub_2169C0C40(void *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = a1[1];
  if (*a1 == v5)
  {
    uint64_t v21 = 0;
    memset(v20, 0, sizeof(v20));
    a4[1] = off_26C7562E8;
    sub_2168F8DBC(a4, (uint64_t)v20);
    sub_2168F83DC((uint64_t)v20);
  }
  else
  {
    *(void *)&v20[0] = *a1;
    *((void *)&v20[0] + 1) = v5;
    LODWORD(v8) = 1;
    do
    {
      unint64_t v8 = (*(_DWORD *)sub_216999AD4((uint64_t *)v20, (uint64_t)a2, a3) * v8);
      sub_216999B54(v20);
    }
    while (*(void *)&v20[0] != *((void *)&v20[0] + 1));
    sub_2169C1040((uint64_t)v20, v8);
    sub_2169C195C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v9, v10);
    uint64_t v11 = v21;
    sub_2169C195C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v12, v13);
    uint64_t v16 = 0;
    uint64_t v18 = v11;
    uint64_t v19 = v21 + 72 * *(void *)&v20[0];
    while (v18 != v19)
    {
      long long v17 = (void *)sub_2169C10BC(&v18, v14, v15);
      sub_2169C0E3C(v17, a2, (uint64_t *)a3);
      ++v16;
      sub_2169C113C(&v18);
    }
    a4[1] = off_26C7562E8;
    sub_2168F8DBC(a4, (uint64_t)v20);
    sub_2168F83DC((uint64_t)v20);
  }
}

void sub_2169C0D84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2169C0DB4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, long long a12, uint64_t a13)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to parse at element %zd (at sub-part %zd if there are multiple parts)", v15, v16);
    if (*(char *)(v14 + 23) < 0) {
      operator delete(*(void **)v14);
    }
    *(_OWORD *)uint64_t v14 = a12;
    *(void *)(v14 + 16) = a13;
    *(void *)(v13 + 8) = 0;
    __cxa_end_catch();
    JUMPOUT(0x2169C0D2CLL);
  }
  JUMPOUT(0x2169C0D9CLL);
}

void sub_2169C0E2C()
{
}

uint64_t sub_2169C0E3C(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = *a2;
  if (*a3 + 9 > (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3)))
  {
    uint64_t v26 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", 47);
    v28[0] = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", (uint64_t)v26, 0x2Fu);
    v28[1] = "MakeScalarValueImpl";
    v28[2] = 225;
    v28[3] = "void pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeScalarValueImpl(GfMatrix3d *, const vector<Va"
             "lue> &, size_t &)";
    char v29 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v28, 1, (pxrInternal__aapl__pxrReserved__ *)"Not enough values to parse value of type %s", "Matrix3d");
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &unk_26C7552B8;
    __cxa_throw(exception, (struct type_info *)&unk_26C755290, (void (*)(void *))std::exception::~exception);
  }
  *a3 = v3 + 1;
  sub_2169B0370(v4 + 56 * v3);
  *a1 = v8;
  uint64_t v9 = (*a3)++;
  sub_2169B0370(*a2 + 56 * v9);
  a1[1] = v10;
  uint64_t v11 = (*a3)++;
  sub_2169B0370(*a2 + 56 * v11);
  a1[2] = v12;
  uint64_t v13 = (*a3)++;
  sub_2169B0370(*a2 + 56 * v13);
  a1[3] = v14;
  uint64_t v15 = (*a3)++;
  sub_2169B0370(*a2 + 56 * v15);
  a1[4] = v16;
  uint64_t v17 = (*a3)++;
  sub_2169B0370(*a2 + 56 * v17);
  a1[5] = v18;
  uint64_t v19 = (*a3)++;
  sub_2169B0370(*a2 + 56 * v19);
  a1[6] = v20;
  uint64_t v21 = (*a3)++;
  sub_2169B0370(*a2 + 56 * v21);
  a1[7] = v22;
  uint64_t v23 = (*a3)++;
  uint64_t result = sub_2169B0370(*a2 + 56 * v23);
  a1[8] = v25;
  return result;
}

uint64_t sub_2169C1040(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v6 = 0;
  memset(v5, 0, sizeof(v5));
  sub_2168F845C((void *)a1);
  uint64_t v7 = v5;
  sub_2169C162C((unint64_t *)a1, a2, (uint64_t *)&v7);
  return a1;
}

void sub_2169C10A4(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2169C10BC(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    _OWORD v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal"
            "__aapl__pxrReserved__::GfMatrix3d>>::operator*() [T = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal_"
            "_aapl__pxrReserved__::GfMatrix3d>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_2169C1134()
{
}

void *sub_2169C113C(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArr"
            "ay<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>::operator++() [T = pxrInternal__aapl__pxrReserved__::VtArr"
            "ay<pxrInternal__aapl__pxrReserved__::GfMatrix3d>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 72;
  }
  return a1;
}

uint64_t *sub_2169C11BC(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

atomic_uint **sub_2169C11DC(atomic_uint **a1, atomic_uint **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2169C1354(a1);
}

uint64_t sub_2169C11EC()
{
  return 1;
}

unint64_t sub_2169C11F4(uint64_t **a1)
{
  return sub_2169C13AC((uint64_t)&v2, *a1);
}

BOOL sub_2169C121C(uint64_t **a1, uint64_t *a2)
{
  return sub_2169C14C4(*a1, *a2);
}

BOOL sub_2169C1228(uint64_t **a1, uint64_t a2)
{
  return sub_2169C14C4(*a1, a2);
}

uint64_t sub_2169C1234()
{
  return 0;
}

void *sub_2169C1240(uint64_t **a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, void *))sub_2169C1614);
  return a2;
}

void *sub_2169C1294()
{
  return &unk_26C74DFC8;
}

uint64_t sub_2169C12A0()
{
  return 1;
}

void *sub_2169C12A8()
{
  return &unk_26C74C5A0;
}

uint64_t sub_2169C12B4(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_2169C12BC(uint64_t a1)
{
  return **(void **)a1;
}

BOOL sub_2169C12C8(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x80000002174E540ALL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2169C1304(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74DFC8, a2, a3);
}

void *sub_2169C1328()
{
  return &unk_26C74DFC8;
}

uint64_t sub_2169C1334(uint64_t a1)
{
  return *(void *)a1;
}

void *sub_2169C133C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  a2[1] = off_26C7562E8;
  return sub_2168F8DBC(a2, v2);
}

atomic_uint **sub_2169C1354(atomic_uint **a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit(v2 + 10, 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_2168F83DC((uint64_t)v2);
    operator delete(v2);
  }
  return a1;
}

unint64_t sub_2169C13AC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  char v8 = 1;
  uint64_t v7 = v2;
  if (v2)
  {
    uint64_t v3 = (double *)a2[4];
    do
    {
      --v2;
      char v4 = v3 + 9;
      sub_2169C1424((uint64_t)&v7, v3);
      uint64_t v3 = v4;
    }
    while (v2);
    unint64_t v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    unint64_t v5 = 0;
  }
  return bswap64(v5);
}

uint64_t sub_2169C1424(uint64_t a1, double *a2)
{
  char v6 = 0;
  uint64_t v5 = 0;
  uint64_t result = sub_2168F6978((uint64_t)&v5, a2, a2 + 1, a2 + 2, a2 + 3, a2 + 4, a2 + 5, a2 + 6, a2 + 7, a2 + 8);
  unint64_t v4 = bswap64(0x9E3779B97F4A7C55 * v5);
  if (*(unsigned char *)(a1 + 8)) {
    v4 += (*(void *)a1 + v4 + (*(void *)a1 + v4) * (*(void *)a1 + v4)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v4;
  return result;
}

BOOL sub_2169C14C4(uint64_t *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32) && sub_2168F8C2C((uint64_t)a1, a2) && a1[3] == *(void *)(a2 + 24)) {
    return 1;
  }
  BOOL result = sub_2168F8C2C((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  uint64_t v5 = *a1;
  if (!*a1) {
    return 1;
  }
  char v6 = (double *)a1[4];
  uint64_t v7 = *(double **)(a2 + 32);
  uint64_t v8 = 72 * v5 - 72;
  do
  {
    BOOL result = pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator==(v6, v7);
    if (!result) {
      break;
    }
    v6 += 9;
    v7 += 9;
    uint64_t v9 = v8;
    v8 -= 72;
  }
  while (v9);
  return result;
}

uint64_t sub_2169C1578(_OWORD **a1)
{
  unsigned int v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    uint64_t v3 = operator new(0x30uLL);
    unint64_t v4 = *a1;
    long long v5 = (*a1)[1];
    *(_OWORD *)uint64_t v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    uint64_t v6 = *((void *)v4 + 4);
    *((void *)v3 + 4) = v6;
    if (v6)
    {
      uint64_t v7 = (atomic_ullong *)*((void *)v3 + 3);
      uint64_t v8 = (atomic_ullong *)(v6 - 16);
      if (!v7) {
        uint64_t v7 = v8;
      }
      atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
      unint64_t v4 = *a1;
    }
    atomic_store(0, (unsigned int *)v3 + 10);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 10, 1u, memory_order_relaxed);
    uint64_t v10 = (atomic_uint *)v4;
    *a1 = v3;
    sub_2169C1354(&v10);
  }
  return (uint64_t)*a1;
}

void *sub_2169C1614(double **a1, void *a2)
{
  uint64_t v3 = *a1;
  *a1 += 9;
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, v3);
}

void sub_2169C162C(unint64_t *a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    uint64_t v7 = (void *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              uint64_t v10 = sub_2169C18B0((uint64_t)a1, a2);
              uint64_t v7 = v10;
              if (v3)
              {
                unint64_t v11 = 0;
                do
                {
                  uint64_t v12 = &v10[v11 / 8];
                  *(_OWORD *)uint64_t v12 = *(_OWORD *)(v9 + v11);
                  long long v13 = *(_OWORD *)(v9 + v11 + 16);
                  long long v14 = *(_OWORD *)(v9 + v11 + 32);
                  long long v15 = *(_OWORD *)(v9 + v11 + 48);
                  v12[8] = *(void *)(v9 + v11 + 64);
                  *((_OWORD *)v12 + 2) = v14;
                  *((_OWORD *)v12 + 3) = v15;
                  *((_OWORD *)v12 + 1) = v13;
                  v11 += 72;
                }
                while (72 * v3 != v11);
              }
            }
            uint64_t v16 = *a3;
            uint64_t v17 = 9 * v3;
            do
            {
              uint64_t v18 = &v7[v17];
              *(_OWORD *)uint64_t v18 = *(_OWORD *)v16;
              long long v19 = *(_OWORD *)(v16 + 16);
              long long v20 = *(_OWORD *)(v16 + 32);
              long long v21 = *(_OWORD *)(v16 + 48);
              v18[8] = *(void *)(v16 + 64);
              *((_OWORD *)v18 + 2) = v20;
              *((_OWORD *)v18 + 3) = v21;
              *((_OWORD *)v18 + 1) = v19;
              v17 += 9;
            }
            while (9 * a2 != v17);
          }
          uint64_t v22 = v7;
          goto LABEL_31;
        }
        uint64_t v7 = (void *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v30 = a2;
      }
      else {
        unint64_t v30 = *a1;
      }
      unint64_t v31 = sub_2169C18B0((uint64_t)a1, a2);
      uint64_t v22 = v31;
      if (v30)
      {
        uint64_t v32 = 72 * v30;
        uint64_t v33 = v31;
        do
        {
          *(_OWORD *)uint64_t v33 = *(_OWORD *)v7;
          long long v34 = *((_OWORD *)v7 + 1);
          long long v35 = *((_OWORD *)v7 + 2);
          long long v36 = *((_OWORD *)v7 + 3);
          v33[8] = v7[8];
          *((_OWORD *)v33 + 2) = v35;
          *((_OWORD *)v33 + 3) = v36;
          *((_OWORD *)v33 + 1) = v34;
          v7 += 9;
          v33 += 9;
          v32 -= 72;
        }
        while (v32);
      }
      if (v3 < a2)
      {
        uint64_t v37 = *a3;
        uint64_t v38 = 9 * v3;
        do
        {
          unint64_t v39 = &v31[v38];
          *(_OWORD *)unint64_t v39 = *(_OWORD *)v37;
          long long v40 = *(_OWORD *)(v37 + 16);
          long long v41 = *(_OWORD *)(v37 + 32);
          long long v42 = *(_OWORD *)(v37 + 48);
          v39[8] = *(void *)(v37 + 64);
          *((_OWORD *)v39 + 2) = v41;
          *((_OWORD *)v39 + 3) = v42;
          *((_OWORD *)v39 + 1) = v40;
          v38 += 9;
        }
        while (9 * a2 != v38);
      }
      goto LABEL_31;
    }
    if (a2 < 0x38E38E38E38E38FLL)
    {
      uint64_t v23 = sub_2169C18B0((uint64_t)a1, a2);
      uint64_t v22 = v23;
      uint64_t v24 = 0;
      uint64_t v25 = *a3;
      do
      {
        uint64_t v26 = &v23[v24];
        *(_OWORD *)uint64_t v26 = *(_OWORD *)v25;
        long long v27 = *(_OWORD *)(v25 + 16);
        long long v28 = *(_OWORD *)(v25 + 32);
        long long v29 = *(_OWORD *)(v25 + 48);
        v26[8] = *(void *)(v25 + 64);
        *((_OWORD *)v26 + 2) = v28;
        *((_OWORD *)v26 + 3) = v29;
        *((_OWORD *)v26 + 1) = v27;
        v24 += 9;
      }
      while (9 * a2 != v24);
LABEL_31:
      if (v22 != (void *)a1[4])
      {
        sub_2168F83DC((uint64_t)a1);
        a1[4] = (unint64_t)v22;
      }
      *a1 = a2;
      return;
    }
  }

  sub_2168F845C(a1);
}

void *sub_2169C18B0(uint64_t a1, unint64_t a2)
{
  sub_216851EE4((uint64_t)&v7, "VtArray::_AllocateNew", "value_type *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::_AllocateNew(size_t) [T = pxrInternal__aapl__pxrReserved__::GfMatrix3d]");
  if (a2 > 0x38E38E38E38E38DLL) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 72 * a2 + 16;
  }
  unint64_t v4 = operator new(v3);
  void *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_2169C1944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2169C195C(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    if (*((void *)this + 3) || (unint64_t v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfMatrix3d]", a3);
      uint64_t v6 = *((void *)this + 4);
      uint64_t v7 = *(void *)this;
      int v8 = sub_2169C18B0((uint64_t)this, *(void *)this);
      unint64_t v9 = v8;
      if (v7)
      {
        uint64_t v10 = 72 * v7;
        unint64_t v11 = v8;
        do
        {
          *(_OWORD *)unint64_t v11 = *(_OWORD *)v6;
          long long v12 = *(_OWORD *)(v6 + 16);
          long long v13 = *(_OWORD *)(v6 + 32);
          long long v14 = *(_OWORD *)(v6 + 48);
          v11[8] = *(void *)(v6 + 64);
          *((_OWORD *)v11 + 2) = v13;
          *((_OWORD *)v11 + 3) = v14;
          *((_OWORD *)v11 + 1) = v12;
          v6 += 72;
          v11 += 9;
          v10 -= 72;
        }
        while (v10);
      }
      sub_2168F83DC((uint64_t)this);
      *((void *)this + 4) = v9;
    }
  }
}

void *sub_2169C1A18@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  sub_2169C1D1C(v9, a1, a2);
  a3[1] = (char *)&off_26C74E928 + 2;
  BOOL result = operator new(0x88uLL);
  long long v5 = v9[5];
  *((_OWORD *)result + 4) = v9[4];
  *((_OWORD *)result + 5) = v5;
  long long v6 = v9[7];
  *((_OWORD *)result + 6) = v9[6];
  *((_OWORD *)result + 7) = v6;
  long long v7 = v9[1];
  *(_OWORD *)BOOL result = v9[0];
  *((_OWORD *)result + 1) = v7;
  long long v8 = v9[3];
  *((_OWORD *)result + 2) = v9[2];
  *((_OWORD *)result + 3) = v8;
  atomic_store(0, (unsigned int *)result + 32);
  *a3 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 32, 1u, memory_order_relaxed);
  return result;
}

void sub_2169C1B24(void *a1@<X0>, uint64_t *a2@<X1>, char *a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = a1[1];
  if (*a1 == v5)
  {
    uint64_t v21 = 0;
    memset(v20, 0, sizeof(v20));
    a4[1] = off_26C74F560;
    sub_2168F8DBC(a4, (uint64_t)v20);
    sub_2168F83DC((uint64_t)v20);
  }
  else
  {
    *(void *)&v20[0] = *a1;
    *((void *)&v20[0] + 1) = v5;
    LODWORD(v8) = 1;
    do
    {
      unint64_t v8 = (*(_DWORD *)sub_216999AD4((uint64_t *)v20, (uint64_t)a2, a3) * v8);
      sub_216999B54(v20);
    }
    while (*(void *)&v20[0] != *((void *)&v20[0] + 1));
    sub_2169020B0((uint64_t)v20, v8);
    sub_216902540((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v9, v10);
    uint64_t v11 = v21;
    sub_216902540((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v20, v12, v13);
    uint64_t v16 = 0;
    uint64_t v18 = v11;
    uint64_t v19 = v21 + (*(void *)&v20[0] << 7);
    while (v18 != v19)
    {
      uint64_t v17 = (void *)sub_2169C1FE4(&v18, v14, v15);
      sub_2169C1D1C(v17, a2, (uint64_t *)a3);
      ++v16;
      sub_2169C2064(&v18);
    }
    a4[1] = off_26C74F560;
    sub_2168F8DBC(a4, (uint64_t)v20);
    sub_2168F83DC((uint64_t)v20);
  }
}

void sub_2169C1C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2169C1C94(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, long long a12, uint64_t a13)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to parse at element %zd (at sub-part %zd if there are multiple parts)", v15, v16);
    if (*(char *)(v14 + 23) < 0) {
      operator delete(*(void **)v14);
    }
    *(_OWORD *)uint64_t v14 = a12;
    *(void *)(v14 + 16) = a13;
    *(void *)(v13 + 8) = 0;
    __cxa_end_catch();
    JUMPOUT(0x2169C1C0CLL);
  }
  JUMPOUT(0x2169C1C7CLL);
}

void sub_2169C1D0C()
{
}

uint64_t sub_2169C1D1C(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = *a2;
  if (*a3 + 16 > (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3)))
  {
    long long v40 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", 47);
    v42[0] = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/usd/sdf/parserHelpers.cpp", (uint64_t)v40, 0x2Fu);
    v42[1] = "MakeScalarValueImpl";
    v42[2] = 239;
    v42[3] = "void pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::MakeScalarValueImpl(GfMatrix4d *, const vector<Va"
             "lue> &, size_t &)";
    char v43 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v42, 1, (pxrInternal__aapl__pxrReserved__ *)"Not enough values to parse value of type %s", "Matrix4d");
    exception = __cxa_allocate_exception(8uLL);
    void *exception = &unk_26C7552B8;
    __cxa_throw(exception, (struct type_info *)&unk_26C755290, (void (*)(void *))std::exception::~exception);
  }
  *a3 = v3 + 1;
  sub_2169B0370(v4 + 56 * v3);
  *a1 = v8;
  uint64_t v9 = (*a3)++;
  sub_2169B0370(*a2 + 56 * v9);
  a1[1] = v10;
  uint64_t v11 = (*a3)++;
  sub_2169B0370(*a2 + 56 * v11);
  a1[2] = v12;
  uint64_t v13 = (*a3)++;
  sub_2169B0370(*a2 + 56 * v13);
  a1[3] = v14;
  uint64_t v15 = (*a3)++;
  sub_2169B0370(*a2 + 56 * v15);
  a1[4] = v16;
  uint64_t v17 = (*a3)++;
  sub_2169B0370(*a2 + 56 * v17);
  a1[5] = v18;
  uint64_t v19 = (*a3)++;
  sub_2169B0370(*a2 + 56 * v19);
  a1[6] = v20;
  uint64_t v21 = (*a3)++;
  sub_2169B0370(*a2 + 56 * v21);
  a1[7] = v22;
  uint64_t v23 = (*a3)++;
  sub_2169B0370(*a2 + 56 * v23);
  a1[8] = v24;
  uint64_t v25 = (*a3)++;
  sub_2169B0370(*a2 + 56 * v25);
  a1[9] = v26;
  uint64_t v27 = (*a3)++;
  sub_2169B0370(*a2 + 56 * v27);
  a1[10] = v28;
  uint64_t v29 = (*a3)++;
  sub_2169B0370(*a2 + 56 * v29);
  a1[11] = v30;
  uint64_t v31 = (*a3)++;
  sub_2169B0370(*a2 + 56 * v31);
  a1[12] = v32;
  uint64_t v33 = (*a3)++;
  sub_2169B0370(*a2 + 56 * v33);
  a1[13] = v34;
  uint64_t v35 = (*a3)++;
  sub_2169B0370(*a2 + 56 * v35);
  a1[14] = v36;
  uint64_t v37 = (*a3)++;
  uint64_t result = sub_2169B0370(*a2 + 56 * v37);
  a1[15] = v39;
  return result;
}

uint64_t sub_2169C1FE4(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    _OWORD v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal"
            "__aapl__pxrReserved__::GfMatrix4d>>::operator*() [T = pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal_"
            "_aapl__pxrReserved__::GfMatrix4d>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_2169C205C()
{
}

void *sub_2169C2064(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtArr"
            "ay<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>::operator++() [T = pxrInternal__aapl__pxrReserved__::VtArr"
            "ay<pxrInternal__aapl__pxrReserved__::GfMatrix4d>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 128;
  }
  return a1;
}

char *sub_2169C20E4(char *__dst, long long *a2, long long *a3, char a4, uint64_t a5)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v9 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v9;
  }
  long long v10 = *a3;
  *((void *)__dst + 5) = *((void *)a3 + 2);
  *(_OWORD *)(__dst + 24) = v10;
  __dst[48] = a4;
  sub_2169C2184((uint64_t)(__dst + 56), a5);
  return __dst;
}

void sub_2169C2168(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2169C2184(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_2169C221C(void *a1, uint64_t a2)
{
  sub_2169C22A0(a1);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v4;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void *sub_2169C22A0(void *a1)
{
  unsigned int v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_2169C2328(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_2169C2328(a1, *a2);
    sub_2169C2328(a1, a2[1]);
    sub_21699E458((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext *pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::Sdf_ParserValueContext(pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext *this)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 20) = 0;
  *((void *)this + 21) = 0;
  *((void *)this + 19) = 0;
  *((void *)this + 25) = 0;
  *((unsigned char *)this + 208) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((void *)this + 13) = 0;
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0;
  *((void *)this + 15) = 0;
  *((unsigned char *)this + 144) = 0;
  *((void *)this + 29) = 0;
  *((void *)this + 30) = &unk_26C7563E0;
  *((void *)this + 31) = sub_2169C2420;
  *((void *)this + 33) = (char *)this + 240;
  *((void *)this + 36) = 0;
  *((void *)this + 37) = 0;
  *((void *)this + 35) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::Clear(this);
  return this;
}

{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 20) = 0;
  *((void *)this + 21) = 0;
  *((void *)this + 19) = 0;
  *((void *)this + 25) = 0;
  *((unsigned char *)this + 208) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((void *)this + 13) = 0;
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0;
  *((void *)this + 15) = 0;
  *((unsigned char *)this + 144) = 0;
  *((void *)this + 29) = 0;
  *((void *)this + 30) = &unk_26C7563E0;
  *((void *)this + 31) = sub_2169C2420;
  *((void *)this + 33) = (char *)this + 240;
  *((void *)this + 36) = 0;
  *((void *)this + 37) = 0;
  *((void *)this + 35) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::Clear(this);
  return this;
}

void sub_2169C2420(uint64_t *a1)
{
  v1[0] = "sdf/parserValueContext.cpp";
  v1[1] = "ReportCodingError";
  v1[2] = 49;
  v1[3] = "void pxrInternal__aapl__pxrReserved__::ReportCodingError(const std::string &)";
  char v2 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v1, 1, a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::Clear(pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext *this)
{
  *(_DWORD *)this = 0;
  *((_DWORD *)this + 28) = -1;
  *((void *)this + 2) = *((void *)this + 1);
  *((_DWORD *)this + 8) = 0;
  uint64_t result = *((void *)this + 9);
  uint64_t v3 = *((void *)this + 8);
  while (result != v3)
    uint64_t result = sub_216976F30(result - 56);
  *((void *)this + 9) = v3;
  *((void *)this + 12) = *((void *)this + 11);
  *((_WORD *)this + 136) = 0;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::SetupFactory(uint64_t a1, std::string *a2)
{
  void v15[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = (std::string *)(a1 + 152);
  uint64_t v5 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  size_t size = a2->__r_.__value_.__l.__size_;
  if ((v5 & 0x80u) == 0) {
    std::string::size_type v7 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v7 = a2->__r_.__value_.__l.__size_;
  }
  uint64_t v8 = *(unsigned __int8 *)(a1 + 175);
  int v9 = (char)v8;
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a1 + 160);
  }
  if (v7 == v8)
  {
    if (v9 >= 0) {
      long long v10 = (unsigned __int8 *)(a1 + 152);
    }
    else {
      long long v10 = (unsigned __int8 *)v4->__r_.__value_.__r.__words[0];
    }
    if ((v5 & 0x80) != 0)
    {
      if (!memcmp(a2->__r_.__value_.__l.__data_, v10, size)) {
        return *(unsigned __int8 *)(a1 + 144);
      }
    }
    else
    {
      if (!v5) {
        return *(unsigned __int8 *)(a1 + 144);
      }
      for (uint64_t i = a2; i->__r_.__value_.__s.__data_[0] == *v10; uint64_t i = (std::string *)((char *)i + 1))
      {
        ++v10;
        if (!--v5) {
          return *(unsigned __int8 *)(a1 + 144);
        }
      }
    }
  }
  uint64_t ValueFactoryForMenvaName = pxrInternal__aapl__pxrReserved__::Sdf_ParserHelpers::GetValueFactoryForMenvaName((const void **)&a2->__r_.__value_.__l.__data_, (unsigned char *)(a1 + 144));
  std::string::operator=((std::string *)(a1 + 120), a2);
  if (*(unsigned char *)(a1 + 144))
  {
    sub_2169C26D8((void *)(a1 + 176), ValueFactoryForMenvaName + 56);
    *(unsigned char *)(a1 + 208) = *(unsigned char *)(ValueFactoryForMenvaName + 48);
    long long v13 = *(_OWORD *)(ValueFactoryForMenvaName + 24);
    *(void *)(a1 + 232) = *(void *)(ValueFactoryForMenvaName + 40);
    *(_OWORD *)(a1 + 216) = v13;
  }
  else
  {
    uint64_t v15[3] = 0;
    sub_2169C221C((void *)(a1 + 176), (uint64_t)v15);
    sub_21699E4F4(v15);
    *(unsigned char *)(a1 + 208) = 0;
    *(void *)(a1 + 232) = 0;
  }
  std::string::operator=(v4, a2);
  return *(unsigned __int8 *)(a1 + 144);
}

void sub_2169C26CC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_21675DB74(a1);
  }
  _Unwind_Resume(a1);
}

void *sub_2169C26D8(void *a1, uint64_t a2)
{
  void v4[4] = *MEMORY[0x263EF8340];
  sub_2169C2184((uint64_t)v4, a2);
  sub_2169C36B8(v4, a1);
  sub_21699E4F4(v4);
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::ProduceValue@<X0>(uint64_t a1@<X0>, const char *a2@<X1>, char *a3@<X2>, void *a4@<X8>)
{
  void v14[2] = *MEMORY[0x263EF8340];
  v14[1] = 0;
  if (*(unsigned char *)(a1 + 273))
  {
    if (*(char *)(a1 + 303) < 0)
    {
      sub_216778F24(__p, *(void **)(a1 + 280), *(void *)(a1 + 288));
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 280);
      uint64_t v13 = *(void *)(a1 + 296);
    }
    pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::SdfUnregisteredValue((uint64_t)v10, (uint64_t)__p);
    sub_2169C29AC((uint64_t)v14, v10);
    sub_2168EE084((uint64_t)v10);
    if (SHIBYTE(v13) < 0) {
      operator delete(__p[0]);
    }
    goto LABEL_9;
  }
  if (*(void *)(a1 + 200))
  {
    v10[0] = 0;
    sub_2169C2A7C(a1 + 176, a1 + 8, a1 + 64, (uint64_t)v10, (uint64_t)a2);
    sub_2168ED33C(v14, __p);
    sub_2168EE084((uint64_t)__p);
LABEL_9:
    pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::Clear((pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext *)a1);
    sub_2168EDFA8(a4, v14);
    return sub_2168EE084((uint64_t)v14);
  }
  std::string::size_type v7 = (void *)(a1 + 120);
  if (*(char *)(a1 + 143) < 0) {
    std::string::size_type v7 = (void *)*v7;
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Unrecognized type name '%s'", a2, a3, v7);
  if (v11 >= 0) {
    uint64_t v8 = (char *)v10;
  }
  else {
    uint64_t v8 = (char *)v10[0];
  }
  sub_216779094(__p, v8);
  uint64_t v9 = *(void *)(a1 + 264);
  if (!v9) {
    sub_21683A7CC();
  }
  (*(void (**)(uint64_t, void **))(*(void *)v9 + 48))(v9, __p);
  if (SHIBYTE(v13) < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
  a4[1] = 0;
  return sub_2168EE084((uint64_t)v14);
}

void sub_2169C2910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_2168EE084((uint64_t)&a22);
  _Unwind_Resume(a1);
}

char *pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::GetRecordedString@<X0>(char *this@<X0>, uint64_t a2@<X8>)
{
  if (this[303] < 0) {
    return (char *)sub_216778F24((unsigned char *)a2, *((void **)this + 35), *((void *)this + 36));
  }
  *(_OWORD *)a2 = *(_OWORD *)(this + 280);
  *(void *)(a2 + 16) = *((void *)this + 37);
  return this;
}

uint64_t sub_2169C29AC(uint64_t a1, void *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v5, a1);
  *(void *)(a1 + 8) = &off_26C7564B0;
  sub_2169C3B58((unsigned int **)a1, a2);
  if (v6) {
    (*(void (**)(unsigned char *))(v6 + 32))(v5);
  }
  return a1;
}

void sub_2169C2A40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2169C2A7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = a5;
  uint64_t v5 = *(void *)(a1 + 24);
  if (!v5) {
    sub_21683A7CC();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)v5 + 48))(v5, a2, a3, a4, &v7);
}

void pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::AppendValue(int *a1, uint64_t a2)
{
  if (*((unsigned char *)a1 + 273))
  {
    if (*((unsigned char *)a1 + 272)) {
      std::string::append((std::string *)(a1 + 70), ", ");
    }
    uint64_t v4 = *(unsigned int *)(a2 + 48);
    if (v4 == -1) {
      sub_2168BBB60();
    }
    uint64_t v16 = &v15;
    ((void (*)(void **__return_ptr, char **, uint64_t))off_26C7563A0[v4])(__p, &v16, a2);
    if ((v14 & 0x80u) == 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    if ((v14 & 0x80u) == 0) {
      std::string::size_type v6 = v14;
    }
    else {
      std::string::size_type v6 = (std::string::size_type)__p[1];
    }
    std::string::append((std::string *)(a1 + 70), (const std::string::value_type *)v5, v6);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    *((unsigned char *)a1 + 272) = 1;
  }
  else
  {
    unint64_t v7 = *((void *)a1 + 9);
    if (v7 >= *((void *)a1 + 10))
    {
      uint64_t v8 = sub_2169C3BC0((uint64_t *)a1 + 8, a2);
    }
    else
    {
      sub_2169C3CE0(*((void *)a1 + 9), a2);
      uint64_t v8 = v7 + 56;
      *((void *)a1 + 9) = v7 + 56;
    }
    *((void *)a1 + 9) = v8;
  }
  int v9 = a1[28];
  int v10 = *a1;
  if (v9 == -1)
  {
    a1[28] = v10;
    int v9 = v10;
  }
  else if (v9 != v10)
  {
    sub_216779094(__p, "Non-square shaped value");
    uint64_t v11 = *((void *)a1 + 33);
    if (!v11) {
      sub_21683A7CC();
    }
    (*(void (**)(uint64_t, void **))(*(void *)v11 + 48))(v11, __p);
    if ((char)v14 < 0) {
      operator delete(__p[0]);
    }
    return;
  }
  int v12 = a1[8];
  if (v12 || v9 && (++*(_DWORD *)(*((void *)a1 + 11) + 4 * (v9 - 1)), (int v12 = a1[8]) != 0))
  {
    if (*((void *)a1 + 29) == v12) {
      --*(void *)&a1[2 * v12 + 8];
    }
  }
}

void sub_2169C2C90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  *(void *)(v15 + 72) = v16;
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::BeginList(pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext *this)
{
  if (*((unsigned char *)this + 273))
  {
    if (*((unsigned char *)this + 272))
    {
      *((unsigned char *)this + 272) = 0;
      std::string::append((std::string *)((char *)this + 280), ", ");
    }
    std::string::push_back((std::string *)((char *)this + 280), 91);
  }
  unint64_t v2 = *(int *)this + 1;
  *(_DWORD *)this = v2;
  uint64_t v3 = (char *)*((void *)this + 1);
  uint64_t v4 = (char *)*((void *)this + 2);
  unint64_t v5 = (v4 - v3) >> 2;
  if (v5 < v2)
  {
    unint64_t v6 = *((void *)this + 3);
    if ((unint64_t)v4 >= v6)
    {
      if ((v5 + 1) >> 62) {
        goto LABEL_40;
      }
      unint64_t v8 = v6 - (void)v3;
      unint64_t v9 = (uint64_t)(v6 - (void)v3) >> 1;
      if (v9 <= v5 + 1) {
        unint64_t v9 = v5 + 1;
      }
      if (v8 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v10 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v9;
      }
      if (v10)
      {
        uint64_t v11 = (char *)sub_21677EA28((uint64_t)this + 24, v10);
        uint64_t v3 = (char *)*((void *)this + 1);
        uint64_t v4 = (char *)*((void *)this + 2);
      }
      else
      {
        uint64_t v11 = 0;
      }
      int v12 = &v11[4 * v5];
      uint64_t v13 = &v11[4 * v10];
      *(_DWORD *)int v12 = 0;
      unint64_t v7 = v12 + 4;
      while (v4 != v3)
      {
        int v14 = *((_DWORD *)v4 - 1);
        v4 -= 4;
        *((_DWORD *)v12 - 1) = v14;
        v12 -= 4;
      }
      *((void *)this + 1) = v12;
      *((void *)this + 2) = v7;
      *((void *)this + 3) = v13;
      if (v3) {
        operator delete(v3);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v4 = 0;
      unint64_t v7 = v4 + 4;
    }
    unint64_t v15 = *((void *)this + 13);
    *((void *)this + 2) = v7;
    uint64_t v16 = (char *)*((void *)this + 12);
    if ((unint64_t)v16 < v15)
    {
      *(_DWORD *)uint64_t v16 = 0;
      uint64_t v17 = v16 + 4;
LABEL_38:
      *((void *)this + 12) = v17;
      return;
    }
    uint64_t v18 = (char *)*((void *)this + 11);
    uint64_t v19 = (v16 - v18) >> 2;
    if (!((unint64_t)(v19 + 1) >> 62))
    {
      unint64_t v20 = v15 - (void)v18;
      unint64_t v21 = (uint64_t)(v15 - (void)v18) >> 1;
      if (v21 <= v19 + 1) {
        unint64_t v21 = v19 + 1;
      }
      if (v20 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v22 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v22 = v21;
      }
      if (v22)
      {
        uint64_t v23 = (char *)sub_21677EA28((uint64_t)this + 104, v22);
        uint64_t v18 = (char *)*((void *)this + 11);
        uint64_t v16 = (char *)*((void *)this + 12);
      }
      else
      {
        uint64_t v23 = 0;
      }
      uint64_t v24 = &v23[4 * v19];
      uint64_t v25 = &v23[4 * v22];
      *(_DWORD *)uint64_t v24 = 0;
      uint64_t v17 = v24 + 4;
      while (v16 != v18)
      {
        int v26 = *((_DWORD *)v16 - 1);
        v16 -= 4;
        *((_DWORD *)v24 - 1) = v26;
        v24 -= 4;
      }
      *((void *)this + 11) = v24;
      *((void *)this + 12) = v17;
      *((void *)this + 13) = v25;
      if (v18) {
        operator delete(v18);
      }
      goto LABEL_38;
    }
LABEL_40:
    sub_21677CB10();
  }
}

void pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::EndList(pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext *this)
{
  if (*((unsigned char *)this + 273))
  {
    std::string::push_back((std::string *)((char *)this + 280), 93);
    *((unsigned char *)this + 272) = 1;
  }
  int v2 = *(_DWORD *)this;
  if (!*(_DWORD *)this)
  {
    sub_216779094(__p, "Mismatched [ ] in shaped value");
    uint64_t v8 = *((void *)this + 33);
    if (!v8) {
      sub_21683A7CC();
    }
    goto LABEL_9;
  }
  uint64_t v3 = v2 - 1;
  uint64_t v4 = *((void *)this + 1);
  int v5 = *(_DWORD *)(v4 + 4 * v3);
  uint64_t v6 = *((void *)this + 11);
  int v7 = *(_DWORD *)(v6 + 4 * v3);
  if (v5)
  {
    if (v5 != v7)
    {
      sub_216779094(__p, "Non-square shaped value");
      uint64_t v8 = *((void *)this + 33);
      if (!v8) {
        sub_21683A7CC();
      }
LABEL_9:
      (*(void (**)(uint64_t, void **))(*(void *)v8 + 48))(v8, __p);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
      return;
    }
  }
  else
  {
    *(_DWORD *)(v4 + 4 * v3) = v7;
    int v2 = *(_DWORD *)this;
    if (!*(_DWORD *)(v4 + 4 * (*(_DWORD *)this - 1)))
    {
      sub_216779094(__p, "Shaped value with a zero dimension");
      uint64_t v8 = *((void *)this + 33);
      if (!v8) {
        sub_21683A7CC();
      }
      goto LABEL_9;
    }
    if (!v2) {
      return;
    }
  }
  *(_DWORD *)(v6 + 4 * (v2 - 1)) = 0;
  int v9 = (*(_DWORD *)this)--;
  BOOL v10 = __OFSUB__(v9, 2);
  int v11 = v9 - 2;
  if (v11 < 0 == v10) {
    ++*(_DWORD *)(v6 + 4 * v11);
  }
}

void sub_2169C302C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::BeginTuple(pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext *this, const char *a2, char *a3)
{
  if (*((unsigned char *)this + 273))
  {
    if (*((unsigned char *)this + 272))
    {
      *((unsigned char *)this + 272) = 0;
      std::string::append((std::string *)((char *)this + 280), ", ");
    }
    std::string::push_back((std::string *)((char *)this + 280), 40);
  }
  unint64_t v4 = *((int *)this + 8);
  if (*((void *)this + 29) <= v4)
  {
    int v5 = (void *)((char *)this + 120);
    if (*((char *)this + 143) < 0) {
      int v5 = (void *)*v5;
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Tuple nesting too deep! Should not be deeper than %d for attribute of type %s.", a2, a3, *((int *)this + 8), v5);
    uint64_t v6 = *((void *)this + 33);
    if (!v6) {
      sub_21683A7CC();
    }
    (*(void (**)(uint64_t, void **))(*(void *)v6 + 48))(v6, &__p);
    if (v8 < 0) {
      operator delete(__p);
    }
  }
  else
  {
    *((void *)this + v4 + 5) = *((void *)this + v4 + 27);
    *((_DWORD *)this + 8) = v4 + 1;
  }
}

void sub_2169C313C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::EndTuple(pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext *this, const char *a2, char *a3)
{
  if (*((unsigned char *)this + 273))
  {
    std::string::push_back((std::string *)((char *)this + 280), 41);
    *((unsigned char *)this + 272) = 1;
  }
  int v4 = *((_DWORD *)this + 8);
  if (!v4)
  {
    char v8 = (void *)((char *)this + 120);
    if (*((char *)this + 143) < 0) {
      char v8 = (void *)*v8;
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Mismatched() for attribute of type %s.", a2, a3, v8);
    uint64_t v7 = *((void *)this + 33);
    if (!v7) {
      sub_21683A7CC();
    }
    goto LABEL_12;
  }
  int v5 = v4 - 1;
  *((_DWORD *)this + 8) = v4 - 1;
  if (*((void *)this + v4 + 4))
  {
    uint64_t v6 = (void *)((char *)this + 120);
    if (*((char *)this + 143) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Tuple dimensions error for attribute of type %s.", a2, a3, v6);
    uint64_t v7 = *((void *)this + 33);
    if (!v7) {
      sub_21683A7CC();
    }
LABEL_12:
    (*(void (**)(uint64_t, void **))(*(void *)v7 + 48))(v7, &__p);
    if (v12 < 0) {
      operator delete(__p);
    }
    return;
  }
  BOOL v9 = __OFSUB__(v4, 2);
  int v10 = v4 - 2;
  if (v10 < 0 != v9)
  {
    if (!v5 && *(_DWORD *)this) {
      ++*(_DWORD *)(*((void *)this + 11) + 4 * (*(_DWORD *)this - 1));
    }
  }
  else
  {
    --*((void *)this + v10 + 5);
  }
}

void sub_2169C32C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::StartRecordingString(uint64_t this)
{
  *(_WORD *)(this + 272) = 256;
  if (*(char *)(this + 303) < 0)
  {
    **(unsigned char **)(this + 280) = 0;
    *(void *)(this + 288) = 0;
  }
  else
  {
    *(unsigned char *)(this + 280) = 0;
    *(unsigned char *)(this + 303) = 0;
  }
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::StopRecordingString(uint64_t this)
{
  *(unsigned char *)(this + 273) = 0;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::IsRecordingString(pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext *this)
{
  return *((unsigned __int8 *)this + 273);
}

std::string *pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::SetRecordedString(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 280), a2);
}

uint64_t sub_2169C3324()
{
  return sub_216999F68();
}

uint64_t sub_2169C332C()
{
  return sub_2169996F8();
}

void *sub_2169C3334@<X0>(double *a1@<X1>, void *a2@<X8>)
{
  return pxrInternal__aapl__pxrReserved__::TfStringify(*a1, a2);
}

std::string *sub_2169C333C@<X0>(const std::string *a1@<X1>, std::string *a2@<X8>)
{
  return pxrInternal__aapl__pxrReserved__::Sdf_FileIOUtility::Quote(a1, a2);
}

uint64_t sub_2169C3344(uint64_t a1, void *a2)
{
  return sub_2169C3354(a2);
}

uint64_t sub_2169C334C(uint64_t a1, uint64_t a2)
{
  return sub_2169C349C(a2);
}

uint64_t sub_2169C3354(void *a1)
{
  sub_21677B834((uint64_t)v3);
  pxrInternal__aapl__pxrReserved__::operator<<(v3, a1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v3 + *(void *)(v3[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v3[1] = MEMORY[0x263F8C318] + 16;
  if (v4 < 0) {
    operator delete((void *)v3[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x21D447E60](&v5);
}

void sub_2169C3488(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21677B9CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2169C349C(uint64_t a1)
{
  sub_21677B834((uint64_t)v3);
  pxrInternal__aapl__pxrReserved__::operator<<(v3, a1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v3 + *(void *)(v3[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v3[1] = MEMORY[0x263F8C318] + 16;
  if (v4 < 0) {
    operator delete((void *)v3[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x21D447E60](&v5);
}

void sub_2169C35D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21677B9CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_2169C35EC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26C7563E0;
  result[1] = v3;
  return result;
}

uint64_t sub_2169C3634(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C7563E0;
  a2[1] = v2;
  return result;
}

uint64_t sub_2169C3660(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

uint64_t sub_2169C366C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C756460)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2169C36AC()
{
  return &unk_26C756460;
}

void *sub_2169C36B8(void *result, void *a2)
{
  uint64_t v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    char v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_2169C3918(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_21675DB74(a1);
}

uint64_t *sub_2169C3924(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 16), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *sub_2169C3944(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2169C3A80(a1);
}

uint64_t sub_2169C3954()
{
  return 1;
}

unint64_t sub_2169C395C(pxrInternal__aapl__pxrReserved__::VtValue **a1)
{
  return bswap64(0x9E3779B97F4A7C55 * pxrInternal__aapl__pxrReserved__::VtValue::GetHash(*a1));
}

uint64_t sub_2169C3990(void *a1, void *a2)
{
  return pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(*a1, *a2);
}

uint64_t sub_2169C399C(void *a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(*a1, a2);
}

uint64_t sub_2169C39A8()
{
  return 0;
}

uint64_t sub_2169C39B4(void *a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, *a1);
}

void *sub_2169C39C4()
{
  return &unk_26C7551E0;
}

uint64_t sub_2169C39D0()
{
  return 0;
}

uint64_t sub_2169C39D8()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_2169C39E4()
{
  return 0;
}

uint64_t sub_2169C39EC()
{
  return 0;
}

BOOL sub_2169C39F4(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x80000002174693E0 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2169C3A30(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_26C7551E0, a2, a3);
}

void *sub_2169C3A54()
{
  return &unk_26C7551E0;
}

uint64_t sub_2169C3A60(uint64_t a1)
{
  return *(void *)a1;
}

void *sub_2169C3A68@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  *(void *)(a2 + 8) = &off_26C7564B0;
  return sub_2169C3B58((unsigned int **)a2, v2);
}

uint64_t *sub_2169C3A80(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 16), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    uint64_t v3 = (void *)sub_2168EE084(v2);
    operator delete(v3);
  }
  return a1;
}

unsigned int *sub_2169C3ACC(unsigned int **a1)
{
  unsigned int v2 = atomic_load(*a1 + 4);
  if (v2 != 1)
  {
    uint64_t v3 = (unsigned int *)operator new(0x18uLL);
    sub_2168EE4C4(v3, *a1);
    atomic_store(0, v3 + 4);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 4, 1u, memory_order_relaxed);
    uint64_t v5 = *a1;
    *a1 = v3;
    sub_2169C3A80((uint64_t *)&v5);
  }
  return *a1;
}

void sub_2169C3B44(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_2169C3B58(unsigned int **a1, void *a2)
{
  char v4 = (unsigned int *)operator new(0x18uLL);
  uint64_t result = sub_2168EE4C4(v4, a2);
  atomic_store(0, v4 + 4);
  *a1 = v4;
  atomic_fetch_add_explicit((atomic_uint *volatile)v4 + 4, 1u, memory_order_relaxed);
  return result;
}

void sub_2169C3BAC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2169C3BC0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x249249249249249) {
    unint64_t v9 = 0x492492492492492;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    int v10 = (char *)sub_2167B421C(v7, v9);
  }
  else {
    int v10 = 0;
  }
  char v13 = v10;
  int v14 = &v10[56 * v4];
  uint64_t v16 = &v10[56 * v9];
  sub_2169C3CE0((uint64_t)v14, a2);
  unint64_t v15 = v14 + 56;
  sub_2169C3EDC(a1, &v13);
  uint64_t v11 = a1[1];
  sub_2169C40B0((uint64_t)&v13);
  return v11;
}

void sub_2169C3CCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2169C40B0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2169C3CE0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 48) = -1;
  sub_2169C3D28(a1, a2);
  return a1;
}

void sub_2169C3D14(_Unwind_Exception *a1)
{
  sub_216976F30(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2169C3D28(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 48);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_26C756480[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 48) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 48);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_26C756568[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 48) = v5;
  }
  return result;
}

void sub_2169C3DB8(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void sub_2169C3DC4(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

double sub_2169C3DD0(uint64_t a1, void *a2, double *a3)
{
  double result = *a3;
  *a2 = *(void *)a3;
  return result;
}

void *sub_2169C3DDC(int a1, void *__dst, long long *a3)
{
  if (*((char *)a3 + 23) < 0) {
    return sub_216778F24(__dst, *(void **)a3, *((void *)a3 + 1));
  }
  long long v3 = *a3;
  __dst[2] = *((void *)a3 + 2);
  *(_OWORD *)long long __dst = v3;
  return result;
}

void sub_2169C3E08(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a2 = *a3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *a2 &= 0xFFFFFFFFFFFFFFF8;
  }
}

char *sub_2169C3E38(int a1, char *__dst, long long *a3)
{
  return sub_2169C3E44(__dst, a3);
}

char *sub_2169C3E44(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  uint64_t v5 = __dst + 24;
  if (*((char *)a2 + 47) < 0)
  {
    sub_216778F24(v5, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)uint64_t v5 = v6;
  }
  return __dst;
}

void sub_2169C3EC0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2169C3EDC(uint64_t *a1, void *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t result = a2[1];
  while (v4 != v5)
  {
    v4 -= 56;
    uint64_t result = sub_2169C3F64(result - 56, v4);
  }
  a2[1] = result;
  uint64_t v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t sub_2169C3F64(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 48) = -1;
  sub_2169C3F9C(a1, a2);
  return a1;
}

uint64_t sub_2169C3F9C(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 48);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_26C756480[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 48) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 48);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_26C756598[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 48) = v5;
  }
  return result;
}

void sub_2169C402C(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void sub_2169C4038(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

double sub_2169C4044(uint64_t a1, void *a2, double *a3)
{
  double result = *a3;
  *a2 = *(void *)a3;
  return result;
}

__n128 sub_2169C4050(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  a3->n128_u64[0] = 0;
  return result;
}

void sub_2169C406C(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
  *a3 = 0;
}

__n128 sub_2169C407C(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v3 = *a3;
  *(void *)(a2 + 16) = *((void *)a3 + 2);
  *(_OWORD *)a2 = v3;
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  *(void *)a3 = 0;
  __n128 result = *(__n128 *)((char *)a3 + 24);
  *(void *)(a2 + 40) = *((void *)a3 + 5);
  *(__n128 *)(a2 + 24) = result;
  *((void *)a3 + 4) = 0;
  *((void *)a3 + 5) = 0;
  *((void *)a3 + 3) = 0;
  return result;
}

uint64_t sub_2169C40B0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 56;
    sub_216976F30(i - 56);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

int *pxrInternal__aapl__pxrReserved__::Sdf_ParsePath(long long *a1, int *a2, uint64_t a3)
{
  sub_2169C4410(&v15, 1uLL);
  *(_OWORD *)std::string __p = 0u;
  long long v19 = 0u;
  *(_OWORD *)uint64_t v17 = 0u;
  sub_2169C4528((unsigned __int8 *)&__dst, a1, "");
  sub_2169C45D4((uint64_t)&__dst, &v15);
  char v7 = v6;
  sub_2169C44E4((uint64_t)&__dst);
  if (v7)
  {
    if (a2)
    {
      uint64_t v10 = v16;
      sub_21697DE94(a2, (int *)(v16 - 8));
      sub_21697DEEC(a2 + 1, (int *)(v10 - 4));
    }
    a2 = (int *)1;
  }
  else
  {
    if (a3)
    {
      if (*((char *)a1 + 23) >= 0) {
        uint64_t v11 = (uint64_t *)a1;
      }
      else {
        uint64_t v11 = *(uint64_t **)a1;
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Ill-formed SdfPath with no exception parsing <%s>", v8, v9, v11);
      if (*(char *)(a3 + 23) < 0) {
        operator delete(*(void **)a3);
      }
      *(_OWORD *)a3 = __dst;
      *(void *)(a3 + 16) = v14;
    }
    if (a2)
    {
      *(void *)&long long __dst = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&__dst);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&__dst + 1);
      sub_21697DE94(a2, (int *)&__dst);
      sub_21697DEEC(a2 + 1, (int *)&__dst + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__dst + 1);
      sub_21697C414(&__dst);
      a2 = 0;
    }
  }
  if (SHIBYTE(v19) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(__p[0]) < 0) {
    operator delete(v17[0]);
  }
  *(void *)&long long __dst = &v15;
  sub_216981168((void ***)&__dst);
  return a2;
}

void sub_2169C4284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a2 == 1)
  {
    uint64_t v25 = __cxa_begin_catch(a1);
    if (v23)
    {
      (*(void (**)(void *))(*(void *)v25 + 16))(v25);
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Ill-formed SdfPath <%s>: %s", v26, v27);
      if (*(char *)(v23 + 23) < 0) {
        operator delete(*(void **)v23);
      }
      *(_OWORD *)uint64_t v23 = a11;
      *(void *)(v23 + 16) = a12;
    }
    if (v22)
    {
      *(void *)&a11 = 0;
      sub_2169C4380(&a11);
      sub_21697DE94(v22, (int *)&a11);
      sub_21697DEEC(v22 + 1, (int *)&a11 + 1);
      sub_21697B754(&a11);
    }
    __cxa_end_catch();
    JUMPOUT(0x2169C4230);
  }
  sub_2169C43B8((uint64_t)&a22);
  _Unwind_Resume(a1);
}

_DWORD *sub_2169C4380(_DWORD *a1)
{
  unsigned int v2 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(v2 + 1);
  return a1;
}

uint64_t sub_2169C43B8(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  uint64_t v3 = (void **)a1;
  sub_216981168(&v3);
  return a1;
}

void *sub_2169C4410(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_21677CACC(a1, a2);
    sub_2169C447C((uint64_t)a1, a2);
  }
  return a1;
}

void sub_2169C4468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

_DWORD *sub_2169C447C(uint64_t a1, uint64_t a2)
{
  __n128 result = *(_DWORD **)(a1 + 8);
  if (a2)
  {
    uint64_t v4 = 8 * a2;
    uint64_t v5 = result;
    char v6 = &result[2 * a2];
    do
    {
      *v5++ = 0;
      char v7 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(result);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(v7 + 1);
      __n128 result = v5;
      v4 -= 8;
    }
    while (v4);
    __n128 result = v6;
  }
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_2169C44E4(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

unsigned __int8 *sub_2169C4528(unsigned __int8 *__dst, long long *a2, char *__s)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v5;
  }
  if ((char)__dst[23] < 0)
  {
    char v7 = *(unsigned __int8 **)__dst;
    uint64_t v6 = *((void *)__dst + 1);
  }
  else
  {
    uint64_t v6 = __dst[23];
    char v7 = __dst;
  }
  *((void *)__dst + 3) = v7;
  *((void *)__dst + 4) = v7;
  *(_OWORD *)(__dst + 40) = xmmword_217411D30;
  *((void *)__dst + 7) = 0;
  *((void *)__dst + 8) = &v7[v6];
  sub_216779094((void *)__dst + 9, __s);
  return __dst;
}

void sub_2169C45B8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_2169C45D4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = (__n128 *)(a1 + 32);
  __n128 v5 = *(__n128 *)(a1 + 32);
  __n128 v6 = *(__n128 *)(a1 + 48);
  if ((sub_2169C46AC(a1, a2) & 1) == 0) {
    sub_2169C464C(a1);
  }
  if ((sub_2169C96E4(a1) & 1) == 0)
  {
    __n128 result = v5;
    *uint64_t v3 = v5;
    v3[1] = v6;
  }
  return result;
}

void sub_2169C4640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10)
{
  _OWORD *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

void sub_2169C464C(uint64_t a1)
{
}

void sub_2169C4660()
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "code should be unreachable: Control< T >::raise() did not throw an exception");
  __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
}

void sub_2169C4698(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2169C46AC(uint64_t a1, uint64_t *a2)
{
  if (sub_2169C4720(a1, a2)) {
    return 1;
  }
  if (sub_2169C8F5C(a1, (uint64_t)a2)) {
    return 1;
  }
  sub_2169C9418(a1, (uint64_t)a2);
  if (v4) {
    return 1;
  }

  return sub_2169C94A0(a1, (uint64_t)a2);
}

uint64_t sub_2169C4720(uint64_t a1, uint64_t *a2)
{
  char v4 = (_OWORD *)(a1 + 32);
  long long v7 = *(_OWORD *)(a1 + 32);
  long long v8 = *(_OWORD *)(a1 + 48);
  uint64_t v5 = sub_2169C4794(a1, (uint64_t)a2);
  if (v5)
  {
    sub_2169C4920(a1, a2);
  }
  else
  {
    _OWORD *v4 = v7;
    v4[1] = v8;
  }
  return v5;
}

void sub_2169C4788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10)
{
  _OWORD *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

uint64_t sub_2169C4794(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a1 + 32);
  long long v5 = *(_OWORD *)(a1 + 48);
  if ((void)v4 == *(void *)(a1 + 64) || *(unsigned char *)v4 != 47) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 40) + 1;
  *(void *)(a1 + 32) = v4 + 1;
  *(void *)(a1 + 40) = v2;
  ++*(void *)(a1 + 56);
  v6[0] = v4;
  v6[1] = v5;
  uint64_t v7 = a1 + 24;
  sub_2169C482C((pxrInternal__aapl__pxrReserved__::SdfPath *)v6, a2);
  return 1;
}

void sub_2169C4820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10)
{
  _OWORD *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

int *sub_2169C482C(pxrInternal__aapl__pxrReserved__::SdfPath *a1, uint64_t a2)
{
  uint64_t v3 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(a1);
  uint64_t v4 = *(void *)(a2 + 8);
  sub_2169C487C((int *)(v4 - 8), v3);

  return sub_2169C48D4((int *)(v4 - 4), v3 + 1);
}

int *sub_2169C487C(int *a1, _DWORD *a2)
{
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator==(a1, a2))
  {
    sub_216981010(&v5, a2);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(&v5, a1);
    sub_21697C414(&v5);
  }
  return a1;
}

int *sub_2169C48D4(int *a1, _DWORD *a2)
{
  sub_21698105C(&v4, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(&v4, a1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v4);
  return a1;
}

uint64_t sub_2169C4920(uint64_t a1, uint64_t *a2)
{
  int v4 = (_OWORD *)(a1 + 32);
  long long v7 = *(_OWORD *)(a1 + 32);
  long long v8 = *(_OWORD *)(a1 + 48);
  uint64_t v5 = sub_2169C49A0(a1, (uint64_t)a2);
  if (v5)
  {
    sub_2169C6D40(a1, (uint64_t)a2);
    sub_2169C6D8C(a1, a2);
  }
  else
  {
    _OWORD *v4 = v7;
    v4[1] = v8;
  }
  return v5;
}

void sub_2169C4994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10)
{
  _OWORD *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

uint64_t sub_2169C49A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2169C49EC(a1, a2);
  if (v4)
  {
    do
      sub_2169C5018(a1, a2);
    while ((v5 & 1) != 0);
  }
  return v4;
}

uint64_t sub_2169C49EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (_OWORD *)(a1 + 32);
  long long v7 = *(_OWORD *)(a1 + 32);
  long long v8 = *(_OWORD *)(a1 + 48);
  uint64_t v5 = sub_2169C4A88((void *)a1);
  if (v5)
  {
    while ((sub_2169C4D34((void *)a1) & 1) != 0)
      ;
    v9[0] = v7;
    v9[1] = v8;
    uint64_t v10 = a1 + 24;
    sub_2169C4D94((uint64_t)v9, a2);
  }
  else
  {
    _OWORD *v4 = v7;
    v4[1] = v8;
  }
  return v5;
}

void sub_2169C4A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10)
{
  _OWORD *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

uint64_t sub_2169C4A88(void *a1)
{
  uint64_t v1 = (unsigned char *)a1[4];
  if (v1 == (unsigned char *)a1[8] || *v1 != 95) {
    return sub_2169C4ACC(a1);
  }
  uint64_t v2 = a1[5] + 1;
  a1[4] = v1 + 1;
  a1[5] = v2;
  ++a1[7];
  return 1;
}

uint64_t sub_2169C4ACC(void *a1)
{
  if (a1[4] == a1[8]) {
    return 0;
  }
  unint64_t v2 = sub_2169C4B2C((uint64_t)a1);
  if ((v2 & 0xFF00000000) == 0) {
    return 0;
  }
  unsigned __int8 v3 = BYTE4(v2);
  uint64_t result = pxrInternal__aapl__pxrReserved__::TfIsUtf8CodePointXidStart((pxrInternal__aapl__pxrReserved__ *)v2);
  if (result)
  {
    sub_2169C4B94(a1 + 3, v3);
    return 1;
  }
  return result;
}

unint64_t sub_2169C4B2C(uint64_t a1)
{
  uint64_t v1 = *(char **)(a1 + 32);
  if (v1 == *(char **)(a1 + 64))
  {
    uint64_t v5 = 0;
    unsigned int v3 = 0;
    unint64_t v4 = 0;
  }
  else
  {
    int v2 = *v1;
    unsigned int v3 = v2;
    if (v2 < 0)
    {
      uint64_t v6 = sub_2169C4BE8(a1, v2);
      unsigned int v3 = v6;
      unint64_t v4 = v6 & 0xFFFFFF0000000000;
      uint64_t v5 = v6 & 0xFF00000000;
    }
    else
    {
      unint64_t v4 = 0;
      uint64_t v5 = 0x100000000;
    }
  }
  return v4 | v5 | v3;
}

void *sub_2169C4B94(void *result, uint64_t a2)
{
  uint64_t v2 = result[1];
  if (a2)
  {
    uint64_t v4 = result[3];
    uint64_t v3 = result[4];
    uint64_t v5 = (unsigned __int8 *)result[1];
    uint64_t v6 = a2;
    do
    {
      int v7 = *v5++;
      if (v7 == 10)
      {
        uint64_t v3 = 0;
        result[3] = ++v4;
      }
      else
      {
        ++v3;
      }
      result[4] = v3;
      --v6;
    }
    while (v6);
  }
  uint64_t v8 = result[2] + a2;
  result[1] = v2 + a2;
  result[2] = v8;
  return result;
}

uint64_t sub_2169C4BE8(uint64_t a1, char a2)
{
  if ((a2 & 0xE0) == 0xC0)
  {
    uint64_t v2 = *(void *)(a1 + 32);
    if ((unint64_t)(*(void *)(a1 + 64) - v2) >= 2)
    {
      char v3 = *(unsigned char *)(v2 + 1);
      if ((v3 & 0xC0) == 0x80)
      {
        unsigned int v4 = v3 & 0x3F | ((a2 & 0x1F) << 6);
        if (v4 > 0x7F)
        {
          uint64_t v5 = 0x200000000;
          return v5 | v4;
        }
      }
    }
LABEL_20:
    unsigned int v4 = 0;
    uint64_t v5 = 0;
    return v5 | v4;
  }
  if ((a2 & 0xF0) == 0xE0)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    if ((unint64_t)(*(void *)(a1 + 64) - v6) >= 3)
    {
      char v7 = *(unsigned char *)(v6 + 1);
      if ((v7 & 0xC0) == 0x80)
      {
        char v8 = *(unsigned char *)(v6 + 2);
        if ((v8 & 0xC0) == 0x80)
        {
          int v9 = v7 & 0x3F | ((a2 & 0xF) << 6);
          if ((v9 & 0x3E0) != 0x360)
          {
            unsigned int v4 = v8 & 0x3F | (v9 << 6);
            if (v4 > 0x7FF)
            {
              uint64_t v5 = 0x300000000;
              return v5 | v4;
            }
          }
        }
      }
    }
    goto LABEL_20;
  }
  if ((a2 & 0xF8) != 0xF0) {
    goto LABEL_20;
  }
  uint64_t v10 = *(unsigned char **)(a1 + 32);
  if (*(void *)(a1 + 64) - (void)v10 < 4uLL) {
    goto LABEL_20;
  }
  uint64_t v5 = 0;
  unsigned int v4 = 0;
  char v11 = v10[1];
  if ((v11 & 0xC0) == 0x80)
  {
    char v12 = v10[2];
    if ((v12 & 0xC0) == 0x80)
    {
      char v13 = v10[3];
      if ((v13 & 0xC0) == 0x80)
      {
        int v14 = (v11 & 0x3F | ((a2 & 7) << 6)) << 12;
        if (!((v14 - 0x10000) >> 20))
        {
          unsigned int v4 = v13 & 0x3F | ((v12 & 0x3F) << 6) | v14;
          uint64_t v5 = 0x400000000;
          return v5 | v4;
        }
        goto LABEL_20;
      }
    }
  }
  return v5 | v4;
}

uint64_t sub_2169C4D34(void *a1)
{
  if (a1[4] == a1[8]) {
    return 0;
  }
  unint64_t v2 = sub_2169C4B2C((uint64_t)a1);
  if ((v2 & 0xFF00000000) == 0) {
    return 0;
  }
  unsigned __int8 v3 = BYTE4(v2);
  uint64_t result = pxrInternal__aapl__pxrReserved__::TfIsUtf8CodePointXidContinue((pxrInternal__aapl__pxrReserved__ *)v2);
  if (result)
  {
    sub_2169C4B94(a1 + 3, v3);
    return 1;
  }
  return result;
}

_DWORD *sub_2169C4D94(uint64_t a1, uint64_t a2)
{
  BOOL v4 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(*(void *)(a2 + 8) - 8));
  if (!v4)
  {
    uint64_t v5 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::ReflexiveRelativePath((pxrInternal__aapl__pxrReserved__::SdfPath *)v4);
    uint64_t v6 = *(void *)(a2 + 8);
    sub_2169C487C((int *)(v6 - 8), v5);
    sub_2169C48D4((int *)(v6 - 4), v5 + 1);
  }
  char v7 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(*(void *)(a2 + 8) - 8);
  sub_2169C4E90(a1, &v10);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(v7, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v10, &v11);
  uint64_t v8 = *(void *)(a2 + 8);
  sub_21697DE94((int *)(v8 - 8), &v11);
  sub_21697DEEC((int *)(v8 - 4), &v12);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  uint64_t result = sub_21697C414(&v11);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void sub_2169C4E90(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  unsigned __int8 v3 = *(char **)a1;
  BOOL v4 = *(char **)(*(void *)(a1 + 32) + 8);
  unint64_t v5 = (unint64_t)&v4[-*(void *)a1];
  *a2 = 0;
  if (v5 > 0x1F)
  {
    sub_21682E90C(__p, v3, v4, v5);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v12);
    uint64_t v8 = *a2;
    uint64_t v9 = *a2 & 7;
    if (&v12 == a2)
    {
      if (v9) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    else
    {
      if (v9) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      *a2 = v12;
      uint64_t v12 = 0;
    }
    if (v11 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    if (v4 != v3) {
      memmove(__dst, v3, v5);
    }
    __dst[v5] = 0;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)__p, __dst);
    uint64_t v6 = *a2;
    uint64_t v7 = *a2 & 7;
    if (__p == (void **)a2)
    {
      if (v7) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    else
    {
      if (v7) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      *a2 = (uint64_t)__p[0];
    }
  }
}

void sub_2169C4FD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if ((*v15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_2169C5018(uint64_t a1, uint64_t a2)
{
  BOOL v4 = (__n128 *)(a1 + 32);
  __n128 v7 = *(__n128 *)(a1 + 32);
  __n128 v8 = *(__n128 *)(a1 + 48);
  int v5 = sub_2169C50BC((void *)a1);
  __n128 *v4 = v7;
  v4[1] = v8;
  if (!v5 || !sub_2169C66EC((void *)a1, a2) || (sub_2169C49EC(a1, a2) & 1) == 0)
  {
    __n128 result = v7;
    __n128 *v4 = v7;
    v4[1] = v8;
  }
  return result;
}

void sub_2169C50A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10)
{
  _OWORD *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

uint64_t sub_2169C50BC(void *a1)
{
  uint64_t result = sub_2169C5108(a1);
  if (result)
  {
    uint64_t result = sub_2169C4A88(a1);
    if (result)
    {
      while ((sub_2169C4D34(a1) & 1) != 0)
        ;
      return 1;
    }
  }
  return result;
}

uint64_t sub_2169C5108(void *a1)
{
  uint64_t v1 = (unsigned char *)a1[4];
  if (v1 == (unsigned char *)a1[8] || *v1 != 47) {
    return sub_2169C514C(a1);
  }
  uint64_t v2 = a1[5] + 1;
  a1[4] = v1 + 1;
  a1[5] = v2;
  ++a1[7];
  return 1;
}

uint64_t sub_2169C514C(void *a1)
{
  uint64_t result = sub_2169C51A8(a1);
  if (result)
  {
    sub_2169C52C0(a1);
    return sub_2169C6560(a1);
  }
  return result;
}

uint64_t sub_2169C51A8(void *a1)
{
  while ((sub_2169C5224(a1) & 1) != 0)
    ;
  uint64_t v2 = (unsigned char *)a1[4];
  if (v2 == (unsigned char *)a1[8] || *v2 != 123) {
    return 0;
  }
  uint64_t v3 = a1[5] + 1;
  a1[4] = v2 + 1;
  a1[5] = v3;
  ++a1[7];
  while ((sub_2169C5224(a1) & 1) != 0)
    ;
  return 1;
}

uint64_t sub_2169C5224(void *a1)
{
  uint64_t v1 = (char *)a1[4];
  if (v1 == (char *)a1[8]) {
    return 0;
  }
  int v3 = *v1;
  __int16 __s = 2336;
  BOOL v4 = (uint64_t *)memchr(&__s, v3, 2uLL);
  int v5 = (char *)(v4 ? v4 : &v9);
  if (v5 - (char *)&__s == 2) {
    return 0;
  }
  uint64_t v7 = a1[5] + 1;
  a1[4] = v1 + 1;
  a1[5] = v7;
  ++a1[7];
  return 1;
}

uint64_t sub_2169C52C0(void *a1)
{
  if ((sub_2169C53A0(a1) & 1) == 0) {
    sub_2169C5340((uint64_t)a1);
  }
  if ((sub_2169C5F80(a1) & 1) == 0) {
    sub_2169C5F20((uint64_t)a1);
  }
  sub_2169C61A8((uint64_t)a1);
  if ((sub_2169C6338(a1) & 1) == 0) {
    sub_2169C62D8((uint64_t)a1);
  }
  return 1;
}

void sub_2169C5340(uint64_t a1)
{
}

void sub_2169C5354()
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "code should be unreachable: Control< T >::raise() did not throw an exception");
  __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
}

void sub_2169C538C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2169C53A0(void *a1)
{
  uint64_t v2 = sub_2169C4A88(a1);
  if (v2)
  {
    while ((sub_2169C53EC(a1) & 1) != 0)
      ;
  }
  return v2;
}

uint64_t sub_2169C53EC(void *a1)
{
  if (sub_2169C4D34(a1)) {
    return 1;
  }
  uint64_t v2 = (unsigned char *)a1[4];
  if (v2 != (unsigned char *)a1[8] && *v2 == 45)
  {
    uint64_t v3 = a1[5] + 1;
    a1[4] = v2 + 1;
    a1[5] = v3;
    ++a1[7];
    return 1;
  }
  return 0;
}

void sub_2169C5458(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x28uLL);
  sub_2169C5550(&v5);
  uint64_t v3 = std::string::insert(&v5, 0, "parse error matching ");
  long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  std::string::size_type v7 = v3->__r_.__value_.__r.__words[2];
  long long v6 = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  sub_2169C5604((uint64_t)exception, (uint64_t)&v6, a1);
  __cxa_throw(exception, (struct type_info *)&unk_26C7565C8, (void (*)(void *))sub_2169C5680);
}

void sub_2169C54F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void sub_2169C5550(void *a1@<X8>)
{
  uint64_t v2 = __cxa_demangle((const char *)(0x8000000217468D8BLL & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    uint64_t v3 = v2;
    sub_216779094(a1, v2);
    free(v3);
  }
  else
  {
    sub_216779094(a1, (char *)(0x8000000217468D8BLL & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_2169C55F0(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2169C5604(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_2169C56DC((uint64_t)&v6, a3 + 32, (long long *)(a3 + 72));
  sub_2169C5738(a1, a2, &v6);
  if (v8 < 0) {
    operator delete(__p);
  }
  return a1;
}

void sub_2169C5664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2169C5680(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&unk_26C7565F0;
  uint64_t v2 = (void **)&a1[1].__vftable;
  sub_2169C5E7C(&v2);
  std::runtime_error::~runtime_error(a1);
}

uint64_t sub_2169C56DC(uint64_t a1, uint64_t a2, long long *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 24);
  uint64_t v4 = a1 + 24;
  if (*((char *)a3 + 23) < 0)
  {
    sub_216778F24((unsigned char *)v4, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    *(void *)(v4 + 16) = *((void *)a3 + 2);
    *(_OWORD *)uint64_t v4 = v5;
  }
  return a1;
}

uint64_t sub_2169C5738(uint64_t a1, uint64_t a2, long long *a3)
{
  sub_2169C58B8((uint64_t)a3);
  long long v6 = std::string::append(&v14, ": ");
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  int v8 = *(char *)(a2 + 23);
  if (v8 >= 0) {
    uint64_t v9 = (const std::string::value_type *)a2;
  }
  else {
    uint64_t v9 = *(const std::string::value_type **)a2;
  }
  if (v8 >= 0) {
    std::string::size_type v10 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v10 = *(void *)(a2 + 8);
  }
  char v11 = std::string::append(&v15, v9, v10);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  std::runtime_error::runtime_error((std::runtime_error *)a1, &v16);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  *(void *)a1 = &unk_26C7565F0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  sub_2169C5A84((uint64_t *)(a1 + 16), a3);
  return a1;
}

void sub_2169C5850(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  sub_2169C5E7C((void ***)&__p);
  std::runtime_error::~runtime_error(v28);
  _Unwind_Resume(a1);
}

uint64_t sub_2169C58B8(uint64_t a1)
{
  sub_21677B834((uint64_t)v10);
  int v2 = *(char *)(a1 + 47);
  if (v2 >= 0) {
    uint64_t v3 = a1 + 24;
  }
  else {
    uint64_t v3 = *(void *)(a1 + 24);
  }
  if (v2 >= 0) {
    uint64_t v4 = *(unsigned __int8 *)(a1 + 47);
  }
  else {
    uint64_t v4 = *(void *)(a1 + 32);
  }
  long long v5 = sub_216779180(v10, v3, v4);
  char v13 = 58;
  sub_216779180(v5, (uint64_t)&v13, 1);
  long long v6 = (void *)std::ostream::operator<<();
  char v13 = 58;
  sub_216779180(v6, (uint64_t)&v13, 1);
  long long v7 = (void *)std::ostream::operator<<();
  char v13 = 40;
  sub_216779180(v7, (uint64_t)&v13, 1);
  int v8 = (void *)std::ostream::operator<<();
  char v13 = 41;
  sub_216779180(v8, (uint64_t)&v13, 1);
  std::stringbuf::str();
  v10[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v10 + *(void *)(v10[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v10[1] = MEMORY[0x263F8C318] + 16;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x21D447E60](&v12);
}

void sub_2169C5A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2169C5A84(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 4);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0x555555555555555) {
      sub_21677CB10();
    }
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 4);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v14 = 0x555555555555555;
    }
    else {
      unint64_t v14 = v12;
    }
    v20[4] = v4;
    if (v14) {
      std::string v15 = (char *)sub_2168073F4(v4, v14);
    }
    else {
      std::string v15 = 0;
    }
    std::string v16 = &v15[48 * v11];
    v20[0] = v15;
    v20[1] = v16;
    v20[3] = &v15[48 * v14];
    long long v17 = *a2;
    *((void *)v16 + 2) = *((void *)a2 + 2);
    *(_OWORD *)std::string v16 = v17;
    long long v18 = *(long long *)((char *)a2 + 24);
    *((void *)v16 + 5) = *((void *)a2 + 5);
    *(_OWORD *)(v16 + 24) = v18;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    _OWORD v20[2] = v16 + 48;
    sub_2169C5C44(a1, v20);
    uint64_t v10 = a1[1];
    sub_2169C5DEC((uint64_t)v20);
  }
  else
  {
    long long v8 = *a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v7 = v8;
    long long v9 = *(long long *)((char *)a2 + 24);
    *(void *)(v7 + 40) = *((void *)a2 + 5);
    *(_OWORD *)(v7 + 24) = v9;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    uint64_t v10 = v7 + 48;
    a1[1] = v7 + 48;
  }
  a1[1] = v10;
  return v10 - 48;
}

void sub_2169C5BD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2169C5DEC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2169C5BE4(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&unk_26C7565F0;
  uint64_t v3 = (void **)&a1[1].__vftable;
  sub_2169C5E7C(&v3);
  std::runtime_error::~runtime_error(a1);
  operator delete(v2);
}

uint64_t sub_2169C5C44(uint64_t *a1, void *a2)
{
  uint64_t result = sub_2169C5CBC((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_2169C5CBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 48);
      *(void *)(v9 - 32) = *(void *)(a3 - 32);
      *(_OWORD *)(v9 - 48) = v10;
      long long v11 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v11;
      v9 -= 48;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 48;
      a3 -= 48;
    }
    while (a3 != a5);
    *((void *)&v16 + 1) = v9;
  }
  char v14 = 1;
  sub_2169C5D6C((uint64_t)v13);
  return a6;
}

uint64_t sub_2169C5D6C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_2169C5DA4(a1);
  }
  return a1;
}

void sub_2169C5DA4(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 47) < 0) {
      operator delete(*(void **)(v1 + 24));
    }
    v1 += 48;
  }
}

uint64_t sub_2169C5DEC(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_2169C5E24(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 48;
      *(void *)(a1 + 16) = v2 - 48;
      if (*(char *)(v2 - 1) < 0)
      {
        operator delete(*(void **)(v2 - 24));
        uint64_t v5 = *(void *)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

void sub_2169C5E7C(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_2169C5ED0((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_2169C5ED0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 48)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

void sub_2169C5F20(uint64_t a1)
{
}

void sub_2169C5F34()
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "code should be unreachable: Control< T >::raise() did not throw an exception");
  __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
}

void sub_2169C5F6C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2169C5F80(void *a1)
{
  while ((sub_2169C5224(a1) & 1) != 0)
    ;
  uint64_t v2 = (unsigned char *)a1[4];
  if (v2 == (unsigned char *)a1[8] || *v2 != 61) {
    return 0;
  }
  uint64_t v3 = a1[5] + 1;
  a1[4] = v2 + 1;
  a1[5] = v3;
  ++a1[7];
  while ((sub_2169C5224(a1) & 1) != 0)
    ;
  return 1;
}

void sub_2169C5FFC(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x28uLL);
  sub_2169C60F4(&v5);
  uint64_t v3 = std::string::insert(&v5, 0, "parse error matching ");
  long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  std::string::size_type v7 = v3->__r_.__value_.__r.__words[2];
  long long v6 = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  sub_2169C5604((uint64_t)exception, (uint64_t)&v6, a1);
  __cxa_throw(exception, (struct type_info *)&unk_26C7565C8, (void (*)(void *))sub_2169C5680);
}

void sub_2169C6094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void sub_2169C60F4(void *a1@<X8>)
{
  uint64_t v2 = __cxa_demangle((const char *)(0x8000000217468DD0 & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    uint64_t v3 = v2;
    sub_216779094(a1, v2);
    free(v3);
  }
  else
  {
    sub_216779094(a1, (char *)(0x8000000217468DD0 & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_2169C6194(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2169C61A8(uint64_t a1)
{
  long long v4 = *(_OWORD *)(a1 + 32);
  if ((void)v4 != *(void *)(a1 + 64) && *(unsigned char *)v4 == 46)
  {
    uint64_t v2 = *(void *)(a1 + 40) + 1;
    *(void *)(a1 + 32) = v4 + 1;
    *(void *)(a1 + 40) = v2;
    ++*(void *)(a1 + 56);
  }
  do
  {
    while ((sub_2169C4D34((void *)a1) & 1) != 0)
      ;
  }
  while ((sub_2169C623C((void *)a1) & 1) != 0);
  return 1;
}

void sub_2169C6230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10)
{
  _OWORD *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

uint64_t sub_2169C623C(void *a1)
{
  uint64_t v1 = (char *)a1[4];
  if (v1 == (char *)a1[8]) {
    return 0;
  }
  int v3 = *v1;
  __int16 __s = 11644;
  long long v4 = (uint64_t *)memchr(&__s, v3, 2uLL);
  std::string v5 = (char *)(v4 ? v4 : &v9);
  if (v5 - (char *)&__s == 2) {
    return 0;
  }
  uint64_t v7 = a1[5] + 1;
  a1[4] = v1 + 1;
  a1[5] = v7;
  ++a1[7];
  return 1;
}

void sub_2169C62D8(uint64_t a1)
{
}

void sub_2169C62EC()
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "code should be unreachable: Control< T >::raise() did not throw an exception");
  __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
}

void sub_2169C6324(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2169C6338(void *a1)
{
  while ((sub_2169C5224(a1) & 1) != 0)
    ;
  uint64_t v2 = (unsigned char *)a1[4];
  if (v2 == (unsigned char *)a1[8] || *v2 != 125) {
    return 0;
  }
  uint64_t v3 = a1[5] + 1;
  a1[4] = v2 + 1;
  a1[5] = v3;
  ++a1[7];
  while ((sub_2169C5224(a1) & 1) != 0)
    ;
  return 1;
}

void sub_2169C63B4(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x28uLL);
  sub_2169C64AC(&v5);
  uint64_t v3 = std::string::insert(&v5, 0, "parse error matching ");
  long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  std::string::size_type v7 = v3->__r_.__value_.__r.__words[2];
  long long v6 = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  sub_2169C5604((uint64_t)exception, (uint64_t)&v6, a1);
  __cxa_throw(exception, (struct type_info *)&unk_26C7565C8, (void (*)(void *))sub_2169C5680);
}

void sub_2169C644C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void sub_2169C64AC(void *a1@<X8>)
{
  uint64_t v2 = __cxa_demangle((const char *)(0x8000000217468E1ALL & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    uint64_t v3 = v2;
    sub_216779094(a1, v2);
    free(v3);
  }
  else
  {
    sub_216779094(a1, (char *)(0x8000000217468E1ALL & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_2169C654C(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2169C6560(void *a1)
{
  sub_2169C65AC((uint64_t)a1);
  if (v2)
  {
    do
    {
      sub_2169C6644(a1);
      sub_2169C65AC((uint64_t)a1);
    }
    while ((v3 & 1) != 0);
  }
  return 1;
}

__n128 sub_2169C65AC(uint64_t a1)
{
  int v2 = (__n128 *)(a1 + 32);
  __n128 v6 = *(__n128 *)(a1 + 32);
  __n128 v7 = *(__n128 *)(a1 + 48);
  while ((sub_2169C5224((void *)a1) & 1) != 0)
    ;
  char v3 = *(unsigned char **)(a1 + 32);
  if (v3 == *(unsigned char **)(a1 + 64) || *v3 != 123)
  {
    __n128 result = v6;
    *int v2 = v6;
    v2[1] = v7;
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 40) + 1;
    *(void *)(a1 + 32) = v3 + 1;
    *(void *)(a1 + 40) = v4;
    ++*(void *)(a1 + 56);
    while ((sub_2169C5224((void *)a1) & 1) != 0)
      ;
  }
  return result;
}

uint64_t sub_2169C6644(void *a1)
{
  if ((sub_2169C53A0(a1) & 1) == 0) {
    sub_2169C5340((uint64_t)a1);
  }
  if ((sub_2169C5F80(a1) & 1) == 0) {
    sub_2169C5F20((uint64_t)a1);
  }
  sub_2169C61A8((uint64_t)a1);
  if ((sub_2169C6338(a1) & 1) == 0) {
    sub_2169C62D8((uint64_t)a1);
  }
  return 1;
}

void sub_2169C66E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10)
{
  _OWORD *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

uint64_t sub_2169C66EC(void *a1, uint64_t a2)
{
  int v2 = (unsigned char *)a1[4];
  if (v2 == (unsigned char *)a1[8] || *v2 != 47) {
    return sub_2169C6730((uint64_t)a1, a2);
  }
  uint64_t v3 = a1[5] + 1;
  a1[4] = v2 + 1;
  a1[5] = v3;
  ++a1[7];
  return 1;
}

uint64_t sub_2169C6730(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2169C677C(a1, a2);
  if (v4)
  {
    while ((sub_2169C6CB0(a1, a2) & 1) != 0)
      ;
  }
  return v4;
}

uint64_t sub_2169C677C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (_OWORD *)(a1 + 32);
  long long v7 = *(_OWORD *)(a1 + 32);
  long long v8 = *(_OWORD *)(a1 + 48);
  uint64_t v5 = sub_2169C51A8((void *)a1);
  if (v5)
  {
    sub_2169C680C((void *)a1, a2);
    v9[0] = v7;
    v9[1] = v8;
    uint64_t v10 = a1 + 24;
    sub_2169C6BF0((uint64_t)v9, a2);
  }
  else
  {
    _OWORD *v4 = v7;
    v4[1] = v8;
  }
  return v5;
}

void sub_2169C6800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10)
{
  _OWORD *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

uint64_t sub_2169C680C(void *a1, uint64_t a2)
{
  if ((sub_2169C68EC((uint64_t)a1, a2) & 1) == 0) {
    sub_2169C688C((uint64_t)a1);
  }
  if ((sub_2169C5F80(a1) & 1) == 0) {
    sub_2169C69D4((uint64_t)a1);
  }
  sub_2169C6A34((uint64_t)a1, a2);
  if ((sub_2169C6338(a1) & 1) == 0) {
    sub_2169C6B90((uint64_t)a1);
  }
  return 1;
}

void sub_2169C688C(uint64_t a1)
{
}

void sub_2169C68A0()
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "code should be unreachable: Control< T >::raise() did not throw an exception");
  __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
}

void sub_2169C68D8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2169C68EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (_OWORD *)(a1 + 32);
  long long v7 = *(_OWORD *)(a1 + 32);
  long long v8 = *(_OWORD *)(a1 + 48);
  uint64_t v5 = sub_2169C53A0((void *)a1);
  if (v5)
  {
    v9[0] = v7;
    v9[1] = v8;
    uint64_t v10 = a1 + 24;
    sub_2169C6970((uint64_t)v9, a2);
  }
  else
  {
    _OWORD *v4 = v7;
    v4[1] = v8;
  }
  return v5;
}

void sub_2169C6964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10)
{
  _OWORD *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

double sub_2169C6970(uint64_t a1, uint64_t a2)
{
  sub_21682E90C(&v5, *(char **)a1, *(char **)(*(void *)(a1 + 32) + 8), *(void *)(*(void *)(a1 + 32) + 8) - *(void *)a1);
  uint64_t v3 = (void **)(a2 + 32);
  if (*(char *)(a2 + 55) < 0) {
    operator delete(*v3);
  }
  double result = *(double *)&v5;
  *(_OWORD *)uint64_t v3 = v5;
  *(void *)(a2 + 48) = v6;
  return result;
}

void sub_2169C69D4(uint64_t a1)
{
}

void sub_2169C69E8()
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "code should be unreachable: Control< T >::raise() did not throw an exception");
  __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
}

void sub_2169C6A20(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2169C6A34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (_OWORD *)(a1 + 32);
  long long v7 = *(_OWORD *)(a1 + 32);
  long long v8 = *(_OWORD *)(a1 + 48);
  uint64_t v5 = sub_2169C6AB8((void *)a1);
  if (v5)
  {
    v9[0] = v7;
    v9[1] = v8;
    uint64_t v10 = a1 + 24;
    sub_2169C6B2C((uint64_t)v9, a2);
  }
  else
  {
    _OWORD *v4 = v7;
    v4[1] = v8;
  }
  return v5;
}

void sub_2169C6AAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10)
{
  _OWORD *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

uint64_t sub_2169C6AB8(void *a1)
{
  int v2 = (unsigned char *)a1[4];
  if (v2 != (unsigned char *)a1[8] && *v2 == 46)
  {
    uint64_t v3 = a1[5] + 1;
    a1[4] = v2 + 1;
    a1[5] = v3;
    ++a1[7];
  }
  do
  {
    while ((sub_2169C4D34(a1) & 1) != 0)
      ;
  }
  while ((sub_2169C623C(a1) & 1) != 0);
  return 1;
}

double sub_2169C6B2C(uint64_t a1, uint64_t a2)
{
  sub_21682E90C(&v5, *(char **)a1, *(char **)(*(void *)(a1 + 32) + 8), *(void *)(*(void *)(a1 + 32) + 8) - *(void *)a1);
  uint64_t v3 = (void **)(a2 + 56);
  if (*(char *)(a2 + 79) < 0) {
    operator delete(*v3);
  }
  double result = *(double *)&v5;
  *(_OWORD *)uint64_t v3 = v5;
  *(void *)(a2 + 72) = v6;
  return result;
}

void sub_2169C6B90(uint64_t a1)
{
}

void sub_2169C6BA4()
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "code should be unreachable: Control< T >::raise() did not throw an exception");
  __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
}

void sub_2169C6BDC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_2169C6BF0(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendVariantSelection((_DWORD *)(*(void *)(a2 + 8) - 8), a2 + 32, a2 + 56, &v5);
  uint64_t v3 = *(void *)(a2 + 8);
  sub_21697DE94((int *)(v3 - 8), &v5);
  sub_21697DEEC((int *)(v3 - 4), &v6);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v6);
  double result = sub_21697C414(&v5);
  if (*(char *)(a2 + 55) < 0)
  {
    **(unsigned char **)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
  }
  else
  {
    *(unsigned char *)(a2 + 32) = 0;
    *(unsigned char *)(a2 + 55) = 0;
  }
  if (*(char *)(a2 + 79) < 0)
  {
    **(unsigned char **)(a2 + 56) = 0;
    *(void *)(a2 + 64) = 0;
  }
  else
  {
    *(unsigned char *)(a2 + 56) = 0;
    *(unsigned char *)(a2 + 79) = 0;
  }
  return result;
}

uint64_t sub_2169C6CB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (_OWORD *)(a1 + 32);
  long long v7 = *(_OWORD *)(a1 + 32);
  long long v8 = *(_OWORD *)(a1 + 48);
  uint64_t v5 = sub_2169C51A8((void *)a1);
  if (v5)
  {
    sub_2169C680C((void *)a1, a2);
    v9[0] = v7;
    v9[1] = v8;
    uint64_t v10 = a1 + 24;
    sub_2169C6BF0((uint64_t)v9, a2);
  }
  else
  {
    _OWORD *v4 = v7;
    v4[1] = v8;
  }
  return v5;
}

void sub_2169C6D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10)
{
  _OWORD *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

uint64_t sub_2169C6D40(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2169C6CB0(a1, a2);
  if (v4)
  {
    while ((sub_2169C6CB0(a1, a2) & 1) != 0)
      ;
  }
  return v4;
}

__n128 sub_2169C6D8C(uint64_t a1, uint64_t *a2)
{
  int v2 = (__n128 *)(a1 + 32);
  __n128 v7 = *(__n128 *)(a1 + 32);
  __n128 v8 = *(__n128 *)(a1 + 48);
  if (v7.n128_u64[0] != *(void *)(a1 + 64)
    && *(unsigned char *)v7.n128_u64[0] == 46
    && (uint64_t v5 = *(void *)(a1 + 40) + 1,
        *(void *)(a1 + 32) = v7.n128_u64[0] + 1,
        *(void *)(a1 + 40) = v5,
        ++*(void *)(a1 + 56),
        sub_2169C6E38(a1, (uint64_t)a2)))
  {
    sub_2169C70B4((void *)a1, a2);
  }
  else
  {
    __n128 result = v7;
    *int v2 = v7;
    v2[1] = v8;
  }
  return result;
}

void sub_2169C6E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10)
{
  _OWORD *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

uint64_t sub_2169C6E38(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (_OWORD *)(a1 + 32);
  long long v7 = *(_OWORD *)(a1 + 32);
  long long v8 = *(_OWORD *)(a1 + 48);
  uint64_t v5 = sub_2169C6EBC((__n128 *)a1);
  if (v5)
  {
    v9[0] = v7;
    v9[1] = v8;
    uint64_t v10 = a1 + 24;
    sub_2169C6FB8((uint64_t)v9, a2);
  }
  else
  {
    _OWORD *v4 = v7;
    v4[1] = v8;
  }
  return v5;
}

void sub_2169C6EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10)
{
  _OWORD *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

uint64_t sub_2169C6EBC(__n128 *a1)
{
  uint64_t v2 = sub_2169C4A88(a1);
  if (v2)
  {
    while ((sub_2169C4D34(a1) & 1) != 0)
      ;
    do
      sub_2169C6F14(a1);
    while ((v3 & 1) != 0);
  }
  return v2;
}

__n128 sub_2169C6F14(__n128 *a1)
{
  uint64_t v1 = a1 + 2;
  __n128 v5 = a1[2];
  __n128 v6 = a1[3];
  if (v5.n128_u64[0] != a1[4].n128_u64[0]
    && *(unsigned char *)v5.n128_u64[0] == 58
    && (uint64_t v3 = a1[2].n128_u64[1] + 1,
        a1[2].n128_u64[0] = v5.n128_u64[0] + 1,
        a1[2].n128_u64[1] = v3,
        ++a1[3].n128_u64[1],
        sub_2169C4A88(a1)))
  {
    while ((sub_2169C4D34(a1) & 1) != 0)
      ;
  }
  else
  {
    __n128 result = v5;
    *uint64_t v1 = v5;
    v1[1] = v6;
  }
  return result;
}

void sub_2169C6FA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10)
{
  _OWORD *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

_DWORD *sub_2169C6FB8(uint64_t a1, uint64_t a2)
{
  BOOL v4 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(*(void *)(a2 + 8) - 8));
  if (!v4)
  {
    __n128 v5 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::ReflexiveRelativePath((pxrInternal__aapl__pxrReserved__::SdfPath *)v4);
    uint64_t v6 = *(void *)(a2 + 8);
    sub_2169C487C((int *)(v6 - 8), v5);
    sub_2169C48D4((int *)(v6 - 4), v5 + 1);
  }
  long long v7 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(*(void *)(a2 + 8) - 8);
  sub_2169C4E90(a1, &v10);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(v7, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v10, &v11);
  uint64_t v8 = *(void *)(a2 + 8);
  sub_21697DE94((int *)(v8 - 8), &v11);
  sub_21697DEEC((int *)(v8 - 4), &v12);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  __n128 result = sub_21697C414(&v11);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

uint64_t sub_2169C70B4(void *a1, uint64_t *a2)
{
  if (sub_2169C7124((uint64_t)a1, a2)) {
    return 1;
  }
  sub_2169C8134((uint64_t)a1);
  if (v4)
  {
    sub_2169C82DC((uint64_t)a1, a2);
    return 1;
  }

  return sub_2169C8AE0(a1, (uint64_t)a2);
}

uint64_t sub_2169C7124(uint64_t a1, uint64_t *a2)
{
  int v4 = (_OWORD *)(a1 + 32);
  long long v7 = *(_OWORD *)(a1 + 32);
  long long v8 = *(_OWORD *)(a1 + 48);
  uint64_t v5 = sub_2169C71A4(a1, a2);
  if (v5)
  {
    sub_2169C7388(a1, (uint64_t)a2);
    sub_2169C7B60((void *)a1, a2);
  }
  else
  {
    _OWORD *v4 = v7;
    v4[1] = v8;
  }
  return v5;
}

void sub_2169C7198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10)
{
  _OWORD *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

uint64_t sub_2169C71A4(uint64_t a1, uint64_t *a2)
{
  long long v4 = *(_OWORD *)(a1 + 32);
  long long v5 = *(_OWORD *)(a1 + 48);
  if ((void)v4 == *(void *)(a1 + 64) || *(unsigned char *)v4 != 91) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 40) + 1;
  *(void *)(a1 + 32) = v4 + 1;
  *(void *)(a1 + 40) = v2;
  ++*(void *)(a1 + 56);
  v6[0] = v4;
  v6[1] = v5;
  uint64_t v7 = a1 + 24;
  sub_2169C723C((uint64_t)v6, a2);
  return 1;
}

void sub_2169C7230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10)
{
  _OWORD *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

uint64_t sub_2169C723C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = (_DWORD *)a2[1];
  if ((unint64_t)v3 >= a2[2])
  {
    uint64_t result = sub_2169C7298(a2);
    long long v4 = (_DWORD *)result;
  }
  else
  {
    *(void *)uint64_t v3 = 0;
    long long v4 = v3 + 2;
    long long v5 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(v3);
    uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(v5 + 1);
  }
  a2[1] = (uint64_t)v4;
  return result;
}

uint64_t sub_2169C7298(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (a1[1] - *a1) >> 3;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 61) {
    sub_21677CB10();
  }
  uint64_t v5 = (uint64_t)(a1 + 2);
  uint64_t v6 = a1[2] - v2;
  if (v6 >> 2 > v4) {
    unint64_t v4 = v6 >> 2;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v7 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  void v12[4] = a1 + 2;
  if (v7) {
    long long v8 = (char *)sub_21677CB28(v5, v7);
  }
  else {
    long long v8 = 0;
  }
  uint64_t v9 = &v8[8 * v3];
  v12[0] = v8;
  v12[1] = v9;
  void v12[3] = &v8[8 * v7];
  *(void *)uint64_t v9 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(v9);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v9 + 1);
  void v12[2] = v9 + 8;
  sub_216981C20(a1, v12);
  uint64_t v10 = a1[1];
  sub_216981DDC(v12);
  return v10;
}

void sub_2169C7374(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216981DDC((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2169C7388(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (_OWORD *)(a1 + 32);
  long long v7 = *(_OWORD *)(a1 + 32);
  long long v8 = *(_OWORD *)(a1 + 48);
  if (!sub_2169C7478(a1, a2))
  {
    _OWORD *v4 = v7;
    v4[1] = v8;
    sub_2169C7418(a1);
  }
  *(_DWORD *)(a2 + 24) = 0;
  char v5 = sub_2169C77E0(a1, a2);
  if ((v5 & 1) == 0) {
    sub_2169C7780(a1);
  }
  return 1;
}

void sub_2169C740C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10)
{
  _OWORD *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

void sub_2169C7418(uint64_t a1)
{
}

void sub_2169C742C()
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "code should be unreachable: Control< T >::raise() did not throw an exception");
  __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
}

void sub_2169C7464(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2169C7478(uint64_t a1, uint64_t a2)
{
  if (sub_2169C4720()) {
    return 1;
  }
  if (sub_2169C8F5C(a1, a2)) {
    return 1;
  }
  sub_2169C9418(a1, a2);
  if (v4) {
    return 1;
  }

  return sub_2169C74EC(a1, a2);
}

uint64_t sub_2169C74EC(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a1 + 32);
  long long v5 = *(_OWORD *)(a1 + 48);
  if ((void)v4 == *(void *)(a1 + 64) || *(unsigned char *)v4 != 46) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 40) + 1;
  *(void *)(a1 + 32) = v4 + 1;
  *(void *)(a1 + 40) = v2;
  ++*(void *)(a1 + 56);
  v6[0] = v4;
  v6[1] = v5;
  uint64_t v7 = a1 + 24;
  sub_2169C7584((pxrInternal__aapl__pxrReserved__::SdfPath *)v6, a2);
  return 1;
}

void sub_2169C7578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10)
{
  _OWORD *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

int *sub_2169C7584(pxrInternal__aapl__pxrReserved__::SdfPath *a1, uint64_t a2)
{
  uint64_t v3 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::ReflexiveRelativePath(a1);
  uint64_t v4 = *(void *)(a2 + 8);
  sub_2169C487C((int *)(v4 - 8), v3);

  return sub_2169C48D4((int *)(v4 - 4), v3 + 1);
}

void sub_2169C75D4(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x28uLL);
  sub_2169C76CC(&v5);
  uint64_t v3 = std::string::insert(&v5, 0, "parse error matching ");
  long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  std::string::size_type v7 = v3->__r_.__value_.__r.__words[2];
  long long v6 = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  sub_2169C5604((uint64_t)exception, (uint64_t)&v6, a1);
  __cxa_throw(exception, (struct type_info *)&unk_26C7565C8, (void (*)(void *))sub_2169C5680);
}

void sub_2169C766C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void sub_2169C76CC(void *a1@<X8>)
{
  uint64_t v2 = __cxa_demangle((const char *)(0x8000000217468E5CLL & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    uint64_t v3 = v2;
    sub_216779094(a1, v2);
    free(v3);
  }
  else
  {
    sub_216779094(a1, (char *)(0x8000000217468E5CLL & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_2169C776C(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

void sub_2169C7780(uint64_t a1)
{
}

void sub_2169C7794()
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "code should be unreachable: Control< T >::raise() did not throw an exception");
  __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
}

void sub_2169C77CC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2169C77E0(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a1 + 32);
  long long v5 = *(_OWORD *)(a1 + 48);
  if ((void)v4 == *(void *)(a1 + 64) || *(unsigned char *)v4 != 93) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 40) + 1;
  *(void *)(a1 + 32) = v4 + 1;
  *(void *)(a1 + 40) = v2;
  ++*(void *)(a1 + 56);
  v6[0] = v4;
  v6[1] = v5;
  uint64_t v7 = a1 + 24;
  sub_2169C7878((uint64_t)v6, a2);
  return 1;
}

void sub_2169C786C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10)
{
  _OWORD *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

_DWORD *sub_2169C7878(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  int v10 = *(_DWORD *)(v3 - 8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(v3 - 8));
  int v11 = *(_DWORD *)(v3 - 4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(v3 - 4));
  uint64_t v4 = *(void *)(a2 + 8);
  sub_216981128(a2 + 16, (_DWORD *)(v4 - 8));
  *(void *)(a2 + 8) = v4 - 8;
  long long v5 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v4 - 16);
  if (*(_DWORD *)(a2 + 24)) {
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendMapper(v5, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v10, &v8);
  }
  else {
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget(v5, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v10, &v8);
  }
  uint64_t v6 = *(void *)(a2 + 8);
  sub_21697DE94((int *)(v6 - 8), &v8);
  sub_21697DEEC((int *)(v6 - 4), &v9);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_21697C414(&v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
  return sub_21697C414(&v10);
}

void sub_2169C798C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

void sub_2169C79B4(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x28uLL);
  sub_2169C7AAC(&v5);
  uint64_t v3 = std::string::insert(&v5, 0, "parse error matching ");
  long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  std::string::size_type v7 = v3->__r_.__value_.__r.__words[2];
  long long v6 = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  sub_2169C5604((uint64_t)exception, (uint64_t)&v6, a1);
  __cxa_throw(exception, (struct type_info *)&unk_26C7565C8, (void (*)(void *))sub_2169C5680);
}

void sub_2169C7A4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void sub_2169C7AAC(void *a1@<X8>)
{
  uint64_t v2 = __cxa_demangle((const char *)(0x8000000217468ED7 & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    uint64_t v3 = v2;
    sub_216779094(a1, v2);
    free(v3);
  }
  else
  {
    sub_216779094(a1, (char *)(0x8000000217468ED7 & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_2169C7B4C(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2169C7B60(void *a1, uint64_t *a2)
{
  uint64_t v2 = (unsigned char *)a1[4];
  if (v2 == (unsigned char *)a1[8] || *v2 != 46) {
    return 0;
  }
  uint64_t v3 = a1[5] + 1;
  a1[4] = v2 + 1;
  a1[5] = v3;
  ++a1[7];
  sub_2169C7BBC(a1, a2);
  return 1;
}

uint64_t sub_2169C7BBC(void *a1, uint64_t *a2)
{
  if ((sub_2169C7C8C((uint64_t)a1, (uint64_t)a2) & 1) == 0) {
    sub_2169C7C2C((uint64_t)a1);
  }
  sub_2169C7F78(a1, a2);
  return 1;
}

void sub_2169C7C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10)
{
  _OWORD *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

void sub_2169C7C2C(uint64_t a1)
{
}

void sub_2169C7C40()
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "code should be unreachable: Control< T >::raise() did not throw an exception");
  __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
}

void sub_2169C7C78(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2169C7C8C(uint64_t a1, uint64_t a2)
{
  long long v4 = (_OWORD *)(a1 + 32);
  long long v7 = *(_OWORD *)(a1 + 32);
  long long v8 = *(_OWORD *)(a1 + 48);
  uint64_t v5 = sub_2169C6EBC((__n128 *)a1);
  if (v5)
  {
    v9[0] = v7;
    v9[1] = v8;
    uint64_t v10 = a1 + 24;
    sub_2169C7D10((uint64_t)v9, a2);
  }
  else
  {
    _OWORD *v4 = v7;
    v4[1] = v8;
  }
  return v5;
}

void sub_2169C7D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10)
{
  _OWORD *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

_DWORD *sub_2169C7D10(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(*(void *)(a2 + 8) - 8);
  sub_2169C4E90(a1, &v6);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendRelationalAttribute(v3, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v6, &v7);
  uint64_t v4 = *(void *)(a2 + 8);
  sub_21697DE94((int *)(v4 - 8), &v7);
  sub_21697DEEC((int *)(v4 - 4), &v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  uint64_t result = sub_21697C414(&v7);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void sub_2169C7DCC(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x28uLL);
  sub_2169C7EC4(&v5);
  uint64_t v3 = std::string::insert(&v5, 0, "parse error matching ");
  long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  std::string::size_type v7 = v3->__r_.__value_.__r.__words[2];
  long long v6 = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  sub_2169C5604((uint64_t)exception, (uint64_t)&v6, a1);
  __cxa_throw(exception, (struct type_info *)&unk_26C7565C8, (void (*)(void *))sub_2169C5680);
}

void sub_2169C7E64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void sub_2169C7EC4(void *a1@<X8>)
{
  uint64_t v2 = __cxa_demangle((const char *)(0x8000000217468F1DLL & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    uint64_t v3 = v2;
    sub_216779094(a1, v2);
    free(v3);
  }
  else
  {
    sub_216779094(a1, (char *)(0x8000000217468F1DLL & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_2169C7F64(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2169C7F78(void *a1, uint64_t *a2)
{
  if (sub_2169C7FF8((uint64_t)a1, a2))
  {
    sub_2169C8090((uint64_t)a1, (uint64_t)a2);
    return 1;
  }
  sub_2169C8134((uint64_t)a1);
  if (v4)
  {
    sub_2169C82DC((uint64_t)a1, a2);
    return 1;
  }

  return sub_2169C8AE0(a1, (uint64_t)a2);
}

uint64_t sub_2169C7FF8(uint64_t a1, uint64_t *a2)
{
  long long v4 = *(_OWORD *)(a1 + 32);
  long long v5 = *(_OWORD *)(a1 + 48);
  if ((void)v4 == *(void *)(a1 + 64) || *(unsigned char *)v4 != 91) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 40) + 1;
  *(void *)(a1 + 32) = v4 + 1;
  *(void *)(a1 + 40) = v2;
  ++*(void *)(a1 + 56);
  v6[0] = v4;
  v6[1] = v5;
  uint64_t v7 = a1 + 24;
  sub_2169C723C((uint64_t)v6, a2);
  return 1;
}

void sub_2169C8084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10)
{
  _OWORD *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

uint64_t sub_2169C8090(uint64_t a1, uint64_t a2)
{
  long long v4 = (_OWORD *)(a1 + 32);
  long long v7 = *(_OWORD *)(a1 + 32);
  long long v8 = *(_OWORD *)(a1 + 48);
  if (!sub_2169C7478(a1, a2))
  {
    _OWORD *v4 = v7;
    v4[1] = v8;
    sub_2169C7418(a1);
  }
  *(_DWORD *)(a2 + 24) = 0;
  char v5 = sub_2169C77E0(a1, a2);
  if ((v5 & 1) == 0) {
    sub_2169C7780(a1);
  }
  return 1;
}

void sub_2169C811C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10, long long a11, long long a12)
{
  _OWORD *v12 = a11;
  v12[1] = a12;
  _OWORD *v12 = a9;
  v12[1] = a10;
  _Unwind_Resume(a1);
}

__n128 sub_2169C8134(uint64_t a1)
{
  uint64_t v1 = (__n128 *)(a1 + 32);
  __n128 v5 = *(__n128 *)(a1 + 32);
  __n128 v6 = *(__n128 *)(a1 + 48);
  if (v5.n128_u64[0] == *(void *)(a1 + 64)
    || *(unsigned char *)v5.n128_u64[0] != 46
    || (uint64_t v2 = *(void *)(a1 + 40) + 1,
        *(void *)(a1 + 32) = v5.n128_u64[0] + 1,
        *(void *)(a1 + 40) = v2,
        ++*(void *)(a1 + 56),
        result.n128_u64[0] = sub_2169C81C4(a1).n128_u64[0],
        (v4 & 1) == 0))
  {
    __n128 result = v5;
    *uint64_t v1 = v5;
    v1[1] = v6;
  }
  return result;
}

void sub_2169C81B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10)
{
  _OWORD *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

__n128 sub_2169C81C4(uint64_t a1)
{
  if (sub_2169C8210((void *)a1))
  {
    __n128 v3 = *(__n128 *)(a1 + 32);
    long long v4 = *(_OWORD *)(a1 + 48);
    sub_2169C827C((void *)a1);
    __n128 result = v3;
    *(__n128 *)(a1 + 32) = v3;
    *(_OWORD *)(a1 + 48) = v4;
  }
  return result;
}

uint64_t sub_2169C8210(void *a1)
{
  uint64_t v1 = a1[4];
  if ((unint64_t)(a1[8] - v1) < 6) {
    return 0;
  }
  if (*(_DWORD *)v1 != 1886413165 || *(_WORD *)(v1 + 4) != 29285) {
    return 0;
  }
  uint64_t v4 = a1[5] + 6;
  a1[4] = v1 + 6;
  a1[5] = v4;
  a1[7] += 6;
  return 1;
}

uint64_t sub_2169C827C(void *a1)
{
  uint64_t v1 = (unsigned __int8 *)a1[4];
  if (v1 == (unsigned __int8 *)a1[8]) {
    return 0;
  }
  int v2 = *v1;
  if ((v2 & 0xFFFFFFDF) - 65 >= 0x1A && v2 != 95 && (v2 - 48) > 9) {
    return 0;
  }
  uint64_t v4 = a1[5] + 1;
  a1[4] = v1 + 1;
  a1[5] = v4;
  ++a1[7];
  return 1;
}

uint64_t sub_2169C82DC(uint64_t a1, uint64_t *a2)
{
  if (!sub_2169C83BC(a1, a2)) {
    sub_2169C835C(a1);
  }
  sub_2169C8454(a1, (uint64_t)a2);
  sub_2169C88A0(a1, (uint64_t)a2);
  return 1;
}

void sub_2169C8350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10)
{
  _OWORD *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

void sub_2169C835C(uint64_t a1)
{
}

void sub_2169C8370()
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "code should be unreachable: Control< T >::raise() did not throw an exception");
  __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
}

void sub_2169C83A8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2169C83BC(uint64_t a1, uint64_t *a2)
{
  long long v4 = *(_OWORD *)(a1 + 32);
  long long v5 = *(_OWORD *)(a1 + 48);
  if ((void)v4 == *(void *)(a1 + 64) || *(unsigned char *)v4 != 91) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 40) + 1;
  *(void *)(a1 + 32) = v4 + 1;
  *(void *)(a1 + 40) = v2;
  ++*(void *)(a1 + 56);
  v6[0] = v4;
  v6[1] = v5;
  uint64_t v7 = a1 + 24;
  sub_2169C723C((uint64_t)v6, a2);
  return 1;
}

void sub_2169C8448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10)
{
  _OWORD *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

uint64_t sub_2169C8454(uint64_t a1, uint64_t a2)
{
  long long v4 = (_OWORD *)(a1 + 32);
  long long v7 = *(_OWORD *)(a1 + 32);
  long long v8 = *(_OWORD *)(a1 + 48);
  if (!sub_2169C7478(a1, a2))
  {
    _OWORD *v4 = v7;
    v4[1] = v8;
    sub_2169C84E8(a1);
  }
  *(_DWORD *)(a2 + 24) = 1;
  char v5 = sub_2169C77E0(a1, a2);
  if ((v5 & 1) == 0) {
    sub_2169C7780(a1);
  }
  return 1;
}

void sub_2169C84DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10)
{
  _OWORD *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

void sub_2169C84E8(uint64_t a1)
{
}

void sub_2169C84FC()
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "code should be unreachable: Control< T >::raise() did not throw an exception");
  __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
}

void sub_2169C8534(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_2169C8548(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x28uLL);
  sub_2169C8640(&v5);
  __n128 v3 = std::string::insert(&v5, 0, "parse error matching ");
  long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  std::string::size_type v7 = v3->__r_.__value_.__r.__words[2];
  long long v6 = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  sub_2169C5604((uint64_t)exception, (uint64_t)&v6, a1);
  __cxa_throw(exception, (struct type_info *)&unk_26C7565C8, (void (*)(void *))sub_2169C5680);
}

void sub_2169C85E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void sub_2169C8640(void *a1@<X8>)
{
  uint64_t v2 = __cxa_demangle((const char *)(0x8000000217468F6BLL & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    __n128 v3 = v2;
    sub_216779094(a1, v2);
    free(v3);
  }
  else
  {
    sub_216779094(a1, (char *)(0x8000000217468F6BLL & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_2169C86E0(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

void sub_2169C86F4(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x28uLL);
  sub_2169C87EC(&v5);
  __n128 v3 = std::string::insert(&v5, 0, "parse error matching ");
  long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  std::string::size_type v7 = v3->__r_.__value_.__r.__words[2];
  long long v6 = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  sub_2169C5604((uint64_t)exception, (uint64_t)&v6, a1);
  __cxa_throw(exception, (struct type_info *)&unk_26C7565C8, (void (*)(void *))sub_2169C5680);
}

void sub_2169C878C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void sub_2169C87EC(void *a1@<X8>)
{
  uint64_t v2 = __cxa_demangle((const char *)(0x8000000217468FACLL & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    __n128 v3 = v2;
    sub_216779094(a1, v2);
    free(v3);
  }
  else
  {
    sub_216779094(a1, (char *)(0x8000000217468FACLL & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_2169C888C(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

__n128 sub_2169C88A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (__n128 *)(a1 + 32);
  __n128 v5 = *(__n128 *)(a1 + 32);
  __n128 v6 = *(__n128 *)(a1 + 48);
  if (v5.n128_u64[0] == *(void *)(a1 + 64)
    || *(unsigned char *)v5.n128_u64[0] != 46
    || (uint64_t v3 = *(void *)(a1 + 40) + 1,
        *(void *)(a1 + 32) = v5.n128_u64[0] + 1,
        *(void *)(a1 + 40) = v3,
        ++*(void *)(a1 + 56),
        (sub_2169C8930(a1, a2) & 1) == 0))
  {
    __n128 result = v5;
    *uint64_t v2 = v5;
    v2[1] = v6;
  }
  return result;
}

void sub_2169C8924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10)
{
  _OWORD *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

uint64_t sub_2169C8930(uint64_t a1, uint64_t a2)
{
  long long v4 = (_OWORD *)(a1 + 32);
  long long v7 = *(_OWORD *)(a1 + 32);
  long long v8 = *(_OWORD *)(a1 + 48);
  uint64_t v5 = sub_2169C89C8((void *)a1);
  if (v5)
  {
    while ((sub_2169C827C((void *)a1) & 1) != 0)
      ;
    v9[0] = v7;
    v9[1] = v8;
    uint64_t v10 = a1 + 24;
    sub_2169C8A24((uint64_t)v9, a2);
  }
  else
  {
    _OWORD *v4 = v7;
    v4[1] = v8;
  }
  return v5;
}

void sub_2169C89BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10)
{
  _OWORD *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

uint64_t sub_2169C89C8(void *a1)
{
  uint64_t v1 = (unsigned __int8 *)a1[4];
  if (v1 == (unsigned __int8 *)a1[8]) {
    return 0;
  }
  int v2 = *v1;
  if ((v2 - 97) >= 0x1A && v2 != 95 && (v2 - 65) > 0x19) {
    return 0;
  }
  uint64_t v4 = a1[5] + 1;
  a1[4] = v1 + 1;
  a1[5] = v4;
  ++a1[7];
  return 1;
}

_DWORD *sub_2169C8A24(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(*(void *)(a2 + 8) - 8);
  sub_2169C4E90(a1, &v6);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendMapperArg(v3, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v6, &v7);
  uint64_t v4 = *(void *)(a2 + 8);
  sub_21697DE94((int *)(v4 - 8), &v7);
  sub_21697DEEC((int *)(v4 - 4), &v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  __n128 result = sub_21697C414(&v7);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

uint64_t sub_2169C8AE0(void *a1, uint64_t a2)
{
  int v2 = (unsigned char *)a1[4];
  if (v2 == (unsigned char *)a1[8] || *v2 != 46) {
    return 0;
  }
  uint64_t v4 = a1[5] + 1;
  a1[4] = v2 + 1;
  a1[5] = v4;
  ++a1[7];
  if ((sub_2169C8BBC((uint64_t)a1, a2) & 1) == 0) {
    sub_2169C8B5C((uint64_t)a1);
  }
  return 1;
}

void sub_2169C8B5C(uint64_t a1)
{
}

void sub_2169C8B70()
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "code should be unreachable: Control< T >::raise() did not throw an exception");
  __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
}

void sub_2169C8BA8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2169C8BBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (_OWORD *)(a1 + 32);
  long long v8 = *(_OWORD *)(a1 + 32);
  long long v9 = *(_OWORD *)(a1 + 48);
  sub_2169C8C40(a1);
  uint64_t v6 = v5;
  if (v5)
  {
    v10[0] = v8;
    v10[1] = v9;
    uint64_t v11 = a1 + 24;
    sub_2169C8D40((uint64_t)v10, a2);
  }
  else
  {
    _OWORD *v4 = v8;
    v4[1] = v9;
  }
  return v6;
}

void sub_2169C8C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10)
{
  _OWORD *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

__n128 sub_2169C8C40(uint64_t a1)
{
  if (sub_2169C8C8C((void *)a1))
  {
    __n128 v3 = *(__n128 *)(a1 + 32);
    long long v4 = *(_OWORD *)(a1 + 48);
    sub_2169C827C((void *)a1);
    __n128 result = v3;
    *(__n128 *)(a1 + 32) = v3;
    *(_OWORD *)(a1 + 48) = v4;
  }
  return result;
}

uint64_t sub_2169C8C8C(void *a1)
{
  uint64_t v1 = a1[4];
  if ((unint64_t)(a1[8] - v1) < 0xA) {
    return 0;
  }
  if (*(void *)v1 != 0x6973736572707865 || *(_WORD *)(v1 + 8) != 28271) {
    return 0;
  }
  uint64_t v4 = a1[5] + 10;
  a1[4] = v1 + 10;
  a1[5] = v4;
  a1[7] += 10;
  return 1;
}

_DWORD *sub_2169C8D40(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendExpression((pxrInternal__aapl__pxrReserved__::SdfPath *)(*(void *)(a2 + 8) - 8), &v5);
  uint64_t v3 = *(void *)(a2 + 8);
  sub_21697DE94((int *)(v3 - 8), &v5);
  sub_21697DEEC((int *)(v3 - 4), &v6);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v6);
  return sub_21697C414(&v5);
}

void sub_2169C8DB0(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x28uLL);
  sub_2169C8EA8(&v5);
  uint64_t v3 = std::string::insert(&v5, 0, "parse error matching ");
  long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  std::string::size_type v7 = v3->__r_.__value_.__r.__words[2];
  long long v6 = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  sub_2169C5604((uint64_t)exception, (uint64_t)&v6, a1);
  __cxa_throw(exception, (struct type_info *)&unk_26C7565C8, (void (*)(void *))sub_2169C5680);
}

void sub_2169C8E48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void sub_2169C8EA8(void *a1@<X8>)
{
  int v2 = __cxa_demangle((const char *)(0x8000000217469001 & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    uint64_t v3 = v2;
    sub_216779094(a1, v2);
    free(v3);
  }
  else
  {
    sub_216779094(a1, (char *)(0x8000000217469001 & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_2169C8F48(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2169C8F5C(uint64_t a1, uint64_t a2)
{
  long long v4 = (_OWORD *)(a1 + 32);
  long long v7 = *(_OWORD *)(a1 + 32);
  long long v8 = *(_OWORD *)(a1 + 48);
  uint64_t v5 = sub_2169C8FD0(a1, a2);
  if (v5)
  {
    sub_2169C9238((__n128 *)a1, a2);
  }
  else
  {
    _OWORD *v4 = v7;
    v4[1] = v8;
  }
  return v5;
}

void sub_2169C8FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10)
{
  _OWORD *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

uint64_t sub_2169C8FD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2169C901C(a1, a2);
  if (v4)
  {
    do
      sub_2169C91A8(a1, a2);
    while ((v5 & 1) != 0);
  }
  return v4;
}

uint64_t sub_2169C901C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (_OWORD *)(a1 + 32);
  long long v7 = *(_OWORD *)(a1 + 32);
  long long v8 = *(_OWORD *)(a1 + 48);
  uint64_t v5 = sub_2169C90A0((void *)a1);
  if (v5)
  {
    v9[0] = v7;
    v9[1] = v8;
    uint64_t v10 = a1 + 24;
    sub_2169C90F8((uint64_t)v9, a2);
  }
  else
  {
    _OWORD *v4 = v7;
    v4[1] = v8;
  }
  return v5;
}

void sub_2169C9094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10)
{
  _OWORD *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

uint64_t sub_2169C90A0(void *a1)
{
  uint64_t v1 = (_WORD *)a1[4];
  if (a1[8] - (void)v1 < 2uLL || *v1 != 11822) {
    return 0;
  }
  uint64_t v3 = a1[5] + 2;
  a1[4] = v1 + 1;
  a1[5] = v3;
  a1[7] += 2;
  return 1;
}

_DWORD *sub_2169C90F8(uint64_t a1, uint64_t a2)
{
  BOOL v3 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(*(void *)(a2 + 8) - 8));
  if (!v3)
  {
    uint64_t v4 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::ReflexiveRelativePath((pxrInternal__aapl__pxrReserved__::SdfPath *)v3);
    uint64_t v5 = *(void *)(a2 + 8);
    sub_2169C487C((int *)(v5 - 8), v4);
    sub_2169C48D4((int *)(v5 - 4), v4 + 1);
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(*(void *)(a2 + 8) - 8), &v8);
  uint64_t v6 = *(void *)(a2 + 8);
  sub_21697DE94((int *)(v6 - 8), &v8);
  sub_21697DEEC((int *)(v6 - 4), &v9);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  return sub_21697C414(&v8);
}

__n128 sub_2169C91A8(uint64_t a1, uint64_t a2)
{
  int v2 = (__n128 *)(a1 + 32);
  __n128 v5 = *(__n128 *)(a1 + 32);
  __n128 v6 = *(__n128 *)(a1 + 48);
  if (v5.n128_u64[0] == *(void *)(a1 + 64)
    || *(unsigned char *)v5.n128_u64[0] != 47
    || (uint64_t v3 = *(void *)(a1 + 40) + 1,
        *(void *)(a1 + 32) = v5.n128_u64[0] + 1,
        *(void *)(a1 + 40) = v3,
        ++*(void *)(a1 + 56),
        (sub_2169C901C(a1, a2) & 1) == 0))
  {
    __n128 result = v5;
    *int v2 = v5;
    v2[1] = v6;
  }
  return result;
}

void sub_2169C922C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10)
{
  _OWORD *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

__n128 sub_2169C9238(__n128 *a1, uint64_t a2)
{
  int v2 = a1 + 2;
  __n128 v5 = a1[2];
  __n128 v6 = a1[3];
  if (v5.n128_u64[0] == a1[4].n128_u64[0]
    || *(unsigned char *)v5.n128_u64[0] != 47
    || (uint64_t v3 = a1[2].n128_u64[1] + 1,
        a1[2].n128_u64[0] = v5.n128_u64[0] + 1,
        a1[2].n128_u64[1] = v3,
        ++a1[3].n128_u64[1],
        (sub_2169C92C8(a1, a2) & 1) == 0))
  {
    __n128 result = v5;
    *int v2 = v5;
    v2[1] = v6;
  }
  return result;
}

void sub_2169C92BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10)
{
  _OWORD *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

uint64_t sub_2169C92C8(void *a1, uint64_t a2)
{
  if (sub_2169C9328((uint64_t)a1, a2))
  {
    sub_2169C6D8C(a1, a2);
    return 1;
  }
  else
  {
    return sub_2169C939C(a1, a2);
  }
}

uint64_t sub_2169C9328(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (_OWORD *)(a1 + 32);
  long long v7 = *(_OWORD *)(a1 + 32);
  long long v8 = *(_OWORD *)(a1 + 48);
  uint64_t v5 = sub_2169C49A0(a1, a2);
  if (v5)
  {
    sub_2169C6D40(a1, a2);
  }
  else
  {
    _OWORD *v4 = v7;
    v4[1] = v8;
  }
  return v5;
}

void sub_2169C9390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10)
{
  _OWORD *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

uint64_t sub_2169C939C(void *a1, uint64_t a2)
{
  int v2 = (unsigned char *)a1[4];
  if (v2 == (unsigned char *)a1[8] || *v2 != 46) {
    return 0;
  }
  uint64_t v5 = a1[5] + 1;
  a1[4] = v2 + 1;
  a1[5] = v5;
  ++a1[7];
  uint64_t result = sub_2169C6E38((uint64_t)a1, a2);
  if (result)
  {
    sub_2169C70B4(a1, a2);
    return 1;
  }
  return result;
}

__n128 sub_2169C9418(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (__n128 *)(a1 + 32);
  __n128 v6 = *(__n128 *)(a1 + 32);
  __n128 v7 = *(__n128 *)(a1 + 48);
  if (sub_2169C9328(a1, a2))
  {
    sub_2169C6D8C(a1, a2);
  }
  else if ((sub_2169C939C((void *)a1, a2) & 1) == 0)
  {
    __n128 result = v6;
    __n128 *v4 = v6;
    v4[1] = v7;
  }
  return result;
}

void sub_2169C9494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10)
{
  _OWORD *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

uint64_t sub_2169C94A0(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a1 + 32);
  long long v5 = *(_OWORD *)(a1 + 48);
  if ((void)v4 == *(void *)(a1 + 64) || *(unsigned char *)v4 != 46) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 40) + 1;
  *(void *)(a1 + 32) = v4 + 1;
  *(void *)(a1 + 40) = v2;
  ++*(void *)(a1 + 56);
  v6[0] = v4;
  v6[1] = v5;
  uint64_t v7 = a1 + 24;
  sub_2169C7584((pxrInternal__aapl__pxrReserved__::SdfPath *)v6, a2);
  return 1;
}

void sub_2169C952C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, long long a10)
{
  _OWORD *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

void sub_2169C9538(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x28uLL);
  sub_2169C9630(&v5);
  uint64_t v3 = std::string::insert(&v5, 0, "parse error matching ");
  long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  std::string::size_type v7 = v3->__r_.__value_.__r.__words[2];
  long long v6 = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  sub_2169C5604((uint64_t)exception, (uint64_t)&v6, a1);
  __cxa_throw(exception, (struct type_info *)&unk_26C7565C8, (void (*)(void *))sub_2169C5680);
}

void sub_2169C95D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void sub_2169C9630(void *a1@<X8>)
{
  uint64_t v2 = __cxa_demangle((const char *)(0x8000000217468E9DLL & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    uint64_t v3 = v2;
    sub_216779094(a1, v2);
    free(v3);
  }
  else
  {
    sub_216779094(a1, (char *)(0x8000000217468E9DLL & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_2169C96D0(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2169C96E4(uint64_t a1)
{
  if ((sub_2169C9784(a1) & 1) == 0 && v2) {
    sub_2169C9724(a1);
  }
  return 1;
}

void sub_2169C9724(uint64_t a1)
{
}

void sub_2169C9738()
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "code should be unreachable: Control< T >::raise() did not throw an exception");
  __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
}

void sub_2169C9770(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2169C9784(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 **)(a1 + 64);
  uint64_t v2 = *(unsigned __int8 **)(a1 + 32);
  unint64_t v3 = v1 - v2;
  if (v1 == v2) {
    return 0;
  }
  int v4 = *v2;
  if (v4 != 10)
  {
    BOOL v6 = v3 >= 2 && v4 == 13;
    if (v6 && v2[1] == 10)
    {
      uint64_t v5 = 2;
      goto LABEL_11;
    }
    return 0;
  }
  uint64_t v5 = 1;
LABEL_11:
  uint64_t v7 = 1;
  int64x2_t v8 = vdupq_n_s64(1uLL);
  v8.i64[0] = v5;
  *(int64x2_t *)(a1 + 40) = vaddq_s64(*(int64x2_t *)(a1 + 40), v8);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 32) = &v2[v5];
  return v7;
}

void sub_2169C97F8(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x28uLL);
  sub_2169C98F0(&v5);
  unint64_t v3 = std::string::insert(&v5, 0, "parse error matching ");
  long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  std::string::size_type v7 = v3->__r_.__value_.__r.__words[2];
  long long v6 = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  sub_2169C5604((uint64_t)exception, (uint64_t)&v6, a1);
  __cxa_throw(exception, (struct type_info *)&unk_26C7565C8, (void (*)(void *))sub_2169C5680);
}

void sub_2169C9890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void sub_2169C98F0(void *a1@<X8>)
{
  uint64_t v2 = __cxa_demangle((const char *)(0x8000000217469042 & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    unint64_t v3 = v2;
    sub_216779094(a1, v2);
    free(v3);
  }
  else
  {
    sub_216779094(a1, (char *)(0x8000000217469042 & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_2169C9990(_Unwind_Exception *a1)
{
  free(v1);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::Sdf_SubLayerListEditor::Sdf_SubLayerListEditor(void *a1, uint64_t *a2)
{
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0(a2);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetPseudoRoot(v3, &v6);
  std::string::size_type v7 = v6;
  if (v6) {
    atomic_fetch_add(v6, 1u);
  }
  long long v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    long long v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  sub_2169C9A78(a1, &v7, (uint64_t *)v4 + 45, 3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v7);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v6);
  *a1 = &unk_26C756618;
  return a1;
}

void sub_2169C9A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va1);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

void *sub_2169C9A78(void *a1, atomic_uint **a2, uint64_t *a3, int a4)
{
  int64x2_t v8 = sub_2169CADC8(a1, a2, a3);
  *int64x2_t v8 = &unk_26C7566E0;
  void v8[4] = 0;
  *((_DWORD *)v8 + 10) = a4;
  v8[6] = 0;
  int v9 = (std::string **)(v8 + 6);
  v8[7] = 0;
  v8[8] = 0;
  if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a2) & 1) == 0)
  {
    uint64_t v10 = sub_21697F2E0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a2);
    memset(v12, 0, sizeof(v12));
    sub_2169CAE24(v10, (const pxrInternal__aapl__pxrReserved__::TfToken *)a3, v12, (uint64_t)&v13);
    if (v9 != &v13) {
      sub_21680F694((uint64_t)v9, v13, v14, 0xAAAAAAAAAAAAAAABLL * (((char *)v14 - (char *)v13) >> 3));
    }
    long long v15 = (long long **)&v13;
    sub_216782F20((void ***)&v15);
    long long v15 = v12;
    sub_216782F20((void ***)&v15);
  }
  return a1;
}

void sub_2169C9B68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  *(void *)(v3 - 40) = va1;
  sub_216782F20((void ***)(v3 - 40));
  *(void *)(v3 - 40) = va;
  sub_216782F20((void ***)(v3 - 40));
  sub_216782F20((void ***)va1);
  uint64_t v5 = v2[4];
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_2169CAD38(v2);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Sdf_SubLayerListEditor::~Sdf_SubLayerListEditor(pxrInternal__aapl__pxrReserved__::Sdf_SubLayerListEditor *this)
{
  *(void *)this = &unk_26C7566E0;
  uint64_t v4 = (void **)((char *)this + 48);
  sub_216782F20(&v4);
  uint64_t v2 = *((void *)this + 4);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  *(void *)this = &unk_26C756768;
  uint64_t v3 = *((void *)this + 2);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::Sdf_SubLayerListEditor *)((char *)this + 8));
}

{
  void *v1;
  uint64_t vars8;

  pxrInternal__aapl__pxrReserved__::Sdf_SubLayerListEditor::~Sdf_SubLayerListEditor(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::Sdf_SubLayerListEditor::_OnEdit(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8);
  std::string::size_type v7 = sub_21697F2E0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8));
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v8) {
    uint64_t v8 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  std::string __p = 0;
  unint64_t v20 = 0;
  uint64_t v21 = 0;
  sub_2169C9F1C(v7, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v8 + 368), (uint64_t)&__p, &v24);
  if (__p)
  {
    unint64_t v20 = (const char *)__p;
    operator delete(__p);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3) == (v25 - (unsigned char *)v24) >> 4
    || (std::string __p = "sdf/subLayerListEditor.cpp",
        unint64_t v20 = "_OnEdit",
        uint64_t v21 = 59,
        int v22 = "virtual void pxrInternal__aapl__pxrReserved__::Sdf_SubLayerListEditor::_OnEdit(SdfListOpType, const std::v"
              "ector<std::string> &, const std::vector<std::string> &) const",
        char v23 = 0,
        long long v18 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Sublayer offsets do not match sublayer paths", v9, v10), (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&__p, "oldValues.size() == oldLayerOffsets.size()", v18) & 1) != 0))
  {
    sub_2169CAF08((double *)&__p, 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3));
    uint64_t v11 = *a4;
    if (a4[1] != *a4)
    {
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      unint64_t v14 = 0;
      do
      {
        uint64_t v15 = sub_2169CAFD0(*a3, a3[1], (unsigned __int8 **)(v11 + v13));
        if (v15 != a3[1]) {
          *(_OWORD *)((char *)__p + v12) = *((_OWORD *)v24 - 0x555555555555555 * ((unint64_t)(v15 - *a3) >> 3));
        }
        ++v14;
        uint64_t v11 = *a4;
        v13 += 24;
        v12 += 16;
      }
      while (v14 < 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3));
    }
    long long v16 = sub_21697F2E0(v6);
    long long v17 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v17) {
      long long v17 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    sub_2169C9FF4(v16, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v17 + 368), (uint64_t)&__p);
    if (__p)
    {
      unint64_t v20 = (const char *)__p;
      operator delete(__p);
    }
  }
  if (v24)
  {
    uint64_t v25 = v24;
    operator delete(v24);
  }
}

void sub_2169C9ED0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2169C9F1C@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(a1, a2, (pxrInternal__aapl__pxrReserved__::VtValue *)&v7);
  if (v8 && (sub_21697E5A0((pxrInternal__aapl__pxrReserved__::VtValue *)&v7) & 1) != 0)
  {
    if ((v8 & 4) != 0) {
      a3 = (*(uint64_t (**)(uint64_t *))((v8 & 0xFFFFFFFFFFFFFFF8) + 168))(&v7);
    }
    else {
      a3 = v7;
    }
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_21697E62C(a4, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 4);
  return sub_2168EE084((uint64_t)&v7);
}

void sub_2169C9FD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

BOOL sub_2169C9FF4(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t a3)
{
  v7[2] = *(unsigned int **)MEMORY[0x263EF8340];
  v7[1] = (unsigned int *)&off_26C7567E0;
  sub_2169CB460(v7, a3);
  BOOL v5 = pxrInternal__aapl__pxrReserved__::SdfSpec::SetField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  sub_2168EE084((uint64_t)v7);
  return v5;
}

void sub_2169CA084(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_2169CA0A0(uint64_t a1)
{
  return *(_DWORD *)(a1 + 40) == 0;
}

BOOL sub_2169CA0B0(uint64_t a1)
{
  return *(_DWORD *)(a1 + 40) == 3;
}

double sub_2169CA0C0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8);
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8)))
  {
    uint64_t v4 = "List editor is expired";
  }
  else
  {
    BOOL v5 = sub_21697F2E0(v3);
    if (pxrInternal__aapl__pxrReserved__::SdfSpec::PermissionToEdit(v5))
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 24) = 0;
      return result;
    }
    uint64_t v4 = "Permission denied";
  }
  sub_216779094(&v7, v4);
  double result = *(double *)&v7;
  *(_OWORD *)a2 = v7;
  *(void *)(a2 + 16) = v8;
  *(unsigned char *)(a2 + 24) = 1;
  return result;
}

uint64_t sub_2169CA148(uint64_t a1, void *lpsrc)
{
  uint64_t v3 = (long long **)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C756690, (const struct __class_type_info *)&unk_26C7566A0, 0);
  if (v3)
  {
    if (*(_DWORD *)(a1 + 40) == *((_DWORD *)v3 + 10))
    {
      sub_2169CB4D8(a1, v3 + 6);
      return 1;
    }
    BOOL v5 = "sdf/vectorListEditor.h";
    uint64_t v6 = "CopyEdits";
    uint64_t v7 = 223;
    uint64_t v8 = "virtual BOOL pxrInternal__aapl__pxrReserved__::Sdf_VectorListEditor<pxrInternal__aapl__pxrReserved__::SdfSubLay"
         "erTypePolicy>::CopyEdits(const Sdf_ListEditor<TP> &) [TypePolicy = pxrInternal__aapl__pxrReserved__::SdfSubLaye"
         "rTypePolicy, FieldStorageType = std::string]";
    char v9 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v5, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot copy from list editor in different mode");
  }
  else
  {
    BOOL v5 = "sdf/vectorListEditor.h";
    uint64_t v6 = "CopyEdits";
    uint64_t v7 = 218;
    uint64_t v8 = "virtual BOOL pxrInternal__aapl__pxrReserved__::Sdf_VectorListEditor<pxrInternal__aapl__pxrReserved__::SdfSubLay"
         "erTypePolicy>::CopyEdits(const Sdf_ListEditor<TP> &) [TypePolicy = pxrInternal__aapl__pxrReserved__::SdfSubLaye"
         "rTypePolicy, FieldStorageType = std::string]";
    char v9 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v5, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot copy from list editor of different type");
  }
  return 0;
}

BOOL sub_2169CA254(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 40);
  if (v1)
  {
    memset(v3, 0, sizeof(v3));
    sub_2169CB4D8(a1, v3);
    uint64_t v4 = v3;
    sub_216782F20((void ***)&v4);
  }
  return v1 != 0;
}

void sub_2169CA2A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216782F20((void ***)va);
  _Unwind_Resume(a1);
}

BOOL sub_2169CA2C0(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 40);
  if (!v1)
  {
    memset(v3, 0, sizeof(v3));
    sub_2169CB4D8(a1, v3);
    uint64_t v4 = v3;
    sub_216782F20((void ***)&v4);
  }
  return v1 == 0;
}

void sub_2169CA314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216782F20((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2169CA32C(uint64_t result)
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  if (*(void *)(result + 48) != *(void *)(result + 56)) {
    pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SdfListOp();
  }
  return result;
}

void sub_2169CA46C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_2169CBFC0((void *)(v9 - 72));
  sub_2169CBCC8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2169CA498(uint64_t result)
{
  if (*(void *)(result + 48) != *(void *)(result + 56)) {
    pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SdfListOp();
  }
  return result;
}

void sub_2169CA56C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t sub_2169CA580(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 40) == a2) {
    pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SdfListOp();
  }
  return 0;
}

void sub_2169CA694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void sub_2169CA6A8(uint64_t a1, int a2, void *lpsrc)
{
  BOOL v5 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_26C756690, (const struct __class_type_info *)&unk_26C7566A0, 0);
  if (v5)
  {
    if (*(_DWORD *)(a1 + 40) == a2 || v5[10] == a2) {
      pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SdfListOp();
    }
  }
  else
  {
    v6[0] = "sdf/vectorListEditor.h";
    v6[1] = "ApplyList";
    _OWORD v6[2] = 322;
    uint64_t v6[3] = "virtual void pxrInternal__aapl__pxrReserved__::Sdf_VectorListEditor<pxrInternal__aapl__pxrReserved__::SdfSub"
            "LayerTypePolicy>::ApplyList(SdfListOpType, const Sdf_ListEditor<TP> &) [TypePolicy = pxrInternal__aapl__pxrR"
            "eserved__::SdfSubLayerTypePolicy, FieldStorageType = std::string]";
    char v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v6, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot apply from list editor of different type");
  }
}

void sub_2169CA8A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
}

uint64_t sub_2169CA8CC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v5 = *a3;
  uint64_t v6 = a3[1];
  uint64_t v8 = *a4;
  uint64_t v7 = a4[1];
  BOOL v9 = *a3 == v6 || v8 == v7;
  uint64_t i = *a4;
  if (!v9)
  {
    for (uint64_t i = *a4; v5 != v6 && i != v7; i += 24)
    {
      uint64_t v28 = *(unsigned __int8 *)(v5 + 23);
      if ((v28 & 0x80u) == 0) {
        uint64_t v29 = *(unsigned __int8 *)(v5 + 23);
      }
      else {
        uint64_t v29 = *(void *)(v5 + 8);
      }
      uint64_t v30 = *(unsigned __int8 *)(i + 23);
      int v31 = (char)v30;
      if ((v30 & 0x80u) != 0) {
        uint64_t v30 = *(void *)(i + 8);
      }
      if (v29 != v30) {
        break;
      }
      if (v31 >= 0) {
        uint64_t v32 = (unsigned __int8 *)i;
      }
      else {
        uint64_t v32 = *(unsigned __int8 **)i;
      }
      if ((v28 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v5, v32, *(void *)(v5 + 8))) {
          break;
        }
      }
      else if (*(unsigned char *)(v5 + 23))
      {
        uint64_t v33 = 0;
        while (*(unsigned __int8 *)(v5 + v33) == v32[v33])
        {
          if (v28 == ++v33) {
            goto LABEL_55;
          }
        }
        break;
      }
LABEL_55:
      v5 += 24;
    }
  }
  if (i != v7)
  {
    uint64_t v11 = i;
    do
    {
      if (v8 != v11)
      {
        uint64_t v12 = *(unsigned __int8 *)(v11 + 23);
        size_t v13 = *(void *)(v11 + 8);
        if ((v12 & 0x80u) == 0) {
          unint64_t v14 = (unsigned __int8 *)*(unsigned __int8 *)(v11 + 23);
        }
        else {
          unint64_t v14 = *(unsigned __int8 **)(v11 + 8);
        }
        for (uint64_t j = (unsigned __int8 **)v8; j != (unsigned __int8 **)v11; j += 3)
        {
          long long v16 = (unsigned __int8 *)*((unsigned __int8 *)j + 23);
          int v17 = (char)v16;
          if ((char)v16 < 0) {
            long long v16 = j[1];
          }
          if (v14 == v16)
          {
            if (v17 >= 0) {
              long long v18 = (unsigned __int8 *)j;
            }
            else {
              long long v18 = *j;
            }
            if ((v12 & 0x80) != 0)
            {
              if (!memcmp(*(const void **)v11, v18, v13))
              {
LABEL_34:
                uint64_t v45 = "sdf/listEditor.h";
                unsigned __int8 v46 = "_ValidateEdit";
                uint64_t v47 = 262;
                uint64_t v48 = "virtual BOOL pxrInternal__aapl__pxrReserved__::Sdf_ListEditor<pxrInternal__aapl__pxrReserved__::Sd"
                      "fSubLayerTypePolicy>::_ValidateEdit(SdfListOpType, const value_vector_type &, const value_vector_t"
                      "ype &) const [TypePolicy = pxrInternal__aapl__pxrReserved__::SdfSubLayerTypePolicy]";
                char v49 = 0;
                uint64_t v25 = __p;
                pxrInternal__aapl__pxrReserved__::TfStringify((char *)v11, (uint64_t)__p);
                if (v41 < 0) {
                  uint64_t v25 = (void **)__p[0];
                }
                unint64_t v26 = *(void *)(a1 + 16) & 0xFFFFFFFFFFFFFFF8;
                if (v26)
                {
                  uint64_t v27 = (const char *)(v26 + 16);
                  if (*(char *)(v26 + 39) < 0) {
                    uint64_t v27 = *(const char **)v27;
                  }
                }
                else
                {
                  uint64_t v27 = "";
                }
                sub_21698131C(a1, &v43);
                Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v43);
                pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v45, 1, (pxrInternal__aapl__pxrReserved__ *)"Duplicate item '%s' not allowed for field '%s' on <%s>", (const char *)v25, v27, Text);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v44);
                sub_21697C414(&v43);
                goto LABEL_60;
              }
            }
            else
            {
              if (!v12) {
                goto LABEL_34;
              }
              uint64_t v19 = 0;
              while (*(unsigned __int8 *)(v11 + v19) == v18[v19])
              {
                if (v12 == ++v19) {
                  goto LABEL_34;
                }
              }
            }
          }
        }
      }
      v11 += 24;
    }
    while (v11 != v7);
  }
  unint64_t v20 = sub_21697F2E0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8));
  Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(v20);
  FieldDefinition = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFieldDefinition(Schema, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 16));
  if (FieldDefinition)
  {
    if (i == v7)
    {
      return 1;
    }
    else
    {
      char v23 = FieldDefinition;
      while (1)
      {
        sub_2169CC044(v23, i, __p);
        if (v42) {
          break;
        }
        i += 24;
        if (i == v7) {
          return 1;
        }
      }
      uint64_t v45 = "sdf/listEditor.h";
      unsigned __int8 v46 = "_ValidateEdit";
      uint64_t v47 = 279;
      uint64_t v48 = "virtual BOOL pxrInternal__aapl__pxrReserved__::Sdf_ListEditor<pxrInternal__aapl__pxrReserved__::SdfSubLayerT"
            "ypePolicy>::_ValidateEdit(SdfListOpType, const value_vector_type &, const value_vector_type &) const [TypePo"
            "licy = pxrInternal__aapl__pxrReserved__::SdfSubLayerTypePolicy]";
      char v49 = 0;
      WhyNot = pxrInternal__aapl__pxrReserved__::SdfAllowed::GetWhyNot((uint64_t *)__p);
      if (*((char *)WhyNot + 23) >= 0) {
        uint64_t v39 = (const char *)WhyNot;
      }
      else {
        uint64_t v39 = (const char *)*WhyNot;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v45, 1, (pxrInternal__aapl__pxrReserved__ *)"%s", v39);
      if (v42)
      {
LABEL_60:
        if (v41 < 0) {
          operator delete(__p[0]);
        }
      }
      return 0;
    }
  }
  else
  {
    uint64_t v45 = "sdf/listEditor.h";
    unsigned __int8 v46 = "_ValidateEdit";
    uint64_t v47 = 273;
    uint64_t v48 = "virtual BOOL pxrInternal__aapl__pxrReserved__::Sdf_ListEditor<pxrInternal__aapl__pxrReserved__::SdfSubLayerTyp"
          "ePolicy>::_ValidateEdit(SdfListOpType, const value_vector_type &, const value_vector_type &) const [TypePolicy"
          " = pxrInternal__aapl__pxrReserved__::SdfSubLayerTypePolicy]";
    char v49 = 0;
    unint64_t v36 = *(void *)(a1 + 16) & 0xFFFFFFFFFFFFFFF8;
    if (v36)
    {
      uint64_t v37 = (const char *)(v36 + 16);
      if (*(char *)(v36 + 39) < 0) {
        uint64_t v37 = *(const char **)v37;
      }
    }
    else
    {
      uint64_t v37 = "";
    }
    uint64_t v24 = 1;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v45, 1, (pxrInternal__aapl__pxrReserved__ *)"No field definition for field '%s'", v37);
  }
  return v24;
}

void sub_2169CAC5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, int a20,__int16 a21,char a22,char a23)
{
  if (a19)
  {
    if (a18 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2169CAC9C(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 40) == a2) {
    return (uint64_t *)(a1 + 48);
  }
  {
    pxrInternal__aapl__pxrReserved__::Sdf_VectorListEditor<pxrInternal__aapl__pxrReserved__::SdfSubLayerTypePolicy,std::string>::_GetOperations(pxrInternal__aapl__pxrReserved__::SdfListOpType)const::empty = 0;
    *(void *)algn_26798B2C8 = 0;
    qword_26798B2D0 = 0;
    __cxa_atexit((void (*)(void *))sub_216963C50, &pxrInternal__aapl__pxrReserved__::Sdf_VectorListEditor<pxrInternal__aapl__pxrReserved__::SdfSubLayerTypePolicy,std::string>::_GetOperations(pxrInternal__aapl__pxrReserved__::SdfListOpType)const::empty, &dword_216758000);
  }
  return &pxrInternal__aapl__pxrReserved__::Sdf_VectorListEditor<pxrInternal__aapl__pxrReserved__::SdfSubLayerTypePolicy,std::string>::_GetOperations(pxrInternal__aapl__pxrReserved__::SdfListOpType)const::empty;
}

void *sub_2169CAD38(void *a1)
{
  *a1 = &unk_26C756768;
  uint64_t v2 = a1[2];
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(a1 + 1));
  return a1;
}

void sub_2169CAD9C(pxrInternal__aapl__pxrReserved__::Sdf_SubLayerListEditor *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_SubLayerListEditor::~Sdf_SubLayerListEditor(a1);

  operator delete(v1);
}

void *sub_2169CADC8(void *result, atomic_uint **a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  _DWORD *result = &unk_26C756768;
  result[1] = v3;
  if (v3) {
    atomic_fetch_add(v3, 1u);
  }
  uint64_t v4 = *a3;
  result[2] = *a3;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    result[2] &= 0xFFFFFFFFFFFFFFF8;
  }
  return result;
}

uint64_t sub_2169CAE24@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, long long **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(a1, a2, (pxrInternal__aapl__pxrReserved__::VtValue *)&v7);
  if (v8 && (sub_21697E1F8((pxrInternal__aapl__pxrReserved__::VtValue *)&v7) & 1) != 0)
  {
    if ((v8 & 4) != 0) {
      a3 = (long long **)(*(uint64_t (**)(long long ***))((v8 & 0xFFFFFFFFFFFFFFF8) + 168))(&v7);
    }
    else {
      a3 = v7;
    }
  }
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  sub_216812BD8((char *)a4, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  return sub_2168EE084((uint64_t)&v7);
}

void sub_2169CAEEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

double *sub_2169CAF08(double *a1, unint64_t a2)
{
  *a1 = 0.0;
  a1[1] = 0.0;
  a1[2] = 0.0;
  if (a2)
  {
    sub_21682BF78(a1, a2);
    sub_2169CAF6C(a1, a2);
  }
  return a1;
}

void sub_2169CAF50(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

double *sub_2169CAF6C(double *result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = (double *)*((void *)result + 1);
  if (a2)
  {
    uint64_t v4 = 16 * a2;
    uint64_t v5 = &v3[2 * a2];
    do
    {
      double result = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset(v3, 0.0, 1.0);
      v3 += 2;
      v4 -= 16;
    }
    while (v4);
    uint64_t v3 = v5;
  }
  *((void *)v2 + 1) = v3;
  return result;
}

void sub_2169CAFC8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_2169CAFD0(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    char v5 = *((unsigned char *)a3 + 23);
    if (v5 >= 0) {
      uint64_t v6 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
    }
    else {
      uint64_t v6 = a3[1];
    }
    if (v5 >= 0) {
      uint64_t v7 = (unsigned __int8 *)a3;
    }
    else {
      uint64_t v7 = *a3;
    }
    do
    {
      uint64_t v8 = *(unsigned __int8 *)(v3 + 23);
      if ((v8 & 0x80u) == 0) {
        uint64_t v9 = (unsigned __int8 *)*(unsigned __int8 *)(v3 + 23);
      }
      else {
        uint64_t v9 = *(unsigned __int8 **)(v3 + 8);
      }
      if (v9 == v6)
      {
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v3, v7, *(void *)(v3 + 8))) {
            return v3;
          }
        }
        else
        {
          if (!*(unsigned char *)(v3 + 23)) {
            return v3;
          }
          uint64_t v10 = 0;
          while (*(unsigned __int8 *)(v3 + v10) == v7[v10])
          {
            if (v8 == ++v10) {
              return v3;
            }
          }
        }
      }
      v3 += 24;
    }
    while (v3 != a2);
    return a2;
  }
  return v3;
}

uint64_t *sub_2169CB088(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 24), 1u, memory_order_relaxed);
  }
  return result;
}

atomic_uint **sub_2169CB0A8(atomic_uint **a1, atomic_uint **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2169CB1D8(a1);
}

uint64_t sub_2169CB0B8()
{
  return 1;
}

unint64_t sub_2169CB0C0(uint64_t *a1)
{
  return sub_2169CB234((uint64_t)&v2, *a1);
}

BOOL sub_2169CB0E8(double ***a1, uint64_t *a2)
{
  return sub_2169CB2C0(*a1, *a2);
}

BOOL sub_2169CB0F4(double ***a1, uint64_t a2)
{
  return sub_2169CB2C0(*a1, a2);
}

uint64_t sub_2169CB100()
{
  return 0;
}

void *sub_2169CB10C(uint64_t **a1, void *a2)
{
  return sub_2169CB3D4(a2, *a1);
}

void *sub_2169CB11C()
{
  return &unk_26C754B90;
}

uint64_t sub_2169CB128()
{
  return 0;
}

uint64_t sub_2169CB130()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_2169CB13C()
{
  return 0;
}

uint64_t sub_2169CB144()
{
  return 0;
}

BOOL sub_2169CB14C(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x8000000217478F98 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2169CB188(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C754B90, a2, a3);
}

void *sub_2169CB1AC()
{
  return &unk_26C754B90;
}

uint64_t sub_2169CB1B8(uint64_t a1)
{
  return *(void *)a1;
}

void *sub_2169CB1C0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  *(void *)(a2 + 8) = &off_26C7567E0;
  return sub_2169CB460((unsigned int **)a2, v2);
}

atomic_uint **sub_2169CB1D8(atomic_uint **a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit(v2 + 6, 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    uint64_t v3 = *(void **)v2;
    if (*(void *)v2)
    {
      *((void *)v2 + 1) = v3;
      operator delete(v3);
    }
    operator delete(v2);
  }
  return a1;
}

unint64_t sub_2169CB234(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(int8x16_t **)a2;
  uint64_t v3 = *(void *)(a2 + 8) - *(void *)a2;
  if (v3)
  {
    int v4 = 0;
    unint64_t v5 = 0;
    uint64_t v6 = v3 >> 4;
    do
    {
      unint64_t Hash = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::GetHash(v2);
      if (v4)
      {
        unint64_t v5 = Hash + ((Hash + v5 + (Hash + v5) * (Hash + v5)) >> 1);
      }
      else
      {
        int v4 = 1;
        unint64_t v5 = Hash;
      }
      ++v2;
      --v6;
    }
    while (v6);
  }
  else
  {
    unint64_t v5 = 0;
  }
  return bswap64(0x9E3779B97F4A7C55 * v5);
}

BOOL sub_2169CB2C0(double **a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  int v4 = *(double **)a2;
  if ((char *)v3 - (char *)*a1 != *(void *)(a2 + 8) - *(void *)a2) {
    return 0;
  }
  if (v2 == v3) {
    return 1;
  }
  do
  {
    BOOL result = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator==(v2, v4);
    if (!result) {
      break;
    }
    v2 += 2;
    v4 += 2;
  }
  while (v2 != v3);
  return result;
}

unsigned int *sub_2169CB334(unsigned int **a1)
{
  unsigned int v2 = atomic_load(*a1 + 6);
  if (v2 != 1)
  {
    uint64_t v3 = (unsigned int *)operator new(0x20uLL);
    int v4 = *a1;
    *((void *)v3 + 1) = 0;
    *((void *)v3 + 2) = 0;
    *(void *)uint64_t v3 = 0;
    sub_21697E62C(v3, *(const void **)v4, *((void *)v4 + 1), (uint64_t)(*((void *)v4 + 1) - *(void *)v4) >> 4);
    atomic_store(0, v3 + 6);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 6, 1u, memory_order_relaxed);
    uint64_t v6 = (atomic_uint *)*a1;
    *a1 = v3;
    sub_2169CB1D8(&v6);
  }
  return *a1;
}

void sub_2169CB3C0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_2169CB3D4(void *a1, uint64_t *a2)
{
  sub_216779180(a1, (uint64_t)"[ ", 2);
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      uint64_t v6 = pxrInternal__aapl__pxrReserved__::operator<<(a1);
      sub_216779180(v6, (uint64_t)" ", 1);
      v4 += 16;
    }
    while (v4 != v5);
  }
  sub_216779180(a1, (uint64_t)"]", 1);
  return a1;
}

void *sub_2169CB460(unsigned int **a1, uint64_t a2)
{
  uint64_t v4 = (unsigned int *)operator new(0x20uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)uint64_t v4 = 0;
  BOOL result = sub_21697E62C(v4, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  atomic_store(0, v4 + 6);
  *a1 = v4;
  atomic_fetch_add_explicit((atomic_uint *volatile)v4 + 6, 1u, memory_order_relaxed);
  return result;
}

void sub_2169CB4C4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2169CB4D8(uint64_t a1, long long **a2)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8);
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 8)))
  {
    *(void *)&long long v20 = "sdf/vectorListEditor.h";
    *((void *)&v20 + 1) = "_UpdateFieldData";
    uint64_t v21 = 142;
    int v22 = "void pxrInternal__aapl__pxrReserved__::Sdf_VectorListEditor<pxrInternal__aapl__pxrReserved__::SdfSubLayerTypeP"
          "olicy>::_UpdateFieldData(const value_vector_type &) [TypePolicy = pxrInternal__aapl__pxrReserved__::SdfSubLaye"
          "rTypePolicy, FieldStorageType = std::string]";
    char v23 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v20, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid owner.");
  }
  else
  {
    uint64_t v5 = (uint64_t **)sub_21697F2E0(v4);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v5, (uint64_t *)&v20);
    uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_2169791E0((uint64_t *)&v20);
    char v7 = pxrInternal__aapl__pxrReserved__::SdfLayer::PermissionToEdit(v6);
    uint64_t v8 = *((void *)&v20 + 1);
    if (*((void *)&v20 + 1)
      && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v20 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
    {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    if (v7)
    {
      uint64_t v9 = *(unsigned __int8 **)(a1 + 48);
      uint64_t v10 = *a2;
      uint64_t v11 = a2[1];
      if ((char *)v11 - (char *)*a2 == *(void *)(a1 + 56) - (void)v9)
      {
        while (v10 != v11)
        {
          if (!sub_2168513F8((uint64_t)&v20, (unsigned __int8 *)v10, v9)) {
            goto LABEL_13;
          }
          uint64_t v10 = (long long *)((char *)v10 + 24);
          v9 += 24;
        }
      }
      else
      {
LABEL_13:
        if ((*(unsigned int (**)(uint64_t, void, uint64_t, long long **))(*(void *)a1 + 96))(a1, *(unsigned int *)(a1 + 40), a1 + 48, a2))
        {
          pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v19);
          long long v20 = 0uLL;
          uint64_t v21 = 0;
          sub_216812BD8((char *)&v20, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
          long long v12 = *(_OWORD *)(a1 + 48);
          *(_OWORD *)(a1 + 48) = v20;
          long long v20 = v12;
          uint64_t v13 = *(void *)(a1 + 64);
          *(void *)(a1 + 64) = v21;
          uint64_t v21 = v13;
          unint64_t v14 = *a2;
          uint64_t v15 = a2[1];
          if (*a2 == v15)
          {
            int v17 = sub_21697F2E0(v4);
            pxrInternal__aapl__pxrReserved__::SdfSpec::ClearField(v17, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 16));
          }
          else
          {
            memset(v18, 0, sizeof(v18));
            sub_216812BD8((char *)v18, v14, v15, 0xAAAAAAAAAAAAAAABLL * (((char *)v15 - (char *)v14) >> 3));
            long long v16 = sub_21697F2E0(v4);
            sub_2169CB7E0(v16, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 16), (long long **)v18);
            uint64_t v24 = v18;
            sub_216782F20((void ***)&v24);
          }
          (*(void (**)(uint64_t, void, long long *, long long **))(*(void *)a1 + 104))(a1, *(unsigned int *)(a1 + 40), &v20, a2);
          v18[0] = (void **)&v20;
          sub_216782F20(v18);
          sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v19);
        }
      }
    }
    else
    {
      *(void *)&long long v20 = "sdf/vectorListEditor.h";
      *((void *)&v20 + 1) = "_UpdateFieldData";
      uint64_t v21 = 147;
      int v22 = "void pxrInternal__aapl__pxrReserved__::Sdf_VectorListEditor<pxrInternal__aapl__pxrReserved__::SdfSubLayerTyp"
            "ePolicy>::_UpdateFieldData(const value_vector_type &) [TypePolicy = pxrInternal__aapl__pxrReserved__::SdfSub"
            "LayerTypePolicy, FieldStorageType = std::string]";
      char v23 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v20, 1, (pxrInternal__aapl__pxrReserved__ *)"Layer is not editable.");
    }
  }
}

void sub_2169CB784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, char a12, int a13, char a14)
{
  a9 = (void **)&a14;
  sub_216782F20(&a9);
  sub_21697BEF0((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&a12);
  _Unwind_Resume(a1);
}

BOOL sub_2169CB7E0(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, long long **a3)
{
  v7[2] = *MEMORY[0x263EF8340];
  v7[1] = &off_26C756898;
  sub_2169CBC44(v7, a3);
  BOOL v5 = pxrInternal__aapl__pxrReserved__::SdfSpec::SetField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  sub_2168EE084((uint64_t)v7);
  return v5;
}

void sub_2169CB870(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_2169CB88C(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 24), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *sub_2169CB8AC(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2169CBA18(a1);
}

uint64_t sub_2169CB8BC()
{
  return 1;
}

unint64_t sub_2169CB8C4(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v3 = 0;
  char v4 = 0;
  sub_216960068((unint64_t)&v3, *(uint64_t **)v1, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v1 + 8) - *(void *)v1) >> 3));
  return bswap64(0x9E3779B97F4A7C55 * v3);
}

uint64_t sub_2169CB928(unsigned __int8 ***a1, uint64_t *a2)
{
  return sub_2169CBA78(*a1, *a2);
}

uint64_t sub_2169CB934(unsigned __int8 ***a1, uint64_t a2)
{
  return sub_2169CBA78(*a1, a2);
}

uint64_t sub_2169CB940()
{
  return 0;
}

void *sub_2169CB94C(uint64_t **a1, void *a2)
{
  return sub_2169CBBA4(a2, *a1);
}

void *sub_2169CB95C()
{
  return &unk_26C74C3F0;
}

uint64_t sub_2169CB968()
{
  return 0;
}

uint64_t sub_2169CB970()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_2169CB97C()
{
  return 0;
}

uint64_t sub_2169CB984()
{
  return 0;
}

BOOL sub_2169CB98C(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x8000000217478F42 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2169CB9C8(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C3F0, a2, a3);
}

void *sub_2169CB9EC()
{
  return &unk_26C74C3F0;
}

uint64_t sub_2169CB9F8(uint64_t a1)
{
  return *(void *)a1;
}

char *sub_2169CBA00@<X0>(long long ***a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  a2[1] = &off_26C756898;
  return sub_2169CBC44(a2, v2);
}

uint64_t *sub_2169CBA18(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 24), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    char v4 = (void **)v2;
    sub_216782F20(&v4);
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t sub_2169CBA78(unsigned __int8 **a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  char v4 = *(unsigned __int8 **)a2;
  if (v3 - *a1 != *(void *)(a2 + 8) - *(void *)a2) {
    return 0;
  }
  if (v2 == v3) {
    return 1;
  }
  do
  {
    uint64_t result = sub_2168513F8((uint64_t)&v6, v2, v4);
    if (!result) {
      break;
    }
    v2 += 24;
    v4 += 24;
  }
  while (v2 != v3);
  return result;
}

long long **sub_2169CBAF8(long long ***a1)
{
  unsigned int v2 = atomic_load((unsigned int *)*a1 + 6);
  if (v2 != 1)
  {
    uint64_t v3 = operator new(0x20uLL);
    char v4 = *a1;
    *((void *)v3 + 1) = 0;
    *((void *)v3 + 2) = 0;
    *(void *)uint64_t v3 = 0;
    sub_216812BD8((char *)v3, *v4, v4[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v4[1] - (char *)*v4) >> 3));
    atomic_store(0, (unsigned int *)v3 + 6);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 6, 1u, memory_order_relaxed);
    char v6 = *a1;
    *a1 = (long long **)v3;
    sub_2169CBA18((uint64_t *)&v6);
  }
  return *a1;
}

void sub_2169CBB90(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_2169CBBA4(void *a1, uint64_t *a2)
{
  sub_216779180(a1, (uint64_t)"[ ", 2);
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      int v6 = *(char *)(v4 + 23);
      if (v6 >= 0) {
        uint64_t v7 = v4;
      }
      else {
        uint64_t v7 = *(void *)v4;
      }
      if (v6 >= 0) {
        uint64_t v8 = *(unsigned __int8 *)(v4 + 23);
      }
      else {
        uint64_t v8 = *(void *)(v4 + 8);
      }
      uint64_t v9 = sub_216779180(a1, v7, v8);
      sub_216779180(v9, (uint64_t)" ", 1);
      v4 += 24;
    }
    while (v4 != v5);
  }
  sub_216779180(a1, (uint64_t)"]", 1);
  return a1;
}

char *sub_2169CBC44(void *a1, long long **a2)
{
  uint64_t v4 = operator new(0x20uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)uint64_t v4 = 0;
  uint64_t result = sub_216812BD8((char *)v4, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  atomic_store(0, (unsigned int *)v4 + 6);
  *a1 = v4;
  atomic_fetch_add_explicit((atomic_uint *volatile)v4 + 6, 1u, memory_order_relaxed);
  return result;
}

void sub_2169CBCB4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void **sub_2169CBCC8(void **a1)
{
  uint64_t v3 = a1 + 16;
  sub_216782F20(&v3);
  uint64_t v3 = a1 + 13;
  sub_216782F20(&v3);
  uint64_t v3 = a1 + 10;
  sub_216782F20(&v3);
  uint64_t v3 = a1 + 7;
  sub_216782F20(&v3);
  uint64_t v3 = a1 + 4;
  sub_216782F20(&v3);
  uint64_t v3 = a1 + 1;
  sub_216782F20(&v3);
  return a1;
}

__n128 sub_2169CBD5C(uint64_t a1)
{
  unsigned int v2 = (char *)operator new(0x18uLL);
  *(void *)unsigned int v2 = &unk_26C756960;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_2169CBDA8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C756960;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_2169CBDD8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t sub_2169CBDE8(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7569D0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2169CBE28()
{
  return &unk_26C7569D0;
}

void sub_2169CBE34(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_21683A7CC();
  }
  (*(void (**)(void **__return_ptr))(*(void *)v2 + 48))(__p);
  if (v6)
  {
    if (SHIBYTE(v5) < 0)
    {
      sub_216778F24((unsigned char *)a2, __p[0], (unint64_t)__p[1]);
    }
    else
    {
      *(_OWORD *)a2 = *(_OWORD *)__p;
      *(void *)(a2 + 16) = v5;
    }
    *(unsigned char *)(a2 + 24) = 1;
  }
  else
  {
    sub_2169CBF18(a2, (long long *)__p);
  }
  if (v6)
  {
    if (SHIBYTE(v5) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_2169CBEF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2169CBF18(uint64_t a1, long long *a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  sub_2169CBF64((_OWORD *)a1, a2);
  return a1;
}

void sub_2169CBF48(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24)) {
    sub_217324594(v1);
  }
  _Unwind_Resume(exception_object);
}

_OWORD *sub_2169CBF64(_OWORD *__dst, long long *a2)
{
  if (*((unsigned char *)a2 + 24))
  {
    uint64_t v2 = __dst;
    if (*((char *)a2 + 23) < 0)
    {
      long long __dst = sub_216778F24(__dst, *(void **)a2, *((void *)a2 + 1));
    }
    else
    {
      long long v3 = *a2;
      *((void *)__dst + 2) = *((void *)a2 + 2);
      *long long __dst = v3;
    }
    v2[24] = 1;
  }
  return __dst;
}

void *sub_2169CBFC0(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *sub_2169CC044@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  _OWORD v5[2] = *(unsigned int **)MEMORY[0x263EF8340];
  long long v3 = (void (*)(uint64_t, unsigned int **))result[9];
  if (v3)
  {
    uint64_t v4 = *result;
    v5[1] = (unsigned int *)&off_26C750BB8;
    sub_21691B31C(v5, a2);
    v3(v4, v5);
    return (uint64_t *)sub_2168EE084((uint64_t)v5);
  }
  else
  {
    *a3 = 0;
    a3[24] = 0;
  }
  return result;
}

void sub_2169CC0E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext::Sdf_TextParserContext(pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *this)
{
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)this + 12, 0.0, 1.0);
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((void *)this + 24) = 0;
  *((void *)this + 23) = (char *)this + 192;
  *((void *)this + 25) = 0;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((void *)this + 22) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 54);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 55);
  *((unsigned char *)this + 232) = 0;
  *((unsigned char *)this + 256) = 0;
  *((void *)this + 54) = 0;
  *((void *)this + 55) = 0;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((void *)this + 52) = (char *)this + 424;
  *((void *)this + 53) = 0;
  *((_DWORD *)this + 112) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::Sdf_ParserValueContext((pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)((char *)this + 456));
  *((void *)this + 96) = 0;
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_2169CC584((void *)this + 97, 1uLL);
  *((unsigned char *)this + 800) = 0;
  *((void *)this + 101) = 0;
  long long v3 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v2);
  sub_216981010((_DWORD *)this + 204, v3);
  sub_21698105C((_DWORD *)this + 205, v3 + 1);
  *((void *)this + 103) = 0;
  *((void *)this + 105) = 0;
  *((void *)this + 107) = 0;
  *((_WORD *)this + 432) = 0;
  *(_OWORD *)((char *)this + 872) = 0u;
  *(_OWORD *)((char *)this + 888) = 0u;
  *(_OWORD *)((char *)this + 904) = 0u;
  *(_OWORD *)((char *)this + 920) = 0u;
  *(_OWORD *)((char *)this + 936) = 0u;
  *(_OWORD *)((char *)this + 952) = 0u;
  *((_DWORD *)this + 242) = 1;
  *((void *)this + 122) = 0;
  return this;
}

void sub_2169CC274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _Unwind_Exception *exception_object, uint64_t a12)
{
  sub_2169CC880(v16);
  sub_2169CC604((void ***)&a12);
  sub_2168EE084(v12 + 760);
  sub_2169CC3E0(v15);
  uint64_t v18 = *(void *)(v12 + 440);
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_21698F21C(v17 + 184, *(void **)(v12 + 424));
  a12 = v17 + 160;
  sub_2169CC78C((void ***)&a12);
  a12 = v17 + 136;
  sub_2169CC68C((void ***)&a12);
  a12 = v17 + 112;
  sub_216981168((void ***)&a12);
  a12 = v17 + 88;
  sub_216981168((void ***)&a12);
  a12 = v17 + 56;
  sub_216981168((void ***)&a12);
  a12 = v17 + 32;
  sub_216981168((void ***)&a12);
  if (*(unsigned char *)(v12 + 256))
  {
    a12 = v17;
    sub_216981168((void ***)&a12);
  }
  sub_21697B754(v14);
  sub_216997EC4(v13, *(void **)(v12 + 192));
  sub_216889A04((void ***)&a12);
  uint64_t v19 = *(void **)(v12 + 136);
  if (v19)
  {
    *(void *)(v12 + 144) = v19;
    operator delete(v19);
  }
  sub_216782F20((void ***)&a12);
  if (*(char *)(v12 + 95) < 0) {
    operator delete(*(void **)(v12 + 72));
  }
  if (*(char *)(v12 + 71) < 0) {
    operator delete(*(void **)(v12 + 48));
  }
  if (*(char *)(v12 + 47) < 0) {
    operator delete(*(void **)(v12 + 24));
  }
  if (*(char *)(v12 + 23) < 0) {
    operator delete(*(void **)v12);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2169CC3E0(uint64_t a1)
{
  if (*(char *)(a1 + 303) < 0) {
    operator delete(*(void **)(a1 + 280));
  }
  sub_2169CC47C((void *)(a1 + 240));
  sub_21699E4F4((void *)(a1 + 176));
  if (*(char *)(a1 + 175) < 0) {
    operator delete(*(void **)(a1 + 152));
  }
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }
  uint64_t v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(void *)(a1 + 96) = v2;
    operator delete(v2);
  }
  uint64_t v5 = (void **)(a1 + 64);
  sub_2169CC500(&v5);
  long long v3 = *(void **)(a1 + 8);
  if (v3)
  {
    *(void *)(a1 + 16) = v3;
    operator delete(v3);
  }
  return a1;
}

void *sub_2169CC47C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_2169CC500(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = sub_216976F30(v4 - 56);
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *sub_2169CC584(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_21677CACC(a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_2169CC5F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_2169CC604(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void ***)**a1;
  if (v2)
  {
    uint64_t v4 = (void ***)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
        sub_2168EBBB8(--v4, 0);
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_2169CC68C(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        sub_2169CC724((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_2169CC724(uint64_t a1, uint64_t a2)
{
  sub_2168EBBB8((void ***)(a2 + 48), 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 28));
  sub_21697C414((_DWORD *)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
  {
    long long v3 = *(void **)a2;
    operator delete(v3);
  }
}

void sub_2169CC78C(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        sub_2169CC824((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_2169CC824(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 28));
  sub_21697C414((_DWORD *)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
  {
    long long v3 = *(void **)a2;
    operator delete(v3);
  }
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_2169CC880(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_SetupValue(std::string *a1, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::SetupFactory(a2 + 456, a1);
}

void pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_MatchMagicIdentifier(uint64_t a1, uint64_t *a2)
{
  long long v3 = (const std::string *)sub_2169B1904(a1);
  pxrInternal__aapl__pxrReserved__::TfStringTrimRight(" \n\t\r", v3, &__str);
  std::operator+<char>();
  uint64_t v4 = std::string::append(&v26, " ");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  int64_t v30 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)uint64_t v29 = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  char v6 = (void *)HIBYTE(v30);
  int v7 = SHIBYTE(v30);
  if (v30 >= 0) {
    uint64_t v8 = v29;
  }
  else {
    uint64_t v8 = (void **)v29[0];
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
  }
  size_t v10 = strlen((const char *)v8);
  if (size >= v10
    && ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
      ? (p_str = &__str)
      : (p_str = (std::string *)__str.__r_.__value_.__r.__words[0]),
        !strncmp((const char *)p_str, (const char *)v8, v10)))
  {
    if (*((char *)a2 + 47) < 0)
    {
      if (!a2[4]) {
        goto LABEL_25;
      }
    }
    else if (!*((unsigned char *)a2 + 47))
    {
      goto LABEL_25;
    }
    uint64_t v17 = a2 + 3;
    if (*((char *)a2 + 47) >= 0) {
      uint64_t v18 = (const char *)(a2 + 3);
    }
    else {
      uint64_t v18 = (const char *)a2[3];
    }
    size_t v19 = strlen(v18);
    if (size < v19 || strcmp((const char *)p_str + size - v19, v18))
    {
      v26.__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/textParserHelpers.cpp";
      v26.__r_.__value_.__l.__size_ = (std::string::size_type)"_MatchMagicIdentifier";
      v26.__r_.__value_.__r.__words[2] = 61;
      uint64_t v27 = "void pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_MatchMagicIdentifier(const Sdf_ParserHelpe"
            "rs::Value &, Sdf_TextParserContext *)";
      char v28 = 0;
      long long v20 = a2 + 6;
      if (*((char *)a2 + 71) < 0) {
        long long v20 = (void *)*v20;
      }
      uint64_t v21 = a2;
      if (*((char *)a2 + 23) < 0) {
        uint64_t v21 = (uint64_t *)*a2;
      }
      if (v7 >= 0) {
        int v22 = v6;
      }
      else {
        int v22 = v29[1];
      }
      std::string::basic_string(&__p, &__str, (std::string::size_type)v22, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v32);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if (*((char *)a2 + 47) < 0) {
        uint64_t v17 = (void *)*v17;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v26, (pxrInternal__aapl__pxrReserved__ *)"File '%s' is not the latest %s version (found '%s', expected '%s'). The file may parse correctly and yield incorrect results.", v23, v20, v21, p_p, v17);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::TfStringTrim(" \n\t\r", &__str, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      unint64_t v14 = &__p;
    }
    else {
      unint64_t v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Magic Cookie '%s'. Expected prefix of '%s'", v12, v13, v14, v8);
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v16 = &v26;
    }
    else {
      long long v16 = (std::string *)v26.__r_.__value_.__r.__words[0];
    }
    pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_RaiseError((pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser *)a2, (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)v16, v15);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v26.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    LOBYTE(v7) = HIBYTE(v30);
  }
LABEL_25:
  if ((v7 & 0x80) != 0) {
    operator delete(v29[0]);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_2169CCB60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (v32 < 0) {
    operator delete(a27);
  }
  if (*(char *)(v33 - 73) < 0) {
    operator delete(*(void **)(v33 - 96));
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_RaiseError(pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser *this, pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *a2, const char *a3)
{
  v19[4] = *(void (**)(uint64_t, void, void, void, void))MEMORY[0x263EF8340];
  uint64_t v5 = *((unsigned int *)this + 242);
  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser *)((char *)this + 816));
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s in <%s> on line %i", v7, v8, a2, Text, v5);
  if (*((char *)this + 71) < 0)
  {
    if (!*((void *)this + 7)) {
      goto LABEL_13;
    }
  }
  else if (!*((unsigned char *)this + 71))
  {
    goto LABEL_13;
  }
  std::operator+<char>();
  if (v15 >= 0) {
    p_p = (const std::string::value_type *)&__p;
  }
  else {
    p_p = (const std::string::value_type *)__p;
  }
  if (v15 >= 0) {
    std::string::size_type v10 = HIBYTE(v15);
  }
  else {
    std::string::size_type v10 = (std::string::size_type)v14;
  }
  std::string::append(&v18, p_p, v10);
  if (SHIBYTE(v15) < 0) {
    operator delete(__p);
  }
LABEL_13:
  std::string::append(&v18, "\n");
  v19[1] = (void (*)(uint64_t, void, void, void, void))v5;
  v19[0] = (void (*)(uint64_t, void, void, void, void))sub_2169E2DC0;
  std::string __p = "sdf/textParserHelpers.cpp";
  unint64_t v14 = "_RaiseError";
  uint64_t v15 = 996;
  long long v16 = "void pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_RaiseError(Sdf_TextParserContext *, const char *)";
  char v17 = 0;
  uint64_t v11 = &unk_26C74B770;
  int v12 = 3;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, v19, (uint64_t *)&v11, (uint64_t *)&v18);
  *((unsigned char *)this + 800) = 1;
  sub_2168579F4((uint64_t (**)(void, void, void, void, void))v19);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
}

void sub_2169CCD78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_GetPermissionFromString(uint64_t *a1, char *a2, char *a3)
{
  if (*((char *)a1 + 23) < 0)
  {
    uint64_t v5 = a1[1];
    if (v5 == 6 && *(_DWORD *)*a1 == 1818391920 && *(_WORD *)(*a1 + 4) == 25449) {
      return 0;
    }
    if (v5 != 7)
    {
      a1 = (uint64_t *)*a1;
      goto LABEL_25;
    }
    a1 = (uint64_t *)*a1;
LABEL_12:
    if (*(_DWORD *)a1 == 1986622064 && *(_DWORD *)((char *)a1 + 3) == 1702125942) {
      return 1;
    }
    goto LABEL_25;
  }
  int v4 = *((unsigned __int8 *)a1 + 23);
  if (v4 == 6)
  {
    if (*(_DWORD *)a1 == 1818391920 && *((_WORD *)a1 + 2) == 25449) {
      return 0;
    }
    goto LABEL_25;
  }
  if (v4 == 7) {
    goto LABEL_12;
  }
LABEL_25:
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"'%s' is not a valid permission constant", a2, a3, a1);
  if (v13 >= 0) {
    p_p = (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)&__p;
  }
  else {
    p_p = (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)__p;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_RaiseError((pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser *)a2, p_p, v10);
  if (v13 < 0) {
    operator delete(__p);
  }
  return 0;
}

void sub_2169CCEE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_GetDisplayUnitFromString(uint64_t a1, pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser *a2)
{
  UnitFromName = pxrInternal__aapl__pxrReserved__::SdfGetUnitFromName(a1);
  if (!*((_DWORD *)UnitFromName + 2)
    && !strcmp((const char *)(*(void *)(MEMORY[0x263F8C258] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*UnitFromName + 8) & 0x7FFFFFFFFFFFFFFFLL)))
  {
    if (*(char *)(a1 + 23) >= 0) {
      uint64_t v7 = a1;
    }
    else {
      uint64_t v7 = *(void *)a1;
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"'%s' is not a valid display unit", v5, v6, v7);
    if (v12 >= 0) {
      p_p = (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)&__p;
    }
    else {
      p_p = (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)__p;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_RaiseError(a2, p_p, v8);
    if (v12 < 0) {
      operator delete(__p);
    }
  }
  return *UnitFromName;
}

void sub_2169CCFBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_ValueAppendAtomic(uint64_t a1, uint64_t a2)
{
}

void pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_ValueSetAtomic(pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser *this, pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  long long v3 = (char *)this + 456;
  if ((pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::IsRecordingString((pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser *)((char *)this + 456)) & 1) != 0
    || !*((unsigned char *)this + 664))
  {
    v13[0] = 0;
    v13[1] = 0;
    uint64_t v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::ProduceValue((uint64_t)v3, (const char *)v13, v5, __p);
    sub_2168ED33C((void *)this + 95, __p);
    sub_2168EE084((uint64_t)__p);
    if (!*((void *)this + 96))
    {
      std::string::size_type v10 = v13;
      if (v14 < 0) {
        std::string::size_type v10 = (void **)v13[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Error parsing simple value: %s", v8, v9, v10);
      if (v16 >= 0) {
        char v12 = __p;
      }
      else {
        char v12 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_RaiseError(this, (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)v12, v11);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Type name has [] for non-shaped value!\n", v4, v5);
    if (v14 >= 0) {
      uint64_t v7 = v13;
    }
    else {
      uint64_t v7 = (void **)v13[0];
    }
    pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_RaiseError(this, (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)v7, v6);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(v13[0]);
  }
}

void sub_2169CD11C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_PrimSetInheritListItems(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v5 = *(void *)(a2 + 320);
  uint64_t v6 = *(void *)(a2 + 328);
  if (a1 && v5 == v6)
  {
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Setting inherit paths to None (or empty list) is only allowed when setting explicit inherit paths, not for list editing", (const char *)a2, a3);
    if (v20 >= 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_RaiseError((pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser *)a2, (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)v8, v7);
LABEL_7:
    if (v20 < 0) {
      operator delete(__p[0]);
    }
    return;
  }
  uint64_t v22 = *(void *)(a2 + 320);
  for (i = v6; ; uint64_t v6 = i)
  {
    if (v5 == v6)
    {
      std::string::size_type v10 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v10) {
        std::string::size_type v10 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      sub_2169CD2F8((void *)v10 + 24, a1, a2 + 320, (uint64_t *)a2);
    }
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)sub_2169813FC(&v22, a2, a3);
    pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidInheritPath(v9, (uint64_t)__p);
    if (v21) {
      break;
    }
    sub_21698147C(&v22);
    uint64_t v5 = v22;
  }
  WhyNot = pxrInternal__aapl__pxrReserved__::SdfAllowed::GetWhyNot((uint64_t *)__p);
  if (*((char *)WhyNot + 23) >= 0) {
    uint64_t v14 = (uint64_t)WhyNot;
  }
  else {
    uint64_t v14 = *WhyNot;
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s", v12, v13, v14);
  if (v18 >= 0) {
    char v16 = (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)&v17;
  }
  else {
    char v16 = (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)v17;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_RaiseError((pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser *)a2, v16, v15);
  if (v18 < 0) {
    operator delete(v17);
  }
  if (v21) {
    goto LABEL_7;
  }
}

void sub_2169CD2B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22)
  {
    if (a21 < 0) {
      operator delete(a16);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_2169CD2F8(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(_DWORD **)a3;
  uint64_t v8 = *(_DWORD **)(a3 + 8);
  unint64_t v9 = (unint64_t)v8 - *(void *)a3;
  if (v9 < 0x10) {
    goto LABEL_2;
  }
  if (v9 > 0x57)
  {
    if (v7 == v8) {
      goto LABEL_2;
    }
    do
    {
      char v13 = v7 + 2;
      if (v7 + 2 == v8) {
        goto LABEL_14;
      }
      char v14 = sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)v7, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v7 + 2));
      uint64_t v7 = v13;
    }
    while ((v14 & 1) != 0);
    uint64_t v8 = v13 - 2;
LABEL_14:
    if (v8 == *(_DWORD **)(a3 + 8) || !sub_2169D3814((_DWORD **)a3))
    {
LABEL_2:
      sub_2169D1B08(a4 + 101);
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SdfListOp();
    }
  }
  else
  {
    do
    {
LABEL_4:
      if (v7 == v8 - 2) {
        goto LABEL_2;
      }
      std::string::size_type v10 = (uint64_t *)v7;
      v7 += 2;
    }
    while (v7 == v8);
    uint64_t v11 = *v10;
    char v12 = v7;
    while (v11 != *v12)
    {
      if (++v12 == (void *)v8) {
        goto LABEL_4;
      }
    }
  }
  unint64_t v15 = *a1 & 0xFFFFFFFFFFFFFFF8;
  if (v15)
  {
    char v16 = (const char *)(v15 + 16);
    if (*(char *)(v15 + 39) < 0) {
      char v16 = *(const char **)v16;
    }
  }
  else
  {
    char v16 = "";
  }
  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(a4 + 102));
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Duplicate items exist for field '%s' at '%s'", v18, v19, v16, Text);
  if (v23 >= 0) {
    p_p = (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)&__p;
  }
  else {
    p_p = (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)__p;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_RaiseError((pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser *)a4, p_p, v20);
  if (v23 < 0) {
    operator delete(__p);
  }
  goto LABEL_2;
}

void sub_2169CD640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_InheritAppendPath(pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser *this, pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *a2)
{
  long long v3 = (pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser *)((char *)this + 216);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser *)((char *)this + 816), &v7);
  pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath(v3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v7, &v9);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  unint64_t v4 = *((void *)this + 41);
  if (v4 >= *((void *)this + 42))
  {
    uint64_t v5 = sub_216981B30((uint64_t *)this + 40, &v9);
  }
  else
  {
    sub_216981010(*((_DWORD **)this + 41), &v9);
    sub_21698105C((_DWORD *)(v4 + 4), &v10);
    uint64_t v5 = v4 + 8;
  }
  *((void *)this + 41) = v5;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  return sub_21697C414(&v9);
}

void sub_2169CD75C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_PrimSetSpecializesListItems(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v5 = *(void *)(a2 + 344);
  uint64_t v6 = *(void *)(a2 + 352);
  if (a1 && v5 == v6)
  {
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Setting specializes paths to None (or empty list) is only allowed when setting explicit specializes paths, not for list editing", (const char *)a2, a3);
    if (v20 >= 0) {
      int v8 = __p;
    }
    else {
      int v8 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_RaiseError((pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser *)a2, (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)v8, v7);
LABEL_7:
    if (v20 < 0) {
      operator delete(__p[0]);
    }
    return;
  }
  uint64_t v22 = *(void *)(a2 + 344);
  for (i = v6; ; uint64_t v6 = i)
  {
    if (v5 == v6)
    {
      int v10 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v10) {
        int v10 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      sub_2169CD2F8((void *)v10 + 38, a1, a2 + 344, (uint64_t *)a2);
    }
    int v9 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)sub_2169813FC(&v22, a2, a3);
    pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidSpecializesPath(v9, (uint64_t)__p);
    if (v21) {
      break;
    }
    sub_21698147C(&v22);
    uint64_t v5 = v22;
  }
  WhyNot = pxrInternal__aapl__pxrReserved__::SdfAllowed::GetWhyNot((uint64_t *)__p);
  if (*((char *)WhyNot + 23) >= 0) {
    uint64_t v14 = (uint64_t)WhyNot;
  }
  else {
    uint64_t v14 = *WhyNot;
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s", v12, v13, v14);
  if (v18 >= 0) {
    char v16 = (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)&v17;
  }
  else {
    char v16 = (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)v17;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_RaiseError((pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser *)a2, v16, v15);
  if (v18 < 0) {
    operator delete(v17);
  }
  if (v21) {
    goto LABEL_7;
  }
}

void sub_2169CD8D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22)
  {
    if (a21 < 0) {
      operator delete(a16);
    }
  }
  _Unwind_Resume(exception_object);
}

_DWORD *pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_SpecializesAppendPath(pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser *this, pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *a2)
{
  long long v3 = (pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser *)((char *)this + 216);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser *)((char *)this + 816), &v7);
  pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath(v3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v7, &v9);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_21697C414(&v7);
  unint64_t v4 = *((void *)this + 44);
  if (v4 >= *((void *)this + 45))
  {
    uint64_t v5 = sub_216981B30((uint64_t *)this + 43, &v9);
  }
  else
  {
    sub_216981010(*((_DWORD **)this + 44), &v9);
    sub_21698105C((_DWORD *)(v4 + 4), &v10);
    uint64_t v5 = v4 + 8;
  }
  *((void *)this + 44) = v5;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  return sub_21697C414(&v9);
}

void sub_2169CD9D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_PrimSetReferenceListItems(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v5 = *(void *)(a2 + 368);
  uint64_t v6 = *(void *)(a2 + 376);
  if (a1 && v5 == v6)
  {
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Setting references to None (or an empty list) is only allowed when setting explicit references, not for list editing", (const char *)a2, a3);
    if (v20 >= 0) {
      int v8 = __p;
    }
    else {
      int v8 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_RaiseError((pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser *)a2, (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)v8, v7);
LABEL_7:
    if (v20 < 0) {
      operator delete(__p[0]);
    }
    return;
  }
  uint64_t v22 = *(void *)(a2 + 368);
  for (i = v6; ; uint64_t v6 = i)
  {
    if (v5 == v6)
    {
      int v10 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v10) {
        int v10 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      sub_2169CDC94((void *)v10 + 35, a1, (long long **)(a2 + 368), (uint64_t *)a2);
    }
    int v9 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)sub_2169CDB94(&v22, a2, a3);
    pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidReference(v9, (uint64_t)__p);
    if (v21) {
      break;
    }
    sub_2169CDC14(&v22);
    uint64_t v5 = v22;
  }
  WhyNot = pxrInternal__aapl__pxrReserved__::SdfAllowed::GetWhyNot((uint64_t *)__p);
  if (*((char *)WhyNot + 23) >= 0) {
    uint64_t v14 = (uint64_t)WhyNot;
  }
  else {
    uint64_t v14 = *WhyNot;
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s", v12, v13, v14);
  if (v18 >= 0) {
    char v16 = (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)&v17;
  }
  else {
    char v16 = (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)v17;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_RaiseError((pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser *)a2, v16, v15);
  if (v18 < 0) {
    operator delete(v17);
  }
  if (v21) {
    goto LABEL_7;
  }
}

void sub_2169CDB50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22)
  {
    if (a21 < 0) {
      operator delete(a16);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2169CDB94(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    _OWORD v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReserved__::SdfRefe"
            "rence>>::operator*() [T = std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_2169CDC0C()
{
}

void *sub_2169CDC14(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReser"
            "ved__::SdfReference>>::operator++() [T = std::vector<pxrInternal__aapl__pxrReserved__::SdfReference>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 56;
  }
  return a1;
}

void sub_2169CDC94(void *a1, uint64_t a2, long long **a3, uint64_t *a4)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  int v7 = *a3;
  int v8 = a3[1];
  unint64_t v9 = 0x6DB6DB6DB6DB6DB7 * (((char *)v8 - (char *)*a3) >> 3);
  if (v9 < 2) {
    goto LABEL_2;
  }
  if (v9 > 0xA)
  {
    if (v7 == v8) {
      goto LABEL_2;
    }
    do
    {
      char v12 = (char *)v7 + 56;
      if ((long long *)((char *)v7 + 56) == v8) {
        goto LABEL_13;
      }
      BOOL v13 = pxrInternal__aapl__pxrReserved__::SdfReference::operator<((unsigned __int8 *)v7, (unsigned __int8 *)v7 + 56);
      int v7 = (long long *)((char *)v7 + 56);
    }
    while (v13);
    int v8 = (long long *)(v12 - 56);
LABEL_13:
    if (v8 == a3[1] || !sub_2169D5110(a3))
    {
LABEL_2:
      sub_2169D1B08(a4 + 101);
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SdfListOp();
    }
  }
  else
  {
    do
    {
LABEL_4:
      if (v7 == (long long *)((char *)v8 - 56)) {
        goto LABEL_2;
      }
      int v10 = (unsigned __int8 *)v7;
      int v7 = (long long *)((char *)v7 + 56);
      uint64_t v11 = (unsigned __int8 *)v7;
    }
    while (v7 == v8);
    while ((pxrInternal__aapl__pxrReserved__::SdfReference::operator==(v10, v11) & 1) == 0)
    {
      v11 += 56;
      if (v11 == (unsigned __int8 *)v8) {
        goto LABEL_4;
      }
    }
  }
  unint64_t v14 = *a1 & 0xFFFFFFFFFFFFFFF8;
  if (v14)
  {
    unint64_t v15 = (const char *)(v14 + 16);
    if (*(char *)(v14 + 39) < 0) {
      unint64_t v15 = *(const char **)v15;
    }
  }
  else
  {
    unint64_t v15 = "";
  }
  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(a4 + 102));
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Duplicate items exist for field '%s' at '%s'", v17, v18, v15, Text);
  if (v22 >= 0) {
    p_p = (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)&__p;
  }
  else {
    p_p = (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)__p;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_RaiseError((pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser *)a4, p_p, v19);
  if (v22 < 0) {
    operator delete(__p);
  }
  goto LABEL_2;
}

void sub_2169CDFFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_PrimSetPayloadListItems(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v5 = *(void *)(a2 + 392);
  uint64_t v6 = *(void *)(a2 + 400);
  if (a1 && v5 == v6)
  {
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Setting payload to None (or an empty list) is only allowed when setting explicit payloads, not for list editing", (const char *)a2, a3);
    if (v20 >= 0) {
      int v8 = __p;
    }
    else {
      int v8 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_RaiseError((pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser *)a2, (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)v8, v7);
LABEL_7:
    if (v20 < 0) {
      operator delete(__p[0]);
    }
    return;
  }
  uint64_t v22 = *(void *)(a2 + 392);
  for (i = v6; ; uint64_t v6 = i)
  {
    if (v5 == v6)
    {
      int v10 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v10) {
        int v10 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      sub_2169CE2F8((void *)v10 + 30, a1, (uint64_t *)(a2 + 392), (uint64_t *)a2);
    }
    uint64_t v9 = sub_2169CE1F8(&v22, a2, a3);
    pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidPayload(v9, (uint64_t)__p);
    if (v21) {
      break;
    }
    sub_2169CE278(&v22);
    uint64_t v5 = v22;
  }
  WhyNot = pxrInternal__aapl__pxrReserved__::SdfAllowed::GetWhyNot((uint64_t *)__p);
  if (*((char *)WhyNot + 23) >= 0) {
    uint64_t v14 = (uint64_t)WhyNot;
  }
  else {
    uint64_t v14 = *WhyNot;
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s", v12, v13, v14);
  if (v18 >= 0) {
    char v16 = (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)&v17;
  }
  else {
    char v16 = (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)v17;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_RaiseError((pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser *)a2, v16, v15);
  if (v18 < 0) {
    operator delete(v17);
  }
  if (v21) {
    goto LABEL_7;
  }
}

void sub_2169CE1B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22)
  {
    if (a21 < 0) {
      operator delete(a16);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2169CE1F8(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    _OWORD v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReserved__::SdfPayl"
            "oad>>::operator*() [T = std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_2169CE270()
{
}

void *sub_2169CE278(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReser"
            "ved__::SdfPayload>>::operator++() [T = std::vector<pxrInternal__aapl__pxrReserved__::SdfPayload>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 48;
  }
  return a1;
}

void sub_2169CE2F8(void *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v7 = *a3;
  int v8 = (unsigned __int8 *)a3[1];
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v8[-*a3] >> 4);
  if (v9 < 2) {
    goto LABEL_2;
  }
  if (v9 > 0xA)
  {
    if ((unsigned __int8 *)v7 == v8) {
      goto LABEL_2;
    }
    do
    {
      uint64_t v12 = v7 + 48;
      if ((unsigned __int8 *)(v7 + 48) == v8) {
        goto LABEL_13;
      }
      BOOL v13 = pxrInternal__aapl__pxrReserved__::SdfPayload::operator<((const void **)v7, (unsigned __int8 *)(v7 + 48));
      v7 += 48;
    }
    while (v13);
    int v8 = (unsigned __int8 *)(v12 - 48);
LABEL_13:
    if (v8 == (unsigned __int8 *)a3[1] || !sub_2169D8114(a3))
    {
LABEL_2:
      sub_2169D1B08(a4 + 101);
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SdfListOp();
    }
  }
  else
  {
    do
    {
LABEL_4:
      if ((unsigned __int8 *)v7 == v8 - 48) {
        goto LABEL_2;
      }
      int v10 = (unsigned __int8 *)v7;
      v7 += 48;
      uint64_t v11 = (unsigned __int8 *)v7;
    }
    while ((unsigned __int8 *)v7 == v8);
    while (!pxrInternal__aapl__pxrReserved__::SdfPayload::operator==(v10, v11))
    {
      v11 += 48;
      if (v11 == v8) {
        goto LABEL_4;
      }
    }
  }
  unint64_t v14 = *a1 & 0xFFFFFFFFFFFFFFF8;
  if (v14)
  {
    unint64_t v15 = (const char *)(v14 + 16);
    if (*(char *)(v14 + 39) < 0) {
      unint64_t v15 = *(const char **)v15;
    }
  }
  else
  {
    unint64_t v15 = "";
  }
  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(a4 + 102));
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Duplicate items exist for field '%s' at '%s'", v17, v18, v15, Text);
  if (v22 >= 0) {
    p_p = (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)&__p;
  }
  else {
    p_p = (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)__p;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_RaiseError((pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser *)a4, p_p, v19);
  if (v22 < 0) {
    operator delete(__p);
  }
  goto LABEL_2;
}

void sub_2169CE658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_PrimSetVariantSetNamesListItems(uint64_t a1, uint64_t *a2)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  unint64_t v34 = 0;
  char v4 = (long long *)(a2 + 20);
  sub_21680BC90(&v32, (a2[21] - a2[20]) >> 3);
  for (long long i = *v4; ; sub_2169CECC4(&i))
  {
    if ((void)i == *((void *)&i + 1))
    {
      char v22 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v22) {
        char v22 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      sub_2169CED44((void *)v22 + 59, a1, (uint64_t)&v32, a2);
    }
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_2169CEBC8((uint64_t *)&i, v5, v6);
    int v8 = (*(void *)v7 & 0xFFFFFFFFFFFFFFF8) != 0
       ? (long long *)((*(void *)v7 & 0xFFFFFFFFFFFFFFF8) + 16)
       : (long long *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v7);
    pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidVariantIdentifier(v8, (uint64_t)v35);
    if ((_BYTE)v37) {
      break;
    }
    unint64_t v11 = *(void *)*sub_2169CEC48(&i, v9, v10) & 0xFFFFFFFFFFFFFFF8;
    if (v11)
    {
      uint64_t v12 = (char *)(v11 + 16);
      if (*(char *)(v11 + 39) < 0) {
        uint64_t v12 = *(char **)v12;
      }
    }
    else
    {
      uint64_t v12 = "";
    }
    sub_216779094(__p, v12);
    BOOL v13 = v33;
    if ((unint64_t)v33 >= v34)
    {
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v33[-v32] >> 3);
      unint64_t v16 = v15 + 1;
      if (v15 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      if (0x5555555555555556 * ((uint64_t)(v34 - v32) >> 3) > v16) {
        unint64_t v16 = 0x5555555555555556 * ((uint64_t)(v34 - v32) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v34 - v32) >> 3) >= 0x555555555555555) {
        unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v17 = v16;
      }
      uint64_t v38 = &v34;
      if (v17) {
        char v18 = (char *)sub_216782ED8((uint64_t)&v34, v17);
      }
      else {
        char v18 = 0;
      }
      size_t v19 = &v18[24 * v15];
      v35[0] = v18;
      v35[1] = v19;
      uint64_t v37 = &v18[24 * v17];
      long long v20 = *(_OWORD *)__p;
      *((void *)v19 + 2) = v30;
      *(_OWORD *)size_t v19 = v20;
      __p[1] = 0;
      uint64_t v30 = 0;
      __p[0] = 0;
      unint64_t v36 = v19 + 24;
      sub_216790CCC(&v32, v35);
      char v21 = v33;
      sub_216790E64((uint64_t)v35);
      uint64_t v33 = v21;
      if (SHIBYTE(v30) < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v14 = *(_OWORD *)__p;
      *((void *)v33 + 2) = v30;
      _OWORD *v13 = v14;
      uint64_t v33 = (char *)v13 + 24;
    }
  }
  WhyNot = pxrInternal__aapl__pxrReserved__::SdfAllowed::GetWhyNot((uint64_t *)v35);
  if (*((char *)WhyNot + 23) >= 0) {
    uint64_t v26 = (uint64_t)WhyNot;
  }
  else {
    uint64_t v26 = *WhyNot;
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s", v24, v25, v26);
  if (v30 >= 0) {
    char v28 = __p;
  }
  else {
    char v28 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_RaiseError((pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser *)a2, (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)v28, v27);
  if (SHIBYTE(v30) < 0) {
    operator delete(__p[0]);
  }
  if ((_BYTE)v37 && SHIBYTE(v36) < 0) {
    operator delete(v35[0]);
  }
  v35[0] = &v32;
  sub_216782F20((void ***)v35);
}

void sub_2169CEAFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  std::string __p = &a21;
  sub_216782F20((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t sub_2169CEBC8(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    _OWORD v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReserved__::TfToken"
            ">>::operator*() [T = std::vector<pxrInternal__aapl__pxrReserved__::TfToken>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_2169CEC40()
{
}

void *sub_2169CEC48(void *result, uint64_t a2, char *a3)
{
  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReserved__::TfToken"
            ">>::operator->() [T = std::vector<pxrInternal__aapl__pxrReserved__::TfToken>, Reverse = false]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void *sub_2169CECC4(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReser"
            "ved__::TfToken>>::operator++() [T = std::vector<pxrInternal__aapl__pxrReserved__::TfToken>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

void sub_2169CED44(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  int v8 = *(long long **)a3;
  uint64_t v7 = *(void *)(a3 + 8);
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *(void *)a3) >> 3);
  if (v9 >= 2)
  {
    if (v9 > 0xA)
    {
      if (*(void *)(a3 + 8) != sub_2169DADDC((uint64_t)v8, v7) && sub_2169DACEC((long long **)a3))
      {
LABEL_27:
        unint64_t v23 = *a1 & 0xFFFFFFFFFFFFFFF8;
        if (v23)
        {
          uint64_t v24 = (const char *)(v23 + 16);
          if (*(char *)(v23 + 39) < 0) {
            uint64_t v24 = *(const char **)v24;
          }
        }
        else
        {
          uint64_t v24 = "";
        }
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(a4 + 102));
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Duplicate items exist for field '%s' at '%s'", v26, v27, v24, Text);
        if (v31 >= 0) {
          p_p = (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)&__p;
        }
        else {
          p_p = (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)__p;
        }
        pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_RaiseError((pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser *)a4, p_p, v28);
        if (v31 < 0) {
          operator delete(__p);
        }
      }
    }
    else
    {
      int v10 = (long long *)(v7 - 24);
      while (v8 != v10)
      {
        unint64_t v11 = v8;
        int v8 = (long long *)((char *)v8 + 24);
        if (v8 != (long long *)v7)
        {
          uint64_t v12 = *((unsigned __int8 *)v11 + 23);
          size_t v13 = *((void *)v11 + 1);
          if ((v12 & 0x80u) == 0) {
            uint64_t v14 = *((unsigned __int8 *)v11 + 23);
          }
          else {
            uint64_t v14 = *((void *)v11 + 1);
          }
          unint64_t v15 = v8;
          do
          {
            uint64_t v16 = *((unsigned __int8 *)v15 + 23);
            int v17 = (char)v16;
            if ((v16 & 0x80u) != 0) {
              uint64_t v16 = *((void *)v15 + 1);
            }
            if (v14 == v16)
            {
              if (v17 >= 0) {
                char v18 = v15;
              }
              else {
                char v18 = *(long long **)v15;
              }
              if ((v12 & 0x80) != 0)
              {
                long long v20 = a1;
                char v21 = v10;
                int v22 = memcmp(*(const void **)v11, v18, v13);
                int v10 = v21;
                a1 = v20;
                if (!v22) {
                  goto LABEL_27;
                }
              }
              else
              {
                if (!v12) {
                  goto LABEL_27;
                }
                uint64_t v19 = 0;
                while (*((unsigned __int8 *)v11 + v19) == *((unsigned __int8 *)v18 + v19))
                {
                  if (v12 == ++v19) {
                    goto LABEL_27;
                  }
                }
              }
            }
            unint64_t v15 = (long long *)((char *)v15 + 24);
          }
          while (v15 != (long long *)v7);
        }
      }
    }
  }
  sub_2169D1B08(a4 + 101);
  pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SdfListOp();
}

void sub_2169CF10C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_RelationshipInitTarget(pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *a3)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget((const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)a2 + 816), this, &v10);
  uint64_t v5 = sub_2169D1B08((uint64_t *)a2 + 101);
  if (((*(uint64_t (**)(uint64_t, int *))(*(void *)v5 + 72))(v5, &v10) & 1) == 0)
  {
    uint64_t v6 = sub_2169D1B08((uint64_t *)a2 + 101);
    (*(void (**)(uint64_t, int *, uint64_t))(*(void *)v6 + 64))(v6, &v10, 9);
    unint64_t v7 = *((void *)a2 + 34);
    if (v7 >= *((void *)a2 + 35))
    {
      uint64_t v8 = sub_216981B30((uint64_t *)a2 + 33, this);
    }
    else
    {
      sub_216981010(*((_DWORD **)a2 + 34), this);
      sub_21698105C((_DWORD *)(v7 + 4), (_DWORD *)this + 1);
      uint64_t v8 = v7 + 8;
    }
    *((void *)a2 + 34) = v8;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
  return sub_21697C414(&v10);
}

void sub_2169CF274(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_RelationshipSetTargetsList(uint64_t a1, uint64_t a2, char *a3)
{
  if (*(unsigned char *)(a2 + 256))
  {
    uint64_t v5 = *(void *)(a2 + 232);
    uint64_t v6 = *(void *)(a2 + 240);
    if (a1 && v5 == v6)
    {
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Setting relationship targets to None (or empty list) is only allowed when setting explicit targets, not for list editing", (const char *)a2, a3);
      if (v25 >= 0) {
        p_p = (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)&__p;
      }
      else {
        p_p = (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)__p;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_RaiseError((pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser *)a2, p_p, v7);
LABEL_8:
      if (v25 < 0) {
        operator delete(__p);
      }
      return;
    }
    uint64_t v27 = *(void *)(a2 + 232);
    for (i = v6; ; uint64_t v6 = i)
    {
      if (v5 == v6)
      {
        if (a1 <= 1)
        {
          int v10 = *(void **)(a2 + 232);
          int v11 = *(void **)(a2 + 240);
          std::string __p = v10;
          uint64_t v24 = v11;
          while (v10 != v11)
          {
            uint64_t v12 = (pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser *)sub_2169813FC((uint64_t *)&__p, a2, a3);
            pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_RelationshipInitTarget(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a2, v13);
            sub_21698147C(&__p);
            int v10 = __p;
            int v11 = v24;
          }
        }
        uint64_t v14 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v14) {
          uint64_t v14 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        sub_2169CD2F8((void *)v14 + 53, a1, a2 + 232, (uint64_t *)a2);
      }
      unint64_t v9 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)sub_2169813FC(&v27, a2, a3);
      pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidRelationshipTargetPath(v9, (uint64_t)&__p);
      if (v26) {
        break;
      }
      sub_21698147C(&v27);
      uint64_t v5 = v27;
    }
    WhyNot = pxrInternal__aapl__pxrReserved__::SdfAllowed::GetWhyNot((uint64_t *)&__p);
    if (*((char *)WhyNot + 23) >= 0) {
      uint64_t v18 = (uint64_t)WhyNot;
    }
    else {
      uint64_t v18 = *WhyNot;
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s", v16, v17, v18);
    if (v22 >= 0) {
      long long v20 = (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)&v21;
    }
    else {
      long long v20 = (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)v21;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_RaiseError((pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser *)a2, v20, v19);
    if (v22 < 0) {
      operator delete(v21);
    }
    if (v26) {
      goto LABEL_8;
    }
  }
}

void sub_2169CF41C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22)
  {
    if (a21 < 0) {
      operator delete(a16);
    }
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_PrimSetVariantSelection(pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser *this, pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *a2)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  v39[0] = 0;
  v39[1] = 0;
  uint64_t v38 = (uint64_t *)v39;
  uint64_t v43 = 0;
  long long v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3) {
    long long v3 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  uint64_t v4 = sub_2169D1B08((uint64_t *)this + 101);
  if ((*(unsigned int (**)(uint64_t, char *, uint64_t, unsigned char *))(*(void *)v4 + 112))(v4, (char *)this + 816, (uint64_t)v3 + 456, v42))
  {
    uint64_t v5 = sub_2169CF86C((pxrInternal__aapl__pxrReserved__::VtValue *)v42);
    if (&v38 != (uint64_t **)v5) {
      sub_216799C1C(&v38, *(long long **)v5, (long long *)(v5 + 8));
    }
  }
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)*((void *)this + 97);
  long long v40 = 0u;
  long long v41 = 0u;
  *(void *)&long long v40 = pxrInternal__aapl__pxrReserved__::VtDictionary::begin(v6);
  *((void *)&v40 + 1) = v7;
  *(void *)&long long v41 = pxrInternal__aapl__pxrReserved__::VtDictionary::end(v6);
  *((void *)&v41 + 1) = v8;
  while (1)
  {
    if (*((void *)&v40 + 1) == *((void *)&v41 + 1) && (!*((void *)&v40 + 1) || (void)v40 == (void)v41))
    {
      uint64_t v30 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v30) {
        uint64_t v30 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      uint64_t v31 = sub_2169D1B08((uint64_t *)this + 101);
      *((void *)&v40 + 1) = &off_26C756CD0;
      sub_2169DC07C(&v40, (const void ***)&v38);
      (*(void (**)(uint64_t, char *, uint64_t, long long *))(*(void *)v31 + 152))(v31, (char *)this + 816, (uint64_t)v30 + 456, &v40);
      sub_2168EE084((uint64_t)&v40);
      pxrInternal__aapl__pxrReserved__::VtDictionary::clear(*((pxrInternal__aapl__pxrReserved__::VtDictionary **)this
                                                            + 97));
      goto LABEL_40;
    }
    int v10 = sub_2168ECEE8(&v40, v8, v9);
    if ((sub_21695C360((pxrInternal__aapl__pxrReserved__::VtValue *)(*v10 + 56)) & 1) == 0) {
      break;
    }
    size_t v13 = sub_2168ECEE8(&v40, (uint64_t)v11, v12);
    uint64_t v14 = sub_21695A928((pxrInternal__aapl__pxrReserved__::VtValue *)(*v13 + 56));
    if (*(char *)(v14 + 23) < 0)
    {
      sub_216778F24(&__str, *(void **)v14, *(void *)(v14 + 8));
    }
    else
    {
      long long v15 = *(_OWORD *)v14;
      __str.__r_.__value_.__r.__words[2] = *(void *)(v14 + 16);
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v15;
    }
    pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidVariantSelection((long long *)&__str, v34);
    if (v36)
    {
      WhyNot = pxrInternal__aapl__pxrReserved__::SdfAllowed::GetWhyNot((uint64_t *)v34);
      if (*((char *)WhyNot + 23) >= 0) {
        uint64_t v27 = (uint64_t)WhyNot;
      }
      else {
        uint64_t v27 = *WhyNot;
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s", v25, v26, v27);
      if (v33 >= 0) {
        p_p = (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)&__p;
      }
      else {
        p_p = (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)__p;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_RaiseError(this, p_p, v28);
      if (v33 < 0) {
        operator delete(__p);
      }
      if (v36 && v35 < 0) {
        operator delete(v34[0]);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        unint64_t v23 = (void *)__str.__r_.__value_.__r.__words[0];
        goto LABEL_36;
      }
      goto LABEL_40;
    }
    v34[0] = (void *)(*sub_2168ECEE8(&v40, v16, v17) + 32);
    uint64_t v18 = sub_21677B174(&v38, (const void **)v34[0], (uint64_t)&unk_2174BFD90, (long long **)v34);
    std::string::operator=((std::string *)(v18 + 7), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    sub_2168ECF78(&v40, v19, v20);
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"variant name must be a string", v11, v12);
  if (v35 >= 0) {
    char v22 = v34;
  }
  else {
    char v22 = (void **)v34[0];
  }
  pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_RaiseError(this, (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)v22, v21);
  if (v35 < 0)
  {
    unint64_t v23 = v34[0];
LABEL_36:
    operator delete(v23);
  }
LABEL_40:
  sub_2168EE084((uint64_t)v42);
  sub_2167877AC((uint64_t)&v38, v39[0]);
}

void sub_2169CF7C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,void *a30,uint64_t a31,char a32)
{
  sub_2168EE084((uint64_t)&a32);
  sub_2168EE084(v32 - 72);
  sub_2167877AC((uint64_t)&a29, a30);
  _Unwind_Resume(a1);
}

uint64_t sub_2169CF86C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (sub_2169DBB2C(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_2169DBBB8, (uint64_t)&stru_26C756CC0);
  }
}

_DWORD *pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_RelocatesAdd(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_2169B1904(a1);
  uint64_t v6 = sub_2169B1904(a2);
  pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(&v27, v5);
  pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(&v25, v6);
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidRelocatesPath((pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)&v27, (uint64_t)&__p);
  if (v24)
  {
    if (v23 < 0) {
      operator delete(__p);
    }
    if (*(char *)(v5 + 23) >= 0) {
      uint64_t v9 = v5;
    }
    else {
      uint64_t v9 = *(void *)v5;
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"'%s' is not a valid relocates path", v7, v8, v9);
    if (v23 >= 0) {
      p_p = (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)&__p;
    }
    else {
      p_p = (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)__p;
    }
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidRelocatesPath((pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)&v25, (uint64_t)&__p);
    if (!v24)
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v27, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a3 + 816), &v18);
      pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v25, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a3 + 816), &v16);
      sub_2169D36F0(&__p, &v18, &v16);
      sub_2169DC0E4((uint64_t **)(a3 + 416), (pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, &__p);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
      sub_21697C414(&v21);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
      sub_21697C414(&__p);
      *(unsigned char *)(a3 + 865) = 1;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
      sub_21697C414(&v16);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
      sub_21697C414(&v18);
      goto LABEL_22;
    }
    if (v23 < 0) {
      operator delete(__p);
    }
    if (*(char *)(v6 + 23) >= 0) {
      uint64_t v14 = v6;
    }
    else {
      uint64_t v14 = *(void *)v6;
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"'%s' is not a valid relocates path", v12, v13, v14);
    if (v23 >= 0) {
      p_p = (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)&__p;
    }
    else {
      p_p = (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)__p;
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_RaiseError((pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser *)a3, p_p, v10);
  if (v23 < 0) {
    operator delete(__p);
  }
LABEL_22:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v26);
  sub_21697C414(&v25);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v28);
  return sub_21697C414(&v27);
}

void sub_2169CFB18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12, int a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  sub_2169CFB98(&__p);
  sub_21697B754(&a11);
  sub_21697B754(&a13);
  sub_21697B754((_DWORD *)(v19 - 48));
  sub_21697B754((_DWORD *)(v19 - 40));
  _Unwind_Resume(a1);
}

_DWORD *sub_2169CFB98(_DWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 3);
  sub_21697C414(a1 + 2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);

  return sub_21697C414(a1);
}

void pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_AttributeSetConnectionTargetsList(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(void *)(a2 + 288);
  uint64_t v6 = *(void *)(a2 + 296);
  if (a1 && v5 == v6)
  {
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Setting connection paths to None (or an empty list) is only allowed when setting explicit connection paths, not for list editing", (const char *)a2, a3);
    if (v29 >= 0) {
      p_p = (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)&__p;
    }
    else {
      p_p = (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)__p;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_RaiseError((pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser *)a2, p_p, v7);
LABEL_7:
    if (v29 < 0) {
      operator delete(__p);
    }
    return;
  }
  uint64_t v25 = *(void *)(a2 + 288);
  for (i = v6; ; uint64_t v6 = i)
  {
    if (v5 == v6)
    {
      if (a1 <= 1)
      {
        int v10 = *(_UNKNOWN ***)(a2 + 296);
        std::string __p = *(void **)(a2 + 288);
        int v28 = v10;
        while (__p != v28)
        {
          int v11 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)sub_2169813FC((uint64_t *)&__p, a2, a3);
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 816), v11, v23);
          uint64_t v12 = sub_2169D1B08((uint64_t *)(a2 + 808));
          if (((*(uint64_t (**)(uint64_t, void **))(*(void *)v12 + 72))(v12, v23) & 1) == 0)
          {
            uint64_t v13 = sub_2169D1B08((uint64_t *)(a2 + 808));
            (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v13 + 64))(v13, v23, 2);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v23 + 1);
          sub_21697C414(v23);
          sub_21698147C(&__p);
        }
        uint64_t v14 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
        if (!v14) {
          uint64_t v14 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
        }
        uint64_t v15 = sub_2169D1B08((uint64_t *)(a2 + 808));
        int v28 = &off_26C756D88;
        sub_2169DC54C((unsigned int **)&__p, (_DWORD **)(a2 + 288));
        (*(void (**)(uint64_t, uint64_t, pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *, void **))(*(void *)v15 + 152))(v15, a2 + 816, v14, &__p);
        sub_2168EE084((uint64_t)&__p);
      }
      int v16 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v16) {
        int v16 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      sub_2169CD2F8((void *)v16 + 7, a1, a2 + 288, (uint64_t *)a2);
    }
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)sub_2169813FC(&v25, a2, a3);
    pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidAttributeConnectionPath(v9, (uint64_t)&__p);
    if (v30) {
      break;
    }
    sub_21698147C(&v25);
    uint64_t v5 = v25;
  }
  WhyNot = pxrInternal__aapl__pxrReserved__::SdfAllowed::GetWhyNot((uint64_t *)&__p);
  if (*((char *)WhyNot + 23) >= 0) {
    uint64_t v20 = (uint64_t)WhyNot;
  }
  else {
    uint64_t v20 = *WhyNot;
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s", v18, v19, v20);
  if (v24 >= 0) {
    int v22 = v23;
  }
  else {
    int v22 = (void **)v23[0];
  }
  pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_RaiseError((pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser *)a2, (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)v22, v21);
  if (v24 < 0) {
    operator delete(v23[0]);
  }
  if (v30) {
    goto LABEL_7;
  }
}

void sub_2169CFEC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a25)
  {
    if (a24 < 0) {
      operator delete(a19);
    }
  }
  _Unwind_Resume(exception_object);
}

_DWORD *pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_AttributeAppendConnectionPath(pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser *this, pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *a2)
{
  long long v3 = (pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser *)((char *)this + 216);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser *)((char *)this + 816), v14);
  pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath(v3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v14, &v16);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v14 + 1);
  sub_21697C414(v14);
  if (pxrInternal__aapl__pxrReserved__::SdfPath::ContainsPrimVariantSelection((pxrInternal__aapl__pxrReserved__::SdfPath *)&v16))
  {
    v14[0] = "sdf/textParserHelpers.cpp";
    v14[1] = "_AttributeAppendConnectionPath";
    void v14[2] = 449;
    void v14[3] = "void pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_AttributeAppendConnectionPath(Sdf_TextParserContext *)";
    char v15 = 0;
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v16);
    uint64_t v5 = (void *)((char *)this + 48);
    if (*((char *)this + 71) < 0) {
      uint64_t v5 = (void *)*v5;
    }
    uint64_t v6 = *((unsigned int *)this + 242);
    pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections((pxrInternal__aapl__pxrReserved__::SdfPath *)&v16, &v12);
    uint64_t v7 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v12);
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v14, (pxrInternal__aapl__pxrReserved__ *)"Connection path <%s> (in file @%s@, line %i) has a variant selection, but variant selections are not meaningful in connection paths.  Stripping the variant selection and using <%s> instead.  Resaving the file will fix this issue.", v8, Text, v5, v6, v7);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
    sub_21697C414(&v12);
    pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections((pxrInternal__aapl__pxrReserved__::SdfPath *)&v16, (int *)v14);
    sub_21697DE94(&v16, (int *)v14);
    sub_21697DEEC(&v17, (int *)v14 + 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v14 + 1);
    sub_21697C414(v14);
  }
  unint64_t v9 = *((void *)this + 37);
  if (v9 >= *((void *)this + 38))
  {
    uint64_t v10 = sub_216981B30((uint64_t *)this + 36, &v16);
  }
  else
  {
    sub_216981010(*((_DWORD **)this + 37), &v16);
    sub_21698105C((_DWORD *)(v9 + 4), &v17);
    uint64_t v10 = v9 + 8;
  }
  *((void *)this + 37) = v10;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
  return sub_21697C414(&v16);
}

void sub_2169D00D0(_Unwind_Exception *a1)
{
  sub_21697B754((_DWORD *)(v1 - 40));
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_PrimInitAttribute(uint64_t a1, uint64_t a2)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  sub_2169B1904(a1);
  long long v3 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v61);
  if ((v61 & 0xFFFFFFFFFFFFFFF8) != 0) {
    Emptyunint64_t String = (uint64_t *)((v61 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v3);
  }
  if ((pxrInternal__aapl__pxrReserved__::SdfPath::IsValidNamespacedIdentifier((size_t *)EmptyString) & 1) == 0)
  {
    unint64_t v7 = v61 & 0xFFFFFFFFFFFFFFF8;
    if ((v61 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      uint64_t v8 = (const char *)(v7 + 16);
      if (*(char *)(v7 + 39) < 0) {
        uint64_t v8 = *(const char **)v8;
      }
    }
    else
    {
      uint64_t v8 = "";
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"'%s' is not a valid attribute name", v5, v6, v8);
    if (v68 >= 0) {
      uint64_t v10 = (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)&v66;
    }
    else {
      uint64_t v10 = v66;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_RaiseError((pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser *)a2, v10, v9);
    if (v68 < 0) {
      operator delete(v66);
    }
  }
  uint64_t v11 = a2 + 816;
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 816), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v61, (int *)&v66);
  sub_21697DE94((int *)(a2 + 816), (int *)&v66);
  sub_21697DEEC((int *)(a2 + 820), (int *)&v66 + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v66 + 1);
  sub_21697C414(&v66);
  int v12 = (uint64_t *)(a2 + 808);
  uint64_t v13 = sub_2169D1B08((uint64_t *)(a2 + 808));
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v13 + 72))(v13, a2 + 816) & 1) == 0)
  {
    uint64_t v14 = *(void *)(a2 + 904);
    char v15 = *(void **)(v14 - 16);
    if ((unint64_t)v15 >= *(void *)(v14 - 8))
    {
      int v17 = sub_216973984((char **)(v14 - 24), &v61);
    }
    else
    {
      uint64_t v16 = v61;
      void *v15 = v61;
      if ((v16 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *v15 &= 0xFFFFFFFFFFFFFFF8;
      }
      int v17 = (char *)(v15 + 1);
    }
    *(void *)(v14 - 16) = v17;
    uint64_t v18 = sub_2169D1B08((uint64_t *)(a2 + 808));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v18 + 64))(v18, a2 + 816, 1);
    uint64_t v19 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v19) {
      uint64_t v19 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t v20 = sub_2169D1B08((uint64_t *)(a2 + 808));
    uint64_t v67 = (char *)&unk_26C7501AB;
    LOBYTE(v66) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext **))(*(void *)v20 + 152))(v20, a2 + 816, (uint64_t)v19 + 64, &v66);
    sub_2168EE084((uint64_t)&v66);
  }
  if (*(unsigned char *)(a2 + 801))
  {
    int v21 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v21) {
      int v21 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t v22 = sub_2169D1B08((uint64_t *)(a2 + 808));
    uint64_t v67 = (char *)&unk_26C7501AB;
    LOBYTE(v66) = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t, pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext **))(*(void *)v22 + 152))(v22, a2 + 816, (uint64_t)v21 + 64, &v66);
    sub_2168EE084((uint64_t)&v66);
  }
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v60);
  uint64_t v65 = 0;
  char v23 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v23) {
    char v23 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  uint64_t v24 = sub_2169D1B08((uint64_t *)(a2 + 808));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, char *))(*(void *)v24 + 112))(v24, a2 + 816, (uint64_t)v23 + 448, v64))
  {
    uint64_t v25 = (void *)sub_21695C470((pxrInternal__aapl__pxrReserved__::VtValue *)v64);
    if ((v60 & 0xFFFFFFFFFFFFFFF8) != (*v25 & 0xFFFFFFFFFFFFFFF8))
    {
      Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 816));
      if (*((char *)Name + 23) >= 0) {
        uint64_t v29 = (uint64_t)Name;
      }
      else {
        uint64_t v29 = *Name;
      }
      unint64_t v30 = *v25 & 0xFFFFFFFFFFFFFFF8;
      if (v30)
      {
        uint64_t v31 = (const char *)(v30 + 16);
        if (*(char *)(v30 + 39) < 0) {
          uint64_t v31 = *(const char **)v31;
        }
      }
      else
      {
        uint64_t v31 = "";
      }
      unint64_t v35 = v60 & 0xFFFFFFFFFFFFFFF8;
      if ((v60 & 0xFFFFFFFFFFFFFFF8) != 0)
      {
        char v36 = (const char *)(v35 + 16);
        if (*(char *)(v35 + 39) < 0) {
          char v36 = *(const char **)v36;
        }
      }
      else
      {
        char v36 = "";
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"attribute '%s' already has type '%s', cannot change to '%s'", v27, v28, v29, v31, v36);
      if (v68 >= 0) {
        uint64_t v38 = (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)&v66;
      }
      else {
        uint64_t v38 = v66;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_RaiseError((pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser *)a2, v38, v37);
      if (v68 < 0) {
        operator delete(v66);
      }
    }
  }
  else
  {
    uint64_t v32 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v32) {
      uint64_t v32 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t v33 = sub_2169D1B08((uint64_t *)(a2 + 808));
    unint64_t v66 = (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)v60;
    uint64_t v67 = (char *)&off_26C750C70 + 1;
    if ((v60 & 7) != 0)
    {
      unint64_t v34 = (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)(v60 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v60 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
        unint64_t v66 = v34;
      }
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext **))(*(void *)v33 + 152))(v33, a2 + 816, (uint64_t)v32 + 448, &v66);
    sub_2168EE084((uint64_t)&v66);
  }
  if (*(void *)(a2 + 840)) {
    unsigned int v39 = *(_DWORD *)sub_2169D0924((pxrInternal__aapl__pxrReserved__::VtValue *)(a2 + 832));
  }
  else {
    unsigned int v39 = 0;
  }
  uint64_t v63 = 0;
  long long v40 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v40) {
    long long v40 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  uint64_t v41 = sub_2169D1B08((uint64_t *)(a2 + 808));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, char *))(*(void *)v41 + 112))(v41, a2 + 816, (uint64_t)v40 + 464, v62))
  {
    if (v39 != *(_DWORD *)sub_2169D0924((pxrInternal__aapl__pxrReserved__::VtValue *)v62))
    {
      char v42 = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 816));
      if (*((char *)v42 + 23) >= 0) {
        uint64_t v43 = (uint64_t)v42;
      }
      else {
        uint64_t v43 = *v42;
      }
      uint64_t v44 = (unsigned int *)sub_2169D0924((pxrInternal__aapl__pxrReserved__::VtValue *)v62);
      pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&stru_26C756E50, *v44, (uint64_t)v58);
      int v45 = v59;
      unsigned __int8 v46 = (void **)v58[0];
      pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&stru_26C756E50, v39, (uint64_t)__p);
      char v49 = v58;
      if (v45 < 0) {
        char v49 = v46;
      }
      if (v57 >= 0) {
        uint64_t v50 = __p;
      }
      else {
        uint64_t v50 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"attribute '%s' already has variability '%s', cannot change to '%s'", v47, v48, v43, v49, v50);
      if (v68 >= 0) {
        uint64_t v52 = (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)&v66;
      }
      else {
        uint64_t v52 = v66;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_RaiseError((pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser *)a2, v52, v51);
      if (v68 < 0) {
        operator delete(v66);
      }
      if (v57 < 0) {
        operator delete(__p[0]);
      }
      if (v59 < 0) {
        operator delete(v58[0]);
      }
    }
  }
  else
  {
    unsigned __int8 v53 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v53) {
      unsigned __int8 v53 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t v54 = sub_2169D1B08(v12);
    uint64_t v67 = (char *)&off_26C756E60 + 3;
    LODWORD(v66) = v39;
    (*(void (**)(uint64_t, uint64_t, uint64_t, pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext **))(*(void *)v54 + 152))(v54, v11, (uint64_t)v53 + 464, &v66);
    sub_2168EE084((uint64_t)&v66);
  }
  sub_2168EE084((uint64_t)v62);
  uint64_t result = sub_2168EE084((uint64_t)v64);
  if ((v60 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v60 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v61 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v61 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void sub_2169D07E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,char a27)
{
  if (*(char *)(v27 - 57) < 0) {
    operator delete(*(void **)(v27 - 80));
  }
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  sub_2168EE084((uint64_t)&a27);
  sub_2168EE084(v27 - 96);
  if ((a25 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((a26 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2169D0924(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (sub_2169DC5C4(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      uint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return (uint64_t)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_2169DC650, (uint64_t)&stru_26C756E50);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_DictionaryBegin(void *a1)
{
  char v23 = 0;
  uint64_t v2 = (void *)a1[98];
  unint64_t v3 = a1[99];
  if ((unint64_t)v2 >= v3)
  {
    uint64_t v5 = (int64x2_t *)(a1 + 97);
    uint64_t v6 = a1[97];
    uint64_t v7 = ((uint64_t)v2 - v6) >> 3;
    if ((unint64_t)(v7 + 1) >> 61) {
      sub_21677CB10();
    }
    uint64_t v8 = (uint64_t)(a1 + 99);
    uint64_t v9 = v3 - v6;
    uint64_t v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v7 + 1)) {
      uint64_t v10 = v7 + 1;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t v27 = a1 + 99;
    if (v11)
    {
      int v12 = (char *)sub_21677CB28(v8, v11);
      uint64_t v13 = v23;
    }
    else
    {
      uint64_t v13 = 0;
      int v12 = 0;
    }
    uint64_t v14 = &v12[8 * v7];
    char v15 = &v12[8 * v11];
    int v26 = v15;
    char v23 = 0;
    *(void *)uint64_t v14 = v13;
    uint64_t v4 = v14 + 8;
    v25.i64[1] = (uint64_t)(v14 + 8);
    uint64_t v16 = (void *)a1[98];
    int v17 = (void *)a1[97];
    if (v16 == v17)
    {
      int64x2_t v19 = vdupq_n_s64((unint64_t)v16);
    }
    else
    {
      do
      {
        uint64_t v18 = *--v16;
        void *v16 = 0;
        *((void *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      int64x2_t v19 = *v5;
      uint64_t v4 = (void *)v25.i64[1];
      char v15 = v26;
    }
    a1[97] = v14;
    a1[98] = v4;
    int64x2_t v25 = v19;
    uint64_t v20 = (char *)a1[99];
    a1[99] = v15;
    int v26 = v20;
    uint64_t v24 = v19.i64[0];
    sub_2169DC874((uint64_t)&v24);
  }
  else
  {
    *uint64_t v2 = 0;
    uint64_t v4 = v2 + 1;
  }
  a1[98] = v4;
  sub_2168EBBB8(&v23, 0);
  int v21 = (pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext *)(a1 + 57);
  uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::IsRecordingString(v21);
  if (result) {
    return pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::StopRecordingString((uint64_t)v21);
  }
  return result;
}

void sub_2169D0B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_DictionaryEnd(uint64_t a1)
{
  uint64_t v2 = (void ***)(*(void *)(a1 + 784) - 8);
  sub_2168EBBB8(v2, 0);
  *(void *)(a1 + 784) = v2;
}

void *pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_DictionaryInsertValue(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a2 + 760);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(void *)(a2 + 784) - 16);
  uint64_t v4 = (long long *)sub_2169B1904(a1);
  uint64_t v5 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[](v3, v4);

  return sub_2168EC6DC(v5, v2);
}

void pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_DictionaryInsertDictionary(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 784);
  uint64_t v4 = v3 - *(void *)(a2 + 776);
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)(v3 - 16);
  uint64_t v6 = (long long *)sub_2169B1904(a1);
  uint64_t v7 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[](v5, v6);
  sub_2168EC844((pxrInternal__aapl__pxrReserved__::VtValue *)v7, (const void ****)(*(void *)(a2 + 776) + v4 - 8));
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(void *)(a2 + 776) + v4 - 8);

  pxrInternal__aapl__pxrReserved__::VtDictionary::clear(v8);
}

void pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_DictionaryInitScalarFactory(uint64_t a1, pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser *a2)
{
  uint64_t v3 = sub_2169B1904(a1);
  if ((pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::SetupFactory((uint64_t)a2 + 456, (std::string *)v3) & 1) == 0)
  {
    if (*(char *)(v3 + 23) >= 0) {
      uint64_t v6 = v3;
    }
    else {
      uint64_t v6 = *(void *)v3;
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Unrecognized value typename '%s' for dictionary", v4, v5, v6);
    if (v10 >= 0) {
      p_p = (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)&__p;
    }
    else {
      p_p = (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)__p;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_RaiseError(a2, p_p, v7);
    if (v10 < 0) {
      operator delete(__p);
    }
  }
}

void sub_2169D0CA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_DictionaryInitShapedFactory(uint64_t a1, pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser *a2)
{
  uint64_t v3 = sub_2169B1904(a1);
  uint64_t v4 = (char *)v3;
  if (*(char *)(v3 + 23) >= 0) {
    size_t v5 = *(unsigned __int8 *)(v3 + 23);
  }
  else {
    size_t v5 = *(void *)(v3 + 8);
  }
  uint64_t v6 = &v15;
  sub_2167940B4((uint64_t)&v15, v5 + 2);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v6 = (std::string *)v15.__r_.__value_.__r.__words[0];
  }
  if (v5)
  {
    if (v4[23] >= 0) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = *(char **)v4;
    }
    memmove(v6, v7, v5);
  }
  strcpy((char *)v6 + v5, "[]");
  if ((pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::SetupFactory((uint64_t)a2 + 456, &v15) & 1) == 0)
  {
    char v10 = &v15;
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      char v10 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Unrecognized value typename '%s' for dictionary", v8, v9, v10);
    if (v14 >= 0) {
      p_p = (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)&__p;
    }
    else {
      p_p = (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)__p;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_RaiseError(a2, p_p, v11);
    if (v14 < 0) {
      operator delete(__p);
    }
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
}

void sub_2169D0DD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_ValueSetTuple(pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser *this, pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v3 = (char *)this + 456;
  if ((pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::IsRecordingString((pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser *)((char *)this + 456)) & 1) != 0
    || !*((unsigned char *)this + 664))
  {
    v15[0] = 0;
    v15[1] = 0;
    uint64_t v16 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::ProduceValue((uint64_t)v3, (const char *)v15, v5, &__p);
    sub_2168ED33C((void *)this + 95, &__p);
    sub_2168EE084((uint64_t)&__p);
    __p.__type_name = 0;
    int v9 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser *)((char *)this + 760), &__p, v8);
    sub_2168EE084((uint64_t)&__p);
    if (v9)
    {
      int v12 = v15;
      if (v16 < 0) {
        int v12 = (void **)v15[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Error parsing tuple value: %s", v10, v11, v12);
      if (v18 >= 0) {
        p_p = (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)&__p;
      }
      else {
        p_p = (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)__p.__vftable;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_RaiseError(this, p_p, v13);
      if (v18 < 0) {
        operator delete(__p.__vftable);
      }
    }
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Type name has [] for non-shaped value.\n", v4, v5);
    if (v16 >= 0) {
      uint64_t v7 = v15;
    }
    else {
      uint64_t v7 = (void **)v15[0];
    }
    pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_RaiseError(this, (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)v7, v6);
  }
  if (SHIBYTE(v16) < 0) {
    operator delete(v15[0]);
  }
}

void sub_2169D0F5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_ValueSetList(pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser *this, pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v3 = (char *)this + 456;
  if ((pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::IsRecordingString((pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser *)((char *)this + 456)) & 1) != 0
    || *((unsigned char *)this + 664))
  {
    v15[0] = 0;
    v15[1] = 0;
    uint64_t v16 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::ProduceValue((uint64_t)v3, (const char *)v15, v5, &__p);
    sub_2168ED33C((void *)this + 95, &__p);
    sub_2168EE084((uint64_t)&__p);
    __p.__type_name = 0;
    int v7 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser *)((char *)this + 760), &__p, v6);
    sub_2168EE084((uint64_t)&__p);
    if (v7)
    {
      char v10 = v15;
      if (v16 < 0) {
        char v10 = (void **)v15[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Error parsing shaped value: %s", v8, v9, v10);
      if (v18 >= 0) {
        p_p = (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)&__p;
      }
      else {
        p_p = (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)__p.__vftable;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_RaiseError(this, p_p, v11);
      if (v18 < 0) {
        operator delete(__p.__vftable);
      }
    }
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Type name missing [] for shaped value.", v4, v5);
    if (v16 >= 0) {
      char v14 = v15;
    }
    else {
      char v14 = (void **)v15[0];
    }
    pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_RaiseError(this, (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)v14, v13);
  }
  if (SHIBYTE(v16) < 0) {
    operator delete(v15[0]);
  }
}

void sub_2169D1100(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_ValueSetShaped(pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser *this, pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v3 = (char *)this + 456;
  if ((pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::IsRecordingString((pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser *)((char *)this + 456)) & 1) != 0
    || *((unsigned char *)this + 664))
  {
    v15[0] = 0;
    v15[1] = 0;
    uint64_t v16 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::ProduceValue((uint64_t)v3, (const char *)v15, v5, &__p);
    sub_2168ED33C((void *)this + 95, &__p);
    sub_2168EE084((uint64_t)&__p);
    __p.__type_name = 0;
    int v7 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser *)((char *)this + 760), &__p, v6);
    sub_2168EE084((uint64_t)&__p);
    if (v7)
    {
      char v10 = v15;
      if (v16 < 0) {
        char v10 = (void **)v15[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Error parsing shaped value: %s", v8, v9, v10);
      if (v18 >= 0) {
        p_p = (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)&__p;
      }
      else {
        p_p = (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)__p.__vftable;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_RaiseError(this, p_p, v11);
      if (v18 < 0) {
        operator delete(__p.__vftable);
      }
    }
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Type name missing [] for shaped value.", v4, v5);
    if (v16 >= 0) {
      char v14 = v15;
    }
    else {
      char v14 = (void **)v15[0];
    }
    pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_RaiseError(this, (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)v14, v13);
  }
  if (SHIBYTE(v16) < 0) {
    operator delete(v15[0]);
  }
}

void sub_2169D12A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_ValueSetCurrentToSdfPath(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_2169B1904(a1);
  if (*(char *)(v3 + 23) < 0)
  {
    sub_216778F24(__p, *(void **)v3, *(void *)(v3 + 8));
  }
  else
  {
    long long v4 = *(_OWORD *)v3;
    uint64_t v8 = *(void *)(v3 + 16);
    *(_OWORD *)std::type_info __p = v4;
  }
  size_t v5 = (void *)HIBYTE(v8);
  if (v8 < 0) {
    size_t v5 = __p[1];
  }
  if (v5)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(&v6, __p);
  }
  else
  {
    uint64_t v6 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v6);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v6 + 1);
  }
  sub_2169D13F4(a2 + 760, &v6);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v6 + 1);
  sub_21697C414(&v6);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p[0]);
  }
}

void sub_2169D13C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2169D13F4(uint64_t a1, _DWORD *a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v5, a1);
  *(void *)(a1 + 8) = (char *)&off_26C754FA0 + 1;
  sub_216981010((_DWORD *)a1, a2);
  sub_21698105C((_DWORD *)(a1 + 4), a2 + 1);
  if (v6) {
    (*(void (**)(unsigned char *))(v6 + 32))(v5);
  }
  return a1;
}

void sub_2169D1498(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_21675DB74(a1);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_PrimInitRelationship(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  sub_2169B1904(a1);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v23);
  if ((v23 & 0xFFFFFFFFFFFFFFF8) != 0) {
    Emptyunint64_t String = (uint64_t *)((v23 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v3);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsValidNamespacedIdentifier((size_t *)EmptyString))
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 816), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v23, (int *)__p);
    sub_21697DE94((int *)(a2 + 816), (int *)__p);
    sub_21697DEEC((int *)(a2 + 820), (int *)__p + 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
    sub_21697C414(__p);
    uint64_t v7 = sub_2169D1B08((uint64_t *)(a2 + 808));
    if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 72))(v7, a2 + 816) & 1) == 0)
    {
      uint64_t v8 = *(void *)(a2 + 904);
      int v9 = *(void **)(v8 - 16);
      if ((unint64_t)v9 >= *(void *)(v8 - 8))
      {
        unint64_t v11 = sub_216973984((char **)(v8 - 24), &v23);
      }
      else
      {
        uint64_t v10 = v23;
        void *v9 = v23;
        if ((v10 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          *v9 &= 0xFFFFFFFFFFFFFFF8;
        }
        unint64_t v11 = (char *)(v9 + 1);
      }
      *(void *)(v8 - 16) = v11;
      uint64_t v16 = sub_2169D1B08((uint64_t *)(a2 + 808));
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v16 + 64))(v16, a2 + 816, 8);
    }
    int v17 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v17) {
      int v17 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t v18 = sub_2169D1B08((uint64_t *)(a2 + 808));
    sub_2168EE4C4(__p, (void *)(a2 + 832));
    (*(void (**)(uint64_t, uint64_t, uint64_t, void **))(*(void *)v18 + 152))(v18, a2 + 816, (uint64_t)v17 + 464, __p);
    sub_2168EE084((uint64_t)__p);
    if (*(unsigned char *)(a2 + 801))
    {
      uint64_t v19 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v19) {
        uint64_t v19 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      uint64_t v20 = sub_2169D1B08((uint64_t *)(a2 + 808));
      __p[1] = &unk_26C7501AB;
      LOBYTE(__p[0]) = *(unsigned char *)(a2 + 801);
      (*(void (**)(uint64_t, uint64_t, uint64_t, void **))(*(void *)v20 + 152))(v20, a2 + 816, (uint64_t)v19 + 64, __p);
      sub_2168EE084((uint64_t)__p);
    }
    *(unsigned char *)(a2 + 224) = 0;
    if (*(unsigned char *)(a2 + 256))
    {
      __p[0] = (void *)(a2 + 232);
      sub_216981168((void ***)__p);
      *(unsigned char *)(a2 + 256) = 0;
    }
    uint64_t v22 = *(_DWORD **)(a2 + 264);
    for (uint64_t i = *(_DWORD **)(a2 + 272); i != v22; sub_216981128(a2 + 280, i))
      i -= 2;
    *(void *)(a2 + 272) = v22;
  }
  else
  {
    unint64_t v12 = v23 & 0xFFFFFFFFFFFFFFF8;
    if ((v23 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      uint64_t v13 = (const char *)(v12 + 16);
      if (*(char *)(v12 + 39) < 0) {
        uint64_t v13 = *(const char **)v13;
      }
    }
    else
    {
      uint64_t v13 = "";
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"'%s' is not a valid relationship name", v5, v6, v13);
    if (v25 >= 0) {
      std::string v15 = __p;
    }
    else {
      std::string v15 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_RaiseError((pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser *)a2, (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)v15, v14);
    if (v25 < 0) {
      operator delete(__p[0]);
    }
  }
  if ((v23 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_2169D1800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_PrimEndRelationship(pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser *this, pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (*((void *)this + 33) != *((void *)this + 34))
  {
    uint64_t v3 = sub_2169D1B08((uint64_t *)this + 101);
    long long v4 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    if (!v4) {
      long long v4 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    }
    unint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    (*(void (**)(unsigned int ***__return_ptr, uint64_t, char *, uint64_t))(*(void *)v3 + 136))(&v15, v3, (char *)this + 816, (uint64_t)v4 + 48);
    if (sub_2169DC8C8((pxrInternal__aapl__pxrReserved__::VtValue *)&v15))
    {
      if ((v16 & 4) != 0) {
        size_t v5 = (unsigned int **)(*(uint64_t (**)(unsigned int ***))((v16 & 0xFFFFFFFFFFFFFFF8) + 168))(&v15);
      }
      else {
        size_t v5 = v15;
      }
    }
    else
    {
      size_t v5 = &v12;
    }
    int v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    sub_216980EEC(&v9, *v5, v5[1], ((char *)v5[1] - (char *)*v5) >> 3);
    sub_2168EE084((uint64_t)&v15);
    std::string v15 = &v12;
    sub_216981168((void ***)&v15);
    sub_2169DC954((uint64_t *)&v9, v10, *((_DWORD **)this + 33), *((_DWORD **)this + 34), (uint64_t)(*((void *)this + 34) - *((void *)this + 33)) >> 3);
    uint64_t v6 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    if (!v6) {
      uint64_t v6 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    }
    uint64_t v7 = sub_2169D1B08((uint64_t *)this + 101);
    uint64_t v13 = &off_26C756D88;
    sub_2169DC54C(&v12, &v9);
    (*(void (**)(uint64_t, char *, uint64_t, unsigned int **))(*(void *)v7 + 152))(v7, (char *)this + 816, (uint64_t)v6 + 48, &v12);
    sub_2168EE084((uint64_t)&v12);
    unint64_t v12 = (unsigned int *)&v9;
    sub_216981168((void ***)&v12);
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser *)((char *)this + 816), &v9);
  sub_21697DE94((int *)this + 204, (int *)&v9);
  sub_21697DEEC((int *)this + 205, (int *)&v9 + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v9 + 1);
  return sub_21697C414(&v9);
}

void sub_2169D1A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void **a16)
{
  a16 = (void **)&a9;
  sub_216981168(&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_2169D1B08(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v2 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/refPtr.h", 47);
    v3[0] = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/refPtr.h", (uint64_t)v2, 0x2Fu);
    v3[1] = "operator->";
    v3[2] = 953;
    v3[3] = "T *pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfData>::operator->() const"
            " [U = pxrInternal__aapl__pxrReserved__::SdfData]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError((uint64_t)v3, (pxrInternal__aapl__pxrReserved__ *)(0x800000021746941BLL & 0x7FFFFFFFFFFFFFFFLL));
  }
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_RelationshipAppendTargetPath(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_2169B1904(a1);
  pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(&v8, v3);
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v8))
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 816), &v10);
    pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v10, (int *)v7);
    sub_21697DE94(&v8, (int *)v7);
    sub_21697DEEC(&v9, (int *)v7 + 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v7 + 1);
    sub_21697C414(v7);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v10 + 1);
    sub_21697C414(&v10);
  }
  if (!*(unsigned char *)(a2 + 256))
  {
    memset(v7, 0, sizeof(v7));
    sub_2169D1D10(a2 + 232, (uint64_t)v7);
    uint64_t v10 = (void **)v7;
    sub_216981168(&v10);
  }
  unint64_t v4 = *(void *)(a2 + 240);
  if (v4 >= *(void *)(a2 + 248))
  {
    uint64_t v5 = sub_216981B30((uint64_t *)(a2 + 232), &v8);
  }
  else
  {
    sub_216981010(*(_DWORD **)(a2 + 240), &v8);
    sub_21698105C((_DWORD *)(v4 + 4), &v9);
    uint64_t v5 = v4 + 8;
  }
  *(void *)(a2 + 24sub_2168EBBB8(&a9, 0) = v5;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  return sub_21697C414(&v8);
}

void sub_2169D1CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  sub_216981168((void ***)va1);
  sub_21697B754((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2169D1D10(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    sub_216981200((void *)a1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_PathSetPrim(uint64_t a1, int *a2)
{
  uint64_t v3 = sub_2169B1904(a1);
  pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(__p, v3);
  sub_21697DE94(a2 + 54, (int *)__p);
  sub_21697DEEC(a2 + 55, (int *)__p + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
  sub_21697C414(__p);
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 54)))
  {
    if (*(char *)(v3 + 23) >= 0) {
      uint64_t v6 = v3;
    }
    else {
      uint64_t v6 = *(void *)v3;
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"'%s' is not a valid prim path", v4, v5, v6);
    if (v10 >= 0) {
      int v8 = __p;
    }
    else {
      int v8 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_RaiseError((pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser *)a2, (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)v8, v7);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_2169D1E60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_PathSetPrimOrPropertyScenePath(uint64_t a1, int *a2)
{
  uint64_t v3 = sub_2169B1904(a1);
  pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(__p, v3);
  sub_21697DE94(a2 + 54, (int *)__p);
  sub_21697DEEC(a2 + 55, (int *)__p + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
  sub_21697C414(__p);
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 54))
    && !pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 54))
    || pxrInternal__aapl__pxrReserved__::SdfPath::ContainsPrimVariantSelection((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 54)))
  {
    if (*(char *)(v3 + 23) >= 0) {
      uint64_t v6 = v3;
    }
    else {
      uint64_t v6 = *(void *)v3;
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"'%s' is not a valid prim or property scene path", v4, v5, v6);
    if (v10 >= 0) {
      int v8 = __p;
    }
    else {
      int v8 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_RaiseError((pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser *)a2, (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)v8, v7);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_2169D1F6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_SetGenericMetadataListOpItems(pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser *this, const pxrInternal__aapl__pxrReserved__::TfType *a2, pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *a3)
{
  uint64_t result = sub_2169D201C((char *)this, (uint64_t)a2, (char *)a3);
  if ((result & 1) == 0)
  {
    uint64_t result = sub_2169D214C((char *)this, (uint64_t)a2, v6);
    if ((result & 1) == 0)
    {
      uint64_t result = sub_2169D227C((char *)this, (uint64_t)a2, v7);
      if ((result & 1) == 0)
      {
        uint64_t result = sub_2169D23AC((char *)this, (uint64_t)a2, v8);
        if ((result & 1) == 0)
        {
          uint64_t result = sub_2169D24DC((char *)this, (uint64_t)a2, v9);
          if ((result & 1) == 0)
          {
            return sub_2169D260C((char *)this, (uint64_t)a2, v10);
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_2169D201C(char *a1, uint64_t a2, char *a3)
{
  uint64_t v5 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C755180, (const std::type_info *)a2, a3);
  uint64_t IsA = pxrInternal__aapl__pxrReserved__::TfType::IsA(a1, *v5, v6);
  if (IsA)
  {
    if ((sub_216907880((pxrInternal__aapl__pxrReserved__::VtValue *)(a2 + 760)) & 1) != 0
      || !*(void *)(a2 + 768)
      || (*(void *)&long long v11 = "sdf/textParserHelpers.h",
          *((void *)&v11 + 1) = "_SetItemsIfListOp",
          *(void *)&long long v12 = 280,
          *((void *)&v12 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_SetItemsIfListOp(con"
                                  "st TfType &, Sdf_TextParserContext *) [ListOpType = pxrInternal__aapl__pxrReserved__::SdfListOp<int>]",
          LOBYTE(v13) = 0,
          (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v11, "context->currentValue.IsHolding<ArrayType>() || context->currentValue.IsEmpty()", 0) & 1) != 0))
    {
      uint64_t v13 = 0;
      long long v11 = 0u;
      long long v12 = 0u;
      if (sub_216907880((pxrInternal__aapl__pxrReserved__::VtValue *)(a2 + 760)))
      {
        uint64_t v8 = *(void *)(a2 + 768);
        if ((v8 & 4) != 0) {
          int v9 = (long long *)(*(uint64_t (**)(uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 168))(a2 + 760);
        }
        else {
          int v9 = *(long long **)(a2 + 760);
        }
        sub_2169DCE38((uint64_t)&v11, v9);
      }
      sub_2169DCEEC((void *)(a2 + 440), *(unsigned int *)(a2 + 448), (unint64_t *)&v11, (uint64_t *)a2);
    }
  }
  return IsA;
}

void sub_2169D2134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2169D214C(char *a1, uint64_t a2, char *a3)
{
  uint64_t v5 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C755190, (const std::type_info *)a2, a3);
  uint64_t IsA = pxrInternal__aapl__pxrReserved__::TfType::IsA(a1, *v5, v6);
  if (IsA)
  {
    if ((sub_2169DDCD4((pxrInternal__aapl__pxrReserved__::VtValue *)(a2 + 760)) & 1) != 0
      || !*(void *)(a2 + 768)
      || (*(void *)&long long v11 = "sdf/textParserHelpers.h",
          *((void *)&v11 + 1) = "_SetItemsIfListOp",
          *(void *)&long long v12 = 280,
          *((void *)&v12 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_SetItemsIfListOp(con"
                                  "st TfType &, Sdf_TextParserContext *) [ListOpType = pxrInternal__aapl__pxrReserved__::"
                                  "SdfListOp<int64_t>]",
          LOBYTE(v13) = 0,
          (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v11, "context->currentValue.IsHolding<ArrayType>() || context->currentValue.IsEmpty()", 0) & 1) != 0))
    {
      uint64_t v13 = 0;
      long long v11 = 0u;
      long long v12 = 0u;
      if (sub_2169DDCD4((pxrInternal__aapl__pxrReserved__::VtValue *)(a2 + 760)))
      {
        uint64_t v8 = *(void *)(a2 + 768);
        if ((v8 & 4) != 0) {
          int v9 = (long long *)(*(uint64_t (**)(uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 168))(a2 + 760);
        }
        else {
          int v9 = *(long long **)(a2 + 760);
        }
        sub_2169DDD0C((uint64_t)&v11, v9);
      }
      sub_2169DDDC0((void *)(a2 + 440), *(unsigned int *)(a2 + 448), (unint64_t *)&v11, (uint64_t *)a2);
    }
  }
  return IsA;
}

void sub_2169D2264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2169D227C(char *a1, uint64_t a2, char *a3)
{
  uint64_t v5 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C7551A0, (const std::type_info *)a2, a3);
  uint64_t IsA = pxrInternal__aapl__pxrReserved__::TfType::IsA(a1, *v5, v6);
  if (IsA)
  {
    if ((sub_2169062C0((pxrInternal__aapl__pxrReserved__::VtValue *)(a2 + 760)) & 1) != 0
      || !*(void *)(a2 + 768)
      || (*(void *)&long long v11 = "sdf/textParserHelpers.h",
          *((void *)&v11 + 1) = "_SetItemsIfListOp",
          *(void *)&long long v12 = 280,
          *((void *)&v12 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_SetItemsIfListOp(con"
                                  "st TfType &, Sdf_TextParserContext *) [ListOpType = pxrInternal__aapl__pxrReserved__::"
                                  "SdfListOp<unsigned int>]",
          LOBYTE(v13) = 0,
          (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v11, "context->currentValue.IsHolding<ArrayType>() || context->currentValue.IsEmpty()", 0) & 1) != 0))
    {
      uint64_t v13 = 0;
      long long v11 = 0u;
      long long v12 = 0u;
      if (sub_2169062C0((pxrInternal__aapl__pxrReserved__::VtValue *)(a2 + 760)))
      {
        uint64_t v8 = *(void *)(a2 + 768);
        if ((v8 & 4) != 0) {
          int v9 = (long long *)(*(uint64_t (**)(uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 168))(a2 + 760);
        }
        else {
          int v9 = *(long long **)(a2 + 760);
        }
        sub_2169DE964((uint64_t)&v11, v9);
      }
      sub_2169DEA18((void *)(a2 + 440), *(unsigned int *)(a2 + 448), (unint64_t *)&v11, (uint64_t *)a2);
    }
  }
  return IsA;
}

void sub_2169D2394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2169D23AC(char *a1, uint64_t a2, char *a3)
{
  uint64_t v5 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C7551B0, (const std::type_info *)a2, a3);
  uint64_t IsA = pxrInternal__aapl__pxrReserved__::TfType::IsA(a1, *v5, v6);
  if (IsA)
  {
    if ((sub_2169DF540((pxrInternal__aapl__pxrReserved__::VtValue *)(a2 + 760)) & 1) != 0
      || !*(void *)(a2 + 768)
      || (*(void *)&long long v11 = "sdf/textParserHelpers.h",
          *((void *)&v11 + 1) = "_SetItemsIfListOp",
          *(void *)&long long v12 = 280,
          *((void *)&v12 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_SetItemsIfListOp(con"
                                  "st TfType &, Sdf_TextParserContext *) [ListOpType = pxrInternal__aapl__pxrReserved__::"
                                  "SdfListOp<uint64_t>]",
          LOBYTE(v13) = 0,
          (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v11, "context->currentValue.IsHolding<ArrayType>() || context->currentValue.IsEmpty()", 0) & 1) != 0))
    {
      uint64_t v13 = 0;
      long long v11 = 0u;
      long long v12 = 0u;
      if (sub_2169DF540((pxrInternal__aapl__pxrReserved__::VtValue *)(a2 + 760)))
      {
        uint64_t v8 = *(void *)(a2 + 768);
        if ((v8 & 4) != 0) {
          int v9 = (long long *)(*(uint64_t (**)(uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 168))(a2 + 760);
        }
        else {
          int v9 = *(long long **)(a2 + 760);
        }
        sub_2169DF578((uint64_t)&v11, v9);
      }
      sub_2169DF62C((void *)(a2 + 440), *(unsigned int *)(a2 + 448), (unint64_t *)&v11, (uint64_t *)a2);
    }
  }
  return IsA;
}

void sub_2169D24C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2169D24DC(char *a1, uint64_t a2, char *a3)
{
  uint64_t v5 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C7551C0, (const std::type_info *)a2, a3);
  uint64_t IsA = pxrInternal__aapl__pxrReserved__::TfType::IsA(a1, *v5, v6);
  if (IsA)
  {
    if ((sub_216998044((pxrInternal__aapl__pxrReserved__::VtValue *)(a2 + 760)) & 1) != 0
      || !*(void *)(a2 + 768)
      || (*(void *)&long long v11 = "sdf/textParserHelpers.h",
          *((void *)&v11 + 1) = "_SetItemsIfListOp",
          *(void *)&long long v12 = 280,
          *((void *)&v12 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_SetItemsIfListOp(con"
                                  "st TfType &, Sdf_TextParserContext *) [ListOpType = pxrInternal__aapl__pxrReserved__::"
                                  "SdfListOp<std::string>]",
          LOBYTE(v13) = 0,
          (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v11, "context->currentValue.IsHolding<ArrayType>() || context->currentValue.IsEmpty()", 0) & 1) != 0))
    {
      uint64_t v13 = 0;
      long long v11 = 0u;
      long long v12 = 0u;
      if (sub_216998044((pxrInternal__aapl__pxrReserved__::VtValue *)(a2 + 760)))
      {
        uint64_t v8 = *(void *)(a2 + 768);
        if ((v8 & 4) != 0) {
          int v9 = (long long *)(*(uint64_t (**)(uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 168))(a2 + 760);
        }
        else {
          int v9 = *(long long **)(a2 + 760);
        }
        sub_2169E0154((uint64_t)&v11, v9);
      }
      sub_2169E0208((void *)(a2 + 440), *(unsigned int *)(a2 + 448), (unint64_t *)&v11, (uint64_t *)a2);
    }
  }
  return IsA;
}

void sub_2169D25F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2169D260C(char *a1, uint64_t a2, char *a3)
{
  uint64_t v5 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C7551D0, (const std::type_info *)a2, a3);
  uint64_t IsA = pxrInternal__aapl__pxrReserved__::TfType::IsA(a1, *v5, v6);
  if (IsA)
  {
    if ((sub_21699807C((pxrInternal__aapl__pxrReserved__::VtValue *)(a2 + 760)) & 1) != 0
      || !*(void *)(a2 + 768)
      || (*(void *)&long long v11 = "sdf/textParserHelpers.h",
          *((void *)&v11 + 1) = "_SetItemsIfListOp",
          *(void *)&long long v12 = 280,
          *((void *)&v12 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_SetItemsIfListOp(con"
                                  "st TfType &, Sdf_TextParserContext *) [ListOpType = pxrInternal__aapl__pxrReserved__::"
                                  "SdfListOp<TfToken>]",
          LOBYTE(v13) = 0,
          (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v11, "context->currentValue.IsHolding<ArrayType>() || context->currentValue.IsEmpty()", 0) & 1) != 0))
    {
      uint64_t v13 = 0;
      long long v11 = 0u;
      long long v12 = 0u;
      if (sub_21699807C((pxrInternal__aapl__pxrReserved__::VtValue *)(a2 + 760)))
      {
        uint64_t v8 = *(void *)(a2 + 768);
        if ((v8 & 4) != 0) {
          int v9 = (long long *)(*(uint64_t (**)(uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 168))(a2 + 760);
        }
        else {
          int v9 = *(long long **)(a2 + 760);
        }
        sub_2169E06EC((uint64_t)&v11, v9);
      }
      sub_2169E07A0((void *)(a2 + 440), *(unsigned int *)(a2 + 448), (unint64_t *)&v11, (uint64_t *)a2);
    }
  }
  return IsA;
}

void sub_2169D2724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_IsGenericMetadataListOpType(pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser *this, const pxrInternal__aapl__pxrReserved__::TfType *a2, pxrInternal__aapl__pxrReserved__::TfType *a3)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B8EBF8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v7 = __cxa_guard_acquire(&qword_267B8EBF8);
    if (v7)
    {
      qword_267B8EB98[0] = sub_2169D2858(v7, v8, v9);
      unk_267B8EBA0 = v10;
      qword_267B8EBA8 = sub_2169D289C(qword_267B8EB98[0], v10, v11);
      unk_267B8EBB0 = v12;
      qword_267B8EBB8 = sub_2169D28E0(qword_267B8EBA8, v12, v13);
      unk_267B8EBC0 = v14;
      qword_267B8EBC8 = sub_2169D2924(qword_267B8EBB8, v14, v15);
      unk_267B8EBD0 = v16;
      qword_267B8EBD8 = sub_2169D2968(qword_267B8EBC8, v16, v17);
      unk_267B8EBE0 = v18;
      qword_267B8EBE8 = sub_2169D29AC(qword_267B8EBD8, v18, v19);
      unk_267B8EBF0 = v20;
      __cxa_guard_release(&qword_267B8EBF8);
    }
  }
  uint64_t v5 = 0;
  while (qword_267B8EB98[v5] != *(void *)this)
  {
    v5 += 2;
    if (v5 == 12) {
      return 0;
    }
  }
  BOOL result = v5 != 12;
  if (a2)
  {
    *(void *)a2 = qword_267B8EB98[v5 + 1];
    return 1;
  }
  return result;
}

void sub_2169D2840(_Unwind_Exception *a1)
{
}

uint64_t sub_2169D2858(uint64_t a1, const std::type_info *a2, char *a3)
{
  uint64_t v3 = pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_26C755180, a2, a3);
  pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74E1D8, v4, v5);
  return *(void *)v3;
}

uint64_t sub_2169D289C(uint64_t a1, const std::type_info *a2, char *a3)
{
  uint64_t v3 = pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_26C755190, a2, a3);
  pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74E208, v4, v5);
  return *(void *)v3;
}

uint64_t sub_2169D28E0(uint64_t a1, const std::type_info *a2, char *a3)
{
  uint64_t v3 = pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_26C7551A0, a2, a3);
  pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74E1F0, v4, v5);
  return *(void *)v3;
}

uint64_t sub_2169D2924(uint64_t a1, const std::type_info *a2, char *a3)
{
  uint64_t v3 = pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_26C7551B0, a2, a3);
  pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74E220, v4, v5);
  return *(void *)v3;
}

uint64_t sub_2169D2968(uint64_t a1, const std::type_info *a2, char *a3)
{
  uint64_t v3 = pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C7551C0, a2, a3);
  pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74E280, v4, v5);
  return *(void *)v3;
}

uint64_t sub_2169D29AC(uint64_t a1, const std::type_info *a2, char *a3)
{
  uint64_t v3 = pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_26C7551D0, a2, a3);
  pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74E298, v4, v5);
  return *(void *)v3;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_GenericMetadataStart(uint64_t a1, unsigned int a2, uint64_t a3)
{
  sub_2169B1904(a1);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&Type);
  uint64_t v5 = (uint64_t *)(a3 + 440);
  if (&Type == (uint64_t *)(a3 + 440))
  {
    uint64_t v6 = Type;
  }
  else
  {
    if ((*v5 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v6 = 0;
    *uint64_t v5 = Type;
    uint64_t Type = 0;
  }
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  *(_DWORD *)(a3 + 448) = 0;
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!v7) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
  }
  uint64_t v8 = (char *)v7 + 72 * a2;
  if (v8[120]) {
    int v9 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition *)(v8 + 56);
  }
  else {
    int v9 = 0;
  }
  if (!pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition::IsMetadataField(v9, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a3 + 440)))return pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::StartRecordingString(a3 + 456); {
  FieldDefinition = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFieldDefinition(v7, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a3 + 440));
  }
  FallbackValue = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::GetFallbackValue(FieldDefinition);
  uint64_t Type = pxrInternal__aapl__pxrReserved__::VtValue::GetType(FallbackValue, v12, v13);
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)v22);
  if (!pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_IsGenericMetadataListOpType((pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser *)&Type, (const pxrInternal__aapl__pxrReserved__::TfType *)v22, v14))
  {
    uint64_t v18 = (const pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::GetFallbackValue(FieldDefinition);
    unint64_t v19 = 0;
    uint64_t v20 = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType((atomic_ullong ***)v7, v18, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v19);
    AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&v20, (atomic_uint **)&v21);
    if ((v21 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      Emptyunint64_t String = (std::string *)((v21 & 0xFFFFFFFFFFFFFFF8) + 16);
      goto LABEL_21;
    }
LABEL_20:
    Emptyunint64_t String = (std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
    goto LABEL_21;
  }
  unint64_t v19 = 0;
  uint64_t v20 = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType((atomic_ullong ***)v7, (const pxrInternal__aapl__pxrReserved__::TfType *)v22, (atomic_uint **)&v19);
  AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&v20, (atomic_uint **)&v21);
  if ((v21 & 0xFFFFFFFFFFFFFFF8) == 0) {
    goto LABEL_20;
  }
  Emptyunint64_t String = (std::string *)((v21 & 0xFFFFFFFFFFFFFFF8) + 16);
LABEL_21:
  uint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::SetupFactory(a3 + 456, EmptyString);
  if ((v21 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void sub_2169D2BDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if ((a12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_GenericMetadataEnd(unsigned int a1, uint64_t a2)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!v3) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
  }
  unint64_t v4 = (char *)v3 + 72 * a1;
  if (v4[120]) {
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition *)(v4 + 56);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = (void *)(a2 + 440);
  if (!pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition::IsMetadataField(v5, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 440)))
  {
    if (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition::IsValidField(v5, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 440)))
    {
      unint64_t v18 = *v6 & 0xFFFFFFFFFFFFFFF8;
      if (v18)
      {
        unint64_t v19 = (const char *)(v18 + 16);
        if (*(char *)(v18 + 39) < 0) {
          unint64_t v19 = *(const char **)v19;
        }
      }
      else
      {
        unint64_t v19 = "";
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"\"%s\" is registered as a non-metadata field", v16, v17, v19);
      if (v39 >= 0) {
        p_p = (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)&__p;
      }
      else {
        p_p = (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)__p;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_RaiseError((pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser *)a2, p_p, v26);
      goto LABEL_48;
    }
    uint64_t v45 = 0;
    if (sub_2168EC434((pxrInternal__aapl__pxrReserved__::VtValue *)(a2 + 760)))
    {
      uint64_t v20 = (const void ****)sub_2168EF25C((pxrInternal__aapl__pxrReserved__::VtValue *)(a2 + 760));
      pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::SdfUnregisteredValue((pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue *)&__p, v20);
      sub_2169C29AC((uint64_t)&v44, &__p);
      unint64_t v21 = &__p;
    }
    else
    {
      uint64_t v43 = 0;
      uint64_t v24 = sub_2169D1B08((uint64_t *)(a2 + 808));
      if (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, void **))(*(void *)v24 + 112))(v24, a2 + 816, a2 + 440, &v42)&& ((sub_21698F348((pxrInternal__aapl__pxrReserved__::VtValue *)&v42) & 1) != 0|| (__p = "sdf/textParserHelpers.cpp", v38 = "operator()", uint64_t v39 = 913, v40 = "auto pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_GenericMetadataEnd(SdfSpecType, Sdf_TextParserContext *)::(anonymous class)::operator()() const", v41 = 0, (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&__p, "v.IsHolding<SdfUnregisteredValue>()", 0))))
      {
        if ((v43 & 4) != 0) {
          char v25 = (void *)(*(uint64_t (**)(void **))((v43 & 0xFFFFFFFFFFFFFFF8) + 168))(&v42);
        }
        else {
          char v25 = v42;
        }
        sub_2168EC6DC(&v42, v25);
      }
      else
      {
        uint64_t v38 = 0;
        sub_2168ED33C(&v42, &__p);
        sub_2168EE084((uint64_t)&__p);
      }
      if (*(_DWORD *)(a2 + 448))
      {
        if (!v43 || sub_21698F468((pxrInternal__aapl__pxrReserved__::VtValue *)&v42)) {
          pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SdfListOp();
        }
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::GetRecordedString((char *)(a2 + 456), (uint64_t)&__p);
        pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::SdfUnregisteredValue((uint64_t)&v36, (uint64_t)&__p);
        sub_2169C29AC((uint64_t)&v44, &v36);
        sub_2168EE084((uint64_t)&v36);
        if (SHIBYTE(v39) < 0) {
          operator delete(__p);
        }
      }
      unint64_t v21 = (void **)&v42;
    }
    sub_2168EE084((uint64_t)v21);
    if (v45)
    {
      uint64_t v34 = sub_2169D1B08((uint64_t *)(a2 + 808));
      sub_2168EE4C4(&__p, &v44);
      (*(void (**)(uint64_t, uint64_t, uint64_t, void **))(*(void *)v34 + 152))(v34, a2 + 816, a2 + 440, &__p);
      sub_2168EE084((uint64_t)&__p);
    }
    uint64_t v29 = (void **)&v44;
LABEL_62:
    sub_2168EE084((uint64_t)v29);
    goto LABEL_63;
  }
  FieldDefinition = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFieldDefinition(v3, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2 + 440));
  FallbackValue = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::GetFallbackValue(FieldDefinition);
  v36.__r_.__value_.__r.__words[0] = pxrInternal__aapl__pxrReserved__::VtValue::GetType(FallbackValue, v9, v10);
  if (pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_IsGenericMetadataListOpType((pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser *)&v36, 0, v11))
  {
    sub_2169D3490((uint64_t *)FieldDefinition, (void *)(a2 + 760), &__p);
    if (!(_BYTE)v40)
    {
      pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_SetGenericMetadataListOpItems((pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser *)&v36, (const pxrInternal__aapl__pxrReserved__::TfType *)a2, v13);
      goto LABEL_63;
    }
    if (SHIBYTE(v39) < 0) {
      operator delete(__p);
    }
    unint64_t v14 = *v6 & 0xFFFFFFFFFFFFFFF8;
    if (v14)
    {
      std::string v15 = (const char *)(v14 + 16);
      if (*(char *)(v14 + 39) < 0) {
        std::string v15 = *(const char **)v15;
      }
    }
    else
    {
      std::string v15 = "";
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"invalid value for field \"%s\"", v12, (char *)v13, v15);
    if (v39 >= 0) {
      uint64_t v33 = (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)&__p;
    }
    else {
      uint64_t v33 = (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)__p;
    }
    goto LABEL_47;
  }
  sub_2169D3540((uint64_t *)FieldDefinition, (void *)(a2 + 760), &__p);
  if ((_BYTE)v40)
  {
    if (SHIBYTE(v39) < 0) {
      operator delete(__p);
    }
    goto LABEL_36;
  }
  if (*(void *)(a2 + 768))
  {
    uint64_t v28 = sub_2169D1B08((uint64_t *)(a2 + 808));
    sub_2168EE4C4(&__p, (void *)(a2 + 760));
    (*(void (**)(uint64_t, uint64_t, uint64_t, void **))(*(void *)v28 + 152))(v28, a2 + 816, a2 + 440, &__p);
    uint64_t v29 = &__p;
    goto LABEL_62;
  }
LABEL_36:
  unint64_t v30 = *v6 & 0xFFFFFFFFFFFFFFF8;
  if (v30)
  {
    uint64_t v31 = (const char *)(v30 + 16);
    if (*(char *)(v30 + 39) < 0) {
      uint64_t v31 = *(const char **)v31;
    }
  }
  else
  {
    uint64_t v31 = "";
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"invalid value for field \"%s\"", v22, v23, v31);
  if (v39 >= 0) {
    uint64_t v33 = (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)&__p;
  }
  else {
    uint64_t v33 = (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)__p;
  }
LABEL_47:
  pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_RaiseError((pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser *)a2, v33, v32);
LABEL_48:
  if (SHIBYTE(v39) < 0) {
    operator delete(__p);
  }
LABEL_63:
  pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext::Clear((pxrInternal__aapl__pxrReserved__::Sdf_ParserValueContext *)(a2 + 456));
  uint64_t v38 = 0;
  sub_2168ED33C((void *)(a2 + 760), &__p);
  return sub_2168EE084((uint64_t)&__p);
}

void sub_2169D3368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  sub_2168EE084(v43 - 104);
  sub_2168EE084(v43 - 88);
  _Unwind_Resume(a1);
}

uint64_t *sub_2169D3490@<X0>(uint64_t *result@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  _OWORD v5[2] = *MEMORY[0x263EF8340];
  uint64_t v3 = (void (*)(uint64_t, void *))result[9];
  if (v3)
  {
    uint64_t v4 = *result;
    sub_2168EE4C4(v5, a2);
    v3(v4, v5);
    return (uint64_t *)sub_2168EE084((uint64_t)v5);
  }
  else
  {
    *a3 = 0;
    a3[24] = 0;
  }
  return result;
}

void sub_2169D3524(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_2169D3540@<X0>(uint64_t *result@<X0>, void *a2@<X1>, unsigned char *a3@<X8>)
{
  _OWORD v5[2] = *MEMORY[0x263EF8340];
  uint64_t v3 = (void (*)(uint64_t, void *))result[8];
  if (v3)
  {
    uint64_t v4 = *result;
    sub_2168EE4C4(v5, a2);
    v3(v4, v5);
    return (uint64_t *)sub_2168EE084((uint64_t)v5);
  }
  else
  {
    *a3 = 0;
    a3[24] = 0;
  }
  return result;
}

void sub_2169D35D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2169D35F0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (sub_21698F468((pxrInternal__aapl__pxrReserved__::VtValue *)a1))
  {
    uint64_t v6 = a1[1];
    if ((v6 & 4) != 0) {
      a2 = (*(uint64_t (**)(uint64_t *))((v6 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
    }
    else {
      a2 = *a1;
    }
  }

  return sub_2169E2B3C(a3, a2);
}

void **sub_2169D3664(void **a1)
{
  uint64_t v3 = a1 + 16;
  sub_216932118(&v3);
  uint64_t v3 = a1 + 13;
  sub_216932118(&v3);
  uint64_t v3 = a1 + 10;
  sub_216932118(&v3);
  uint64_t v3 = a1 + 7;
  sub_216932118(&v3);
  uint64_t v3 = a1 + 4;
  sub_216932118(&v3);
  uint64_t v3 = a1 + 1;
  sub_216932118(&v3);
  return a1;
}

_DWORD *sub_2169D36F0(_DWORD *a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v6 = sub_216981010(a1, a2);
  sub_21698105C(v6 + 1, a2 + 1);
  sub_216981010(a1 + 2, a3);
  sub_21698105C(a1 + 3, a3 + 1);
  return a1;
}

uint64_t sub_2169D374C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      sub_2168EE4C4((void *)(a4 + v7), (void *)(a2 + v7));
      v7 += 16;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_2169D37AC(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 16;
    do
    {
      sub_2168EE084(v4 + v2);
      v2 -= 16;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_2169D37D0(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X8>)
{
  *((void *)a1 + 1) = 0;
  sub_2169D4E04(a1);
}

void sub_2169D3800(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

BOOL sub_2169D3814(_DWORD **a1)
{
  int v9 = 0;
  char v10 = 0;
  uint64_t v11 = 0;
  sub_216980EEC(&v9, *a1, a1[1], ((char *)a1[1] - (char *)*a1) >> 3);
  unint64_t v1 = 126 - 2 * __clz(((char *)v10 - (char *)v9) >> 3);
  if (v10 == v9) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = v1;
  }
  sub_2169D38EC((uint64_t)v9, v10, (uint64_t)&v12, v2, 1);
  uint64_t v3 = v9;
  if (v9 != v10)
  {
    uint64_t v4 = v9 + 2;
    while (v4 != v10)
    {
      uint64_t v5 = *((void *)v4 - 1);
      uint64_t v6 = *(void *)v4;
      v4 += 2;
      if (v5 == v6)
      {
        uint64_t v3 = v4 - 4;
        goto LABEL_10;
      }
    }
    uint64_t v3 = v10;
  }
LABEL_10:
  BOOL v7 = v3 != v10;
  uint64_t v13 = (void **)&v9;
  sub_216981168(&v13);
  return v7;
}

void sub_2169D38D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  *(void *)(v10 - 24) = &a10;
  sub_216981168((void ***)(v10 - 24));
  _Unwind_Resume(a1);
}

uint64_t sub_2169D38EC(uint64_t result, int *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10 = (int *)result;
LABEL_2:
  uint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    uint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = ((char *)a2 - (char *)v11) >> 3;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t result = sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 - 2), (const pxrInternal__aapl__pxrReserved__::SdfPath *)v11);
          if (result)
          {
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(v11, a2 - 2);
            uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(v11 + 1, a2 - 1);
          }
          break;
        case 3uLL:
          uint64_t result = sub_2169D3F54((const pxrInternal__aapl__pxrReserved__::SdfPath *)v11, v11 + 2, a2 - 2);
          break;
        case 4uLL:
          uint64_t result = (uint64_t)sub_2169D4628(v11, v11 + 2, v11 + 4, a2 - 2);
          break;
        case 5uLL:
          uint64_t result = (uint64_t)sub_2169D470C(v11, v11 + 2, v11 + 4, v11 + 6, a2 - 2);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 191) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        return (uint64_t)sub_2169D4820(v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    uint64_t v17 = &v11[2 * (v15 >> 1)];
    if ((unint64_t)v14 >= 0x401)
    {
      sub_2169D3F54((const pxrInternal__aapl__pxrReserved__::SdfPath *)v11, &v11[2 * (v15 >> 1)], a2 - 2);
      sub_2169D3F54((const pxrInternal__aapl__pxrReserved__::SdfPath *)(v11 + 2), v17 - 2, a2 - 4);
      sub_2169D3F54((const pxrInternal__aapl__pxrReserved__::SdfPath *)(v11 + 4), &v11[2 * v16 + 2], a2 - 6);
      sub_2169D3F54((const pxrInternal__aapl__pxrReserved__::SdfPath *)(v17 - 2), v17, &v11[2 * v16 + 2]);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(v11, v17);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(v11 + 1, &v11[2 * v16 + 1]);
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      sub_2169D3F54((const pxrInternal__aapl__pxrReserved__::SdfPath *)&v11[2 * (v15 >> 1)], v11, a2 - 2);
      if (a5) {
        goto LABEL_14;
      }
    }
    if ((sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)(v11 - 2), (const pxrInternal__aapl__pxrReserved__::SdfPath *)v11) & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_2169D4078(v11, a2);
      uint64_t v11 = (int *)result;
      goto LABEL_19;
    }
LABEL_14:
    unint64_t v18 = sub_2169D4220(v11, (pxrInternal__aapl__pxrReserved__::SdfPath *)a2);
    if ((v19 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v20 = sub_2169D43D4(v11, v18);
    uint64_t v11 = v18 + 2;
    uint64_t result = sub_2169D43D4(v18 + 2, a2);
    if (result)
    {
      a4 = -v13;
      a2 = v18;
      if (v20) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v20)
    {
LABEL_17:
      uint64_t result = sub_2169D38EC(v10, v18, a3, -v13, a5 & 1);
      uint64_t v11 = v18 + 2;
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return sub_2169D3CE4((uint64_t)v11, a2);
  }
  else
  {
    return sub_2169D3E2C((uint64_t)v11, a2);
  }
}

uint64_t sub_2169D3CE4(uint64_t result, _DWORD *a2)
{
  if ((_DWORD *)result != a2)
  {
    uint64_t v3 = (int *)result;
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(result + 8);
    if ((_DWORD *)(result + 8) != a2)
    {
      uint64_t v5 = 0;
      char v6 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)result;
      do
      {
        BOOL v7 = v4;
        uint64_t result = sub_2169817E8(v4, v6);
        if (result)
        {
          int v11 = *(_DWORD *)v7;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(v7);
          int v12 = *((_DWORD *)v6 + 3);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)v6 + 3);
          uint64_t v8 = v5;
          while (1)
          {
            int v9 = (int *)((char *)v3 + v8);
            sub_21697DE94((int *)((char *)v3 + v8 + 8), (int *)((char *)v3 + v8));
            sub_21697DEEC(v9 + 3, v9 + 1);
            if (!v8) {
              break;
            }
            v8 -= 8;
            if ((sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v9 - 2)) & 1) == 0)
            {
              uint64_t v10 = (int *)((char *)v3 + v8 + 8);
              goto LABEL_10;
            }
          }
          uint64_t v10 = v3;
LABEL_10:
          sub_21697DE94(v10, &v11);
          sub_21697DEEC(v9 + 1, &v12);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
          uint64_t result = (uint64_t)sub_21697C414(&v11);
        }
        uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v7 + 8);
        v5 += 8;
        char v6 = v7;
      }
      while ((_DWORD *)((char *)v7 + 8) != a2);
    }
  }
  return result;
}

void sub_2169D3E18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2169D3E2C(uint64_t result, _DWORD *a2)
{
  if ((_DWORD *)result != a2)
  {
    uint64_t v3 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)result;
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(result + 8);
    if ((_DWORD *)(result + 8) != a2)
    {
      uint64_t v5 = (int *)(result + 12);
      do
      {
        char v6 = v4;
        uint64_t result = sub_2169817E8(v4, v3);
        if (result)
        {
          int v9 = *(_DWORD *)v6;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(v6);
          int v10 = *((_DWORD *)v3 + 3);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)v3 + 3);
          BOOL v7 = v5;
          do
          {
            uint64_t v8 = v7;
            sub_21697DE94(v7 - 1, v7 - 3);
            v7 -= 2;
            sub_21697DEEC(v8, v7);
          }
          while ((sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)&v9, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v8 - 5)) & 1) != 0);
          sub_21697DE94(v7 - 1, &v9);
          sub_21697DEEC(v7, &v10);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
          uint64_t result = (uint64_t)sub_21697C414(&v9);
        }
        uint64_t v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v6 + 8);
        v5 += 2;
        uint64_t v3 = v6;
      }
      while ((_DWORD *)((char *)v6 + 8) != a2);
    }
  }
  return result;
}

void sub_2169D3F40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2169D3F54(const pxrInternal__aapl__pxrReserved__::SdfPath *a1, int *a2, int *a3)
{
  char v6 = sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)a2, a1);
  int v7 = sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a2);
  if ((v6 & 1) == 0)
  {
    if (!v7) {
      return 0;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a2, a3);
    int v9 = a2 + 1;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a2 + 1, a3 + 1);
    if (sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)a2, a1))
    {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap((int *)a1, a2);
      uint64_t v8 = (int *)((char *)a1 + 4);
      uint64_t v10 = 2;
      goto LABEL_9;
    }
    return 1;
  }
  uint64_t v8 = (int *)((char *)a1 + 4);
  if (!v7)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap((int *)a1, a2);
    int v11 = a2 + 1;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(v8, a2 + 1);
    if (sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a2))
    {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a2, a3);
      int v9 = a3 + 1;
      uint64_t v10 = 2;
      uint64_t v8 = v11;
      goto LABEL_9;
    }
    return 1;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap((int *)a1, a3);
  int v9 = a3 + 1;
  uint64_t v10 = 1;
LABEL_9:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(v8, v9);
  return v10;
}

int *sub_2169D4078(int *a1, int *a2)
{
  int v8 = *a1;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(a1);
  int v9 = a1[1];
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=(a1 + 1);
  if (sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)&v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 - 2)))
  {
    uint64_t v4 = a1;
    do
      v4 += 2;
    while ((sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)&v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v4) & 1) == 0);
  }
  else
  {
    uint64_t v5 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 2);
    do
    {
      uint64_t v4 = (int *)v5;
      if (v5 >= (const pxrInternal__aapl__pxrReserved__::SdfPath *)a2) {
        break;
      }
      int v6 = sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)&v8, v5);
      uint64_t v5 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v4 + 2);
    }
    while (!v6);
  }
  if (v4 < a2)
  {
    do
      a2 -= 2;
    while ((sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)&v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a2) & 1) != 0);
  }
  while (v4 < a2)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(v4, a2);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(v4 + 1, a2 + 1);
    do
      v4 += 2;
    while (!sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)&v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v4));
    do
      a2 -= 2;
    while ((sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)&v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a2) & 1) != 0);
  }
  if (v4 - 2 != a1)
  {
    sub_21697DE94(a1, v4 - 2);
    sub_21697DEEC(a1 + 1, v4 - 1);
  }
  sub_21697DE94(v4 - 2, &v8);
  sub_21697DEEC(v4 - 1, &v9);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_21697C414(&v8);
  return v4;
}

void sub_2169D41F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

int *sub_2169D4220(int *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  int v10 = *a1;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(a1);
  int v11 = a1[1];
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=(a1 + 1);
  uint64_t v4 = 0;
  do
  {
    char v5 = sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)&a1[v4 + 2], (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v10);
    v4 += 2;
  }
  while ((v5 & 1) != 0);
  int v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)&a1[v4];
  if (v4 == 2)
  {
    do
    {
      if (v6 >= a2) {
        break;
      }
      a2 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)a2 - 8);
    }
    while ((sub_2169817E8(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v10) & 1) == 0);
  }
  else
  {
    do
      a2 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)a2 - 8);
    while (!sub_2169817E8(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v10));
  }
  int v7 = &a1[v4];
  if (v6 < a2)
  {
    int v8 = (int *)a2;
    do
    {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(v7, v8);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(v7 + 1, v8 + 1);
      do
        v7 += 2;
      while ((sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)v7, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v10) & 1) != 0);
      do
        v8 -= 2;
      while (!sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v10));
    }
    while (v7 < v8);
  }
  if (v7 - 2 != a1)
  {
    sub_21697DE94(a1, v7 - 2);
    sub_21697DEEC(a1 + 1, v7 - 1);
  }
  sub_21697DE94(v7 - 2, &v10);
  sub_21697DEEC(v7 - 1, &v11);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
  sub_21697C414(&v10);
  return v7 - 2;
}

void sub_2169D43B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

BOOL sub_2169D43D4(int *a1, int *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 3;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 - 2), (const pxrInternal__aapl__pxrReserved__::SdfPath *)a1))
      {
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a1, a2 - 2);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a1 + 1, a2 - 1);
      }
      return 1;
    case 3:
      sub_2169D3F54((const pxrInternal__aapl__pxrReserved__::SdfPath *)a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      sub_2169D4628(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      sub_2169D470C(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      int v6 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 4);
      sub_2169D3F54((const pxrInternal__aapl__pxrReserved__::SdfPath *)a1, a1 + 2, a1 + 4);
      int v7 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 6);
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      break;
  }
  while (1)
  {
    if (sub_2169817E8(v7, v6))
    {
      int v13 = *(_DWORD *)v7;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(v7);
      int v14 = *((_DWORD *)v7 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)v7 + 1);
      uint64_t v10 = v8;
      while (1)
      {
        int v11 = (int *)((char *)a1 + v10);
        sub_21697DE94((int *)((char *)a1 + v10 + 24), (int *)((char *)a1 + v10 + 16));
        sub_21697DEEC(v11 + 7, v11 + 5);
        if (v10 == -16) {
          break;
        }
        v10 -= 8;
        if ((sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)&v13, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v11 + 2)) & 1) == 0)
        {
          int v12 = (int *)((char *)a1 + v10 + 24);
          goto LABEL_12;
        }
      }
      int v12 = a1;
LABEL_12:
      sub_21697DE94(v12, &v13);
      sub_21697DEEC(v11 + 5, &v14);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
      ++v9;
      sub_21697C414(&v13);
      if (v9 == 8) {
        return (int *)((char *)v7 + 8) == a2;
      }
    }
    int v6 = v7;
    v8 += 8;
    int v7 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v7 + 8);
    if (v7 == (pxrInternal__aapl__pxrReserved__::SdfPath *)a2) {
      return 1;
    }
  }
}

void sub_2169D45FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

int *sub_2169D4628(int *a1, int *a2, int *a3, int *a4)
{
  sub_2169D3F54((const pxrInternal__aapl__pxrReserved__::SdfPath *)a1, a2, a3);
  BOOL result = (int *)sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)a4, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a3);
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a3, a4);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a3 + 1, a4 + 1);
    BOOL result = (int *)sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a2);
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a2, a3);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a2 + 1, a3 + 1);
      BOOL result = (int *)sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a1);
      if (result)
      {
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a1, a2);
        return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a1 + 1, a2 + 1);
      }
    }
  }
  return result;
}

int *sub_2169D470C(int *a1, int *a2, int *a3, int *a4, int *a5)
{
  sub_2169D4628(a1, a2, a3, a4);
  BOOL result = (int *)sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)a5, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a4);
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a4, a5);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a4 + 1, a5 + 1);
    BOOL result = (int *)sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)a4, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a3);
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a3, a4);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a3 + 1, a4 + 1);
      BOOL result = (int *)sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a2);
      if (result)
      {
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a2, a3);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a2 + 1, a3 + 1);
        BOOL result = (int *)sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a1);
        if (result)
        {
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a1, a2);
          return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a1 + 1, a2 + 1);
        }
      }
    }
  }
  return result;
}

int *sub_2169D4820(int *a1, int *a2, int *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v6 = (uint64_t)a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) >> 3;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      int v12 = &a1[2 * v10];
      do
      {
        sub_2169D4948((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = v6;
    if ((int *)v6 != a3)
    {
      int v14 = (int *)v6;
      do
      {
        if (sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a1))
        {
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(v14, a1);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(v14 + 1, a1 + 1);
          sub_2169D4948((uint64_t)a1, a4, v9, a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      uint64_t v13 = (uint64_t)a3;
    }
    if (v8 >= 9)
    {
      unint64_t v15 = (unint64_t)v8 >> 3;
      do
      {
        sub_2169D4AE8(a1, v6, a4, v15);
        v6 -= 8;
      }
      while (v15-- > 2);
    }
    return (int *)v13;
  }
  return a3;
}

uint64_t sub_2169D4948(uint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    char v5 = a4;
    uint64_t v6 = result;
    uint64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 3)
    {
      uint64_t v9 = ((uint64_t)a4 - result) >> 2;
      uint64_t v10 = v9 + 1;
      unint64_t v11 = (int *)(result + 8 * (v9 + 1));
      uint64_t v12 = v9 + 2;
      if (v9 + 2 < a3
        && sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)(result + 8 * (v9 + 1)), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v11 + 2)))
      {
        v11 += 2;
        uint64_t v10 = v12;
      }
      BOOL result = sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)v11, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v5);
      if ((result & 1) == 0)
      {
        int v16 = *v5;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(v5);
        int v17 = v5[1];
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=(v5 + 1);
        do
        {
          uint64_t v13 = v11;
          sub_21697DE94(v5, v11);
          int v14 = v11 + 1;
          sub_21697DEEC(v5 + 1, v11 + 1);
          if (v7 < v10) {
            break;
          }
          uint64_t v15 = (2 * v10) | 1;
          unint64_t v11 = (int *)(v6 + 8 * v15);
          uint64_t v10 = 2 * v10 + 2;
          if (v10 >= a3)
          {
            uint64_t v10 = v15;
          }
          else if (sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 + 8 * v15), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v11 + 2)))
          {
            v11 += 2;
          }
          else
          {
            uint64_t v10 = v15;
          }
          char v5 = v13;
        }
        while (!sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)v11, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v16));
        sub_21697DE94(v13, &v16);
        sub_21697DEEC(v14, &v17);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
        return (uint64_t)sub_21697C414(&v16);
      }
    }
  }
  return result;
}

void sub_2169D4AD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

int *sub_2169D4AE8(int *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v7 = result;
    int v13 = *result;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(result);
    int v14 = v7[1];
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=(v7 + 1);
    uint64_t v8 = sub_2169D4C28(v7, a3, a4);
    uint64_t v9 = v8;
    uint64_t v10 = (int *)(a2 - 8);
    unint64_t v11 = v8 + 1;
    if (v8 == (int *)(a2 - 8))
    {
      sub_21697DE94(v8, &v13);
      sub_21697DEEC(v11, &v14);
    }
    else
    {
      sub_21697DE94(v8, (int *)(a2 - 8));
      uint64_t v12 = (int *)(a2 - 4);
      sub_21697DEEC(v11, v12);
      sub_21697DE94(v10, &v13);
      sub_21697DEEC(v12, &v14);
      sub_2169D4CE0(v7, (uint64_t)(v9 + 2), a3, ((char *)(v9 + 2) - (char *)v7) >> 3);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
    return sub_21697C414(&v13);
  }
  return result;
}

void sub_2169D4C14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

int *sub_2169D4C28(int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = a3 - 2;
  if (a3 < 2) {
    uint64_t v6 = a3 - 1;
  }
  uint64_t v7 = v6 >> 1;
  do
  {
    uint64_t v8 = &a1[2 * v5 + 2];
    uint64_t v9 = (2 * v5) | 1;
    uint64_t v10 = 2 * v5 + 2;
    if (v10 < a3
      && sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)&a1[2 * v5 + 2], (const pxrInternal__aapl__pxrReserved__::SdfPath *)&a1[2 * v5 + 4]))
    {
      v8 += 2;
      uint64_t v9 = v10;
    }
    sub_21697DE94(a1, v8);
    sub_21697DEEC(a1 + 1, v8 + 1);
    a1 = v8;
    uint64_t v5 = v9;
  }
  while (v9 <= v7);
  return v8;
}

_DWORD *sub_2169D4CE0(_DWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v6 = result;
    unint64_t v7 = v4 >> 1;
    uint64_t v8 = &result[2 * (v4 >> 1)];
    uint64_t v9 = (int *)(a2 - 8);
    BOOL result = (_DWORD *)sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 - 8));
    if (result)
    {
      int v12 = *v9;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(v9);
      int v13 = *(_DWORD *)(a2 - 4);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(a2 - 4));
      do
      {
        uint64_t v10 = v8;
        sub_21697DE94(v9, v8);
        unint64_t v11 = v8 + 1;
        sub_21697DEEC(v9 + 1, v8 + 1);
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v8 = &v6[2 * v7];
        uint64_t v9 = v10;
      }
      while ((sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v12) & 1) != 0);
      sub_21697DE94(v10, &v12);
      sub_21697DEEC(v11, &v13);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
      return sub_21697C414(&v12);
    }
  }
  return result;
}

void sub_2169D4DF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

void sub_2169D4E04(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if ((sub_216980CE8(a1) & 1) == 0) {
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SdfListOp();
  }
  sub_2169D4FAC((uint64_t *)a1);
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::Swap();
}

void sub_2169D4EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t sub_2169D4EDC(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v5, a1);
  *(void *)(a1 + 8) = &off_26C754E58;
  sub_216982A54((unsigned int **)a1, a2);
  if (v6) {
    (*(void (**)(unsigned char *))(v6 + 32))(v5);
  }
  return a1;
}

void sub_2169D4F70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2169D4FAC(uint64_t *a1)
{
  void v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, uint64_t *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_2169829C8(a1);
}

void **sub_2169D5040(void **a1)
{
  uint64_t v3 = a1 + 16;
  sub_2169CC68C(&v3);
  uint64_t v3 = a1 + 13;
  sub_2169CC68C(&v3);
  uint64_t v3 = a1 + 10;
  sub_2169CC68C(&v3);
  uint64_t v3 = a1 + 7;
  sub_2169CC68C(&v3);
  uint64_t v3 = a1 + 4;
  sub_2169CC68C(&v3);
  uint64_t v3 = a1 + 1;
  sub_2169CC68C(&v3);
  return a1;
}

void sub_2169D50CC(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X8>)
{
  *((void *)a1 + 1) = 0;
  sub_2169D7574(a1);
}

void sub_2169D50FC(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

BOOL sub_2169D5110(long long **a1)
{
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  sub_2169D520C((char *)&v9, *a1, a1[1], 0x6DB6DB6DB6DB6DB7 * (((char *)a1[1] - (char *)*a1) >> 3));
  unint64_t v1 = 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7 * ((v10 - v9) >> 3));
  if (v10 == v9) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = v1;
  }
  sub_2169D54C8(v9, (long long *)v10, (uint64_t)&v12, v2, 1);
  uint64_t v3 = v9;
  unint64_t v4 = v10;
  if (v9 == v10)
  {
    unint64_t v4 = v9;
  }
  else
  {
    while (1)
    {
      uint64_t v5 = v3 + 56;
      if (v3 + 56 == v4) {
        break;
      }
      int v6 = pxrInternal__aapl__pxrReserved__::SdfReference::operator==(v3, v3 + 56);
      uint64_t v3 = v5;
      if (v6)
      {
        unint64_t v4 = v5 - 56;
        break;
      }
    }
    uint64_t v3 = v10;
  }
  BOOL v7 = v4 != v3;
  int v13 = &v9;
  sub_2169CC68C((void ***)&v13);
  return v7;
}

void sub_2169D51EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  *(void *)(v10 - 24) = &a10;
  sub_2169CC68C((void ***)(v10 - 24));
  _Unwind_Resume(a1);
}

char *sub_2169D520C(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    sub_2167B8760(result, a4);
    BOOL result = sub_2169D5294((uint64_t)(v6 + 16), a2, a3, *((char **)v6 + 1));
    *((void *)v6 + 1) = result;
  }
  return result;
}

void sub_2169D5274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_2169CC68C(&a9);
  _Unwind_Resume(a1);
}

char *sub_2169D5294(uint64_t a1, long long *a2, long long *a3, char *__dst)
{
  unint64_t v4 = __dst;
  uint64_t v10 = __dst;
  uint64_t v11 = __dst;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    int v6 = a2;
    do
    {
      sub_2169D5338(v4, v6);
      int v6 = (long long *)((char *)v6 + 56);
      unint64_t v4 = v11 + 56;
      v11 += 56;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  sub_2169D53E8((uint64_t)v8);
  return v4;
}

void sub_2169D5324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *sub_2169D5338(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  sub_216981010((_DWORD *)__dst + 6, (_DWORD *)a2 + 6);
  sub_21698105C((_DWORD *)__dst + 7, (_DWORD *)a2 + 7);
  *((_OWORD *)__dst + 2) = a2[2];
  pxrInternal__aapl__pxrReserved__::VtDictionary::VtDictionary((pxrInternal__aapl__pxrReserved__::VtDictionary *)(__dst + 48), (const pxrInternal__aapl__pxrReserved__::VtDictionary *)(a2 + 3));
  return __dst;
}

void sub_2169D53C4(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v3);
  sub_2173245A8(v2, v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2169D53E8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_2169D5420((uint64_t *)a1);
  }
  return a1;
}

void sub_2169D5420(uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 56;
      sub_2169CC724(v5, v3);
    }
    while (v3 != v4);
  }
}

uint64_t sub_2169D5474(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_2169D54C8(unsigned __int8 *a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
void sub_2169D58E0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = a1 + 56;
    if (a1 + 56 != a2)
    {
      uint64_t v5 = 0;
      char v6 = &v25;
      BOOL v7 = &v27;
      uint64_t v8 = a1;
      do
      {
        char v9 = v4;
        if (pxrInternal__aapl__pxrReserved__::SdfReference::operator<(v4, v8))
        {
          *(_OWORD *)std::type_info __p = *(_OWORD *)v9;
          uint64_t v24 = *((void *)v9 + 2);
          *((void *)v9 + 1) = 0;
          *((void *)v9 + 2) = 0;
          *(void *)char v9 = 0;
          int v25 = *((_DWORD *)v8 + 20);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=((_DWORD *)v8 + 20);
          int v26 = *((_DWORD *)v8 + 21);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)v8 + 21);
          uint64_t v10 = v6;
          uint64_t v11 = v7;
          *(_OWORD *)BOOL v7 = *(_OWORD *)(v8 + 88);
          uint64_t v12 = (void **)*((void *)v8 + 13);
          *((void *)v8 + 13) = 0;
          uint64_t v28 = v12;
          uint64_t v13 = v5;
          while (1)
          {
            uint64_t v14 = v13;
            unint64_t v15 = &a1[v13];
            uint64_t v16 = (uint64_t)&a1[v13 + 56];
            if ((char)a1[v13 + 79] < 0) {
              operator delete(*(void **)v16);
            }
            *(_OWORD *)uint64_t v16 = *(_OWORD *)v15;
            *(void *)(v16 + 16) = *((void *)v15 + 2);
            v15[23] = 0;
            unsigned __int8 *v15 = 0;
            sub_21697DE94((int *)v15 + 20, (int *)v15 + 6);
            sub_21697DEEC((int *)v15 + 21, (int *)v15 + 7);
            *(_OWORD *)(v15 + 88) = *((_OWORD *)v15 + 2);
            int v17 = (void **)*((void *)v15 + 6);
            *((void *)v15 + 6) = 0;
            sub_2168EBBB8((void ***)v15 + 13, v17);
            if (!v14) {
              break;
            }
            BOOL v18 = pxrInternal__aapl__pxrReserved__::SdfReference::operator<((unsigned __int8 *)__p, &a1[v14 - 56]);
            uint64_t v13 = v14 - 56;
            if (!v18)
            {
              char v19 = &a1[v14];
              goto LABEL_12;
            }
          }
          char v19 = a1;
LABEL_12:
          if ((char)v19[23] < 0) {
            operator delete(*(void **)v19);
          }
          BOOL v20 = (void ***)(v19 + 48);
          unint64_t v21 = &a1[v14 + 32];
          *(_OWORD *)char v19 = *(_OWORD *)__p;
          *((void *)v19 + 2) = v24;
          HIBYTE(v24) = 0;
          LOBYTE(__p[0]) = 0;
          char v6 = v10;
          sub_21697DE94((int *)&a1[v14 + 24], v10);
          sub_21697DEEC((int *)&a1[v14 + 28], &v26);
          BOOL v7 = v11;
          *(_OWORD *)unint64_t v21 = *(_OWORD *)v11;
          uint64_t v22 = v28;
          uint64_t v28 = 0;
          sub_2168EBBB8(v20, v22);
          sub_2168EBBB8(&v28, 0);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v26);
          sub_21697C414(v10);
          if (SHIBYTE(v24) < 0) {
            operator delete(__p[0]);
          }
        }
        uint64_t v4 = v9 + 56;
        v5 += 56;
        uint64_t v8 = v9;
      }
      while (v9 + 56 != a2);
    }
  }
}

void sub_2169D5B24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_2169D5474((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2169D5B38(uint64_t a1, unsigned __int8 *a2)
{
  if ((unsigned __int8 *)a1 != a2)
  {
    uint64_t v3 = (unsigned __int8 *)a1;
    uint64_t v4 = (unsigned __int8 *)(a1 + 56);
    if ((unsigned __int8 *)(a1 + 56) != a2)
    {
      uint64_t v5 = (void ***)(a1 + 104);
      do
      {
        char v6 = v4;
        if (pxrInternal__aapl__pxrReserved__::SdfReference::operator<(v4, v3))
        {
          *(_OWORD *)std::type_info __p = *(_OWORD *)v6;
          unint64_t v15 = (void **)*((void *)v6 + 2);
          *((void *)v6 + 1) = 0;
          *((void *)v6 + 2) = 0;
          *(void *)char v6 = 0;
          int v16 = *((_DWORD *)v3 + 20);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=((_DWORD *)v3 + 20);
          int v17 = *((_DWORD *)v3 + 21);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)v3 + 21);
          long long v18 = *(_OWORD *)(v3 + 88);
          BOOL v7 = (void **)*((void *)v3 + 13);
          *((void *)v3 + 13) = 0;
          char v19 = v7;
          uint64_t v8 = v5;
          do
          {
            char v9 = (void **)(v8 - 6);
            if (*((char *)v8 - 25) < 0) {
              operator delete(*v9);
            }
            *(_OWORD *)char v9 = *(_OWORD *)(v8 - 13);
            *(v8 - 4) = *(v8 - 11);
            *((unsigned char *)v8 - 81) = 0;
            *((unsigned char *)v8 - 104) = 0;
            sub_21697DE94((int *)v8 - 6, (int *)v8 - 20);
            sub_21697DEEC((int *)v8 - 5, (int *)v8 - 19);
            *((_OWORD *)v8 - 1) = *(_OWORD *)(v8 - 9);
            uint64_t v10 = *(v8 - 7);
            *(v8 - 7) = 0;
            sub_2168EBBB8(v8, v10);
            BOOL v11 = pxrInternal__aapl__pxrReserved__::SdfReference::operator<((unsigned __int8 *)__p, (unsigned __int8 *)v8 - 160);
            v8 -= 7;
          }
          while (v11);
          uint64_t v12 = (void **)(v8 - 6);
          if (*((char *)v8 - 25) < 0) {
            operator delete(*v12);
          }
          *(_OWORD *)uint64_t v12 = *(_OWORD *)__p;
          *(v8 - 4) = v15;
          HIBYTE(v15) = 0;
          LOBYTE(__p[0]) = 0;
          sub_21697DE94((int *)v8 - 6, &v16);
          sub_21697DEEC((int *)v8 - 5, &v17);
          *((_OWORD *)v8 - 1) = v18;
          uint64_t v13 = v19;
          char v19 = 0;
          sub_2168EBBB8(v8, v13);
          sub_2168EBBB8(&v19, 0);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
          sub_21697C414(&v16);
          if (SHIBYTE(v15) < 0) {
            operator delete(__p[0]);
          }
        }
        uint64_t v4 = v6 + 56;
        v5 += 7;
        uint64_t v3 = v6;
      }
      while (v6 + 56 != a2);
    }
  }
}

void sub_2169D5D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_2169D5474((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2169D5D58(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  BOOL v6 = pxrInternal__aapl__pxrReserved__::SdfReference::operator<(a2, a1);
  uint64_t result = pxrInternal__aapl__pxrReserved__::SdfReference::operator<(a3, a2);
  if (!v6)
  {
    if (!result) {
      return result;
    }
    sub_2169D66C8((uint64_t)a2, (long long *)a3);
    if (!pxrInternal__aapl__pxrReserved__::SdfReference::operator<(a2, a1)) {
      return 1;
    }
    uint64_t v8 = (uint64_t)a1;
    char v9 = (long long *)a2;
    goto LABEL_9;
  }
  if (!result)
  {
    sub_2169D66C8((uint64_t)a1, (long long *)a2);
    if (!pxrInternal__aapl__pxrReserved__::SdfReference::operator<(a3, a2)) {
      return 1;
    }
    uint64_t v8 = (uint64_t)a2;
    char v9 = (long long *)a3;
LABEL_9:
    sub_2169D66C8(v8, v9);
    return 2;
  }
  sub_2169D66C8((uint64_t)a1, (long long *)a3);
  return 1;
}

unsigned __int8 *sub_2169D5E1C(uint64_t a1, unsigned __int8 *a2)
{
  *(_OWORD *)std::type_info __p = *(_OWORD *)a1;
  uint64_t v16 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  uint64_t v4 = (int *)(a1 + 24);
  int v17 = *(_DWORD *)(a1 + 24);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(a1 + 24));
  int v18 = *(_DWORD *)(a1 + 28);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(a1 + 28));
  uint64_t v5 = *(void ***)(a1 + 48);
  long long v19 = *(_OWORD *)(a1 + 32);
  *(void *)(a1 + 48) = 0;
  BOOL v20 = v5;
  if (pxrInternal__aapl__pxrReserved__::SdfReference::operator<((unsigned __int8 *)__p, a2 - 56))
  {
    BOOL v6 = (unsigned __int8 *)a1;
    do
      v6 += 56;
    while (!pxrInternal__aapl__pxrReserved__::SdfReference::operator<((unsigned __int8 *)__p, v6));
  }
  else
  {
    BOOL v7 = (unsigned __int8 *)(a1 + 56);
    do
    {
      BOOL v6 = v7;
      if (v7 >= a2) {
        break;
      }
      BOOL v8 = pxrInternal__aapl__pxrReserved__::SdfReference::operator<((unsigned __int8 *)__p, v7);
      BOOL v7 = v6 + 56;
    }
    while (!v8);
  }
  if (v6 < a2)
  {
    do
      a2 -= 56;
    while (pxrInternal__aapl__pxrReserved__::SdfReference::operator<((unsigned __int8 *)__p, a2));
  }
  while (v6 < a2)
  {
    sub_2169D66C8((uint64_t)v6, (long long *)a2);
    do
      v6 += 56;
    while (!pxrInternal__aapl__pxrReserved__::SdfReference::operator<((unsigned __int8 *)__p, v6));
    do
      a2 -= 56;
    while (pxrInternal__aapl__pxrReserved__::SdfReference::operator<((unsigned __int8 *)__p, a2));
  }
  char v9 = (void **)(v6 - 56);
  if (v6 - 56 != (unsigned __int8 *)a1)
  {
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    long long v10 = *(_OWORD *)v9;
    *(void *)(a1 + 16) = *((void *)v6 - 5);
    *(_OWORD *)a1 = v10;
    *(v6 - 33) = 0;
    *(v6 - 56) = 0;
    sub_21697DE94(v4, (int *)v6 - 8);
    sub_21697DEEC((int *)(a1 + 28), (int *)v6 - 7);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(v6 - 24);
    BOOL v11 = (void **)*((void *)v6 - 1);
    *((void *)v6 - 1) = 0;
    sub_2168EBBB8((void ***)(a1 + 48), v11);
  }
  if ((char)*(v6 - 33) < 0) {
    operator delete(*v9);
  }
  long long v12 = *(_OWORD *)__p;
  *((void *)v6 - 5) = v16;
  *(_OWORD *)char v9 = v12;
  HIBYTE(v16) = 0;
  LOBYTE(__p[0]) = 0;
  sub_21697DE94((int *)v6 - 8, &v17);
  sub_21697DEEC((int *)v6 - 7, &v18);
  *(_OWORD *)(v6 - 24) = v19;
  uint64_t v13 = v20;
  BOOL v20 = 0;
  sub_2168EBBB8((void ***)v6 - 1, v13);
  sub_2168EBBB8(&v20, 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
  sub_21697C414(&v17);
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
  return v6;
}

void sub_2169D6084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

unsigned __int8 *sub_2169D60B4(uint64_t a1, unsigned __int8 *a2)
{
  *(_OWORD *)std::type_info __p = *(_OWORD *)a1;
  uint64_t v18 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  uint64_t v4 = (int *)(a1 + 24);
  int v19 = *(_DWORD *)(a1 + 24);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(a1 + 24));
  int v20 = *(_DWORD *)(a1 + 28);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(a1 + 28));
  uint64_t v5 = 0;
  BOOL v6 = *(void ***)(a1 + 48);
  long long v21 = *(_OWORD *)(a1 + 32);
  *(void *)(a1 + 48) = 0;
  uint64_t v22 = v6;
  do
  {
    BOOL v7 = pxrInternal__aapl__pxrReserved__::SdfReference::operator<((unsigned __int8 *)(a1 + v5 + 56), (unsigned __int8 *)__p);
    v5 += 56;
  }
  while (v7);
  unint64_t v8 = a1 + v5;
  if (v5 == 56)
  {
    do
    {
      if (v8 >= (unint64_t)a2) {
        break;
      }
      a2 -= 56;
    }
    while (!pxrInternal__aapl__pxrReserved__::SdfReference::operator<(a2, (unsigned __int8 *)__p));
  }
  else
  {
    do
      a2 -= 56;
    while (!pxrInternal__aapl__pxrReserved__::SdfReference::operator<(a2, (unsigned __int8 *)__p));
  }
  char v9 = (unsigned __int8 *)(a1 + v5);
  if (v8 < (unint64_t)a2)
  {
    long long v10 = (long long *)a2;
    do
    {
      sub_2169D66C8((uint64_t)v9, v10);
      do
        v9 += 56;
      while (pxrInternal__aapl__pxrReserved__::SdfReference::operator<(v9, (unsigned __int8 *)__p));
      do
        long long v10 = (long long *)((char *)v10 - 56);
      while (!pxrInternal__aapl__pxrReserved__::SdfReference::operator<((unsigned __int8 *)v10, (unsigned __int8 *)__p));
    }
    while (v9 < (unsigned __int8 *)v10);
  }
  BOOL v11 = (void **)(v9 - 56);
  if (v9 - 56 != (unsigned __int8 *)a1)
  {
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    long long v12 = *(_OWORD *)v11;
    *(void *)(a1 + 16) = *((void *)v9 - 5);
    *(_OWORD *)a1 = v12;
    *(v9 - 33) = 0;
    *(v9 - 56) = 0;
    sub_21697DE94(v4, (int *)v9 - 8);
    sub_21697DEEC((int *)(a1 + 28), (int *)v9 - 7);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(v9 - 24);
    uint64_t v13 = (void **)*((void *)v9 - 1);
    *((void *)v9 - 1) = 0;
    sub_2168EBBB8((void ***)(a1 + 48), v13);
  }
  if ((char)*(v9 - 33) < 0) {
    operator delete(*v11);
  }
  long long v14 = *(_OWORD *)__p;
  *((void *)v9 - 5) = v18;
  *(_OWORD *)BOOL v11 = v14;
  HIBYTE(v18) = 0;
  LOBYTE(__p[0]) = 0;
  sub_21697DE94((int *)v9 - 8, &v19);
  sub_21697DEEC((int *)v9 - 7, &v20);
  *(_OWORD *)(v9 - 24) = v21;
  unint64_t v15 = v22;
  uint64_t v22 = 0;
  sub_2168EBBB8((void ***)v9 - 1, v15);
  sub_2168EBBB8(&v22, 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
  sub_21697C414(&v19);
  if (SHIBYTE(v18) < 0) {
    operator delete(__p[0]);
  }
  return v9 - 56;
}

void sub_2169D633C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_2169D5474((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_2169D6360(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0x6DB6DB6DB6DB6DB7 * v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      BOOL v6 = (long long *)(a2 - 56);
      if (pxrInternal__aapl__pxrReserved__::SdfReference::operator<((unsigned __int8 *)(a2 - 56), (unsigned __int8 *)a1))
      {
        sub_2169D66C8(a1, v6);
      }
      return 1;
    case 3:
      sub_2169D5D58((unsigned __int8 *)a1, (unsigned __int8 *)(a1 + 56), (unsigned __int8 *)(a2 - 56));
      return 1;
    case 4:
      sub_2169D688C((unsigned __int8 *)a1, (unsigned __int8 *)(a1 + 56), (unsigned __int8 *)(a1 + 112), (long long *)(a2 - 56));
      return 1;
    case 5:
      sub_2169D6938((unsigned __int8 *)a1, (unsigned __int8 *)(a1 + 56), (unsigned __int8 *)(a1 + 112), (long long *)(a1 + 168), (long long *)(a2 - 56));
      return 1;
    default:
      BOOL v7 = (unsigned __int8 *)(a1 + 112);
      sub_2169D5D58((unsigned __int8 *)a1, (unsigned __int8 *)(a1 + 56), (unsigned __int8 *)(a1 + 112));
      uint64_t v8 = a1 + 168;
      if (a1 + 168 == a2) {
        return 1;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      BOOL v11 = &v25;
      break;
  }
  while (1)
  {
    if (pxrInternal__aapl__pxrReserved__::SdfReference::operator<((unsigned __int8 *)v8, v7))
    {
      *(_OWORD *)std::type_info __p = *(_OWORD *)v8;
      uint64_t v24 = *(void *)(v8 + 16);
      *(void *)(v8 + 8) = 0;
      *(void *)(v8 + 16) = 0;
      *(void *)uint64_t v8 = 0;
      int v25 = *(_DWORD *)(v8 + 24);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(v8 + 24));
      int v26 = *(_DWORD *)(v8 + 28);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(v8 + 28));
      long long v12 = v11;
      long long v27 = *(_OWORD *)(v8 + 32);
      uint64_t v13 = *(void ***)(v8 + 48);
      *(void *)(v8 + 48) = 0;
      uint64_t v28 = v13;
      uint64_t v14 = v9;
      while (1)
      {
        uint64_t v15 = v14;
        uint64_t v16 = a1 + v14;
        uint64_t v17 = a1 + v14 + 168;
        if (*(char *)(a1 + v14 + 191) < 0) {
          operator delete(*(void **)v17);
        }
        *(_OWORD *)uint64_t v17 = *(_OWORD *)(v16 + 112);
        *(void *)(v17 + 16) = *(void *)(v16 + 128);
        *(unsigned char *)(v16 + 135) = 0;
        *(unsigned char *)(v16 + 112) = 0;
        sub_21697DE94((int *)(v16 + 192), (int *)(v16 + 136));
        sub_21697DEEC((int *)(v16 + 196), (int *)(v16 + 140));
        *(_OWORD *)(v16 + 20sub_2168EBBB8(&a9, 0) = *(_OWORD *)(v16 + 144);
        uint64_t v18 = *(void ***)(v16 + 160);
        *(void *)(v16 + 16sub_2168EBBB8(&a9, 0) = 0;
        sub_2168EBBB8((void ***)(v16 + 216), v18);
        if (v15 == -112) {
          break;
        }
        BOOL v19 = pxrInternal__aapl__pxrReserved__::SdfReference::operator<((unsigned __int8 *)__p, (unsigned __int8 *)(a1 + v15 + 56));
        uint64_t v14 = v15 - 56;
        if (!v19)
        {
          uint64_t v20 = a1 + v14 + 168;
          goto LABEL_14;
        }
      }
      uint64_t v20 = a1;
LABEL_14:
      if (*(char *)(v20 + 23) < 0) {
        operator delete(*(void **)v20);
      }
      long long v21 = (void ***)(v20 + 48);
      *(_OWORD *)uint64_t v20 = *(_OWORD *)__p;
      *(void *)(v20 + 16) = v24;
      HIBYTE(v24) = 0;
      LOBYTE(__p[0]) = 0;
      BOOL v11 = v12;
      sub_21697DE94((int *)(a1 + v15 + 136), v12);
      sub_21697DEEC((int *)(a1 + v15 + 140), &v26);
      *(_OWORD *)(a1 + v15 + 144) = v27;
      uint64_t v22 = v28;
      uint64_t v28 = 0;
      sub_2168EBBB8(v21, v22);
      sub_2168EBBB8(&v28, 0);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v26);
      sub_21697C414(v12);
      if (SHIBYTE(v24) < 0) {
        operator delete(__p[0]);
      }
      if (++v10 == 8) {
        return v8 + 56 == a2;
      }
    }
    BOOL v7 = (unsigned __int8 *)v8;
    v9 += 56;
    v8 += 56;
    if (v8 == a2) {
      return 1;
    }
  }
}

void sub_2169D669C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_2169D5474((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2169D66C8(uint64_t a1, long long *a2)
{
  *(_OWORD *)std::type_info __p = *(_OWORD *)a1;
  uint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  uint64_t v4 = (int *)(a1 + 24);
  int v11 = *(_DWORD *)(a1 + 24);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(a1 + 24));
  int v12 = *(_DWORD *)(a1 + 28);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(a1 + 28));
  uint64_t v5 = *(void ***)(a1 + 48);
  long long v13 = *(_OWORD *)(a1 + 32);
  *(void *)(a1 + 48) = 0;
  uint64_t v14 = v5;
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  long long v6 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v6;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  sub_21697DE94(v4, (int *)a2 + 6);
  sub_21697DEEC((int *)(a1 + 28), (int *)a2 + 7);
  *(_OWORD *)(a1 + 32) = a2[2];
  BOOL v7 = (void **)*((void *)a2 + 6);
  *((void *)a2 + 6) = 0;
  sub_2168EBBB8((void ***)(a1 + 48), v7);
  if (*((char *)a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  *a2 = *(_OWORD *)__p;
  *((void *)a2 + 2) = v10;
  sub_21697DE94((int *)a2 + 6, &v11);
  sub_21697DEEC((int *)a2 + 7, &v12);
  a2[2] = v13;
  uint64_t v8 = v14;
  uint64_t v14 = 0;
  sub_2168EBBB8((void ***)a2 + 6, v8);
  sub_2168EBBB8(&v14, 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_21697C414(&v11);
}

void sub_2169D688C(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3, long long *a4)
{
  sub_2169D5D58(a1, a2, a3);
  if (pxrInternal__aapl__pxrReserved__::SdfReference::operator<((unsigned __int8 *)a4, a3))
  {
    sub_2169D66C8((uint64_t)a3, a4);
    if (pxrInternal__aapl__pxrReserved__::SdfReference::operator<(a3, a2))
    {
      sub_2169D66C8((uint64_t)a2, (long long *)a3);
      if (pxrInternal__aapl__pxrReserved__::SdfReference::operator<(a2, a1))
      {
        sub_2169D66C8((uint64_t)a1, (long long *)a2);
      }
    }
  }
}

void sub_2169D6938(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3, long long *a4, long long *a5)
{
  sub_2169D688C(a1, a2, a3, a4);
  if (pxrInternal__aapl__pxrReserved__::SdfReference::operator<((unsigned __int8 *)a5, (unsigned __int8 *)a4))
  {
    sub_2169D66C8((uint64_t)a4, a5);
    if (pxrInternal__aapl__pxrReserved__::SdfReference::operator<((unsigned __int8 *)a4, a3))
    {
      sub_2169D66C8((uint64_t)a3, a4);
      if (pxrInternal__aapl__pxrReserved__::SdfReference::operator<(a3, a2))
      {
        sub_2169D66C8((uint64_t)a2, (long long *)a3);
        if (pxrInternal__aapl__pxrReserved__::SdfReference::operator<(a2, a1))
        {
          sub_2169D66C8((uint64_t)a1, (long long *)a2);
        }
      }
    }
  }
}

unsigned __int8 *sub_2169D6A10(long long *a1, long long *a2, unsigned __int8 *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v6 = (uint64_t)a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) / 56;
    if ((char *)a2 - (char *)a1 >= 57)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      int v12 = (long long *)((char *)a1 + 56 * v10);
      do
      {
        sub_2169D6B58((uint64_t)a1, a4, v9, v12);
        int v12 = (long long *)((char *)v12 - 56);
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = v6;
    if ((unsigned __int8 *)v6 != a3)
    {
      uint64_t v14 = (unsigned __int8 *)v6;
      do
      {
        if (pxrInternal__aapl__pxrReserved__::SdfReference::operator<(v14, (unsigned __int8 *)a1))
        {
          sub_2169D66C8((uint64_t)v14, a1);
          sub_2169D6B58((uint64_t)a1, a4, v9, a1);
        }
        v14 += 56;
      }
      while (v14 != a3);
      uint64_t v13 = (uint64_t)a3;
    }
    if (v8 >= 57)
    {
      unint64_t v15 = v8 / 0x38uLL;
      do
      {
        sub_2169D6E14((uint64_t)a1, v6, a4, v15);
        v6 -= 56;
      }
      while (v15-- > 2);
    }
    return (unsigned __int8 *)v13;
  }
  return a3;
}

void sub_2169D6B58(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v5 = a4;
    int64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= 0x6DB6DB6DB6DB6DB7 * (((uint64_t)a4 - a1) >> 3))
    {
      int64_t v9 = (0xDB6DB6DB6DB6DB6ELL * (((uint64_t)a4 - a1) >> 3)) | 1;
      unint64_t v10 = (long long *)(a1 + 56 * v9);
      int64_t v11 = 0xDB6DB6DB6DB6DB6ELL * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v11 < a3
        && pxrInternal__aapl__pxrReserved__::SdfReference::operator<((unsigned __int8 *)(a1 + 56 * v9), (unsigned __int8 *)v10 + 56))
      {
        unint64_t v10 = (long long *)((char *)v10 + 56);
        int64_t v9 = v11;
      }
      if (!pxrInternal__aapl__pxrReserved__::SdfReference::operator<((unsigned __int8 *)v10, (unsigned __int8 *)v5))
      {
        *(_OWORD *)std::type_info __p = *v5;
        uint64_t v20 = *((void *)v5 + 2);
        *((void *)v5 + 1) = 0;
        *((void *)v5 + 2) = 0;
        *(void *)uint64_t v5 = 0;
        int v21 = *((_DWORD *)v5 + 6);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=((_DWORD *)v5 + 6);
        int v22 = *((_DWORD *)v5 + 7);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)v5 + 7);
        long long v23 = v5[2];
        int v12 = (void **)*((void *)v5 + 6);
        *((void *)v5 + 6) = 0;
        uint64_t v24 = v12;
        do
        {
          uint64_t v13 = v10;
          if (*((char *)v5 + 23) < 0) {
            operator delete(*(void **)v5);
          }
          long long v14 = *v10;
          *((void *)v5 + 2) = *((void *)v10 + 2);
          *uint64_t v5 = v14;
          *((unsigned char *)v10 + 23) = 0;
          *(unsigned char *)unint64_t v10 = 0;
          sub_21697DE94((int *)v5 + 6, (int *)v10 + 6);
          sub_21697DEEC((int *)v5 + 7, (int *)v10 + 7);
          _OWORD v5[2] = v10[2];
          unint64_t v15 = (void **)*((void *)v10 + 6);
          *((void *)v10 + 6) = 0;
          sub_2168EBBB8((void ***)v5 + 6, v15);
          if (v7 < v9) {
            break;
          }
          uint64_t v16 = (2 * v9) | 1;
          unint64_t v10 = (long long *)(a1 + 56 * v16);
          int64_t v9 = 2 * v9 + 2;
          if (v9 >= a3)
          {
            int64_t v9 = v16;
          }
          else if (pxrInternal__aapl__pxrReserved__::SdfReference::operator<((unsigned __int8 *)(a1 + 56 * v16), (unsigned __int8 *)v10 + 56))
          {
            unint64_t v10 = (long long *)((char *)v10 + 56);
          }
          else
          {
            int64_t v9 = v16;
          }
          uint64_t v5 = v13;
        }
        while (!pxrInternal__aapl__pxrReserved__::SdfReference::operator<((unsigned __int8 *)v10, (unsigned __int8 *)__p));
        if (*((char *)v13 + 23) < 0) {
          operator delete(*(void **)v13);
        }
        long long v17 = *(_OWORD *)__p;
        *((void *)v13 + 2) = v20;
        long long *v13 = v17;
        HIBYTE(v2sub_2168EBBB8(&a9, 0) = 0;
        LOBYTE(__p[0]) = 0;
        sub_21697DE94((int *)v13 + 6, &v21);
        sub_21697DEEC((int *)v13 + 7, &v22);
        v13[2] = v23;
        uint64_t v18 = v24;
        uint64_t v24 = 0;
        sub_2168EBBB8((void ***)v13 + 6, v18);
        sub_2168EBBB8(&v24, 0);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
        sub_21697C414(&v21);
        if (SHIBYTE(v20) < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
}

void sub_2169D6E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_2169D5474((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2169D6E14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    *(_OWORD *)std::type_info __p = *(_OWORD *)a1;
    uint64_t v19 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    int v20 = *(_DWORD *)(a1 + 24);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(a1 + 24));
    int v21 = *(_DWORD *)(a1 + 28);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(a1 + 28));
    long long v22 = *(_OWORD *)(a1 + 32);
    uint64_t v8 = *(void ***)(a1 + 48);
    *(void *)(a1 + 48) = 0;
    long long v23 = v8;
    uint64_t v9 = sub_2169D7098(a1, a3, a4);
    uint64_t v10 = v9;
    int64_t v11 = (void **)(a2 - 56);
    int v12 = *(char *)(v9 + 23);
    if (v9 == a2 - 56)
    {
      if (v12 < 0) {
        operator delete(*(void **)v9);
      }
      *(void *)(v10 + 16) = v19;
      *(_OWORD *)uint64_t v10 = *(_OWORD *)__p;
      sub_21697DE94((int *)(v10 + 24), &v20);
      sub_21697DEEC((int *)(v10 + 28), &v21);
      *(_OWORD *)(v10 + 32) = v22;
      long long v17 = v23;
      long long v23 = 0;
      sub_2168EBBB8((void ***)(v10 + 48), v17);
    }
    else
    {
      if (v12 < 0) {
        operator delete(*(void **)v9);
      }
      long long v13 = *(_OWORD *)v11;
      *(void *)(v10 + 16) = *(void *)(a2 - 40);
      *(_OWORD *)uint64_t v10 = v13;
      *(unsigned char *)(a2 - 33) = 0;
      *(unsigned char *)(a2 - 56) = 0;
      sub_21697DE94((int *)(v10 + 24), (int *)(a2 - 32));
      sub_21697DEEC((int *)(v10 + 28), (int *)(a2 - 28));
      *(_OWORD *)(v10 + 32) = *(_OWORD *)(a2 - 24);
      long long v14 = *(void ***)(a2 - 8);
      *(void *)(a2 - 8) = 0;
      sub_2168EBBB8((void ***)(v10 + 48), v14);
      uint64_t v15 = v10 + 56;
      if (*(char *)(a2 - 33) < 0) {
        operator delete(*v11);
      }
      *(_OWORD *)int64_t v11 = *(_OWORD *)__p;
      *(void *)(a2 - 4sub_2168EBBB8(&a9, 0) = v19;
      sub_21697DE94((int *)(a2 - 32), &v20);
      sub_21697DEEC((int *)(a2 - 28), &v21);
      *(_OWORD *)(a2 - 24) = v22;
      uint64_t v16 = v23;
      long long v23 = 0;
      sub_2168EBBB8((void ***)(a2 - 8), v16);
      sub_2169D7194(a1, v15, a3, 0x6DB6DB6DB6DB6DB7 * ((v15 - a1) >> 3));
    }
    sub_2168EBBB8(&v23, 0);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v21);
    sub_21697C414(&v20);
  }
}

void sub_2169D7084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_2169D5474((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2169D7098(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = a3 - 2;
  if (a3 < 2) {
    uint64_t v6 = a3 - 1;
  }
  uint64_t v7 = v6 >> 1;
  do
  {
    uint64_t v8 = a1 + 56 * v5 + 56;
    uint64_t v9 = 2 * v5;
    uint64_t v5 = (2 * v5) | 1;
    uint64_t v10 = v9 + 2;
    if (v9 + 2 < a3
      && pxrInternal__aapl__pxrReserved__::SdfReference::operator<((unsigned __int8 *)v8, (unsigned __int8 *)(v8 + 56)))
    {
      v8 += 56;
      uint64_t v5 = v10;
    }
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    long long v11 = *(_OWORD *)v8;
    *(void *)(a1 + 16) = *(void *)(v8 + 16);
    *(_OWORD *)a1 = v11;
    *(unsigned char *)(v8 + 23) = 0;
    *(unsigned char *)uint64_t v8 = 0;
    sub_21697DE94((int *)(a1 + 24), (int *)(v8 + 24));
    sub_21697DEEC((int *)(a1 + 28), (int *)(v8 + 28));
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(v8 + 32);
    int v12 = *(void ***)(v8 + 48);
    *(void *)(v8 + 48) = 0;
    sub_2168EBBB8((void ***)(a1 + 48), v12);
    a1 = v8;
  }
  while (v5 <= v7);
  return v8;
}

void sub_2169D7194(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    unint64_t v6 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v7 = (long long *)(a1 + 56 * v6);
    uint64_t v8 = (long long *)(a2 - 56);
    if (pxrInternal__aapl__pxrReserved__::SdfReference::operator<((unsigned __int8 *)v7, (unsigned __int8 *)(a2 - 56)))
    {
      *(_OWORD *)std::type_info __p = *v8;
      uint64_t v15 = *((void *)v8 + 2);
      *((void *)v8 + 1) = 0;
      *((void *)v8 + 2) = 0;
      *(void *)uint64_t v8 = 0;
      int v16 = *(_DWORD *)(a2 - 32);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(a2 - 32));
      int v17 = *(_DWORD *)(a2 - 28);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(a2 - 28));
      long long v18 = *(_OWORD *)(a2 - 24);
      uint64_t v9 = *(void ***)(a2 - 8);
      *(void *)(a2 - 8) = 0;
      uint64_t v19 = v9;
      do
      {
        uint64_t v10 = v7;
        if (*((char *)v8 + 23) < 0) {
          operator delete(*(void **)v8);
        }
        long long v11 = *v7;
        *((void *)v8 + 2) = *((void *)v7 + 2);
        *uint64_t v8 = v11;
        *((unsigned char *)v7 + 23) = 0;
        *(unsigned char *)uint64_t v7 = 0;
        sub_21697DE94((int *)v8 + 6, (int *)v7 + 6);
        sub_21697DEEC((int *)v8 + 7, (int *)v7 + 7);
        v8[2] = v7[2];
        int v12 = (void **)*((void *)v7 + 6);
        *((void *)v7 + 6) = 0;
        sub_2168EBBB8((void ***)v8 + 6, v12);
        if (!v6) {
          break;
        }
        unint64_t v6 = (v6 - 1) >> 1;
        uint64_t v7 = (long long *)(a1 + 56 * v6);
        uint64_t v8 = v10;
      }
      while (pxrInternal__aapl__pxrReserved__::SdfReference::operator<((unsigned __int8 *)v7, (unsigned __int8 *)__p));
      if (*((char *)v10 + 23) < 0) {
        operator delete(*(void **)v10);
      }
      long long *v10 = *(_OWORD *)__p;
      *((void *)v10 + 2) = v15;
      HIBYTE(v15) = 0;
      LOBYTE(__p[0]) = 0;
      sub_21697DE94((int *)v10 + 6, &v16);
      sub_21697DEEC((int *)v10 + 7, &v17);
      _OWORD v10[2] = v18;
      long long v13 = v19;
      uint64_t v19 = 0;
      sub_2168EBBB8((void ***)v10 + 6, v13);
      sub_2168EBBB8(&v19, 0);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
      sub_21697C414(&v16);
      if (SHIBYTE(v15) < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

void sub_2169D73A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_2169D5474((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2169D73B4(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  sub_2169D520C((char *)(a1 + 8), *(long long **)(a2 + 8), *(long long **)(a2 + 16), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3));
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4sub_2168EBBB8(&a9, 0) = 0;
  *(void *)(a1 + 48) = 0;
  sub_2169D520C((char *)(a1 + 32), *(long long **)(a2 + 32), *(long long **)(a2 + 40), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3));
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  sub_2169D520C((char *)(a1 + 56), *(long long **)(a2 + 56), *(long long **)(a2 + 64), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3));
  *(void *)(a1 + 8sub_2168EBBB8(&a9, 0) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  sub_2169D520C((char *)(a1 + 80), *(long long **)(a2 + 80), *(long long **)(a2 + 88), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 3));
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 12sub_2168EBBB8(&a9, 0) = 0;
  sub_2169D520C((char *)(a1 + 104), *(long long **)(a2 + 104), *(long long **)(a2 + 112), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 3));
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  sub_2169D520C((char *)(a1 + 128), *(long long **)(a2 + 128), *(long long **)(a2 + 136), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 136) - *(void *)(a2 + 128)) >> 3));
  return a1;
}

void sub_2169D750C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2169CC68C((void ***)va);
  sub_2169CC68C((void ***)va);
  sub_2169CC68C((void ***)va);
  sub_2169CC68C((void ***)va);
  sub_2169CC68C((void ***)va);
  _Unwind_Resume(a1);
}

void sub_2169D7574(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if ((sub_21698E9D8(a1) & 1) == 0) {
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SdfListOp();
  }
  sub_2169D7FB0((uint64_t *)a1);
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::Swap();
}

void sub_2169D7638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t sub_2169D764C(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v5, a1);
  *(void *)(a1 + 8) = &off_26C7569E0;
  sub_2169D7F48((unsigned int **)a1, a2);
  if (v6) {
    (*(void (**)(unsigned char *))(v6 + 32))(v5);
  }
  return a1;
}

void sub_2169D76E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2169D771C(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 152), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *sub_2169D773C(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2169D784C(a1);
}

uint64_t sub_2169D774C()
{
  return 1;
}

unint64_t sub_2169D7754(unsigned __int8 **a1)
{
  return sub_2169D7900(*a1);
}

void sub_2169D775C()
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::operator==();
}

void sub_2169D7768()
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::operator==();
}

uint64_t sub_2169D7774()
{
  return 0;
}

void sub_2169D7780()
{
}

void *sub_2169D7790()
{
  return &unk_26C755170;
}

uint64_t sub_2169D779C()
{
  return 0;
}

uint64_t sub_2169D77A4()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_2169D77B0()
{
  return 0;
}

uint64_t sub_2169D77B8()
{
  return 0;
}

BOOL sub_2169D77C0(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x80000002174750CCLL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2169D77FC(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C755170, a2, a3);
}

void *sub_2169D7820()
{
  return &unk_26C755170;
}

uint64_t sub_2169D782C(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_2169D7834@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  *(void *)(a2 + 8) = &off_26C7569E0;
  return sub_2169D7F48((unsigned int **)a2, v2);
}

uint64_t *sub_2169D784C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 152), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    unint64_t v4 = (void **)(v2 + 128);
    sub_2169CC68C(&v4);
    unint64_t v4 = (void **)(v2 + 104);
    sub_2169CC68C(&v4);
    unint64_t v4 = (void **)(v2 + 80);
    sub_2169CC68C(&v4);
    unint64_t v4 = (void **)(v2 + 56);
    sub_2169CC68C(&v4);
    unint64_t v4 = (void **)(v2 + 32);
    sub_2169CC68C(&v4);
    unint64_t v4 = (void **)(v2 + 8);
    sub_2169CC68C(&v4);
    operator delete((void *)v2);
  }
  return a1;
}

unint64_t sub_2169D7900(unsigned __int8 *a1)
{
  uint64_t v2 = 0;
  char v3 = 0;
  sub_2169D796C((unint64_t)&v2, a1, (uint64_t)(a1 + 8), (uint64_t)(a1 + 32), (uint64_t)(a1 + 56), (uint64_t)(a1 + 80), (uint64_t)(a1 + 104), (uint64_t)(a1 + 128));
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v2));
}

unint64_t sub_2169D796C(unint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  if (*(unsigned char *)(a1 + 8)) {
    v8 += (unint64_t)(*(void *)a1 + v8 + (*(void *)a1 + v8) * (*(void *)a1 + v8)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v8;
  return sub_2169D79B4(a1, a3, a4, a5, a6, a7, a8);
}

unint64_t sub_2169D79B4(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  long long v14 = *(int8x16_t **)a2;
  uint64_t v15 = *(void *)(a2 + 8) - (void)v14;
  if (v15)
  {
    uint64_t v16 = 0x6DB6DB6DB6DB6DB7 * (v15 >> 3);
    do
    {
      --v16;
      int v17 = (int8x16_t *)((char *)v14 + 56);
      sub_2169D7B1C(a1, v14);
      long long v14 = v17;
    }
    while (v16);
  }

  return sub_2169D7A6C(a1, a3, a4, a5, a6, a7);
}

unint64_t sub_2169D7A6C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v12 = *(int8x16_t **)a2;
  uint64_t v13 = *(void *)(a2 + 8) - (void)v12;
  if (v13)
  {
    uint64_t v14 = 0x6DB6DB6DB6DB6DB7 * (v13 >> 3);
    do
    {
      --v14;
      uint64_t v15 = (int8x16_t *)((char *)v12 + 56);
      sub_2169D7B1C(a1, v12);
      int v12 = v15;
    }
    while (v14);
  }

  return sub_2169D7CD8(a1, a3, a4, a5, a6);
}

unint64_t sub_2169D7B1C(uint64_t a1, int8x16_t *a2)
{
  uint64_t v5 = 0;
  char v6 = 0;
  unint64_t result = sub_2169D7BA4((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v5, (pxrInternal__aapl__pxrReserved__ *)a2, &a2[1].u32[2], a2 + 2, a2[3].i64);
  unint64_t v4 = bswap64(0x9E3779B97F4A7C55 * v5);
  if (*(unsigned char *)(a1 + 8)) {
    v4 += (*(void *)a1 + v4 + (*(void *)a1 + v4) * (*(void *)a1 + v4)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v4;
  return result;
}

unint64_t sub_2169D7BA4(pxrInternal__aapl__pxrReserved__::Tf_HashState *a1, pxrInternal__aapl__pxrReserved__ *a2, unsigned int *a3, int8x16_t *a4, uint64_t *a5)
{
  uint64_t v9 = (char *)*((void *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    uint64_t v10 = (char *)*((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = *(pxrInternal__aapl__pxrReserved__ **)a2;
    uint64_t v10 = v9;
  }
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes(a1, a2, v10);
  sub_2169827F8((uint64_t)a1, a3);

  return sub_2169D7C1C((uint64_t)a1, a4, a5);
}

unint64_t sub_2169D7C1C(uint64_t a1, int8x16_t *this, uint64_t *a3)
{
  unint64_t Hash = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::GetHash(this);
  if (*(unsigned char *)(a1 + 8)) {
    Hash += (*(void *)a1 + Hash + (*(void *)a1 + Hash) * (*(void *)a1 + Hash)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = Hash;

  return sub_2169D7C88(a1, a3);
}

unint64_t sub_2169D7C88(uint64_t a1, uint64_t *a2)
{
  unint64_t result = sub_2168EEC90(a2);
  if (*(unsigned char *)(a1 + 8)) {
    result += (*(void *)a1 + result + (*(void *)a1 + result) * (*(void *)a1 + result)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = result;
  return result;
}

unint64_t sub_2169D7CD8(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(int8x16_t **)a2;
  uint64_t v11 = *(void *)(a2 + 8) - (void)v10;
  if (v11)
  {
    uint64_t v12 = 0x6DB6DB6DB6DB6DB7 * (v11 >> 3);
    do
    {
      --v12;
      uint64_t v13 = (int8x16_t *)((char *)v10 + 56);
      sub_2169D7B1C(a1, v10);
      uint64_t v10 = v13;
    }
    while (v12);
  }

  return sub_2169D7D78(a1, a3, a4, a5);
}

unint64_t sub_2169D7D78(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(int8x16_t **)a2;
  uint64_t v9 = *(void *)(a2 + 8) - (void)v8;
  if (v9)
  {
    uint64_t v10 = 0x6DB6DB6DB6DB6DB7 * (v9 >> 3);
    do
    {
      --v10;
      uint64_t v11 = (int8x16_t *)((char *)v8 + 56);
      sub_2169D7B1C(a1, v8);
      uint64_t v8 = v11;
    }
    while (v10);
  }

  return sub_2169D7E10(a1, a3, a4);
}

unint64_t sub_2169D7E10(unint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  char v6 = *(int8x16_t **)a2;
  uint64_t v7 = *(void *)(a2 + 8) - (void)v6;
  if (v7)
  {
    uint64_t v8 = 0x6DB6DB6DB6DB6DB7 * (v7 >> 3);
    do
    {
      --v8;
      uint64_t v9 = (int8x16_t *)((char *)v6 + 56);
      unint64_t result = sub_2169D7B1C(v5, v6);
      char v6 = v9;
    }
    while (v8);
  }
  uint64_t v10 = *(int8x16_t **)a3;
  uint64_t v11 = *(void *)(a3 + 8) - *(void *)a3;
  if (v11)
  {
    uint64_t v12 = 0x6DB6DB6DB6DB6DB7 * (v11 >> 3);
    do
    {
      --v12;
      uint64_t v13 = (int8x16_t *)((char *)v10 + 56);
      unint64_t result = sub_2169D7B1C(v5, v10);
      uint64_t v10 = v13;
    }
    while (v12);
  }
  return result;
}

uint64_t sub_2169D7EBC(uint64_t *a1)
{
  unsigned int v2 = atomic_load((unsigned int *)(*a1 + 152));
  if (v2 != 1)
  {
    char v3 = (unsigned int *)operator new(0xA0uLL);
    sub_2169D73B4((uint64_t)v3, *a1);
    atomic_store(0, v3 + 38);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 38, 1u, memory_order_relaxed);
    uint64_t v5 = *a1;
    *a1 = (uint64_t)v3;
    sub_2169D784C(&v5);
  }
  return *a1;
}

void sub_2169D7F34(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2169D7F48(unsigned int **a1, uint64_t a2)
{
  unint64_t v4 = (unsigned int *)operator new(0xA0uLL);
  uint64_t result = sub_2169D73B4((uint64_t)v4, a2);
  atomic_store(0, v4 + 38);
  *a1 = v4;
  atomic_fetch_add_explicit((atomic_uint *volatile)v4 + 38, 1u, memory_order_relaxed);
  return result;
}

void sub_2169D7F9C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2169D7FB0(uint64_t *a1)
{
  void v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, uint64_t *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_2169D7EBC(a1);
}

void **sub_2169D8044(void **a1)
{
  char v3 = a1 + 16;
  sub_2169CC78C(&v3);
  char v3 = a1 + 13;
  sub_2169CC78C(&v3);
  char v3 = a1 + 10;
  sub_2169CC78C(&v3);
  char v3 = a1 + 7;
  sub_2169CC78C(&v3);
  char v3 = a1 + 4;
  sub_2169CC78C(&v3);
  char v3 = a1 + 1;
  sub_2169CC78C(&v3);
  return a1;
}

void sub_2169D80D0(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X8>)
{
  *((void *)a1 + 1) = 0;
  sub_2169DA280(a1);
}

void sub_2169D8100(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

BOOL sub_2169D8114(uint64_t *a1)
{
  __n128 v9 = 0uLL;
  uint64_t v10 = 0;
  sub_2169D8208(&v9, *a1, a1[1], 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4));
  unint64_t v1 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9.n128_u64[1] - v9.n128_u64[0]) >> 4));
  if (v9.n128_u64[1] == v9.n128_u64[0]) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = v1;
  }
  sub_2169D84D0((unsigned __int8 *)v9.n128_u64[0], (long long *)v9.n128_u64[1], (uint64_t)&v11, v2, 1);
  unint64_t v4 = v9.n128_u64[1];
  char v3 = (unsigned __int8 *)v9.n128_u64[0];
  if (v9.n128_u64[0] == v9.n128_u64[1])
  {
    unint64_t v4 = v9.n128_u64[0];
  }
  else
  {
    while (1)
    {
      uint64_t v5 = v3 + 48;
      if (v3 + 48 == (unsigned __int8 *)v4) {
        break;
      }
      BOOL v6 = pxrInternal__aapl__pxrReserved__::SdfPayload::operator==(v3, v3 + 48);
      char v3 = v5;
      if (v6)
      {
        unint64_t v4 = (unint64_t)(v5 - 48);
        break;
      }
    }
    char v3 = (unsigned __int8 *)v9.n128_u64[1];
  }
  BOOL v7 = v4 != (void)v3;
  uint64_t v12 = &v9;
  sub_2169CC78C((void ***)&v12);
  return v7;
}

void sub_2169D81E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  *(void *)(v10 - 24) = &a10;
  sub_2169CC78C((void ***)(v10 - 24));
  _Unwind_Resume(a1);
}

__n128 *sub_2169D8208(__n128 *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    BOOL v6 = result;
    sub_2169D8290(result, a4);
    uint64_t result = sub_2169D82E4((uint64_t)&v6[1], a2, a3, (__n128 *)v6->n128_u64[1]);
    v6->n128_u64[1] = (unint64_t)result;
  }
  return result;
}

void sub_2169D8270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_2169CC78C(&a9);
  _Unwind_Resume(a1);
}

char *sub_2169D8290(void *a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    sub_21677CB10();
  }
  uint64_t result = (char *)sub_2168073F4((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * v4];
  return result;
}

__n128 *sub_2169D82E4(uint64_t a1, uint64_t a2, uint64_t a3, __n128 *__dst)
{
  uint64_t v4 = __dst;
  char v11 = __dst;
  uint64_t v12 = __dst;
  v9[0] = a1;
  v9[1] = &v11;
  _OWORD v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    int v7 = a1;
    do
    {
      sub_2169D8390(v7, v4, v6);
      v6 += 48;
      uint64_t v4 = v12 + 3;
      v12 += 3;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  sub_2169D83FC((uint64_t)v9);
  return v4;
}

void sub_2169D837C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

__n128 sub_2169D8390(int a1, __n128 *__dst, uint64_t a3)
{
  if (*(char *)(a3 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    __n128 v5 = *(__n128 *)a3;
    __dst[1].n128_u64[0] = *(void *)(a3 + 16);
    *long long __dst = v5;
  }
  sub_216981010(&__dst[1].n128_u32[2], (_DWORD *)(a3 + 24));
  sub_21698105C(&__dst[1].n128_u32[3], (_DWORD *)(a3 + 28));
  __n128 result = *(__n128 *)(a3 + 32);
  __dst[2] = result;
  return result;
}

uint64_t sub_2169D83FC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_2169D8434((uint64_t *)a1);
  }
  return a1;
}

void sub_2169D8434(uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[1];
  unint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 48;
      sub_2169CC824(v5, v3);
    }
    while (v3 != v4);
  }
}

uint64_t sub_2169D8488(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_2169D84D0(unsigned __int8 *a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
void sub_2169D88D4(const void **a1, const void **a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = a1 + 6;
    if (a1 + 6 != a2)
    {
      uint64_t v5 = 0;
      char v6 = a1;
      do
      {
        int v7 = v4;
        if (pxrInternal__aapl__pxrReserved__::SdfPayload::operator<(v4, (unsigned __int8 *)v6))
        {
          *(_OWORD *)std::type_info __p = *(_OWORD *)v7;
          unint64_t v15 = v7[2];
          v7[1] = 0;
          v7[2] = 0;
          *int v7 = 0;
          int v16 = *((_DWORD *)v6 + 18);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=((_DWORD *)v6 + 18);
          int v17 = *((_DWORD *)v6 + 19);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)v6 + 19);
          long long v18 = *((_OWORD *)v6 + 5);
          uint64_t v8 = v5;
          while (1)
          {
            uint64_t v9 = v8;
            uint64_t v10 = (uint64_t)a1 + v8;
            uint64_t v11 = (uint64_t)a1 + v8 + 48;
            if (*((char *)a1 + v8 + 71) < 0) {
              operator delete(*(void **)v11);
            }
            *(_OWORD *)uint64_t v11 = *(_OWORD *)v10;
            *(void *)(v11 + 16) = *(void *)(v10 + 16);
            *(unsigned char *)(v10 + 23) = 0;
            *(unsigned char *)uint64_t v10 = 0;
            sub_21697DE94((int *)(v10 + 72), (int *)(v10 + 24));
            sub_21697DEEC((int *)(v10 + 76), (int *)(v10 + 28));
            *(_OWORD *)(v10 + 8sub_2168EBBB8(&a9, 0) = *(_OWORD *)(v10 + 32);
            if (!v9) {
              break;
            }
            BOOL v12 = pxrInternal__aapl__pxrReserved__::SdfPayload::operator<((const void **)__p, (unsigned __int8 *)a1 + v9 - 48);
            uint64_t v8 = v9 - 48;
            if (!v12)
            {
              uint64_t v13 = (const void **)((char *)a1 + v9);
              goto LABEL_12;
            }
          }
          uint64_t v13 = a1;
LABEL_12:
          if (*((char *)v13 + 23) < 0) {
            operator delete((void *)*v13);
          }
          *(_OWORD *)uint64_t v13 = *(_OWORD *)__p;
          v13[2] = v15;
          HIBYTE(v15) = 0;
          LOBYTE(__p[0]) = 0;
          sub_21697DE94((int *)((char *)a1 + v9 + 24), &v16);
          sub_21697DEEC((int *)((char *)a1 + v9 + 28), &v17);
          *(_OWORD *)((char *)a1 + v9 + 32) = v18;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
          sub_21697C414(&v16);
          if (SHIBYTE(v15) < 0) {
            operator delete(__p[0]);
          }
        }
        uint64_t v4 = v7 + 6;
        v5 += 48;
        char v6 = v7;
      }
      while (v7 + 6 != a2);
    }
  }
}

void sub_2169D8AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2169D8AD4(const void **a1, const void **a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = a1;
    uint64_t v4 = a1 + 6;
    if (a1 + 6 != a2)
    {
      uint64_t v5 = a1 - 6;
      do
      {
        char v6 = v4;
        if (pxrInternal__aapl__pxrReserved__::SdfPayload::operator<(v4, (unsigned __int8 *)v3))
        {
          *(_OWORD *)std::type_info __p = *(_OWORD *)v6;
          BOOL v12 = v6[2];
          v6[1] = 0;
          _OWORD v6[2] = 0;
          *char v6 = 0;
          int v13 = *((_DWORD *)v3 + 18);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=((_DWORD *)v3 + 18);
          int v14 = *((_DWORD *)v3 + 19);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)v3 + 19);
          long long v15 = *((_OWORD *)v3 + 5);
          int v7 = v5;
          do
          {
            uint64_t v8 = (void **)(v7 + 12);
            if (*((char *)v7 + 119) < 0) {
              operator delete(*v8);
            }
            *(_OWORD *)uint64_t v8 = *((_OWORD *)v7 + 3);
            v7[14] = v7[8];
            *((unsigned char *)v7 + 71) = 0;
            *((unsigned char *)v7 + 48) = 0;
            sub_21697DE94((int *)v7 + 30, (int *)v7 + 18);
            sub_21697DEEC((int *)v7 + 31, (int *)v7 + 19);
            *((_OWORD *)v7 + 8) = *((_OWORD *)v7 + 5);
            BOOL v9 = pxrInternal__aapl__pxrReserved__::SdfPayload::operator<((const void **)__p, (unsigned __int8 *)v7);
            v7 -= 6;
          }
          while (v9);
          uint64_t v10 = (void **)(v7 + 12);
          if (*((char *)v7 + 119) < 0) {
            operator delete(*v10);
          }
          *(_OWORD *)uint64_t v10 = *(_OWORD *)__p;
          v7[14] = v12;
          HIBYTE(v12) = 0;
          LOBYTE(__p[0]) = 0;
          sub_21697DE94((int *)v7 + 30, &v13);
          sub_21697DEEC((int *)v7 + 31, &v14);
          *((_OWORD *)v7 + 8) = v15;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
          sub_21697C414(&v13);
          if (SHIBYTE(v12) < 0) {
            operator delete(__p[0]);
          }
        }
        uint64_t v4 = v6 + 6;
        v5 += 6;
        uint64_t v3 = v6;
      }
      while (v6 + 6 != a2);
    }
  }
}

void sub_2169D8CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2169D8CB4(unsigned __int8 *a1, const void **a2, const void **a3)
{
  BOOL v6 = pxrInternal__aapl__pxrReserved__::SdfPayload::operator<(a2, a1);
  uint64_t result = pxrInternal__aapl__pxrReserved__::SdfPayload::operator<(a3, (unsigned __int8 *)a2);
  if (!v6)
  {
    if (!result) {
      return result;
    }
    sub_2169D953C((uint64_t)a2, (long long *)a3);
    if (!pxrInternal__aapl__pxrReserved__::SdfPayload::operator<(a2, a1)) {
      return 1;
    }
    uint64_t v8 = (uint64_t)a1;
    BOOL v9 = (long long *)a2;
    goto LABEL_9;
  }
  if (!result)
  {
    sub_2169D953C((uint64_t)a1, (long long *)a2);
    if (!pxrInternal__aapl__pxrReserved__::SdfPayload::operator<(a3, (unsigned __int8 *)a2)) {
      return 1;
    }
    uint64_t v8 = (uint64_t)a2;
    BOOL v9 = (long long *)a3;
LABEL_9:
    sub_2169D953C(v8, v9);
    return 2;
  }
  sub_2169D953C((uint64_t)a1, (long long *)a3);
  return 1;
}

unsigned __int8 *sub_2169D8D78(uint64_t a1, unsigned __int8 *a2)
{
  *(_OWORD *)std::type_info __p = *(_OWORD *)a1;
  uint64_t v13 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  uint64_t v4 = (int *)(a1 + 24);
  int v14 = *(_DWORD *)(a1 + 24);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(a1 + 24));
  int v15 = *(_DWORD *)(a1 + 28);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(a1 + 28));
  long long v16 = *(_OWORD *)(a1 + 32);
  if (pxrInternal__aapl__pxrReserved__::SdfPayload::operator<((const void **)__p, a2 - 48))
  {
    uint64_t v5 = (unsigned __int8 *)a1;
    do
      v5 += 48;
    while (!pxrInternal__aapl__pxrReserved__::SdfPayload::operator<((const void **)__p, v5));
  }
  else
  {
    BOOL v6 = (unsigned __int8 *)(a1 + 48);
    do
    {
      uint64_t v5 = v6;
      if (v6 >= a2) {
        break;
      }
      BOOL v7 = pxrInternal__aapl__pxrReserved__::SdfPayload::operator<((const void **)__p, v6);
      BOOL v6 = v5 + 48;
    }
    while (!v7);
  }
  if (v5 < a2)
  {
    do
      a2 -= 48;
    while (pxrInternal__aapl__pxrReserved__::SdfPayload::operator<((const void **)__p, a2));
  }
  while (v5 < a2)
  {
    sub_2169D953C((uint64_t)v5, (long long *)a2);
    do
      v5 += 48;
    while (!pxrInternal__aapl__pxrReserved__::SdfPayload::operator<((const void **)__p, v5));
    do
      a2 -= 48;
    while (pxrInternal__aapl__pxrReserved__::SdfPayload::operator<((const void **)__p, a2));
  }
  uint64_t v8 = (void **)(v5 - 48);
  if (v5 - 48 != (unsigned __int8 *)a1)
  {
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    long long v9 = *(_OWORD *)v8;
    *(void *)(a1 + 16) = *((void *)v5 - 4);
    *(_OWORD *)a1 = v9;
    *(v5 - 25) = 0;
    *(v5 - 48) = 0;
    sub_21697DE94(v4, (int *)v5 - 6);
    sub_21697DEEC((int *)(a1 + 28), (int *)v5 - 5);
    *(_OWORD *)(a1 + 32) = *((_OWORD *)v5 - 1);
  }
  if ((char)*(v5 - 25) < 0) {
    operator delete(*v8);
  }
  long long v10 = *(_OWORD *)__p;
  *((void *)v5 - 4) = v13;
  *(_OWORD *)uint64_t v8 = v10;
  HIBYTE(v13) = 0;
  LOBYTE(__p[0]) = 0;
  sub_21697DE94((int *)v5 - 6, &v14);
  sub_21697DEEC((int *)v5 - 5, &v15);
  *((_OWORD *)v5 - 1) = v16;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
  sub_21697C414(&v14);
  if (SHIBYTE(v13) < 0) {
    operator delete(__p[0]);
  }
  return v5;
}

void sub_2169D8F9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

const void **sub_2169D8FCC(uint64_t a1, const void **a2)
{
  *(_OWORD *)std::type_info __p = *(_OWORD *)a1;
  int v15 = *(const void **)(a1 + 16);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  uint64_t v4 = (int *)(a1 + 24);
  int v16 = *(_DWORD *)(a1 + 24);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(a1 + 24));
  int v17 = *(_DWORD *)(a1 + 28);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(a1 + 28));
  uint64_t v5 = 0;
  long long v18 = *(_OWORD *)(a1 + 32);
  do
  {
    BOOL v6 = pxrInternal__aapl__pxrReserved__::SdfPayload::operator<((const void **)(a1 + v5 + 48), (unsigned __int8 *)__p);
    v5 += 48;
  }
  while (v6);
  unint64_t v7 = a1 + v5;
  if (v5 == 48)
  {
    do
    {
      if (v7 >= (unint64_t)a2) {
        break;
      }
      a2 -= 6;
    }
    while (!pxrInternal__aapl__pxrReserved__::SdfPayload::operator<(a2, (unsigned __int8 *)__p));
  }
  else
  {
    do
      a2 -= 6;
    while (!pxrInternal__aapl__pxrReserved__::SdfPayload::operator<(a2, (unsigned __int8 *)__p));
  }
  uint64_t v8 = (const void **)(a1 + v5);
  if (v7 < (unint64_t)a2)
  {
    long long v9 = (long long *)a2;
    do
    {
      sub_2169D953C((uint64_t)v8, v9);
      do
        v8 += 6;
      while (pxrInternal__aapl__pxrReserved__::SdfPayload::operator<(v8, (unsigned __int8 *)__p));
      do
        v9 -= 3;
      while (!pxrInternal__aapl__pxrReserved__::SdfPayload::operator<((const void **)v9, (unsigned __int8 *)__p));
    }
    while (v8 < (const void **)v9);
  }
  long long v10 = (void **)(v8 - 6);
  if (v8 - 6 != (const void **)a1)
  {
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    long long v11 = *(_OWORD *)v10;
    *(void *)(a1 + 16) = *(v8 - 4);
    *(_OWORD *)a1 = v11;
    *((unsigned char *)v8 - 25) = 0;
    *((unsigned char *)v8 - 48) = 0;
    sub_21697DE94(v4, (int *)v8 - 6);
    sub_21697DEEC((int *)(a1 + 28), (int *)v8 - 5);
    *(_OWORD *)(a1 + 32) = *((_OWORD *)v8 - 1);
  }
  if (*((char *)v8 - 25) < 0) {
    operator delete(*v10);
  }
  long long v12 = *(_OWORD *)__p;
  *(v8 - 4) = v15;
  *(_OWORD *)long long v10 = v12;
  HIBYTE(v15) = 0;
  LOBYTE(__p[0]) = 0;
  sub_21697DE94((int *)v8 - 6, &v16);
  sub_21697DEEC((int *)v8 - 5, &v17);
  *((_OWORD *)v8 - 1) = v18;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
  sub_21697C414(&v16);
  if (SHIBYTE(v15) < 0) {
    operator delete(__p[0]);
  }
  return v8 - 6;
}

void sub_2169D9204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_2169D8488((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_2169D9228(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      BOOL v6 = (long long *)(a2 - 48);
      if (pxrInternal__aapl__pxrReserved__::SdfPayload::operator<((const void **)(a2 - 48), (unsigned __int8 *)a1)) {
        sub_2169D953C(a1, v6);
      }
      return 1;
    case 3uLL:
      sub_2169D8CB4((unsigned __int8 *)a1, (const void **)(a1 + 48), (const void **)(a2 - 48));
      return 1;
    case 4uLL:
      sub_2169D96B0((unsigned __int8 *)a1, (const void **)(a1 + 48), (const void **)(a1 + 96), (long long *)(a2 - 48));
      return 1;
    case 5uLL:
      sub_2169D975C((unsigned __int8 *)a1, (const void **)(a1 + 48), (const void **)(a1 + 96), (long long *)(a1 + 144), (long long *)(a2 - 48));
      return 1;
    default:
      unint64_t v7 = (unsigned __int8 *)(a1 + 96);
      sub_2169D8CB4((unsigned __int8 *)a1, (const void **)(a1 + 48), (const void **)(a1 + 96));
      uint64_t v8 = a1 + 144;
      if (a1 + 144 == a2) {
        return 1;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      break;
  }
  while (1)
  {
    if (pxrInternal__aapl__pxrReserved__::SdfPayload::operator<((const void **)v8, v7))
    {
      *(_OWORD *)std::type_info __p = *(_OWORD *)v8;
      uint64_t v18 = *(void *)(v8 + 16);
      *(void *)(v8 + 8) = 0;
      *(void *)(v8 + 16) = 0;
      *(void *)uint64_t v8 = 0;
      int v19 = *(_DWORD *)(v8 + 24);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(v8 + 24));
      int v20 = *(_DWORD *)(v8 + 28);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(v8 + 28));
      long long v21 = *(_OWORD *)(v8 + 32);
      uint64_t v11 = v9;
      while (1)
      {
        uint64_t v12 = v11;
        uint64_t v13 = a1 + v11;
        uint64_t v14 = a1 + v11 + 144;
        if (*(char *)(a1 + v11 + 167) < 0) {
          operator delete(*(void **)v14);
        }
        *(_OWORD *)uint64_t v14 = *(_OWORD *)(v13 + 96);
        *(void *)(v14 + 16) = *(void *)(v13 + 112);
        *(unsigned char *)(v13 + 119) = 0;
        *(unsigned char *)(v13 + 96) = 0;
        sub_21697DE94((int *)(v13 + 168), (int *)(v13 + 120));
        sub_21697DEEC((int *)(v13 + 172), (int *)(v13 + 124));
        *(_OWORD *)(v13 + 176) = *(_OWORD *)(v13 + 128);
        if (v12 == -96) {
          break;
        }
        BOOL v15 = pxrInternal__aapl__pxrReserved__::SdfPayload::operator<((const void **)__p, (unsigned __int8 *)(a1 + v12 + 48));
        uint64_t v11 = v12 - 48;
        if (!v15)
        {
          uint64_t v16 = a1 + v11 + 144;
          goto LABEL_14;
        }
      }
      uint64_t v16 = a1;
LABEL_14:
      if (*(char *)(v16 + 23) < 0) {
        operator delete(*(void **)v16);
      }
      *(_OWORD *)uint64_t v16 = *(_OWORD *)__p;
      *(void *)(v16 + 16) = v18;
      HIBYTE(v18) = 0;
      LOBYTE(__p[0]) = 0;
      sub_21697DE94((int *)(a1 + v12 + 120), &v19);
      sub_21697DEEC((int *)(a1 + v12 + 124), &v20);
      *(_OWORD *)(a1 + v12 + 128) = v21;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
      sub_21697C414(&v19);
      if (SHIBYTE(v18) < 0) {
        operator delete(__p[0]);
      }
      if (++v10 == 8) {
        return v8 + 48 == a2;
      }
    }
    unint64_t v7 = (unsigned __int8 *)v8;
    v9 += 48;
    v8 += 48;
    if (v8 == a2) {
      return 1;
    }
  }
}

void sub_2169D9510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_2169D8488((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2169D953C(uint64_t a1, long long *a2)
{
  *(_OWORD *)std::type_info __p = *(_OWORD *)a1;
  uint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  uint64_t v4 = (int *)(a1 + 24);
  int v8 = *(_DWORD *)(a1 + 24);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(a1 + 24));
  int v9 = *(_DWORD *)(a1 + 28);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(a1 + 28));
  long long v10 = *(_OWORD *)(a1 + 32);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  long long v5 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v5;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  sub_21697DE94(v4, (int *)a2 + 6);
  sub_21697DEEC((int *)(a1 + 28), (int *)a2 + 7);
  *(_OWORD *)(a1 + 32) = a2[2];
  if (*((char *)a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  *a2 = *(_OWORD *)__p;
  *((void *)a2 + 2) = v7;
  sub_21697DE94((int *)a2 + 6, &v8);
  sub_21697DEEC((int *)a2 + 7, &v9);
  a2[2] = v10;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  sub_21697C414(&v8);
}

void sub_2169D96B0(unsigned __int8 *a1, const void **a2, const void **a3, long long *a4)
{
  sub_2169D8CB4(a1, a2, a3);
  if (pxrInternal__aapl__pxrReserved__::SdfPayload::operator<((const void **)a4, (unsigned __int8 *)a3))
  {
    sub_2169D953C((uint64_t)a3, a4);
    if (pxrInternal__aapl__pxrReserved__::SdfPayload::operator<(a3, (unsigned __int8 *)a2))
    {
      sub_2169D953C((uint64_t)a2, (long long *)a3);
      if (pxrInternal__aapl__pxrReserved__::SdfPayload::operator<(a2, a1))
      {
        sub_2169D953C((uint64_t)a1, (long long *)a2);
      }
    }
  }
}

void sub_2169D975C(unsigned __int8 *a1, const void **a2, const void **a3, long long *a4, long long *a5)
{
  sub_2169D96B0(a1, a2, a3, a4);
  if (pxrInternal__aapl__pxrReserved__::SdfPayload::operator<((const void **)a5, (unsigned __int8 *)a4))
  {
    sub_2169D953C((uint64_t)a4, a5);
    if (pxrInternal__aapl__pxrReserved__::SdfPayload::operator<((const void **)a4, (unsigned __int8 *)a3))
    {
      sub_2169D953C((uint64_t)a3, a4);
      if (pxrInternal__aapl__pxrReserved__::SdfPayload::operator<(a3, (unsigned __int8 *)a2))
      {
        sub_2169D953C((uint64_t)a2, (long long *)a3);
        if (pxrInternal__aapl__pxrReserved__::SdfPayload::operator<(a2, a1))
        {
          sub_2169D953C((uint64_t)a1, (long long *)a2);
        }
      }
    }
  }
}

const void **sub_2169D9834(long long *a1, long long *a2, const void **a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v6 = (uint64_t)a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) / 48;
    if ((char *)a2 - (char *)a1 >= 49)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = &a1[3 * v10];
      do
      {
        sub_2169D9970((uint64_t)a1, a4, v9, v12);
        v12 -= 3;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = v6;
    if ((const void **)v6 != a3)
    {
      uint64_t v14 = (const void **)v6;
      do
      {
        if (pxrInternal__aapl__pxrReserved__::SdfPayload::operator<(v14, (unsigned __int8 *)a1))
        {
          sub_2169D953C((uint64_t)v14, a1);
          sub_2169D9970((uint64_t)a1, a4, v9, a1);
        }
        v14 += 6;
      }
      while (v14 != a3);
      uint64_t v13 = (uint64_t)a3;
    }
    if (v8 >= 49)
    {
      unint64_t v15 = v8 / 0x30uLL;
      do
      {
        sub_2169D9BE4((uint64_t)a1, v6, a4, v15);
        v6 -= 48;
      }
      while (v15-- > 2);
    }
    return (const void **)v13;
  }
  return a3;
}

void sub_2169D9970(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    long long v5 = a4;
    uint64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 4)))
    {
      uint64_t v9 = (0x5555555555555556 * (((uint64_t)a4 - a1) >> 4)) | 1;
      unint64_t v10 = (long long *)(a1 + 48 * v9);
      uint64_t v11 = 0x5555555555555556 * (((uint64_t)a4 - a1) >> 4) + 2;
      if (v11 < a3
        && pxrInternal__aapl__pxrReserved__::SdfPayload::operator<((const void **)(a1 + 48 * v9), (unsigned __int8 *)v10 + 48))
      {
        v10 += 3;
        uint64_t v9 = v11;
      }
      if (!pxrInternal__aapl__pxrReserved__::SdfPayload::operator<((const void **)v10, (unsigned __int8 *)v5))
      {
        *(_OWORD *)std::type_info __p = *v5;
        uint64_t v17 = *((void *)v5 + 2);
        *((void *)v5 + 1) = 0;
        *((void *)v5 + 2) = 0;
        *(void *)long long v5 = 0;
        int v18 = *((_DWORD *)v5 + 6);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=((_DWORD *)v5 + 6);
        int v19 = *((_DWORD *)v5 + 7);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)v5 + 7);
        long long v20 = v5[2];
        do
        {
          uint64_t v12 = v10;
          if (*((char *)v5 + 23) < 0) {
            operator delete(*(void **)v5);
          }
          long long v13 = *v10;
          *((void *)v5 + 2) = *((void *)v10 + 2);
          *long long v5 = v13;
          *((unsigned char *)v10 + 23) = 0;
          *(unsigned char *)unint64_t v10 = 0;
          sub_21697DE94((int *)v5 + 6, (int *)v10 + 6);
          sub_21697DEEC((int *)v5 + 7, (int *)v10 + 7);
          _OWORD v5[2] = v10[2];
          if (v7 < v9) {
            break;
          }
          uint64_t v14 = (2 * v9) | 1;
          unint64_t v10 = (long long *)(a1 + 48 * v14);
          uint64_t v9 = 2 * v9 + 2;
          if (v9 >= a3)
          {
            uint64_t v9 = v14;
          }
          else if (pxrInternal__aapl__pxrReserved__::SdfPayload::operator<((const void **)(a1 + 48 * v14), (unsigned __int8 *)v10 + 48))
          {
            v10 += 3;
          }
          else
          {
            uint64_t v9 = v14;
          }
          long long v5 = v12;
        }
        while (!pxrInternal__aapl__pxrReserved__::SdfPayload::operator<((const void **)v10, (unsigned __int8 *)__p));
        if (*((char *)v12 + 23) < 0) {
          operator delete(*(void **)v12);
        }
        long long v15 = *(_OWORD *)__p;
        *((void *)v12 + 2) = v17;
        long long *v12 = v15;
        HIBYTE(v17) = 0;
        LOBYTE(__p[0]) = 0;
        sub_21697DE94((int *)v12 + 6, &v18);
        sub_21697DEEC((int *)v12 + 7, &v19);
        void v12[2] = v20;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
        sub_21697C414(&v18);
        if (SHIBYTE(v17) < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
}

void sub_2169D9BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_2169D8488((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2169D9BE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    *(_OWORD *)std::type_info __p = *(_OWORD *)a1;
    uint64_t v15 = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    int v16 = *(_DWORD *)(a1 + 24);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(a1 + 24));
    int v17 = *(_DWORD *)(a1 + 28);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(a1 + 28));
    long long v18 = *(_OWORD *)(a1 + 32);
    uint64_t v8 = sub_2169D9E0C(a1, a3, a4);
    uint64_t v9 = v8;
    unint64_t v10 = (void **)(a2 - 48);
    int v11 = *(char *)(v8 + 23);
    if (v8 == a2 - 48)
    {
      if (v11 < 0) {
        operator delete(*(void **)v8);
      }
      *(void *)(v9 + 16) = v15;
      *(_OWORD *)uint64_t v9 = *(_OWORD *)__p;
      sub_21697DE94((int *)(v9 + 24), &v16);
      sub_21697DEEC((int *)(v9 + 28), &v17);
      *(_OWORD *)(v9 + 32) = v18;
    }
    else
    {
      if (v11 < 0) {
        operator delete(*(void **)v8);
      }
      long long v12 = *(_OWORD *)v10;
      *(void *)(v9 + 16) = *(void *)(a2 - 32);
      *(_OWORD *)uint64_t v9 = v12;
      *(unsigned char *)(a2 - 25) = 0;
      *(unsigned char *)(a2 - 48) = 0;
      sub_21697DE94((int *)(v9 + 24), (int *)(a2 - 24));
      sub_21697DEEC((int *)(v9 + 28), (int *)(a2 - 20));
      *(_OWORD *)(v9 + 32) = *(_OWORD *)(a2 - 16);
      uint64_t v13 = v9 + 48;
      if (*(char *)(a2 - 25) < 0) {
        operator delete(*v10);
      }
      *(_OWORD *)unint64_t v10 = *(_OWORD *)__p;
      *(void *)(a2 - 32) = v15;
      sub_21697DE94((int *)(a2 - 24), &v16);
      sub_21697DEEC((int *)(a2 - 20), &v17);
      *(_OWORD *)(a2 - 16) = v18;
      sub_2169D9EF8(a1, v13, a3, 0xAAAAAAAAAAAAAAABLL * ((v13 - a1) >> 4));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
    sub_21697C414(&v16);
  }
}

void sub_2169D9DF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_2169D8488((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2169D9E0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = a3 - 2;
  if (a3 < 2) {
    uint64_t v6 = a3 - 1;
  }
  uint64_t v7 = v6 >> 1;
  do
  {
    uint64_t v8 = a1 + 48 * v5 + 48;
    uint64_t v9 = 2 * v5;
    uint64_t v5 = (2 * v5) | 1;
    uint64_t v10 = v9 + 2;
    if (v9 + 2 < a3
      && pxrInternal__aapl__pxrReserved__::SdfPayload::operator<((const void **)v8, (unsigned __int8 *)(v8 + 48)))
    {
      v8 += 48;
      uint64_t v5 = v10;
    }
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    long long v11 = *(_OWORD *)v8;
    *(void *)(a1 + 16) = *(void *)(v8 + 16);
    *(_OWORD *)a1 = v11;
    *(unsigned char *)(v8 + 23) = 0;
    *(unsigned char *)uint64_t v8 = 0;
    sub_21697DE94((int *)(a1 + 24), (int *)(v8 + 24));
    sub_21697DEEC((int *)(a1 + 28), (int *)(v8 + 28));
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(v8 + 32);
    a1 = v8;
  }
  while (v5 <= v7);
  return v8;
}

void sub_2169D9EF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    unint64_t v6 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v7 = (long long *)(a1 + 48 * v6);
    uint64_t v8 = (long long *)(a2 - 48);
    if (pxrInternal__aapl__pxrReserved__::SdfPayload::operator<((const void **)v7, (unsigned __int8 *)(a2 - 48)))
    {
      *(_OWORD *)std::type_info __p = *v8;
      uint64_t v12 = *((void *)v8 + 2);
      *((void *)v8 + 1) = 0;
      *((void *)v8 + 2) = 0;
      *(void *)uint64_t v8 = 0;
      int v13 = *(_DWORD *)(a2 - 24);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(a2 - 24));
      int v14 = *(_DWORD *)(a2 - 20);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)(a2 - 20));
      long long v15 = *(_OWORD *)(a2 - 16);
      do
      {
        uint64_t v9 = v7;
        if (*((char *)v8 + 23) < 0) {
          operator delete(*(void **)v8);
        }
        long long v10 = *v7;
        *((void *)v8 + 2) = *((void *)v7 + 2);
        *uint64_t v8 = v10;
        *((unsigned char *)v7 + 23) = 0;
        *(unsigned char *)uint64_t v7 = 0;
        sub_21697DE94((int *)v8 + 6, (int *)v7 + 6);
        sub_21697DEEC((int *)v8 + 7, (int *)v7 + 7);
        v8[2] = v7[2];
        if (!v6) {
          break;
        }
        unint64_t v6 = (v6 - 1) >> 1;
        uint64_t v7 = (long long *)(a1 + 48 * v6);
        uint64_t v8 = v9;
      }
      while (pxrInternal__aapl__pxrReserved__::SdfPayload::operator<((const void **)v7, (unsigned __int8 *)__p));
      if (*((char *)v9 + 23) < 0) {
        operator delete(*(void **)v9);
      }
      long long *v9 = *(_OWORD *)__p;
      *((void *)v9 + 2) = v12;
      HIBYTE(v12) = 0;
      LOBYTE(__p[0]) = 0;
      sub_21697DE94((int *)v9 + 6, &v13);
      sub_21697DEEC((int *)v9 + 7, &v14);
      _OWORD v9[2] = v15;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
      sub_21697C414(&v13);
      if (SHIBYTE(v12) < 0) {
        operator delete(__p[0]);
      }
    }
  }
}

void sub_2169DA0C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_2169D8488((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2169DA0D8(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  sub_2169D8208((__n128 *)(a1 + 8), *(void *)(a2 + 8), *(void *)(a2 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 4));
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4sub_2168EBBB8(&a9, 0) = 0;
  *(void *)(a1 + 48) = 0;
  sub_2169D8208((__n128 *)(a1 + 32), *(void *)(a2 + 32), *(void *)(a2 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 4));
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  sub_2169D8208((__n128 *)(a1 + 56), *(void *)(a2 + 56), *(void *)(a2 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 4));
  *(void *)(a1 + 8sub_2168EBBB8(&a9, 0) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  sub_2169D8208((__n128 *)(a1 + 80), *(void *)(a2 + 80), *(void *)(a2 + 88), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 4));
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 12sub_2168EBBB8(&a9, 0) = 0;
  sub_2169D8208((__n128 *)(a1 + 104), *(void *)(a2 + 104), *(void *)(a2 + 112), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 4));
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  sub_2169D8208((__n128 *)(a1 + 128), *(void *)(a2 + 128), *(void *)(a2 + 136), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 136) - *(void *)(a2 + 128)) >> 4));
  return a1;
}

void sub_2169DA218(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2169CC78C((void ***)va);
  sub_2169CC78C((void ***)va);
  sub_2169CC78C((void ***)va);
  sub_2169CC78C((void ***)va);
  sub_2169CC78C((void ***)va);
  _Unwind_Resume(a1);
}

void sub_2169DA280(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if ((sub_21698E94C(a1) & 1) == 0) {
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SdfListOp();
  }
  sub_2169DAC14((uint64_t *)a1);
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::Swap();
}

void sub_2169DA344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t sub_2169DA358(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v5, a1);
  *(void *)(a1 + 8) = &off_26C756A98;
  sub_2169DABAC((unsigned int **)a1, a2);
  if (v6) {
    (*(void (**)(unsigned char *))(v6 + 32))(v5);
  }
  return a1;
}

void sub_2169DA3EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2169DA428(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 152), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *sub_2169DA448(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2169DA558(a1);
}

uint64_t sub_2169DA458()
{
  return 1;
}

unint64_t sub_2169DA460(unsigned __int8 **a1)
{
  return sub_2169DA60C(*a1);
}

void sub_2169DA468()
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::operator==();
}

void sub_2169DA474()
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::operator==();
}

uint64_t sub_2169DA480()
{
  return 0;
}

void sub_2169DA48C()
{
}

void *sub_2169DA49C()
{
  return &unk_26C755160;
}

uint64_t sub_2169DA4A8()
{
  return 0;
}

uint64_t sub_2169DA4B0()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_2169DA4BC()
{
  return 0;
}

uint64_t sub_2169DA4C4()
{
  return 0;
}

BOOL sub_2169DA4CC(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x8000000217469498 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2169DA508(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C755160, a2, a3);
}

void *sub_2169DA52C()
{
  return &unk_26C755160;
}

uint64_t sub_2169DA538(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_2169DA540@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  *(void *)(a2 + 8) = &off_26C756A98;
  return sub_2169DABAC((unsigned int **)a2, v2);
}

uint64_t *sub_2169DA558(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 152), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    unint64_t v4 = (void **)(v2 + 128);
    sub_2169CC78C(&v4);
    unint64_t v4 = (void **)(v2 + 104);
    sub_2169CC78C(&v4);
    unint64_t v4 = (void **)(v2 + 80);
    sub_2169CC78C(&v4);
    unint64_t v4 = (void **)(v2 + 56);
    sub_2169CC78C(&v4);
    unint64_t v4 = (void **)(v2 + 32);
    sub_2169CC78C(&v4);
    unint64_t v4 = (void **)(v2 + 8);
    sub_2169CC78C(&v4);
    operator delete((void *)v2);
  }
  return a1;
}

unint64_t sub_2169DA60C(unsigned __int8 *a1)
{
  uint64_t v2 = 0;
  char v3 = 0;
  sub_2169DA678((unint64_t)&v2, a1, (uint64_t)(a1 + 8), (uint64_t)(a1 + 32), (uint64_t)(a1 + 56), (uint64_t)(a1 + 80), (uint64_t)(a1 + 104), (uint64_t)(a1 + 128));
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v2));
}

unint64_t sub_2169DA678(unint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  if (*(unsigned char *)(a1 + 8)) {
    v8 += (unint64_t)(*(void *)a1 + v8 + (*(void *)a1 + v8) * (*(void *)a1 + v8)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v8;
  return sub_2169DA6C0(a1, a3, a4, a5, a6, a7, a8);
}

unint64_t sub_2169DA6C0(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v14 = *(int8x16_t **)a2;
  uint64_t v15 = *(void *)(a2 + 8) - (void)v14;
  if (v15)
  {
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (v15 >> 4);
    do
    {
      --v16;
      int v17 = v14 + 3;
      sub_2169DA818(a1, v14);
      int v14 = v17;
    }
    while (v16);
  }

  return sub_2169DA770(a1, a3, a4, a5, a6, a7);
}

unint64_t sub_2169DA770(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = *(int8x16_t **)a2;
  uint64_t v13 = *(void *)(a2 + 8) - (void)v12;
  if (v13)
  {
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (v13 >> 4);
    do
    {
      --v14;
      uint64_t v15 = v12 + 3;
      sub_2169DA818(a1, v12);
      uint64_t v12 = v15;
    }
    while (v14);
  }

  return sub_2169DA95C(a1, a3, a4, a5, a6);
}

unint64_t sub_2169DA818(uint64_t a1, int8x16_t *a2)
{
  uint64_t v5 = 0;
  char v6 = 0;
  unint64_t result = sub_2169DA89C((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v5, (pxrInternal__aapl__pxrReserved__ *)a2, &a2[1].u32[2], a2 + 2);
  unint64_t v4 = bswap64(0x9E3779B97F4A7C55 * v5);
  if (*(unsigned char *)(a1 + 8)) {
    v4 += (*(void *)a1 + v4 + (*(void *)a1 + v4) * (*(void *)a1 + v4)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v4;
  return result;
}

unint64_t sub_2169DA89C(pxrInternal__aapl__pxrReserved__::Tf_HashState *a1, pxrInternal__aapl__pxrReserved__ *a2, unsigned int *a3, int8x16_t *a4)
{
  uint64_t v7 = (char *)*((void *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    uint64_t v8 = (char *)*((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = *(pxrInternal__aapl__pxrReserved__ **)a2;
    uint64_t v8 = v7;
  }
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes(a1, a2, v8);
  sub_2169827F8((uint64_t)a1, a3);

  return sub_2169DA90C((uint64_t)a1, a4);
}

unint64_t sub_2169DA90C(uint64_t a1, int8x16_t *this)
{
  unint64_t result = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::GetHash(this);
  if (*(unsigned char *)(a1 + 8)) {
    result += (*(void *)a1 + result + (*(void *)a1 + result) * (*(void *)a1 + result)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = result;
  return result;
}

unint64_t sub_2169DA95C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  long long v10 = *(int8x16_t **)a2;
  uint64_t v11 = *(void *)(a2 + 8) - (void)v10;
  if (v11)
  {
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (v11 >> 4);
    do
    {
      --v12;
      uint64_t v13 = v10 + 3;
      sub_2169DA818(a1, v10);
      long long v10 = v13;
    }
    while (v12);
  }

  return sub_2169DA9F4(a1, a3, a4, a5);
}

unint64_t sub_2169DA9F4(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(int8x16_t **)a2;
  uint64_t v9 = *(void *)(a2 + 8) - (void)v8;
  if (v9)
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v9 >> 4);
    do
    {
      --v10;
      uint64_t v11 = v8 + 3;
      sub_2169DA818(a1, v8);
      uint64_t v8 = v11;
    }
    while (v10);
  }

  return sub_2169DAA84(a1, a3, a4);
}

unint64_t sub_2169DAA84(unint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  char v6 = *(int8x16_t **)a2;
  uint64_t v7 = *(void *)(a2 + 8) - (void)v6;
  if (v7)
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (v7 >> 4);
    do
    {
      --v8;
      uint64_t v9 = v6 + 3;
      unint64_t result = sub_2169DA818(v5, v6);
      char v6 = v9;
    }
    while (v8);
  }
  unint64_t v10 = *(int8x16_t **)a3;
  uint64_t v11 = *(void *)(a3 + 8) - *(void *)a3;
  if (v11)
  {
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (v11 >> 4);
    do
    {
      --v12;
      uint64_t v13 = v10 + 3;
      unint64_t result = sub_2169DA818(v5, v10);
      unint64_t v10 = v13;
    }
    while (v12);
  }
  return result;
}

uint64_t sub_2169DAB20(uint64_t *a1)
{
  unsigned int v2 = atomic_load((unsigned int *)(*a1 + 152));
  if (v2 != 1)
  {
    char v3 = (unsigned int *)operator new(0xA0uLL);
    sub_2169DA0D8((uint64_t)v3, *a1);
    atomic_store(0, v3 + 38);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 38, 1u, memory_order_relaxed);
    uint64_t v5 = *a1;
    *a1 = (uint64_t)v3;
    sub_2169DA558(&v5);
  }
  return *a1;
}

void sub_2169DAB98(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2169DABAC(unsigned int **a1, uint64_t a2)
{
  unint64_t v4 = (unsigned int *)operator new(0xA0uLL);
  uint64_t result = sub_2169DA0D8((uint64_t)v4, a2);
  atomic_store(0, v4 + 38);
  *a1 = v4;
  atomic_fetch_add_explicit((atomic_uint *volatile)v4 + 38, 1u, memory_order_relaxed);
  return result;
}

void sub_2169DAC00(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2169DAC14(uint64_t *a1)
{
  void v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, uint64_t *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_2169DAB20(a1);
}

void sub_2169DACA8(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X8>)
{
  *((void *)a1 + 1) = 0;
  sub_2169DB034(a1);
}

void sub_2169DACD8(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

BOOL sub_2169DACEC(long long **a1)
{
  uint64_t v9 = 0;
  unint64_t v10 = 0;
  uint64_t v11 = 0;
  sub_216812BD8((char *)&v9, *a1, a1[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 3));
  unint64_t v1 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v10 - (char *)v9) >> 3));
  if (v10 == v9) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = v1;
  }
  sub_216878D58((uint64_t)v9, v10, (uint64_t)&v12, v2, 1);
  char v3 = v9;
  unint64_t v4 = v10;
  if (v9 == v10)
  {
    unint64_t v4 = v9;
  }
  else
  {
    while (1)
    {
      uint64_t v5 = (long long *)((char *)v3 + 24);
      if ((long long *)((char *)v3 + 24) == v4) {
        break;
      }
      int v6 = sub_2168513F8((uint64_t)&v13, (unsigned __int8 *)v3, (unsigned __int8 *)v3 + 24);
      char v3 = v5;
      if (v6)
      {
        unint64_t v4 = (long long *)((char *)v5 - 24);
        break;
      }
    }
    char v3 = v10;
  }
  BOOL v7 = v4 != v3;
  uint64_t v13 = &v9;
  sub_216782F20((void ***)&v13);
  return v7;
}

void sub_2169DADC4(_Unwind_Exception *a1)
{
  *(void *)(v2 - 24) = v1;
  sub_216782F20((void ***)(v2 - 24));
  _Unwind_Resume(a1);
}

uint64_t sub_2169DADDC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  if (a1 != a2)
  {
    uint64_t v2 = a1 - 24;
    while (1)
    {
      unint64_t v4 = (const void *)(v2 + 48);
      if (v2 + 48 == a2) {
        break;
      }
      uint64_t v5 = (const void *)(v2 + 24);
      BOOL v7 = *(const void **)(v2 + 24);
      v2 += 24;
      int v6 = v7;
      int v8 = *(char *)(v2 + 47);
      int v9 = *(char *)(v2 + 23);
      if (v9 >= 0) {
        size_t v10 = *(unsigned __int8 *)(v2 + 23);
      }
      else {
        size_t v10 = *(void *)(v2 + 8);
      }
      if (v9 >= 0) {
        uint64_t v11 = v5;
      }
      else {
        uint64_t v11 = v6;
      }
      if (v8 >= 0) {
        size_t v12 = *(unsigned __int8 *)(v2 + 47);
      }
      else {
        size_t v12 = *(void *)(v2 + 32);
      }
      if (v8 >= 0) {
        uint64_t v13 = v4;
      }
      else {
        uint64_t v13 = *(const void **)(v2 + 24);
      }
      if (v12 >= v10) {
        size_t v14 = v10;
      }
      else {
        size_t v14 = v12;
      }
      int v15 = memcmp(v11, v13, v14);
      BOOL v16 = v10 >= v12;
      if (v15) {
        BOOL v16 = v15 >= 0;
      }
      if (v16) {
        return v2;
      }
    }
    return a2;
  }
  return v2;
}

uint64_t sub_2169DAE8C(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  sub_216812BD8((char *)(a1 + 8), *(long long **)(a2 + 8), *(long long **)(a2 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3));
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4sub_2168EBBB8(&a9, 0) = 0;
  *(void *)(a1 + 48) = 0;
  sub_216812BD8((char *)(a1 + 32), *(long long **)(a2 + 32), *(long long **)(a2 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3));
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  sub_216812BD8((char *)(a1 + 56), *(long long **)(a2 + 56), *(long long **)(a2 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3));
  *(void *)(a1 + 8sub_2168EBBB8(&a9, 0) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  sub_216812BD8((char *)(a1 + 80), *(long long **)(a2 + 80), *(long long **)(a2 + 88), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 3));
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 12sub_2168EBBB8(&a9, 0) = 0;
  sub_216812BD8((char *)(a1 + 104), *(long long **)(a2 + 104), *(long long **)(a2 + 112), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 3));
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  sub_216812BD8((char *)(a1 + 128), *(long long **)(a2 + 128), *(long long **)(a2 + 136), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 136) - *(void *)(a2 + 128)) >> 3));
  return a1;
}

void sub_2169DAFCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216782F20((void ***)va);
  sub_216782F20((void ***)va);
  sub_216782F20((void ***)va);
  sub_216782F20((void ***)va);
  sub_216782F20((void ***)va);
  _Unwind_Resume(a1);
}

void sub_2169DB034(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if ((sub_21698F724(a1) & 1) == 0) {
    pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SdfListOp();
  }
  sub_2169DB710((uint64_t *)a1);
  pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::Swap();
}

void sub_2169DB0F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t sub_2169DB10C(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v5, a1);
  *(void *)(a1 + 8) = &off_26C756B50;
  sub_2169DB6A8((unsigned int **)a1, a2);
  if (v6) {
    (*(void (**)(unsigned char *))(v6 + 32))(v5);
  }
  return a1;
}

void sub_2169DB1A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2169DB1DC(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 152), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *sub_2169DB1FC(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2169DB30C(a1);
}

uint64_t sub_2169DB20C()
{
  return 1;
}

unint64_t sub_2169DB214(unsigned __int8 **a1)
{
  return sub_2169DB3C0(*a1);
}

void sub_2169DB21C()
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::operator==();
}

void sub_2169DB228()
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::operator==();
}

uint64_t sub_2169DB234()
{
  return 0;
}

void sub_2169DB240()
{
}

void *sub_2169DB250()
{
  return &unk_26C7551C0;
}

uint64_t sub_2169DB25C()
{
  return 0;
}

uint64_t sub_2169DB264()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_2169DB270()
{
  return 0;
}

uint64_t sub_2169DB278()
{
  return 0;
}

BOOL sub_2169DB280(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x8000000217474036 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2169DB2BC(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C7551C0, a2, a3);
}

void *sub_2169DB2E0()
{
  return &unk_26C7551C0;
}

uint64_t sub_2169DB2EC(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_2169DB2F4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  *(void *)(a2 + 8) = &off_26C756B50;
  return sub_2169DB6A8((unsigned int **)a2, v2);
}

uint64_t *sub_2169DB30C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 152), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    unint64_t v4 = (void **)(v2 + 128);
    sub_216782F20(&v4);
    unint64_t v4 = (void **)(v2 + 104);
    sub_216782F20(&v4);
    unint64_t v4 = (void **)(v2 + 80);
    sub_216782F20(&v4);
    unint64_t v4 = (void **)(v2 + 56);
    sub_216782F20(&v4);
    unint64_t v4 = (void **)(v2 + 32);
    sub_216782F20(&v4);
    unint64_t v4 = (void **)(v2 + 8);
    sub_216782F20(&v4);
    operator delete((void *)v2);
  }
  return a1;
}

unint64_t sub_2169DB3C0(unsigned __int8 *a1)
{
  uint64_t v2 = 0;
  char v3 = 0;
  sub_2169DB42C((unint64_t)&v2, a1, (uint64_t)(a1 + 8), (uint64_t)(a1 + 32), (uint64_t)(a1 + 56), (uint64_t)(a1 + 80), (uint64_t)(a1 + 104), (uint64_t)(a1 + 128));
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v2));
}

unint64_t sub_2169DB42C(unint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  if (*(unsigned char *)(a1 + 8)) {
    v8 += (unint64_t)(*(void *)a1 + v8 + (*(void *)a1 + v8) * (*(void *)a1 + v8)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v8;
  return sub_2169DB474(a1, a3, a4, a5, a6, a7, a8);
}

unint64_t sub_2169DB474(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  sub_216960068(a1, *(uint64_t **)a2, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  sub_216960068(a1, *(uint64_t **)a3, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3));

  return sub_2169DB51C(a1, a4, a5, a6, a7);
}

unint64_t sub_2169DB51C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_216960068(a1, *(uint64_t **)a2, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  sub_216960068(a1, *(uint64_t **)a3, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3));

  return sub_2169DB5AC(a1, a4, a5);
}

unint64_t sub_2169DB5AC(unint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_216960068(a1, *(uint64_t **)a2, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  uint64_t v5 = *(uint64_t **)a3;
  uint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3);

  return sub_216960068(a1, v5, v6);
}

uint64_t sub_2169DB61C(uint64_t *a1)
{
  unsigned int v2 = atomic_load((unsigned int *)(*a1 + 152));
  if (v2 != 1)
  {
    char v3 = (unsigned int *)operator new(0xA0uLL);
    sub_2169DAE8C((uint64_t)v3, *a1);
    atomic_store(0, v3 + 38);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 38, 1u, memory_order_relaxed);
    uint64_t v5 = *a1;
    *a1 = (uint64_t)v3;
    sub_2169DB30C(&v5);
  }
  return *a1;
}

void sub_2169DB694(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2169DB6A8(unsigned int **a1, uint64_t a2)
{
  unint64_t v4 = (unsigned int *)operator new(0xA0uLL);
  uint64_t result = sub_2169DAE8C((uint64_t)v4, a2);
  atomic_store(0, v4 + 38);
  *a1 = v4;
  atomic_fetch_add_explicit((atomic_uint *volatile)v4 + 38, 1u, memory_order_relaxed);
  return result;
}

void sub_2169DB6FC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2169DB710(uint64_t *a1)
{
  void v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, uint64_t *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_2169DB61C(a1);
}

uint64_t *sub_2169DB7A4(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 24), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *sub_2169DB7C4(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2169DB8F8(a1);
}

uint64_t sub_2169DB7D4()
{
  return 1;
}

unint64_t sub_2169DB7DC(uint64_t *a1)
{
  return sub_2169DB958((uint64_t)&v2, *a1);
}

BOOL sub_2169DB804(uint64_t **a1, uint64_t *a2)
{
  return sub_2169DB9B8(*a1, *a2);
}

BOOL sub_2169DB810(uint64_t **a1, uint64_t a2)
{
  return sub_2169DB9B8(*a1, a2);
}

uint64_t sub_2169DB81C()
{
  return 0;
}

void *sub_2169DB828(uint64_t *a1, void *a2)
{
  return pxrInternal__aapl__pxrReserved__::Vt_StreamOutGeneric((uint64_t)&stru_26C74C2D0, *a1, a2);
}

void *sub_2169DB83C()
{
  return &unk_26C74C2D0;
}

uint64_t sub_2169DB848()
{
  return 0;
}

uint64_t sub_2169DB850()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_2169DB85C()
{
  return 0;
}

uint64_t sub_2169DB864()
{
  return 0;
}

BOOL sub_2169DB86C(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x80000002174694DALL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2169DB8A8(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C2D0, a2, a3);
}

void *sub_2169DB8CC()
{
  return &unk_26C74C2D0;
}

uint64_t sub_2169DB8D8(uint64_t a1)
{
  return *(void *)a1;
}

void *sub_2169DB8E0@<X0>(uint64_t ***a1@<X0>, uint64_t a2@<X8>)
{
  char v2 = *a1;
  *(void *)(a2 + 8) = &off_26C756C08;
  return sub_2169DBAB4((unsigned int **)a2, v2);
}

uint64_t *sub_2169DB8F8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 24), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    unint64_t v4 = (void **)v2;
    sub_216889A04(&v4);
    operator delete((void *)v2);
  }
  return a1;
}

unint64_t sub_2169DB958(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)a2;
  unint64_t v3 = 0;
  uint64_t v4 = *(void *)(a2 + 8) - *(void *)a2;
  if (v4)
  {
    int v5 = 0;
    uint64_t v6 = v4 >> 3;
    do
    {
      uint64_t v7 = *v2++;
      unint64_t v8 = v7 & 0xFFFFFFFFFFFFFFF8;
      if (v5)
      {
        unint64_t v3 = v8 + ((v8 + v3 + (v8 + v3) * (v8 + v3)) >> 1);
      }
      else
      {
        int v5 = 1;
        unint64_t v3 = v8;
      }
      --v6;
    }
    while (v6);
  }
  return bswap64(0x9E3779B97F4A7C55 * v3);
}

BOOL sub_2169DB9B8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = *(uint64_t **)a2;
  if (v2 - *a1 != *(void *)(a2 + 8) - *(void *)a2) {
    return 0;
  }
  if (v3 == v2) {
    return 1;
  }
  uint64_t v5 = v3 + 8;
  do
  {
    uint64_t v6 = *v4++;
    BOOL result = (*(void *)(v5 - 8) & 0xFFFFFFFFFFFFFFF8) == (v6 & 0xFFFFFFFFFFFFFFF8);
    BOOL v8 = (*(void *)(v5 - 8) & 0xFFFFFFFFFFFFFFF8) != (v6 & 0xFFFFFFFFFFFFFFF8) || v5 == v2;
    v5 += 8;
  }
  while (!v8);
  return result;
}

uint64_t **sub_2169DBA14(uint64_t ***a1)
{
  unsigned int v2 = atomic_load((unsigned int *)*a1 + 6);
  if (v2 != 1)
  {
    uint64_t v3 = (unsigned int *)operator new(0x20uLL);
    uint64_t v4 = *a1;
    *((void *)v3 + 1) = 0;
    *((void *)v3 + 2) = 0;
    *(void *)uint64_t v3 = 0;
    sub_21698FA28(v3, *v4, v4[1], v4[1] - *v4);
    atomic_store(0, v3 + 6);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 6, 1u, memory_order_relaxed);
    uint64_t v6 = *a1;
    *a1 = (uint64_t **)v3;
    sub_2169DB8F8((uint64_t *)&v6);
  }
  return *a1;
}

void sub_2169DBAA0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_2169DBAB4(unsigned int **a1, uint64_t **a2)
{
  uint64_t v4 = (unsigned int *)operator new(0x20uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)uint64_t v4 = 0;
  BOOL result = sub_21698FA28(v4, *a2, a2[1], a2[1] - *a2);
  atomic_store(0, v4 + 6);
  *a1 = v4;
  atomic_fetch_add_explicit((atomic_uint *volatile)v4 + 6, 1u, memory_order_relaxed);
  return result;
}

void sub_2169DBB18(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2169DBB2C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000217478E4CLL & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;

  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C756CC0);
}

void *sub_2169DBBB8@<X0>(void *a1@<X8>)
{
  BOOL result = operator new(0x18uLL);
  result[2] = 0;
  result[1] = 0;
  void *result = result + 1;
  *a1 = result;
  a1[1] = sub_2169DBC0C;
  a1[2] = &stru_26C756CC0;
  return result;
}

void sub_2169DBC0C(void **a1)
{
  if (a1)
  {
    sub_2167877AC((uint64_t)a1, a1[1]);
    operator delete(a1);
  }
}

uint64_t *sub_2169DBC50(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 24), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *sub_2169DBC70(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2169DBDCC(a1);
}

uint64_t sub_2169DBC80()
{
  return 1;
}

unint64_t sub_2169DBC88(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v3 = 0;
  char v4 = 0;
  sub_2169DBE24((unint64_t)&v3, *(void **)v1, (void *)(v1 + 8));
  return bswap64(0x9E3779B97F4A7C55 * v3);
}

uint64_t sub_2169DBCD8(void **a1, unsigned __int8 ***a2)
{
  return sub_2169DBF14(*a1, *a2);
}

uint64_t sub_2169DBCE4(void **a1, unsigned __int8 **a2)
{
  return sub_2169DBF14(*a1, a2);
}

uint64_t sub_2169DBCF0()
{
  return 0;
}

void *sub_2169DBCFC(uint64_t *a1, void *a2)
{
  return pxrInternal__aapl__pxrReserved__::Vt_StreamOutGeneric((uint64_t)&stru_26C756CC0, *a1, a2);
}

void *sub_2169DBD10()
{
  return &unk_26C756CC0;
}

uint64_t sub_2169DBD1C()
{
  return 0;
}

uint64_t sub_2169DBD24()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_2169DBD30()
{
  return 0;
}

uint64_t sub_2169DBD38()
{
  return 0;
}

BOOL sub_2169DBD40(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x8000000217478E4CLL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2169DBD7C(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C756CC0, a2, a3);
}

void *sub_2169DBDA0()
{
  return &unk_26C756CC0;
}

uint64_t sub_2169DBDAC(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t *sub_2169DBDB4@<X0>(const void ****a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  a2[1] = &off_26C756CD0;
  return sub_2169DC07C(a2, v2);
}

uint64_t *sub_2169DBDCC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 24), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_2167877AC(v2, *(void **)(v2 + 8));
    operator delete((void *)v2);
  }
  return a1;
}

unint64_t sub_2169DBE24(unint64_t result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    char v4 = (pxrInternal__aapl__pxrReserved__::Tf_HashState *)result;
    do
    {
      uint64_t v5 = (void *)a2[1];
      uint64_t v6 = a2;
      if (v5)
      {
        do
        {
          uint64_t v7 = v5;
          uint64_t v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v6[2];
          BOOL v8 = *v7 == (void)v6;
          uint64_t v6 = v7;
        }
        while (!v8);
      }
      BOOL result = sub_2169DBEA4(v4, (pxrInternal__aapl__pxrReserved__ *)(a2 + 4));
      a2 = v7;
    }
    while (v7 != a3);
  }
  return result;
}

unint64_t sub_2169DBEA4(pxrInternal__aapl__pxrReserved__::Tf_HashState *a1, pxrInternal__aapl__pxrReserved__ *a2)
{
  uint64_t v2 = a2;
  char v4 = (char *)*((void *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    uint64_t v5 = (char *)*((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = *(pxrInternal__aapl__pxrReserved__ **)a2;
    uint64_t v5 = v4;
  }
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes(a1, a2, v5);
  BOOL v8 = (pxrInternal__aapl__pxrReserved__ *)*((void *)v2 + 3);
  uint64_t v7 = (uint64_t *)((char *)v2 + 24);
  uint64_t v6 = v8;
  int v9 = *((char *)v7 + 23);
  if (v9 >= 0) {
    size_t v10 = (pxrInternal__aapl__pxrReserved__ *)v7;
  }
  else {
    size_t v10 = v6;
  }
  if (v9 >= 0) {
    uint64_t v11 = (char *)*((unsigned __int8 *)v7 + 23);
  }
  else {
    uint64_t v11 = (char *)v7[1];
  }

  return pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes(a1, v10, v11);
}

uint64_t sub_2169DBF14(void *a1, unsigned __int8 **a2)
{
  if ((unsigned __int8 *)a1[2] != a2[2]) {
    return 0;
  }
  uint64_t v2 = (unsigned __int8 *)(a1 + 1);
  uint64_t v3 = (unsigned __int8 *)*a1;
  if ((void *)*a1 == a1 + 1) {
    return 1;
  }
  char v4 = *a2;
  do
  {
    uint64_t result = sub_21691BE28((uint64_t)&v11, v3 + 32, v4 + 32);
    if (!result) {
      break;
    }
    uint64_t v6 = (unsigned __int8 *)*((void *)v3 + 1);
    uint64_t v7 = v3;
    if (v6)
    {
      do
      {
        uint64_t v3 = v6;
        uint64_t v6 = *(unsigned __int8 **)v6;
      }
      while (v6);
    }
    else
    {
      do
      {
        uint64_t v3 = (unsigned __int8 *)*((void *)v7 + 2);
        BOOL v8 = *(void *)v3 == (void)v7;
        uint64_t v7 = v3;
      }
      while (!v8);
    }
    int v9 = (unsigned __int8 *)*((void *)v4 + 1);
    if (v9)
    {
      do
      {
        size_t v10 = v9;
        int v9 = *(unsigned __int8 **)v9;
      }
      while (v9);
    }
    else
    {
      do
      {
        size_t v10 = (unsigned __int8 *)*((void *)v4 + 2);
        BOOL v8 = *(void *)v10 == (void)v4;
        char v4 = v10;
      }
      while (!v8);
    }
    char v4 = v10;
  }
  while (v3 != v2);
  return result;
}

const void ***sub_2169DBFF0(const void ****a1)
{
  unsigned int v2 = atomic_load((unsigned int *)*a1 + 6);
  if (v2 != 1)
  {
    uint64_t v3 = operator new(0x20uLL);
    sub_2167898D0((uint64_t *)v3, *a1);
    atomic_store(0, (unsigned int *)v3 + 6);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 6, 1u, memory_order_relaxed);
    uint64_t v5 = *a1;
    *a1 = (const void ***)v3;
    sub_2169DBDCC((uint64_t *)&v5);
  }
  return *a1;
}

void sub_2169DC068(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_2169DC07C(void *a1, const void ***a2)
{
  char v4 = operator new(0x20uLL);
  uint64_t result = sub_2167898D0((uint64_t *)v4, a2);
  atomic_store(0, (unsigned int *)v4 + 6);
  *a1 = v4;
  atomic_fetch_add_explicit((atomic_uint *volatile)v4 + 6, 1u, memory_order_relaxed);
  return result;
}

void sub_2169DC0D0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_2169DC0E4(uint64_t **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, _DWORD *a3)
{
  uint64_t v5 = (void **)sub_216981754((uint64_t)a1, &v11, a2);
  uint64_t v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    uint64_t v6 = (uint64_t *)operator new(0x30uLL);
    v9[1] = a1 + 1;
    sub_2169DC194((_DWORD *)v6 + 7, a3);
    char v10 = 1;
    sub_21677B358(a1, v11, v7, v6);
    v9[0] = 0;
    sub_21698F170((uint64_t)v9, 0);
  }
  return v6;
}

_DWORD *sub_2169DC194(_DWORD *a1, _DWORD *a2)
{
  char v4 = sub_21697D878(a1, a2);
  sub_21697D8B4(v4 + 1, a2 + 1);
  sub_21697D878(a1 + 2, a2 + 2);
  sub_21697D8B4(a1 + 3, a2 + 3);
  return a1;
}

uint64_t *sub_2169DC1E4(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 24), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *sub_2169DC204(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2169DC3D8(a1);
}

uint64_t sub_2169DC214()
{
  return 1;
}

unint64_t sub_2169DC21C(unsigned int ***a1)
{
  return sub_2169DC438((uint64_t)&v2, *a1);
}

BOOL sub_2169DC244(uint64_t **a1, uint64_t ***a2)
{
  uint64_t v3 = **a1;
  uint64_t v2 = (*a1)[1];
  char v4 = **a2;
  if (v2 - v3 != (char *)(*a2)[1] - (char *)v4) {
    return 0;
  }
  if (v3 == v2) {
    return 1;
  }
  uint64_t v5 = v3 + 8;
  do
  {
    uint64_t v6 = *v4++;
    BOOL result = *(void *)(v5 - 8) == v6;
    BOOL v8 = *(void *)(v5 - 8) != v6 || v5 == v2;
    v5 += 8;
  }
  while (!v8);
  return result;
}

BOOL sub_2169DC2A0(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = **a1;
  uint64_t v2 = (*a1)[1];
  char v4 = *(uint64_t **)a2;
  if (v2 - v3 != *(void *)(a2 + 8) - *(void *)a2) {
    return 0;
  }
  if (v3 == v2) {
    return 1;
  }
  uint64_t v5 = v3 + 8;
  do
  {
    uint64_t v6 = *v4++;
    BOOL result = *(void *)(v5 - 8) == v6;
    BOOL v8 = *(void *)(v5 - 8) != v6 || v5 == v2;
    v5 += 8;
  }
  while (!v8);
  return result;
}

uint64_t sub_2169DC2FC()
{
  return 0;
}

void *sub_2169DC308(uint64_t *a1, void *a2)
{
  return pxrInternal__aapl__pxrReserved__::Vt_StreamOutGeneric((uint64_t)&stru_26C756E40, *a1, a2);
}

void *sub_2169DC31C()
{
  return &unk_26C756E40;
}

uint64_t sub_2169DC328()
{
  return 0;
}

uint64_t sub_2169DC330()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_2169DC33C()
{
  return 0;
}

uint64_t sub_2169DC344()
{
  return 0;
}

BOOL sub_2169DC34C(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000021746952ELL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2169DC388(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C756E40, a2, a3);
}

void *sub_2169DC3AC()
{
  return &unk_26C756E40;
}

uint64_t sub_2169DC3B8(uint64_t a1)
{
  return *(void *)a1;
}

void *sub_2169DC3C0@<X0>(_DWORD ***a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  *(void *)(a2 + 8) = &off_26C756D88;
  return sub_2169DC54C((unsigned int **)a2, v2);
}

uint64_t *sub_2169DC3D8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 24), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    char v4 = (void **)v2;
    sub_216981168(&v4);
    operator delete((void *)v2);
  }
  return a1;
}

unint64_t sub_2169DC438(uint64_t a1, unsigned int **a2)
{
  uint64_t v2 = (char *)*a2;
  uint64_t v3 = a2[1];
  uint64_t v4 = (char *)v3 - (char *)*a2;
  if (v3 == *a2)
  {
    unint64_t v9 = 0;
  }
  else
  {
    int v5 = 0;
    unint64_t v6 = 0;
    uint64_t v7 = v4 >> 3;
    do
    {
      uint64_t v8 = *(unsigned int *)v2;
      if (v5) {
        v8 += (v6 + v8 + (v6 + v8) * (v6 + v8)) >> 1;
      }
      else {
        int v5 = 1;
      }
      unint64_t v6 = *((unsigned int *)v2 + 1)
         + ((v8
           + *((unsigned int *)v2 + 1)
           + (v8 + *((unsigned int *)v2 + 1)) * (v8 + (unint64_t)*((unsigned int *)v2 + 1))) >> 1);
      v2 += 8;
      --v7;
    }
    while (v7);
    unint64_t v9 = 0x9E3779B97F4A7C55 * v6;
  }
  return bswap64(v9);
}

uint64_t sub_2169DC4AC(uint64_t a1)
{
  unsigned int v2 = atomic_load((unsigned int *)(*(void *)a1 + 24));
  if (v2 != 1)
  {
    uint64_t v3 = (unsigned int *)operator new(0x20uLL);
    uint64_t v4 = *(_DWORD ***)a1;
    *((void *)v3 + 1) = 0;
    *((void *)v3 + 2) = 0;
    *(void *)uint64_t v3 = 0;
    sub_216980EEC(v3, *v4, v4[1], ((char *)v4[1] - (char *)*v4) >> 3);
    atomic_store(0, v3 + 6);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 6, 1u, memory_order_relaxed);
    uint64_t v6 = *(void *)a1;
    *(void *)a1 = v3;
    sub_2169DC3D8(&v6);
  }
  return *(void *)a1;
}

void sub_2169DC538(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_2169DC54C(unsigned int **a1, _DWORD **a2)
{
  uint64_t v4 = (unsigned int *)operator new(0x20uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)uint64_t v4 = 0;
  BOOL result = sub_216980EEC(v4, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 3);
  atomic_store(0, v4 + 6);
  *a1 = v4;
  atomic_fetch_add_explicit((atomic_uint *volatile)v4 + 6, 1u, memory_order_relaxed);
  return result;
}

void sub_2169DC5B0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2169DC5C4(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000217469580 & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;

  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C756E50);
}

_DWORD *sub_2169DC650@<X0>(void *a1@<X8>)
{
  BOOL result = operator new(4uLL);
  _DWORD *result = 0;
  *a1 = result;
  a1[1] = sub_2169DC698;
  a1[2] = &stru_26C756E50;
  return result;
}

void sub_2169DC698(void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

_DWORD *sub_2169DC6A4(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

_DWORD *sub_2169DC6B4(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_2169DC6C0()
{
  return 1;
}

unint64_t sub_2169DC6C8(unsigned int *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL sub_2169DC6E8(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

BOOL sub_2169DC6FC(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_2169DC714()
{
  return 0;
}

void *sub_2169DC724()
{
  return &unk_26C756E50;
}

uint64_t sub_2169DC730()
{
  return 0;
}

uint64_t sub_2169DC738()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_2169DC744()
{
  return 0;
}

uint64_t sub_2169DC74C()
{
  return 0;
}

BOOL sub_2169DC754(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x8000000217469580 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2169DC790(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C756E50, a2, a3);
}

void *sub_2169DC7B4()
{
  return &unk_26C756E50;
}

_DWORD *sub_2169DC7C4@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = (char *)&off_26C756E60 + 3;
  *(_DWORD *)a2 = *result;
  return result;
}

void *sub_2169DC7E0(unsigned int *a1, void *a2)
{
  pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&stru_26C756E50, *a1, (uint64_t)__p);
  if ((v8 & 0x80u) == 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)__p[0];
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v4 = v8;
  }
  else {
    uint64_t v4 = (uint64_t)__p[1];
  }
  int v5 = sub_216779180(a2, (uint64_t)v3, v4);
  if ((char)v8 < 0) {
    operator delete(__p[0]);
  }
  return v5;
}

void sub_2169DC858(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2169DC874(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    sub_2168EBBB8((void ***)(i - 8), 0);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_2169DC8C8(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000021746952ELL & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;

  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C756E40);
}

int *sub_2169DC954(uint64_t *a1, int *a2, _DWORD *a3, _DWORD *a4, uint64_t a5)
{
  int v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if (a5 <= (uint64_t)(v11 - v12) >> 3)
    {
      uint64_t v19 = v12 - (void)a2;
      uint64_t v20 = (uint64_t)(v12 - (void)a2) >> 3;
      if (v20 >= a5)
      {
        long long v21 = &a3[2 * a5];
      }
      else
      {
        long long v21 = &a3[2 * v20];
        a1[1] = (uint64_t)sub_216980F74(v9, v21, a4, *(_DWORD **)(v9 - 8));
        if (v19 < 1) {
          return v5;
        }
      }
      sub_2169DCAD8((uint64_t)a1, (uint64_t)v5, v12, (uint64_t)&v5[2 * a5]);
      sub_2169DCD2C((uint64_t)&v23, a3, v21, v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 + ((uint64_t)(v12 - *a1) >> 3);
      if (v14 >> 61) {
        sub_21677CB10();
      }
      uint64_t v15 = ((uint64_t)a2 - v13) >> 3;
      uint64_t v16 = v10 - v13;
      if (v16 >> 2 > v14) {
        unint64_t v14 = v16 >> 2;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v14;
      }
      uint64_t v27 = v9;
      if (v17) {
        long long v18 = (char *)sub_21677CB28(v9, v17);
      }
      else {
        long long v18 = 0;
      }
      char v23 = v18;
      BOOL v24 = &v18[8 * v15];
      int v25 = v24;
      int v26 = &v18[8 * v17];
      sub_2169DCB80(&v23, a3, a5);
      int v5 = (int *)sub_2169DCBF4((uint64_t)a1, &v23, v5);
      sub_216981DDC(&v23);
    }
  }
  return v5;
}

void sub_2169DCAB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t sub_2169DCAD8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  unsigned __int8 v8 = (_DWORD *)v6;
  if (v7 < a3)
  {
    uint64_t v10 = (_DWORD *)(a2 + v6 - a4);
    unsigned __int8 v8 = *(_DWORD **)(a1 + 8);
    do
    {
      sub_21697D878(v8, v10);
      sub_21697D8B4(v8 + 1, v10 + 1);
      v10 += 2;
      v8 += 2;
    }
    while ((unint64_t)v10 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return sub_2169DCCA8((uint64_t)&v12, a2, v7, v6);
}

_DWORD *sub_2169DCB80(_DWORD *result, _DWORD *a2, uint64_t a3)
{
  uint64_t v3 = result;
  uint64_t v4 = (_DWORD *)*((void *)result + 2);
  if (a3)
  {
    uint64_t v6 = 8 * a3;
    unint64_t v7 = &v4[2 * a3];
    do
    {
      sub_216981010(v4, a2);
      BOOL result = sub_21698105C(v4 + 1, a2 + 1);
      v4 += 2;
      a2 += 2;
      v6 -= 8;
    }
    while (v6);
    uint64_t v4 = v7;
  }
  *((void *)v3 + 2) = v4;
  return result;
}

uint64_t sub_2169DCBF4(uint64_t a1, void *a2, _DWORD *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1 + 16;
  sub_216981C98(a1 + 16, (uint64_t)a3, (uint64_t)a3, *(void *)a1, *(void *)a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_2169DCD9C(v7, a3, *(_DWORD **)(a1 + 8), (_DWORD *)a2[2]);
  uint64_t v9 = *(void *)a1;
  *(void *)a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = a2[2];
  a2[2] = v10;
  uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_2169DCCA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v7 = a3;
    do
    {
      sub_21697DE94((int *)(a4 - 8), (int *)(v7 - 8));
      sub_21697DEEC((int *)(a4 - 4), (int *)(v7 - 4));
      a4 -= 8;
      v7 -= 8;
    }
    while (v7 != a2);
  }
  return a3;
}

_DWORD *sub_2169DCD2C(uint64_t a1, _DWORD *a2, _DWORD *a3, int *a4)
{
  int v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    sub_2169C487C(a4, v5);
    sub_2169C48D4(a4 + 1, v5 + 1);
    a4 += 2;
    v5 += 2;
  }
  while (v5 != v6);
  return v6;
}

_DWORD *sub_2169DCD9C(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_21697D878(v4, v6);
      sub_21697D8B4(v4 + 1, v6 + 1);
      v6 += 2;
      uint64_t v4 = v11 + 2;
      v11 += 2;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  sub_21698109C((uint64_t)v8);
  return v4;
}

uint64_t sub_2169DCE38(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    long long v3 = a2[1];
    long long v8 = *a2;
    long long v9 = v3;
    uint64_t v4 = *((void *)a2 + 4);
    uint64_t v10 = v4;
    if (v4)
    {
      int v5 = (atomic_ullong *)(v4 - 16);
      if (*((void *)&v9 + 1)) {
        int v5 = (atomic_ullong *)*((void *)&v9 + 1);
      }
      atomic_fetch_add_explicit(v5, 1uLL, memory_order_relaxed);
    }
    if (&v8 != (long long *)a1)
    {
      sub_2168F83DC(a1);
      long long v6 = v9;
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v6;
      long long v8 = 0u;
      long long v9 = 0u;
      *(void *)(a1 + 32) = v10;
      uint64_t v10 = 0;
    }
    sub_2168F83DC((uint64_t)&v8);
  }
  return a1;
}

void sub_2169DCED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2169DCEEC(void *a1, uint64_t a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  long long v6 = (const void *)a3[4];
  unint64_t v7 = *a3;
  uint64_t v8 = (uint64_t)v6 + 4 * *a3;
  int v26 = 0;
  uint64_t v27 = 0;
  int v25 = 0;
  sub_2167CD8AC(&v25, v6, v8, v7);
  long long v9 = (char *)v25;
  if ((unint64_t)(v26 - (unsigned char *)v25) < 8) {
    goto LABEL_2;
  }
  if ((unint64_t)(v26 - (unsigned char *)v25) > 0x2B)
  {
    if (v25 == v26) {
      goto LABEL_2;
    }
    uint64_t v13 = (char *)v25 + 4;
    do
    {
      if (v13 == v26) {
        goto LABEL_2;
      }
      int v14 = *((_DWORD *)v13 - 1);
      int v15 = *(_DWORD *)v13;
      v13 += 4;
    }
    while (v14 < v15);
    if (!sub_2169DD38C((uint64_t)&v25))
    {
LABEL_2:
      sub_2169D1B08(a4 + 101);
      pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SdfListOp();
    }
  }
  else
  {
    do
    {
LABEL_4:
      if (v9 == v26 - 4) {
        goto LABEL_2;
      }
      uint64_t v10 = (int *)v9;
      v9 += 4;
    }
    while (v9 == v26);
    int v11 = *v10;
    char v12 = v9;
    while (v11 != *v12)
    {
      if (++v12 == (_DWORD *)v26) {
        goto LABEL_4;
      }
    }
  }
  unint64_t v16 = *a1 & 0xFFFFFFFFFFFFFFF8;
  if (v16)
  {
    unint64_t v17 = (const char *)(v16 + 16);
    if (*(char *)(v16 + 39) < 0) {
      unint64_t v17 = *(const char **)v17;
    }
  }
  else
  {
    unint64_t v17 = "";
  }
  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(a4 + 102));
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Duplicate items exist for field '%s' at '%s'", v19, v20, v17, Text);
  if (v24 >= 0) {
    long long v22 = (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)&v23;
  }
  else {
    long long v22 = (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)v23;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_RaiseError((pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser *)a4, v22, v21);
  if (SHIBYTE(v24) < 0) {
    operator delete(v23);
  }
  goto LABEL_2;
}

void sub_2169DD23C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,char a36)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2169DD2C4(void *a1)
{
  unsigned int v2 = (void *)a1[16];
  if (v2)
  {
    a1[17] = v2;
    operator delete(v2);
  }
  long long v3 = (void *)a1[13];
  if (v3)
  {
    a1[14] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[10];
  if (v4)
  {
    a1[11] = v4;
    operator delete(v4);
  }
  int v5 = (void *)a1[7];
  if (v5)
  {
    a1[8] = v5;
    operator delete(v5);
  }
  long long v6 = (void *)a1[4];
  if (v6)
  {
    a1[5] = v6;
    operator delete(v6);
  }
  unint64_t v7 = (void *)a1[1];
  if (v7)
  {
    a1[2] = v7;
    operator delete(v7);
  }
  return a1;
}

void sub_2169DD348(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X8>)
{
  *((void *)a1 + 1) = 0;
  sub_2169DD5C8(a1);
}

void sub_2169DD378(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

BOOL sub_2169DD38C(uint64_t a1)
{
  unint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  sub_216825C04(&v7, *(const void **)a1, *(void *)(a1 + 8), (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2);
  std::__sort<std::__less<int,int> &,int *>();
  uint64_t v1 = v8;
  unsigned int v2 = v7;
  if (v7 == v8)
  {
LABEL_6:
    if (!v7) {
      return v2 != v1;
    }
LABEL_7:
    uint64_t v8 = v7;
    operator delete(v7);
    return v2 != v1;
  }
  long long v3 = v7 + 4;
  while (v3 != v8)
  {
    int v4 = *((_DWORD *)v3 - 1);
    int v5 = *(_DWORD *)v3;
    v3 += 4;
    if (v4 == v5)
    {
      unsigned int v2 = v3 - 8;
      goto LABEL_6;
    }
  }
  unsigned int v2 = v8;
  if (v7) {
    goto LABEL_7;
  }
  return v2 != v1;
}

void sub_2169DD428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2169DD444(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  sub_216825C04((void *)(a1 + 8), *(const void **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4sub_2168EBBB8(&a9, 0) = 0;
  *(void *)(a1 + 48) = 0;
  sub_216825C04((void *)(a1 + 32), *(const void **)(a2 + 32), *(void *)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 2);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  sub_216825C04((void *)(a1 + 56), *(const void **)(a2 + 56), *(void *)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 2);
  *(void *)(a1 + 8sub_2168EBBB8(&a9, 0) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  sub_216825C04((void *)(a1 + 80), *(const void **)(a2 + 80), *(void *)(a2 + 88), (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 2);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 12sub_2168EBBB8(&a9, 0) = 0;
  sub_216825C04((void *)(a1 + 104), *(const void **)(a2 + 104), *(void *)(a2 + 112), (uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 2);
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  sub_216825C04((void *)(a1 + 128), *(const void **)(a2 + 128), *(void *)(a2 + 136), (uint64_t)(*(void *)(a2 + 136) - *(void *)(a2 + 128)) >> 2);
  return a1;
}

void sub_2169DD54C(_Unwind_Exception *exception_object)
{
  uint64_t v8 = *v6;
  if (*v6)
  {
    v1[14] = v8;
    operator delete(v8);
  }
  uint64_t v9 = *v5;
  if (*v5)
  {
    void v1[11] = v9;
    operator delete(v9);
  }
  uint64_t v10 = *v4;
  if (*v4)
  {
    v1[8] = v10;
    operator delete(v10);
  }
  int v11 = *v3;
  if (*v3)
  {
    v1[5] = v11;
    operator delete(v11);
  }
  char v12 = *v2;
  if (*v2)
  {
    v1[2] = v12;
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

void sub_2169DD5C8(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if ((sub_21698F4F4(a1) & 1) == 0) {
    pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SdfListOp();
  }
  sub_2169DDC40((uint64_t *)a1);
  pxrInternal__aapl__pxrReserved__::SdfListOp<int>::Swap();
}

void sub_2169DD680(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2169DD2C4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2169DD694(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v5, a1);
  *(void *)(a1 + 8) = &off_26C756F18;
  sub_2169DDBD8((unsigned int **)a1, a2);
  if (v6) {
    (*(void (**)(unsigned char *))(v6 + 32))(v5);
  }
  return a1;
}

void sub_2169DD728(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2169DD764(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 152), 1u, memory_order_relaxed);
  }
  return result;
}

void sub_2169DD780(void **a1)
{
  uint64_t v1 = *a1;
  if (v1) {
    sub_2169DD8A0(v1);
  }
}

void *sub_2169DD790(void *result, void *a2)
{
  *a2 = *result;
  _DWORD *result = 0;
  return result;
}

uint64_t sub_2169DD7A0()
{
  return 1;
}

unint64_t sub_2169DD7A8(unsigned __int8 **a1)
{
  return sub_2169DD95C(*a1);
}

void sub_2169DD7B0()
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<int>::operator==();
}

void sub_2169DD7BC()
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<int>::operator==();
}

uint64_t sub_2169DD7C8()
{
  return 0;
}

void sub_2169DD7D4()
{
}

void *sub_2169DD7E4()
{
  return &unk_26C755180;
}

uint64_t sub_2169DD7F0()
{
  return 0;
}

uint64_t sub_2169DD7F8()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_2169DD804()
{
  return 0;
}

uint64_t sub_2169DD80C()
{
  return 0;
}

BOOL sub_2169DD814(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x80000002174686FFLL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2169DD850(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C755180, a2, a3);
}

void *sub_2169DD874()
{
  return &unk_26C755180;
}

uint64_t sub_2169DD880(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_2169DD888@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  *(void *)(a2 + 8) = &off_26C756F18;
  return sub_2169DDBD8((unsigned int **)a2, v2);
}

void sub_2169DD8A0(void *__p)
{
  if (atomic_fetch_add_explicit((atomic_uint *volatile)__p + 38, 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    if (__p)
    {
      uint64_t v2 = (void *)*((void *)__p + 16);
      if (v2)
      {
        *((void *)__p + 17) = v2;
        operator delete(v2);
      }
      long long v3 = (void *)*((void *)__p + 13);
      if (v3)
      {
        *((void *)__p + 14) = v3;
        operator delete(v3);
      }
      int v4 = (void *)*((void *)__p + 10);
      if (v4)
      {
        *((void *)__p + 11) = v4;
        operator delete(v4);
      }
      int v5 = (void *)*((void *)__p + 7);
      if (v5)
      {
        *((void *)__p + 8) = v5;
        operator delete(v5);
      }
      uint64_t v6 = (void *)*((void *)__p + 4);
      if (v6)
      {
        *((void *)__p + 5) = v6;
        operator delete(v6);
      }
      uint64_t v7 = (void *)*((void *)__p + 1);
      if (v7)
      {
        *((void *)__p + 2) = v7;
        operator delete(v7);
      }
      operator delete(__p);
    }
  }
}

unint64_t sub_2169DD95C(unsigned __int8 *a1)
{
  uint64_t v2 = 0;
  char v3 = 0;
  sub_2169DD9C8((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v2, a1, (uint64_t)(a1 + 8), (uint64_t)(a1 + 32), (uint64_t)(a1 + 56), (uint64_t)(a1 + 80), (uint64_t)(a1 + 104), (uint64_t)(a1 + 128));
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v2));
}

unint64_t sub_2169DD9C8(pxrInternal__aapl__pxrReserved__::Tf_HashState *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  if (*((unsigned char *)a1 + 8)) {
    v8 += (unint64_t)(*(void *)a1 + v8 + (*(void *)a1 + v8) * (*(void *)a1 + v8)) >> 1;
  }
  else {
    *((unsigned char *)a1 + 8) = 1;
  }
  *(void *)a1 = v8;
  return sub_2169DDA10(a1, a3, a4, a5, a6, a7, a8);
}

unint64_t sub_2169DDA10(pxrInternal__aapl__pxrReserved__::Tf_HashState *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes(a1, *(pxrInternal__aapl__pxrReserved__ **)a2, (char *)(*(void *)(a2 + 8) - *(void *)a2));
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes(a1, *(pxrInternal__aapl__pxrReserved__ **)a3, (char *)(*(void *)(a3 + 8) - *(void *)a3));

  return sub_2169DDA98(a1, a4, a5, a6, a7);
}

unint64_t sub_2169DDA98(pxrInternal__aapl__pxrReserved__::Tf_HashState *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes(a1, *(pxrInternal__aapl__pxrReserved__ **)a2, (char *)(*(void *)(a2 + 8) - *(void *)a2));
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes(a1, *(pxrInternal__aapl__pxrReserved__ **)a3, (char *)(*(void *)(a3 + 8) - *(void *)a3));

  return sub_2169DDB08(a1, a4, a5);
}

unint64_t sub_2169DDB08(pxrInternal__aapl__pxrReserved__::Tf_HashState *a1, uint64_t a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes(a1, *(pxrInternal__aapl__pxrReserved__ **)a2, (char *)(*(void *)(a2 + 8) - *(void *)a2));
  int v5 = *(pxrInternal__aapl__pxrReserved__ **)a3;
  uint64_t v6 = (char *)(*(void *)(a3 + 8) - *(void *)a3);

  return pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes(a1, v5, v6);
}

uint64_t sub_2169DDB58(uint64_t *a1)
{
  unsigned int v2 = atomic_load((unsigned int *)(*a1 + 152));
  if (v2 != 1)
  {
    char v3 = (unsigned int *)operator new(0xA0uLL);
    sub_2169DD444((uint64_t)v3, *a1);
    atomic_store(0, v3 + 38);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 38, 1u, memory_order_relaxed);
    int v4 = (void *)*a1;
    *a1 = (uint64_t)v3;
    if (v4) {
      sub_2169DD8A0(v4);
    }
  }
  return *a1;
}

void sub_2169DDBC4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2169DDBD8(unsigned int **a1, uint64_t a2)
{
  int v4 = (unsigned int *)operator new(0xA0uLL);
  uint64_t result = sub_2169DD444((uint64_t)v4, a2);
  atomic_store(0, v4 + 38);
  *a1 = v4;
  atomic_fetch_add_explicit((atomic_uint *volatile)v4 + 38, 1u, memory_order_relaxed);
  return result;
}

void sub_2169DDC2C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2169DDC40(uint64_t *a1)
{
  void v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, uint64_t *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_2169DDB58(a1);
}

uint64_t sub_2169DDCD4(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 54) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C74E208);
  }
  else {
    return 0;
  }
}

uint64_t sub_2169DDD0C(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    long long v3 = a2[1];
    long long v8 = *a2;
    long long v9 = v3;
    uint64_t v4 = *((void *)a2 + 4);
    uint64_t v10 = v4;
    if (v4)
    {
      int v5 = (atomic_ullong *)(v4 - 16);
      if (*((void *)&v9 + 1)) {
        int v5 = (atomic_ullong *)*((void *)&v9 + 1);
      }
      atomic_fetch_add_explicit(v5, 1uLL, memory_order_relaxed);
    }
    if (&v8 != (long long *)a1)
    {
      sub_2168F83DC(a1);
      long long v6 = v9;
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v6;
      long long v8 = 0u;
      long long v9 = 0u;
      *(void *)(a1 + 32) = v10;
      uint64_t v10 = 0;
    }
    sub_2168F83DC((uint64_t)&v8);
  }
  return a1;
}

void sub_2169DDDA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2169DDDC0(void *a1, uint64_t a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  long long v6 = (const void *)a3[4];
  unint64_t v7 = *a3;
  uint64_t v8 = (uint64_t)v6 + 8 * *a3;
  int v26 = 0;
  uint64_t v27 = 0;
  int v25 = 0;
  sub_2169DE1DC(&v25, v6, v8, v7);
  long long v9 = (char *)v25;
  if ((unint64_t)(v26 - (unsigned char *)v25) < 0x10) {
    goto LABEL_2;
  }
  if ((unint64_t)(v26 - (unsigned char *)v25) > 0x57)
  {
    if (v25 == v26) {
      goto LABEL_2;
    }
    uint64_t v13 = (char *)v25 + 8;
    do
    {
      if (v13 == v26) {
        goto LABEL_2;
      }
      uint64_t v14 = *((void *)v13 - 1);
      uint64_t v15 = *(void *)v13;
      v13 += 8;
    }
    while (v14 < v15);
    if (!sub_2169DE258((uint64_t)&v25))
    {
LABEL_2:
      sub_2169D1B08(a4 + 101);
      pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SdfListOp();
    }
  }
  else
  {
    do
    {
LABEL_4:
      if (v9 == v26 - 8) {
        goto LABEL_2;
      }
      uint64_t v10 = (uint64_t *)v9;
      v9 += 8;
    }
    while (v9 == v26);
    uint64_t v11 = *v10;
    char v12 = v9;
    while (v11 != *v12)
    {
      if (++v12 == (void *)v26) {
        goto LABEL_4;
      }
    }
  }
  unint64_t v16 = *a1 & 0xFFFFFFFFFFFFFFF8;
  if (v16)
  {
    unint64_t v17 = (const char *)(v16 + 16);
    if (*(char *)(v16 + 39) < 0) {
      unint64_t v17 = *(const char **)v17;
    }
  }
  else
  {
    unint64_t v17 = "";
  }
  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(a4 + 102));
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Duplicate items exist for field '%s' at '%s'", v19, v20, v17, Text);
  if (v24 >= 0) {
    long long v22 = (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)&v23;
  }
  else {
    long long v22 = (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)v23;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_RaiseError((pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser *)a4, v22, v21);
  if (SHIBYTE(v24) < 0) {
    operator delete(v23);
  }
  goto LABEL_2;
}

void sub_2169DE110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,char a36)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2169DE198(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X8>)
{
  *((void *)a1 + 1) = 0;
  sub_2169DE510(a1);
}

void sub_2169DE1C8(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

void *sub_2169DE1DC(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    uint64_t result = sub_21677CACC(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2169DE23C(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_2169DE258(uint64_t a1)
{
  uint64_t v7 = 0;
  size_t v8 = 0;
  uint64_t v9 = 0;
  sub_2169DE310(&v7, *(const void **)a1, *(void *)(a1 + 8), (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  std::__sort<std::__less<long long,long long> &,long long *>();
  uint64_t v1 = v8;
  uint64_t v2 = v7;
  if (v7 == v8)
  {
LABEL_6:
    if (!v7) {
      return v2 != v1;
    }
LABEL_7:
    size_t v8 = v7;
    operator delete(v7);
    return v2 != v1;
  }
  long long v3 = v7 + 8;
  while (v3 != v8)
  {
    uint64_t v4 = *((void *)v3 - 1);
    uint64_t v5 = *(void *)v3;
    v3 += 8;
    if (v4 == v5)
    {
      uint64_t v2 = v3 - 16;
      goto LABEL_6;
    }
  }
  uint64_t v2 = v8;
  if (v7) {
    goto LABEL_7;
  }
  return v2 != v1;
}

void sub_2169DE2F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2169DE310(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    uint64_t result = sub_21677CACC(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2169DE370(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2169DE38C(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  sub_2169DE310((void *)(a1 + 8), *(const void **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4sub_2168EBBB8(&a9, 0) = 0;
  *(void *)(a1 + 48) = 0;
  sub_2169DE310((void *)(a1 + 32), *(const void **)(a2 + 32), *(void *)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  sub_2169DE310((void *)(a1 + 56), *(const void **)(a2 + 56), *(void *)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3);
  *(void *)(a1 + 8sub_2168EBBB8(&a9, 0) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  sub_2169DE310((void *)(a1 + 80), *(const void **)(a2 + 80), *(void *)(a2 + 88), (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 3);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 12sub_2168EBBB8(&a9, 0) = 0;
  sub_2169DE310((void *)(a1 + 104), *(const void **)(a2 + 104), *(void *)(a2 + 112), (uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 3);
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  sub_2169DE310((void *)(a1 + 128), *(const void **)(a2 + 128), *(void *)(a2 + 136), (uint64_t)(*(void *)(a2 + 136) - *(void *)(a2 + 128)) >> 3);
  return a1;
}

void sub_2169DE494(_Unwind_Exception *exception_object)
{
  size_t v8 = *v6;
  if (*v6)
  {
    v1[14] = v8;
    operator delete(v8);
  }
  uint64_t v9 = *v5;
  if (*v5)
  {
    void v1[11] = v9;
    operator delete(v9);
  }
  uint64_t v10 = *v4;
  if (*v4)
  {
    v1[8] = v10;
    operator delete(v10);
  }
  uint64_t v11 = *v3;
  if (*v3)
  {
    v1[5] = v11;
    operator delete(v11);
  }
  char v12 = *v2;
  if (*v2)
  {
    v1[2] = v12;
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

void sub_2169DE510(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if ((sub_21698F580(a1) & 1) == 0) {
    pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SdfListOp();
  }
  sub_2169DE8D0((uint64_t *)a1);
  pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::Swap();
}

void sub_2169DE5C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2169DD2C4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2169DE5DC(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v5, a1);
  *(void *)(a1 + 8) = &off_26C756FD0;
  sub_2169DE868((unsigned int **)a1, a2);
  if (v6) {
    (*(void (**)(unsigned char *))(v6 + 32))(v5);
  }
  return a1;
}

void sub_2169DE670(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2169DE6AC(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 152), 1u, memory_order_relaxed);
  }
  return result;
}

void sub_2169DE6C8(void **a1)
{
  uint64_t v1 = *a1;
  if (v1) {
    sub_2169DD8A0(v1);
  }
}

void *sub_2169DE6D8(void *result, void *a2)
{
  *a2 = *result;
  _DWORD *result = 0;
  return result;
}

uint64_t sub_2169DE6E8()
{
  return 1;
}

unint64_t sub_2169DE6F0(unsigned __int8 **a1)
{
  return sub_2169DD95C(*a1);
}

void sub_2169DE6F8()
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::operator==();
}

void sub_2169DE704()
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::operator==();
}

uint64_t sub_2169DE710()
{
  return 0;
}

void sub_2169DE71C()
{
}

void *sub_2169DE72C()
{
  return &unk_26C755190;
}

uint64_t sub_2169DE738()
{
  return 0;
}

uint64_t sub_2169DE740()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_2169DE74C()
{
  return 0;
}

uint64_t sub_2169DE754()
{
  return 0;
}

BOOL sub_2169DE75C(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x8000000217478D2CLL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2169DE798(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C755190, a2, a3);
}

void *sub_2169DE7BC()
{
  return &unk_26C755190;
}

uint64_t sub_2169DE7C8(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_2169DE7D0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  *(void *)(a2 + 8) = &off_26C756FD0;
  return sub_2169DE868((unsigned int **)a2, v2);
}

uint64_t sub_2169DE7E8(uint64_t *a1)
{
  unsigned int v2 = atomic_load((unsigned int *)(*a1 + 152));
  if (v2 != 1)
  {
    long long v3 = (unsigned int *)operator new(0xA0uLL);
    sub_2169DE38C((uint64_t)v3, *a1);
    atomic_store(0, v3 + 38);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 38, 1u, memory_order_relaxed);
    uint64_t v4 = (void *)*a1;
    *a1 = (uint64_t)v3;
    if (v4) {
      sub_2169DD8A0(v4);
    }
  }
  return *a1;
}

void sub_2169DE854(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2169DE868(unsigned int **a1, uint64_t a2)
{
  uint64_t v4 = (unsigned int *)operator new(0xA0uLL);
  uint64_t result = sub_2169DE38C((uint64_t)v4, a2);
  atomic_store(0, v4 + 38);
  *a1 = v4;
  atomic_fetch_add_explicit((atomic_uint *volatile)v4 + 38, 1u, memory_order_relaxed);
  return result;
}

void sub_2169DE8BC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2169DE8D0(uint64_t *a1)
{
  void v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, uint64_t *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_2169DE7E8(a1);
}

uint64_t sub_2169DE964(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    long long v3 = a2[1];
    long long v8 = *a2;
    long long v9 = v3;
    uint64_t v4 = *((void *)a2 + 4);
    uint64_t v10 = v4;
    if (v4)
    {
      uint64_t v5 = (atomic_ullong *)(v4 - 16);
      if (*((void *)&v9 + 1)) {
        uint64_t v5 = (atomic_ullong *)*((void *)&v9 + 1);
      }
      atomic_fetch_add_explicit(v5, 1uLL, memory_order_relaxed);
    }
    if (&v8 != (long long *)a1)
    {
      sub_2168F83DC(a1);
      long long v6 = v9;
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v6;
      long long v8 = 0u;
      long long v9 = 0u;
      *(void *)(a1 + 32) = v10;
      uint64_t v10 = 0;
    }
    sub_2168F83DC((uint64_t)&v8);
  }
  return a1;
}

void sub_2169DE9FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2169DEA18(void *a1, uint64_t a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  long long v6 = (const void *)a3[4];
  unint64_t v7 = *a3;
  uint64_t v8 = (uint64_t)v6 + 4 * *a3;
  int v26 = 0;
  uint64_t v27 = 0;
  int v25 = 0;
  sub_2169DEE34(&v25, v6, v8, v7);
  long long v9 = (char *)v25;
  if ((unint64_t)(v26 - (unsigned char *)v25) < 8) {
    goto LABEL_2;
  }
  if ((unint64_t)(v26 - (unsigned char *)v25) > 0x2B)
  {
    if (v25 == v26) {
      goto LABEL_2;
    }
    uint64_t v13 = (char *)v25 + 4;
    do
    {
      if (v13 == v26) {
        goto LABEL_2;
      }
      unsigned int v14 = *((_DWORD *)v13 - 1);
      unsigned int v15 = *(_DWORD *)v13;
      v13 += 4;
    }
    while (v14 < v15);
    if (!sub_2169DEEB0((uint64_t)&v25))
    {
LABEL_2:
      sub_2169D1B08(a4 + 101);
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SdfListOp();
    }
  }
  else
  {
    do
    {
LABEL_4:
      if (v9 == v26 - 4) {
        goto LABEL_2;
      }
      uint64_t v10 = (int *)v9;
      v9 += 4;
    }
    while (v9 == v26);
    int v11 = *v10;
    char v12 = v9;
    while (v11 != *v12)
    {
      if (++v12 == (_DWORD *)v26) {
        goto LABEL_4;
      }
    }
  }
  unint64_t v16 = *a1 & 0xFFFFFFFFFFFFFFF8;
  if (v16)
  {
    unint64_t v17 = (const char *)(v16 + 16);
    if (*(char *)(v16 + 39) < 0) {
      unint64_t v17 = *(const char **)v17;
    }
  }
  else
  {
    unint64_t v17 = "";
  }
  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(a4 + 102));
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Duplicate items exist for field '%s' at '%s'", v19, v20, v17, Text);
  if (v24 >= 0) {
    long long v22 = (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)&v23;
  }
  else {
    long long v22 = (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)v23;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_RaiseError((pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser *)a4, v22, v21);
  if (SHIBYTE(v24) < 0) {
    operator delete(v23);
  }
  goto LABEL_2;
}

void sub_2169DED68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,char a36)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2169DEDF0(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X8>)
{
  *((void *)a1 + 1) = 0;
  sub_2169DF0EC(a1);
}

void sub_2169DEE20(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

void *sub_2169DEE34(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    uint64_t result = sub_216781458(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2169DEE94(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_2169DEEB0(uint64_t a1)
{
  uint64_t v7 = 0;
  size_t v8 = 0;
  uint64_t v9 = 0;
  sub_216825C80(&v7, *(const void **)a1, *(void *)(a1 + 8), (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2);
  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
  uint64_t v1 = v8;
  uint64_t v2 = v7;
  if (v7 == v8)
  {
LABEL_6:
    if (!v7) {
      return v2 != v1;
    }
LABEL_7:
    size_t v8 = v7;
    operator delete(v7);
    return v2 != v1;
  }
  long long v3 = v7 + 4;
  while (v3 != v8)
  {
    int v4 = *((_DWORD *)v3 - 1);
    int v5 = *(_DWORD *)v3;
    v3 += 4;
    if (v4 == v5)
    {
      uint64_t v2 = v3 - 8;
      goto LABEL_6;
    }
  }
  uint64_t v2 = v8;
  if (v7) {
    goto LABEL_7;
  }
  return v2 != v1;
}

void sub_2169DEF4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2169DEF68(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  sub_216825C80((void *)(a1 + 8), *(const void **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4sub_2168EBBB8(&a9, 0) = 0;
  *(void *)(a1 + 48) = 0;
  sub_216825C80((void *)(a1 + 32), *(const void **)(a2 + 32), *(void *)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 2);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  sub_216825C80((void *)(a1 + 56), *(const void **)(a2 + 56), *(void *)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 2);
  *(void *)(a1 + 8sub_2168EBBB8(&a9, 0) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  sub_216825C80((void *)(a1 + 80), *(const void **)(a2 + 80), *(void *)(a2 + 88), (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 2);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 12sub_2168EBBB8(&a9, 0) = 0;
  sub_216825C80((void *)(a1 + 104), *(const void **)(a2 + 104), *(void *)(a2 + 112), (uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 2);
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  sub_216825C80((void *)(a1 + 128), *(const void **)(a2 + 128), *(void *)(a2 + 136), (uint64_t)(*(void *)(a2 + 136) - *(void *)(a2 + 128)) >> 2);
  return a1;
}

void sub_2169DF070(_Unwind_Exception *exception_object)
{
  size_t v8 = *v6;
  if (*v6)
  {
    v1[14] = v8;
    operator delete(v8);
  }
  uint64_t v9 = *v5;
  if (*v5)
  {
    void v1[11] = v9;
    operator delete(v9);
  }
  uint64_t v10 = *v4;
  if (*v4)
  {
    v1[8] = v10;
    operator delete(v10);
  }
  int v11 = *v3;
  if (*v3)
  {
    v1[5] = v11;
    operator delete(v11);
  }
  char v12 = *v2;
  if (*v2)
  {
    v1[2] = v12;
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

void sub_2169DF0EC(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if ((sub_21698F60C(a1) & 1) == 0) {
    pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SdfListOp();
  }
  sub_2169DF4AC((uint64_t *)a1);
  pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::Swap();
}

void sub_2169DF1A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2169DD2C4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2169DF1B8(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v5, a1);
  *(void *)(a1 + 8) = &off_26C757088;
  sub_2169DF444((unsigned int **)a1, a2);
  if (v6) {
    (*(void (**)(unsigned char *))(v6 + 32))(v5);
  }
  return a1;
}

void sub_2169DF24C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2169DF288(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 152), 1u, memory_order_relaxed);
  }
  return result;
}

void sub_2169DF2A4(void **a1)
{
  uint64_t v1 = *a1;
  if (v1) {
    sub_2169DD8A0(v1);
  }
}

void *sub_2169DF2B4(void *result, void *a2)
{
  *a2 = *result;
  _DWORD *result = 0;
  return result;
}

uint64_t sub_2169DF2C4()
{
  return 1;
}

unint64_t sub_2169DF2CC(unsigned __int8 **a1)
{
  return sub_2169DD95C(*a1);
}

void sub_2169DF2D4()
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::operator==();
}

void sub_2169DF2E0()
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::operator==();
}

uint64_t sub_2169DF2EC()
{
  return 0;
}

void sub_2169DF2F8()
{
}

void *sub_2169DF308()
{
  return &unk_26C7551A0;
}

uint64_t sub_2169DF314()
{
  return 0;
}

uint64_t sub_2169DF31C()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_2169DF328()
{
  return 0;
}

uint64_t sub_2169DF330()
{
  return 0;
}

BOOL sub_2169DF338(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x8000000217469618 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2169DF374(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C7551A0, a2, a3);
}

void *sub_2169DF398()
{
  return &unk_26C7551A0;
}

uint64_t sub_2169DF3A4(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_2169DF3AC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  *(void *)(a2 + 8) = &off_26C757088;
  return sub_2169DF444((unsigned int **)a2, v2);
}

uint64_t sub_2169DF3C4(uint64_t *a1)
{
  unsigned int v2 = atomic_load((unsigned int *)(*a1 + 152));
  if (v2 != 1)
  {
    long long v3 = (unsigned int *)operator new(0xA0uLL);
    sub_2169DEF68((uint64_t)v3, *a1);
    atomic_store(0, v3 + 38);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 38, 1u, memory_order_relaxed);
    int v4 = (void *)*a1;
    *a1 = (uint64_t)v3;
    if (v4) {
      sub_2169DD8A0(v4);
    }
  }
  return *a1;
}

void sub_2169DF430(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2169DF444(unsigned int **a1, uint64_t a2)
{
  int v4 = (unsigned int *)operator new(0xA0uLL);
  uint64_t result = sub_2169DEF68((uint64_t)v4, a2);
  atomic_store(0, v4 + 38);
  *a1 = v4;
  atomic_fetch_add_explicit((atomic_uint *volatile)v4 + 38, 1u, memory_order_relaxed);
  return result;
}

void sub_2169DF498(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2169DF4AC(uint64_t *a1)
{
  void v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, uint64_t *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_2169DF3C4(a1);
}

uint64_t sub_2169DF540(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 55) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C74E220);
  }
  else {
    return 0;
  }
}

uint64_t sub_2169DF578(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    long long v3 = a2[1];
    long long v8 = *a2;
    long long v9 = v3;
    uint64_t v4 = *((void *)a2 + 4);
    uint64_t v10 = v4;
    if (v4)
    {
      int v5 = (atomic_ullong *)(v4 - 16);
      if (*((void *)&v9 + 1)) {
        int v5 = (atomic_ullong *)*((void *)&v9 + 1);
      }
      atomic_fetch_add_explicit(v5, 1uLL, memory_order_relaxed);
    }
    if (&v8 != (long long *)a1)
    {
      sub_2168F83DC(a1);
      long long v6 = v9;
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v6;
      long long v8 = 0u;
      long long v9 = 0u;
      *(void *)(a1 + 32) = v10;
      uint64_t v10 = 0;
    }
    sub_2168F83DC((uint64_t)&v8);
  }
  return a1;
}

void sub_2169DF610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2169DF62C(void *a1, uint64_t a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  long long v6 = (const void *)a3[4];
  unint64_t v7 = *a3;
  uint64_t v8 = (uint64_t)v6 + 8 * *a3;
  int v26 = 0;
  uint64_t v27 = 0;
  int v25 = 0;
  sub_2169DFA48(&v25, v6, v8, v7);
  long long v9 = (char *)v25;
  if ((unint64_t)(v26 - (unsigned char *)v25) < 0x10) {
    goto LABEL_2;
  }
  if ((unint64_t)(v26 - (unsigned char *)v25) > 0x57)
  {
    if (v25 == v26) {
      goto LABEL_2;
    }
    uint64_t v13 = (char *)v25 + 8;
    do
    {
      if (v13 == v26) {
        goto LABEL_2;
      }
      unint64_t v14 = *((void *)v13 - 1);
      unint64_t v15 = *(void *)v13;
      v13 += 8;
    }
    while (v14 < v15);
    if (!sub_2169DFAC4((uint64_t)&v25))
    {
LABEL_2:
      sub_2169D1B08(a4 + 101);
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SdfListOp();
    }
  }
  else
  {
    do
    {
LABEL_4:
      if (v9 == v26 - 8) {
        goto LABEL_2;
      }
      uint64_t v10 = (uint64_t *)v9;
      v9 += 8;
    }
    while (v9 == v26);
    uint64_t v11 = *v10;
    char v12 = v9;
    while (v11 != *v12)
    {
      if (++v12 == (void *)v26) {
        goto LABEL_4;
      }
    }
  }
  unint64_t v16 = *a1 & 0xFFFFFFFFFFFFFFF8;
  if (v16)
  {
    unint64_t v17 = (const char *)(v16 + 16);
    if (*(char *)(v16 + 39) < 0) {
      unint64_t v17 = *(const char **)v17;
    }
  }
  else
  {
    unint64_t v17 = "";
  }
  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(a4 + 102));
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Duplicate items exist for field '%s' at '%s'", v19, v20, v17, Text);
  if (v24 >= 0) {
    long long v22 = (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)&v23;
  }
  else {
    long long v22 = (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)v23;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_RaiseError((pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser *)a4, v22, v21);
  if (SHIBYTE(v24) < 0) {
    operator delete(v23);
  }
  goto LABEL_2;
}

void sub_2169DF97C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,char a36)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2169DFA04(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X8>)
{
  *((void *)a1 + 1) = 0;
  sub_2169DFD00(a1);
}

void sub_2169DFA34(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

void *sub_2169DFA48(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    uint64_t result = sub_21677CACC(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2169DFAA8(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_2169DFAC4(uint64_t a1)
{
  uint64_t v7 = 0;
  size_t v8 = 0;
  uint64_t v9 = 0;
  sub_21677EA60(&v7, *(const void **)a1, *(void *)(a1 + 8), (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  std::__sort<std::__less<unsigned long long,unsigned long long> &,unsigned long long *>();
  uint64_t v1 = v8;
  uint64_t v2 = v7;
  if (v7 == v8)
  {
LABEL_6:
    if (!v7) {
      return v2 != v1;
    }
LABEL_7:
    size_t v8 = v7;
    operator delete(v7);
    return v2 != v1;
  }
  long long v3 = v7 + 8;
  while (v3 != v8)
  {
    uint64_t v4 = *((void *)v3 - 1);
    uint64_t v5 = *(void *)v3;
    v3 += 8;
    if (v4 == v5)
    {
      uint64_t v2 = v3 - 16;
      goto LABEL_6;
    }
  }
  uint64_t v2 = v8;
  if (v7) {
    goto LABEL_7;
  }
  return v2 != v1;
}

void sub_2169DFB60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2169DFB7C(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  sub_21677EA60((void *)(a1 + 8), *(const void **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4sub_2168EBBB8(&a9, 0) = 0;
  *(void *)(a1 + 48) = 0;
  sub_21677EA60((void *)(a1 + 32), *(const void **)(a2 + 32), *(void *)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  sub_21677EA60((void *)(a1 + 56), *(const void **)(a2 + 56), *(void *)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3);
  *(void *)(a1 + 8sub_2168EBBB8(&a9, 0) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  sub_21677EA60((void *)(a1 + 80), *(const void **)(a2 + 80), *(void *)(a2 + 88), (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 3);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 12sub_2168EBBB8(&a9, 0) = 0;
  sub_21677EA60((void *)(a1 + 104), *(const void **)(a2 + 104), *(void *)(a2 + 112), (uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 3);
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  sub_21677EA60((void *)(a1 + 128), *(const void **)(a2 + 128), *(void *)(a2 + 136), (uint64_t)(*(void *)(a2 + 136) - *(void *)(a2 + 128)) >> 3);
  return a1;
}

void sub_2169DFC84(_Unwind_Exception *exception_object)
{
  size_t v8 = *v6;
  if (*v6)
  {
    v1[14] = v8;
    operator delete(v8);
  }
  uint64_t v9 = *v5;
  if (*v5)
  {
    void v1[11] = v9;
    operator delete(v9);
  }
  uint64_t v10 = *v4;
  if (*v4)
  {
    v1[8] = v10;
    operator delete(v10);
  }
  uint64_t v11 = *v3;
  if (*v3)
  {
    v1[5] = v11;
    operator delete(v11);
  }
  char v12 = *v2;
  if (*v2)
  {
    v1[2] = v12;
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

void sub_2169DFD00(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if ((sub_21698F698(a1) & 1) == 0) {
    pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SdfListOp();
  }
  sub_2169E00C0((uint64_t *)a1);
  pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::Swap();
}

void sub_2169DFDB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2169DD2C4((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2169DFDCC(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v5, a1);
  *(void *)(a1 + 8) = &off_26C757140;
  sub_2169E0058((unsigned int **)a1, a2);
  if (v6) {
    (*(void (**)(unsigned char *))(v6 + 32))(v5);
  }
  return a1;
}

void sub_2169DFE60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2169DFE9C(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 152), 1u, memory_order_relaxed);
  }
  return result;
}

void sub_2169DFEB8(void **a1)
{
  uint64_t v1 = *a1;
  if (v1) {
    sub_2169DD8A0(v1);
  }
}

void *sub_2169DFEC8(void *result, void *a2)
{
  *a2 = *result;
  _DWORD *result = 0;
  return result;
}

uint64_t sub_2169DFED8()
{
  return 1;
}

unint64_t sub_2169DFEE0(unsigned __int8 **a1)
{
  return sub_2169DD95C(*a1);
}

void sub_2169DFEE8()
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::operator==();
}

void sub_2169DFEF4()
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::operator==();
}

uint64_t sub_2169DFF00()
{
  return 0;
}

void sub_2169DFF0C()
{
}

void *sub_2169DFF1C()
{
  return &unk_26C7551B0;
}

uint64_t sub_2169DFF28()
{
  return 0;
}

uint64_t sub_2169DFF30()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_2169DFF3C()
{
  return 0;
}

uint64_t sub_2169DFF44()
{
  return 0;
}

BOOL sub_2169DFF4C(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x8000000217478D90 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2169DFF88(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C7551B0, a2, a3);
}

void *sub_2169DFFAC()
{
  return &unk_26C7551B0;
}

uint64_t sub_2169DFFB8(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_2169DFFC0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  *(void *)(a2 + 8) = &off_26C757140;
  return sub_2169E0058((unsigned int **)a2, v2);
}

uint64_t sub_2169DFFD8(uint64_t *a1)
{
  unsigned int v2 = atomic_load((unsigned int *)(*a1 + 152));
  if (v2 != 1)
  {
    long long v3 = (unsigned int *)operator new(0xA0uLL);
    sub_2169DFB7C((uint64_t)v3, *a1);
    atomic_store(0, v3 + 38);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 38, 1u, memory_order_relaxed);
    uint64_t v4 = (void *)*a1;
    *a1 = (uint64_t)v3;
    if (v4) {
      sub_2169DD8A0(v4);
    }
  }
  return *a1;
}

void sub_2169E0044(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2169E0058(unsigned int **a1, uint64_t a2)
{
  uint64_t v4 = (unsigned int *)operator new(0xA0uLL);
  uint64_t result = sub_2169DFB7C((uint64_t)v4, a2);
  atomic_store(0, v4 + 38);
  *a1 = v4;
  atomic_fetch_add_explicit((atomic_uint *volatile)v4 + 38, 1u, memory_order_relaxed);
  return result;
}

void sub_2169E00AC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2169E00C0(uint64_t *a1)
{
  void v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, uint64_t *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_2169DFFD8(a1);
}

uint64_t sub_2169E0154(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    long long v3 = a2[1];
    long long v8 = *a2;
    long long v9 = v3;
    uint64_t v4 = *((void *)a2 + 4);
    uint64_t v10 = v4;
    if (v4)
    {
      uint64_t v5 = (atomic_ullong *)(v4 - 16);
      if (*((void *)&v9 + 1)) {
        uint64_t v5 = (atomic_ullong *)*((void *)&v9 + 1);
      }
      atomic_fetch_add_explicit(v5, 1uLL, memory_order_relaxed);
    }
    if (&v8 != (long long *)a1)
    {
      sub_2169B1EE4((void *)a1);
      long long v6 = v9;
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v6;
      long long v8 = 0u;
      long long v9 = 0u;
      *(void *)(a1 + 32) = v10;
      uint64_t v10 = 0;
    }
    sub_2169B1EE4(&v8);
  }
  return a1;
}

void sub_2169E01EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2169E0208(void *a1, uint64_t a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  long long v6 = (long long *)a3[4];
  unint64_t v7 = *a3;
  long long v8 = (long long *)((char *)v6 + 24 * *a3);
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  uint64_t v32 = 0;
  sub_2169E0664((char *)&v32, v6, v8, v7);
  long long v9 = v32;
  uint64_t v10 = v33;
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v33 - (uint64_t)v32) >> 3);
  if (v11 >= 2)
  {
    if (v11 > 0xA)
    {
      uint64_t v22 = sub_2169DADDC((uint64_t)v32, v33);
      if (v33 != v22 && sub_2169DACEC(&v32))
      {
LABEL_27:
        unint64_t v23 = *a1 & 0xFFFFFFFFFFFFFFF8;
        if (v23)
        {
          uint64_t v24 = (const char *)(v23 + 16);
          if (*(char *)(v23 + 39) < 0) {
            uint64_t v24 = *(const char **)v24;
          }
        }
        else
        {
          uint64_t v24 = "";
        }
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(a4 + 102));
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Duplicate items exist for field '%s' at '%s'", v26, v27, v24, Text);
        if (v31 >= 0) {
          p_p = (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)&__p;
        }
        else {
          p_p = (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)__p;
        }
        pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_RaiseError((pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser *)a4, p_p, v28);
        if (v31 < 0) {
          operator delete(__p);
        }
      }
    }
    else
    {
      char v12 = (long long *)(v33 - 24);
      while (v9 != v12)
      {
        uint64_t v13 = v9;
        long long v9 = (long long *)((char *)v9 + 24);
        if (v9 != (long long *)v10)
        {
          uint64_t v14 = *((unsigned __int8 *)v13 + 23);
          size_t v15 = *((void *)v13 + 1);
          if ((v14 & 0x80u) == 0) {
            uint64_t v16 = *((unsigned __int8 *)v13 + 23);
          }
          else {
            uint64_t v16 = *((void *)v13 + 1);
          }
          unint64_t v17 = v9;
          do
          {
            uint64_t v18 = *((unsigned __int8 *)v17 + 23);
            int v19 = (char)v18;
            if ((v18 & 0x80u) != 0) {
              uint64_t v18 = *((void *)v17 + 1);
            }
            if (v16 == v18)
            {
              if (v19 >= 0) {
                uint64_t v20 = v17;
              }
              else {
                uint64_t v20 = *(long long **)v17;
              }
              if ((v14 & 0x80) != 0)
              {
                if (!memcmp(*(const void **)v13, v20, v15)) {
                  goto LABEL_27;
                }
              }
              else
              {
                if (!v14) {
                  goto LABEL_27;
                }
                uint64_t v21 = 0;
                while (*((unsigned __int8 *)v13 + v21) == *((unsigned __int8 *)v20 + v21))
                {
                  if (v14 == ++v21) {
                    goto LABEL_27;
                  }
                }
              }
            }
            unint64_t v17 = (long long *)((char *)v17 + 24);
          }
          while (v17 != (long long *)v10);
        }
      }
    }
  }
  sub_2169D1B08(a4 + 101);
  pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SdfListOp();
}

void sub_2169E05DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,char a37)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  std::type_info __p = &a34;
  sub_216782F20((void ***)&__p);
  _Unwind_Resume(a1);
}

char *sub_2169E0664(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    sub_216782E84(result, a4);
    uint64_t result = sub_21695F6C0((uint64_t)(v6 + 16), a2, a3, *((char **)v6 + 1));
    *((void *)v6 + 1) = result;
  }
  return result;
}

void sub_2169E06CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_216782F20(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2169E06EC(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    long long v3 = a2[1];
    long long v8 = *a2;
    long long v9 = v3;
    uint64_t v4 = *((void *)a2 + 4);
    uint64_t v10 = v4;
    if (v4)
    {
      uint64_t v5 = (atomic_ullong *)(v4 - 16);
      if (*((void *)&v9 + 1)) {
        uint64_t v5 = (atomic_ullong *)*((void *)&v9 + 1);
      }
      atomic_fetch_add_explicit(v5, 1uLL, memory_order_relaxed);
    }
    if (&v8 != (long long *)a1)
    {
      sub_2169B2E0C((void *)a1);
      long long v6 = v9;
      *(_OWORD *)a1 = v8;
      *(_OWORD *)(a1 + 16) = v6;
      long long v8 = 0u;
      long long v9 = 0u;
      *(void *)(a1 + 32) = v10;
      uint64_t v10 = 0;
    }
    sub_2169B2E0C(&v8);
  }
  return a1;
}

void sub_2169E0784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2169E07A0(void *a1, uint64_t a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  long long v6 = (uint64_t *)a3[4];
  unint64_t v7 = *a3;
  long long v8 = &v6[*a3];
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  unint64_t v23 = 0;
  sub_2169E0C40(&v23, v6, v8, v7);
  long long v9 = v23;
  if ((unint64_t)(v24 - v23) >= 0x10)
  {
    if ((unint64_t)(v24 - v23) > 0x57)
    {
      uint64_t v13 = (char *)sub_2169E0D98(v23, v24);
      if (v24 == v13 || !sub_2169E0CB8((uint64_t **)&v23)) {
        goto LABEL_20;
      }
    }
    else
    {
      do
      {
LABEL_3:
        if (v9 == v24 - 8) {
          goto LABEL_20;
        }
        uint64_t v10 = v9;
        v9 += 8;
      }
      while (v9 == v24);
      unint64_t v11 = *(void *)v10 & 0xFFFFFFFFFFFFFFF8;
      char v12 = v9;
      while (v11 != (*(void *)v12 & 0xFFFFFFFFFFFFFFF8))
      {
        v12 += 8;
        if (v12 == v24) {
          goto LABEL_3;
        }
      }
    }
    unint64_t v14 = *a1 & 0xFFFFFFFFFFFFFFF8;
    if (v14)
    {
      size_t v15 = (const char *)(v14 + 16);
      if (*(char *)(v14 + 39) < 0) {
        size_t v15 = *(const char **)v15;
      }
    }
    else
    {
      size_t v15 = "";
    }
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(a4 + 102));
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Duplicate items exist for field '%s' at '%s'", v17, v18, v15, Text);
    if (v22 >= 0) {
      p_p = (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)&__p;
    }
    else {
      p_p = (pxrInternal__aapl__pxrReserved__::Sdf_TextParserContext *)__p;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser::_RaiseError((pxrInternal__aapl__pxrReserved__::Sdf_TextFileFormatParser *)a4, p_p, v19);
    if (v22 < 0) {
      operator delete(__p);
    }
  }
LABEL_20:
  sub_2169D1B08(a4 + 101);
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SdfListOp();
}

void sub_2169E0AE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,char a36)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  std::type_info __p = &a33;
  sub_216889A04((void ***)&__p);
  _Unwind_Resume(a1);
}

void **sub_2169E0B70(void **a1)
{
  long long v3 = a1 + 16;
  sub_216889A04(&v3);
  long long v3 = a1 + 13;
  sub_216889A04(&v3);
  long long v3 = a1 + 10;
  sub_216889A04(&v3);
  long long v3 = a1 + 7;
  sub_216889A04(&v3);
  long long v3 = a1 + 4;
  sub_216889A04(&v3);
  long long v3 = a1 + 1;
  sub_216889A04(&v3);
  return a1;
}

void sub_2169E0BFC(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X8>)
{
  *((void *)a1 + 1) = 0;
  sub_2169E2358(a1);
}

void sub_2169E0C2C(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

void *sub_2169E0C40(void *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = (uint64_t)result;
    sub_21677CACC(result, a4);
    return (void *)sub_21698FAA0(v6, a2, a3);
  }
  return result;
}

void sub_2169E0CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

BOOL sub_2169E0CB8(uint64_t **a1)
{
  long long v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  sub_21698FA28(&v9, *a1, a1[1], a1[1] - *a1);
  unint64_t v1 = 126 - 2 * __clz(v10 - v9);
  if (v10 == v9) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = v1;
  }
  sub_2169E0EAC((uint64_t)v9, v10, (uint64_t)&v12, v2, 1);
  long long v3 = v9;
  if (v9 != v10)
  {
    uint64_t v4 = v9 + 1;
    while (v4 != v10)
    {
      unint64_t v5 = *(v4 - 1) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v6 = *v4++ & 0xFFFFFFFFFFFFFFF8;
      if (v5 == v6)
      {
        long long v3 = v4 - 2;
        goto LABEL_10;
      }
    }
    long long v3 = v10;
  }
LABEL_10:
  BOOL v7 = v3 != v10;
  uint64_t v13 = (void **)&v9;
  sub_216889A04(&v13);
  return v7;
}

void sub_2169E0D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  *(void *)(v10 - 24) = &a10;
  sub_216889A04((void ***)(v10 - 24));
  _Unwind_Resume(a1);
}

void *sub_2169E0D98(void *a1, void *a2)
{
  uint64_t v2 = a1;
  if (a1 != a2)
  {
    uint64_t v4 = a1 + 1;
    if (a1 + 1 == a2) {
      return a2;
    }
    uint64_t v5 = *a1;
    unint64_t v6 = a1;
    while (1)
    {
      uint64_t v2 = v6;
      unint64_t v6 = v4;
      uint64_t v7 = v5;
      uint64_t v5 = *v6;
      if (v7 && v5)
      {
        if (v7 == v5) {
          return v2;
        }
        unint64_t v8 = v7 & 0xFFFFFFFFFFFFFFF8;
        unint64_t v9 = v5 & 0xFFFFFFFFFFFFFFF8;
        unint64_t v10 = *(void *)(v8 + 8);
        unint64_t v11 = *(void *)((v5 & 0xFFFFFFFFFFFFFFF8) + 8);
        if (v10 >= v11)
        {
          if (v10 != v11) {
            return v6 - 1;
          }
          unint64_t v14 = *(const void **)(v9 + 16);
          unint64_t v12 = v9 + 16;
          uint64_t v13 = v14;
          int v15 = *(char *)(v12 + 23);
          uint64_t v18 = *(const void **)(v8 + 16);
          unint64_t v16 = v8 + 16;
          unint64_t v17 = v18;
          int v19 = *(char *)(v16 + 23);
          if (v19 >= 0) {
            size_t v20 = *(unsigned __int8 *)(v16 + 23);
          }
          else {
            size_t v20 = *(void *)(v16 + 8);
          }
          if (v19 >= 0) {
            uint64_t v21 = (const void *)v16;
          }
          else {
            uint64_t v21 = v17;
          }
          if (v15 >= 0) {
            size_t v22 = *(unsigned __int8 *)(v12 + 23);
          }
          else {
            size_t v22 = *(void *)(v12 + 8);
          }
          if (v15 >= 0) {
            unint64_t v23 = (const void *)v12;
          }
          else {
            unint64_t v23 = v13;
          }
          if (v22 >= v20) {
            size_t v24 = v20;
          }
          else {
            size_t v24 = v22;
          }
          int v25 = memcmp(v21, v23, v24);
          BOOL v26 = v20 < v22;
          if (v25) {
            BOOL v26 = v25 < 0;
          }
          if (!v26) {
            return v2;
          }
        }
      }
      else if (v7 || !v5)
      {
        return v2;
      }
      uint64_t v4 = v6 + 1;
      if (v6 + 1 == a2) {
        return a2;
      }
    }
  }
  return v2;
}

uint64_t sub_2169E0EAC(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v10 = (uint64_t *)result;
LABEL_2:
  unint64_t v11 = a2 - 1;
  unint64_t v12 = v10;
LABEL_3:
  uint64_t v13 = 1 - a4;
  while (1)
  {
    unint64_t v10 = v12;
    uint64_t v14 = v13;
    uint64_t v15 = (char *)a2 - (char *)v12;
    unint64_t v16 = a2 - v12;
    if (!(!v6 & v5))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t result = sub_2168BE1F8(a3, a2 - 1, v12);
          if (result)
          {
            uint64_t v23 = *v12;
            uint64_t *v12 = *v11;
            uint64_t *v11 = v23;
          }
          break;
        case 3uLL:
          uint64_t result = sub_2169E14C0(v12, v12 + 1, a2 - 1, a3);
          break;
        case 4uLL:
          uint64_t result = sub_2169E1B20(v12, v12 + 1, v12 + 2, a2 - 1, a3);
          break;
        case 5uLL:
          uint64_t result = sub_2169E1BD4(v12, v12 + 1, v12 + 2, v12 + 3, a2 - 1, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v15 <= 191) {
      break;
    }
    if (v14 == 1)
    {
      if (v12 != a2)
      {
        return (uint64_t)sub_2169E1CB0(v12, a2, a2, a3);
      }
      return result;
    }
    unint64_t v17 = v16 >> 1;
    uint64_t v18 = &v12[v16 >> 1];
    if ((unint64_t)v15 >= 0x401)
    {
      sub_2169E14C0(v12, &v12[v16 >> 1], a2 - 1, a3);
      sub_2169E14C0(v12 + 1, v18 - 1, a2 - 2, a3);
      sub_2169E14C0(v12 + 2, &v12[v17 + 1], a2 - 3, a3);
      sub_2169E14C0(v18 - 1, v18, &v12[v17 + 1], a3);
      uint64_t v19 = *v12;
      uint64_t *v12 = *v18;
      *uint64_t v18 = v19;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      sub_2169E14C0(&v12[v16 >> 1], v12, a2 - 1, a3);
      if (a5) {
        goto LABEL_14;
      }
    }
    if ((sub_2168BE1F8(a3, v12 - 1, v12) & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_2169E15B0(v12, a2, a3);
      unint64_t v12 = (uint64_t *)result;
      goto LABEL_19;
    }
LABEL_14:
    size_t v20 = sub_2169E1738(v12, a2, a3);
    if ((v21 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v22 = sub_2169E18C8(v12, v20, a3);
    unint64_t v12 = v20 + 1;
    uint64_t result = sub_2169E18C8(v20 + 1, a2, a3);
    if (result)
    {
      a4 = -v14;
      a2 = v20;
      if (v22) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v13 = v14 + 1;
    if (!v22)
    {
LABEL_17:
      uint64_t result = sub_2169E0EAC(v10, v20, a3, -v14, a5 & 1);
      unint64_t v12 = v20 + 1;
LABEL_19:
      a5 = 0;
      a4 = -v14;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return sub_2169E1274((uint64_t)v12, a2, a3);
  }
  else
  {
    return sub_2169E13AC((uint64_t)v12, a2, a3);
  }
}

uint64_t sub_2169E1274(uint64_t result, uint64_t *a2, uint64_t a3)
{
  if ((uint64_t *)result != a2)
  {
    v18[9] = v3;
    v18[10] = v4;
    char v6 = (uint64_t *)result;
    uint64_t v7 = (uint64_t *)(result + 8);
    if ((uint64_t *)(result + 8) != a2)
    {
      uint64_t v9 = 0;
      unint64_t v10 = (uint64_t *)result;
      do
      {
        unint64_t v11 = v10;
        unint64_t v10 = v7;
        uint64_t result = sub_2168BE1F8(a3, v7, v11);
        if (result)
        {
          v18[0] = *v10;
          uint64_t *v10 = 0;
          uint64_t v12 = v9;
          while (1)
          {
            uint64_t v13 = (uint64_t *)((char *)v6 + v12);
            uint64_t v14 = *(uint64_t *)((char *)v6 + v12 + 8);
            if ((v14 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            uint64_t v15 = *v13;
            uint64_t *v13 = 0;
            v13[1] = v15;
            if (!v12) {
              break;
            }
            v12 -= 8;
            uint64_t result = sub_2168BE1F8(a3, v18, (uint64_t *)((char *)v6 + v12));
            if ((result & 1) == 0)
            {
              unint64_t v16 = (uint64_t *)((char *)v6 + v12 + 8);
              goto LABEL_12;
            }
          }
          unint64_t v16 = v6;
LABEL_12:
          if (v18 == v16)
          {
            uint64_t v17 = v18[0];
          }
          else
          {
            if ((*v16 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(*v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            uint64_t v17 = 0;
            uint64_t *v16 = v18[0];
            v18[0] = 0;
          }
          if ((v17 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
        }
        uint64_t v7 = v10 + 1;
        v9 += 8;
      }
      while (v10 + 1 != a2);
    }
  }
  return result;
}

uint64_t sub_2169E13AC(uint64_t result, uint64_t *a2, uint64_t a3)
{
  if ((uint64_t *)result != a2)
  {
    v13[7] = v3;
    v13[8] = v4;
    char v6 = (uint64_t *)result;
    for (uint64_t i = (uint64_t *)(result + 8); v6 + 1 != a2; uint64_t i = v6 + 1)
    {
      uint64_t v9 = v6;
      char v6 = i;
      uint64_t result = sub_2168BE1F8(a3, i, v9);
      if (result)
      {
        v13[0] = *v6;
        *char v6 = 0;
        unint64_t v10 = v6;
        do
        {
          if ((*v10 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          unint64_t v11 = v10 - 1;
          uint64_t *v10 = *(v10 - 1);
          *(v10 - 1) = 0;
          uint64_t result = sub_2168BE1F8(a3, v13, v10 - 2);
          unint64_t v10 = v11;
        }
        while ((result & 1) != 0);
        if (v11 == v13)
        {
          uint64_t v12 = v13[0];
        }
        else
        {
          if ((*v11 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          uint64_t v12 = 0;
          uint64_t *v11 = v13[0];
          v13[0] = 0;
        }
        if ((v12 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
    }
  }
  return result;
}

uint64_t sub_2169E14C0(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  char v8 = sub_2168BE1F8(a4, a2, a1);
  uint64_t result = sub_2168BE1F8(a4, a3, a2);
  if ((v8 & 1) == 0)
  {
    if (!result) {
      return result;
    }
    uint64_t v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    if (!sub_2168BE1F8(a4, a2, a1)) {
      return 1;
    }
    uint64_t v12 = *a1;
    *a1 = *a2;
    *a2 = v12;
    return 2;
  }
  uint64_t v10 = *a1;
  if (!result)
  {
    *a1 = *a2;
    *a2 = v10;
    if (!sub_2168BE1F8(a4, a3, a2)) {
      return 1;
    }
    uint64_t v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    return 2;
  }
  *a1 = *a3;
  *a3 = v10;
  return 1;
}

uint64_t *sub_2169E15B0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t v12 = *a1;
  *a1 = 0;
  if (sub_2168BE1F8(a3, &v12, a2 - 1))
  {
    char v6 = a1;
    do
      ++v6;
    while ((sub_2168BE1F8(a3, &v12, v6) & 1) == 0);
  }
  else
  {
    uint64_t v7 = a1 + 1;
    do
    {
      char v6 = v7;
      if (v7 >= v4) {
        break;
      }
      int v8 = sub_2168BE1F8(a3, &v12, v7);
      uint64_t v7 = v6 + 1;
    }
    while (!v8);
  }
  if (v6 < v4)
  {
    do
      --v4;
    while ((sub_2168BE1F8(a3, &v12, v4) & 1) != 0);
  }
  while (v6 < v4)
  {
    uint64_t v9 = *v6;
    *char v6 = *v4;
    uint64_t *v4 = v9;
    do
      ++v6;
    while (!sub_2168BE1F8(a3, &v12, v6));
    do
      --v4;
    while ((sub_2168BE1F8(a3, &v12, v4) & 1) != 0);
  }
  uint64_t v10 = v6 - 1;
  if (v6 - 1 != a1)
  {
    if ((*a1 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*a1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    *a1 = *v10;
    uint64_t *v10 = 0;
  }
  if (&v12 == v10)
  {
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    if ((*v10 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t *v10 = v12;
  }
  return v6;
}

uint64_t *sub_2169E1738(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v13 = *a1;
  *a1 = 0;
  do
    ++v6;
  while ((sub_2168BE1F8(a3, &a1[v6], &v13) & 1) != 0);
  uint64_t v7 = &a1[v6];
  int v8 = &a1[v6 - 1];
  if (v6 == 1)
  {
    do
    {
      if (v7 >= a2) {
        break;
      }
      --a2;
    }
    while ((sub_2168BE1F8(a3, a2, &v13) & 1) == 0);
  }
  else
  {
    do
      --a2;
    while (!sub_2168BE1F8(a3, a2, &v13));
  }
  if (v7 < a2)
  {
    uint64_t v9 = &a1[v6];
    uint64_t v10 = a2;
    do
    {
      uint64_t v11 = *v9;
      uint64_t *v9 = *v10;
      uint64_t *v10 = v11;
      do
        ++v9;
      while ((sub_2168BE1F8(a3, v9, &v13) & 1) != 0);
      do
        --v10;
      while (!sub_2168BE1F8(a3, v10, &v13));
    }
    while (v9 < v10);
    int v8 = v9 - 1;
  }
  if (v8 != a1)
  {
    if ((*a1 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*a1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    *a1 = *v8;
    *int v8 = 0;
  }
  if (&v13 == v8)
  {
    if ((v13 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    if ((*v8 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    *int v8 = v13;
  }
  return v8;
}

BOOL sub_2169E18C8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      int v8 = a2 - 1;
      if (sub_2168BE1F8(a3, a2 - 1, a1))
      {
        uint64_t v9 = *a1;
        *a1 = *v8;
        *int v8 = v9;
      }
      return 1;
    case 3:
      sub_2169E14C0(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_2169E1B20(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_2169E1BD4(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      uint64_t v10 = a1 + 2;
      sub_2169E14C0(a1, a1 + 1, a1 + 2, a3);
      uint64_t v11 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    if (sub_2168BE1F8(a3, v11, v10))
    {
      uint64_t v20 = *v11;
      uint64_t *v11 = 0;
      uint64_t v14 = v12;
      while (1)
      {
        uint64_t v15 = (uint64_t *)((char *)a1 + v14 + 24);
        unint64_t v16 = (uint64_t *)((char *)a1 + v14 + 16);
        if (v16 != v15)
        {
          if ((*v15 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          void *v15 = *v16;
          void *v16 = 0;
        }
        if (v14 == -16) {
          break;
        }
        char v17 = sub_2168BE1F8(a3, &v20, (uint64_t *)((char *)a1 + v14 + 8));
        v14 -= 8;
        if ((v17 & 1) == 0)
        {
          uint64_t v18 = (uint64_t *)((char *)a1 + v14 + 24);
          goto LABEL_16;
        }
      }
      uint64_t v18 = a1;
LABEL_16:
      if (&v20 == v18)
      {
        uint64_t v19 = v20;
      }
      else
      {
        if ((*v18 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        uint64_t v19 = 0;
        *uint64_t v18 = v20;
        uint64_t v20 = 0;
      }
      if ((v19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (++v13 == 8) {
        return v11 + 1 == a2;
      }
    }
    uint64_t v10 = v11;
    v12 += 8;
    if (++v11 == a2) {
      return 1;
    }
  }
}

uint64_t sub_2169E1B20(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  sub_2169E14C0(a1, a2, a3, a5);
  uint64_t result = sub_2168BE1F8(a5, a4, a3);
  if (result)
  {
    uint64_t v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    uint64_t result = sub_2168BE1F8(a5, a3, a2);
    if (result)
    {
      uint64_t v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      uint64_t result = sub_2168BE1F8(a5, a2, a1);
      if (result)
      {
        uint64_t v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

uint64_t sub_2169E1BD4(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  sub_2169E1B20(a1, a2, a3, a4, a6);
  uint64_t result = sub_2168BE1F8(a6, a5, a4);
  if (result)
  {
    uint64_t v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    uint64_t result = sub_2168BE1F8(a6, a4, a3);
    if (result)
    {
      uint64_t v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      uint64_t result = sub_2168BE1F8(a6, a3, a2);
      if (result)
      {
        uint64_t v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        uint64_t result = sub_2168BE1F8(a6, a2, a1);
        if (result)
        {
          uint64_t v16 = *a1;
          *a1 = *a2;
          *a2 = v16;
        }
      }
    }
  }
  return result;
}

uint64_t *sub_2169E1CB0(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = &a1[v10];
      do
      {
        sub_2169E1E48((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = a2;
    if (a2 != a3)
    {
      uint64_t v14 = a2;
      do
      {
        if (sub_2168BE1F8(a4, v14, a1))
        {
          uint64_t v15 = *v14;
          uint64_t *v14 = *a1;
          *a1 = v15;
          sub_2169E1E48((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 9)
    {
      uint64_t v16 = (unint64_t)v8 >> 3;
      char v17 = a2 - 1;
      do
      {
        uint64_t v18 = *a1;
        *a1 = 0;
        uint64_t v19 = sub_2169E1FE8(a1, a4, v16);
        uint64_t v20 = *v19;
        uint64_t v21 = *v19 & 7;
        if (v17 == v19)
        {
          if (v21) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          *uint64_t v19 = v18;
        }
        else
        {
          if (v21) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          *uint64_t v19 = *v17;
          *char v17 = v18;
          sub_2169E20C4((uint64_t)a1, (uint64_t)(v19 + 1), a4, v19 + 1 - a1);
        }
        --v17;
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_2169E1E48(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    v19[11] = v4;
    v19[12] = v5;
    uint64_t v7 = a4;
    uint64_t v8 = result;
    int64_t v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= ((uint64_t)a4 - result) >> 3)
    {
      uint64_t v12 = ((uint64_t)a4 - result) >> 2;
      uint64_t v13 = v12 + 1;
      uint64_t v14 = (uint64_t *)(result + 8 * (v12 + 1));
      uint64_t v15 = v12 + 2;
      if (v12 + 2 < a3 && sub_2168BE1F8(a2, (uint64_t *)(result + 8 * (v12 + 1)), v14 + 1))
      {
        ++v14;
        uint64_t v13 = v15;
      }
      uint64_t result = sub_2168BE1F8(a2, v14, v7);
      if ((result & 1) == 0)
      {
        v19[0] = *v7;
        *uint64_t v7 = 0;
        do
        {
          uint64_t v16 = v14;
          if (v14 != v7)
          {
            if ((*v7 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(*v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            *uint64_t v7 = *v14;
            uint64_t *v14 = 0;
          }
          if (v9 < v13) {
            break;
          }
          uint64_t v17 = (2 * v13) | 1;
          uint64_t v14 = (uint64_t *)(v8 + 8 * v17);
          uint64_t v18 = 2 * v13 + 2;
          if (v18 < a3 && sub_2168BE1F8(a2, (uint64_t *)(v8 + 8 * v17), v14 + 1))
          {
            ++v14;
            uint64_t v17 = v18;
          }
          uint64_t result = sub_2168BE1F8(a2, v14, v19);
          uint64_t v7 = v16;
          uint64_t v13 = v17;
        }
        while (!result);
        if (v19 == v16)
        {
          if ((v19[0] & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v19[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
        }
        else
        {
          if ((*v16 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          uint64_t *v16 = v19[0];
        }
      }
    }
  }
  return result;
}

uint64_t *sub_2169E1FE8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    int64_t v9 = &a1[v6 + 1];
    uint64_t v10 = 2 * v6;
    uint64_t v6 = (2 * v6) | 1;
    uint64_t v11 = v10 + 2;
    if (v10 + 2 < a3 && sub_2168BE1F8(a2, v9, v9 + 1))
    {
      ++v9;
      uint64_t v6 = v11;
    }
    if (v9 != a1)
    {
      if ((*a1 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      *a1 = *v9;
      uint64_t *v9 = 0;
    }
    a1 = v9;
  }
  while (v6 <= v8);
  return v9;
}

uint64_t sub_2169E20C4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v13[9] = v4;
    v13[10] = v5;
    uint64_t v8 = result;
    unint64_t v9 = v6 >> 1;
    uint64_t v10 = (uint64_t *)(result + 8 * (v6 >> 1));
    uint64_t v11 = (uint64_t *)(a2 - 8);
    uint64_t result = sub_2168BE1F8(a3, v10, (uint64_t *)(a2 - 8));
    if (result)
    {
      v13[0] = *v11;
      uint64_t *v11 = 0;
      do
      {
        uint64_t v12 = v10;
        if (v10 != v11)
        {
          if ((*v11 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          uint64_t *v11 = *v10;
          uint64_t *v10 = 0;
        }
        if (!v9) {
          break;
        }
        unint64_t v9 = (v9 - 1) >> 1;
        uint64_t v10 = (uint64_t *)(v8 + 8 * v9);
        uint64_t result = sub_2168BE1F8(a3, v10, v13);
        uint64_t v11 = v12;
      }
      while ((result & 1) != 0);
      if (v13 == v12)
      {
        if ((v13[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v13[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
      else
      {
        if ((*v12 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        uint64_t *v12 = v13[0];
      }
    }
  }
  return result;
}

uint64_t sub_2169E21E0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  sub_21698FA28((void *)(a1 + 8), *(uint64_t **)(a2 + 8), *(uint64_t **)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 3);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4sub_2168EBBB8(&a9, 0) = 0;
  *(void *)(a1 + 48) = 0;
  sub_21698FA28((void *)(a1 + 32), *(uint64_t **)(a2 + 32), *(uint64_t **)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  sub_21698FA28((void *)(a1 + 56), *(uint64_t **)(a2 + 56), *(uint64_t **)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 3);
  *(void *)(a1 + 8sub_2168EBBB8(&a9, 0) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  sub_21698FA28((void *)(a1 + 80), *(uint64_t **)(a2 + 80), *(uint64_t **)(a2 + 88), (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 3);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 12sub_2168EBBB8(&a9, 0) = 0;
  sub_21698FA28((void *)(a1 + 104), *(uint64_t **)(a2 + 104), *(uint64_t **)(a2 + 112), (uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 3);
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  sub_21698FA28((void *)(a1 + 128), *(uint64_t **)(a2 + 128), *(uint64_t **)(a2 + 136), (uint64_t)(*(void *)(a2 + 136) - *(void *)(a2 + 128)) >> 3);
  return a1;
}

void sub_2169E22F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  sub_216889A04((void ***)va);
  sub_216889A04((void ***)va);
  sub_216889A04((void ***)va);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

void sub_2169E2358(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if ((sub_21698F7B0(a1) & 1) == 0) {
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SdfListOp();
  }
  sub_2169E2AA8((uint64_t *)a1);
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::Swap();
}

void sub_2169E241C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t sub_2169E2430(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v5, a1);
  *(void *)(a1 + 8) = &off_26C7571F8;
  sub_2169E2A40((unsigned int **)a1, a2);
  if (v6) {
    (*(void (**)(unsigned char *))(v6 + 32))(v5);
  }
  return a1;
}

void sub_2169E24C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2169E2500(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 152), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *sub_2169E2520(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2169E2630(a1);
}

uint64_t sub_2169E2530()
{
  return 1;
}

unint64_t sub_2169E2538(unsigned __int8 **a1)
{
  return sub_2169E26E4(*a1);
}

void sub_2169E2540()
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::operator==();
}

void sub_2169E254C()
{
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::operator==();
}

uint64_t sub_2169E2558()
{
  return 0;
}

void sub_2169E2564()
{
}

void *sub_2169E2574()
{
  return &unk_26C7551D0;
}

uint64_t sub_2169E2580()
{
  return 0;
}

uint64_t sub_2169E2588()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_2169E2594()
{
  return 0;
}

uint64_t sub_2169E259C()
{
  return 0;
}

BOOL sub_2169E25A4(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x8000000217478DC2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2169E25E0(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C7551D0, a2, a3);
}

void *sub_2169E2604()
{
  return &unk_26C7551D0;
}

uint64_t sub_2169E2610(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_2169E2618@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  *(void *)(a2 + 8) = &off_26C7571F8;
  return sub_2169E2A40((unsigned int **)a2, v2);
}

uint64_t *sub_2169E2630(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 152), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    uint64_t v4 = (void **)(v2 + 128);
    sub_216889A04(&v4);
    uint64_t v4 = (void **)(v2 + 104);
    sub_216889A04(&v4);
    uint64_t v4 = (void **)(v2 + 80);
    sub_216889A04(&v4);
    uint64_t v4 = (void **)(v2 + 56);
    sub_216889A04(&v4);
    uint64_t v4 = (void **)(v2 + 32);
    sub_216889A04(&v4);
    uint64_t v4 = (void **)(v2 + 8);
    sub_216889A04(&v4);
    operator delete((void *)v2);
  }
  return a1;
}

unint64_t sub_2169E26E4(unsigned __int8 *a1)
{
  uint64_t v2 = 0;
  char v3 = 0;
  sub_2169E2750((uint64_t)&v2, a1, (uint64_t)(a1 + 8), (uint64_t)(a1 + 32), (uint64_t)(a1 + 56), (uint64_t)(a1 + 80), (uint64_t)(a1 + 104), (uint64_t)(a1 + 128));
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v2));
}

uint64_t sub_2169E2750(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a2;
  if (*(unsigned char *)(a1 + 8)) {
    v8 += (unint64_t)(*(void *)a1 + v8 + (*(void *)a1 + v8) * (*(void *)a1 + v8)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v8;
  return sub_2169E2798(a1, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_2169E2798(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = *(uint64_t **)a2;
  uint64_t v8 = *(void *)(a2 + 8) - *(void *)a2;
  if (v8)
  {
    uint64_t v9 = v8 >> 3;
    int v10 = *(unsigned __int8 *)(a1 + 8);
    unint64_t v11 = *(void *)a1;
    do
    {
      uint64_t v12 = *v7++;
      unint64_t v13 = v12 & 0xFFFFFFFFFFFFFFF8;
      if (v10)
      {
        unint64_t v11 = v13 + ((v13 + v11 + (v13 + v11) * (v13 + v11)) >> 1);
      }
      else
      {
        int v10 = 1;
        *(unsigned char *)(a1 + 8) = 1;
        unint64_t v11 = v13;
      }
      *(void *)a1 = v11;
      --v9;
    }
    while (v9);
  }
  return sub_2169E27FC(a1, a3, a4, a5, a6, a7);
}

uint64_t sub_2169E27FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(uint64_t **)a2;
  uint64_t v7 = *(void *)(a2 + 8) - *(void *)a2;
  if (v7)
  {
    uint64_t v8 = v7 >> 3;
    int v9 = *(unsigned __int8 *)(a1 + 8);
    unint64_t v10 = *(void *)a1;
    do
    {
      uint64_t v11 = *v6++;
      unint64_t v12 = v11 & 0xFFFFFFFFFFFFFFF8;
      if (v9)
      {
        unint64_t v10 = v12 + ((v12 + v10 + (v12 + v10) * (v12 + v10)) >> 1);
      }
      else
      {
        int v9 = 1;
        *(unsigned char *)(a1 + 8) = 1;
        unint64_t v10 = v12;
      }
      *(void *)a1 = v10;
      --v8;
    }
    while (v8);
  }
  return sub_2169E285C(a1, a3, a4, a5, a6);
}

uint64_t sub_2169E285C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(uint64_t **)a2;
  uint64_t v6 = *(void *)(a2 + 8) - *(void *)a2;
  if (v6)
  {
    uint64_t v7 = v6 >> 3;
    int v8 = *(unsigned __int8 *)(a1 + 8);
    unint64_t v9 = *(void *)a1;
    do
    {
      uint64_t v10 = *v5++;
      unint64_t v11 = v10 & 0xFFFFFFFFFFFFFFF8;
      if (v8)
      {
        unint64_t v9 = v11 + ((v11 + v9 + (v11 + v9) * (v11 + v9)) >> 1);
      }
      else
      {
        int v8 = 1;
        *(unsigned char *)(a1 + 8) = 1;
        unint64_t v9 = v11;
      }
      *(void *)a1 = v9;
      --v7;
    }
    while (v7);
  }
  return sub_2169E28B8(a1, a3, a4, a5);
}

uint64_t sub_2169E28B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(uint64_t **)a2;
  uint64_t v5 = *(void *)(a2 + 8) - *(void *)a2;
  if (v5)
  {
    uint64_t v6 = v5 >> 3;
    int v7 = *(unsigned __int8 *)(a1 + 8);
    unint64_t v8 = *(void *)a1;
    do
    {
      uint64_t v9 = *v4++;
      unint64_t v10 = v9 & 0xFFFFFFFFFFFFFFF8;
      if (v7)
      {
        unint64_t v8 = v10 + ((v10 + v8 + (v10 + v8) * (v10 + v8)) >> 1);
      }
      else
      {
        int v7 = 1;
        *(unsigned char *)(a1 + 8) = 1;
        unint64_t v8 = v10;
      }
      *(void *)a1 = v8;
      --v6;
    }
    while (v6);
  }
  return sub_2169E2910(a1, a3, a4);
}

uint64_t sub_2169E2910(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3 = *(uint64_t **)a2;
  uint64_t v4 = *(void *)(a2 + 8) - *(void *)a2;
  if (v4)
  {
    uint64_t v5 = v4 >> 3;
    int v6 = *(unsigned __int8 *)(a1 + 8);
    unint64_t v7 = *(void *)a1;
    do
    {
      uint64_t v8 = *v3++;
      unint64_t v9 = v8 & 0xFFFFFFFFFFFFFFF8;
      if (v6)
      {
        unint64_t v7 = v9 + ((v9 + v7 + (v9 + v7) * (v9 + v7)) >> 1);
      }
      else
      {
        int v6 = 1;
        *(unsigned char *)(a1 + 8) = 1;
        unint64_t v7 = v9;
      }
      *(void *)a1 = v7;
      --v5;
    }
    while (v5);
  }
  return sub_2169E2964(a1, a3);
}

uint64_t sub_2169E2964(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)a2;
  uint64_t v3 = *(void *)(a2 + 8) - *(void *)a2;
  if (v3)
  {
    uint64_t v4 = v3 >> 3;
    int v5 = *(unsigned __int8 *)(result + 8);
    unint64_t v6 = *(void *)result;
    do
    {
      uint64_t v7 = *v2++;
      unint64_t v8 = v7 & 0xFFFFFFFFFFFFFFF8;
      if (v5)
      {
        unint64_t v6 = v8 + ((v8 + v6 + (v8 + v6) * (v8 + v6)) >> 1);
      }
      else
      {
        int v5 = 1;
        *(unsigned char *)(result + 8) = 1;
        unint64_t v6 = v8;
      }
      *(void *)uint64_t result = v6;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t sub_2169E29B4(uint64_t *a1)
{
  unsigned int v2 = atomic_load((unsigned int *)(*a1 + 152));
  if (v2 != 1)
  {
    uint64_t v3 = (unsigned int *)operator new(0xA0uLL);
    sub_2169E21E0((uint64_t)v3, *a1);
    atomic_store(0, v3 + 38);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 38, 1u, memory_order_relaxed);
    uint64_t v5 = *a1;
    *a1 = (uint64_t)v3;
    sub_2169E2630(&v5);
  }
  return *a1;
}

void sub_2169E2A2C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2169E2A40(unsigned int **a1, uint64_t a2)
{
  uint64_t v4 = (unsigned int *)operator new(0xA0uLL);
  uint64_t result = sub_2169E21E0((uint64_t)v4, a2);
  atomic_store(0, v4 + 38);
  *a1 = v4;
  atomic_fetch_add_explicit((atomic_uint *volatile)v4 + 38, 1u, memory_order_relaxed);
  return result;
}

void sub_2169E2A94(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2169E2AA8(uint64_t *a1)
{
  void v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, uint64_t *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_2169E29B4(a1);
}

uint64_t sub_2169E2B3C(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  sub_2169E2CB4((void *)(a1 + 8), *(void *)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 4);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4sub_2168EBBB8(&a9, 0) = 0;
  *(void *)(a1 + 48) = 0;
  sub_2169E2CB4((void *)(a1 + 32), *(void *)(a2 + 32), *(void *)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 4);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  sub_2169E2CB4((void *)(a1 + 56), *(void *)(a2 + 56), *(void *)(a2 + 64), (uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 4);
  *(void *)(a1 + 8sub_2168EBBB8(&a9, 0) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  sub_2169E2CB4((void *)(a1 + 80), *(void *)(a2 + 80), *(void *)(a2 + 88), (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 4);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 12sub_2168EBBB8(&a9, 0) = 0;
  sub_2169E2CB4((void *)(a1 + 104), *(void *)(a2 + 104), *(void *)(a2 + 112), (uint64_t)(*(void *)(a2 + 112) - *(void *)(a2 + 104)) >> 4);
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  sub_2169E2CB4((void *)(a1 + 128), *(void *)(a2 + 128), *(void *)(a2 + 136), (uint64_t)(*(void *)(a2 + 136) - *(void *)(a2 + 128)) >> 4);
  return a1;
}

void sub_2169E2C4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216932118((void ***)va);
  sub_216932118((void ***)va);
  sub_216932118((void ***)va);
  sub_216932118((void ***)va);
  sub_216932118((void ***)va);
  _Unwind_Resume(a1);
}

void *sub_2169E2CB4(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    sub_21682BF78(result, a4);
    uint64_t result = (void *)sub_2169E2D3C((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_2169E2D1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_216932118(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2169E2D3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      sub_2168EE4C4((void *)(a4 + v7), (void *)(a2 + v7));
      v7 += 16;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_2169E2D9C(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 16;
    do
    {
      sub_2168EE084(v4 + v2);
      v2 -= 16;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2169E2DC0(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  uint64_t result = MEMORY[0x263F8C258];
  switch(v5)
  {
    case 1:
      uint64_t result = 0;
      *(_DWORD *)(a3 + 8) = *(_DWORD *)(a2 + 8);
      *(void *)a3 = sub_2169E2DC0;
      break;
    case 2:
      uint64_t result = 0;
      *(_DWORD *)(a3 + 8) = *(_DWORD *)(a2 + 8);
      *(void *)a3 = sub_2169E2DC0;
      goto LABEL_5;
    case 3:
      if (a4) {
        BOOL v8 = sub_21677EC50(a4, MEMORY[0x263F8C258]);
      }
      else {
        BOOL v8 = a5 == &std::__any_imp::__unique_typeinfo<int>::__id;
      }
      if (v8) {
        uint64_t result = a2 + 8;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 4:
      return result;
    default:
      uint64_t result = 0;
LABEL_5:
      *(void *)a2 = 0;
      break;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ValueTypePrivate::CoreType::CoreType(uint64_t a1)
{
  uint64_t v2 = pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)a1);
  *((void *)v2 + 14) = 0;
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::TfType *)((char *)v2 + 112);
  *(_OWORD *)((char *)v2 - 104) = 0u;
  *((void *)v2 - 7) = 0;
  *(_OWORD *)((char *)v2 - 88) = 0u;
  uint64_t v3 = MEMORY[0x263F8C258];
  *((void *)v2 - 5) = 0;
  *((void *)v2 - 4) = v3;
  *((_DWORD *)v2 - 6) = 0;
  *((void *)v2 - 2) = 0;
  uint64_t v4 = (int64x2_t *)((char *)v2 - 16);
  *((void *)v2 - 1) = 0;
  uint64_t v18 = v2;
  uint64_t v5 = sub_21677CB28((uint64_t)v2, 1uLL);
  *uint64_t v5 = 0;
  BOOL v8 = *(void **)(a1 + 96);
  uint64_t v7 = *(void **)(a1 + 104);
  if (v7 == v8)
  {
    int64x2_t v11 = vdupq_n_s64((unint64_t)v7);
    uint64_t v9 = v5;
  }
  else
  {
    uint64_t v9 = v5;
    do
    {
      uint64_t v10 = *--v7;
      *--uint64_t v9 = v10;
      *uint64_t v7 = 0;
    }
    while (v7 != v8);
    int64x2_t v11 = *v4;
  }
  unint64_t v12 = v5 + 1;
  *(void *)(a1 + 96) = v9;
  *(void *)(a1 + 104) = v5 + 1;
  int64x2_t v16 = v11;
  uint64_t v13 = *(void *)(a1 + 112);
  *(void *)(a1 + 112) = &v5[v6];
  uint64_t v17 = v13;
  uint64_t v15 = v11.i64[0];
  sub_2168BE9D8((uint64_t)&v15);
  *(void *)(a1 + 104) = v12;
  *(void *)(a1 + 8sub_2168EBBB8(&a9, 0) = &unk_26C7572B0;
  *(_DWORD *)(a1 + 88) = 1;
  return a1;
}

void sub_2169E2F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  uint64_t v17 = v15;
  a14 = v17;
  sub_216889A04(&a14);
  sub_2168EE084(v14 + 64);
  uint64_t v19 = *(void *)(v14 + 32);
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (*(char *)(v14 + 31) < 0) {
    operator delete(*v16);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ValueTypePrivate::MakeValueTypeName(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName(&v2, a1);
  return v2;
}

void *pxrInternal__aapl__pxrReserved__::Sdf_ValueTypePrivate::GetEmptyTypeName(pxrInternal__aapl__pxrReserved__::Sdf_ValueTypePrivate *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B8EC20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B8EC20))
  {
    pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeImpl::Sdf_ValueTypeImpl((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeImpl *)&unk_267B8EC00);
    __cxa_atexit((void (*)(void *))sub_2169E30B0, &unk_267B8EC00, &dword_216758000);
    __cxa_guard_release(&qword_267B8EC20);
  }
  return &unk_267B8EC00;
}

void sub_2169E3094(_Unwind_Exception *a1)
{
}

uint64_t sub_2169E30B0(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  if ((v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeImpl *pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeImpl::Sdf_ValueTypeImpl(pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeImpl *this)
{
  *((void *)this + 1) = 0;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B8ECA0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B8ECA0))
  {
    pxrInternal__aapl__pxrReserved__::Sdf_ValueTypePrivate::CoreType::CoreType((uint64_t)&unk_267B8EC28);
    __cxa_atexit((void (*)(void *))sub_2169E3E14, &unk_267B8EC28, &dword_216758000);
    __cxa_guard_release(&qword_267B8ECA0);
  }
  *(void *)this = &unk_267B8EC28;
  *((void *)this + 2) = this;
  *((void *)this + 3) = this;
  return this;
}

void sub_2169E3164(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_267B8ECA0);
  uint64_t v3 = *(void *)(v1 + 8);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry *pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::Sdf_ValueTypeRegistry(pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry *this)
{
  uint64_t v2 = operator new(0xC0uLL);
  *uint64_t v2 = 0u;
  v2[1] = 0u;
  *((void *)v2 + 4) = 0;
  *((_DWORD *)v2 + 1sub_2168EBBB8(&a9, 0) = 1065353216;
  v2[3] = 0u;
  void v2[4] = 0u;
  *((_DWORD *)v2 + 2sub_2168EBBB8(&a9, 0) = 1065353216;
  *(_OWORD *)((char *)v2 + 88) = 0u;
  *(_OWORD *)((char *)v2 + 104) = 0u;
  *(_OWORD *)((char *)v2 + 12sub_2168EBBB8(&a9, 0) = 0u;
  *((void *)v2 + 17) = 0;
  *((_DWORD *)v2 + 36) = 1065353216;
  *(_OWORD *)((char *)v2 + 152) = 0u;
  *(_OWORD *)((char *)v2 + 168) = 0u;
  *((_DWORD *)v2 + 46) = 1065353216;
  *(void *)this = v2;
  return this;
}

{
  _OWORD *v2;

  uint64_t v2 = operator new(0xC0uLL);
  *uint64_t v2 = 0u;
  v2[1] = 0u;
  *((void *)v2 + 4) = 0;
  *((_DWORD *)v2 + 1sub_2168EBBB8(&a9, 0) = 1065353216;
  v2[3] = 0u;
  void v2[4] = 0u;
  *((_DWORD *)v2 + 2sub_2168EBBB8(&a9, 0) = 1065353216;
  *(_OWORD *)((char *)v2 + 88) = 0u;
  *(_OWORD *)((char *)v2 + 104) = 0u;
  *(_OWORD *)((char *)v2 + 12sub_2168EBBB8(&a9, 0) = 0u;
  *((void *)v2 + 17) = 0;
  *((_DWORD *)v2 + 36) = 1065353216;
  *(_OWORD *)((char *)v2 + 152) = 0u;
  *(_OWORD *)((char *)v2 + 168) = 0u;
  *((_DWORD *)v2 + 46) = 1065353216;
  *(void *)this = v2;
  return this;
}

void pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::~Sdf_ValueTypeRegistry(pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry *this)
{
  uint64_t v1 = *(void **)this;
  *(void *)this = 0;
  if (v1) {
    sub_2169E5EEC((uint64_t)this, v1);
  }
}

{
  void *v1;

  uint64_t v1 = *(void **)this;
  *(void *)this = 0;
  if (v1) {
    sub_2169E5EEC((uint64_t)this, v1);
  }
}

void *pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::GetAllTypes@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry *this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)this;
  char v6 = 0;
  uint64_t v5 = v3;
  tbb::spin_rw_mutex_v3::internal_acquire_reader((atomic_ullong *)v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_2169E4120(a2, *(const void **)(v3 + 88), *(void *)(v3 + 96), (uint64_t)(*(void *)(v3 + 96) - *(void *)(v3 + 88)) >> 3);
  return sub_21685C048(&v5);
}

void sub_2169E333C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(atomic_ullong **this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v3 = *this;
  char v9 = 0;
  BOOL v8 = v3;
  tbb::spin_rw_mutex_v3::internal_acquire_reader(v3);
  uint64_t v4 = sub_2168CB120(v3 + 6, a2);
  if (v4)
  {
    uint64_t v5 = v4 + 3;
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::Sdf_ValueTypePrivate::GetEmptyTypeName(0);
    uint64_t v5 = &unk_267B8EC00;
  }
  sub_21685C048(&v8);
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName(&v7, (uint64_t)v5);
  return v7;
}

void sub_2169E33C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21685C048((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(atomic_ullong **this, const char *a2)
{
  uint64_t v2 = *this;
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&v6, a2);
  char v9 = 0;
  BOOL v8 = v2;
  tbb::spin_rw_mutex_v3::internal_acquire_reader(v2);
  uint64_t v3 = sub_2168CB120(v2 + 6, &v6);
  if (v3)
  {
    uint64_t v4 = v3 + 3;
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::Sdf_ValueTypePrivate::GetEmptyTypeName(0);
    uint64_t v4 = &unk_267B8EC00;
  }
  sub_21685C048(&v8);
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName(&v7, (uint64_t)v4);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return v7;
}

void sub_2169E3470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21685C048((uint64_t *)va);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(atomic_ullong **a1)
{
  uint64_t v1 = *a1;
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v5);
  char v8 = 0;
  uint64_t v7 = v1;
  tbb::spin_rw_mutex_v3::internal_acquire_reader(v1);
  uint64_t v2 = sub_2168CB120(v1 + 6, &v5);
  if (v2)
  {
    uint64_t v3 = v2 + 3;
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::Sdf_ValueTypePrivate::GetEmptyTypeName(0);
    uint64_t v3 = &unk_267B8EC00;
  }
  sub_21685C048(&v7);
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName(&v6, (uint64_t)v3);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return v6;
}

void sub_2169E3538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21685C048((uint64_t *)va);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(atomic_ullong **this, const pxrInternal__aapl__pxrReserved__::TfType *a2, atomic_uint **a3)
{
  uint64_t v3 = sub_2169E35A0(*this, (uint64_t *)a2, a3);
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName(&v5, (uint64_t)v3);
  return v5;
}

void *sub_2169E35A0(atomic_ullong *a1, uint64_t *a2, atomic_uint **a3)
{
  char v12 = 0;
  int64x2_t v11 = a1;
  tbb::spin_rw_mutex_v3::internal_acquire_reader(a1);
  uint64_t v6 = *a3;
  uint64_t v13 = *a2;
  uint64_t v14 = v6;
  if ((v6 & 7) != 0)
  {
    uint64_t v7 = (atomic_uint *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v7, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v14 = v7;
    }
  }
  char v8 = sub_2169E419C(a1 + 1, &v13);
  if (v8 && (char v8 = sub_2168CB120(a1 + 6, (void *)v8[16])) != 0)
  {
    char v9 = v8 + 3;
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::Sdf_ValueTypePrivate::GetEmptyTypeName((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypePrivate *)v8);
    char v9 = &unk_267B8EC00;
  }
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_21685C048(&v11);
  return v9;
}

void sub_2169E3664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if ((a12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_21685C048(&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindType(atomic_ullong **this, const pxrInternal__aapl__pxrReserved__::VtValue *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  uint64_t v4 = *this;
  uint64_t Type = pxrInternal__aapl__pxrReserved__::VtValue::GetType(a2, (const std::type_info *)a2, (char *)a3);
  uint64_t v5 = sub_2169E35A0(v4, &Type, (atomic_uint **)a3);
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName(&v8, (uint64_t)v5);
  return v8;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::FindOrCreateTypeName(atomic_ullong **this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v3 = *this;
  char v31 = 1;
  unint64_t v30 = v3;
  tbb::spin_rw_mutex_v3::internal_acquire_writer(v3);
  uint64_t v4 = sub_2168CB1F4(v3 + 6, a2);
  if (v4 || (uint64_t v5 = (uint64_t)(v3 + 19), (v4 = sub_2168CB1F4(v3 + 19, a2)) != 0))
  {
    uint64_t v6 = (uint64_t)(v4 + 3);
  }
  else
  {
    uint64_t v32 = (uint64_t *)a2;
    uint64_t v8 = sub_2169E4288((uint64_t)(v3 + 14), a2, (uint64_t)&unk_2174BFD90, &v32);
    char v9 = v8;
    uint64_t v10 = *(void *)a2;
    if ((*(void *)a2 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v10 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v11 = (uint64_t)(v8 + 17);
    unint64_t v12 = v9[17];
    uint64_t v13 = (uint64_t *)v9[16];
    if ((unint64_t)v13 >= v12)
    {
      uint64_t v15 = v9[15];
      uint64_t v16 = ((uint64_t)v13 - v15) >> 3;
      if ((unint64_t)(v16 + 1) >> 61) {
        sub_21677CB10();
      }
      uint64_t v17 = v12 - v15;
      uint64_t v18 = v17 >> 2;
      if (v17 >> 2 <= (unint64_t)(v16 + 1)) {
        uint64_t v18 = v16 + 1;
      }
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v18;
      }
      uint64_t v35 = v9 + 17;
      if (v19) {
        uint64_t v20 = (char *)sub_21677CB28(v11, v19);
      }
      else {
        uint64_t v20 = 0;
      }
      uint64_t v21 = (uint64_t *)&v20[8 * v16];
      BOOL v22 = &v20[8 * v19];
      uint64_t v34 = v22;
      *uint64_t v21 = v10;
      uint64_t v14 = v21 + 1;
      v33.i64[1] = (uint64_t)(v21 + 1);
      size_t v24 = (void *)v9[15];
      uint64_t v23 = (void *)v9[16];
      if (v23 == v24)
      {
        int64x2_t v26 = vdupq_n_s64((unint64_t)v23);
      }
      else
      {
        do
        {
          uint64_t v25 = *--v23;
          *--uint64_t v21 = v25;
          *uint64_t v23 = 0;
        }
        while (v23 != v24);
        int64x2_t v26 = *(int64x2_t *)(v9 + 15);
        uint64_t v14 = (void *)v33.i64[1];
        BOOL v22 = v34;
      }
      v9[15] = v21;
      v9[16] = v14;
      int64x2_t v33 = v26;
      uint64_t v27 = (char *)v9[17];
      v9[17] = v22;
      uint64_t v34 = v27;
      uint64_t v32 = (uint64_t *)v26.i64[0];
      sub_2168BE9D8((uint64_t)&v32);
    }
    else
    {
      uint64_t *v13 = v10;
      uint64_t v14 = v13 + 1;
    }
    v9[16] = v14;
    uint64_t v32 = (uint64_t *)a2;
    uint64_t v28 = sub_2169E4650(v5, a2, (uint64_t)&unk_2174BFD90, &v32);
    v28[3] = v9 + 3;
    uint64_t v6 = (uint64_t)(v28 + 3);
    sub_2168D2318(v28 + 4, (void *)(v9[16] - 8));
  }
  sub_21685C048(&v30);
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName(&v29, v6);
  return v29;
}

void pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(atomic_ullong **a1, uint64_t a2, char *a3)
{
  if (*(void *)(a2 + 24) | *(void *)(a2 + 40))
  {
    uint64_t Type = pxrInternal__aapl__pxrReserved__::VtValue::GetType((pxrInternal__aapl__pxrReserved__::VtValue *)(a2 + 16), (const std::type_info *)a2, a3);
    sub_2169E3BB0((pxrInternal__aapl__pxrReserved__::TfType *)&Type, a2 + 48, (uint64_t)v11);
    uint64_t v7 = pxrInternal__aapl__pxrReserved__::VtValue::GetType((pxrInternal__aapl__pxrReserved__::VtValue *)(a2 + 32), v5, v6);
    sub_2169E3BB0((pxrInternal__aapl__pxrReserved__::TfType *)&v7, a2 + 72, (uint64_t)__p);
    pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t *)a2, (pxrInternal__aapl__pxrReserved__::VtValue *)(a2 + 16), (pxrInternal__aapl__pxrReserved__::VtValue *)(a2 + 32), (uint64_t)v11, (uint64_t)__p, *(void **)(a2 + 96), *(void *)(a2 + 104), (uint64_t *)(a2 + 112), (void *)(a2 + 120));
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&Type);
    sub_2169E3BB0((pxrInternal__aapl__pxrReserved__::TfType *)(a2 + 8), a2 + 48, (uint64_t)v11);
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v9 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(a1, (uint64_t *)a2, (pxrInternal__aapl__pxrReserved__::TfType *)(a2 + 8), (pxrInternal__aapl__pxrReserved__::TfType *)&Type, (uint64_t)v11, (uint64_t)__p, *(void **)(a2 + 96), *(void *)(a2 + 104), (uint64_t *)(a2 + 112), (void *)(a2 + 120));
  }
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  if (v12 < 0) {
    operator delete(v11[0]);
  }
}

void sub_2169E3A38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

void *pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(atomic_ullong **a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, pxrInternal__aapl__pxrReserved__::VtValue *a4, uint64_t a5, uint64_t a6, void *a7, BOOL a8, uint64_t *a9, void *a10)
{
  uint64_t v17 = *a1;
  char v34 = 1;
  int64x2_t v33 = v17;
  tbb::spin_rw_mutex_v3::internal_acquire_writer(v17);
  uint64_t Type = pxrInternal__aapl__pxrReserved__::VtValue::GetType(a3, v18, v19);
  uint64_t v23 = pxrInternal__aapl__pxrReserved__::VtValue::GetType(a4, v21, v22);
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  if (*(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C288], v24, v25) == Type) {
    pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v30);
  }
  else {
    uint64_t v30 = Type;
  }
  if (*(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C288], v26, v27) == v23) {
    pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v29);
  }
  else {
    uint64_t v29 = v23;
  }
  sub_2169E49F0(v17, (char *)&v32, (char *)&v31, a2, (pxrInternal__aapl__pxrReserved__::TfType *)&v30, (pxrInternal__aapl__pxrReserved__::TfType *)&v29, a5, a6, a9, a10, (std::type_info *)a3, (std::type_info *)a4, a7, a8);
  return sub_21685C048(&v33);
}

void sub_2169E3B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_21685C048((uint64_t *)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::TfType *sub_2169E3BB0@<X0>(pxrInternal__aapl__pxrReserved__::TfType *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = result;
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(a2 + 23))
    {
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(void *)(a3 + 16) = *(void *)(a2 + 16);
      return result;
    }
    goto LABEL_8;
  }
  unint64_t v5 = *(void *)(a2 + 8);
  if (!v5)
  {
LABEL_8:
    uint64_t result = pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v8);
    if (*(void *)v3 == v8)
    {
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
    }
    else
    {
      uint64_t result = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v3);
      if (*((char *)result + 23) < 0)
      {
        return (pxrInternal__aapl__pxrReserved__::TfType *)sub_216778F24((unsigned char *)a3, *(void **)result, *((void *)result + 1));
      }
      else
      {
        long long v7 = *(_OWORD *)result;
        *(void *)(a3 + 16) = *((void *)result + 2);
        *(_OWORD *)a3 = v7;
      }
    }
    return result;
  }
  uint64_t v6 = *(void **)a2;

  return (pxrInternal__aapl__pxrReserved__::TfType *)sub_216778F24((unsigned char *)a3, v6, v5);
}

void *pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::AddType(atomic_ullong **a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::TfType *a3, pxrInternal__aapl__pxrReserved__::TfType *a4, uint64_t a5, uint64_t a6, void *a7, BOOL a8, uint64_t *a9, void *a10)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v17 = *a1;
  char v22 = 1;
  uint64_t v21 = v17;
  tbb::spin_rw_mutex_v3::internal_acquire_writer(v17);
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  v24.__type_name = 0;
  v23.__type_name = 0;
  sub_2169E49F0(v17, (char *)&v20, (char *)&v19, a2, a3, a4, a5, a6, a9, a10, &v24, &v23, a7, a8);
  sub_2168EE084((uint64_t)&v23);
  sub_2168EE084((uint64_t)&v24);
  return sub_21685C048(&v21);
}

void sub_2169E3D84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va2, a10);
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  sub_2168EE084((uint64_t)va1);
  sub_2168EE084((uint64_t)va2);
  sub_21685C048((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeRegistry::Clear(atomic_ullong **this)
{
  uint64_t v1 = *this;
  char v4 = 1;
  uint64_t v3 = v1;
  tbb::spin_rw_mutex_v3::internal_acquire_writer(v1);
  sub_2169E5DE4((uint64_t)(v1 + 1));
  sub_2169E5E3C((uint64_t)(v1 + 6));
  v1[12] = v1[11];
  sub_2169E5E94((uint64_t)(v1 + 14));
  sub_2169E5E3C((uint64_t)(v1 + 19));
  return sub_21685C048(&v3);
}

uint64_t sub_2169E3E14(uint64_t a1)
{
  char v4 = (void **)(a1 + 96);
  sub_216889A04(&v4);
  sub_2168EE084(a1 + 64);
  uint64_t v2 = *(void *)(a1 + 32);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_2169E3E80(uint64_t a1)
{
  sub_2169E3EBC(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_2169E3EBC(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_2169E3F00((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_2169E3F00(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 104);
  sub_216889A04(&v3);
  sub_2168EE084(a1 + 72);
  uint64_t v2 = *(void *)(a1 + 40);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  if ((*(void *)a1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)a1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

uint64_t sub_2169E3F80(uint64_t a1)
{
  sub_2169E3FBC(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_2169E3FBC(int a1, void *__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = (void *)*v2;
      uint64_t v4 = v2[4];
      if ((v4 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v5 = v2[2];
      if ((v5 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_2169E4020(uint64_t a1)
{
  sub_2169E405C(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_2169E405C(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_2169E40A0((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_2169E40A0(uint64_t a1)
{
  uint64_t v4 = (void **)(a1 + 112);
  sub_216889A04(&v4);
  sub_2168EE084(a1 + 80);
  uint64_t v2 = *(void *)(a1 + 48);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void *sub_2169E4120(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_21677CACC(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2169E4180(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2169E419C(void *a1, void *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = a2[1] & 0xFFFFFFFFFFFFFFF8;
  unint64_t v4 = bswap64(0x9E3779B97F4A7C55 * (v3 + ((v3 + *a2 + (v3 + *a2) * (v3 + *a2)) >> 1)));
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v2);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = v4;
    if (v4 >= *(void *)&v2) {
      unint64_t v6 = v4 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v6 = v4 & (*(void *)&v2 - 1);
  }
  uint64_t v7 = *(void **)(*a1 + 8 * v6);
  if (!v7) {
    return 0;
  }
  uint64_t result = (void *)*v7;
  if (*v7)
  {
    do
    {
      unint64_t v9 = result[1];
      if (v4 == v9)
      {
        if (result[2] == *a2 && (result[3] & 0xFFFFFFFFFFFFFFF8) == v3) {
          return result;
        }
      }
      else
      {
        if (v5.u32[0] > 1uLL)
        {
          if (v9 >= *(void *)&v2) {
            v9 %= *(void *)&v2;
          }
        }
        else
        {
          v9 &= *(void *)&v2 - 1;
        }
        if (v9 != v6) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void *sub_2169E4288(uint64_t a1, void *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v6 = *a2 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = bswap64(0x9E3779B97F4A7C55 * v6);
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = v7;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = v7 & (v8 - 1);
    }
    uint64_t v10 = *(void **)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = (void *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if ((v11[2] & 0xFFFFFFFFFFFFFFF8) == v6) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  sub_2169E44F0(a1, v7, a4, (uint64_t)v22);
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_21678A04C(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v4);
  if (v19)
  {
    *(void *)v22[0] = *v19;
    *uint64_t v19 = v22[0];
  }
  else
  {
    *(void *)v22[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v22[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v22[0])
    {
      unint64_t v20 = *(void *)(*(void *)v22[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v20 >= v8) {
          v20 %= v8;
        }
      }
      else
      {
        v20 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v2sub_2168EBBB8(&a9, 0) = v22[0];
    }
  }
  uint64_t v11 = (void *)v22[0];
  v22[0] = 0;
  ++*(void *)(a1 + 24);
  sub_2169E45F8((uint64_t)v22, 0);
  return v11;
}

void sub_2169E44D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2169E45F8((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_2169E44F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x90uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  uint64_t result = sub_2169E4560((uint64_t)(v8 + 2), *a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_2169E4548(_Unwind_Exception *a1)
{
  sub_2169E45F8(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_2169E4560(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 8));
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  uint64_t v4 = MEMORY[0x263F8C258];
  *(void *)(a1 + 8sub_2168EBBB8(&a9, 0) = 0;
  *(void *)(a1 + 88) = v4;
  *(_DWORD *)(a1 + 96) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 12sub_2168EBBB8(&a9, 0) = 0;
  *(void *)(a1 + 104) = 0;
  return a1;
}

void sub_2169E45F8(uint64_t a1, uint64_t a2)
{
  int8x8_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_2169E3F00((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void *sub_2169E4650(uint64_t a1, void *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v6 = *a2 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = bswap64(0x9E3779B97F4A7C55 * v6);
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = v7;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = v7 & (v8 - 1);
    }
    uint64_t v10 = *(void **)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t result = (void *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = result[1];
          if (v12 == v7)
          {
            if ((result[2] & 0xFFFFFFFFFFFFFFF8) == v6) {
              return result;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t result = (void *)*result;
        }
        while (result);
      }
    }
  }
  sub_2169E48A8(a1, v7, a4, (uint64_t)&v21);
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_21678A04C(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v4);
  if (v19)
  {
    *uint64_t v21 = *v19;
    *uint64_t v19 = v21;
  }
  else
  {
    *uint64_t v21 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v21;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*v21)
    {
      unint64_t v20 = *(void *)(*v21 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v20 >= v8) {
          v20 %= v8;
        }
      }
      else
      {
        v20 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v2sub_2168EBBB8(&a9, 0) = v21;
    }
  }
  uint64_t result = v21;
  ++*(void *)(a1 + 24);
  return result;
}

void sub_2169E4884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    sub_2169E49A4((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2169E48A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x38uLL);
  *(void *)(a4 + 8) = v7;
  *(void *)a4 = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  uint64_t result = sub_2169E4930(v8 + 2, *a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_2169E4914(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  sub_2169E49A4(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_2169E4930(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeImpl::Sdf_ValueTypeImpl((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeImpl *)(a1 + 1));
  return a1;
}

void sub_2169E49A4(uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v2 = __p[4];
    if ((v2 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v3 = __p[2];
    if ((v3 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void sub_2169E49F0(void *a1, char *a2, char *a3, uint64_t *a4, pxrInternal__aapl__pxrReserved__::TfType *a5, pxrInternal__aapl__pxrReserved__::TfType *a6, uint64_t a7, uint64_t a8, uint64_t *a9, void *a10, std::type_info *a11, std::type_info *a12, void *a13, BOOL a14)
{
  if (*a4
    || (std::type_info __p = "sdf/valueTypeRegistry.cpp",
        v102 = "_AddType",
        uint64_t v103 = 292,
        v104 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Registry::_AddType(Sdf_ValueTypeImpl **, Sd"
               "f_ValueTypeImpl **, const TfToken &, const TfType &, const TfType &, const std::string &, const std::stri"
               "ng &, const TfToken &, const SdfTupleDimensions &, const VtValue &, const VtValue &, TfEnum)",
        char v105 = 0,
        int v87 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Types must have names", a2, a3), (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&__p, "!name.IsEmpty()", v87) & 1) != 0))
  {
    uint64_t v20 = *(unsigned __int8 *)(a7 + 23);
    if ((v20 & 0x80u) != 0) {
      uint64_t v20 = *(void *)(a7 + 8);
    }
    if (v20) {
      goto LABEL_131;
    }
    uint64_t v21 = *(unsigned __int8 *)(a8 + 23);
    if ((v21 & 0x80u) != 0) {
      uint64_t v21 = *(void *)(a8 + 8);
    }
    if (v21) {
      goto LABEL_131;
    }
    std::type_info __p = "sdf/valueTypeRegistry.cpp";
    v102 = "_AddType";
    uint64_t v103 = 296;
    v104 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Registry::_AddType(Sdf_ValueTypeImpl **, Sdf_Va"
           "lueTypeImpl **, const TfToken &, const TfType &, const TfType &, const std::string &, const std::string &, co"
           "nst TfToken &, const SdfTupleDimensions &, const VtValue &, const VtValue &, TfEnum)";
    char v105 = 0;
    unint64_t v90 = *a4 & 0xFFFFFFFFFFFFFFF8;
    if (v90)
    {
      uint64_t v91 = (const char *)(v90 + 16);
      if (*(char *)(v90 + 39) < 0) {
        uint64_t v91 = *(const char **)v91;
      }
    }
    else
    {
      uint64_t v91 = "";
    }
    uint64_t v96 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Type '%s' must have C++ names", a2, a3, v91);
    if (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&__p, "!cppTypeName.empty() || !arrayCppTypeName.empty()", v96))
    {
LABEL_131:
      pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&__p);
      if (*(void **)a5 != __p) {
        goto LABEL_10;
      }
      pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v106);
      if (*(void *)a6 != v106) {
        goto LABEL_10;
      }
      std::type_info __p = "sdf/valueTypeRegistry.cpp";
      v102 = "_AddType";
      uint64_t v103 = 300;
      v104 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Registry::_AddType(Sdf_ValueTypeImpl **, Sdf_"
             "ValueTypeImpl **, const TfToken &, const TfType &, const TfType &, const std::string &, const std::string &"
             ", const TfToken &, const SdfTupleDimensions &, const VtValue &, const VtValue &, TfEnum)";
      char v105 = 0;
      unint64_t v92 = *a4 & 0xFFFFFFFFFFFFFFF8;
      if (v92)
      {
        v93 = (const char *)(v92 + 16);
        if (*(char *)(v92 + 39) < 0) {
          v93 = *(const char **)v93;
        }
      }
      else
      {
        v93 = "";
      }
      long long v97 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Type '%s' must have a C++ type", v22, v23, v93);
      if (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&__p, "!type.IsUnknown() || !arrayType.IsUnknown()", v97))
      {
LABEL_10:
        std::type_info v24 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypePrivate *)sub_2168CB120(a1 + 6, a4);
        if (v24)
        {
          uint64_t v25 = (char *)v24 + 24;
          Emptyuint64_t TypeName = (uint64_t)pxrInternal__aapl__pxrReserved__::Sdf_ValueTypePrivate::GetEmptyTypeName(v24);
          if (v25 != &unk_267B8EC00)
          {
            std::type_info __p = "sdf/valueTypeRegistry.cpp";
            v102 = "_AddType";
            uint64_t v103 = 305;
            v104 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Registry::_AddType(Sdf_ValueTypeImpl **"
                   ", Sdf_ValueTypeImpl **, const TfToken &, const TfType &, const TfType &, const std::string &, const s"
                   "td::string &, const TfToken &, const SdfTupleDimensions &, const VtValue &, const VtValue &, TfEnum)";
            char v105 = 0;
            unint64_t v29 = *a4 & 0xFFFFFFFFFFFFFFF8;
            if (v29)
            {
              uint64_t v30 = (const char *)(v29 + 16);
              if (*(char *)(v29 + 39) < 0) {
                uint64_t v30 = *(const char **)v30;
              }
            }
            else
            {
              uint64_t v30 = "";
            }
            char v94 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Type '%s' already exists", v27, v28, v30);
            Emptyuint64_t TypeName = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&__p, "existing == Sdf_ValueTypePrivate::GetEmptyTypeName()", v94);
            if ((EmptyTypeName & 1) == 0) {
              return;
            }
          }
        }
        else
        {
          uint64_t v31 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypePrivate *)pxrInternal__aapl__pxrReserved__::Sdf_ValueTypePrivate::GetEmptyTypeName(0);
          Emptyuint64_t TypeName = (uint64_t)pxrInternal__aapl__pxrReserved__::Sdf_ValueTypePrivate::GetEmptyTypeName(v31);
        }
        uint64_t v98 = a8;
        if ((*a4 & 0xFFFFFFFFFFFFFFF8) != 0) {
          Emptyunint64_t String = (uint64_t *)((*a4 & 0xFFFFFFFFFFFFFFF8) + 16);
        }
        else {
          Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyTypeName);
        }
        if (*((char *)EmptyString + 23) >= 0) {
          size_t v33 = *((unsigned __int8 *)EmptyString + 23);
        }
        else {
          size_t v33 = EmptyString[1];
        }
        p_p = &__p;
        sub_2167940B4((uint64_t)&__p, v33 + 2);
        if (v103 < 0) {
          p_p = __p;
        }
        if (v33)
        {
          if (*((char *)EmptyString + 23) >= 0) {
            uint64_t v35 = EmptyString;
          }
          else {
            uint64_t v35 = (const void *)*EmptyString;
          }
          memmove(p_p, v35, v33);
        }
        strcpy((char *)p_p + v33, "[]");
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v106, &__p, 0);
        if (SHIBYTE(v103) < 0) {
          operator delete(__p);
        }
        std::string v36 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypePrivate *)sub_2168CB120(a1 + 6, &v106);
        if (v36)
        {
          uint64_t v37 = (char *)v36 + 24;
        }
        else
        {
          std::string v36 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypePrivate *)pxrInternal__aapl__pxrReserved__::Sdf_ValueTypePrivate::GetEmptyTypeName(0);
          uint64_t v37 = &unk_267B8EC00;
        }
        pxrInternal__aapl__pxrReserved__::Sdf_ValueTypePrivate::GetEmptyTypeName(v36);
        if (v37 != &unk_267B8EC00)
        {
          std::type_info __p = "sdf/valueTypeRegistry.cpp";
          v102 = "_AddType";
          uint64_t v103 = 312;
          v104 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Registry::_AddType(Sdf_ValueTypeImpl **, "
                 "Sdf_ValueTypeImpl **, const TfToken &, const TfType &, const TfType &, const std::string &, const std::"
                 "string &, const TfToken &, const SdfTupleDimensions &, const VtValue &, const VtValue &, TfEnum)";
          char v105 = 0;
          unint64_t v88 = v106 & 0xFFFFFFFFFFFFFFF8;
          if ((v106 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            unint64_t v89 = (const char *)(v88 + 16);
            if (*(char *)(v88 + 39) < 0) {
              unint64_t v89 = *(const char **)v89;
            }
          }
          else
          {
            unint64_t v89 = "";
          }
          long long v95 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Type '%s' already exists", v38, v39, v89);
          if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&__p, "existing == Sdf_ValueTypePrivate::GetEmptyTypeName()", v95) & 1) == 0)
          {
LABEL_101:
            if ((v106 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v106 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            return;
          }
        }
        long long v40 = a13;
        BOOL v41 = a14;
        if (!a14)
        {
          int v42 = strcmp((const char *)(*(void *)(MEMORY[0x263F8C258] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(a13[1] & 0x7FFFFFFFFFFFFFFFLL));
          BOOL v41 = v42 == 0;
          if (!v42) {
            long long v40 = &unk_26C7572B0;
          }
        }
        pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&__p);
        if (*(void **)a5 == __p)
        {
          uint64_t v44 = 0;
        }
        else
        {
          uint64_t v44 = sub_2169E5264((uint64_t)a1, a4, a5, a7, a9, a10, a11, v43, (uint64_t)v40, v41);
          if (!v44) {
            goto LABEL_101;
          }
        }
        uint64_t v45 = pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&__p);
        if (*(void **)a6 == __p)
        {
          uint64_t v47 = 0;
          if (v44) {
            goto LABEL_45;
          }
        }
        else
        {
          uint64_t v45 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypePrivate *)sub_2169E5264((uint64_t)a1, &v106, a6, v98, a9, a10, a12, v46, (uint64_t)v40, v41);
          uint64_t v47 = v45;
          if (!v45) {
            goto LABEL_101;
          }
          if (v44)
          {
LABEL_45:
            std::type_info __p = a4;
            uint64_t v45 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypePrivate *)sub_2169E4650((uint64_t)(a1 + 6), a4, (uint64_t)&unk_2174BFD90, (uint64_t **)&__p);
            *(void *)a2 = (char *)v45 + 24;
            *((void *)v45 + 3) = v44;
            uint64_t v48 = *a4;
            if ((*a4 & 7) != 0
              && (atomic_fetch_add_explicit((atomic_uint *volatile)(v48 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
            {
              v48 &= 0xFFFFFFFFFFFFFFF8;
            }
            uint64_t v49 = *(void *)a2;
            uint64_t v50 = *(void *)(*(void *)a2 + 8);
            if ((v50 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v50 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            *(void *)(v49 + 8) = v48;
            if (v47) {
              goto LABEL_51;
            }
            goto LABEL_59;
          }
        }
        *(void *)a2 = 0;
        if (v47)
        {
LABEL_51:
          std::type_info __p = &v106;
          uint64_t v45 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypePrivate *)sub_2169E4650((uint64_t)(a1 + 6), &v106, (uint64_t)&unk_2174BFD90, (uint64_t **)&__p);
          *(void *)a3 = (char *)v45 + 24;
          *((void *)v45 + 3) = v47;
          uint64_t v51 = v106;
          if ((v106 & 7) != 0
            && (atomic_fetch_add_explicit((atomic_uint *volatile)(v106 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
          {
            v51 &= 0xFFFFFFFFFFFFFFF8;
          }
          uint64_t v52 = *(void *)a3;
          uint64_t v53 = *(void *)(*(void *)a3 + 8);
          if ((v53 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v53 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          *(void *)(v52 + 8) = v51;
          goto LABEL_60;
        }
LABEL_59:
        *(void *)a3 = 0;
LABEL_60:
        if (*(void *)a2)
        {
          *(void *)(*(void *)a2 + 16) = *(void *)a2;
          uint64_t v54 = *(void **)a3;
          if (!*(void *)a3)
          {
            pxrInternal__aapl__pxrReserved__::Sdf_ValueTypePrivate::GetEmptyTypeName(v45);
            uint64_t v54 = &unk_267B8EC00;
          }
          *(void *)(*(void *)a2 + 24) = v54;
          pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName(&__p, *(void *)a2);
          size_t v55 = __p;
          uint64_t v45 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypePrivate *)(a1 + 13);
          unint64_t v56 = a1[13];
          char v57 = (void **)a1[12];
          if ((unint64_t)v57 >= v56)
          {
            uint64_t v59 = a1[11];
            uint64_t v60 = ((uint64_t)v57 - v59) >> 3;
            if ((unint64_t)(v60 + 1) >> 61) {
              sub_21677CB10();
            }
            uint64_t v61 = v56 - v59;
            uint64_t v62 = v61 >> 2;
            if (v61 >> 2 <= (unint64_t)(v60 + 1)) {
              uint64_t v62 = v60 + 1;
            }
            if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v63 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v63 = v62;
            }
            if (v63) {
              uint64_t v64 = (char *)sub_21677CB28((uint64_t)v45, v63);
            }
            else {
              uint64_t v64 = 0;
            }
            uint64_t v65 = &v64[8 * v60];
            unint64_t v66 = &v64[8 * v63];
            *(void *)uint64_t v65 = v55;
            size_t v58 = v65 + 8;
            uint64_t v67 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypePrivate *)a1[11];
            uint64_t v45 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypePrivate *)a1[12];
            if (v45 != v67)
            {
              do
              {
                uint64_t v68 = *((void *)v45 - 1);
                uint64_t v45 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypePrivate *)((char *)v45 - 8);
                *((void *)v65 - 1) = v68;
                v65 -= 8;
              }
              while (v45 != v67);
              uint64_t v45 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypePrivate *)a1[11];
            }
            a1[11] = v65;
            a1[12] = v58;
            a1[13] = v66;
            if (v45) {
              operator delete(v45);
            }
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v57 = __p;
            size_t v58 = v57 + 1;
          }
          a1[12] = v58;
        }
        uint64_t v69 = *(void *)a3;
        if (*(void *)a3)
        {
          unsigned int v70 = *(void **)a2;
          if (*(void *)a2)
          {
            long long v71 = (uint64_t *)a3;
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::Sdf_ValueTypePrivate::GetEmptyTypeName(v45);
            long long v71 = (uint64_t *)a3;
            uint64_t v69 = *(void *)a3;
            unsigned int v70 = &unk_267B8EC00;
          }
          *(void *)(v69 + 16) = v70;
          *(void *)(*v71 + 24) = *v71;
          pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName(&__p, *v71);
          char v72 = __p;
          unint64_t v73 = a1[13];
          long long v74 = (void **)a1[12];
          if ((unint64_t)v74 >= v73)
          {
            uint64_t v76 = a1[11];
            uint64_t v77 = ((uint64_t)v74 - v76) >> 3;
            if ((unint64_t)(v77 + 1) >> 61) {
              sub_21677CB10();
            }
            uint64_t v78 = v73 - v76;
            uint64_t v79 = v78 >> 2;
            if (v78 >> 2 <= (unint64_t)(v77 + 1)) {
              uint64_t v79 = v77 + 1;
            }
            if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v80 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v80 = v79;
            }
            if (v80) {
              uint64_t v81 = (char *)sub_21677CB28((uint64_t)(a1 + 13), v80);
            }
            else {
              uint64_t v81 = 0;
            }
            char v82 = &v81[8 * v77];
            unsigned int v83 = &v81[8 * v80];
            *(void *)char v82 = v72;
            unint64_t v75 = v82 + 8;
            uint64_t v85 = (char *)a1[11];
            unsigned int v84 = (char *)a1[12];
            if (v84 != v85)
            {
              do
              {
                uint64_t v86 = *((void *)v84 - 1);
                v84 -= 8;
                *((void *)v82 - 1) = v86;
                v82 -= 8;
              }
              while (v84 != v85);
              unsigned int v84 = (char *)a1[11];
            }
            a1[11] = v82;
            a1[12] = v75;
            a1[13] = v83;
            if (v84) {
              operator delete(v84);
            }
          }
          else
          {
            *long long v74 = __p;
            unint64_t v75 = v74 + 1;
          }
          a1[12] = v75;
        }
        goto LABEL_101;
      }
    }
  }
}

void sub_2169E5218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if ((a24 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2169E5264(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::TfType *a3, uint64_t a4, uint64_t *a5, void *a6, std::type_info *a7, uint64_t a8, uint64_t a9, int a10)
{
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v93);
  if (*(char **)a3 == v93)
  {
    v93 = "sdf/valueTypeRegistry.cpp";
    v94.i64[0] = (uint64_t)"_AddCoreType";
    v94.i64[1] = 430;
    long long v95 = "const Registry::CoreType *pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Registry::_AddCoreType(cons"
          "t TfToken &, const TfType &, const std::string &, const TfToken &, const SdfTupleDimensions &, const VtValue &, TfEnum)";
    LOBYTE(v96) = 0;
    unint64_t v60 = *a2 & 0xFFFFFFFFFFFFFFF8;
    if (v60)
    {
      uint64_t v61 = (const char *)(v60 + 16);
      if (*(char *)(v60 + 39) < 0) {
        uint64_t v61 = *(const char **)v61;
      }
    }
    else
    {
      uint64_t v61 = "";
    }
    char v82 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Internal error: unknown TfType for '%s'", v17, v18, v61);
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v93, "!tfType.IsUnknown()", v82) & 1) == 0) {
      return 0;
    }
  }
  uint64_t v19 = (void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C288], (const std::type_info *)v17, v18);
  char v22 = *(void **)a3;
  if (*(void *)a3 == *v19)
  {
    v93 = "sdf/valueTypeRegistry.cpp";
    v94.i64[0] = (uint64_t)"_AddCoreType";
    v94.i64[1] = 435;
    long long v95 = "const Registry::CoreType *pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Registry::_AddCoreType(cons"
          "t TfToken &, const TfType &, const std::string &, const TfToken &, const SdfTupleDimensions &, const VtValue &, TfEnum)";
    LOBYTE(v96) = 0;
    unint64_t v62 = *a2 & 0xFFFFFFFFFFFFFFF8;
    if (v62)
    {
      unint64_t v63 = (const char *)(v62 + 16);
      if (*(char *)(v62 + 39) < 0) {
        unint64_t v63 = *(const char **)v63;
      }
    }
    else
    {
      unint64_t v63 = "";
    }
    unsigned int v83 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Internal error: TfType<void> for '%s'", v20, v21, v63);
    if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v93, "tfType != TfType::Find<void>()", v83))return 0; {
    char v22 = *(void **)a3;
    }
  }
  uint64_t v23 = *a5;
  uint64_t v91 = v22;
  uint64_t v92 = v23;
  if ((v23 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v92 &= 0xFFFFFFFFFFFFFFF8;
  }
  v93 = (char *)&v91;
  std::type_info v24 = sub_2169E59F8(a1 + 8, &v91, (uint64_t)&unk_2174BFD90, (void **)&v93);
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v93);
  uint64_t v27 = v24 + 4;
  uint64_t v28 = (char *)v24[4];
  if (v28 == v93)
  {
    v24[4] = *(void *)a3;
    std::string::operator=((std::string *)(v24 + 5), (const std::string *)a4);
    sub_2168D2318(v24 + 8, a5);
    uint64_t v35 = a6[2];
    *(_OWORD *)(v24 + 9) = *(_OWORD *)a6;
    v24[11] = v35;
    sub_2168EC6DC(v24 + 12, a7);
    v24[14] = a9;
    *((_DWORD *)v24 + 3sub_2168EBBB8(&a9, 0) = a10;
LABEL_29:
    uint64_t v39 = *a2;
    if ((*a2 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v39 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v39 &= 0xFFFFFFFFFFFFFFF8;
    }
    unint64_t v40 = v24[18];
    BOOL v41 = (void *)v24[17];
    if ((unint64_t)v41 >= v40)
    {
      uint64_t v43 = v24[16];
      uint64_t v44 = ((uint64_t)v41 - v43) >> 3;
      if ((unint64_t)(v44 + 1) >> 61) {
        sub_21677CB10();
      }
      uint64_t v45 = v40 - v43;
      uint64_t v46 = v45 >> 2;
      if (v45 >> 2 <= (unint64_t)(v44 + 1)) {
        uint64_t v46 = v44 + 1;
      }
      if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v47 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v47 = v46;
      }
      uint64_t v96 = v24 + 18;
      if (v47) {
        uint64_t v48 = (char *)sub_21677CB28((uint64_t)(v24 + 18), v47);
      }
      else {
        uint64_t v48 = 0;
      }
      uint64_t v49 = &v48[8 * v44];
      uint64_t v50 = &v48[8 * v47];
      long long v95 = v50;
      *(void *)uint64_t v49 = v39;
      int v42 = v49 + 8;
      v94.i64[1] = (uint64_t)(v49 + 8);
      uint64_t v52 = (void *)v24[16];
      uint64_t v51 = (void *)v24[17];
      if (v51 == v52)
      {
        int64x2_t v54 = vdupq_n_s64((unint64_t)v51);
      }
      else
      {
        do
        {
          uint64_t v53 = *--v51;
          *((void *)v49 - 1) = v53;
          v49 -= 8;
          void *v51 = 0;
        }
        while (v51 != v52);
        int64x2_t v54 = *((int64x2_t *)v24 + 8);
        int v42 = (void *)v94.i64[1];
        uint64_t v50 = v95;
      }
      v24[16] = v49;
      v24[17] = v42;
      int64x2_t v94 = v54;
      size_t v55 = (const char *)v24[18];
      v24[18] = v50;
      long long v95 = v55;
      v93 = (char *)v54.i64[0];
      sub_2168BE9D8((uint64_t)&v93);
    }
    else
    {
      void *v41 = v39;
      int v42 = v41 + 1;
    }
    v24[17] = v42;
    goto LABEL_49;
  }
  if (v28 != *(char **)a3)
  {
    v93 = "sdf/valueTypeRegistry.cpp";
    v94.i64[0] = (uint64_t)"_AddCoreType";
    v94.i64[1] = 455;
    long long v95 = "const Registry::CoreType *pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Registry::_AddCoreType(cons"
          "t TfToken &, const TfType &, const std::string &, const TfToken &, const SdfTupleDimensions &, const VtValue &, TfEnum)";
    LOBYTE(v96) = 0;
    unint64_t v64 = *a2 & 0xFFFFFFFFFFFFFFF8;
    if (v64)
    {
      uint64_t v65 = (const char *)(v64 + 16);
      if (*(char *)(v64 + 39) < 0) {
        uint64_t v65 = *(const char **)v65;
      }
    }
    else
    {
      uint64_t v65 = "";
    }
    unsigned int v84 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Internal error: unexpected core type for '%s'", v25, v26, v65);
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v93, "coreType.type == tfType", v84) & 1) == 0) {
      goto LABEL_57;
    }
  }
  uint64_t v29 = *((unsigned __int8 *)v24 + 63);
  uint64_t v30 = (char *)v24[6];
  if ((v29 & 0x80u) == 0) {
    uint64_t v31 = *((unsigned __int8 *)v24 + 63);
  }
  else {
    uint64_t v31 = v24[6];
  }
  uint64_t v32 = *(unsigned __int8 *)(a4 + 23);
  int v33 = (char)v32;
  if ((v32 & 0x80u) != 0) {
    uint64_t v32 = *(void *)(a4 + 8);
  }
  if (v31 == v32)
  {
    char v34 = (const void **)(v24 + 5);
    if (v33 >= 0) {
      uint64_t v25 = (const char *)a4;
    }
    else {
      uint64_t v25 = *(const char **)a4;
    }
    if ((v29 & 0x80) != 0)
    {
      if (!memcmp(*v34, v25, (size_t)v30)) {
        goto LABEL_24;
      }
    }
    else
    {
      if (!*((unsigned char *)v24 + 63)) {
        goto LABEL_24;
      }
      while (*(unsigned __int8 *)v34 == *(unsigned __int8 *)v25)
      {
        char v34 = (const void **)((char *)v34 + 1);
        ++v25;
        if (!--v29) {
          goto LABEL_24;
        }
      }
    }
  }
  v93 = "sdf/valueTypeRegistry.cpp";
  v94.i64[0] = (uint64_t)"_AddCoreType";
  v94.i64[1] = 459;
  long long v95 = "const Registry::CoreType *pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Registry::_AddCoreType(const "
        "TfToken &, const TfType &, const std::string &, const TfToken &, const SdfTupleDimensions &, const VtValue &, TfEnum)";
  LOBYTE(v96) = 0;
  unint64_t v57 = *a2 & 0xFFFFFFFFFFFFFFF8;
  if (v57)
  {
    size_t v58 = (const char *)(v57 + 16);
    if (*(char *)(v57 + 39) < 0) {
      size_t v58 = *(const char **)v58;
    }
  }
  else
  {
    size_t v58 = "";
  }
  uint64_t v59 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Mismatched C++ name for core type '%s'", v25, v30, v58);
  if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v93, "coreType.cppTypeName == cppTypeName", v59) & 1) == 0)goto LABEL_57; {
LABEL_24:
  }
  unint64_t v36 = v24[8] & 0xFFFFFFFFFFFFFFF8;
  unint64_t v37 = *a5 & 0xFFFFFFFFFFFFFFF8;
  if (v36 == v37) {
    goto LABEL_108;
  }
  v93 = "sdf/valueTypeRegistry.cpp";
  v94.i64[0] = (uint64_t)"_AddCoreType";
  v94.i64[1] = 466;
  long long v95 = "const Registry::CoreType *pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Registry::_AddCoreType(const "
        "TfToken &, const TfType &, const std::string &, const TfToken &, const SdfTupleDimensions &, const VtValue &, TfEnum)";
  LOBYTE(v96) = 0;
  if (v36)
  {
    unint64_t v66 = (const char *)(v36 + 16);
    if (*(char *)(v36 + 39) < 0) {
      unint64_t v66 = *(const char **)v66;
    }
  }
  else
  {
    unint64_t v66 = "";
  }
  if (v37)
  {
    uint64_t v85 = (const char *)(v37 + 16);
    if (*(char *)(v37 + 39) < 0) {
      uint64_t v85 = *(const char **)v85;
    }
  }
  else
  {
    uint64_t v85 = "";
  }
  uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(a3);
  uint64_t v89 = *(char *)(TypeName + 23) >= 0 ? TypeName : *(void *)TypeName;
  unint64_t v90 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Mismatched roles '%s' and '%s' for core type '%s'", v87, v88, v66, v85, v89);
  if (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v93, "coreType.role == role", v90))
  {
LABEL_108:
    if (pxrInternal__aapl__pxrReserved__::SdfTupleDimensions::operator==(v24 + 9, a6)) {
      goto LABEL_109;
    }
    v93 = "sdf/valueTypeRegistry.cpp";
    v94.i64[0] = (uint64_t)"_AddCoreType";
    v94.i64[1] = 471;
    long long v95 = "const Registry::CoreType *pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Registry::_AddCoreType(cons"
          "t TfToken &, const TfType &, const std::string &, const TfToken &, const SdfTupleDimensions &, const VtValue &, TfEnum)";
    LOBYTE(v96) = 0;
    uint64_t v67 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(a3);
    uint64_t v70 = *(char *)(v67 + 23) >= 0 ? v67 : *(void *)v67;
    long long v71 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Mismatched dimensions for core type '%s'", v68, v69, v70);
    if (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v93, "coreType.dim == dimensions", v71))
    {
LABEL_109:
      if (pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)(v24 + 12), a7, v38))goto LABEL_110; {
      v93 = "sdf/valueTypeRegistry.cpp";
      }
      v94.i64[0] = (uint64_t)"_AddCoreType";
      v94.i64[1] = 476;
      long long v95 = "const Registry::CoreType *pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Registry::_AddCoreType(co"
            "nst TfToken &, const TfType &, const std::string &, const TfToken &, const SdfTupleDimensions &, const VtValue &, TfEnum)";
      LOBYTE(v96) = 0;
      uint64_t v72 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(a3);
      uint64_t v75 = *(char *)(v72 + 23) >= 0 ? v72 : *(void *)v72;
      uint64_t v76 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Mismatched default value for core type '%s'", v73, v74, v75);
      if (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v93, "coreType.value == value", v76))
      {
LABEL_110:
        if (*((_DWORD *)v24 + 30) == a10
          && !strcmp((const char *)(*(void *)(a9 + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(v24[14] + 8) & 0x7FFFFFFFFFFFFFFFLL)))
        {
          goto LABEL_29;
        }
        v93 = "sdf/valueTypeRegistry.cpp";
        v94.i64[0] = (uint64_t)"_AddCoreType";
        v94.i64[1] = 481;
        long long v95 = "const Registry::CoreType *pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Registry::_AddCoreType("
              "const TfToken &, const TfType &, const std::string &, const TfToken &, const SdfTupleDimensions &, const V"
              "tValue &, TfEnum)";
        LOBYTE(v96) = 0;
        uint64_t v77 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(a3);
        uint64_t v80 = *(char *)(v77 + 23) >= 0 ? v77 : *(void *)v77;
        uint64_t v81 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Mismatched unit for core type '%s'", v78, v79, v80);
        if (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v93, "coreType.unit == unit", v81)) {
          goto LABEL_29;
        }
      }
    }
  }
LABEL_57:
  uint64_t v27 = 0;
LABEL_49:
  if ((v92 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v92 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return v27;
}

void sub_2169E59AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if ((a14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void *sub_2169E59F8(uint64_t a1, void *a2, uint64_t a3, void **a4)
{
  unint64_t v6 = a2[1] & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = bswap64(0x9E3779B97F4A7C55 * (v6 + ((v6 + *a2 + (v6 + *a2) * (v6 + *a2)) >> 1)));
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = v7;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = v7 & (v8 - 1);
    }
    uint64_t v10 = *(void **)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = (void *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == *a2 && (v11[3] & 0xFFFFFFFFFFFFFFF8) == v6) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  sub_2169E5C78(a1, v7, a4, (uint64_t)v22);
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_21678A04C(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v4);
  if (v19)
  {
    *(void *)v22[0] = *v19;
    *uint64_t v19 = v22[0];
  }
  else
  {
    *(void *)v22[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v22[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v22[0])
    {
      unint64_t v20 = *(void *)(*(void *)v22[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v20 >= v8) {
          v20 %= v8;
        }
      }
      else
      {
        v20 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v2sub_2168EBBB8(&a9, 0) = v22[0];
    }
  }
  uint64_t v11 = (void *)v22[0];
  v22[0] = 0;
  ++*(void *)(a1 + 24);
  sub_2169E5D8C((uint64_t)v22, 0);
  return v11;
}

void sub_2169E5C60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2169E5D8C((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_2169E5C78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x98uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  uint64_t result = sub_2169E5CE8((uint64_t)(v8 + 2), *a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_2169E5CD0(_Unwind_Exception *a1)
{
  sub_2169E5D8C(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_2169E5CE8(uint64_t a1, void *a2)
{
  *(void *)a1 = *a2;
  uint64_t v3 = a2[1];
  *(void *)(a1 + 8) = v3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 8) &= 0xFFFFFFFFFFFFFFF8;
  }
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)(a1 + 16));
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_2168EBBB8(&a9, 0) = 0u;
  uint64_t v4 = MEMORY[0x263F8C258];
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = v4;
  *(_DWORD *)(a1 + 104) = 0;
  *(void *)(a1 + 12sub_2168EBBB8(&a9, 0) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 112) = 0;
  return a1;
}

void sub_2169E5D8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_2169E40A0((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void sub_2169E5DE4(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    sub_2169E405C(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void sub_2169E5E3C(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    sub_2169E3FBC(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void sub_2169E5E94(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    sub_2169E3EBC(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void sub_2169E5EEC(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_2169E3F80((uint64_t)(a2 + 19));
    sub_2169E3E80((uint64_t)(a2 + 14));
    uint64_t v3 = (void *)a2[11];
    if (v3)
    {
      a2[12] = v3;
      operator delete(v3);
    }
    sub_2169E3F80((uint64_t)(a2 + 6));
    sub_2169E4020((uint64_t)(a2 + 1));
    operator delete(a2);
  }
}

void *pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::ConstantNode<long long>::ConstantNode(void *result, uint64_t a2)
{
  uint64_t *result = &unk_26C7572D0;
  result[1] = a2;
  return result;
}

{
  uint64_t *result = &unk_26C7572D0;
  result[1] = a2;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::ConstantNode<long long>::Evaluate@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(result + 8);
  a2[1] = &unk_26C750823;
  a2[3] = 0;
  a2[4] = 0;
  a2[2] = 0;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::ConstantNode<BOOL>::ConstantNode(uint64_t result, char a2)
{
  *(void *)uint64_t result = &unk_26C7572F8;
  *(unsigned char *)(result + 8) = a2;
  return result;
}

{
  *(void *)uint64_t result = &unk_26C7572F8;
  *(unsigned char *)(result + 8) = a2;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::ConstantNode<BOOL>::Evaluate@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(unsigned char *)a2 = *(unsigned char *)(result + 8);
  *(void *)(a2 + 8) = &unk_26C7501AB;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  return result;
}

void *pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::ComparisonNode<std::equal_to>::ComparisonNode(void *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t *result = &unk_26C757320;
  result[1] = v3;
  uint64_t v4 = *a3;
  *a3 = 0;
  result[2] = v4;
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t *result = &unk_26C757320;
  result[1] = v3;
  uint64_t v4 = *a3;
  *a3 = 0;
  result[2] = v4;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::ComparisonNode<std::equal_to>::Evaluate@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  v45[3] = *MEMORY[0x263EF8340];
  (*(void (**)(void *__return_ptr))(**(void **)(a1 + 8) + 16))(v44);
  (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 16) + 16))(&v42);
  sub_2169E63F4((uint64_t)v44, (uint64_t)&v42, (uint64_t)&v35);
  uint64_t v7 = v35;
  unint64_t v6 = v36;
  if (v35 == v36)
  {
    uint64_t Type = pxrInternal__aapl__pxrReserved__::VtValue::GetType((pxrInternal__aapl__pxrReserved__::VtValue *)v44, v4, v5);
    if (Type == pxrInternal__aapl__pxrReserved__::VtValue::GetType((pxrInternal__aapl__pxrReserved__::VtValue *)&v42, v12, v13))
    {
      uint64_t v32 = (char *)&v42;
      sub_2169E651C((uint64_t)v44, (unsigned __int8 **)&v32, a2);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::GetValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl *)v44, v28);
      int v14 = v29;
      BOOL v15 = (void **)v28[0];
      pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::GetValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl *)&v42, v26);
      size_t v18 = v28;
      if (v14 < 0) {
        size_t v18 = v15;
      }
      if (v27 >= 0) {
        uint64_t v19 = v26;
      }
      else {
        uint64_t v19 = (void **)v26[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot compare values of type %s and %s", v16, v17, v18, v19);
      if (v31 >= 0) {
        char v22 = &v30;
      }
      else {
        char v22 = v30;
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s: %s", v20, v21, "eq", v22);
      uint64_t v32 = 0;
      int v33 = 0;
      char v34 = 0;
      uint64_t v38 = (unsigned __int8 **)&v32;
      char v39 = 0;
      uint64_t v32 = (char *)operator new(0x18uLL);
      int v33 = (unsigned __int8 *)v32;
      char v34 = (unsigned __int8 *)(v32 + 24);
      uint64_t v23 = sub_21695F6C0((uint64_t)&v34, &__p, &v42, v32);
      std::type_info v24 = (unsigned __int8 *)v32;
      uint64_t v25 = v34;
      a2[1] = 0;
      a2[2] = v24;
      a2[3] = v23;
      a2[4] = v25;
      uint64_t v32 = 0;
      int v33 = 0;
      char v34 = 0;
      uint64_t v38 = (unsigned __int8 **)&v32;
      sub_216782F20((void ***)&v38);
      if (v41 < 0) {
        operator delete((void *)__p);
      }
      if (v31 < 0) {
        operator delete(v30);
      }
      if (v27 < 0) {
        operator delete(v26[0]);
      }
      if (v29 < 0) {
        operator delete(v28[0]);
      }
    }
  }
  else
  {
    a2[1] = 0;
    a2[2] = v7;
    uint64_t v8 = v37;
    a2[3] = v6;
    a2[4] = v8;
    unint64_t v36 = 0;
    uint64_t v37 = 0;
    uint64_t v35 = 0;
  }
  uint64_t v32 = (char *)&v35;
  sub_216782F20((void ***)&v32);
  uint64_t v35 = (void **)&v43;
  sub_216782F20(&v35);
  uint8x8_t v9 = (void ***)sub_2168EE084((uint64_t)&v42);
  *(void *)&long long v42 = v45;
  sub_216782F20(v9);
  return sub_2168EE084((uint64_t)v44);
}

void sub_2169E6330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char *a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  a30 = &a33;
  sub_216782F20((void ***)&a30);
  sub_2169E8360(v43 - 136);
  sub_2169E8360(v43 - 96);
  _Unwind_Resume(a1);
}

void sub_2169E63EC()
{
}

long long *sub_2169E63F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_2169F3338((long long *)a3, a1);
  return sub_2169F3338((long long *)a3, a2);
}

void sub_2169E6440(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216782F20((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::GetValueTypeName(pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl *this@<X0>, void *a2@<X8>)
{
  switch(sub_2169F38A8(this))
  {
    case 1u:
      uint64_t v7 = "BOOL";
      goto LABEL_8;
    case 2u:
      uint64_t v7 = "int";
      goto LABEL_8;
    case 3u:
      uint64_t v7 = "string";
      goto LABEL_8;
    case 4u:
      uint64_t v7 = "list";
      goto LABEL_8;
    case 5u:
      uint64_t v7 = "None";
LABEL_8:
      sub_216779094(a2, v7);
      break;
    default:
      pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName(this, v5, v6, (uint64_t)a2);
      break;
  }
}

void sub_2169E651C(uint64_t a1@<X0>, unsigned __int8 **a2@<X1>, void *a3@<X8>)
{
  switch(sub_2169FCDDC(a1))
  {
    case 0u:
      sub_2169FCE90((unsigned __int8 *)a1, a2, (uint64_t)a3);
      break;
    case 1u:
      uint64_t v6 = *(void *)(a1 + 8);
      if ((v6 & 4) != 0) {
        (*(void (**)(uint64_t))((v6 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_2169FCFB8(a3);
      break;
    case 2u:
      uint64_t v7 = *(void *)(a1 + 8);
      if ((v7 & 4) != 0) {
        (*(void (**)(uint64_t))((v7 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_2169FD12C(a3);
      break;
    case 3u:
      uint64_t v8 = *(void *)(a1 + 8);
      if ((v8 & 4) != 0) {
        (*(void (**)(uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_2169FD2A0(a3);
      break;
    case 4u:
      uint64_t v9 = *(void *)(a1 + 8);
      if ((v9 & 4) != 0) {
        (*(void (**)(uint64_t))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_2169FD414(a3);
      break;
    case 5u:
      uint64_t v10 = *(void *)(a1 + 8);
      if ((v10 & 4) != 0) {
        (*(void (**)(uint64_t))((v10 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_2169FD588(a3);
      break;
    case 6u:
      uint64_t v11 = *(void *)(a1 + 8);
      if ((v11 & 4) != 0) {
        (*(void (**)(uint64_t))((v11 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_2169FD6FC(a3);
      break;
    case 7u:
      sub_2169FCF24((void *)a1, (uint64_t)a2, (uint64_t)a3);
      break;
    case 8u:
      uint64_t v12 = *(void *)(a1 + 8);
      if ((v12 & 4) != 0) {
        (*(void (**)(uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_2169FD870(a3);
      break;
    case 9u:
      uint64_t v13 = *(void *)(a1 + 8);
      if ((v13 & 4) != 0) {
        (*(void (**)(uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_2169FD9E4(a3);
      break;
    case 0xAu:
      uint64_t v14 = *(void *)(a1 + 8);
      if ((v14 & 4) != 0) {
        (*(void (**)(uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_2169FDB58(a3);
      break;
    case 0xBu:
      uint64_t v15 = *(void *)(a1 + 8);
      if ((v15 & 4) != 0) {
        (*(void (**)(uint64_t))((v15 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_2169FDCCC(a3);
      break;
    case 0xCu:
      uint64_t v16 = *(void *)(a1 + 8);
      if ((v16 & 4) != 0) {
        unint64_t v17 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))((v16 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      else {
        unint64_t v17 = *(unsigned __int8 **)a1;
      }
      sub_2169FDE40((uint64_t *)a2, v17, (uint64_t)a3);
      break;
    case 0xDu:
      uint64_t v18 = *(void *)(a1 + 8);
      if ((v18 & 4) != 0) {
        (*(void (**)(uint64_t))((v18 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_2169FDEB4(a3);
      break;
    case 0xEu:
      uint64_t v19 = *(void *)(a1 + 8);
      if ((v19 & 4) != 0) {
        (*(void (**)(uint64_t))((v19 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_2169FE028(a3);
      break;
    case 0xFu:
      uint64_t v20 = *(void *)(a1 + 8);
      if ((v20 & 4) != 0) {
        (*(void (**)(uint64_t))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_2169FE19C(a3);
      break;
    case 0x10u:
      uint64_t v21 = *(void *)(a1 + 8);
      if ((v21 & 4) != 0) {
        (*(void (**)(uint64_t))((v21 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_2169FE310(a3);
      break;
    case 0x11u:
      uint64_t v22 = *(void *)(a1 + 8);
      if ((v22 & 4) != 0) {
        (*(void (**)(uint64_t))((v22 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_2169FE484(a3);
      break;
    case 0x12u:
      uint64_t v23 = *(void *)(a1 + 8);
      if ((v23 & 4) != 0) {
        (*(void (**)(uint64_t))((v23 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_2169FE5F8(a3);
      break;
    case 0x13u:
      uint64_t v24 = *(void *)(a1 + 8);
      if ((v24 & 4) != 0) {
        (*(void (**)(uint64_t))((v24 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_2169FE76C(a3);
      break;
    case 0x14u:
      uint64_t v25 = *(void *)(a1 + 8);
      if ((v25 & 4) != 0) {
        (*(void (**)(uint64_t))((v25 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_2169FE8E0(a3);
      break;
    case 0x15u:
      uint64_t v26 = *(void *)(a1 + 8);
      if ((v26 & 4) != 0) {
        (*(void (**)(uint64_t))((v26 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_2169FEA54(a3);
      break;
    case 0x16u:
      uint64_t v27 = *(void *)(a1 + 8);
      if ((v27 & 4) != 0) {
        (*(void (**)(uint64_t))((v27 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_2169FEBC8(a3);
      break;
    case 0x17u:
      uint64_t v28 = *(void *)(a1 + 8);
      if ((v28 & 4) != 0) {
        (*(void (**)(uint64_t))((v28 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_2169FED3C(a3);
      break;
    case 0x18u:
      uint64_t v29 = *(void *)(a1 + 8);
      if ((v29 & 4) != 0) {
        (*(void (**)(uint64_t))((v29 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_2169FEEB0(a3);
      break;
    case 0x19u:
      uint64_t v30 = *(void *)(a1 + 8);
      if ((v30 & 4) != 0) {
        (*(void (**)(uint64_t))((v30 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_2169FF024(a3);
      break;
    case 0x1Au:
      uint64_t v31 = *(void *)(a1 + 8);
      if ((v31 & 4) != 0) {
        (*(void (**)(uint64_t))((v31 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_2169FF198(a3);
      break;
    case 0x1Bu:
      uint64_t v32 = *(void *)(a1 + 8);
      if ((v32 & 4) != 0) {
        (*(void (**)(uint64_t))((v32 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_2169FF30C(a3);
      break;
    case 0x1Cu:
      uint64_t v33 = *(void *)(a1 + 8);
      if ((v33 & 4) != 0) {
        (*(void (**)(uint64_t))((v33 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_2169FF480(a3);
      break;
    case 0x1Du:
      uint64_t v34 = *(void *)(a1 + 8);
      if ((v34 & 4) != 0) {
        (*(void (**)(uint64_t))((v34 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_2169FF5F4(a3);
      break;
    case 0x1Eu:
      uint64_t v35 = *(void *)(a1 + 8);
      if ((v35 & 4) != 0) {
        (*(void (**)(uint64_t))((v35 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_2169FF768(a3);
      break;
    case 0x1Fu:
      uint64_t v36 = *(void *)(a1 + 8);
      if ((v36 & 4) != 0) {
        (*(void (**)(uint64_t))((v36 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_2169FF8DC(a3);
      break;
    case 0x20u:
      uint64_t v37 = *(void *)(a1 + 8);
      if ((v37 & 4) != 0) {
        (*(void (**)(uint64_t))((v37 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_2169FFA50(a3);
      break;
    case 0x21u:
      uint64_t v38 = *(void *)(a1 + 8);
      if ((v38 & 4) != 0) {
        (*(void (**)(uint64_t))((v38 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_2169FFBC4(a3);
      break;
    case 0x22u:
      uint64_t v39 = *(void *)(a1 + 8);
      if ((v39 & 4) != 0) {
        (*(void (**)(uint64_t))((v39 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_2169FFD38(a3);
      break;
    case 0x23u:
      uint64_t v40 = *(void *)(a1 + 8);
      if ((v40 & 4) != 0) {
        (*(void (**)(uint64_t))((v40 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_2169FFEAC(a3);
      break;
    case 0x24u:
      uint64_t v41 = *(void *)(a1 + 8);
      if ((v41 & 4) != 0) {
        (*(void (**)(uint64_t))((v41 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A00020(a3);
      break;
    case 0x25u:
      uint64_t v42 = *(void *)(a1 + 8);
      if ((v42 & 4) != 0) {
        (*(void (**)(uint64_t))((v42 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A00194(a3);
      break;
    case 0x26u:
      uint64_t v43 = *(void *)(a1 + 8);
      if ((v43 & 4) != 0) {
        (*(void (**)(uint64_t))((v43 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A00308(a3);
      break;
    case 0x27u:
      uint64_t v44 = *(void *)(a1 + 8);
      if ((v44 & 4) != 0) {
        (*(void (**)(uint64_t))((v44 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A0047C(a3);
      break;
    case 0x28u:
      uint64_t v45 = *(void *)(a1 + 8);
      if ((v45 & 4) != 0) {
        (*(void (**)(uint64_t))((v45 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A005F0(a3);
      break;
    case 0x29u:
      uint64_t v46 = *(void *)(a1 + 8);
      if ((v46 & 4) != 0) {
        (*(void (**)(uint64_t))((v46 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A00764(a3);
      break;
    case 0x2Au:
      uint64_t v47 = *(void *)(a1 + 8);
      if ((v47 & 4) != 0) {
        (*(void (**)(uint64_t))((v47 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A008D8(a3);
      break;
    case 0x2Bu:
      uint64_t v48 = *(void *)(a1 + 8);
      if ((v48 & 4) != 0) {
        (*(void (**)(uint64_t))((v48 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A00A4C(a3);
      break;
    case 0x2Cu:
      uint64_t v49 = *(void *)(a1 + 8);
      if ((v49 & 4) != 0) {
        (*(void (**)(uint64_t))((v49 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A00BC0(a3);
      break;
    case 0x2Du:
      uint64_t v50 = *(void *)(a1 + 8);
      if ((v50 & 4) != 0) {
        (*(void (**)(uint64_t))((v50 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A00D34(a3);
      break;
    case 0x2Eu:
      uint64_t v51 = *(void *)(a1 + 8);
      if ((v51 & 4) != 0) {
        (*(void (**)(uint64_t))((v51 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A00EA8(a3);
      break;
    case 0x2Fu:
      uint64_t v52 = *(void *)(a1 + 8);
      if ((v52 & 4) != 0) {
        (*(void (**)(uint64_t))((v52 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A0101C(a3);
      break;
    case 0x30u:
      uint64_t v53 = *(void *)(a1 + 8);
      if ((v53 & 4) != 0) {
        (*(void (**)(uint64_t))((v53 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A01190(a3);
      break;
    case 0x31u:
      uint64_t v54 = *(void *)(a1 + 8);
      if ((v54 & 4) != 0) {
        (*(void (**)(uint64_t))((v54 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A01304(a3);
      break;
    case 0x32u:
      uint64_t v55 = *(void *)(a1 + 8);
      if ((v55 & 4) != 0) {
        (*(void (**)(uint64_t))((v55 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A01478(a3);
      break;
    case 0x33u:
      uint64_t v56 = *(void *)(a1 + 8);
      if ((v56 & 4) != 0) {
        (*(void (**)(uint64_t))((v56 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A015EC(a3);
      break;
    case 0x34u:
      uint64_t v57 = *(void *)(a1 + 8);
      if ((v57 & 4) != 0) {
        (*(void (**)(uint64_t))((v57 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A01760(a3);
      break;
    case 0x35u:
      uint64_t v58 = *(void *)(a1 + 8);
      if ((v58 & 4) != 0) {
        (*(void (**)(uint64_t))((v58 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A018D4(a3);
      break;
    case 0x36u:
      uint64_t v59 = *(void *)(a1 + 8);
      if ((v59 & 4) != 0) {
        (*(void (**)(uint64_t))((v59 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A01A48(a3);
      break;
    case 0x37u:
      uint64_t v60 = *(void *)(a1 + 8);
      if ((v60 & 4) != 0) {
        (*(void (**)(uint64_t))((v60 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A01BBC(a3);
      break;
    case 0x38u:
      uint64_t v61 = *(void *)(a1 + 8);
      if ((v61 & 4) != 0) {
        (*(void (**)(uint64_t))((v61 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A01D30(a3);
      break;
    case 0x39u:
      uint64_t v62 = *(void *)(a1 + 8);
      if ((v62 & 4) != 0) {
        (*(void (**)(uint64_t))((v62 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A01EA4(a3);
      break;
    case 0x3Au:
      uint64_t v63 = *(void *)(a1 + 8);
      if ((v63 & 4) != 0) {
        (*(void (**)(uint64_t))((v63 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A02018(a3);
      break;
    case 0x3Bu:
      uint64_t v64 = *(void *)(a1 + 8);
      if ((v64 & 4) != 0) {
        (*(void (**)(uint64_t))((v64 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A0218C(a3);
      break;
    case 0x3Cu:
      uint64_t v65 = *(void *)(a1 + 8);
      if ((v65 & 4) != 0) {
        (*(void (**)(uint64_t))((v65 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A02300(a3);
      break;
    case 0x3Du:
      uint64_t v66 = *(void *)(a1 + 8);
      if ((v66 & 4) != 0) {
        (*(void (**)(uint64_t))((v66 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A02474(a3);
      break;
    case 0x3Eu:
      uint64_t v67 = *(void *)(a1 + 8);
      if ((v67 & 4) != 0) {
        (*(void (**)(uint64_t))((v67 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A025E8(a3);
      break;
    case 0x3Fu:
      uint64_t v68 = *(void *)(a1 + 8);
      if ((v68 & 4) != 0) {
        (*(void (**)(uint64_t))((v68 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A0275C(a3);
      break;
    case 0x40u:
      uint64_t v69 = *(void *)(a1 + 8);
      if ((v69 & 4) != 0) {
        (*(void (**)(uint64_t))((v69 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A028D0(a3);
      break;
    case 0x41u:
      uint64_t v70 = *(void *)(a1 + 8);
      if ((v70 & 4) != 0) {
        (*(void (**)(uint64_t))((v70 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A02A44(a3);
      break;
    case 0x42u:
      uint64_t v71 = *(void *)(a1 + 8);
      if ((v71 & 4) != 0) {
        (*(void (**)(uint64_t))((v71 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A02BB8(a3);
      break;
    case 0x43u:
      uint64_t v72 = *(void *)(a1 + 8);
      if ((v72 & 4) != 0) {
        (*(void (**)(uint64_t))((v72 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A02D2C(a3);
      break;
    case 0x44u:
      uint64_t v73 = *(void *)(a1 + 8);
      if ((v73 & 4) != 0) {
        (*(void (**)(uint64_t))((v73 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A02EA0(a3);
      break;
    case 0x45u:
      uint64_t v74 = *(void *)(a1 + 8);
      if ((v74 & 4) != 0) {
        (*(void (**)(uint64_t))((v74 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A03014(a3);
      break;
    case 0x46u:
      uint64_t v75 = *(void *)(a1 + 8);
      if ((v75 & 4) != 0) {
        (*(void (**)(uint64_t))((v75 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A03188(a3);
      break;
    case 0x47u:
      uint64_t v76 = *(void *)(a1 + 8);
      if ((v76 & 4) != 0) {
        (*(void (**)(uint64_t))((v76 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A032FC(a3);
      break;
    case 0x48u:
      uint64_t v77 = *(void *)(a1 + 8);
      if ((v77 & 4) != 0) {
        (*(void (**)(uint64_t))((v77 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A03470(a3);
      break;
    case 0x49u:
      uint64_t v78 = *(void *)(a1 + 8);
      if ((v78 & 4) != 0) {
        (*(void (**)(uint64_t))((v78 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A035E4(a3);
      break;
    case 0x4Au:
      uint64_t v79 = *(void *)(a1 + 8);
      if ((v79 & 4) != 0) {
        (*(void (**)(uint64_t))((v79 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A03758(a3);
      break;
    case 0x4Bu:
      uint64_t v80 = *(void *)(a1 + 8);
      if ((v80 & 4) != 0) {
        (*(void (**)(uint64_t))((v80 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A038CC(a3);
      break;
    case 0x4Cu:
      uint64_t v81 = *(void *)(a1 + 8);
      if ((v81 & 4) != 0) {
        (*(void (**)(uint64_t))((v81 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A03A40(a3);
      break;
    case 0x4Du:
      uint64_t v82 = *(void *)(a1 + 8);
      if ((v82 & 4) != 0) {
        (*(void (**)(uint64_t))((v82 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A03BB4(a3);
      break;
    case 0x4Eu:
      uint64_t v83 = *(void *)(a1 + 8);
      if ((v83 & 4) != 0) {
        (*(void (**)(uint64_t))((v83 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A03D28(a3);
      break;
    case 0x4Fu:
      uint64_t v84 = *(void *)(a1 + 8);
      if ((v84 & 4) != 0) {
        (*(void (**)(uint64_t))((v84 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A03E9C(a3);
      break;
    case 0x50u:
      uint64_t v85 = *(void *)(a1 + 8);
      if ((v85 & 4) != 0) {
        (*(void (**)(uint64_t))((v85 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A04010(a3);
      break;
    case 0x51u:
      uint64_t v86 = *(void *)(a1 + 8);
      if ((v86 & 4) != 0) {
        (*(void (**)(uint64_t))((v86 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A04184(a3);
      break;
    case 0x52u:
      uint64_t v87 = *(void *)(a1 + 8);
      if ((v87 & 4) != 0) {
        (*(void (**)(uint64_t))((v87 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A042F8(a3);
      break;
    case 0x53u:
      uint64_t v88 = *(void *)(a1 + 8);
      if ((v88 & 4) != 0) {
        (*(void (**)(uint64_t))((v88 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A0446C(a3);
      break;
    case 0x54u:
      uint64_t v89 = *(void *)(a1 + 8);
      if ((v89 & 4) != 0) {
        (*(void (**)(uint64_t))((v89 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A045E0(a3);
      break;
    case 0x55u:
      uint64_t v90 = *(void *)(a1 + 8);
      if ((v90 & 4) != 0) {
        (*(void (**)(uint64_t))((v90 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A04754(a3);
      break;
    case 0x56u:
      uint64_t v91 = *(void *)(a1 + 8);
      if ((v91 & 4) != 0) {
        (*(void (**)(uint64_t))((v91 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A048C8(a3);
      break;
    case 0x57u:
      uint64_t v92 = *(void *)(a1 + 8);
      if ((v92 & 4) != 0) {
        (*(void (**)(uint64_t))((v92 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A04A3C(a3);
      break;
    case 0x58u:
      uint64_t v93 = *(void *)(a1 + 8);
      if ((v93 & 4) != 0) {
        (*(void (**)(uint64_t))((v93 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A04BB0(a3);
      break;
    case 0x59u:
      uint64_t v94 = *(void *)(a1 + 8);
      if ((v94 & 4) != 0) {
        (*(void (**)(uint64_t))((v94 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A04D24(a3);
      break;
    case 0x5Au:
      uint64_t v95 = *(void *)(a1 + 8);
      if ((v95 & 4) != 0) {
        (*(void (**)(uint64_t))((v95 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A04E98(a3);
      break;
    case 0x5Bu:
      uint64_t v96 = *(void *)(a1 + 8);
      if ((v96 & 4) != 0) {
        (*(void (**)(uint64_t))((v96 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A0500C(a3);
      break;
    case 0x5Cu:
      uint64_t v97 = *(void *)(a1 + 8);
      if ((v97 & 4) != 0) {
        (*(void (**)(uint64_t))((v97 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A05180(a3);
      break;
    case 0x5Du:
      uint64_t v98 = *(void *)(a1 + 8);
      if ((v98 & 4) != 0) {
        (*(void (**)(uint64_t))((v98 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A052F4(a3);
      break;
    case 0x5Eu:
      uint64_t v99 = *(void *)(a1 + 8);
      if ((v99 & 4) != 0) {
        (*(void (**)(uint64_t))((v99 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A05468(a3);
      break;
    case 0x5Fu:
      uint64_t v100 = *(void *)(a1 + 8);
      if ((v100 & 4) != 0) {
        (*(void (**)(uint64_t))((v100 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A055DC(a3);
      break;
    default:
      sub_216A05750((uint64_t)a2, a1, (uint64_t)a3);
      break;
  }
}

uint64_t sub_2169E8360(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 16);
  sub_216782F20(&v3);
  return sub_2168EE084(a1);
}

void *pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::ComparisonNode<std::not_equal_to>::ComparisonNode(void *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t *result = &unk_26C757348;
  result[1] = v3;
  uint64_t v4 = *a3;
  *a3 = 0;
  result[2] = v4;
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t *result = &unk_26C757348;
  result[1] = v3;
  uint64_t v4 = *a3;
  *a3 = 0;
  result[2] = v4;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::ComparisonNode<std::not_equal_to>::Evaluate@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  v45[3] = *MEMORY[0x263EF8340];
  (*(void (**)(void *__return_ptr))(**(void **)(a1 + 8) + 16))(v44);
  (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 16) + 16))(&v42);
  sub_2169E63F4((uint64_t)v44, (uint64_t)&v42, (uint64_t)&v35);
  uint64_t v7 = v35;
  uint64_t v6 = v36;
  if (v35 == v36)
  {
    uint64_t Type = pxrInternal__aapl__pxrReserved__::VtValue::GetType((pxrInternal__aapl__pxrReserved__::VtValue *)v44, v4, v5);
    if (Type == pxrInternal__aapl__pxrReserved__::VtValue::GetType((pxrInternal__aapl__pxrReserved__::VtValue *)&v42, v12, v13))
    {
      uint64_t v32 = (char *)&v42;
      sub_2169E8774((uint64_t)v44, (unsigned __int8 **)&v32, a2);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::GetValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl *)v44, v28);
      int v14 = v29;
      uint64_t v15 = (void **)v28[0];
      pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::GetValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl *)&v42, v26);
      uint64_t v18 = v28;
      if (v14 < 0) {
        uint64_t v18 = v15;
      }
      if (v27 >= 0) {
        uint64_t v19 = v26;
      }
      else {
        uint64_t v19 = (void **)v26[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot compare values of type %s and %s", v16, v17, v18, v19);
      if (v31 >= 0) {
        uint64_t v22 = &v30;
      }
      else {
        uint64_t v22 = v30;
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s: %s", v20, v21, "neq", v22);
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      uint64_t v38 = (unsigned __int8 **)&v32;
      char v39 = 0;
      uint64_t v32 = (char *)operator new(0x18uLL);
      uint64_t v33 = (unsigned __int8 *)v32;
      uint64_t v34 = (unsigned __int8 *)(v32 + 24);
      uint64_t v23 = sub_21695F6C0((uint64_t)&v34, &__p, &v42, v32);
      uint64_t v24 = (unsigned __int8 *)v32;
      uint64_t v25 = v34;
      a2[1] = 0;
      a2[2] = v24;
      a2[3] = v23;
      a2[4] = v25;
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      uint64_t v38 = (unsigned __int8 **)&v32;
      sub_216782F20((void ***)&v38);
      if (v41 < 0) {
        operator delete((void *)__p);
      }
      if (v31 < 0) {
        operator delete(v30);
      }
      if (v27 < 0) {
        operator delete(v26[0]);
      }
      if (v29 < 0) {
        operator delete(v28[0]);
      }
    }
  }
  else
  {
    a2[1] = 0;
    a2[2] = v7;
    uint64_t v8 = v37;
    a2[3] = v6;
    a2[4] = v8;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    uint64_t v35 = 0;
  }
  uint64_t v32 = (char *)&v35;
  sub_216782F20((void ***)&v32);
  uint64_t v35 = (void **)&v43;
  sub_216782F20(&v35);
  uint64_t v9 = (void ***)sub_2168EE084((uint64_t)&v42);
  *(void *)&long long v42 = v45;
  sub_216782F20(v9);
  return sub_2168EE084((uint64_t)v44);
}

void sub_2169E86B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char *a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  a30 = &a33;
  sub_216782F20((void ***)&a30);
  sub_2169E8360(v43 - 136);
  sub_2169E8360(v43 - 96);
  _Unwind_Resume(a1);
}

void sub_2169E876C()
{
}

void sub_2169E8774(uint64_t a1@<X0>, unsigned __int8 **a2@<X1>, void *a3@<X8>)
{
  switch(sub_2169FCDDC(a1))
  {
    case 0u:
      sub_216A057E8((unsigned __int8 *)a1, a2, (uint64_t)a3);
      break;
    case 1u:
      uint64_t v6 = *(void *)(a1 + 8);
      if ((v6 & 4) != 0) {
        (*(void (**)(uint64_t))((v6 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A05910(a3);
      break;
    case 2u:
      uint64_t v7 = *(void *)(a1 + 8);
      if ((v7 & 4) != 0) {
        (*(void (**)(uint64_t))((v7 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A05A84(a3);
      break;
    case 3u:
      uint64_t v8 = *(void *)(a1 + 8);
      if ((v8 & 4) != 0) {
        (*(void (**)(uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A05BF8(a3);
      break;
    case 4u:
      uint64_t v9 = *(void *)(a1 + 8);
      if ((v9 & 4) != 0) {
        (*(void (**)(uint64_t))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A05D6C(a3);
      break;
    case 5u:
      uint64_t v10 = *(void *)(a1 + 8);
      if ((v10 & 4) != 0) {
        (*(void (**)(uint64_t))((v10 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A05EE0(a3);
      break;
    case 6u:
      uint64_t v11 = *(void *)(a1 + 8);
      if ((v11 & 4) != 0) {
        (*(void (**)(uint64_t))((v11 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A06054(a3);
      break;
    case 7u:
      sub_216A0587C((void *)a1, (uint64_t)a2, (uint64_t)a3);
      break;
    case 8u:
      uint64_t v12 = *(void *)(a1 + 8);
      if ((v12 & 4) != 0) {
        (*(void (**)(uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A061C8(a3);
      break;
    case 9u:
      uint64_t v13 = *(void *)(a1 + 8);
      if ((v13 & 4) != 0) {
        (*(void (**)(uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A0633C(a3);
      break;
    case 0xAu:
      uint64_t v14 = *(void *)(a1 + 8);
      if ((v14 & 4) != 0) {
        (*(void (**)(uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A064B0(a3);
      break;
    case 0xBu:
      uint64_t v15 = *(void *)(a1 + 8);
      if ((v15 & 4) != 0) {
        (*(void (**)(uint64_t))((v15 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A06624(a3);
      break;
    case 0xCu:
      uint64_t v16 = *(void *)(a1 + 8);
      if ((v16 & 4) != 0) {
        unint64_t v17 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))((v16 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      else {
        unint64_t v17 = *(unsigned __int8 **)a1;
      }
      sub_216A06798((uint64_t *)a2, v17, (uint64_t)a3);
      break;
    case 0xDu:
      uint64_t v18 = *(void *)(a1 + 8);
      if ((v18 & 4) != 0) {
        (*(void (**)(uint64_t))((v18 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A068B0(a3);
      break;
    case 0xEu:
      uint64_t v19 = *(void *)(a1 + 8);
      if ((v19 & 4) != 0) {
        (*(void (**)(uint64_t))((v19 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A06A24(a3);
      break;
    case 0xFu:
      uint64_t v20 = *(void *)(a1 + 8);
      if ((v20 & 4) != 0) {
        (*(void (**)(uint64_t))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A06B98(a3);
      break;
    case 0x10u:
      uint64_t v21 = *(void *)(a1 + 8);
      if ((v21 & 4) != 0) {
        (*(void (**)(uint64_t))((v21 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A06D0C(a3);
      break;
    case 0x11u:
      uint64_t v22 = *(void *)(a1 + 8);
      if ((v22 & 4) != 0) {
        (*(void (**)(uint64_t))((v22 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A06E80(a3);
      break;
    case 0x12u:
      uint64_t v23 = *(void *)(a1 + 8);
      if ((v23 & 4) != 0) {
        (*(void (**)(uint64_t))((v23 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A06FF4(a3);
      break;
    case 0x13u:
      uint64_t v24 = *(void *)(a1 + 8);
      if ((v24 & 4) != 0) {
        (*(void (**)(uint64_t))((v24 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A07168(a3);
      break;
    case 0x14u:
      uint64_t v25 = *(void *)(a1 + 8);
      if ((v25 & 4) != 0) {
        (*(void (**)(uint64_t))((v25 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A072DC(a3);
      break;
    case 0x15u:
      uint64_t v26 = *(void *)(a1 + 8);
      if ((v26 & 4) != 0) {
        (*(void (**)(uint64_t))((v26 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A07450(a3);
      break;
    case 0x16u:
      uint64_t v27 = *(void *)(a1 + 8);
      if ((v27 & 4) != 0) {
        (*(void (**)(uint64_t))((v27 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A075C4(a3);
      break;
    case 0x17u:
      uint64_t v28 = *(void *)(a1 + 8);
      if ((v28 & 4) != 0) {
        (*(void (**)(uint64_t))((v28 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A07738(a3);
      break;
    case 0x18u:
      uint64_t v29 = *(void *)(a1 + 8);
      if ((v29 & 4) != 0) {
        (*(void (**)(uint64_t))((v29 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A078AC(a3);
      break;
    case 0x19u:
      uint64_t v30 = *(void *)(a1 + 8);
      if ((v30 & 4) != 0) {
        (*(void (**)(uint64_t))((v30 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A07A20(a3);
      break;
    case 0x1Au:
      uint64_t v31 = *(void *)(a1 + 8);
      if ((v31 & 4) != 0) {
        (*(void (**)(uint64_t))((v31 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A07B94(a3);
      break;
    case 0x1Bu:
      uint64_t v32 = *(void *)(a1 + 8);
      if ((v32 & 4) != 0) {
        (*(void (**)(uint64_t))((v32 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A07D08(a3);
      break;
    case 0x1Cu:
      uint64_t v33 = *(void *)(a1 + 8);
      if ((v33 & 4) != 0) {
        (*(void (**)(uint64_t))((v33 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A07E7C(a3);
      break;
    case 0x1Du:
      uint64_t v34 = *(void *)(a1 + 8);
      if ((v34 & 4) != 0) {
        (*(void (**)(uint64_t))((v34 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A07FF0(a3);
      break;
    case 0x1Eu:
      uint64_t v35 = *(void *)(a1 + 8);
      if ((v35 & 4) != 0) {
        (*(void (**)(uint64_t))((v35 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A08164(a3);
      break;
    case 0x1Fu:
      uint64_t v36 = *(void *)(a1 + 8);
      if ((v36 & 4) != 0) {
        (*(void (**)(uint64_t))((v36 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A082D8(a3);
      break;
    case 0x20u:
      uint64_t v37 = *(void *)(a1 + 8);
      if ((v37 & 4) != 0) {
        (*(void (**)(uint64_t))((v37 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A0844C(a3);
      break;
    case 0x21u:
      uint64_t v38 = *(void *)(a1 + 8);
      if ((v38 & 4) != 0) {
        (*(void (**)(uint64_t))((v38 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A085C0(a3);
      break;
    case 0x22u:
      uint64_t v39 = *(void *)(a1 + 8);
      if ((v39 & 4) != 0) {
        (*(void (**)(uint64_t))((v39 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A08734(a3);
      break;
    case 0x23u:
      uint64_t v40 = *(void *)(a1 + 8);
      if ((v40 & 4) != 0) {
        (*(void (**)(uint64_t))((v40 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A088A8(a3);
      break;
    case 0x24u:
      uint64_t v41 = *(void *)(a1 + 8);
      if ((v41 & 4) != 0) {
        (*(void (**)(uint64_t))((v41 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A08A1C(a3);
      break;
    case 0x25u:
      uint64_t v42 = *(void *)(a1 + 8);
      if ((v42 & 4) != 0) {
        (*(void (**)(uint64_t))((v42 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A08B90(a3);
      break;
    case 0x26u:
      uint64_t v43 = *(void *)(a1 + 8);
      if ((v43 & 4) != 0) {
        (*(void (**)(uint64_t))((v43 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A08D04(a3);
      break;
    case 0x27u:
      uint64_t v44 = *(void *)(a1 + 8);
      if ((v44 & 4) != 0) {
        (*(void (**)(uint64_t))((v44 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A08E78(a3);
      break;
    case 0x28u:
      uint64_t v45 = *(void *)(a1 + 8);
      if ((v45 & 4) != 0) {
        (*(void (**)(uint64_t))((v45 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A08FEC(a3);
      break;
    case 0x29u:
      uint64_t v46 = *(void *)(a1 + 8);
      if ((v46 & 4) != 0) {
        (*(void (**)(uint64_t))((v46 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A09160(a3);
      break;
    case 0x2Au:
      uint64_t v47 = *(void *)(a1 + 8);
      if ((v47 & 4) != 0) {
        (*(void (**)(uint64_t))((v47 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A092D4(a3);
      break;
    case 0x2Bu:
      uint64_t v48 = *(void *)(a1 + 8);
      if ((v48 & 4) != 0) {
        (*(void (**)(uint64_t))((v48 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A09448(a3);
      break;
    case 0x2Cu:
      uint64_t v49 = *(void *)(a1 + 8);
      if ((v49 & 4) != 0) {
        (*(void (**)(uint64_t))((v49 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A095BC(a3);
      break;
    case 0x2Du:
      uint64_t v50 = *(void *)(a1 + 8);
      if ((v50 & 4) != 0) {
        (*(void (**)(uint64_t))((v50 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A09730(a3);
      break;
    case 0x2Eu:
      uint64_t v51 = *(void *)(a1 + 8);
      if ((v51 & 4) != 0) {
        (*(void (**)(uint64_t))((v51 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A098A4(a3);
      break;
    case 0x2Fu:
      uint64_t v52 = *(void *)(a1 + 8);
      if ((v52 & 4) != 0) {
        (*(void (**)(uint64_t))((v52 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A09A18(a3);
      break;
    case 0x30u:
      uint64_t v53 = *(void *)(a1 + 8);
      if ((v53 & 4) != 0) {
        (*(void (**)(uint64_t))((v53 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A09B8C(a3);
      break;
    case 0x31u:
      uint64_t v54 = *(void *)(a1 + 8);
      if ((v54 & 4) != 0) {
        (*(void (**)(uint64_t))((v54 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A09D00(a3);
      break;
    case 0x32u:
      uint64_t v55 = *(void *)(a1 + 8);
      if ((v55 & 4) != 0) {
        (*(void (**)(uint64_t))((v55 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A09E74(a3);
      break;
    case 0x33u:
      uint64_t v56 = *(void *)(a1 + 8);
      if ((v56 & 4) != 0) {
        (*(void (**)(uint64_t))((v56 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A09FE8(a3);
      break;
    case 0x34u:
      uint64_t v57 = *(void *)(a1 + 8);
      if ((v57 & 4) != 0) {
        (*(void (**)(uint64_t))((v57 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A0A15C(a3);
      break;
    case 0x35u:
      uint64_t v58 = *(void *)(a1 + 8);
      if ((v58 & 4) != 0) {
        (*(void (**)(uint64_t))((v58 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A0A2D0(a3);
      break;
    case 0x36u:
      uint64_t v59 = *(void *)(a1 + 8);
      if ((v59 & 4) != 0) {
        (*(void (**)(uint64_t))((v59 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A0A444(a3);
      break;
    case 0x37u:
      uint64_t v60 = *(void *)(a1 + 8);
      if ((v60 & 4) != 0) {
        (*(void (**)(uint64_t))((v60 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A0A5B8(a3);
      break;
    case 0x38u:
      uint64_t v61 = *(void *)(a1 + 8);
      if ((v61 & 4) != 0) {
        (*(void (**)(uint64_t))((v61 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A0A72C(a3);
      break;
    case 0x39u:
      uint64_t v62 = *(void *)(a1 + 8);
      if ((v62 & 4) != 0) {
        (*(void (**)(uint64_t))((v62 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A0A8A0(a3);
      break;
    case 0x3Au:
      uint64_t v63 = *(void *)(a1 + 8);
      if ((v63 & 4) != 0) {
        (*(void (**)(uint64_t))((v63 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A0AA14(a3);
      break;
    case 0x3Bu:
      uint64_t v64 = *(void *)(a1 + 8);
      if ((v64 & 4) != 0) {
        (*(void (**)(uint64_t))((v64 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A0AB88(a3);
      break;
    case 0x3Cu:
      uint64_t v65 = *(void *)(a1 + 8);
      if ((v65 & 4) != 0) {
        (*(void (**)(uint64_t))((v65 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A0ACFC(a3);
      break;
    case 0x3Du:
      uint64_t v66 = *(void *)(a1 + 8);
      if ((v66 & 4) != 0) {
        (*(void (**)(uint64_t))((v66 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A0AE70(a3);
      break;
    case 0x3Eu:
      uint64_t v67 = *(void *)(a1 + 8);
      if ((v67 & 4) != 0) {
        (*(void (**)(uint64_t))((v67 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A0AFE4(a3);
      break;
    case 0x3Fu:
      uint64_t v68 = *(void *)(a1 + 8);
      if ((v68 & 4) != 0) {
        (*(void (**)(uint64_t))((v68 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A0B158(a3);
      break;
    case 0x40u:
      uint64_t v69 = *(void *)(a1 + 8);
      if ((v69 & 4) != 0) {
        (*(void (**)(uint64_t))((v69 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A0B2CC(a3);
      break;
    case 0x41u:
      uint64_t v70 = *(void *)(a1 + 8);
      if ((v70 & 4) != 0) {
        (*(void (**)(uint64_t))((v70 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A0B440(a3);
      break;
    case 0x42u:
      uint64_t v71 = *(void *)(a1 + 8);
      if ((v71 & 4) != 0) {
        (*(void (**)(uint64_t))((v71 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A0B5B4(a3);
      break;
    case 0x43u:
      uint64_t v72 = *(void *)(a1 + 8);
      if ((v72 & 4) != 0) {
        (*(void (**)(uint64_t))((v72 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A0B728(a3);
      break;
    case 0x44u:
      uint64_t v73 = *(void *)(a1 + 8);
      if ((v73 & 4) != 0) {
        (*(void (**)(uint64_t))((v73 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A0B89C(a3);
      break;
    case 0x45u:
      uint64_t v74 = *(void *)(a1 + 8);
      if ((v74 & 4) != 0) {
        (*(void (**)(uint64_t))((v74 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A0BA10(a3);
      break;
    case 0x46u:
      uint64_t v75 = *(void *)(a1 + 8);
      if ((v75 & 4) != 0) {
        (*(void (**)(uint64_t))((v75 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A0BB84(a3);
      break;
    case 0x47u:
      uint64_t v76 = *(void *)(a1 + 8);
      if ((v76 & 4) != 0) {
        (*(void (**)(uint64_t))((v76 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A0BCF8(a3);
      break;
    case 0x48u:
      uint64_t v77 = *(void *)(a1 + 8);
      if ((v77 & 4) != 0) {
        (*(void (**)(uint64_t))((v77 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A0BE6C(a3);
      break;
    case 0x49u:
      uint64_t v78 = *(void *)(a1 + 8);
      if ((v78 & 4) != 0) {
        (*(void (**)(uint64_t))((v78 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A0BFE0(a3);
      break;
    case 0x4Au:
      uint64_t v79 = *(void *)(a1 + 8);
      if ((v79 & 4) != 0) {
        (*(void (**)(uint64_t))((v79 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A0C154(a3);
      break;
    case 0x4Bu:
      uint64_t v80 = *(void *)(a1 + 8);
      if ((v80 & 4) != 0) {
        (*(void (**)(uint64_t))((v80 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A0C2C8(a3);
      break;
    case 0x4Cu:
      uint64_t v81 = *(void *)(a1 + 8);
      if ((v81 & 4) != 0) {
        (*(void (**)(uint64_t))((v81 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A0C43C(a3);
      break;
    case 0x4Du:
      uint64_t v82 = *(void *)(a1 + 8);
      if ((v82 & 4) != 0) {
        (*(void (**)(uint64_t))((v82 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A0C5B0(a3);
      break;
    case 0x4Eu:
      uint64_t v83 = *(void *)(a1 + 8);
      if ((v83 & 4) != 0) {
        (*(void (**)(uint64_t))((v83 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A0C724(a3);
      break;
    case 0x4Fu:
      uint64_t v84 = *(void *)(a1 + 8);
      if ((v84 & 4) != 0) {
        (*(void (**)(uint64_t))((v84 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A0C898(a3);
      break;
    case 0x50u:
      uint64_t v85 = *(void *)(a1 + 8);
      if ((v85 & 4) != 0) {
        (*(void (**)(uint64_t))((v85 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A0CA0C(a3);
      break;
    case 0x51u:
      uint64_t v86 = *(void *)(a1 + 8);
      if ((v86 & 4) != 0) {
        (*(void (**)(uint64_t))((v86 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A0CB80(a3);
      break;
    case 0x52u:
      uint64_t v87 = *(void *)(a1 + 8);
      if ((v87 & 4) != 0) {
        (*(void (**)(uint64_t))((v87 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A0CCF4(a3);
      break;
    case 0x53u:
      uint64_t v88 = *(void *)(a1 + 8);
      if ((v88 & 4) != 0) {
        (*(void (**)(uint64_t))((v88 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A0CE68(a3);
      break;
    case 0x54u:
      uint64_t v89 = *(void *)(a1 + 8);
      if ((v89 & 4) != 0) {
        (*(void (**)(uint64_t))((v89 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A0CFDC(a3);
      break;
    case 0x55u:
      uint64_t v90 = *(void *)(a1 + 8);
      if ((v90 & 4) != 0) {
        (*(void (**)(uint64_t))((v90 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A0D150(a3);
      break;
    case 0x56u:
      uint64_t v91 = *(void *)(a1 + 8);
      if ((v91 & 4) != 0) {
        (*(void (**)(uint64_t))((v91 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A0D2C4(a3);
      break;
    case 0x57u:
      uint64_t v92 = *(void *)(a1 + 8);
      if ((v92 & 4) != 0) {
        (*(void (**)(uint64_t))((v92 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A0D438(a3);
      break;
    case 0x58u:
      uint64_t v93 = *(void *)(a1 + 8);
      if ((v93 & 4) != 0) {
        (*(void (**)(uint64_t))((v93 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A0D5AC(a3);
      break;
    case 0x59u:
      uint64_t v94 = *(void *)(a1 + 8);
      if ((v94 & 4) != 0) {
        (*(void (**)(uint64_t))((v94 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A0D720(a3);
      break;
    case 0x5Au:
      uint64_t v95 = *(void *)(a1 + 8);
      if ((v95 & 4) != 0) {
        (*(void (**)(uint64_t))((v95 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A0D894(a3);
      break;
    case 0x5Bu:
      uint64_t v96 = *(void *)(a1 + 8);
      if ((v96 & 4) != 0) {
        (*(void (**)(uint64_t))((v96 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A0DA08(a3);
      break;
    case 0x5Cu:
      uint64_t v97 = *(void *)(a1 + 8);
      if ((v97 & 4) != 0) {
        (*(void (**)(uint64_t))((v97 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A0DB7C(a3);
      break;
    case 0x5Du:
      uint64_t v98 = *(void *)(a1 + 8);
      if ((v98 & 4) != 0) {
        (*(void (**)(uint64_t))((v98 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A0DCF0(a3);
      break;
    case 0x5Eu:
      uint64_t v99 = *(void *)(a1 + 8);
      if ((v99 & 4) != 0) {
        (*(void (**)(uint64_t))((v99 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A0DE64(a3);
      break;
    case 0x5Fu:
      uint64_t v100 = *(void *)(a1 + 8);
      if ((v100 & 4) != 0) {
        (*(void (**)(uint64_t))((v100 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A0DFD8(a3);
      break;
    default:
      sub_216A0E14C((uint64_t)a2, a1, (uint64_t)a3);
      break;
  }
}

void *pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::ComparisonNode<std::less>::ComparisonNode(void *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t *result = &unk_26C757370;
  result[1] = v3;
  uint64_t v4 = *a3;
  *a3 = 0;
  result[2] = v4;
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t *result = &unk_26C757370;
  result[1] = v3;
  uint64_t v4 = *a3;
  *a3 = 0;
  result[2] = v4;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::ComparisonNode<std::less>::Evaluate@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  v45[3] = *MEMORY[0x263EF8340];
  (*(void (**)(void *__return_ptr))(**(void **)(a1 + 8) + 16))(v44);
  (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 16) + 16))(&v42);
  sub_2169E63F4((uint64_t)v44, (uint64_t)&v42, (uint64_t)&v35);
  uint64_t v7 = v35;
  uint64_t v6 = v36;
  if (v35 == v36)
  {
    uint64_t Type = pxrInternal__aapl__pxrReserved__::VtValue::GetType((pxrInternal__aapl__pxrReserved__::VtValue *)v44, v4, v5);
    if (Type == pxrInternal__aapl__pxrReserved__::VtValue::GetType((pxrInternal__aapl__pxrReserved__::VtValue *)&v42, v12, v13))
    {
      uint64_t v32 = (char *)&v42;
      sub_2169EA98C((uint64_t)v44, (unsigned __int8 **)&v32, a2);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::GetValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl *)v44, v28);
      int v14 = v29;
      uint64_t v15 = (void **)v28[0];
      pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::GetValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl *)&v42, v26);
      uint64_t v18 = v28;
      if (v14 < 0) {
        uint64_t v18 = v15;
      }
      if (v27 >= 0) {
        uint64_t v19 = v26;
      }
      else {
        uint64_t v19 = (void **)v26[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot compare values of type %s and %s", v16, v17, v18, v19);
      if (v31 >= 0) {
        uint64_t v22 = &v30;
      }
      else {
        uint64_t v22 = v30;
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s: %s", v20, v21, "lt", v22);
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      uint64_t v38 = (unsigned __int8 **)&v32;
      char v39 = 0;
      uint64_t v32 = (char *)operator new(0x18uLL);
      uint64_t v33 = (unsigned __int8 *)v32;
      uint64_t v34 = (unsigned __int8 *)(v32 + 24);
      uint64_t v23 = sub_21695F6C0((uint64_t)&v34, &__p, &v42, v32);
      uint64_t v24 = (unsigned __int8 *)v32;
      uint64_t v25 = v34;
      a2[1] = 0;
      a2[2] = v24;
      a2[3] = v23;
      a2[4] = v25;
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      uint64_t v38 = (unsigned __int8 **)&v32;
      sub_216782F20((void ***)&v38);
      if (v41 < 0) {
        operator delete((void *)__p);
      }
      if (v31 < 0) {
        operator delete(v30);
      }
      if (v27 < 0) {
        operator delete(v26[0]);
      }
      if (v29 < 0) {
        operator delete(v28[0]);
      }
    }
  }
  else
  {
    a2[1] = 0;
    a2[2] = v7;
    uint64_t v8 = v37;
    a2[3] = v6;
    a2[4] = v8;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    uint64_t v35 = 0;
  }
  uint64_t v32 = (char *)&v35;
  sub_216782F20((void ***)&v32);
  uint64_t v35 = (void **)&v43;
  sub_216782F20(&v35);
  uint64_t v9 = (void ***)sub_2168EE084((uint64_t)&v42);
  *(void *)&long long v42 = v45;
  sub_216782F20(v9);
  return sub_2168EE084((uint64_t)v44);
}

void sub_2169EA8C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char *a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  a30 = &a33;
  sub_216782F20((void ***)&a30);
  sub_2169E8360(v43 - 136);
  sub_2169E8360(v43 - 96);
  _Unwind_Resume(a1);
}

void sub_2169EA984()
{
}

void sub_2169EA98C(uint64_t a1@<X0>, unsigned __int8 **a2@<X1>, void *a3@<X8>)
{
  switch(sub_2169FCDDC(a1))
  {
    case 0u:
      sub_216A0E1E0((unsigned __int8 *)a1, a2, (uint64_t)a3);
      break;
    case 1u:
      uint64_t v6 = *(void *)(a1 + 8);
      if ((v6 & 4) != 0) {
        (*(void (**)(uint64_t))((v6 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A0E308(a3);
      break;
    case 2u:
      uint64_t v7 = *(void *)(a1 + 8);
      if ((v7 & 4) != 0) {
        (*(void (**)(uint64_t))((v7 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A0E47C(a3);
      break;
    case 3u:
      uint64_t v8 = *(void *)(a1 + 8);
      if ((v8 & 4) != 0) {
        (*(void (**)(uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A0E5F0(a3);
      break;
    case 4u:
      uint64_t v9 = *(void *)(a1 + 8);
      if ((v9 & 4) != 0) {
        (*(void (**)(uint64_t))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A0E764(a3);
      break;
    case 5u:
      uint64_t v10 = *(void *)(a1 + 8);
      if ((v10 & 4) != 0) {
        (*(void (**)(uint64_t))((v10 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A0E8D8(a3);
      break;
    case 6u:
      uint64_t v11 = *(void *)(a1 + 8);
      if ((v11 & 4) != 0) {
        (*(void (**)(uint64_t))((v11 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A0EA4C(a3);
      break;
    case 7u:
      sub_216A0E274((void *)a1, (uint64_t)a2, (uint64_t)a3);
      break;
    case 8u:
      uint64_t v12 = *(void *)(a1 + 8);
      if ((v12 & 4) != 0) {
        (*(void (**)(uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A0EBC0(a3);
      break;
    case 9u:
      uint64_t v13 = *(void *)(a1 + 8);
      if ((v13 & 4) != 0) {
        (*(void (**)(uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A0ED34(a3);
      break;
    case 0xAu:
      uint64_t v14 = *(void *)(a1 + 8);
      if ((v14 & 4) != 0) {
        (*(void (**)(uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A0EEA8(a3);
      break;
    case 0xBu:
      uint64_t v15 = *(void *)(a1 + 8);
      if ((v15 & 4) != 0) {
        (*(void (**)(uint64_t))((v15 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A0F01C(a3);
      break;
    case 0xCu:
      uint64_t v16 = *(void *)(a1 + 8);
      if ((v16 & 4) != 0) {
        unint64_t v17 = (const void **)(*(uint64_t (**)(uint64_t))((v16 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      else {
        unint64_t v17 = *(const void ***)a1;
      }
      sub_216A0F190((uint64_t *)a2, v17, (uint64_t)a3);
      break;
    case 0xDu:
      uint64_t v18 = *(void *)(a1 + 8);
      if ((v18 & 4) != 0) {
        (*(void (**)(uint64_t))((v18 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A0F204(a3);
      break;
    case 0xEu:
      uint64_t v19 = *(void *)(a1 + 8);
      if ((v19 & 4) != 0) {
        (*(void (**)(uint64_t))((v19 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A0F378(a3);
      break;
    case 0xFu:
      uint64_t v20 = *(void *)(a1 + 8);
      if ((v20 & 4) != 0) {
        (*(void (**)(uint64_t))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A0F4EC(a3);
      break;
    case 0x10u:
      uint64_t v21 = *(void *)(a1 + 8);
      if ((v21 & 4) != 0) {
        (*(void (**)(uint64_t))((v21 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A0F660(a3);
      break;
    case 0x11u:
      uint64_t v22 = *(void *)(a1 + 8);
      if ((v22 & 4) != 0) {
        (*(void (**)(uint64_t))((v22 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A0F7D4(a3);
      break;
    case 0x12u:
      uint64_t v23 = *(void *)(a1 + 8);
      if ((v23 & 4) != 0) {
        (*(void (**)(uint64_t))((v23 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A0F948(a3);
      break;
    case 0x13u:
      uint64_t v24 = *(void *)(a1 + 8);
      if ((v24 & 4) != 0) {
        (*(void (**)(uint64_t))((v24 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A0FABC(a3);
      break;
    case 0x14u:
      uint64_t v25 = *(void *)(a1 + 8);
      if ((v25 & 4) != 0) {
        (*(void (**)(uint64_t))((v25 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A0FC30(a3);
      break;
    case 0x15u:
      uint64_t v26 = *(void *)(a1 + 8);
      if ((v26 & 4) != 0) {
        (*(void (**)(uint64_t))((v26 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A0FDA4(a3);
      break;
    case 0x16u:
      uint64_t v27 = *(void *)(a1 + 8);
      if ((v27 & 4) != 0) {
        (*(void (**)(uint64_t))((v27 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A0FF18(a3);
      break;
    case 0x17u:
      uint64_t v28 = *(void *)(a1 + 8);
      if ((v28 & 4) != 0) {
        (*(void (**)(uint64_t))((v28 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1008C(a3);
      break;
    case 0x18u:
      uint64_t v29 = *(void *)(a1 + 8);
      if ((v29 & 4) != 0) {
        (*(void (**)(uint64_t))((v29 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A10200(a3);
      break;
    case 0x19u:
      uint64_t v30 = *(void *)(a1 + 8);
      if ((v30 & 4) != 0) {
        (*(void (**)(uint64_t))((v30 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A10374(a3);
      break;
    case 0x1Au:
      uint64_t v31 = *(void *)(a1 + 8);
      if ((v31 & 4) != 0) {
        (*(void (**)(uint64_t))((v31 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A104E8(a3);
      break;
    case 0x1Bu:
      uint64_t v32 = *(void *)(a1 + 8);
      if ((v32 & 4) != 0) {
        (*(void (**)(uint64_t))((v32 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1065C(a3);
      break;
    case 0x1Cu:
      uint64_t v33 = *(void *)(a1 + 8);
      if ((v33 & 4) != 0) {
        (*(void (**)(uint64_t))((v33 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A107D0(a3);
      break;
    case 0x1Du:
      uint64_t v34 = *(void *)(a1 + 8);
      if ((v34 & 4) != 0) {
        (*(void (**)(uint64_t))((v34 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A10944(a3);
      break;
    case 0x1Eu:
      uint64_t v35 = *(void *)(a1 + 8);
      if ((v35 & 4) != 0) {
        (*(void (**)(uint64_t))((v35 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A10AB8(a3);
      break;
    case 0x1Fu:
      uint64_t v36 = *(void *)(a1 + 8);
      if ((v36 & 4) != 0) {
        (*(void (**)(uint64_t))((v36 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A10C2C(a3);
      break;
    case 0x20u:
      uint64_t v37 = *(void *)(a1 + 8);
      if ((v37 & 4) != 0) {
        (*(void (**)(uint64_t))((v37 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A10DA0(a3);
      break;
    case 0x21u:
      uint64_t v38 = *(void *)(a1 + 8);
      if ((v38 & 4) != 0) {
        (*(void (**)(uint64_t))((v38 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A10F14(a3);
      break;
    case 0x22u:
      uint64_t v39 = *(void *)(a1 + 8);
      if ((v39 & 4) != 0) {
        (*(void (**)(uint64_t))((v39 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A11088(a3);
      break;
    case 0x23u:
      uint64_t v40 = *(void *)(a1 + 8);
      if ((v40 & 4) != 0) {
        (*(void (**)(uint64_t))((v40 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A111FC(a3);
      break;
    case 0x24u:
      uint64_t v41 = *(void *)(a1 + 8);
      if ((v41 & 4) != 0) {
        (*(void (**)(uint64_t))((v41 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A11370(a3);
      break;
    case 0x25u:
      uint64_t v42 = *(void *)(a1 + 8);
      if ((v42 & 4) != 0) {
        (*(void (**)(uint64_t))((v42 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A114E4(a3);
      break;
    case 0x26u:
      uint64_t v43 = *(void *)(a1 + 8);
      if ((v43 & 4) != 0) {
        (*(void (**)(uint64_t))((v43 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A11658(a3);
      break;
    case 0x27u:
      uint64_t v44 = *(void *)(a1 + 8);
      if ((v44 & 4) != 0) {
        (*(void (**)(uint64_t))((v44 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A117CC(a3);
      break;
    case 0x28u:
      uint64_t v45 = *(void *)(a1 + 8);
      if ((v45 & 4) != 0) {
        (*(void (**)(uint64_t))((v45 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A11940(a3);
      break;
    case 0x29u:
      uint64_t v46 = *(void *)(a1 + 8);
      if ((v46 & 4) != 0) {
        (*(void (**)(uint64_t))((v46 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A11AB4(a3);
      break;
    case 0x2Au:
      uint64_t v47 = *(void *)(a1 + 8);
      if ((v47 & 4) != 0) {
        (*(void (**)(uint64_t))((v47 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A11C28(a3);
      break;
    case 0x2Bu:
      uint64_t v48 = *(void *)(a1 + 8);
      if ((v48 & 4) != 0) {
        (*(void (**)(uint64_t))((v48 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A11D9C(a3);
      break;
    case 0x2Cu:
      uint64_t v49 = *(void *)(a1 + 8);
      if ((v49 & 4) != 0) {
        (*(void (**)(uint64_t))((v49 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A11F10(a3);
      break;
    case 0x2Du:
      uint64_t v50 = *(void *)(a1 + 8);
      if ((v50 & 4) != 0) {
        (*(void (**)(uint64_t))((v50 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A12084(a3);
      break;
    case 0x2Eu:
      uint64_t v51 = *(void *)(a1 + 8);
      if ((v51 & 4) != 0) {
        (*(void (**)(uint64_t))((v51 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A121F8(a3);
      break;
    case 0x2Fu:
      uint64_t v52 = *(void *)(a1 + 8);
      if ((v52 & 4) != 0) {
        (*(void (**)(uint64_t))((v52 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1236C(a3);
      break;
    case 0x30u:
      uint64_t v53 = *(void *)(a1 + 8);
      if ((v53 & 4) != 0) {
        (*(void (**)(uint64_t))((v53 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A124E0(a3);
      break;
    case 0x31u:
      uint64_t v54 = *(void *)(a1 + 8);
      if ((v54 & 4) != 0) {
        (*(void (**)(uint64_t))((v54 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A12654(a3);
      break;
    case 0x32u:
      uint64_t v55 = *(void *)(a1 + 8);
      if ((v55 & 4) != 0) {
        (*(void (**)(uint64_t))((v55 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A127C8(a3);
      break;
    case 0x33u:
      uint64_t v56 = *(void *)(a1 + 8);
      if ((v56 & 4) != 0) {
        (*(void (**)(uint64_t))((v56 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1293C(a3);
      break;
    case 0x34u:
      uint64_t v57 = *(void *)(a1 + 8);
      if ((v57 & 4) != 0) {
        (*(void (**)(uint64_t))((v57 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A12AB0(a3);
      break;
    case 0x35u:
      uint64_t v58 = *(void *)(a1 + 8);
      if ((v58 & 4) != 0) {
        (*(void (**)(uint64_t))((v58 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A12C24(a3);
      break;
    case 0x36u:
      uint64_t v59 = *(void *)(a1 + 8);
      if ((v59 & 4) != 0) {
        (*(void (**)(uint64_t))((v59 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A12D98(a3);
      break;
    case 0x37u:
      uint64_t v60 = *(void *)(a1 + 8);
      if ((v60 & 4) != 0) {
        (*(void (**)(uint64_t))((v60 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A12F0C(a3);
      break;
    case 0x38u:
      uint64_t v61 = *(void *)(a1 + 8);
      if ((v61 & 4) != 0) {
        (*(void (**)(uint64_t))((v61 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A13080(a3);
      break;
    case 0x39u:
      uint64_t v62 = *(void *)(a1 + 8);
      if ((v62 & 4) != 0) {
        (*(void (**)(uint64_t))((v62 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A131F4(a3);
      break;
    case 0x3Au:
      uint64_t v63 = *(void *)(a1 + 8);
      if ((v63 & 4) != 0) {
        (*(void (**)(uint64_t))((v63 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A13368(a3);
      break;
    case 0x3Bu:
      uint64_t v64 = *(void *)(a1 + 8);
      if ((v64 & 4) != 0) {
        (*(void (**)(uint64_t))((v64 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A134DC(a3);
      break;
    case 0x3Cu:
      uint64_t v65 = *(void *)(a1 + 8);
      if ((v65 & 4) != 0) {
        (*(void (**)(uint64_t))((v65 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A13650(a3);
      break;
    case 0x3Du:
      uint64_t v66 = *(void *)(a1 + 8);
      if ((v66 & 4) != 0) {
        (*(void (**)(uint64_t))((v66 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A137C4(a3);
      break;
    case 0x3Eu:
      uint64_t v67 = *(void *)(a1 + 8);
      if ((v67 & 4) != 0) {
        (*(void (**)(uint64_t))((v67 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A13938(a3);
      break;
    case 0x3Fu:
      uint64_t v68 = *(void *)(a1 + 8);
      if ((v68 & 4) != 0) {
        (*(void (**)(uint64_t))((v68 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A13AAC(a3);
      break;
    case 0x40u:
      uint64_t v69 = *(void *)(a1 + 8);
      if ((v69 & 4) != 0) {
        (*(void (**)(uint64_t))((v69 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A13C20(a3);
      break;
    case 0x41u:
      uint64_t v70 = *(void *)(a1 + 8);
      if ((v70 & 4) != 0) {
        (*(void (**)(uint64_t))((v70 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A13D94(a3);
      break;
    case 0x42u:
      uint64_t v71 = *(void *)(a1 + 8);
      if ((v71 & 4) != 0) {
        (*(void (**)(uint64_t))((v71 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A13F08(a3);
      break;
    case 0x43u:
      uint64_t v72 = *(void *)(a1 + 8);
      if ((v72 & 4) != 0) {
        (*(void (**)(uint64_t))((v72 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1407C(a3);
      break;
    case 0x44u:
      uint64_t v73 = *(void *)(a1 + 8);
      if ((v73 & 4) != 0) {
        (*(void (**)(uint64_t))((v73 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A141F0(a3);
      break;
    case 0x45u:
      uint64_t v74 = *(void *)(a1 + 8);
      if ((v74 & 4) != 0) {
        (*(void (**)(uint64_t))((v74 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A14364(a3);
      break;
    case 0x46u:
      uint64_t v75 = *(void *)(a1 + 8);
      if ((v75 & 4) != 0) {
        (*(void (**)(uint64_t))((v75 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A144D8(a3);
      break;
    case 0x47u:
      uint64_t v76 = *(void *)(a1 + 8);
      if ((v76 & 4) != 0) {
        (*(void (**)(uint64_t))((v76 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1464C(a3);
      break;
    case 0x48u:
      uint64_t v77 = *(void *)(a1 + 8);
      if ((v77 & 4) != 0) {
        (*(void (**)(uint64_t))((v77 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A147C0(a3);
      break;
    case 0x49u:
      uint64_t v78 = *(void *)(a1 + 8);
      if ((v78 & 4) != 0) {
        (*(void (**)(uint64_t))((v78 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A14934(a3);
      break;
    case 0x4Au:
      uint64_t v79 = *(void *)(a1 + 8);
      if ((v79 & 4) != 0) {
        (*(void (**)(uint64_t))((v79 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A14AA8(a3);
      break;
    case 0x4Bu:
      uint64_t v80 = *(void *)(a1 + 8);
      if ((v80 & 4) != 0) {
        (*(void (**)(uint64_t))((v80 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A14C1C(a3);
      break;
    case 0x4Cu:
      uint64_t v81 = *(void *)(a1 + 8);
      if ((v81 & 4) != 0) {
        (*(void (**)(uint64_t))((v81 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A14D90(a3);
      break;
    case 0x4Du:
      uint64_t v82 = *(void *)(a1 + 8);
      if ((v82 & 4) != 0) {
        (*(void (**)(uint64_t))((v82 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A14F04(a3);
      break;
    case 0x4Eu:
      uint64_t v83 = *(void *)(a1 + 8);
      if ((v83 & 4) != 0) {
        (*(void (**)(uint64_t))((v83 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A15078(a3);
      break;
    case 0x4Fu:
      uint64_t v84 = *(void *)(a1 + 8);
      if ((v84 & 4) != 0) {
        (*(void (**)(uint64_t))((v84 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A151EC(a3);
      break;
    case 0x50u:
      uint64_t v85 = *(void *)(a1 + 8);
      if ((v85 & 4) != 0) {
        (*(void (**)(uint64_t))((v85 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A15360(a3);
      break;
    case 0x51u:
      uint64_t v86 = *(void *)(a1 + 8);
      if ((v86 & 4) != 0) {
        (*(void (**)(uint64_t))((v86 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A154D4(a3);
      break;
    case 0x52u:
      uint64_t v87 = *(void *)(a1 + 8);
      if ((v87 & 4) != 0) {
        (*(void (**)(uint64_t))((v87 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A15648(a3);
      break;
    case 0x53u:
      uint64_t v88 = *(void *)(a1 + 8);
      if ((v88 & 4) != 0) {
        (*(void (**)(uint64_t))((v88 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A157BC(a3);
      break;
    case 0x54u:
      uint64_t v89 = *(void *)(a1 + 8);
      if ((v89 & 4) != 0) {
        (*(void (**)(uint64_t))((v89 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A15930(a3);
      break;
    case 0x55u:
      uint64_t v90 = *(void *)(a1 + 8);
      if ((v90 & 4) != 0) {
        (*(void (**)(uint64_t))((v90 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A15AA4(a3);
      break;
    case 0x56u:
      uint64_t v91 = *(void *)(a1 + 8);
      if ((v91 & 4) != 0) {
        (*(void (**)(uint64_t))((v91 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A15C18(a3);
      break;
    case 0x57u:
      uint64_t v92 = *(void *)(a1 + 8);
      if ((v92 & 4) != 0) {
        (*(void (**)(uint64_t))((v92 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A15D8C(a3);
      break;
    case 0x58u:
      uint64_t v93 = *(void *)(a1 + 8);
      if ((v93 & 4) != 0) {
        (*(void (**)(uint64_t))((v93 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A15F00(a3);
      break;
    case 0x59u:
      uint64_t v94 = *(void *)(a1 + 8);
      if ((v94 & 4) != 0) {
        (*(void (**)(uint64_t))((v94 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A16074(a3);
      break;
    case 0x5Au:
      uint64_t v95 = *(void *)(a1 + 8);
      if ((v95 & 4) != 0) {
        (*(void (**)(uint64_t))((v95 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A161E8(a3);
      break;
    case 0x5Bu:
      uint64_t v96 = *(void *)(a1 + 8);
      if ((v96 & 4) != 0) {
        (*(void (**)(uint64_t))((v96 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1635C(a3);
      break;
    case 0x5Cu:
      uint64_t v97 = *(void *)(a1 + 8);
      if ((v97 & 4) != 0) {
        (*(void (**)(uint64_t))((v97 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A164D0(a3);
      break;
    case 0x5Du:
      uint64_t v98 = *(void *)(a1 + 8);
      if ((v98 & 4) != 0) {
        (*(void (**)(uint64_t))((v98 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A16644(a3);
      break;
    case 0x5Eu:
      uint64_t v99 = *(void *)(a1 + 8);
      if ((v99 & 4) != 0) {
        (*(void (**)(uint64_t))((v99 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A167B8(a3);
      break;
    case 0x5Fu:
      uint64_t v100 = *(void *)(a1 + 8);
      if ((v100 & 4) != 0) {
        (*(void (**)(uint64_t))((v100 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1692C(a3);
      break;
    default:
      sub_216A16AA0((uint64_t)a2, a1, a3);
      break;
  }
}

void *pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::ComparisonNode<std::less_equal>::ComparisonNode(void *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t *result = &unk_26C757398;
  result[1] = v3;
  uint64_t v4 = *a3;
  *a3 = 0;
  result[2] = v4;
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t *result = &unk_26C757398;
  result[1] = v3;
  uint64_t v4 = *a3;
  *a3 = 0;
  result[2] = v4;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::ComparisonNode<std::less_equal>::Evaluate@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  v45[3] = *MEMORY[0x263EF8340];
  (*(void (**)(void *__return_ptr))(**(void **)(a1 + 8) + 16))(v44);
  (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 16) + 16))(&v42);
  sub_2169E63F4((uint64_t)v44, (uint64_t)&v42, (uint64_t)&v35);
  uint64_t v7 = v35;
  uint64_t v6 = v36;
  if (v35 == v36)
  {
    uint64_t Type = pxrInternal__aapl__pxrReserved__::VtValue::GetType((pxrInternal__aapl__pxrReserved__::VtValue *)v44, v4, v5);
    if (Type == pxrInternal__aapl__pxrReserved__::VtValue::GetType((pxrInternal__aapl__pxrReserved__::VtValue *)&v42, v12, v13))
    {
      uint64_t v32 = (char *)&v42;
      sub_2169ECBA4((uint64_t)v44, (unsigned __int8 **)&v32, a2);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::GetValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl *)v44, v28);
      int v14 = v29;
      uint64_t v15 = (void **)v28[0];
      pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::GetValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl *)&v42, v26);
      uint64_t v18 = v28;
      if (v14 < 0) {
        uint64_t v18 = v15;
      }
      if (v27 >= 0) {
        uint64_t v19 = v26;
      }
      else {
        uint64_t v19 = (void **)v26[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot compare values of type %s and %s", v16, v17, v18, v19);
      if (v31 >= 0) {
        uint64_t v22 = &v30;
      }
      else {
        uint64_t v22 = v30;
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s: %s", v20, v21, "leq", v22);
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      uint64_t v38 = (unsigned __int8 **)&v32;
      char v39 = 0;
      uint64_t v32 = (char *)operator new(0x18uLL);
      uint64_t v33 = (unsigned __int8 *)v32;
      uint64_t v34 = (unsigned __int8 *)(v32 + 24);
      uint64_t v23 = sub_21695F6C0((uint64_t)&v34, &__p, &v42, v32);
      uint64_t v24 = (unsigned __int8 *)v32;
      uint64_t v25 = v34;
      a2[1] = 0;
      a2[2] = v24;
      a2[3] = v23;
      a2[4] = v25;
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      uint64_t v38 = (unsigned __int8 **)&v32;
      sub_216782F20((void ***)&v38);
      if (v41 < 0) {
        operator delete((void *)__p);
      }
      if (v31 < 0) {
        operator delete(v30);
      }
      if (v27 < 0) {
        operator delete(v26[0]);
      }
      if (v29 < 0) {
        operator delete(v28[0]);
      }
    }
  }
  else
  {
    a2[1] = 0;
    a2[2] = v7;
    uint64_t v8 = v37;
    a2[3] = v6;
    a2[4] = v8;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    uint64_t v35 = 0;
  }
  uint64_t v32 = (char *)&v35;
  sub_216782F20((void ***)&v32);
  uint64_t v35 = (void **)&v43;
  sub_216782F20(&v35);
  uint64_t v9 = (void ***)sub_2168EE084((uint64_t)&v42);
  *(void *)&long long v42 = v45;
  sub_216782F20(v9);
  return sub_2168EE084((uint64_t)v44);
}

void sub_2169ECAE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char *a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  a30 = &a33;
  sub_216782F20((void ***)&a30);
  sub_2169E8360(v43 - 136);
  sub_2169E8360(v43 - 96);
  _Unwind_Resume(a1);
}

void sub_2169ECB9C()
{
}

void sub_2169ECBA4(uint64_t a1@<X0>, unsigned __int8 **a2@<X1>, void *a3@<X8>)
{
  switch(sub_2169FCDDC(a1))
  {
    case 0u:
      sub_216A16CB0((unsigned __int8 *)a1, a2, (uint64_t)a3);
      break;
    case 1u:
      uint64_t v6 = *(void *)(a1 + 8);
      if ((v6 & 4) != 0) {
        (*(void (**)(uint64_t))((v6 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A16DD8(a3);
      break;
    case 2u:
      uint64_t v7 = *(void *)(a1 + 8);
      if ((v7 & 4) != 0) {
        (*(void (**)(uint64_t))((v7 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A16F4C(a3);
      break;
    case 3u:
      uint64_t v8 = *(void *)(a1 + 8);
      if ((v8 & 4) != 0) {
        (*(void (**)(uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A170C0(a3);
      break;
    case 4u:
      uint64_t v9 = *(void *)(a1 + 8);
      if ((v9 & 4) != 0) {
        (*(void (**)(uint64_t))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A17234(a3);
      break;
    case 5u:
      uint64_t v10 = *(void *)(a1 + 8);
      if ((v10 & 4) != 0) {
        (*(void (**)(uint64_t))((v10 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A173A8(a3);
      break;
    case 6u:
      uint64_t v11 = *(void *)(a1 + 8);
      if ((v11 & 4) != 0) {
        (*(void (**)(uint64_t))((v11 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1751C(a3);
      break;
    case 7u:
      sub_216A16D44((void *)a1, (uint64_t)a2, (uint64_t)a3);
      break;
    case 8u:
      uint64_t v12 = *(void *)(a1 + 8);
      if ((v12 & 4) != 0) {
        (*(void (**)(uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A17690(a3);
      break;
    case 9u:
      uint64_t v13 = *(void *)(a1 + 8);
      if ((v13 & 4) != 0) {
        (*(void (**)(uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A17804(a3);
      break;
    case 0xAu:
      uint64_t v14 = *(void *)(a1 + 8);
      if ((v14 & 4) != 0) {
        (*(void (**)(uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A17978(a3);
      break;
    case 0xBu:
      uint64_t v15 = *(void *)(a1 + 8);
      if ((v15 & 4) != 0) {
        (*(void (**)(uint64_t))((v15 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A17AEC(a3);
      break;
    case 0xCu:
      uint64_t v16 = *(void *)(a1 + 8);
      if ((v16 & 4) != 0) {
        unint64_t v17 = (void *)(*(uint64_t (**)(uint64_t))((v16 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      else {
        unint64_t v17 = *(void **)a1;
      }
      sub_216A17C60((uint64_t *)a2, v17, (uint64_t)a3);
      break;
    case 0xDu:
      uint64_t v18 = *(void *)(a1 + 8);
      if ((v18 & 4) != 0) {
        (*(void (**)(uint64_t))((v18 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A17D40(a3);
      break;
    case 0xEu:
      uint64_t v19 = *(void *)(a1 + 8);
      if ((v19 & 4) != 0) {
        (*(void (**)(uint64_t))((v19 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A17EB4(a3);
      break;
    case 0xFu:
      uint64_t v20 = *(void *)(a1 + 8);
      if ((v20 & 4) != 0) {
        (*(void (**)(uint64_t))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A18028(a3);
      break;
    case 0x10u:
      uint64_t v21 = *(void *)(a1 + 8);
      if ((v21 & 4) != 0) {
        (*(void (**)(uint64_t))((v21 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1819C(a3);
      break;
    case 0x11u:
      uint64_t v22 = *(void *)(a1 + 8);
      if ((v22 & 4) != 0) {
        (*(void (**)(uint64_t))((v22 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A18310(a3);
      break;
    case 0x12u:
      uint64_t v23 = *(void *)(a1 + 8);
      if ((v23 & 4) != 0) {
        (*(void (**)(uint64_t))((v23 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A18484(a3);
      break;
    case 0x13u:
      uint64_t v24 = *(void *)(a1 + 8);
      if ((v24 & 4) != 0) {
        (*(void (**)(uint64_t))((v24 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A185F8(a3);
      break;
    case 0x14u:
      uint64_t v25 = *(void *)(a1 + 8);
      if ((v25 & 4) != 0) {
        (*(void (**)(uint64_t))((v25 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1876C(a3);
      break;
    case 0x15u:
      uint64_t v26 = *(void *)(a1 + 8);
      if ((v26 & 4) != 0) {
        (*(void (**)(uint64_t))((v26 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A188E0(a3);
      break;
    case 0x16u:
      uint64_t v27 = *(void *)(a1 + 8);
      if ((v27 & 4) != 0) {
        (*(void (**)(uint64_t))((v27 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A18A54(a3);
      break;
    case 0x17u:
      uint64_t v28 = *(void *)(a1 + 8);
      if ((v28 & 4) != 0) {
        (*(void (**)(uint64_t))((v28 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A18BC8(a3);
      break;
    case 0x18u:
      uint64_t v29 = *(void *)(a1 + 8);
      if ((v29 & 4) != 0) {
        (*(void (**)(uint64_t))((v29 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A18D3C(a3);
      break;
    case 0x19u:
      uint64_t v30 = *(void *)(a1 + 8);
      if ((v30 & 4) != 0) {
        (*(void (**)(uint64_t))((v30 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A18EB0(a3);
      break;
    case 0x1Au:
      uint64_t v31 = *(void *)(a1 + 8);
      if ((v31 & 4) != 0) {
        (*(void (**)(uint64_t))((v31 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A19024(a3);
      break;
    case 0x1Bu:
      uint64_t v32 = *(void *)(a1 + 8);
      if ((v32 & 4) != 0) {
        (*(void (**)(uint64_t))((v32 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A19198(a3);
      break;
    case 0x1Cu:
      uint64_t v33 = *(void *)(a1 + 8);
      if ((v33 & 4) != 0) {
        (*(void (**)(uint64_t))((v33 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1930C(a3);
      break;
    case 0x1Du:
      uint64_t v34 = *(void *)(a1 + 8);
      if ((v34 & 4) != 0) {
        (*(void (**)(uint64_t))((v34 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A19480(a3);
      break;
    case 0x1Eu:
      uint64_t v35 = *(void *)(a1 + 8);
      if ((v35 & 4) != 0) {
        (*(void (**)(uint64_t))((v35 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A195F4(a3);
      break;
    case 0x1Fu:
      uint64_t v36 = *(void *)(a1 + 8);
      if ((v36 & 4) != 0) {
        (*(void (**)(uint64_t))((v36 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A19768(a3);
      break;
    case 0x20u:
      uint64_t v37 = *(void *)(a1 + 8);
      if ((v37 & 4) != 0) {
        (*(void (**)(uint64_t))((v37 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A198DC(a3);
      break;
    case 0x21u:
      uint64_t v38 = *(void *)(a1 + 8);
      if ((v38 & 4) != 0) {
        (*(void (**)(uint64_t))((v38 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A19A50(a3);
      break;
    case 0x22u:
      uint64_t v39 = *(void *)(a1 + 8);
      if ((v39 & 4) != 0) {
        (*(void (**)(uint64_t))((v39 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A19BC4(a3);
      break;
    case 0x23u:
      uint64_t v40 = *(void *)(a1 + 8);
      if ((v40 & 4) != 0) {
        (*(void (**)(uint64_t))((v40 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A19D38(a3);
      break;
    case 0x24u:
      uint64_t v41 = *(void *)(a1 + 8);
      if ((v41 & 4) != 0) {
        (*(void (**)(uint64_t))((v41 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A19EAC(a3);
      break;
    case 0x25u:
      uint64_t v42 = *(void *)(a1 + 8);
      if ((v42 & 4) != 0) {
        (*(void (**)(uint64_t))((v42 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1A020(a3);
      break;
    case 0x26u:
      uint64_t v43 = *(void *)(a1 + 8);
      if ((v43 & 4) != 0) {
        (*(void (**)(uint64_t))((v43 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1A194(a3);
      break;
    case 0x27u:
      uint64_t v44 = *(void *)(a1 + 8);
      if ((v44 & 4) != 0) {
        (*(void (**)(uint64_t))((v44 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1A308(a3);
      break;
    case 0x28u:
      uint64_t v45 = *(void *)(a1 + 8);
      if ((v45 & 4) != 0) {
        (*(void (**)(uint64_t))((v45 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1A47C(a3);
      break;
    case 0x29u:
      uint64_t v46 = *(void *)(a1 + 8);
      if ((v46 & 4) != 0) {
        (*(void (**)(uint64_t))((v46 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1A5F0(a3);
      break;
    case 0x2Au:
      uint64_t v47 = *(void *)(a1 + 8);
      if ((v47 & 4) != 0) {
        (*(void (**)(uint64_t))((v47 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1A764(a3);
      break;
    case 0x2Bu:
      uint64_t v48 = *(void *)(a1 + 8);
      if ((v48 & 4) != 0) {
        (*(void (**)(uint64_t))((v48 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1A8D8(a3);
      break;
    case 0x2Cu:
      uint64_t v49 = *(void *)(a1 + 8);
      if ((v49 & 4) != 0) {
        (*(void (**)(uint64_t))((v49 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1AA4C(a3);
      break;
    case 0x2Du:
      uint64_t v50 = *(void *)(a1 + 8);
      if ((v50 & 4) != 0) {
        (*(void (**)(uint64_t))((v50 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1ABC0(a3);
      break;
    case 0x2Eu:
      uint64_t v51 = *(void *)(a1 + 8);
      if ((v51 & 4) != 0) {
        (*(void (**)(uint64_t))((v51 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1AD34(a3);
      break;
    case 0x2Fu:
      uint64_t v52 = *(void *)(a1 + 8);
      if ((v52 & 4) != 0) {
        (*(void (**)(uint64_t))((v52 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1AEA8(a3);
      break;
    case 0x30u:
      uint64_t v53 = *(void *)(a1 + 8);
      if ((v53 & 4) != 0) {
        (*(void (**)(uint64_t))((v53 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1B01C(a3);
      break;
    case 0x31u:
      uint64_t v54 = *(void *)(a1 + 8);
      if ((v54 & 4) != 0) {
        (*(void (**)(uint64_t))((v54 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1B190(a3);
      break;
    case 0x32u:
      uint64_t v55 = *(void *)(a1 + 8);
      if ((v55 & 4) != 0) {
        (*(void (**)(uint64_t))((v55 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1B304(a3);
      break;
    case 0x33u:
      uint64_t v56 = *(void *)(a1 + 8);
      if ((v56 & 4) != 0) {
        (*(void (**)(uint64_t))((v56 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1B478(a3);
      break;
    case 0x34u:
      uint64_t v57 = *(void *)(a1 + 8);
      if ((v57 & 4) != 0) {
        (*(void (**)(uint64_t))((v57 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1B5EC(a3);
      break;
    case 0x35u:
      uint64_t v58 = *(void *)(a1 + 8);
      if ((v58 & 4) != 0) {
        (*(void (**)(uint64_t))((v58 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1B760(a3);
      break;
    case 0x36u:
      uint64_t v59 = *(void *)(a1 + 8);
      if ((v59 & 4) != 0) {
        (*(void (**)(uint64_t))((v59 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1B8D4(a3);
      break;
    case 0x37u:
      uint64_t v60 = *(void *)(a1 + 8);
      if ((v60 & 4) != 0) {
        (*(void (**)(uint64_t))((v60 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1BA48(a3);
      break;
    case 0x38u:
      uint64_t v61 = *(void *)(a1 + 8);
      if ((v61 & 4) != 0) {
        (*(void (**)(uint64_t))((v61 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1BBBC(a3);
      break;
    case 0x39u:
      uint64_t v62 = *(void *)(a1 + 8);
      if ((v62 & 4) != 0) {
        (*(void (**)(uint64_t))((v62 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1BD30(a3);
      break;
    case 0x3Au:
      uint64_t v63 = *(void *)(a1 + 8);
      if ((v63 & 4) != 0) {
        (*(void (**)(uint64_t))((v63 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1BEA4(a3);
      break;
    case 0x3Bu:
      uint64_t v64 = *(void *)(a1 + 8);
      if ((v64 & 4) != 0) {
        (*(void (**)(uint64_t))((v64 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1C018(a3);
      break;
    case 0x3Cu:
      uint64_t v65 = *(void *)(a1 + 8);
      if ((v65 & 4) != 0) {
        (*(void (**)(uint64_t))((v65 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1C18C(a3);
      break;
    case 0x3Du:
      uint64_t v66 = *(void *)(a1 + 8);
      if ((v66 & 4) != 0) {
        (*(void (**)(uint64_t))((v66 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1C300(a3);
      break;
    case 0x3Eu:
      uint64_t v67 = *(void *)(a1 + 8);
      if ((v67 & 4) != 0) {
        (*(void (**)(uint64_t))((v67 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1C474(a3);
      break;
    case 0x3Fu:
      uint64_t v68 = *(void *)(a1 + 8);
      if ((v68 & 4) != 0) {
        (*(void (**)(uint64_t))((v68 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1C5E8(a3);
      break;
    case 0x40u:
      uint64_t v69 = *(void *)(a1 + 8);
      if ((v69 & 4) != 0) {
        (*(void (**)(uint64_t))((v69 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1C75C(a3);
      break;
    case 0x41u:
      uint64_t v70 = *(void *)(a1 + 8);
      if ((v70 & 4) != 0) {
        (*(void (**)(uint64_t))((v70 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1C8D0(a3);
      break;
    case 0x42u:
      uint64_t v71 = *(void *)(a1 + 8);
      if ((v71 & 4) != 0) {
        (*(void (**)(uint64_t))((v71 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1CA44(a3);
      break;
    case 0x43u:
      uint64_t v72 = *(void *)(a1 + 8);
      if ((v72 & 4) != 0) {
        (*(void (**)(uint64_t))((v72 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1CBB8(a3);
      break;
    case 0x44u:
      uint64_t v73 = *(void *)(a1 + 8);
      if ((v73 & 4) != 0) {
        (*(void (**)(uint64_t))((v73 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1CD2C(a3);
      break;
    case 0x45u:
      uint64_t v74 = *(void *)(a1 + 8);
      if ((v74 & 4) != 0) {
        (*(void (**)(uint64_t))((v74 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1CEA0(a3);
      break;
    case 0x46u:
      uint64_t v75 = *(void *)(a1 + 8);
      if ((v75 & 4) != 0) {
        (*(void (**)(uint64_t))((v75 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1D014(a3);
      break;
    case 0x47u:
      uint64_t v76 = *(void *)(a1 + 8);
      if ((v76 & 4) != 0) {
        (*(void (**)(uint64_t))((v76 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1D188(a3);
      break;
    case 0x48u:
      uint64_t v77 = *(void *)(a1 + 8);
      if ((v77 & 4) != 0) {
        (*(void (**)(uint64_t))((v77 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1D2FC(a3);
      break;
    case 0x49u:
      uint64_t v78 = *(void *)(a1 + 8);
      if ((v78 & 4) != 0) {
        (*(void (**)(uint64_t))((v78 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1D470(a3);
      break;
    case 0x4Au:
      uint64_t v79 = *(void *)(a1 + 8);
      if ((v79 & 4) != 0) {
        (*(void (**)(uint64_t))((v79 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1D5E4(a3);
      break;
    case 0x4Bu:
      uint64_t v80 = *(void *)(a1 + 8);
      if ((v80 & 4) != 0) {
        (*(void (**)(uint64_t))((v80 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1D758(a3);
      break;
    case 0x4Cu:
      uint64_t v81 = *(void *)(a1 + 8);
      if ((v81 & 4) != 0) {
        (*(void (**)(uint64_t))((v81 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1D8CC(a3);
      break;
    case 0x4Du:
      uint64_t v82 = *(void *)(a1 + 8);
      if ((v82 & 4) != 0) {
        (*(void (**)(uint64_t))((v82 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1DA40(a3);
      break;
    case 0x4Eu:
      uint64_t v83 = *(void *)(a1 + 8);
      if ((v83 & 4) != 0) {
        (*(void (**)(uint64_t))((v83 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1DBB4(a3);
      break;
    case 0x4Fu:
      uint64_t v84 = *(void *)(a1 + 8);
      if ((v84 & 4) != 0) {
        (*(void (**)(uint64_t))((v84 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1DD28(a3);
      break;
    case 0x50u:
      uint64_t v85 = *(void *)(a1 + 8);
      if ((v85 & 4) != 0) {
        (*(void (**)(uint64_t))((v85 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1DE9C(a3);
      break;
    case 0x51u:
      uint64_t v86 = *(void *)(a1 + 8);
      if ((v86 & 4) != 0) {
        (*(void (**)(uint64_t))((v86 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1E010(a3);
      break;
    case 0x52u:
      uint64_t v87 = *(void *)(a1 + 8);
      if ((v87 & 4) != 0) {
        (*(void (**)(uint64_t))((v87 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1E184(a3);
      break;
    case 0x53u:
      uint64_t v88 = *(void *)(a1 + 8);
      if ((v88 & 4) != 0) {
        (*(void (**)(uint64_t))((v88 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1E2F8(a3);
      break;
    case 0x54u:
      uint64_t v89 = *(void *)(a1 + 8);
      if ((v89 & 4) != 0) {
        (*(void (**)(uint64_t))((v89 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1E46C(a3);
      break;
    case 0x55u:
      uint64_t v90 = *(void *)(a1 + 8);
      if ((v90 & 4) != 0) {
        (*(void (**)(uint64_t))((v90 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1E5E0(a3);
      break;
    case 0x56u:
      uint64_t v91 = *(void *)(a1 + 8);
      if ((v91 & 4) != 0) {
        (*(void (**)(uint64_t))((v91 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1E754(a3);
      break;
    case 0x57u:
      uint64_t v92 = *(void *)(a1 + 8);
      if ((v92 & 4) != 0) {
        (*(void (**)(uint64_t))((v92 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1E8C8(a3);
      break;
    case 0x58u:
      uint64_t v93 = *(void *)(a1 + 8);
      if ((v93 & 4) != 0) {
        (*(void (**)(uint64_t))((v93 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1EA3C(a3);
      break;
    case 0x59u:
      uint64_t v94 = *(void *)(a1 + 8);
      if ((v94 & 4) != 0) {
        (*(void (**)(uint64_t))((v94 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1EBB0(a3);
      break;
    case 0x5Au:
      uint64_t v95 = *(void *)(a1 + 8);
      if ((v95 & 4) != 0) {
        (*(void (**)(uint64_t))((v95 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1ED24(a3);
      break;
    case 0x5Bu:
      uint64_t v96 = *(void *)(a1 + 8);
      if ((v96 & 4) != 0) {
        (*(void (**)(uint64_t))((v96 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1EE98(a3);
      break;
    case 0x5Cu:
      uint64_t v97 = *(void *)(a1 + 8);
      if ((v97 & 4) != 0) {
        (*(void (**)(uint64_t))((v97 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1F00C(a3);
      break;
    case 0x5Du:
      uint64_t v98 = *(void *)(a1 + 8);
      if ((v98 & 4) != 0) {
        (*(void (**)(uint64_t))((v98 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1F180(a3);
      break;
    case 0x5Eu:
      uint64_t v99 = *(void *)(a1 + 8);
      if ((v99 & 4) != 0) {
        (*(void (**)(uint64_t))((v99 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1F2F4(a3);
      break;
    case 0x5Fu:
      uint64_t v100 = *(void *)(a1 + 8);
      if ((v100 & 4) != 0) {
        (*(void (**)(uint64_t))((v100 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1F468(a3);
      break;
    default:
      sub_216A1F5DC((uint64_t)a2, a1, a3);
      break;
  }
}

void *pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::ComparisonNode<std::greater>::ComparisonNode(void *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t *result = &unk_26C7573C0;
  result[1] = v3;
  uint64_t v4 = *a3;
  *a3 = 0;
  result[2] = v4;
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t *result = &unk_26C7573C0;
  result[1] = v3;
  uint64_t v4 = *a3;
  *a3 = 0;
  result[2] = v4;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::ComparisonNode<std::greater>::Evaluate@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  v45[3] = *MEMORY[0x263EF8340];
  (*(void (**)(void *__return_ptr))(**(void **)(a1 + 8) + 16))(v44);
  (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 16) + 16))(&v42);
  sub_2169E63F4((uint64_t)v44, (uint64_t)&v42, (uint64_t)&v35);
  uint64_t v7 = v35;
  uint64_t v6 = v36;
  if (v35 == v36)
  {
    uint64_t Type = pxrInternal__aapl__pxrReserved__::VtValue::GetType((pxrInternal__aapl__pxrReserved__::VtValue *)v44, v4, v5);
    if (Type == pxrInternal__aapl__pxrReserved__::VtValue::GetType((pxrInternal__aapl__pxrReserved__::VtValue *)&v42, v12, v13))
    {
      uint64_t v32 = (char *)&v42;
      sub_2169EEDBC((uint64_t)v44, (unsigned __int8 **)&v32, a2);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::GetValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl *)v44, v28);
      int v14 = v29;
      uint64_t v15 = (void **)v28[0];
      pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::GetValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl *)&v42, v26);
      uint64_t v18 = v28;
      if (v14 < 0) {
        uint64_t v18 = v15;
      }
      if (v27 >= 0) {
        uint64_t v19 = v26;
      }
      else {
        uint64_t v19 = (void **)v26[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot compare values of type %s and %s", v16, v17, v18, v19);
      if (v31 >= 0) {
        uint64_t v22 = &v30;
      }
      else {
        uint64_t v22 = v30;
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s: %s", v20, v21, "gt", v22);
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      uint64_t v38 = (unsigned __int8 **)&v32;
      char v39 = 0;
      uint64_t v32 = (char *)operator new(0x18uLL);
      uint64_t v33 = (unsigned __int8 *)v32;
      uint64_t v34 = (unsigned __int8 *)(v32 + 24);
      uint64_t v23 = sub_21695F6C0((uint64_t)&v34, &__p, &v42, v32);
      uint64_t v24 = (unsigned __int8 *)v32;
      uint64_t v25 = v34;
      a2[1] = 0;
      a2[2] = v24;
      a2[3] = v23;
      a2[4] = v25;
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      uint64_t v38 = (unsigned __int8 **)&v32;
      sub_216782F20((void ***)&v38);
      if (v41 < 0) {
        operator delete((void *)__p);
      }
      if (v31 < 0) {
        operator delete(v30);
      }
      if (v27 < 0) {
        operator delete(v26[0]);
      }
      if (v29 < 0) {
        operator delete(v28[0]);
      }
    }
  }
  else
  {
    a2[1] = 0;
    a2[2] = v7;
    uint64_t v8 = v37;
    a2[3] = v6;
    a2[4] = v8;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    uint64_t v35 = 0;
  }
  uint64_t v32 = (char *)&v35;
  sub_216782F20((void ***)&v32);
  uint64_t v35 = (void **)&v43;
  sub_216782F20(&v35);
  uint64_t v9 = (void ***)sub_2168EE084((uint64_t)&v42);
  *(void *)&long long v42 = v45;
  sub_216782F20(v9);
  return sub_2168EE084((uint64_t)v44);
}

void sub_2169EECF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char *a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  a30 = &a33;
  sub_216782F20((void ***)&a30);
  sub_2169E8360(v43 - 136);
  sub_2169E8360(v43 - 96);
  _Unwind_Resume(a1);
}

void sub_2169EEDB4()
{
}

void sub_2169EEDBC(uint64_t a1@<X0>, unsigned __int8 **a2@<X1>, void *a3@<X8>)
{
  switch(sub_2169FCDDC(a1))
  {
    case 0u:
      sub_216A1F7EC((unsigned __int8 *)a1, a2, (uint64_t)a3);
      break;
    case 1u:
      uint64_t v6 = *(void *)(a1 + 8);
      if ((v6 & 4) != 0) {
        (*(void (**)(uint64_t))((v6 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1F914(a3);
      break;
    case 2u:
      uint64_t v7 = *(void *)(a1 + 8);
      if ((v7 & 4) != 0) {
        (*(void (**)(uint64_t))((v7 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1FA88(a3);
      break;
    case 3u:
      uint64_t v8 = *(void *)(a1 + 8);
      if ((v8 & 4) != 0) {
        (*(void (**)(uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1FBFC(a3);
      break;
    case 4u:
      uint64_t v9 = *(void *)(a1 + 8);
      if ((v9 & 4) != 0) {
        (*(void (**)(uint64_t))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1FD70(a3);
      break;
    case 5u:
      uint64_t v10 = *(void *)(a1 + 8);
      if ((v10 & 4) != 0) {
        (*(void (**)(uint64_t))((v10 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A1FEE4(a3);
      break;
    case 6u:
      uint64_t v11 = *(void *)(a1 + 8);
      if ((v11 & 4) != 0) {
        (*(void (**)(uint64_t))((v11 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A20058(a3);
      break;
    case 7u:
      sub_216A1F880((void *)a1, (uint64_t)a2, (uint64_t)a3);
      break;
    case 8u:
      uint64_t v12 = *(void *)(a1 + 8);
      if ((v12 & 4) != 0) {
        (*(void (**)(uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A201CC(a3);
      break;
    case 9u:
      uint64_t v13 = *(void *)(a1 + 8);
      if ((v13 & 4) != 0) {
        (*(void (**)(uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A20340(a3);
      break;
    case 0xAu:
      uint64_t v14 = *(void *)(a1 + 8);
      if ((v14 & 4) != 0) {
        (*(void (**)(uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A204B4(a3);
      break;
    case 0xBu:
      uint64_t v15 = *(void *)(a1 + 8);
      if ((v15 & 4) != 0) {
        (*(void (**)(uint64_t))((v15 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A20628(a3);
      break;
    case 0xCu:
      uint64_t v16 = *(void *)(a1 + 8);
      if ((v16 & 4) != 0) {
        unint64_t v17 = (void *)(*(uint64_t (**)(uint64_t))((v16 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      else {
        unint64_t v17 = *(void **)a1;
      }
      sub_216A2079C((uint64_t *)a2, v17, (uint64_t)a3);
      break;
    case 0xDu:
      uint64_t v18 = *(void *)(a1 + 8);
      if ((v18 & 4) != 0) {
        (*(void (**)(uint64_t))((v18 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2087C(a3);
      break;
    case 0xEu:
      uint64_t v19 = *(void *)(a1 + 8);
      if ((v19 & 4) != 0) {
        (*(void (**)(uint64_t))((v19 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A209F0(a3);
      break;
    case 0xFu:
      uint64_t v20 = *(void *)(a1 + 8);
      if ((v20 & 4) != 0) {
        (*(void (**)(uint64_t))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A20B64(a3);
      break;
    case 0x10u:
      uint64_t v21 = *(void *)(a1 + 8);
      if ((v21 & 4) != 0) {
        (*(void (**)(uint64_t))((v21 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A20CD8(a3);
      break;
    case 0x11u:
      uint64_t v22 = *(void *)(a1 + 8);
      if ((v22 & 4) != 0) {
        (*(void (**)(uint64_t))((v22 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A20E4C(a3);
      break;
    case 0x12u:
      uint64_t v23 = *(void *)(a1 + 8);
      if ((v23 & 4) != 0) {
        (*(void (**)(uint64_t))((v23 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A20FC0(a3);
      break;
    case 0x13u:
      uint64_t v24 = *(void *)(a1 + 8);
      if ((v24 & 4) != 0) {
        (*(void (**)(uint64_t))((v24 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A21134(a3);
      break;
    case 0x14u:
      uint64_t v25 = *(void *)(a1 + 8);
      if ((v25 & 4) != 0) {
        (*(void (**)(uint64_t))((v25 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A212A8(a3);
      break;
    case 0x15u:
      uint64_t v26 = *(void *)(a1 + 8);
      if ((v26 & 4) != 0) {
        (*(void (**)(uint64_t))((v26 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2141C(a3);
      break;
    case 0x16u:
      uint64_t v27 = *(void *)(a1 + 8);
      if ((v27 & 4) != 0) {
        (*(void (**)(uint64_t))((v27 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A21590(a3);
      break;
    case 0x17u:
      uint64_t v28 = *(void *)(a1 + 8);
      if ((v28 & 4) != 0) {
        (*(void (**)(uint64_t))((v28 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A21704(a3);
      break;
    case 0x18u:
      uint64_t v29 = *(void *)(a1 + 8);
      if ((v29 & 4) != 0) {
        (*(void (**)(uint64_t))((v29 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A21878(a3);
      break;
    case 0x19u:
      uint64_t v30 = *(void *)(a1 + 8);
      if ((v30 & 4) != 0) {
        (*(void (**)(uint64_t))((v30 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A219EC(a3);
      break;
    case 0x1Au:
      uint64_t v31 = *(void *)(a1 + 8);
      if ((v31 & 4) != 0) {
        (*(void (**)(uint64_t))((v31 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A21B60(a3);
      break;
    case 0x1Bu:
      uint64_t v32 = *(void *)(a1 + 8);
      if ((v32 & 4) != 0) {
        (*(void (**)(uint64_t))((v32 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A21CD4(a3);
      break;
    case 0x1Cu:
      uint64_t v33 = *(void *)(a1 + 8);
      if ((v33 & 4) != 0) {
        (*(void (**)(uint64_t))((v33 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A21E48(a3);
      break;
    case 0x1Du:
      uint64_t v34 = *(void *)(a1 + 8);
      if ((v34 & 4) != 0) {
        (*(void (**)(uint64_t))((v34 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A21FBC(a3);
      break;
    case 0x1Eu:
      uint64_t v35 = *(void *)(a1 + 8);
      if ((v35 & 4) != 0) {
        (*(void (**)(uint64_t))((v35 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A22130(a3);
      break;
    case 0x1Fu:
      uint64_t v36 = *(void *)(a1 + 8);
      if ((v36 & 4) != 0) {
        (*(void (**)(uint64_t))((v36 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A222A4(a3);
      break;
    case 0x20u:
      uint64_t v37 = *(void *)(a1 + 8);
      if ((v37 & 4) != 0) {
        (*(void (**)(uint64_t))((v37 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A22418(a3);
      break;
    case 0x21u:
      uint64_t v38 = *(void *)(a1 + 8);
      if ((v38 & 4) != 0) {
        (*(void (**)(uint64_t))((v38 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2258C(a3);
      break;
    case 0x22u:
      uint64_t v39 = *(void *)(a1 + 8);
      if ((v39 & 4) != 0) {
        (*(void (**)(uint64_t))((v39 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A22700(a3);
      break;
    case 0x23u:
      uint64_t v40 = *(void *)(a1 + 8);
      if ((v40 & 4) != 0) {
        (*(void (**)(uint64_t))((v40 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A22874(a3);
      break;
    case 0x24u:
      uint64_t v41 = *(void *)(a1 + 8);
      if ((v41 & 4) != 0) {
        (*(void (**)(uint64_t))((v41 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A229E8(a3);
      break;
    case 0x25u:
      uint64_t v42 = *(void *)(a1 + 8);
      if ((v42 & 4) != 0) {
        (*(void (**)(uint64_t))((v42 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A22B5C(a3);
      break;
    case 0x26u:
      uint64_t v43 = *(void *)(a1 + 8);
      if ((v43 & 4) != 0) {
        (*(void (**)(uint64_t))((v43 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A22CD0(a3);
      break;
    case 0x27u:
      uint64_t v44 = *(void *)(a1 + 8);
      if ((v44 & 4) != 0) {
        (*(void (**)(uint64_t))((v44 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A22E44(a3);
      break;
    case 0x28u:
      uint64_t v45 = *(void *)(a1 + 8);
      if ((v45 & 4) != 0) {
        (*(void (**)(uint64_t))((v45 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A22FB8(a3);
      break;
    case 0x29u:
      uint64_t v46 = *(void *)(a1 + 8);
      if ((v46 & 4) != 0) {
        (*(void (**)(uint64_t))((v46 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2312C(a3);
      break;
    case 0x2Au:
      uint64_t v47 = *(void *)(a1 + 8);
      if ((v47 & 4) != 0) {
        (*(void (**)(uint64_t))((v47 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A232A0(a3);
      break;
    case 0x2Bu:
      uint64_t v48 = *(void *)(a1 + 8);
      if ((v48 & 4) != 0) {
        (*(void (**)(uint64_t))((v48 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A23414(a3);
      break;
    case 0x2Cu:
      uint64_t v49 = *(void *)(a1 + 8);
      if ((v49 & 4) != 0) {
        (*(void (**)(uint64_t))((v49 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A23588(a3);
      break;
    case 0x2Du:
      uint64_t v50 = *(void *)(a1 + 8);
      if ((v50 & 4) != 0) {
        (*(void (**)(uint64_t))((v50 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A236FC(a3);
      break;
    case 0x2Eu:
      uint64_t v51 = *(void *)(a1 + 8);
      if ((v51 & 4) != 0) {
        (*(void (**)(uint64_t))((v51 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A23870(a3);
      break;
    case 0x2Fu:
      uint64_t v52 = *(void *)(a1 + 8);
      if ((v52 & 4) != 0) {
        (*(void (**)(uint64_t))((v52 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A239E4(a3);
      break;
    case 0x30u:
      uint64_t v53 = *(void *)(a1 + 8);
      if ((v53 & 4) != 0) {
        (*(void (**)(uint64_t))((v53 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A23B58(a3);
      break;
    case 0x31u:
      uint64_t v54 = *(void *)(a1 + 8);
      if ((v54 & 4) != 0) {
        (*(void (**)(uint64_t))((v54 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A23CCC(a3);
      break;
    case 0x32u:
      uint64_t v55 = *(void *)(a1 + 8);
      if ((v55 & 4) != 0) {
        (*(void (**)(uint64_t))((v55 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A23E40(a3);
      break;
    case 0x33u:
      uint64_t v56 = *(void *)(a1 + 8);
      if ((v56 & 4) != 0) {
        (*(void (**)(uint64_t))((v56 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A23FB4(a3);
      break;
    case 0x34u:
      uint64_t v57 = *(void *)(a1 + 8);
      if ((v57 & 4) != 0) {
        (*(void (**)(uint64_t))((v57 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A24128(a3);
      break;
    case 0x35u:
      uint64_t v58 = *(void *)(a1 + 8);
      if ((v58 & 4) != 0) {
        (*(void (**)(uint64_t))((v58 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2429C(a3);
      break;
    case 0x36u:
      uint64_t v59 = *(void *)(a1 + 8);
      if ((v59 & 4) != 0) {
        (*(void (**)(uint64_t))((v59 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A24410(a3);
      break;
    case 0x37u:
      uint64_t v60 = *(void *)(a1 + 8);
      if ((v60 & 4) != 0) {
        (*(void (**)(uint64_t))((v60 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A24584(a3);
      break;
    case 0x38u:
      uint64_t v61 = *(void *)(a1 + 8);
      if ((v61 & 4) != 0) {
        (*(void (**)(uint64_t))((v61 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A246F8(a3);
      break;
    case 0x39u:
      uint64_t v62 = *(void *)(a1 + 8);
      if ((v62 & 4) != 0) {
        (*(void (**)(uint64_t))((v62 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2486C(a3);
      break;
    case 0x3Au:
      uint64_t v63 = *(void *)(a1 + 8);
      if ((v63 & 4) != 0) {
        (*(void (**)(uint64_t))((v63 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A249E0(a3);
      break;
    case 0x3Bu:
      uint64_t v64 = *(void *)(a1 + 8);
      if ((v64 & 4) != 0) {
        (*(void (**)(uint64_t))((v64 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A24B54(a3);
      break;
    case 0x3Cu:
      uint64_t v65 = *(void *)(a1 + 8);
      if ((v65 & 4) != 0) {
        (*(void (**)(uint64_t))((v65 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A24CC8(a3);
      break;
    case 0x3Du:
      uint64_t v66 = *(void *)(a1 + 8);
      if ((v66 & 4) != 0) {
        (*(void (**)(uint64_t))((v66 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A24E3C(a3);
      break;
    case 0x3Eu:
      uint64_t v67 = *(void *)(a1 + 8);
      if ((v67 & 4) != 0) {
        (*(void (**)(uint64_t))((v67 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A24FB0(a3);
      break;
    case 0x3Fu:
      uint64_t v68 = *(void *)(a1 + 8);
      if ((v68 & 4) != 0) {
        (*(void (**)(uint64_t))((v68 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A25124(a3);
      break;
    case 0x40u:
      uint64_t v69 = *(void *)(a1 + 8);
      if ((v69 & 4) != 0) {
        (*(void (**)(uint64_t))((v69 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A25298(a3);
      break;
    case 0x41u:
      uint64_t v70 = *(void *)(a1 + 8);
      if ((v70 & 4) != 0) {
        (*(void (**)(uint64_t))((v70 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2540C(a3);
      break;
    case 0x42u:
      uint64_t v71 = *(void *)(a1 + 8);
      if ((v71 & 4) != 0) {
        (*(void (**)(uint64_t))((v71 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A25580(a3);
      break;
    case 0x43u:
      uint64_t v72 = *(void *)(a1 + 8);
      if ((v72 & 4) != 0) {
        (*(void (**)(uint64_t))((v72 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A256F4(a3);
      break;
    case 0x44u:
      uint64_t v73 = *(void *)(a1 + 8);
      if ((v73 & 4) != 0) {
        (*(void (**)(uint64_t))((v73 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A25868(a3);
      break;
    case 0x45u:
      uint64_t v74 = *(void *)(a1 + 8);
      if ((v74 & 4) != 0) {
        (*(void (**)(uint64_t))((v74 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A259DC(a3);
      break;
    case 0x46u:
      uint64_t v75 = *(void *)(a1 + 8);
      if ((v75 & 4) != 0) {
        (*(void (**)(uint64_t))((v75 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A25B50(a3);
      break;
    case 0x47u:
      uint64_t v76 = *(void *)(a1 + 8);
      if ((v76 & 4) != 0) {
        (*(void (**)(uint64_t))((v76 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A25CC4(a3);
      break;
    case 0x48u:
      uint64_t v77 = *(void *)(a1 + 8);
      if ((v77 & 4) != 0) {
        (*(void (**)(uint64_t))((v77 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A25E38(a3);
      break;
    case 0x49u:
      uint64_t v78 = *(void *)(a1 + 8);
      if ((v78 & 4) != 0) {
        (*(void (**)(uint64_t))((v78 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A25FAC(a3);
      break;
    case 0x4Au:
      uint64_t v79 = *(void *)(a1 + 8);
      if ((v79 & 4) != 0) {
        (*(void (**)(uint64_t))((v79 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A26120(a3);
      break;
    case 0x4Bu:
      uint64_t v80 = *(void *)(a1 + 8);
      if ((v80 & 4) != 0) {
        (*(void (**)(uint64_t))((v80 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A26294(a3);
      break;
    case 0x4Cu:
      uint64_t v81 = *(void *)(a1 + 8);
      if ((v81 & 4) != 0) {
        (*(void (**)(uint64_t))((v81 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A26408(a3);
      break;
    case 0x4Du:
      uint64_t v82 = *(void *)(a1 + 8);
      if ((v82 & 4) != 0) {
        (*(void (**)(uint64_t))((v82 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2657C(a3);
      break;
    case 0x4Eu:
      uint64_t v83 = *(void *)(a1 + 8);
      if ((v83 & 4) != 0) {
        (*(void (**)(uint64_t))((v83 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A266F0(a3);
      break;
    case 0x4Fu:
      uint64_t v84 = *(void *)(a1 + 8);
      if ((v84 & 4) != 0) {
        (*(void (**)(uint64_t))((v84 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A26864(a3);
      break;
    case 0x50u:
      uint64_t v85 = *(void *)(a1 + 8);
      if ((v85 & 4) != 0) {
        (*(void (**)(uint64_t))((v85 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A269D8(a3);
      break;
    case 0x51u:
      uint64_t v86 = *(void *)(a1 + 8);
      if ((v86 & 4) != 0) {
        (*(void (**)(uint64_t))((v86 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A26B4C(a3);
      break;
    case 0x52u:
      uint64_t v87 = *(void *)(a1 + 8);
      if ((v87 & 4) != 0) {
        (*(void (**)(uint64_t))((v87 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A26CC0(a3);
      break;
    case 0x53u:
      uint64_t v88 = *(void *)(a1 + 8);
      if ((v88 & 4) != 0) {
        (*(void (**)(uint64_t))((v88 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A26E34(a3);
      break;
    case 0x54u:
      uint64_t v89 = *(void *)(a1 + 8);
      if ((v89 & 4) != 0) {
        (*(void (**)(uint64_t))((v89 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A26FA8(a3);
      break;
    case 0x55u:
      uint64_t v90 = *(void *)(a1 + 8);
      if ((v90 & 4) != 0) {
        (*(void (**)(uint64_t))((v90 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2711C(a3);
      break;
    case 0x56u:
      uint64_t v91 = *(void *)(a1 + 8);
      if ((v91 & 4) != 0) {
        (*(void (**)(uint64_t))((v91 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A27290(a3);
      break;
    case 0x57u:
      uint64_t v92 = *(void *)(a1 + 8);
      if ((v92 & 4) != 0) {
        (*(void (**)(uint64_t))((v92 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A27404(a3);
      break;
    case 0x58u:
      uint64_t v93 = *(void *)(a1 + 8);
      if ((v93 & 4) != 0) {
        (*(void (**)(uint64_t))((v93 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A27578(a3);
      break;
    case 0x59u:
      uint64_t v94 = *(void *)(a1 + 8);
      if ((v94 & 4) != 0) {
        (*(void (**)(uint64_t))((v94 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A276EC(a3);
      break;
    case 0x5Au:
      uint64_t v95 = *(void *)(a1 + 8);
      if ((v95 & 4) != 0) {
        (*(void (**)(uint64_t))((v95 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A27860(a3);
      break;
    case 0x5Bu:
      uint64_t v96 = *(void *)(a1 + 8);
      if ((v96 & 4) != 0) {
        (*(void (**)(uint64_t))((v96 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A279D4(a3);
      break;
    case 0x5Cu:
      uint64_t v97 = *(void *)(a1 + 8);
      if ((v97 & 4) != 0) {
        (*(void (**)(uint64_t))((v97 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A27B48(a3);
      break;
    case 0x5Du:
      uint64_t v98 = *(void *)(a1 + 8);
      if ((v98 & 4) != 0) {
        (*(void (**)(uint64_t))((v98 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A27CBC(a3);
      break;
    case 0x5Eu:
      uint64_t v99 = *(void *)(a1 + 8);
      if ((v99 & 4) != 0) {
        (*(void (**)(uint64_t))((v99 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A27E30(a3);
      break;
    case 0x5Fu:
      uint64_t v100 = *(void *)(a1 + 8);
      if ((v100 & 4) != 0) {
        (*(void (**)(uint64_t))((v100 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A27FA4(a3);
      break;
    default:
      sub_216A28118((uint64_t)a2, a1, a3);
      break;
  }
}

void *pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::ComparisonNode<std::greater_equal>::ComparisonNode(void *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t *result = &unk_26C7573E8;
  result[1] = v3;
  uint64_t v4 = *a3;
  *a3 = 0;
  result[2] = v4;
  return result;
}

{
  uint64_t v3;
  uint64_t v4;

  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t *result = &unk_26C7573E8;
  result[1] = v3;
  uint64_t v4 = *a3;
  *a3 = 0;
  result[2] = v4;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::ComparisonNode<std::greater_equal>::Evaluate@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  v45[3] = *MEMORY[0x263EF8340];
  (*(void (**)(void *__return_ptr))(**(void **)(a1 + 8) + 16))(v44);
  (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 16) + 16))(&v42);
  sub_2169E63F4((uint64_t)v44, (uint64_t)&v42, (uint64_t)&v35);
  uint64_t v7 = v35;
  uint64_t v6 = v36;
  if (v35 == v36)
  {
    uint64_t Type = pxrInternal__aapl__pxrReserved__::VtValue::GetType((pxrInternal__aapl__pxrReserved__::VtValue *)v44, v4, v5);
    if (Type == pxrInternal__aapl__pxrReserved__::VtValue::GetType((pxrInternal__aapl__pxrReserved__::VtValue *)&v42, v12, v13))
    {
      uint64_t v32 = (char *)&v42;
      sub_2169F0FD4((uint64_t)v44, (unsigned __int8 **)&v32, a2);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::GetValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl *)v44, v28);
      int v14 = v29;
      uint64_t v15 = (void **)v28[0];
      pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::GetValueTypeName((pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl *)&v42, v26);
      uint64_t v18 = v28;
      if (v14 < 0) {
        uint64_t v18 = v15;
      }
      if (v27 >= 0) {
        uint64_t v19 = v26;
      }
      else {
        uint64_t v19 = (void **)v26[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot compare values of type %s and %s", v16, v17, v18, v19);
      if (v31 >= 0) {
        uint64_t v22 = &v30;
      }
      else {
        uint64_t v22 = v30;
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s: %s", v20, v21, "geq", v22);
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      uint64_t v38 = (unsigned __int8 **)&v32;
      char v39 = 0;
      uint64_t v32 = (char *)operator new(0x18uLL);
      uint64_t v33 = (unsigned __int8 *)v32;
      uint64_t v34 = (unsigned __int8 *)(v32 + 24);
      uint64_t v23 = sub_21695F6C0((uint64_t)&v34, &__p, &v42, v32);
      uint64_t v24 = (unsigned __int8 *)v32;
      uint64_t v25 = v34;
      a2[1] = 0;
      a2[2] = v24;
      a2[3] = v23;
      a2[4] = v25;
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      uint64_t v38 = (unsigned __int8 **)&v32;
      sub_216782F20((void ***)&v38);
      if (v41 < 0) {
        operator delete((void *)__p);
      }
      if (v31 < 0) {
        operator delete(v30);
      }
      if (v27 < 0) {
        operator delete(v26[0]);
      }
      if (v29 < 0) {
        operator delete(v28[0]);
      }
    }
  }
  else
  {
    a2[1] = 0;
    a2[2] = v7;
    uint64_t v8 = v37;
    a2[3] = v6;
    a2[4] = v8;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    uint64_t v35 = 0;
  }
  uint64_t v32 = (char *)&v35;
  sub_216782F20((void ***)&v32);
  uint64_t v35 = (void **)&v43;
  sub_216782F20(&v35);
  uint64_t v9 = (void ***)sub_2168EE084((uint64_t)&v42);
  *(void *)&long long v42 = v45;
  sub_216782F20(v9);
  return sub_2168EE084((uint64_t)v44);
}

void sub_2169F0F10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char *a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  a30 = &a33;
  sub_216782F20((void ***)&a30);
  sub_2169E8360(v43 - 136);
  sub_2169E8360(v43 - 96);
  _Unwind_Resume(a1);
}

void sub_2169F0FCC()
{
}

void sub_2169F0FD4(uint64_t a1@<X0>, unsigned __int8 **a2@<X1>, void *a3@<X8>)
{
  switch(sub_2169FCDDC(a1))
  {
    case 0u:
      sub_216A28328((unsigned __int8 *)a1, a2, (uint64_t)a3);
      break;
    case 1u:
      uint64_t v6 = *(void *)(a1 + 8);
      if ((v6 & 4) != 0) {
        (*(void (**)(uint64_t))((v6 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A28450(a3);
      break;
    case 2u:
      uint64_t v7 = *(void *)(a1 + 8);
      if ((v7 & 4) != 0) {
        (*(void (**)(uint64_t))((v7 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A285C4(a3);
      break;
    case 3u:
      uint64_t v8 = *(void *)(a1 + 8);
      if ((v8 & 4) != 0) {
        (*(void (**)(uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A28738(a3);
      break;
    case 4u:
      uint64_t v9 = *(void *)(a1 + 8);
      if ((v9 & 4) != 0) {
        (*(void (**)(uint64_t))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A288AC(a3);
      break;
    case 5u:
      uint64_t v10 = *(void *)(a1 + 8);
      if ((v10 & 4) != 0) {
        (*(void (**)(uint64_t))((v10 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A28A20(a3);
      break;
    case 6u:
      uint64_t v11 = *(void *)(a1 + 8);
      if ((v11 & 4) != 0) {
        (*(void (**)(uint64_t))((v11 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A28B94(a3);
      break;
    case 7u:
      sub_216A283BC((void *)a1, (uint64_t)a2, (uint64_t)a3);
      break;
    case 8u:
      uint64_t v12 = *(void *)(a1 + 8);
      if ((v12 & 4) != 0) {
        (*(void (**)(uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A28D08(a3);
      break;
    case 9u:
      uint64_t v13 = *(void *)(a1 + 8);
      if ((v13 & 4) != 0) {
        (*(void (**)(uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A28E7C(a3);
      break;
    case 0xAu:
      uint64_t v14 = *(void *)(a1 + 8);
      if ((v14 & 4) != 0) {
        (*(void (**)(uint64_t))((v14 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A28FF0(a3);
      break;
    case 0xBu:
      uint64_t v15 = *(void *)(a1 + 8);
      if ((v15 & 4) != 0) {
        (*(void (**)(uint64_t))((v15 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A29164(a3);
      break;
    case 0xCu:
      uint64_t v16 = *(void *)(a1 + 8);
      if ((v16 & 4) != 0) {
        unint64_t v17 = (const void **)(*(uint64_t (**)(uint64_t))((v16 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      else {
        unint64_t v17 = *(const void ***)a1;
      }
      sub_216A292D8((uint64_t *)a2, v17, (uint64_t)a3);
      break;
    case 0xDu:
      uint64_t v18 = *(void *)(a1 + 8);
      if ((v18 & 4) != 0) {
        (*(void (**)(uint64_t))((v18 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A293B8(a3);
      break;
    case 0xEu:
      uint64_t v19 = *(void *)(a1 + 8);
      if ((v19 & 4) != 0) {
        (*(void (**)(uint64_t))((v19 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2952C(a3);
      break;
    case 0xFu:
      uint64_t v20 = *(void *)(a1 + 8);
      if ((v20 & 4) != 0) {
        (*(void (**)(uint64_t))((v20 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A296A0(a3);
      break;
    case 0x10u:
      uint64_t v21 = *(void *)(a1 + 8);
      if ((v21 & 4) != 0) {
        (*(void (**)(uint64_t))((v21 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A29814(a3);
      break;
    case 0x11u:
      uint64_t v22 = *(void *)(a1 + 8);
      if ((v22 & 4) != 0) {
        (*(void (**)(uint64_t))((v22 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A29988(a3);
      break;
    case 0x12u:
      uint64_t v23 = *(void *)(a1 + 8);
      if ((v23 & 4) != 0) {
        (*(void (**)(uint64_t))((v23 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A29AFC(a3);
      break;
    case 0x13u:
      uint64_t v24 = *(void *)(a1 + 8);
      if ((v24 & 4) != 0) {
        (*(void (**)(uint64_t))((v24 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A29C70(a3);
      break;
    case 0x14u:
      uint64_t v25 = *(void *)(a1 + 8);
      if ((v25 & 4) != 0) {
        (*(void (**)(uint64_t))((v25 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A29DE4(a3);
      break;
    case 0x15u:
      uint64_t v26 = *(void *)(a1 + 8);
      if ((v26 & 4) != 0) {
        (*(void (**)(uint64_t))((v26 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A29F58(a3);
      break;
    case 0x16u:
      uint64_t v27 = *(void *)(a1 + 8);
      if ((v27 & 4) != 0) {
        (*(void (**)(uint64_t))((v27 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2A0CC(a3);
      break;
    case 0x17u:
      uint64_t v28 = *(void *)(a1 + 8);
      if ((v28 & 4) != 0) {
        (*(void (**)(uint64_t))((v28 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2A240(a3);
      break;
    case 0x18u:
      uint64_t v29 = *(void *)(a1 + 8);
      if ((v29 & 4) != 0) {
        (*(void (**)(uint64_t))((v29 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2A3B4(a3);
      break;
    case 0x19u:
      uint64_t v30 = *(void *)(a1 + 8);
      if ((v30 & 4) != 0) {
        (*(void (**)(uint64_t))((v30 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2A528(a3);
      break;
    case 0x1Au:
      uint64_t v31 = *(void *)(a1 + 8);
      if ((v31 & 4) != 0) {
        (*(void (**)(uint64_t))((v31 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2A69C(a3);
      break;
    case 0x1Bu:
      uint64_t v32 = *(void *)(a1 + 8);
      if ((v32 & 4) != 0) {
        (*(void (**)(uint64_t))((v32 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2A810(a3);
      break;
    case 0x1Cu:
      uint64_t v33 = *(void *)(a1 + 8);
      if ((v33 & 4) != 0) {
        (*(void (**)(uint64_t))((v33 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2A984(a3);
      break;
    case 0x1Du:
      uint64_t v34 = *(void *)(a1 + 8);
      if ((v34 & 4) != 0) {
        (*(void (**)(uint64_t))((v34 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2AAF8(a3);
      break;
    case 0x1Eu:
      uint64_t v35 = *(void *)(a1 + 8);
      if ((v35 & 4) != 0) {
        (*(void (**)(uint64_t))((v35 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2AC6C(a3);
      break;
    case 0x1Fu:
      uint64_t v36 = *(void *)(a1 + 8);
      if ((v36 & 4) != 0) {
        (*(void (**)(uint64_t))((v36 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2ADE0(a3);
      break;
    case 0x20u:
      uint64_t v37 = *(void *)(a1 + 8);
      if ((v37 & 4) != 0) {
        (*(void (**)(uint64_t))((v37 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2AF54(a3);
      break;
    case 0x21u:
      uint64_t v38 = *(void *)(a1 + 8);
      if ((v38 & 4) != 0) {
        (*(void (**)(uint64_t))((v38 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2B0C8(a3);
      break;
    case 0x22u:
      uint64_t v39 = *(void *)(a1 + 8);
      if ((v39 & 4) != 0) {
        (*(void (**)(uint64_t))((v39 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2B23C(a3);
      break;
    case 0x23u:
      uint64_t v40 = *(void *)(a1 + 8);
      if ((v40 & 4) != 0) {
        (*(void (**)(uint64_t))((v40 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2B3B0(a3);
      break;
    case 0x24u:
      uint64_t v41 = *(void *)(a1 + 8);
      if ((v41 & 4) != 0) {
        (*(void (**)(uint64_t))((v41 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2B524(a3);
      break;
    case 0x25u:
      uint64_t v42 = *(void *)(a1 + 8);
      if ((v42 & 4) != 0) {
        (*(void (**)(uint64_t))((v42 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2B698(a3);
      break;
    case 0x26u:
      uint64_t v43 = *(void *)(a1 + 8);
      if ((v43 & 4) != 0) {
        (*(void (**)(uint64_t))((v43 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2B80C(a3);
      break;
    case 0x27u:
      uint64_t v44 = *(void *)(a1 + 8);
      if ((v44 & 4) != 0) {
        (*(void (**)(uint64_t))((v44 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2B980(a3);
      break;
    case 0x28u:
      uint64_t v45 = *(void *)(a1 + 8);
      if ((v45 & 4) != 0) {
        (*(void (**)(uint64_t))((v45 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2BAF4(a3);
      break;
    case 0x29u:
      uint64_t v46 = *(void *)(a1 + 8);
      if ((v46 & 4) != 0) {
        (*(void (**)(uint64_t))((v46 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2BC68(a3);
      break;
    case 0x2Au:
      uint64_t v47 = *(void *)(a1 + 8);
      if ((v47 & 4) != 0) {
        (*(void (**)(uint64_t))((v47 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2BDDC(a3);
      break;
    case 0x2Bu:
      uint64_t v48 = *(void *)(a1 + 8);
      if ((v48 & 4) != 0) {
        (*(void (**)(uint64_t))((v48 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2BF50(a3);
      break;
    case 0x2Cu:
      uint64_t v49 = *(void *)(a1 + 8);
      if ((v49 & 4) != 0) {
        (*(void (**)(uint64_t))((v49 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2C0C4(a3);
      break;
    case 0x2Du:
      uint64_t v50 = *(void *)(a1 + 8);
      if ((v50 & 4) != 0) {
        (*(void (**)(uint64_t))((v50 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2C238(a3);
      break;
    case 0x2Eu:
      uint64_t v51 = *(void *)(a1 + 8);
      if ((v51 & 4) != 0) {
        (*(void (**)(uint64_t))((v51 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2C3AC(a3);
      break;
    case 0x2Fu:
      uint64_t v52 = *(void *)(a1 + 8);
      if ((v52 & 4) != 0) {
        (*(void (**)(uint64_t))((v52 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2C520(a3);
      break;
    case 0x30u:
      uint64_t v53 = *(void *)(a1 + 8);
      if ((v53 & 4) != 0) {
        (*(void (**)(uint64_t))((v53 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2C694(a3);
      break;
    case 0x31u:
      uint64_t v54 = *(void *)(a1 + 8);
      if ((v54 & 4) != 0) {
        (*(void (**)(uint64_t))((v54 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2C808(a3);
      break;
    case 0x32u:
      uint64_t v55 = *(void *)(a1 + 8);
      if ((v55 & 4) != 0) {
        (*(void (**)(uint64_t))((v55 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2C97C(a3);
      break;
    case 0x33u:
      uint64_t v56 = *(void *)(a1 + 8);
      if ((v56 & 4) != 0) {
        (*(void (**)(uint64_t))((v56 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2CAF0(a3);
      break;
    case 0x34u:
      uint64_t v57 = *(void *)(a1 + 8);
      if ((v57 & 4) != 0) {
        (*(void (**)(uint64_t))((v57 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2CC64(a3);
      break;
    case 0x35u:
      uint64_t v58 = *(void *)(a1 + 8);
      if ((v58 & 4) != 0) {
        (*(void (**)(uint64_t))((v58 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2CDD8(a3);
      break;
    case 0x36u:
      uint64_t v59 = *(void *)(a1 + 8);
      if ((v59 & 4) != 0) {
        (*(void (**)(uint64_t))((v59 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2CF4C(a3);
      break;
    case 0x37u:
      uint64_t v60 = *(void *)(a1 + 8);
      if ((v60 & 4) != 0) {
        (*(void (**)(uint64_t))((v60 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2D0C0(a3);
      break;
    case 0x38u:
      uint64_t v61 = *(void *)(a1 + 8);
      if ((v61 & 4) != 0) {
        (*(void (**)(uint64_t))((v61 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2D234(a3);
      break;
    case 0x39u:
      uint64_t v62 = *(void *)(a1 + 8);
      if ((v62 & 4) != 0) {
        (*(void (**)(uint64_t))((v62 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2D3A8(a3);
      break;
    case 0x3Au:
      uint64_t v63 = *(void *)(a1 + 8);
      if ((v63 & 4) != 0) {
        (*(void (**)(uint64_t))((v63 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2D51C(a3);
      break;
    case 0x3Bu:
      uint64_t v64 = *(void *)(a1 + 8);
      if ((v64 & 4) != 0) {
        (*(void (**)(uint64_t))((v64 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2D690(a3);
      break;
    case 0x3Cu:
      uint64_t v65 = *(void *)(a1 + 8);
      if ((v65 & 4) != 0) {
        (*(void (**)(uint64_t))((v65 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2D804(a3);
      break;
    case 0x3Du:
      uint64_t v66 = *(void *)(a1 + 8);
      if ((v66 & 4) != 0) {
        (*(void (**)(uint64_t))((v66 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2D978(a3);
      break;
    case 0x3Eu:
      uint64_t v67 = *(void *)(a1 + 8);
      if ((v67 & 4) != 0) {
        (*(void (**)(uint64_t))((v67 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2DAEC(a3);
      break;
    case 0x3Fu:
      uint64_t v68 = *(void *)(a1 + 8);
      if ((v68 & 4) != 0) {
        (*(void (**)(uint64_t))((v68 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2DC60(a3);
      break;
    case 0x40u:
      uint64_t v69 = *(void *)(a1 + 8);
      if ((v69 & 4) != 0) {
        (*(void (**)(uint64_t))((v69 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2DDD4(a3);
      break;
    case 0x41u:
      uint64_t v70 = *(void *)(a1 + 8);
      if ((v70 & 4) != 0) {
        (*(void (**)(uint64_t))((v70 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2DF48(a3);
      break;
    case 0x42u:
      uint64_t v71 = *(void *)(a1 + 8);
      if ((v71 & 4) != 0) {
        (*(void (**)(uint64_t))((v71 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2E0BC(a3);
      break;
    case 0x43u:
      uint64_t v72 = *(void *)(a1 + 8);
      if ((v72 & 4) != 0) {
        (*(void (**)(uint64_t))((v72 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2E230(a3);
      break;
    case 0x44u:
      uint64_t v73 = *(void *)(a1 + 8);
      if ((v73 & 4) != 0) {
        (*(void (**)(uint64_t))((v73 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2E3A4(a3);
      break;
    case 0x45u:
      uint64_t v74 = *(void *)(a1 + 8);
      if ((v74 & 4) != 0) {
        (*(void (**)(uint64_t))((v74 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2E518(a3);
      break;
    case 0x46u:
      uint64_t v75 = *(void *)(a1 + 8);
      if ((v75 & 4) != 0) {
        (*(void (**)(uint64_t))((v75 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2E68C(a3);
      break;
    case 0x47u:
      uint64_t v76 = *(void *)(a1 + 8);
      if ((v76 & 4) != 0) {
        (*(void (**)(uint64_t))((v76 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2E800(a3);
      break;
    case 0x48u:
      uint64_t v77 = *(void *)(a1 + 8);
      if ((v77 & 4) != 0) {
        (*(void (**)(uint64_t))((v77 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2E974(a3);
      break;
    case 0x49u:
      uint64_t v78 = *(void *)(a1 + 8);
      if ((v78 & 4) != 0) {
        (*(void (**)(uint64_t))((v78 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2EAE8(a3);
      break;
    case 0x4Au:
      uint64_t v79 = *(void *)(a1 + 8);
      if ((v79 & 4) != 0) {
        (*(void (**)(uint64_t))((v79 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2EC5C(a3);
      break;
    case 0x4Bu:
      uint64_t v80 = *(void *)(a1 + 8);
      if ((v80 & 4) != 0) {
        (*(void (**)(uint64_t))((v80 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2EDD0(a3);
      break;
    case 0x4Cu:
      uint64_t v81 = *(void *)(a1 + 8);
      if ((v81 & 4) != 0) {
        (*(void (**)(uint64_t))((v81 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2EF44(a3);
      break;
    case 0x4Du:
      uint64_t v82 = *(void *)(a1 + 8);
      if ((v82 & 4) != 0) {
        (*(void (**)(uint64_t))((v82 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2F0B8(a3);
      break;
    case 0x4Eu:
      uint64_t v83 = *(void *)(a1 + 8);
      if ((v83 & 4) != 0) {
        (*(void (**)(uint64_t))((v83 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2F22C(a3);
      break;
    case 0x4Fu:
      uint64_t v84 = *(void *)(a1 + 8);
      if ((v84 & 4) != 0) {
        (*(void (**)(uint64_t))((v84 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2F3A0(a3);
      break;
    case 0x50u:
      uint64_t v85 = *(void *)(a1 + 8);
      if ((v85 & 4) != 0) {
        (*(void (**)(uint64_t))((v85 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2F514(a3);
      break;
    case 0x51u:
      uint64_t v86 = *(void *)(a1 + 8);
      if ((v86 & 4) != 0) {
        (*(void (**)(uint64_t))((v86 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2F688(a3);
      break;
    case 0x52u:
      uint64_t v87 = *(void *)(a1 + 8);
      if ((v87 & 4) != 0) {
        (*(void (**)(uint64_t))((v87 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2F7FC(a3);
      break;
    case 0x53u:
      uint64_t v88 = *(void *)(a1 + 8);
      if ((v88 & 4) != 0) {
        (*(void (**)(uint64_t))((v88 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2F970(a3);
      break;
    case 0x54u:
      uint64_t v89 = *(void *)(a1 + 8);
      if ((v89 & 4) != 0) {
        (*(void (**)(uint64_t))((v89 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2FAE4(a3);
      break;
    case 0x55u:
      uint64_t v90 = *(void *)(a1 + 8);
      if ((v90 & 4) != 0) {
        (*(void (**)(uint64_t))((v90 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2FC58(a3);
      break;
    case 0x56u:
      uint64_t v91 = *(void *)(a1 + 8);
      if ((v91 & 4) != 0) {
        (*(void (**)(uint64_t))((v91 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2FDCC(a3);
      break;
    case 0x57u:
      uint64_t v92 = *(void *)(a1 + 8);
      if ((v92 & 4) != 0) {
        (*(void (**)(uint64_t))((v92 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A2FF40(a3);
      break;
    case 0x58u:
      uint64_t v93 = *(void *)(a1 + 8);
      if ((v93 & 4) != 0) {
        (*(void (**)(uint64_t))((v93 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A300B4(a3);
      break;
    case 0x59u:
      uint64_t v94 = *(void *)(a1 + 8);
      if ((v94 & 4) != 0) {
        (*(void (**)(uint64_t))((v94 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A30228(a3);
      break;
    case 0x5Au:
      uint64_t v95 = *(void *)(a1 + 8);
      if ((v95 & 4) != 0) {
        (*(void (**)(uint64_t))((v95 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A3039C(a3);
      break;
    case 0x5Bu:
      uint64_t v96 = *(void *)(a1 + 8);
      if ((v96 & 4) != 0) {
        (*(void (**)(uint64_t))((v96 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A30510(a3);
      break;
    case 0x5Cu:
      uint64_t v97 = *(void *)(a1 + 8);
      if ((v97 & 4) != 0) {
        (*(void (**)(uint64_t))((v97 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A30684(a3);
      break;
    case 0x5Du:
      uint64_t v98 = *(void *)(a1 + 8);
      if ((v98 & 4) != 0) {
        (*(void (**)(uint64_t))((v98 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A307F8(a3);
      break;
    case 0x5Eu:
      uint64_t v99 = *(void *)(a1 + 8);
      if ((v99 & 4) != 0) {
        (*(void (**)(uint64_t))((v99 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A3096C(a3);
      break;
    case 0x5Fu:
      uint64_t v100 = *(void *)(a1 + 8);
      if ((v100 & 4) != 0) {
        (*(void (**)(uint64_t))((v100 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
      }
      sub_216A30AE0(a3);
      break;
    default:
      sub_216A30C54((uint64_t)a2, a1, a3);
      break;
  }
}