void sub_216898BE4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::GfFrustum::ComputeNarrowedFrustum(uint64_t a1@<X0>, float64x2_t *a2@<X1>, float64x2_t *a3@<X2>, uint64_t a4@<X8>)
{
  __asm { FMOV            V1.2D, #1.0 }
  float64x2_t v9 = vaddq_f64(*a2, _Q1);
  __asm { FMOV            V1.2D, #0.5 }
  float64x2_t v11 = vaddq_f64(*(float64x2_t *)(a1 + 56), vmulq_f64(vmulq_f64(v9, _Q1), vsubq_f64(*(float64x2_t *)(a1 + 72), *(float64x2_t *)(a1 + 56))));
  pxrInternal__aapl__pxrReserved__::GfFrustum::_ComputeNarrowedFrustumSub((long long *)a1, a3, a4, v11.f64[0], v11.f64[1]);
}

void pxrInternal__aapl__pxrReserved__::GfFrustum::_ComputeNarrowedFrustumSub(long long *a1@<X0>, float64x2_t *a2@<X1>, uint64_t a3@<X8>, float64_t a4@<D0>, float64_t a5@<D1>)
{
  uint64_t v7 = sub_21689A6D8(a3, a1);
  float64x2_t v8 = *(float64x2_t *)((char *)a1 + 72);
  float64x2_t v9 = *(float64x2_t *)((char *)a1 + 56);
  __asm { FMOV            V3.2D, #0.5 }
  float64x2_t v15 = vmulq_f64(vmulq_f64(vsubq_f64(v8, v9), *a2), _Q3);
  v16.f64[0] = a4;
  v16.f64[1] = a5;
  float64x2_t v17 = vsubq_f64(v16, v15);
  *(int8x16_t *)(v7 + 56) = vbslq_s8((int8x16_t)vcgtq_f64(v9, v17), (int8x16_t)v9, (int8x16_t)v17);
  float64x2_t v18 = vaddq_f64(v16, v15);
  *(int8x16_t *)(v7 + 72) = vbslq_s8((int8x16_t)vcgtq_f64(v18, v8), (int8x16_t)v8, (int8x16_t)v18);
  __swp(v7, (unsigned int *)(v7 + 120));
  if (v7)
  {
    operator delete((void *)v7);
  }
}

void pxrInternal__aapl__pxrReserved__::GfFrustum::ComputeNarrowedFrustum(uint64_t a1@<X0>, double *a2@<X1>, float64x2_t *a3@<X2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetLookAt(&v13, (double *)a1, (double *)(a1 + 24));
  double v9 = sub_216893298((double *)&v13, a2);
  if (v11 >= 0.0)
  {
    *(void *)&long long v13 = "gf/frustum.cpp";
    *((void *)&v13 + 1) = "ComputeNarrowedFrustum";
    uint64_t v14 = 719;
    float64x2_t v15 = "GfFrustum pxrInternal__aapl__pxrReserved__::GfFrustum::ComputeNarrowedFrustum(const GfVec3d &, const GfVec2d &) const";
    char v16 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v13, (pxrInternal__aapl__pxrReserved__ *)"Given worldPoint is behind or at the eye", v8, v9);
    sub_21689A6D8(a4, (long long *)a1);
  }
  else
  {
    if (*(_DWORD *)(a1 + 112) == 1)
    {
      double v12 = -1.0 / v11;
      double v9 = v9 * v12;
      double v10 = v10 * v12;
    }
    pxrInternal__aapl__pxrReserved__::GfFrustum::_ComputeNarrowedFrustumSub((long long *)a1, a3, a4, v9, v10);
  }
}

double pxrInternal__aapl__pxrReserved__::GfFrustum::ComputeRay@<D0>(uint64_t a1@<X0>, float64x2_t *a2@<X1>, uint64_t a3@<X8>)
{
  sub_216898EC4(*(_DWORD *)(a1 + 112), (float64x2_t *)(a1 + 56), a2, (uint64_t)v16, *(double *)(a1 + 88));
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetLookAt(&v20, (double *)a1, (double *)(a1 + 24));
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::GetInverse((double *)&v20, 0, 0.0, (uint64_t)&v10);
  *(void *)&long long v20 = sub_216893298(v10.f64, v16);
  *((void *)&v20 + 1) = v5;
  uint64_t v21 = v6;
  float64x2_t v8 = vaddq_f64(vaddq_f64(vmulq_n_f64(v10, v17), vmulq_n_f64(v12, v18)), vmulq_n_f64(v14, v19));
  double v9 = v17 * v11 + v18 * v13 + v19 * v15;
  *(void *)&double result = pxrInternal__aapl__pxrReserved__::GfRay::SetPointAndDirection(a3, &v20, (__n128 *)&v8).n128_u64[0];
  return result;
}

double sub_216898EC4@<D0>(int a1@<W0>, float64x2_t *a2@<X1>, float64x2_t *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  __asm { FMOV            V2.2D, #1.0 }
  float64x2_t v10 = vaddq_f64(*a3, _Q2);
  __asm { FMOV            V2.2D, #0.5 }
  float64x2_t v12 = vaddq_f64(*a2, vmulq_f64(vmulq_f64(v10, _Q2), vsubq_f64(a2[1], *a2)));
  if (a1 == 1)
  {
    double v13 = sqrt(vaddvq_f64(vmulq_f64(v12, v12)) + 1.0);
    double v14 = 1.0 / v13;
    if (v13 <= 1.0e-10) {
      double v14 = 1.0e10;
    }
    float64x2_t v15 = vmulq_n_f64(v12, v14);
    double v16 = -v14;
    float64x2_t v20 = 0uLL;
    double v21 = 0.0;
  }
  else
  {
    float64x2_t v20 = v12;
    double v21 = -a5;
    float64x2_t v15 = (float64x2_t)vdupq_n_s64(0x8000000000000000);
    double v16 = -1.0;
  }
  __n128 v18 = (__n128)v15;
  double v19 = v16;
  *(void *)&double result = pxrInternal__aapl__pxrReserved__::GfRay::SetPointAndDirection(a4, (long long *)&v20, &v18).n128_u64[0];
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfFrustum::ComputePickRay@<D0>(uint64_t a1@<X0>, float64x2_t *a2@<X1>, uint64_t a3@<X8>)
{
  sub_216898EC4(*(_DWORD *)(a1 + 112), (float64x2_t *)(a1 + 56), a2, (uint64_t)&v6, *(double *)(a1 + 88));
  return pxrInternal__aapl__pxrReserved__::GfFrustum::_ComputePickRayOffsetToNearPlane((double *)a1, &v6, &v7, a3);
}

double pxrInternal__aapl__pxrReserved__::GfFrustum::_ComputePickRayOffsetToNearPlane@<D0>(double *a1@<X0>, float64x2_t *a2@<X1>, float64x2_t *a3@<X2>, uint64_t a4@<X8>)
{
  double v6 = a1[11];
  double v7 = v6 * a3[1].f64[0] + a2[1].f64[0];
  float64x2_t v20 = vaddq_f64(vmulq_n_f64(*a3, v6), *a2);
  double v21 = v7;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetLookAt(&v22, a1, a1 + 3);
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::GetInverse(v22.f64, 0, 0.0, (uint64_t)&v14);
  v20.f64[0] = sub_216893298(v14.f64, v20.f64);
  v20.f64[1] = v8;
  double v21 = v9;
  double v10 = a3->f64[1];
  double v11 = a3[1].f64[0];
  double v12 = a3->f64[0] * v15 + v10 * v17 + v11 * v19;
  float64x2_t v22 = vaddq_f64(vaddq_f64(vmulq_n_f64(v14, a3->f64[0]), vmulq_n_f64(v16, v10)), vmulq_n_f64(v18, v11));
  double v23 = v12;
  *(void *)&double result = pxrInternal__aapl__pxrReserved__::GfRay::SetPointAndDirection(a4, (long long *)&v20, (__n128 *)&v22).n128_u64[0];
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfFrustum::ComputeRay@<D0>(uint64_t a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  double v6 = (double *)(a1 + 24);
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetLookAt(&v31, (double *)a1, (double *)(a1 + 24));
  double v7 = sub_216893298((double *)&v31, a2);
  if (*(_DWORD *)(a1 + 112) == 1)
  {
    double v10 = sqrt(v9 * v9 + v7 * v7 + v8 * v8);
    double v11 = 1.0 / v10;
    BOOL v12 = v10 <= 1.0e-10;
    double v13 = 1.0e10;
    if (!v12) {
      double v13 = v11;
    }
    double v18 = v7 * v13;
    double v17 = v8 * v13;
    double v19 = v9 * v13;
    double v28 = 0.0;
    double v29 = 0.0;
    uint64_t v30 = 0;
  }
  else
  {
    double v28 = v7;
    double v29 = v8;
    uint64_t v30 = 0;
    double v19 = -1.0;
    double v18 = -0.0;
    double v17 = -0.0;
  }
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetLookAt(&v31, (double *)a1, v6);
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::GetInverse((double *)&v31, 0, 0.0, (uint64_t)&v22);
  *(void *)&long long v31 = sub_216893298(v22.f64, &v28);
  *((void *)&v31 + 1) = v14;
  uint64_t v32 = v15;
  float64x2_t v20 = vaddq_f64(vaddq_f64(vmulq_n_f64(v22, v18), vmulq_n_f64(v24, v17)), vmulq_n_f64(v26, v19));
  double v21 = v18 * v23 + v17 * v25 + v19 * v27;
  *(void *)&double result = pxrInternal__aapl__pxrReserved__::GfRay::SetPointAndDirection(a3, &v31, (__n128 *)&v20).n128_u64[0];
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfFrustum::ComputePickRay@<D0>(uint64_t a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetLookAt(&v17, (double *)a1, (double *)(a1 + 24));
  double v6 = sub_216893298(v17.f64, a2);
  if (*(_DWORD *)(a1 + 112) == 1)
  {
    double v9 = sqrt(v8 * v8 + v6 * v6 + v7 * v7);
    double v10 = 1.0 / v9;
    if (v9 <= 1.0e-10) {
      double v10 = 1.0e10;
    }
    double v11 = v6 * v10;
    double v12 = v7 * v10;
    double v13 = v8 * v10;
    float64x2_t v17 = 0uLL;
    uint64_t v18 = 0;
  }
  else
  {
    v17.f64[0] = v6;
    v17.f64[1] = v7;
    uint64_t v18 = 0;
    double v13 = -1.0;
    double v11 = -0.0;
    double v12 = -0.0;
  }
  v15.f64[0] = v11;
  v15.f64[1] = v12;
  double v16 = v13;
  return pxrInternal__aapl__pxrReserved__::GfFrustum::_ComputePickRayOffsetToNearPlane((double *)a1, &v17, &v15, a3);
}

BOOL pxrInternal__aapl__pxrReserved__::GfFrustum::Intersects(pxrInternal__aapl__pxrReserved__::GfFrustum *this, const pxrInternal__aapl__pxrReserved__::GfBBox3d *a2)
{
  if (*(double *)a2 > *((double *)a2 + 3)
    || *((double *)a2 + 1) > *((double *)a2 + 4)
    || *((double *)a2 + 2) > *((double *)a2 + 5))
  {
    return 0;
  }
  pxrInternal__aapl__pxrReserved__::GfFrustum::_CalculateFrustumPlanes(this);
  uint64_t v5 = 0;
  unint64_t v6 = atomic_load((unint64_t *)this + 15);
  do
  {
    long long v7 = *(_OWORD *)(v6 + v5 + 16);
    v9[0] = *(_OWORD *)(v6 + v5);
    v9[1] = v7;
    pxrInternal__aapl__pxrReserved__::GfPlane::Transform((pxrInternal__aapl__pxrReserved__::GfPlane *)v9, (const pxrInternal__aapl__pxrReserved__::GfBBox3d *)((char *)a2 + 176));
    BOOL result = pxrInternal__aapl__pxrReserved__::GfPlane::IntersectsPositiveHalfSpace((uint64_t)v9, (double *)a2);
    if (!result) {
      break;
    }
    BOOL v8 = v5 == 160;
    v5 += 32;
  }
  while (!v8);
  return result;
}

void pxrInternal__aapl__pxrReserved__::GfFrustum::_CalculateFrustumPlanes(pxrInternal__aapl__pxrReserved__::GfFrustum *this)
{
  if (!atomic_load((unint64_t *)this + 15))
  {
    v3 = operator new(0xC0uLL);
    double v4 = *((double *)this + 11);
    double v5 = *((double *)this + 12);
    long long v65 = 0u;
    long long v66 = 0u;
    float64x2_t v63 = 0u;
    long long v64 = 0u;
    float64x2_t v61 = 0u;
    long long v62 = 0u;
    float64x2_t v59 = 0u;
    long long v60 = 0u;
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetLookAt(&v67, (double *)this, (double *)this + 3);
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::GetInverse((double *)&v67, 0, 0.0, (uint64_t)&v59);
    if (*((_DWORD *)this + 28) == 1)
    {
      float64x2_t v57 = 0uLL;
      double v58 = 0.0;
      double v6 = v4 * *((double *)this + 8);
      v55.f64[0] = v4 * *((double *)this + 7);
      v55.f64[1] = v6;
      double v7 = *((double *)this + 10);
      v53.f64[0] = v4 * *((double *)this + 9);
      v53.f64[1] = v6;
      double v56 = -v4;
      double v54 = -v4;
      v51.f64[0] = v55.f64[0];
      v51.f64[1] = v4 * v7;
      double v52 = -v4;
      v49.f64[0] = v53.f64[0];
      v49.f64[1] = v4 * v7;
      double v50 = -v4;
      v57.f64[0] = sub_216893298(v59.f64, v57.f64);
      v57.f64[1] = v8;
      double v58 = v9;
      v55.f64[0] = sub_216893298(v59.f64, v55.f64);
      v55.f64[1] = v10;
      double v56 = v11;
      v53.f64[0] = sub_216893298(v59.f64, v53.f64);
      v53.f64[1] = v12;
      double v54 = v13;
      v51.f64[0] = sub_216893298(v59.f64, v51.f64);
      v51.f64[1] = v14;
      double v52 = v15;
      v49.f64[0] = sub_216893298(v59.f64, v49.f64);
      v49.f64[1] = v16;
      double v50 = v17;
      pxrInternal__aapl__pxrReserved__::GfPlane::Set((double *)&v67, v57.f64, v55.f64, v51.f64);
      long long v18 = v68;
      *(_OWORD *)v3 = v67;
      *((_OWORD *)v3 + 1) = v18;
      pxrInternal__aapl__pxrReserved__::GfPlane::Set((double *)&v67, v57.f64, v49.f64, v53.f64);
      long long v19 = v68;
      *((_OWORD *)v3 + 2) = v67;
      *((_OWORD *)v3 + 3) = v19;
      pxrInternal__aapl__pxrReserved__::GfPlane::Set((double *)&v67, v57.f64, v53.f64, v55.f64);
      long long v20 = v68;
      *((_OWORD *)v3 + 4) = v67;
      *((_OWORD *)v3 + 5) = v20;
      pxrInternal__aapl__pxrReserved__::GfPlane::Set((double *)&v67, v57.f64, v51.f64, v49.f64);
      long long v21 = v68;
      *((_OWORD *)v3 + 6) = v67;
      *((_OWORD *)v3 + 7) = v21;
      pxrInternal__aapl__pxrReserved__::GfPlane::Set((double *)&v67, v53.f64, v55.f64, v51.f64);
    }
    else
    {
      float64_t v22 = *((double *)this + 8);
      v57.f64[0] = *((float64_t *)this + 7);
      v57.f64[1] = v22;
      float64_t v23 = *((double *)this + 10);
      v55.f64[0] = *((float64_t *)this + 9);
      v55.f64[1] = v22;
      double v58 = -v4;
      double v56 = -v4;
      v53.f64[0] = v57.f64[0];
      v53.f64[1] = v23;
      double v54 = -v4;
      v51.f64[0] = v55.f64[0];
      v51.f64[1] = v23;
      double v52 = -v4;
      v57.f64[0] = sub_216893298(v59.f64, v57.f64);
      v57.f64[1] = v24;
      double v58 = v25;
      v55.f64[0] = sub_216893298(v59.f64, v55.f64);
      v55.f64[1] = v26;
      double v56 = v27;
      v53.f64[0] = sub_216893298(v59.f64, v53.f64);
      v53.f64[1] = v28;
      double v54 = v29;
      v51.f64[0] = sub_216893298(v59.f64, v51.f64);
      v51.f64[1] = v30;
      double v52 = v31;
      float64x2_t v32 = (float64x2_t)vdupq_n_s64(0x8000000000000000);
      double v33 = *(double *)&v60 * -0.0 + *(double *)&v62 * -0.0 - *(double *)&v64;
      float64x2_t v48 = vsubq_f64(vaddq_f64(vmulq_f64(v59, v32), vmulq_f64(v61, v32)), v63);
      float64x2_t v49 = vaddq_f64(v48, v53);
      double v50 = v33 + v54;
      pxrInternal__aapl__pxrReserved__::GfPlane::Set((double *)&v67, v49.f64, v53.f64, v57.f64);
      long long v34 = v68;
      *(_OWORD *)v3 = v67;
      *((_OWORD *)v3 + 1) = v34;
      float64x2_t v49 = vaddq_f64(v48, v55);
      double v50 = v33 + v56;
      pxrInternal__aapl__pxrReserved__::GfPlane::Set((double *)&v67, v49.f64, v55.f64, v51.f64);
      long long v35 = v68;
      *((_OWORD *)v3 + 2) = v67;
      *((_OWORD *)v3 + 3) = v35;
      float64x2_t v49 = vaddq_f64(v48, v57);
      double v50 = v33 + v58;
      pxrInternal__aapl__pxrReserved__::GfPlane::Set((double *)&v67, v49.f64, v57.f64, v55.f64);
      long long v36 = v68;
      *((_OWORD *)v3 + 4) = v67;
      *((_OWORD *)v3 + 5) = v36;
      float64x2_t v49 = vaddq_f64(v48, v51);
      double v50 = v33 + v52;
      pxrInternal__aapl__pxrReserved__::GfPlane::Set((double *)&v67, v49.f64, v51.f64, v53.f64);
      long long v37 = v68;
      *((_OWORD *)v3 + 6) = v67;
      *((_OWORD *)v3 + 7) = v37;
      pxrInternal__aapl__pxrReserved__::GfPlane::Set((double *)&v67, v55.f64, v57.f64, v53.f64);
    }
    long long v38 = v68;
    *((_OWORD *)v3 + 8) = v67;
    *((_OWORD *)v3 + 9) = v38;
    uint64_t v39 = 0;
    double v40 = *((double *)v3 + 18);
    float64x2_t v41 = *((float64x2_t *)v3 + 8);
    double v42 = vaddvq_f64(vmulq_f64(v41, v41));
    double v43 = -(v5 - v4 + *((double *)v3 + 19));
    float64x2_t v44 = vnegq_f64(v41);
    double v45 = sqrt(v42 + v40 * v40);
    BOOL v46 = v45 <= 1.0e-10;
    double v47 = 1.0 / v45;
    if (v46) {
      double v47 = 1.0e10;
    }
    *((float64x2_t *)v3 + 10) = vmulq_n_f64(v44, v47);
    *((double *)v3 + 22) = -(v40 * v47);
    *((double *)v3 + 23) = v43;
    atomic_compare_exchange_strong((atomic_ullong *volatile)this + 15, (unint64_t *)&v39, (unint64_t)v3);
    if (v39) {
      operator delete(v3);
    }
  }
}

void sub_216899800(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::GfFrustum::Intersects(unint64_t *a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::GfFrustum::_CalculateFrustumPlanes((pxrInternal__aapl__pxrReserved__::GfFrustum *)a1);
  uint64_t v4 = 0;
  unint64_t v5 = atomic_load(a1 + 15);
  do
  {
    float64x2_t v6 = vmulq_f64(*(float64x2_t *)(v5 + v4 + 8), *(float64x2_t *)(a2 + 8));
    double v7 = *(double *)(v5 + v4) * *(double *)a2 + v6.f64[0] + v6.f64[1] - *(double *)(v5 + v4 + 24);
    if (v7 < 0.0) {
      break;
    }
    BOOL v8 = v4 == 160;
    v4 += 32;
  }
  while (!v8);
  return v7 >= 0.0;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfFrustum::_SegmentIntersects(uint64_t a1, double *a2, int a3, double *a4, int a5)
{
  if ((a5 | a3) != 0x3F) {
    return 0;
  }
  uint64_t v5 = 1;
  if (a3 != 63 && a5 != 63)
  {
    uint64_t v6 = 0;
    double v7 = *a4 - *a2;
    unint64_t v11 = atomic_load((unint64_t *)(a1 + 120));
    double v13 = (double *)(v11 + 16);
    double v14 = 1.0;
    double v15 = 0.0;
    while (1)
    {
      int v16 = (1 << v6) & a3;
      if (v16 != ((1 << v6) & a5))
      {
        double v8 = a4[1] - a2[1];
        double v10 = a4[2] - a2[2];
        double v12 = *a2;
        double v9 = a2[1];
        double v17 = -(*a2 * *(v13 - 2) + v9 * *(v13 - 1) + a2[2] * *v13 - v13[1])
            / (v7 * *(v13 - 2) + v8 * *(v13 - 1) + v10 * *v13);
        if (v16)
        {
          if (v17 < v14) {
            double v14 = -(v12 * *(v13 - 2) + v9 * *(v13 - 1) + a2[2] * *v13 - v13[1])
          }
                / (v7 * *(v13 - 2) + v8 * *(v13 - 1) + v10 * *v13);
        }
        else if (v17 > v15)
        {
          double v15 = -(v12 * *(v13 - 2) + v9 * *(v13 - 1) + a2[2] * *v13 - v13[1])
              / (v7 * *(v13 - 2) + v8 * *(v13 - 1) + v10 * *v13);
        }
        if (v15 > v14) {
          break;
        }
      }
      ++v6;
      v13 += 4;
      if (v6 == 6) {
        return 1;
      }
    }
    return 0;
  }
  return v5;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfFrustum::Intersects(unint64_t *a1, double *a2, double *a3)
{
  pxrInternal__aapl__pxrReserved__::GfFrustum::_CalculateFrustumPlanes((pxrInternal__aapl__pxrReserved__::GfFrustum *)a1);
  uint64_t v6 = (double *)atomic_load(a1 + 15);
  double v7 = a2[1];
  double v8 = v6[1];
  double v9 = a2[2];
  double v10 = v6[2];
  double v11 = v6[3];
  double v12 = v6[4];
  double v13 = v6[5];
  double v14 = v6[6];
  double v15 = v6[7];
  double v16 = v6[8];
  double v17 = v6[9];
  double v18 = v6[10];
  double v19 = v6[11];
  double v20 = v6[12];
  double v21 = v6[13];
  double v22 = v6[14];
  double v23 = v6[15];
  double v24 = v6[16];
  double v25 = v6[17];
  double v26 = v6[18];
  double v27 = v6[19];
  int v28 = (*a2 * *v6 + v7 * v8 + v9 * v10 - v11 >= 0.0) | (2 * (*a2 * v12 + v7 * v13 + v9 * v14 - v15 >= 0.0)) | (4 * (*a2 * v16 + v7 * v17 + v9 * v18 - v19 >= 0.0)) | (8 * (*a2 * v20 + v7 * v21 + v9 * v22 - v23 >= 0.0)) | (16 * (*a2 * v24 + v7 * v25 + v9 * v26 - v27 >= 0.0));
  double v30 = v6[20];
  double v29 = v6[21];
  double v31 = *a2 * v30 + v7 * v29;
  double v33 = v6[22];
  double v32 = v6[23];
  int v34 = v28 | (32 * (v31 + v9 * v33 - v32 >= 0.0));
  double v35 = a3[1];
  double v36 = *v6 * *a3 + v8 * v35;
  double v37 = a3[2];
  int v38 = (v36 + v10 * v37 - v11 >= 0.0) | (2 * (v12 * *a3 + v13 * v35 + v14 * v37 - v15 >= 0.0)) | (4
                                                                                                 * (v16 * *a3 + v17 * v35 + v18 * v37 - v19 >= 0.0)) | (8 * (v20 * *a3 + v21 * v35 + v22 * v37 - v23 >= 0.0)) | (16 * (v24 * *a3 + v25 * v35 + v26 * v37 - v27 >= 0.0)) | (32 * (v30 * *a3 + v29 * v35 + v33 * v37 - v32 >= 0.0));

  return pxrInternal__aapl__pxrReserved__::GfFrustum::_SegmentIntersects((uint64_t)a1, a2, v34, a3, v38);
}

uint64_t pxrInternal__aapl__pxrReserved__::GfFrustum::Intersects(unint64_t *a1, double *a2, double *a3, double *a4)
{
  pxrInternal__aapl__pxrReserved__::GfFrustum::_CalculateFrustumPlanes((pxrInternal__aapl__pxrReserved__::GfFrustum *)a1);
  double v8 = (double *)atomic_load(a1 + 15);
  double v9 = a2[1];
  double v10 = v8[1];
  double v11 = a2[2];
  double v12 = v8[2];
  double v13 = v8[3];
  double v14 = v8[4];
  double v15 = v8[5];
  double v16 = v8[6];
  double v17 = v8[7];
  double v18 = v8[8];
  double v19 = v8[9];
  double v20 = v8[10];
  double v21 = v8[11];
  double v22 = v8[12];
  double v23 = v8[13];
  double v24 = v8[14];
  double v25 = v8[15];
  int v26 = (*a2 * *v8 + v9 * v10 + v11 * v12 - v13 >= 0.0) | (2 * (*a2 * v14 + v9 * v15 + v11 * v16 - v17 >= 0.0)) | (4 * (*a2 * v18 + v9 * v19 + v11 * v20 - v21 >= 0.0)) | (8 * (*a2 * v22 + v9 * v23 + v11 * v24 - v25 >= 0.0));
  double v27 = v8[16];
  double v28 = v8[17];
  double v29 = v8[18];
  double v30 = v8[19];
  double v31 = *a2 * v27 + v9 * v28 + v11 * v29 - v30;
  double v32 = v8[20];
  double v33 = v8[21];
  double v34 = *a2 * v32 + v9 * v33;
  double v35 = v8[22];
  double v36 = v8[23];
  unsigned int v37 = v26 | (16 * (v31 >= 0.0)) | (32 * (v34 + v11 * v35 - v36 >= 0.0));
  double v38 = a3[1];
  double v39 = a3[2];
  double v40 = v27 * *a3 + v28 * v38 + v29 * v39 - v30;
  unsigned int v41 = (*v8 * *a3 + v10 * v38 + v12 * v39 - v13 >= 0.0) | (2 * (v14 * *a3 + v15 * v38 + v16 * v39 - v17 >= 0.0)) | (4 * (v18 * *a3 + v19 * v38 + v20 * v39 - v21 >= 0.0)) | (8 * (v22 * *a3 + v23 * v38 + v24 * v39 - v25 >= 0.0)) | (32 * (v32 * *a3 + v33 * v38 + v35 * v39 - v36 >= 0.0)) | (16 * (v40 >= 0.0));
  double v42 = a4[1];
  double v43 = *v8 * *a4 + v10 * v42;
  double v44 = a4[2];
  double v45 = v27 * *a4 + v28 * v42 + v29 * v44 - v30;
  unsigned int v46 = (v43 + v12 * v44 - v13 >= 0.0) | (2 * (v14 * *a4 + v15 * v42 + v16 * v44 - v17 >= 0.0)) | (4
                                                                                                 * (v18 * *a4 + v19 * v42 + v20 * v44 - v21 >= 0.0)) | (8 * (v22 * *a4 + v23 * v42 + v24 * v44 - v25 >= 0.0)) | (32 * (v32 * *a4 + v33 * v42 + v35 * v44 - v36 >= 0.0)) | (16 * (v45 >= 0.0));
  if ((v41 | v37 | v46) != 0x3F) {
    return 0;
  }
  uint64_t result = 1;
  if (v37 != 63 && v41 != 63 && v46 != 63)
  {
    if ((pxrInternal__aapl__pxrReserved__::GfFrustum::_SegmentIntersects((uint64_t)a1, a2, v37, a3, v41) & 1) != 0
      || (pxrInternal__aapl__pxrReserved__::GfFrustum::_SegmentIntersects((uint64_t)a1, a3, v41, a4, v46) & 1) != 0
      || (pxrInternal__aapl__pxrReserved__::GfFrustum::_SegmentIntersects((uint64_t)a1, a4, v46, a2, v37) & 1) != 0)
    {
      return 1;
    }
    unint64_t v48 = 0;
    BOOL v49 = v31 < 0.0;
    if (v40 < 0.0) {
      BOOL v49 = 1;
    }
    if (v45 < 0.0) {
      BOOL v49 = 1;
    }
    if (v37 < 0x20) {
      BOOL v49 = 1;
    }
    if (v41 < 0x20) {
      BOOL v49 = 1;
    }
    if (v46 < 0x20) {
      BOOL v49 = 1;
    }
    char v50 = !v49;
    while (1)
    {
      float64x2_t v56 = 0uLL;
      if (v48 == 2)
      {
        v56.f64[0] = 1.0;
      }
      else
      {
        if (v48 != 1)
        {
          if (v48) {
            v56.f64[0] = 1.0;
          }
          else {
            v56.f64[0] = -1.0;
          }
          float64_t v51 = -1.0;
          goto LABEL_31;
        }
        v56.f64[0] = -1.0;
      }
      float64_t v51 = 1.0;
LABEL_31:
      v56.f64[1] = v51;
      pxrInternal__aapl__pxrReserved__::GfFrustum::ComputePickRay((uint64_t)a1, &v56, (uint64_t)v55);
      uint64_t v54 = 0;
      uint64_t result = pxrInternal__aapl__pxrReserved__::GfRay::Intersect((pxrInternal__aapl__pxrReserved__::GfRay *)v55, a2, a3, a4, (double *)&v54, 0, 0, INFINITY);
      if (!result)
      {
        BOOL v52 = v48++ > 2;
        char v53 = v52 ? 1 : v50;
        if ((v53 & 1) == 0) {
          continue;
        }
      }
      return result;
    }
  }
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::GfFrustum::IntersectsViewVolume(pxrInternal__aapl__pxrReserved__::GfFrustum *this, const pxrInternal__aapl__pxrReserved__::GfBBox3d *a2, const pxrInternal__aapl__pxrReserved__::GfMatrix4d *a3)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)this + 1);
  v34[0] = *(void *)this;
  v34[1] = v3;
  uint64_t v4 = *((void *)this + 3);
  uint64_t v35 = *((void *)this + 2);
  uint64_t v36 = 0x3FF0000000000000;
  uint64_t v37 = v34[0];
  uint64_t v38 = v3;
  uint64_t v5 = *((void *)this + 4);
  uint64_t v39 = *((void *)this + 5);
  uint64_t v40 = 0x3FF0000000000000;
  uint64_t v41 = v34[0];
  uint64_t v42 = v5;
  uint64_t v43 = v35;
  uint64_t v44 = 0x3FF0000000000000;
  uint64_t v45 = v34[0];
  uint64_t v46 = v5;
  uint64_t v47 = v39;
  uint64_t v48 = 0x3FF0000000000000;
  uint64_t v49 = v4;
  uint64_t v50 = v3;
  uint64_t v51 = v35;
  uint64_t v52 = 0x3FF0000000000000;
  uint64_t v53 = v4;
  uint64_t v54 = v3;
  uint64_t v55 = v39;
  uint64_t v56 = 0x3FF0000000000000;
  uint64_t v57 = v4;
  uint64_t v58 = v5;
  uint64_t v59 = v35;
  uint64_t v60 = 0x3FF0000000000000;
  uint64_t v61 = v4;
  uint64_t v62 = v5;
  uint64_t v63 = v39;
  uint64_t v64 = 0x3FF0000000000000;
  long long v6 = *((_OWORD *)this + 8);
  long long v30 = *((_OWORD *)this + 7);
  long long v31 = v6;
  long long v7 = *((_OWORD *)this + 10);
  long long v32 = *((_OWORD *)this + 9);
  *(_OWORD *)double v33 = v7;
  long long v8 = *((_OWORD *)this + 4);
  long long v26 = *((_OWORD *)this + 3);
  long long v27 = v8;
  long long v9 = *((_OWORD *)this + 6);
  long long v28 = *((_OWORD *)this + 5);
  long long v29 = v9;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=((double *)&v26, (double *)a2);
  uint64_t v10 = 0;
  int8x16_t v11 = 0uLL;
  do
  {
    double v12 = (const double *)&v34[v10];
    v10 += 16;
    float64x2x4_t v67 = vld4q_f64(v12);
    v12 += 8;
    float64x2x4_t v66 = vld4q_f64(v12);
    float64x2_t v13 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64(v67.val[0], *(double *)&v26), vmulq_n_f64(v67.val[1], *(double *)&v28)), vmulq_n_f64(v67.val[2], *(double *)&v30)), vmulq_n_f64(v67.val[3], *(double *)&v32));
    float64x2_t v14 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64(v66.val[0], *(double *)&v26), vmulq_n_f64(v66.val[1], *(double *)&v28)), vmulq_n_f64(v66.val[2], *(double *)&v30)), vmulq_n_f64(v66.val[3], *(double *)&v32));
    float64x2_t v15 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64(v67.val[0], *((double *)&v26 + 1)), vmulq_n_f64(v67.val[1], *((double *)&v28 + 1))), vmulq_n_f64(v67.val[2], *((double *)&v30 + 1))), vmulq_n_f64(v67.val[3], *((double *)&v32 + 1)));
    float64x2_t v16 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64(v66.val[0], *((double *)&v26 + 1)), vmulq_n_f64(v66.val[1], *((double *)&v28 + 1))), vmulq_n_f64(v66.val[2], *((double *)&v30 + 1))), vmulq_n_f64(v66.val[3], *((double *)&v32 + 1)));
    float64x2_t v17 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64(v67.val[0], *(double *)&v27), vmulq_n_f64(v67.val[1], *(double *)&v29)), vmulq_n_f64(v67.val[2], *(double *)&v31)), vmulq_n_f64(v67.val[3], v33[0]));
    float64x2_t v18 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64(v66.val[0], *(double *)&v27), vmulq_n_f64(v66.val[1], *(double *)&v29)), vmulq_n_f64(v66.val[2], *(double *)&v31)), vmulq_n_f64(v66.val[3], v33[0]));
    float64x2_t v19 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64(v66.val[0], *((double *)&v27 + 1)), vmulq_n_f64(v66.val[1], *((double *)&v29 + 1))), vmulq_n_f64(v66.val[2], *((double *)&v31 + 1))), vmulq_n_f64(v66.val[3], v33[1]));
    float64x2_t v20 = vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64(v67.val[0], *((double *)&v27 + 1)), vmulq_n_f64(v67.val[1], *((double *)&v29 + 1))), vmulq_n_f64(v67.val[2], *((double *)&v31 + 1))), vmulq_n_f64(v67.val[3], v33[1]));
    float64x2_t v21 = vnegq_f64(v19);
    float64x2_t v22 = vnegq_f64(v20);
    v23.i64[0] = 0x200000002;
    v23.i64[1] = 0x200000002;
    int8x16_t v11 = vorrq_s8((int8x16_t)vsubq_s32((int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(vsubq_s32((int32x4_t)vorrq_s8((int8x16_t)vshlq_n_s32(vsubq_s32((int32x4_t)vandq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgtq_f64(v20, v13), (int32x4_t)vcgtq_f64(v19, v14)), v23), vuzp1q_s32((int32x4_t)vcgtq_f64(v13, v22), (int32x4_t)vcgtq_f64(v14, v21))), 2uLL), vandq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgtq_f64(v20, v15), (int32x4_t)vcgtq_f64(v19, v16)), v23)),
                                                     vuzp1q_s32((int32x4_t)vcgtq_f64(v15, v22), (int32x4_t)vcgtq_f64(v16, v21))), 2uLL), vandq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgtq_f64(v20, v17), (int32x4_t)vcgtq_f64(v19, v18)), v23)), vuzp1q_s32((int32x4_t)vcgtq_f64(v17, v22), (int32x4_t)vcgtq_f64(v18, v21))), v11);
  }
  while (v10 != 32);
  int8x8_t v24 = vorr_s8(*(int8x8_t *)v11.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL));
  return (v24.i32[0] | v24.i32[1]) == 63;
}

void sub_21689A5B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_21689A5D4()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  uint64_t v5 = 0;
  long long v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C4F0, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74C4F0, (char *)0x80, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    long long v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_21689A694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_21689A6D8(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v3;
  long long v4 = *(long long *)((char *)a2 + 24);
  *(_OWORD *)(a1 + 40) = *(long long *)((char *)a2 + 40);
  *(_OWORD *)(a1 + 24) = v4;
  long long v5 = *(long long *)((char *)a2 + 56);
  *(_OWORD *)(a1 + 72) = *(long long *)((char *)a2 + 72);
  *(_OWORD *)(a1 + 56) = v5;
  *(_OWORD *)(a1 + 88) = *(long long *)((char *)a2 + 88);
  *(void *)(a1 + 104) = *((void *)a2 + 13);
  *(_DWORD *)(a1 + 112) = *((_DWORD *)a2 + 28);
  *(void *)(a1 + 120) = 0;
  long long v6 = (long long *)atomic_load((unint64_t *)a2 + 15);
  if (v6)
  {
    uint64_t v7 = operator new(0xC0uLL);
    long long v8 = v6[3];
    long long v10 = *v6;
    long long v9 = v6[1];
    v7[2] = v6[2];
    v7[3] = v8;
    *uint64_t v7 = v10;
    v7[1] = v9;
    long long v11 = v6[7];
    long long v13 = v6[4];
    long long v12 = v6[5];
    v7[6] = v6[6];
    v7[7] = v11;
    v7[4] = v13;
    v7[5] = v12;
    long long v14 = v6[11];
    long long v16 = v6[8];
    long long v15 = v6[9];
    v7[10] = v6[10];
    v7[11] = v14;
    v7[8] = v16;
    v7[9] = v15;
    atomic_store((unint64_t)v7, (unint64_t *)(a1 + 120));
  }
  return a1;
}

double pxrInternal__aapl__pxrReserved__::GfGetDisplayGamma(pxrInternal__aapl__pxrReserved__ *this)
{
  return 2.2;
}

float pxrInternal__aapl__pxrReserved__::GfApplyGamma(float *a1, long double a2)
{
  float v4 = pow(*a1, a2);
  pow(a1[1], a2);
  pow(a1[2], a2);
  return v4;
}

{
  float v4;

  float v4 = pow(*a1, a2);
  pow(a1[1], a2);
  pow(a1[2], a2);
  return v4;
}

double pxrInternal__aapl__pxrReserved__::GfApplyGamma(long double *a1, long double a2)
{
  double v4 = pow(*a1, a2);
  pow(a1[1], a2);
  pow(a1[2], a2);
  return v4;
}

{
  double v4;

  double v4 = pow(*a1, a2);
  pow(a1[1], a2);
  pow(a1[2], a2);
  return v4;
}

unint64_t pxrInternal__aapl__pxrReserved__::GfApplyGamma(unsigned __int16 *a1, long double a2)
{
  float v4 = pow(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1], a2);
  if (v4 == 0.0)
  {
    unsigned int v5 = HIWORD(LODWORD(v4));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v4) >> 23])
  {
    unsigned int v5 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v4) >> 23]
       + (((LODWORD(v4) & 0x7FFFFF) + ((LODWORD(v4) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v5) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v4));
  }
  float v6 = pow(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[1]], a2);
  if (v6 == 0.0)
  {
    unsigned int v7 = HIWORD(LODWORD(v6));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v6) >> 23])
  {
    unsigned int v7 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v6) >> 23]
       + (((LODWORD(v6) & 0x7FFFFF) + ((LODWORD(v6) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v7) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v6));
  }
  float v8 = pow(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[2]], a2);
  if (v8 == 0.0)
  {
    uint64_t v9 = HIWORD(LODWORD(v8));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v8) >> 23])
  {
    uint64_t v9 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v8) >> 23]
       + (((LODWORD(v8) & 0x7FFFFF) + ((LODWORD(v8) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    uint64_t v9 = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v8));
  }
  return ((unint64_t)(unsigned __int16)v7 << 16) | (v9 << 32) | (unsigned __int16)v5;
}

{
  float v4;
  unsigned int v5;
  float v6;
  unsigned int v7;
  float v8;
  unsigned int v9;

  float v4 = pow(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1], a2);
  if (v4 == 0.0)
  {
    unsigned int v5 = HIWORD(LODWORD(v4));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v4) >> 23])
  {
    unsigned int v5 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v4) >> 23]
       + (((LODWORD(v4) & 0x7FFFFF) + ((LODWORD(v4) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v5) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v4));
  }
  float v6 = pow(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[1]], a2);
  if (v6 == 0.0)
  {
    unsigned int v7 = HIWORD(LODWORD(v6));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v6) >> 23])
  {
    unsigned int v7 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v6) >> 23]
       + (((LODWORD(v6) & 0x7FFFFF) + ((LODWORD(v6) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v7) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v6));
  }
  float v8 = pow(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[2]], a2);
  if (v8 == 0.0)
  {
    uint64_t v9 = HIWORD(LODWORD(v8));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v8) >> 23])
  {
    uint64_t v9 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v8) >> 23]
       + (((LODWORD(v8) & 0x7FFFFF) + ((LODWORD(v8) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v9) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v8));
  }
  return ((unint64_t)(unsigned __int16)v9 << 32) | ((unint64_t)a1[3] << 48) | ((unint64_t)(unsigned __int16)v7 << 16) | (unsigned __int16)v5;
}

float pxrInternal__aapl__pxrReserved__::GfApplyGamma(pxrInternal__aapl__pxrReserved__ *this, const float *a2, long double a3)
{
  return pow(*(float *)this, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::GfApplyGamma(pxrInternal__aapl__pxrReserved__ *this, const unsigned __int8 *a2, long double a3)
{
  long double v3 = a3;
  LOBYTE(a3) = *(unsigned char *)this;
  return (int)(pow((double)*(unint64_t *)&a3 / 255.0, v3) * 255.0);
}

float pxrInternal__aapl__pxrReserved__::GfConvertLinearToDisplay(float *a1)
{
  float v2 = pow(*a1, 0.454545455);
  pow(a1[1], 0.454545455);
  pow(a1[2], 0.454545455);
  return v2;
}

{
  float v2;

  float v2 = pow(*a1, 0.454545455);
  pow(a1[1], 0.454545455);
  pow(a1[2], 0.454545455);
  return v2;
}

double pxrInternal__aapl__pxrReserved__::GfConvertLinearToDisplay(long double *a1)
{
  double v2 = pow(*a1, 0.454545455);
  pow(a1[1], 0.454545455);
  pow(a1[2], 0.454545455);
  return v2;
}

{
  double v2;

  double v2 = pow(*a1, 0.454545455);
  pow(a1[1], 0.454545455);
  pow(a1[2], 0.454545455);
  return v2;
}

unint64_t pxrInternal__aapl__pxrReserved__::GfConvertLinearToDisplay(unsigned __int16 *a1)
{
  return pxrInternal__aapl__pxrReserved__::GfApplyGamma(a1, 0.454545455);
}

{
  return pxrInternal__aapl__pxrReserved__::GfApplyGamma(a1, 0.454545455);
}

float pxrInternal__aapl__pxrReserved__::GfConvertLinearToDisplay(pxrInternal__aapl__pxrReserved__ *this, const float *a2)
{
  return pow(*(float *)this, 0.454545455);
}

uint64_t pxrInternal__aapl__pxrReserved__::GfConvertLinearToDisplay(pxrInternal__aapl__pxrReserved__ *this, const unsigned __int8 *a2, double a3)
{
  LOBYTE(a3) = *(unsigned char *)this;
  return (int)(pow((double)*(unint64_t *)&a3 / 255.0, 0.454545455) * 255.0);
}

float pxrInternal__aapl__pxrReserved__::GfConvertDisplayToLinear(float *a1)
{
  float v2 = pow(*a1, 2.2);
  pow(a1[1], 2.2);
  pow(a1[2], 2.2);
  return v2;
}

{
  float v2;

  float v2 = pow(*a1, 2.2);
  pow(a1[1], 2.2);
  pow(a1[2], 2.2);
  return v2;
}

double pxrInternal__aapl__pxrReserved__::GfConvertDisplayToLinear(long double *a1)
{
  double v2 = pow(*a1, 2.2);
  pow(a1[1], 2.2);
  pow(a1[2], 2.2);
  return v2;
}

{
  double v2;

  double v2 = pow(*a1, 2.2);
  pow(a1[1], 2.2);
  pow(a1[2], 2.2);
  return v2;
}

unint64_t pxrInternal__aapl__pxrReserved__::GfConvertDisplayToLinear(unsigned __int16 *a1)
{
  return pxrInternal__aapl__pxrReserved__::GfApplyGamma(a1, 2.2);
}

{
  return pxrInternal__aapl__pxrReserved__::GfApplyGamma(a1, 2.2);
}

float pxrInternal__aapl__pxrReserved__::GfConvertDisplayToLinear(pxrInternal__aapl__pxrReserved__ *this, const float *a2)
{
  return pow(*(float *)this, 2.2);
}

uint64_t pxrInternal__aapl__pxrReserved__::GfConvertDisplayToLinear(pxrInternal__aapl__pxrReserved__ *this, const unsigned __int8 *a2, double a3)
{
  LOBYTE(a3) = *(unsigned char *)this;
  return (int)(pow((double)*(unint64_t *)&a3 / 255.0, 2.2) * 255.0);
}

uint64_t *sub_21689B184()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  unsigned int v5 = 0;
  float v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C510, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74C510, (char *)2, 1, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    float v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_21689B244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

float32x2_t pxrInternal__aapl__pxrReserved__::GfGetHomogenized(float32x2_t *a1)
{
  float v1 = a1[1].f32[1];
  if (v1 == 0.0) {
    float v1 = 1.0;
  }
  return vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*a1), 1.0 / v1));
}

float pxrInternal__aapl__pxrReserved__::GfHomogeneousCross(float32x2_t *a1, float32x2_t *a2)
{
  pxrInternal__aapl__pxrReserved__::GfGetHomogenized(a1);
  float v4 = v3;
  float v6 = v5;
  pxrInternal__aapl__pxrReserved__::GfGetHomogenized(a2);
  return (float)(v4 * v7) - (float)(v6 * v8);
}

double pxrInternal__aapl__pxrReserved__::GfGetHomogenized(double *a1)
{
  double v1 = a1[3];
  if (v1 == 0.0) {
    double v1 = 1.0;
  }
  return *a1 * (1.0 / v1);
}

double pxrInternal__aapl__pxrReserved__::GfHomogeneousCross(double *a1, double *a2)
{
  double v2 = a1[3];
  double v3 = 1.0;
  if (v2 == 0.0) {
    double v4 = 1.0;
  }
  else {
    double v4 = 1.0 / v2;
  }
  double v5 = a2[3];
  if (v5 != 0.0) {
    double v3 = 1.0 / v5;
  }
  return a1[1] * v4 * (a2[2] * v3) - a1[2] * v4 * (a2[1] * v3);
}

float pxrInternal__aapl__pxrReserved__::pxr_half::half::overflow(pxrInternal__aapl__pxrReserved__::pxr_half::half *this)
{
  float v3 = 1.0e10;
  int v1 = 10;
  do
  {
    float v3 = v3 * v3;
    --v1;
  }
  while (v1);
  return v3;
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_half::half::convert(pxrInternal__aapl__pxrReserved__::pxr_half::half *this)
{
  unsigned int v1 = (this >> 16) & 0x8000;
  unsigned int v2 = (this >> 23);
  unsigned int v3 = this & 0x7FFFFF;
  unsigned int v4 = v2 - 112;
  if (v2 > 0x70)
  {
    if (v2 == 255)
    {
      int v6 = (v3 < 0x2000) | (v3 >> 13) | v1 | 0x7C00;
      LOWORD(v1) = v1 | 0x7C00;
      if (v3) {
        LOWORD(v1) = v6;
      }
    }
    else
    {
      unsigned int v7 = v3 + ((this >> 13) & 1) + 4095;
      unsigned int v8 = v2 - 111;
      if ((v7 & 0x800000) == 0) {
        unsigned int v8 = v4;
      }
      if (v8 < 0x1F)
      {
        if ((v7 & 0x800000) != 0) {
          LOWORD(v10) = 0;
        }
        else {
          unsigned int v10 = v7 >> 13;
        }
        LOWORD(v1) = v10 | ((_WORD)v8 << 10) | v1;
      }
      else
      {
        float v12 = 1.0e10;
        int v9 = 10;
        do
        {
          float v12 = v12 * v12;
          --v9;
        }
        while (v9);
        LOWORD(v1) = v1 | 0x7C00;
      }
    }
  }
  else
  {
    unsigned int v5 = (((v3 | 0x800000) + ~(-1 << (125 - v2)) + (((v3 | 0x800000) >> (126 - v2)) & 1)) >> (126 - v2)) | v1;
    if (v2 >= 0x66) {
      LOWORD(v1) = v5;
    }
  }
  return (__int16)v1;
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_half::operator<<(uint64_t a1)
{
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_half::operator>>(uint64_t a1, _WORD *a2)
{
  float v6 = 0.0;
  MEMORY[0x21D447990](a1, &v6);
  if (v6 == 0.0)
  {
    unsigned int v4 = HIWORD(LODWORD(v6));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v6) >> 23])
  {
    unsigned int v4 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v6) >> 23]
       + (((LODWORD(v6) & 0x7FFFFF) + ((LODWORD(v6) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v4) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v6));
  }
  *a2 = v4;
  return a1;
}

void *pxrInternal__aapl__pxrReserved__::pxr_half::printBits(void *a1, unsigned __int16 a2)
{
  unsigned int v3 = a2;
  for (int i = 15; i != -1; --i)
  {
    if ((v3 >> i)) {
      char v5 = 49;
    }
    else {
      char v5 = 48;
    }
    char v7 = v5;
    uint64_t result = sub_216779180(a1, (uint64_t)&v7, 1);
    if (i == 15 || i == 10)
    {
      char v8 = 32;
      uint64_t result = sub_216779180(a1, (uint64_t)&v8, 1);
    }
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::pxr_half::printBits(void *a1, float a2)
{
  for (int i = 31; i != -1; --i)
  {
    if ((LODWORD(a2) >> i)) {
      char v5 = 49;
    }
    else {
      char v5 = 48;
    }
    char v7 = v5;
    uint64_t result = sub_216779180(a1, (uint64_t)&v7, 1);
    if ((i & 0xFFFFFFF7) == 0x17)
    {
      char v8 = 32;
      uint64_t result = sub_216779180(a1, (uint64_t)&v8, 1);
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_half::printBits(uint64_t result, unsigned __int16 a2)
{
  LODWORD(v2) = 0;
  for (int i = 15; i != -1; --i)
  {
    if ((a2 >> i)) {
      char v4 = 49;
    }
    else {
      char v4 = 48;
    }
    *(unsigned char *)(result + (int)v2) = v4;
    if (i == 15 || i == 10)
    {
      uint64_t v2 = (int)v2 + 1;
      *(unsigned char *)(result + v2) = 32;
    }
    LODWORD(v2) = v2 + 1;
  }
  *(unsigned char *)(result + 18) = 0;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_half::printBits(uint64_t this, char *a2, float a3)
{
  LODWORD(v3) = 0;
  for (int i = 31; i != -1; --i)
  {
    if ((LODWORD(a3) >> i)) {
      char v5 = 49;
    }
    else {
      char v5 = 48;
    }
    *(unsigned char *)(this + (int)v3) = v5;
    if ((i & 0xFFFFFFF7) == 0x17)
    {
      uint64_t v3 = (int)v3 + 1;
      *(unsigned char *)(this + v3) = 32;
    }
    LODWORD(v3) = v3 + 1;
  }
  *(unsigned char *)(this + 34) = 0;
  return this;
}

uint64_t *sub_21689B85C()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  char v5 = 0;
  float v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C520, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74C520, (char *)0x20, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    float v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_21689B91C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::GfLine::FindClosestPoint(double *a1, double *a2, double *a3)
{
  double v3 = *a1;
  double v4 = a1[3];
  double v5 = (*a2 - *a1) * v4 + (a2[1] - a1[1]) * a1[4] + (a2[2] - a1[2]) * a1[5];
  if (a3)
  {
    *a3 = v5;
    double v3 = *a1;
    double v4 = a1[3];
  }
  return v5 * v4 + v3;
}

BOOL pxrInternal__aapl__pxrReserved__::GfFindClosestPoints(double *a1, uint64_t a2, double *a3, float64x2_t *a4, double *a5, double *a6)
{
  double v6 = a1[3];
  double v7 = a1[4];
  double v8 = *(double *)(a2 + 24);
  double v9 = *(double *)(a2 + 32);
  double v10 = a1[5];
  double v11 = *(double *)(a2 + 40);
  double v12 = v6 * v8 + v7 * v9 + v10 * v11;
  double v13 = v6 * v6 + v7 * v7 + v10 * v10;
  double v14 = v8 * v8 + v9 * v9 + v11 * v11;
  double v15 = vabdd_f64(v12 * v12, v13 * v14);
  if (v15 >= 0.000001)
  {
    double v16 = v12 * v12 - v13 * v14;
    double v17 = *(double *)(a2 + 8);
    double v18 = *(double *)(a2 + 16);
    double v19 = v8 * *(double *)a2 + v9 * v17 + v11 * v18;
    double v20 = a1[1];
    double v21 = v8 * *a1 + v9 * v20;
    double v22 = a1[2];
    double v23 = v21 + v11 * v22 - v19;
    double v24 = v6 * *a1 + v7 * v20 + v10 * v22 - (v6 * *(double *)a2 + v7 * v17 + v10 * v18);
    double v25 = (v14 * v24 - v12 * v23) / v16;
    double v26 = v12 * v24 - v13 * v23;
    if (a3)
    {
      *a3 = *a1 + v6 * v25;
      a3[1] = v25 * v7 + v20;
      a3[2] = v25 * v10 + v22;
    }
    double v27 = v26 / v16;
    if (a4)
    {
      double v28 = v27 * *(double *)(a2 + 40) + *(double *)(a2 + 16);
      *a4 = vaddq_f64(vmulq_n_f64(*(float64x2_t *)(a2 + 24), v27), *(float64x2_t *)a2);
      a4[1].f64[0] = v28;
    }
    if (a5) {
      *a5 = v25;
    }
    if (a6) {
      *a6 = v27;
    }
  }
  return v15 >= 0.000001;
}

uint64_t *sub_21689BBFC()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  double v5 = 0;
  double v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C530, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74C530, (char *)0x30, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    double v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_21689BCBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::GfLine2d::FindClosestPoint(double *a1, double *a2, double *a3)
{
  double v3 = *a1;
  double v4 = a1[2];
  double v5 = (*a2 - *a1) * v4 + (a2[1] - a1[1]) * a1[3];
  if (a3)
  {
    *a3 = v5;
    double v4 = a1[2];
    double v3 = *a1;
  }
  return v5 * v4 + v3;
}

BOOL pxrInternal__aapl__pxrReserved__::GfFindClosestPoints(double *a1, float64x2_t *a2, double *a3, float64x2_t *a4, double *a5, double *a6)
{
  double v6 = a1[2];
  double v7 = a1[3];
  double v8 = a2[1].f64[0];
  double v9 = a2[1].f64[1];
  double v10 = v6 * v8 + v7 * v9;
  double v11 = v6 * v6 + v7 * v7;
  double v12 = v8 * v8 + v9 * v9;
  double v13 = vabdd_f64(v10 * v10, v11 * v12);
  if (v13 >= 0.000001)
  {
    double v14 = v10 * v10 - v11 * v12;
    double v15 = a2->f64[1];
    double v16 = a1[1];
    double v17 = v8 * *a1 + v9 * v16 - (v8 * a2->f64[0] + v9 * v15);
    double v18 = v6 * *a1 + v7 * v16 - (v6 * a2->f64[0] + v7 * v15);
    double v19 = (v12 * v18 - v10 * v17) / v14;
    double v20 = v10 * v18 - v11 * v17;
    if (a3)
    {
      *a3 = *a1 + v6 * v19;
      a3[1] = v19 * v7 + v16;
    }
    double v21 = v20 / v14;
    if (a4) {
      *a4 = vaddq_f64(vmulq_n_f64(a2[1], v21), *a2);
    }
    if (a5) {
      *a5 = v19;
    }
    if (a6) {
      *a6 = v21;
    }
  }
  return v13 >= 0.000001;
}

uint64_t *sub_21689BE3C()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  double v5 = 0;
  double v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C540, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74C540, (char *)0x20, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    double v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_21689BEFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::GfLineSeg::FindClosestPoint(double *a1, double *a2, double *a3)
{
  double v5 = a1[6];
  double v6 = 0.0;
  if (v5 == 0.0)
  {
    if (a3)
    {
LABEL_3:
      *a3 = v6;
      double v5 = a1[6];
    }
  }
  else
  {
    double v9 = 0.0;
    pxrInternal__aapl__pxrReserved__::GfLine::FindClosestPoint(a1, a2, &v9);
    double v5 = a1[6];
    double v8 = 1.0;
    if (v9 / v5 <= 1.0) {
      double v8 = v9 / v5;
    }
    double v6 = 0.0;
    if (v9 / v5 >= 0.0) {
      double v6 = v8;
    }
    if (a3) {
      goto LABEL_3;
    }
  }
  return a1[3] * (v6 * v5) + *a1;
}

BOOL pxrInternal__aapl__pxrReserved__::GfFindClosestPoints(double *a1, uint64_t a2, uint64_t a3, float64x2_t *a4, void *a5, double *a6)
{
  double v23 = 0.0;
  uint64_t v24 = 0;
  BOOL ClosestPoints = pxrInternal__aapl__pxrReserved__::GfFindClosestPoints(a1, a2, (double *)&v27, &v25, (double *)&v24, &v23);
  if (ClosestPoints)
  {
    double v14 = *(double *)(a2 + 40);
    double v13 = *(double *)(a2 + 48);
    if (v23 / v13 <= 1.0) {
      double v15 = v23 / v13;
    }
    else {
      double v15 = 1.0;
    }
    double v16 = 0.0;
    if (v23 / v13 >= 0.0) {
      double v16 = v15;
    }
    double v23 = v16;
    double v17 = v13 * v16;
    double v18 = v14 * v17 + *(double *)(a2 + 16);
    float64x2_t v25 = vaddq_f64(*(float64x2_t *)a2, vmulq_n_f64(*(float64x2_t *)(a2 + 24), v17));
    double v26 = v18;
    if (v16 <= 0.0 || v16 >= 1.0)
    {
      *(void *)&long long v27 = pxrInternal__aapl__pxrReserved__::GfLine::FindClosestPoint(a1, v25.f64, (double *)&v24);
      *((void *)&v27 + 1) = v20;
      uint64_t v28 = v21;
    }
    if (a3)
    {
      *(_OWORD *)a3 = v27;
      *(void *)(a3 + 16) = v28;
    }
    if (a4)
    {
      *a4 = v25;
      a4[1].f64[0] = v26;
    }
    if (a5) {
      *a5 = v24;
    }
    if (a6) {
      *a6 = v23;
    }
  }
  return ClosestPoints;
}

BOOL pxrInternal__aapl__pxrReserved__::GfFindClosestPoints(uint64_t a1, uint64_t a2, float64x2_t *a3, float64x2_t *a4, double *a5, double *a6)
{
  double v22 = 0.0;
  double v23 = 0.0;
  BOOL result = pxrInternal__aapl__pxrReserved__::GfFindClosestPoints((double *)a1, a2, v25, &v24, &v23, &v22);
  if (result)
  {
    double v13 = *(double *)(a1 + 48);
    double v14 = 1.0;
    if (v23 / v13 <= 1.0) {
      double v15 = v23 / v13;
    }
    else {
      double v15 = 1.0;
    }
    if (v23 / v13 >= 0.0) {
      double v16 = v15;
    }
    else {
      double v16 = 0.0;
    }
    double v17 = v22 / *(double *)(a2 + 48);
    if (v17 <= 1.0) {
      double v14 = v22 / *(double *)(a2 + 48);
    }
    if (v17 < 0.0) {
      double v14 = 0.0;
    }
    if (a3)
    {
      double v18 = v13 * v16;
      double v19 = v18 * *(double *)(a1 + 40) + *(double *)(a1 + 16);
      *a3 = vaddq_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 24), v18), *(float64x2_t *)a1);
      a3[1].f64[0] = v19;
    }
    if (a4)
    {
      double v20 = v14 * *(double *)(a2 + 48);
      double v21 = v20 * *(double *)(a2 + 40) + *(double *)(a2 + 16);
      *a4 = vaddq_f64(vmulq_n_f64(*(float64x2_t *)(a2 + 24), v20), *(float64x2_t *)a2);
      a4[1].f64[0] = v21;
    }
    if (a5) {
      *a5 = v16;
    }
    if (a6) {
      *a6 = v14;
    }
  }
  return result;
}

uint64_t *sub_21689C32C()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  double v5 = 0;
  double v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C550, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74C550, (char *)0x38, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    double v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_21689C3EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::GfLineSeg2d::FindClosestPoint(float64x2_t *a1, double *a2, double *a3)
{
  double v5 = a1[2].f64[0];
  double v6 = 0.0;
  if (v5 == 0.0)
  {
    if (a3)
    {
LABEL_3:
      *a3 = v6;
      double v5 = a1[2].f64[0];
    }
  }
  else
  {
    double v9 = 0.0;
    pxrInternal__aapl__pxrReserved__::GfLine2d::FindClosestPoint(a1->f64, a2, &v9);
    double v5 = a1[2].f64[0];
    double v8 = 1.0;
    if (v9 / v5 <= 1.0) {
      double v8 = v9 / v5;
    }
    double v6 = 0.0;
    if (v9 / v5 >= 0.0) {
      double v6 = v8;
    }
    if (a3) {
      goto LABEL_3;
    }
  }
  *(void *)&double result = *(_OWORD *)&vaddq_f64(vmulq_n_f64(a1[1], v6 * v5), *a1);
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::GfFindClosestPoints(double *a1, float64x2_t *a2, _OWORD *a3, float64x2_t *a4, void *a5, double *a6)
{
  double v21 = 0.0;
  uint64_t v22 = 0;
  BOOL ClosestPoints = pxrInternal__aapl__pxrReserved__::GfFindClosestPoints(a1, a2, (double *)&v24, &v23, (double *)&v22, &v21);
  if (ClosestPoints)
  {
    double v13 = a2[2].f64[0];
    if (v21 / v13 <= 1.0) {
      double v14 = v21 / v13;
    }
    else {
      double v14 = 1.0;
    }
    double v15 = 0.0;
    if (v21 / v13 >= 0.0) {
      double v15 = v14;
    }
    float64x2_t v16 = *a2;
    float64x2_t v17 = vmulq_n_f64(a2[1], v13 * v15);
    double v21 = v15;
    float64x2_t v23 = vaddq_f64(v16, v17);
    if (v15 <= 0.0 || v15 >= 1.0)
    {
      *(void *)&long long v24 = pxrInternal__aapl__pxrReserved__::GfLine2d::FindClosestPoint(a1, v23.f64, (double *)&v22);
      *((void *)&v24 + 1) = v19;
    }
    if (a3) {
      *a3 = v24;
    }
    if (a4) {
      *a4 = v23;
    }
    if (a5) {
      *a5 = v22;
    }
    if (a6) {
      *a6 = v21;
    }
  }
  return ClosestPoints;
}

BOOL pxrInternal__aapl__pxrReserved__::GfFindClosestPoints(float64x2_t *a1, float64x2_t *a2, float64x2_t *a3, float64x2_t *a4, double *a5, double *a6)
{
  double v18 = 0.0;
  double v19 = 0.0;
  BOOL result = pxrInternal__aapl__pxrReserved__::GfFindClosestPoints(a1->f64, a2, v21, &v20, &v19, &v18);
  if (result)
  {
    double v13 = a1[2].f64[0];
    double v14 = 1.0;
    if (v19 / v13 <= 1.0) {
      double v15 = v19 / v13;
    }
    else {
      double v15 = 1.0;
    }
    if (v19 / v13 >= 0.0) {
      double v16 = v15;
    }
    else {
      double v16 = 0.0;
    }
    double v17 = v18 / a2[2].f64[0];
    if (v17 <= 1.0) {
      double v14 = v18 / a2[2].f64[0];
    }
    if (v17 < 0.0) {
      double v14 = 0.0;
    }
    if (a3) {
      *a3 = vaddq_f64(vmulq_n_f64(a1[1], v13 * v16), *a1);
    }
    if (a4) {
      *a4 = vaddq_f64(vmulq_n_f64(a2[1], v14 * a2[2].f64[0]), *a2);
    }
    if (a5) {
      *a5 = v16;
    }
    if (a6) {
      *a6 = v14;
    }
  }
  return result;
}

uint64_t *sub_21689C6BC()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  double v5 = 0;
  double v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C560, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74C560, (char *)0x28, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    double v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_21689C77C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::GfMod(pxrInternal__aapl__pxrReserved__ *this, long double a2, long double a3)
{
}

void pxrInternal__aapl__pxrReserved__::GfMod(pxrInternal__aapl__pxrReserved__ *this, float a2, float a3)
{
}

void *pxrInternal__aapl__pxrReserved__::operator<<(void *a1, double *a2)
{
  double v3 = sub_216779180(a1, (uint64_t)"( (", 3);
  char v4 = pxrInternal__aapl__pxrReserved__::operator<<(v3, *a2);
  double v5 = sub_216779180(v4, (uint64_t)", ", 2);
  double v6 = pxrInternal__aapl__pxrReserved__::operator<<(v5, a2[1]);
  uint64_t v7 = sub_216779180(v6, (uint64_t)"), (", 4);
  uint64_t v8 = pxrInternal__aapl__pxrReserved__::operator<<(v7, a2[2]);
  int v9 = sub_216779180(v8, (uint64_t)", ", 2);
  double v10 = pxrInternal__aapl__pxrReserved__::operator<<(v9, a2[3]);

  return sub_216779180(v10, (uint64_t)"))", 3);
}

{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t vars8;

  double v3 = sub_216779180(a1, (uint64_t)"( (", 3);
  char v4 = pxrInternal__aapl__pxrReserved__::operator<<(v3, *a2);
  double v5 = sub_216779180(v4, (uint64_t)", ", 2);
  double v6 = pxrInternal__aapl__pxrReserved__::operator<<(v5, a2[1]);
  uint64_t v7 = sub_216779180(v6, (uint64_t)", ", 2);
  uint64_t v8 = pxrInternal__aapl__pxrReserved__::operator<<(v7, a2[2]);
  int v9 = sub_216779180(v8, (uint64_t)"), (", 4);
  double v10 = pxrInternal__aapl__pxrReserved__::operator<<(v9, a2[3]);
  double v11 = sub_216779180(v10, (uint64_t)", ", 2);
  double v12 = pxrInternal__aapl__pxrReserved__::operator<<(v11, a2[4]);
  double v13 = sub_216779180(v12, (uint64_t)", ", 2);
  double v14 = pxrInternal__aapl__pxrReserved__::operator<<(v13, a2[5]);
  double v15 = sub_216779180(v14, (uint64_t)"), (", 4);
  uint64_t v16 = pxrInternal__aapl__pxrReserved__::operator<<(v15, a2[6]);
  double v17 = sub_216779180(v16, (uint64_t)", ", 2);
  double v18 = pxrInternal__aapl__pxrReserved__::operator<<(v17, a2[7]);
  double v19 = sub_216779180(v18, (uint64_t)", ", 2);
  float64x2_t v20 = pxrInternal__aapl__pxrReserved__::operator<<(v19, a2[8]);

  return sub_216779180(v20, (uint64_t)"))", 3);
}

{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t vars8;

  double v3 = sub_216779180(a1, (uint64_t)"( (", 3);
  char v4 = pxrInternal__aapl__pxrReserved__::operator<<(v3, *a2);
  double v5 = sub_216779180(v4, (uint64_t)", ", 2);
  double v6 = pxrInternal__aapl__pxrReserved__::operator<<(v5, a2[1]);
  uint64_t v7 = sub_216779180(v6, (uint64_t)", ", 2);
  uint64_t v8 = pxrInternal__aapl__pxrReserved__::operator<<(v7, a2[2]);
  int v9 = sub_216779180(v8, (uint64_t)", ", 2);
  double v10 = pxrInternal__aapl__pxrReserved__::operator<<(v9, a2[3]);
  double v11 = sub_216779180(v10, (uint64_t)"), (", 4);
  double v12 = pxrInternal__aapl__pxrReserved__::operator<<(v11, a2[4]);
  double v13 = sub_216779180(v12, (uint64_t)", ", 2);
  double v14 = pxrInternal__aapl__pxrReserved__::operator<<(v13, a2[5]);
  double v15 = sub_216779180(v14, (uint64_t)", ", 2);
  uint64_t v16 = pxrInternal__aapl__pxrReserved__::operator<<(v15, a2[6]);
  double v17 = sub_216779180(v16, (uint64_t)", ", 2);
  double v18 = pxrInternal__aapl__pxrReserved__::operator<<(v17, a2[7]);
  double v19 = sub_216779180(v18, (uint64_t)"), (", 4);
  float64x2_t v20 = pxrInternal__aapl__pxrReserved__::operator<<(v19, a2[8]);
  double v21 = sub_216779180(v20, (uint64_t)", ", 2);
  uint64_t v22 = pxrInternal__aapl__pxrReserved__::operator<<(v21, a2[9]);
  float64x2_t v23 = sub_216779180(v22, (uint64_t)", ", 2);
  long long v24 = pxrInternal__aapl__pxrReserved__::operator<<(v23, a2[10]);
  float64x2_t v25 = sub_216779180(v24, (uint64_t)", ", 2);
  double v26 = pxrInternal__aapl__pxrReserved__::operator<<(v25, a2[11]);
  long long v27 = sub_216779180(v26, (uint64_t)"), (", 4);
  uint64_t v28 = pxrInternal__aapl__pxrReserved__::operator<<(v27, a2[12]);
  long long v29 = sub_216779180(v28, (uint64_t)", ", 2);
  long long v30 = pxrInternal__aapl__pxrReserved__::operator<<(v29, a2[13]);
  long long v31 = sub_216779180(v30, (uint64_t)", ", 2);
  long long v32 = pxrInternal__aapl__pxrReserved__::operator<<(v31, a2[14]);
  double v33 = sub_216779180(v32, (uint64_t)", ", 2);
  double v34 = pxrInternal__aapl__pxrReserved__::operator<<(v33, a2[15]);

  return sub_216779180(v34, (uint64_t)"))", 3);
}

{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  char v8;
  char v9;

  uint64_t v8 = 91;
  double v3 = sub_216779180(a1, (uint64_t)&v8, 1);
  char v4 = pxrInternal__aapl__pxrReserved__::operator<<(v3, *a2);
  double v5 = sub_216779180(v4, (uint64_t)"...", 3);
  double v6 = pxrInternal__aapl__pxrReserved__::operator<<(v5, a2[1]);
  int v9 = 93;
  return sub_216779180(v6, (uint64_t)&v9, 1);
}

{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  char v8;
  char v9;

  uint64_t v8 = 40;
  double v3 = sub_216779180(a1, (uint64_t)&v8, 1);
  char v4 = pxrInternal__aapl__pxrReserved__::operator<<(v3, *a2);
  double v5 = sub_216779180(v4, (uint64_t)", ", 2);
  double v6 = pxrInternal__aapl__pxrReserved__::operator<<(v5, a2[1]);
  int v9 = 41;
  return sub_216779180(v6, (uint64_t)&v9, 1);
}

{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  char v10;
  char v11;

  double v10 = 40;
  double v3 = sub_216779180(a1, (uint64_t)&v10, 1);
  char v4 = pxrInternal__aapl__pxrReserved__::operator<<(v3, *a2);
  double v5 = sub_216779180(v4, (uint64_t)", ", 2);
  double v6 = pxrInternal__aapl__pxrReserved__::operator<<(v5, a2[1]);
  uint64_t v7 = sub_216779180(v6, (uint64_t)", ", 2);
  uint64_t v8 = pxrInternal__aapl__pxrReserved__::operator<<(v7, a2[2]);
  double v11 = 41;
  return sub_216779180(v8, (uint64_t)&v11, 1);
}

{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  char v12;
  char v13;

  double v12 = 40;
  double v3 = sub_216779180(a1, (uint64_t)&v12, 1);
  char v4 = pxrInternal__aapl__pxrReserved__::operator<<(v3, *a2);
  double v5 = sub_216779180(v4, (uint64_t)", ", 2);
  double v6 = pxrInternal__aapl__pxrReserved__::operator<<(v5, a2[1]);
  uint64_t v7 = sub_216779180(v6, (uint64_t)", ", 2);
  uint64_t v8 = pxrInternal__aapl__pxrReserved__::operator<<(v7, a2[2]);
  int v9 = sub_216779180(v8, (uint64_t)", ", 2);
  double v10 = pxrInternal__aapl__pxrReserved__::operator<<(v9, a2[3]);
  double v13 = 41;
  return sub_216779180(v10, (uint64_t)&v13, 1);
}

{
  atomic_uint **v3;

  if (*a2 == -1.79769313e308)
  {
    double v3 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdTimeCodeTokens);
    if (!v3) {
      double v3 = sub_216EE1D34(&pxrInternal__aapl__pxrReserved__::UsdTimeCodeTokens);
    }
    pxrInternal__aapl__pxrReserved__::operator<<(a1, v3 + 1);
  }
  else
  {
    std::ostream::operator<<();
  }
  return a1;
}

{
  BOOL v4;
  double v5;
  double v6;
  atomic_uint **v7;
  void *v8;
  atomic_uint **v10;
  atomic_uint **v11;
  double v13;
  double v14[4];

  sub_217073734(v14, (pxrInternal__aapl__pxrReserved__::UsdTimeCode *)a2);
  if (*(void *)&v14[0]) {
    char v4 = 0;
  }
  else {
    char v4 = *(void *)&v14[1] == 0;
  }
  if (v4)
  {
    double v11 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdUtilsTimeCodeRangeTokens);
    if (!v11) {
      double v11 = sub_2170737EC(&pxrInternal__aapl__pxrReserved__::UsdUtilsTimeCodeRangeTokens);
    }
    pxrInternal__aapl__pxrReserved__::operator<<(a1, v11);
  }
  else
  {
    double v5 = *a2;
    double v13 = a2[1];
    v14[0] = v5;
    double v6 = a2[2];
    pxrInternal__aapl__pxrReserved__::operator<<(a1, v14);
    if (v13 != v14[0])
    {
      uint64_t v7 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdUtilsTimeCodeRangeTokens);
      if (!v7) {
        uint64_t v7 = sub_2170737EC(&pxrInternal__aapl__pxrReserved__::UsdUtilsTimeCodeRangeTokens);
      }
      uint64_t v8 = pxrInternal__aapl__pxrReserved__::operator<<(a1, v7 + 1);
      pxrInternal__aapl__pxrReserved__::operator<<(v8, &v13);
    }
    if (v6 != 1.0 && v6 != -1.0)
    {
      double v10 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdUtilsTimeCodeRangeTokens);
      if (!v10) {
        double v10 = sub_2170737EC(&pxrInternal__aapl__pxrReserved__::UsdUtilsTimeCodeRangeTokens);
      }
      pxrInternal__aapl__pxrReserved__::operator<<(a1, v10 + 2);
      std::ostream::operator<<();
    }
  }
  return a1;
}

float64x2_t pxrInternal__aapl__pxrReserved__::GfMatrix2d::GfMatrix2d(float64x2_t *a1, float32x2_t *a2)
{
  float64x2_t result = vcvtq_f64_f32(*a2);
  float64x2_t v3 = vcvtq_f64_f32(a2[1]);
  *a1 = result;
  a1[1] = v3;
  return result;
}

{
  float64x2_t result;
  float64x2_t v3;

  float64x2_t result = vcvtq_f64_f32(*a2);
  float64x2_t v3 = vcvtq_f64_f32(a2[1]);
  *a1 = result;
  a1[1] = v3;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix2d::GfMatrix2d(long long *a1, uint64_t *a2)
{
  uint64_t v2 = 0;
  uint64_t v16 = *MEMORY[0x263EF8340];
  long long v14 = xmmword_217452F68;
  long long v15 = unk_217452F78;
  uint64_t v3 = *a2;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  char v5 = 1;
  do
  {
    if (v2 == v4) {
      break;
    }
    char v6 = v5;
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(v3 + 24 * v2);
    uint64_t v9 = (*(void *)(v3 + 24 * v2 + 8) - v8) >> 3;
    char v10 = 1;
    do
    {
      if (v7 == v9) {
        break;
      }
      char v11 = v10;
      char v10 = 0;
      *((void *)&v14 + 2 * v2 + v7) = *(void *)(v8 + 8 * v7);
      uint64_t v7 = 1;
    }
    while ((v11 & 1) != 0);
    char v5 = 0;
    uint64_t v2 = 1;
  }
  while ((v6 & 1) != 0);
  double result = *(double *)&v14;
  long long v13 = v15;
  *a1 = v14;
  a1[1] = v13;
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  double result;
  long long v13;
  long long v14;
  long long v15;
  uint64_t v16;

  uint64_t v2 = 0;
  uint64_t v16 = *MEMORY[0x263EF8340];
  long long v14 = xmmword_217452F68;
  long long v15 = unk_217452F78;
  uint64_t v3 = *a2;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  char v5 = 1;
  do
  {
    if (v2 == v4) {
      break;
    }
    char v6 = v5;
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(v3 + 24 * v2);
    uint64_t v9 = (*(void *)(v3 + 24 * v2 + 8) - v8) >> 2;
    char v10 = 1;
    do
    {
      if (v7 == v9) {
        break;
      }
      char v11 = v10;
      char v10 = 0;
      *((double *)&v14 + 2 * v2 + v7) = *(float *)(v8 + 4 * v7);
      uint64_t v7 = 1;
    }
    while ((v11 & 1) != 0);
    char v5 = 0;
    uint64_t v2 = 1;
  }
  while ((v6 & 1) != 0);
  double result = *(double *)&v14;
  long long v13 = v15;
  *a1 = v14;
  a1[1] = v13;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix2d::SetDiagonal(uint64_t this, double a2)
{
  *(double *)this = a2;
  *(void *)(this + 8) = 0;
  *(void *)(this + 16) = 0;
  *(double *)(this + 24) = a2;
  return this;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix2d::SetDiagonal(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  double result = *(double *)(a2 + 8);
  *(double *)(a1 + 24) = result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix2d::Get(pxrInternal__aapl__pxrReserved__::GfMatrix2d *this, double (*a2)[2])
{
  (*a2)[0] = *(double *)this;
  (*a2)[1] = *((double *)this + 1);
  (*a2)[2] = *((double *)this + 2);
  (*a2)[3] = *((double *)this + 3);
  return (uint64_t)*a2;
}

BOOL pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator==(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3];
}

BOOL pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator==(double *a1, float *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3];
}

double pxrInternal__aapl__pxrReserved__::GfMatrix2d::GetTranspose(pxrInternal__aapl__pxrReserved__::GfMatrix2d *this)
{
  return *(double *)this;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix2d::GetInverse(pxrInternal__aapl__pxrReserved__::GfMatrix2d *this, double *a2, double a3)
{
  double v3 = *(double *)this * *((double *)this + 3) - *((double *)this + 1) * *((double *)this + 2);
  if (a2) {
    *a2 = v3;
  }
  if (fabs(v3) <= a3) {
    return 3.40282347e38;
  }
  else {
    return 1.0 / v3 * *((double *)this + 3);
  }
}

double pxrInternal__aapl__pxrReserved__::GfMatrix2d::GetDeterminant(pxrInternal__aapl__pxrReserved__::GfMatrix2d *this)
{
  return *(double *)this * *((double *)this + 3) - *((double *)this + 1) * *((double *)this + 2);
}

float64x2_t pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator*=(float64x2_t *a1, double a2)
{
  float64x2_t v2 = vmulq_n_f64(*a1, a2);
  float64x2_t result = vmulq_n_f64(a1[1], a2);
  *a1 = v2;
  a1[1] = result;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator+=(double *a1, double *a2)
{
  double v2 = a1[1];
  *a1 = *a2 + *a1;
  a1[1] = a2[1] + v2;
  double v3 = a1[3];
  a1[2] = a2[2] + a1[2];
  double result = a2[3] + v3;
  a1[3] = result;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator-=(double *a1, double *a2)
{
  double v2 = a1[1];
  *a1 = *a1 - *a2;
  a1[1] = v2 - a2[1];
  double v3 = a1[3];
  a1[2] = a1[2] - a2[2];
  double result = v3 - a2[3];
  a1[3] = result;
  return result;
}

double pxrInternal__aapl__pxrReserved__::operator-(double *a1)
{
  return -*a1;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator*=(double *a1, double *a2)
{
  double v2 = *a1;
  double v3 = a1[1];
  double v4 = a1[2];
  double v5 = a1[3];
  *a1 = *a1 * *a2 + v3 * a2[2];
  a1[1] = v2 * a2[1] + v3 * a2[3];
  a1[2] = v4 * *a2 + v5 * a2[2];
  double result = v4 * a2[1] + v5 * a2[3];
  a1[3] = result;
  return result;
}

float32x2_t pxrInternal__aapl__pxrReserved__::operator*(float *a1, float64x2_t *a2)
{
  return vcvt_f32_f64(vaddq_f64(vmulq_n_f64(*a2, *a1), vmulq_n_f64(a2[1], a1[1])));
}

{
  return vcvt_f32_f64(vaddq_f64(vaddq_f64(vaddq_f64(vmulq_n_f64(*a2, *a1), vmulq_n_f64(a2[2], a1[1])), vmulq_n_f64(a2[4], a1[2])), vmulq_n_f64(a2[6], a1[3])));
}

float32x2_t pxrInternal__aapl__pxrReserved__::operator*(uint64_t a1, float32x2_t *a2)
{
  float64x2_t v2 = *(float64x2_t *)a1;
  float64x2_t v3 = vcvtq_f64_f32(*a2);
  v2.f64[1] = *(float64_t *)(a1 + 24);
  return vcvt_f32_f64(vaddq_f64(vmulq_f64(*(float64x2_t *)(a1 + 8), (float64x2_t)vextq_s8((int8x16_t)v3, (int8x16_t)v3, 8uLL)), vmulq_f64(v2, v3)));
}

BOOL pxrInternal__aapl__pxrReserved__::GfIsClose(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::GfMatrix2d *a2, const pxrInternal__aapl__pxrReserved__::GfMatrix2d *a3, double a4)
{
  uint64_t v4 = 0;
  char v5 = 1;
LABEL_2:
  uint64_t v6 = 0;
  char v7 = v5;
  char v8 = 1;
  uint64_t v9 = (char *)this + 8 * v4;
  char v10 = (char *)a2 + 8 * v4;
  while (1)
  {
    double v11 = vabdd_f64(*(double *)&v9[8 * v6], *(double *)&v10[8 * v6]);
    if (v11 >= a4) {
      return v11 < a4;
    }
    char v12 = v8;
    char v8 = 0;
    uint64_t v6 = 1;
    if ((v12 & 1) == 0)
    {
      char v5 = 0;
      uint64_t v4 = 2;
      if (v7) {
        goto LABEL_2;
      }
      return v11 < a4;
    }
  }
}

uint64_t *sub_21689CE14()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  char v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C570, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74C570, (char *)0x20, 1, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_21689CED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::operator<<(void *a1, float *a2)
{
  float64x2_t v3 = sub_216779180(a1, (uint64_t)"( (", 3);
  char v4 = pxrInternal__aapl__pxrReserved__::operator<<(v3, *a2);
  char v5 = sub_216779180(v4, (uint64_t)", ", 2);
  uint64_t v6 = pxrInternal__aapl__pxrReserved__::operator<<(v5, a2[1]);
  uint64_t v7 = sub_216779180(v6, (uint64_t)"), (", 4);
  uint64_t v8 = pxrInternal__aapl__pxrReserved__::operator<<(v7, a2[2]);
  int v9 = sub_216779180(v8, (uint64_t)", ", 2);
  char v10 = pxrInternal__aapl__pxrReserved__::operator<<(v9, a2[3]);

  return sub_216779180(v10, (uint64_t)"))", 3);
}

{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t vars8;

  float64x2_t v3 = sub_216779180(a1, (uint64_t)"( (", 3);
  char v4 = pxrInternal__aapl__pxrReserved__::operator<<(v3, *a2);
  char v5 = sub_216779180(v4, (uint64_t)", ", 2);
  uint64_t v6 = pxrInternal__aapl__pxrReserved__::operator<<(v5, a2[1]);
  uint64_t v7 = sub_216779180(v6, (uint64_t)", ", 2);
  uint64_t v8 = pxrInternal__aapl__pxrReserved__::operator<<(v7, a2[2]);
  int v9 = sub_216779180(v8, (uint64_t)"), (", 4);
  char v10 = pxrInternal__aapl__pxrReserved__::operator<<(v9, a2[3]);
  double v11 = sub_216779180(v10, (uint64_t)", ", 2);
  char v12 = pxrInternal__aapl__pxrReserved__::operator<<(v11, a2[4]);
  long long v13 = sub_216779180(v12, (uint64_t)", ", 2);
  long long v14 = pxrInternal__aapl__pxrReserved__::operator<<(v13, a2[5]);
  long long v15 = sub_216779180(v14, (uint64_t)"), (", 4);
  uint64_t v16 = pxrInternal__aapl__pxrReserved__::operator<<(v15, a2[6]);
  double v17 = sub_216779180(v16, (uint64_t)", ", 2);
  double v18 = pxrInternal__aapl__pxrReserved__::operator<<(v17, a2[7]);
  double v19 = sub_216779180(v18, (uint64_t)", ", 2);
  float64x2_t v20 = pxrInternal__aapl__pxrReserved__::operator<<(v19, a2[8]);

  return sub_216779180(v20, (uint64_t)"))", 3);
}

{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  uint64_t vars8;

  float64x2_t v3 = sub_216779180(a1, (uint64_t)"( (", 3);
  char v4 = pxrInternal__aapl__pxrReserved__::operator<<(v3, *a2);
  char v5 = sub_216779180(v4, (uint64_t)", ", 2);
  uint64_t v6 = pxrInternal__aapl__pxrReserved__::operator<<(v5, a2[1]);
  uint64_t v7 = sub_216779180(v6, (uint64_t)", ", 2);
  uint64_t v8 = pxrInternal__aapl__pxrReserved__::operator<<(v7, a2[2]);
  int v9 = sub_216779180(v8, (uint64_t)", ", 2);
  char v10 = pxrInternal__aapl__pxrReserved__::operator<<(v9, a2[3]);
  double v11 = sub_216779180(v10, (uint64_t)"), (", 4);
  char v12 = pxrInternal__aapl__pxrReserved__::operator<<(v11, a2[4]);
  long long v13 = sub_216779180(v12, (uint64_t)", ", 2);
  long long v14 = pxrInternal__aapl__pxrReserved__::operator<<(v13, a2[5]);
  long long v15 = sub_216779180(v14, (uint64_t)", ", 2);
  uint64_t v16 = pxrInternal__aapl__pxrReserved__::operator<<(v15, a2[6]);
  double v17 = sub_216779180(v16, (uint64_t)", ", 2);
  double v18 = pxrInternal__aapl__pxrReserved__::operator<<(v17, a2[7]);
  double v19 = sub_216779180(v18, (uint64_t)"), (", 4);
  float64x2_t v20 = pxrInternal__aapl__pxrReserved__::operator<<(v19, a2[8]);
  double v21 = sub_216779180(v20, (uint64_t)", ", 2);
  uint64_t v22 = pxrInternal__aapl__pxrReserved__::operator<<(v21, a2[9]);
  float64x2_t v23 = sub_216779180(v22, (uint64_t)", ", 2);
  long long v24 = pxrInternal__aapl__pxrReserved__::operator<<(v23, a2[10]);
  float64x2_t v25 = sub_216779180(v24, (uint64_t)", ", 2);
  double v26 = pxrInternal__aapl__pxrReserved__::operator<<(v25, a2[11]);
  long long v27 = sub_216779180(v26, (uint64_t)"), (", 4);
  uint64_t v28 = pxrInternal__aapl__pxrReserved__::operator<<(v27, a2[12]);
  long long v29 = sub_216779180(v28, (uint64_t)", ", 2);
  long long v30 = pxrInternal__aapl__pxrReserved__::operator<<(v29, a2[13]);
  long long v31 = sub_216779180(v30, (uint64_t)", ", 2);
  long long v32 = pxrInternal__aapl__pxrReserved__::operator<<(v31, a2[14]);
  double v33 = sub_216779180(v32, (uint64_t)", ", 2);
  double v34 = pxrInternal__aapl__pxrReserved__::operator<<(v33, a2[15]);

  return sub_216779180(v34, (uint64_t)"))", 3);
}

{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  char v8;
  char v9;

  uint64_t v8 = 91;
  float64x2_t v3 = sub_216779180(a1, (uint64_t)&v8, 1);
  char v4 = pxrInternal__aapl__pxrReserved__::operator<<(v3, *a2);
  char v5 = sub_216779180(v4, (uint64_t)"...", 3);
  uint64_t v6 = pxrInternal__aapl__pxrReserved__::operator<<(v5, a2[1]);
  int v9 = 93;
  return sub_216779180(v6, (uint64_t)&v9, 1);
}

{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  char v8;
  char v9;

  uint64_t v8 = 40;
  float64x2_t v3 = sub_216779180(a1, (uint64_t)&v8, 1);
  char v4 = pxrInternal__aapl__pxrReserved__::operator<<(v3, *a2);
  char v5 = sub_216779180(v4, (uint64_t)", ", 2);
  uint64_t v6 = pxrInternal__aapl__pxrReserved__::operator<<(v5, a2[1]);
  int v9 = 41;
  return sub_216779180(v6, (uint64_t)&v9, 1);
}

{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  char v10;
  char v11;

  char v10 = 40;
  float64x2_t v3 = sub_216779180(a1, (uint64_t)&v10, 1);
  char v4 = pxrInternal__aapl__pxrReserved__::operator<<(v3, *a2);
  char v5 = sub_216779180(v4, (uint64_t)", ", 2);
  uint64_t v6 = pxrInternal__aapl__pxrReserved__::operator<<(v5, a2[1]);
  uint64_t v7 = sub_216779180(v6, (uint64_t)", ", 2);
  uint64_t v8 = pxrInternal__aapl__pxrReserved__::operator<<(v7, a2[2]);
  double v11 = 41;
  return sub_216779180(v8, (uint64_t)&v11, 1);
}

{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  char v12;
  char v13;

  char v12 = 40;
  float64x2_t v3 = sub_216779180(a1, (uint64_t)&v12, 1);
  char v4 = pxrInternal__aapl__pxrReserved__::operator<<(v3, *a2);
  char v5 = sub_216779180(v4, (uint64_t)", ", 2);
  uint64_t v6 = pxrInternal__aapl__pxrReserved__::operator<<(v5, a2[1]);
  uint64_t v7 = sub_216779180(v6, (uint64_t)", ", 2);
  uint64_t v8 = pxrInternal__aapl__pxrReserved__::operator<<(v7, a2[2]);
  int v9 = sub_216779180(v8, (uint64_t)", ", 2);
  char v10 = pxrInternal__aapl__pxrReserved__::operator<<(v9, a2[3]);
  long long v13 = 41;
  return sub_216779180(v10, (uint64_t)&v13, 1);
}

float64x2_t pxrInternal__aapl__pxrReserved__::GfMatrix2f::GfMatrix2f(float32x4_t *this, __n128 *a2)
{
  float64x2_t result = (float64x2_t)a2[1];
  *this = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)a2), result);
  return result;
}

{
  float64x2_t result;

  float64x2_t result = (float64x2_t)a2[1];
  *this = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)a2), result);
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix2f::GfMatrix2f(long long *a1, uint64_t *a2)
{
  uint64_t v2 = 0;
  uint64_t v15 = *MEMORY[0x263EF8340];
  long long v14 = xmmword_217452FC0;
  uint64_t v3 = *a2;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  char v5 = 1;
  do
  {
    if (v2 == v4) {
      break;
    }
    char v6 = v5;
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(v3 + 24 * v2);
    uint64_t v9 = (*(void *)(v3 + 24 * v2 + 8) - v8) >> 3;
    char v10 = 1;
    do
    {
      if (v7 == v9) {
        break;
      }
      char v11 = v10;
      char v10 = 0;
      float v12 = *(double *)(v8 + 8 * v7);
      *((float *)&v14 + 2 * v2 + v7) = v12;
      uint64_t v7 = 1;
    }
    while ((v11 & 1) != 0);
    char v5 = 0;
    uint64_t v2 = 1;
  }
  while ((v6 & 1) != 0);
  double result = *(double *)&v14;
  *a1 = v14;
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  double result;
  long long v13;
  uint64_t v14;

  uint64_t v2 = 0;
  long long v14 = *MEMORY[0x263EF8340];
  long long v13 = xmmword_217452FC0;
  uint64_t v3 = *a2;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  char v5 = 1;
  do
  {
    if (v2 == v4) {
      break;
    }
    char v6 = v5;
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(v3 + 24 * v2);
    uint64_t v9 = (*(void *)(v3 + 24 * v2 + 8) - v8) >> 2;
    char v10 = 1;
    do
    {
      if (v7 == v9) {
        break;
      }
      char v11 = v10;
      char v10 = 0;
      *((_DWORD *)&v13 + 2 * v2 + v7) = *(_DWORD *)(v8 + 4 * v7);
      uint64_t v7 = 1;
    }
    while ((v11 & 1) != 0);
    char v5 = 0;
    uint64_t v2 = 1;
  }
  while ((v6 & 1) != 0);
  double result = *(double *)&v13;
  *a1 = v13;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix2f::SetDiagonal(uint64_t this, float a2)
{
  *(float *)this = a2;
  *(_DWORD *)(this + 4) = 0;
  *(_DWORD *)(this + 8) = 0;
  *(float *)(this + 12) = a2;
  return this;
}

float pxrInternal__aapl__pxrReserved__::GfMatrix2f::SetDiagonal(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  float result = *(float *)(a2 + 4);
  *(float *)(a1 + 12) = result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix2f::Get(pxrInternal__aapl__pxrReserved__::GfMatrix2f *this, float (*a2)[2])
{
  (*a2)[0] = *(float *)this;
  (*a2)[1] = *((float *)this + 1);
  (*a2)[2] = *((float *)this + 2);
  (*a2)[3] = *((float *)this + 3);
  return (uint64_t)*a2;
}

BOOL pxrInternal__aapl__pxrReserved__::GfMatrix2f::operator==(float *a1, double *a2)
{
  return *a2 == *a1 && a2[1] == a1[1] && a2[2] == a1[2] && a2[3] == a1[3];
}

BOOL pxrInternal__aapl__pxrReserved__::GfMatrix2f::operator==(float *a1, float *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3];
}

float pxrInternal__aapl__pxrReserved__::GfMatrix2f::GetTranspose(pxrInternal__aapl__pxrReserved__::GfMatrix2f *this)
{
  return *(float *)this;
}

float pxrInternal__aapl__pxrReserved__::GfMatrix2f::GetInverse(pxrInternal__aapl__pxrReserved__::GfMatrix2f *this, double *a2, double a3)
{
  float v3 = *((float *)this + 3);
  double v4 = (float)((float)(*(float *)this * v3) - (float)(*((float *)this + 1) * *((float *)this + 2)));
  if (a2) {
    *a2 = v4;
  }
  if (fabs(v4) <= a3) {
    return 3.4028e38;
  }
  else {
    return 1.0 / v4 * v3;
  }
}

double pxrInternal__aapl__pxrReserved__::GfMatrix2f::GetDeterminant(pxrInternal__aapl__pxrReserved__::GfMatrix2f *this)
{
  return (float)((float)(*(float *)this * *((float *)this + 3)) - (float)(*((float *)this + 1) * *((float *)this + 2)));
}

float32x4_t pxrInternal__aapl__pxrReserved__::GfMatrix2f::operator*=(float32x2_t *a1, double a2)
{
  float32x4_t result = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*a1), a2)), vmulq_n_f64(vcvt_hight_f64_f32(*(float32x4_t *)a1->f32), a2));
  *(float32x4_t *)a1->f32 = result;
  return result;
}

float pxrInternal__aapl__pxrReserved__::GfMatrix2f::operator+=(float *a1, float *a2)
{
  float v2 = a1[1];
  *a1 = *a2 + *a1;
  a1[1] = a2[1] + v2;
  float v3 = a1[3];
  a1[2] = a2[2] + a1[2];
  float result = a2[3] + v3;
  a1[3] = result;
  return result;
}

float pxrInternal__aapl__pxrReserved__::GfMatrix2f::operator-=(float *a1, float *a2)
{
  float v2 = a1[1];
  *a1 = *a1 - *a2;
  a1[1] = v2 - a2[1];
  float v3 = a1[3];
  a1[2] = a1[2] - a2[2];
  float result = v3 - a2[3];
  a1[3] = result;
  return result;
}

float pxrInternal__aapl__pxrReserved__::operator-(float *a1)
{
  return -*a1;
}

float pxrInternal__aapl__pxrReserved__::GfMatrix2f::operator*=(float *a1, float *a2)
{
  float v2 = *a1;
  float v3 = a1[1];
  float v4 = a1[2];
  float v5 = a1[3];
  *a1 = (float)(*a1 * *a2) + (float)(v3 * a2[2]);
  a1[1] = (float)(v2 * a2[1]) + (float)(v3 * a2[3]);
  a1[2] = (float)(v4 * *a2) + (float)(v5 * a2[2]);
  float result = (float)(v4 * a2[1]) + (float)(v5 * a2[3]);
  a1[3] = result;
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::GfIsClose(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::GfMatrix2f *a2, const pxrInternal__aapl__pxrReserved__::GfMatrix2f *a3, double a4)
{
  uint64_t v4 = 0;
  char v5 = 1;
LABEL_2:
  uint64_t v6 = 0;
  char v7 = v5;
  char v8 = 1;
  uint64_t v9 = (char *)this + 4 * v4;
  char v10 = (char *)a2 + 4 * v4;
  while (1)
  {
    double v11 = vabdd_f64(*(float *)&v9[4 * v6], *(float *)&v10[4 * v6]);
    if (v11 >= a4) {
      return v11 < a4;
    }
    char v12 = v8;
    char v8 = 0;
    uint64_t v6 = 1;
    if ((v12 & 1) == 0)
    {
      char v5 = 0;
      uint64_t v4 = 2;
      if (v7) {
        goto LABEL_2;
      }
      return v11 < a4;
    }
  }
}

uint64_t *sub_21689D4C8()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  char v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C580, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74C580, (char *)0x10, 1, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_21689D588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

float32_t pxrInternal__aapl__pxrReserved__::GfMatrix3f::GfMatrix3f(float32x4_t *a1, float64x2_t *a2)
{
  float32x4_t v2 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(a2[2]), a2[3]);
  float32_t result = a2[4].f64[0];
  *a1 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*a2), a2[1]);
  a1[1] = v2;
  a1[2].f32[0] = result;
  return result;
}

float pxrInternal__aapl__pxrReserved__::GfMatrix3f::GfMatrix3f(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = 0;
  uint64_t v14 = *MEMORY[0x263EF8340];
  long long v12 = 0x3F800000uLL;
  *(void *)&v13[4] = 0;
  *(void *)&v13[12] = 0x3F80000000000000;
  *(_DWORD *)long long v13 = 1065353216;
  uint64_t v3 = *a2;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  char v5 = &v12;
  do
  {
    if (v2 == v4) {
      break;
    }
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(v3 + 24 * v2);
    uint64_t v8 = (*(void *)(v3 + 24 * v2 + 8) - v7) >> 3;
    do
    {
      if (v8 == v6) {
        break;
      }
      float v9 = *(double *)(v7 + 8 * v6);
      *((float *)v5 + v6++) = v9;
    }
    while (v6 != 3);
    ++v2;
    char v5 = (long long *)((char *)v5 + 12);
  }
  while (v2 != 3);
  long long v10 = *(_OWORD *)v13;
  *(_OWORD *)a1 = v12;
  *(_OWORD *)(a1 + 16) = v10;
  float result = *(float *)&v13[16];
  *(_DWORD *)(a1 + 32) = *(_DWORD *)&v13[16];
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  long long *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  long long v9;
  float result;
  long long v11;
  unsigned char v12[20];
  uint64_t v13;

  uint64_t v2 = 0;
  long long v13 = *MEMORY[0x263EF8340];
  double v11 = 0x3F800000uLL;
  *(void *)&v12[4] = 0;
  *(void *)&v12[12] = 0x3F80000000000000;
  *(_DWORD *)long long v12 = 1065353216;
  uint64_t v3 = *a2;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  char v5 = &v11;
  do
  {
    if (v2 == v4) {
      break;
    }
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(v3 + 24 * v2);
    uint64_t v8 = (*(void *)(v3 + 24 * v2 + 8) - v7) >> 2;
    do
    {
      if (v8 == v6) {
        break;
      }
      *((_DWORD *)v5 + v6) = *(_DWORD *)(v7 + 4 * v6);
      ++v6;
    }
    while (v6 != 3);
    ++v2;
    char v5 = (long long *)((char *)v5 + 12);
  }
  while (v2 != 3);
  float v9 = *(_OWORD *)v12;
  *(_OWORD *)a1 = v11;
  *(_OWORD *)(a1 + 16) = v9;
  float result = *(float *)&v12[16];
  *(_DWORD *)(a1 + 32) = *(_DWORD *)&v12[16];
  return result;
}

pxrInternal__aapl__pxrReserved__::GfMatrix3f *pxrInternal__aapl__pxrReserved__::GfMatrix3f::SetRotate(pxrInternal__aapl__pxrReserved__::GfMatrix3f *this, float64x2_t *a2)
{
  float64_t Quat = pxrInternal__aapl__pxrReserved__::GfRotation::GetQuat(a2);
  *(float *)&double v4 = v4;
  *(float *)&float64_t Quat = Quat;
  *(float *)&double v5 = v5;
  v8[0] = *(float *)&Quat;
  v8[1] = *(float *)&v5;
  *(float *)&float64_t Quat = v6;
  v8[2] = *(float *)&Quat;
  pxrInternal__aapl__pxrReserved__::GfMatrix3f::_SetRotateFromQuat((uint64_t)this, v8, *(float *)&v4);
  return this;
}

pxrInternal__aapl__pxrReserved__::GfMatrix3f *pxrInternal__aapl__pxrReserved__::GfMatrix3f::GfMatrix3f(pxrInternal__aapl__pxrReserved__::GfMatrix3f *this, const pxrInternal__aapl__pxrReserved__::GfQuatf *a2)
{
  return this;
}

{
  pxrInternal__aapl__pxrReserved__::GfMatrix3f::_SetRotateFromQuat((uint64_t)this, (float *)a2, *((float *)a2 + 3));
  return this;
}

pxrInternal__aapl__pxrReserved__::GfMatrix3f *pxrInternal__aapl__pxrReserved__::GfMatrix3f::SetRotate(pxrInternal__aapl__pxrReserved__::GfMatrix3f *this, const pxrInternal__aapl__pxrReserved__::GfQuatf *a2)
{
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix3f::SetDiagonal(uint64_t this, float a2)
{
  *(float *)this = a2;
  *(void *)(this + 4) = 0;
  *(_DWORD *)(this + 12) = 0;
  *(float *)(this + 16) = a2;
  *(void *)(this + 20) = 0;
  *(_DWORD *)(this + 28) = 0;
  *(float *)(this + 32) = a2;
  return this;
}

float pxrInternal__aapl__pxrReserved__::GfMatrix3f::SetDiagonal(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 28) = 0;
  float result = *(float *)(a2 + 8);
  *(float *)(a1 + 32) = result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix3f::Get(pxrInternal__aapl__pxrReserved__::GfMatrix3f *this, float (*a2)[3])
{
  (*a2)[0] = *(float *)this;
  (*a2)[1] = *((float *)this + 1);
  (*a2)[2] = *((float *)this + 2);
  (*a2)[3] = *((float *)this + 3);
  (*a2)[4] = *((float *)this + 4);
  (*a2)[5] = *((float *)this + 5);
  (*a2)[6] = *((float *)this + 6);
  (*a2)[7] = *((float *)this + 7);
  (*a2)[8] = *((float *)this + 8);
  return (uint64_t)*a2;
}

BOOL pxrInternal__aapl__pxrReserved__::GfMatrix3f::operator==(float *a1, double *a2)
{
  return *a2 == *a1
      && a2[1] == a1[1]
      && a2[2] == a1[2]
      && a2[3] == a1[3]
      && a2[4] == a1[4]
      && a2[5] == a1[5]
      && a2[6] == a1[6]
      && a2[7] == a1[7]
      && a2[8] == a1[8];
}

BOOL pxrInternal__aapl__pxrReserved__::GfMatrix3f::operator==(float *a1, float *a2)
{
  return *a1 == *a2
      && a1[1] == a2[1]
      && a1[2] == a2[2]
      && a1[3] == a2[3]
      && a1[4] == a2[4]
      && a1[5] == a2[5]
      && a1[6] == a2[6]
      && a1[7] == a2[7]
      && a1[8] == a2[8];
}

float pxrInternal__aapl__pxrReserved__::GfMatrix3f::GetTranspose@<S0>(pxrInternal__aapl__pxrReserved__::GfMatrix3f *this@<X0>, uint64_t a2@<X8>)
{
  int v2 = *((_DWORD *)this + 1);
  int v3 = *((_DWORD *)this + 2);
  int v4 = *((_DWORD *)this + 3);
  *(_DWORD *)a2 = *(_DWORD *)this;
  *(_DWORD *)(a2 + 4) = v4;
  int v5 = *((_DWORD *)this + 4);
  int v6 = *((_DWORD *)this + 5);
  *(_DWORD *)(a2 + 24) = v3;
  *(_DWORD *)(a2 + 28) = v6;
  int v7 = *((_DWORD *)this + 7);
  *(_DWORD *)(a2 + 8) = *((_DWORD *)this + 6);
  *(_DWORD *)(a2 + 12) = v2;
  *(_DWORD *)(a2 + 16) = v5;
  *(_DWORD *)(a2 + 20) = v7;
  float result = *((float *)this + 8);
  *(float *)(a2 + 32) = result;
  return result;
}

float *pxrInternal__aapl__pxrReserved__::GfMatrix3f::GetInverse@<X0>(float *this@<X0>, double *a2@<X1>, double a3@<D0>, float *a4@<X8>)
{
  double v4 = *this;
  double v5 = this[1];
  double v6 = this[2];
  double v7 = this[3];
  double v8 = this[4];
  double v9 = this[5];
  double v10 = this[6];
  double v11 = this[7];
  double v12 = this[8];
  double v13 = v6 * v7;
  double v14 = v4 * v9;
  double v15 = v5 * v7;
  double v16 = v4 * v8;
  double v17 = v4 * v8 * v12 + v5 * v9 * v10 - v6 * v8 * v10 + v6 * v7 * v11 - v4 * v9 * v11 - v5 * v7 * v12;
  if (a2) {
    *a2 = v17;
  }
  if (fabs(v17) <= a3)
  {
    float v20 = 0.0;
    float v19 = 3.4028e38;
    float v21 = 0.0;
    float v22 = 0.0;
    float v23 = 3.4028e38;
    float v24 = 0.0;
    float v25 = 0.0;
    float v26 = 0.0;
    float v27 = 3.4028e38;
  }
  else
  {
    double v18 = 1.0 / v17;
    float v19 = (v8 * v12 - v9 * v11) * (1.0 / v17);
    float v20 = (v6 * v11 - v5 * v12) * (1.0 / v17);
    float v21 = (v5 * v9 - v6 * v8) * v18;
    float v22 = (v9 * v10 - v7 * v12) * v18;
    float v23 = (v4 * v12 - v6 * v10) * v18;
    float v24 = (v13 - v14) * v18;
    float v25 = (v7 * v11 - v8 * v10) * v18;
    float v26 = (v5 * v10 - v4 * v11) * v18;
    float v27 = (v16 - v15) * v18;
  }
  *a4 = v19;
  a4[1] = v20;
  a4[2] = v21;
  a4[3] = v22;
  a4[4] = v23;
  a4[5] = v24;
  a4[6] = v25;
  a4[7] = v26;
  a4[8] = v27;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix3f::SetScale(uint64_t this, float a2)
{
  *(float *)this = a2;
  *(void *)(this + 4) = 0;
  *(_DWORD *)(this + 12) = 0;
  *(float *)(this + 16) = a2;
  *(void *)(this + 20) = 0;
  *(_DWORD *)(this + 28) = 0;
  *(float *)(this + 32) = a2;
  return this;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix3f::GetDeterminant(pxrInternal__aapl__pxrReserved__::GfMatrix3f *this)
{
  return (float)((float)((float)((float)((float)((float)((float)(*(float *)this * *((float *)this + 4))
                                                       * *((float *)this + 8))
                                               + (float)((float)(*((float *)this + 1) * *((float *)this + 5))
                                                       * *((float *)this + 6)))
                                       + (float)((float)(*((float *)this + 2) * *((float *)this + 3))
                                               * *((float *)this + 7)))
                               - (float)((float)(*(float *)this * *((float *)this + 5)) * *((float *)this + 7)))
                       - (float)(*((float *)this + 8) * (float)(*((float *)this + 1) * *((float *)this + 3))))
               - (float)(*((float *)this + 6) * (float)(*((float *)this + 4) * *((float *)this + 2))));
}

double pxrInternal__aapl__pxrReserved__::GfMatrix3f::GetHandedness(pxrInternal__aapl__pxrReserved__::GfMatrix3f *this)
{
  double Determinant = pxrInternal__aapl__pxrReserved__::GfMatrix3f::GetDeterminant(this);
  BOOL v2 = Determinant < 0.0;
  BOOL v3 = Determinant <= 0.0;
  double result = 0.0;
  if (!v3) {
    double result = 1.0;
  }
  if (v2) {
    return -1.0;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix3f::Orthonormalize(pxrInternal__aapl__pxrReserved__::GfMatrix3f *this, int a2)
{
  float64_t v4 = *((float *)this + 2);
  float64x2_t v18 = vcvtq_f64_f32(*(float32x2_t *)this);
  float64_t v19 = v4;
  double v5 = *((float *)this + 5);
  *(float64x2_t *)double v17 = vcvtq_f64_f32(*(float32x2_t *)((char *)this + 12));
  *(double *)&v17[16] = v5;
  double v6 = *((float *)this + 8);
  float64x2_t v15 = vcvtq_f64_f32(*(float32x2_t *)((char *)this + 24));
  double v16 = v6;
  uint64_t v8 = pxrInternal__aapl__pxrReserved__::GfVec3d::OrthogonalizeBasis(&v18, v17, &v15, 1, 0.000001);
  v9.f64[0] = v19;
  v9.f64[1] = *(float64_t *)v17;
  float32x4_t v10 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v18), v9);
  float32x4_t v11 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)&v17[8]), v15);
  *(float32x4_t *)this = v10;
  *((float32x4_t *)this + 1) = v11;
  v11.f32[0] = v16;
  *((_DWORD *)this + 8) = v11.i32[0];
  if ((v8 & 1) == 0 && a2)
  {
    v13[0] = "gf/matrix3f.cpp";
    v13[1] = "Orthonormalize";
    v13[2] = 282;
    v13[3] = "BOOL pxrInternal__aapl__pxrReserved__::GfMatrix3f::Orthonormalize(BOOL)";
    char v14 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v13, (pxrInternal__aapl__pxrReserved__ *)"OrthogonalizeBasis did not converge, matrix may not be orthonormal.", v7);
  }
  return v8;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix3f::GetOrthonormalized@<X0>(pxrInternal__aapl__pxrReserved__::GfMatrix3f *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  long long v3 = *((_OWORD *)this + 1);
  *(_OWORD *)a3 = *(_OWORD *)this;
  *(_OWORD *)(a3 + 16) = v3;
  *(_DWORD *)(a3 + 32) = *((_DWORD *)this + 8);
  return pxrInternal__aapl__pxrReserved__::GfMatrix3f::Orthonormalize((pxrInternal__aapl__pxrReserved__::GfMatrix3f *)a3, a2);
}

float32_t pxrInternal__aapl__pxrReserved__::GfMatrix3f::operator*=(float32x2_t *a1, double a2)
{
  float32x4_t v2 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(a1[2]), a2)), vmulq_n_f64(vcvt_hight_f64_f32(*(float32x4_t *)a1[2].f32), a2));
  *(float32x4_t *)a1->f32 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*a1), a2)), vmulq_n_f64(vcvt_hight_f64_f32(*(float32x4_t *)a1->f32), a2));
  *(float32x4_t *)a1[2].f32 = v2;
  float32_t result = a1[4].f32[0] * a2;
  a1[4].f32[0] = result;
  return result;
}

float pxrInternal__aapl__pxrReserved__::GfMatrix3f::operator+=(float *a1, float *a2)
{
  float v2 = a1[1];
  *a1 = *a2 + *a1;
  a1[1] = a2[1] + v2;
  float v3 = a1[3];
  a1[2] = a2[2] + a1[2];
  a1[3] = a2[3] + v3;
  float v4 = a1[5];
  a1[4] = a2[4] + a1[4];
  a1[5] = a2[5] + v4;
  float v5 = a1[7];
  a1[6] = a2[6] + a1[6];
  a1[7] = a2[7] + v5;
  float result = a2[8] + a1[8];
  a1[8] = result;
  return result;
}

float pxrInternal__aapl__pxrReserved__::GfMatrix3f::operator-=(float *a1, float *a2)
{
  float v2 = a1[1];
  *a1 = *a1 - *a2;
  a1[1] = v2 - a2[1];
  float v3 = a1[3];
  a1[2] = a1[2] - a2[2];
  a1[3] = v3 - a2[3];
  float v4 = a1[5];
  a1[4] = a1[4] - a2[4];
  a1[5] = v4 - a2[5];
  float v5 = a1[7];
  a1[6] = a1[6] - a2[6];
  a1[7] = v5 - a2[7];
  float result = a1[8] - a2[8];
  a1[8] = result;
  return result;
}

float32_t pxrInternal__aapl__pxrReserved__::operator-@<S0>(float32x4_t *a1@<X0>, float32x4_t *a2@<X8>)
{
  float32_t result = -a1[2].f32[0];
  float32x4_t v3 = vnegq_f32(a1[1]);
  *a2 = vnegq_f32(*a1);
  a2[1] = v3;
  a2[2].f32[0] = result;
  return result;
}

float pxrInternal__aapl__pxrReserved__::GfMatrix3f::operator*=(float *a1, float *a2)
{
  float v2 = *a1;
  float v3 = a1[1];
  float v4 = a1[2];
  float v5 = a1[3];
  float v6 = a1[4];
  float v7 = a1[5];
  float v9 = a1[6];
  float v8 = a1[7];
  float v10 = a1[8];
  *a1 = (float)((float)(*a1 * *a2) + (float)(v3 * a2[3])) + (float)(v4 * a2[6]);
  a1[1] = (float)((float)(v2 * a2[1]) + (float)(v3 * a2[4])) + (float)(v4 * a2[7]);
  a1[2] = (float)((float)(v2 * a2[2]) + (float)(v3 * a2[5])) + (float)(v4 * a2[8]);
  a1[3] = (float)((float)(v5 * *a2) + (float)(v6 * a2[3])) + (float)(v7 * a2[6]);
  a1[4] = (float)((float)(v5 * a2[1]) + (float)(v6 * a2[4])) + (float)(v7 * a2[7]);
  a1[5] = (float)((float)(v5 * a2[2]) + (float)(v6 * a2[5])) + (float)(v7 * a2[8]);
  a1[6] = (float)((float)(v9 * *a2) + (float)(v8 * a2[3])) + (float)(v10 * a2[6]);
  a1[7] = (float)((float)(v9 * a2[1]) + (float)(v8 * a2[4])) + (float)(v10 * a2[7]);
  float result = (float)((float)(v9 * a2[2]) + (float)(v8 * a2[5])) + (float)(v10 * a2[8]);
  a1[8] = result;
  return result;
}

float pxrInternal__aapl__pxrReserved__::GfMatrix3f::_SetRotateFromQuat(uint64_t a1, float *a2, float a3)
{
  double v3 = (float)((float)(a2[1] * a2[1]) + (float)(a2[2] * a2[2]));
  float v4 = 1.0 - (v3 + v3);
  *(float *)a1 = v4;
  float v5 = (float)(*a2 * a2[1]) + (float)(a2[2] * a3);
  *(float *)(a1 + 4) = v5 + v5;
  float v6 = (float)(a2[2] * *a2) - (float)(a2[1] * a3);
  *(float *)(a1 + 8) = v6 + v6;
  float v7 = (float)(*a2 * a2[1]) - (float)(a2[2] * a3);
  *(float *)(a1 + 12) = v7 + v7;
  double v8 = (float)((float)(a2[2] * a2[2]) + (float)(*a2 * *a2));
  *(float *)&double v8 = 1.0 - (v8 + v8);
  *(_DWORD *)(a1 + 16) = LODWORD(v8);
  *(float *)&double v8 = (float)(a2[1] * a2[2]) + (float)(*a2 * a3);
  *(float *)(a1 + 20) = *(float *)&v8 + *(float *)&v8;
  *(float *)&double v8 = (float)(a2[2] * *a2) + (float)(a2[1] * a3);
  *(float *)(a1 + 24) = *(float *)&v8 + *(float *)&v8;
  float v9 = (float)(a2[1] * a2[2]) - (float)(*a2 * a3);
  *(float *)(a1 + 28) = v9 + v9;
  double v10 = (float)((float)(a2[1] * a2[1]) + (float)(*a2 * *a2));
  float result = 1.0 - (v10 + v10);
  *(float *)(a1 + 32) = result;
  return result;
}

float pxrInternal__aapl__pxrReserved__::GfMatrix3f::SetScale(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 28) = 0;
  float result = *(float *)(a2 + 8);
  *(float *)(a1 + 32) = result;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix3f::ExtractRotationQuaternion(pxrInternal__aapl__pxrReserved__::GfMatrix3f *this)
{
  float v1 = *((float *)this + 4);
  float v2 = *((float *)this + 8);
  if (*(float *)this > v1) {
    float v3 = *(float *)this;
  }
  else {
    float v3 = *((float *)this + 4);
  }
  if (v3 <= v2) {
    uint64_t v4 = 2;
  }
  else {
    uint64_t v4 = *(float *)this <= v1;
  }
  float v5 = (float)(*(float *)this + v1) + v2;
  float v6 = (char *)this + 12 * (int)v4;
  float v7 = *(float *)&v6[4 * v4];
  if (v5 <= v7)
  {
    if (v4 == 2) {
      int v9 = 0;
    }
    else {
      int v9 = v4 + 1;
    }
    double v10 = (char *)this + 12 * v9;
    unsigned int v11 = ((int)v4 + 2) % 3u;
    double v12 = (char *)this + 12 * v11;
    double v13 = sqrtf((float)((float)(v7 - *(float *)&v10[4 * v9]) - *(float *)&v12[4 * v11]) + 1.0) * 0.5;
    *((double *)&v17 + v4) = v13;
    double v14 = v13 * 4.0;
    *((double *)&v17 + v9) = (float)(*(float *)&v6[4 * v9] + *(float *)&v10[4 * v4]) / v14;
    *((double *)&v17 + v11) = (float)(*(float *)&v12[4 * v4] + *(float *)&v6[4 * v11]) / v14;
    double v8 = (float)(*(float *)&v10[4 * v11] - *(float *)&v12[4 * v9]) / v14;
  }
  else
  {
    double v8 = sqrtf(v5 + 1.0) * 0.5;
  }
  double v15 = 1.0;
  if (v8 <= 1.0) {
    double v15 = v8;
  }
  if (v8 >= -1.0) {
    return v15;
  }
  else {
    return -1.0;
  }
}

double pxrInternal__aapl__pxrReserved__::GfMatrix3f::ExtractRotation(pxrInternal__aapl__pxrReserved__::GfMatrix3f *this)
{
  double RotationQuaternion = pxrInternal__aapl__pxrReserved__::GfMatrix3f::ExtractRotationQuaternion(this);
  v7[0] = v2;
  v7[1] = v3;
  v7[2] = v4;
  *(double *)&v7[3] = RotationQuaternion;
  pxrInternal__aapl__pxrReserved__::GfRotation::SetQuat((pxrInternal__aapl__pxrReserved__::GfRotation *)&v6, (const pxrInternal__aapl__pxrReserved__::GfQuatd *)v7);
  return v6;
}

float pxrInternal__aapl__pxrReserved__::GfMatrix3f::DecomposeRotation(pxrInternal__aapl__pxrReserved__::GfMatrix3f *a1, float32x2_t *a2, float32x2_t *a3, float32x2_t *a4)
{
  v17.f64[0] = pxrInternal__aapl__pxrReserved__::GfMatrix3f::ExtractRotation(a1);
  v17.f64[1] = v7;
  uint64_t v18 = v8;
  uint64_t v19 = v9;
  float64x2_t v15 = vcvtq_f64_f32(*a2);
  double v16 = a2[1].f32[0];
  float64x2_t v13 = vcvtq_f64_f32(*a3);
  double v14 = a3[1].f32[0];
  float64x2_t v11 = vcvtq_f64_f32(*a4);
  double v12 = a4[1].f32[0];
  return pxrInternal__aapl__pxrReserved__::GfRotation::Decompose(&v17, v15.f64, v13.f64, v11.f64);
}

BOOL pxrInternal__aapl__pxrReserved__::GfIsClose(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::GfMatrix3f *a2, const pxrInternal__aapl__pxrReserved__::GfMatrix3f *a3, double a4)
{
  BOOL v4 = 0;
  unint64_t v5 = 0;
LABEL_2:
  uint64_t v6 = 0;
  while (vabdd_f64(*(float *)((char *)this + v6), *(float *)((char *)a2 + v6)) < a4)
  {
    v6 += 4;
    if (v6 == 12)
    {
      BOOL v4 = v5 > 1;
      a2 = (const pxrInternal__aapl__pxrReserved__::GfMatrix3f *)((char *)a2 + 12);
      this = (pxrInternal__aapl__pxrReserved__ *)((char *)this + 12);
      if (++v5 != 3) {
        goto LABEL_2;
      }
      return 1;
    }
  }
  return v4;
}

uint64_t *sub_21689E634()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C590, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74C590, (char *)0x24, 1, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_21689E6F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

float64_t pxrInternal__aapl__pxrReserved__::GfMatrix3d::GfMatrix3d(float64x2_t *this, float32x2_t *a2)
{
  float64_t result = a2[4].f32[0];
  float64x2_t v3 = vcvtq_f64_f32(a2[1]);
  *this = vcvtq_f64_f32(*a2);
  this[1] = v3;
  float64x2_t v4 = vcvtq_f64_f32(a2[3]);
  this[2] = vcvtq_f64_f32(a2[2]);
  this[3] = v4;
  this[4].f64[0] = result;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix3d::GfMatrix3d(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = 0;
  uint64_t v15 = *MEMORY[0x263EF8340];
  memset(&v13[8], 0, 24);
  memset(&v12[8], 0, 24);
  *(void *)double v12 = 0x3FF0000000000000;
  *(void *)float64x2_t v13 = 0x3FF0000000000000;
  double v14 = 1.0;
  uint64_t v3 = *a2;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  unint64_t v5 = v12;
  do
  {
    if (v2 == v4) {
      break;
    }
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(v3 + 24 * v2);
    uint64_t v8 = (*(void *)(v3 + 24 * v2 + 8) - v7) >> 3;
    do
    {
      if (v8 == v6) {
        break;
      }
      *(void *)&v5[8 * v6] = *(void *)(v7 + 8 * v6);
      ++v6;
    }
    while (v6 != 3);
    ++v2;
    v5 += 24;
  }
  while (v2 != 3);
  long long v9 = *(_OWORD *)&v12[16];
  *(_OWORD *)a1 = *(_OWORD *)v12;
  *(_OWORD *)(a1 + 16) = v9;
  long long v10 = *(_OWORD *)&v13[16];
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v13;
  *(_OWORD *)(a1 + 48) = v10;
  double result = v14;
  *(double *)(a1 + 64) = v14;
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  long long v9;
  long long v10;
  double result;
  unsigned char v12[32];
  unsigned char v13[32];
  double v14;
  uint64_t v15;

  uint64_t v2 = 0;
  uint64_t v15 = *MEMORY[0x263EF8340];
  memset(&v13[8], 0, 24);
  memset(&v12[8], 0, 24);
  *(void *)double v12 = 0x3FF0000000000000;
  *(void *)float64x2_t v13 = 0x3FF0000000000000;
  double v14 = 1.0;
  uint64_t v3 = *a2;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  unint64_t v5 = v12;
  do
  {
    if (v2 == v4) {
      break;
    }
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(v3 + 24 * v2);
    uint64_t v8 = (*(void *)(v3 + 24 * v2 + 8) - v7) >> 2;
    do
    {
      if (v8 == v6) {
        break;
      }
      *(double *)&v5[8 * v6] = *(float *)(v7 + 4 * v6);
      ++v6;
    }
    while (v6 != 3);
    ++v2;
    v5 += 24;
  }
  while (v2 != 3);
  long long v9 = *(_OWORD *)&v12[16];
  *(_OWORD *)a1 = *(_OWORD *)v12;
  *(_OWORD *)(a1 + 16) = v9;
  long long v10 = *(_OWORD *)&v13[16];
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v13;
  *(_OWORD *)(a1 + 48) = v10;
  double result = v14;
  *(double *)(a1 + 64) = v14;
  return result;
}

pxrInternal__aapl__pxrReserved__::GfMatrix3d *pxrInternal__aapl__pxrReserved__::GfMatrix3d::GfMatrix3d(pxrInternal__aapl__pxrReserved__::GfMatrix3d *this, float64x2_t *a2)
{
  v7[0] = pxrInternal__aapl__pxrReserved__::GfRotation::GetQuat(a2);
  v7[1] = v3;
  v7[2] = v4;
  pxrInternal__aapl__pxrReserved__::GfMatrix3d::_SetRotateFromQuat((double *)this, v7, v5);
  return this;
}

{
  double v3;
  double v4;
  double v5;
  double v7[3];

  v7[0] = pxrInternal__aapl__pxrReserved__::GfRotation::GetQuat(a2);
  v7[1] = v3;
  v7[2] = v4;
  pxrInternal__aapl__pxrReserved__::GfMatrix3d::_SetRotateFromQuat((double *)this, v7, v5);
  return this;
}

pxrInternal__aapl__pxrReserved__::GfMatrix3d *pxrInternal__aapl__pxrReserved__::GfMatrix3d::SetRotate(pxrInternal__aapl__pxrReserved__::GfMatrix3d *this, float64x2_t *a2)
{
  v7[0] = pxrInternal__aapl__pxrReserved__::GfRotation::GetQuat(a2);
  v7[1] = v3;
  v7[2] = v4;
  pxrInternal__aapl__pxrReserved__::GfMatrix3d::_SetRotateFromQuat((double *)this, v7, v5);
  return this;
}

pxrInternal__aapl__pxrReserved__::GfMatrix3d *pxrInternal__aapl__pxrReserved__::GfMatrix3d::GfMatrix3d(pxrInternal__aapl__pxrReserved__::GfMatrix3d *this, const pxrInternal__aapl__pxrReserved__::GfQuatd *a2)
{
  return this;
}

{
  pxrInternal__aapl__pxrReserved__::GfMatrix3d::_SetRotateFromQuat((double *)this, (double *)a2, *((double *)a2 + 3));
  return this;
}

pxrInternal__aapl__pxrReserved__::GfMatrix3d *pxrInternal__aapl__pxrReserved__::GfMatrix3d::SetRotate(pxrInternal__aapl__pxrReserved__::GfMatrix3d *this, const pxrInternal__aapl__pxrReserved__::GfQuatd *a2)
{
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix3d::SetDiagonal(uint64_t this, double a2)
{
  *(double *)this = a2;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(void *)(this + 8) = 0;
  *(double *)(this + 32) = a2;
  *(void *)(this + 48) = 0;
  *(void *)(this + 56) = 0;
  *(void *)(this + 40) = 0;
  *(double *)(this + 64) = a2;
  return this;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix3d::SetDiagonal(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 8);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = 0;
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 64) = result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix3d::Get(pxrInternal__aapl__pxrReserved__::GfMatrix3d *this, double (*a2)[3])
{
  (*a2)[0] = *(double *)this;
  (*a2)[1] = *((double *)this + 1);
  (*a2)[2] = *((double *)this + 2);
  (*a2)[3] = *((double *)this + 3);
  (*a2)[4] = *((double *)this + 4);
  (*a2)[5] = *((double *)this + 5);
  (*a2)[6] = *((double *)this + 6);
  (*a2)[7] = *((double *)this + 7);
  (*a2)[8] = *((double *)this + 8);
  return (uint64_t)*a2;
}

BOOL pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator==(double *a1, double *a2)
{
  return *a1 == *a2
      && a1[1] == a2[1]
      && a1[2] == a2[2]
      && a1[3] == a2[3]
      && a1[4] == a2[4]
      && a1[5] == a2[5]
      && a1[6] == a2[6]
      && a1[7] == a2[7]
      && a1[8] == a2[8];
}

BOOL pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator==(double *a1, float *a2)
{
  return *a1 == *a2
      && a1[1] == a2[1]
      && a1[2] == a2[2]
      && a1[3] == a2[3]
      && a1[4] == a2[4]
      && a1[5] == a2[5]
      && a1[6] == a2[6]
      && a1[7] == a2[7]
      && a1[8] == a2[8];
}

double pxrInternal__aapl__pxrReserved__::GfMatrix3d::GetTranspose@<D0>(pxrInternal__aapl__pxrReserved__::GfMatrix3d *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *((void *)this + 1);
  uint64_t v3 = *((void *)this + 2);
  uint64_t v4 = *((void *)this + 3);
  *(void *)a2 = *(void *)this;
  *(void *)(a2 + 8) = v4;
  uint64_t v5 = *((void *)this + 4);
  uint64_t v6 = *((void *)this + 5);
  *(void *)(a2 + 48) = v3;
  *(void *)(a2 + 56) = v6;
  uint64_t v7 = *((void *)this + 7);
  *(void *)(a2 + 16) = *((void *)this + 6);
  *(void *)(a2 + 24) = v2;
  *(void *)(a2 + 32) = v5;
  *(void *)(a2 + 40) = v7;
  double result = *((double *)this + 8);
  *(double *)(a2 + 64) = result;
  return result;
}

double *pxrInternal__aapl__pxrReserved__::GfMatrix3d::GetInverse@<X0>(double *this@<X0>, double *a2@<X1>, double a3@<D0>, uint64_t a4@<X8>)
{
  double v4 = *this;
  double v5 = this[1];
  double v7 = this[2];
  double v6 = this[3];
  double v8 = this[4];
  double v9 = this[5];
  double v10 = this[6];
  double v11 = this[7];
  double v12 = this[8];
  double v13 = v7 * v6;
  double v14 = *this * v9;
  double v15 = *this * v8;
  double v16 = v15 * v12 + v5 * v9 * v10 - v7 * v8 * v10 + v7 * v6 * v11 - v14 * v11 - v5 * v6 * v12;
  if (a2) {
    *a2 = v16;
  }
  if (fabs(v16) <= a3)
  {
    *(void *)(a4 + 8) = 0;
    *(void *)(a4 + 16) = 0;
    *(void *)(a4 + 24) = 0;
    *(void *)(a4 + 48) = 0;
    *(void *)(a4 + 56) = 0;
    *(void *)(a4 + 40) = 0;
    double v18 = 3.40282347e38;
    double v19 = 3.40282347e38;
    double v20 = 3.40282347e38;
  }
  else
  {
    double v17 = 1.0 / v16;
    double v18 = (v8 * v12 - v9 * v11) * v17;
    *(double *)(a4 + 8) = (v7 * v11 - v5 * v12) * v17;
    *(double *)(a4 + 16) = (v5 * v9 - v7 * v8) * v17;
    *(double *)(a4 + 24) = (v9 * v10 - v6 * v12) * v17;
    double v19 = (v4 * v12 - v7 * v10) * v17;
    *(double *)(a4 + 40) = (v13 - v14) * v17;
    *(double *)(a4 + 48) = (v6 * v11 - v8 * v10) * v17;
    *(double *)(a4 + 56) = (v5 * v10 - v4 * v11) * v17;
    double v20 = (v15 - v5 * v6) * v17;
  }
  *(double *)a4 = v18;
  *(double *)(a4 + 32) = v19;
  *(double *)(a4 + 64) = v20;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix3d::SetScale(uint64_t this, double a2)
{
  *(double *)this = a2;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(void *)(this + 8) = 0;
  *(double *)(this + 32) = a2;
  *(void *)(this + 48) = 0;
  *(void *)(this + 56) = 0;
  *(void *)(this + 40) = 0;
  *(double *)(this + 64) = a2;
  return this;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix3d::GetDeterminant(pxrInternal__aapl__pxrReserved__::GfMatrix3d *this)
{
  return *(double *)this * *((double *)this + 4) * *((double *)this + 8)
       + *((double *)this + 1) * *((double *)this + 5) * *((double *)this + 6)
       + *((double *)this + 2) * *((double *)this + 3) * *((double *)this + 7)
       - *(double *)this * *((double *)this + 5) * *((double *)this + 7)
       - *((double *)this + 8) * (*((double *)this + 1) * *((double *)this + 3))
       - *((double *)this + 6) * (*((double *)this + 4) * *((double *)this + 2));
}

double pxrInternal__aapl__pxrReserved__::GfMatrix3d::GetHandedness(pxrInternal__aapl__pxrReserved__::GfMatrix3d *this)
{
  double Determinant = pxrInternal__aapl__pxrReserved__::GfMatrix3d::GetDeterminant(this);
  BOOL v2 = Determinant < 0.0;
  BOOL v3 = Determinant <= 0.0;
  double result = 0.0;
  if (!v3) {
    double result = 1.0;
  }
  if (v2) {
    return -1.0;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix3d::Orthonormalize(pxrInternal__aapl__pxrReserved__::GfMatrix3d *this, int a2)
{
  uint64_t v4 = *((void *)this + 2);
  long long v16 = *(_OWORD *)this;
  uint64_t v17 = v4;
  uint64_t v5 = *((void *)this + 5);
  long long v14 = *(_OWORD *)((char *)this + 24);
  uint64_t v15 = v5;
  uint64_t v6 = *((void *)this + 8);
  long long v12 = *((_OWORD *)this + 3);
  uint64_t v13 = v6;
  uint64_t v8 = pxrInternal__aapl__pxrReserved__::GfVec3d::OrthogonalizeBasis(&v16, &v14, &v12, 1, 0.000001);
  *(_OWORD *)this = v16;
  *((void *)this + 2) = v17;
  *(_OWORD *)((char *)this + 24) = v14;
  *((void *)this + 5) = v15;
  *((_OWORD *)this + 3) = v12;
  *((void *)this + 8) = v13;
  if ((v8 & 1) == 0 && a2)
  {
    v10[0] = "gf/matrix3d.cpp";
    v10[1] = "Orthonormalize";
    v10[2] = 282;
    v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::GfMatrix3d::Orthonormalize(BOOL)";
    char v11 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v10, (pxrInternal__aapl__pxrReserved__ *)"OrthogonalizeBasis did not converge, matrix may not be orthonormal.", v7);
  }
  return v8;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix3d::GetOrthonormalized@<X0>(pxrInternal__aapl__pxrReserved__::GfMatrix3d *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  long long v3 = *((_OWORD *)this + 3);
  *(_OWORD *)(a3 + 32) = *((_OWORD *)this + 2);
  *(_OWORD *)(a3 + 48) = v3;
  *(void *)(a3 + 64) = *((void *)this + 8);
  long long v4 = *((_OWORD *)this + 1);
  *(_OWORD *)a3 = *(_OWORD *)this;
  *(_OWORD *)(a3 + 16) = v4;
  return pxrInternal__aapl__pxrReserved__::GfMatrix3d::Orthonormalize((pxrInternal__aapl__pxrReserved__::GfMatrix3d *)a3, a2);
}

float64_t pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator*=(float64x2_t *a1, double a2)
{
  float64x2_t v2 = vmulq_n_f64(a1[1], a2);
  *a1 = vmulq_n_f64(*a1, a2);
  a1[1] = v2;
  float64x2_t v3 = vmulq_n_f64(a1[3], a2);
  a1[2] = vmulq_n_f64(a1[2], a2);
  a1[3] = v3;
  float64_t result = a1[4].f64[0] * a2;
  a1[4].f64[0] = result;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator+=(double *a1, double *a2)
{
  double v2 = a1[1];
  *a1 = *a2 + *a1;
  a1[1] = a2[1] + v2;
  double v3 = a1[3];
  a1[2] = a2[2] + a1[2];
  a1[3] = a2[3] + v3;
  double v4 = a1[5];
  a1[4] = a2[4] + a1[4];
  a1[5] = a2[5] + v4;
  double v5 = a1[7];
  a1[6] = a2[6] + a1[6];
  a1[7] = a2[7] + v5;
  double result = a2[8] + a1[8];
  a1[8] = result;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator-=(double *a1, double *a2)
{
  double v2 = a1[1];
  *a1 = *a1 - *a2;
  a1[1] = v2 - a2[1];
  double v3 = a1[3];
  a1[2] = a1[2] - a2[2];
  a1[3] = v3 - a2[3];
  double v4 = a1[5];
  a1[4] = a1[4] - a2[4];
  a1[5] = v4 - a2[5];
  double v5 = a1[7];
  a1[6] = a1[6] - a2[6];
  a1[7] = v5 - a2[7];
  double result = a1[8] - a2[8];
  a1[8] = result;
  return result;
}

float64_t pxrInternal__aapl__pxrReserved__::operator-@<D0>(float64x2_t *a1@<X0>, float64x2_t *a2@<X8>)
{
  float64_t result = -a1[4].f64[0];
  float64x2_t v3 = vnegq_f64(a1[1]);
  *a2 = vnegq_f64(*a1);
  a2[1] = v3;
  float64x2_t v4 = vnegq_f64(a1[3]);
  a2[2] = vnegq_f64(a1[2]);
  a2[3] = v4;
  a2[4].f64[0] = result;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator*=(double *a1, double *a2)
{
  double v2 = *a1;
  double v3 = a1[1];
  double v4 = a1[2];
  double v5 = a1[3];
  double v6 = a1[4];
  double v7 = a1[5];
  double v9 = a1[6];
  double v8 = a1[7];
  double v10 = a1[8];
  *a1 = *a1 * *a2 + v3 * a2[3] + v4 * a2[6];
  a1[1] = v2 * a2[1] + v3 * a2[4] + v4 * a2[7];
  a1[2] = v2 * a2[2] + v3 * a2[5] + v4 * a2[8];
  a1[3] = v5 * *a2 + v6 * a2[3] + v7 * a2[6];
  a1[4] = v5 * a2[1] + v6 * a2[4] + v7 * a2[7];
  a1[5] = v5 * a2[2] + v6 * a2[5] + v7 * a2[8];
  a1[6] = v9 * *a2 + v8 * a2[3] + v10 * a2[6];
  a1[7] = v9 * a2[1] + v8 * a2[4] + v10 * a2[7];
  double result = v9 * a2[2] + v8 * a2[5] + v10 * a2[8];
  a1[8] = result;
  return result;
}

float32x2_t pxrInternal__aapl__pxrReserved__::operator*(float *a1, uint64_t a2)
{
  return vcvt_f32_f64(vaddq_f64(vaddq_f64(vmulq_n_f64(*(float64x2_t *)a2, *a1), vmulq_n_f64(*(float64x2_t *)(a2 + 24), a1[1])), vmulq_n_f64(*(float64x2_t *)(a2 + 48), a1[2])));
}

float pxrInternal__aapl__pxrReserved__::operator*(double *a1, float *a2)
{
  return *a1 * *a2 + a1[1] * a2[1] + a1[2] * a2[2];
}

{
  return *a1 * *a2 + a1[1] * a2[1] + a1[2] * a2[2] + a1[3] * a2[3];
}

double pxrInternal__aapl__pxrReserved__::GfMatrix3d::_SetRotateFromQuat(double *a1, double *a2, double a3)
{
  double v3 = a2[1] * a2[1] + a2[2] * a2[2];
  *a1 = 1.0 - (v3 + v3);
  double v4 = *a2 * a2[1] + a2[2] * a3;
  a1[1] = v4 + v4;
  double v5 = a2[2] * *a2 - a2[1] * a3;
  a1[2] = v5 + v5;
  double v6 = *a2 * a2[1] - a2[2] * a3;
  a1[3] = v6 + v6;
  double v7 = a2[2] * a2[2] + *a2 * *a2;
  a1[4] = 1.0 - (v7 + v7);
  double v8 = a2[1] * a2[2] + *a2 * a3;
  a1[5] = v8 + v8;
  double v9 = a2[2] * *a2 + a2[1] * a3;
  a1[6] = v9 + v9;
  double v10 = a2[1] * a2[2] - *a2 * a3;
  a1[7] = v10 + v10;
  double v11 = a2[1] * a2[1] + *a2 * *a2;
  double result = 1.0 - (v11 + v11);
  a1[8] = result;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix3d::SetScale(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 32) = *(void *)(a2 + 8);
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 40) = 0;
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 64) = result;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix3d::ExtractRotationQuaternion(pxrInternal__aapl__pxrReserved__::GfMatrix3d *this)
{
  double v1 = *((double *)this + 4);
  double v2 = *((double *)this + 8);
  if (*(double *)this > v1) {
    double v3 = *(double *)this;
  }
  else {
    double v3 = *((double *)this + 4);
  }
  if (v3 <= v2) {
    uint64_t v4 = 2;
  }
  else {
    uint64_t v4 = *(double *)this <= v1;
  }
  double v5 = *(double *)this + v1 + v2;
  double v6 = (char *)this + 24 * (int)v4;
  double v7 = *(double *)&v6[8 * v4];
  if (v5 <= v7)
  {
    if (v4 == 2) {
      int v9 = 0;
    }
    else {
      int v9 = v4 + 1;
    }
    unsigned int v10 = ((int)v4 + 2) % 3u;
    double v11 = (char *)this + 24 * v9;
    long long v12 = (char *)this + 24 * v10;
    double v13 = sqrt(v7 - *(double *)&v11[8 * v9] - *(double *)&v12[8 * v10] + 1.0) * 0.5;
    *((double *)&v17 + v4) = v13;
    double v14 = v13 * 4.0;
    *((double *)&v17 + v9) = (*(double *)&v6[8 * v9] + *(double *)&v11[8 * v4]) / v14;
    *((double *)&v17 + v10) = (*(double *)&v12[8 * v4] + *(double *)&v6[8 * v10]) / v14;
    double v8 = (*(double *)&v11[8 * v10] - *(double *)&v12[8 * v9]) / v14;
  }
  else
  {
    double v8 = sqrt(v5 + 1.0) * 0.5;
  }
  double v15 = 1.0;
  if (v8 <= 1.0) {
    double v15 = v8;
  }
  if (v8 >= -1.0) {
    return v15;
  }
  else {
    return -1.0;
  }
}

double pxrInternal__aapl__pxrReserved__::GfMatrix3d::ExtractRotation(pxrInternal__aapl__pxrReserved__::GfMatrix3d *this)
{
  double RotationQuaternion = pxrInternal__aapl__pxrReserved__::GfMatrix3d::ExtractRotationQuaternion(this);
  v7[0] = v2;
  v7[1] = v3;
  v7[2] = v4;
  *(double *)&double v7[3] = RotationQuaternion;
  pxrInternal__aapl__pxrReserved__::GfRotation::SetQuat((pxrInternal__aapl__pxrReserved__::GfRotation *)&v6, (const pxrInternal__aapl__pxrReserved__::GfQuatd *)v7);
  return v6;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix3d::DecomposeRotation(pxrInternal__aapl__pxrReserved__::GfMatrix3d *a1, double *a2, double *a3, double *a4)
{
  v11.f64[0] = pxrInternal__aapl__pxrReserved__::GfMatrix3d::ExtractRotation(a1);
  v11.f64[1] = v7;
  uint64_t v12 = v8;
  uint64_t v13 = v9;
  return pxrInternal__aapl__pxrReserved__::GfRotation::Decompose(&v11, a2, a3, a4);
}

BOOL pxrInternal__aapl__pxrReserved__::GfIsClose(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::GfMatrix3d *a2, const pxrInternal__aapl__pxrReserved__::GfMatrix3d *a3, double a4)
{
  BOOL v4 = 0;
  unint64_t v5 = 0;
LABEL_2:
  uint64_t v6 = 0;
  while (vabdd_f64(*(double *)((char *)this + v6), *(double *)((char *)a2 + v6)) < a4)
  {
    v6 += 8;
    if (v6 == 24)
    {
      BOOL v4 = v5 > 1;
      a2 = (const pxrInternal__aapl__pxrReserved__::GfMatrix3d *)((char *)a2 + 24);
      this = (pxrInternal__aapl__pxrReserved__ *)((char *)this + 24);
      if (++v5 != 3) {
        goto LABEL_2;
      }
      return 1;
    }
  }
  return v4;
}

uint64_t *sub_21689F7F4()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C5A0, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74C5A0, (char *)0x48, 1, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_21689F8B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

float64x2_t pxrInternal__aapl__pxrReserved__::GfMatrix4f::GfMatrix4f(float32x4_t *a1, float64x2_t *a2)
{
  float32x4_t v2 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(a2[2]), a2[3]);
  *a1 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*a2), a2[1]);
  a1[1] = v2;
  float64x2_t result = a2[7];
  float32x4_t v4 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(a2[6]), result);
  a1[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(a2[4]), a2[5]);
  a1[3] = v4;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix4f::GfMatrix4f(_OWORD *a1, uint64_t *a2)
{
  uint64_t v2 = 0;
  uint64_t v14 = *MEMORY[0x263EF8340];
  memset(&v13[20], 0, 40);
  *(_OWORD *)&void v13[4] = 0u;
  *(_DWORD *)uint64_t v13 = 1065353216;
  *(_DWORD *)&unsigned char v13[20] = 1065353216;
  *(_DWORD *)&v13[40] = 1065353216;
  *(_DWORD *)&v13[60] = 1065353216;
  uint64_t v3 = *a2;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  unint64_t v5 = v13;
  do
  {
    if (v2 == v4) {
      break;
    }
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(v3 + 24 * v2);
    uint64_t v8 = (*(void *)(v3 + 24 * v2 + 8) - v7) >> 3;
    do
    {
      if (v8 == v6) {
        break;
      }
      float v9 = *(double *)(v7 + 8 * v6);
      *(float *)&v5[4 * v6++] = v9;
    }
    while (v6 != 4);
    ++v2;
    v5 += 16;
  }
  while (v2 != 4);
  long long v10 = *(_OWORD *)&v13[16];
  *a1 = *(_OWORD *)v13;
  a1[1] = v10;
  double result = *(double *)&v13[32];
  long long v12 = *(_OWORD *)&v13[48];
  a1[2] = *(_OWORD *)&v13[32];
  a1[3] = v12;
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  long long v9;
  double result;
  long long v11;
  unsigned char v12[64];
  uint64_t v13;

  uint64_t v2 = 0;
  uint64_t v13 = *MEMORY[0x263EF8340];
  memset(&v12[20], 0, 40);
  *(_OWORD *)&v12[4] = 0u;
  *(_DWORD *)long long v12 = 1065353216;
  *(_DWORD *)&v12[20] = 1065353216;
  *(_DWORD *)&v12[40] = 1065353216;
  *(_DWORD *)&v12[60] = 1065353216;
  uint64_t v3 = *a2;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  unint64_t v5 = v12;
  do
  {
    if (v2 == v4) {
      break;
    }
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(v3 + 24 * v2);
    uint64_t v8 = (*(void *)(v3 + 24 * v2 + 8) - v7) >> 2;
    do
    {
      if (v8 == v6) {
        break;
      }
      *(_DWORD *)&v5[4 * v6] = *(_DWORD *)(v7 + 4 * v6);
      ++v6;
    }
    while (v6 != 4);
    ++v2;
    v5 += 16;
  }
  while (v2 != 4);
  float v9 = *(_OWORD *)&v12[16];
  *a1 = *(_OWORD *)v12;
  a1[1] = v9;
  double result = *(double *)&v12[32];
  float64x2_t v11 = *(_OWORD *)&v12[48];
  a1[2] = *(_OWORD *)&v12[32];
  a1[3] = v11;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix4f::GfMatrix4f(_OWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5 = 0;
  uint64_t v25 = *MEMORY[0x263EF8340];
  memset(&v24[20], 0, 40);
  *(_OWORD *)&v24[4] = 0u;
  *(_DWORD *)float v24 = 1065353216;
  *(_DWORD *)&v24[20] = 1065353216;
  *(_DWORD *)&v24[40] = 1065353216;
  *(_DWORD *)&v24[60] = 1065353216;
  uint64_t v6 = *a2;
  uint64_t v7 = (a2[1] - *a2) >> 3;
  do
  {
    if (v7 == v5) {
      break;
    }
    float v8 = *(double *)(v6 + 8 * v5);
    *(float *)&v24[4 * v5++] = v8;
  }
  while (v5 != 4);
  uint64_t v9 = 0;
  uint64_t v10 = *a3;
  uint64_t v11 = (a3[1] - *a3) >> 3;
  do
  {
    if (v11 == v9) {
      break;
    }
    float v12 = *(double *)(v10 + 8 * v9);
    *(float *)&v24[4 * v9++ + 16] = v12;
  }
  while (v9 != 4);
  uint64_t v13 = 0;
  uint64_t v14 = *a4;
  uint64_t v15 = (a4[1] - *a4) >> 3;
  do
  {
    if (v15 == v13) {
      break;
    }
    float v16 = *(double *)(v14 + 8 * v13);
    *(float *)&v24[4 * v13++ + 32] = v16;
  }
  while (v13 != 4);
  uint64_t v17 = 0;
  uint64_t v18 = *a5;
  uint64_t v19 = (a5[1] - *a5) >> 3;
  do
  {
    if (v19 == v17) {
      break;
    }
    float v20 = *(double *)(v18 + 8 * v17);
    *(float *)&v24[4 * v17++ + 48] = v20;
  }
  while (v17 != 4);
  long long v21 = *(_OWORD *)&v24[16];
  *a1 = *(_OWORD *)v24;
  a1[1] = v21;
  double result = *(double *)&v24[32];
  long long v23 = *(_OWORD *)&v24[48];
  a1[2] = *(_OWORD *)&v24[32];
  a1[3] = v23;
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  long long v17;
  double result;
  long long v19;
  unsigned char v20[64];
  uint64_t v21;

  uint64_t v5 = 0;
  long long v21 = *MEMORY[0x263EF8340];
  memset(&v20[20], 0, 40);
  *(_OWORD *)&v20[4] = 0u;
  *(_DWORD *)float v20 = 1065353216;
  *(_DWORD *)&v20[20] = 1065353216;
  *(_DWORD *)&v20[40] = 1065353216;
  *(_DWORD *)&v20[60] = 1065353216;
  uint64_t v6 = *a2;
  uint64_t v7 = (a2[1] - *a2) >> 2;
  do
  {
    if (v7 == v5) {
      break;
    }
    *(_DWORD *)&v20[4 * v5] = *(_DWORD *)(v6 + 4 * v5);
    ++v5;
  }
  while (v5 != 4);
  float v8 = 0;
  uint64_t v9 = *a3;
  uint64_t v10 = (a3[1] - *a3) >> 2;
  do
  {
    if (v10 == v8) {
      break;
    }
    *(_DWORD *)&v20[4 * v8 + 16] = *(_DWORD *)(v9 + 4 * v8);
    ++v8;
  }
  while (v8 != 4);
  uint64_t v11 = 0;
  float v12 = *a4;
  uint64_t v13 = (a4[1] - *a4) >> 2;
  do
  {
    if (v13 == v11) {
      break;
    }
    *(_DWORD *)&v20[4 * v11 + 32] = *(_DWORD *)(v12 + 4 * v11);
    ++v11;
  }
  while (v11 != 4);
  uint64_t v14 = 0;
  uint64_t v15 = *a5;
  float v16 = (a5[1] - *a5) >> 2;
  do
  {
    if (v16 == v14) {
      break;
    }
    *(_DWORD *)&v20[4 * v14 + 48] = *(_DWORD *)(v15 + 4 * v14);
    ++v14;
  }
  while (v14 != 4);
  uint64_t v17 = *(_OWORD *)&v20[16];
  *a1 = *(_OWORD *)v20;
  a1[1] = v17;
  double result = *(double *)&v20[32];
  uint64_t v19 = *(_OWORD *)&v20[48];
  a1[2] = *(_OWORD *)&v20[32];
  a1[3] = v19;
  return result;
}

float pxrInternal__aapl__pxrReserved__::GfMatrix4f::GfMatrix4f(pxrInternal__aapl__pxrReserved__::GfMatrix4f *a1, float64x2_t *a2, uint64_t a3)
{
  unint64_t v4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetRotateOnly(a1, a2);
  *((_DWORD *)v4 + 3) = 0;
  *((_DWORD *)v4 + 7) = 0;
  *(void *)((char *)v4 + 52) = 0;
  *(void *)((char *)v4 + 44) = 0;
  *((_DWORD *)v4 + 15) = 1065353216;
  *((_DWORD *)v4 + 12) = *(_DWORD *)a3;
  *((_DWORD *)v4 + 13) = *(_DWORD *)(a3 + 4);
  float result = *(float *)(a3 + 8);
  *((float *)v4 + 14) = result;
  *((_DWORD *)v4 + 15) = 1065353216;
  return result;
}

{
  pxrInternal__aapl__pxrReserved__::GfMatrix4f *v4;
  float result;

  unint64_t v4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetRotateOnly(a1, a2);
  *((_DWORD *)v4 + 3) = 0;
  *((_DWORD *)v4 + 7) = 0;
  *(void *)((char *)v4 + 52) = 0;
  *(void *)((char *)v4 + 44) = 0;
  *((_DWORD *)v4 + 15) = 1065353216;
  *((_DWORD *)v4 + 12) = *(_DWORD *)a3;
  *((_DWORD *)v4 + 13) = *(_DWORD *)(a3 + 4);
  float result = *(float *)(a3 + 8);
  *((float *)v4 + 14) = result;
  *((_DWORD *)v4 + 15) = 1065353216;
  return result;
}

float pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetTransform(pxrInternal__aapl__pxrReserved__::GfMatrix4f *a1, float64x2_t *a2, uint64_t a3)
{
  unint64_t v4 = pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetRotateOnly(a1, a2);
  *((_DWORD *)v4 + 3) = 0;
  *((_DWORD *)v4 + 7) = 0;
  *(void *)((char *)v4 + 52) = 0;
  *(void *)((char *)v4 + 44) = 0;
  *((_DWORD *)v4 + 15) = 1065353216;
  *((_DWORD *)v4 + 12) = *(_DWORD *)a3;
  *((_DWORD *)v4 + 13) = *(_DWORD *)(a3 + 4);
  float result = *(float *)(a3 + 8);
  *((float *)v4 + 14) = result;
  *((_DWORD *)v4 + 15) = 1065353216;
  return result;
}

float pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetTransform(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  *(_DWORD *)a1 = *a2;
  *(_DWORD *)(a1 + 4) = a2[1];
  *(_DWORD *)(a1 + 8) = a2[2];
  *(_DWORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 16) = a2[3];
  *(_DWORD *)(a1 + 20) = a2[4];
  *(_DWORD *)(a1 + 24) = a2[5];
  *(_DWORD *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 32) = a2[6];
  *(_DWORD *)(a1 + 36) = a2[7];
  *(_DWORD *)(a1 + 40) = a2[8];
  *(void *)(a1 + 52) = 0;
  *(void *)(a1 + 44) = 0;
  *(_DWORD *)(a1 + 60) = 1065353216;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)a3;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a3 + 4);
  float result = *(float *)(a3 + 8);
  *(float *)(a1 + 56) = result;
  *(_DWORD *)(a1 + 60) = 1065353216;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetDiagonal(uint64_t this, float a2)
{
  *(float *)this = a2;
  *(void *)(this + 12) = 0;
  *(void *)(this + 4) = 0;
  *(float *)(this + 20) = a2;
  *(void *)(this + 24) = 0;
  *(void *)(this + 32) = 0;
  *(float *)(this + 40) = a2;
  *(void *)(this + 52) = 0;
  *(void *)(this + 44) = 0;
  *(float *)(this + 60) = a2;
  return this;
}

float pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetDiagonal(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 12) = 0;
  *(void *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 52) = 0;
  *(void *)(a1 + 44) = 0;
  float result = *(float *)(a2 + 12);
  *(float *)(a1 + 60) = result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4f::Get(pxrInternal__aapl__pxrReserved__::GfMatrix4f *this, float (*a2)[4])
{
  (*a2)[0] = *(float *)this;
  (*a2)[1] = *((float *)this + 1);
  (*a2)[2] = *((float *)this + 2);
  (*a2)[3] = *((float *)this + 3);
  (*a2)[4] = *((float *)this + 4);
  (*a2)[5] = *((float *)this + 5);
  (*a2)[6] = *((float *)this + 6);
  (*a2)[7] = *((float *)this + 7);
  (*a2)[8] = *((float *)this + 8);
  (*a2)[9] = *((float *)this + 9);
  (*a2)[10] = *((float *)this + 10);
  (*a2)[11] = *((float *)this + 11);
  (*a2)[12] = *((float *)this + 12);
  (*a2)[13] = *((float *)this + 13);
  (*a2)[14] = *((float *)this + 14);
  (*a2)[15] = *((float *)this + 15);
  return (uint64_t)*a2;
}

BOOL pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator==(float *a1, double *a2)
{
  return *a2 == *a1
      && a2[1] == a1[1]
      && a2[2] == a1[2]
      && a2[3] == a1[3]
      && a2[4] == a1[4]
      && a2[5] == a1[5]
      && a2[6] == a1[6]
      && a2[7] == a1[7]
      && a2[8] == a1[8]
      && a2[9] == a1[9]
      && a2[10] == a1[10]
      && a2[11] == a1[11]
      && a2[12] == a1[12]
      && a2[13] == a1[13]
      && a2[14] == a1[14]
      && a2[15] == a1[15];
}

BOOL pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator==(float *a1, float *a2)
{
  return *a1 == *a2
      && a1[1] == a2[1]
      && a1[2] == a2[2]
      && a1[3] == a2[3]
      && a1[4] == a2[4]
      && a1[5] == a2[5]
      && a1[6] == a2[6]
      && a1[7] == a2[7]
      && a1[8] == a2[8]
      && a1[9] == a2[9]
      && a1[10] == a2[10]
      && a1[11] == a2[11]
      && a1[12] == a2[12]
      && a1[13] == a2[13]
      && a1[14] == a2[14]
      && a1[15] == a2[15];
}

float pxrInternal__aapl__pxrReserved__::GfMatrix4f::GetTranspose@<S0>(pxrInternal__aapl__pxrReserved__::GfMatrix4f *this@<X0>, uint64_t a2@<X8>)
{
  int v2 = *((_DWORD *)this + 1);
  int v3 = *((_DWORD *)this + 4);
  int v4 = *((_DWORD *)this + 5);
  *(_DWORD *)a2 = *(_DWORD *)this;
  *(_DWORD *)(a2 + 4) = v3;
  int v5 = *((_DWORD *)this + 2);
  int v6 = *((_DWORD *)this + 3);
  *(_DWORD *)(a2 + 16) = v2;
  *(_DWORD *)(a2 + 20) = v4;
  int v7 = *((_DWORD *)this + 6);
  int v8 = *((_DWORD *)this + 7);
  *(_DWORD *)(a2 + 32) = v5;
  *(_DWORD *)(a2 + 36) = v7;
  *(_DWORD *)(a2 + 48) = v6;
  *(_DWORD *)(a2 + 52) = v8;
  int v9 = *((_DWORD *)this + 9);
  int v10 = *((_DWORD *)this + 12);
  int v11 = *((_DWORD *)this + 13);
  *(_DWORD *)(a2 + 8) = *((_DWORD *)this + 8);
  *(_DWORD *)(a2 + 12) = v10;
  float result = *((float *)this + 10);
  int v13 = *((_DWORD *)this + 11);
  *(_DWORD *)(a2 + 24) = v9;
  *(_DWORD *)(a2 + 28) = v11;
  int v14 = *((_DWORD *)this + 14);
  int v15 = *((_DWORD *)this + 15);
  *(float *)(a2 + 40) = result;
  *(_DWORD *)(a2 + 44) = v14;
  *(_DWORD *)(a2 + 56) = v13;
  *(_DWORD *)(a2 + 60) = v15;
  return result;
}

pxrInternal__aapl__pxrReserved__::GfMatrix4f *pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetRotate(pxrInternal__aapl__pxrReserved__::GfMatrix4f *this, float64x2_t *a2)
{
  float result = pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetRotateOnly(this, a2);
  *((_DWORD *)result + 3) = 0;
  *((_DWORD *)result + 7) = 0;
  *(void *)((char *)result + 52) = 0;
  *(void *)((char *)result + 44) = 0;
  *((_DWORD *)result + 15) = 1065353216;
  return result;
}

float pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetTranslateOnly(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 48) = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 4);
  float result = *(float *)(a2 + 8);
  *(float *)(a1 + 56) = result;
  *(_DWORD *)(a1 + 60) = 1065353216;
  return result;
}

float pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetRotate(pxrInternal__aapl__pxrReserved__::GfMatrix4f *this, const pxrInternal__aapl__pxrReserved__::GfMatrix3f *a2)
{
  *(_DWORD *)this = *(_DWORD *)a2;
  *((_DWORD *)this + 1) = *((_DWORD *)a2 + 1);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)this + 3) = 0;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 3);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 5);
  *((_DWORD *)this + 7) = 0;
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 6);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 7);
  float result = *((float *)a2 + 8);
  *((float *)this + 10) = result;
  *(void *)((char *)this + 52) = 0;
  *(void *)((char *)this + 44) = 0;
  *((_DWORD *)this + 15) = 1065353216;
  return result;
}

float *pxrInternal__aapl__pxrReserved__::GfMatrix4f::GetInverse@<X0>(float *this@<X0>, double *a2@<X1>, double a3@<D0>, uint64_t a4@<X8>)
{
  float v5 = *this;
  float v4 = this[1];
  float v7 = this[4];
  float v6 = this[5];
  float v9 = this[8];
  float v8 = this[9];
  float v11 = this[12];
  float v10 = this[13];
  float v13 = this[2];
  float v12 = this[3];
  float v15 = this[6];
  float v14 = this[7];
  float v17 = this[10];
  float v16 = this[11];
  float v19 = this[14];
  float v18 = this[15];
  double v20 = (float)((float)(v13 * v14) - (float)(v12 * v15));
  double v21 = (float)((float)(v13 * v16) - (float)(v12 * v17));
  double v22 = (float)((float)(v13 * v18) - (float)(v12 * v19));
  double v23 = (float)((float)(v15 * v16) - (float)(v14 * v17));
  double v24 = (float)((float)(v15 * v18) - (float)(v14 * v19));
  double v25 = (float)((float)(v17 * v18) - (float)(v16 * v19));
  float v26 = v6 * v21 - v8 * v20 - v4 * v23;
  float v27 = v10 * v20 + v4 * v24 - v6 * v22;
  float v28 = v8 * v22 - v10 * v21 - v4 * v25;
  float v29 = v10 * v23 + v6 * v25 - v8 * v24;
  double v30 = (float)((float)(*this * v29) + (float)((float)(v7 * v28) + (float)((float)(v11 * v26) + (float)(v9 * v27))));
  if (a2) {
    *a2 = v30;
  }
  if (fabs(v30) <= a3)
  {
    *(_DWORD *)a4 = 2139095039;
    *(void *)(a4 + 12) = 0;
    *(void *)(a4 + 4) = 0;
    *(void *)(a4 + 24) = 0;
    *(void *)(a4 + 32) = 0;
    *(void *)(a4 + 52) = 0;
    float v87 = 1.0;
    float v85 = 3.4028e38;
    float v86 = 3.4028e38;
    *(void *)(a4 + 44) = 0;
  }
  else
  {
    float v31 = (float)(v5 * v6) - (float)(v4 * v7);
    float v32 = v7 * v8;
    float v33 = (float)(v5 * v8) - (float)(v4 * v9);
    float v34 = v6 * v9;
    float v35 = (float)(v5 * v10) - (float)(v4 * v11);
    float v36 = (float)(v7 * v10) - (float)(v6 * v11);
    float v37 = (float)(v9 * v10) - (float)(v8 * v11);
    double v38 = v5;
    double v39 = v7;
    double v40 = v9;
    double v41 = v11;
    double v42 = v31;
    double v43 = v33;
    double v44 = v35;
    double v45 = (float)(v32 - v34);
    double v46 = v36;
    double v47 = v37;
    double v48 = v13;
    double v49 = v15;
    double v50 = v17;
    double v51 = v19;
    double v52 = v14;
    double v53 = v16;
    double v54 = v38 * v23 - v39 * v21;
    double v55 = v39 * v22 - v41 * v20;
    double v56 = v40 * v22;
    double v57 = v40 * v20;
    double v58 = v40 * v24;
    double v59 = v38 * v24;
    double v60 = v38 * v25 - v56;
    double v61 = v41 * v21;
    double v62 = v58 - v41 * v23;
    double v63 = v39 * v25;
    double v64 = v45 * v48 - v43 * v49;
    double v65 = v44 * v49 - v42 * v51;
    double v66 = v48 * v47 - v44 * v50;
    double v67 = v46 * v50 - v45 * v51;
    float v88 = v26;
    double v68 = v43 * v52 - v42 * v53;
    double v69 = v12;
    double v70 = v48 * v46;
    double v71 = v69 * v46;
    double v72 = v46 * v53;
    double v73 = v18;
    double v74 = v44 * v53 - v43 * v73;
    double v75 = v42 * v50;
    double v76 = v42 * v73;
    double v77 = v68 - v45 * v69;
    double v78 = 1.0 / v30;
    float v79 = v78 * v29;
    float v80 = v78 * v28;
    *(float *)a4 = v79;
    *(float *)(a4 + 4) = v80;
    float v81 = v62 - v63;
    float v82 = v78 * v81;
    *(float *)(a4 + 16) = v82;
    float v83 = v78 * v27;
    float v84 = v78 * v88;
    *(float *)(a4 + 8) = v83;
    *(float *)(a4 + 12) = v84;
    *(float *)&double v73 = (v47 * v52 - v72 + v45 * v73) * v78;
    *(float *)&double v69 = (v74 - v69 * v47) * v78;
    *(_DWORD *)(a4 + 32) = LODWORD(v73);
    *(_DWORD *)(a4 + 36) = LODWORD(v69);
    *(float *)&double v69 = v57 + v54;
    *(float *)&double v73 = v55 - v59;
    *(float *)&double v73 = v78 * *(float *)&v73;
    *(float *)&double v69 = v78 * *(float *)&v69;
    *(_DWORD *)(a4 + 24) = LODWORD(v73);
    *(_DWORD *)(a4 + 28) = LODWORD(v69);
    *(float *)&double v69 = (v67 - v47 * v49) * v78;
    *(float *)&double v77 = v77 * v78;
    *(_DWORD *)(a4 + 44) = LODWORD(v77);
    *(_DWORD *)(a4 + 48) = LODWORD(v69);
    *(float *)&double v77 = (v66 + v43 * v51) * v78;
    *(float *)&double v69 = (v65 - v70) * v78;
    *(_DWORD *)(a4 + 52) = LODWORD(v77);
    *(_DWORD *)(a4 + 56) = LODWORD(v69);
    *(float *)&double v77 = v61 + v60;
    float v85 = v78 * *(float *)&v77;
    float v86 = (v71 - v44 * v52 + v76) * v78;
    float v87 = (v64 + v75) * v78;
  }
  *(float *)(a4 + 20) = v85;
  *(float *)(a4 + 40) = v86;
  *(float *)(a4 + 60) = v87;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetScale(uint64_t this, float a2)
{
  *(float *)this = a2;
  *(void *)(this + 12) = 0;
  *(void *)(this + 4) = 0;
  *(float *)(this + 20) = a2;
  *(void *)(this + 24) = 0;
  *(void *)(this + 32) = 0;
  *(float *)(this + 40) = a2;
  *(void *)(this + 52) = 0;
  *(void *)(this + 44) = 0;
  *(_DWORD *)(this + 60) = 1065353216;
  return this;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix4f::GetDeterminant(pxrInternal__aapl__pxrReserved__::GfMatrix4f *this)
{
  float v1 = *((float *)this + 2);
  float v3 = *((float *)this + 4);
  float v2 = *((float *)this + 5);
  float v4 = *((float *)this + 8);
  float v5 = *((float *)this + 9);
  float v6 = *((float *)this + 14);
  float v7 = *((float *)this + 10);
  float v8 = *((float *)this + 12);
  float v9 = *((float *)this + 13);
  float v10 = *((float *)this + 6);
  float v11 = *((float *)this + 1);
  return *((float *)this + 15)
       * (float)((float)((float)((float)((float)((float)(v7 * (float)(v2 * *(float *)this))
                                               + (float)(v4 * (float)(v10 * v11)))
                                       + (float)(v5 * (float)(v3 * v1)))
                               - (float)(v5 * (float)(v10 * *(float *)this)))
                       - (float)(v7 * (float)(v3 * v11)))
               - (float)(v4 * (float)(v2 * v1)))
       + *((float *)this + 7)
       * (float)((float)((float)((float)((float)((float)(v6 * (float)(v5 * *(float *)this))
                                               + (float)(v8 * (float)(v7 * v11)))
                                       + (float)(v9 * (float)(v4 * v1)))
                               - (float)(v9 * (float)(v7 * *(float *)this)))
                       - (float)(v6 * (float)(v4 * v11)))
               - (float)(v8 * (float)(v5 * v1)))
       - *((float *)this + 3)
       * (float)((float)((float)((float)((float)((float)((float)(v3 * v5) * v6) + (float)((float)(v2 * v7) * v8))
                                       + (float)((float)(v10 * v4) * v9))
                               - (float)((float)(v3 * v7) * v9))
                       - (float)(v6 * (float)(v2 * v4)))
               - (float)(v8 * (float)(v5 * v10)))
       - *((float *)this + 11)
       * (float)((float)((float)((float)((float)((float)(v6 * (float)(v2 * *(float *)this))
                                               + (float)(v8 * (float)(v10 * v11)))
                                       + (float)(v9 * (float)(v3 * v1)))
                               - (float)(v9 * (float)(v10 * *(float *)this)))
                       - (float)(v6 * (float)(v3 * v11)))
               - (float)(v8 * (float)(v2 * v1)));
}

double pxrInternal__aapl__pxrReserved__::GfMatrix4f::_GetDeterminant3(pxrInternal__aapl__pxrReserved__::GfMatrix4f *this, int a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  float v7 = (char *)this + 16 * a2;
  float v8 = (char *)this + 16 * a3;
  float v9 = *(float *)&v8[4 * a6];
  float v10 = (char *)this + 16 * a4;
  float v11 = *(float *)&v10[4 * a5];
  return (float)((float)((float)((float)((float)((float)((float)(*(float *)&v7[4 * a5] * v9) * *(float *)&v10[4 * a7])
                                               + (float)((float)(*(float *)&v7[4 * a6] * *(float *)&v8[4 * a7]) * v11))
                                       + (float)((float)(*(float *)&v7[4 * a7] * *(float *)&v8[4 * a5])
                                               * *(float *)&v10[4 * a6]))
                               - (float)((float)(*(float *)&v7[4 * a5] * *(float *)&v8[4 * a7]) * *(float *)&v10[4 * a6]))
                       - (float)(*(float *)&v10[4 * a7] * (float)(*(float *)&v7[4 * a6] * *(float *)&v8[4 * a5])))
               - (float)(v11 * (float)(v9 * *(float *)&v7[4 * a7])));
}

double pxrInternal__aapl__pxrReserved__::GfMatrix4f::GetHandedness(pxrInternal__aapl__pxrReserved__::GfMatrix4f *this)
{
  double v1 = sub_2168A0B54((float *)this);
  BOOL v2 = v1 < 0.0;
  BOOL v3 = v1 <= 0.0;
  double result = 0.0;
  if (!v3) {
    double result = 1.0;
  }
  if (v2) {
    return -1.0;
  }
  return result;
}

double sub_2168A0B54(float *a1)
{
  return (float)((float)((float)((float)((float)((float)((float)(*a1 * a1[5]) * a1[10])
                                               + (float)((float)(a1[1] * a1[6]) * a1[8]))
                                       + (float)((float)(a1[2] * a1[4]) * a1[9]))
                               - (float)((float)(*a1 * a1[6]) * a1[9]))
                       - (float)(a1[10] * (float)(a1[1] * a1[4])))
               - (float)(a1[8] * (float)(a1[5] * a1[2])));
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4f::Orthonormalize(float32x2_t *this, int a2)
{
  double v4 = this[1].f32[0];
  float64x2_t v20 = vcvtq_f64_f32(*this);
  double v21 = v4;
  double v5 = this[3].f32[0];
  float64x2_t v18 = vcvtq_f64_f32(this[2]);
  double v19 = v5;
  double v6 = this[5].f32[0];
  float64x2_t v16 = vcvtq_f64_f32(this[4]);
  double v17 = v6;
  uint64_t v7 = pxrInternal__aapl__pxrReserved__::GfVec3d::OrthogonalizeBasis(&v20, &v18, &v16, 1, 0.000001);
  uint64_t v9 = v7;
  *this = vcvt_f32_f64(v20);
  float32_t v10 = v21;
  this[1].f32[0] = v10;
  this[2] = vcvt_f32_f64(v18);
  float32_t v11 = v19;
  this[3].f32[0] = v11;
  this[4] = vcvt_f32_f64(v16);
  v12.i32[1] = HIDWORD(v17);
  *(float *)v12.i32 = v17;
  this[5].i32[0] = v12.i32[0];
  v12.i32[0] = this[7].i32[1];
  if (*(float *)v12.i32 != 1.0 && fabsf(*(float *)v12.i32) >= 1.0e-10)
  {
    this[6] = vdiv_f32(this[6], (float32x2_t)vdup_lane_s32(v12, 0));
    this[7].f32[0] = this[7].f32[0] / *(float *)v12.i32;
    this[7].i32[1] = 1065353216;
  }
  if (((v7 | a2 ^ 1) & 1) == 0)
  {
    v14[0] = "gf/matrix4f.cpp";
    v14[1] = "Orthonormalize";
    v14[2] = 495;
    v14[3] = "BOOL pxrInternal__aapl__pxrReserved__::GfMatrix4f::Orthonormalize(BOOL)";
    char v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v14, (pxrInternal__aapl__pxrReserved__ *)"OrthogonalizeBasis did not converge, matrix may not be orthonormal.", v8);
  }
  return v9;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4f::GetOrthonormalized@<X0>(pxrInternal__aapl__pxrReserved__::GfMatrix4f *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  long long v3 = *((_OWORD *)this + 1);
  *(_OWORD *)a3 = *(_OWORD *)this;
  *(_OWORD *)(a3 + 16) = v3;
  long long v4 = *((_OWORD *)this + 3);
  *(_OWORD *)(a3 + 32) = *((_OWORD *)this + 2);
  *(_OWORD *)(a3 + 48) = v4;
  return pxrInternal__aapl__pxrReserved__::GfMatrix4f::Orthonormalize((float32x2_t *)a3, a2);
}

float32x4_t pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator*=(float32x2_t *a1, double a2)
{
  float32x4_t v2 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(a1[2]), a2)), vmulq_n_f64(vcvt_hight_f64_f32(*(float32x4_t *)a1[2].f32), a2));
  *(float32x4_t *)a1->f32 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*a1), a2)), vmulq_n_f64(vcvt_hight_f64_f32(*(float32x4_t *)a1->f32), a2));
  *(float32x4_t *)a1[2].f32 = v2;
  float32x4_t v3 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(a1[4]), a2)), vmulq_n_f64(vcvt_hight_f64_f32(*(float32x4_t *)a1[4].f32), a2));
  float32x4_t result = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(a1[6]), a2)), vmulq_n_f64(vcvt_hight_f64_f32(*(float32x4_t *)a1[6].f32), a2));
  *(float32x4_t *)a1[4].f32 = v3;
  *(float32x4_t *)a1[6].f32 = result;
  return result;
}

float pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator+=(float *a1, float *a2)
{
  float v2 = a1[1];
  *a1 = *a2 + *a1;
  a1[1] = a2[1] + v2;
  float v3 = a1[3];
  a1[2] = a2[2] + a1[2];
  a1[3] = a2[3] + v3;
  float v4 = a1[5];
  a1[4] = a2[4] + a1[4];
  a1[5] = a2[5] + v4;
  float v5 = a1[7];
  a1[6] = a2[6] + a1[6];
  a1[7] = a2[7] + v5;
  float v6 = a1[9];
  a1[8] = a2[8] + a1[8];
  a1[9] = a2[9] + v6;
  float v7 = a1[11];
  a1[10] = a2[10] + a1[10];
  a1[11] = a2[11] + v7;
  float v8 = a1[13];
  a1[12] = a2[12] + a1[12];
  a1[13] = a2[13] + v8;
  float v9 = a1[15];
  a1[14] = a2[14] + a1[14];
  float result = a2[15] + v9;
  a1[15] = result;
  return result;
}

float pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator-=(float *a1, float *a2)
{
  float v2 = a1[1];
  *a1 = *a1 - *a2;
  a1[1] = v2 - a2[1];
  float v3 = a1[3];
  a1[2] = a1[2] - a2[2];
  a1[3] = v3 - a2[3];
  float v4 = a1[5];
  a1[4] = a1[4] - a2[4];
  a1[5] = v4 - a2[5];
  float v5 = a1[7];
  a1[6] = a1[6] - a2[6];
  a1[7] = v5 - a2[7];
  float v6 = a1[9];
  a1[8] = a1[8] - a2[8];
  a1[9] = v6 - a2[9];
  float v7 = a1[11];
  a1[10] = a1[10] - a2[10];
  a1[11] = v7 - a2[11];
  float v8 = a1[13];
  a1[12] = a1[12] - a2[12];
  a1[13] = v8 - a2[13];
  float v9 = a1[15];
  a1[14] = a1[14] - a2[14];
  float result = v9 - a2[15];
  a1[15] = result;
  return result;
}

float32x4_t pxrInternal__aapl__pxrReserved__::operator-@<Q0>(float32x4_t *a1@<X0>, float32x4_t *a2@<X8>)
{
  float32x4_t v2 = vnegq_f32(a1[1]);
  *a2 = vnegq_f32(*a1);
  a2[1] = v2;
  float32x4_t result = vnegq_f32(a1[2]);
  float32x4_t v4 = vnegq_f32(a1[3]);
  a2[2] = result;
  a2[3] = v4;
  return result;
}

float pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator*=(float *a1, float *a2)
{
  float v2 = *a1;
  float v3 = a1[1];
  float v4 = a1[2];
  float v5 = a1[3];
  float v7 = a1[4];
  float v6 = a1[5];
  float v9 = a1[6];
  float v8 = a1[7];
  float v11 = a1[8];
  float v10 = a1[9];
  float v13 = a1[10];
  float v12 = a1[11];
  float v15 = a1[12];
  float v14 = a1[13];
  float v17 = a1[14];
  float v16 = a1[15];
  *a1 = (float)((float)((float)(*a1 * *a2) + (float)(v3 * a2[4])) + (float)(v4 * a2[8])) + (float)(v5 * a2[12]);
  a1[1] = (float)((float)((float)(v2 * a2[1]) + (float)(v3 * a2[5])) + (float)(v4 * a2[9])) + (float)(v5 * a2[13]);
  a1[2] = (float)((float)((float)(v2 * a2[2]) + (float)(v3 * a2[6])) + (float)(v4 * a2[10])) + (float)(v5 * a2[14]);
  a1[3] = (float)((float)((float)(v2 * a2[3]) + (float)(v3 * a2[7])) + (float)(v4 * a2[11])) + (float)(v5 * a2[15]);
  a1[4] = (float)((float)((float)(v7 * *a2) + (float)(v6 * a2[4])) + (float)(v9 * a2[8])) + (float)(v8 * a2[12]);
  a1[5] = (float)((float)((float)(v7 * a2[1]) + (float)(v6 * a2[5])) + (float)(v9 * a2[9])) + (float)(v8 * a2[13]);
  a1[6] = (float)((float)((float)(v7 * a2[2]) + (float)(v6 * a2[6])) + (float)(v9 * a2[10])) + (float)(v8 * a2[14]);
  a1[7] = (float)((float)((float)(v7 * a2[3]) + (float)(v6 * a2[7])) + (float)(v9 * a2[11])) + (float)(v8 * a2[15]);
  a1[8] = (float)((float)((float)(v11 * *a2) + (float)(v10 * a2[4])) + (float)(v13 * a2[8])) + (float)(v12 * a2[12]);
  a1[9] = (float)((float)((float)(v11 * a2[1]) + (float)(v10 * a2[5])) + (float)(v13 * a2[9])) + (float)(v12 * a2[13]);
  a1[10] = (float)((float)((float)(v11 * a2[2]) + (float)(v10 * a2[6])) + (float)(v13 * a2[10])) + (float)(v12 * a2[14]);
  a1[11] = (float)((float)((float)(v11 * a2[3]) + (float)(v10 * a2[7])) + (float)(v13 * a2[11])) + (float)(v12 * a2[15]);
  a1[12] = (float)((float)((float)(v15 * *a2) + (float)(v14 * a2[4])) + (float)(v17 * a2[8])) + (float)(v16 * a2[12]);
  a1[13] = (float)((float)((float)(v15 * a2[1]) + (float)(v14 * a2[5])) + (float)(v17 * a2[9])) + (float)(v16 * a2[13]);
  a1[14] = (float)((float)((float)(v15 * a2[2]) + (float)(v14 * a2[6])) + (float)(v17 * a2[10])) + (float)(v16 * a2[14]);
  float result = (float)((float)((float)(v15 * a2[3]) + (float)(v14 * a2[7])) + (float)(v17 * a2[11])) + (float)(v16 * a2[15]);
  a1[15] = result;
  return result;
}

float pxrInternal__aapl__pxrReserved__::GfMatrix4f::_SetRotateFromQuat(uint64_t a1, float *a2, float a3)
{
  double v3 = (float)((float)(a2[1] * a2[1]) + (float)(a2[2] * a2[2]));
  float v4 = 1.0 - (v3 + v3);
  *(float *)a1 = v4;
  float v5 = (float)(*a2 * a2[1]) + (float)(a2[2] * a3);
  *(float *)(a1 + 4) = v5 + v5;
  float v6 = (float)(a2[2] * *a2) - (float)(a2[1] * a3);
  *(float *)(a1 + 8) = v6 + v6;
  float v7 = (float)(*a2 * a2[1]) - (float)(a2[2] * a3);
  *(float *)(a1 + 16) = v7 + v7;
  double v8 = (float)((float)(a2[2] * a2[2]) + (float)(*a2 * *a2));
  *(float *)&double v8 = 1.0 - (v8 + v8);
  *(_DWORD *)(a1 + 20) = LODWORD(v8);
  *(float *)&double v8 = (float)(a2[1] * a2[2]) + (float)(*a2 * a3);
  *(float *)(a1 + 24) = *(float *)&v8 + *(float *)&v8;
  *(float *)&double v8 = (float)(a2[2] * *a2) + (float)(a2[1] * a3);
  *(float *)(a1 + 32) = *(float *)&v8 + *(float *)&v8;
  float v9 = (float)(a2[1] * a2[2]) - (float)(*a2 * a3);
  *(float *)(a1 + 36) = v9 + v9;
  double v10 = (float)((float)(a2[1] * a2[1]) + (float)(*a2 * *a2));
  float result = 1.0 - (v10 + v10);
  *(float *)(a1 + 40) = result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetRotate(uint64_t a1, float *a2)
{
  *(_DWORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 28) = 0;
  *(void *)(a1 + 52) = 0;
  *(void *)(a1 + 44) = 0;
  *(_DWORD *)(a1 + 60) = 1065353216;
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetRotateOnly(uint64_t a1, float *a2)
{
  return a1;
}

pxrInternal__aapl__pxrReserved__::GfMatrix4f *pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetRotateOnly(pxrInternal__aapl__pxrReserved__::GfMatrix4f *this, float64x2_t *a2)
{
  float64_t Quat = pxrInternal__aapl__pxrReserved__::GfRotation::GetQuat(a2);
  *(float *)&double v4 = v4;
  *(float *)&float64_t Quat = Quat;
  *(float *)&double v5 = v5;
  v8[0] = *(float *)&Quat;
  v8[1] = *(float *)&v5;
  *(float *)&float64_t Quat = v6;
  v8[2] = *(float *)&Quat;
  pxrInternal__aapl__pxrReserved__::GfMatrix4f::_SetRotateFromQuat((uint64_t)this, v8, *(float *)&v4);
  return this;
}

float pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetRotateOnly(pxrInternal__aapl__pxrReserved__::GfMatrix4f *this, const pxrInternal__aapl__pxrReserved__::GfMatrix3f *a2)
{
  *(_DWORD *)this = *(_DWORD *)a2;
  *((_DWORD *)this + 1) = *((_DWORD *)a2 + 1);
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 3);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 5);
  *((_DWORD *)this + 8) = *((_DWORD *)a2 + 6);
  *((_DWORD *)this + 9) = *((_DWORD *)a2 + 7);
  float result = *((float *)a2 + 8);
  *((float *)this + 10) = result;
  return result;
}

float pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetScale(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 12) = 0;
  *(void *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  float result = *(float *)(a2 + 8);
  *(float *)(a1 + 40) = result;
  *(void *)(a1 + 52) = 0;
  *(void *)(a1 + 44) = 0;
  *(_DWORD *)(a1 + 60) = 1065353216;
  return result;
}

float pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetTranslate(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = 1065353216;
  *(void *)(a1 + 12) = 0;
  *(void *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 20) = 1065353216;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 1065353216;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 4);
  float result = *(float *)(a2 + 8);
  *(float *)(a1 + 56) = result;
  *(_DWORD *)(a1 + 60) = 1065353216;
  return result;
}

float pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetLookAt(uint64_t a1, float *a2, float *a3, uint64_t a4)
{
  float v4 = *a3 - *a2;
  float v5 = a3[1] - a2[1];
  float v6 = a3[2] - a2[2];
  double v7 = 1.0 / fmaxf(sqrtf((float)((float)(v4 * v4) + (float)(v5 * v5)) + (float)(v6 * v6)), 1.0e-10);
  float v8 = v7 * v4;
  float v9 = v7 * v5;
  float v10 = v7 * v6;
  float v11 = *(float *)(a4 + 4);
  LODWORD(v7) = *(_DWORD *)(a4 + 8);
  float v12 = (float)(*(float *)&v7 * v9) - (float)(v11 * v10);
  *(float *)&double v7 = (float)(*(float *)a4 * v10) - (float)(*(float *)&v7 * v8);
  float v13 = (float)(v11 * v8) - (float)(*(float *)a4 * v9);
  double v14 = 1.0
      / fmaxf(sqrtf((float)(v13 * v13) + (float)((float)(v12 * v12) + (float)(*(float *)&v7 * *(float *)&v7))), 1.0e-10);
  float v15 = v14 * v12;
  *(float *)&double v7 = v14 * *(float *)&v7;
  *(float *)&double v14 = v14 * v13;
  float v16 = (float)(v10 * *(float *)&v7) - (float)(v9 * *(float *)&v14);
  float v17 = (float)(v8 * *(float *)&v14) - (float)(v10 * v15);
  float v18 = (float)(v9 * v15) - (float)(v8 * *(float *)&v7);
  *(float *)a1 = v15;
  *(_DWORD *)(a1 + 16) = LODWORD(v7);
  *(_DWORD *)(a1 + 32) = LODWORD(v14);
  *(float *)(a1 + 48) = -(float)((float)(a2[2] * *(float *)&v14)
                               + (float)((float)(*a2 * v15) + (float)(a2[1] * *(float *)&v7)));
  *(float *)(a1 + 4) = v16;
  *(float *)(a1 + 20) = v17;
  *(float *)(a1 + 36) = v18;
  *(float *)(a1 + 52) = -(float)((float)(a2[2] * v18) + (float)((float)(*a2 * v16) + (float)(a2[1] * v17)));
  *(float *)(a1 + 8) = -v8;
  *(float *)(a1 + 24) = -v9;
  *(float *)(a1 + 40) = -v10;
  float result = (float)((float)(*a2 * v8) + (float)(a2[1] * v9)) + (float)(a2[2] * v10);
  *(float *)(a1 + 56) = result;
  *(_DWORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 44) = 0;
  *(_DWORD *)(a1 + 60) = 1065353216;
  return result;
}

_OWORD *pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetLookAt(_OWORD *a1, float32x2_t *a2, double *a3)
{
  *(float *)&unsigned int v4 = -a2[1].f32[0];
  float32x2_t v5 = vneg_f32(*a2);
  v12.f64[0] = sub_216896F28(a3);
  v12.f64[1] = v6;
  uint64_t v13 = v7;
  uint64_t v14 = v8;
  pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetRotateOnly((pxrInternal__aapl__pxrReserved__::GfMatrix4f *)v18, &v12);
  v18[3] = 0.0;
  v18[7] = 0.0;
  uint64_t v20 = 0;
  uint64_t v19 = 0;
  int v21 = 1065353216;
  *(_DWORD *)float v15 = 1065353216;
  *(_OWORD *)&v15[4] = 0uLL;
  *(_DWORD *)&v15[20] = 1065353216;
  *(void *)&v15[24] = 0;
  *(void *)&long long v16 = 0;
  *((void *)&v16 + 1) = 1065353216;
  *(float32x2_t *)&long long v17 = v5;
  *((void *)&v17 + 1) = v4 | 0x3F80000000000000;
  pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator*=((float *)v15, v18);
  long long v9 = *(_OWORD *)&v15[16];
  *a1 = *(_OWORD *)v15;
  a1[1] = v9;
  long long v10 = v17;
  a1[2] = v16;
  a1[3] = v10;
  return a1;
}

BOOL pxrInternal__aapl__pxrReserved__::GfMatrix4f::Factor(uint64_t a1, float32x4_t *a2, uint64_t a3, float32x4_t *a4, uint64_t a5, uint64_t a6, float a7)
{
  uint64_t v11 = 0;
  uint64_t v73 = *MEMORY[0x263EF8340];
  *(_DWORD *)a6 = 1065353216;
  *(void *)(a6 + 12) = 0;
  *(void *)(a6 + 4) = 0;
  *(_DWORD *)(a6 + 20) = 1065353216;
  *(void *)(a6 + 24) = 0;
  *(void *)(a6 + 32) = 0;
  *(_DWORD *)(a6 + 40) = 1065353216;
  *(void *)(a6 + 52) = 0;
  *(_DWORD *)(a6 + 60) = 1065353216;
  float64x2_t v12 = (double *)&v63;
  *(void *)(a6 + 44) = 0;
  uint64_t v13 = a1 + 48;
  do
  {
    for (uint64_t i = 0; i != 3; ++i)
      v12[i] = *(float *)(a1 + 4 * i);
    *((void *)&v64[2 * v11] + 1) = 0;
    *((void *)&v65 + v11) = 0;
    *(_DWORD *)(a5 + 4 * v11) = *(_DWORD *)(v13 + 4 * v11);
    ++v11;
    v12 += 4;
    a1 += 16;
  }
  while (v11 != 3);
  *((void *)&v66 + 1) = 0x3FF0000000000000;
  double Determinant3 = pxrInternal__aapl__pxrReserved__::GfMatrix4d::_GetDeterminant3((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)&v63, 0, 1, 2, 0, 1, 2);
  if (Determinant3 >= 0.0) {
    double v16 = 1.0;
  }
  else {
    double v16 = -1.0;
  }
  double v17 = a7;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::GetTranspose((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)&v63, (uint64_t)&v56);
  v62[4] = v64[3];
  v62[5] = v64[4];
  v62[6] = v65;
  v62[7] = v66;
  v62[0] = v63;
  v62[1] = v64[0];
  v62[2] = v64[1];
  v62[3] = v64[2];
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=((double *)v62, v56.f64);
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::_Jacobi3((uint64_t)v62, v55, &v67);
  float64x2_t v56 = v67;
  float64x2_t v57 = (float64x2_t)v68;
  float64x2_t v58 = v69;
  float64x2_t v59 = (float64x2_t)v70;
  float64x2_t v60 = v71;
  *(void *)double v61 = v72;
  memset(&v61[8], 0, 32);
  *(void *)&v61[40] = 0x3FF0000000000000;
  float v18 = v54;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)v54, 1.0);
  for (uint64_t j = 0; j != 3; ++j)
  {
    double v20 = v55[j];
    double v21 = sqrt(v20);
    if (v20 >= v17) {
      double v22 = v21;
    }
    else {
      double v22 = v17;
    }
    float v23 = v16 * v22;
    *(float *)(a3 + 4 * j) = v23;
    *float v18 = 1.0 / v23;
    v18 += 5;
  }
  float64x2_t v34 = v60;
  float64x2_t v35 = *(float64x2_t *)v61;
  float64x2_t v36 = *(float64x2_t *)&v61[16];
  float64x2_t v37 = *(float64x2_t *)&v61[32];
  float64x2_t v30 = v56;
  float64x2_t v31 = v57;
  float64x2_t v32 = v58;
  float64x2_t v33 = v59;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(v30.f64, v54);
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::GetTranspose((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)&v56, (uint64_t)v29);
  float64x2_t v42 = v34;
  float64x2_t v43 = v35;
  float64x2_t v44 = v36;
  float64x2_t v45 = v37;
  float64x2_t v38 = v30;
  float64x2_t v39 = v31;
  float64x2_t v40 = v32;
  float64x2_t v41 = v33;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(v38.f64, v29);
  float64x2_t v50 = v42;
  float64x2_t v51 = v43;
  float64x2_t v52 = v44;
  float64x2_t v53 = v45;
  float64x2_t v46 = v38;
  float64x2_t v47 = v39;
  float64x2_t v48 = v40;
  float64x2_t v49 = v41;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(v46.f64, (double *)&v63);
  float32x4_t v24 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v48), v49);
  *a4 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v46), v47);
  a4[1] = v24;
  float32x4_t v25 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v52), v53);
  a4[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v50), v51);
  a4[3] = v25;
  float32x4_t v26 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v58), v59);
  *a2 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v56), v57);
  a2[1] = v26;
  float32x4_t v27 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)&v61[16]), *(float64x2_t *)&v61[32]);
  a2[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v60), *(float64x2_t *)v61);
  a2[3] = v27;
  return Determinant3 * v16 >= v17;
}

float *pxrInternal__aapl__pxrReserved__::GfMatrix4f::_Jacobi3(float *a1, double *a2, void *a3)
{
  unsigned int v3 = 0;
  double v4 = a1[5];
  double v5 = a1[10];
  *a2 = *a1;
  a2[1] = v4;
  a2[2] = v5;
  *a3 = 0x3FF0000000000000;
  a3[2] = 0;
  a3[3] = 0;
  a3[1] = 0;
  a3[4] = 0x3FF0000000000000;
  a3[5] = 0;
  a3[6] = 0;
  a3[7] = 0;
  a3[8] = 0x3FF0000000000000;
  long long v6 = *((_OWORD *)a1 + 1);
  long long v71 = *(_OWORD *)a1;
  v72[0] = v6;
  long long v7 = *((_OWORD *)a1 + 3);
  v72[1] = *((_OWORD *)a1 + 2);
  v72[2] = v7;
  long long v69 = *(_OWORD *)a2;
  uint64_t v70 = *((void *)a2 + 2);
  memset(v68, 0, sizeof(v68));
  do
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    double v10 = 0.0;
    LOBYTE(result) = 1;
    do
    {
      char v12 = (char)result;
      uint64_t v13 = (char *)&v71 + 4 * v9 + 4;
      uint64_t v14 = v8;
      do
      {
        double v10 = v10 + fabsf(*(float *)&v13[v14]);
        v14 += 4;
      }
      while (v14 != 8);
      float result = 0;
      v8 += 4;
      uint64_t v9 = 4;
    }
    while ((v12 & 1) != 0);
    if (v10 == 0.0) {
      break;
    }
    double v15 = 0.0;
    if (v3 <= 2) {
      double v15 = v10 * 0.2 / 9.0;
    }
    unint64_t v16 = 0;
    double v17 = a3;
    float v18 = a3 + 1;
    float result = (float *)v72 + 1;
    uint64_t v19 = (float *)&v71 + 1;
    uint64_t v20 = 1;
    do
    {
      unint64_t v21 = v16 + 1;
      if (v16 <= 1)
      {
        uint64_t v22 = 0;
        float v23 = v18;
        float32x4_t v24 = result;
        unint64_t v25 = v20;
        float32x4_t v26 = (float *)&v72[v16 - 1];
        do
        {
          float v27 = v26[v25];
          double v28 = fabsf(v27);
          double v29 = v28 * 100.0;
          if (v3 >= 4 && (double v30 = fabs(a2[v16]), v29 + v30 == v30) && (v31 = fabs(a2[v25]), v29 + v31 == v31))
          {
            v26[v25] = 0.0;
          }
          else if (v15 < v28)
          {
            double v32 = a2[v25];
            double v33 = a2[v16];
            double v34 = v32 - v33;
            double v35 = vabdd_f64(v32, v33);
            double v36 = v29 + v35;
            double v37 = v27;
            double v38 = v34 * 0.5 / v37;
            double v39 = 1.0 / (fabs(v38) + sqrt(v38 * v38 + 1.0));
            if (v38 >= 0.0) {
              double v40 = v39;
            }
            else {
              double v40 = -v39;
            }
            double v41 = v37 / v34;
            BOOL v42 = v36 == v35;
            double v43 = v37;
            if (v42) {
              double v44 = v41;
            }
            else {
              double v44 = v40;
            }
            double v45 = 1.0 / sqrt(v44 * v44 + 1.0);
            double v46 = v44 * v45;
            double v47 = v44 * v43;
            *(double *)&v68[v16] = *(double *)&v68[v16] - v47;
            *(double *)&v68[v25] = v47 + *(double *)&v68[v25];
            double v48 = v46 / (v45 + 1.0);
            a2[v16] = v33 - v47;
            a2[v25] = v47 + a2[v25];
            v26[v25] = 0.0;
            if (v16 == 1)
            {
              double v49 = *((float *)&v71 + 1);
              double v50 = *((float *)&v72[-1] + v25);
              float v51 = *((float *)&v71 + 1) - v46 * (v48 * *((float *)&v71 + 1) + v50);
              *((float *)&v71 + 1) = v51;
              *(float *)&double v50 = v46 * (v49 - v48 * v50) + v50;
              *((_DWORD *)&v72[-1] + v25) = LODWORD(v50);
            }
            uint64_t v52 = v22;
            float64x2_t v53 = v24;
            double v54 = v19;
            if (v21 < v25)
            {
              do
              {
                double v55 = *v54;
                double v56 = *v53;
                float v57 = v55 - v46 * (v48 * v55 + v56);
                *v54++ = v57;
                *(float *)&double v55 = v46 * (v55 - v48 * v56) + v56;
                *float64x2_t v53 = *(float *)&v55;
                v53 += 4;
                --v52;
              }
              while (v52);
            }
            if (v25 < 2)
            {
              float64x2_t v58 = &v72[v25 - 1];
              uint64_t v59 = 4 * v25 + 4;
              double v60 = *(float *)((char *)v26 + v59);
              double v61 = *(float *)((char *)v58 + v59);
              float v62 = v60 - v46 * (v48 * v60 + v61);
              *(float *)((char *)v26 + v59) = v62;
              *(float *)&double v60 = v46 * (v60 - v48 * v61) + v61;
              *(_DWORD *)((char *)v58 + v59) = LODWORD(v60);
            }
            for (uint64_t i = 0; i != 9; i += 3)
            {
              double v64 = *(double *)&v17[i];
              double v65 = *(double *)&v23[i];
              *(double *)&v17[i] = v64 - v46 * (v65 + v48 * v64);
              *(double *)&v23[i] = v65 + v46 * (v64 - v48 * v65);
            }
          }
          ++v25;
          ++v24;
          ++v22;
          ++v23;
        }
        while (v25 != 3);
      }
      ++v20;
      v19 += 5;
      result += 5;
      ++v18;
      ++v17;
      ++v16;
    }
    while (v21 != 3);
    for (uint64_t j = 0; j != 3; ++j)
    {
      double v67 = *(double *)&v68[j] + *(double *)((char *)&v69 + j * 8);
      *(double *)((char *)&v69 + j * 8) = v67;
      a2[j] = v67;
      v68[j] = 0;
    }
    ++v3;
  }
  while (v3 != 50);
  return result;
}

float32x4_t pxrInternal__aapl__pxrReserved__::GfMatrix4f::RemoveScaleShear@<Q0>(float32x4_t *this@<X0>, float32x4_t *a2@<X8>)
{
  if (pxrInternal__aapl__pxrReserved__::GfMatrix4f::Factor((uint64_t)this, v24, (uint64_t)v21, v23, (uint64_t)&v19, (uint64_t)v22, 0.00001))
  {
    pxrInternal__aapl__pxrReserved__::GfMatrix4f::Orthonormalize((float32x2_t *)v23, 1);
    int v9 = 1065353216;
    uint64_t v11 = 0;
    uint64_t v10 = 0;
    int v12 = 1065353216;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 1065353216;
    uint64_t v16 = v19;
    int v17 = v20;
    int v18 = 1065353216;
    float32x4_t v4 = v23[1];
    *a2 = v23[0];
    a2[1] = v4;
    float32x4_t v5 = v23[3];
    a2[2] = v23[2];
    a2[3] = v5;
    result.f32[0] = pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator*=(a2->f32, (float *)&v9);
  }
  else
  {
    float32x4_t v7 = this[1];
    *a2 = *this;
    a2[1] = v7;
    float32x4_t result = this[2];
    float32x4_t v8 = this[3];
    a2[2] = result;
    a2[3] = v8;
  }
  return result;
}

float pxrInternal__aapl__pxrReserved__::GfMatrix4f::ExtractRotationQuat(pxrInternal__aapl__pxrReserved__::GfMatrix4f *this)
{
  float v1 = *((float *)this + 5);
  float v2 = *((float *)this + 10);
  if (*(float *)this > v1) {
    float v3 = *(float *)this;
  }
  else {
    float v3 = *((float *)this + 5);
  }
  if (v3 <= v2) {
    uint64_t v4 = 2;
  }
  else {
    uint64_t v4 = *(float *)this <= v1;
  }
  float v5 = (float)(*(float *)this + v1) + v2;
  long long v6 = (char *)this + 4 * (4 * v4);
  float v7 = *(float *)&v6[4 * v4];
  if (v5 > v7) {
    return (float)(*((float *)this + 6) - *((float *)this + 9))
  }
         / ((float)(sqrtf(v5 + *((float *)this + 15)) * 0.5)
          * 4.0);
  if (v4 == 2) {
    int v9 = 0;
  }
  else {
    int v9 = v4 + 1;
  }
  unsigned int v10 = ((int)v4 + 2) % 3u;
  uint64_t v11 = (char *)this + 16 * v9;
  int v12 = (char *)this + 16 * v10;
  float v13 = sqrtf((float)((float)(v7 - *(float *)&v11[4 * v9]) - *(float *)&v12[4 * v10]) + *((float *)this + 15)) * 0.5;
  *(&v15 + v4) = v13;
  float v14 = v13 * 4.0;
  *(&v15 + v9) = (float)(*(float *)&v6[4 * v9] + *(float *)&v11[4 * v4]) / v14;
  *(&v15 + v10) = (float)(*(float *)&v12[4 * v4] + *(float *)&v6[4 * v10]) / v14;
  return v15;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix4f::ExtractRotation(pxrInternal__aapl__pxrReserved__::GfMatrix4f *this)
{
  v5.i32[0] = pxrInternal__aapl__pxrReserved__::GfMatrix4f::ExtractRotationQuat(this);
  v5.i32[1] = v1;
  int v6 = v2;
  int v7 = v3;
  pxrInternal__aapl__pxrReserved__::GfQuatd::GfQuatd(v8, &v5);
  pxrInternal__aapl__pxrReserved__::GfRotation::SetQuat((pxrInternal__aapl__pxrReserved__::GfRotation *)&v9, (const pxrInternal__aapl__pxrReserved__::GfQuatd *)v8);
  return v9;
}

float pxrInternal__aapl__pxrReserved__::GfMatrix4f::DecomposeRotation(pxrInternal__aapl__pxrReserved__::GfMatrix4f *a1, float32x2_t *a2, float32x2_t *a3, float32x2_t *a4)
{
  v17.f64[0] = pxrInternal__aapl__pxrReserved__::GfMatrix4f::ExtractRotation(a1);
  v17.f64[1] = v7;
  uint64_t v18 = v8;
  uint64_t v19 = v9;
  float64x2_t v15 = vcvtq_f64_f32(*a2);
  double v16 = a2[1].f32[0];
  float64x2_t v13 = vcvtq_f64_f32(*a3);
  double v14 = a3[1].f32[0];
  float64x2_t v11 = vcvtq_f64_f32(*a4);
  double v12 = a4[1].f32[0];
  return pxrInternal__aapl__pxrReserved__::GfRotation::Decompose(&v17, v15.f64, v13.f64, v11.f64);
}

double pxrInternal__aapl__pxrReserved__::GfMatrix4f::ExtractRotationMatrix@<D0>(pxrInternal__aapl__pxrReserved__::GfMatrix4f *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)&long long v2 = *(void *)((char *)this + 4);
  int v3 = *((_DWORD *)this + 6);
  int v4 = *((_DWORD *)this + 10);
  *((void *)&v2 + 1) = *((void *)this + 2);
  *(_DWORD *)a2 = *(_DWORD *)this;
  *(_OWORD *)(a2 + 4) = v2;
  *(_DWORD *)(a2 + 20) = v3;
  double result = *((double *)this + 4);
  *(double *)(a2 + 24) = result;
  *(_DWORD *)(a2 + 32) = v4;
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::GfIsClose(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::GfMatrix4f *a2, const pxrInternal__aapl__pxrReserved__::GfMatrix4f *a3, double a4)
{
  BOOL v4 = 0;
  unint64_t v5 = 0;
LABEL_2:
  uint64_t v6 = 0;
  while (vabdd_f64(*(float *)((char *)this + v6), *(float *)((char *)a2 + v6)) < a4)
  {
    v6 += 4;
    if (v6 == 16)
    {
      BOOL v4 = v5 > 2;
      a2 = (const pxrInternal__aapl__pxrReserved__::GfMatrix4f *)((char *)a2 + 16);
      this = (pxrInternal__aapl__pxrReserved__ *)((char *)this + 16);
      if (++v5 != 4) {
        goto LABEL_2;
      }
      return 1;
    }
  }
  return v4;
}

uint64_t *sub_2168A22F4()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C5B0, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74C5B0, (char *)0x40, 1, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168A23B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

float64x2_t pxrInternal__aapl__pxrReserved__::GfMatrix4d::GfMatrix4d(float64x2_t *this, float32x2_t *a2)
{
  float64x2_t v2 = vcvtq_f64_f32(a2[1]);
  *this = vcvtq_f64_f32(*a2);
  this[1] = v2;
  float64x2_t v3 = vcvtq_f64_f32(a2[3]);
  this[2] = vcvtq_f64_f32(a2[2]);
  this[3] = v3;
  float64x2_t v4 = vcvtq_f64_f32(a2[5]);
  this[4] = vcvtq_f64_f32(a2[4]);
  this[5] = v4;
  float64x2_t result = vcvtq_f64_f32(a2[6]);
  float64x2_t v6 = vcvtq_f64_f32(a2[7]);
  this[6] = result;
  this[7] = v6;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix4d::GfMatrix4d(_OWORD *a1, uint64_t *a2)
{
  uint64_t v2 = 0;
  uint64_t v16 = *MEMORY[0x263EF8340];
  memset(&v15[8], 0, 32);
  memset(&v14[56], 0, 24);
  memset(&v14[8], 0, 32);
  *(void *)double v14 = 0x3FF0000000000000;
  *(_OWORD *)&v14[40] = 0x3FF0000000000000uLL;
  *(void *)float64x2_t v15 = 0x3FF0000000000000;
  *(void *)&v15[40] = 0x3FF0000000000000;
  uint64_t v3 = *a2;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  unint64_t v5 = v14;
  do
  {
    if (v2 == v4) {
      break;
    }
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(v3 + 24 * v2);
    uint64_t v8 = (*(void *)(v3 + 24 * v2 + 8) - v7) >> 3;
    do
    {
      if (v8 == v6) {
        break;
      }
      *(void *)&v5[8 * v6] = *(void *)(v7 + 8 * v6);
      ++v6;
    }
    while (v6 != 4);
    ++v2;
    v5 += 32;
  }
  while (v2 != 4);
  long long v9 = *(_OWORD *)&v14[16];
  *a1 = *(_OWORD *)v14;
  a1[1] = v9;
  long long v10 = *(_OWORD *)&v14[48];
  a1[2] = *(_OWORD *)&v14[32];
  a1[3] = v10;
  long long v11 = *(_OWORD *)v15;
  a1[4] = *(_OWORD *)&v14[64];
  a1[5] = v11;
  double result = *(double *)&v15[16];
  long long v13 = *(_OWORD *)&v15[32];
  a1[6] = *(_OWORD *)&v15[16];
  a1[7] = v13;
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  long long v9;
  long long v10;
  long long v11;
  double result;
  long long v13;
  unsigned char v14[80];
  unsigned char v15[48];
  uint64_t v16;

  uint64_t v2 = 0;
  uint64_t v16 = *MEMORY[0x263EF8340];
  memset(&v15[8], 0, 32);
  memset(&v14[56], 0, 24);
  memset(&v14[8], 0, 32);
  *(void *)double v14 = 0x3FF0000000000000;
  *(_OWORD *)&v14[40] = 0x3FF0000000000000uLL;
  *(void *)float64x2_t v15 = 0x3FF0000000000000;
  *(void *)&v15[40] = 0x3FF0000000000000;
  uint64_t v3 = *a2;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  unint64_t v5 = v14;
  do
  {
    if (v2 == v4) {
      break;
    }
    uint64_t v6 = 0;
    uint64_t v7 = *(void *)(v3 + 24 * v2);
    uint64_t v8 = (*(void *)(v3 + 24 * v2 + 8) - v7) >> 2;
    do
    {
      if (v8 == v6) {
        break;
      }
      *(double *)&v5[8 * v6] = *(float *)(v7 + 4 * v6);
      ++v6;
    }
    while (v6 != 4);
    ++v2;
    v5 += 32;
  }
  while (v2 != 4);
  long long v9 = *(_OWORD *)&v14[16];
  *a1 = *(_OWORD *)v14;
  a1[1] = v9;
  long long v10 = *(_OWORD *)&v14[48];
  a1[2] = *(_OWORD *)&v14[32];
  a1[3] = v10;
  long long v11 = *(_OWORD *)v15;
  a1[4] = *(_OWORD *)&v14[64];
  a1[5] = v11;
  double result = *(double *)&v15[16];
  long long v13 = *(_OWORD *)&v15[32];
  a1[6] = *(_OWORD *)&v15[16];
  a1[7] = v13;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix4d::GfMatrix4d(_OWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v5 = 0;
  uint64_t v24 = *MEMORY[0x263EF8340];
  memset(&v23[8], 0, 32);
  memset((char *)&v22[3] + 8, 0, 24);
  memset((char *)v22 + 8, 0, 32);
  *(void *)&v22[0] = 0x3FF0000000000000;
  *(_OWORD *)((char *)&v22[2] + 8) = 0x3FF0000000000000uLL;
  *(void *)float v23 = 0x3FF0000000000000;
  *(void *)&v23[40] = 0x3FF0000000000000;
  uint64_t v6 = *a2;
  uint64_t v7 = (a2[1] - *a2) >> 3;
  do
  {
    if (v7 == v5) {
      break;
    }
    *((void *)v22 + v5) = *(void *)(v6 + 8 * v5);
    ++v5;
  }
  while (v5 != 4);
  uint64_t v8 = 0;
  uint64_t v9 = *a3;
  uint64_t v10 = (a3[1] - *a3) >> 3;
  do
  {
    if (v10 == v8) {
      break;
    }
    *((void *)&v22[2] + v8) = *(void *)(v9 + 8 * v8);
    ++v8;
  }
  while (v8 != 4);
  uint64_t v11 = 0;
  uint64_t v12 = *a4;
  uint64_t v13 = (a4[1] - *a4) >> 3;
  do
  {
    if (v13 == v11) {
      break;
    }
    *((void *)&v22[4] + v11) = *(void *)(v12 + 8 * v11);
    ++v11;
  }
  while (v11 != 4);
  uint64_t v14 = 0;
  uint64_t v15 = *a5;
  uint64_t v16 = (a5[1] - *a5) >> 3;
  do
  {
    if (v16 == v14) {
      break;
    }
    *(void *)&v23[8 * v14 + 16] = *(void *)(v15 + 8 * v14);
    ++v14;
  }
  while (v14 != 4);
  long long v17 = v22[1];
  *a1 = v22[0];
  a1[1] = v17;
  long long v18 = v22[3];
  a1[2] = v22[2];
  a1[3] = v18;
  long long v19 = *(_OWORD *)v23;
  a1[4] = v22[4];
  a1[5] = v19;
  double result = *(double *)&v23[16];
  long long v21 = *(_OWORD *)&v23[32];
  a1[6] = *(_OWORD *)&v23[16];
  a1[7] = v21;
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  long long v17;
  long long v18;
  long long v19;
  double result;
  long long v21;
  _OWORD v22[5];
  unsigned char v23[48];
  uint64_t v24;

  uint64_t v5 = 0;
  uint64_t v24 = *MEMORY[0x263EF8340];
  memset(&v23[8], 0, 32);
  memset((char *)&v22[3] + 8, 0, 24);
  memset((char *)v22 + 8, 0, 32);
  *(void *)&v22[0] = 0x3FF0000000000000;
  *(_OWORD *)((char *)&v22[2] + 8) = 0x3FF0000000000000uLL;
  *(void *)float v23 = 0x3FF0000000000000;
  *(void *)&v23[40] = 0x3FF0000000000000;
  uint64_t v6 = *a2;
  uint64_t v7 = (a2[1] - *a2) >> 2;
  do
  {
    if (v7 == v5) {
      break;
    }
    *((double *)v22 + v5) = *(float *)(v6 + 4 * v5);
    ++v5;
  }
  while (v5 != 4);
  uint64_t v8 = 0;
  uint64_t v9 = *a3;
  uint64_t v10 = (a3[1] - *a3) >> 2;
  do
  {
    if (v10 == v8) {
      break;
    }
    *((double *)&v22[2] + v8) = *(float *)(v9 + 4 * v8);
    ++v8;
  }
  while (v8 != 4);
  uint64_t v11 = 0;
  uint64_t v12 = *a4;
  uint64_t v13 = (a4[1] - *a4) >> 2;
  do
  {
    if (v13 == v11) {
      break;
    }
    *((double *)&v22[4] + v11) = *(float *)(v12 + 4 * v11);
    ++v11;
  }
  while (v11 != 4);
  uint64_t v14 = 0;
  uint64_t v15 = *a5;
  uint64_t v16 = (a5[1] - *a5) >> 2;
  do
  {
    if (v16 == v14) {
      break;
    }
    *(double *)&v23[8 * v14 + 16] = *(float *)(v15 + 4 * v14);
    ++v14;
  }
  while (v14 != 4);
  long long v17 = v22[1];
  *a1 = v22[0];
  a1[1] = v17;
  long long v18 = v22[3];
  a1[2] = v22[2];
  a1[3] = v18;
  long long v19 = *(_OWORD *)v23;
  a1[4] = v22[4];
  a1[5] = v19;
  double result = *(double *)&v23[16];
  long long v21 = *(_OWORD *)&v23[32];
  a1[6] = *(_OWORD *)&v23[16];
  a1[7] = v21;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix4d::GfMatrix4d(pxrInternal__aapl__pxrReserved__::GfMatrix4d *a1, float64x2_t *a2, uint64_t a3)
{
  unint64_t v4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetRotate(a1, a2);
  *((void *)v4 + 12) = *(void *)a3;
  *((void *)v4 + 13) = *(void *)(a3 + 8);
  double result = *(double *)(a3 + 16);
  *((double *)v4 + 14) = result;
  *((void *)v4 + 15) = 0x3FF0000000000000;
  return result;
}

{
  pxrInternal__aapl__pxrReserved__::GfMatrix4d *v4;
  double result;

  unint64_t v4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetRotate(a1, a2);
  *((void *)v4 + 12) = *(void *)a3;
  *((void *)v4 + 13) = *(void *)(a3 + 8);
  double result = *(double *)(a3 + 16);
  *((double *)v4 + 14) = result;
  *((void *)v4 + 15) = 0x3FF0000000000000;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetTransform(pxrInternal__aapl__pxrReserved__::GfMatrix4d *a1, float64x2_t *a2, uint64_t a3)
{
  unint64_t v4 = pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetRotate(a1, a2);
  *((void *)v4 + 12) = *(void *)a3;
  *((void *)v4 + 13) = *(void *)(a3 + 8);
  double result = *(double *)(a3 + 16);
  *((double *)v4 + 14) = result;
  *((void *)v4 + 15) = 0x3FF0000000000000;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetTransform(uint64_t a1, void *a2, uint64_t a3)
{
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = a2[1];
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = a2[3];
  *(void *)(a1 + 40) = a2[4];
  *(void *)(a1 + 48) = a2[5];
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2[6];
  *(void *)(a1 + 72) = a2[7];
  *(void *)(a1 + 80) = a2[8];
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(void *)(a1 + 120) = 0x3FF0000000000000;
  *(void *)(a1 + 96) = *(void *)a3;
  *(void *)(a1 + 104) = *(void *)(a3 + 8);
  double result = *(double *)(a3 + 16);
  *(double *)(a1 + 112) = result;
  *(void *)(a1 + 120) = 0x3FF0000000000000;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal(uint64_t this, double a2)
{
  *(double *)this = a2;
  *(_OWORD *)(this + 8) = 0u;
  *(_OWORD *)(this + 24) = 0u;
  *(double *)(this + 40) = a2;
  *(_OWORD *)(this + 48) = 0u;
  *(_OWORD *)(this + 64) = 0u;
  *(double *)(this + 80) = a2;
  *(_OWORD *)(this + 88) = 0u;
  *(_OWORD *)(this + 104) = 0u;
  *(double *)(this + 120) = a2;
  return this;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 40) = *(void *)(a2 + 8);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 80) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  double result = *(double *)(a2 + 24);
  *(double *)(a1 + 120) = result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4d::Get(pxrInternal__aapl__pxrReserved__::GfMatrix4d *this, double (*a2)[4])
{
  (*a2)[0] = *(double *)this;
  (*a2)[1] = *((double *)this + 1);
  (*a2)[2] = *((double *)this + 2);
  (*a2)[3] = *((double *)this + 3);
  (*a2)[4] = *((double *)this + 4);
  (*a2)[5] = *((double *)this + 5);
  (*a2)[6] = *((double *)this + 6);
  (*a2)[7] = *((double *)this + 7);
  (*a2)[8] = *((double *)this + 8);
  (*a2)[9] = *((double *)this + 9);
  (*a2)[10] = *((double *)this + 10);
  (*a2)[11] = *((double *)this + 11);
  (*a2)[12] = *((double *)this + 12);
  (*a2)[13] = *((double *)this + 13);
  (*a2)[14] = *((double *)this + 14);
  (*a2)[15] = *((double *)this + 15);
  return (uint64_t)*a2;
}

BOOL pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator==(double *a1, double *a2)
{
  return *a1 == *a2
      && a1[1] == a2[1]
      && a1[2] == a2[2]
      && a1[3] == a2[3]
      && a1[4] == a2[4]
      && a1[5] == a2[5]
      && a1[6] == a2[6]
      && a1[7] == a2[7]
      && a1[8] == a2[8]
      && a1[9] == a2[9]
      && a1[10] == a2[10]
      && a1[11] == a2[11]
      && a1[12] == a2[12]
      && a1[13] == a2[13]
      && a1[14] == a2[14]
      && a1[15] == a2[15];
}

BOOL pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator==(double *a1, float *a2)
{
  return *a1 == *a2
      && a1[1] == a2[1]
      && a1[2] == a2[2]
      && a1[3] == a2[3]
      && a1[4] == a2[4]
      && a1[5] == a2[5]
      && a1[6] == a2[6]
      && a1[7] == a2[7]
      && a1[8] == a2[8]
      && a1[9] == a2[9]
      && a1[10] == a2[10]
      && a1[11] == a2[11]
      && a1[12] == a2[12]
      && a1[13] == a2[13]
      && a1[14] == a2[14]
      && a1[15] == a2[15];
}

double pxrInternal__aapl__pxrReserved__::GfMatrix4d::GetTranspose@<D0>(pxrInternal__aapl__pxrReserved__::GfMatrix4d *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *((void *)this + 1);
  uint64_t v3 = *((void *)this + 4);
  uint64_t v4 = *((void *)this + 5);
  *(void *)a2 = *(void *)this;
  *(void *)(a2 + 8) = v3;
  uint64_t v5 = *((void *)this + 2);
  uint64_t v6 = *((void *)this + 3);
  *(void *)(a2 + 32) = v2;
  *(void *)(a2 + 40) = v4;
  uint64_t v7 = *((void *)this + 6);
  uint64_t v8 = *((void *)this + 7);
  *(void *)(a2 + 64) = v5;
  *(void *)(a2 + 72) = v7;
  *(void *)(a2 + 96) = v6;
  *(void *)(a2 + 104) = v8;
  uint64_t v9 = *((void *)this + 9);
  uint64_t v10 = *((void *)this + 12);
  uint64_t v11 = *((void *)this + 13);
  *(void *)(a2 + 16) = *((void *)this + 8);
  *(void *)(a2 + 24) = v10;
  double result = *((double *)this + 10);
  uint64_t v13 = *((void *)this + 11);
  *(void *)(a2 + 48) = v9;
  *(void *)(a2 + 56) = v11;
  uint64_t v14 = *((void *)this + 14);
  uint64_t v15 = *((void *)this + 15);
  *(double *)(a2 + 80) = result;
  *(void *)(a2 + 88) = v14;
  *(void *)(a2 + 112) = v13;
  *(void *)(a2 + 120) = v15;
  return result;
}

pxrInternal__aapl__pxrReserved__::GfMatrix4d *pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetRotate(pxrInternal__aapl__pxrReserved__::GfMatrix4d *this, float64x2_t *a2)
{
  v7[0] = pxrInternal__aapl__pxrReserved__::GfRotation::GetQuat(a2);
  v7[1] = v3;
  v7[2] = v4;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::_SetRotateFromQuat((double *)this, v7, v5);
  *((void *)this + 3) = 0;
  *((void *)this + 7) = 0;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((void *)this + 15) = 0x3FF0000000000000;
  return this;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetTranslateOnly(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 96) = *(void *)a2;
  *(void *)(a1 + 104) = *(void *)(a2 + 8);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 112) = result;
  *(void *)(a1 + 120) = 0x3FF0000000000000;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetRotate(pxrInternal__aapl__pxrReserved__::GfMatrix4d *this, const pxrInternal__aapl__pxrReserved__::GfMatrix3d *a2)
{
  *(void *)this = *(void *)a2;
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)this + 3) = 0;
  *((void *)this + 4) = *((void *)a2 + 3);
  *((void *)this + 5) = *((void *)a2 + 4);
  *((void *)this + 6) = *((void *)a2 + 5);
  *((void *)this + 7) = 0;
  *((void *)this + 8) = *((void *)a2 + 6);
  *((void *)this + 9) = *((void *)a2 + 7);
  *((void *)this + 10) = *((void *)a2 + 8);
  double result = 0.0;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((void *)this + 15) = 0x3FF0000000000000;
  return result;
}

double *pxrInternal__aapl__pxrReserved__::GfMatrix4d::GetInverse@<X0>(double *this@<X0>, double *a2@<X1>, double a3@<D0>, uint64_t a4@<X8>)
{
  double v4 = *this;
  double v5 = this[1];
  double v6 = this[4];
  double v7 = this[5];
  double v8 = this[8];
  double v9 = this[9];
  double v10 = this[12];
  double v11 = this[13];
  double v13 = this[2];
  double v12 = this[3];
  double v14 = this[6];
  double v15 = this[7];
  double v16 = this[10];
  double v17 = this[11];
  double v19 = this[14];
  double v18 = this[15];
  double v20 = v13 * v15 - v12 * v14;
  double v21 = v13 * v17 - v12 * v16;
  double v22 = v13 * v18 - v12 * v19;
  double v23 = v14 * v17 - v15 * v16;
  double v24 = v14 * v18 - v15 * v19;
  double v25 = v16 * v18 - v17 * v19;
  double v26 = v7 * v21 - v9 * v20 - v5 * v23;
  double v27 = v11 * v20 + v5 * v24 - v7 * v22;
  double v28 = v9 * v22 - v11 * v21 - v5 * v25;
  double v29 = v11 * v23 + v7 * v25 - v9 * v24;
  double v30 = *this * v29 + v6 * v28 + v10 * v26 + v8 * v27;
  if (a2) {
    *a2 = v30;
  }
  if (fabs(v30) <= a3)
  {
    *(void *)a4 = 0x47EFFFFFE0000000;
    *(_OWORD *)(a4 + 8) = 0u;
    *(_OWORD *)(a4 + 24) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)(a4 + 64) = 0u;
    *(_OWORD *)(a4 + 88) = 0u;
    *(_OWORD *)(a4 + 104) = 0u;
    double v39 = 1.0;
    double v37 = 3.40282347e38;
    double v38 = 3.40282347e38;
  }
  else
  {
    double v31 = v4 * v7 - v5 * v6;
    double v32 = v4 * v9 - v5 * v8;
    double v33 = v4 * v11 - v5 * v10;
    double v34 = v6 * v9 - v7 * v8;
    double v35 = v6 * v11 - v7 * v10;
    double v36 = v8 * v11 - v9 * v10;
    *(double *)a4 = v29 * (1.0 / v30);
    *(double *)(a4 + 8) = v28 * (1.0 / v30);
    *(double *)(a4 + 32) = (v8 * v24 - v10 * v23 - v6 * v25) * (1.0 / v30);
    *(double *)(a4 + 16) = v27 * (1.0 / v30);
    *(double *)(a4 + 24) = v26 * (1.0 / v30);
    *(double *)(a4 + 64) = (v36 * v15 - v35 * v17 + v34 * v18) * (1.0 / v30);
    *(double *)(a4 + 72) = (v33 * v17 - v32 * v18 - v12 * v36) * (1.0 / v30);
    *(double *)(a4 + 48) = (v6 * v22 - v10 * v20 - v4 * v24) * (1.0 / v30);
    *(double *)(a4 + 56) = (v8 * v20 + v4 * v23 - v6 * v21) * (1.0 / v30);
    *(double *)(a4 + 88) = (v32 * v15 - v31 * v17 - v34 * v12) * (1.0 / v30);
    *(double *)(a4 + 96) = (v35 * v16 - v34 * v19 - v36 * v14) * (1.0 / v30);
    *(double *)(a4 + 104) = (v13 * v36 - v33 * v16 + v32 * v19) * (1.0 / v30);
    *(double *)(a4 + 112) = (v33 * v14 - v31 * v19 - v13 * v35) * (1.0 / v30);
    double v37 = (v10 * v21 + v4 * v25 - v8 * v22) * (1.0 / v30);
    double v38 = (v12 * v35 - v33 * v15 + v31 * v18) * (1.0 / v30);
    double v39 = (v34 * v13 - v32 * v14 + v31 * v16) * (1.0 / v30);
  }
  *(double *)(a4 + 40) = v37;
  *(double *)(a4 + 80) = v38;
  *(double *)(a4 + 120) = v39;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetScale(uint64_t this, double a2)
{
  *(double *)this = a2;
  *(_OWORD *)(this + 8) = 0u;
  *(_OWORD *)(this + 24) = 0u;
  *(double *)(this + 40) = a2;
  *(_OWORD *)(this + 48) = 0u;
  *(_OWORD *)(this + 64) = 0u;
  *(double *)(this + 80) = a2;
  *(_OWORD *)(this + 88) = 0u;
  *(_OWORD *)(this + 104) = 0u;
  *(void *)(this + 120) = 0x3FF0000000000000;
  return this;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix4d::GetDeterminant(pxrInternal__aapl__pxrReserved__::GfMatrix4d *this)
{
  double v1 = *((double *)this + 4);
  double v2 = *((double *)this + 5);
  double v4 = *((double *)this + 8);
  double v3 = *((double *)this + 9);
  double v5 = *((double *)this + 14);
  double v6 = *((double *)this + 10);
  double v7 = *((double *)this + 12);
  double v8 = *((double *)this + 13);
  double v9 = *((double *)this + 6);
  double v10 = *((double *)this + 1);
  double v11 = *((double *)this + 2);
  return *((double *)this + 15)
       * (v6 * (v2 * *(double *)this)
        + v4 * (v9 * v10)
        + v3 * (v1 * v11)
        - v3 * (v9 * *(double *)this)
        - v6 * (v1 * v10)
        - v4 * (v2 * v11))
       + *((double *)this + 7)
       * (v5 * (v3 * *(double *)this)
        + v7 * (v6 * v10)
        + v8 * (v4 * v11)
        - v8 * (v6 * *(double *)this)
        - v5 * (v4 * v10)
        - v7 * (v3 * v11))
       - *((double *)this + 3)
       * (v1 * v3 * v5 + v2 * v6 * v7 + v9 * v4 * v8 - v1 * v6 * v8 - v5 * (v2 * v4) - v7 * (v3 * v9))
       - *((double *)this + 11)
       * (v5 * (v2 * *(double *)this)
        + v7 * (v9 * v10)
        + v8 * (v1 * v11)
        - v8 * (v9 * *(double *)this)
        - v5 * (v1 * v10)
        - v7 * (v2 * v11));
}

double pxrInternal__aapl__pxrReserved__::GfMatrix4d::_GetDeterminant3(pxrInternal__aapl__pxrReserved__::GfMatrix4d *this, int a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  double v7 = (char *)this + 32 * a2;
  double v8 = (char *)this + 32 * a3;
  double v9 = (char *)this + 32 * a4;
  double v10 = *(double *)&v7[8 * a6];
  double v11 = *(double *)&v8[8 * a5];
  return *(double *)&v7[8 * a5] * *(double *)&v8[8 * a6] * *(double *)&v9[8 * a7]
       + v10 * *(double *)&v8[8 * a7] * *(double *)&v9[8 * a5]
       + *(double *)&v7[8 * a7] * v11 * *(double *)&v9[8 * a6]
       - *(double *)&v7[8 * a5] * *(double *)&v8[8 * a7] * *(double *)&v9[8 * a6]
       - *(double *)&v9[8 * a7] * (v10 * v11)
       - *(double *)&v9[8 * a5] * (*(double *)&v8[8 * a6] * *(double *)&v7[8 * a7]);
}

double pxrInternal__aapl__pxrReserved__::GfMatrix4d::GetHandedness(pxrInternal__aapl__pxrReserved__::GfMatrix4d *this)
{
  double v1 = sub_2168A35D8((double *)this);
  BOOL v2 = v1 < 0.0;
  BOOL v3 = v1 <= 0.0;
  double result = 0.0;
  if (!v3) {
    double result = 1.0;
  }
  if (v2) {
    return -1.0;
  }
  return result;
}

double sub_2168A35D8(double *a1)
{
  return *a1 * a1[5] * a1[10]
       + a1[1] * a1[6] * a1[8]
       + a1[2] * a1[4] * a1[9]
       - *a1 * a1[6] * a1[9]
       - a1[10] * (a1[1] * a1[4])
       - a1[8] * (a1[5] * a1[2]);
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4d::Orthonormalize(pxrInternal__aapl__pxrReserved__::GfMatrix4d *this, int a2)
{
  uint64_t v4 = *((void *)this + 2);
  long long v18 = *(_OWORD *)this;
  uint64_t v19 = v4;
  uint64_t v5 = *((void *)this + 6);
  long long v16 = *((_OWORD *)this + 2);
  uint64_t v17 = v5;
  uint64_t v6 = *((void *)this + 10);
  long long v14 = *((_OWORD *)this + 4);
  uint64_t v15 = v6;
  uint64_t v7 = pxrInternal__aapl__pxrReserved__::GfVec3d::OrthogonalizeBasis(&v18, &v16, &v14, 1, 0.000001);
  uint64_t v9 = v7;
  *(_OWORD *)this = v18;
  *((void *)this + 2) = v19;
  *((_OWORD *)this + 2) = v16;
  *((void *)this + 6) = v17;
  *((_OWORD *)this + 4) = v14;
  uint64_t v10 = *((uint64_t *)this + 15);
  *((void *)this + 10) = v15;
  if (*(double *)&v10 != 1.0 && fabs(*(double *)&v10) >= 1.0e-10)
  {
    *((float64x2_t *)this + 6) = vdivq_f64(*((float64x2_t *)this + 6), (float64x2_t)vdupq_lane_s64(v10, 0));
    *((double *)this + 14) = *((double *)this + 14) / *(double *)&v10;
    *((void *)this + 15) = 0x3FF0000000000000;
  }
  if (((v7 | a2 ^ 1) & 1) == 0)
  {
    v12[0] = "gf/matrix4d.cpp";
    v12[1] = "Orthonormalize";
    v12[2] = 495;
    v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::GfMatrix4d::Orthonormalize(BOOL)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v12, (pxrInternal__aapl__pxrReserved__ *)"OrthogonalizeBasis did not converge, matrix may not be orthonormal.", v8);
  }
  return v9;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4d::GetOrthonormalized@<X0>(pxrInternal__aapl__pxrReserved__::GfMatrix4d *this@<X0>, int a2@<W1>, pxrInternal__aapl__pxrReserved__::GfMatrix4d *a3@<X8>)
{
  long long v3 = *((_OWORD *)this + 5);
  *((_OWORD *)a3 + 4) = *((_OWORD *)this + 4);
  *((_OWORD *)a3 + 5) = v3;
  long long v4 = *((_OWORD *)this + 7);
  *((_OWORD *)a3 + 6) = *((_OWORD *)this + 6);
  *((_OWORD *)a3 + 7) = v4;
  long long v5 = *((_OWORD *)this + 1);
  *(_OWORD *)a3 = *(_OWORD *)this;
  *((_OWORD *)a3 + 1) = v5;
  long long v6 = *((_OWORD *)this + 3);
  *((_OWORD *)a3 + 2) = *((_OWORD *)this + 2);
  *((_OWORD *)a3 + 3) = v6;
  return pxrInternal__aapl__pxrReserved__::GfMatrix4d::Orthonormalize(a3, a2);
}

float64x2_t pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(float64x2_t *a1, double a2)
{
  float64x2_t v2 = vmulq_n_f64(a1[1], a2);
  *a1 = vmulq_n_f64(*a1, a2);
  a1[1] = v2;
  float64x2_t v3 = vmulq_n_f64(a1[3], a2);
  a1[2] = vmulq_n_f64(a1[2], a2);
  a1[3] = v3;
  float64x2_t v4 = vmulq_n_f64(a1[5], a2);
  a1[4] = vmulq_n_f64(a1[4], a2);
  a1[5] = v4;
  float64x2_t v5 = vmulq_n_f64(a1[6], a2);
  float64x2_t result = vmulq_n_f64(a1[7], a2);
  a1[6] = v5;
  a1[7] = result;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator+=(double *a1, double *a2)
{
  double v2 = a1[1];
  *a1 = *a2 + *a1;
  a1[1] = a2[1] + v2;
  double v3 = a1[3];
  a1[2] = a2[2] + a1[2];
  a1[3] = a2[3] + v3;
  double v4 = a1[5];
  a1[4] = a2[4] + a1[4];
  a1[5] = a2[5] + v4;
  double v5 = a1[7];
  a1[6] = a2[6] + a1[6];
  a1[7] = a2[7] + v5;
  double v6 = a1[9];
  a1[8] = a2[8] + a1[8];
  a1[9] = a2[9] + v6;
  double v7 = a1[11];
  a1[10] = a2[10] + a1[10];
  a1[11] = a2[11] + v7;
  double v8 = a1[13];
  a1[12] = a2[12] + a1[12];
  a1[13] = a2[13] + v8;
  double v9 = a1[15];
  a1[14] = a2[14] + a1[14];
  double result = a2[15] + v9;
  a1[15] = result;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator-=(double *a1, double *a2)
{
  double v2 = a1[1];
  *a1 = *a1 - *a2;
  a1[1] = v2 - a2[1];
  double v3 = a1[3];
  a1[2] = a1[2] - a2[2];
  a1[3] = v3 - a2[3];
  double v4 = a1[5];
  a1[4] = a1[4] - a2[4];
  a1[5] = v4 - a2[5];
  double v5 = a1[7];
  a1[6] = a1[6] - a2[6];
  a1[7] = v5 - a2[7];
  double v6 = a1[9];
  a1[8] = a1[8] - a2[8];
  a1[9] = v6 - a2[9];
  double v7 = a1[11];
  a1[10] = a1[10] - a2[10];
  a1[11] = v7 - a2[11];
  double v8 = a1[13];
  a1[12] = a1[12] - a2[12];
  a1[13] = v8 - a2[13];
  double v9 = a1[15];
  a1[14] = a1[14] - a2[14];
  double result = v9 - a2[15];
  a1[15] = result;
  return result;
}

float64x2_t pxrInternal__aapl__pxrReserved__::operator-@<Q0>(float64x2_t *a1@<X0>, float64x2_t *a2@<X8>)
{
  float64x2_t v2 = vnegq_f64(a1[1]);
  *a2 = vnegq_f64(*a1);
  a2[1] = v2;
  float64x2_t v3 = vnegq_f64(a1[3]);
  a2[2] = vnegq_f64(a1[2]);
  a2[3] = v3;
  float64x2_t v4 = vnegq_f64(a1[5]);
  a2[4] = vnegq_f64(a1[4]);
  a2[5] = v4;
  float64x2_t result = vnegq_f64(a1[6]);
  float64x2_t v6 = vnegq_f64(a1[7]);
  a2[6] = result;
  a2[7] = v6;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(double *a1, double *a2)
{
  double v2 = *a1;
  double v3 = a1[1];
  double v4 = a1[2];
  double v5 = a1[3];
  double v7 = a1[4];
  double v6 = a1[5];
  double v9 = a1[6];
  double v8 = a1[7];
  double v11 = a1[8];
  double v10 = a1[9];
  double v13 = a1[10];
  double v12 = a1[11];
  double v15 = a1[12];
  double v14 = a1[13];
  double v17 = a1[14];
  double v16 = a1[15];
  *a1 = *a1 * *a2 + v3 * a2[4] + v4 * a2[8] + v5 * a2[12];
  a1[1] = v2 * a2[1] + v3 * a2[5] + v4 * a2[9] + v5 * a2[13];
  a1[2] = v2 * a2[2] + v3 * a2[6] + v4 * a2[10] + v5 * a2[14];
  a1[3] = v2 * a2[3] + v3 * a2[7] + v4 * a2[11] + v5 * a2[15];
  a1[4] = v7 * *a2 + v6 * a2[4] + v9 * a2[8] + v8 * a2[12];
  a1[5] = v7 * a2[1] + v6 * a2[5] + v9 * a2[9] + v8 * a2[13];
  a1[6] = v7 * a2[2] + v6 * a2[6] + v9 * a2[10] + v8 * a2[14];
  a1[7] = v7 * a2[3] + v6 * a2[7] + v9 * a2[11] + v8 * a2[15];
  a1[8] = v11 * *a2 + v10 * a2[4] + v13 * a2[8] + v12 * a2[12];
  a1[9] = v11 * a2[1] + v10 * a2[5] + v13 * a2[9] + v12 * a2[13];
  a1[10] = v11 * a2[2] + v10 * a2[6] + v13 * a2[10] + v12 * a2[14];
  a1[11] = v11 * a2[3] + v10 * a2[7] + v13 * a2[11] + v12 * a2[15];
  a1[12] = v15 * *a2 + v14 * a2[4] + v17 * a2[8] + v16 * a2[12];
  a1[13] = v15 * a2[1] + v14 * a2[5] + v17 * a2[9] + v16 * a2[13];
  a1[14] = v15 * a2[2] + v14 * a2[6] + v17 * a2[10] + v16 * a2[14];
  double result = v15 * a2[3] + v14 * a2[7] + v17 * a2[11] + v16 * a2[15];
  a1[15] = result;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix4d::_SetRotateFromQuat(double *a1, double *a2, double a3)
{
  double v3 = a2[1] * a2[1] + a2[2] * a2[2];
  *a1 = 1.0 - (v3 + v3);
  double v4 = *a2 * a2[1] + a2[2] * a3;
  a1[1] = v4 + v4;
  double v5 = a2[2] * *a2 - a2[1] * a3;
  a1[2] = v5 + v5;
  double v6 = *a2 * a2[1] - a2[2] * a3;
  a1[4] = v6 + v6;
  double v7 = a2[2] * a2[2] + *a2 * *a2;
  a1[5] = 1.0 - (v7 + v7);
  double v8 = a2[1] * a2[2] + *a2 * a3;
  a1[6] = v8 + v8;
  double v9 = a2[2] * *a2 + a2[1] * a3;
  a1[8] = v9 + v9;
  double v10 = a2[1] * a2[2] - *a2 * a3;
  a1[9] = v10 + v10;
  double v11 = a2[1] * a2[1] + *a2 * *a2;
  double result = 1.0 - (v11 + v11);
  a1[10] = result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetRotate(uint64_t a1, double *a2)
{
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(void *)(a1 + 120) = 0x3FF0000000000000;
  return a1;
}

double *pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetRotateOnly(double *a1, double *a2)
{
  return a1;
}

pxrInternal__aapl__pxrReserved__::GfMatrix4d *pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetRotateOnly(pxrInternal__aapl__pxrReserved__::GfMatrix4d *this, float64x2_t *a2)
{
  v7[0] = pxrInternal__aapl__pxrReserved__::GfRotation::GetQuat(a2);
  v7[1] = v3;
  v7[2] = v4;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::_SetRotateFromQuat((double *)this, v7, v5);
  return this;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetRotateOnly(pxrInternal__aapl__pxrReserved__::GfMatrix4d *this, const pxrInternal__aapl__pxrReserved__::GfMatrix3d *a2)
{
  *(void *)this = *(void *)a2;
  *((void *)this + 1) = *((void *)a2 + 1);
  *((void *)this + 2) = *((void *)a2 + 2);
  *((void *)this + 4) = *((void *)a2 + 3);
  *((void *)this + 5) = *((void *)a2 + 4);
  *((void *)this + 6) = *((void *)a2 + 5);
  *((void *)this + 8) = *((void *)a2 + 6);
  *((void *)this + 9) = *((void *)a2 + 7);
  double result = *((double *)a2 + 8);
  *((double *)this + 10) = result;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetScale(uint64_t a1, void *a2)
{
  *(void *)a1 = *a2;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 40) = a2[1];
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 80) = a2[2];
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(void *)(a1 + 120) = 0x3FF0000000000000;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetTranslate(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 40) = 0x3FF0000000000000;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = xmmword_21740A580;
  *(void *)(a1 + 96) = *(void *)a2;
  *(void *)(a1 + 104) = *(void *)(a2 + 8);
  double result = *(double *)(a2 + 16);
  *(double *)(a1 + 112) = result;
  *(void *)(a1 + 120) = 0x3FF0000000000000;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetLookAt(uint64_t a1, double *a2, double *a3, double *a4)
{
  double v4 = *a3 - *a2;
  double v5 = a3[1] - a2[1];
  double v6 = a3[2] - a2[2];
  double v7 = sqrt(v4 * v4 + v5 * v5 + v6 * v6);
  if (v7 <= 1.0e-10) {
    double v8 = 1.0e10;
  }
  else {
    double v8 = 1.0 / v7;
  }
  double v9 = v4 * v8;
  double v10 = v5 * v8;
  double v11 = v6 * v8;
  double v13 = a4[1];
  double v12 = a4[2];
  double v14 = v12 * (v5 * v8) - v13 * (v6 * v8);
  double v15 = *a4 * (v6 * v8) - v12 * (v4 * v8);
  double v16 = v13 * (v4 * v8) - *a4 * (v5 * v8);
  double v17 = sqrt(v16 * v16 + v14 * v14 + v15 * v15);
  double v18 = 1.0 / v17;
  if (v17 <= 1.0e-10) {
    double v18 = 1.0e10;
  }
  double v19 = v14 * v18;
  double v20 = v15 * v18;
  double v21 = v16 * v18;
  double v22 = v11 * v20 - v10 * v21;
  double v23 = v9 * v21 - v11 * v19;
  double v24 = v10 * v19 - v9 * v20;
  *(double *)a1 = v19;
  *(double *)(a1 + 32) = v20;
  *(double *)(a1 + 64) = v21;
  *(double *)(a1 + 96) = -(a2[2] * v21 + *a2 * v19 + a2[1] * v20);
  *(double *)(a1 + 8) = v22;
  *(double *)(a1 + 40) = v23;
  *(double *)(a1 + 72) = v24;
  *(double *)(a1 + 104) = -(a2[2] * v24 + *a2 * v22 + a2[1] * v23);
  *(double *)(a1 + 16) = -(v4 * v8);
  *(double *)(a1 + 48) = -(v5 * v8);
  *(double *)(a1 + 80) = -(v6 * v8);
  double result = v9 * *a2 + v10 * a2[1] + v11 * a2[2];
  *(double *)(a1 + 112) = result;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 120) = 0x3FF0000000000000;
  return result;
}

_OWORD *pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetLookAt(_OWORD *a1, double *a2, double *a3)
{
  double v4 = -*a2;
  double v5 = -a2[1];
  double v6 = -a2[2];
  v15.f64[0] = sub_216896F28(a3);
  v15.f64[1] = v7;
  uint64_t v16 = v8;
  uint64_t v17 = v9;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetRotate((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)v24, &v15);
  *(void *)double v18 = 0x3FF0000000000000;
  memset(&v18[8], 0, 32);
  *(void *)&v18[40] = 0x3FF0000000000000;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = xmmword_21740A580;
  *(double *)&long long v22 = v4;
  *((double *)&v22 + 1) = v5;
  *(double *)&long long v23 = v6;
  *((void *)&v23 + 1) = 0x3FF0000000000000;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=((double *)v18, v24);
  long long v10 = v21;
  a1[4] = v20;
  a1[5] = v10;
  long long v11 = v23;
  a1[6] = v22;
  a1[7] = v11;
  long long v12 = *(_OWORD *)&v18[16];
  *a1 = *(_OWORD *)v18;
  a1[1] = v12;
  long long v13 = v19;
  a1[2] = *(_OWORD *)&v18[32];
  a1[3] = v13;
  return a1;
}

BOOL pxrInternal__aapl__pxrReserved__::GfMatrix4d::Factor(uint64_t a1, long long *a2, uint64_t a3, _OWORD *a4, uint64_t a5, uint64_t a6, double a7)
{
  uint64_t v11 = 0;
  uint64_t v99 = *MEMORY[0x263EF8340];
  *(void *)a6 = 0x3FF0000000000000;
  *(_OWORD *)(a6 + 8) = 0u;
  *(_OWORD *)(a6 + 24) = 0u;
  *(void *)(a6 + 40) = 0x3FF0000000000000;
  *(_OWORD *)(a6 + 48) = 0u;
  *(_OWORD *)(a6 + 64) = 0u;
  *(void *)(a6 + 80) = 0x3FF0000000000000;
  *(_OWORD *)(a6 + 88) = 0u;
  *(void *)(a6 + 120) = 0x3FF0000000000000;
  uint64_t v12 = 96;
  *(_OWORD *)(a6 + 104) = 0u;
  do
  {
    long long v13 = (char *)&v85 + v11;
    *(_OWORD *)long long v13 = *(_OWORD *)(a1 + v11);
    *((void *)v13 + 2) = *(void *)(a1 + v11 + 16);
    *((void *)v13 + 3) = 0;
    *(void *)((char *)&v85 + v12) = 0;
    *(void *)(a5 + v12 - 96) = *(void *)(a1 + v12);
    v12 += 8;
    v11 += 32;
  }
  while (v12 != 120);
  *((void *)&v92 + 1) = 0x3FF0000000000000;
  double v14 = *(double *)&v85 * *((double *)&v87 + 1) * *(double *)&v90
      + *((double *)&v85 + 1) * *(double *)&v88 * *(double *)&v89
      + *(double *)&v86 * *(double *)&v87 * *((double *)&v89 + 1)
      - *(double *)&v85 * *(double *)&v88 * *((double *)&v89 + 1)
      - *(double *)&v90 * (*((double *)&v85 + 1) * *(double *)&v87)
      - *(double *)&v89 * (*((double *)&v87 + 1) * *(double *)&v86);
  uint64_t v74 = v85;
  *(void *)&long long v75 = v87;
  if (v14 >= 0.0) {
    double v15 = 1.0;
  }
  else {
    double v15 = -1.0;
  }
  *((void *)&v76 + 1) = *((void *)&v85 + 1);
  uint64_t v77 = *((void *)&v87 + 1);
  *(void *)&long long v79 = v86;
  *((void *)&v79 + 1) = v88;
  *((void *)&v81 + 1) = *((void *)&v86 + 1);
  *(void *)&long long v82 = *((void *)&v88 + 1);
  *((void *)&v82 + 1) = *((void *)&v90 + 1);
  *((void *)&v75 + 1) = v89;
  *(void *)&long long v76 = v91;
  *(void *)&long long v78 = *((void *)&v89 + 1);
  *((void *)&v78 + 1) = *((void *)&v91 + 1);
  uint64_t v80 = v90;
  *(void *)&long long v81 = v92;
  uint64_t v83 = 0x3FF0000000000000;
  v84[2] = v87;
  v84[3] = v88;
  v84[0] = v85;
  v84[1] = v86;
  v84[6] = v91;
  v84[7] = v92;
  v84[4] = v89;
  v84[5] = v90;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=((double *)v84, (double *)&v74);
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::_Jacobi3((uint64_t)v84, v73, &v93);
  uint64_t v16 = 0;
  long long v75 = 0u;
  long long v76 = 0u;
  long long v81 = 0u;
  long long v82 = 0u;
  uint64_t v17 = v94;
  uint64_t v18 = v96;
  *a2 = v93;
  uint64_t v19 = v98;
  *((void *)a2 + 2) = v17;
  *((void *)a2 + 3) = 0;
  a2[2] = v95;
  *((void *)a2 + 6) = v18;
  *((void *)a2 + 7) = 0;
  a2[4] = v97;
  *((void *)a2 + 10) = v19;
  *(long long *)((char *)a2 + 88) = 0u;
  *(long long *)((char *)a2 + 104) = 0u;
  *((void *)a2 + 15) = 0x3FF0000000000000;
  uint64_t v74 = 0x3FF0000000000000;
  uint64_t v77 = 0x3FF0000000000000;
  uint64_t v80 = 0x3FF0000000000000;
  uint64_t v83 = 0x3FF0000000000000;
  long long v20 = (double *)&v74;
  long long v78 = 0u;
  long long v79 = 0u;
  do
  {
    double v21 = *(double *)&v73[v16];
    double v22 = sqrt(v21);
    if (v21 >= a7) {
      double v23 = v22;
    }
    else {
      double v23 = a7;
    }
    double v24 = v15 * v23;
    *(double *)(a3 + v16 * 8) = v24;
    *long long v20 = 1.0 / v24;
    v20 += 5;
    ++v16;
  }
  while (v16 != 3);
  long long v25 = a2[5];
  long long v53 = a2[4];
  long long v54 = v25;
  long long v26 = a2[7];
  long long v55 = a2[6];
  long long v56 = v26;
  long long v27 = a2[1];
  long long v49 = *a2;
  long long v50 = v27;
  long long v28 = a2[3];
  long long v51 = a2[2];
  long long v52 = v28;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=((double *)&v49, (double *)&v74);
  double v29 = *((double *)a2 + 1);
  double v30 = *((double *)a2 + 4);
  double v31 = *((double *)a2 + 5);
  v48[0] = *(double *)a2;
  v48[1] = v30;
  double v32 = *((double *)a2 + 2);
  double v33 = *((double *)a2 + 3);
  v48[4] = v29;
  v48[5] = v31;
  double v34 = *((double *)a2 + 6);
  double v35 = *((double *)a2 + 7);
  v48[8] = v32;
  v48[9] = v34;
  v48[12] = v33;
  v48[13] = v35;
  double v36 = *((double *)a2 + 9);
  double v37 = *((double *)a2 + 12);
  double v38 = *((double *)a2 + 13);
  v48[2] = *((double *)a2 + 8);
  v48[3] = v37;
  double v39 = *((double *)a2 + 10);
  double v40 = *((double *)a2 + 11);
  v48[6] = v36;
  v48[7] = v38;
  double v41 = *((double *)a2 + 14);
  double v42 = *((double *)a2 + 15);
  v48[10] = v39;
  v48[11] = v41;
  v48[14] = v40;
  v48[15] = v42;
  long long v61 = v53;
  long long v62 = v54;
  long long v63 = v55;
  long long v64 = v56;
  long long v57 = v49;
  long long v58 = v50;
  long long v59 = v51;
  long long v60 = v52;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=((double *)&v57, v48);
  long long v69 = v61;
  long long v70 = v62;
  long long v71 = v63;
  long long v72 = v64;
  long long v65 = v57;
  long long v66 = v58;
  long long v67 = v59;
  long long v68 = v60;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=((double *)&v65, (double *)&v85);
  long long v43 = v70;
  a4[4] = v69;
  a4[5] = v43;
  long long v44 = v72;
  a4[6] = v71;
  a4[7] = v44;
  long long v45 = v66;
  *a4 = v65;
  a4[1] = v45;
  long long v46 = v68;
  a4[2] = v67;
  a4[3] = v46;
  return v14 * v15 >= a7;
}

double *pxrInternal__aapl__pxrReserved__::GfMatrix4d::_Jacobi3(uint64_t a1, void *a2, void *a3)
{
  unsigned int v3 = 0;
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 80);
  *a2 = *(void *)a1;
  a2[1] = v4;
  a2[2] = v5;
  *a3 = 0x3FF0000000000000;
  a3[2] = 0;
  a3[3] = 0;
  a3[1] = 0;
  a3[4] = 0x3FF0000000000000;
  a3[5] = 0;
  a3[6] = 0;
  a3[7] = 0;
  a3[8] = 0x3FF0000000000000;
  long long v6 = *(_OWORD *)(a1 + 64);
  long long v7 = *(_OWORD *)(a1 + 96);
  long long v8 = *(_OWORD *)(a1 + 112);
  v69[3] = *(_OWORD *)(a1 + 80);
  v69[4] = v7;
  v69[5] = v8;
  long long v9 = *(_OWORD *)(a1 + 16);
  v68[0] = *(_OWORD *)a1;
  v68[1] = v9;
  long long v10 = *(_OWORD *)(a1 + 48);
  v69[0] = *(_OWORD *)(a1 + 32);
  v69[1] = v10;
  v69[2] = v6;
  long long v66 = *(_OWORD *)a2;
  uint64_t v67 = a2[2];
  memset(v65, 0, sizeof(v65));
  do
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    double v13 = 0.0;
    LOBYTE(result) = 1;
    do
    {
      char v15 = (char)result;
      uint64_t v16 = (char *)&v68[v12] + 8;
      uint64_t v17 = v11;
      do
      {
        double v13 = v13 + fabs(*(double *)&v16[v17]);
        v17 += 8;
      }
      while (v17 != 16);
      double result = 0;
      v11 += 8;
      uint64_t v12 = 2;
    }
    while ((v15 & 1) != 0);
    if (v13 == 0.0) {
      break;
    }
    double v18 = 0.0;
    if (v3 <= 2) {
      double v18 = v13 * 0.2 / 9.0;
    }
    unint64_t v19 = 0;
    long long v20 = a3;
    double v21 = a3 + 1;
    double result = (double *)v69 + 1;
    double v22 = (double *)v68 + 1;
    uint64_t v23 = 1;
    do
    {
      unint64_t v24 = v19 + 1;
      if (v19 <= 1)
      {
        uint64_t v25 = 0;
        long long v26 = v21;
        long long v27 = result;
        unint64_t v28 = v23;
        double v29 = (double *)&v68[2 * v19];
        do
        {
          double v30 = v29[v28];
          double v31 = fabs(v30);
          double v32 = v31 * 100.0;
          if (v3 >= 4
            && (double v33 = fabs(*(double *)&a2[v19]), v32 + v33 == v33)
            && (double v34 = fabs(*(double *)&a2[v28]), v32 + v34 == v34))
          {
            v29[v28] = 0.0;
          }
          else if (v31 > v18)
          {
            double v35 = *(double *)&a2[v28];
            double v36 = *(double *)&a2[v19];
            double v37 = v35 - v36;
            double v38 = vabdd_f64(v35, v36);
            double v39 = v32 + v38;
            double v40 = v37 * 0.5 / v30;
            double v41 = 1.0 / (fabs(v40) + sqrt(v40 * v40 + 1.0));
            if (v40 >= 0.0) {
              double v42 = v41;
            }
            else {
              double v42 = -v41;
            }
            double v43 = v30 / v37;
            if (v39 == v38) {
              double v44 = v43;
            }
            else {
              double v44 = v42;
            }
            double v45 = 1.0 / sqrt(v44 * v44 + 1.0);
            double v46 = v44 * v45;
            double v47 = v30 * v44;
            *(double *)&v65[v19] = *(double *)&v65[v19] - v47;
            *(double *)&v65[v28] = v47 + *(double *)&v65[v28];
            double v48 = v46 / (v45 + 1.0);
            *(double *)&a2[v19] = v36 - v47;
            *(double *)&a2[v28] = v47 + *(double *)&a2[v28];
            v29[v28] = 0.0;
            if (v19 == 1)
            {
              double v49 = *((double *)v68 + v28);
              double v50 = *((double *)v68 + 1);
              *((double *)v68 + 1) = *((double *)v68 + 1) - v46 * (v49 + v48 * *((double *)v68 + 1));
              *((double *)v68 + v28) = v49 + v46 * (v50 - v48 * v49);
            }
            uint64_t v51 = v25;
            long long v52 = v27;
            long long v53 = v22;
            if (v24 < v28)
            {
              do
              {
                double v54 = *v53;
                double v55 = *v52;
                *long long v53 = *v53 - v46 * (*v52 + v48 * *v53);
                ++v53;
                *long long v52 = v55 + v46 * (v54 - v48 * v55);
                v52 += 4;
                --v51;
              }
              while (v51);
            }
            if (v28 < 2)
            {
              long long v56 = &v68[2 * v28];
              uint64_t v57 = 8 * v28 + 8;
              double v58 = *(double *)((char *)v29 + v57);
              double v59 = *(double *)((char *)v56 + v57);
              *(double *)((char *)v29 + v57) = v58 - v46 * (v59 + v48 * v58);
              *(double *)((char *)v56 + v57) = v59 + v46 * (v58 - v48 * v59);
            }
            for (uint64_t i = 0; i != 9; i += 3)
            {
              double v61 = *(double *)&v20[i];
              double v62 = *(double *)&v26[i];
              *(double *)&v20[i] = v61 - v46 * (v62 + v48 * v61);
              *(double *)&v26[i] = v62 + v46 * (v61 - v48 * v62);
            }
          }
          ++v28;
          ++v27;
          ++v25;
          ++v26;
        }
        while (v28 != 3);
      }
      ++v23;
      v22 += 5;
      result += 5;
      ++v21;
      ++v20;
      ++v19;
    }
    while (v24 != 3);
    for (uint64_t j = 0; j != 3; ++j)
    {
      double v64 = *(double *)&v65[j] + *(double *)((char *)&v66 + j * 8);
      *(double *)((char *)&v66 + j * 8) = v64;
      *(double *)&a2[j] = v64;
      v65[j] = 0;
    }
    ++v3;
  }
  while (v3 != 50);
  return result;
}

__n128 pxrInternal__aapl__pxrReserved__::GfMatrix4d::RemoveScaleShear@<Q0>(pxrInternal__aapl__pxrReserved__::GfMatrix4d *this@<X0>, uint64_t a2@<X8>)
{
  if (pxrInternal__aapl__pxrReserved__::GfMatrix4d::Factor((uint64_t)this, v28, (uint64_t)v25, v27, (uint64_t)&v23, (uint64_t)v26, 1.0e-10))
  {
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::Orthonormalize((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)v27, 1);
    uint64_t v13 = 0x3FF0000000000000;
    long long v14 = 0u;
    long long v15 = 0u;
    uint64_t v16 = 0x3FF0000000000000;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v19 = xmmword_21740A580;
    long long v20 = v23;
    uint64_t v21 = v24;
    uint64_t v22 = 0x3FF0000000000000;
    long long v4 = v27[5];
    *(_OWORD *)(a2 + 64) = v27[4];
    *(_OWORD *)(a2 + 80) = v4;
    long long v5 = v27[7];
    *(_OWORD *)(a2 + 96) = v27[6];
    *(_OWORD *)(a2 + 112) = v5;
    long long v6 = v27[1];
    *(_OWORD *)a2 = v27[0];
    *(_OWORD *)(a2 + 16) = v6;
    long long v7 = v27[3];
    *(_OWORD *)(a2 + 32) = v27[2];
    *(_OWORD *)(a2 + 48) = v7;
    result.n128_f64[0] = pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=((double *)a2, (double *)&v13);
  }
  else
  {
    long long v9 = *((_OWORD *)this + 5);
    *(_OWORD *)(a2 + 64) = *((_OWORD *)this + 4);
    *(_OWORD *)(a2 + 80) = v9;
    long long v10 = *((_OWORD *)this + 7);
    *(_OWORD *)(a2 + 96) = *((_OWORD *)this + 6);
    *(_OWORD *)(a2 + 112) = v10;
    long long v11 = *((_OWORD *)this + 1);
    *(_OWORD *)a2 = *(_OWORD *)this;
    *(_OWORD *)(a2 + 16) = v11;
    __n128 result = *((__n128 *)this + 2);
    long long v12 = *((_OWORD *)this + 3);
    *(__n128 *)(a2 + 32) = result;
    *(_OWORD *)(a2 + 48) = v12;
  }
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix4d::ExtractRotationQuat(pxrInternal__aapl__pxrReserved__::GfMatrix4d *this)
{
  double v1 = *((double *)this + 5);
  double v2 = *((double *)this + 10);
  if (*(double *)this > v1) {
    double v3 = *(double *)this;
  }
  else {
    double v3 = *((double *)this + 5);
  }
  if (v3 <= v2) {
    uint64_t v4 = 2;
  }
  else {
    uint64_t v4 = *(double *)this <= v1;
  }
  double v5 = *(double *)this + v1 + v2;
  long long v6 = (char *)this + 8 * (4 * v4);
  double v7 = *(double *)&v6[8 * v4];
  if (v5 > v7) {
    return (*((double *)this + 6) - *((double *)this + 9)) / (sqrt(v5 + *((double *)this + 15)) * 0.5 * 4.0);
  }
  if (v4 == 2) {
    int v9 = 0;
  }
  else {
    int v9 = v4 + 1;
  }
  unsigned int v10 = ((int)v4 + 2) % 3u;
  long long v11 = (char *)this + 32 * v9;
  long long v12 = (char *)this + 32 * v10;
  double v13 = sqrt(v7 - *(double *)&v11[8 * v9] - *(double *)&v12[8 * v10] + *((double *)this + 15)) * 0.5;
  *(&v15 + v4) = v13;
  double v14 = v13 * 4.0;
  *(&v15 + v9) = (*(double *)&v6[8 * v9] + *(double *)&v11[8 * v4]) / v14;
  *(&v15 + v10) = (*(double *)&v12[8 * v4] + *(double *)&v6[8 * v10]) / v14;
  return v15;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix4d::ExtractRotation(pxrInternal__aapl__pxrReserved__::GfMatrix4d *this)
{
  v5[0] = pxrInternal__aapl__pxrReserved__::GfMatrix4d::ExtractRotationQuat(this);
  v5[1] = v1;
  v5[2] = v2;
  v5[3] = v3;
  pxrInternal__aapl__pxrReserved__::GfRotation::SetQuat((pxrInternal__aapl__pxrReserved__::GfRotation *)&v6, (const pxrInternal__aapl__pxrReserved__::GfQuatd *)v5);
  return v6;
}

double pxrInternal__aapl__pxrReserved__::GfMatrix4d::DecomposeRotation(pxrInternal__aapl__pxrReserved__::GfMatrix4d *a1, double *a2, double *a3, double *a4)
{
  v11.f64[0] = pxrInternal__aapl__pxrReserved__::GfMatrix4d::ExtractRotation(a1);
  v11.f64[1] = v7;
  uint64_t v12 = v8;
  uint64_t v13 = v9;
  return pxrInternal__aapl__pxrReserved__::GfRotation::Decompose(&v11, a2, a3, a4);
}

__n128 pxrInternal__aapl__pxrReserved__::GfMatrix4d::ExtractRotationMatrix@<Q0>(__n128 *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2 = this[1].n128_u64[0];
  unint64_t v3 = this[3].n128_u64[0];
  unint64_t v4 = this[5].n128_u64[0];
  *(__n128 *)a2 = *this;
  *(void *)(a2 + 16) = v2;
  *(__n128 *)(a2 + 24) = this[2];
  *(void *)(a2 + 40) = v3;
  __n128 result = this[4];
  *(__n128 *)(a2 + 48) = result;
  *(void *)(a2 + 64) = v4;
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::GfIsClose(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::GfMatrix4d *a2, const pxrInternal__aapl__pxrReserved__::GfMatrix4d *a3, double a4)
{
  BOOL v4 = 0;
  unint64_t v5 = 0;
LABEL_2:
  uint64_t v6 = 0;
  while (vabdd_f64(*(double *)((char *)this + v6), *(double *)((char *)a2 + v6)) < a4)
  {
    v6 += 8;
    if (v6 == 32)
    {
      BOOL v4 = v5 > 2;
      a2 = (const pxrInternal__aapl__pxrReserved__::GfMatrix4d *)((char *)a2 + 32);
      this = (pxrInternal__aapl__pxrReserved__ *)((char *)this + 32);
      if (++v5 != 4) {
        goto LABEL_2;
      }
      return 1;
    }
  }
  return v4;
}

uint64_t *sub_2168A4E0C()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C5C0, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74C5C0, (char *)0x80, 1, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168A4ECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::GfMultiInterval::GfMultiInterval(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  pxrInternal__aapl__pxrReserved__::GfMultiInterval::Add(a1, a2);
  return a1;
}

void sub_2168A4F4C(_Unwind_Exception *a1)
{
  sub_2167FB780(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::GfMultiInterval::Add(uint64_t *result, uint64_t a2)
{
  double v2 = *(double *)(a2 + 16);
  if (*(double *)a2 <= v2)
  {
    unint64_t v3 = (uint64_t **)result;
    if (*(double *)a2 != v2 || (*(unsigned char *)(a2 + 8) ? (BOOL v4 = *(unsigned char *)(a2 + 24) == 0) : (BOOL v4 = 1), !v4))
    {
      long long v5 = *(_OWORD *)(a2 + 16);
      long long v18 = *(_OWORD *)a2;
      long long v19 = v5;
      uint64_t v7 = result + 1;
      uint64_t v6 = (void *)result[1];
      if (v6)
      {
        uint64_t v8 = result + 1;
        do
        {
          int v9 = sub_2168A65D4((uint64_t)(v6 + 4), (uint64_t)&v18);
          unsigned int v10 = v6 + 1;
          if (!v9)
          {
            unsigned int v10 = v6;
            uint64_t v8 = v6;
          }
          uint64_t v6 = (void *)*v10;
        }
        while (*v10);
        if (v8 != v7)
        {
          while (sub_2168A5C70(&v18, (uint64_t)(v8 + 4)))
          {
            sub_2168A5CD4((uint64_t)&v18, (uint64_t)(v8 + 4));
            float64x2_t v11 = (uint64_t *)v8[1];
            uint64_t v12 = v8;
            if (v11)
            {
              do
              {
                uint64_t v13 = v11;
                float64x2_t v11 = (uint64_t *)*v11;
              }
              while (v11);
            }
            else
            {
              do
              {
                uint64_t v13 = (uint64_t *)v12[2];
                BOOL v4 = *v13 == (void)v12;
                uint64_t v12 = v13;
              }
              while (!v4);
            }
            sub_2167AE00C(v3, v8);
            operator delete(v8);
            uint64_t v8 = v13;
            if (v13 == v7) {
              goto LABEL_32;
            }
          }
          if (*(double *)&v19 == *((double *)v8 + 4) && (BYTE8(v19) || *((unsigned char *)v8 + 40)))
          {
            sub_2168A5CD4((uint64_t)&v18, (uint64_t)(v8 + 4));
            double v14 = (uint64_t *)v8[1];
            if (v14)
            {
              do
              {
                uint64_t v7 = v14;
                double v14 = (uint64_t *)*v14;
              }
              while (v14);
            }
            else
            {
              double v15 = v8;
              do
              {
                uint64_t v7 = (uint64_t *)v15[2];
                BOOL v4 = *v7 == (void)v15;
                double v15 = v7;
              }
              while (!v4);
            }
            sub_2167AE00C(v3, v8);
            operator delete(v8);
          }
          else
          {
            uint64_t v7 = v8;
          }
        }
      }
LABEL_32:
      if (v7 != *v3)
      {
        uint64_t v16 = *v7;
        if (*v7)
        {
          do
          {
            uint64_t v17 = v16;
            uint64_t v16 = *(void *)(v16 + 8);
          }
          while (v16);
        }
        else
        {
          do
          {
            uint64_t v17 = v7[2];
            BOOL v4 = *(void *)v17 == (void)v7;
            uint64_t v7 = (uint64_t *)v17;
          }
          while (v4);
        }
        if (sub_2168A5C70(&v18, v17 + 32)
          || *(double *)&v18 == *(double *)(v17 + 48) && (BYTE8(v18) || *(unsigned char *)(v17 + 56)))
        {
          sub_2168A5CD4((uint64_t)&v18, v17 + 32);
          sub_2167AE00C(v3, (uint64_t *)v17);
          operator delete((void *)v17);
        }
      }
      return sub_2168A6D58(v3, (uint64_t)&v18, &v18);
    }
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::GfMultiInterval::GfMultiInterval(uint64_t *a1, long long *a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  for (long long i = *a2; (void)i != *((void *)&i + 1); sub_2168A52A8(&i))
  {
    uint64_t v3 = sub_2168A5214((uint64_t *)&i);
    pxrInternal__aapl__pxrReserved__::GfMultiInterval::Add(a1, v3);
  }
  return a1;
}

void sub_2168A51FC(_Unwind_Exception *a1)
{
  sub_2167FB780(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_2168A5214(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    uint64_t v3 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/iterator.h", 47);
    v5[0] = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/iterator.h", (uint64_t)v3, 0x2Fu);
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__pxrReserved__::G"
            "fInterval>>::operator*() [T = const std::vector<pxrInternal__aapl__pxrReserved__::GfInterval>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", v4);
  }
  return result;
}

void *sub_2168A52A8(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__px"
            "rReserved__::GfInterval>>::operator++() [T = const std::vector<pxrInternal__aapl__pxrReserved__::GfInterval>"
            ", Reverse = false]";
    char v4 = 0;
    int v5 = 1;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 32;
  }
  return a1;
}

unint64_t pxrInternal__aapl__pxrReserved__::GfMultiInterval::Hash(pxrInternal__aapl__pxrReserved__::GfMultiInterval *this)
{
  uint64_t v2 = 0;
  char v3 = 0;
  sub_2168A6B84((uint64_t)&v2, *(void **)this, (void *)this + 1);
  return bswap64(0x9E3779B97F4A7C55 * v2);
}

uint64_t *pxrInternal__aapl__pxrReserved__::GfMultiInterval::GetBounds@<X0>(uint64_t *this@<X0>, uint64_t a2@<X8>)
{
  if (this[2])
  {
    uint64_t v2 = *this;
    uint64_t v4 = this[1];
    ++this;
    uint64_t v3 = v4;
    if (v4)
    {
      do
      {
        uint64_t v5 = v3;
        uint64_t v3 = *(void *)(v3 + 8);
      }
      while (v3);
    }
    else
    {
      do
      {
        uint64_t v5 = this[2];
        BOOL v10 = *(void *)v5 == (void)this;
        this = (uint64_t *)v5;
      }
      while (v10);
    }
    double v6 = *(double *)(v2 + 32);
    double v7 = *(double *)(v5 + 48);
    int v8 = *(unsigned __int8 *)(v2 + 40);
    int v9 = *(unsigned __int8 *)(v5 + 56);
    *(double *)a2 = v6;
    BOOL v10 = fabs(v6) == INFINITY || v8 == 0;
    char v11 = !v10;
    *(unsigned char *)(a2 + 8) = v11;
    *(double *)(a2 + 16) = v7;
    BOOL v13 = fabs(v7) != INFINITY && v9 != 0;
    *(unsigned char *)(a2 + 24) = v13;
  }
  else
  {
    *(void *)a2 = 0;
    *(unsigned char *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(unsigned char *)(a2 + 24) = 0;
  }
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMultiInterval::Contains(pxrInternal__aapl__pxrReserved__::GfMultiInterval *this, double a2)
{
  uint64_t v4 = pxrInternal__aapl__pxrReserved__::GfMultiInterval::lower_bound(this, a2);
  if ((char *)this + 8 != v4)
  {
    double v5 = *((double *)v4 + 4);
    if (v5 < a2 || v5 == a2 && v4[40])
    {
      double v6 = *((double *)v4 + 6);
      if (v6 > a2 || v6 == a2 && v4[56]) {
        return 1;
      }
    }
  }
  if (*(char **)this == v4) {
    return 0;
  }
  uint64_t v7 = *(void *)v4;
  if (*(void *)v4)
  {
    do
    {
      uint64_t v8 = v7;
      uint64_t v7 = *(void *)(v7 + 8);
    }
    while (v7);
  }
  else
  {
    do
    {
      uint64_t v8 = *((void *)v4 + 2);
      BOOL v9 = *(void *)v8 == (void)v4;
      uint64_t v4 = (char *)v8;
    }
    while (v9);
  }
  if (((double v10 = *(double *)(v8 + 32), v10 < a2) || v10 == a2 && *(unsigned char *)(v8 + 40))
    && ((double v11 = *(double *)(v8 + 48), v11 > a2) || v11 == a2 && *(unsigned char *)(v8 + 56)))
  {
    return 1;
  }
  else
  {
    return 0;
  }
}

char *pxrInternal__aapl__pxrReserved__::GfMultiInterval::lower_bound(pxrInternal__aapl__pxrReserved__::GfMultiInterval *this, double a2)
{
  double v7 = a2;
  BOOL v8 = fabs(a2) != INFINITY;
  double v9 = a2;
  BOOL v10 = v8;
  uint64_t v2 = (char *)this + 8;
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    do
    {
      int v4 = sub_2168A65D4((uint64_t)(v3 + 4), (uint64_t)&v7);
      double v5 = v3 + 1;
      if (!v4)
      {
        double v5 = v3;
        uint64_t v2 = (char *)v3;
      }
      uint64_t v3 = (void *)*v5;
    }
    while (*v5);
  }
  return v2;
}

BOOL pxrInternal__aapl__pxrReserved__::GfMultiInterval::Contains(void *a1, uint64_t a2)
{
  double v2 = *(double *)(a2 + 16);
  if (*(double *)a2 > v2) {
    return 0;
  }
  if (*(double *)a2 == v2)
  {
    BOOL v5 = !*(unsigned char *)(a2 + 8) || *(unsigned char *)(a2 + 24) == 0;
    if (v5) {
      return 0;
    }
  }
  double v6 = a1 + 1;
  double v7 = (void *)a1[1];
  if (v7)
  {
    BOOL v8 = a1 + 1;
    do
    {
      int v9 = sub_2168A65D4((uint64_t)(v7 + 4), a2);
      BOOL v10 = v7 + 1;
      if (!v9)
      {
        BOOL v10 = v7;
        BOOL v8 = v7;
      }
      double v7 = (void *)*v10;
    }
    while (*v10);
    if (v8 != v6)
    {
      double v6 = v8;
      if (sub_2168A5674((long long *)v8 + 2, a2)) {
        return 1;
      }
    }
  }
  if (v6 == (uint64_t *)*a1) {
    return 0;
  }
  uint64_t v11 = *v6;
  if (*v6)
  {
    do
    {
      uint64_t v12 = v11;
      uint64_t v11 = *(void *)(v11 + 8);
    }
    while (v11);
  }
  else
  {
    do
    {
      uint64_t v12 = v6[2];
      BOOL v5 = *(void *)v12 == (void)v6;
      double v6 = (uint64_t *)v12;
    }
    while (v5);
  }
  return sub_2168A5674((long long *)(v12 + 32), a2);
}

BOOL sub_2168A5674(long long *a1, uint64_t a2)
{
  long long v3 = a1[1];
  long long v5 = *a1;
  long long v6 = v3;
  sub_2168A6A74((uint64_t)&v5, a2);
  return *(double *)&v5 == *(double *)a2
      && BYTE8(v5) == *(unsigned __int8 *)(a2 + 8)
      && *(double *)&v6 == *(double *)(a2 + 16)
      && BYTE8(v6) == *(unsigned __int8 *)(a2 + 24);
}

BOOL pxrInternal__aapl__pxrReserved__::GfMultiInterval::Contains(pxrInternal__aapl__pxrReserved__::GfMultiInterval *this, const pxrInternal__aapl__pxrReserved__::GfMultiInterval *a2)
{
  if (!*((void *)a2 + 2)) {
    return 0;
  }
  long long v6 = *(const pxrInternal__aapl__pxrReserved__::GfMultiInterval **)a2;
  double v7 = (const pxrInternal__aapl__pxrReserved__::GfMultiInterval *)((char *)a2 + 8);
  if (v6 == (const pxrInternal__aapl__pxrReserved__::GfMultiInterval *)((char *)a2 + 8)) {
    return 1;
  }
  do
  {
    uint64_t v3 = sub_2168A5778(&v6);
    BOOL v4 = pxrInternal__aapl__pxrReserved__::GfMultiInterval::Contains(this, v3);
    if (!v4) {
      break;
    }
    sub_2168A5808(&v6);
  }
  while (v6 != v7);
  return v4;
}

uint64_t sub_2168A5778(void *a1)
{
  if (*a1 == a1[1])
  {
    double v2 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/iterator.h", 47);
    v4[0] = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/iterator.h", (uint64_t)v2, 0x2Fu);
    v4[1] = "operator*";
    v4[2] = 271;
    v4[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__::GfMultiInterv"
            "al>::operator*() [T = const pxrInternal__aapl__pxrReserved__::GfMultiInterval, Reverse = false]";
    char v5 = 0;
    int v6 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v4, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", v3);
  }
  return *a1 + 32;
}

void *sub_2168A5808(void *a1)
{
  double v2 = (void *)*a1;
  if (*a1 == a1[1])
  {
    v7[0] = "tf/iterator.h";
    v7[1] = "operator++";
    v7[2] = 250;
    double v7[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__:"
            ":GfMultiInterval>::operator++() [T = const pxrInternal__aapl__pxrReserved__::GfMultiInterval, Reverse = false]";
    char v8 = 0;
    int v9 = 1;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v7, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    uint64_t v3 = (void *)v2[1];
    if (v3)
    {
      do
      {
        BOOL v4 = v3;
        uint64_t v3 = (void *)*v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        BOOL v4 = (void *)v2[2];
        BOOL v5 = *v4 == (void)v2;
        double v2 = v4;
      }
      while (!v5);
    }
    *a1 = v4;
  }
  return a1;
}

char *pxrInternal__aapl__pxrReserved__::GfMultiInterval::upper_bound(pxrInternal__aapl__pxrReserved__::GfMultiInterval *this, double a2)
{
  double v7 = a2;
  BOOL v8 = fabs(a2) != INFINITY;
  double v9 = a2;
  BOOL v10 = v8;
  double v2 = (char *)this + 8;
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    do
    {
      int v4 = sub_2168A65D4((uint64_t)&v7, (uint64_t)(v3 + 4));
      BOOL v5 = v3 + 1;
      if (v4)
      {
        BOOL v5 = v3;
        double v2 = (char *)v3;
      }
      uint64_t v3 = (void *)*v5;
    }
    while (*v5);
  }
  return v2;
}

char *pxrInternal__aapl__pxrReserved__::GfMultiInterval::GetNextNonContainingInterval(pxrInternal__aapl__pxrReserved__::GfMultiInterval *this, double a2)
{
  double v7 = a2;
  char v8 = 0;
  double v9 = a2;
  BOOL v10 = fabs(a2) != INFINITY;
  double v2 = (char *)this + 8;
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    do
    {
      int v4 = sub_2168A65D4((uint64_t)&v7, (uint64_t)(v3 + 4));
      BOOL v5 = v3 + 1;
      if (v4)
      {
        BOOL v5 = v3;
        double v2 = (char *)v3;
      }
      uint64_t v3 = (void *)*v5;
    }
    while (*v5);
  }
  return v2;
}

double *pxrInternal__aapl__pxrReserved__::GfMultiInterval::GetPriorNonContainingInterval(pxrInternal__aapl__pxrReserved__::GfMultiInterval *this, double a2, uint64_t a3, char *a4)
{
  uint64_t v21 = *(char **)&a2;
  LOBYTE(v22) = fabs(a2) != INFINITY;
  uint64_t v23 = *(void *)&a2;
  LOBYTE(v24) = (_BYTE)v22;
  int v6 = (double *)((char *)this + 8);
  double v7 = (void *)*((void *)this + 1);
  char v8 = (double *)((char *)this + 8);
  if (v7)
  {
    char v8 = (double *)((char *)this + 8);
    do
    {
      int v9 = sub_2168A65D4((uint64_t)(v7 + 4), (uint64_t)&v21);
      BOOL v10 = v7 + 1;
      if (!v9)
      {
        BOOL v10 = v7;
        char v8 = (double *)v7;
      }
      double v7 = (void *)*v10;
    }
    while (*v10);
  }
  if (v8 != *(double **)this)
  {
    uint64_t v11 = *(double **)v8;
    if (*(void *)v8)
    {
      do
      {
        uint64_t v12 = v11;
        uint64_t v11 = (double *)*((void *)v11 + 1);
      }
      while (v11);
    }
    else
    {
      do
      {
        uint64_t v12 = (double *)*((void *)v8 + 2);
        BOOL v13 = *(void *)v12 == (void)v8;
        char v8 = v12;
      }
      while (v13);
    }
    double v14 = v12[4];
    if ((v14 < a2 || v14 == a2 && *((unsigned char *)v12 + 40))
      && ((double v15 = v12[6], v15 > a2) || v15 == a2 && *((unsigned char *)v12 + 56)))
    {
      if (v12 != *(double **)this)
      {
        uint64_t v16 = *(double **)v12;
        if (*(void *)v12)
        {
          do
          {
            int v6 = v16;
            uint64_t v16 = (double *)*((void *)v16 + 1);
          }
          while (v16);
        }
        else
        {
          do
          {
            int v6 = (double *)*((void *)v12 + 2);
            BOOL v13 = *(void *)v6 == (void)v12;
            uint64_t v12 = v6;
          }
          while (v13);
        }
        double v17 = v6[4];
        if (v17 < a2 || v17 == a2 && *((unsigned char *)v6 + 40))
        {
          double v18 = v6[6];
          if (v18 > a2 || v18 == a2 && *((unsigned char *)v6 + 56))
          {
            uint64_t v21 = "gf/multiInterval.cpp";
            uint64_t v22 = "GetPriorNonContainingInterval";
            uint64_t v23 = 166;
            uint64_t v24 = "GfMultiInterval::const_iterator pxrInternal__aapl__pxrReserved__::GfMultiInterval::GetPriorNonContaini"
                  "ngInterval(double) const";
            char v25 = 0;
            v26[0] = *(_DWORD *)v20;
            *(_DWORD *)((char *)v26 + 3) = *(_DWORD *)&v20[3];
            *(_DWORD *)((char *)&v26[1] + 3) = 4;
            pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)&v21, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", a4, "!i->Contains(x)");
          }
        }
      }
    }
    else
    {
      return v12;
    }
  }
  return v6;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMultiInterval::GetContainingInterval(pxrInternal__aapl__pxrReserved__::GfMultiInterval *this, double a2)
{
  NextNonContainingInterval = pxrInternal__aapl__pxrReserved__::GfMultiInterval::GetNextNonContainingInterval(this, a2);
  if (*(char **)this == NextNonContainingInterval) {
    return (uint64_t)this + 8;
  }
  uint64_t v5 = (uint64_t)NextNonContainingInterval;
  uint64_t v6 = *(void *)NextNonContainingInterval;
  if (*(void *)NextNonContainingInterval)
  {
    do
    {
      uint64_t result = v6;
      uint64_t v6 = *(void *)(v6 + 8);
    }
    while (v6);
  }
  else
  {
    do
    {
      uint64_t result = *(void *)(v5 + 16);
      BOOL v8 = *(void *)result == v5;
      uint64_t v5 = result;
    }
    while (v8);
  }
  double v9 = *(double *)(result + 32);
  if (v9 >= a2 && (v9 != a2 || !*(unsigned char *)(result + 40))) {
    return (uint64_t)this + 8;
  }
  double v10 = *(double *)(result + 48);
  if (v10 <= a2 && (v10 != a2 || !*(unsigned char *)(result + 56))) {
    return (uint64_t)this + 8;
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::GfMultiInterval::Add(uint64_t *this, const pxrInternal__aapl__pxrReserved__::GfMultiInterval **a2)
{
  int v4 = *a2;
  uint64_t v5 = (const pxrInternal__aapl__pxrReserved__::GfMultiInterval *)(a2 + 1);
  if (v4 != (const pxrInternal__aapl__pxrReserved__::GfMultiInterval *)(a2 + 1))
  {
    double v2 = this;
    do
    {
      uint64_t v3 = sub_2168A5778(&v4);
      pxrInternal__aapl__pxrReserved__::GfMultiInterval::Add(v2, v3);
      this = sub_2168A5808(&v4);
    }
    while (v4 != v5);
  }
  return this;
}

BOOL sub_2168A5C70(long long *a1, uint64_t a2)
{
  long long v2 = a1[1];
  long long v4 = *a1;
  long long v5 = v2;
  sub_2168A6A74((uint64_t)&v4, a2);
  if (*(double *)&v4 > *(double *)&v5) {
    return 0;
  }
  if (*(double *)&v4 != *(double *)&v5) {
    return 1;
  }
  if (!BYTE8(v4)) {
    return 0;
  }
  return BYTE8(v5) != 0;
}

uint64_t sub_2168A5CD4(uint64_t result, uint64_t a2)
{
  double v2 = *(double *)result;
  double v3 = *(double *)(result + 16);
  if (*(double *)result > v3 || *(double *)result == v3 && (!*(unsigned char *)(result + 8) || !*(unsigned char *)(result + 24)))
  {
    *(void *)uint64_t result = *(void *)a2;
    *(unsigned char *)(result + 8) = *(unsigned char *)(a2 + 8);
    *(void *)(result + 16) = *(void *)(a2 + 16);
    goto LABEL_3;
  }
  double v5 = *(double *)a2;
  double v6 = *(double *)(a2 + 16);
  if (*(double *)a2 <= v6 && (*(double *)a2 != v6 || *(unsigned char *)(a2 + 8) && *(unsigned char *)(a2 + 24)))
  {
    if (v2 <= v5)
    {
      if (v2 != v5)
      {
LABEL_18:
        double v8 = *(double *)(a2 + 16);
        if (v3 >= v8)
        {
          if (v3 != v8) {
            return result;
          }
          char v4 = *(unsigned char *)(result + 24) | *(unsigned char *)(a2 + 24);
          goto LABEL_4;
        }
        *(double *)(result + 16) = v8;
LABEL_3:
        char v4 = *(unsigned char *)(a2 + 24);
LABEL_4:
        *(unsigned char *)(result + 24) = v4;
        return result;
      }
      char v7 = *(unsigned char *)(result + 8) | *(unsigned char *)(a2 + 8);
    }
    else
    {
      *(double *)uint64_t result = v5;
      char v7 = *(unsigned char *)(a2 + 8);
    }
    *(unsigned char *)(result + 8) = v7;
    goto LABEL_18;
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::GfMultiInterval::Remove(void *this, const pxrInternal__aapl__pxrReserved__::GfMultiInterval **a2)
{
  char v4 = *a2;
  double v5 = (const pxrInternal__aapl__pxrReserved__::GfMultiInterval *)(a2 + 1);
  if (v4 != (const pxrInternal__aapl__pxrReserved__::GfMultiInterval *)(a2 + 1))
  {
    uint64_t v2 = (uint64_t)this;
    do
    {
      uint64_t v3 = sub_2168A5778(&v4);
      pxrInternal__aapl__pxrReserved__::GfMultiInterval::Remove(v2, v3);
      this = sub_2168A5808(&v4);
    }
    while (v4 != v5);
  }
  return this;
}

void pxrInternal__aapl__pxrReserved__::GfMultiInterval::Remove(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)(a2 + 16);
  if (*(double *)a2 <= v2)
  {
    if (*(double *)a2 != v2 || (*(unsigned char *)(a2 + 8) ? (BOOL v5 = *(unsigned char *)(a2 + 24) == 0) : (BOOL v5 = 1), !v5))
    {
      double v6 = (void *)(a1 + 8);
      char v7 = *(void **)(a1 + 8);
      if (v7)
      {
        uint64_t v8 = a1 + 8;
        do
        {
          int v9 = sub_2168A65D4((uint64_t)(v7 + 4), a2);
          double v10 = v7 + 1;
          if (!v9)
          {
            double v10 = v7;
            uint64_t v8 = (uint64_t)v7;
          }
          char v7 = (void *)*v10;
        }
        while (*v10);
        if ((void *)v8 != v6)
        {
          do
          {
            if (!sub_2168A5C70((long long *)a2, v8 + 32)) {
              break;
            }
            uint64_t v11 = *(void **)(v8 + 8);
            uint64_t v12 = (void *)v8;
            if (v11)
            {
              do
              {
                BOOL v13 = v11;
                uint64_t v11 = (void *)*v11;
              }
              while (v11);
            }
            else
            {
              do
              {
                BOOL v13 = (void *)v12[2];
                BOOL v5 = *v13 == (void)v12;
                uint64_t v12 = v13;
              }
              while (!v5);
            }
            sub_2168A5F74(v8, a2, (uint64_t **)a1);
            uint64_t v8 = (uint64_t)v13;
          }
          while (v13 != v6);
        }
        double v14 = (void *)*v6;
        if (*v6)
        {
          do
          {
            int v15 = sub_2168A65D4(a2, (uint64_t)(v14 + 4));
            uint64_t v16 = v14 + 1;
            if (v15)
            {
              uint64_t v16 = v14;
              double v6 = v14;
            }
            double v14 = (void *)*v16;
          }
          while (*v16);
        }
      }
      if (v6 != *(void **)a1)
      {
        double v17 = (void *)*v6;
        if (*v6)
        {
          do
          {
            double v18 = v17;
            double v17 = (void *)v17[1];
          }
          while (v17);
        }
        else
        {
          do
          {
            double v18 = (void *)v6[2];
            BOOL v5 = *v18 == (void)v6;
            double v6 = v18;
          }
          while (v5);
        }
        sub_2168A5F74((uint64_t)v18, a2, (uint64_t **)a1);
      }
    }
  }
}

void sub_2168A5F74(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  if (sub_2168A5C70((long long *)(a1 + 32), a2))
  {
    double v6 = *(double *)(a1 + 32);
    double v7 = *(double *)a2;
    int v8 = *(unsigned __int8 *)(a1 + 40);
    int v9 = *(unsigned __int8 *)(a2 + 8);
    *(double *)&long long v28 = v6;
    BOOL v11 = fabs(v6) != INFINITY && v8 != 0;
    BYTE8(v28) = v11;
    double v29 = v7;
    BOOL v13 = fabs(v7) != INFINITY && v9 == 0;
    BOOL v30 = v13;
    double v14 = *(double *)(a2 + 16);
    double v15 = *(double *)(a1 + 48);
    int v16 = *(unsigned __int8 *)(a2 + 24);
    int v17 = *(unsigned __int8 *)(a1 + 56);
    *(double *)&long long v25 = v14;
    BOOL v19 = fabs(v14) != INFINITY && v16 == 0;
    BYTE8(v25) = v19;
    double v26 = v15;
    BOOL v21 = fabs(v15) != INFINITY && v17 != 0;
    BOOL v27 = v21;
    if (v6 <= v7)
    {
      int v22 = v11 && v13;
      if (v6 != v7 || v22 != 0) {
        sub_2168A6E70(a3, (void *)a1, (uint64_t)&v28, &v28);
      }
    }
    if (v14 <= v15 && (v14 != v15 || v19 && v21)) {
      sub_2168A6E70(a3, (void *)a1, (uint64_t)&v25, &v25);
    }
    sub_2167AE00C(a3, (uint64_t *)a1);
    operator delete((void *)a1);
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::GfMultiInterval::GetComplement@<X0>(uint64_t **this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = 0;
  uint64_t v3 = (void *)(a2 + 8);
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = a2 + 8;
  BYTE8(v16) = 0;
  double v17 = INFINITY;
  BOOL v18 = 0;
  BOOL v5 = *this;
  uint64_t result = (uint64_t *)(this + 1);
  double v14 = v5;
  double v15 = result;
  *(void *)&long long v16 = 0xFFF0000000000000;
  while (v14 != v15)
  {
    double v6 = *(double *)(*sub_2168A6240(&v14) + 32);
    int v7 = *(unsigned __int8 *)(*sub_2168A6240(&v14) + 40);
    BOOL v9 = fabs(v6) != INFINITY && v7 == 0;
    double v17 = v6;
    BOOL v18 = v9;
    if (*(double *)&v16 <= v6)
    {
      if (*(double *)&v16 != v6) {
        goto LABEL_14;
      }
      if (!BYTE8(v16)) {
        BOOL v9 = 0;
      }
      if (v9) {
LABEL_14:
      }
        sub_2168A6E70((uint64_t **)a2, v3, (uint64_t)&v16, &v16);
    }
    *(void *)&long long v16 = 0xFFF0000000000000;
    BYTE8(v16) = 0;
    double v17 = INFINITY;
    BOOL v18 = 0;
    double v10 = *(double *)(*sub_2168A6240(&v14) + 48);
    int v11 = *(unsigned __int8 *)(*sub_2168A6240(&v14) + 56);
    BOOL v13 = fabs(v10) != INFINITY && v11 == 0;
    *(double *)&long long v16 = v10;
    BYTE8(v16) = v13;
    uint64_t result = sub_2168A62CC(&v14);
  }
  if (*(double *)&v16 <= v17 && (*(double *)&v16 != v17 || BYTE8(v16) && v18)) {
    return sub_2168A6E70((uint64_t **)a2, v3, (uint64_t)&v16, &v16);
  }
  return result;
}

void sub_2168A6224(_Unwind_Exception *a1)
{
  sub_2167FB780(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void *sub_2168A6240(void *result)
{
  if (*result == result[1])
  {
    uint64_t v1 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/iterator.h", 47);
    v3[0] = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/iterator.h", (uint64_t)v1, 0x2Fu);
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const std::set<pxrInternal__aapl__pxrReserved__::GfIn"
            "terval>>::operator->() [T = const std::set<pxrInternal__aapl__pxrReserved__::GfInterval>, Reverse = false]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", v2);
  }
  return result;
}

void *sub_2168A62CC(void *a1)
{
  double v2 = (void *)*a1;
  if (*a1 == a1[1])
  {
    v7[0] = "tf/iterator.h";
    v7[1] = "operator++";
    v7[2] = 250;
    double v7[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::set<pxrInternal__aapl__pxrRe"
            "served__::GfInterval>>::operator++() [T = const std::set<pxrInternal__aapl__pxrReserved__::GfInterval>, Reverse = false]";
    char v8 = 0;
    int v9 = 1;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v7, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    uint64_t v3 = (void *)v2[1];
    if (v3)
    {
      do
      {
        char v4 = v3;
        uint64_t v3 = (void *)*v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        char v4 = (void *)v2[2];
        BOOL v5 = *v4 == (void)v2;
        double v2 = v4;
      }
      while (!v5);
    }
    *a1 = v4;
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::GfMultiInterval::Intersect(pxrInternal__aapl__pxrReserved__::GfMultiInterval *this, uint64_t **a2)
{
  pxrInternal__aapl__pxrReserved__::GfMultiInterval::GetComplement(a2, (uint64_t)v3);
  pxrInternal__aapl__pxrReserved__::GfMultiInterval::Remove(this, v3);
  sub_2167FB780((uint64_t)v3, (void *)v3[1]);
}

void sub_2168A63C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

void pxrInternal__aapl__pxrReserved__::GfMultiInterval::Intersect(pxrInternal__aapl__pxrReserved__::GfMultiInterval *a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::GfMultiInterval::GfMultiInterval((uint64_t *)v3, a2);
  pxrInternal__aapl__pxrReserved__::GfMultiInterval::Intersect(a1, v3);
  sub_2167FB780((uint64_t)v3, v3[1]);
}

void sub_2168A6424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::GfMultiInterval::_AssertInvariants(uint64_t this, uint64_t a2, char *a3)
{
  uint64_t v3 = (void *)(this + 8);
  char v4 = *(void **)this;
  if (*(void *)this != this + 8)
  {
    BOOL v5 = 0;
    do
    {
      double v6 = (long long *)(v4 + 4);
      double v7 = *((double *)v4 + 4);
      double v8 = *((double *)v4 + 6);
      if (v7 > v8 || v7 == v8 && (!*((unsigned char *)v4 + 40) || !*((unsigned char *)v4 + 56)))
      {
        double v14 = "gf/multiInterval.cpp";
        double v15 = "_AssertInvariants";
        uint64_t v16 = 341;
        double v17 = "void pxrInternal__aapl__pxrReserved__::GfMultiInterval::_AssertInvariants() const";
        char v18 = 0;
        *(_DWORD *)BOOL v19 = *(_DWORD *)v13;
        *(_DWORD *)&v19[3] = *(_DWORD *)&v13[3];
        int v20 = 4;
        uint64_t v12 = "!i->IsEmpty()";
        goto LABEL_20;
      }
      if (v5)
      {
        if ((sub_2168A65D4((uint64_t)v5, (uint64_t)(v4 + 4)) & 1) == 0)
        {
          double v14 = "gf/multiInterval.cpp";
          double v15 = "_AssertInvariants";
          uint64_t v16 = 345;
          double v17 = "void pxrInternal__aapl__pxrReserved__::GfMultiInterval::_AssertInvariants() const";
          char v18 = 0;
          int v20 = 4;
          uint64_t v12 = "*last < *i";
          goto LABEL_20;
        }
        this = sub_2168A5C70(v5, (uint64_t)(v4 + 4));
        if (this)
        {
          double v14 = "gf/multiInterval.cpp";
          double v15 = "_AssertInvariants";
          uint64_t v16 = 346;
          double v17 = "void pxrInternal__aapl__pxrReserved__::GfMultiInterval::_AssertInvariants() const";
          char v18 = 0;
          int v20 = 4;
          uint64_t v12 = "!last->Intersects(*i)";
LABEL_20:
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)&v14, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", a3, v12);
        }
      }
      int v9 = (void *)v4[1];
      if (v9)
      {
        do
        {
          double v10 = v9;
          int v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          double v10 = (void *)v4[2];
          BOOL v11 = *v10 == (void)v4;
          char v4 = v10;
        }
        while (!v11);
      }
      BOOL v5 = v6;
      char v4 = v10;
    }
    while (v10 != v3);
  }
  return this;
}

uint64_t sub_2168A65D4(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)a1;
  double v3 = *(double *)a2;
  BOOL v4 = *(double *)a1 < *(double *)a2;
  if (*(double *)a1 != *(double *)a2) {
    return v4;
  }
  int v5 = *(unsigned __int8 *)(a1 + 8);
  int v6 = *(unsigned __int8 *)(a2 + 8);
  if (v5 == v6)
  {
    double v2 = *(double *)(a1 + 16);
    double v3 = *(double *)(a2 + 16);
    BOOL v4 = v2 < v3;
    if (v2 == v3)
    {
      int v5 = *(unsigned __int8 *)(a1 + 24);
      int v6 = *(unsigned __int8 *)(a2 + 24);
      if (v5 == v6) {
        return 0;
      }
      goto LABEL_9;
    }
    return v4;
  }
LABEL_9:
  if (v5) {
    BOOL v8 = v6 == 0;
  }
  else {
    BOOL v8 = 0;
  }
  unsigned int v9 = v8;
  if (v2 >= v3) {
    return v9;
  }
  else {
    return 1;
  }
}

void pxrInternal__aapl__pxrReserved__::GfMultiInterval::ArithmeticAdd(uint64_t *a1, uint64_t a2)
{
  v14[0] = 0;
  v14[1] = 0;
  BOOL v13 = v14;
  uint64_t v11 = *a1;
  uint64_t v12 = a1 + 1;
  while ((uint64_t *)v11 != v12)
  {
    BOOL v4 = (long long *)sub_2168A6758(&v11);
    long long v5 = v4[1];
    long long v9 = *v4;
    long long v10 = v5;
    double v6 = *(double *)(a2 + 16);
    if (*(double *)a2 > v6) {
      goto LABEL_10;
    }
    char v7 = *(unsigned char *)(a2 + 8);
    if (*(double *)a2 != v6)
    {
      char v8 = *(unsigned char *)(a2 + 24);
LABEL_9:
      *(double *)&long long v9 = *(double *)a2 + *(double *)&v9;
      *(double *)&long long v10 = v6 + *(double *)&v10;
      BYTE8(v9) &= v7;
      BYTE8(v10) &= v8;
      goto LABEL_10;
    }
    if (*(unsigned char *)(a2 + 8) && *(unsigned char *)(a2 + 24))
    {
      char v8 = 1;
      char v7 = 1;
      goto LABEL_9;
    }
LABEL_10:
    pxrInternal__aapl__pxrReserved__::GfMultiInterval::Add((uint64_t *)&v13, (uint64_t)&v9);
    sub_2168A67E8(&v11);
  }
  sub_2168A6B2C(a1, (uint64_t)&v13);
  sub_2167FB780((uint64_t)&v13, v14[0]);
}

void sub_2168A673C(_Unwind_Exception *a1)
{
  sub_2167FB780(v1 - 40, *(void **)(v1 - 32));
  _Unwind_Resume(a1);
}

uint64_t sub_2168A6758(void *a1)
{
  if (*a1 == a1[1])
  {
    double v2 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/iterator.h", 47);
    v4[0] = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/iterator.h", (uint64_t)v2, 0x2Fu);
    v4[1] = "operator*";
    v4[2] = 271;
    v4[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::GfMultiInterval>::o"
            "perator*() [T = pxrInternal__aapl__pxrReserved__::GfMultiInterval, Reverse = false]";
    char v5 = 0;
    int v6 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v4, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", v3);
  }
  return *a1 + 32;
}

void *sub_2168A67E8(void *a1)
{
  double v2 = (void *)*a1;
  if (*a1 == a1[1])
  {
    v7[0] = "tf/iterator.h";
    v7[1] = "operator++";
    v7[2] = 250;
    double v7[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::GfMul"
            "tiInterval>::operator++() [T = pxrInternal__aapl__pxrReserved__::GfMultiInterval, Reverse = false]";
    char v8 = 0;
    int v9 = 1;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v7, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    double v3 = (void *)v2[1];
    if (v3)
    {
      do
      {
        BOOL v4 = v3;
        double v3 = (void *)*v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        BOOL v4 = (void *)v2[2];
        BOOL v5 = *v4 == (void)v2;
        double v2 = v4;
      }
      while (!v5);
    }
    *a1 = v4;
  }
  return a1;
}

uint64_t *sub_2168A6970()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  BOOL v5 = 0;
  int v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C5D0, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74C5D0, (char *)0x18, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    int v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168A6A30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_2168A6A74(uint64_t result, uint64_t a2)
{
  double v2 = *(double *)result;
  double v3 = *(double *)(result + 16);
  if (*(double *)result > v3 || *(double *)result == v3 && (!*(unsigned char *)(result + 8) || !*(unsigned char *)(result + 24))) {
    return result;
  }
  double v4 = *(double *)a2;
  double v5 = *(double *)(a2 + 16);
  if (*(double *)a2 > v5 || *(double *)a2 == v5 && (!*(unsigned char *)(a2 + 8) || !*(unsigned char *)(a2 + 24)))
  {
    *(void *)uint64_t result = 0;
    *(unsigned char *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    return result;
  }
  if (v2 < v4)
  {
    *(double *)uint64_t result = v4;
    char v6 = *(unsigned char *)(a2 + 8);
LABEL_15:
    *(unsigned char *)(result + 8) = v6;
    goto LABEL_16;
  }
  if (v2 == v4)
  {
    char v6 = *(unsigned char *)(result + 8) & *(unsigned char *)(a2 + 8);
    goto LABEL_15;
  }
LABEL_16:
  double v7 = *(double *)(a2 + 16);
  if (v3 <= v7)
  {
    if (v3 != v7) {
      return result;
    }
    char v8 = *(unsigned char *)(result + 24) & *(unsigned char *)(a2 + 24);
  }
  else
  {
    *(double *)(result + 16) = v7;
    char v8 = *(unsigned char *)(a2 + 24);
  }
  *(unsigned char *)(result + 24) = v8;
  return result;
}

uint64_t *sub_2168A6B2C(uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = *(void *)a2;
  *(void *)a2 = v2;
  uint64_t v5 = result[1];
  uint64_t v4 = result[2];
  double v3 = result + 1;
  *(_OWORD *)(result + 1) = *(_OWORD *)(a2 + 8);
  *(void *)(a2 + 8) = v5;
  *(void *)(a2 + 16) = v4;
  if (result[2]) {
    uint64_t result = (uint64_t *)(*v3 + 16);
  }
  *uint64_t result = (uint64_t)v3;
  char v6 = (void *)(*(void *)(a2 + 8) + 16);
  if (!v4) {
    char v6 = (void *)a2;
  }
  *char v6 = a2 + 8;
  return result;
}

uint64_t sub_2168A6B84(uint64_t result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = result;
    do
    {
      uint64_t v5 = (void *)a2[1];
      char v6 = a2;
      if (v5)
      {
        do
        {
          double v7 = v5;
          uint64_t v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          double v7 = (void *)v6[2];
          BOOL v8 = *v7 == (void)v6;
          char v6 = v7;
        }
        while (!v8);
      }
      uint64_t result = sub_2168A6C04(v4, (uint64_t)(a2 + 4));
      a2 = v7;
    }
    while (v7 != a3);
  }
  return result;
}

uint64_t sub_2168A6C04(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = 0;
  char v6 = 0;
  uint64_t result = sub_2168A6C84((uint64_t)&v5, a2, a2 + 16);
  unint64_t v4 = bswap64(0x9E3779B97F4A7C55 * v5);
  if (*(unsigned char *)(a1 + 8)) {
    v4 += (*(void *)a1 + v4 + (*(void *)a1 + v4) * (*(void *)a1 + v4)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v4;
  return result;
}

uint64_t sub_2168A6C84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v3 = *(double *)a2;
  if (*(double *)a2 == 0.0) {
    double v3 = 0.0;
  }
  unint64_t v4 = bswap64(0x9E3779B97F4A7C55* (*(unsigned __int8 *)(a2 + 8)+ ((*(void *)&v3+ *(unsigned __int8 *)(a2 + 8)+ (*(void *)&v3 + *(unsigned __int8 *)(a2 + 8))* (*(void *)&v3 + (unint64_t)*(unsigned __int8 *)(a2 + 8))) >> 1)));
  if (*(unsigned char *)(a1 + 8)) {
    v4 += (*(void *)a1 + v4 + (*(void *)a1 + v4) * (*(void *)a1 + v4)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v4;
  return sub_2168A6CF0(a1, a3);
}

uint64_t sub_2168A6CF0(uint64_t result, uint64_t a2)
{
  double v2 = *(double *)a2;
  if (*(double *)a2 == 0.0) {
    double v2 = 0.0;
  }
  unint64_t v3 = bswap64(0x9E3779B97F4A7C55* (*(unsigned __int8 *)(a2 + 8)+ ((*(void *)&v2+ *(unsigned __int8 *)(a2 + 8)+ (*(void *)&v2 + *(unsigned __int8 *)(a2 + 8))* (*(void *)&v2 + (unint64_t)*(unsigned __int8 *)(a2 + 8))) >> 1)));
  if (*(unsigned char *)(result + 8)) {
    v3 += (*(void *)result + v3 + (*(void *)result + v3) * (*(void *)result + v3)) >> 1;
  }
  else {
    *(unsigned char *)(result + 8) = 1;
  }
  *(void *)uint64_t result = v3;
  return result;
}

uint64_t *sub_2168A6D58(uint64_t **a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v5 = (void **)sub_2168A6DDC((uint64_t)a1, &v10, a2);
  char v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    double v7 = (uint64_t **)v5;
    char v6 = (uint64_t *)operator new(0x40uLL);
    long long v8 = a3[1];
    *((_OWORD *)v6 + 2) = *a3;
    *((_OWORD *)v6 + 3) = v8;
    sub_21677B358(a1, v10, v7, v6);
  }
  return v6;
}

void *sub_2168A6DDC(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  unint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        double v7 = v4;
        uint64_t v8 = (uint64_t)(v4 + 4);
        if (!sub_2168A65D4(a3, (uint64_t)(v4 + 4))) {
          break;
        }
        unint64_t v4 = (void *)*v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!sub_2168A65D4(v8, a3)) {
        break;
      }
      uint64_t v5 = v7 + 1;
      unint64_t v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    double v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t *sub_2168A6E70(uint64_t **a1, void *a2, uint64_t a3, _OWORD *a4)
{
  char v6 = sub_2168A6EF8(a1, a2, &v12, &v11, a3);
  double v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    double v7 = (uint64_t *)operator new(0x40uLL);
    long long v9 = a4[1];
    *((_OWORD *)v7 + 2) = *a4;
    *((_OWORD *)v7 + 3) = v9;
    sub_21677B358(a1, v12, v8, v7);
  }
  return v7;
}

uint64_t *sub_2168A6EF8(void *a1, void *a2, void *a3, uint64_t *a4, uint64_t a5)
{
  long long v9 = a1 + 1;
  if (a1 + 1 != a2 && !sub_2168A65D4(a5, (uint64_t)(a2 + 4)))
  {
    if (!sub_2168A65D4((uint64_t)(a2 + 4), a5))
    {
      *a3 = a2;
      *a4 = (uint64_t)a2;
      return a4;
    }
    a4 = a2 + 1;
    uint64_t v13 = a2[1];
    if (v13)
    {
      double v14 = (void *)a2[1];
      do
      {
        double v15 = v14;
        double v14 = (void *)*v14;
      }
      while (v14);
    }
    else
    {
      char v18 = a2;
      do
      {
        double v15 = (void *)v18[2];
        BOOL v17 = *v15 == (void)v18;
        char v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!sub_2168A65D4(a5, (uint64_t)(v15 + 4))) {
        goto LABEL_28;
      }
      uint64_t v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  if ((void *)*a1 == a2)
  {
    uint64_t v12 = a2;
LABEL_16:
    if (*a2)
    {
      *a3 = v12;
      return v12 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  uint64_t v11 = (void *)*a2;
  if (*a2)
  {
    do
    {
      uint64_t v12 = v11;
      uint64_t v11 = (void *)v11[1];
    }
    while (v11);
  }
  else
  {
    uint64_t v16 = a2;
    do
    {
      uint64_t v12 = (void *)v16[2];
      BOOL v17 = *v12 == (void)v16;
      uint64_t v16 = v12;
    }
    while (v17);
  }
  if (sub_2168A65D4((uint64_t)(v12 + 4), a5)) {
    goto LABEL_16;
  }
LABEL_28:

  return sub_2168A6DDC((uint64_t)a1, a3, a5);
}

double pxrInternal__aapl__pxrReserved__::GfPlane::Set(double *a1, double *a2, double *a3)
{
  double v3 = *a2;
  double v4 = a2[1];
  double v5 = a2[2];
  double v6 = sqrt(v3 * v3 + v4 * v4 + v5 * v5);
  double v7 = 1.0 / v6;
  BOOL v8 = v6 <= 1.0e-10;
  double v9 = 1.0e10;
  if (!v8) {
    double v9 = v7;
  }
  double v10 = v3 * v9;
  double v11 = v4 * v9;
  double v12 = v5 * v9;
  *a1 = v10;
  a1[1] = v11;
  a1[2] = v12;
  double result = *a3 * v10 + v11 * a3[1] + v12 * a3[2];
  a1[3] = result;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfPlane::Set(double *a1, double *a2, double *a3, double *a4)
{
  double v4 = a2[1];
  double v5 = *a3 - *a2;
  double v6 = a3[1] - v4;
  double v7 = a2[2];
  double v8 = a3[2] - v7;
  double v9 = *a4 - *a2;
  double v10 = a4[1] - v4;
  double v11 = a4[2] - v7;
  double v12 = v6 * v11 - v8 * v10;
  double v13 = v8 * v9 - v5 * v11;
  double v14 = v5 * v10 - v6 * v9;
  double v15 = sqrt(v14 * v14 + v12 * v12 + v13 * v13);
  double v16 = 1.0 / v15;
  BOOL v17 = v15 <= 1.0e-10;
  double v18 = 1.0e10;
  if (!v17) {
    double v18 = v16;
  }
  double v19 = v13 * v18;
  double v20 = v14 * v18;
  *a1 = v12 * v18;
  a1[1] = v19;
  a1[2] = v20;
  double result = v20 * a2[2] + v19 * a2[1] + *a2 * (v12 * v18);
  a1[3] = result;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfPlane::Set(double *a1, uint64_t a2)
{
  for (uint64_t i = 0; i != 3; ++i)
    a1[i] = *(double *)(a2 + i * 8);
  double result = -*(double *)(a2 + 24);
  double v4 = *a1;
  double v5 = a1[1];
  double v6 = a1[2];
  double v7 = sqrt(v4 * v4 + v5 * v5 + v6 * v6);
  double v8 = 1.0 / v7;
  if (v7 <= 1.0e-10) {
    double v8 = 1.0e10;
  }
  *a1 = v4 * v8;
  a1[1] = v5 * v8;
  a1[2] = v6 * v8;
  a1[3] = result;
  if (v7 != 0.0)
  {
    double result = result / v7;
    a1[3] = result;
  }
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfPlane::GetEquation(pxrInternal__aapl__pxrReserved__::GfPlane *this)
{
  return *(double *)this;
}

pxrInternal__aapl__pxrReserved__::GfPlane *pxrInternal__aapl__pxrReserved__::GfPlane::Transform(pxrInternal__aapl__pxrReserved__::GfPlane *this, const pxrInternal__aapl__pxrReserved__::GfMatrix4d *a2)
{
  float64x2_t v17 = 0u;
  float64x2_t v18 = 0u;
  float64x2_t v15 = 0u;
  float64x2_t v16 = 0u;
  float64x2_t v13 = 0u;
  float64x2_t v14 = 0u;
  float64x2_t v11 = 0u;
  float64x2_t v12 = 0u;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::GetInverse((double *)a2, 0, 0.0, (uint64_t)v10);
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::GetTranspose((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)v10, (uint64_t)&v11);
  double v3 = (const double *)this;
  float64x2_t v4 = vld1q_dup_f64(v3++);
  double v5 = *((double *)this + 2);
  double v6 = *((double *)this + 3);
  float64x2_t v7 = vsubq_f64(vaddq_f64(vaddq_f64(vmulq_f64(v4, v11), vmulq_n_f64(v13, *v3)), vmulq_n_f64(v15, v5)), vmulq_n_f64(v17, v6));
  float64x2_t v8 = vsubq_f64(vaddq_f64(vaddq_f64(vmulq_f64(v4, v12), vmulq_n_f64(v14, *v3)), vmulq_n_f64(v16, v5)), vmulq_n_f64(v18, v6));
  v10[0] = v7;
  v10[1] = v8;
  pxrInternal__aapl__pxrReserved__::GfPlane::Set((double *)this, (uint64_t)v10);
  return this;
}

BOOL pxrInternal__aapl__pxrReserved__::GfPlane::IntersectsPositiveHalfSpace(uint64_t a1, double *a2)
{
  if (*a2 > a2[3] || a2[1] > a2[4] || a2[2] > a2[5]) {
    return 0;
  }
  uint64_t v3 = 0;
  double v4 = 0.0;
  do
  {
    double v5 = *(double *)(a1 + v3 * 8);
    double v6 = &a2[v3];
    if (v5 >= 0.0) {
      double v6 = &a2[v3 + 3];
    }
    double v4 = v4 + v5 * *v6;
    ++v3;
  }
  while (v3 != 3);
  return v4 >= *(double *)(a1 + 24);
}

uint64_t pxrInternal__aapl__pxrReserved__::GfFitPlaneToPoints(double **a1, double *a2)
{
  uint64_t v3 = *a1;
  double v2 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (v2 - *a1);
  if (v4 < 3)
  {
    double v48 = "gf/plane.cpp";
    double v49 = "GfFitPlaneToPoints";
    uint64_t v50 = 123;
    uint64_t v51 = "BOOL pxrInternal__aapl__pxrReserved__::GfFitPlaneToPoints(const std::vector<GfVec3d> &, GfPlane *)";
    char v52 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v48, 1, (pxrInternal__aapl__pxrReserved__ *)"Need three points to correctly fit a plane");
    return 0;
  }
  if (v3 == v2)
  {
    double v20 = 0.0;
    double v14 = 1.0 / (double)v4 * 0.0;
    double v13 = v14;
    double v12 = v14;
LABEL_12:
    double v19 = 0.0;
    double v18 = 0.0;
    double v17 = 0.0;
    double v16 = 0.0;
    double v15 = 0.0;
    goto LABEL_13;
  }
  double v7 = 0.0;
  double v8 = 0.0;
  double v9 = 0.0;
  double v10 = *a1;
  do
  {
    double v7 = v7 + *v10;
    double v8 = v8 + v10[1];
    double v9 = v9 + v10[2];
    v10 += 3;
  }
  while (v10 != v2);
  double v11 = 1.0 / (double)v4;
  double v12 = v11 * v7;
  double v13 = v11 * v8;
  double v14 = v11 * v9;
  if (v3 == v2)
  {
    double v20 = 0.0;
    goto LABEL_12;
  }
  double v15 = 0.0;
  double v16 = 0.0;
  double v17 = 0.0;
  double v18 = 0.0;
  double v19 = 0.0;
  double v20 = 0.0;
  do
  {
    double v21 = *v3 - v12;
    double v22 = v3[1] - v13;
    double v23 = v3[2] - v14;
    double v15 = v15 + v21 * v21;
    double v16 = v16 + v21 * v22;
    double v20 = v20 + v21 * v23;
    double v19 = v19 + v22 * v22;
    double v18 = v18 + v22 * v23;
    double v17 = v17 + v23 * v23;
    v3 += 3;
  }
  while (v3 != v2);
LABEL_13:
  double v48 = *(char **)&v19;
  double v49 = *(const char **)&v18;
  uint64_t v50 = *(void *)&v18;
  uint64_t v51 = *(const char **)&v17;
  *(double *)double v47 = v15;
  *(double *)&v47[1] = v20;
  *(double *)&v47[2] = v20;
  *(double *)&v47[3] = v17;
  *(double *)double v46 = v15;
  *(double *)&v46[1] = v16;
  *(double *)&v46[2] = v16;
  *(double *)&v46[3] = v19;
  double Determinant = pxrInternal__aapl__pxrReserved__::GfMatrix2d::GetDeterminant((pxrInternal__aapl__pxrReserved__::GfMatrix2d *)&v48);
  double v44 = pxrInternal__aapl__pxrReserved__::GfMatrix2d::GetDeterminant((pxrInternal__aapl__pxrReserved__::GfMatrix2d *)v47);
  double v25 = fabs(v44);
  double v26 = pxrInternal__aapl__pxrReserved__::GfMatrix2d::GetDeterminant((pxrInternal__aapl__pxrReserved__::GfMatrix2d *)v46);
  double v27 = fabs(v26);
  if (Determinant == 0.0 || (double v28 = fabs(Determinant), v28 <= v25) || v28 <= v27)
  {
    if (v44 == 0.0 || v25 <= v27)
    {
      uint64_t result = 0;
      if (v26 == 0.0) {
        return result;
      }
      double Inverse = pxrInternal__aapl__pxrReserved__::GfMatrix2d::GetInverse((pxrInternal__aapl__pxrReserved__::GfMatrix2d *)v46, 0, 0.0);
      double v35 = -(v18 * v41) - v20 * Inverse;
      double v31 = -(v18 * v42) - v20 * v43;
      double v34 = 1.0;
    }
    else
    {
      double v36 = pxrInternal__aapl__pxrReserved__::GfMatrix2d::GetInverse((pxrInternal__aapl__pxrReserved__::GfMatrix2d *)v47, 0, 0.0);
      double v35 = -(v18 * v37) - v16 * v36;
      double v34 = -(v18 * v38) - v16 * v39;
      double v31 = 1.0;
    }
  }
  else
  {
    double v29 = pxrInternal__aapl__pxrReserved__::GfMatrix2d::GetInverse((pxrInternal__aapl__pxrReserved__::GfMatrix2d *)&v48, 0, 0.0);
    double v31 = -(v20 * v30) - v16 * v29;
    double v34 = -(v20 * v32) - v16 * v33;
    double v35 = 1.0;
  }
  *(double *)double v45 = v35;
  *(double *)&v45[1] = v31;
  *(double *)&v45[2] = v34;
  *(double *)&v45[3] = -(v12 * v35 + v13 * v31 + v14 * v34);
  pxrInternal__aapl__pxrReserved__::GfPlane::Set(a2, (uint64_t)v45);
  return 1;
}

uint64_t *sub_2168A7718()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  double v5 = 0;
  double v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C5E0, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74C5E0, (char *)0x20, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    double v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168A77D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

float64x2_t pxrInternal__aapl__pxrReserved__::GfQuatd::GfQuatd(float64x2_t *a1, float32x2_t *a2)
{
  float64x2_t result = vcvtq_f64_f32(*a2);
  float64x2_t v3 = vcvtq_f64_f32(a2[1]);
  *a1 = result;
  a1[1] = v3;
  return result;
}

{
  float64x2_t result;
  float64x2_t v3;

  float64x2_t result = vcvtq_f64_f32(*a2);
  float64x2_t v3 = vcvtq_f64_f32(a2[1]);
  *a1 = result;
  a1[1] = v3;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfQuatd::GfQuatd(double *a1, unsigned __int16 *a2)
{
  *a1 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a2];
  a1[1] = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[1]];
  a1[2] = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[2]];
  double result = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[3]];
  a1[3] = result;
  return result;
}

{
  double result;

  *a1 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a2];
  a1[1] = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[1]];
  a1[2] = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[2]];
  double result = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[3]];
  a1[3] = result;
  return result;
}

double *pxrInternal__aapl__pxrReserved__::GfQuatd::Normalize(double *this, double a2)
{
  double v3 = *this;
  double v4 = this[1];
  double v5 = this[2];
  double v6 = this[3];
  double v7 = sqrt(v3 * v3 + v4 * v4 + v5 * v5 + v6 * v6);
  if (v7 >= a2)
  {
    *this = v3 * (1.0 / v7);
    this[1] = v4 * (1.0 / v7);
    this[2] = v5 * (1.0 / v7);
    this[3] = v6 / v7;
  }
  else
  {
    *this = 0.0;
    this[1] = 0.0;
    this[2] = 0.0;
    this[3] = 1.0;
  }
  return this;
}

double pxrInternal__aapl__pxrReserved__::GfQuatd::Transform(double *a1, double *a2)
{
  double v2 = a1[1];
  double v3 = a1[2];
  double v4 = a1[3];
  double v5 = *a1 * *a1 + v2 * v2 + v3 * v3;
  double v6 = a2[1];
  double v7 = a2[2];
  double v8 = *a1 * *a2 + v2 * v6 + v3 * v7;
  return 1.0 / (v4 * v4 + v5) * ((v4 + v4) * (v2 * v7 - v3 * v6) + *a2 * (v4 * v4 - v5) + *a1 * (v8 + v8));
}

double pxrInternal__aapl__pxrReserved__::GfQuatd::operator*=(double *a1, double *a2)
{
  double v3 = a1[2];
  double v2 = a1[3];
  double v5 = a2[2];
  double v4 = a2[3];
  double v6 = a1[1];
  double v7 = a2[1];
  double v8 = v2 * v4 - (*a1 * *a2 + v6 * v7 + v3 * v5);
  double v9 = v4 * *a1 + v2 * *a2 + v6 * v5 - v7 * v3;
  double v10 = v4 * v6 + v2 * v7 + *a2 * v3 - *a1 * v5;
  double v11 = v4 * v3 + v2 * v5;
  double v12 = *a1 * v7 - *a2 * v6;
  *a1 = v9;
  a1[1] = v10;
  double result = v12 + v11;
  a1[2] = result;
  a1[3] = v8;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfSlerp(pxrInternal__aapl__pxrReserved__ *this, double a2, const pxrInternal__aapl__pxrReserved__::GfQuatd *a3, const pxrInternal__aapl__pxrReserved__::GfQuatd *a4)
{
  double v5 = *(double *)this;
  double v6 = *((double *)this + 1);
  double v7 = *(double *)a3;
  double v8 = *((double *)a3 + 1);
  double v10 = *((double *)this + 2);
  double v9 = *((double *)this + 3);
  double v11 = *((double *)a3 + 2);
  double v12 = *((double *)a3 + 3);
  double v13 = *(double *)this * *(double *)a3 + v6 * v8 + v10 * v11 + v9 * v12;
  double v14 = -v13;
  if (v13 >= 0.0) {
    double v14 = *(double *)this * *(double *)a3 + v6 * v8 + v10 * v11 + v9 * v12;
  }
  if (1.0 - v14 <= 0.00001)
  {
    double v19 = 1.0 - a2;
  }
  else
  {
    double v24 = *(double *)a3;
    double v23 = *(double *)this;
    long double v15 = acos(v14);
    double v16 = sin(v15);
    long double v17 = sin((1.0 - a2) * v15);
    long double v18 = v15 * a2;
    double v19 = v17 / v16;
    long double v20 = sin(v18);
    double v5 = v23;
    double v7 = v24;
    a2 = v20 / v16;
  }
  double v21 = -a2;
  if (v13 >= 0.0) {
    double v21 = a2;
  }
  return v5 * v19 + v7 * v21;
}

uint64_t *sub_2168A7BEC()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  double v5 = 0;
  double v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C5F0, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74C5F0, (char *)0x20, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    double v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168A7CAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

float64x2_t pxrInternal__aapl__pxrReserved__::GfQuatf::GfQuatf(float32x4_t *this, __n128 *a2)
{
  float64x2_t result = (float64x2_t)a2[1];
  *this = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)a2), result);
  return result;
}

{
  float64x2_t result;

  float64x2_t result = (float64x2_t)a2[1];
  *this = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)a2), result);
  return result;
}

float pxrInternal__aapl__pxrReserved__::GfQuatf::GfQuatf(float *a1, unsigned __int16 *a2)
{
  *a1 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a2];
  a1[1] = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[1]];
  a1[2] = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[2]];
  float result = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[3]];
  a1[3] = result;
  return result;
}

{
  float result;

  *a1 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a2];
  a1[1] = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[1]];
  a1[2] = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[2]];
  float result = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[3]];
  a1[3] = result;
  return result;
}

float pxrInternal__aapl__pxrReserved__::GfQuatf::Normalize(float32x2_t *this, float a2)
{
  float32x2_t v3 = *this;
  float v4 = this[1].f32[0];
  float v5 = this[1].f32[1];
  float result = sqrtf((float)(vaddv_f32(vmul_f32(v3, v3)) + (float)(v4 * v4)) + (float)(v5 * v5));
  if (result >= a2)
  {
    float32_t v7 = v5 / result;
    double v8 = 1.0 / result;
    *this = vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(v3), v8));
    float32_t v9 = v8 * v4;
    this[1].f32[0] = v9;
    this[1].f32[1] = v7;
  }
  else
  {
    *(_OWORD *)this->f32 = xmmword_217453090;
  }
  return result;
}

float pxrInternal__aapl__pxrReserved__::GfQuatf::Transform(float *a1, float *a2)
{
  float v2 = a1[1];
  float v3 = a1[2];
  float v4 = a1[3];
  float v5 = (float)((float)(*a1 * *a1) + (float)(v2 * v2)) + (float)(v3 * v3);
  float v6 = a2[1];
  float v7 = a2[2];
  float v8 = (float)((float)(*a1 * *a2) + (float)(v2 * v6)) + (float)(v3 * v7);
  return 1.0
       / (float)((float)(v4 * v4) + v5)
       * (float)((float)((float)(v4 + v4) * (float)((float)(v2 * v7) - (float)(v3 * v6)))
               + (float)((float)(*a2 * (float)((float)(v4 * v4) - v5)) + (float)(*a1 * (float)(v8 + v8))));
}

float pxrInternal__aapl__pxrReserved__::GfQuatf::operator*=(float *a1, float *a2)
{
  float v3 = a1[2];
  float v2 = a1[3];
  float v5 = a2[2];
  float v4 = a2[3];
  float v6 = a1[1];
  float v7 = a2[1];
  float v8 = (float)(v2 * v4) - (float)((float)((float)(*a1 * *a2) + (float)(v6 * v7)) + (float)(v3 * v5));
  float v9 = (float)((float)(v4 * *a1) + (float)(v2 * *a2)) + (float)((float)(v6 * v5) - (float)(v7 * v3));
  float v10 = (float)((float)(v4 * v6) + (float)(v2 * v7)) + (float)((float)(*a2 * v3) - (float)(*a1 * v5));
  float v11 = (float)(v4 * v3) + (float)(v2 * v5);
  float v12 = (float)(*a1 * v7) - (float)(*a2 * v6);
  *a1 = v9;
  a1[1] = v10;
  float result = v12 + v11;
  a1[2] = result;
  a1[3] = v8;
  return result;
}

float pxrInternal__aapl__pxrReserved__::GfSlerp(pxrInternal__aapl__pxrReserved__ *this, double a2, const pxrInternal__aapl__pxrReserved__::GfQuatf *a3, const pxrInternal__aapl__pxrReserved__::GfQuatf *a4)
{
  float v5 = *(float *)this;
  float v6 = *(float *)a3;
  float v7 = (float)((float)((float)(*(float *)this * *(float *)a3) + (float)(*((float *)this + 1) * *((float *)a3 + 1)))
             + (float)(*((float *)this + 2) * *((float *)a3 + 2)))
     + (float)(*((float *)this + 3) * *((float *)a3 + 3));
  double v8 = v7;
  if (v7 < 0.0) {
    double v8 = -v7;
  }
  if (1.0 - v8 <= 0.00001)
  {
    double v13 = 1.0 - a2;
  }
  else
  {
    float v21 = *(float *)a3;
    float v20 = *(float *)this;
    float v9 = acos(v8);
    float v19 = sinf(v9);
    double v10 = v9;
    long double v11 = sin((1.0 - a2) * v10);
    long double v12 = v10 * a2;
    double v13 = v11 / v19;
    long double v14 = sin(v12);
    float v5 = v20;
    float v6 = v21;
    a2 = v14 / v19;
  }
  double v15 = -a2;
  if (v7 >= 0.0) {
    double v15 = a2;
  }
  float v16 = v13;
  float v17 = v15;
  return (float)(v5 * v16) + (float)(v6 * v17);
}

uint64_t *sub_2168A80D8()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  float v5 = 0;
  float v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C600, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74C600, (char *)0x10, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    float v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168A8198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::GfQuath *pxrInternal__aapl__pxrReserved__::GfQuath::GfQuath(pxrInternal__aapl__pxrReserved__::GfQuath *this, const pxrInternal__aapl__pxrReserved__::GfQuatd *a2)
{
  sub_2168A8EAC(this, (double *)a2);
  float v4 = *((double *)a2 + 3);
  if (v4 == 0.0)
  {
    unsigned int v5 = HIWORD(LODWORD(v4));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v4) >> 23])
  {
    unsigned int v5 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v4) >> 23]
       + (((LODWORD(v4) & 0x7FFFFF) + ((LODWORD(v4) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v5) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v4));
  }
  *((_WORD *)this + 3) = v5;
  return this;
}

pxrInternal__aapl__pxrReserved__::GfQuath *pxrInternal__aapl__pxrReserved__::GfQuath::GfQuath(pxrInternal__aapl__pxrReserved__::GfQuath *this, const pxrInternal__aapl__pxrReserved__::GfQuatf *a2)
{
  float v4 = (pxrInternal__aapl__pxrReserved__::pxr_half::half *)*(unsigned int *)a2;
  if (*(float *)a2 == 0.0)
  {
    unsigned int v5 = v4 >> 16;
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v4 >> 23])
  {
    unsigned int v5 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v4 >> 23]
       + (((v4 & 0x7FFFFF) + ((v4 >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v5) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert(v4);
  }
  *(_WORD *)this = v5;
  float v6 = *((float *)a2 + 1);
  if (v6 == 0.0)
  {
    unsigned int v7 = HIWORD(LODWORD(v6));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v6) >> 23])
  {
    unsigned int v7 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v6) >> 23]
       + (((LODWORD(v6) & 0x7FFFFF) + ((LODWORD(v6) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v7) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v6));
  }
  *((_WORD *)this + 1) = v7;
  float v8 = *((float *)a2 + 2);
  if (v8 == 0.0)
  {
    unsigned int v9 = HIWORD(LODWORD(v8));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v8) >> 23])
  {
    unsigned int v9 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v8) >> 23]
       + (((LODWORD(v8) & 0x7FFFFF) + ((LODWORD(v8) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v9) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v8));
  }
  *((_WORD *)this + 2) = v9;
  float v10 = *((float *)a2 + 3);
  if (v10 == 0.0)
  {
    unsigned int v11 = HIWORD(LODWORD(v10));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v10) >> 23])
  {
    unsigned int v11 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v10) >> 23]
        + (((LODWORD(v10) & 0x7FFFFF) + ((LODWORD(v10) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v11) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v10));
  }
  *((_WORD *)this + 3) = v11;
  return this;
}

void *pxrInternal__aapl__pxrReserved__::operator<<(void *a1)
{
  return pxrInternal__aapl__pxrReserved__::operator<<(a1);
}

{
  void *v1;
  void *v2;
  uint64_t vars8;

  sub_216779180(a1, (uint64_t)"( ", 2);
  uint64_t v1 = (void *)std::ostream::operator<<();
  sub_216779180(v1, (uint64_t)" ", 1);
  float v2 = (void *)std::ostream::operator<<();

  return sub_216779180(v2, (uint64_t)")", 2);
}

{
  void *v1;
  void *v2;
  void *v3;
  uint64_t vars8;

  sub_216779180(a1, (uint64_t)"( ", 2);
  uint64_t v1 = (void *)std::ostream::operator<<();
  sub_216779180(v1, (uint64_t)" ", 1);
  float v2 = (void *)std::ostream::operator<<();
  sub_216779180(v2, (uint64_t)" ", 1);
  float v3 = (void *)std::ostream::operator<<();

  return sub_216779180(v3, (uint64_t)")", 2);
}

{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t vars8;

  uint64_t v1 = sub_216779180(a1, (uint64_t)"( ", 2);
  sub_216779180(v1, (uint64_t)"(", 1);
  float v2 = (void *)std::ostream::operator<<();
  sub_216779180(v2, (uint64_t)", ", 2);
  float v3 = (void *)std::ostream::operator<<();
  sub_216779180(v3, (uint64_t)", ", 2);
  float v4 = (void *)std::ostream::operator<<();
  unsigned int v5 = sub_216779180(v4, (uint64_t)", 0), ", 6);
  sub_216779180(v5, (uint64_t)"(", 1);
  float v6 = (void *)std::ostream::operator<<();
  sub_216779180(v6, (uint64_t)", ", 2);
  unsigned int v7 = (void *)std::ostream::operator<<();
  sub_216779180(v7, (uint64_t)", ", 2);
  float v8 = (void *)std::ostream::operator<<();
  sub_216779180(v8, (uint64_t)", ", 2);
  unsigned int v9 = (void *)std::ostream::operator<<();
  float v10 = sub_216779180(v9, (uint64_t)"), ", 3);
  sub_216779180(v10, (uint64_t)"(", 1);
  unsigned int v11 = (void *)std::ostream::operator<<();
  sub_216779180(v11, (uint64_t)", ", 2);
  long double v12 = (void *)std::ostream::operator<<();
  sub_216779180(v12, (uint64_t)", ", 2);
  double v13 = (void *)std::ostream::operator<<();
  sub_216779180(v13, (uint64_t)", ", 2);
  long double v14 = (void *)std::ostream::operator<<();
  double v15 = sub_216779180(v14, (uint64_t)"), ", 3);
  sub_216779180(v15, (uint64_t)"(", 1);
  uint64_t v16 = (void *)std::ostream::operator<<();
  sub_216779180(v16, (uint64_t)", ", 2);
  float v17 = (void *)std::ostream::operator<<();
  sub_216779180(v17, (uint64_t)", ", 2);
  long double v18 = (void *)std::ostream::operator<<();
  float v19 = sub_216779180(v18, (uint64_t)", 0), ", 6);
  sub_216779180(v19, (uint64_t)"(", 1);
  float v20 = (void *)std::ostream::operator<<();
  sub_216779180(v20, (uint64_t)", ", 2);
  float v21 = (void *)std::ostream::operator<<();
  sub_216779180(v21, (uint64_t)", ", 2);
  double v22 = (void *)std::ostream::operator<<();
  double v23 = sub_216779180(v22, (uint64_t)", 0) ", 5);

  return sub_216779180(v23, (uint64_t)")", 1);
}

{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  char v6;
  char v7;

  float v6 = 40;
  uint64_t v1 = sub_216779180(a1, (uint64_t)&v6, 1);
  float v2 = (void *)pxrInternal__aapl__pxrReserved__::pxr_half::operator<<((uint64_t)v1);
  float v3 = sub_216779180(v2, (uint64_t)", ", 2);
  float v4 = (void *)pxrInternal__aapl__pxrReserved__::pxr_half::operator<<((uint64_t)v3);
  unsigned int v7 = 41;
  return sub_216779180(v4, (uint64_t)&v7, 1);
}

{
  void *v1;
  void *v2;
  char v4;
  char v5;

  float v4 = 40;
  sub_216779180(a1, (uint64_t)&v4, 1);
  uint64_t v1 = (void *)std::ostream::operator<<();
  sub_216779180(v1, (uint64_t)", ", 2);
  float v2 = (void *)std::ostream::operator<<();
  unsigned int v5 = 41;
  return sub_216779180(v2, (uint64_t)&v5, 1);
}

{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  char v8;
  char v9;

  float v8 = 40;
  uint64_t v1 = sub_216779180(a1, (uint64_t)&v8, 1);
  float v2 = (void *)pxrInternal__aapl__pxrReserved__::pxr_half::operator<<((uint64_t)v1);
  float v3 = sub_216779180(v2, (uint64_t)", ", 2);
  float v4 = (void *)pxrInternal__aapl__pxrReserved__::pxr_half::operator<<((uint64_t)v3);
  unsigned int v5 = sub_216779180(v4, (uint64_t)", ", 2);
  float v6 = (void *)pxrInternal__aapl__pxrReserved__::pxr_half::operator<<((uint64_t)v5);
  unsigned int v9 = 41;
  return sub_216779180(v6, (uint64_t)&v9, 1);
}

{
  void *v1;
  void *v2;
  void *v3;
  char v5;
  char v6;

  unsigned int v5 = 40;
  sub_216779180(a1, (uint64_t)&v5, 1);
  uint64_t v1 = (void *)std::ostream::operator<<();
  sub_216779180(v1, (uint64_t)", ", 2);
  float v2 = (void *)std::ostream::operator<<();
  sub_216779180(v2, (uint64_t)", ", 2);
  float v3 = (void *)std::ostream::operator<<();
  float v6 = 41;
  return sub_216779180(v3, (uint64_t)&v6, 1);
}

{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  char v10;
  char v11;

  float v10 = 40;
  uint64_t v1 = sub_216779180(a1, (uint64_t)&v10, 1);
  float v2 = (void *)pxrInternal__aapl__pxrReserved__::pxr_half::operator<<((uint64_t)v1);
  float v3 = sub_216779180(v2, (uint64_t)", ", 2);
  float v4 = (void *)pxrInternal__aapl__pxrReserved__::pxr_half::operator<<((uint64_t)v3);
  unsigned int v5 = sub_216779180(v4, (uint64_t)", ", 2);
  float v6 = (void *)pxrInternal__aapl__pxrReserved__::pxr_half::operator<<((uint64_t)v5);
  unsigned int v7 = sub_216779180(v6, (uint64_t)", ", 2);
  float v8 = (void *)pxrInternal__aapl__pxrReserved__::pxr_half::operator<<((uint64_t)v7);
  unsigned int v11 = 41;
  return sub_216779180(v8, (uint64_t)&v11, 1);
}

{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  char v6;
  char v7;

  float v6 = 40;
  sub_216779180(a1, (uint64_t)&v6, 1);
  uint64_t v1 = (void *)std::ostream::operator<<();
  sub_216779180(v1, (uint64_t)", ", 2);
  float v2 = (void *)std::ostream::operator<<();
  sub_216779180(v2, (uint64_t)", ", 2);
  float v3 = (void *)std::ostream::operator<<();
  sub_216779180(v3, (uint64_t)", ", 2);
  float v4 = (void *)std::ostream::operator<<();
  unsigned int v7 = 41;
  return sub_216779180(v4, (uint64_t)&v7, 1);
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  sub_216779180(a1, (uint64_t)"(", 1);
  float v2 = (void *)std::ostream::operator<<();
  sub_216779180(v2, (uint64_t)", ", 2);
  float v3 = (void *)std::ostream::operator<<();
  sub_216779180(v3, (uint64_t)", ", 2);
  float v4 = (void *)std::ostream::operator<<();
  sub_216779180(v4, (uint64_t)", ", 2);
  unsigned int v5 = (void *)std::ostream::operator<<();
  sub_216779180(v5, (uint64_t)", ", 2);
  float v6 = (void *)std::ostream::operator<<();
  sub_216779180(v6, (uint64_t)", ", 2);
  unsigned int v7 = (void *)std::ostream::operator<<();
  sub_216779180(v7, (uint64_t)")", 1);
  return a1;
}

{
  void *v1;
  void *v2;
  uint64_t vars8;

  sub_216779180(a1, (uint64_t)"SdfLayerOffset(", 15);
  uint64_t v1 = (void *)std::ostream::operator<<();
  sub_216779180(v1, (uint64_t)", ", 2);
  float v2 = (void *)std::ostream::operator<<();

  return sub_216779180(v2, (uint64_t)")", 1);
}

{
  return sub_216779180(a1, (uint64_t)"OpaqueValue", 11);
}

{
  return sub_216779180(a1, (uint64_t)"None", 4);
}

{
  sub_216779180(a1, (uint64_t)"HdMaterialNetwork Params: (...) ", 32);
  return a1;
}

{
  sub_216779180(a1, (uint64_t)"HdMaterialNetworkMap Params: (...) ", 35);
  return a1;
}

{
  sub_216779180(a1, (uint64_t)"HdMaterialNode2 Params: (...) ", 30);
  return a1;
}

{
  sub_216779180(a1, (uint64_t)"HdTopology()", 12);
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfQuath::Normalize(unsigned __int16 *a1, unsigned __int16 a2)
{
  uint64_t v4 = (unsigned __int16)sub_216894F5C(a1);
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v4] >= pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2]) {
    sub_2168A8470(a1, v4);
  }
  else {
    *(void *)a1 = 0x3C00000000000000;
  }
  return v4;
}

unsigned __int16 *sub_2168A8470(unsigned __int16 *a1, unsigned __int16 a2)
{
  uint64_t v3 = a2;
  float v4 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[3]]
     / pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2];
  if (v4 == 0.0)
  {
    unsigned int v5 = HIWORD(LODWORD(v4));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v4) >> 23])
  {
    unsigned int v5 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v4) >> 23]
       + (((LODWORD(v4) & 0x7FFFFF) + ((LODWORD(v4) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v5) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v4));
  }
  a1[3] = v5;
  sub_216895D54(a1, 1.0 / pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v3]);
  return a1;
}

unint64_t pxrInternal__aapl__pxrReserved__::GfQuath::Transform(unsigned __int16 *a1, unsigned __int16 *a2)
{
  unsigned __int16 v4 = sub_216895C38(a1, a1);
  float v5 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[3]]
     * pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[3]];
  if (v5 == 0.0)
  {
    unsigned int v6 = HIWORD(LODWORD(v5));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v5) >> 23])
  {
    unsigned int v6 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v5) >> 23]
       + (((LODWORD(v5) & 0x7FFFFF) + ((LODWORD(v5) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v6) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v5));
  }
  unsigned __int16 v7 = sub_216895C38(a1, a2);
  double v8 = (float)(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v7]
             + pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v7]);
  int v31 = *(_DWORD *)a1;
  unsigned __int16 v32 = a1[2];
  unsigned int v9 = sub_216895D54((unsigned __int16 *)&v31, v8);
  int v10 = *(_DWORD *)v9;
  unsigned __int16 v11 = v9[2];
  double v12 = (float)(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)v6]
              - pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v4]);
  int v31 = *(_DWORD *)a2;
  unsigned __int16 v32 = a2[2];
  double v13 = sub_216895D54((unsigned __int16 *)&v31, v12);
  int v14 = *(_DWORD *)v13;
  unsigned __int16 v30 = v13[2];
  int v29 = v14;
  unsigned __int16 v32 = v11;
  int v31 = v10;
  double v15 = sub_21689606C((unsigned __int16 *)&v31, (unsigned __int16 *)&v29);
  int v16 = *(_DWORD *)v15;
  unsigned __int16 v17 = v15[2];
  double v18 = (float)(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[3]]
              + pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[3]]);
  unint64_t v19 = sub_2168A86F8(a1, a2);
  int v31 = v19;
  unsigned __int16 v32 = WORD2(v19);
  float v20 = sub_216895D54((unsigned __int16 *)&v31, v18);
  int v21 = *(_DWORD *)v20;
  unsigned __int16 v28 = v20[2];
  int v27 = v21;
  unsigned __int16 v32 = v17;
  int v31 = v16;
  double v22 = sub_21689606C((unsigned __int16 *)&v31, (unsigned __int16 *)&v27);
  int v23 = *(_DWORD *)v22;
  double v24 = 1.0
      / (float)(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)v6]
              + pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v4]);
  unsigned __int16 v32 = v22[2];
  int v31 = v23;
  double v25 = sub_216895D54((unsigned __int16 *)&v31, v24);
  return *(unsigned int *)v25 | ((unint64_t)v25[2] << 32);
}

unint64_t sub_2168A86F8(unsigned __int16 *a1, unsigned __int16 *a2)
{
  float v4 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[2]];
  float v5 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[2]];
  float v6 = (float)(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[1]] * v4)
     - (float)(v5 * pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[1]]);
  if (v6 == 0.0)
  {
    unsigned int v7 = HIWORD(LODWORD(v6));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v6) >> 23])
  {
    unsigned int v7 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v6) >> 23]
       + (((LODWORD(v6) & 0x7FFFFF) + ((LODWORD(v6) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v7) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v6));
    float v5 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[2]];
    float v4 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[2]];
  }
  float v8 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a2];
  float v9 = v5 * v8;
  float v10 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1];
  float v11 = v9 - (float)(v10 * v4);
  if (v11 == 0.0)
  {
    unsigned int v12 = HIWORD(LODWORD(v11));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v11) >> 23])
  {
    unsigned int v12 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v11) >> 23]
        + (((LODWORD(v11) & 0x7FFFFF) + ((LODWORD(v11) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v12) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v11));
    float v10 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1];
    float v8 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a2];
  }
  float v13 = (float)(v10 * pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[1]])
      - (float)(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[1]] * v8);
  if (v13 == 0.0)
  {
    uint64_t v14 = HIWORD(LODWORD(v13));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v13) >> 23])
  {
    uint64_t v14 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v13) >> 23]
        + (((LODWORD(v13) & 0x7FFFFF) + ((LODWORD(v13) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    uint64_t v14 = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v13));
  }
  return ((unint64_t)(unsigned __int16)v12 << 16) | (v14 << 32) | (unsigned __int16)v7;
}

unsigned __int16 *pxrInternal__aapl__pxrReserved__::GfQuath::operator*=(unsigned __int16 *a1, unsigned __int16 *a2)
{
  uint64_t v4 = a1[3];
  uint64_t v5 = a2[3];
  float v6 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v4]
     * pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v5];
  float v7 = v6 - pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)sub_216895C38(a1, a2)];
  if (v7 == 0.0)
  {
    unsigned int v8 = HIWORD(LODWORD(v7));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v7) >> 23])
  {
    unsigned int v8 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v7) >> 23]
       + (((LODWORD(v7) & 0x7FFFFF) + ((LODWORD(v7) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v8) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v7));
  }
  float v9 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v4];
  float v10 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a2];
  float v11 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v5];
  float v12 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1];
  float v13 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[1]];
  float v14 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[2]];
  float v15 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[2]];
  float v16 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[1]];
  float v17 = (float)((float)(v9 * v10) + (float)(v11 * v12)) + (float)((float)(v13 * v14) - (float)(v15 * v16));
  if (v17 == 0.0)
  {
    unsigned int v18 = HIWORD(LODWORD(v17));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v17) >> 23])
  {
    unsigned int v18 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v17) >> 23]
        + (((LODWORD(v17) & 0x7FFFFF) + ((LODWORD(v17) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v18) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v17));
    float v9 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v4];
    float v16 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[1]];
    float v11 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v5];
    float v13 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[1]];
    float v15 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[2]];
    float v10 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a2];
    float v12 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1];
    float v14 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[2]];
  }
  float v19 = (float)((float)(v9 * v16) + (float)(v11 * v13)) + (float)((float)(v15 * v10) - (float)(v12 * v14));
  if (v19 == 0.0)
  {
    unsigned int v20 = HIWORD(LODWORD(v19));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v19) >> 23])
  {
    unsigned int v20 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v19) >> 23]
        + (((LODWORD(v19) & 0x7FFFFF) + ((LODWORD(v19) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v20) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v19));
    float v9 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v4];
    float v14 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[2]];
    float v11 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v5];
    float v15 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[2]];
    float v12 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1];
    float v16 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[1]];
    float v13 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[1]];
    float v10 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a2];
  }
  float v21 = (float)((float)(v9 * v14) + (float)(v11 * v15)) + (float)((float)(v12 * v16) - (float)(v13 * v10));
  if (v21 == 0.0)
  {
    unsigned int v22 = HIWORD(LODWORD(v21));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v21) >> 23])
  {
    unsigned int v22 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v21) >> 23]
        + (((LODWORD(v21) & 0x7FFFFF) + ((LODWORD(v21) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v22) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v21));
  }
  a1[3] = v8;
  *a1 = v18;
  a1[1] = v20;
  a1[2] = v22;
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfSlerp(pxrInternal__aapl__pxrReserved__ *this, long double a2, const pxrInternal__aapl__pxrReserved__::GfQuath *a3, const pxrInternal__aapl__pxrReserved__::GfQuath *a4)
{
  float v7 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)sub_216895C38((unsigned __int16 *)this, (unsigned __int16 *)a3)]+ (float)(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*((unsigned __int16 *)this + 3)]* pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*((unsigned __int16 *)a3 + 3)]);
  double v8 = v7;
  if (v7 < 0.0) {
    double v8 = -v7;
  }
  if (1.0 - v8 <= 0.00001)
  {
    double v11 = 1.0 - a2;
  }
  else
  {
    float v9 = acos(v8);
    if (v9 == 0.0)
    {
      unsigned int v10 = HIWORD(LODWORD(v9));
    }
    else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v9) >> 23])
    {
      unsigned int v10 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v9) >> 23]
          + (((LODWORD(v9) & 0x7FFFFF) + ((LODWORD(v9) >> 13) & 1) + 4095) >> 13);
    }
    else
    {
      LOWORD(v10) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v9));
    }
    uint64_t v12 = (unsigned __int16)v10;
    float v13 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)v10];
    float v14 = sinf(v13);
    if (v14 == 0.0)
    {
      unsigned int v15 = HIWORD(LODWORD(v14));
    }
    else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v14) >> 23])
    {
      unsigned int v15 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v14) >> 23]
          + (((LODWORD(v14) & 0x7FFFFF) + ((LODWORD(v14) >> 13) & 1) + 4095) >> 13);
    }
    else
    {
      LOWORD(v15) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v14));
      float v13 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v12];
    }
    double v16 = v13;
    long double v17 = sin((1.0 - a2) * v13);
    double v18 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)v15];
    double v11 = v17 / v18;
    a2 = sin(v16 * a2) / v18;
  }
  if (v7 < 0.0) {
    a2 = -a2;
  }
  float v19 = v11;
  if (v19 == 0.0)
  {
    unsigned int v20 = HIWORD(LODWORD(v19));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v19) >> 23])
  {
    unsigned int v20 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v19) >> 23]
        + (((LODWORD(v19) & 0x7FFFFF) + ((LODWORD(v19) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v20) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v19));
  }
  uint64_t v26 = *(void *)this;
  uint64_t v21 = *(void *)sub_216895190((unsigned __int16 *)&v26, v20);
  float v22 = a2;
  if (v22 == 0.0)
  {
    unsigned int v23 = HIWORD(LODWORD(v22));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v22) >> 23])
  {
    unsigned int v23 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v22) >> 23]
        + (((LODWORD(v22) & 0x7FFFFF) + ((LODWORD(v22) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v23) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v22));
  }
  uint64_t v26 = *(void *)a3;
  uint64_t v25 = *(void *)sub_216895190((unsigned __int16 *)&v26, v23);
  uint64_t v26 = v21;
  return *(void *)sub_216895FD4((unsigned __int16 *)&v26, (unsigned __int16 *)&v25);
}

uint64_t *sub_2168A8DA8()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  uint64_t v5 = 0;
  float v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C610, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74C610, (char *)8, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    float v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168A8E68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

_WORD *sub_2168A8EAC(_WORD *a1, double *a2)
{
  float v4 = *a2;
  if (v4 == 0.0)
  {
    unsigned int v5 = HIWORD(LODWORD(v4));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v4) >> 23])
  {
    unsigned int v5 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v4) >> 23]
       + (((LODWORD(v4) & 0x7FFFFF) + ((LODWORD(v4) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v5) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v4));
  }
  *a1 = v5;
  float v6 = a2[1];
  if (v6 == 0.0)
  {
    unsigned int v7 = HIWORD(LODWORD(v6));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v6) >> 23])
  {
    unsigned int v7 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v6) >> 23]
       + (((LODWORD(v6) & 0x7FFFFF) + ((LODWORD(v6) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v7) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v6));
  }
  a1[1] = v7;
  float v8 = a2[2];
  if (v8 == 0.0)
  {
    unsigned int v9 = HIWORD(LODWORD(v8));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v8) >> 23])
  {
    unsigned int v9 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v8) >> 23]
       + (((LODWORD(v8) & 0x7FFFFF) + ((LODWORD(v8) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v9) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v8));
  }
  a1[2] = v9;
  return a1;
}

double pxrInternal__aapl__pxrReserved__::GfQuaternion::GetLength(pxrInternal__aapl__pxrReserved__::GfQuaternion *this)
{
  return sqrt(*(double *)this * *(double *)this+ *((double *)this + 1) * *((double *)this + 1)+ *((double *)this + 2) * *((double *)this + 2)+ *((double *)this + 3) * *((double *)this + 3));
}

double pxrInternal__aapl__pxrReserved__::GfQuaternion::GetNormalized(pxrInternal__aapl__pxrReserved__::GfQuaternion *this, double a2)
{
  double v2 = *(double *)this;
  double v3 = sqrt(v2 * v2+ *((double *)this + 1) * *((double *)this + 1)+ *((double *)this + 2) * *((double *)this + 2)+ *((double *)this + 3) * *((double *)this + 3));
  if (v3 >= a2) {
    return v2 * (1.0 / v3);
  }
  else {
    return 1.0;
  }
}

double *pxrInternal__aapl__pxrReserved__::GfQuaternion::Normalize(double *this, double a2)
{
  double v3 = *this;
  double v4 = this[1];
  double v5 = this[2];
  double v6 = this[3];
  double v7 = sqrt(v3 * v3 + v4 * v4 + v5 * v5 + v6 * v6);
  if (v7 >= a2)
  {
    *this = v3 * (1.0 / v7);
    this[1] = v4 * (1.0 / v7);
    this[2] = v5 * (1.0 / v7);
    double v8 = v6 * (1.0 / v7);
  }
  else
  {
    *this = 1.0;
    this[1] = 0.0;
    this[2] = 0.0;
    double v8 = 0.0;
  }
  this[3] = v8;
  return this;
}

double pxrInternal__aapl__pxrReserved__::GfQuaternion::GetInverse(pxrInternal__aapl__pxrReserved__::GfQuaternion *this)
{
  return *(double *)this
       * (1.0
        / (*(double *)this * *(double *)this
         + *((double *)this + 1) * *((double *)this + 1)
         + *((double *)this + 2) * *((double *)this + 2)
         + *((double *)this + 3) * *((double *)this + 3)));
}

double pxrInternal__aapl__pxrReserved__::GfQuaternion::operator*=(double *a1, double *a2)
{
  double v2 = a1[1];
  double v3 = a2[1];
  double v4 = a1[2];
  double v5 = a1[3];
  double v6 = a2[2];
  double v7 = a2[3];
  double v8 = *a2 * v2 + *a1 * v3 + v4 * v7 - v6 * v5;
  double v9 = *a2 * v4 + *a1 * v6 + v3 * v5 - v2 * v7;
  double v10 = *a2 * v5 + *a1 * v7;
  *a1 = *a1 * *a2 - (v2 * v3 + v4 * v6 + v5 * v7);
  a1[1] = v8;
  double result = v2 * v6 - v3 * v4 + v10;
  a1[2] = v9;
  a1[3] = result;
  return result;
}

float64x2_t pxrInternal__aapl__pxrReserved__::GfQuaternion::operator*=(float64x2_t *a1, double a2)
{
  float64x2_t v2 = vmulq_n_f64(*a1, a2);
  float64x2_t result = vmulq_n_f64(a1[1], a2);
  *a1 = v2;
  a1[1] = result;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfSlerp(pxrInternal__aapl__pxrReserved__ *this, long double a2, const pxrInternal__aapl__pxrReserved__::GfQuaternion *a3, const pxrInternal__aapl__pxrReserved__::GfQuaternion *a4)
{
  double v6 = *(double *)this;
  double v5 = *((double *)this + 1);
  double v8 = *(double *)a3;
  double v7 = *((double *)a3 + 1);
  double v10 = *((double *)this + 2);
  double v9 = *((double *)this + 3);
  double v11 = *((double *)a3 + 2);
  double v12 = *((double *)a3 + 3);
  double v13 = v5 * v7 + v10 * v11 + v9 * v12 + *(double *)this * *(double *)a3;
  double v14 = -v13;
  if (v13 >= 0.0) {
    double v14 = v5 * v7 + v10 * v11 + v9 * v12 + *(double *)this * *(double *)a3;
  }
  if (1.0 - v14 <= 0.00001)
  {
    double v19 = 1.0 - a2;
  }
  else
  {
    long double v15 = acos(v14);
    double v16 = sin(v15);
    long double v17 = sin((1.0 - a2) * v15);
    long double v18 = v15 * a2;
    double v19 = v17 / v16;
    a2 = sin(v18) / v16;
  }
  double v20 = -a2;
  if (v13 >= 0.0) {
    double v20 = a2;
  }
  return v6 * v19 + v8 * v20;
}

uint64_t *sub_2168A9348()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  double v5 = 0;
  double v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C620, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74C620, (char *)0x20, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    double v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168A9408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

float64x2_t pxrInternal__aapl__pxrReserved__::GfRange1d::GfRange1d(float64x2_t *a1, float32x2_t *a2)
{
  float64x2_t result = vcvtq_f64_f32(*a2);
  *a1 = result;
  return result;
}

{
  float64x2_t result;

  float64x2_t result = vcvtq_f64_f32(*a2);
  *a1 = result;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfRange1d::GetDistanceSquared(pxrInternal__aapl__pxrReserved__::GfRange1d *this, double a2)
{
  if (*(double *)this > a2)
  {
    double v2 = *(double *)this - a2;
    return v2 * v2;
  }
  double v3 = *((double *)this + 1);
  double v4 = 0.0;
  if (v3 < a2)
  {
    double v2 = a2 - v3;
    return v2 * v2;
  }
  return v4;
}

uint64_t *sub_2168A9514()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  double v5 = 0;
  double v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C630, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74C630, (char *)0x10, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    double v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168A95D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

float32x2_t pxrInternal__aapl__pxrReserved__::GfRange1f::GfRange1f(float32x2_t *this, float64x2_t *a2)
{
  float32x2_t result = vcvt_f32_f64(*a2);
  *this = result;
  return result;
}

{
  float32x2_t result;

  float32x2_t result = vcvt_f32_f64(*a2);
  *this = result;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfRange1f::GetDistanceSquared(pxrInternal__aapl__pxrReserved__::GfRange1f *this, float a2)
{
  if (*(float *)this > a2)
  {
    float v2 = *(float *)this - a2;
    return (float)(v2 * v2);
  }
  float v3 = *((float *)this + 1);
  double v4 = 0.0;
  if (v3 < a2)
  {
    float v2 = a2 - v3;
    return (float)(v2 * v2);
  }
  return v4;
}

uint64_t *sub_2168A96E4()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  double v5 = 0;
  double v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C640, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74C640, (char *)8, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    double v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168A97A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::operator<<(void *a1, _OWORD *a2)
{
  LOBYTE(v9[0]) = 91;
  float v3 = sub_216779180(a1, (uint64_t)v9, 1);
  *(_OWORD *)int v9 = *a2;
  char v4 = pxrInternal__aapl__pxrReserved__::operator<<(v3, v9);
  double v5 = sub_216779180(v4, (uint64_t)"...", 3);
  long long v8 = a2[1];
  double v6 = pxrInternal__aapl__pxrReserved__::operator<<(v5, (double *)&v8);
  char v10 = 93;
  return sub_216779180(v6, (uint64_t)&v10, 1);
}

float64x2_t pxrInternal__aapl__pxrReserved__::GfRange2d::GfRange2d(float64x2_t *a1, float32x2_t *a2)
{
  float64x2_t result = vcvtq_f64_f32(*a2);
  float64x2_t v3 = vcvtq_f64_f32(a2[1]);
  *a1 = result;
  a1[1] = v3;
  return result;
}

{
  float64x2_t result;
  float64x2_t v3;

  float64x2_t result = vcvtq_f64_f32(*a2);
  float64x2_t v3 = vcvtq_f64_f32(a2[1]);
  *a1 = result;
  a1[1] = v3;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfRange2d::GetDistanceSquared(double *a1, double *a2)
{
  double v2 = *a2;
  if (*a2 >= *a1)
  {
    double v4 = a1[2];
    BOOL v5 = v2 <= v4;
    double result = (v2 - v4) * (v2 - v4);
    if (v5) {
      double result = 0.0;
    }
  }
  else
  {
    double result = (*a1 - v2) * (*a1 - v2);
  }
  double v6 = a2[1];
  double v7 = a1[1];
  if (v6 >= v7)
  {
    double v9 = a1[3];
    if (v6 <= v9) {
      return result;
    }
    double v8 = v6 - v9;
  }
  else
  {
    double v8 = v7 - v6;
  }
  return result + v8 * v8;
}

double pxrInternal__aapl__pxrReserved__::GfRange2d::GetCorner(pxrInternal__aapl__pxrReserved__::GfRange2d *this, unint64_t a2)
{
  double v2 = this;
  if (a2 < 4)
  {
    if (a2) {
      float64x2_t v3 = (pxrInternal__aapl__pxrReserved__::GfRange2d *)((char *)this + 16);
    }
    else {
      float64x2_t v3 = this;
    }
    double v2 = v3;
  }
  else
  {
    v5[0] = "gf/range2d.cpp";
    v5[1] = "GetCorner";
    v5[2] = 88;
    v5[3] = "GfVec2d pxrInternal__aapl__pxrReserved__::GfRange2d::GetCorner(size_t) const";
    char v6 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid corner %zu > 3.", a2);
  }
  return *(double *)v2;
}

double pxrInternal__aapl__pxrReserved__::GfRange2d::GetQuadrant(pxrInternal__aapl__pxrReserved__::GfRange2d *this, unint64_t a2)
{
  if (a2 < 4)
  {
    double Corner = pxrInternal__aapl__pxrReserved__::GfRange2d::GetCorner(this, a2);
    double v5 = *(double *)this + *((double *)this + 2);
    if (Corner >= v5 * 0.5) {
      return v5 * 0.5;
    }
    else {
      return Corner;
    }
  }
  else
  {
    v6[0] = "gf/range2d.cpp";
    v6[1] = "GetQuadrant";
    v6[2] = 99;
    v6[3] = "GfRange2d pxrInternal__aapl__pxrReserved__::GfRange2d::GetQuadrant(size_t) const";
    char v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v6, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid quadrant %zu > 3.", a2);
    return 3.40282347e38;
  }
}

uint64_t *sub_2168A9A64()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  double v5 = 0;
  char v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C650, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74C650, (char *)0x20, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    char v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168A9B24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

float64x2_t pxrInternal__aapl__pxrReserved__::GfRange2f::GfRange2f(float32x4_t *a1, float64x2_t *a2)
{
  float64x2_t result = a2[1];
  *a1 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*a2), result);
  return result;
}

{
  float64x2_t result;

  float64x2_t result = a2[1];
  *a1 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*a2), result);
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfRange2f::GetDistanceSquared(float *a1, float *a2)
{
  float v2 = *a2;
  if (*a2 >= *a1)
  {
    float v4 = a1[2];
    BOOL v5 = v2 <= v4;
    double result = (float)((float)(v2 - v4) * (float)(v2 - v4));
    if (v5) {
      double result = 0.0;
    }
  }
  else
  {
    double result = (float)((float)(*a1 - v2) * (float)(*a1 - v2));
  }
  float v6 = a2[1];
  float v7 = a1[1];
  if (v6 >= v7)
  {
    float v9 = a1[3];
    if (v6 <= v9) {
      return result;
    }
    float v8 = v6 - v9;
  }
  else
  {
    float v8 = v7 - v6;
  }
  return result + (float)(v8 * v8);
}

float pxrInternal__aapl__pxrReserved__::GfRange2f::GetCorner(pxrInternal__aapl__pxrReserved__::GfRange2f *this, unint64_t a2)
{
  float v2 = this;
  if (a2 < 4)
  {
    if (a2) {
      float64x2_t v3 = (pxrInternal__aapl__pxrReserved__::GfRange2f *)((char *)this + 8);
    }
    else {
      float64x2_t v3 = this;
    }
    float v2 = v3;
  }
  else
  {
    v5[0] = "gf/range2f.cpp";
    v5[1] = "GetCorner";
    v5[2] = 88;
    v5[3] = "GfVec2f pxrInternal__aapl__pxrReserved__::GfRange2f::GetCorner(size_t) const";
    char v6 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid corner %zu > 3.", a2);
  }
  return *(float *)v2;
}

float pxrInternal__aapl__pxrReserved__::GfRange2f::GetQuadrant(pxrInternal__aapl__pxrReserved__::GfRange2f *this, unint64_t a2)
{
  if (a2 < 4)
  {
    float Corner = pxrInternal__aapl__pxrReserved__::GfRange2f::GetCorner(this, a2);
    float v5 = *(float *)this + *((float *)this + 2);
    if (Corner >= (float)(v5 * 0.5)) {
      return v5 * 0.5;
    }
    else {
      return Corner;
    }
  }
  else
  {
    v6[0] = "gf/range2f.cpp";
    v6[1] = "GetQuadrant";
    v6[2] = 99;
    v6[3] = "GfRange2f pxrInternal__aapl__pxrReserved__::GfRange2f::GetQuadrant(size_t) const";
    char v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v6, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid quadrant %zu > 3.", a2);
    return 3.4028e38;
  }
}

uint64_t *sub_2168A9DF0()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  float v5 = 0;
  char v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C660, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74C660, (char *)0x10, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    char v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168A9EB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

float64x2_t pxrInternal__aapl__pxrReserved__::GfRange3d::GfRange3d(float64x2_t *a1, float32x2_t *a2)
{
  float64x2_t v2 = vcvtq_f64_f32(a2[1]);
  *a1 = vcvtq_f64_f32(*a2);
  a1[1] = v2;
  float64x2_t result = vcvtq_f64_f32(a2[2]);
  a1[2] = result;
  return result;
}

{
  float64x2_t v2;
  float64x2_t result;

  float64x2_t v2 = vcvtq_f64_f32(a2[1]);
  *a1 = vcvtq_f64_f32(*a2);
  a1[1] = v2;
  float64x2_t result = vcvtq_f64_f32(a2[2]);
  a1[2] = result;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfRange3d::GetDistanceSquared(double *a1, double *a2)
{
  double v2 = *a2;
  if (*a2 >= *a1)
  {
    double v4 = a1[3];
    BOOL v5 = v2 <= v4;
    double result = (v2 - v4) * (v2 - v4);
    if (v5) {
      double result = 0.0;
    }
  }
  else
  {
    double result = (*a1 - v2) * (*a1 - v2);
  }
  double v6 = a2[1];
  double v7 = a1[1];
  if (v6 >= v7)
  {
    double v8 = a1[4];
    BOOL v5 = v6 <= v8;
    double v9 = result + (v6 - v8) * (v6 - v8);
    if (!v5) {
      double result = v9;
    }
  }
  else
  {
    double result = result + (v7 - v6) * (v7 - v6);
  }
  double v10 = a2[2];
  double v11 = a1[2];
  if (v10 >= v11)
  {
    double v13 = a1[5];
    if (v10 <= v13) {
      return result;
    }
    double v12 = v10 - v13;
  }
  else
  {
    double v12 = v11 - v10;
  }
  return result + v12 * v12;
}

double pxrInternal__aapl__pxrReserved__::GfRange3d::GetCorner(pxrInternal__aapl__pxrReserved__::GfRange3d *this, unint64_t a2)
{
  double v2 = this;
  if (a2 < 8)
  {
    if (a2) {
      float64x2_t v3 = (pxrInternal__aapl__pxrReserved__::GfRange3d *)((char *)this + 24);
    }
    else {
      float64x2_t v3 = this;
    }
    double v2 = v3;
  }
  else
  {
    v5[0] = "gf/range3d.cpp";
    v5[1] = "GetCorner";
    v5[2] = 96;
    v5[3] = "GfVec3d pxrInternal__aapl__pxrReserved__::GfRange3d::GetCorner(size_t) const";
    char v6 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid corner %zu > 7.", a2);
  }
  return *(double *)v2;
}

void pxrInternal__aapl__pxrReserved__::GfRange3d::GetOctant(pxrInternal__aapl__pxrReserved__::GfRange3d *this@<X0>, unint64_t a2@<X1>, double *a3@<X8>)
{
  if (a2 < 8)
  {
    double Corner = pxrInternal__aapl__pxrReserved__::GfRange3d::GetCorner(this, a2);
    double v8 = *((double *)this + 5);
    double v9 = (*(double *)this + *((double *)this + 3)) * 0.5;
    double v10 = (*((double *)this + 1) + *((double *)this + 4)) * 0.5;
    double v11 = (*((double *)this + 2) + v8) * 0.5;
    if (Corner >= v9) {
      double v12 = (*(double *)this + *((double *)this + 3)) * 0.5;
    }
    else {
      double v12 = Corner;
    }
    if (Corner < v9) {
      double Corner = (*(double *)this + *((double *)this + 3)) * 0.5;
    }
    if (v5 >= v10) {
      double v13 = (*((double *)this + 1) + *((double *)this + 4)) * 0.5;
    }
    else {
      double v13 = v5;
    }
    if (v5 < v10) {
      double v5 = (*((double *)this + 1) + *((double *)this + 4)) * 0.5;
    }
    if (v6 >= v11) {
      double v14 = (*((double *)this + 2) + v8) * 0.5;
    }
    else {
      double v14 = v6;
    }
    if (v6 < v11) {
      double v6 = (*((double *)this + 2) + v8) * 0.5;
    }
    *a3 = v12;
    a3[1] = v13;
    a3[2] = v14;
  }
  else
  {
    v15[0] = "gf/range3d.cpp";
    v15[1] = "GetOctant";
    v15[2] = 109;
    v15[3] = "GfRange3d pxrInternal__aapl__pxrReserved__::GfRange3d::GetOctant(size_t) const";
    char v16 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v15, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid octant %zu > 7.", a2);
    *(int64x2_t *)a3 = vdupq_n_s64(0x47EFFFFFE0000000uLL);
    a3[2] = 3.40282347e38;
    double Corner = -3.40282347e38;
    double v5 = -3.40282347e38;
    double v6 = -3.40282347e38;
  }
  a3[3] = Corner;
  a3[4] = v5;
  a3[5] = v6;
}

uint64_t *sub_2168AA214()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  double v5 = 0;
  double v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C670, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74C670, (char *)0x30, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    double v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168AA2D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

float32x2_t pxrInternal__aapl__pxrReserved__::GfRange3f::GfRange3f(uint64_t a1, float64x2_t *a2)
{
  *(float32x4_t *)a1 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*a2), a2[1]);
  float32x2_t result = vcvt_f32_f64(a2[2]);
  *(float32x2_t *)(a1 + 16) = result;
  return result;
}

{
  float32x2_t result;

  *(float32x4_t *)a1 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*a2), a2[1]);
  float32x2_t result = vcvt_f32_f64(a2[2]);
  *(float32x2_t *)(a1 + 16) = result;
  return result;
}

double pxrInternal__aapl__pxrReserved__::GfRange3f::GetDistanceSquared(float *a1, float *a2)
{
  float v2 = *a2;
  if (*a2 >= *a1)
  {
    float v4 = a1[3];
    BOOL v5 = v2 <= v4;
    double result = (float)((float)(v2 - v4) * (float)(v2 - v4));
    if (v5) {
      double result = 0.0;
    }
  }
  else
  {
    double result = (float)((float)(*a1 - v2) * (float)(*a1 - v2));
  }
  float v6 = a2[1];
  float v7 = a1[1];
  if (v6 >= v7)
  {
    float v9 = a1[4];
    if (v6 <= v9) {
      goto LABEL_10;
    }
    float v8 = v6 - v9;
  }
  else
  {
    float v8 = v7 - v6;
  }
  double result = result + (float)(v8 * v8);
LABEL_10:
  float v10 = a2[2];
  float v11 = a1[2];
  if (v10 >= v11)
  {
    float v13 = a1[5];
    if (v10 <= v13) {
      return result;
    }
    float v12 = v10 - v13;
  }
  else
  {
    float v12 = v11 - v10;
  }
  return result + (float)(v12 * v12);
}

float pxrInternal__aapl__pxrReserved__::GfRange3f::GetCorner(pxrInternal__aapl__pxrReserved__::GfRange3f *this, unint64_t a2)
{
  float v2 = this;
  if (a2 < 8)
  {
    if (a2) {
      float64x2_t v3 = (pxrInternal__aapl__pxrReserved__::GfRange3f *)((char *)this + 12);
    }
    else {
      float64x2_t v3 = this;
    }
    float v2 = v3;
  }
  else
  {
    v5[0] = "gf/range3f.cpp";
    v5[1] = "GetCorner";
    v5[2] = 96;
    v5[3] = "GfVec3f pxrInternal__aapl__pxrReserved__::GfRange3f::GetCorner(size_t) const";
    char v6 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid corner %zu > 7.", a2);
  }
  return *(float *)v2;
}

void pxrInternal__aapl__pxrReserved__::GfRange3f::GetOctant(pxrInternal__aapl__pxrReserved__::GfRange3f *this@<X0>, unint64_t a2@<X1>, float *a3@<X8>)
{
  if (a2 < 8)
  {
    float Corner = pxrInternal__aapl__pxrReserved__::GfRange3f::GetCorner(this, a2);
    float v8 = *((float *)this + 5);
    float v9 = (float)(*(float *)this + *((float *)this + 3)) * 0.5;
    float v10 = (float)(*((float *)this + 1) + *((float *)this + 4)) * 0.5;
    float v11 = (float)(*((float *)this + 2) + v8) * 0.5;
    if (Corner >= v9) {
      float v12 = (float)(*(float *)this + *((float *)this + 3)) * 0.5;
    }
    else {
      float v12 = Corner;
    }
    if (Corner < v9) {
      float Corner = (float)(*(float *)this + *((float *)this + 3)) * 0.5;
    }
    if (v5 >= v10) {
      float v13 = (float)(*((float *)this + 1) + *((float *)this + 4)) * 0.5;
    }
    else {
      float v13 = v5;
    }
    if (v5 < v10) {
      float v5 = (float)(*((float *)this + 1) + *((float *)this + 4)) * 0.5;
    }
    if (v6 >= v11) {
      float v14 = (float)(*((float *)this + 2) + v8) * 0.5;
    }
    else {
      float v14 = v6;
    }
    if (v6 < v11) {
      float v6 = (float)(*((float *)this + 2) + v8) * 0.5;
    }
    *a3 = v12;
    a3[1] = v13;
    a3[2] = v14;
  }
  else
  {
    v15[0] = "gf/range3f.cpp";
    v15[1] = "GetOctant";
    v15[2] = 109;
    v15[3] = "GfRange3f pxrInternal__aapl__pxrReserved__::GfRange3f::GetOctant(size_t) const";
    char v16 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v15, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid octant %zu > 7.", a2);
    *(int32x2_t *)a3 = vdup_n_s32(0x7F7FFFFFu);
    a3[2] = 3.4028e38;
    float Corner = -3.4028e38;
    float v5 = -3.4028e38;
    float v6 = -3.4028e38;
  }
  a3[3] = Corner;
  a3[4] = v5;
  a3[5] = v6;
}

uint64_t *sub_2168AA63C()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  float v5 = 0;
  float v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C680, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74C680, (char *)0x18, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    float v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168AA6FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

__n128 pxrInternal__aapl__pxrReserved__::GfRay::SetPointAndDirection(uint64_t a1, long long *a2, __n128 *a3)
{
  long long v3 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v3;
  __n128 result = *a3;
  *(void *)(a1 + 40) = a3[1].n128_u64[0];
  *(__n128 *)(a1 + 24) = result;
  return result;
}

float64_t pxrInternal__aapl__pxrReserved__::GfRay::SetEnds(uint64_t a1, uint64_t a2, float64x2_t *a3)
{
  float64x2_t v3 = *(float64x2_t *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(float64x2_t *)a1 = v3;
  float64_t result = a3[1].f64[0] - *(double *)(a2 + 16);
  *(float64x2_t *)(a1 + 24) = vsubq_f64(*a3, *(float64x2_t *)a2);
  *(float64_t *)(a1 + 40) = result;
  return result;
}

pxrInternal__aapl__pxrReserved__::GfRay *pxrInternal__aapl__pxrReserved__::GfRay::Transform(pxrInternal__aapl__pxrReserved__::GfRay *this, const pxrInternal__aapl__pxrReserved__::GfMatrix4d *a2)
{
  *(double *)this = sub_216893298((double *)a2, (double *)this);
  *((void *)this + 1) = v4;
  *((void *)this + 2) = v5;
  *((double *)this + 3) = sub_216896EC8((double *)a2, (double *)this + 3);
  *((void *)this + 4) = v6;
  *((void *)this + 5) = v7;
  return this;
}

double pxrInternal__aapl__pxrReserved__::GfRay::FindClosestPoint(long long *a1, double *a2, double *a3)
{
  long long v9 = *a1;
  uint64_t v10 = *((void *)a1 + 2);
  long long v11 = *(long long *)((char *)a1 + 24);
  double v12 = *((double *)a1 + 5);
  double v4 = sqrt(*(double *)&v11 * *(double *)&v11 + *((double *)&v11 + 1) * *((double *)&v11 + 1) + v12 * v12);
  double v5 = 1.0 / v4;
  if (v4 <= 1.0e-10) {
    double v5 = 1.0e10;
  }
  *(double *)&long long v11 = *(double *)&v11 * v5;
  *((double *)&v11 + 1) = *((double *)&v11 + 1) * v5;
  double v12 = v12 * v5;
  double v8 = 0.0;
  pxrInternal__aapl__pxrReserved__::GfLine::FindClosestPoint((double *)&v9, a2, &v8);
  double v6 = v8;
  if (v8 < 0.0) {
    double v6 = 0.0;
  }
  if (a3) {
    *a3 = v6 / v4;
  }
  return v6 * *(double *)&v11 + *(double *)&v9;
}

BOOL pxrInternal__aapl__pxrReserved__::GfFindClosestPoints(uint64_t a1, uint64_t a2, float64x2_t *a3, uint64_t a4, double *a5, void *a6)
{
  float64x2_t v20 = *(float64x2_t *)a1;
  double v21 = *(double *)(a1 + 16);
  float64x2_t v22 = *(float64x2_t *)(a1 + 24);
  double v23 = *(double *)(a1 + 40);
  double v10 = sqrt(v22.f64[0] * v22.f64[0] + v22.f64[1] * v22.f64[1] + v23 * v23);
  double v11 = 1.0 / v10;
  if (v10 <= 1.0e-10) {
    double v11 = 1.0e10;
  }
  v22.f64[0] = v22.f64[0] * v11;
  v22.f64[1] = v22.f64[1] * v11;
  double v23 = v23 * v11;
  uint64_t v15 = 0;
  double v16 = 0.0;
  BOOL result = pxrInternal__aapl__pxrReserved__::GfFindClosestPoints(v20.f64, a2, v19, &v17, &v16, (double *)&v15);
  if (result)
  {
    double v13 = v16;
    if (v16 < 0.0) {
      double v13 = 0.0;
    }
    if (a3)
    {
      double v14 = v13 * v23 + v21;
      *a3 = vaddq_f64(vmulq_n_f64(v22, v13), v20);
      a3[1].f64[0] = v14;
    }
    if (a4)
    {
      *(float64x2_t *)a4 = v17;
      *(void *)(a4 + 16) = v18;
    }
    if (a5) {
      *a5 = v13 / v10;
    }
    if (a6) {
      *a6 = v15;
    }
  }
  return result;
}

{
  double v10;
  double v11;
  BOOL result;
  double v13;
  double v14;
  uint64_t v15;
  double v16;
  float64x2_t v17;
  uint64_t v18;
  unsigned char v19[24];
  float64x2_t v20;
  double v21;
  float64x2_t v22;
  double v23;

  float64x2_t v20 = *(float64x2_t *)a1;
  double v21 = *(double *)(a1 + 16);
  float64x2_t v22 = *(float64x2_t *)(a1 + 24);
  double v23 = *(double *)(a1 + 40);
  double v10 = sqrt(v22.f64[0] * v22.f64[0] + v22.f64[1] * v22.f64[1] + v23 * v23);
  double v11 = 1.0 / v10;
  if (v10 <= 1.0e-10) {
    double v11 = 1.0e10;
  }
  v22.f64[0] = v22.f64[0] * v11;
  v22.f64[1] = v22.f64[1] * v11;
  double v23 = v23 * v11;
  uint64_t v15 = 0;
  double v16 = 0.0;
  BOOL result = pxrInternal__aapl__pxrReserved__::GfFindClosestPoints(v20.f64, a2, (uint64_t)v19, &v17, &v16, (double *)&v15);
  if (result)
  {
    double v13 = v16;
    if (v16 < 0.0) {
      double v13 = 0.0;
    }
    if (a3)
    {
      double v14 = v13 * v23 + v21;
      *a3 = vaddq_f64(vmulq_n_f64(v22, v13), v20);
      a3[1].f64[0] = v14;
    }
    if (a4)
    {
      *(float64x2_t *)a4 = v17;
      *(void *)(a4 + 16) = v18;
    }
    if (a5) {
      *a5 = v13 / v10;
    }
    if (a6) {
      *a6 = v15;
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfRay::Intersect(pxrInternal__aapl__pxrReserved__::GfRay *a1, double *a2, double *a3, double *a4, double *a5, double *a6, BOOL *a7, double a8)
{
  pxrInternal__aapl__pxrReserved__::GfPlane::Set(v44, a2, a3, a4);
  double v43 = 0.0;
  int v16 = pxrInternal__aapl__pxrReserved__::GfRay::Intersect(a1, (const pxrInternal__aapl__pxrReserved__::GfPlane *)v44, &v43, a7);
  uint64_t result = 0;
  if (v16 && v43 <= a8)
  {
    double v18 = fabs(v44[0]);
    double v19 = fabs(v44[1]);
    double v20 = fabs(v44[2]);
    BOOL v21 = v18 > v19;
    BOOL v22 = v18 > v20;
    BOOL v23 = !v21 || !v22;
    if (v21 && v22) {
      uint64_t v24 = 1;
    }
    else {
      uint64_t v24 = 2 * (v19 > v20);
    }
    uint64_t v25 = 2;
    if (v23) {
      uint64_t v25 = v19 <= v20;
    }
    double v26 = a2[v24];
    double v27 = a2[v25];
    double v28 = *((double *)a1 + v24) + v43 * *((double *)a1 + v24 + 3) - v26;
    double v29 = *((double *)a1 + v25) + v43 * *((double *)a1 + v25 + 3) - v27;
    double v30 = a3[v24] - v26;
    double v31 = a3[v25] - v27;
    double v32 = a4[v24] - v26;
    double v33 = a4[v25] - v27;
    double v34 = (v29 * v30 - v28 * v31) / (v30 * v33 - v31 * v32);
    if (v34 > -1.0e-10 && v34 < 0.0) {
      double v34 = 0.0;
    }
    if (v34 < 0.0 || v34 > 1.0) {
      return 0;
    }
    BOOL v37 = v31 < -1.0e-10;
    if (v31 > 1.0e-10) {
      BOOL v37 = 1;
    }
    if (v37)
    {
      double v32 = v33;
      double v28 = v29;
      double v38 = v31;
    }
    else
    {
      double v38 = v30;
    }
    double v39 = (v28 - v32 * v34) / v38;
    if (v39 > -1.0e-10 && v39 < 0.0) {
      double v39 = 0.0;
    }
    if (v39 < 0.0) {
      return 0;
    }
    float v41 = 1.0 - (v34 + v39);
    if (v41 > -1.0e-10 && v41 < 0.0) {
      float v41 = 0.0;
    }
    if (v41 >= 0.0)
    {
      if (a5) {
        *a5 = v43;
      }
      if (a6)
      {
        *a6 = v41;
        a6[1] = v39;
        a6[2] = v34;
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfRay::Intersect(pxrInternal__aapl__pxrReserved__::GfRay *this, const pxrInternal__aapl__pxrReserved__::GfPlane *a2, double *a3, BOOL *a4)
{
  double v4 = *((double *)a2 + 1);
  double v5 = *((double *)a2 + 2);
  double v6 = *((double *)this + 3) * *(double *)a2 + *((double *)this + 4) * v4 + *((double *)this + 5) * v5;
  if (v6 < 1.0e-10 && v6 > -1.0e-10) {
    return 0;
  }
  double v7 = (*(double *)a2 * (*(double *)a2 * *((double *)a2 + 3) - *(double *)this)
      + v4 * (*((double *)a2 + 3) * v4 - *((double *)this + 1))
      + v5 * (*((double *)a2 + 3) * v5 - *((double *)this + 2)))
     / v6;
  if (v7 < 0.0) {
    return 0;
  }
  if (a3) {
    *a3 = v7;
  }
  if (a4) {
    *a4 = v6 < 0.0;
  }
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfRay::Intersect(uint64_t a1, double *a2, double *a3, double *a4)
{
  if (*a2 > a2[3] || a2[1] > a2[4] || a2[2] > a2[5]) {
    return 0;
  }
  uint64_t v5 = 0;
  double v6 = -1.79769313e308;
  double v7 = 1.79769313e308;
  do
  {
    double v8 = *(double *)(a1 + v5 * 8 + 24);
    if (fabs(v8) >= 1.0e-10)
    {
      double v10 = 1.0 / v8;
      double v11 = *(double *)(a1 + v5 * 8);
      double v12 = v10 * (a2[v5] - v11);
      double v13 = v10 * (a2[v5 + 3] - v11);
      if (v12 <= v13) {
        double v14 = v12;
      }
      else {
        double v14 = v13;
      }
      if (v12 > v13) {
        double v13 = v12;
      }
      if (v14 > v6) {
        double v6 = v14;
      }
      if (v13 < v7) {
        double v7 = v13;
      }
    }
    else
    {
      double v9 = *(double *)(a1 + v5 * 8);
      if (v9 < a2[v5] || v9 > a2[v5 + 3]) {
        return 0;
      }
    }
    ++v5;
  }
  while (v5 != 3);
  uint64_t result = 0;
  if (v6 <= v7 && v7 >= 0.0)
  {
    if (a3) {
      *a3 = v6;
    }
    if (a4) {
      *a4 = v7;
    }
    return 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfRay::Intersect(pxrInternal__aapl__pxrReserved__::GfRay *this, const pxrInternal__aapl__pxrReserved__::GfBBox3d *a2, double *a3, double *a4)
{
  long long v7 = *((_OWORD *)this + 1);
  long long v14 = *(_OWORD *)this;
  long long v15 = v7;
  long long v16 = *((_OWORD *)this + 2);
  double v8 = (double *)((char *)a2 + 176);
  *(void *)&long long v14 = sub_216893298((double *)a2 + 22, (double *)&v14);
  *((void *)&v14 + 1) = v9;
  *(void *)&long long v15 = v10;
  *((void *)&v15 + 1) = sub_216896EC8(v8, (double *)&v15 + 1);
  *(void *)&long long v16 = v11;
  *((void *)&v16 + 1) = v12;
  return pxrInternal__aapl__pxrReserved__::GfRay::Intersect((uint64_t)&v14, (double *)a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::GfRay::Intersect(uint64_t a1, double *a2, double *a3, double *a4, double a5, int8x16_t a6, double a7, double a8, int8x16_t a9)
{
  a9.i64[0] = *(void *)(a1 + 8);
  double v9 = *(double *)(a1 + 16);
  double v10 = a2[1];
  double v11 = a2[2];
  *(double *)a6.i64 = *(double *)a1 + *(double *)(a1 + 24) - *(double *)a1;
  double v12 = *(double *)a9.i64 + *(double *)(a1 + 32) - *(double *)a9.i64;
  double v13 = v9 + *(double *)(a1 + 40) - v9;
  double v14 = *(double *)a6.i64 * *(double *)a6.i64 + v12 * v12 + v13 * v13;
  *(double *)a6.i64 = *(double *)a6.i64 * (*(double *)a1 - *a2) + v12 * (*(double *)a9.i64 - v10) + v13 * (v9 - v11);
  *(double *)a6.i64 = *(double *)a6.i64 + *(double *)a6.i64;
  double v15 = v9 * v9
      + *(double *)a9.i64 * *(double *)a9.i64
      + *(double *)a1 * *(double *)a1
      + *a2 * *a2
      + v10 * v10
      + v11 * v11;
  double v16 = *(double *)a1 * *a2 + *(double *)a9.i64 * v10;
  *(double *)a9.i64 = v9 * v11;
  return pxrInternal__aapl__pxrReserved__::GfRay::_SolveQuadratic((pxrInternal__aapl__pxrReserved__::GfRay *)a1, v14, a6, v15 - (v16 + v9 * v11 + v16 + v9 * v11) - a5 * a5, a3, a4, v14, a9);
}

uint64_t pxrInternal__aapl__pxrReserved__::GfRay::_SolveQuadratic(pxrInternal__aapl__pxrReserved__::GfRay *this, double a2, int8x16_t a3, double a4, double *a5, double *a6, double a7, int8x16_t a8)
{
  if (fabs(a2) < 0.000001)
  {
    if (fabs(*(double *)a3.i64) >= 0.000001)
    {
      double v8 = -a4 / *(double *)a3.i64;
      goto LABEL_6;
    }
    return 0;
  }
  double v9 = *(double *)a3.i64 * *(double *)a3.i64 + a2 * -4.0 * a4;
  if (fabs(v9) >= 0.000001)
  {
    if (v9 >= 0.0)
    {
      a8.i64[0] = 1.0;
      v10.f64[0] = NAN;
      v10.f64[1] = NAN;
      double v11 = (*(double *)vbslq_s8((int8x16_t)vnegq_f64(v10), a8, a3).i64 * sqrt(v9) + *(double *)a3.i64) * -0.5;
      double v8 = v11 / a2;
      double v12 = a4 / v11;
      if (v8 <= v12) {
        double v13 = v8;
      }
      else {
        double v13 = v12;
      }
      if (v8 <= v12) {
        double v8 = v12;
      }
      if (v8 >= 0.0)
      {
        if (a5) {
          *a5 = v13;
        }
        goto LABEL_19;
      }
    }
    return 0;
  }
  double v8 = -*(double *)a3.i64 / (a2 + a2);
LABEL_6:
  if (v8 < 0.0) {
    return 0;
  }
  if (a5) {
    *a5 = v8;
  }
LABEL_19:
  if (a6) {
    *a6 = v8;
  }
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfRay::Intersect(double *a1, double *a2, uint64_t a3, double *a4, double *a5, double a6, int8x16_t a7, double a8, double a9, int8x16_t a10)
{
  a7.i64[0] = *(void *)a3;
  double v10 = *(double *)(a3 + 8);
  double v11 = *(double *)(a3 + 16);
  double v12 = sqrt(*(double *)a7.i64 * *(double *)a7.i64 + v10 * v10 + v11 * v11);
  double v13 = 1.0 / v12;
  BOOL v14 = v12 <= 1.0e-10;
  a10.i64[0] = 0x4202A05F20000000;
  if (!v14) {
    *(double *)a10.i64 = v13;
  }
  *(double *)a7.i64 = *(double *)a7.i64 * *(double *)a10.i64;
  double v15 = v10 * *(double *)a10.i64;
  double v16 = v11 * *(double *)a10.i64;
  *(double *)a10.i64 = *a1 - *a2;
  double v17 = a1[1] - a2[1];
  double v18 = a1[3];
  double v19 = a1[2] - a2[2];
  double v20 = a1[4];
  double v21 = a1[5];
  double v22 = *(double *)a7.i64 * v18 + v15 * v20 + v16 * v21;
  double v23 = v18 - *(double *)a7.i64 * v22;
  double v24 = v20 - v15 * v22;
  double v25 = v21 - v16 * v22;
  double v26 = *(double *)a10.i64 * *(double *)a7.i64 + v17 * v15 + v16 * v19;
  *(double *)a10.i64 = *(double *)a10.i64 - *(double *)a7.i64 * v26;
  double v27 = v17 - v15 * v26;
  double v28 = v19 - v16 * v26;
  *(double *)a7.i64 = v28 * v25 + *(double *)a10.i64 * v23 + v27 * v24;
  *(double *)a7.i64 = *(double *)a7.i64 + *(double *)a7.i64;
  double v29 = *(double *)a10.i64 * *(double *)a10.i64 + v27 * v27;
  *(double *)a10.i64 = v28 * v28;
  return pxrInternal__aapl__pxrReserved__::GfRay::_SolveQuadratic((pxrInternal__aapl__pxrReserved__::GfRay *)a1, v25 * v25 + v23 * v23 + v24 * v24, a7, v28 * v28 + v29 - a6 * a6, a4, a5, v25 * v25 + v23 * v23 + v24 * v24, a10);
}

{
  double v13;
  double v14;
  double v15;
  double v16;
  BOOL v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  uint64_t result;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;

  double v13 = *(double *)a3;
  BOOL v14 = *(double *)(a3 + 8);
  a10.i64[0] = *(void *)(a3 + 16);
  double v15 = sqrt(v13 * v13 + v14 * v14 + *(double *)a10.i64 * *(double *)a10.i64);
  double v16 = 1.0 / v15;
  double v17 = v15 <= 1.0e-10;
  double v18 = 1.0e10;
  if (!v17) {
    double v18 = v16;
  }
  double v19 = v13 * v18;
  double v20 = v14 * v18;
  double v21 = *(double *)a10.i64 * v18;
  double v22 = *a2 + v13 * v18 * *(double *)a7.i64;
  double v23 = a2[1] + v14 * v18 * *(double *)a7.i64;
  double v24 = a2[2] + *(double *)a10.i64 * v18 * *(double *)a7.i64;
  double v25 = *a1 - v22;
  double v26 = a1[1] - v23;
  double v27 = a1[3];
  *(double *)a10.i64 = a1[2] - v24;
  double v28 = a1[4];
  double v29 = a1[5];
  double v30 = v19 * v27 + v20 * v28 + v21 * v29;
  double v31 = v27 - v19 * v30;
  double v32 = v28 - v20 * v30;
  double v33 = v29 - v21 * v30;
  double v34 = v21 * *(double *)a10.i64 + v19 * v25 + v20 * v26;
  double v35 = v25 - v19 * v34;
  double v36 = v26 - v20 * v34;
  *(double *)a10.i64 = *(double *)a10.i64 - v21 * v34;
  BOOL v37 = *(double *)a7.i64 * *(double *)a7.i64 / (a6 * a6 + *(double *)a7.i64 * *(double *)a7.i64);
  *(double *)a7.i64 = v37 * (v33 * *(double *)a10.i64 + v31 * v35 + v32 * v36);
  *(double *)a7.i64 = *(double *)a7.i64 - (1.0 - v37) * v30 * v34 + *(double *)a7.i64 - (1.0 - v37) * v30 * v34;
  uint64_t result = pxrInternal__aapl__pxrReserved__::GfRay::_SolveQuadratic((pxrInternal__aapl__pxrReserved__::GfRay *)a1, v37 * (v33 * v33 + v31 * v31 + v32 * v32) - (1.0 - v37) * (v30 * v30), a7, v37 * (*(double *)a10.i64 * *(double *)a10.i64 + v35 * v35 + v36 * v36) - (1.0 - v37) * (v34 * v34), a4, a5, (1.0 - v37) * (v34 * v34), a10);
  if (result)
  {
    double v39 = a1[4];
    double v40 = a1[5];
    double v42 = a1[2];
    float v41 = a1[3];
    double v43 = a1[1];
    double v44 = v19 * (*a4 * v41 + *a1 - v22) + v20 * (*a4 * v39 + v43 - v23) + v21 * (*a4 * v40 + v42 - v24);
    double v45 = v21 * (v42 + v40 * *a5 - v24) + v19 * (*a1 + v41 * *a5 - v22) + v20 * (v43 + v39 * *a5 - v23);
    if (v44 <= 0.0 || v45 <= 0.0)
    {
      if (v44 > 0.0)
      {
        *a4 = *a5;
      }
      else if (v45 > 0.0)
      {
        *a5 = *a4;
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t *sub_2168AB574()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  uint64_t v5 = 0;
  double v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C690, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74C690, (char *)0x30, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    double v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168AB634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::GfRect2i::GetNormalized(pxrInternal__aapl__pxrReserved__::GfRect2i *this)
{
  unsigned int v1 = *((_DWORD *)this + 2);
  unsigned int v2 = *((_DWORD *)this + 3);
  unsigned int v3 = *((_DWORD *)this + 1);
  if ((signed int)v1 >= *(_DWORD *)this) {
    uint64_t v4 = *(unsigned int *)this;
  }
  else {
    uint64_t v4 = v1;
  }
  if ((int)v2 >= (int)v3) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v2;
  }
  return v4 | (v5 << 32);
}

uint64_t *sub_2168AB728()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  uint64_t v5 = 0;
  double v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C6A0, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74C6A0, (char *)0x10, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    double v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168AB7E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::GfRotation *pxrInternal__aapl__pxrReserved__::GfRotation::SetQuat(pxrInternal__aapl__pxrReserved__::GfRotation *this, const pxrInternal__aapl__pxrReserved__::GfQuatd *a2)
{
  double v3 = *(double *)a2;
  double v4 = *((double *)a2 + 1);
  double v5 = *((double *)a2 + 2);
  double v6 = sqrt(v3 * v3 + v4 * v4 + v5 * v5);
  if (v6 <= 1.0e-10)
  {
    *(void *)this = 0x3FF0000000000000;
    *((void *)this + 1) = 0;
    *((void *)this + 2) = 0;
    *((void *)this + 3) = 0;
  }
  else
  {
    double v7 = *((double *)a2 + 3);
    if (v7 <= 1.0) {
      double v8 = *((double *)a2 + 3);
    }
    else {
      double v8 = 1.0;
    }
    if (v7 >= -1.0) {
      double v9 = v8;
    }
    else {
      double v9 = -1.0;
    }
    long double v10 = acos(v9);
    v12[0] = v3 * (1.0 / v6);
    v12[1] = 1.0 / v6 * v4;
    v12[2] = 1.0 / v6 * v5;
    sub_2168AB908((uint64_t)this, (uint64_t)v12, v10 * 57.2957795 + v10 * 57.2957795);
  }
  return this;
}

double sub_2168AB908(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3 = *(void *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  *(double *)(a1 + 24) = a3;
  double result = *(double *)a1;
  double v5 = *(double *)(a1 + 8);
  double v6 = *(double *)(a1 + 16);
  double v7 = result * result + v5 * v5 + v6 * v6;
  if (fabs(v7 + -1.0) >= 1.0e-10)
  {
    double v8 = sqrt(v7);
    double v9 = 1.0 / v8;
    BOOL v10 = v8 <= 1.0e-10;
    double v11 = 1.0e10;
    if (!v10) {
      double v11 = v9;
    }
    *(double *)a1 = result * v11;
    *(double *)(a1 + 8) = v5 * v11;
    double result = v6 * v11;
    *(double *)(a1 + 16) = v6 * v11;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::GfRotation::SetRotateInto(void *a1, double *a2, double *a3)
{
  uint64_t v3 = (uint64_t)a1;
  double v4 = *a2;
  double v5 = a2[1];
  double v6 = a2[2];
  double v7 = sqrt(v4 * v4 + v5 * v5 + v6 * v6);
  if (v7 <= 1.0e-10) {
    double v8 = 1.0e10;
  }
  else {
    double v8 = 1.0 / v7;
  }
  double v9 = v4 * v8;
  double v10 = v5 * v8;
  double v11 = v6 * v8;
  double v12 = *a3;
  double v13 = a3[1];
  double v14 = a3[2];
  double v15 = sqrt(v12 * v12 + v13 * v13 + v14 * v14);
  if (v15 <= 1.0e-10) {
    double v16 = 1.0e10;
  }
  else {
    double v16 = 1.0 / v15;
  }
  double v17 = v11 * (v14 * v16) + v9 * (v12 * v16) + v10 * (v13 * v16);
  if (v17 <= 0.9999999)
  {
    if (v17 >= -0.9999999)
    {
      double v30 = v5 * v14 - v6 * v13;
      double v31 = v12 * v6 - v4 * v14;
      double v32 = v4 * v13 - v12 * v5;
      double v33 = sqrt(v32 * v32 + v31 * v31 + v30 * v30);
      if (v33 <= 1.0e-10) {
        double v34 = 1.0e10;
      }
      else {
        double v34 = 1.0 / v33;
      }
      double v37 = v30 * v34;
      double v38 = v31 * v34;
      double v39 = v32 * v34;
      double v29 = acos(v17) * 57.2957795;
    }
    else
    {
      double v18 = v10 * 0.0;
      double v19 = v11 * 0.0;
      double v20 = v10 * 0.0 - v11 * 0.0;
      double v21 = v11 - v9 * 0.0;
      double v22 = v9 * 0.0 - v10;
      double v23 = v18 - v11;
      double v24 = v19 - v9 * 0.0;
      double v25 = v9 - v18;
      if (sqrt(v22 * v22 + v20 * v20 + v21 * v21) < 0.00001)
      {
        double v26 = v23;
      }
      else
      {
        double v25 = v22;
        double v24 = v21;
        double v26 = v20;
      }
      double v27 = sqrt(v25 * v25 + v26 * v26 + v24 * v24);
      if (v27 <= 1.0e-10) {
        double v28 = 1.0e10;
      }
      else {
        double v28 = 1.0 / v27;
      }
      double v37 = v26 * v28;
      double v38 = v24 * v28;
      double v39 = v25 * v28;
      double v29 = 180.0;
    }
    sub_2168AB908(v3, (uint64_t)&v37, v29);
    return v35;
  }
  else
  {
    *a1 = 0x3FF0000000000000;
    a1[1] = 0;
    a1[2] = 0;
    a1[3] = 0;
  }
  return v3;
}

float64_t pxrInternal__aapl__pxrReserved__::GfRotation::GetQuat(float64x2_t *this)
{
  __double2 v2 = __sincos_stret(this[1].f64[1] * 0.0174532925 * 0.5);
  double v3 = this[1].f64[0] * v2.__sinval;
  float64x2_t v5 = vmulq_n_f64(*this, v2.__sinval);
  double v6 = v3;
  double cosval = v2.__cosval;
  pxrInternal__aapl__pxrReserved__::GfQuatd::Normalize(v5.f64, 1.0e-10);
  return v5.f64[0];
}

double pxrInternal__aapl__pxrReserved__::GfRotation::Decompose(float64x2_t *a1, double *a2, double *a3, double *a4)
{
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetRotate((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)v72, a1);
  double v8 = *a2;
  double v9 = a2[1];
  double v10 = a2[2];
  double v11 = sqrt(v8 * v8 + v9 * v9 + v10 * v10);
  double v12 = 1.0 / v11;
  BOOL v13 = v11 <= 1.0e-10;
  double v14 = 1.0e10;
  if (v13) {
    double v12 = 1.0e10;
  }
  double v15 = v8 * v12;
  double v16 = v9 * v12;
  double v17 = v10 * v12;
  double v18 = *a3;
  double v19 = a3[1];
  double v20 = a3[2];
  double v21 = sqrt(v18 * v18 + v19 * v19 + v20 * v20);
  if (v21 <= 1.0e-10) {
    double v22 = 1.0e10;
  }
  else {
    double v22 = 1.0 / v21;
  }
  double v23 = v18 * v22;
  double v24 = v19 * v22;
  double v25 = v20 * v22;
  double v26 = *a4;
  double v27 = a4[1];
  double v28 = a4[2];
  double v29 = sqrt(v26 * v26 + v27 * v27 + v28 * v28);
  if (v29 > 1.0e-10) {
    double v14 = 1.0 / v29;
  }
  double v40 = v27 * v14;
  double v41 = v26 * v14;
  double v30 = v28 * v14;
  if (fabs(v17 * v25 + v15 * v23 + v16 * v24) >= 0.000001
    || fabs(v17 * v30 + v15 * v41 + v16 * v40) >= 0.000001
    || fabs(v25 * v30 + v23 * v41 + v24 * v40) >= 0.000001)
  {
    double v58 = "gf/rotation.cpp";
    double v59 = "Decompose";
    uint64_t v60 = 127;
    double v61 = "GfVec3d pxrInternal__aapl__pxrReserved__::GfRotation::Decompose(const GfVec3d &, const GfVec3d &, const GfVec3d &) const";
    LOBYTE(v62) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v58, (pxrInternal__aapl__pxrReserved__ *)"Rotation axes are not orthogonal.", v7);
  }
  double v38 = v16;
  double v39 = v15;
  double v58 = *(char **)&v15;
  double v59 = *(const char **)&v23;
  uint64_t v60 = *(void *)&v41;
  double v61 = 0;
  double v62 = v16;
  double v63 = v24;
  double v64 = v40;
  uint64_t v65 = 0;
  double v66 = v17;
  double v67 = v25;
  double v37 = v30;
  double v68 = v30;
  long long v69 = 0u;
  long long v70 = 0u;
  uint64_t v71 = 0x3FF0000000000000;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::GetTranspose((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)&v58, (uint64_t)v42);
  long long v47 = v42[4];
  long long v48 = v42[5];
  long long v49 = v42[6];
  long long v50 = v42[7];
  long long v43 = v42[0];
  long long v44 = v42[1];
  long long v45 = v42[2];
  long long v46 = v42[3];
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=((double *)&v43, v72);
  long long v54 = v47;
  long long v55 = v48;
  long long v56 = v49;
  long long v57 = v50;
  v51[0] = v43;
  v51[1] = v44;
  long long v52 = v45;
  long long v53 = v46;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=((double *)v51, (double *)&v58);
  long double v31 = *(double *)v51;
  long double v32 = *(double *)&v52;
  double v33 = sqrt(v31 * v31 + v32 * v32);
  if (v33 <= 0.000001)
  {
    double v34 = atan2(-*(double *)&v53, *((long double *)&v52 + 1));
    atan2(-*(double *)&v54, v33);
  }
  else
  {
    double v34 = atan2(*((long double *)&v54 + 1), *(long double *)&v55);
    atan2(-*(double *)&v54, v33);
    atan2(v32, v31);
  }
  if ((v39 * v24 - v38 * v23) * v37 + (v38 * v25 - v17 * v24) * v41 + (v17 * v23 - v39 * v25) * v40 >= 0.0) {
    double v35 = -v34;
  }
  else {
    double v35 = v34;
  }
  return v35 * 57.2957795;
}

double pxrInternal__aapl__pxrReserved__::GfRotation::RotateOntoProjected(double *a1, double *a2, double *a3)
{
  double v3 = *a3;
  double v4 = a3[1];
  double v5 = a3[2];
  double v6 = sqrt(v3 * v3 + v4 * v4 + v5 * v5);
  if (v6 <= 1.0e-10) {
    double v7 = 1.0e10;
  }
  else {
    double v7 = 1.0 / v6;
  }
  double v8 = v3 * v7;
  double v9 = v4 * v7;
  double v10 = v5 * v7;
  double v11 = a1[1];
  double v12 = a1[2];
  double v13 = v12 * v10 + *a1 * v8 + v11 * v9;
  double v14 = *a1 - v8 * v13;
  double v15 = v11 - v9 * v13;
  double v16 = v12 - v10 * v13;
  double v17 = a2[1];
  double v18 = a2[2];
  double v19 = *a2 * v8 + v9 * v17 + v10 * v18;
  double v20 = *a2 - v8 * v19;
  double v21 = v17 - v9 * v19;
  double v22 = v18 - v10 * v19;
  double v23 = sqrt(v16 * v16 + v14 * v14 + v15 * v15);
  if (v23 <= 1.0e-10) {
    double v24 = 1.0e10;
  }
  else {
    double v24 = 1.0 / v23;
  }
  double v25 = v14 * v24;
  double v26 = v15 * v24;
  double v27 = v16 * v24;
  double v28 = sqrt(v22 * v22 + v20 * v20 + v21 * v21);
  if (v28 <= 1.0e-10) {
    double v29 = 1.0e10;
  }
  else {
    double v29 = 1.0 / v28;
  }
  double v30 = v20 * v29;
  double v31 = v21 * v29;
  double v32 = v22 * v29;
  double v33 = v10 * (v25 * v31 - v26 * v30) + v8 * (v26 * (v22 * v29) - v27 * v31) + v9 * (v27 * v30 - v25 * (v22 * v29));
  double v34 = v27 * v32 + v25 * v30 + v26 * v31;
  if (fabs(v33) >= 0.000001 || fabs(v34) >= 0.000001) {
    atan2(v33, v34);
  }
  double v35 = v10 * v10 + v8 * v8 + v9 * v9;
  if (fabs(v35 + -1.0) >= 1.0e-10)
  {
    double v36 = sqrt(v35);
    if (v36 <= 1.0e-10) {
      double v37 = 1.0e10;
    }
    else {
      double v37 = 1.0 / v36;
    }
    return v8 * v37;
  }
  return v8;
}

void pxrInternal__aapl__pxrReserved__::GfRotation::MatchClosestEulerRotation(pxrInternal__aapl__pxrReserved__::GfRotation *this, double a2, double a3, double a4, double a5, double *a6, double *a7, double *a8, double *a9)
{
  uint64_t v84 = *MEMORY[0x263EF8340];
  int v9 = this == 0;
  if (this) {
    int v10 = 4;
  }
  else {
    int v10 = 3;
  }
  if (!a6) {
    int v9 = 2;
  }
  int v11 = v10 - (a6 == 0);
  if (!a7) {
    int v9 = 3;
  }
  int v12 = v11 - (a7 == 0);
  int v13 = a8 == 0;
  if (a8) {
    int v14 = v9;
  }
  else {
    int v14 = 4;
  }
  unsigned int v15 = v12 - v13;
  if (v12 != v13)
  {
    *(double *)uint64_t v71 = a2;
    *(double *)&v71[1] = a3;
    *(double *)&v71[2] = a4;
    *(double *)&v71[3] = a5;
    if (v15 > 2)
    {
      if (v15 == 4) {
        uint64_t v32 = 4;
      }
      else {
        uint64_t v32 = 2;
      }
      double v33 = 0.0;
      double v34 = 0.0;
      if (a7) {
        double v34 = *a7;
      }
      if (a6) {
        double v33 = *a6;
      }
      double v35 = 0.0;
      double v36 = 0.0;
      if (this) {
        double v36 = *(double *)this;
      }
      if (a8) {
        double v35 = *a8;
      }
      uint64_t v37 = 0;
      double v38 = 0.0;
      if (this) {
        double v38 = *(double *)this;
      }
      if (a6) {
        uint64_t v37 = *(void *)a6;
      }
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      if (a7) {
        uint64_t v40 = *(void *)a7;
      }
      if (a8) {
        uint64_t v39 = *(void *)a8;
      }
      double v72 = v38;
      uint64_t v73 = v37;
      uint64_t v74 = v40;
      uint64_t v75 = v39;
      double v41 = v34 + dbl_2174532F0[v34 > 0.0];
      double v42 = v33 + dbl_2174532F0[v33 > 0.0];
      double v43 = v36 + dbl_2174532F0[v36 > 0.0];
      double v44 = v35 + dbl_2174532F0[v35 > 0.0];
      switch(v14)
      {
        case 0:
          double v46 = 0.0;
          uint64_t v47 = 0;
          if (a8) {
            uint64_t v47 = *(void *)a8;
          }
          double v76 = v43;
          double v77 = -v42;
          double v78 = v41;
          uint64_t v79 = v47;
          if (a6) {
            double v46 = *a6;
          }
          double v48 = -v46;
          double v49 = 0.0;
          double v50 = 0.0;
          if (a7) {
            double v50 = *a7;
          }
          double v80 = v43;
          double v81 = v48;
          double v82 = -v50;
          double v83 = v44;
          if (this) {
            double v49 = *(double *)this;
          }
          double v41 = -v41;
          uint64_t v51 = 3;
          double v43 = v49;
          goto LABEL_70;
        case 1:
          if (this) {
            double v43 = *(double *)this;
          }
          else {
            double v43 = 0.0;
          }
          goto LABEL_68;
        case 2:
        case 3:
          double v41 = 0.0;
          double v45 = 0.0;
          if (a6) {
            double v45 = *a6;
          }
          if (a7) {
            double v41 = *a7;
          }
          double v42 = -v45;
LABEL_68:
          double v41 = -v41;
          goto LABEL_69;
        case 4:
          double v42 = -v42;
          if (a8) {
            double v44 = *a8;
          }
          else {
            double v44 = 0.0;
          }
LABEL_69:
          uint64_t v51 = 1;
LABEL_70:
          long long v52 = &v72 + 4 * v51;
          *long long v52 = v43;
          v52[1] = v42;
          v52[2] = v41;
          v52[3] = v44;
          break;
        default:
          break;
      }
      uint64_t v53 = 0;
      do
      {
        long long v54 = (char *)&v72 + v53;
        *(double *)long long v54 = sub_2168AC598((uint64_t)v71);
        *((void *)v54 + 1) = v55;
        *((void *)v54 + 2) = v56;
        *((void *)v54 + 3) = v57;
        v53 += 32;
      }
      while (32 * v32 != v53);
      uint64_t v58 = 0;
      double v59 = 0.0;
      int v60 = -1;
      do
      {
        uint64_t v61 = 0;
        double v62 = &v72 + 4 * v58;
        double v63 = v62[1] - a3;
        double v64 = v62[2] - a4;
        double v65 = v62[3] - a5;
        v70[0] = *v62 - a2;
        v70[1] = v63;
        v70[2] = v64;
        v70[3] = v65;
        double v66 = 0.0;
        do
        {
          float64x2_t v67 = vabsq_f64(*(float64x2_t *)&v70[v61]);
          double v66 = v66 + v67.f64[0] + v67.f64[1];
          v61 += 2;
        }
        while (v61 != 4);
        if (v66 < v59 || v58 == 0)
        {
          double v59 = v66;
          int v60 = v58;
        }
        ++v58;
      }
      while (v58 != v32);
      long long v69 = &v72 + 4 * v60;
      if (this) {
        *(double *)this = *v69;
      }
      if (a6) {
        *a6 = v69[1];
      }
      if (a7) {
        *a7 = v69[2];
      }
      if (a8) {
        *a8 = v69[3];
      }
    }
    else
    {
      uint64_t v24 = 0;
      double v25 = 0.0;
      if (this) {
        double v25 = *(double *)this;
      }
      if (a6) {
        uint64_t v24 = *(void *)a6;
      }
      uint64_t v26 = 0;
      uint64_t v27 = 0;
      if (a7) {
        uint64_t v27 = *(void *)a7;
      }
      if (a8) {
        uint64_t v26 = *(void *)a8;
      }
      double v72 = v25;
      uint64_t v73 = v24;
      uint64_t v74 = v27;
      uint64_t v75 = v26;
      double v28 = sub_2168AC598((uint64_t)v71);
      if (this) {
        *(double *)this = v28;
      }
      if (a6) {
        *(void *)a6 = v29;
      }
      if (a7) {
        *(void *)a7 = v30;
      }
      if (a8) {
        *(void *)a8 = v31;
      }
    }
  }
}

double sub_2168AC598(uint64_t a1)
{
  for (uint64_t i = 0; i != 4; ++i)
  {
    double v2 = *(double *)(a1 + 8 * i);
    for (double j = *((double *)&v6 + i); j > v2 + 3.14159265; double j = j + -6.28318531)
      ;
    *((double *)&v6 + i) = j;
    double v4 = v2 + -3.14159265;
    if (j < v4)
    {
      do
        double j = j + 6.28318531;
      while (j < v4);
      *((double *)&v6 + i) = j;
    }
  }
  return *(double *)&v6;
}

void pxrInternal__aapl__pxrReserved__::GfRotation::DecomposeRotation(double *a1, uint64_t a2, uint64_t a3, double *a4, double *a5, double *a6, double *a7, double *a8, double a9, char a10, uint64_t *a11)
{
  if (a5) {
    int v11 = a5;
  }
  else {
    int v11 = (double *)v65;
  }
  if (a6) {
    int v12 = a5 == 0;
  }
  else {
    int v12 = 2;
  }
  v65[0] = 0;
  if (a6) {
    int v13 = a6;
  }
  else {
    int v13 = (double *)v65;
  }
  if (!((unint64_t)a5 | (unint64_t)a6))
  {
    *(void *)&v57.f64[0] = "gf/rotation.cpp";
    *(void *)&v57.f64[1] = "DecomposeRotation";
    uint64_t v14 = 445;
LABEL_12:
    *(void *)&long long v58 = v14;
    *((void *)&v58 + 1) = "static void pxrInternal__aapl__pxrReserved__::GfRotation::DecomposeRotation(const GfMatrix4d"
                            " &, const GfVec3d &, const GfVec3d &, const GfVec3d &, double, double *, double *, double *,"
                            " double *, BOOL, const double *)";
    LOBYTE(v59.f64[0]) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v57, 1, (pxrInternal__aapl__pxrReserved__ *)"Need three angles to correctly decompose rotation");
    return;
  }
  unsigned int v15 = a8;
  double v16 = a7;
  if (a7)
  {
    if (a8)
    {
      double v21 = a4;
      goto LABEL_16;
    }
    if (!v12)
    {
      double v21 = a4;
      int v12 = 4;
      unsigned int v15 = (double *)v65;
      goto LABEL_16;
    }
LABEL_30:
    *(void *)&v57.f64[0] = "gf/rotation.cpp";
    *(void *)&v57.f64[1] = "DecomposeRotation";
    uint64_t v14 = 461;
    goto LABEL_12;
  }
  if (v12)
  {
    *(void *)&v57.f64[0] = "gf/rotation.cpp";
    *(void *)&v57.f64[1] = "DecomposeRotation";
    uint64_t v14 = 453;
    goto LABEL_12;
  }
  if (!a8) {
    goto LABEL_30;
  }
  double v21 = a4;
  int v12 = 3;
  double v16 = (double *)v65;
LABEL_16:
  if (a11 && v12)
  {
    *(void *)&v57.f64[0] = "gf/rotation.cpp";
    *(void *)&v57.f64[1] = "DecomposeRotation";
    *(void *)&long long v58 = 470;
    *((void *)&v58 + 1) = "static void pxrInternal__aapl__pxrReserved__::GfRotation::DecomposeRotation(const GfMatrix4d"
                            " &, const GfVec3d &, const GfVec3d &, const GfVec3d &, double, double *, double *, double *,"
                            " double *, BOOL, const double *)";
    LOBYTE(v59.f64[0]) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v57, (pxrInternal__aapl__pxrReserved__ *)"A swing shift was provided but we're not decomposing into four angles.  The swing shift will be ignored.", (char *)a3);
  }
  double v22 = 0.0;
  double v23 = 0.0;
  double v24 = 0.0;
  double v25 = 0.0;
  if (a10)
  {
    double v22 = *v11;
    double v23 = *v13;
    double v24 = *v16;
    double v25 = *v15;
  }
  double v41 = sub_216896EC8(a1, (double *)a3);
  double v42 = v26;
  double v43 = v27;
  double v44 = sub_216896EC8(a1, (double *)a2);
  double v45 = v28;
  double v46 = v29;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)&v57, 1.0);
  switch(v12)
  {
    case 0:
    case 4:
      float64x2_t v47 = vaddq_f64(vaddq_f64(vmulq_n_f64(v57, v44), vmulq_n_f64(v59, v45)), vmulq_n_f64(v61, v46));
      double v48 = v44 * *(double *)&v58 + v45 * *(double *)&v60 + v46 * *(double *)&v62;
      sub_2168AD29C(v47.f64, (double *)a2, v21, v16, (pxrInternal__aapl__pxrReserved__::GfMatrix4d *)v49);
      float64x2_t v53 = v61;
      long long v54 = v62;
      long long v55 = v63;
      long long v56 = v64;
      float64x2_t v50 = v57;
      *(_OWORD *)uint64_t v51 = v58;
      *(float64x2_t *)&v51[16] = v59;
      long long v52 = v60;
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(v50.f64, v49);
      float64x2_t v61 = v53;
      long long v62 = v54;
      long long v63 = v55;
      long long v64 = v56;
      float64x2_t v57 = v50;
      long long v58 = *(_OWORD *)v51;
      float64x2_t v59 = *(float64x2_t *)&v51[16];
      long long v60 = v52;
      float64x2_t v47 = vaddq_f64(vaddq_f64(vmulq_n_f64(v50, v44), vmulq_n_f64(*(float64x2_t *)&v51[16], v45)), vmulq_n_f64(v53, v46));
      double v48 = v44 * *(double *)v51 + v45 * *(double *)&v52 + v46 * *(double *)&v54;
      sub_2168AD29C(v47.f64, (double *)a2, (double *)a3, v13, (pxrInternal__aapl__pxrReserved__::GfMatrix4d *)v49);
      float64x2_t v53 = v61;
      long long v54 = v62;
      long long v55 = v63;
      long long v56 = v64;
      float64x2_t v50 = v57;
      *(_OWORD *)uint64_t v51 = v58;
      *(float64x2_t *)&v51[16] = v59;
      long long v52 = v60;
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(v50.f64, v49);
      float64x2_t v61 = v53;
      long long v62 = v54;
      long long v63 = v55;
      long long v64 = v56;
      float64x2_t v57 = v50;
      long long v58 = *(_OWORD *)v51;
      float64x2_t v59 = *(float64x2_t *)&v51[16];
      long long v60 = v52;
      float64x2_t v47 = vaddq_f64(vaddq_f64(vmulq_n_f64(v50, v41), vmulq_n_f64(*(float64x2_t *)&v51[16], v42)), vmulq_n_f64(v53, v43));
      double v48 = v41 * *(double *)v51 + v42 * *(double *)&v52 + v43 * *(double *)&v54;
      sub_2168AD29C(v47.f64, (double *)a3, (double *)a2, v11, (pxrInternal__aapl__pxrReserved__::GfMatrix4d *)v49);
      float64x2_t v53 = v61;
      long long v54 = v62;
      long long v55 = v63;
      long long v56 = v64;
      float64x2_t v50 = v57;
      *(_OWORD *)uint64_t v51 = v58;
      *(float64x2_t *)&v51[16] = v59;
      long long v52 = v60;
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(v50.f64, v49);
      float64x2_t v61 = v53;
      long long v62 = v54;
      long long v63 = v55;
      long long v64 = v56;
      float64x2_t v57 = v50;
      long long v58 = *(_OWORD *)v51;
      float64x2_t v59 = *(float64x2_t *)&v51[16];
      long long v60 = v52;
      *int v13 = -(a9 * *v13);
      *double v16 = -(a9 * *v16);
      *int v11 = -(a9 * *v11);
      if (a11) {
        uint64_t v31 = *a11;
      }
      else {
        uint64_t v31 = 0;
      }
      *(void *)unsigned int v15 = v31;
      break;
    case 1:
      float64x2_t v47 = vaddq_f64(vaddq_f64(vmulq_n_f64(v57, v41), vmulq_n_f64(v59, v42)), vmulq_n_f64(v61, v43));
      double v48 = v41 * *(double *)&v58 + v42 * *(double *)&v60 + v43 * *(double *)&v62;
      sub_2168AD29C(v47.f64, (double *)a3, (double *)a2, v15, (pxrInternal__aapl__pxrReserved__::GfMatrix4d *)v49);
      float64x2_t v53 = v61;
      long long v54 = v62;
      long long v55 = v63;
      long long v56 = v64;
      float64x2_t v50 = v57;
      *(_OWORD *)uint64_t v51 = v58;
      *(float64x2_t *)&v51[16] = v59;
      long long v52 = v60;
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(v50.f64, v49);
      float64x2_t v61 = v53;
      long long v62 = v54;
      long long v63 = v55;
      long long v64 = v56;
      float64x2_t v57 = v50;
      long long v58 = *(_OWORD *)v51;
      float64x2_t v59 = *(float64x2_t *)&v51[16];
      long long v60 = v52;
      float64x2_t v47 = vaddq_f64(vaddq_f64(vmulq_n_f64(v50, v41), vmulq_n_f64(*(float64x2_t *)&v51[16], v42)), vmulq_n_f64(v53, v43));
      double v48 = v41 * *(double *)v51 + v42 * *(double *)&v52 + v43 * *(double *)&v54;
      sub_2168AD29C(v47.f64, (double *)a3, v21, v16, (pxrInternal__aapl__pxrReserved__::GfMatrix4d *)v49);
      float64x2_t v53 = v61;
      long long v54 = v62;
      long long v55 = v63;
      long long v56 = v64;
      float64x2_t v50 = v57;
      *(_OWORD *)uint64_t v51 = v58;
      *(float64x2_t *)&v51[16] = v59;
      long long v52 = v60;
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(v50.f64, v49);
      float64x2_t v61 = v53;
      long long v62 = v54;
      long long v63 = v55;
      long long v64 = v56;
      float64x2_t v57 = v50;
      long long v58 = *(_OWORD *)v51;
      float64x2_t v59 = *(float64x2_t *)&v51[16];
      long long v60 = v52;
      float64x2_t v47 = vaddq_f64(vaddq_f64(vmulq_n_f64(v50, v44), vmulq_n_f64(*(float64x2_t *)&v51[16], v45)), vmulq_n_f64(v53, v46));
      double v48 = v44 * *(double *)v51 + v45 * *(double *)&v52 + v46 * *(double *)&v54;
      sub_2168AD29C(v47.f64, (double *)a2, (double *)a3, v13, (pxrInternal__aapl__pxrReserved__::GfMatrix4d *)v49);
      float64x2_t v53 = v61;
      long long v54 = v62;
      long long v55 = v63;
      long long v56 = v64;
      float64x2_t v50 = v57;
      *(_OWORD *)uint64_t v51 = v58;
      *(float64x2_t *)&v51[16] = v59;
      long long v52 = v60;
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(v50.f64, v49);
      float64x2_t v61 = v53;
      long long v62 = v54;
      long long v63 = v55;
      long long v64 = v56;
      float64x2_t v57 = v50;
      long long v58 = *(_OWORD *)v51;
      float64x2_t v59 = *(float64x2_t *)&v51[16];
      long long v60 = v52;
      *unsigned int v15 = -(a9 * *v15);
      *int v13 = -(a9 * *v13);
      *double v16 = -(a9 * *v16);
      break;
    case 2:
      float64x2_t v47 = vaddq_f64(vaddq_f64(vmulq_n_f64(v57, v44), vmulq_n_f64(v59, v45)), vmulq_n_f64(v61, v46));
      double v48 = v44 * *(double *)&v58 + v45 * *(double *)&v60 + v46 * *(double *)&v62;
      sub_2168AD29C(v47.f64, (double *)a3, (double *)a2, v15, (pxrInternal__aapl__pxrReserved__::GfMatrix4d *)v49);
      float64x2_t v53 = v61;
      long long v54 = v62;
      long long v55 = v63;
      long long v56 = v64;
      float64x2_t v50 = v57;
      *(_OWORD *)uint64_t v51 = v58;
      *(float64x2_t *)&v51[16] = v59;
      long long v52 = v60;
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(v50.f64, v49);
      float64x2_t v61 = v53;
      long long v62 = v54;
      long long v63 = v55;
      long long v64 = v56;
      float64x2_t v57 = v50;
      long long v58 = *(_OWORD *)v51;
      float64x2_t v59 = *(float64x2_t *)&v51[16];
      long long v60 = v52;
      float64x2_t v47 = vaddq_f64(vaddq_f64(vmulq_n_f64(v50, v44), vmulq_n_f64(*(float64x2_t *)&v51[16], v45)), vmulq_n_f64(v53, v46));
      double v48 = v44 * *(double *)v51 + v45 * *(double *)&v52 + v46 * *(double *)&v54;
      sub_2168AD29C(v47.f64, (double *)a2, v21, v16, (pxrInternal__aapl__pxrReserved__::GfMatrix4d *)v49);
      float64x2_t v53 = v61;
      long long v54 = v62;
      long long v55 = v63;
      long long v56 = v64;
      float64x2_t v50 = v57;
      *(_OWORD *)uint64_t v51 = v58;
      *(float64x2_t *)&v51[16] = v59;
      long long v52 = v60;
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(v50.f64, v49);
      float64x2_t v61 = v53;
      long long v62 = v54;
      long long v63 = v55;
      long long v64 = v56;
      float64x2_t v57 = v50;
      long long v58 = *(_OWORD *)v51;
      float64x2_t v59 = *(float64x2_t *)&v51[16];
      long long v60 = v52;
      float64x2_t v47 = vaddq_f64(vaddq_f64(vmulq_n_f64(v50, v41), vmulq_n_f64(*(float64x2_t *)&v51[16], v42)), vmulq_n_f64(v53, v43));
      double v48 = v41 * *(double *)v51 + v42 * *(double *)&v52 + v43 * *(double *)&v54;
      sub_2168AD29C(v47.f64, (double *)a3, (double *)a2, v11, (pxrInternal__aapl__pxrReserved__::GfMatrix4d *)v49);
      float64x2_t v53 = v61;
      long long v54 = v62;
      long long v55 = v63;
      long long v56 = v64;
      float64x2_t v50 = v57;
      *(_OWORD *)uint64_t v51 = v58;
      *(float64x2_t *)&v51[16] = v59;
      long long v52 = v60;
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(v50.f64, v49);
      float64x2_t v61 = v53;
      long long v62 = v54;
      long long v63 = v55;
      long long v64 = v56;
      float64x2_t v57 = v50;
      long long v58 = *(_OWORD *)v51;
      float64x2_t v59 = *(float64x2_t *)&v51[16];
      long long v60 = v52;
      *unsigned int v15 = -(a9 * *v15);
      *double v16 = -(a9 * *v16);
      goto LABEL_34;
    case 3:
      float64x2_t v47 = vaddq_f64(vaddq_f64(vmulq_n_f64(v57, v44), vmulq_n_f64(v59, v45)), vmulq_n_f64(v61, v46));
      double v48 = v44 * *(double *)&v58 + v45 * *(double *)&v60 + v46 * *(double *)&v62;
      sub_2168AD29C(v47.f64, v21, (double *)a2, v15, (pxrInternal__aapl__pxrReserved__::GfMatrix4d *)v49);
      float64x2_t v53 = v61;
      long long v54 = v62;
      long long v55 = v63;
      long long v56 = v64;
      float64x2_t v50 = v57;
      *(_OWORD *)uint64_t v51 = v58;
      *(float64x2_t *)&v51[16] = v59;
      long long v52 = v60;
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(v50.f64, v49);
      float64x2_t v61 = v53;
      long long v62 = v54;
      long long v63 = v55;
      long long v64 = v56;
      float64x2_t v57 = v50;
      long long v58 = *(_OWORD *)v51;
      float64x2_t v59 = *(float64x2_t *)&v51[16];
      long long v60 = v52;
      float64x2_t v47 = vaddq_f64(vaddq_f64(vmulq_n_f64(v50, v44), vmulq_n_f64(*(float64x2_t *)&v51[16], v45)), vmulq_n_f64(v53, v46));
      double v48 = v44 * *(double *)v51 + v45 * *(double *)&v52 + v46 * *(double *)&v54;
      sub_2168AD29C(v47.f64, (double *)a2, (double *)a3, v13, (pxrInternal__aapl__pxrReserved__::GfMatrix4d *)v49);
      float64x2_t v53 = v61;
      long long v54 = v62;
      long long v55 = v63;
      long long v56 = v64;
      float64x2_t v50 = v57;
      *(_OWORD *)uint64_t v51 = v58;
      *(float64x2_t *)&v51[16] = v59;
      long long v52 = v60;
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(v50.f64, v49);
      float64x2_t v61 = v53;
      long long v62 = v54;
      long long v63 = v55;
      long long v64 = v56;
      float64x2_t v57 = v50;
      long long v58 = *(_OWORD *)v51;
      float64x2_t v59 = *(float64x2_t *)&v51[16];
      long long v60 = v52;
      float64x2_t v47 = vaddq_f64(vaddq_f64(vmulq_n_f64(v50, v41), vmulq_n_f64(*(float64x2_t *)&v51[16], v42)), vmulq_n_f64(v53, v43));
      double v48 = v41 * *(double *)v51 + v42 * *(double *)&v52 + v43 * *(double *)&v54;
      sub_2168AD29C(v47.f64, (double *)a3, (double *)a2, v11, (pxrInternal__aapl__pxrReserved__::GfMatrix4d *)v49);
      float64x2_t v53 = v61;
      long long v54 = v62;
      long long v55 = v63;
      long long v56 = v64;
      float64x2_t v50 = v57;
      *(_OWORD *)uint64_t v51 = v58;
      *(float64x2_t *)&v51[16] = v59;
      long long v52 = v60;
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(v50.f64, v49);
      float64x2_t v61 = v53;
      long long v62 = v54;
      long long v63 = v55;
      long long v64 = v56;
      float64x2_t v57 = v50;
      long long v58 = *(_OWORD *)v51;
      float64x2_t v59 = *(float64x2_t *)&v51[16];
      long long v60 = v52;
      *unsigned int v15 = -(a9 * *v15);
      *int v13 = -(a9 * *v13);
LABEL_34:
      *int v11 = -(a9 * *v11);
      break;
    default:
      break;
  }
  if (v12 == 1) {
    uint64_t v32 = 0;
  }
  else {
    uint64_t v32 = (pxrInternal__aapl__pxrReserved__::GfRotation *)v11;
  }
  if (v12 == 2) {
    double v33 = 0;
  }
  else {
    double v33 = v13;
  }
  if (v12 == 3) {
    double v34 = 0;
  }
  else {
    double v34 = v16;
  }
  if (v12 == 4) {
    double v35 = 0;
  }
  else {
    double v35 = v15;
  }
  pxrInternal__aapl__pxrReserved__::GfRotation::MatchClosestEulerRotation(v32, v22, v23, v24, v25, v33, v34, v35, v30);
  float64x2_t v50 = *(float64x2_t *)a2;
  *(void *)uint64_t v51 = *(void *)(a2 + 16);
  *(_OWORD *)&v51[8] = *(_OWORD *)a3;
  *(void *)&v51[24] = *(void *)(a3 + 16);
  long long v52 = *(_OWORD *)v21;
  v53.f64[0] = v21[2];
  switch(v12)
  {
    case 0:
    case 4:
      double v36 = *v13;
      double v37 = v36
          + pxrInternal__aapl__pxrReserved__::GfMatrix3d::GetHandedness((pxrInternal__aapl__pxrReserved__::GfMatrix3d *)&v50)
          * 1.57079633;
      double v38 = v11;
      uint64_t v39 = v16;
      goto LABEL_56;
    case 1:
      double v40 = *v16;
      double v37 = v40
          + pxrInternal__aapl__pxrReserved__::GfMatrix3d::GetHandedness((pxrInternal__aapl__pxrReserved__::GfMatrix3d *)&v50)
          * 1.57079633;
      double v38 = v13;
      goto LABEL_55;
    case 2:
      double v37 = *v16;
      goto LABEL_54;
    case 3:
      double v37 = *v13;
LABEL_54:
      double v38 = v11;
LABEL_55:
      uint64_t v39 = v15;
LABEL_56:
      sub_2168AD2F8(v38, v39, v37);
      break;
    default:
      return;
  }
}

double sub_2168AD29C@<D0>(double *a1@<X0>, double *a2@<X1>, double *a3@<X2>, double *a4@<X3>, pxrInternal__aapl__pxrReserved__::GfMatrix4d *a5@<X8>)
{
  v11.f64[0] = pxrInternal__aapl__pxrReserved__::GfRotation::RotateOntoProjected(a1, a2, a3);
  v11.f64[1] = v7;
  uint64_t v12 = v8;
  double v13 = v9;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetRotate(a5, &v11);
  if (a4)
  {
    double result = v13 / 57.2957795;
    *a4 = v13 / 57.2957795;
  }
  return result;
}

double sub_2168AD2F8(double *a1, double *a2, double a3)
{
  double result = fabs(a3);
  if (fabs(result + -3.14159265) < 0.000001)
  {
    double v4 = *a2 - *a1;
    *a2 = v4 * 0.5;
    *a1 = v4 * -0.5;
  }
  if (result < 0.000001)
  {
    double result = (*a2 + *a1) * 0.5;
    *a2 = result;
    *a1 = result;
  }
  return result;
}

float32x2_t pxrInternal__aapl__pxrReserved__::GfRotation::TransformDir(float64x2_t *a1, float *a2)
{
  memset(v5, 0, sizeof(v5));
  double v3 = pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetRotate((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)v5, a1);
  return sub_2168AD3B8((float64x2_t *)v3, a2);
}

float32x2_t sub_2168AD3B8(float64x2_t *a1, float *a2)
{
  return vcvt_f32_f64(vaddq_f64(vaddq_f64(vmulq_n_f64(*a1, *a2), vmulq_n_f64(a1[2], a2[1])), vmulq_n_f64(a1[4], a2[2])));
}

double pxrInternal__aapl__pxrReserved__::GfRotation::TransformDir(float64x2_t *a1, double *a2)
{
  memset(v5, 0, sizeof(v5));
  double v3 = (double *)pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetRotate((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)v5, a1);
  return sub_216896EC8(v3, a2);
}

float64x2_t *pxrInternal__aapl__pxrReserved__::GfRotation::operator*=(float64x2_t *a1, float64x2_t *this)
{
  float64_t Quat = pxrInternal__aapl__pxrReserved__::GfRotation::GetQuat(this);
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  float64_t v10 = pxrInternal__aapl__pxrReserved__::GfRotation::GetQuat(a1);
  v25[0] = v11;
  v25[1] = v10;
  v25[2] = v12;
  double v25[3] = v13;
  *(void *)&long long v26 = v9;
  *((float64_t *)&v26 + 1) = Quat;
  *(void *)&long long v27 = v5;
  *((void *)&v27 + 1) = v7;
  pxrInternal__aapl__pxrReserved__::GfQuaternion::operator*=((double *)&v26, v25);
  long long v15 = v14[1];
  long long v26 = *v14;
  long long v27 = v15;
  long double Normalized = pxrInternal__aapl__pxrReserved__::GfQuaternion::GetNormalized((pxrInternal__aapl__pxrReserved__::GfQuaternion *)&v26, 1.0e-10);
  double v20 = sqrt(v19 * v19 + v17 * v17 + v18 * v18);
  double v21 = 0.0;
  if (v20 > 1.0e-10)
  {
    double v22 = 1.0 / v20;
    a1->f64[0] = v17 * v22;
    a1->f64[1] = v18 * v22;
    a1[1].f64[0] = v19 * v22;
    long double v23 = acos(Normalized);
    double v21 = v23 * 57.2957795 + v23 * 57.2957795;
  }
  a1[1].f64[1] = v21;
  return a1;
}

uint64_t *sub_2168AD5D8()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C6B0, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74C6B0, (char *)0x20, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168AD698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_2168AD74C()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C6C0, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74C6C0, (char *)0x10, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168AD80C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_2168AD8D8()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C6D0, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74C6D0, (char *)0x18, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168AD998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

__n128 pxrInternal__aapl__pxrReserved__::GfTransform::Set(uint64_t a1, long long *a2, _OWORD *a3, long long *a4, long long *a5, __n128 *a6)
{
  long long v6 = *a2;
  *(void *)(a1 + 72) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 56) = v6;
  long long v7 = a3[1];
  *(_OWORD *)(a1 + 80) = *a3;
  *(_OWORD *)(a1 + 96) = v7;
  long long v8 = *a4;
  *(_OWORD *)(a1 + 40) = a4[1];
  *(_OWORD *)(a1 + 24) = v8;
  long long v9 = *a5;
  *(void *)(a1 + 128) = *((void *)a5 + 2);
  *(_OWORD *)(a1 + 112) = v9;
  __n128 result = *a6;
  *(void *)(a1 + 16) = a6[1].n128_u64[0];
  *(__n128 *)a1 = result;
  return result;
}

float64x2_t *pxrInternal__aapl__pxrReserved__::GfTransform::SetMatrix(float64x2_t *this, const pxrInternal__aapl__pxrReserved__::GfMatrix4d *a2)
{
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetTranslate((uint64_t)v32, (uint64_t)&this[7]);
  float64_t v4 = -this[8].f64[0];
  float64x2_t v23 = vnegq_f64(this[7]);
  *(float64_t *)&long long v24 = v4;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetTranslate((uint64_t)v31, (uint64_t)&v23);
  long long v19 = v32[4];
  long long v20 = v32[5];
  long long v21 = v32[6];
  long long v22 = v32[7];
  float64x2_t v15 = (float64x2_t)v32[0];
  long long v16 = v32[1];
  long long v17 = v32[2];
  long long v18 = v32[3];
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(v15.f64, (double *)a2);
  long long v27 = v19;
  long long v28 = v20;
  long long v29 = v21;
  long long v30 = v22;
  float64x2_t v23 = v15;
  long long v24 = v16;
  long long v25 = v17;
  long long v26 = v18;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(v23.f64, v31);
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::Factor((uint64_t)&v23, (long long *)&v15, (uint64_t)&this[3].f64[1], v14, (uint64_t)this, (uint64_t)v13, 1.0e-10);
  this[1].f64[1] = pxrInternal__aapl__pxrReserved__::GfMatrix4d::ExtractRotation((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)v14);
  this[2].f64[0] = v5;
  this[2].f64[1] = v6;
  this[3].f64[0] = v7;
  if (this[3].f64[1] == 1.0 && this[4].f64[0] == 1.0 && this[4].f64[1] == 1.0)
  {
    this[5].f64[0] = 1.0;
    this[5].f64[1] = 0.0;
    this[6].f64[0] = 0.0;
    this[6].f64[1] = 0.0;
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::GetTranspose((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)&v15, (uint64_t)v12);
    this[5].f64[0] = pxrInternal__aapl__pxrReserved__::GfMatrix4d::ExtractRotation((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)v12);
    this[5].f64[1] = v8;
    this[6].f64[0] = v9;
    this[6].f64[1] = v10;
  }
  return this;
}

__n128 pxrInternal__aapl__pxrReserved__::GfTransform::SetIdentity(pxrInternal__aapl__pxrReserved__::GfTransform *this)
{
  __asm { FMOV            V0.2D, #1.0 }
  *(__n128 *)((char *)this + 56) = result;
  *(__n128 *)((char *)this + 72) = result;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 3) = 0x3FF0000000000000;
  *((void *)this + 4) = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = 0;
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;
  return result;
}

void pxrInternal__aapl__pxrReserved__::GfTransform::GetMatrix(pxrInternal__aapl__pxrReserved__::GfTransform *this@<X0>, double *a2@<X8>)
{
  float64_t v4 = (char *)this + 112;
  double v5 = *((double *)this + 14);
  BOOL v6 = v5 != 0.0 || *((double *)this + 15) != 0.0 || *((double *)this + 16) != 0.0;
  BOOL v7 = *((double *)this + 7) != 1.0 || *((double *)this + 8) != 1.0 || *((double *)this + 9) != 1.0;
  BOOL v8 = *(double *)this != 0.0 || *((double *)this + 1) != 0.0 || *((double *)this + 2) != 0.0;
  double v9 = *((double *)this + 13);
  double v10 = *((double *)this + 6);
  if (v6)
  {
    double v22 = -v5;
    float64x2_t v23 = vnegq_f64(*(float64x2_t *)((char *)this + 120));
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetTranslate((uint64_t)a2, (uint64_t)&v22);
  }
  int v11 = v6;
  if (v7)
  {
    if (v9 == 0.0)
    {
      if (!v6)
      {
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetScale((uint64_t)a2, (void *)this + 7);
        if (v10 == 0.0)
        {
LABEL_40:
          if (!v8) {
            return;
          }
          goto LABEL_41;
        }
        goto LABEL_28;
      }
    }
    else
    {
      double v12 = (double *)((char *)this + 80);
      if (v6)
      {
        v19.f64[0] = sub_216896F28(v12);
        v19.f64[1] = v13;
        uint64_t v20 = v14;
        uint64_t v21 = v15;
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetRotate((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)&v22, &v19);
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(a2, &v22);
      }
      else
      {
        double v22 = sub_216896F28(v12);
        v23.f64[0] = v16;
        v23.f64[1] = v17;
        uint64_t v24 = v18;
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetRotate((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)a2, (float64x2_t *)&v22);
      }
    }
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetScale((uint64_t)&v22, (void *)this + 7);
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(a2, &v22);
    if (v9 != 0.0)
    {
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetRotate((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)&v22, (float64x2_t *)this + 5);
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(a2, &v22);
    }
    int v11 = 1;
  }
  if (v10 == 0.0) {
    goto LABEL_31;
  }
  if (!v11)
  {
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetRotate((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)a2, (float64x2_t *)((char *)this + 24));
    goto LABEL_30;
  }
LABEL_28:
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetRotate((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)&v22, (float64x2_t *)((char *)this + 24));
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(a2, &v22);
LABEL_30:
  int v11 = 1;
LABEL_31:
  if (!v6) {
    goto LABEL_34;
  }
  if (!v11)
  {
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetTranslate((uint64_t)a2, (uint64_t)v4);
    goto LABEL_40;
  }
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetTranslate((uint64_t)&v22, (uint64_t)v4);
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(a2, &v22);
LABEL_34:
  if (v8)
  {
    if (!v11)
    {
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetTranslate((uint64_t)a2, (uint64_t)this);
      return;
    }
LABEL_41:
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetTranslate((uint64_t)&v22, (uint64_t)this);
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(a2, &v22);
    return;
  }
  if ((v11 & 1) == 0) {
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)a2, 1.0);
  }
}

BOOL pxrInternal__aapl__pxrReserved__::GfTransform::operator==(double *a1, double *a2)
{
  return a1[7] == a2[7]
      && a1[8] == a2[8]
      && a1[9] == a2[9]
      && a1[10] == a2[10]
      && a1[11] == a2[11]
      && a1[12] == a2[12]
      && a1[13] == a2[13]
      && a1[3] == a2[3]
      && a1[4] == a2[4]
      && a1[5] == a2[5]
      && a1[6] == a2[6]
      && a1[14] == a2[14]
      && a1[15] == a2[15]
      && a1[16] == a2[16]
      && *a1 == *a2
      && a1[1] == a2[1]
      && a1[2] == a2[2];
}

float64x2_t *pxrInternal__aapl__pxrReserved__::GfTransform::operator*=(pxrInternal__aapl__pxrReserved__::GfTransform *a1, pxrInternal__aapl__pxrReserved__::GfTransform *a2)
{
  pxrInternal__aapl__pxrReserved__::GfTransform::GetMatrix(a1, (double *)v6);
  pxrInternal__aapl__pxrReserved__::GfTransform::GetMatrix(a2, v5);
  void v7[4] = v6[4];
  v7[5] = v6[5];
  v7[6] = v6[6];
  v7[7] = v6[7];
  v7[0] = v6[0];
  v7[1] = v6[1];
  v7[2] = v6[2];
  double v7[3] = v6[3];
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=((double *)v7, v5);
  return pxrInternal__aapl__pxrReserved__::GfTransform::SetMatrix((float64x2_t *)a1, (const pxrInternal__aapl__pxrReserved__::GfMatrix4d *)v7);
}

uint64_t *sub_2168AE1D8()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  double v5 = 0;
  BOOL v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C6E0, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74C6E0, (char *)0x88, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    BOOL v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168AE298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec2d::operator==(double *a1, float *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec2d::operator==(double *a1, unsigned __int16 *a2)
{
  return *a1 == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a2]
      && a1[1] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[1]];
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec2d::operator==(double *a1, int *a2)
{
  return *a1 == (double)*a2 && a1[1] == (double)a2[1];
}

uint64_t *sub_2168AE3FC()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  double v5 = 0;
  BOOL v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C6F0, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74C6F0, (char *)0x10, 1, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    BOOL v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168AE4BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec2f::operator==(float *a1, double *a2)
{
  return *a2 == *a1 && a2[1] == a1[1];
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec2f::operator==(float *a1, unsigned __int16 *a2)
{
  return *a1 == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a2]
      && a1[1] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[1]];
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec2f::operator==(float *a1, int *a2)
{
  return *a1 == (float)*a2 && a1[1] == (float)a2[1];
}

uint64_t *sub_2168AE618()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  double v5 = 0;
  BOOL v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C700, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74C700, (char *)8, 1, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    BOOL v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168AE6D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec2h::operator==(unsigned __int16 *a1, double *a2)
{
  return *a2 == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1]
      && a2[1] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[1]];
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec2h::operator==(unsigned __int16 *a1, float *a2)
{
  return pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1] == *a2
      && pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[1]] == a2[1];
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec2h::operator==(unsigned __int16 *a1, int *a2)
{
  return pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1] == (float)*a2
      && pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[1]] == (float)a2[1];
}

uint64_t *sub_2168AE854()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  double v5 = 0;
  BOOL v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C710, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74C710, (char *)4, 1, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    BOOL v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168AE914(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec2i::operator==(int *a1, double *a2)
{
  return *a2 == (double)*a1 && a2[1] == (double)a1[1];
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec2i::operator==(int *a1, float *a2)
{
  return *a2 == (float)*a1 && a2[1] == (float)a1[1];
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec2i::operator==(int *a1, unsigned __int16 *a2)
{
  return pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a2] == (float)*a1
      && pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[1]] == (float)a1[1];
}

uint64_t *sub_2168AEA78()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  double v5 = 0;
  BOOL v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C720, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74C720, (char *)8, 1, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    BOOL v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168AEB38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec3d::operator==(double *a1, float *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec3d::operator==(double *a1, unsigned __int16 *a2)
{
  return *a1 == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a2]
      && a1[1] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[1]]
      && a1[2] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[2]];
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec3d::operator==(double *a1, int *a2)
{
  return *a1 == (double)*a2 && a1[1] == (double)a2[1] && a1[2] == (double)a2[2];
}

BOOL pxrInternal__aapl__pxrReserved__::GfOrthogonalizeBasis(double *a1, double *a2, double *a3, int a4, double a5)
{
  double v5 = *a1;
  if (a4)
  {
    double v6 = a1[1];
    double v7 = a1[2];
    double v8 = sqrt(v5 * v5 + v6 * v6 + v7 * v7);
    double v9 = 1.0 / v8;
    BOOL v10 = v8 <= 1.0e-10;
    double v11 = 1.0e10;
    if (v10) {
      double v9 = 1.0e10;
    }
    *a1 = v5 * v9;
    a1[1] = v6 * v9;
    a1[2] = v7 * v9;
    double v12 = *a2;
    double v13 = a2[1];
    double v14 = a2[2];
    double v15 = sqrt(v12 * v12 + v13 * v13 + v14 * v14);
    if (v15 <= 1.0e-10) {
      double v16 = 1.0e10;
    }
    else {
      double v16 = 1.0 / v15;
    }
    *a2 = v12 * v16;
    a2[1] = v13 * v16;
    a2[2] = v14 * v16;
    double v17 = *a3;
    double v18 = a3[1];
    double v19 = a3[2];
    double v20 = sqrt(v17 * v17 + v18 * v18 + v19 * v19);
    if (v20 > 1.0e-10) {
      double v11 = 1.0 / v20;
    }
    double v21 = v17 * v11;
    double v22 = v18 * v11;
    *a3 = v17 * v11;
    a3[1] = v18 * v11;
    double v23 = v19 * v11;
    a3[2] = v19 * v11;
    double v5 = *a1;
    double v24 = a1[1];
    double v25 = a1[2];
    double v26 = *a2;
    double v27 = a2[1];
    double v28 = v21;
    double v29 = v22;
    double v30 = v23;
    double v31 = *a2;
    double v32 = v27;
    double v33 = a2[2];
    double v34 = v33;
    double v35 = *a1;
    double v36 = v24;
    double v37 = v25;
  }
  else
  {
    double v24 = a1[1];
    double v25 = a1[2];
    double v26 = *a2;
    double v27 = a2[1];
    double v33 = a2[2];
    double v21 = *a3;
    double v22 = a3[1];
    double v23 = a3[2];
    double v38 = sqrt(v5 * v5 + v24 * v24 + v25 * v25);
    double v39 = 1.0 / v38;
    BOOL v10 = v38 <= 1.0e-10;
    double v40 = 1.0e10;
    if (v10) {
      double v41 = 1.0e10;
    }
    else {
      double v41 = v39;
    }
    double v35 = v5 * v41;
    double v36 = v24 * v41;
    double v37 = v25 * v41;
    double v42 = sqrt(v26 * v26 + v27 * v27 + v33 * v33);
    if (v42 <= 1.0e-10) {
      double v43 = 1.0e10;
    }
    else {
      double v43 = 1.0 / v42;
    }
    double v31 = v26 * v43;
    double v32 = v27 * v43;
    double v34 = v33 * v43;
    double v44 = sqrt(v21 * v21 + v22 * v22 + v23 * v23);
    if (v44 > 1.0e-10) {
      double v40 = 1.0 / v44;
    }
    double v28 = v21 * v40;
    double v29 = v22 * v40;
    double v30 = v23 * v40;
  }
  double v45 = a5 * a5;
  if ((v35 - v31) * (v35 - v31) + (v36 - v32) * (v36 - v32) + (v37 - v34) * (v37 - v34) <= v45
    || (v35 - v28) * (v35 - v28) + (v36 - v29) * (v36 - v29) + (v37 - v30) * (v37 - v30) <= v45
    || (v31 - v28) * (v31 - v28) + (v32 - v29) * (v32 - v29) + (v34 - v30) * (v34 - v30) <= v45)
  {
    return 0;
  }
  int v46 = 20;
  do
  {
    double v47 = v31 * v5 + v32 * v24 + v34 * v25;
    double v48 = v5 - v31 * v47;
    double v49 = v24 - v32 * v47;
    double v50 = v25 - v34 * v47;
    double v51 = v30 * v50 + v28 * v48 + v29 * v49;
    double v52 = v48 - v28 * v51;
    double v53 = v49 - v29 * v51;
    double v54 = v50 - v30 * v51;
    double v55 = v35 * v26 + v36 * v27 + v37 * v33;
    double v56 = v26 - v35 * v55;
    double v57 = v27 - v36 * v55;
    double v58 = v33 - v37 * v55;
    double v59 = v30 * v58 + v28 * v56 + v29 * v57;
    double v60 = v56 - v28 * v59;
    double v61 = v57 - v29 * v59;
    double v62 = v58 - v30 * v59;
    double v63 = v35 * v21 + v36 * v22 + v37 * v23;
    double v64 = v21 - v35 * v63;
    double v65 = v22 - v36 * v63;
    double v66 = v23 - v37 * v63;
    double v67 = v34 * v66 + v31 * v64 + v32 * v65;
    double v68 = v32 * v67;
    double v69 = v34 * v67;
    double v70 = v64 - v31 * v67;
    double v71 = v65 - v68;
    double v72 = v66 - v69;
    double v73 = (v5 + v52) * 0.5;
    double v74 = (v24 + v53) * 0.5;
    double v75 = (v25 + v54) * 0.5;
    double v76 = (v26 + v60) * 0.5;
    double v77 = (v27 + v61) * 0.5;
    double v78 = (v33 + v62) * 0.5;
    double v79 = (v21 + v70) * 0.5;
    double v80 = (v22 + v71) * 0.5;
    double v81 = (v23 + v72) * 0.5;
    if (a4)
    {
      double v82 = sqrt(v75 * v75 + v73 * v73 + v74 * v74);
      double v83 = 1.0 / v82;
      BOOL v10 = v82 <= 1.0e-10;
      double v84 = 1.0e10;
      if (v10) {
        double v83 = 1.0e10;
      }
      double v73 = v73 * v83;
      double v74 = v74 * v83;
      double v75 = v75 * v83;
      double v85 = sqrt(v78 * v78 + v76 * v76 + v77 * v77);
      if (v85 <= 1.0e-10) {
        double v86 = 1.0e10;
      }
      else {
        double v86 = 1.0 / v85;
      }
      double v76 = v76 * v86;
      double v77 = v77 * v86;
      double v78 = v78 * v86;
      double v87 = sqrt(v81 * v81 + v79 * v79 + v80 * v80);
      if (v87 > 1.0e-10) {
        double v84 = 1.0 / v87;
      }
      double v79 = v79 * v84;
      double v80 = v80 * v84;
      double v81 = v81 * v84;
    }
    double v88 = (v21 - v79) * (v21 - v79)
        + (v22 - v80) * (v22 - v80)
        + (v23 - v81) * (v23 - v81)
        + (v26 - v76) * (v26 - v76)
        + (v27 - v77) * (v27 - v77)
        + (v33 - v78) * (v33 - v78)
        + (v5 - v73) * (v5 - v73)
        + (v24 - v74) * (v24 - v74)
        + (v25 - v75) * (v25 - v75);
    BOOL v89 = v88 < v45;
    if (v88 < v45) {
      break;
    }
    *a1 = v73;
    a1[1] = v74;
    a1[2] = v75;
    *a2 = v76;
    a2[1] = v77;
    a2[2] = v78;
    *a3 = v79;
    a3[1] = v80;
    a3[2] = v81;
    double v26 = *a2;
    double v27 = a2[1];
    double v33 = a2[2];
    double v28 = v79;
    double v29 = v80;
    double v30 = v81;
    double v31 = *a2;
    double v32 = v27;
    double v34 = v33;
    double v5 = *a1;
    double v24 = a1[1];
    double v35 = *a1;
    double v36 = v24;
    double v25 = a1[2];
    double v37 = v25;
    if ((a4 & 1) == 0)
    {
      double v90 = sqrt(v5 * v5 + v24 * v24 + v25 * v25);
      double v91 = 1.0 / v90;
      BOOL v10 = v90 <= 1.0e-10;
      double v92 = 1.0e10;
      if (v10) {
        double v91 = 1.0e10;
      }
      double v35 = v5 * v91;
      double v36 = v24 * v91;
      double v37 = v25 * v91;
      double v93 = sqrt(v26 * v26 + v27 * v27 + v33 * v33);
      if (v93 <= 1.0e-10) {
        double v94 = 1.0e10;
      }
      else {
        double v94 = 1.0 / v93;
      }
      double v31 = v26 * v94;
      double v32 = v27 * v94;
      double v34 = v33 * v94;
      double v95 = sqrt(v79 * v79 + v80 * v80 + v81 * v81);
      if (v95 > 1.0e-10) {
        double v92 = 1.0 / v95;
      }
      double v28 = v79 * v92;
      double v29 = v80 * v92;
      double v30 = v81 * v92;
    }
    double v23 = v81;
    double v22 = v80;
    double v21 = v79;
    --v46;
  }
  while (v46);
  return v89;
}

double pxrInternal__aapl__pxrReserved__::GfBuildOrthonormalFrame(double *a1, uint64_t a2, uint64_t a3, double result)
{
  double v4 = *a1;
  double v5 = a1[1];
  double v6 = a1[2];
  double v7 = sqrt(v4 * v4 + v5 * v5 + v6 * v6);
  if (v7 == 0.0)
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  else
  {
    double v8 = v4 * (1.0 / v7);
    double v9 = 1.0 / v7 * v5;
    double v10 = 1.0 / v7 * v6;
    double v11 = v9 * 0.0;
    double v12 = v10 * 0.0 - v9 * 0.0;
    double v13 = v8 * 0.0 - v10;
    double v14 = v9 - v8 * 0.0;
    double v15 = v12 * v12 + v13 * v13 + v14 * v14;
    if (v15 < 0.00000001)
    {
      double v12 = v10 - v11;
      double v13 = v8 * 0.0 - v10 * 0.0;
      double v14 = v11 - v8;
      double v15 = v12 * v12 + v13 * v13 + v14 * v14;
    }
    double v16 = sqrt(v15);
    double v17 = 1.0 / v16;
    if (v16 <= 1.0e-10) {
      double v17 = 1.0e10;
    }
    double v18 = v12 * v17;
    double v19 = v13 * v17;
    *(double *)a2 = v18;
    *(double *)(a2 + 8) = v19;
    double v20 = v14 * v17;
    *(double *)(a2 + 16) = v20;
    *(double *)a3 = v9 * v20 - v10 * v19;
    *(double *)(a3 + 8) = v10 * v18 - v8 * v20;
    *(double *)(a3 + 16) = v8 * v19 - v9 * v18;
    if (v7 < result)
    {
      double v21 = v7 / result;
      *(float64x2_t *)a2 = vmulq_n_f64(*(float64x2_t *)a2, v21);
      *(double *)(a2 + 16) = v21 * *(double *)(a2 + 16);
      *(float64x2_t *)a3 = vmulq_n_f64(*(float64x2_t *)a3, v21);
      __n128 result = v21 * *(double *)(a3 + 16);
      *(double *)(a3 + 16) = result;
    }
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::GfSlerp(double *a1, double *a2, double a3)
{
  double v5 = a1[1];
  double v6 = a2[1];
  double v7 = a1[2];
  double v8 = a2[2];
  double v9 = *a1 * *a2 + v5 * v6 + v7 * v8;
  double v10 = 1.0;
  if (v9 <= 1.0) {
    double v10 = *a1 * *a2 + v5 * v6 + v7 * v8;
  }
  if (v9 >= -1.0) {
    double v11 = v10;
  }
  else {
    double v11 = -1.0;
  }
  long double v12 = acos(v11);
  if (fabs(v12) >= 0.001)
  {
    if (fabs(sin(v12)) >= 0.00001)
    {
      sin((1.0 - a3) * v12);
      sin(v12 * a3);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::GfBuildOrthonormalFrame(a1, (uint64_t)&v14, (uint64_t)v13, 1.0e-10);
      __sincos_stret(a3 * 3.14159265);
    }
  }
}

uint64_t *sub_2168AF5E8()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  double v5 = 0;
  double v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C730, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74C730, (char *)0x18, 1, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    double v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168AF6A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec3f::operator==(float *a1, double *a2)
{
  return *a2 == *a1 && a2[1] == a1[1] && a2[2] == a1[2];
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec3f::operator==(float *a1, unsigned __int16 *a2)
{
  return *a1 == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a2]
      && a1[1] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[1]]
      && a1[2] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[2]];
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec3f::operator==(float *a1, int *a2)
{
  return *a1 == (float)*a2 && a1[1] == (float)a2[1] && a1[2] == (float)a2[2];
}

BOOL pxrInternal__aapl__pxrReserved__::GfOrthogonalizeBasis(float32x2_t *a1, float32x2_t *a2, float32x2_t *a3, int a4, double a5)
{
  if (a4)
  {
    sub_2168B0034(a1, 1.0e-10);
    sub_2168B0034(a2, 1.0e-10);
    sub_2168B0034(a3, 1.0e-10);
    float v10 = a1->f32[0];
    float v11 = a1->f32[1];
    float v12 = a1[1].f32[0];
    float v13 = a2->f32[0];
    float v14 = a2->f32[1];
    float v16 = a3->f32[0];
    float v15 = a3->f32[1];
    float v17 = a3[1].f32[0];
    float v18 = a3->f32[0];
    float v19 = v15;
    float v20 = v17;
    float v21 = a2->f32[0];
    float v22 = v14;
    float v23 = a2[1].f32[0];
    float v24 = v23;
    float v25 = a1->f32[0];
    float v26 = v11;
    float v27 = v12;
  }
  else
  {
    float v10 = a1->f32[0];
    float v11 = a1->f32[1];
    float v12 = a1[1].f32[0];
    float v13 = a2->f32[0];
    float v14 = a2->f32[1];
    float v23 = a2[1].f32[0];
    float v16 = a3->f32[0];
    float v15 = a3->f32[1];
    float v17 = a3[1].f32[0];
    double v28 = 1.0 / fmaxf(sqrtf((float)((float)(v10 * v10) + (float)(v11 * v11)) + (float)(v12 * v12)), 1.0e-10);
    float v25 = v28 * a1->f32[0];
    float v26 = v28 * v11;
    float v27 = v28 * v12;
    double v29 = 1.0 / fmaxf(sqrtf((float)((float)(v13 * v13) + (float)(v14 * v14)) + (float)(v23 * v23)), 1.0e-10);
    float v21 = v29 * a2->f32[0];
    float v22 = v29 * v14;
    float v24 = v29 * v23;
    double v30 = 1.0 / fmaxf(sqrtf((float)((float)(v16 * v16) + (float)(v15 * v15)) + (float)(v17 * v17)), 1.0e-10);
    float v18 = v30 * a3->f32[0];
    float v19 = v30 * v15;
    float v20 = v30 * v17;
  }
  double v31 = a5 * a5;
  if (a5 * a5 >= (float)((float)((float)((float)(v25 - v21) * (float)(v25 - v21))
                                + (float)((float)(v26 - v22) * (float)(v26 - v22)))
                        + (float)((float)(v27 - v24) * (float)(v27 - v24)))
    || v31 >= (float)((float)((float)((float)(v25 - v18) * (float)(v25 - v18))
                            + (float)((float)(v26 - v19) * (float)(v26 - v19)))
                    + (float)((float)(v27 - v20) * (float)(v27 - v20)))
    || v31 >= (float)((float)((float)((float)(v21 - v18) * (float)(v21 - v18))
                            + (float)((float)(v22 - v19) * (float)(v22 - v19)))
                    + (float)((float)(v24 - v20) * (float)(v24 - v20))))
  {
    return 0;
  }
  int v32 = 20;
  do
  {
    float v33 = (float)((float)(v21 * v10) + (float)(v22 * v11)) + (float)(v24 * v12);
    float v34 = v10 - (float)(v21 * v33);
    float v35 = v11 - (float)(v22 * v33);
    float v36 = v12 - (float)(v24 * v33);
    float v37 = (float)(v20 * v36) + (float)((float)(v18 * v34) + (float)(v19 * v35));
    float v38 = v34 - (float)(v18 * v37);
    float v39 = v35 - (float)(v19 * v37);
    float v40 = v36 - (float)(v20 * v37);
    float v41 = (float)((float)(v25 * v13) + (float)(v26 * v14)) + (float)(v27 * v23);
    float v42 = v13 - (float)(v25 * v41);
    float v43 = v14 - (float)(v26 * v41);
    float v44 = v23 - (float)(v27 * v41);
    float v45 = (float)(v20 * v44) + (float)((float)(v18 * v42) + (float)(v19 * v43));
    float v46 = v42 - (float)(v18 * v45);
    float v47 = v43 - (float)(v19 * v45);
    float v48 = v44 - (float)(v20 * v45);
    float v49 = (float)((float)(v25 * v16) + (float)(v26 * v15)) + (float)(v27 * v17);
    float v50 = v16 - (float)(v25 * v49);
    float v51 = v15 - (float)(v26 * v49);
    float v52 = v17 - (float)(v27 * v49);
    float v53 = (float)(v24 * v52) + (float)((float)(v21 * v50) + (float)(v22 * v51));
    float v54 = v22 * v53;
    float v55 = v24 * v53;
    float v56 = v50 - (float)(v21 * v53);
    float v57 = v51 - v54;
    float v58 = v52 - v55;
    float v59 = (float)(v10 + v38) * 0.5;
    float v60 = (float)(v11 + v39) * 0.5;
    float v61 = (float)(v12 + v40) * 0.5;
    float v62 = (float)(v13 + v46) * 0.5;
    float v63 = (float)(v14 + v47) * 0.5;
    float v64 = (float)(v23 + v48) * 0.5;
    float v65 = (float)(v16 + v56) * 0.5;
    float v66 = (float)(v15 + v57) * 0.5;
    float v67 = (float)(v17 + v58) * 0.5;
    if (a4)
    {
      double v68 = 1.0 / fmaxf(sqrtf((float)(v61 * v61) + (float)((float)(v59 * v59) + (float)(v60 * v60))), 1.0e-10);
      float v59 = v68 * v59;
      float v60 = v68 * v60;
      float v61 = v68 * v61;
      double v69 = 1.0 / fmaxf(sqrtf((float)(v64 * v64) + (float)((float)(v62 * v62) + (float)(v63 * v63))), 1.0e-10);
      float v62 = v69 * v62;
      float v63 = v69 * v63;
      float v64 = v69 * v64;
      double v70 = 1.0 / fmaxf(sqrtf((float)(v67 * v67) + (float)((float)(v65 * v65) + (float)(v66 * v66))), 1.0e-10);
      float v65 = v70 * v65;
      float v66 = v70 * v66;
      float v67 = v70 * v67;
    }
    double v71 = (float)((float)((float)((float)((float)(v16 - v65) * (float)(v16 - v65))
                                + (float)((float)(v15 - v66) * (float)(v15 - v66)))
                        + (float)((float)(v17 - v67) * (float)(v17 - v67)))
                + (float)((float)((float)((float)((float)(v13 - v62) * (float)(v13 - v62))
                                        + (float)((float)(v14 - v63) * (float)(v14 - v63)))
                                + (float)((float)(v23 - v64) * (float)(v23 - v64)))
                        + (float)((float)((float)((float)(v10 - v59) * (float)(v10 - v59))
                                        + (float)((float)(v11 - v60) * (float)(v11 - v60)))
                                + (float)((float)(v12 - v61) * (float)(v12 - v61)))));
    BOOL result = v31 > v71;
    if (v31 > v71) {
      break;
    }
    a1->f32[0] = v59;
    a1->f32[1] = v60;
    a1[1].f32[0] = v61;
    a2->f32[0] = v62;
    a2->f32[1] = v63;
    a2[1].f32[0] = v64;
    a3->f32[0] = v65;
    a3->f32[1] = v66;
    a3[1].f32[0] = v67;
    float v13 = a2->f32[0];
    float v14 = a2->f32[1];
    float v23 = a2[1].f32[0];
    float v18 = v65;
    float v19 = v66;
    float v20 = v67;
    float v21 = a2->f32[0];
    float v22 = v14;
    float v24 = v23;
    float v10 = a1->f32[0];
    float v11 = a1->f32[1];
    float v25 = a1->f32[0];
    float v26 = v11;
    float v12 = a1[1].f32[0];
    float v27 = v12;
    if ((a4 & 1) == 0)
    {
      double v73 = 1.0 / fmaxf(sqrtf((float)((float)(v10 * v10) + (float)(v11 * v11)) + (float)(v12 * v12)), 1.0e-10);
      float v25 = v73 * v10;
      float v26 = v73 * v11;
      float v27 = v73 * v12;
      double v74 = 1.0 / fmaxf(sqrtf((float)((float)(v13 * v13) + (float)(v14 * v14)) + (float)(v23 * v23)), 1.0e-10);
      float v21 = v74 * v13;
      float v22 = v74 * v14;
      float v24 = v74 * v23;
      double v75 = 1.0 / fmaxf(sqrtf((float)((float)(v65 * v65) + (float)(v66 * v66)) + (float)(v67 * v67)), 1.0e-10);
      float v18 = v75 * v65;
      float v19 = v75 * v66;
      float v20 = v75 * v67;
    }
    float v17 = v67;
    float v15 = v66;
    float v16 = v65;
    --v32;
  }
  while (v32);
  return result;
}

void pxrInternal__aapl__pxrReserved__::GfBuildOrthonormalFrame(float *a1, float32x2_t *a2, float32x2_t *a3, float a4)
{
  float v8 = *a1;
  float v7 = a1[1];
  float v9 = a1[2];
  float v10 = sqrtf((float)((float)(v8 * v8) + (float)(v7 * v7)) + (float)(v9 * v9));
  if (v10 == 0.0)
  {
    *a3 = 0;
    a3[1].i32[0] = 0;
    float32x2_t v11 = *a3;
    a2[1].i32[0] = 0;
    *a2 = v11;
  }
  else
  {
    double v12 = 1.0 / v10;
    float v13 = v12 * v8;
    float v14 = v12 * v7;
    float v15 = v12 * v9;
    float v16 = v14 * 0.0;
    *(float *)&double v12 = (float)(v15 * 0.0) - (float)(v14 * 0.0);
    float32_t v17 = (float)(v13 * 0.0) - v15;
    float32_t v18 = v14 - (float)(v13 * 0.0);
    a2->i32[0] = LODWORD(v12);
    a2->f32[1] = v17;
    a2[1].f32[0] = v18;
    if ((float)((float)(v18 * v18) + (float)((float)(v17 * v17) + (float)(*(float *)&v12 * *(float *)&v12))) < 0.00000001)
    {
      a2->f32[0] = v15 - v16;
      a2->f32[1] = (float)(v13 * 0.0) - (float)(v15 * 0.0);
      a2[1].f32[0] = v16 - v13;
    }
    sub_2168B0034(a2, 1.0e-10);
    float v20 = a2->f32[1];
    float v19 = a2[1].f32[0];
    float32_t v21 = (float)(v19 * v14) - (float)(v20 * v15);
    float32_t v22 = (float)(a2->f32[0] * v15) - (float)(v19 * v13);
    float32_t v23 = (float)(v20 * v13) - (float)(a2->f32[0] * v14);
    a3->f32[0] = v21;
    a3->f32[1] = v22;
    a3[1].f32[0] = v23;
    if (v10 < a4)
    {
      *a2 = vmul_n_f32(*a2, v10 / a4);
      a2[1].f32[0] = (float)(v10 / a4) * a2[1].f32[0];
      *a3 = vmul_n_f32(*a3, v10 / a4);
      a3[1].f32[0] = (float)(v10 / a4) * a3[1].f32[0];
    }
  }
}

float sub_2168B0034(float32x2_t *a1, float a2)
{
  float v2 = a1[1].f32[0];
  float32x2_t v3 = *a1;
  float v4 = sqrtf(vaddv_f32(vmul_f32(v3, v3)) + (float)(v2 * v2));
  if (v4 > a2) {
    a2 = v4;
  }
  double v5 = 1.0 / a2;
  *a1 = vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(v3), v5));
  *(float *)&double v5 = v5 * v2;
  a1[1].i32[0] = LODWORD(v5);
  return v4;
}

void pxrInternal__aapl__pxrReserved__::GfSlerp(float32x2_t *a1, float32x2_t *a2, double a3)
{
  float v4 = vaddv_f32(vmul_f32(*a1, *a2)) + (float)(a1[1].f32[0] * a2[1].f32[0]);
  double v5 = v4;
  if (v4 > 1.0) {
    double v5 = 1.0;
  }
  BOOL v6 = v4 < -1.0;
  double v7 = -1.0;
  if (!v6) {
    double v7 = v5;
  }
  long double v8 = acos(v7);
  if (fabs(v8) >= 0.001)
  {
    if (fabs(sin(v8)) >= 0.00001)
    {
      sin((1.0 - a3) * v8);
      sin(v8 * a3);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::GfBuildOrthonormalFrame((float *)a1, &v11, &v10, 1.0e-10);
      __sincos_stret(a3 * 3.14159265);
    }
  }
}

uint64_t *sub_2168B0274()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  double v5 = 0;
  BOOL v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C740, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74C740, (char *)0xC, 1, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    BOOL v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168B0334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec3h::operator==(unsigned __int16 *a1, double *a2)
{
  return *a2 == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1]
      && a2[1] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[1]]
      && a2[2] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[2]];
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec3h::operator==(unsigned __int16 *a1, float *a2)
{
  return pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1] == *a2
      && pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[1]] == a2[1]
      && pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[2]] == a2[2];
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec3h::operator==(unsigned __int16 *a1, int *a2)
{
  return pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1] == (float)*a2
      && pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[1]] == (float)a2[1]
      && pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[2]] == (float)a2[2];
}

uint64_t pxrInternal__aapl__pxrReserved__::GfOrthogonalizeBasis(unsigned __int16 *a1, unsigned __int16 *a2, unsigned __int16 *a3, int a4, double a5)
{
  if (a4)
  {
    sub_2168B0EAC(a1, 0x1419u);
    sub_2168B0EAC(a2, 0x1419u);
    sub_2168B0EAC(a3, 0x1419u);
    int v80 = *(_DWORD *)a1;
    unsigned __int16 v81 = a1[2];
    int v74 = *(_DWORD *)a2;
    unsigned __int16 v75 = a2[2];
    int v68 = *(_DWORD *)a3;
    unsigned __int16 v69 = a3[2];
  }
  else
  {
    int v80 = *(_DWORD *)a1;
    unsigned __int16 v81 = a1[2];
    int v74 = *(_DWORD *)a2;
    unsigned __int16 v75 = a2[2];
    int v68 = *(_DWORD *)a3;
    unsigned __int16 v69 = a3[2];
    sub_2168B0EAC((unsigned __int16 *)&v80, 0x1419u);
    sub_2168B0EAC((unsigned __int16 *)&v74, 0x1419u);
    sub_2168B0EAC((unsigned __int16 *)&v68, 0x1419u);
  }
  int v82 = v80;
  unsigned __int16 v83 = v81;
  float32x2_t v10 = sub_216895E88((unsigned __int16 *)&v82, (unsigned __int16 *)&v74);
  int v11 = *(_DWORD *)v10;
  unsigned __int16 v83 = v10[2];
  int v82 = v11;
  double v12 = a5 * a5;
  if (v12 >= pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)sub_216895C38((unsigned __int16 *)&v82, (unsigned __int16 *)&v82)])return 0; {
  int v82 = v80;
  }
  unsigned __int16 v83 = v81;
  float v13 = sub_216895E88((unsigned __int16 *)&v82, (unsigned __int16 *)&v68);
  int v14 = *(_DWORD *)v13;
  unsigned __int16 v83 = v13[2];
  int v82 = v14;
  if (v12 >= pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)sub_216895C38((unsigned __int16 *)&v82, (unsigned __int16 *)&v82)])return 0; {
  int v82 = v74;
  }
  unsigned __int16 v83 = v75;
  float v15 = sub_216895E88((unsigned __int16 *)&v82, (unsigned __int16 *)&v68);
  int v16 = *(_DWORD *)v15;
  unsigned __int16 v83 = v15[2];
  int v82 = v16;
  if (v12 >= pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)sub_216895C38((unsigned __int16 *)&v82, (unsigned __int16 *)&v82)])return 0; {
  int v17 = 20;
  }
  while (1)
  {
    int v78 = *(_DWORD *)a1;
    unsigned __int16 v79 = a1[2];
    int v72 = *(_DWORD *)a2;
    unsigned __int16 v73 = a2[2];
    int v66 = *(_DWORD *)a3;
    unsigned __int16 v67 = a3[2];
    double v18 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)sub_216895C38((unsigned __int16 *)&v74, (unsigned __int16 *)&v78)];
    int v82 = v74;
    unsigned __int16 v83 = v75;
    float v19 = sub_216895D54((unsigned __int16 *)&v82, v18);
    int v20 = *(_DWORD *)v19;
    unsigned __int16 v83 = v19[2];
    int v82 = v20;
    sub_216895E88((unsigned __int16 *)&v78, (unsigned __int16 *)&v82);
    double v21 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)sub_216895C38((unsigned __int16 *)&v68, (unsigned __int16 *)&v78)];
    int v82 = v68;
    unsigned __int16 v83 = v69;
    float32_t v22 = sub_216895D54((unsigned __int16 *)&v82, v21);
    int v23 = *(_DWORD *)v22;
    unsigned __int16 v83 = v22[2];
    int v82 = v23;
    sub_216895E88((unsigned __int16 *)&v78, (unsigned __int16 *)&v82);
    double v24 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)sub_216895C38((unsigned __int16 *)&v80, (unsigned __int16 *)&v72)];
    int v82 = v80;
    unsigned __int16 v83 = v81;
    float v25 = sub_216895D54((unsigned __int16 *)&v82, v24);
    int v26 = *(_DWORD *)v25;
    unsigned __int16 v83 = v25[2];
    int v82 = v26;
    sub_216895E88((unsigned __int16 *)&v72, (unsigned __int16 *)&v82);
    double v27 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)sub_216895C38((unsigned __int16 *)&v68, (unsigned __int16 *)&v72)];
    int v82 = v68;
    unsigned __int16 v83 = v69;
    double v28 = sub_216895D54((unsigned __int16 *)&v82, v27);
    int v29 = *(_DWORD *)v28;
    unsigned __int16 v83 = v28[2];
    int v82 = v29;
    sub_216895E88((unsigned __int16 *)&v72, (unsigned __int16 *)&v82);
    double v30 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)sub_216895C38((unsigned __int16 *)&v80, (unsigned __int16 *)&v66)];
    int v82 = v80;
    unsigned __int16 v83 = v81;
    double v31 = sub_216895D54((unsigned __int16 *)&v82, v30);
    int v32 = *(_DWORD *)v31;
    unsigned __int16 v83 = v31[2];
    int v82 = v32;
    sub_216895E88((unsigned __int16 *)&v66, (unsigned __int16 *)&v82);
    double v33 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)sub_216895C38((unsigned __int16 *)&v74, (unsigned __int16 *)&v66)];
    int v82 = v74;
    unsigned __int16 v83 = v75;
    float v34 = sub_216895D54((unsigned __int16 *)&v82, v33);
    int v35 = *(_DWORD *)v34;
    unsigned __int16 v83 = v34[2];
    int v82 = v35;
    sub_216895E88((unsigned __int16 *)&v66, (unsigned __int16 *)&v82);
    int v82 = *(_DWORD *)a1;
    unsigned __int16 v83 = a1[2];
    float v36 = sub_21689606C((unsigned __int16 *)&v82, (unsigned __int16 *)&v78);
    int v37 = *(_DWORD *)v36;
    unsigned __int16 v83 = v36[2];
    int v82 = v37;
    float v38 = sub_216895D54((unsigned __int16 *)&v82, 0.5);
    int v39 = *(_DWORD *)v38;
    unsigned __int16 v77 = v38[2];
    int v76 = v39;
    int v82 = *(_DWORD *)a2;
    unsigned __int16 v83 = a2[2];
    float v40 = sub_21689606C((unsigned __int16 *)&v82, (unsigned __int16 *)&v72);
    int v41 = *(_DWORD *)v40;
    unsigned __int16 v83 = v40[2];
    int v82 = v41;
    float v42 = sub_216895D54((unsigned __int16 *)&v82, 0.5);
    int v43 = *(_DWORD *)v42;
    unsigned __int16 v71 = v42[2];
    int v70 = v43;
    int v82 = *(_DWORD *)a3;
    unsigned __int16 v83 = a3[2];
    float v44 = sub_21689606C((unsigned __int16 *)&v82, (unsigned __int16 *)&v66);
    int v45 = *(_DWORD *)v44;
    unsigned __int16 v83 = v44[2];
    int v82 = v45;
    float v46 = sub_216895D54((unsigned __int16 *)&v82, 0.5);
    int v47 = *(_DWORD *)v46;
    unsigned __int16 v65 = v46[2];
    int v64 = v47;
    if (a4)
    {
      sub_2168B0EAC((unsigned __int16 *)&v76, 0x1419u);
      sub_2168B0EAC((unsigned __int16 *)&v70, 0x1419u);
      sub_2168B0EAC((unsigned __int16 *)&v64, 0x1419u);
    }
    unsigned __int16 v63 = 0;
    int v62 = 0;
    int v82 = *(_DWORD *)a1;
    unsigned __int16 v83 = a1[2];
    float v48 = sub_216895E88((unsigned __int16 *)&v82, (unsigned __int16 *)&v76);
    int v49 = *(_DWORD *)v48;
    unsigned __int16 v63 = v48[2];
    int v62 = v49;
    unsigned __int16 v61 = 0;
    int v60 = 0;
    int v82 = *(_DWORD *)a2;
    unsigned __int16 v83 = a2[2];
    float v50 = sub_216895E88((unsigned __int16 *)&v82, (unsigned __int16 *)&v70);
    int v51 = *(_DWORD *)v50;
    unsigned __int16 v61 = v50[2];
    int v60 = v51;
    unsigned __int16 v59 = 0;
    int v58 = 0;
    int v82 = *(_DWORD *)a3;
    unsigned __int16 v83 = a3[2];
    float v52 = sub_216895E88((unsigned __int16 *)&v82, (unsigned __int16 *)&v64);
    int v53 = *(_DWORD *)v52;
    unsigned __int16 v59 = v52[2];
    int v58 = v53;
    float v54 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)sub_216895C38((unsigned __int16 *)&v62, (unsigned __int16 *)&v62)];
    float v55 = v54
        + pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)sub_216895C38((unsigned __int16 *)&v60, (unsigned __int16 *)&v60)];
    if (v12 > (float)(v55
                     + pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)sub_216895C38((unsigned __int16 *)&v58, (unsigned __int16 *)&v58)]))
      break;
    *(_DWORD *)a1 = v76;
    a1[2] = v77;
    *(_DWORD *)a2 = v70;
    a2[2] = v71;
    int v56 = v64;
    *(_DWORD *)a3 = v64;
    a3[2] = v65;
    unsigned __int16 v81 = a1[2];
    int v80 = *(_DWORD *)a1;
    unsigned __int16 v75 = a2[2];
    int v74 = *(_DWORD *)a2;
    unsigned __int16 v69 = v65;
    int v68 = v56;
    if ((a4 & 1) == 0)
    {
      sub_2168B0EAC((unsigned __int16 *)&v80, 0x1419u);
      sub_2168B0EAC((unsigned __int16 *)&v74, 0x1419u);
      sub_2168B0EAC((unsigned __int16 *)&v68, 0x1419u);
    }
    if (!--v17) {
      return 0;
    }
  }
  return 1;
}

unint64_t pxrInternal__aapl__pxrReserved__::GfVec3h::BuildOrthonormalFrame(unsigned __int16 *a1, unsigned __int16 *a2, unsigned __int16 *a3, unsigned __int16 a4)
{
  return pxrInternal__aapl__pxrReserved__::GfBuildOrthonormalFrame(a1, a2, a3, a4);
}

unint64_t pxrInternal__aapl__pxrReserved__::GfBuildOrthonormalFrame(unsigned __int16 *a1, unsigned __int16 *a2, unsigned __int16 *a3, unsigned __int16 a4)
{
  unint64_t result = sub_2168B0F20(a1);
  uint64_t v9 = (unsigned __int16)result;
  float v10 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)result];
  if (v10 == 0.0)
  {
    *(_DWORD *)a3 = 0;
    a3[2] = 0;
    a2[2] = 0;
    *(_DWORD *)a2 = 0;
  }
  else
  {
    int v20 = *(_DWORD *)a1;
    unsigned __int16 v21 = a1[2];
    int v11 = sub_216895D54((unsigned __int16 *)&v20, 1.0 / v10);
    int v12 = *(_DWORD *)v11;
    unsigned __int16 v21 = v11[2];
    int v20 = v12;
    __int16 v19 = 0;
    int v18 = 15360;
    unint64_t v13 = sub_2168A86F8((unsigned __int16 *)&v18, (unsigned __int16 *)&v20);
    *(_DWORD *)a2 = v13;
    a2[2] = WORD2(v13);
    if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)sub_216895C38(a2, a2)] < 0.00000001)
    {
      __int16 v19 = 0;
      int v18 = 1006632960;
      unint64_t v14 = sub_2168A86F8((unsigned __int16 *)&v18, (unsigned __int16 *)&v20);
      *(_DWORD *)a2 = v14;
      a2[2] = WORD2(v14);
    }
    sub_2168B0EAC(a2, 0x1419u);
    unint64_t result = sub_2168A86F8((unsigned __int16 *)&v20, a2);
    *(_DWORD *)a3 = result;
    a3[2] = WORD2(result);
    float v15 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v9];
    float v16 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a4];
    if (v15 < v16)
    {
      double v17 = (float)(v15 / v16);
      sub_216895D54(a2, v17);
      return (unint64_t)sub_216895D54(a3, v17);
    }
  }
  return result;
}

uint64_t sub_2168B0EAC(unsigned __int16 *a1, unsigned __int16 a2)
{
  uint64_t v4 = sub_2168B0F20(a1);
  uint64_t v5 = v4;
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)v4] <= pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2]) {
    unsigned __int16 v6 = a2;
  }
  else {
    unsigned __int16 v6 = v4;
  }
  sub_216895D54(a1, 1.0 / pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v6]);
  return v5;
}

uint64_t sub_2168B0F20(unsigned __int16 *a1)
{
  float v1 = sqrtf(pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)sub_216895C38(a1, a1)]);
  if (v1 == 0.0) {
    return HIWORD(LODWORD(v1));
  }
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v1) >> 23]) {
    return pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v1) >> 23]
  }
         + (((LODWORD(v1) & 0x7FFFFF) + ((LODWORD(v1) >> 13) & 1) + 4095) >> 13);
  return pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v1));
}

unint64_t pxrInternal__aapl__pxrReserved__::GfSlerp(unsigned __int16 *a1, unsigned __int16 *a2, double a3)
{
  float v6 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)sub_216895C38(a1, a2)];
  double v7 = v6;
  if (v6 > 1.0) {
    double v7 = 1.0;
  }
  BOOL v8 = v6 < -1.0;
  double v9 = -1.0;
  if (!v8) {
    double v9 = v7;
  }
  long double v10 = acos(v9);
  if (fabs(v10) < 0.001)
  {
    int v35 = *(_DWORD *)a1;
    unsigned __int16 v36 = a1[2];
    int v11 = sub_216895D54((unsigned __int16 *)&v35, 1.0 - a3);
    int v12 = *(_DWORD *)v11;
    unsigned __int16 v13 = v11[2];
    int v35 = *(_DWORD *)a2;
    unsigned __int16 v36 = a2[2];
    double v14 = a3;
LABEL_10:
    __int16 v19 = sub_216895D54((unsigned __int16 *)&v35, v14);
    int v20 = *(_DWORD *)v19;
    unsigned __int16 v34 = v19[2];
    int v33 = v20;
    unsigned __int16 v36 = v13;
    int v35 = v12;
    double v27 = (unsigned __int16 *)&v33;
    goto LABEL_11;
  }
  double v15 = sin(v10);
  if (fabs(v15) >= 0.00001)
  {
    double v16 = 1.0 / v15;
    long double v17 = sin((1.0 - a3) * v10);
    int v35 = *(_DWORD *)a1;
    unsigned __int16 v36 = a1[2];
    int v18 = sub_216895D54((unsigned __int16 *)&v35, v17 * v16);
    int v12 = *(_DWORD *)v18;
    unsigned __int16 v13 = v18[2];
    double v14 = sin(v10 * a3) * v16;
    int v35 = *(_DWORD *)a2;
    unsigned __int16 v36 = a2[2];
    goto LABEL_10;
  }
  pxrInternal__aapl__pxrReserved__::GfBuildOrthonormalFrame(a1, (unsigned __int16 *)&v33, &v32, 0x1419u);
  __double2 v21 = __sincos_stret(a3 * 3.14159265);
  int v35 = *(_DWORD *)a1;
  unsigned __int16 v36 = a1[2];
  float32_t v22 = sub_216895D54((unsigned __int16 *)&v35, v21.__cosval);
  int v23 = *(_DWORD *)v22;
  unsigned __int16 v24 = v22[2];
  int v35 = v33;
  unsigned __int16 v36 = v34;
  float v25 = sub_216895D54((unsigned __int16 *)&v35, v21.__sinval);
  int v26 = *(_DWORD *)v25;
  unsigned __int16 v31 = v25[2];
  int v30 = v26;
  unsigned __int16 v36 = v24;
  int v35 = v23;
  double v27 = (unsigned __int16 *)&v30;
LABEL_11:
  double v28 = sub_21689606C((unsigned __int16 *)&v35, v27);
  return *(unsigned int *)v28 | ((unint64_t)v28[2] << 32);
}

uint64_t *sub_2168B11C8()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  uint64_t v5 = 0;
  float v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C750, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74C750, (char *)6, 1, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    float v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168B1288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec3i::operator==(int *a1, double *a2)
{
  return *a2 == (double)*a1 && a2[1] == (double)a1[1] && a2[2] == (double)a1[2];
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec3i::operator==(int *a1, float *a2)
{
  return *a2 == (float)*a1 && a2[1] == (float)a1[1] && a2[2] == (float)a1[2];
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec3i::operator==(int *a1, unsigned __int16 *a2)
{
  return pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a2] == (float)*a1
      && pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[1]] == (float)a1[1]
      && pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[2]] == (float)a1[2];
}

uint64_t *sub_2168B1444()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  uint64_t v5 = 0;
  float v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C760, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74C760, (char *)0xC, 1, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    float v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168B1504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec4d::operator==(double *a1, float *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3];
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec4d::operator==(double *a1, unsigned __int16 *a2)
{
  return *a1 == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a2]
      && a1[1] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[1]]
      && a1[2] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[2]]
      && a1[3] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[3]];
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec4d::operator==(double *a1, int *a2)
{
  return *a1 == (double)*a2 && a1[1] == (double)a2[1] && a1[2] == (double)a2[2] && a1[3] == (double)a2[3];
}

uint64_t *sub_2168B1714()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  uint64_t v5 = 0;
  float v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C770, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74C770, (char *)0x20, 1, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    float v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168B17D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec4f::operator==(float *a1, double *a2)
{
  return *a2 == *a1 && a2[1] == a1[1] && a2[2] == a1[2] && a2[3] == a1[3];
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec4f::operator==(float *a1, unsigned __int16 *a2)
{
  return *a1 == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a2]
      && a1[1] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[1]]
      && a1[2] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[2]]
      && a1[3] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[3]];
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec4f::operator==(float *a1, int *a2)
{
  return *a1 == (float)*a2 && a1[1] == (float)a2[1] && a1[2] == (float)a2[2] && a1[3] == (float)a2[3];
}

uint64_t *sub_2168B19D4()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  uint64_t v5 = 0;
  float v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C780, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74C780, (char *)0x10, 1, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    float v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168B1A94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec4h::operator==(unsigned __int16 *a1, double *a2)
{
  return *a2 == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1]
      && a2[1] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[1]]
      && a2[2] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[2]]
      && a2[3] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[3]];
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec4h::operator==(unsigned __int16 *a1, float *a2)
{
  return pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1] == *a2
      && pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[1]] == a2[1]
      && pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[2]] == a2[2]
      && pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[3]] == a2[3];
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec4h::operator==(unsigned __int16 *a1, int *a2)
{
  return pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1] == (float)*a2
      && pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[1]] == (float)a2[1]
      && pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[2]] == (float)a2[2]
      && pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[3]] == (float)a2[3];
}

uint64_t *sub_2168B1CC4()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  uint64_t v5 = 0;
  float v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C790, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74C790, (char *)8, 1, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    float v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168B1D84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec4i::operator==(int *a1, double *a2)
{
  return *a2 == (double)*a1 && a2[1] == (double)a1[1] && a2[2] == (double)a1[2] && a2[3] == (double)a1[3];
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec4i::operator==(int *a1, float *a2)
{
  return *a2 == (float)*a1 && a2[1] == (float)a1[1] && a2[2] == (float)a1[2] && a2[3] == (float)a1[3];
}

BOOL pxrInternal__aapl__pxrReserved__::GfVec4i::operator==(int *a1, unsigned __int16 *a2)
{
  return pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a2] == (float)*a1
      && pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[1]] == (float)a1[1]
      && pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[2]] == (float)a1[2]
      && pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[3]] == (float)a1[3];
}

uint64_t *sub_2168B1F94()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  uint64_t v5 = 0;
  float v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C7A0, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74C7A0, (char *)0x10, 1, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    float v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168B2054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::JsParseStream(void *a1@<X0>, uint64_t a2@<X1>, pxrInternal__aapl__pxrReserved__::JsValue *a3@<X8>)
{
  char v4 = (char *)a1 + *(void *)(*a1 - 24);
  if ((v4[32] & 5) != 0)
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"js/json.cpp";
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)"JsParseStream";
    __p.__r_.__value_.__r.__words[2] = 231;
    uint64_t v8 = "JsValue pxrInternal__aapl__pxrReserved__::JsParseStream(std::istream &, JsParseError *)";
    char v9 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Stream error");
    pxrInternal__aapl__pxrReserved__::JsValue::JsValue(a3);
  }
  else
  {
    sub_2168B5A88(&__p, *((void **)v4 + 5), 0);
    pxrInternal__aapl__pxrReserved__::JsParseString((char *)&__p, a2, v6, a3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_2168B2164(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::JsParseString(char *a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, pxrInternal__aapl__pxrReserved__::JsValue *a4@<X8>)
{
  uint64_t v5 = a1[23];
  int v6 = (char)v5;
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *((void *)a1 + 1);
  }
  if (!v5)
  {
    __p[0] = "js/json.cpp";
    __p[1] = "JsParseString";
    v32[0] = (void *)250;
    v32[1] = "JsValue pxrInternal__aapl__pxrReserved__::JsParseString(const std::string &, JsParseError *)";
    LOBYTE(v33) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"JSON string is empty");
    pxrInternal__aapl__pxrReserved__::JsValue::JsValue(a4);
    return;
  }
  uint64_t v9 = 0;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v38 = 0u;
  *(_OWORD *)std::string __p = 0u;
  *(_OWORD *)unsigned __int16 v32 = 0u;
  uint64_t v33 = 0;
  uint64_t v34 = 256;
  int v37 = 2;
  if (v6 >= 0) {
    long double v10 = a1;
  }
  else {
    long double v10 = *(char **)a1;
  }
  int v29 = v10;
  int v30 = v10;
  LODWORD(v35) = 0;
  uint64_t v36 = 0;
  while (1)
  {
    unsigned int v11 = v10[v9];
    BOOL v12 = v11 > 0x20;
    uint64_t v13 = (1 << v11) & 0x100002600;
    if (v12 || v13 == 0) {
      break;
    }
    ++v9;
  }
  int v29 = &v10[v9];
  if (v10[v9])
  {
    sub_2168B5C68((uint64_t)__p, &v29, (uint64_t)&v38, (__n128)0);
    uint64_t v9 = v36;
    double v15 = v32[0];
  }
  else
  {
    double v15 = 0;
    LODWORD(v35) = 1;
    uint64_t v36 = v9;
  }
  unsigned int v16 = v35;
  v32[1] = v15;
  if (v35) {
    long double v17 = 0;
  }
  else {
    long double v17 = sub_2168B3C94;
  }
  if (v17)
  {
    int v18 = (void *)*((void *)&v39 + 1);
    __int16 v19 = (void *)v40;
    if ((void)v40 - *((void *)&v39 + 1) != 16)
    {
      LOBYTE(v28) = 0;
      int v26 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Unexpected value count: %zu", (const char *)a2, a3, (uint64_t)(v40 - *((void *)&v39 + 1)) >> 4, "js/json.cpp", "JsParseString", 284, "JsValue pxrInternal__aapl__pxrReserved__::JsParseString(const std::string &, JsParseError *)", v28, v29, v30, __p[0]);
      pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v27, "handler.values.size() == 1", v26);
      int v18 = (void *)*((void *)&v39 + 1);
      __int16 v19 = (void *)v40;
    }
    if (v18 != v19)
    {
      *(void *)a4 = *v18;
      uint64_t v20 = v18[1];
      *((void *)a4 + 1) = v20;
      if (v20) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
      }
      goto LABEL_41;
    }
  }
  else if (a2)
  {
    *(_DWORD *)a2 = 1;
    if (v9)
    {
      uint64_t v21 = 0;
      int v22 = 0;
      int v23 = 1;
      do
      {
        if (a1[23] >= 0) {
          unsigned __int16 v24 = a1;
        }
        else {
          unsigned __int16 v24 = *(char **)a1;
        }
        if (v24[v21] == 10)
        {
          *(_DWORD *)a2 = ++v23;
          int v22 = v21;
        }
        ++v21;
      }
      while (v9 != v21);
    }
    else
    {
      int v22 = 0;
    }
    *(_DWORD *)(a2 + 4) = v9 - v22;
    if (v16 > 0x11) {
      float v25 = "Unknown error.";
    }
    else {
      float v25 = off_264294328[v16];
    }
    MEMORY[0x21D4477E0](a2 + 8, v25);
  }
  pxrInternal__aapl__pxrReserved__::JsValue::JsValue(a4);
LABEL_41:
  free(v32[0]);
  if (__p[1]) {
    operator delete(__p[1]);
  }
  __p[0] = (char *)&v39 + 8;
  sub_216787968((void ***)__p);
  __p[0] = &v38;
  sub_216782F20((void ***)__p);
}

void sub_2168B2440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_2168B3CA4((uint64_t)va);
  sub_2168B2474((void **)(v9 - 80));
  _Unwind_Resume(a1);
}

void **sub_2168B2474(void **a1)
{
  float32x2_t v3 = a1 + 3;
  sub_216787968(&v3);
  float32x2_t v3 = a1;
  sub_216782F20(&v3);
  return a1;
}

void pxrInternal__aapl__pxrReserved__::JsWriteToStream(unint64_t **a1, void *a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if ((*((unsigned char *)a2 + *(void *)(*a2 - 24) + 32) & 5) != 0)
  {
    v14[0] = "js/json.cpp";
    v14[1] = "JsWriteToStream";
    v14[2] = 295;
    double v15 = "void pxrInternal__aapl__pxrReserved__::JsWriteToStream(const JsValue &, std::ostream &)";
    char v16 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Stream error");
  }
  else
  {
    sub_2168B9178((uint64_t)v14, 0, 1024, 0);
    sub_2168B263C(a1, (uint64_t)v15, (uint64_t)v13);
    BOOL v12 = a2;
    char v4 = &v12;
    *(_OWORD *)std::string __p = 0u;
    *(_OWORD *)int v6 = 0u;
    uint64_t v7 = 0;
    uint64_t v8 = 512;
    int v9 = 324;
    __int16 v10 = 0x2000;
    uint64_t v11 = 0x100000004;
    sub_2168B29D8(v13, &v4);
    free(v6[0]);
    if (__p[1]) {
      operator delete(__p[1]);
    }
    sub_2168B9248(v14);
  }
}

void sub_2168B2610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  sub_2168B3CA4(v15);
  sub_2168B9248((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2168B263C(unint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  switch(pxrInternal__aapl__pxrReserved__::JsValue::GetType((pxrInternal__aapl__pxrReserved__::JsValue *)a1))
  {
    case 0u:
      JsObject = (void *)pxrInternal__aapl__pxrReserved__::JsValue::GetJsObject(a1);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)a3 = 0;
      *(_WORD *)(a3 + 22) = 3;
      uint64_t v7 = JsObject + 1;
      uint64_t v8 = (void *)*JsObject;
      if ((void *)*JsObject != JsObject + 1)
      {
        do
        {
          int v9 = (const char *)(v8 + 4);
          if (*((char *)v8 + 55) < 0) {
            int v9 = *(const char **)v9;
          }
          long long __dst = 0uLL;
          uint64_t v29 = 0;
          unsigned int v10 = strlen(v9);
          unsigned int v11 = v10;
          if (v10 > 0x15)
          {
            HIWORD(v29) = 3077;
            LODWORD(__dst) = v10;
            p_dst = (long long *)sub_2168B94FC(a2, v10 + 1);
            *((void *)&__dst + 1) = p_dst;
          }
          else
          {
            HIWORD(v29) = 7173;
            BYTE5(v29) = 21 - v10;
            p_dst = &__dst;
          }
          memcpy(p_dst, v9, v11);
          *((unsigned char *)p_dst + v11) = 0;
          sub_2168B263C(&v32, v8 + 7, a2);
          sub_2168B9374((int *)a3, &__dst, &v32, a2);
          uint64_t v13 = (void *)v8[1];
          if (v13)
          {
            do
            {
              double v14 = v13;
              uint64_t v13 = (void *)*v13;
            }
            while (v13);
          }
          else
          {
            do
            {
              double v14 = (void *)v8[2];
              BOOL v15 = *v14 == (void)v8;
              uint64_t v8 = v14;
            }
            while (!v15);
          }
          uint64_t v8 = v14;
        }
        while (v14 != v7);
      }
      return;
    case 1u:
      JsArray = (uint64_t *)pxrInternal__aapl__pxrReserved__::JsValue::GetJsArray(a1);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)a3 = 0;
      *(_WORD *)(a3 + 22) = 4;
      uint64_t v17 = *JsArray;
      uint64_t v18 = JsArray[1];
      while (v17 != v18)
      {
        sub_2168B263C(&__dst, v17, a2);
        sub_2168B95F4((int *)a3, &__dst, a2);
        v17 += 16;
      }
      return;
    case 2u:
      unint64_t String = pxrInternal__aapl__pxrReserved__::JsValue::GetString((pxrInternal__aapl__pxrReserved__::JsValue *)a1);
      if (*(char *)(String + 23) < 0) {
        unint64_t String = *(void *)String;
      }
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)&long long __dst = String;
      DWORD2(__dst) = strlen((const char *)String);
      sub_2168B96A0((_WORD *)a3, (uint64_t)&__dst, a2);
      return;
    case 3u:
      BOOL Bool = pxrInternal__aapl__pxrReserved__::JsValue::GetBool((pxrInternal__aapl__pxrReserved__::JsValue *)a1);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)a3 = 0;
      if (Bool) {
        __int16 v21 = 10;
      }
      else {
        __int16 v21 = 9;
      }
      goto LABEL_34;
    case 4u:
      int v22 = (void *)(a3 + 8);
      if (pxrInternal__aapl__pxrReserved__::JsValue::IsUInt64((pxrInternal__aapl__pxrReserved__::JsValue *)a1))
      {
        uint64_t UInt64 = pxrInternal__aapl__pxrReserved__::JsValue::GetUInt64((uint64_t **)a1);
        *int v22 = 0;
        *(void *)(a3 + 16) = 0;
        *(void *)a3 = UInt64;
        if (UInt64 < 0) {
          __int16 v24 = 278;
        }
        else {
          __int16 v24 = 406;
        }
        *(_WORD *)(a3 + 22) = v24;
        if (!HIDWORD(UInt64))
        {
          *(_WORD *)(a3 + 22) = v24 | 0x40;
          if (!((unint64_t)UInt64 >> 31))
          {
            __int16 v21 = v24 | 0x60;
LABEL_34:
            *(_WORD *)(a3 + 22) = v21;
          }
        }
      }
      else
      {
        unint64_t Int64 = pxrInternal__aapl__pxrReserved__::JsValue::GetInt64((uint64_t **)a1);
        *int v22 = 0;
        *(void *)(a3 + 16) = 0;
        *(void *)a3 = Int64;
        *(_WORD *)(a3 + 22) = 150;
        if ((Int64 & 0x8000000000000000) != 0)
        {
          if (Int64 >= 0xFFFFFFFF80000000)
          {
            __int16 v21 = 182;
            goto LABEL_34;
          }
        }
        else
        {
          if (HIDWORD(Int64)) {
            __int16 v27 = 406;
          }
          else {
            __int16 v27 = 470;
          }
          *(_WORD *)(a3 + 22) = v27;
          if (!(Int64 >> 31))
          {
            __int16 v21 = v27 | 0x20;
            goto LABEL_34;
          }
        }
      }
      return;
    case 5u:
      double Real = pxrInternal__aapl__pxrReserved__::JsValue::GetReal((uint64_t **)a1);
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      *(double *)a3 = Real;
      __int16 v21 = 534;
      goto LABEL_34;
    case 6u:
      goto LABEL_25;
    default:
      *(void *)&long long __dst = "js/json.cpp";
      *((void *)&__dst + 1) = "_JsValueToImplValue";
      uint64_t v29 = 218;
      int v30 = "rj::Value pxrInternal__aapl__pxrReserved__::_JsValueToImplValue(const JsValue &, Allocator &) [Allocator = p"
            "xr_aapl::rapidjson::MemoryPoolAllocator<>]";
      char v31 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 1, (pxrInternal__aapl__pxrReserved__ *)"Unknown JsValue type");
LABEL_25:
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      return;
  }
}

uint64_t sub_2168B29D8(unsigned int *a1, void *a2)
{
  __int16 v4 = *((_WORD *)a1 + 11);
  switch(v4 & 7)
  {
    case 0:
      return sub_2168B53A4((uint64_t)a2);
    case 1:
      uint64_t v7 = (uint64_t)a2;
      int v8 = 0;
      goto LABEL_14;
    case 2:
      uint64_t v7 = (uint64_t)a2;
      int v8 = 1;
LABEL_14:
      return sub_2168B5540(v7, v8);
    case 3:
      if (!sub_2168B587C(a2)) {
        return 0;
      }
      if (!*a1) {
        goto LABEL_48;
      }
      uint64_t v9 = *((void *)a1 + 1) + 24;
      while (1)
      {
        uint64_t v10 = (*(_WORD *)(v9 - 2) & 0x1000) != 0 ? v9 - 24 : *(void *)(v9 - 16);
        unsigned int v11 = (*(_WORD *)(v9 - 2) & 0x1000) != 0 ? 21 - *(char *)(v9 - 3) : *(_DWORD *)(v9 - 24);
        if (!sub_2168B5810((uint64_t)a2, v10, v11) || (sub_2168B29D8(v9, a2) & 1) == 0) {
          break;
        }
        v9 += 48;
        if (v9 - 24 == *((void *)a1 + 1) + 48 * *a1)
        {
LABEL_48:
          return sub_2168B58EC((uint64_t)a2);
        }
      }
      return 0;
    case 4:
      if (!sub_2168B597C(a2)) {
        return 0;
      }
      if (!*a1) {
        goto LABEL_51;
      }
      uint64_t v12 = *((void *)a1 + 1);
      break;
    case 5:
      if ((*((_WORD *)a1 + 11) & 0x1000) != 0) {
        uint64_t v13 = (uint64_t)a1;
      }
      else {
        uint64_t v13 = *((void *)a1 + 1);
      }
      if ((*((_WORD *)a1 + 11) & 0x1000) != 0) {
        unsigned int v14 = 21 - *((char *)a1 + 21);
      }
      else {
        unsigned int v14 = *a1;
      }
      return sub_2168B5810((uint64_t)a2, v13, v14);
    default:
      if ((*((_WORD *)a1 + 11) & 0x200) != 0)
      {
        double v15 = *(double *)a1;
        return sub_2168B5714((uint64_t)a2, v15);
      }
      else if ((v4 & 0x20) != 0)
      {
        unsigned int v16 = *a1;
        return sub_2168B55A4((uint64_t)a2, v16);
      }
      else if ((v4 & 0x40) != 0)
      {
        unsigned int v17 = *a1;
        return sub_2168B5600((uint64_t)a2, v17);
      }
      else
      {
        unint64_t v6 = *(void *)a1;
        if ((v4 & 0x80) != 0)
        {
          return sub_2168B565C((uint64_t)a2, v6);
        }
        else
        {
          return sub_2168B56B8((uint64_t)a2, v6);
        }
      }
  }
  do
  {
    if ((sub_2168B29D8(v12, a2) & 1) == 0) {
      return 0;
    }
    v12 += 24;
  }
  while (v12 != *((void *)a1 + 1) + 24 * *a1);
LABEL_51:

  return sub_2168B59F0((uint64_t)a2);
}

void *pxrInternal__aapl__pxrReserved__::JsWriteToString@<X0>(unint64_t **this@<X0>, void *a2@<X8>)
{
  v20[13] = *MEMORY[0x263EF8340];
  sub_2168B9178((uint64_t)v20, 0, 1024, 0);
  sub_2168B263C(this, v20[3], (uint64_t)v19);
  *(_OWORD *)double v15 = 0u;
  *(_OWORD *)unsigned int v16 = 0u;
  uint64_t v17 = 0;
  uint64_t v18 = 256;
  uint64_t v7 = v15;
  *(_OWORD *)std::string __p = 0u;
  *(_OWORD *)uint64_t v9 = 0u;
  uint64_t v10 = 0;
  uint64_t v11 = 512;
  int v12 = 324;
  __int16 v13 = 0x2000;
  uint64_t v14 = 0x100000004;
  sub_2168B2E68(v19, &v7);
  uint64_t v5 = (char *)sub_2168B3378(v15);
  sub_216779094(a2, v5);
  free(v9[0]);
  if (__p[1]) {
    operator delete(__p[1]);
  }
  free(v16[0]);
  if (v15[1]) {
    operator delete(v15[1]);
  }
  return sub_2168B9248(v20);
}

void sub_2168B2E34(_Unwind_Exception *a1)
{
  sub_2168B9248((void *)(v1 - 144));
  _Unwind_Resume(a1);
}

uint64_t sub_2168B2E68(unsigned int *a1, unsigned char *a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  __int16 v4 = *((_WORD *)a1 + 11);
  switch(v4 & 7)
  {
    case 0:
      sub_2168B9B70(a2);
      return sub_2168B9DA8((uint64_t)a2);
    case 1:
      sub_2168B9B70(a2);
      uint64_t v7 = (uint64_t)a2;
      int v8 = 0;
      goto LABEL_14;
    case 2:
      sub_2168B9B70(a2);
      uint64_t v7 = (uint64_t)a2;
      int v8 = 1;
LABEL_14:
      return sub_2168B9ECC(v7, v8);
    case 3:
      uint64_t result = sub_2168B972C((uint64_t)a2);
      if (!result) {
        return result;
      }
      if (!*a1) {
        goto LABEL_47;
      }
      uint64_t v9 = *((void *)a1 + 1) + 24;
      while (1)
      {
        uint64_t v10 = (*(_WORD *)(v9 - 2) & 0x1000) != 0 ? v9 - 24 : *(void *)(v9 - 16);
        unsigned int v11 = (*(_WORD *)(v9 - 2) & 0x1000) != 0 ? 21 - *(char *)(v9 - 3) : *(_DWORD *)(v9 - 24);
        sub_2168B9B70(a2);
        uint64_t result = sub_2168BA148((uint64_t)a2, v10, v11);
        if (!result) {
          break;
        }
        if ((sub_2168B2E68(v9, a2) & 1) == 0) {
          return 0;
        }
        v9 += 48;
        if (v9 - 24 == *((void *)a1 + 1) + 48 * *a1)
        {
LABEL_47:
          return sub_2168B979C((void **)a2);
        }
      }
      return result;
    case 4:
      uint64_t result = sub_2168B9818((uint64_t)a2);
      if (!result) {
        return result;
      }
      if (!*a1) {
        goto LABEL_50;
      }
      uint64_t v12 = *((void *)a1 + 1);
      break;
    case 5:
      if ((*((_WORD *)a1 + 11) & 0x1000) != 0) {
        uint64_t v13 = (uint64_t)a1;
      }
      else {
        uint64_t v13 = *((void *)a1 + 1);
      }
      if ((*((_WORD *)a1 + 11) & 0x1000) != 0) {
        unsigned int v14 = 21 - *((char *)a1 + 21);
      }
      else {
        unsigned int v14 = *a1;
      }
      sub_2168B9B70(a2);
      return sub_2168BA148((uint64_t)a2, v13, v14);
    default:
      if ((*((_WORD *)a1 + 11) & 0x200) != 0)
      {
        pxrInternal__aapl__pxrReserved__::TfDoubleToString((pxrInternal__aapl__pxrReserved__ *)__s, *(double *)a1, (char *)0x20, 1);
        size_t v15 = strlen(__s);
        sub_2168B9B70(a2);
        return sub_2168BA2A8((uint64_t)a2, (uint64_t)__s, v15);
      }
      else if ((v4 & 0x20) != 0)
      {
        unsigned int v16 = *a1;
        return sub_2168B9910(a2, v16);
      }
      else if ((v4 & 0x40) != 0)
      {
        unsigned int v17 = *a1;
        return sub_2168B99B4(a2, v17);
      }
      else
      {
        double v6 = *(double *)a1;
        if ((v4 & 0x80) != 0)
        {
          return sub_2168B9A40(a2, *(unint64_t *)&v6);
        }
        else
        {
          return sub_2168B9AE4(a2, *(unint64_t *)&v6);
        }
      }
  }
  do
  {
    if ((sub_2168B2E68(v12, a2) & 1) == 0) {
      return 0;
    }
    v12 += 24;
  }
  while (v12 != *((void *)a1 + 1) + 24 * *a1);
LABEL_50:

  return sub_2168B988C((void **)a2);
}

uint64_t sub_2168B3378(void *a1)
{
  float v2 = (unsigned char *)a1[3];
  if ((uint64_t)(a1[4] - (void)v2) <= 0)
  {
    sub_2168B799C(a1, 1);
    float v2 = (unsigned char *)a1[3];
  }
  a1[3] = v2 + 1;
  *float v2 = 0;
  uint64_t result = a1[2];
  --a1[3];
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::JsWriteValue(uint64_t this, unint64_t **a2, const pxrInternal__aapl__pxrReserved__::JsValue *a3)
{
  if (this)
  {
    __int16 v4 = (pxrInternal__aapl__pxrReserved__ *)this;
    if (pxrInternal__aapl__pxrReserved__::JsValue::IsObject((pxrInternal__aapl__pxrReserved__::JsValue *)a2))
    {
      JsObject = (void *)pxrInternal__aapl__pxrReserved__::JsValue::GetJsObject(a2);
      (*(void (**)(void))(***(void ***)v4 + 80))(**(void **)v4);
      int v8 = (void *)*JsObject;
      double v6 = JsObject + 1;
      uint64_t v7 = v8;
      if (v8 != v6)
      {
        do
        {
          int v9 = *((char *)v7 + 55);
          if (v9 >= 0) {
            uint64_t v10 = v7 + 4;
          }
          else {
            uint64_t v10 = (void *)v7[4];
          }
          if (v9 >= 0) {
            uint64_t v11 = *((unsigned __int8 *)v7 + 55);
          }
          else {
            uint64_t v11 = v7[5];
          }
          (*(void (**)(void, void *, uint64_t))(***(void ***)v4 + 88))(**(void **)v4, v10, v11);
          pxrInternal__aapl__pxrReserved__::JsWriteValue(v4, (pxrInternal__aapl__pxrReserved__::JsWriter *)(v7 + 7), v12);
          uint64_t v13 = (void *)v7[1];
          if (v13)
          {
            do
            {
              unsigned int v14 = v13;
              uint64_t v13 = (void *)*v13;
            }
            while (v13);
          }
          else
          {
            do
            {
              unsigned int v14 = (void *)v7[2];
              BOOL v15 = *v14 == (void)v7;
              uint64_t v7 = v14;
            }
            while (!v15);
          }
          uint64_t v7 = v14;
        }
        while (v14 != v6);
      }
      unsigned int v16 = *(uint64_t (**)(void))(***(void ***)v4 + 96);
      return v16();
    }
    if (pxrInternal__aapl__pxrReserved__::JsValue::IsArray((pxrInternal__aapl__pxrReserved__::JsValue *)a2))
    {
      unint64_t JsArray = pxrInternal__aapl__pxrReserved__::JsValue::GetJsArray(a2);
      (*(void (**)(void))(***(void ***)v4 + 104))(**(void **)v4);
      uint64_t v19 = *(pxrInternal__aapl__pxrReserved__::JsWriter **)JsArray;
      uint64_t v20 = *(pxrInternal__aapl__pxrReserved__::JsWriter **)(JsArray + 8);
      while (v19 != v20)
      {
        pxrInternal__aapl__pxrReserved__::JsWriteValue(v4, v19, v18);
        uint64_t v19 = (pxrInternal__aapl__pxrReserved__::JsWriter *)((char *)v19 + 16);
      }
      unsigned int v16 = *(uint64_t (**)(void))(***(void ***)v4 + 112);
      return v16();
    }
    if (pxrInternal__aapl__pxrReserved__::JsValue::IsUInt64((pxrInternal__aapl__pxrReserved__::JsValue *)a2))
    {
      pxrInternal__aapl__pxrReserved__::JsValue::GetUInt64((uint64_t **)a2);
      __int16 v21 = *(uint64_t (**)(void))(***(void ***)v4 + 56);
      return v21();
    }
    if (pxrInternal__aapl__pxrReserved__::JsValue::IsString((pxrInternal__aapl__pxrReserved__::JsValue *)a2))
    {
      unint64_t String = pxrInternal__aapl__pxrReserved__::JsValue::GetString((pxrInternal__aapl__pxrReserved__::JsValue *)a2);
      int v23 = *(char *)(String + 23);
      if (v23 >= 0) {
        unint64_t v24 = String;
      }
      else {
        unint64_t v24 = *(void *)String;
      }
      if (v23 >= 0) {
        uint64_t v25 = *(unsigned __int8 *)(String + 23);
      }
      else {
        uint64_t v25 = *(void *)(String + 8);
      }
      int v26 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t))(***(void ***)v4 + 72);
      uint64_t v27 = **(void **)v4;
      return v26(v27, v24, v25);
    }
    else
    {
      if (pxrInternal__aapl__pxrReserved__::JsValue::IsBool((pxrInternal__aapl__pxrReserved__::JsValue *)a2))
      {
        pxrInternal__aapl__pxrReserved__::JsValue::GetBool((pxrInternal__aapl__pxrReserved__::JsValue *)a2);
        __int16 v21 = *(uint64_t (**)(void))(***(void ***)v4 + 24);
        return v21();
      }
      if (!pxrInternal__aapl__pxrReserved__::JsValue::IsReal((pxrInternal__aapl__pxrReserved__::JsValue *)a2))
      {
        if (!pxrInternal__aapl__pxrReserved__::JsValue::IsInt((pxrInternal__aapl__pxrReserved__::JsValue *)a2))
        {
          this = pxrInternal__aapl__pxrReserved__::JsValue::IsNull((pxrInternal__aapl__pxrReserved__::JsValue *)a2);
          if (!this) {
            return this;
          }
          unsigned int v16 = *(uint64_t (**)(void))(***(void ***)v4 + 16);
          return v16();
        }
        pxrInternal__aapl__pxrReserved__::JsValue::GetInt64((uint64_t **)a2);
        __int16 v21 = *(uint64_t (**)(void))(***(void ***)v4 + 48);
        return v21();
      }
      v28.n128_f64[0] = pxrInternal__aapl__pxrReserved__::JsValue::GetReal((uint64_t **)a2);
      uint64_t v29 = *(uint64_t (**)(__n128))(***(void ***)v4 + 64);
      return v29(v28);
    }
  }
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::JsWriter::BeginObject(pxrInternal__aapl__pxrReserved__::JsWriter *this)
{
  return (*(uint64_t (**)(void))(***(void ***)this + 80))();
}

uint64_t pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = **a1;
  uint64_t v3 = a2[1];
  if (*((char *)a2 + 23) >= 0)
  {
    uint64_t v4 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = (uint64_t *)*a2;
    uint64_t v4 = v3;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v2 + 88))(v2, a2, v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::JsWriter::EndObject(pxrInternal__aapl__pxrReserved__::JsWriter *this)
{
  return (*(uint64_t (**)(void))(***(void ***)this + 96))();
}

uint64_t pxrInternal__aapl__pxrReserved__::JsWriter::BeginArray(pxrInternal__aapl__pxrReserved__::JsWriter *this)
{
  return (*(uint64_t (**)(void))(***(void ***)this + 104))();
}

uint64_t pxrInternal__aapl__pxrReserved__::JsWriter::EndArray(pxrInternal__aapl__pxrReserved__::JsWriter *this)
{
  return (*(uint64_t (**)(void))(***(void ***)this + 112))();
}

uint64_t pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue(pxrInternal__aapl__pxrReserved__::JsWriter *this)
{
  return (*(uint64_t (**)(void))(***(void ***)this + 56))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)this + 24))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)this + 48))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)this + 32))();
}

{
  return (*(uint64_t (**)(void))(***(void ***)this + 40))();
}

uint64_t pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = **a1;
  uint64_t v3 = a2[1];
  if (*((char *)a2 + 23) >= 0)
  {
    uint64_t v4 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = (uint64_t *)*a2;
    uint64_t v4 = v3;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v2 + 72))(v2, a2, v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue(pxrInternal__aapl__pxrReserved__::JsWriter *this, double a2)
{
  return (*(uint64_t (**)(double))(***(void ***)this + 64))(a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue(uint64_t a1)
{
  return (*(uint64_t (**)(void))(***(void ***)a1 + 16))();
}

void *pxrInternal__aapl__pxrReserved__::JsWriter::JsWriter(void *a1, uint64_t a2, int a3)
{
  double v6 = operator new(0x10uLL);
  sub_2168B3CF0(v6, a2, a3);
  *a1 = v6;
  return a1;
}

void sub_2168B3A84(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::JsWriter::~JsWriter(uint64_t **this)
{
  uint64_t v1 = *this;
  *this = 0;
  if (v1) {
    sub_2168BA32C((int)this, v1);
  }
}

{
  uint64_t *v1;

  uint64_t v1 = *this;
  *this = 0;
  if (v1) {
    sub_2168BA32C((int)this, v1);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue(uint64_t **this, const char *__s)
{
  uint64_t v3 = **this;
  size_t v4 = strlen(__s);
  uint64_t v5 = *(uint64_t (**)(uint64_t, const char *, size_t))(*(void *)v3 + 72);

  return v5(v3, __s, v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey(uint64_t **this, const char *__s)
{
  uint64_t v3 = **this;
  size_t v4 = strlen(__s);
  uint64_t v5 = *(uint64_t (**)(uint64_t, const char *, size_t))(*(void *)v3 + 88);

  return v5(v3, __s, v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::JsWriter::_Key(pxrInternal__aapl__pxrReserved__::JsWriter *this, const char *a2)
{
  return (*(uint64_t (**)(void, const char *))(***(void ***)this + 88))(**(void **)this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::JsWriter::_String(pxrInternal__aapl__pxrReserved__::JsWriter *this, const char *a2)
{
  return (*(uint64_t (**)(void, const char *))(***(void ***)this + 72))(**(void **)this, a2);
}

BOOL sub_2168B3C94(_DWORD *a1)
{
  return *a1 != 0;
}

void sub_2168B3CA4(uint64_t a1)
{
  free(*(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    operator delete(v2);
  }
}

void *sub_2168B3CF0(void *a1, uint64_t a2, int a3)
{
  *a1 = 0;
  a1[1] = a2;
  size_t v4 = a1 + 1;
  if (a3 == 1)
  {
    uint64_t v5 = operator new(0x50uLL);
    v5[1] = v4;
    *((_OWORD *)v5 + 1) = 0u;
    *((_OWORD *)v5 + 2) = 0u;
    v5[6] = 0;
    v5[7] = 512;
    *((_DWORD *)v5 + 16) = 324;
    *((_WORD *)v5 + 34) = 0x2000;
    v5[9] = 4;
    double v6 = &unk_26C74C8B8;
    goto LABEL_5;
  }
  if (!a3)
  {
    uint64_t v5 = operator new(0x48uLL);
    v5[1] = v4;
    *((_OWORD *)v5 + 1) = 0u;
    *((_OWORD *)v5 + 2) = 0u;
    v5[6] = 0;
    v5[7] = 512;
    *((_DWORD *)v5 + 16) = 324;
    *((unsigned char *)v5 + 68) = 0;
    double v6 = &unk_26C74C7C0;
LABEL_5:
    *uint64_t v5 = v6;
    *a1 = v5;
  }
  return a1;
}

void sub_2168B3DC8(_Unwind_Exception *a1)
{
  void *v1 = 0;
  _Unwind_Resume(a1);
}

uint64_t sub_2168B3DD4(uint64_t a1)
{
  return a1;
}

void sub_2168B3E00(void *a1)
{
  sub_2168B3CA4((uint64_t)a1 + 16);

  operator delete(a1);
}

uint64_t sub_2168B3E3C(uint64_t a1)
{
  return sub_2168B3F2C(a1 + 8);
}

uint64_t sub_2168B3E44(uint64_t a1, int a2)
{
  return sub_2168B4054(a1 + 8, a2);
}

uint64_t sub_2168B3E4C(uint64_t a1, unsigned int a2)
{
  return sub_2168B4148(a1 + 8, a2);
}

uint64_t sub_2168B3E54(uint64_t a1, unsigned int a2)
{
  return sub_2168B4520(a1 + 8, a2);
}

uint64_t sub_2168B3E5C(uint64_t a1, unint64_t a2)
{
  return sub_2168B4618(a1 + 8, a2);
}

uint64_t sub_2168B3E64(uint64_t a1, unint64_t a2)
{
  return sub_2168B4D50(a1 + 8, a2);
}

uint64_t sub_2168B3E6C(uint64_t a1, double a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  uint64_t v2 = a1 + 8;
  pxrInternal__aapl__pxrReserved__::TfDoubleToString((pxrInternal__aapl__pxrReserved__ *)__s, a2, (char *)0x20, 1);
  size_t v3 = strlen(__s);
  return sub_2168B4E48(v2, (uint64_t)__s, v3);
}

uint64_t sub_2168B3EEC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return sub_2168B4EC4(a1 + 8, a2, a3);
}

uint64_t sub_2168B3EF8(uint64_t a1)
{
  return sub_2168B5044((void *)(a1 + 8));
}

uint64_t sub_2168B3F00(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return sub_2168B4EC4(a1 + 8, a2, a3);
}

uint64_t sub_2168B3F0C(uint64_t a1)
{
  return sub_2168B5198(a1 + 8);
}

uint64_t sub_2168B3F18(uint64_t a1)
{
  return sub_2168B51F4((void *)(a1 + 8));
}

uint64_t sub_2168B3F20(uint64_t a1)
{
  return sub_2168B5268(a1 + 8);
}

uint64_t sub_2168B3F2C(uint64_t a1)
{
  sub_2168B3F80(a1);
  uint64_t v2 = sub_2168B3FF0();
  if (*(void *)(a1 + 32) == *(void *)(a1 + 24)) {
    std::ostream::flush();
  }
  return v2;
}

uint64_t sub_2168B3F80(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (v1 == *(void *)(result + 24))
  {
    *(unsigned char *)(result + 60) = 1;
  }
  else
  {
    if (*(void *)(v1 - 16)) {
      uint64_t result = std::ostream::put();
    }
    ++*(void *)(v1 - 16);
  }
  return result;
}

uint64_t sub_2168B3FF0()
{
  return 1;
}

uint64_t sub_2168B4054(uint64_t a1, int a2)
{
  sub_2168B3F80(a1);
  uint64_t v4 = sub_2168B40B8(a1, a2);
  if (*(void *)(a1 + 32) == *(void *)(a1 + 24)) {
    std::ostream::flush();
  }
  return v4;
}

uint64_t sub_2168B40B8(uint64_t a1, int a2)
{
  if (!a2) {
    std::ostream::put();
  }
  std::ostream::put();
  std::ostream::put();
  std::ostream::put();
  std::ostream::put();
  return 1;
}

uint64_t sub_2168B4148(uint64_t a1, unsigned int a2)
{
  sub_2168B3F80(a1);
  uint64_t v4 = sub_2168B41A4(a1, a2);
  if (*(void *)(a1 + 32) == *(void *)(a1 + 24)) {
    std::ostream::flush();
  }
  return v4;
}

uint64_t sub_2168B41A4(uint64_t a1, unsigned int a2)
{
  unsigned int v2 = a2;
  *(void *)&v9[10] = *MEMORY[0x263EF8340];
  if ((a2 & 0x80000000) != 0)
  {
    size_t v3 = v9;
    char v8 = 45;
    unsigned int v2 = -v2;
  }
  else
  {
    size_t v3 = &v8;
  }
  uint64_t v4 = sub_2168B4258(v2, v3);
  if (&v8 != v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = &v8;
    do
    {
      ++v6;
      std::ostream::put();
    }
    while (v6 != v5);
  }
  return 1;
}

unsigned char *sub_2168B4258(unsigned int a1, unsigned char *a2)
{
  if (a1 >> 4 <= 0x270)
  {
    if (a1 < 0x3E8)
    {
      if (a1 < 0x64)
      {
        if (a1 < 0xA) {
          goto LABEL_10;
        }
        goto LABEL_9;
      }
    }
    else
    {
      *a2++ = a00010203040506[2 * ((unsigned __int16)a1 / 0x64u)];
    }
    *a2++ = a00010203040506[(2 * ((unsigned __int16)a1 / 0x64u)) | 1];
LABEL_9:
    *a2++ = a00010203040506[2 * ((unsigned __int16)a1 % 0x64u)];
LABEL_10:
    *a2 = a00010203040506[(unsigned __int16)(2 * ((unsigned __int16)a1 % 0x64u)) | 1];
    return a2 + 1;
  }
  if (a1 < 0x5F5E100)
  {
    unint64_t v2 = (a1 / 0x7A120uLL) & 0x3FFE;
    if (a1 < 0x989680)
    {
      if (a1 <= 0xF423F)
      {
        if (a1 >> 5 < 0xC35) {
          goto LABEL_16;
        }
        goto LABEL_15;
      }
    }
    else
    {
      *a2++ = a00010203040506[v2];
    }
    *a2++ = a00010203040506[v2 | 1];
LABEL_15:
    *a2++ = a00010203040506[2 * ((unsigned __int16)(a1 / 0x2710) % 0x64u)];
LABEL_16:
    *a2 = a00010203040506[(unsigned __int16)(2 * ((unsigned __int16)(a1 / 0x2710) % 0x64u)) | 1];
    a2[1] = a00010203040506[2 * (a1 % 0x2710 / 0x64)];
    a2[2] = a00010203040506[(2 * (a1 % 0x2710 / 0x64)) | 1];
    a2[3] = a00010203040506[2 * (a1 % 0x2710 % 0x64)];
    a2[4] = a00010203040506[(unsigned __int16)(2 * (a1 % 0x2710 % 0x64)) | 1];
    return a2 + 5;
  }
  unsigned int v4 = a1 % 0x5F5E100;
  if (a1 < 0x3B9ACA00)
  {
    *a2 = a1 / 0x5F5E100 + 48;
    uint64_t v5 = a2 + 1;
  }
  else
  {
    *a2 = a00010203040506[2 * (a1 / 0x5F5E100)];
    uint64_t v5 = a2 + 2;
    a2[1] = a00010203040506[2 * (a1 / 0x5F5E100) + 1];
  }
  *(_WORD *)uint64_t v5 = *(_WORD *)&a00010203040506[(v4 / 0x7A120uLL) & 0x3FFE];
  *((_WORD *)v5 + 1) = *(_WORD *)&a00010203040506[2 * ((unsigned __int16)(v4 / 0x2710) % 0x64u)];
  *((_WORD *)v5 + 2) = *(_WORD *)&a00010203040506[2 * (v4 % 0x2710 / 0x64)];
  v5[6] = a00010203040506[2 * (v4 % 0x2710 % 0x64)];
  size_t v3 = v5 + 8;
  v5[7] = a00010203040506[(unsigned __int16)(2 * (v4 % 0x2710 % 0x64)) + 1];
  return v3;
}

uint64_t sub_2168B4520(uint64_t a1, unsigned int a2)
{
  sub_2168B3F80(a1);
  uint64_t v4 = sub_2168B457C(a1, a2);
  if (*(void *)(a1 + 32) == *(void *)(a1 + 24)) {
    std::ostream::flush();
  }
  return v4;
}

uint64_t sub_2168B457C(uint64_t a1, unsigned int a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  unint64_t v2 = sub_2168B4258(a2, v6);
  if (v6 != v2)
  {
    size_t v3 = v2;
    uint64_t v4 = v6;
    do
    {
      ++v4;
      std::ostream::put();
    }
    while (v4 != v3);
  }
  return 1;
}

uint64_t sub_2168B4618(uint64_t a1, unint64_t a2)
{
  sub_2168B3F80(a1);
  uint64_t v4 = sub_2168B4674(a1, a2);
  if (*(void *)(a1 + 32) == *(void *)(a1 + 24)) {
    std::ostream::flush();
  }
  return v4;
}

uint64_t sub_2168B4674(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  *(void *)&v9[20] = *MEMORY[0x263EF8340];
  if ((a2 & 0x8000000000000000) != 0)
  {
    size_t v3 = v9;
    char v8 = 45;
    unint64_t v2 = -(uint64_t)v2;
  }
  else
  {
    size_t v3 = &v8;
  }
  uint64_t v4 = sub_2168B4728(v2, v3);
  if (&v8 != v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = &v8;
    do
    {
      ++v6;
      std::ostream::put();
    }
    while (v6 != v5);
  }
  return 1;
}

unsigned char *sub_2168B4728(unint64_t a1, unsigned char *a2)
{
  if (a1 < 0x5F5E100)
  {
    if (a1 >> 4 <= 0x270)
    {
      if (a1 < 0x3E8)
      {
        if (a1 < 0x64)
        {
          if (a1 < 0xA) {
            goto LABEL_15;
          }
          goto LABEL_14;
        }
      }
      else
      {
        *a2++ = a00010203040506[2 * ((unsigned __int16)a1 / 0x64u)];
      }
      *a2++ = a00010203040506[(2 * ((unsigned __int16)a1 / 0x64u)) | 1];
LABEL_14:
      *a2++ = a00010203040506[2 * ((unsigned __int16)a1 % 0x64u)];
LABEL_15:
      *a2 = a00010203040506[(unsigned __int16)(2 * ((unsigned __int16)a1 % 0x64u)) | 1];
      return a2 + 1;
    }
    unint64_t v8 = (a1 / 0x7A120uLL) & 0x3FFE;
    if (a1 < 0x989680)
    {
      if (a1 < 0xF4240)
      {
        if (a1 >> 5 < 0xC35) {
          goto LABEL_27;
        }
        goto LABEL_26;
      }
    }
    else
    {
      *a2++ = a00010203040506[v8];
    }
    *a2++ = a00010203040506[v8 | 1];
LABEL_26:
    *a2++ = a00010203040506[2 * ((unsigned __int16)(a1 / 0x2710) % 0x64u)];
LABEL_27:
    *a2 = a00010203040506[(unsigned __int16)(2 * ((unsigned __int16)(a1 / 0x2710) % 0x64u)) | 1];
    a2[1] = a00010203040506[2 * (a1 % 0x2710 / 0x64)];
    a2[2] = a00010203040506[(2 * (a1 % 0x2710 / 0x64)) | 1];
    a2[3] = a00010203040506[2 * (a1 % 0x2710 % 0x64)];
    a2[4] = a00010203040506[(unsigned __int16)(2 * (a1 % 0x2710 % 0x64)) | 1];
    return a2 + 5;
  }
  if (a1 < 0x2386F26FC10000)
  {
    unsigned int v2 = a1 % 0x5F5E100;
    unsigned int v3 = a1 / 0x5F5E100;
    unint64_t v4 = (v3 / 0x7A120uLL) & 0x3FFE;
    unsigned int v5 = v2 / 0x2710;
    unsigned int v6 = v2 % 0x2710;
    unint64_t v7 = (v2 / 0x7A120uLL) & 0x3FFE;
    if (a1 < 0x38D7EA4C68000)
    {
      if (a1 < 0x5AF3107A4000)
      {
        if (a1 < 0x9184E72A000)
        {
          if (a1 < 0xE8D4A51000)
          {
            if (a1 < 0x174876E800)
            {
              if (a1 < 0x2540BE400)
              {
                if (a1 < 0x3B9ACA00) {
                  goto LABEL_23;
                }
                goto LABEL_22;
              }
LABEL_21:
              *a2++ = a00010203040506[(2 * (v3 % 0x2710 / 0x64)) | 1];
LABEL_22:
              *a2++ = a00010203040506[2 * (v3 % 0x2710 % 0x64)];
LABEL_23:
              *a2 = a00010203040506[(unsigned __int16)(2 * (v3 % 0x2710 % 0x64)) | 1];
              a2[1] = a00010203040506[v7];
              a2[2] = a00010203040506[v7 | 1];
              a2[3] = a00010203040506[2 * ((unsigned __int16)v5 % 0x64u)];
              a2[4] = a00010203040506[(unsigned __int16)(2 * ((unsigned __int16)v5 % 0x64u)) | 1];
              a2[5] = a00010203040506[2 * ((unsigned __int16)v6 / 0x64u)];
              a2[6] = a00010203040506[(2 * ((unsigned __int16)v6 / 0x64u)) | 1];
              a2[7] = a00010203040506[2 * ((unsigned __int16)v6 % 0x64u)];
              a2[8] = a00010203040506[(unsigned __int16)(2 * ((unsigned __int16)v6 % 0x64u)) | 1];
              return a2 + 9;
            }
LABEL_20:
            *a2++ = a00010203040506[2 * (v3 % 0x2710 / 0x64)];
            goto LABEL_21;
          }
LABEL_19:
          *a2++ = a00010203040506[(unsigned __int16)(2 * ((unsigned __int16)(v3 / 0x2710) % 0x64u)) | 1];
          goto LABEL_20;
        }
LABEL_18:
        *a2++ = a00010203040506[2 * ((unsigned __int16)(v3 / 0x2710) % 0x64u)];
        goto LABEL_19;
      }
    }
    else
    {
      *a2++ = a00010203040506[v4];
    }
    *a2++ = a00010203040506[v4 | 1];
    goto LABEL_18;
  }
  unint64_t v9 = a1 / 0x2386F26FC10000;
  unint64_t v10 = a1 % 0x2386F26FC10000;
  if ((a1 / 0x2386F26FC10000) > 9)
  {
    if (v9 > 0x63)
    {
      unsigned int v13 = (unsigned __int16)v9 / 0x64u;
      if (v9 > 0x3E7)
      {
        uint64_t v14 = 2 * ((unsigned __int16)v9 % 0x64u);
        *(_WORD *)a2 = *(_WORD *)&a00010203040506[2 * v13];
        a2[2] = a00010203040506[v14];
        char v15 = a00010203040506[(v14 & 0xFFFE) + 1];
        uint64_t v11 = a2 + 4;
        a2[3] = v15;
      }
      else
      {
        *a2 = v13 + 48;
        *(_WORD *)(a2 + 1) = *(_WORD *)&a00010203040506[2 * ((unsigned __int16)v9 % 0x64u)];
        uint64_t v11 = a2 + 3;
      }
    }
    else
    {
      *a2 = a00010203040506[2 * (a1 / 0x2386F26FC10000)];
      uint64_t v11 = a2 + 2;
      a2[1] = a00010203040506[2 * (a1 / 0x2386F26FC10000) + 1];
    }
  }
  else
  {
    *a2 = v9 + 48;
    uint64_t v11 = a2 + 1;
  }
  unsigned int v16 = v10 / 0x5F5E100;
  unsigned int v17 = v10 % 0x5F5E100;
  *(_WORD *)uint64_t v11 = *(_WORD *)&a00010203040506[(v16 / 0x7A120uLL) & 0x3FFE];
  *((_WORD *)v11 + 1) = *(_WORD *)&a00010203040506[2 * ((unsigned __int16)(v16 / 0x2710) % 0x64u)];
  *((_WORD *)v11 + 2) = *(_WORD *)&a00010203040506[2 * (v16 % 0x2710 / 0x64)];
  v11[6] = a00010203040506[2 * (v16 % 0x2710 % 0x64)];
  v11[7] = a00010203040506[(unsigned __int16)(2 * (v16 % 0x2710 % 0x64)) + 1];
  *((_WORD *)v11 + 4) = *(_WORD *)&a00010203040506[(v17 / 0x7A120uLL) & 0x3FFE];
  *((_WORD *)v11 + 5) = *(_WORD *)&a00010203040506[2 * ((unsigned __int16)(v17 / 0x2710) % 0x64u)];
  *((_WORD *)v11 + 6) = *(_WORD *)&a00010203040506[2 * (v17 % 0x2710 / 0x64)];
  v11[14] = a00010203040506[2 * (v17 % 0x2710 % 0x64)];
  uint64_t v12 = v11 + 16;
  v11[15] = a00010203040506[(unsigned __int16)(2 * (v17 % 0x2710 % 0x64)) + 1];
  return v12;
}

uint64_t sub_2168B4D50(uint64_t a1, unint64_t a2)
{
  sub_2168B3F80(a1);
  uint64_t v4 = sub_2168B4DAC(a1, a2);
  if (*(void *)(a1 + 32) == *(void *)(a1 + 24)) {
    std::ostream::flush();
  }
  return v4;
}

uint64_t sub_2168B4DAC(uint64_t a1, unint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  unsigned int v2 = sub_2168B4728(a2, v6);
  if (v6 != v2)
  {
    unsigned int v3 = v2;
    uint64_t v4 = v6;
    do
    {
      ++v4;
      std::ostream::put();
    }
    while (v4 != v3);
  }
  return 1;
}

uint64_t sub_2168B4E48(uint64_t a1, uint64_t a2, unint64_t a3)
{
  sub_2168B3F80(a1);
  if (a3)
  {
    unint64_t v5 = 0;
    do
    {
      std::ostream::put();
      ++v5;
    }
    while (v5 < a3);
  }
  if (*(void *)(a1 + 32) == *(void *)(a1 + 24)) {
    std::ostream::flush();
  }
  return 1;
}

uint64_t sub_2168B4EC4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  sub_2168B3F80(a1);
  uint64_t v6 = sub_2168B4F30(a1, a2, a3);
  if (*(void *)(a1 + 32) == *(void *)(a1 + 24)) {
    std::ostream::flush();
  }
  return v6;
}

uint64_t sub_2168B4F30(uint64_t a1, uint64_t a2, unsigned int a3)
{
  std::ostream::put();
  if (a3)
  {
    for (unint64_t i = 0; i < a3; ++i)
    {
      int v6 = a00010203040506[*(unsigned __int8 *)(a2 + i) + 216];
      if (a00010203040506[*(unsigned __int8 *)(a2 + i) + 216])
      {
        std::ostream::put();
        std::ostream::put();
        if (v6 != 117) {
          continue;
        }
        std::ostream::put();
        std::ostream::put();
        std::ostream::put();
      }
      std::ostream::put();
    }
  }
  std::ostream::put();
  return 1;
}

uint64_t sub_2168B5044(void *a1)
{
  sub_2168B3F80((uint64_t)a1);
  uint64_t v2 = a1[4];
  if (a1[5] - v2 <= 15)
  {
    sub_2168B50B4(a1 + 1, 1);
    uint64_t v2 = a1[4];
  }
  a1[4] = v2 + 16;
  *(void *)uint64_t v2 = 0;
  *(unsigned char *)(v2 + 8) = 0;
  std::ostream::put();
  return 1;
}

char *sub_2168B50B4(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  if (v4)
  {
    unint64_t v5 = a1[4] - v4 + ((unint64_t)(a1[4] - v4 + 1) >> 1);
  }
  else
  {
    if (!*a1)
    {
      int v6 = operator new(1uLL);
      *a1 = v6;
      a1[1] = v6;
    }
    uint64_t v4 = 0;
    unint64_t v5 = a1[5];
  }
  unint64_t v7 = a1[3] - v4 + 16 * a2;
  if (v5 <= v7) {
    size_t v8 = v7;
  }
  else {
    size_t v8 = v5;
  }

  return sub_2168B5138(a1, v8);
}

char *sub_2168B5138(void *a1, size_t __size)
{
  uint64_t v4 = (void *)a1[2];
  uint64_t v5 = a1[3];
  if (__size)
  {
    uint64_t result = (char *)realloc(v4, __size);
  }
  else
  {
    free(v4);
    uint64_t result = 0;
  }
  a1[2] = result;
  a1[3] = &result[v5 - (void)v4];
  a1[4] = &result[__size];
  return result;
}

uint64_t sub_2168B5198(uint64_t a1)
{
  *(void *)(a1 + 32) -= 16;
  std::ostream::put();
  if (*(void *)(a1 + 32) == *(void *)(a1 + 24)) {
    std::ostream::flush();
  }
  return 1;
}

uint64_t sub_2168B51F4(void *a1)
{
  sub_2168B3F80((uint64_t)a1);
  uint64_t v2 = a1[4];
  if (a1[5] - v2 <= 15)
  {
    sub_2168B50B4(a1 + 1, 1);
    uint64_t v2 = a1[4];
  }
  a1[4] = v2 + 16;
  *(void *)uint64_t v2 = 0;
  *(unsigned char *)(v2 + 8) = 1;
  std::ostream::put();
  return 1;
}

uint64_t sub_2168B5268(uint64_t a1)
{
  *(void *)(a1 + 32) -= 16;
  std::ostream::put();
  if (*(void *)(a1 + 32) == *(void *)(a1 + 24)) {
    std::ostream::flush();
  }
  return 1;
}

uint64_t sub_2168B52C4(uint64_t a1)
{
  return a1;
}

void sub_2168B52F0(void *a1)
{
  sub_2168B3CA4((uint64_t)a1 + 16);

  operator delete(a1);
}

uint64_t sub_2168B532C(uint64_t a1)
{
  return sub_2168B53A4(a1 + 8);
}

uint64_t sub_2168B5334(uint64_t a1, int a2)
{
  return sub_2168B5540(a1 + 8, a2);
}

uint64_t sub_2168B533C(uint64_t a1, unsigned int a2)
{
  return sub_2168B55A4(a1 + 8, a2);
}

uint64_t sub_2168B5344(uint64_t a1, unsigned int a2)
{
  return sub_2168B5600(a1 + 8, a2);
}

uint64_t sub_2168B534C(uint64_t a1, unint64_t a2)
{
  return sub_2168B565C(a1 + 8, a2);
}

uint64_t sub_2168B5354(uint64_t a1, unint64_t a2)
{
  return sub_2168B56B8(a1 + 8, a2);
}

uint64_t sub_2168B535C(uint64_t a1, double a2)
{
  return sub_2168B5714(a1 + 8, a2);
}

uint64_t sub_2168B5364(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return sub_2168B5810(a1 + 8, a2, a3);
}

uint64_t sub_2168B5370(uint64_t a1)
{
  return sub_2168B587C((void *)(a1 + 8));
}

uint64_t sub_2168B5378(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return sub_2168B5810(a1 + 8, a2, a3);
}

uint64_t sub_2168B5384(uint64_t a1)
{
  return sub_2168B58EC(a1 + 8);
}

uint64_t sub_2168B5390(uint64_t a1)
{
  return sub_2168B597C((void *)(a1 + 8));
}

uint64_t sub_2168B5398(uint64_t a1)
{
  return sub_2168B59F0(a1 + 8);
}

uint64_t sub_2168B53A4(uint64_t a1)
{
  sub_2168B53F8(a1);
  uint64_t v2 = sub_2168B3FF0();
  if (*(void *)(a1 + 32) == *(void *)(a1 + 24)) {
    std::ostream::flush();
  }
  return v2;
}

uint64_t sub_2168B53F8(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 32);
  if (v2 == *(void *)(result + 24))
  {
    *(unsigned char *)(result + 60) = 1;
    return result;
  }
  uint64_t v3 = *(void *)(v2 - 16);
  if (*(unsigned char *)(v2 - 8))
  {
    if (v3)
    {
      uint64_t result = std::ostream::put();
      if (*(unsigned char *)(v1 + 68)) {
        uint64_t result = std::ostream::put();
      }
    }
    if (*(unsigned char *)(v1 + 68)) {
      goto LABEL_13;
    }
    std::ostream::put();
  }
  else
  {
    if (v3) {
      std::ostream::put();
    }
    uint64_t result = std::ostream::put();
    if (*(unsigned char *)(v2 - 16)) {
      goto LABEL_13;
    }
  }
  uint64_t result = sub_2168B54E4(v1);
LABEL_13:
  ++*(void *)(v2 - 16);
  return result;
}

uint64_t sub_2168B54E4(uint64_t result)
{
  for (uint64_t i = ((*(void *)(result + 32) - *(void *)(result + 24)) >> 4) * *(unsigned int *)(result + 64); i; --i)
    uint64_t result = std::ostream::put();
  return result;
}

uint64_t sub_2168B5540(uint64_t a1, int a2)
{
  sub_2168B53F8(a1);
  uint64_t v4 = sub_2168B40B8(a1, a2);
  if (*(void *)(a1 + 32) == *(void *)(a1 + 24)) {
    std::ostream::flush();
  }
  return v4;
}

uint64_t sub_2168B55A4(uint64_t a1, unsigned int a2)
{
  sub_2168B53F8(a1);
  uint64_t v4 = sub_2168B41A4(a1, a2);
  if (*(void *)(a1 + 32) == *(void *)(a1 + 24)) {
    std::ostream::flush();
  }
  return v4;
}

uint64_t sub_2168B5600(uint64_t a1, unsigned int a2)
{
  sub_2168B53F8(a1);
  uint64_t v4 = sub_2168B457C(a1, a2);
  if (*(void *)(a1 + 32) == *(void *)(a1 + 24)) {
    std::ostream::flush();
  }
  return v4;
}

uint64_t sub_2168B565C(uint64_t a1, unint64_t a2)
{
  sub_2168B53F8(a1);
  uint64_t v4 = sub_2168B4674(a1, a2);
  if (*(void *)(a1 + 32) == *(void *)(a1 + 24)) {
    std::ostream::flush();
  }
  return v4;
}

uint64_t sub_2168B56B8(uint64_t a1, unint64_t a2)
{
  sub_2168B53F8(a1);
  uint64_t v4 = sub_2168B4DAC(a1, a2);
  if (*(void *)(a1 + 32) == *(void *)(a1 + 24)) {
    std::ostream::flush();
  }
  return v4;
}

uint64_t sub_2168B5714(uint64_t a1, double a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::TfDoubleToString((pxrInternal__aapl__pxrReserved__ *)__s, a2, (char *)0x20, 1);
  size_t v3 = strlen(__s);
  return sub_2168B5794(a1, (uint64_t)__s, v3);
}

uint64_t sub_2168B5794(uint64_t a1, uint64_t a2, unint64_t a3)
{
  sub_2168B53F8(a1);
  if (a3)
  {
    unint64_t v5 = 0;
    do
    {
      std::ostream::put();
      ++v5;
    }
    while (v5 < a3);
  }
  if (*(void *)(a1 + 32) == *(void *)(a1 + 24)) {
    std::ostream::flush();
  }
  return 1;
}

uint64_t sub_2168B5810(uint64_t a1, uint64_t a2, unsigned int a3)
{
  sub_2168B53F8(a1);
  uint64_t v6 = sub_2168B4F30(a1, a2, a3);
  if (*(void *)(a1 + 32) == *(void *)(a1 + 24)) {
    std::ostream::flush();
  }
  return v6;
}

uint64_t sub_2168B587C(void *a1)
{
  sub_2168B53F8((uint64_t)a1);
  uint64_t v2 = a1[4];
  if (a1[5] - v2 <= 15)
  {
    sub_2168B50B4(a1 + 1, 1);
    uint64_t v2 = a1[4];
  }
  a1[4] = v2 + 16;
  *(void *)uint64_t v2 = 0;
  *(unsigned char *)(v2 + 8) = 0;
  std::ostream::put();
  return 1;
}

uint64_t sub_2168B58EC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(v2 - 16);
  *(void *)(a1 + 32) = v2 - 16;
  if (v3)
  {
    std::ostream::put();
    sub_2168B54E4(a1);
  }
  std::ostream::put();
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4 == v5)
  {
    std::ostream::flush();
    uint64_t v5 = *(void *)(a1 + 24);
    uint64_t v4 = *(void *)(a1 + 32);
  }
  if (v4 == v5) {
    std::ostream::flush();
  }
  return 1;
}

uint64_t sub_2168B597C(void *a1)
{
  sub_2168B53F8((uint64_t)a1);
  uint64_t v2 = a1[4];
  if (a1[5] - v2 <= 15)
  {
    sub_2168B50B4(a1 + 1, 1);
    uint64_t v2 = a1[4];
  }
  a1[4] = v2 + 16;
  *(void *)uint64_t v2 = 0;
  *(unsigned char *)(v2 + 8) = 1;
  std::ostream::put();
  return 1;
}

uint64_t sub_2168B59F0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(v2 - 16);
  *(void *)(a1 + 32) = v2 - 16;
  if (v3 && (*(unsigned char *)(a1 + 68) & 1) == 0)
  {
    std::ostream::put();
    sub_2168B54E4(a1);
  }
  std::ostream::put();
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4 == v5)
  {
    std::ostream::flush();
    uint64_t v5 = *(void *)(a1 + 24);
    uint64_t v4 = *(void *)(a1 + 32);
  }
  if (v4 == v5) {
    std::ostream::flush();
  }
  return 1;
}

BOOL sub_2168B5A88(std::string *a1, void *a2, void *a3)
{
  uint64_t v11 = a3;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = 0;
  while (1)
  {
    if (a2)
    {
      if (a2[3] == a2[4])
      {
        int v6 = (*(uint64_t (**)(void *))(*a2 + 72))(a2);
        int v5 = v6 == -1;
        if (v6 == -1) {
          a2 = 0;
        }
      }
      else
      {
        int v5 = 0;
      }
    }
    else
    {
      int v5 = 1;
    }
    BOOL result = sub_2168B5BE8(&v11);
    if (v5 == result) {
      break;
    }
    size_t v8 = (std::string::value_type *)a2[3];
    if (v8 == (std::string::value_type *)a2[4]) {
      std::string::value_type v9 = (*(uint64_t (**)(void *))(*a2 + 72))(a2);
    }
    else {
      std::string::value_type v9 = *v8;
    }
    std::string::push_back(a1, v9);
    uint64_t v10 = a2[3];
    if (v10 == a2[4]) {
      (*(void (**)(void *))(*a2 + 80))(a2);
    }
    else {
      a2[3] = v10 + 1;
    }
  }
  return result;
}

void sub_2168B5BB8(void *a1)
{
  __cxa_begin_catch(a1);
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  __cxa_rethrow();
}

void sub_2168B5BD4(_Unwind_Exception *a1)
{
}

BOOL sub_2168B5BE8(void **a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (v2[3] != v2[4]) {
      return 0;
    }
    if ((*(unsigned int (**)(void *))(*v2 + 72))(v2) != -1) {
      return *a1 == 0;
    }
    *a1 = 0;
  }
  return 1;
}

void sub_2168B5C68(uint64_t a1, char **a2, uint64_t a3, __n128 a4)
{
  unint64_t v7 = *a2;
  int v8 = **a2;
  if (v8 > 109)
  {
    switch(v8)
    {
      case '{':
        uint64_t v12 = v7 + 1;
        *a2 = v12;
        while (1)
        {
          unsigned int v13 = *v12;
          BOOL v14 = v13 > 0x20;
          uint64_t v15 = (1 << v13) & 0x100002600;
          if (v14 || v15 == 0) {
            break;
          }
          ++v12;
        }
        *a2 = v12;
        if (!*(_DWORD *)(a1 + 48))
        {
          int v17 = *v12;
          if (v17 == 125)
          {
            *a2 = v12 + 1;
            uint64_t v18 = (uint64_t *)a3;
            unsigned int v19 = 0;
LABEL_31:
            sub_2168B7C48(v18, v19);
          }
          else
          {
            if (v17 != 34)
            {
LABEL_179:
              int64_t v62 = v12 - a2[1];
              int v63 = 4;
              goto LABEL_139;
            }
            unsigned int v67 = 0;
            while (1)
            {
              v68.n128_f64[0] = sub_2168B6F48(a1, a2, (uint64_t *)a3, 1);
              if (*(_DWORD *)(a1 + 48)) {
                break;
              }
              unsigned __int16 v69 = *a2;
              for (uint64_t i = *a2; ; ++i)
              {
                unsigned int v71 = *i;
                BOOL v14 = v71 > 0x20;
                uint64_t v72 = (1 << v71) & 0x100002600;
                if (v14 || v72 == 0) {
                  break;
                }
                ++v69;
              }
              *a2 = i;
              if (*i != 58)
              {
                int64_t v62 = v69 - a2[1];
                int v63 = 5;
                goto LABEL_139;
              }
              int v74 = i + 1;
              *a2 = i + 1;
              while (1)
              {
                unsigned int v75 = *v74;
                BOOL v14 = v75 > 0x20;
                uint64_t v76 = (1 << v75) & 0x100002600;
                if (v14 || v76 == 0) {
                  break;
                }
                ++v74;
              }
              *a2 = v74;
              sub_2168B5C68(a1, a2, a3, v68);
              if (*(_DWORD *)(a1 + 48)) {
                return;
              }
              int v78 = *a2;
              for (double j = *a2; ; ++j)
              {
                unsigned int v80 = *j;
                BOOL v14 = v80 > 0x20;
                uint64_t v81 = (1 << v80) & 0x100002600;
                if (v14 || v81 == 0) {
                  break;
                }
                ++v78;
              }
              *a2 = j;
              ++v67;
              int v83 = *j;
              if (v83 != 44)
              {
                if (v83 == 125)
                {
                  *a2 = j + 1;
                  uint64_t v18 = (uint64_t *)a3;
                  unsigned int v19 = v67;
                  goto LABEL_31;
                }
                int64_t v62 = v78 - a2[1];
                int v63 = 6;
                goto LABEL_139;
              }
              uint64_t v12 = j + 1;
              *a2 = j + 1;
              while (1)
              {
                unsigned int v84 = *v12;
                BOOL v14 = v84 > 0x20;
                uint64_t v85 = (1 << v84) & 0x100002600;
                if (v14 || v85 == 0) {
                  break;
                }
                ++v12;
              }
              *a2 = v12;
              if (*v12 != 34) {
                goto LABEL_179;
              }
            }
          }
        }
        break;
      case 't':
        std::string::value_type v9 = v7 + 1;
        *a2 = v7 + 1;
        if (v7[1] == 114)
        {
          std::string::value_type v9 = v7 + 2;
          *a2 = v7 + 2;
          if (v7[2] == 117)
          {
            std::string::value_type v9 = v7 + 3;
            *a2 = v7 + 3;
            if (v7[3] == 101)
            {
              *a2 = v7 + 4;
              uint64_t v10 = (void *)a3;
              char v11 = 1;
              goto LABEL_61;
            }
          }
        }
        goto LABEL_138;
      case 'n':
        std::string::value_type v9 = v7 + 1;
        *a2 = v7 + 1;
        if (v7[1] != 117 || (std::string::value_type v9 = v7 + 2, *a2 = v7 + 2, v7[2] != 108) || (std::string::value_type v9 = v7 + 3, *a2 = v7 + 3, v7[3] != 108))
        {
LABEL_138:
          int64_t v62 = v9 - a2[1];
          int v63 = 3;
LABEL_139:
          *(_DWORD *)(a1 + 48) = v63;
          *(void *)(a1 + 56) = v62;
          return;
        }
        *a2 = v7 + 4;
        sub_2168B728C((uint64_t *)(a3 + 24));
        break;
      default:
        goto LABEL_34;
    }
  }
  else
  {
    switch(v8)
    {
      case '""':
        sub_2168B6F48(a1, a2, (uint64_t *)a3, 0);
        break;
      case '[':
        int v37 = v7 + 1;
        *a2 = v37;
        while (1)
        {
          unsigned int v38 = *v37;
          BOOL v14 = v38 > 0x20;
          uint64_t v39 = (1 << v38) & 0x100002600;
          if (v14 || v39 == 0) {
            break;
          }
          ++v37;
        }
        *a2 = v37;
        if (!*(_DWORD *)(a1 + 48))
        {
          if (*v37 == 93)
          {
            *a2 = v37 + 1;
            uint64_t v41 = a3;
            unsigned int v42 = 0;
          }
          else
          {
            sub_2168B5C68(a1, a2, a3, a4);
            if (*(_DWORD *)(a1 + 48)) {
              return;
            }
            unsigned int v88 = 0;
            while (1)
            {
              BOOL v89 = *a2;
              for (k = *a2; ; ++k)
              {
                unsigned int v91 = *k;
                BOOL v14 = v91 > 0x20;
                uint64_t v92 = (1 << v91) & 0x100002600;
                if (v14 || v92 == 0) {
                  break;
                }
                ++v89;
              }
              ++v88;
              *a2 = k;
              int v94 = *k;
              if (v94 != 44) {
                break;
              }
              double v95 = k + 1;
              *a2 = k + 1;
              while (1)
              {
                unsigned int v96 = *v95;
                BOOL v14 = v96 > 0x20;
                uint64_t v97 = (1 << v96) & 0x100002600;
                if (v14 || v97 == 0) {
                  break;
                }
                ++v95;
              }
              *a2 = v95;
              sub_2168B5C68(a1, a2, a3, v87);
              if (*(_DWORD *)(a1 + 48)) {
                return;
              }
            }
            if (v94 != 93)
            {
              int64_t v62 = v89 - a2[1];
              int v63 = 7;
              goto LABEL_139;
            }
            *a2 = k + 1;
            uint64_t v41 = a3;
            unsigned int v42 = v88;
          }
          sub_2168B819C(v41, v42);
        }
        break;
      case 'f':
        std::string::value_type v9 = v7 + 1;
        *a2 = v7 + 1;
        if (v7[1] == 97)
        {
          std::string::value_type v9 = v7 + 2;
          *a2 = v7 + 2;
          if (v7[2] == 108)
          {
            std::string::value_type v9 = v7 + 3;
            *a2 = v7 + 3;
            if (v7[3] == 115)
            {
              std::string::value_type v9 = v7 + 4;
              *a2 = v7 + 4;
              if (v7[4] == 101)
              {
                *a2 = v7 + 5;
                uint64_t v10 = (void *)a3;
                char v11 = 0;
LABEL_61:
                sub_2168B74DC(v10, v11);
                return;
              }
            }
          }
        }
        goto LABEL_138;
      default:
LABEL_34:
        long long v160 = *(_OWORD *)a2;
        v161 = a2;
        v157 = (unsigned __int8 **)&v160;
        *(void *)v158 = a1;
        int v159 = 0;
        uint64_t v20 = v160;
        int v21 = *(unsigned __int8 *)v160;
        if (v21 == 45)
        {
          uint64_t v22 = v160 + 1;
          *(void *)&long long v160 = v160 + 1;
          int v23 = *(unsigned __int8 *)(v20 + 1);
        }
        else
        {
          int v23 = *(unsigned __int8 *)v160;
          uint64_t v22 = v160;
        }
        int v153 = v21;
        uint64_t v154 = *((void *)&v160 + 1);
        uint64_t v155 = v20;
        if (v23 == 48)
        {
          int v66 = *(unsigned char **)(a1 + 24);
          if ((uint64_t)(*(void *)(a1 + 32) - (void)v66) <= 0)
          {
            sub_2168B799C((void *)a1, 1);
            int v66 = *(unsigned char **)(a1 + 24);
          }
          int v45 = 0;
          int v33 = 0;
          unint64_t v46 = 0;
          unsigned int v29 = 0;
          int v156 = 0;
          *(void *)(a1 + 24) = v66 + 1;
          *int v66 = 48;
          int v25 = ++v159;
          int v26 = v157;
          __n128 v28 = *v157 + 1;
          *v157 = v28;
          unsigned int v30 = *v28;
          double v32 = 0.0;
        }
        else
        {
          if ((v23 - 49) > 8)
          {
            uint64_t v64 = v22 - *((void *)&v160 + 1);
            int v65 = 3;
            goto LABEL_226;
          }
          unint64_t v24 = *(unsigned char **)(a1 + 24);
          if ((uint64_t)(*(void *)(a1 + 32) - (void)v24) <= 0)
          {
            sub_2168B799C((void *)a1, 1);
            unint64_t v24 = *(unsigned char **)(a1 + 24);
          }
          *(void *)(a1 + 24) = v24 + 1;
          *unint64_t v24 = v23;
          int v25 = ++v159;
          int v26 = v157;
          uint64_t v27 = *v157;
          __n128 v28 = *v157 + 1;
          *v157 = v28;
          unsigned int v29 = (char)*v27 - 48;
          unsigned int v30 = v27[1];
          unsigned int v31 = v30 - 48;
          double v32 = 0.0;
          if (v21 == 45)
          {
            if (v31 <= 9)
            {
              int v33 = 0;
              unsigned int v34 = 214748364;
              while (1)
              {
                if (v29 > 0xCCCCCCB)
                {
                  if (v29 != 214748364) {
                    goto LABEL_137;
                  }
                  if (v30 > 0x38) {
                    break;
                  }
                }
                uint64_t v35 = *(unsigned char **)(*(void *)v158 + 24);
                if ((uint64_t)(*(void *)(*(void *)v158 + 32) - (void)v35) <= 0)
                {
                  sub_2168B799C(*(void **)v158, 1);
                  uint64_t v35 = *(unsigned char **)(*(void *)v158 + 24);
                }
                *(void *)(*(void *)v158 + 24) = v35 + 1;
                *uint64_t v35 = v30;
                int v25 = ++v159;
                int v26 = v157;
                uint64_t v36 = *v157;
                __n128 v28 = *v157 + 1;
                *v157 = v28;
                unsigned int v29 = (char)*v36 + 10 * v29 - 48;
                ++v33;
                unsigned int v30 = v36[1];
                if (v30 - 48 >= 0xA) {
                  goto LABEL_80;
                }
              }
              unsigned int v30 = 57;
LABEL_83:
              unint64_t v46 = v34;
              if (v21 == 45)
              {
                while (v46 <= 0xCCCCCCCCCCCCCCBLL || v30 <= 0x38 && v46 == 0xCCCCCCCCCCCCCCCLL)
                {
                  int v47 = *(unsigned char **)(*(void *)v158 + 24);
                  if ((uint64_t)(*(void *)(*(void *)v158 + 32) - (void)v47) <= 0)
                  {
                    sub_2168B799C(*(void **)v158, 1);
                    int v47 = *(unsigned char **)(*(void *)v158 + 24);
                  }
                  *(void *)(*(void *)v158 + 24) = v47 + 1;
                  *int v47 = v30;
                  int v25 = ++v159;
                  int v26 = v157;
                  float v48 = *v157;
                  __n128 v28 = *v157 + 1;
                  *v157 = v28;
                  unint64_t v46 = ((char)*v48 - 48) + 10 * v46;
                  ++v33;
                  unsigned int v30 = v48[1];
                  if (v30 - 48 >= 0xA) {
                    goto LABEL_100;
                  }
                }
              }
              else
              {
                while (v46 <= 0x1999999999999998 || v30 <= 0x35 && v46 == 0x1999999999999999)
                {
                  int v49 = *(unsigned char **)(*(void *)v158 + 24);
                  if ((uint64_t)(*(void *)(*(void *)v158 + 32) - (void)v49) <= 0)
                  {
                    sub_2168B799C(*(void **)v158, 1);
                    int v49 = *(unsigned char **)(*(void *)v158 + 24);
                  }
                  *(void *)(*(void *)v158 + 24) = v49 + 1;
                  *int v49 = v30;
                  int v25 = ++v159;
                  int v26 = v157;
                  float v50 = *v157;
                  __n128 v28 = *v157 + 1;
                  *v157 = v28;
                  unint64_t v46 = ((char)*v50 - 48) + 10 * v46;
                  ++v33;
                  unsigned int v30 = v50[1];
                  if (v30 - 48 >= 0xA)
                  {
LABEL_100:
                    int v45 = 0;
                    double v32 = 0.0;
                    int v156 = 1;
                    unsigned int v29 = v34;
                    goto LABEL_106;
                  }
                }
              }
              double v32 = (double)v46;
              do
              {
                int v51 = *(unsigned char **)(*(void *)v158 + 24);
                if ((uint64_t)(*(void *)(*(void *)v158 + 32) - (void)v51) <= 0)
                {
                  sub_2168B799C(*(void **)v158, 1);
                  int v51 = *(unsigned char **)(*(void *)v158 + 24);
                }
                *(void *)(*(void *)v158 + 24) = v51 + 1;
                *int v51 = v30;
                int v25 = ++v159;
                int v26 = v157;
                float v52 = *v157;
                __n128 v28 = *v157 + 1;
                *v157 = v28;
                double v32 = v32 * 10.0 + (double)((char)*v52 - 48);
                unsigned int v30 = v52[1];
              }
              while (v30 - 48 < 0xA);
              int v45 = 1;
              unsigned int v29 = v34;
              int v156 = 1;
              goto LABEL_106;
            }
          }
          else if (v31 <= 9)
          {
            int v33 = 0;
            unsigned int v34 = 429496729;
            while (1)
            {
              if (v29 > 0x19999998)
              {
                if (v29 != 429496729)
                {
LABEL_137:
                  unsigned int v34 = v29;
                  goto LABEL_83;
                }
                if (v30 > 0x35) {
                  goto LABEL_83;
                }
              }
              int v43 = *(unsigned char **)(*(void *)v158 + 24);
              if ((uint64_t)(*(void *)(*(void *)v158 + 32) - (void)v43) <= 0)
              {
                sub_2168B799C(*(void **)v158, 1);
                int v43 = *(unsigned char **)(*(void *)v158 + 24);
              }
              *(void *)(*(void *)v158 + 24) = v43 + 1;
              *int v43 = v30;
              int v25 = ++v159;
              int v26 = v157;
              float v44 = *v157;
              __n128 v28 = *v157 + 1;
              *v157 = v28;
              unsigned int v29 = (char)*v44 + 10 * v29 - 48;
              ++v33;
              unsigned int v30 = v44[1];
              if (v30 - 48 >= 0xA)
              {
LABEL_80:
                int v45 = 0;
                goto LABEL_81;
              }
            }
          }
          int v45 = 0;
          int v33 = 0;
LABEL_81:
          unint64_t v46 = 0;
          int v156 = 0;
        }
LABEL_106:
        if (v30 != 46)
        {
          int v53 = 0;
          int v56 = v25;
LABEL_204:
          if (v30 != 101 && v30 != 69)
          {
            int v103 = 0;
            goto LABEL_230;
          }
          uint64_t v99 = (char *)(v28 + 1);
          *int v26 = v28 + 1;
          unint64_t v100 = v29;
          if (v156) {
            unint64_t v100 = v46;
          }
          if (!v45) {
            double v32 = (double)v100;
          }
          int v101 = v28[1];
          if (v101 == 43)
          {
            uint64_t v99 = (char *)(v28 + 2);
            *int v26 = v28 + 2;
            int v101 = v28[2];
          }
          else if (v101 == 45)
          {
            uint64_t v99 = (char *)(v28 + 2);
            *int v26 = v28 + 2;
            if (v28[2] - 48 <= 9)
            {
              *int v26 = v28 + 3;
              int v104 = (char)v28[2] - 48;
              if (v28[3] - 48 <= 9)
              {
                v105 = v28 + 5;
                while (1)
                {
                  *int v26 = v105 - 1;
                  int v104 = (char)*(v105 - 2) + 10 * v104 - 48;
                  unsigned int v106 = *(v105 - 1) - 48;
                  if (v104 > (v53 + 2147483639) / 10) {
                    break;
                  }
                  ++v105;
                  if (v106 >= 0xA) {
                    goto LABEL_228;
                  }
                }
                if (v106 <= 9)
                {
                  do
                  {
                    *int v26 = v105;
                    int v151 = *v105++;
                  }
                  while ((v151 - 48) < 0xA);
                }
              }
LABEL_228:
              int v103 = -v104;
              goto LABEL_229;
            }
            goto LABEL_225;
          }
          if ((v101 - 48) < 0xA)
          {
            v102 = v99 + 1;
            *int v26 = (unsigned __int8 *)(v99 + 1);
            int v103 = *v99 - 48;
            while (*v102 - 48 <= 9)
            {
              *int v26 = (unsigned __int8 *)(v102 + 1);
              int v103 = *v102++ + 10 * v103 - 48;
              if (v103 > 308 - v53) {
                goto LABEL_232;
              }
            }
LABEL_229:
            int v45 = 1;
LABEL_230:
            v107 = (char *)sub_2168B84F0((uint64_t)&v157);
            if (v45)
            {
              double v108 = sub_2168B8560(v103 + v53, v107, v56, v25, v103, v32);
              if (v108 <= 1.79769313e308)
              {
                if (v153 == 45) {
                  double v115 = -v108;
                }
                else {
                  double v115 = v108;
                }
                unint64_t v116 = *(void *)(a3 + 40);
                unint64_t v117 = *(void *)(a3 + 32);
                if (v117 >= v116)
                {
                  uint64_t v121 = *(void *)(a3 + 24);
                  uint64_t v122 = (uint64_t)(v117 - v121) >> 4;
                  if ((unint64_t)(v122 + 1) >> 60) {
                    sub_21677CB10();
                  }
                  uint64_t v123 = v116 - v121;
                  uint64_t v124 = v123 >> 3;
                  if (v123 >> 3 <= (unint64_t)(v122 + 1)) {
                    uint64_t v124 = v122 + 1;
                  }
                  if ((unint64_t)v123 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v125 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v125 = v124;
                  }
                  uint64_t v166 = a3 + 40;
                  if (v125) {
                    v126 = (char *)sub_216787EE0(a3 + 40, v125);
                  }
                  else {
                    v126 = 0;
                  }
                  v162 = v126;
                  v163 = (pxrInternal__aapl__pxrReserved__::JsValue *)&v126[16 * v122];
                  v164 = v163;
                  v165 = &v126[16 * v125];
                  pxrInternal__aapl__pxrReserved__::JsValue::JsValue(v163, v115);
                  v164 = (pxrInternal__aapl__pxrReserved__::JsValue *)((char *)v164 + 16);
                  sub_2168B7398((uint64_t *)(a3 + 24), &v162);
                  unint64_t v118 = *(void *)(a3 + 32);
                  sub_216788028(&v162);
                }
                else
                {
                  pxrInternal__aapl__pxrReserved__::JsValue::JsValue(*(pxrInternal__aapl__pxrReserved__::JsValue **)(a3 + 32), v115);
                  unint64_t v118 = v117 + 16;
                  *(void *)(a3 + 32) = v117 + 16;
                }
                *(void *)(a3 + 32) = v118;
              }
              else
              {
LABEL_232:
                *(_DWORD *)(a1 + 48) = 13;
                *(void *)(a1 + 56) = v155 - v154;
              }
              goto LABEL_303;
            }
            if (v156)
            {
              uint64_t v109 = a3;
              if (v153 == 45)
              {
                uint64_t v110 = -(uint64_t)v46;
                unint64_t v111 = *(void *)(a3 + 40);
                unint64_t v112 = *(void *)(a3 + 32);
                if (v112 < v111)
                {
                  pxrInternal__aapl__pxrReserved__::JsValue::JsValue(*(pxrInternal__aapl__pxrReserved__::JsValue **)(a3 + 32), v110);
LABEL_249:
                  unint64_t v120 = v112 + 16;
                  *(void *)(v109 + 32) = v112 + 16;
LABEL_302:
                  *(void *)(v109 + 32) = v120;
                  goto LABEL_303;
                }
                uint64_t v127 = *(void *)(a3 + 24);
                uint64_t v128 = (uint64_t)(v112 - v127) >> 4;
                if (!((unint64_t)(v128 + 1) >> 60))
                {
                  uint64_t v129 = v111 - v127;
                  uint64_t v130 = v129 >> 3;
                  if (v129 >> 3 <= (unint64_t)(v128 + 1)) {
                    uint64_t v130 = v128 + 1;
                  }
                  if ((unint64_t)v129 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v131 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v131 = v130;
                  }
                  uint64_t v166 = a3 + 40;
                  if (v131) {
                    v132 = (char *)sub_216787EE0(a3 + 40, v131);
                  }
                  else {
                    v132 = 0;
                  }
                  v162 = v132;
                  v163 = (pxrInternal__aapl__pxrReserved__::JsValue *)&v132[16 * v128];
                  v164 = v163;
                  v165 = &v132[16 * v131];
                  pxrInternal__aapl__pxrReserved__::JsValue::JsValue(v163, v110);
                  v164 = (pxrInternal__aapl__pxrReserved__::JsValue *)((char *)v164 + 16);
                  sub_2168B7398((uint64_t *)(a3 + 24), &v162);
LABEL_301:
                  unint64_t v120 = *(void *)(v109 + 32);
                  sub_216788028(&v162);
                  goto LABEL_302;
                }
              }
              else
              {
                unint64_t v119 = *(void *)(a3 + 40);
                unint64_t v112 = *(void *)(a3 + 32);
                if (v112 < v119)
                {
                  pxrInternal__aapl__pxrReserved__::JsValue::JsValue(*(pxrInternal__aapl__pxrReserved__::JsValue **)(a3 + 32), v46);
                  goto LABEL_249;
                }
                uint64_t v139 = *(void *)(a3 + 24);
                uint64_t v140 = (uint64_t)(v112 - v139) >> 4;
                if (!((unint64_t)(v140 + 1) >> 60))
                {
                  uint64_t v141 = v119 - v139;
                  uint64_t v142 = v141 >> 3;
                  if (v141 >> 3 <= (unint64_t)(v140 + 1)) {
                    uint64_t v142 = v140 + 1;
                  }
                  if ((unint64_t)v141 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v143 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v143 = v142;
                  }
                  uint64_t v166 = a3 + 40;
                  if (v143) {
                    v144 = (char *)sub_216787EE0(a3 + 40, v143);
                  }
                  else {
                    v144 = 0;
                  }
                  v162 = v144;
                  v163 = (pxrInternal__aapl__pxrReserved__::JsValue *)&v144[16 * v140];
                  v164 = v163;
                  v165 = &v144[16 * v143];
                  pxrInternal__aapl__pxrReserved__::JsValue::JsValue(v163, v46);
                  v164 = (pxrInternal__aapl__pxrReserved__::JsValue *)((char *)v164 + 16);
                  sub_2168B7398((uint64_t *)(a3 + 24), &v162);
                  goto LABEL_301;
                }
              }
            }
            else
            {
              uint64_t v109 = a3;
              uint64_t v113 = a3 + 40;
              unint64_t v114 = *(void *)(a3 + 40);
              unint64_t v112 = *(void *)(a3 + 32);
              if (v153 == 45)
              {
                if (v112 < v114)
                {
                  pxrInternal__aapl__pxrReserved__::JsValue::JsValue(*(pxrInternal__aapl__pxrReserved__::JsValue **)(a3 + 32), -v29);
                  goto LABEL_249;
                }
                uint64_t v133 = *(void *)(a3 + 24);
                uint64_t v134 = (uint64_t)(v112 - v133) >> 4;
                if (!((unint64_t)(v134 + 1) >> 60))
                {
                  uint64_t v135 = v114 - v133;
                  uint64_t v136 = v135 >> 3;
                  if (v135 >> 3 <= (unint64_t)(v134 + 1)) {
                    uint64_t v136 = v134 + 1;
                  }
                  if ((unint64_t)v135 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v137 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v137 = v136;
                  }
                  uint64_t v166 = a3 + 40;
                  if (v137) {
                    v138 = (char *)sub_216787EE0(v113, v137);
                  }
                  else {
                    v138 = 0;
                  }
                  v162 = v138;
                  v163 = (pxrInternal__aapl__pxrReserved__::JsValue *)&v138[16 * v134];
                  v164 = v163;
                  v165 = &v138[16 * v137];
                  pxrInternal__aapl__pxrReserved__::JsValue::JsValue(v163, -v29);
                  v164 = (pxrInternal__aapl__pxrReserved__::JsValue *)((char *)v164 + 16);
                  sub_2168B7398((uint64_t *)(a3 + 24), &v162);
                  goto LABEL_301;
                }
              }
              else
              {
                if (v112 < v114)
                {
                  pxrInternal__aapl__pxrReserved__::JsValue::JsValue(*(pxrInternal__aapl__pxrReserved__::JsValue **)(a3 + 32), v29);
                  goto LABEL_249;
                }
                uint64_t v145 = *(void *)(a3 + 24);
                uint64_t v146 = (uint64_t)(v112 - v145) >> 4;
                if (!((unint64_t)(v146 + 1) >> 60))
                {
                  uint64_t v147 = v114 - v145;
                  uint64_t v148 = v147 >> 3;
                  if (v147 >> 3 <= (unint64_t)(v146 + 1)) {
                    uint64_t v148 = v146 + 1;
                  }
                  if ((unint64_t)v147 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v149 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v149 = v148;
                  }
                  uint64_t v166 = a3 + 40;
                  if (v149) {
                    v150 = (char *)sub_216787EE0(v113, v149);
                  }
                  else {
                    v150 = 0;
                  }
                  v162 = v150;
                  v163 = (pxrInternal__aapl__pxrReserved__::JsValue *)&v150[16 * v146];
                  v164 = v163;
                  v165 = &v150[16 * v149];
                  pxrInternal__aapl__pxrReserved__::JsValue::JsValue(v163, v29);
                  v164 = (pxrInternal__aapl__pxrReserved__::JsValue *)((char *)v164 + 16);
                  sub_2168B7398((uint64_t *)(a3 + 24), &v162);
                  goto LABEL_301;
                }
              }
            }
            sub_21677CB10();
          }
LABEL_225:
          uint64_t v64 = v99 - (char *)v26[1];
          int v65 = 15;
          goto LABEL_226;
        }
        *int v26 = v28 + 1;
        unsigned int v30 = v28[1];
        if (v30 - 48 < 0xA)
        {
          if (v45)
          {
            int v53 = 0;
          }
          else
          {
            if (!v156) {
              unint64_t v46 = v29;
            }
            if (!(v46 >> 53))
            {
              int v54 = -1;
              do
              {
                int v53 = v54;
                float v55 = *(unsigned char **)(*(void *)v158 + 24);
                if ((uint64_t)(*(void *)(*(void *)v158 + 32) - (void)v55) <= 0)
                {
                  sub_2168B799C(*(void **)v158, 1);
                  float v55 = *(unsigned char **)(*(void *)v158 + 24);
                }
                *(void *)(*(void *)v158 + 24) = v55 + 1;
                *float v55 = v30;
                int v56 = ++v159;
                int v26 = v157;
                float v57 = *v157;
                __n128 v28 = *v157 + 1;
                *v157 = v28;
                unint64_t v46 = ((char)*v57 - 48) + 10 * v46;
                unsigned int v30 = v57[1];
                if ((char)v30 <= 47)
                {
                  double v32 = (double)v46;
                  goto LABEL_203;
                }
                if (v46) {
                  ++v33;
                }
                int v54 = v53 - 1;
              }
              while (v30 <= 0x39 && v46 >> 53 == 0);
              double v32 = (double)v46;
              if (v30 - 48 <= 9) {
                goto LABEL_127;
              }
              __n128 v28 = v57 + 1;
              goto LABEL_203;
            }
            int v53 = 0;
            double v32 = (double)v46;
          }
          do
          {
LABEL_127:
            unsigned __int16 v59 = *(unsigned char **)(*(void *)v158 + 24);
            uint64_t v60 = *(void *)(*(void *)v158 + 32) - (void)v59;
            if (v33 > 16)
            {
              if (v60 <= 0)
              {
                sub_2168B799C(*(void **)v158, 1);
                unsigned __int16 v59 = *(unsigned char **)(*(void *)v158 + 24);
              }
              *(void *)(*(void *)v158 + 24) = v59 + 1;
              *unsigned __int16 v59 = v30;
              int v56 = ++v159;
              int v26 = v157;
              __n128 v28 = *v157 + 1;
              *v157 = v28;
            }
            else
            {
              if (v60 <= 0)
              {
                sub_2168B799C(*(void **)v158, 1);
                unsigned __int16 v59 = *(unsigned char **)(*(void *)v158 + 24);
              }
              *(void *)(*(void *)v158 + 24) = v59 + 1;
              *unsigned __int16 v59 = v30;
              int v56 = ++v159;
              int v26 = v157;
              unsigned __int16 v61 = *v157;
              __n128 v28 = *v157 + 1;
              *v157 = v28;
              double v32 = v32 * 10.0 + (double)((char)*v61 - 48);
              --v53;
              if (v32 > 0.0) {
                ++v33;
              }
            }
            unsigned int v30 = *v28;
          }
          while (v30 - 48 < 0xA);
LABEL_203:
          int v45 = 1;
          goto LABEL_204;
        }
        uint64_t v64 = v28 + 1 - v26[1];
        int v65 = 14;
LABEL_226:
        *(_DWORD *)(a1 + 48) = v65;
        *(void *)(a1 + 56) = v64;
LABEL_303:
        *(_OWORD *)v161 = v160;
        return;
    }
  }
}

void sub_2168B6EC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, long long a17, _OWORD *a18, char a19)
{
  *a18 = a17;
  _Unwind_Resume(exception_object);
}

double sub_2168B6F48(uint64_t a1, _OWORD *a2, uint64_t *a3, int a4)
{
  long long v33 = *a2;
  unint64_t v7 = (char *)(v33 + 1);
  unsigned int v34 = a2;
  *(void *)&long long v33 = v33 + 1;
  *(void *)unsigned int v31 = a1;
  LODWORD(__len) = 0;
  while (1)
  {
    unsigned int v8 = *v7;
    if (v8 != 92) {
      break;
    }
    *(void *)&long long v33 = v7 + 1;
    uint64_t v12 = v7[1];
    char v9 = byte_217453A91[v12];
    if (v9)
    {
      *(void *)&long long v33 = v7 + 2;
      uint64_t v10 = *(void *)v31;
      char v11 = *(unsigned char **)(*(void *)v31 + 24);
      if ((uint64_t)(*(void *)(*(void *)v31 + 32) - (void)v11) <= 0) {
        goto LABEL_10;
      }
      goto LABEL_6;
    }
    uint64_t v13 = (uint64_t)&v7[-*((void *)&v33 + 1)];
    if (v12 != 117)
    {
      *(_DWORD *)(a1 + 48) = 10;
      *(void *)(a1 + 56) = v13;
      goto LABEL_36;
    }
    *(void *)&long long v33 = v7 + 2;
    uint64_t v30 = (uint64_t)&v7[-*((void *)&v33 + 1)];
    unsigned int v14 = sub_2168B7628(a1, (uint64_t *)&v33, v13);
    if (*(_DWORD *)(a1 + 48)) {
      goto LABEL_36;
    }
    unsigned int v15 = v14;
    if (v14 >> 11 == 27)
    {
      if (v14 >> 10 > 0x36) {
        goto LABEL_38;
      }
      uint64_t v16 = v33;
      if (*(unsigned char *)v33 != 92) {
        goto LABEL_38;
      }
      *(void *)&long long v33 = v33 + 1;
      if (*(unsigned char *)(v16 + 1) != 117) {
        goto LABEL_38;
      }
      unsigned int v17 = v14;
      *(void *)&long long v33 = v16 + 2;
      int v18 = sub_2168B7628(a1, (uint64_t *)&v33, v30);
      if (*(_DWORD *)(a1 + 48)) {
        goto LABEL_36;
      }
      if ((v18 - 57344) <= 0xFFFFFBFF)
      {
LABEL_38:
        *(_DWORD *)(a1 + 48) = 9;
        uint64_t v27 = (unsigned __int8 *)v30;
LABEL_33:
        *(void *)(a1 + 56) = v27;
        goto LABEL_36;
      }
      unsigned int v15 = ((v18 - 56320) | ((v17 << 10) - 56623104)) + 0x10000;
    }
    sub_2168B76B0((char *)v31, v15);
LABEL_7:
    unint64_t v7 = (char *)v33;
  }
  if (v8 != 34)
  {
    if (v8 <= 0x1F)
    {
      uint64_t v27 = (unsigned __int8 *)&v7[-*((void *)&v33 + 1)];
      if (v8) {
        int v28 = 12;
      }
      else {
        int v28 = 11;
      }
      *(_DWORD *)(a1 + 48) = v28;
      goto LABEL_33;
    }
    *(void *)&long long v33 = v7 + 1;
    char v9 = *v7;
    uint64_t v10 = *(void *)v31;
    char v11 = *(unsigned char **)(*(void *)v31 + 24);
    if ((uint64_t)(*(void *)(*(void *)v31 + 32) - (void)v11) <= 0)
    {
LABEL_10:
      sub_2168B799C(*(void **)v31, 1);
      char v11 = *(unsigned char **)(v10 + 24);
    }
LABEL_6:
    *(void *)(v10 + 24) = v11 + 1;
    *char v11 = v9;
    LODWORD(__len) = __len + 1;
    goto LABEL_7;
  }
  *(void *)&long long v33 = v7 + 1;
  uint64_t v19 = *(void *)v31;
  uint64_t v20 = *(unsigned char **)(*(void *)v31 + 24);
  if ((uint64_t)(*(void *)(*(void *)v31 + 32) - (void)v20) <= 0)
  {
    sub_2168B799C(*(void **)v31, 1);
    uint64_t v20 = *(unsigned char **)(v19 + 24);
  }
  *(void *)(v19 + 24) = v20 + 1;
  *uint64_t v20 = 0;
  size_t v21 = __len;
  unsigned int v22 = __len + 1;
  LODWORD(__len) = __len + 1;
  if (!*(_DWORD *)(a1 + 48))
  {
    uint64_t v23 = *(void *)(*(void *)v31 + 24);
    unint64_t v24 = (void *)(v23 - v22);
    *(void *)(*(void *)v31 + 24) = v24;
    if (a4)
    {
      __p[0] = (void *)(v23 - v22);
      unsigned int v35 = v21;
      unint64_t v25 = a3[1];
      if (v25 >= a3[2])
      {
        uint64_t v26 = sub_2168B7A20(a3, __p, &v35);
      }
      else
      {
        sub_216799F58((void *)a3[1], v24, v21);
        uint64_t v26 = v25 + 24;
        a3[1] = v25 + 24;
      }
      a3[1] = v26;
    }
    else
    {
      sub_216799F58(__p, v24, v21);
      sub_2168B7B30(a3 + 3, (uint64_t)__p);
      if (v37 < 0) {
        operator delete(__p[0]);
      }
    }
  }
LABEL_36:
  double result = *(double *)&v33;
  *unsigned int v34 = v33;
  return result;
}

void sub_2168B7248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long a13, _OWORD *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  *a14 = a13;
  _Unwind_Resume(exception_object);
}

uint64_t sub_2168B728C(uint64_t *a1)
{
  unint64_t v4 = a1[2];
  uint64_t v2 = (uint64_t)(a1 + 2);
  unint64_t v3 = v4;
  unint64_t v5 = *(void *)(v2 - 8);
  if (v5 >= v4)
  {
    uint64_t v7 = (uint64_t)(v5 - *a1) >> 4;
    if ((unint64_t)(v7 + 1) >> 60) {
      sub_21677CB10();
    }
    uint64_t v8 = v3 - *a1;
    uint64_t v9 = v8 >> 3;
    if (v8 >> 3 <= (unint64_t)(v7 + 1)) {
      uint64_t v9 = v7 + 1;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v9;
    }
    uint64_t v17 = v2;
    if (v10) {
      char v11 = (char *)sub_216787EE0(v2, v10);
    }
    else {
      char v11 = 0;
    }
    uint64_t v13 = v11;
    unsigned int v14 = (pxrInternal__aapl__pxrReserved__::JsValue *)&v11[16 * v7];
    uint64_t v16 = &v11[16 * v10];
    pxrInternal__aapl__pxrReserved__::JsValue::JsValue(v14);
    unsigned int v15 = (char *)v14 + 16;
    sub_2168B7398(a1, &v13);
    uint64_t v6 = a1[1];
    sub_216788028(&v13);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::JsValue::JsValue(*(pxrInternal__aapl__pxrReserved__::JsValue **)(v2 - 8));
    uint64_t v6 = v5 + 16;
    a1[1] = v6;
  }
  a1[1] = v6;
  return v6 - 16;
}

void sub_2168B7378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t sub_2168B7398(uint64_t *a1, void *a2)
{
  uint64_t result = sub_2168B7410((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_2168B7410(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_2168B74A4((uint64_t)v12);
  return v10;
}

uint64_t sub_2168B74A4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216787FE4(a1);
  }
  return a1;
}

uint64_t sub_2168B74DC(void *a1, char a2)
{
  char v5 = a2;
  unint64_t v3 = a1[4];
  if (v3 >= a1[5])
  {
    uint64_t result = sub_2168B7540(a1 + 3, &v5);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::JsValue::JsValue((pxrInternal__aapl__pxrReserved__::JsValue *)a1[4], a2);
    uint64_t result = v3 + 16;
    a1[4] = v3 + 16;
  }
  a1[4] = result;
  return result;
}

void sub_2168B7538(_Unwind_Exception *a1)
{
  *(void *)(v1 + 32) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_2168B7540(uint64_t *a1, char *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_216787EE0(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  char v13 = v10;
  long long v14 = (pxrInternal__aapl__pxrReserved__::JsValue *)&v10[16 * v4];
  long long v15 = v14;
  uint64_t v16 = &v10[16 * v9];
  pxrInternal__aapl__pxrReserved__::JsValue::JsValue(v14, *a2);
  long long v15 = (pxrInternal__aapl__pxrReserved__::JsValue *)((char *)v14 + 16);
  sub_2168B7398(a1, &v13);
  uint64_t v11 = a1[1];
  sub_216788028(&v13);
  return v11;
}

void sub_2168B7614(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216788028((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2168B7628(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = result;
  uint64_t v4 = 0;
  LODWORD(result) = 0;
  uint64_t v5 = *a2;
  while (1)
  {
    int v6 = *(char *)(v5 + v4);
    if ((v6 - 48) >= 0xA) {
      break;
    }
    int v7 = -48;
LABEL_8:
    uint64_t result = (v6 + 16 * result + v7);
    *a2 = v5 + v4++ + 1;
    if (v4 == 4) {
      return result;
    }
  }
  if (*(unsigned __int8 *)(v5 + v4) - 65 < 6)
  {
    int v7 = -55;
    goto LABEL_8;
  }
  if (*(unsigned __int8 *)(v5 + v4) - 97 < 6)
  {
    int v7 = -87;
    goto LABEL_8;
  }
  uint64_t result = 0;
  *(_DWORD *)(v3 + 48) = 8;
  *(void *)(v3 + 56) = a3;
  return result;
}

char *sub_2168B76B0(char *result, unsigned int a2)
{
  uint64_t v3 = result;
  if (a2 <= 0x7F)
  {
    uint64_t v4 = *(void *)result;
    uint64_t v5 = *(unsigned char **)(*(void *)result + 24);
    if ((uint64_t)(*(void *)(*(void *)result + 32) - (void)v5) <= 0)
    {
      uint64_t result = sub_2168B799C(*(void **)result, 1);
      uint64_t v5 = *(unsigned char **)(v4 + 24);
    }
    *(void *)(v4 + 24) = v5 + 1;
    *uint64_t v5 = a2;
    int v6 = v3 + 8;
    goto LABEL_27;
  }
  if (a2 <= 0x7FF)
  {
    unsigned int v7 = (a2 >> 6) | 0xFFFFFFC0;
    uint64_t v8 = *(void *)result;
    unint64_t v9 = *(unsigned char **)(*(void *)result + 24);
    if ((uint64_t)(*(void *)(*(void *)result + 32) - (void)v9) <= 0)
    {
      uint64_t result = sub_2168B799C(*(void **)result, 1);
      unint64_t v9 = *(unsigned char **)(v8 + 24);
    }
    *(void *)(v8 + 24) = v9 + 1;
    *unint64_t v9 = v7;
    int v6 = v3 + 8;
    ++*((_DWORD *)v3 + 2);
LABEL_24:
    uint64_t v27 = *(void **)v3;
    int v28 = (unsigned char *)v27[3];
    if ((uint64_t)(v27[4] - (void)v28) <= 0)
    {
      uint64_t result = sub_2168B799C(v27, 1);
      int v28 = (unsigned char *)v27[3];
    }
    v27[3] = v28 + 1;
    *int v28 = a2 & 0x3F | 0x80;
    goto LABEL_27;
  }
  uint64_t v10 = *(void *)result;
  uint64_t v11 = *(unsigned char **)(*(void *)result + 24);
  uint64_t v12 = *(void *)(*(void *)result + 32) - (void)v11;
  if (HIWORD(a2))
  {
    unsigned int v20 = (a2 >> 18) | 0xFFFFFFF0;
    if (v12 <= 0)
    {
      uint64_t result = sub_2168B799C(*(void **)result, 1);
      uint64_t v11 = *(unsigned char **)(v10 + 24);
    }
    *(void *)(v10 + 24) = v11 + 1;
    *uint64_t v11 = v20;
    int v6 = v3 + 8;
    ++*((_DWORD *)v3 + 2);
    unsigned int v21 = (a2 >> 12) & 0x3F | 0xFFFFFF80;
    unsigned int v22 = *(void **)v3;
    uint64_t v23 = *(unsigned char **)(*(void *)v3 + 24);
    if ((uint64_t)(*(void *)(*(void *)v3 + 32) - (void)v23) <= 0)
    {
      uint64_t result = sub_2168B799C(*(void **)v3, 1);
      unsigned int v21 = (a2 >> 12) & 0x3F | 0xFFFFFF80;
      uint64_t v23 = (unsigned char *)v22[3];
    }
    v22[3] = v23 + 1;
    *uint64_t v23 = v21;
    ++*((_DWORD *)v3 + 2);
    unsigned int v24 = (a2 >> 6) & 0x3F | 0xFFFFFF80;
    uint64_t v25 = *(void *)v3;
    uint64_t v26 = *(unsigned char **)(*(void *)v3 + 24);
    if ((uint64_t)(*(void *)(*(void *)v3 + 32) - (void)v26) <= 0)
    {
      uint64_t result = sub_2168B799C(*(void **)v3, 1);
      unsigned int v24 = (a2 >> 6) & 0x3F | 0xFFFFFF80;
      uint64_t v26 = *(unsigned char **)(v25 + 24);
    }
    *(void *)(v25 + 24) = v26 + 1;
    *uint64_t v26 = v24;
    ++*((_DWORD *)v3 + 2);
    goto LABEL_24;
  }
  unsigned int v13 = (a2 >> 12) | 0xFFFFFFE0;
  if (v12 <= 0)
  {
    uint64_t result = sub_2168B799C(*(void **)result, 1);
    uint64_t v11 = *(unsigned char **)(v10 + 24);
  }
  *(void *)(v10 + 24) = v11 + 1;
  *uint64_t v11 = v13;
  int v6 = v3 + 8;
  ++*((_DWORD *)v3 + 2);
  unsigned int v14 = (a2 >> 6) & 0x3F | 0xFFFFFF80;
  uint64_t v15 = *(void *)v3;
  uint64_t v16 = *(unsigned char **)(*(void *)v3 + 24);
  if ((uint64_t)(*(void *)(*(void *)v3 + 32) - (void)v16) <= 0)
  {
    uint64_t result = sub_2168B799C(*(void **)v3, 1);
    unsigned int v14 = (a2 >> 6) & 0x3F | 0xFFFFFF80;
    uint64_t v16 = *(unsigned char **)(v15 + 24);
  }
  *(void *)(v15 + 24) = v16 + 1;
  *uint64_t v16 = v14;
  ++*((_DWORD *)v3 + 2);
  char v17 = a2 & 0x3F | 0x80;
  int v18 = *(void **)v3;
  uint64_t v19 = (unsigned char *)v18[3];
  if ((uint64_t)(v18[4] - (void)v19) <= 0)
  {
    uint64_t result = sub_2168B799C(v18, 1);
    char v17 = a2 & 0x3F | 0x80;
    uint64_t v19 = (unsigned char *)v18[3];
  }
  v18[3] = v19 + 1;
  *uint64_t v19 = v17;
LABEL_27:
  ++*v6;
  return result;
}

char *sub_2168B799C(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  if (v4)
  {
    unint64_t v5 = a1[4] - v4 + ((unint64_t)(a1[4] - v4 + 1) >> 1);
  }
  else
  {
    if (!*a1)
    {
      int v6 = operator new(1uLL);
      *a1 = v6;
      a1[1] = v6;
    }
    uint64_t v4 = 0;
    unint64_t v5 = a1[5];
  }
  size_t v7 = a2 - v4 + a1[3];
  if (v5 <= v7) {
    size_t v8 = v7;
  }
  else {
    size_t v8 = v5;
  }

  return sub_2168B5138(a1, v8);
}

uint64_t sub_2168B7A20(uint64_t *a1, void **a2, unsigned int *a3)
{
  uint64_t v4 = *a1;
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_21677CB10();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3);
  if (2 * v10 > v6) {
    unint64_t v6 = 2 * v10;
  }
  if (v10 >= 0x555555555555555) {
    unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v11 = v6;
  }
  uint64_t v19 = a1 + 2;
  if (v11) {
    uint64_t v12 = (char *)sub_216782ED8(v9, v11);
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v15 = v12;
  uint64_t v16 = &v12[24 * v5];
  char v17 = v16;
  int v18 = &v12[24 * v11];
  sub_216799F58(v16, *a2, *a3);
  char v17 = v16 + 24;
  sub_216790CCC(a1, &v15);
  uint64_t v13 = a1[1];
  sub_216790E64((uint64_t)&v15);
  return v13;
}

void sub_2168B7B1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216790E64((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2168B7B30(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v9 = (uint64_t)(v7 - *a1) >> 4;
    if ((unint64_t)(v9 + 1) >> 60) {
      sub_21677CB10();
    }
    uint64_t v10 = v5 - *a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t v19 = v4;
    if (v12) {
      uint64_t v13 = (char *)sub_216787EE0(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v15 = v13;
    uint64_t v16 = &v13[16 * v9];
    int v18 = &v13[16 * v12];
    pxrInternal__aapl__pxrReserved__::JsValue::JsValue(v16, a2);
    char v17 = v16 + 16;
    sub_2168B7398(a1, &v15);
    uint64_t v8 = a1[1];
    sub_216788028(&v15);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::JsValue::JsValue(*(void **)(v4 - 8), a2);
    uint64_t v8 = v7 + 16;
    a1[1] = v7 + 16;
  }
  a1[1] = v8;
  return v8 - 16;
}

void sub_2168B7C28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void sub_2168B7C48(uint64_t *a1, unsigned int a2)
{
  uint64_t v4 = (a1[1] - *a1) / 24;
  unint64_t v5 = a1 + 3;
  uint64_t v6 = (a1[4] - a1[3]) >> 4;
  v17[0] = 0;
  v17[1] = 0;
  uint64_t v16 = (uint64_t *)v17;
  if (a2)
  {
    uint64_t v7 = a2;
    uint64_t v8 = 16 * v6 - 16 * a2;
    uint64_t v9 = 24 * v4 - 24 * a2;
    do
    {
      uint64_t v10 = *a1 + v9;
      uint64_t v11 = a1[3] + v8;
      uint64_t v12 = *(void *)(v10 + 16);
      *(_OWORD *)std::string __p = *(_OWORD *)v10;
      uint64_t v14 = v12;
      *(void *)(v10 + 8) = 0;
      *(void *)(v10 + 16) = 0;
      *(void *)uint64_t v10 = 0;
      long long v15 = *(_OWORD *)v11;
      *(void *)uint64_t v11 = 0;
      *(void *)(v11 + 8) = 0;
      sub_2168B7F9C(&v16, (const void **)__p, (uint64_t)__p);
      if (*((void *)&v15 + 1)) {
        sub_216784EC4(*((std::__shared_weak_count **)&v15 + 1));
      }
      if (SHIBYTE(v14) < 0) {
        operator delete(__p[0]);
      }
      v8 += 16;
      v9 += 24;
      --v7;
    }
    while (v7);
  }
  sub_216790984(a1, v4 - a2);
  sub_2168B7DF4(v5, v6 - a2);
  sub_2168B7E84(v5, (uint64_t)&v16);
  sub_216812ED4((uint64_t)&v16, v17[0]);
}

void sub_2168B7D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, void *a15)
{
}

uint64_t sub_2168B7DB4(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    sub_216784EC4(v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_2168B7DF4(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = (v3 - *a1) >> 4;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *a1 + 16 * a2;
      while (v3 != v6)
      {
        uint64_t v7 = *(std::__shared_weak_count **)(v3 - 8);
        if (v7) {
          sub_216784EC4(v7);
        }
        v3 -= 16;
      }
      a1[1] = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    sub_2168B8064(a1, v5);
  }
}

uint64_t sub_2168B7E84(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v9 = (uint64_t)(v7 - *a1) >> 4;
    if ((unint64_t)(v9 + 1) >> 60) {
      sub_21677CB10();
    }
    uint64_t v10 = v5 - *a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t v19 = v4;
    if (v12) {
      uint64_t v13 = (char *)sub_216787EE0(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    long long v15 = v13;
    uint64_t v16 = &v13[16 * v9];
    int v18 = &v13[16 * v12];
    pxrInternal__aapl__pxrReserved__::JsValue::JsValue(v16, a2);
    char v17 = v16 + 16;
    sub_2168B7398(a1, &v15);
    uint64_t v8 = a1[1];
    sub_216788028(&v15);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::JsValue::JsValue(*(void *)(v4 - 8), a2);
    uint64_t v8 = v7 + 16;
    a1[1] = v7 + 16;
  }
  a1[1] = v8;
  return v8 - 16;
}

void sub_2168B7F7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

_OWORD *sub_2168B7F9C(uint64_t **a1, const void **a2, uint64_t a3)
{
  unint64_t v5 = (void **)sub_21677B220((uint64_t)a1, &v11, a2);
  unint64_t v6 = *v5;
  if (!*v5)
  {
    unint64_t v7 = (uint64_t **)v5;
    unint64_t v6 = operator new(0x48uLL);
    v9[1] = a1 + 1;
    v6[2] = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(_OWORD *)((char *)v6 + 56) = *(_OWORD *)(a3 + 24);
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = 0;
    char v10 = 1;
    sub_21677B358(a1, v11, v7, (uint64_t *)v6);
    v9[0] = 0;
    sub_21681534C((uint64_t)v9, 0);
  }
  return v6;
}

void **sub_2168B8064(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  uint64_t v5 = v6;
  unint64_t v7 = (pxrInternal__aapl__pxrReserved__::JsValue *)*(result - 1);
  if (a2 <= (v6 - (uint64_t)v7) >> 4)
  {
    if (a2)
    {
      uint64_t v14 = 16 * a2;
      long long v15 = (pxrInternal__aapl__pxrReserved__::JsValue *)((char *)v7 + 16 * a2);
      do
      {
        uint64_t result = (void **)pxrInternal__aapl__pxrReserved__::JsValue::JsValue(v7);
        unint64_t v7 = (pxrInternal__aapl__pxrReserved__::JsValue *)((char *)v7 + 16);
        v14 -= 16;
      }
      while (v14);
      unint64_t v7 = v15;
    }
    a1[1] = (uint64_t)v7;
  }
  else
  {
    uint64_t v8 = (uint64_t)v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      sub_21677CB10();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    unsigned int v22 = result;
    if (v12) {
      uint64_t v13 = (char *)sub_216787EE0((uint64_t)result, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v16 = &v13[16 * v10];
    v19[0] = v13;
    v19[1] = v16;
    unsigned int v20 = v16;
    unsigned int v21 = &v13[16 * v12];
    uint64_t v17 = 16 * a2;
    int v18 = &v16[16 * a2];
    do
    {
      pxrInternal__aapl__pxrReserved__::JsValue::JsValue((pxrInternal__aapl__pxrReserved__::JsValue *)v16);
      v16 += 16;
      v17 -= 16;
    }
    while (v17);
    unsigned int v20 = v18;
    sub_2168B7398(a1, v19);
    return sub_216788028(v19);
  }
  return result;
}

void sub_2168B8170(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216788028((void **)va);
  _Unwind_Resume(a1);
}

void sub_2168B819C(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = *(void **)(a1 + 32);
  memset(v5, 0, sizeof(v5));
  sub_2168B835C(v5, &v4[-2 * a2], v4, a2);
  sub_2168B7DF4((uint64_t *)(a1 + 24), ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 4) - a2);
  sub_2168B8244((uint64_t *)(a1 + 24), (uint64_t)v5);
  uint64_t v6 = (void **)v5;
  sub_216787968(&v6);
}

void sub_2168B822C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216787968((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2168B8244(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v9 = (uint64_t)(v7 - *a1) >> 4;
    if ((unint64_t)(v9 + 1) >> 60) {
      sub_21677CB10();
    }
    uint64_t v10 = v5 - *a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t v19 = v4;
    if (v12) {
      uint64_t v13 = (char *)sub_216787EE0(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    long long v15 = v13;
    uint64_t v16 = &v13[16 * v9];
    int v18 = &v13[16 * v12];
    pxrInternal__aapl__pxrReserved__::JsValue::JsValue(v16, a2);
    uint64_t v17 = v16 + 16;
    sub_2168B7398(a1, &v15);
    uint64_t v8 = a1[1];
    sub_216788028(&v15);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::JsValue::JsValue(*(void *)(v4 - 8), a2);
    uint64_t v8 = v7 + 16;
    a1[1] = v7 + 16;
  }
  a1[1] = v8;
  return v8 - 16;
}

void sub_2168B833C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void *sub_2168B835C(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    sub_21682BF78(result, a4);
    uint64_t result = sub_2168B83E4((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_2168B83C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_216787968(&a9);
  _Unwind_Resume(a1);
}

void *sub_2168B83E4(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *uint64_t v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  sub_2168B8474((uint64_t)v7);
  return v4;
}

uint64_t sub_2168B8474(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_2168B84AC(a1);
  }
  return a1;
}

void sub_2168B84AC(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 - 8);
    if (v3) {
      sub_216784EC4(v3);
    }
    v1 -= 16;
  }
}

uint64_t sub_2168B84F0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(unsigned char **)(v2 + 24);
  if ((uint64_t)(*(void *)(v2 + 32) - (void)v3) <= 0)
  {
    sub_2168B799C(*(void **)(a1 + 8), 1);
    uint64_t v3 = *(unsigned char **)(v2 + 24);
  }
  *(void *)(v2 + 24) = v3 + 1;
  unsigned char *v3 = 0;
  uint64_t v4 = (*(_DWORD *)(a1 + 16) + 1);
  *(_DWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t result = *(void *)(v5 + 24) - v4;
  *(void *)(v5 + 24) = result;
  return result;
}

double sub_2168B8560(unsigned int a1, char *a2, int a3, int a4, int a5, double a6)
{
  double v21 = 0.0;
  if (a1 - 23 >= 0xF)
  {
    if (a6 <= 9.00719925e15 && a1 + 22 < 0x2D)
    {
      if ((a1 & 0x80000000) != 0) {
        return a6 / dbl_217453B98[-a1];
      }
      return a6 * dbl_217453B98[a1];
    }
  }
  else
  {
    a6 = dbl_217453B98[a1 - 22] * a6;
    if (a6 <= 9.00719925e15)
    {
      a1 = 22;
      return a6 * dbl_217453B98[a1];
    }
  }
  int v8 = a4 - a3 + a5;
  int v9 = a3 - 1;
  if (a3 < 1)
  {
    if (!a3) {
      return 0.0;
    }
  }
  else
  {
    uint64_t v10 = a3;
    int v11 = a3 + 1;
    while (*a2 == 48)
    {
      ++a2;
      --v9;
      --v10;
      if (--v11 <= 1) {
        return 0.0;
      }
    }
    while (a2[v9] == 48)
    {
      --v10;
      ++v8;
      --v9;
      if ((unint64_t)(v10 + 1) <= 1) {
        return 0.0;
      }
    }
    a3 = v10;
  }
  int v12 = a3 - 768;
  if (a3 >= 768) {
    unint64_t v13 = 768;
  }
  else {
    unint64_t v13 = a3;
  }
  if (a3 <= 768) {
    int v12 = 0;
  }
  uint64_t v14 = (v12 + v8);
  double v7 = 0.0;
  if ((int)v14 + (int)v13 >= -323)
  {
    if ((int)v14 + (int)v13 <= 309)
    {
      BOOL v15 = sub_2168B8734((uint64_t)a2, v13, v14, (unint64_t *)&v21);
      double v7 = v21;
      if (!v15)
      {
        sub_2168B8C5C(v22, a2, v13);
        int v17 = sub_2168B8A9C((uint64_t)v22, v14, v16);
        *(void *)&double v18 = *(void *)&v7 + 1;
        if (LOBYTE(v7)) {
          *(void *)&double v19 = *(void *)&v7 + 1;
        }
        else {
          double v19 = v7;
        }
        if (!v17) {
          double v18 = v19;
        }
        if (v17 >= 0) {
          return v18;
        }
      }
    }
    else
    {
      return INFINITY;
    }
  }
  return v7;
}

BOOL sub_2168B8734(uint64_t a1, int a2, int a3, unint64_t *a4)
{
  if (a2 < 1)
  {
    LODWORD(v6) = 0;
    unint64_t v7 = 0;
  }
  else
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    while (1)
    {
      int v8 = *(char *)(a1 + v6);
      if (v7 == 0x1999999999999999 && v8 > 53) {
        break;
      }
      unint64_t v7 = (v8 - 48) + 10 * v7;
      if (++v6 >= (unint64_t)a2 || v7 > 0x1999999999999999) {
        goto LABEL_10;
      }
    }
    unint64_t v7 = 0x1999999999999999;
  }
LABEL_10:
  if (a2 > (int)v6 && *(char *)(a1 + v6) > 52) {
    ++v7;
  }
  int v9 = a2 - v6;
  int v10 = __clz(v7);
  unint64_t v44 = v7 << v10;
  int v45 = -v10;
  uint64_t v11 = (4 * (v9 != 0)) << v10;
  int v12 = v9 + a3;
  unsigned int v13 = (v9 + a3 + 348) >> 3;
  unsigned int v14 = ((v9 + a3 + 348) & 0xFFFFFFF8) - 348;
  uint64_t v15 = qword_217454540[v13];
  uint64_t v16 = word_2174547F8[v13];
  v43[0] = v15;
  v43[1] = v16;
  int v17 = v12 - v14;
  if (v12 != v14)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26798B118, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_26798B118))
    {
      qword_26798B0A8[0] = 0xA000000000000000;
      dword_26798B0B0 = -60;
      qword_26798B0B8 = 0xC800000000000000;
      dword_26798B0C0 = -57;
      qword_26798B0C8 = 0xFA00000000000000;
      dword_26798B0D0 = -54;
      qword_26798B0D8 = 0x9C40000000000000;
      dword_26798B0E0 = -50;
      qword_26798B0E8 = 0xC350000000000000;
      dword_26798B0F0 = -47;
      qword_26798B0F8 = 0xF424000000000000;
      dword_26798B100 = -44;
      qword_26798B108 = 0x9896800000000000;
      dword_26798B110 = -40;
      __cxa_guard_release(&qword_26798B118);
    }
    unint64_t v44 = sub_2168B8A3C(&v44, &qword_26798B0A8[2 * v17 - 2]);
    int v45 = v18;
    if (v17 + a2 > 19) {
      v11 += 4;
    }
  }
  unint64_t v19 = sub_2168B8A3C(&v44, v43);
  uint64_t v21 = 8;
  if (v11) {
    uint64_t v21 = 9;
  }
  int v22 = __clz(v19);
  unint64_t v23 = v19 << v22;
  int v24 = v20 - v22;
  uint64_t v25 = (v21 + v11) << v22;
  int v26 = v20 - v22 + 1138;
  if (v24 < -1137) {
    int v26 = 0;
  }
  if (v24 > -1086) {
    int v26 = 53;
  }
  int v27 = 64 - v26;
  unint64_t v28 = v23 >> (4 - v26);
  uint64_t v29 = (v25 >> (4 - v26)) + 9;
  BOOL v30 = v26 <= 3;
  if (v26 <= 3) {
    int v31 = 4 - v26 + v24;
  }
  else {
    int v31 = v24;
  }
  if (v30) {
    unint64_t v23 = v28;
  }
  if (v30)
  {
    int v32 = 60;
  }
  else
  {
    LODWORD(v29) = v25;
    int v32 = v27;
  }
  unint64_t v33 = v23 >> v32;
  int v34 = v31 + v32;
  unint64_t v35 = 8 * (v23 & ~(-1 << v32));
  uint64_t v36 = 8 << (v32 - 1);
  unint64_t v37 = v36 + v29;
  if (v35 >= v37 && (++v33 & 0x20000000000000) != 0)
  {
    v33 >>= 1;
    ++v34;
  }
  if (v34 >= -1074)
  {
    if (v34 <= 971)
    {
      BOOL v39 = (v33 & 0x10000000000000) == 0 && v34 == -1074;
      unint64_t v40 = (unint64_t)(v34 + 1075) << 52;
      if (v39) {
        unint64_t v40 = 0;
      }
      unint64_t v38 = v40 & 0xFFF0000000000000 | v33 & 0xFFFFFFFFFFFFFLL;
    }
    else
    {
      unint64_t v38 = 0x7FF0000000000000;
    }
  }
  else
  {
    unint64_t v38 = 0;
  }
  *a4 = v38;
  return v36 - (unint64_t)v29 >= v35 || v35 >= v37;
}

unint64_t sub_2168B8A3C(void *a1, void *a2)
{
  uint64_t v2 = HIDWORD(*a1);
  uint64_t v3 = HIDWORD(*a2);
  unint64_t v4 = v3 * (unint64_t)*a1;
  unint64_t v5 = *a2 * (unint64_t)v2;
  return HIDWORD(v5)
       + v3 * (unint64_t)v2
       + HIDWORD(v4)
       + ((((*a2 * (unint64_t)*a1) >> 32)
         + v5
         + v4
         + 0x80000000) >> 32);
}

uint64_t sub_2168B8A9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (void *)MEMORY[0x270FA5388](a1, a2, a3);
  BOOL v6 = (v5 & 0x7FF0000000000000) != 0;
  if ((v5 & 0xFFFFFFFFFFFFFLL) == 0) {
    BOOL v6 = 1;
  }
  int v7 = ((v5 >> 52) & 0x7FF) - 1075;
  if (v6) {
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFFLL | 0x10000000000000;
  }
  else {
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFFLL;
  }
  if (!v6) {
    int v7 = -1074;
  }
  int v9 = v7 - 1;
  unsigned int v10 = v4 & ~(v4 >> 31);
  if (v4 < 0) {
    unsigned int v11 = -v4;
  }
  else {
    unsigned int v11 = 0;
  }
  BOOL v12 = v7 <= 0;
  if (v7 < 0) {
    int v13 = v7;
  }
  else {
    int v13 = 0;
  }
  unsigned int v14 = (v7 & ~(v7 >> 31)) + v11;
  if (v12) {
    int v15 = v9;
  }
  else {
    int v15 = 0;
  }
  if (v12) {
    int v9 = 0;
  }
  signed int v16 = v10 - (v15 + v13);
  signed int v17 = v14 - v15;
  signed int v18 = v11 - v13 + v9;
  if (v16 >= v17) {
    signed int v19 = v17;
  }
  else {
    signed int v19 = v10 - (v15 + v13);
  }
  if (v19 >= v18) {
    signed int v19 = v18;
  }
  unint64_t v20 = (v16 - v19);
  unint64_t v21 = (v17 - v19);
  unint64_t v22 = (v18 - v19);
  uint64_t v37 = v3[416];
  memcpy(v36, v3, 8 * v37);
  unint64_t v23 = sub_2168B8DA0(v36, v10);
  sub_2168B8E38(v23, v20);
  v35[416] = 1;
  v35[0] = v8;
  int v24 = sub_2168B8DA0(v35, v11);
  sub_2168B8E38(v24, v21);
  unint64_t v34 = 1;
  v33[0] = 1;
  uint64_t v25 = sub_2168B8DA0(v33, v11);
  sub_2168B8E38(v25, v22);
  unint64_t v32 = 1;
  v31[0] = 0;
  sub_2168B90C8((uint64_t)v36, (uint64_t)v35, (uint64_t)v31);
  unint64_t v26 = v32;
  BOOL v27 = v32 >= v34;
  if (v32 == v34)
  {
    while (v26)
    {
      unint64_t v28 = v31[v26 - 1];
      unint64_t v29 = v33[--v26];
      BOOL v27 = v28 >= v29;
      if (v28 != v29) {
        goto LABEL_28;
      }
    }
    return 0;
  }
  else
  {
LABEL_28:
    if (v27) {
      return 1;
    }
    else {
      return 0xFFFFFFFFLL;
    }
  }
}

unint64_t *sub_2168B8C5C(unint64_t *a1, char *a2, unint64_t a3)
{
  unint64_t v3 = a3;
  int v4 = a2;
  a1[416] = 1;
  *a1 = 0;
  if (a3 < 0x13)
  {
    uint64_t v9 = 0;
    if (!a3) {
      return a1;
    }
LABEL_7:
    sub_2168B8D00(a1, &v4[v9], &v4[v9 + v3]);
    return a1;
  }
  uint64_t v6 = 0;
  do
  {
    int v7 = a2 + 19;
    sub_2168B8D00(a1, a2, a2 + 19);
    v6 -= 19;
    uint64_t v8 = v3 + v6;
    a2 = v7;
  }
  while (v3 + v6 > 0x12);
  uint64_t v9 = -v6;
  v3 += v6;
  if (v8) {
    goto LABEL_7;
  }
  return a1;
}

unint64_t *sub_2168B8D00(unint64_t *result, char *a2, char *a3)
{
  if (a2 == a3)
  {
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = 0;
    int v4 = a2;
    do
    {
      int v5 = *v4++;
      uint64_t v3 = (v5 - 48) + 10 * v3;
    }
    while (v4 != a3);
  }
  if (result[416] == 1 && !*result)
  {
    *uint64_t result = v3;
    result[416] = 1;
  }
  else
  {
    unsigned int v6 = a3 - a2;
    unint64_t v7 = v6;
    uint64_t v8 = sub_2168B8DA0(result, v6);
    uint64_t v9 = sub_2168B8E38(v8, v7);
    return sub_2168B8F18(v9, v3);
  }
  return result;
}

unint64_t *sub_2168B8DA0(unint64_t *a1, unsigned int a2)
{
  if (a2)
  {
    unsigned int v3 = a2;
    if (a2 >= 0x1B)
    {
      do
      {
        sub_2168B8F74(a1, 0x6765C793FA10079DuLL);
        v3 -= 27;
      }
      while (v3 > 0x1A);
    }
    if (v3 >= 0xD)
    {
      do
      {
        sub_2168B9030(a1, 0x48C27395u);
        v3 -= 13;
      }
      while (v3 > 0xC);
    }
    if (v3) {
      sub_2168B9030(a1, dword_2174548A8[v3 - 1]);
    }
  }
  return a1;
}

void *sub_2168B8E38(void *__src, unint64_t a2)
{
  uint64_t v3 = __src[416];
  if (v3 == 1)
  {
    BOOL v4 = *__src == 0;
    if (!a2) {
      return __src;
    }
  }
  else
  {
    BOOL v4 = 0;
    if (!a2) {
      return __src;
    }
  }
  if (!v4)
  {
    unint64_t v5 = a2 >> 6;
    char v6 = a2 & 0x3F;
    if ((a2 & 0x3F) != 0)
    {
      __src[v3] = 0;
      if (v3)
      {
        uint64_t v7 = v3;
        do
        {
          __src[v5 + v7] = (__src[v7] << v6) | (__src[v7 - 1] >> 1 >> (v6 ^ 0x3Fu));
          --v7;
        }
        while (v7);
      }
      __src[v5] = *__src << v6;
      uint64_t v8 = v3 + v5;
      __src[416] = v8;
      if (!__src[v8]) {
        goto LABEL_14;
      }
      unint64_t v9 = v8 + 1;
    }
    else
    {
      memmove(&__src[v5], __src, 8 * v3);
      unint64_t v9 = __src[416] + v5;
    }
    __src[416] = v9;
LABEL_14:
    bzero(__src, 8 * v5);
  }
  return __src;
}

unint64_t *sub_2168B8F18(unint64_t *result, uint64_t a2)
{
  unint64_t v2 = *result;
  unint64_t v3 = *result + a2;
  *uint64_t result = v3;
  unint64_t v4 = result[416];
  if (v4 == 1)
  {
LABEL_5:
    if (result[v4 - 1] < v2)
    {
      result[416] = v4 + 1;
      result[v4] = 1;
    }
  }
  else
  {
    unint64_t v5 = result + 1;
    unint64_t v6 = v4 - 1;
    while (v3 < v2)
    {
      unint64_t v2 = *v5;
      unint64_t v3 = *v5 + 1;
      *v5++ = v3;
      if (!--v6) {
        goto LABEL_5;
      }
    }
  }
  return result;
}

unint64_t *sub_2168B8F74(unint64_t *result, unint64_t a2)
{
  if (a2 != 1)
  {
    if (!a2)
    {
      *uint64_t result = 0;
LABEL_4:
      result[416] = 1;
      return result;
    }
    unint64_t v2 = result[416];
    if (v2)
    {
      if (v2 == 1 && *result == 1)
      {
        *uint64_t result = a2;
        goto LABEL_4;
      }
      unint64_t v3 = 0;
      unsigned int v4 = a2;
      unint64_t v5 = HIDWORD(a2);
      unint64_t v6 = result;
      unint64_t v7 = result[416];
      do
      {
        unsigned int v8 = *v6;
        unint64_t v9 = HIDWORD(*v6);
        unint64_t v10 = v8 * (unint64_t)v4;
        unint64_t v11 = v9 * (unint64_t)v4;
        unint64_t v12 = v9 * (unint64_t)v5;
        unint64_t v13 = v8 * (unint64_t)v5 + v11 + HIDWORD(v10);
        unint64_t v14 = v12 + 0x100000000;
        if (v13 >= v11) {
          unint64_t v14 = v12;
        }
        unint64_t v15 = v14 + HIDWORD(v13);
        unint64_t v16 = v3 + v10 + (v13 << 32);
        if (v16 >= v3) {
          unint64_t v3 = v15;
        }
        else {
          unint64_t v3 = v15 + 1;
        }
        *v6++ = v16;
        --v7;
      }
      while (v7);
      if (v3)
      {
        result[416] = v2 + 1;
        result[v2] = v3;
      }
    }
  }
  return result;
}

unint64_t *sub_2168B9030(unint64_t *result, unsigned int a2)
{
  if (a2 != 1)
  {
    if (!a2)
    {
      *uint64_t result = 0;
LABEL_4:
      result[416] = 1;
      return result;
    }
    unint64_t v2 = result[416];
    if (v2)
    {
      if (v2 == 1 && *result == 1)
      {
        *uint64_t result = a2;
        goto LABEL_4;
      }
      unint64_t v3 = 0;
      unsigned int v4 = result;
      unint64_t v5 = result[416];
      do
      {
        unint64_t v6 = v3 + *v4 * (unint64_t)a2;
        unint64_t v7 = HIDWORD(v6) + HIDWORD(*v4) * a2;
        *v4++ = v6 | ((unint64_t)v7 << 32);
        unint64_t v3 = HIDWORD(v7);
        --v5;
      }
      while (v5);
      if (v3)
      {
        result[416] = v2 + 1;
        result[v2] = v3;
      }
    }
  }
  return result;
}

uint64_t sub_2168B90C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(a1 + 3328);
  unint64_t v4 = *(void *)(a2 + 3328);
  BOOL v5 = v3 >= v4;
  if (v3 == v4)
  {
    while (v3)
    {
      uint64_t v6 = a1 + 8 * v3;
      uint64_t v7 = a2 + 8 * v3--;
      unint64_t v8 = *(void *)(v6 - 8);
      unint64_t v9 = *(void *)(v7 - 8);
      BOOL v5 = v8 >= v9;
      if (v8 != v9) {
        goto LABEL_4;
      }
    }
    goto LABEL_12;
  }
LABEL_4:
  LOBYTE(v3) = !v5;
  if (v5)
  {
    uint64_t v10 = a1;
    if ((v3 & 1) == 0)
    {
LABEL_12:
      uint64_t v10 = a1;
      goto LABEL_13;
    }
LABEL_11:
    a2 = a1;
    goto LABEL_13;
  }
  uint64_t v10 = a2;
  if (v3) {
    goto LABEL_11;
  }
LABEL_13:
  unint64_t v11 = *(void *)(v10 + 3328);
  if (v11)
  {
    unint64_t v12 = 0;
    uint64_t v13 = 0;
    do
    {
      unint64_t v14 = *(void *)(v10 + 8 * v12);
      unint64_t v15 = v14 + v13;
      if (v12 < *(void *)(a2 + 3328)) {
        v15 -= *(void *)(a2 + 8 * v12);
      }
      if (v15 <= v14) {
        uint64_t v13 = 0;
      }
      else {
        uint64_t v13 = -1;
      }
      *(void *)(a3 + 8 * v12++) = v15;
      if (v15)
      {
        *(void *)(a3 + 3328) = v12;
        unint64_t v11 = *(void *)(v10 + 3328);
      }
    }
    while (v12 < v11);
  }
  return v3 & 1;
}

uint64_t sub_2168B9178(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = a2;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = a4;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(void *)(a1 + 80) = a3;
  *(_DWORD *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  if (!a2)
  {
    BOOL v5 = operator new(0x18uLL);
    *BOOL v5 = 0x10000;
    uint64_t v6 = operator new(1uLL);
    uint64_t v7 = malloc(0x38uLL);
    v5[1] = v6;
    v5[2] = v7;
    void v7[4] = 0;
    *uint64_t v7 = v7 + 4;
    v7[1] = v6;
    v7[5] = 0;
    v7[6] = 0;
    *((unsigned char *)v7 + 24) = 1;
    v7[2] = 1;
    *(void *)(a1 + 24) = v5;
    *(void *)(a1 + 32) = v5;
  }
  return a1;
}

void sub_2168B9224(_Unwind_Exception *a1)
{
  operator delete(v2);
  sub_2168B3CA4(v1);
  _Unwind_Resume(a1);
}

void *sub_2168B9248(void *a1)
{
  if (a1[4])
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  sub_2168B928C((uint64_t)a1);
  sub_2168B3CA4((uint64_t)(a1 + 5));
  return a1;
}

void sub_2168B928C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    unint64_t v2 = (void *)sub_2168B92C4(v1);
    operator delete(v2);
  }
}

uint64_t sub_2168B92C4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    unint64_t v3 = *(void *)(v2 + 16);
    if (v3 < 2)
    {
      sub_2168B9330(a1);
      uint64_t v4 = *(void *)(a1 + 16);
      BOOL v5 = *(void **)(v4 + 8);
      if (*(unsigned char *)(v4 + 24)) {
        free((void *)v4);
      }
      if (v5) {
        operator delete(v5);
      }
    }
    else
    {
      *(void *)(v2 + 16) = v3 - 1;
    }
  }
  return a1;
}

void *sub_2168B9330(uint64_t a1)
{
  for (uint64_t i = *(void *)(a1 + 16); ; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t result = *(void **)i;
    uint64_t v4 = *(void *)(*(void *)i + 16);
    if (!v4) {
      break;
    }
    *(void *)uint64_t i = v4;
    free(result);
  }
  result[1] = 0;
  return result;
}

__n128 sub_2168B9374(int *a1, long long *a2, __n128 *a3, uint64_t a4)
{
  unsigned int v7 = *a1;
  uint64_t v8 = a1[1];
  if (*a1 >= v8)
  {
    if (v8) {
      unsigned int v9 = v8 + ((v8 + 1) >> 1);
    }
    else {
      unsigned int v9 = 16;
    }
    if (v8 < v9)
    {
      *((void *)a1 + 1) = sub_2168B9438(a4, *((char **)a1 + 1), 48 * v8, 48 * v9);
      a1[1] = v9;
      unsigned int v7 = *a1;
    }
  }
  uint64_t v10 = *((void *)a1 + 1) + 48 * v7;
  long long v11 = *a2;
  *(void *)(v10 + 16) = *((void *)a2 + 2);
  *(_OWORD *)uint64_t v10 = v11;
  *((_WORD *)a2 + 11) = 0;
  __n128 result = *a3;
  *(void *)(v10 + 40) = a3[1].n128_u64[0];
  *(__n128 *)(v10 + 24) = result;
  a3[1].n128_u16[3] = 0;
  ++*a1;
  return result;
}

uint64_t sub_2168B9438(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    if (a4)
    {
      BOOL v5 = a2;
      size_t v6 = (a3 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v7 = (a4 + 7) & 0xFFFFFFFFFFFFFFF8;
      if (v7 <= v6) {
        return (uint64_t)v5;
      }
      uint64_t v8 = **(unint64_t ***)(a1 + 16);
      unint64_t v9 = v8[1];
      if ((char *)v8 + v9 - v6 + 24 == v5)
      {
        unint64_t v10 = v9 + v7 - v6;
        if (v10 <= *v8)
        {
          v8[1] = v10;
          return (uint64_t)v5;
        }
      }
      long long v11 = (void *)sub_2168B94FC(a1, v7);
      if (v11)
      {
        unint64_t v12 = v11;
        if (v6) {
          memcpy(v11, v5, v6);
        }
        return (uint64_t)v12;
      }
    }
    return 0;
  }
  return sub_2168B94FC(a1, a4);
}

uint64_t sub_2168B94FC(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  unint64_t v3 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = **(void ***)(a1 + 16);
  uint64_t v5 = v4[1];
  uint64_t v6 = v5 + v3;
  if (v5 + v3 <= *v4)
  {
LABEL_3:
    uint64_t result = (uint64_t)v4 + v5 + 24;
    v4[1] = v6;
    return result;
  }
  if (*(void *)a1 <= v3) {
    unint64_t v8 = (a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  }
  else {
    unint64_t v8 = *(void *)a1;
  }
  if (sub_2168B958C(a1, v8))
  {
    uint64_t v4 = **(void ***)(a1 + 16);
    uint64_t v5 = v4[1];
    uint64_t v6 = v5 + v3;
    goto LABEL_3;
  }
  return 0;
}

size_t sub_2168B958C(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 8))
  {
    uint64_t v4 = operator new(1uLL);
    *(void *)(a1 + 8) = v4;
    *(void *)(*(void *)(a1 + 16) + 8) = v4;
  }
  size_t result = a2 + 24;
  if (a2 != -24)
  {
    size_t result = (size_t)malloc(result);
    if (result)
    {
      *(void *)size_t result = a2;
      *(void *)(result + 8) = 0;
      uint64_t v6 = *(size_t **)(a1 + 16);
      *(void *)(result + 16) = *v6;
      *uint64_t v6 = result;
      return 1;
    }
  }
  return result;
}

int *sub_2168B95F4(int *a1, long long *a2, uint64_t a3)
{
  unsigned int v5 = *a1;
  uint64_t v6 = a1[1];
  if (*a1 >= v6)
  {
    if (v6) {
      unsigned int v7 = v6 + ((v6 + 1) >> 1);
    }
    else {
      unsigned int v7 = 16;
    }
    if (v6 < v7)
    {
      *((void *)a1 + 1) = sub_2168B9438(a3, *((char **)a1 + 1), 24 * v6, 24 * v7);
      a1[1] = v7;
      unsigned int v5 = *a1;
    }
  }
  uint64_t v8 = *((void *)a1 + 1);
  *a1 = v5 + 1;
  uint64_t v9 = v8 + 24 * v5;
  long long v10 = *a2;
  *(void *)(v9 + 16) = *((void *)a2 + 2);
  *(_OWORD *)uint64_t v9 = v10;
  *((_WORD *)a2 + 11) = 0;
  return a1;
}

void *sub_2168B96A0(_WORD *__dst, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = __dst;
  if (*(_DWORD *)(a2 + 8) > 0x15u)
  {
    __dst[11] = 3077;
    *(_DWORD *)long long __dst = *(_DWORD *)(a2 + 8);
    uint64_t v5 = sub_2168B94FC(a3, (*(_DWORD *)(a2 + 8) + 1));
    v4[1] = v5;
    uint64_t v4 = (void *)v5;
  }
  else
  {
    __dst[11] = 7173;
    *((unsigned char *)__dst + 21) = 21 - *(unsigned char *)(a2 + 8);
  }
  size_t result = memcpy(v4, *(const void **)a2, *(unsigned int *)(a2 + 8));
  *((unsigned char *)v4 + *(unsigned int *)(a2 + 8)) = 0;
  return result;
}

uint64_t sub_2168B972C(uint64_t a1)
{
  sub_2168B9B70((unsigned char *)a1);
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(a1 + 40) - v2 <= 15)
  {
    sub_2168B50B4((void *)(a1 + 8), 1);
    uint64_t v2 = *(void *)(a1 + 32);
  }
  *(void *)(a1 + 32) = v2 + 16;
  *(void *)uint64_t v2 = 0;
  *(unsigned char *)(v2 + 8) = 0;

  return sub_2168B9FE8((void **)a1);
}

uint64_t sub_2168B979C(void **a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = *(v2 - 2);
  a1[4] = v2 - 2;
  if (v3)
  {
    uint64_t v4 = (uint64_t)*a1;
    uint64_t v5 = (unsigned char *)(*a1)[3];
    if ((uint64_t)((*a1)[4] - (void)v5) <= 0)
    {
      sub_2168B799C(*a1, 1);
      uint64_t v5 = *(unsigned char **)(v4 + 24);
    }
    *(void *)(v4 + 24) = v5 + 1;
    *uint64_t v5 = 10;
    sub_2168B9E48((uint64_t)a1);
  }
  sub_2168BA040(a1);
  return 1;
}

uint64_t sub_2168B9818(uint64_t a1)
{
  sub_2168B9B70((unsigned char *)a1);
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(a1 + 40) - v2 <= 15)
  {
    sub_2168B50B4((void *)(a1 + 8), 1);
    uint64_t v2 = *(void *)(a1 + 32);
  }
  *(void *)(a1 + 32) = v2 + 16;
  *(void *)uint64_t v2 = 0;
  *(unsigned char *)(v2 + 8) = 1;

  return sub_2168BA098((void **)a1);
}

uint64_t sub_2168B988C(void **a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = *(v2 - 2);
  a1[4] = v2 - 2;
  if (v3 && (*((unsigned char *)a1 + 68) & 1) == 0)
  {
    uint64_t v4 = (uint64_t)*a1;
    uint64_t v5 = (unsigned char *)(*a1)[3];
    if ((uint64_t)((*a1)[4] - (void)v5) <= 0)
    {
      sub_2168B799C(*a1, 1);
      uint64_t v5 = *(unsigned char **)(v4 + 24);
    }
    *(void *)(v4 + 24) = v5 + 1;
    *uint64_t v5 = 10;
    sub_2168B9E48((uint64_t)a1);
  }
  sub_2168BA0F0(a1);
  return 1;
}

uint64_t sub_2168B9910(unsigned char *a1, unsigned int a2)
{
  sub_2168B9B70(a1);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(unsigned char **)(*(void *)a1 + 24);
  if ((uint64_t)(*(void *)(*(void *)a1 + 32) - (void)v5) <= 10)
  {
    sub_2168B799C(*(void **)a1, 11);
    uint64_t v5 = *(unsigned char **)(v4 + 24);
  }
  *(void *)(v4 + 24) = v5 + 11;
  if ((a2 & 0x80000000) != 0)
  {
    *uint64_t v5 = 45;
    uint64_t v6 = v5 + 1;
    a2 = -a2;
  }
  else
  {
    uint64_t v6 = v5;
  }
  *(void *)(*(void *)a1 + 24) = sub_2168B4258(a2, v6) - v5 + *(void *)(*(void *)a1 + 24) - 11;
  return 1;
}

uint64_t sub_2168B99B4(unsigned char *a1, unsigned int a2)
{
  sub_2168B9B70(a1);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(unsigned char **)(*(void *)a1 + 24);
  if ((uint64_t)(*(void *)(*(void *)a1 + 32) - (void)v5) <= 9)
  {
    sub_2168B799C(*(void **)a1, 10);
    uint64_t v5 = *(unsigned char **)(v4 + 24);
  }
  *(void *)(v4 + 24) = v5 + 10;
  *(void *)(*(void *)a1 + 24) = sub_2168B4258(a2, v5) - v5 + *(void *)(*(void *)a1 + 24) - 10;
  return 1;
}

uint64_t sub_2168B9A40(unsigned char *a1, unint64_t a2)
{
  sub_2168B9B70(a1);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(unsigned char **)(*(void *)a1 + 24);
  if ((uint64_t)(*(void *)(*(void *)a1 + 32) - (void)v5) <= 20)
  {
    sub_2168B799C(*(void **)a1, 21);
    uint64_t v5 = *(unsigned char **)(v4 + 24);
  }
  *(void *)(v4 + 24) = v5 + 21;
  if ((a2 & 0x8000000000000000) != 0)
  {
    *uint64_t v5 = 45;
    uint64_t v6 = v5 + 1;
    a2 = -(uint64_t)a2;
  }
  else
  {
    uint64_t v6 = v5;
  }
  *(void *)(*(void *)a1 + 24) = sub_2168B4728(a2, v6) - v5 + *(void *)(*(void *)a1 + 24) - 21;
  return 1;
}

uint64_t sub_2168B9AE4(unsigned char *a1, unint64_t a2)
{
  sub_2168B9B70(a1);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(unsigned char **)(*(void *)a1 + 24);
  if ((uint64_t)(*(void *)(*(void *)a1 + 32) - (void)v5) <= 19)
  {
    sub_2168B799C(*(void **)a1, 20);
    uint64_t v5 = *(unsigned char **)(v4 + 24);
  }
  *(void *)(v4 + 24) = v5 + 20;
  *(void *)(*(void *)a1 + 24) = sub_2168B4728(a2, v5) - v5 + *(void *)(*(void *)a1 + 24) - 20;
  return 1;
}

unsigned char *sub_2168B9B70(unsigned char *result)
{
  uint64_t v1 = result;
  uint64_t v2 = *((void *)result + 4);
  if (v2 == *((void *)result + 3))
  {
    result[60] = 1;
    return result;
  }
  uint64_t v3 = *(void *)(v2 - 16);
  if (*(unsigned char *)(v2 - 8))
  {
    if (v3)
    {
      uint64_t v4 = *(void **)result;
      uint64_t v5 = *(unsigned char **)(*(void *)result + 24);
      if ((uint64_t)(*(void *)(*(void *)result + 32) - (void)v5) <= 0)
      {
        unint64_t v16 = *(void **)result;
        size_t result = sub_2168B799C(v4, 1);
        uint64_t v4 = v16;
        uint64_t v5 = (unsigned char *)v16[3];
      }
      v4[3] = v5 + 1;
      *uint64_t v5 = 44;
      if (v1[68])
      {
        uint64_t v6 = *(void **)v1;
        unsigned int v7 = *(unsigned char **)(*(void *)v1 + 24);
        if ((uint64_t)(*(void *)(*(void *)v1 + 32) - (void)v7) <= 0)
        {
          signed int v19 = *(void **)v1;
          size_t result = sub_2168B799C(v6, 1);
          uint64_t v6 = v19;
          unsigned int v7 = (unsigned char *)v19[3];
        }
        v6[3] = v7 + 1;
        *unsigned int v7 = 32;
      }
    }
    if (v1[68]) {
      goto LABEL_30;
    }
    uint64_t v8 = *(void **)v1;
    uint64_t v9 = *(unsigned char **)(*(void *)v1 + 24);
    if ((uint64_t)(*(void *)(*(void *)v1 + 32) - (void)v9) <= 0)
    {
      signed int v17 = *(void **)v1;
      sub_2168B799C(v8, 1);
      uint64_t v8 = v17;
      uint64_t v9 = (unsigned char *)v17[3];
    }
    float v8[3] = v9 + 1;
    *uint64_t v9 = 10;
    goto LABEL_29;
  }
  if (!v3) {
    goto LABEL_20;
  }
  long long v10 = *(void **)result;
  long long v11 = *(unsigned char **)(*(void *)result + 24);
  if ((v3 & 1) == 0)
  {
    if ((uint64_t)(*(void *)(*(void *)result + 32) - (void)v11) <= 0)
    {
      unint64_t v20 = *(void **)result;
      size_t result = sub_2168B799C(v10, 1);
      long long v10 = v20;
      long long v11 = (unsigned char *)v20[3];
    }
    v10[3] = v11 + 1;
    *long long v11 = 44;
LABEL_20:
    unint64_t v12 = *(void **)v1;
    uint64_t v13 = *(char **)(*(void *)v1 + 24);
    if ((uint64_t)(*(void *)(*(void *)v1 + 32) - (void)v13) <= 0)
    {
      signed int v18 = *(void **)v1;
      size_t result = sub_2168B799C(v12, 1);
      unint64_t v12 = v18;
      uint64_t v13 = (char *)v18[3];
    }
    void v12[3] = v13 + 1;
    char v14 = 10;
    goto LABEL_28;
  }
  if ((uint64_t)(*(void *)(*(void *)result + 32) - (void)v11) <= 0)
  {
    unint64_t v21 = *(void **)result;
    size_t result = sub_2168B799C(v10, 1);
    long long v10 = v21;
    long long v11 = (unsigned char *)v21[3];
  }
  v10[3] = v11 + 1;
  *long long v11 = 58;
  unint64_t v15 = *(void **)v1;
  uint64_t v13 = *(char **)(*(void *)v1 + 24);
  if ((uint64_t)(*(void *)(*(void *)v1 + 32) - (void)v13) <= 0)
  {
    unint64_t v22 = *(void **)v1;
    size_t result = sub_2168B799C(v15, 1);
    unint64_t v15 = v22;
    uint64_t v13 = (char *)v22[3];
  }
  v15[3] = v13 + 1;
  char v14 = 32;
LABEL_28:
  *uint64_t v13 = v14;
  if ((*(unsigned char *)(v2 - 16) & 1) == 0) {
LABEL_29:
  }
    size_t result = sub_2168B9E48((uint64_t)v1);
LABEL_30:
  ++*(void *)(v2 - 16);
  return result;
}

uint64_t sub_2168B9DA8(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = (unsigned char *)v2[3];
  if ((uint64_t)(v2[4] - (void)v3) <= 3)
  {
    sub_2168B799C(v2, 4);
    uint64_t v2 = *(void **)a1;
    uint64_t v3 = *(unsigned char **)(*(void *)a1 + 24);
  }
  v2[3] = v3 + 1;
  unsigned char *v3 = 110;
  uint64_t v4 = *(unsigned char **)(*(void *)a1 + 24);
  *(void *)(*(void *)a1 + 24) = v4 + 1;
  *uint64_t v4 = 117;
  uint64_t v5 = *(unsigned char **)(*(void *)a1 + 24);
  *(void *)(*(void *)a1 + 24) = v5 + 1;
  *uint64_t v5 = 108;
  uint64_t v6 = *(unsigned char **)(*(void *)a1 + 24);
  *(void *)(*(void *)a1 + 24) = v6 + 1;
  *uint64_t v6 = 108;
  return 1;
}

void *sub_2168B9E48(uint64_t a1)
{
  int64_t v1 = ((*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 4) * *(unsigned int *)(a1 + 64);
  uint64_t v2 = *(void **)a1;
  int v3 = *(unsigned __int8 *)(a1 + 61);
  uint64_t v4 = *(char **)(*(void *)a1 + 24);
  if (v2[4] - (void)v4 < v1)
  {
    sub_2168B799C(v2, v1);
    uint64_t v4 = (char *)v2[3];
  }
  v2[3] = &v4[v1];

  return memset(v4, v3, v1);
}

uint64_t sub_2168B9ECC(uint64_t a1, int a2)
{
  int v3 = *(void **)a1;
  uint64_t v4 = (unsigned char *)v3[3];
  uint64_t v5 = v3[4] - (void)v4;
  if (a2)
  {
    if (v5 <= 3)
    {
      sub_2168B799C(v3, 4);
      int v3 = *(void **)a1;
      uint64_t v4 = *(unsigned char **)(*(void *)a1 + 24);
    }
    v3[3] = v4 + 1;
    *uint64_t v4 = 116;
    uint64_t v6 = *(unsigned char **)(*(void *)a1 + 24);
    *(void *)(*(void *)a1 + 24) = v6 + 1;
    *uint64_t v6 = 114;
    unsigned int v7 = *(char **)(*(void *)a1 + 24);
    *(void *)(*(void *)a1 + 24) = v7 + 1;
    char v8 = 117;
  }
  else
  {
    if (v5 <= 4)
    {
      sub_2168B799C(v3, 5);
      int v3 = *(void **)a1;
      uint64_t v4 = *(unsigned char **)(*(void *)a1 + 24);
    }
    v3[3] = v4 + 1;
    *uint64_t v4 = 102;
    uint64_t v9 = *(unsigned char **)(*(void *)a1 + 24);
    *(void *)(*(void *)a1 + 24) = v9 + 1;
    *uint64_t v9 = 97;
    long long v10 = *(unsigned char **)(*(void *)a1 + 24);
    *(void *)(*(void *)a1 + 24) = v10 + 1;
    *long long v10 = 108;
    unsigned int v7 = *(char **)(*(void *)a1 + 24);
    *(void *)(*(void *)a1 + 24) = v7 + 1;
    char v8 = 115;
  }
  *unsigned int v7 = v8;
  long long v11 = *(unsigned char **)(*(void *)a1 + 24);
  *(void *)(*(void *)a1 + 24) = v11 + 1;
  *long long v11 = 101;
  return 1;
}

uint64_t sub_2168B9FE8(void **a1)
{
  uint64_t v1 = (uint64_t)*a1;
  uint64_t v2 = (unsigned char *)(*a1)[3];
  if ((uint64_t)((*a1)[4] - (void)v2) <= 0)
  {
    sub_2168B799C(*a1, 1);
    uint64_t v2 = *(unsigned char **)(v1 + 24);
  }
  *(void *)(v1 + 24) = v2 + 1;
  *uint64_t v2 = 123;
  return 1;
}

uint64_t sub_2168BA040(void **a1)
{
  uint64_t v1 = (uint64_t)*a1;
  uint64_t v2 = (unsigned char *)(*a1)[3];
  if ((uint64_t)((*a1)[4] - (void)v2) <= 0)
  {
    sub_2168B799C(*a1, 1);
    uint64_t v2 = *(unsigned char **)(v1 + 24);
  }
  *(void *)(v1 + 24) = v2 + 1;
  *uint64_t v2 = 125;
  return 1;
}

uint64_t sub_2168BA098(void **a1)
{
  uint64_t v1 = (uint64_t)*a1;
  uint64_t v2 = (unsigned char *)(*a1)[3];
  if ((uint64_t)((*a1)[4] - (void)v2) <= 0)
  {
    sub_2168B799C(*a1, 1);
    uint64_t v2 = *(unsigned char **)(v1 + 24);
  }
  *(void *)(v1 + 24) = v2 + 1;
  *uint64_t v2 = 91;
  return 1;
}

uint64_t sub_2168BA0F0(void **a1)
{
  uint64_t v1 = (uint64_t)*a1;
  uint64_t v2 = (unsigned char *)(*a1)[3];
  if ((uint64_t)((*a1)[4] - (void)v2) <= 0)
  {
    sub_2168B799C(*a1, 1);
    uint64_t v2 = *(unsigned char **)(v1 + 24);
  }
  *(void *)(v1 + 24) = v2 + 1;
  *uint64_t v2 = 93;
  return 1;
}

uint64_t sub_2168BA148(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void **)a1;
  uint64_t v7 = 6 * a3 + 2;
  char v8 = (unsigned char *)v6[3];
  if (v6[4] - (void)v8 < v7)
  {
    sub_2168B799C(v6, v7);
    uint64_t v6 = *(void **)a1;
    char v8 = *(unsigned char **)(*(void *)a1 + 24);
  }
  v6[3] = v8 + 1;
  *char v8 = 34;
  if (a3)
  {
    unint64_t v9 = 0;
    do
    {
      unint64_t v10 = *(unsigned __int8 *)(a2 + v9);
      int v11 = a0123456789abcd_0[v10 + 16];
      unint64_t v12 = *(unsigned char **)(*(void *)a1 + 24);
      *(void *)(*(void *)a1 + 24) = v12 + 1;
      if (v11)
      {
        *unint64_t v12 = 92;
        uint64_t v13 = *(unsigned char **)(*(void *)a1 + 24);
        *(void *)(*(void *)a1 + 24) = v13 + 1;
        *uint64_t v13 = v11;
        if (v11 == 117)
        {
          char v14 = *(unsigned char **)(*(void *)a1 + 24);
          *(void *)(*(void *)a1 + 24) = v14 + 1;
          *char v14 = 48;
          unint64_t v15 = *(unsigned char **)(*(void *)a1 + 24);
          *(void *)(*(void *)a1 + 24) = v15 + 1;
          *unint64_t v15 = 48;
          LOBYTE(v15) = a0123456789abcd_0[v10 >> 4];
          unint64_t v16 = *(unsigned char **)(*(void *)a1 + 24);
          *(void *)(*(void *)a1 + 24) = v16 + 1;
          *unint64_t v16 = (_BYTE)v15;
          char v17 = a0123456789abcd_0[v10 & 0xF];
          signed int v18 = *(char **)(*(void *)a1 + 24);
          *(void *)(*(void *)a1 + 24) = v18 + 1;
          *signed int v18 = v17;
        }
      }
      else
      {
        *unint64_t v12 = v10;
      }
      ++v9;
    }
    while (v9 < a3);
  }
  signed int v19 = *(unsigned char **)(*(void *)a1 + 24);
  *(void *)(*(void *)a1 + 24) = v19 + 1;
  *signed int v19 = 34;
  return 1;
}

uint64_t sub_2168BA2A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a1;
  if (v6[4] - v6[3] < a3)
  {
    sub_2168B799C(v6, a3);
    if (!a3) {
      return 1;
    }
  }
  else if (!a3)
  {
    return 1;
  }
  unint64_t v7 = 0;
  do
  {
    char v8 = *(unsigned char *)(a2 + v7);
    unint64_t v9 = *(unsigned char **)(*(void *)a1 + 24);
    *(void *)(*(void *)a1 + 24) = v9 + 1;
    *unint64_t v9 = v8;
    ++v7;
  }
  while (v7 < a3);
  return 1;
}

void sub_2168BA32C(int a1, uint64_t *__p)
{
  if (__p)
  {
    uint64_t v3 = *__p;
    *std::string __p = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    operator delete(__p);
  }
}

void pxrInternal__aapl__pxrReserved__::JsFindValue(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(a2 + 8);
  }
  if (!v5)
  {
    v11[0] = "js/utils.cpp";
    v11[1] = "JsFindValue";
    v11[2] = 40;
    v11[3] = "JsOptionalValue pxrInternal__aapl__pxrReserved__::JsFindValue(const JsObject &, const std::string &, const "
             "JsOptionalValue &)";
    char v12 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v11, 1, (pxrInternal__aapl__pxrReserved__ *)"Key is empty");
    *(unsigned char *)a4 = 0;
    *(unsigned char *)(a4 + 16) = 0;
    return;
  }
  uint64_t v8 = sub_21678C2D8(a1, (const void **)a2);
  if (a1 + 8 == v8)
  {
    *(unsigned char *)a4 = 0;
    *(unsigned char *)(a4 + 16) = 0;
    if (!*((unsigned char *)a3 + 16)) {
      return;
    }
    uint64_t v10 = *a3;
    uint64_t v9 = a3[1];
  }
  else
  {
    uint64_t v10 = *(void *)(v8 + 56);
    uint64_t v9 = *(void *)(v8 + 64);
  }
  *(void *)a4 = v10;
  *(void *)(a4 + 8) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a4 + 16) = 1;
}

void *pxrInternal__aapl__pxrReserved__::JsValue::JsValue(pxrInternal__aapl__pxrReserved__::JsValue *this)
{
  uint64_t v2 = operator new(0x28uLL);
  v2[6] = 6;
  v2[8] = 6;

  return sub_2168BBE7C(this, (uint64_t)v2);
}

{
  _DWORD *v2;
  uint64_t vars8;

  uint64_t v2 = operator new(0x28uLL);
  v2[6] = 6;
  v2[8] = 6;

  return sub_2168BBE7C(this, (uint64_t)v2);
}

void *pxrInternal__aapl__pxrReserved__::JsValue::JsValue(void *a1, const void ***a2)
{
  uint64_t v4 = operator new(0x28uLL);
  sub_2168BB750(&v7, a2);
  uint64_t v5 = v7;
  unint64_t v7 = 0;
  *(void *)uint64_t v4 = v5;
  v4[6] = 0;
  sub_2168BB8F8((void ***)&v7, 0);
  v4[8] = 0;
  return sub_2168BBE7C(a1, (uint64_t)v4);
}

void sub_2168BA588(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::JsValue::JsValue(void *a1, void *a2)
{
  uint64_t v4 = operator new(0x28uLL);
  sub_2168BB94C(&v7, a2);
  uint64_t v5 = v7;
  unint64_t v7 = 0;
  *(void *)uint64_t v4 = v5;
  v4[6] = 0;
  sub_2168BB8F8(&v7, 0);
  v4[8] = 0;
  return sub_2168BBE7C(a1, (uint64_t)v4);
}

void sub_2168BA618(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::JsValue::JsValue(void *a1, void **a2)
{
  uint64_t v4 = operator new(0x28uLL);
  sub_2168BB9B8(&v7, a2);
  uint64_t v5 = v7;
  unint64_t v7 = 0;
  *(void *)uint64_t v4 = v5;
  v4[6] = 1;
  sub_2168BBAAC(&v7, 0);
  v4[8] = 1;
  return sub_2168BBE7C(a1, (uint64_t)v4);
}

void sub_2168BA6AC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::JsValue::JsValue(void *a1, uint64_t a2)
{
  uint64_t v4 = operator new(0x28uLL);
  sub_2168BBAF0((uint64_t)v4, a2);

  return sub_2168BBE7C(a1, (uint64_t)v4);
}

{
  void *v4;
  uint64_t v5;
  uint64_t vars8;

  uint64_t v4 = operator new(0x28uLL);
  uint64_t v5 = (uint64_t)v4;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_216778F24(v4, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
    v4[2] = *(void *)(a2 + 16);
  }
  *(_DWORD *)(v5 + 24) = 2;
  *(_DWORD *)(v5 + 32) = 2;

  return sub_2168BBE7C(a1, v5);
}

{
  void *v4;
  uint64_t vars8;

  uint64_t v4 = operator new(0x28uLL);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
  v4[2] = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *((_DWORD *)v4 + 6) = 2;
  *((_DWORD *)v4 + 8) = 2;

  return sub_2168BBE7C(a1, (uint64_t)v4);
}

{
  void *v4;
  uint64_t vars8;

  uint64_t v4 = operator new(0x28uLL);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
  v4[2] = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *((_DWORD *)v4 + 6) = 2;
  *((_DWORD *)v4 + 8) = 2;

  return sub_2168BBE7C(a1, (uint64_t)v4);
}

void sub_2168BA71C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::JsValue::JsValue(pxrInternal__aapl__pxrReserved__::JsValue *this, char *a2)
{
  uint64_t v4 = operator new(0x28uLL);
  sub_216779094(&v6, a2);
  *(_OWORD *)uint64_t v4 = v6;
  v4[2] = v7;
  *((_DWORD *)v4 + 6) = 2;
  *((_DWORD *)v4 + 8) = 2;
  return sub_2168BBE7C(this, (uint64_t)v4);
}

void sub_2168BA7A8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2168BA844(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::JsValue::JsValue(pxrInternal__aapl__pxrReserved__::JsValue *this, char a2)
{
  uint64_t v4 = operator new(0x28uLL);
  *(unsigned char *)uint64_t v4 = a2;
  v4[6] = 3;
  v4[8] = 3;

  return sub_2168BBE7C(this, (uint64_t)v4);
}

{
  _DWORD *v4;
  uint64_t vars8;

  uint64_t v4 = operator new(0x28uLL);
  *(unsigned char *)uint64_t v4 = a2;
  v4[6] = 3;
  v4[8] = 3;

  return sub_2168BBE7C(this, (uint64_t)v4);
}

void *pxrInternal__aapl__pxrReserved__::JsValue::JsValue(pxrInternal__aapl__pxrReserved__::JsValue *this, int a2)
{
  uint64_t v4 = operator new(0x28uLL);
  *(void *)uint64_t v4 = a2;
  v4[6] = 4;
  v4[8] = 4;

  return sub_2168BBE7C(this, (uint64_t)v4);
}

{
  _DWORD *v4;
  uint64_t vars8;

  uint64_t v4 = operator new(0x28uLL);
  *(void *)uint64_t v4 = a2;
  v4[6] = 4;
  v4[8] = 4;

  return sub_2168BBE7C(this, (uint64_t)v4);
}

void *pxrInternal__aapl__pxrReserved__::JsValue::JsValue(pxrInternal__aapl__pxrReserved__::JsValue *this, uint64_t a2)
{
  uint64_t v4 = operator new(0x28uLL);
  *(void *)uint64_t v4 = a2;
  v4[6] = 4;
  v4[8] = 4;

  return sub_2168BBE7C(this, (uint64_t)v4);
}

{
  _DWORD *v4;
  uint64_t vars8;

  uint64_t v4 = operator new(0x28uLL);
  *(void *)uint64_t v4 = a2;
  v4[6] = 4;
  v4[8] = 4;

  return sub_2168BBE7C(this, (uint64_t)v4);
}

{
  _DWORD *v4;
  uint64_t vars8;

  uint64_t v4 = operator new(0x28uLL);
  *(void *)uint64_t v4 = a2;
  v4[6] = 7;
  v4[8] = 4;

  return sub_2168BBE7C(this, (uint64_t)v4);
}

{
  _DWORD *v4;
  uint64_t vars8;

  uint64_t v4 = operator new(0x28uLL);
  *(void *)uint64_t v4 = a2;
  v4[6] = 7;
  v4[8] = 4;

  return sub_2168BBE7C(this, (uint64_t)v4);
}

void *pxrInternal__aapl__pxrReserved__::JsValue::JsValue(pxrInternal__aapl__pxrReserved__::JsValue *this, double a2)
{
  uint64_t v4 = (double *)operator new(0x28uLL);
  *uint64_t v4 = a2;
  *((_DWORD *)v4 + 6) = 5;
  *((_DWORD *)v4 + 8) = 5;

  return sub_2168BBE7C(this, (uint64_t)v4);
}

{
  double *v4;
  uint64_t vars8;

  uint64_t v4 = (double *)operator new(0x28uLL);
  *uint64_t v4 = a2;
  *((_DWORD *)v4 + 6) = 5;
  *((_DWORD *)v4 + 8) = 5;

  return sub_2168BBE7C(this, (uint64_t)v4);
}

unint64_t pxrInternal__aapl__pxrReserved__::JsValue::GetJsObject(unint64_t **this)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v8 = 0;
  uint64_t v2 = (int *)(*this + 4);
  LODWORD(v5[0]) = 0;
  if (sub_2168BAD90(v2, (int *)v5, (uint64_t)__p))
  {
    if (*((_DWORD *)*this + 6)) {
      sub_2168BBB60();
    }
    unint64_t v3 = **this;
  }
  else
  {
    v5[0] = "js/value.cpp";
    v5[1] = "GetJsObject";
    v5[2] = 261;
    void v5[3] = "const JsObject &pxrInternal__aapl__pxrReserved__::JsValue::GetJsObject() const";
    char v6 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (uint64_t *)__p);
    unint64_t v3 = atomic_load((unint64_t *)&qword_267B8E5B0);
    if (!v3) {
      unint64_t v3 = sub_2168BC034(&qword_267B8E5B0);
    }
  }
  if (SHIBYTE(v8) < 0) {
    operator delete(__p[0]);
  }
  return v3;
}

void sub_2168BAD6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_2168BAD90(int *a1, int *a2, uint64_t a3)
{
  int v3 = *a1;
  int v4 = *a2;
  if (a3 && v3 != v4)
  {
    sub_2168BB5B4(a2, v16);
    int v7 = v17;
    uint64_t v8 = (void **)v16[0];
    sub_2168BB5B4(a1, __p);
    if (v7 >= 0) {
      int v11 = v16;
    }
    else {
      int v11 = v8;
    }
    if (v15 >= 0) {
      char v12 = __p;
    }
    else {
      char v12 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Attempt to get %s from value holding %s", v9, v10, v11, v12);
    if (*(char *)(a3 + 23) < 0) {
      operator delete(*(void **)a3);
    }
    *(_OWORD *)a3 = v18;
    *(void *)(a3 + 16) = v19;
    HIBYTE(v19) = 0;
    LOBYTE(v18) = 0;
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    if (v17 < 0) {
      operator delete(v16[0]);
    }
  }
  return v3 == v4;
}

void sub_2168BAE8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

unint64_t pxrInternal__aapl__pxrReserved__::JsValue::GetJsArray(unint64_t **this)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v8 = 0;
  uint64_t v2 = (int *)(*this + 4);
  LODWORD(v5[0]) = 1;
  if (sub_2168BAD90(v2, (int *)v5, (uint64_t)__p))
  {
    if (*((_DWORD *)*this + 6) != 1) {
      sub_2168BBB60();
    }
    unint64_t v3 = **this;
  }
  else
  {
    v5[0] = "js/value.cpp";
    v5[1] = "GetJsArray";
    v5[2] = 275;
    void v5[3] = "const JsArray &pxrInternal__aapl__pxrReserved__::JsValue::GetJsArray() const";
    char v6 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (uint64_t *)__p);
    unint64_t v3 = atomic_load((unint64_t *)&qword_267B8E5B8);
    if (!v3) {
      unint64_t v3 = sub_2168BC0A0(&qword_267B8E5B8);
    }
  }
  if (SHIBYTE(v8) < 0) {
    operator delete(__p[0]);
  }
  return v3;
}

void sub_2168BAFA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t pxrInternal__aapl__pxrReserved__::JsValue::GetString(pxrInternal__aapl__pxrReserved__::JsValue *this)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v8 = 0;
  uint64_t v2 = (int *)(*(void *)this + 32);
  LODWORD(v5[0]) = 2;
  if (sub_2168BAD90(v2, (int *)v5, (uint64_t)__p))
  {
    unint64_t v3 = *(void *)this;
    if (*(_DWORD *)(v3 + 24) != 2) {
      sub_2168BBB60();
    }
  }
  else
  {
    v5[0] = "js/value.cpp";
    v5[1] = "GetString";
    v5[2] = 289;
    void v5[3] = "const std::string &pxrInternal__aapl__pxrReserved__::JsValue::GetString() const";
    char v6 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (uint64_t *)__p);
    unint64_t v3 = atomic_load((unint64_t *)&qword_267B8E5C0);
    if (!v3) {
      unint64_t v3 = sub_2168BC10C(&qword_267B8E5C0);
    }
  }
  if (SHIBYTE(v8) < 0) {
    operator delete(__p[0]);
  }
  return v3;
}

void sub_2168BB09C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::JsValue::GetBool(pxrInternal__aapl__pxrReserved__::JsValue *this)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v8 = 0;
  uint64_t v2 = (int *)(*(void *)this + 32);
  LODWORD(v5[0]) = 3;
  if (sub_2168BAD90(v2, (int *)v5, (uint64_t)__p))
  {
    if (*(_DWORD *)(*(void *)this + 24) != 3) {
      sub_2168BBB60();
    }
    BOOL v3 = **(unsigned __int8 **)this != 0;
  }
  else
  {
    v5[0] = "js/value.cpp";
    v5[1] = "GetBool";
    v5[2] = 301;
    void v5[3] = "BOOL pxrInternal__aapl__pxrReserved__::JsValue::GetBool() const";
    char v6 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (uint64_t *)__p);
    BOOL v3 = 0;
  }
  if (SHIBYTE(v8) < 0) {
    operator delete(__p[0]);
  }
  return v3;
}

void sub_2168BB188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::JsValue::GetInt(uint64_t **this)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v8 = 0;
  uint64_t v2 = (int *)(*this + 4);
  LODWORD(v5[0]) = 4;
  if (sub_2168BAD90(v2, (int *)v5, (uint64_t)__p))
  {
    uint64_t Int64 = pxrInternal__aapl__pxrReserved__::JsValue::GetInt64(this);
  }
  else
  {
    v5[0] = "js/value.cpp";
    v5[1] = "GetInt";
    v5[2] = 313;
    void v5[3] = "int pxrInternal__aapl__pxrReserved__::JsValue::GetInt() const";
    char v6 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (uint64_t *)__p);
    uint64_t Int64 = 0;
  }
  if (SHIBYTE(v8) < 0) {
    operator delete(__p[0]);
  }
  return Int64;
}

void sub_2168BB25C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::JsValue::GetInt64(uint64_t **this)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v9 = 0;
  uint64_t v2 = (int *)(*this + 4);
  LODWORD(v6[0]) = 4;
  if (sub_2168BAD90(v2, (int *)v6, (uint64_t)__p))
  {
    int v3 = *((_DWORD *)*this + 6);
    if (v3 == 4)
    {
      uint64_t UInt64 = **this;
    }
    else
    {
      if (v3 != 7) {
        sub_2168BBB60();
      }
      uint64_t UInt64 = pxrInternal__aapl__pxrReserved__::JsValue::GetUInt64(this);
    }
  }
  else
  {
    v6[0] = "js/value.cpp";
    v6[1] = "GetInt64";
    v6[2] = 325;
    v6[3] = "int64_t pxrInternal__aapl__pxrReserved__::JsValue::GetInt64() const";
    char v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v6, 1, (uint64_t *)__p);
    uint64_t UInt64 = 0;
  }
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  return UInt64;
}

void sub_2168BB358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::JsValue::IsUInt64(pxrInternal__aapl__pxrReserved__::JsValue *this)
{
  return *(_DWORD *)(*(void *)this + 24) == 7;
}

uint64_t pxrInternal__aapl__pxrReserved__::JsValue::GetUInt64(uint64_t **this)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v8 = 0;
  uint64_t v2 = (int *)(*this + 4);
  LODWORD(v5[0]) = 4;
  if (sub_2168BAD90(v2, (int *)v5, (uint64_t)__p))
  {
    if (*((_DWORD *)*this + 6) == 7) {
      uint64_t Int64 = **this;
    }
    else {
      uint64_t Int64 = pxrInternal__aapl__pxrReserved__::JsValue::GetInt64((pxrInternal__aapl__pxrReserved__::JsValue *)this);
    }
  }
  else
  {
    v5[0] = "js/value.cpp";
    v5[1] = "GetUInt64";
    v5[2] = 340;
    void v5[3] = "uint64_t pxrInternal__aapl__pxrReserved__::JsValue::GetUInt64() const";
    char v6 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (uint64_t *)__p);
    uint64_t Int64 = 0;
  }
  if (SHIBYTE(v8) < 0) {
    operator delete(__p[0]);
  }
  return Int64;
}

void sub_2168BB458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double pxrInternal__aapl__pxrReserved__::JsValue::GetReal(uint64_t **this)
{
  uint64_t v2 = *this;
  int v3 = *this;
  int v5 = *((_DWORD *)v3 + 8);
  int v4 = (int *)(v3 + 4);
  if (v5 == 4)
  {
    if (*((_DWORD *)v2 + 6) == 7) {
      return (double)(unint64_t)pxrInternal__aapl__pxrReserved__::JsValue::GetUInt64(this);
    }
    else {
      return (double)pxrInternal__aapl__pxrReserved__::JsValue::GetInt64(this);
    }
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v11 = 0;
    LODWORD(v8[0]) = 5;
    if (sub_2168BAD90(v4, (int *)v8, (uint64_t)__p))
    {
      if (*((_DWORD *)*this + 6) != 5) {
        sub_2168BBB60();
      }
      double v6 = *(double *)*this;
    }
    else
    {
      v8[0] = "js/value.cpp";
      v8[1] = "GetReal";
      float64x2_t v8[2] = 361;
      float v8[3] = "double pxrInternal__aapl__pxrReserved__::JsValue::GetReal() const";
      char v9 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v8, 1, (uint64_t *)__p);
      double v6 = 0.0;
    }
    if (SHIBYTE(v11) < 0) {
      operator delete(__p[0]);
    }
  }
  return v6;
}

void sub_2168BB578(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::JsValue::GetType(pxrInternal__aapl__pxrReserved__::JsValue *this)
{
  return *(unsigned int *)(*(void *)this + 32);
}

void *pxrInternal__aapl__pxrReserved__::JsValue::GetTypeName@<X0>(pxrInternal__aapl__pxrReserved__::JsValue *this@<X0>, void *a2@<X8>)
{
  return sub_2168BB5B4((int *)(*(void *)this + 32), a2);
}

void *sub_2168BB5B4@<X0>(int *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  if (v4 > 6) {
    int v5 = "unknown";
  }
  else {
    int v5 = off_2642943B8[v4];
  }
  return sub_216779094(a2, v5);
}

BOOL pxrInternal__aapl__pxrReserved__::JsValue::IsObject(pxrInternal__aapl__pxrReserved__::JsValue *this)
{
  return *(_DWORD *)(*(void *)this + 32) == 0;
}

BOOL pxrInternal__aapl__pxrReserved__::JsValue::IsArray(pxrInternal__aapl__pxrReserved__::JsValue *this)
{
  return *(_DWORD *)(*(void *)this + 32) == 1;
}

BOOL pxrInternal__aapl__pxrReserved__::JsValue::IsString(pxrInternal__aapl__pxrReserved__::JsValue *this)
{
  return *(_DWORD *)(*(void *)this + 32) == 2;
}

BOOL pxrInternal__aapl__pxrReserved__::JsValue::IsBool(pxrInternal__aapl__pxrReserved__::JsValue *this)
{
  return *(_DWORD *)(*(void *)this + 32) == 3;
}

BOOL pxrInternal__aapl__pxrReserved__::JsValue::IsInt(pxrInternal__aapl__pxrReserved__::JsValue *this)
{
  return *(_DWORD *)(*(void *)this + 32) == 4;
}

BOOL pxrInternal__aapl__pxrReserved__::JsValue::IsReal(pxrInternal__aapl__pxrReserved__::JsValue *this)
{
  return *(_DWORD *)(*(void *)this + 32) == 5;
}

BOOL pxrInternal__aapl__pxrReserved__::JsValue::IsNull(pxrInternal__aapl__pxrReserved__::JsValue *this)
{
  return *(_DWORD *)(*(void *)this + 32) == 6;
}

BOOL pxrInternal__aapl__pxrReserved__::JsValue::operator BOOL(uint64_t a1)
{
  return *(_DWORD *)(*(void *)a1 + 32) != 6;
}

uint64_t pxrInternal__aapl__pxrReserved__::JsValue::operator==(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  if (*(_DWORD *)(v2 + 32) == *(_DWORD *)(v3 + 32)) {
    return sub_2168BB6A8(v2, v3);
  }
  else {
    return 0;
  }
}

uint64_t sub_2168BB6A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 24);
  int v5 = *(_DWORD *)(a2 + 24);
  BOOL v6 = v5 == v4;
  BOOL v9 = v5 == -1;
  BOOL v7 = v5 == -1;
  if (v9) {
    BOOL v6 = 0;
  }
  if (v4 == -1) {
    uint64_t result = v7;
  }
  else {
    uint64_t result = v6;
  }
  BOOL v9 = v4 == -1 || !v6;
  if (!v9)
  {
    uint64_t v11 = &v10;
    return ((uint64_t (*)(char **, uint64_t))off_26C74C998[v4])(&v11, a1);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::JsValue::operator!=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  if (*(_DWORD *)(v2 + 32) == *(_DWORD *)(v3 + 32)) {
    return sub_2168BB6A8(v2, v3) ^ 1;
  }
  else {
    return 1;
  }
}

uint64_t **sub_2168BB750(uint64_t **a1, const void ***a2)
{
  uint64_t v4 = (uint64_t *)operator new(0x18uLL);
  sub_2168BB7AC(v4, a2);
  *a1 = v4;
  return a1;
}

void sub_2168BB798(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_2168BB7AC(uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_2168BB804(a1, *a2, a2 + 1);
  return a1;
}

void sub_2168BB7EC(_Unwind_Exception *a1)
{
  sub_216812ED4(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_2168BB804(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    uint64_t v4 = a2;
    int v5 = (uint64_t **)result;
    BOOL v6 = result + 1;
    do
    {
      uint64_t result = sub_2170A39A0(v5, v6, v4 + 4, (long long *)v4 + 2);
      BOOL v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = (const void ***)v7;
          BOOL v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          uint64_t v4 = (const void **)v8;
        }
        while (!v9);
      }
      uint64_t v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

void *sub_2168BB890(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  uint64_t v5 = *((void *)a2 + 4);
  __dst[3] = *((void *)a2 + 3);
  __dst[4] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return __dst;
}

void sub_2168BB8F8(void ***a1, void **a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    sub_216812ED4((uint64_t)v2, v2[1]);
    operator delete(v2);
  }
}

void *sub_2168BB94C(void *a1, void *a2)
{
  long long v4 = operator new(0x18uLL);
  uint64_t v5 = a2 + 1;
  uint64_t v6 = a2[1];
  *long long v4 = *a2;
  v4[1] = v6;
  BOOL v7 = v4 + 1;
  uint64_t v8 = a2[2];
  v4[2] = v8;
  if (v8)
  {
    *(void *)(v6 + 16) = v7;
    *a2 = v5;
    *uint64_t v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *long long v4 = v7;
  }
  *a1 = v4;
  return a1;
}

void *sub_2168BB9B8(void *a1, void **a2)
{
  long long v4 = operator new(0x18uLL);
  v4[1] = 0;
  v4[2] = 0;
  *long long v4 = 0;
  sub_2168BBA24(v4, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  *a1 = v4;
  return a1;
}

void sub_2168BBA10(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_2168BBA24(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_21682BF78(result, a4);
    uint64_t result = sub_2168B83E4((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_2168BBA8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_216787968(&a9);
  _Unwind_Resume(a1);
}

void sub_2168BBAAC(void ***a1, void **a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    uint64_t v3 = v2;
    sub_216787968(&v3);
    operator delete(v2);
  }
}

uint64_t sub_2168BBAF0(uint64_t a1, uint64_t a2)
{
  long long v4 = operator new(0x18uLL);
  *(_OWORD *)long long v4 = *(_OWORD *)a2;
  v4[2] = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v6 = 0;
  *(void *)a1 = v4;
  *(_DWORD *)(a1 + 24) = 1;
  sub_2168BBAAC(&v6, 0);
  *(_DWORD *)(a1 + 32) = 1;
  return a1;
}

void sub_2168BBB60()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x263F8C3A8] + 16;
  __cxa_throw(exception, MEMORY[0x263F8C1F8], (void (*)(void *))std::exception::~exception);
}

uint64_t sub_2168BBBB0(uint64_t a1, uint64_t a2, unsigned __int8 ***a3)
{
  return sub_2168BBC44(a2, a3);
}

uint64_t sub_2168BBBBC(uint64_t a1, uint64_t ***a2, uint64_t ***a3)
{
  return sub_2168BBDF8(a2, a3);
}

uint64_t sub_2168BBBC8(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  return sub_2168513F8((uint64_t)&v4, a2, a3);
}

BOOL sub_2168BBBEC(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  return *a2 == *a3;
}

BOOL sub_2168BBC00(uint64_t a1, void *a2, void *a3)
{
  return *a2 == *a3;
}

BOOL sub_2168BBC14(uint64_t a1, double *a2, double *a3)
{
  return *a2 == *a3;
}

uint64_t sub_2168BBC28()
{
  return 1;
}

BOOL sub_2168BBC30(uint64_t a1, void *a2, void *a3)
{
  return *a2 == *a3;
}

uint64_t sub_2168BBC44(uint64_t a1, unsigned __int8 ***a2)
{
  uint64_t v2 = *(void **)a1;
  if (*(unsigned __int8 **)(*(void *)a1 + 16) != (*a2)[2]) {
    return 0;
  }
  uint64_t v5 = (unsigned __int8 *)*v2;
  uint64_t v3 = (unsigned __int8 *)(v2 + 1);
  char v4 = v5;
  if (v5 == v3) {
    return 1;
  }
  uint64_t v6 = **a2;
  do
  {
    uint64_t result = sub_2168BBD24((uint64_t)&v13, v4 + 32, v6 + 32);
    if (!result) {
      break;
    }
    uint64_t v8 = (unsigned __int8 *)*((void *)v4 + 1);
    uint64_t v9 = v4;
    if (v8)
    {
      do
      {
        char v4 = v8;
        uint64_t v8 = *(unsigned __int8 **)v8;
      }
      while (v8);
    }
    else
    {
      do
      {
        char v4 = (unsigned __int8 *)*((void *)v9 + 2);
        BOOL v10 = *(void *)v4 == (void)v9;
        uint64_t v9 = v4;
      }
      while (!v10);
    }
    uint64_t v11 = (unsigned __int8 *)*((void *)v6 + 1);
    if (v11)
    {
      do
      {
        char v12 = v11;
        uint64_t v11 = *(unsigned __int8 **)v11;
      }
      while (v11);
    }
    else
    {
      do
      {
        char v12 = (unsigned __int8 *)*((void *)v6 + 2);
        BOOL v10 = *(void *)v12 == (void)v6;
        uint64_t v6 = v12;
      }
      while (!v10);
    }
    uint64_t v6 = v12;
  }
  while (v4 != v3);
  return result;
}

uint64_t sub_2168BBD24(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v4 = a2[23];
  size_t v5 = *((void *)a2 + 1);
  if ((v4 & 0x80u) == 0) {
    uint64_t v6 = a2[23];
  }
  else {
    uint64_t v6 = *((void *)a2 + 1);
  }
  uint64_t v7 = a3[23];
  int v8 = (char)v7;
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *((void *)a3 + 1);
  }
  if (v6 != v7) {
    return 0;
  }
  if (v8 >= 0) {
    BOOL v10 = a3;
  }
  else {
    BOOL v10 = *(unsigned __int8 **)a3;
  }
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, v10, v5)) {
      return 0;
    }
  }
  else if (v4)
  {
    uint64_t v11 = a2;
    while (*v11 == *v10)
    {
      ++v11;
      ++v10;
      if (!--v4) {
        goto LABEL_17;
      }
    }
    return 0;
  }
LABEL_17:
  uint64_t v12 = *((void *)a2 + 3);
  uint64_t v13 = *((void *)a3 + 3);
  if (*(_DWORD *)(v12 + 32) != *(_DWORD *)(v13 + 32)) {
    return 0;
  }

  return sub_2168BB6A8(v12, v13);
}

uint64_t sub_2168BBDF8(uint64_t ***a1, uint64_t ***a2)
{
  uint64_t v3 = **a1;
  uint64_t v2 = (*a1)[1];
  uint64_t v4 = **a2;
  if ((char *)v2 - (char *)v3 != (char *)(*a2)[1] - (char *)v4) {
    return 0;
  }
  while (v3 != v2)
  {
    if (*(_DWORD *)(*v3 + 32) != *(_DWORD *)(*v4 + 32)) {
      return 0;
    }
    uint64_t result = sub_2168BB6A8(*v3, *v4);
    if (!result) {
      return result;
    }
    v3 += 2;
    v4 += 2;
  }
  return 1;
}

void *sub_2168BBE7C(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  *uint64_t v4 = &unk_26C74C9E8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_2168BBED4(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    uint64_t v3 = (void *)sub_2168BBF98(v1);
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_2168BBEF4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void sub_2168BBF1C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1)
  {
    uint64_t v2 = (void *)sub_2168BBF98(v1);
    operator delete(v2);
  }
}

uint64_t sub_2168BBF54(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C74CA78)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t sub_2168BBF98(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C74CA28[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

void sub_2168BBFF4(uint64_t a1, void ***a2)
{
}

void sub_2168BC000(uint64_t a1, void ***a2)
{
}

void sub_2168BC00C(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
}

unint64_t sub_2168BC034(atomic_ullong *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  uint64_t v3 = v2;
  uint64_t v4 = 0;
  v2[2] = 0;
  v2[1] = 0;
  *uint64_t v2 = v2 + 1;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v4, (unint64_t)v2);
  if (v4)
  {
    sub_216812ED4((uint64_t)v2, (void *)v2[1]);
    operator delete(v3);
    return atomic_load((unint64_t *)a1);
  }
  return (unint64_t)v3;
}

unint64_t sub_2168BC0A0(atomic_ullong *a1)
{
  uint64_t v2 = operator new(0x18uLL);
  uint64_t v3 = v2;
  uint64_t v4 = 0;
  v2[1] = 0;
  v2[2] = 0;
  *uint64_t v2 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v4, (unint64_t)v2);
  if (v4)
  {
    uint64_t v6 = (void **)v2;
    sub_216787968(&v6);
    operator delete(v3);
    return atomic_load((unint64_t *)a1);
  }
  return (unint64_t)v3;
}

unint64_t sub_2168BC10C(atomic_ullong *a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  uint64_t v3 = v2;
  uint64_t v4 = 0;
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v4, (unint64_t)v2);
  if (v4)
  {
    if (v2[23] < 0) {
      operator delete(*(void **)v2);
    }
    operator delete(v3);
    return atomic_load((unint64_t *)a1);
  }
  return (unint64_t)v3;
}

void pxrInternal__aapl__pxrReserved__::Trace_AggregateTreeBuilder::AddEventTreeToAggregate(uint64_t a1, void *a2, pxrInternal__aapl__pxrReserved__::TraceCollection **a3)
{
  pxrInternal__aapl__pxrReserved__::Trace_AggregateTreeBuilder::Trace_AggregateTreeBuilder(v4, a1, a2);
  pxrInternal__aapl__pxrReserved__::Trace_AggregateTreeBuilder::_CreateAggregateNodes((pxrInternal__aapl__pxrReserved__::Trace_AggregateTreeBuilder *)v4);
  pxrInternal__aapl__pxrReserved__::Trace_AggregateTreeBuilder::_ProcessCounters((pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor *)v4, a3);
  v4[0] = &unk_26C74CAA0;
  sub_2168BD348(&v5);
  pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor::~Visitor((pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor *)v4);
}

void sub_2168BC1F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168BC7FC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Trace_AggregateTreeBuilder::_CreateAggregateNodes(pxrInternal__aapl__pxrReserved__::Trace_AggregateTreeBuilder *this)
{
  long long v40 = 0u;
  long long v38 = 0u;
  memset(v39, 0, sizeof(v39));
  memset(v37, 0, sizeof(v37));
  sub_2168BD6F4((uint64_t *)&__p, (uint64_t *)(*((void *)this + 1) + 24));
  __n128 v2 = sub_2168BD89C(v37, &__p);
  unint64_t v3 = __p.n128_u64[1];
  if (__p.n128_u64[1]
    && atomic_fetch_add_explicit((atomic_uint *volatile)(__p.n128_u64[1] + 8), 0xFFFFFFFF, memory_order_release) == 1)
  {
    (*(void (**)(unint64_t, __n128))(*(void *)v3 + 8))(v3, v2);
  }
  uint64_t v4 = sub_2168BC958((uint64_t *)this + 2);
  uint64_t v5 = *(void *)(sub_2168BC9E4((uint64_t *)(v4 + 24)) + 56);
  while (1)
  {
    uint64_t v6 = sub_2168BC958((uint64_t *)this + 2);
    if (v5 == *(void *)(sub_2168BC9E4((uint64_t *)(v6 + 24)) + 48)) {
      break;
    }
    uint64_t v7 = *(void *)(v5 - 8);
    v5 -= 8;
    *(void *)&long long v36 = v7;
    sub_2168BD80C((uint64_t *)&v36);
    DWORD2(v36) = 0;
    unint64_t v8 = v36;
    *(void *)&long long v36 = 0;
    __n128 __p = (__n128)v8;
    sub_2168BDC44(v39, &__p);
    sub_2168BD7DC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&__p);
    sub_2168BD7DC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v36);
  }
  pxrInternal__aapl__pxrReserved__::TraceThreadId::TraceThreadId((pxrInternal__aapl__pxrReserved__::TraceThreadId *)&__p);
  if (v35 < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
  for (uint64_t i = *((void *)&v40 + 1); *((void *)&v40 + 1); uint64_t i = *((void *)&v40 + 1))
  {
    unint64_t v10 = i + v40 - 1;
    uint64_t v11 = *(void *)(*((void *)&v39[0] + 1) + ((v10 >> 5) & 0x7FFFFFFFFFFFFF8));
    uint64_t v12 = v10;
    __p.n128_u64[0] = *(void *)(v11 + 16 * v10);
    sub_2168BD80C((uint64_t *)&__p);
    __p.n128_u64[1] = *(void *)(v11 + 16 * v12 + 8);
    sub_2168BDFF0(v39);
    unint64_t v13 = __p.n128_u64[1];
    if (!__p.n128_u64[1])
    {
      uint64_t v14 = *(void *)(sub_2168BC9E4((uint64_t *)&__p) + 40);
      uint64_t v15 = sub_2168BC9E4((uint64_t *)&__p);
      uint64_t v16 = *((void *)&v38 + 1);
      unint64_t v17 = v14 - *(void *)(v15 + 32);
      if (v17 && *((void *)&v38 + 1) >= 2uLL)
      {
        uint64_t v18 = *((void *)this + 1);
        unint64_t v19 = *(void *)(sub_2168BC9E4((uint64_t *)&__p) + 16);
        unint64_t v31 = v19;
        if ((v19 & 7) != 0)
        {
          unint64_t v20 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)(v19 & 0xFFFFFFFFFFFFFFF8);
          if ((atomic_fetch_add_explicit((atomic_uint *volatile)v20, 2u, memory_order_relaxed) & 1) == 0) {
            unint64_t v31 = (unint64_t)v20;
          }
        }
        *(void *)&long long v36 = &v31;
        unint64_t v21 = sub_2168BE0C8((uint64_t **)(v18 + 32), (uint64_t *)&v31, (uint64_t)&unk_2174BFD90, (uint64_t **)&v36);
        v21[5] += v17;
        if ((v31 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        uint64_t v16 = *((void *)&v38 + 1);
      }
      unint64_t v22 = (uint64_t *)sub_2168BC8B0((uint64_t *)(*(void *)(*((void *)&v37[0] + 1)
                                                           + (((unint64_t)(v16 + v38 - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
                                               + 16 * (v16 + v38 - 1)));
      unint64_t v23 = *(atomic_uint **)(sub_2168BC9E4((uint64_t *)&__p) + 16);
      unint64_t v33 = v23;
      if ((v23 & 7) != 0)
      {
        int v24 = (atomic_uint *)((unint64_t)v23 & 0xFFFFFFFFFFFFFFF8);
        if ((atomic_fetch_add_explicit(v24, 2u, memory_order_relaxed) & 1) == 0) {
          unint64_t v33 = v24;
        }
      }
      pxrInternal__aapl__pxrReserved__::TraceAggregateNode::Append((pxrInternal__aapl__pxrReserved__::TfToken *)&v33, v22, 1, v17, 1, 1, (uint64_t *)&v31);
      sub_2168BD6F4((uint64_t *)&v36, (uint64_t *)&v31);
      sub_2168BD6C4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v31);
      if ((v33 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      sub_2168BE2C4(v37, &v36);
      uint64_t v25 = *((void *)&v36 + 1);
      if (*((void *)&v36 + 1)
        && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v36 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
      {
        (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
      }
      unint64_t v13 = __p.n128_u64[1];
    }
    uint64_t v26 = sub_2168BC9E4((uint64_t *)&__p);
    if (v13 >= (uint64_t)(*(void *)(v26 + 56) - *(void *)(v26 + 48)) >> 3)
    {
      sub_2168BE364(v37);
    }
    else
    {
      unint64_t v27 = __p.n128_u64[1];
      *(void *)&long long v36 = __p.n128_u64[0];
      sub_2168BD80C((uint64_t *)&v36);
      *((void *)&v36 + 1) = v27 + 1;
      sub_2168BDC44(v39, &v36);
      sub_2168BD7DC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v36);
      uint64_t v28 = sub_2168BC9E4((uint64_t *)&__p);
      unint64_t v31 = *(void *)(*(void *)(v28 + 48) + 8 * __p.n128_u64[1]);
      sub_2168BD80C((uint64_t *)&v31);
      int v32 = 0;
      unint64_t v29 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)v31;
      unint64_t v31 = 0;
      long long v36 = (unint64_t)v29;
      sub_2168BDC44(v39, &v36);
      sub_2168BD7DC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v36);
      sub_2168BD7DC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v31);
    }
    sub_2168BD7DC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&__p);
  }
  sub_2168BD438(v37);
  return sub_2168BD5A0(v39);
}

void sub_2168BC5F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  sub_2168BD438((uint64_t *)va);
  sub_2168BD5A0((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Trace_AggregateTreeBuilder::_ProcessCounters(pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor *a1, pxrInternal__aapl__pxrReserved__::TraceCollection **a2)
{
  pxrInternal__aapl__pxrReserved__::TraceCollection::Iterate(a2, a1);
  sub_2168BD6F4(&v5, (uint64_t *)(*((void *)a1 + 1) + 24));
  uint64_t v3 = sub_2168BC8B0(&v5);
  pxrInternal__aapl__pxrReserved__::TraceAggregateNode::CalculateInclusiveCounterValues(v3);
  uint64_t result = v6;
  if (v6)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_2168BC7E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_217324208(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_2168BC7FC(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  *a1 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)&unk_26C74CAA0;
  sub_2168BD348(a1 + 2);

  pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor::~Visitor((pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor *)a1);
}

void *pxrInternal__aapl__pxrReserved__::Trace_AggregateTreeBuilder::Trace_AggregateTreeBuilder(void *a1, uint64_t a2, void *a3)
{
  *a1 = &unk_26C74CAA0;
  a1[1] = a2;
  a1[2] = *a3;
  sub_2168BD80C(a1 + 2);
  return a1;
}

void sub_2168BC89C(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor::~Visitor(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2168BC8B0(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  __n128 v2 = a1 + 1;
  if (!v3
    || ((v4 = *(unsigned __int8 *)(sub_216850B68(v2) + 14), result = *a1, v4) ? (BOOL v6 = result == 0) : (BOOL v6 = 1), v6))
  {
    uint64_t v7 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/weakPtrFacade.h", 47);
    v8[0] = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/weakPtrFacade.h", (uint64_t)v7, 0x2Fu);
    v8[1] = "operator->";
    float64x2_t v8[2] = 216;
    float v8[3] = "DataType *pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr, pxr"
            "Internal__aapl__pxrReserved__::TraceAggregateNode>::operator->() const [PtrTemplate = pxrInternal__aapl__pxr"
            "Reserved__::TfWeakPtr, Type = pxrInternal__aapl__pxrReserved__::TraceAggregateNode]";
    char v9 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError((uint64_t)v8, (pxrInternal__aapl__pxrReserved__ *)(0x8000000217454B8BLL & 0x7FFFFFFFFFFFFFFFLL));
  }
  return result;
}

uint64_t sub_2168BC958(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    __n128 v2 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/refPtr.h", 47);
    v3[0] = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/refPtr.h", (uint64_t)v2, 0x2Fu);
    v3[1] = "operator->";
    v3[2] = 953;
    v3[3] = "T *pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::TraceEventTree>::operator->("
            ") const [U = pxrInternal__aapl__pxrReserved__::TraceEventTree]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError((uint64_t)v3, (pxrInternal__aapl__pxrReserved__ *)(0x8000000217454BD4 & 0x7FFFFFFFFFFFFFFFLL));
  }
  return result;
}

uint64_t sub_2168BC9E4(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    __n128 v2 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/refPtr.h", 47);
    v3[0] = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/refPtr.h", (uint64_t)v2, 0x2Fu);
    v3[1] = "operator->";
    v3[2] = 953;
    v3[3] = "T *pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::TraceEventNode>::operator->("
            ") const [U = pxrInternal__aapl__pxrReserved__::TraceEventNode]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError((uint64_t)v3, (pxrInternal__aapl__pxrReserved__ *)(0x8000000217454C18 & 0x7FFFFFFFFFFFFFFFLL));
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Trace_AggregateTreeBuilder::AcceptsCategory(pxrInternal__aapl__pxrReserved__::Trace_AggregateTreeBuilder *this)
{
  return 1;
}

void *pxrInternal__aapl__pxrReserved__::Trace_AggregateTreeBuilder::OnEvent(pxrInternal__aapl__pxrReserved__::Trace_AggregateTreeBuilder *this, const pxrInternal__aapl__pxrReserved__::TraceThreadId *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TraceEvent *a4)
{
  uint64_t result = (void *)pxrInternal__aapl__pxrReserved__::TraceEvent::GetType(a4);
  if ((result - 5) <= 1)
  {
    return pxrInternal__aapl__pxrReserved__::Trace_AggregateTreeBuilder::_OnCounterEvent(this, a2, a3, a4);
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::Trace_AggregateTreeBuilder::_OnCounterEvent(pxrInternal__aapl__pxrReserved__::Trace_AggregateTreeBuilder *this, const pxrInternal__aapl__pxrReserved__::TraceThreadId *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TraceEvent *a4)
{
  uint64_t result = (void *)pxrInternal__aapl__pxrReserved__::TraceEvent::GetType(a4);
  if (result == 6)
  {
    int v8 = 0;
  }
  else
  {
    if (result != 5) {
      return result;
    }
    int v8 = 1;
  }
  uint64_t v9 = *((void *)this + 1) + 56;
  uint64_t v10 = *(void *)a3;
  if ((*(void *)a3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v10 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v29 = v10;
  BOOL v30 = 0;
  uint64_t v11 = (double *)sub_2168BE408(v9, &v29, (double *)&v29);
  if ((v29 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  double CounterValue = pxrInternal__aapl__pxrReserved__::TraceEvent::GetCounterValue(a4);
  if (v8) {
    double CounterValue = CounterValue + v11[3];
  }
  v11[3] = CounterValue;
  uint64_t v13 = *((void *)this + 1);
  uint64_t v14 = v13 + 96;
  uint64_t v15 = *(void *)a3;
  if ((*(void *)a3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v15 &= 0xFFFFFFFFFFFFFFF8;
  }
  int v16 = *(_DWORD *)(v13 + 136);
  uint64_t v29 = v15;
  LODWORD(v30) = v16;
  uint64_t result = sub_2168BE70C(v14, &v29, &v29);
  uint64_t v18 = result;
  if ((v29 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v17) {
    ++*(_DWORD *)(*((void *)this + 1) + 136);
  }
  if (v8)
  {
    unint64_t TimeStamp = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(a4);
    pxrInternal__aapl__pxrReserved__::Trace_AggregateTreeBuilder::_FindAggregateNode(this, TimeStamp, &v29);
    unint64_t v20 = sub_2168BD290(&v29);
    if (v22 & 1 | (unint64_t)v20)
    {
      unint64_t v23 = (pxrInternal__aapl__pxrReserved__::TraceAggregateNode *)sub_2168BC8B0(&v29);
      int v24 = *((_DWORD *)v18 + 6);
      double v25 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetCounterValue(a4);
      pxrInternal__aapl__pxrReserved__::TraceAggregateNode::AppendExclusiveCounterValue(v23, v24, v25);
      uint64_t v26 = (pxrInternal__aapl__pxrReserved__::TraceAggregateNode *)sub_2168BC8B0(&v29);
      int v27 = *((_DWORD *)v18 + 6);
      double v28 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetCounterValue(a4);
      v21.n128_f64[0] = pxrInternal__aapl__pxrReserved__::TraceAggregateNode::AppendInclusiveCounterValue(v26, v27, v28);
    }
    uint64_t result = v30;
    if (v30)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)v30 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        return (void *)(*(uint64_t (**)(void *, __n128))(*result + 8))(result, v21);
      }
    }
  }
  return result;
}

void sub_2168BCD04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if ((a9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::Trace_AggregateTreeBuilder::_FindAggregateNode@<X0>(pxrInternal__aapl__pxrReserved__::Trace_AggregateTreeBuilder *this@<X0>, unint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v7 = sub_2168BC958((uint64_t *)this + 2);
  uint64_t v8 = sub_2168BC9E4((uint64_t *)(v7 + 24));
  uint64_t result = pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v50);
  uint64_t v10 = *(uint64_t **)(v8 + 48);
  uint64_t v11 = *(uint64_t **)(v8 + 56);
  if (v10 == v11) {
    goto LABEL_43;
  }
  while (1)
  {
    uint64_t result = sub_2168BC9E4(v10);
    unint64_t v12 = *(void *)(result + 16);
    uint64_t v13 = (atomic_uint *)(v12 & 0xFFFFFFFFFFFFFFF8);
    if ((v12 & 7) != 0)
    {
      if (atomic_fetch_add_explicit(v13, 2u, memory_order_relaxed)) {
        unint64_t v14 = v12;
      }
      else {
        unint64_t v14 = v12 & 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v13 = (atomic_uint *)(v14 & 0xFFFFFFFFFFFFFFF8);
      uint64_t v15 = v50;
      if ((v14 & 7) != 0) {
        atomic_fetch_add_explicit(v13, 0xFFFFFFFE, memory_order_release);
      }
    }
    else
    {
      uint64_t v15 = v50;
    }
    if (v13 == (atomic_uint *)(v15 & 0xFFFFFFFFFFFFFFF8)) {
      break;
    }
    if (++v10 == v11)
    {
      uint64_t v10 = v11;
      break;
    }
  }
  if (v10 == *(uint64_t **)(v8 + 56))
  {
LABEL_43:
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    int v49 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*v10;
    sub_2168BD80C((uint64_t *)&v49);
    int64x2_t v47 = 0uLL;
    v48[0] = 0;
    while (1)
    {
      uint64_t v16 = *(void *)(sub_2168BC9E4((uint64_t *)&v49) + 16);
      if ((v16 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v16 &= 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v17 = v47.i64[1];
      if (v47.i64[1] >= v48[0])
      {
        uint64_t v19 = (v47.i64[1] - v47.i64[0]) >> 3;
        if ((unint64_t)(v19 + 1) >> 61) {
          sub_21677CB10();
        }
        unint64_t v20 = (v48[0] - v47.i64[0]) >> 2;
        if (v20 <= v19 + 1) {
          unint64_t v20 = v19 + 1;
        }
        unint64_t v21 = v48[0] - v47.i64[0] >= 0x7FFFFFFFFFFFFFF8uLL ? 0x1FFFFFFFFFFFFFFFLL : v20;
        int v53 = v48;
        char v22 = v21 ? (char *)sub_21677CB28((uint64_t)v48, v21) : 0;
        unint64_t v23 = &v22[8 * v19];
        int v24 = &v22[8 * v21];
        float v52 = v24;
        *(void *)unint64_t v23 = v16;
        uint64_t v18 = v23 + 8;
        *(void *)&v51[16] = v23 + 8;
        double v25 = (void *)v47.i64[1];
        uint64_t v26 = (void *)v47.i64[0];
        if (v47.i64[1] == v47.i64[0])
        {
          int64x2_t v28 = vdupq_n_s64(v47.u64[1]);
        }
        else
        {
          do
          {
            uint64_t v27 = *--v25;
            *((void *)v23 - 1) = v27;
            v23 -= 8;
            *double v25 = 0;
          }
          while (v25 != v26);
          int64x2_t v28 = v47;
          uint64_t v18 = *(void **)&v51[16];
          int v24 = v52;
        }
        v47.i64[0] = (uint64_t)v23;
        v47.i64[1] = (uint64_t)v18;
        *(int64x2_t *)&v51[8] = v28;
        uint64_t v29 = (char *)v48[0];
        v48[0] = v24;
        float v52 = v29;
        *(void *)int v51 = v28.i64[0];
        sub_2168BE9D8((uint64_t)v51);
      }
      else
      {
        *(void *)v47.i64[1] = v16;
        uint64_t v18 = (void *)(v17 + 8);
      }
      v47.i64[1] = (uint64_t)v18;
      BOOL v30 = *(uint64_t **)(sub_2168BC9E4((uint64_t *)&v49) + 48);
      uint64_t v31 = *(void *)(sub_2168BC9E4((uint64_t *)&v49) + 56) - (void)v30;
      if (v31)
      {
        unint64_t v32 = v31 >> 3;
        do
        {
          unint64_t v33 = &v30[v32 >> 1];
          unint64_t v34 = *(void *)(sub_2168BC9E4(v33) + 40);
          if (v34 >= a2) {
            v32 >>= 1;
          }
          else {
            v32 += ~(v32 >> 1);
          }
          if (v34 < a2) {
            BOOL v30 = v33 + 1;
          }
        }
        while (v32);
      }
      if (v30 == *(uint64_t **)(sub_2168BC9E4((uint64_t *)&v49) + 56)) {
        break;
      }
      char v35 = v49;
      int v49 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*v30;
      sub_2168BD80C(v30);
      sub_2168BD378((int)&v49, v35);
    }
    sub_2168BD6F4((uint64_t *)v51, (uint64_t *)(*((void *)this + 1) + 24));
    uint64_t v37 = (const pxrInternal__aapl__pxrReserved__::TfToken *)v47.i64[1];
    long long v36 = (const pxrInternal__aapl__pxrReserved__::TfToken *)v47.i64[0];
    if (v47.i64[0] == v47.i64[1])
    {
LABEL_57:
      *(_OWORD *)a3 = *(_OWORD *)v51;
    }
    else
    {
      while (1)
      {
        long long v38 = (pxrInternal__aapl__pxrReserved__::TraceAggregateNode *)sub_2168BC8B0((uint64_t *)v51);
        pxrInternal__aapl__pxrReserved__::TraceAggregateNode::GetChild(v38, v36, (uint64_t *)&v45);
        sub_2168BD6F4((uint64_t *)&v46, (uint64_t *)&v45);
        sub_2168BD6C4(&v45);
        BOOL v39 = sub_2168BD290(&v46);
        unint64_t v41 = v40 & 1 | (unint64_t)v39;
        if (v41)
        {
          unsigned int v42 = *(atomic_uint **)&v51[8];
          *(_OWORD *)int v51 = v46;
          if (*((void *)&v46 + 1)) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v46 + 1) + 8), 1u, memory_order_relaxed);
          }
          if (v42 && atomic_fetch_add_explicit(v42 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
            (*(void (**)(atomic_uint *))(*(void *)v42 + 8))(v42);
          }
        }
        else
        {
          *a3 = 0;
          a3[1] = 0;
        }
        uint64_t v43 = *((void *)&v46 + 1);
        if (*((void *)&v46 + 1)
          && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v46 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
        {
          (*(void (**)(uint64_t))(*(void *)v43 + 8))(v43);
        }
        if (!v41) {
          break;
        }
        long long v36 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v36 + 8);
        if (v36 == v37) {
          goto LABEL_57;
        }
      }
      uint64_t v44 = *(void *)&v51[8];
      if (*(void *)&v51[8]
        && atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&v51[8] + 8), 0xFFFFFFFF, memory_order_release) == 1)
      {
        (*(void (**)(uint64_t))(*(void *)v44 + 8))(v44);
      }
    }
    *(void *)int v51 = &v47;
    sub_216889A04((void ***)v51);
    uint64_t result = (uint64_t)sub_2168BD7DC(&v49);
  }
  if ((v50 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v50 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void sub_2168BD178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a17, uint64_t a18)
{
  a11 = (void **)&a13;
  sub_216889A04(&a11);
  sub_2168BD7DC(&a17);
  if ((a18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t (*sub_2168BD290(void *a1))(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  __n128 v2 = a1 + 1;
  if (!v3) {
    return 0;
  }
  int v4 = *(unsigned __int8 *)(sub_216850B68(v2) + 14);
  if (*a1) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    return 0;
  }
  else {
    return sub_2168BD858;
  }
}

void sub_2168BD2F0(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  *a1 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)&unk_26C74CAA0;
  sub_2168BD348(a1 + 2);
  pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor::~Visitor((pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor *)a1);

  operator delete(v2);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_2168BD348(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  return a1;
}

void sub_2168BD378(int a1, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *this)
{
  if (!this) {
    return;
  }
  int v3 = *((_DWORD *)this + 2);
  if (v3 < 0)
  {
    if (v3 == -2)
    {
      uint64_t v5 = 4294967294;
    }
    else
    {
      uint64_t v5 = *((unsigned int *)this + 2);
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)this + 2, (unsigned int *)&v5, v3 + 1, memory_order_release, memory_order_relaxed);
      if (v5 == v3)
      {
        if (v3 != -1) {
          return;
        }
        goto LABEL_4;
      }
    }
    if (!pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter::_RemoveRefMaybeLocked((atomic_uint *)this, (const pxrInternal__aapl__pxrReserved__::TfRefBase *)v5))return; {
    goto LABEL_4;
    }
  }
  if (atomic_fetch_add_explicit((atomic_uint *volatile)this + 2, 0xFFFFFFFF, memory_order_release) != 1) {
    return;
  }
LABEL_4:
  int v4 = *(void (**)(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *))(*(void *)this + 8);

  v4(this);
}

uint64_t sub_2168BD438(void *a1)
{
  __n128 v2 = (void **)a1[1];
  int v3 = (void **)a1[2];
  if (v3 == v2)
  {
    int v4 = a1 + 5;
    int v3 = (void **)a1[1];
  }
  else
  {
    int v4 = a1 + 5;
    unint64_t v5 = a1[4];
    BOOL v6 = &v2[v5 >> 8];
    uint64_t v7 = (uint64_t)*v6 + 16 * v5;
    uint64_t v8 = *(uint64_t *)((char *)v2 + (((a1[5] + v5) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*((unsigned char *)a1 + 40) + v5);
    if (v7 != v8)
    {
      do
      {
        uint64_t v9 = *(atomic_uint **)(v7 + 8);
        if (v9 && atomic_fetch_add_explicit(v9 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v9 + 8))(v9);
        }
        v7 += 16;
        if (v7 - (void)*v6 == 4096)
        {
          uint64_t v10 = (uint64_t)v6[1];
          ++v6;
          uint64_t v7 = v10;
        }
      }
      while (v7 != v8);
      __n128 v2 = (void **)a1[1];
      int v3 = (void **)a1[2];
    }
  }
  *int v4 = 0;
  unint64_t v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      int v3 = (void **)a1[2];
      __n128 v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v12 = v11 >> 3;
  if (v12 == 1)
  {
    uint64_t v13 = 128;
  }
  else
  {
    if (v12 != 2) {
      goto LABEL_19;
    }
    uint64_t v13 = 256;
  }
  a1[4] = v13;
LABEL_19:
  while (v2 != v3)
  {
    unint64_t v14 = *v2++;
    operator delete(v14);
  }

  return sub_21683347C((uint64_t)a1);
}

uint64_t sub_2168BD5A0(void *a1)
{
  __n128 v2 = (void **)a1[1];
  int v3 = (void **)a1[2];
  if (v3 == v2)
  {
    int v4 = a1 + 5;
    int v3 = (void **)a1[1];
  }
  else
  {
    int v4 = a1 + 5;
    unint64_t v5 = a1[4];
    BOOL v6 = &v2[v5 >> 8];
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)((char *)*v6 + 16 * v5);
    uint64_t v8 = *(uint64_t *)((char *)v2 + (((a1[5] + v5) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*((unsigned char *)a1 + 40) + v5);
    if (v7 != (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v8)
    {
      do
      {
        uint64_t v7 = sub_2168BD7DC(v7) + 2;
        if ((char *)v7 - (unsigned char *)*v6 == 4096)
        {
          uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v6[1];
          ++v6;
          uint64_t v7 = v9;
        }
      }
      while (v7 != (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v8);
      __n128 v2 = (void **)a1[1];
      int v3 = (void **)a1[2];
    }
  }
  *int v4 = 0;
  unint64_t v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      int v3 = (void **)a1[2];
      __n128 v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 128;
  }
  else
  {
    if (v11 != 2) {
      goto LABEL_16;
    }
    uint64_t v12 = 256;
  }
  a1[4] = v12;
LABEL_16:
  while (v2 != v3)
  {
    uint64_t v13 = *v2++;
    operator delete(v13);
  }

  return sub_21683347C((uint64_t)a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_2168BD6C4(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  return a1;
}

uint64_t *sub_2168BD6F4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  a1[1] = 0;
  if (v3)
  {
    sub_21685203C((unint64_t *)(v3 + 16), &v7);
    int v4 = (atomic_uint *)a1[1];
    a1[1] = v7;
    uint64_t v7 = 0;
    if (v4)
    {
      if (atomic_fetch_add_explicit(v4 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v4 + 8))(v4);
      }
      uint64_t v5 = v7;
      if (v7 && atomic_fetch_add_explicit((atomic_uint *volatile)(v7 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
      }
    }
  }
  return a1;
}

void sub_2168BD7C4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 8);
  if (v3) {
    sub_217324208(v3);
  }
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_2168BD7DC(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  return a1;
}

uint64_t sub_2168BD80C(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result)
  {
    int v2 = *(_DWORD *)(result + 8);
    if ((v2 & 0x80000000) == 0)
    {
      atomic_fetch_add_explicit((atomic_uint *volatile)(result + 8), 1u, memory_order_relaxed);
      return result;
    }
    if (v2 == -1)
    {
      uint64_t v3 = 0xFFFFFFFFLL;
      return pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter::_AddRefMaybeLocked(result, (const pxrInternal__aapl__pxrReserved__::TfRefBase *)v3);
    }
    uint64_t v3 = *(unsigned int *)(result + 8);
    atomic_compare_exchange_strong_explicit((atomic_uint *volatile)(result + 8), (unsigned int *)&v3, v2 - 1, memory_order_relaxed, memory_order_relaxed);
    if (v3 != v2) {
      return pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter::_AddRefMaybeLocked(result, (const pxrInternal__aapl__pxrReserved__::TfRefBase *)v3);
    }
  }
  return result;
}

uint64_t sub_2168BD858(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  int v2 = a1 + 1;
  if (!v3) {
    return 0;
  }
  if (*(unsigned char *)(sub_216850B68(v2) + 14)) {
    return *a1;
  }
  return 0;
}

__n128 sub_2168BD89C(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_2168BD92C(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  __n128 result = *a2;
  *(__n128 *)(*(void *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  ++a1[5];
  return result;
}

void sub_2168BD92C(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)sub_21677CB28(v5, v33);
      char v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      long long v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        unint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)unint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_216832B24(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_216832C3C((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)sub_21677CB28((uint64_t)(a1 + 3), v46);
      char v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      float v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        int v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)int v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  int v56 = a1 + 3;
  *(void *)&long long v54 = sub_21677CB28((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  int v53 = operator new(0x1000uLL);
  sub_216832D5C(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_216832E74((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_2168BDBF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_2168BDC44(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_2168BDCD8(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  uint64_t v8 = (void *)(*(void *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7);
  uint64_t v9 = a2[1];
  *uint64_t v8 = *a2;
  *a2 = 0;
  v8[1] = v9;
  ++a1[5];
}

void sub_2168BDCD8(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x100;
  unint64_t v4 = v2 - 256;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)sub_21677CB28(v5, v33);
      char v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      long long v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        unint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)unint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_216832B24(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_216832C3C((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)sub_21677CB28((uint64_t)(a1 + 3), v46);
      char v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      float v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        int v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)int v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  int v56 = a1 + 3;
  *(void *)&long long v54 = sub_21677CB28((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  int v53 = operator new(0x1000uLL);
  sub_216832D5C(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_216832E74((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_2168BDFA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2168BDFF0(void *a1)
{
  unint64_t v2 = a1[5] + a1[4] - 1;
  sub_2168BD7DC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(*(void *)(a1[1]
                                                                                                + ((v2 >> 5) & 0x7FFFFFFFFFFFFF8))
                                                                                    + 16 * v2));
  --a1[5];

  return sub_2168BE058(a1, 1);
}

uint64_t sub_2168BE058(void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 32 * (v2 - v3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x100) {
    a2 = 1;
  }
  if (v5 < 0x200) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

uint64_t *sub_2168BE0C8(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v6 = (uint64_t **)sub_2168BE158((uint64_t)a1, &v11, a2);
  int v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    int v7 = (uint64_t *)operator new(0x30uLL);
    uint64_t v9 = *a4;
    void v7[4] = **a4;
    *uint64_t v9 = 0;
    v7[5] = 0;
    sub_21677B358(a1, v11, v8, v7);
  }
  return v7;
}

void *sub_2168BE158(uint64_t a1, void *a2, uint64_t *a3)
{
  unint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        uint64_t v8 = v4;
        uint64_t v9 = v4 + 4;
        if (!sub_2168BE1F8(v7, a3, v4 + 4)) {
          break;
        }
        uint64_t v4 = (void *)*v8;
        unint64_t v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (!sub_2168BE1F8(v7, v9, a3)) {
        break;
      }
      unint64_t v5 = v8 + 1;
      uint64_t v4 = (void *)v8[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v8 = (void *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t sub_2168BE1F8(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *a3;
  if (*a2) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    if (v3) {
      BOOL v6 = 1;
    }
    else {
      BOOL v6 = v4 == 0;
    }
    return !v6;
  }
  else
  {
    if (v3 == v4) {
      return 0;
    }
    unint64_t v8 = v3 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v9 = v4 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v10 = *(void *)(v8 + 8);
    unint64_t v11 = *(void *)(v9 + 8);
    if (v10 < v11) {
      return 1;
    }
    if (v10 != v11)
    {
      return 0;
    }
    else
    {
      BOOL v14 = *(const void **)(v9 + 16);
      unint64_t v12 = v9 + 16;
      uint64_t v13 = v14;
      int v15 = *(char *)(v12 + 23);
      uint64_t v18 = *(const void **)(v8 + 16);
      unint64_t v16 = v8 + 16;
      uint64_t v17 = v18;
      int v19 = *(char *)(v16 + 23);
      if (v19 >= 0) {
        size_t v20 = *(unsigned __int8 *)(v16 + 23);
      }
      else {
        size_t v20 = *(void *)(v16 + 8);
      }
      if (v19 >= 0) {
        uint64_t v21 = (const void *)v16;
      }
      else {
        uint64_t v21 = v17;
      }
      if (v15 >= 0) {
        size_t v22 = *(unsigned __int8 *)(v12 + 23);
      }
      else {
        size_t v22 = *(void *)(v12 + 8);
      }
      if (v15 >= 0) {
        uint64_t v23 = (const void *)v12;
      }
      else {
        uint64_t v23 = v13;
      }
      if (v22 >= v20) {
        size_t v24 = v20;
      }
      else {
        size_t v24 = v22;
      }
      int v25 = memcmp(v21, v23, v24);
      if (v25) {
        return v25 < 0;
      }
      else {
        return v20 < v22;
      }
    }
  }
}

void sub_2168BE2C4(void *a1, long long *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = 32 * (v4 - v5) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_2168BD92C(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = v7 + a1[4];
  }
  long long v9 = *a2;
  *(_OWORD *)(*(void *)(v5 + ((v8 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v8) = *a2;
  if (*((void *)&v9 + 1))
  {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v9 + 1) + 8), 1u, memory_order_relaxed);
    uint64_t v7 = a1[5];
  }
  a1[5] = v7 + 1;
}

uint64_t sub_2168BE364(void *a1)
{
  unint64_t v2 = a1[5] + a1[4] - 1;
  uint64_t v3 = *(atomic_uint **)(*(void *)(a1[1] + ((v2 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v2 + 8);
  if (v3 && atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  }
  --a1[5];

  return sub_2168BE058(a1, 1);
}

void *sub_2168BE408(uint64_t a1, void *a2, double *a3)
{
  unint64_t v5 = *a2 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = bswap64(0x9E3779B97F4A7C55 * v5);
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = v6;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = v6 & (v7 - 1);
    }
    long long v9 = *(void **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      __n128 result = (void *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = result[1];
          if (v11 == v6)
          {
            if ((result[2] & 0xFFFFFFFFFFFFFFF8) == v5) {
              return result;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          __n128 result = (void *)*result;
        }
        while (result);
      }
    }
  }
  sub_2168BE654(a1, v6, a3, (uint64_t)&v20);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_21678A04C(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void **)(*(void *)a1 + 8 * v3);
  if (v18)
  {
    *size_t v20 = *v18;
    *uint64_t v18 = v20;
  }
  else
  {
    *size_t v20 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v20;
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*v20)
    {
      unint64_t v19 = *(void *)(*v20 + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7) {
          v19 %= v7;
        }
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v19) = v20;
    }
  }
  __n128 result = v20;
  ++*(void *)(a1 + 24);
  return result;
}

void sub_2168BE63C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168BE6D4((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

double sub_2168BE654@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, double *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint8x8_t v8 = (double *)operator new(0x20uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *uint8x8_t v8 = 0.0;
  *((void *)v8 + 1) = a2;
  double v9 = *a3;
  float64x2_t v8[2] = *a3;
  if ((LOBYTE(v9) & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *((void *)v8 + 2) &= 0xFFFFFFFFFFFFFFF8;
  }
  double result = a3[1];
  float v8[3] = result;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_2168BE6D4(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void **)a1;
  *(void *)a1 = a2;
  if (v3)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      uint64_t v4 = v3[2];
      if ((v4 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    operator delete(v3);
  }
}

void *sub_2168BE70C(uint64_t a1, void *a2, uint64_t *a3)
{
  unint64_t v5 = *a2 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = bswap64(0x9E3779B97F4A7C55 * v5);
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = v6;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = v6 & (v7 - 1);
    }
    double v9 = *(void **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      double result = (void *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = result[1];
          if (v11 == v6)
          {
            if ((result[2] & 0xFFFFFFFFFFFFFFF8) == v5) {
              return result;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          double result = (void *)*result;
        }
        while (result);
      }
    }
  }
  sub_2168BE958(a1, v6, a3, (uint64_t)&v20);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_21678A04C(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void **)(*(void *)a1 + 8 * v3);
  if (v18)
  {
    *size_t v20 = *v18;
    *uint64_t v18 = v20;
  }
  else
  {
    *size_t v20 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v20;
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*v20)
    {
      unint64_t v19 = *(void *)(*v20 + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7) {
          v19 %= v7;
        }
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v19) = v20;
    }
  }
  double result = v20;
  ++*(void *)(a1 + 24);
  return result;
}

void sub_2168BE940(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168BE6D4((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *sub_2168BE958@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  double result = operator new(0x20uLL);
  *(void *)a4 = result;
  *(void *)(a4 + 8) = v7;
  *double result = 0;
  result[1] = a2;
  uint64_t v9 = *a3;
  result[2] = *a3;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    result[2] &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_DWORD *)result + 6) = *((_DWORD *)a3 + 2);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

uint64_t sub_2168BE9D8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  while (v3 != v2)
  {
    uint64_t v5 = *(void *)(v3 - 8);
    v3 -= 8;
    uint64_t v4 = v5;
    *(void *)(a1 + 16) = v3;
    if ((v5 & 7) != 0)
    {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      uint64_t v3 = *(void *)(a1 + 16);
    }
  }
  unint64_t v6 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v6);
  }
  return a1;
}

pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder *pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder::Trace_EventTreeBuilder(pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder *this)
{
  *(void *)this = &unk_26C74CB18;
  sub_2168BEAFC((void *)this + 1);
  *((void *)this + 3) = 0;
  *((void *)this + 2) = (char *)this + 24;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 7) = (char *)this + 64;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 28) = 1065353216;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_DWORD *)this + 38) = 1065353216;
  *((void *)this + 6) = &unk_26C74CB68;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_DWORD *)this + 48) = 1065353216;
  return this;
}

void sub_2168BEAE8(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor::~Visitor(v1);
  _Unwind_Resume(a1);
}

void sub_2168BEAFC(void *a1@<X8>)
{
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&v4, "root");
  __n128 v2 = 0uLL;
  uint64_t v3 = 0;
  sub_2168BFE30(&v4, 0, 0, 0, &v2, 0, a1);
  uint64_t v5 = &v2;
  sub_2168C02E0((void ***)&v5);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_2168BEB84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  *(void *)(v14 - 24) = v13;
  sub_2168C02E0((void ***)(v14 - 24));
  if ((a13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder::OnEndCollection(pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder *this)
{
  uint64_t v1 = (void *)((char *)this + 24);
  sub_2168C0BC0((uint64_t)this + 16, *((void **)this + 3));
  *(v1 - 1) = v1;
  void *v1 = 0;
  v1[1] = 0;
  for (uint64_t i = (void *)v1[19]; i; uint64_t i = (void *)*i)
  {
    uint64_t v3 = (unint64_t *)i[3];
    uint64_t v4 = (unint64_t *)i[4];
    unint64_t v5 = 126 - 2 * __clz(((char *)v4 - (char *)v3) >> 5);
    if (v4 == v3) {
      uint64_t v6 = 0;
    }
    else {
      uint64_t v6 = v5;
    }
    sub_2168C0C64(v3, v4, (uint64_t)&v7, v6, 1);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder::AcceptsCategory(pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder *this)
{
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder::OnBeginThread(uint64_t **this, const pxrInternal__aapl__pxrReserved__::TraceThreadId *a2)
{
  uint64_t v13 = 0;
  uint64_t v3 = this + 2;
  uint64_t v14 = (long long *)a2;
  uint64_t v4 = sub_2168C2CD4(this + 2, a2, (uint64_t)&unk_2174BFD90, &v14);
  sub_2168C2FFC((void **)v4 + 7);
  *(_OWORD *)(v4 + 7) = 0uLL;
  v4[9] = v13;
  uint64_t v13 = 0;
  long long v12 = 0uLL;
  unint64_t v15 = (void **)&v12;
  sub_2168C2F04(&v15);
  *(void *)&long long v12 = a2;
  unint64_t v5 = sub_2168C2CD4(v3, a2, (uint64_t)&unk_2174BFD90, (long long **)&v12);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v12);
  LODWORD(v15) = 0;
  LODWORD(v14) = 0;
  int v11 = 0;
  char v10 = 0;
  char v9 = 1;
  unint64_t v6 = v5[8];
  if (v6 >= v5[9])
  {
    uint64_t result = sub_2168C306C(v5 + 7, (uint64_t *)&v12, (int *)&v15, (int *)&v14, &v11, &v10, &v9);
  }
  else
  {
    uint64_t v7 = v12;
    *(void *)unint64_t v6 = v12;
    if ((v7 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)v6 &= 0xFFFFFFFFFFFFFFF8;
    }
    *(_DWORD *)(v6 + 8) = 0;
    *(void *)(v6 + 16) = 0;
    *(void *)(v6 + 24) = 0;
    *(_WORD *)(v6 + 32) = 256;
    *(_OWORD *)(v6 + 40) = 0u;
    *(_OWORD *)(v6 + 56) = 0u;
    uint64_t result = v6 + 88;
    *(_OWORD *)(v6 + 72) = 0u;
  }
  _OWORD v5[8] = result;
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void sub_2168BEDAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if ((a11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder::OnEndThread(pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder *this, const pxrInternal__aapl__pxrReserved__::TraceThreadId *a2)
{
  uint64_t v3 = (uint64_t **)((char *)this + 16);
  uint64_t result = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)sub_2168C34E0((uint64_t)this + 16, a2);
  if ((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)((char *)this + 24) != result)
  {
    unint64_t v5 = (uint64_t *)result;
    unint64_t v15 = 0;
    unint64_t v6 = result[8];
    if (result[7] != v6)
    {
      do
      {
        pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder::_PendingEventNode::Close((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)((char *)v6 - 88), (uint64_t *)&v14);
        uint8x8_t v8 = v14;
        uint64_t v7 = v15;
        uint64_t v14 = 0;
        unint64_t v15 = v8;
        sub_2168BD378((int)&v15, v7);
        sub_2168BD7DC(&v14);
        if (!*((unsigned char *)v6 - 55))
        {
          char v9 = (void *)sub_2168BC9E4((uint64_t *)&v15);
          pxrInternal__aapl__pxrReserved__::TraceEventNode::SetBeginAndEndTimesFromChildren(v9);
        }
        uint64_t v10 = v5[8];
        sub_2168C2F9C((uint64_t)(v5 + 9), v10 - 88);
        _OWORD v5[8] = v10 - 88;
        if (v5[7] == v10 - 88) {
          break;
        }
        sub_2168BF0D0((uint64_t *)(v10 - 136), (uint64_t *)&v15);
        unint64_t v6 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)v5[8];
      }
      while ((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)v5[7] != v6);
    }
    int v11 = (void *)sub_2168BC9E4((uint64_t *)&v15);
    pxrInternal__aapl__pxrReserved__::TraceEventNode::SetBeginAndEndTimesFromChildren(v11);
    uint64_t v12 = sub_2168BC9E4((uint64_t *)this + 1);
    uint64_t v13 = v15;
    sub_2168BD80C((uint64_t *)&v13);
    pxrInternal__aapl__pxrReserved__::TraceEventNode::Append(v12, (uint64_t *)&v13);
    sub_2168BD7DC(&v13);
    sub_2167AE00C(v3, v5);
    sub_2168C0C1C((uint64_t)(v5 + 4));
    operator delete(v5);
    return sub_2168BD7DC(&v15);
  }
  return result;
}

void sub_2168BEF28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *);
  uint64_t v5 = va_arg(va1, void);
  sub_2168BD7DC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  sub_2168BD7DC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder::_PendingEventNode::Close(pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder::_PendingEventNode *this@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4 = *((void *)this + 5);
  uint64_t v5 = *((void *)this + 6);
  unint64_t v6 = (__n128 *)((char *)this + 40);
  uint64_t v7 = (void *)(v5 - 8);
  if (v4 != v5 && (unint64_t)v7 > v4)
  {
    unint64_t v9 = v4 + 8;
    do
    {
      uint64_t v10 = *(void *)(v9 - 8);
      *(void *)(v9 - 8) = *v7;
      *v7-- = v10;
      BOOL v11 = v9 >= (unint64_t)v7;
      v9 += 8;
    }
    while (!v11);
  }
  uint64_t v13 = (long long *)*((void *)this + 8);
  uint64_t v12 = (long long *)*((void *)this + 9);
  unint64_t v14 = (unint64_t)(v12 - 3);
  if (v13 != v12 && v14 > (unint64_t)v13)
  {
    do
    {
      sub_2168C43DC(v13, v14);
      v13 += 3;
      v14 -= 48;
    }
    while ((unint64_t)v13 < v14);
  }
  sub_2168BFE30((uint64_t *)this, *((_DWORD *)this + 2), *((void *)this + 2), *((void *)this + 3), v6, *((unsigned char *)this + 32), a2);
  unint64_t v16 = (char *)*((void *)this + 8);
  size_t v17 = (char *)*((void *)this + 9);
  if (v16 != v17)
  {
    uint64_t v18 = (const pxrInternal__aapl__pxrReserved__::TraceEventData *)(v16 + 16);
    do
    {
      unint64_t v19 = (uint64_t **)sub_2168BC9E4(a2);
      uint64_t v20 = *((void *)v18 - 1);
      uint64_t v22 = v20;
      if ((v20 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v22 &= 0xFFFFFFFFFFFFFFF8;
      }
      pxrInternal__aapl__pxrReserved__::TraceEventNode::AddAttribute(v19, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v22, v18);
      if ((v22 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v21 = (char *)v18 + 32;
      uint64_t v18 = (const pxrInternal__aapl__pxrReserved__::TraceEventData *)((char *)v18 + 48);
    }
    while (v21 != v17);
  }
}

void sub_2168BF09C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_2168BD7DC(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_2168BF0D0(uint64_t *a1, uint64_t *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(uint64_t **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 3;
    if ((unint64_t)(v10 + 1) >> 61) {
      sub_21677CB10();
    }
    uint64_t v11 = v5 - *a1;
    uint64_t v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v19 = v4;
    if (v13) {
      unint64_t v14 = (uint64_t *)sub_21677CB28(v4, v13);
    }
    else {
      unint64_t v14 = 0;
    }
    unint64_t v15 = v14;
    unint64_t v16 = &v14[v10];
    size_t v17 = v16;
    uint64_t v18 = &v14[v13];
    *unint64_t v16 = *a2;
    sub_2168BD80C(&v14[v10]);
    ++v17;
    sub_2168C355C(a1, &v15);
    unint64_t v9 = (uint64_t *)a1[1];
    uint64_t result = sub_2168C366C((uint64_t)&v15);
  }
  else
  {
    *uint64_t v7 = *a2;
    uint64_t result = sub_2168BD80C(v7);
    unint64_t v9 = v7 + 1;
    a1[1] = (uint64_t)(v7 + 1);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_2168BF1CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder::OnEvent(uint64_t **this, const pxrInternal__aapl__pxrReserved__::TraceThreadId *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TraceEvent *a4)
{
  switch(pxrInternal__aapl__pxrReserved__::TraceEvent::GetType(a4))
  {
    case 1u:
      pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder::_OnBegin(this, a2, a3, a4);
      break;
    case 2u:
      pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder::_OnEnd(this, a2, a3, a4);
      break;
    case 3u:
      pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder::_OnTimespan(this, a2, (atomic_uint **)a3, a4);
      break;
    case 4u:
      pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder::_OnMarker((pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder *)this, a2, a3, a4);
      break;
    case 7u:
      pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder::_OnData(this, a2, a3, a4);
      break;
    default:
      return;
  }
}

void pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder::_OnBegin(uint64_t **this, const pxrInternal__aapl__pxrReserved__::TraceThreadId *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TraceEvent *a4)
{
  unint64_t v20 = (unint64_t)a2;
  unint64_t v6 = sub_2168C2CD4(this + 2, a2, (uint64_t)&unk_2174BFD90, (long long **)&v20);
  uint64_t v7 = v6;
  uint8x8_t v8 = v6 + 7;
  uint64_t v9 = v6[8];
  int v10 = -1171354717 * ((unint64_t)(v9 - v6[7]) >> 3);
  while (1)
  {
    --v10;
    for (uint64_t i = v9 - 88; !*(unsigned char *)(i + 33); uint64_t i = v12 + 88 * v10)
    {
      uint64_t v12 = *v8;
      if ((*(void *)i & 0xFFFFFFFFFFFFFFF8) == (*(void *)a3 & 0xFFFFFFFFFFFFFFF8)
        || (unint64_t)(0x2E8BA2E8BA2E8BA3 * ((v9 - v12) >> 3)) <= 1)
      {
        goto LABEL_9;
      }
      --v10;
    }
    uint64_t v12 = *v8;
    if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((v9 - *v8) >> 3)) < 2) {
      break;
    }
    unint64_t v6 = pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder::_PopAndClose((uint64_t)v6, (uint64_t)v8);
    uint64_t v9 = v7[8];
  }
LABEL_9:
  if (v9 == v12)
  {
    unint64_t v13 = *(void *)a3;
  }
  else
  {
    unint64_t v13 = *(void *)a3;
    if ((*(void *)i & 0xFFFFFFFFFFFFFFF8) == (*(void *)a3 & 0xFFFFFFFFFFFFFFF8))
    {
      *(void *)(i + 16) = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(a4);
      *(_WORD *)(i + 32) = 257;
      return;
    }
  }
  int v14 = *((_DWORD *)a4 + 2);
  unint64_t v20 = v13;
  if ((v13 & 7) != 0)
  {
    unint64_t v15 = (long long *)(v13 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit((atomic_uint *volatile)v15, 2u, memory_order_relaxed) & 1) == 0) {
      unint64_t v20 = (unint64_t)v15;
    }
  }
  int v21 = v14;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  __int16 v24 = 1;
  uint64_t v16 = v7[8];
  v25[0] = *(void *)(v16 - 48);
  *(void *)(v16 - 48) = 0;
  v25[1] = *(void *)(v16 - 40);
  *(void *)(v16 - 40) = 0;
  v25[2] = *(void *)(v16 - 32);
  *(void *)(v16 - 32) = 0;
  uint64_t v17 = v7[8];
  v26[0] = *(void *)(v17 - 24);
  *(void *)(v17 - 24) = 0;
  v26[1] = *(void *)(v17 - 16);
  *(void *)(v17 - 16) = 0;
  v26[2] = *(void *)(v17 - 8);
  *(void *)(v17 - 8) = 0;
  pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder::_PendingEventNode::Close((pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder::_PendingEventNode *)&v20, (uint64_t *)&v27);
  uint64_t v18 = (void *)sub_2168BC9E4((uint64_t *)&v27);
  pxrInternal__aapl__pxrReserved__::TraceEventNode::SetBeginAndEndTimesFromChildren(v18);
  sub_2168BF0D0((uint64_t *)(v7[8] - 48), (uint64_t *)&v27);
  uint64_t v19 = (void ***)sub_2168BD7DC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v27);
  uint64_t v27 = (void **)v26;
  sub_2168C0364(v19);
  uint64_t v27 = (void **)v25;
  sub_2168C02E0(&v27);
  if ((v20 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_2168BF594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder::_OnEnd(uint64_t **this, const pxrInternal__aapl__pxrReserved__::TraceThreadId *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TraceEvent *a4)
{
  uint64_t v19 = (long long *)a2;
  unint64_t v6 = sub_2168C2CD4(this + 2, a2, (uint64_t)&unk_2174BFD90, &v19);
  uint64_t v7 = v6 + 7;
  for (uint64_t i = v6[8]; *(unsigned char *)(i - 55); uint64_t i = v6[8])
  {
    unint64_t TimeStamp = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(a4);
    if (TimeStamp > *(void *)(i - 72)) {
      break;
    }
    if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((v6[8] - v6[7]) >> 3)) < 2) {
      break;
    }
    pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder::_PopAndClose(TimeStamp, (uint64_t)v7);
  }
  int v10 = *((_DWORD *)a4 + 2);
  int v17 = 0;
  int v18 = v10;
  uint64_t v11 = (long long *)pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(a4);
  uint64_t v19 = v11;
  char v16 = 1;
  char v15 = 0;
  unint64_t v12 = v6[8];
  if (v12 >= v6[9])
  {
    uint64_t result = sub_2168C36BC(v7, (uint64_t *)a3, &v18, &v17, (uint64_t *)&v19, &v16, &v15);
  }
  else
  {
    uint64_t v13 = *(void *)a3;
    *(void *)unint64_t v12 = *(void *)a3;
    if ((v13 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)v12 &= 0xFFFFFFFFFFFFFFF8;
    }
    *(_DWORD *)(v12 + 8) = v10;
    *(void *)(v12 + 16) = 0;
    *(void *)(v12 + 24) = v11;
    *(_WORD *)(v12 + 32) = 1;
    *(_OWORD *)(v12 + 40) = 0u;
    *(_OWORD *)(v12 + 56) = 0u;
    uint64_t result = v12 + 88;
    *(_OWORD *)(v12 + 72) = 0u;
  }
  _OWORD v6[8] = result;
  return result;
}

void pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder::_OnTimespan(uint64_t **this, const pxrInternal__aapl__pxrReserved__::TraceThreadId *a2, atomic_uint **a3, const pxrInternal__aapl__pxrReserved__::TraceEvent *a4)
{
  Startunint64_t TimeStamp = pxrInternal__aapl__pxrReserved__::TraceEvent::GetStartTimeStamp(a4);
  Endunint64_t TimeStamp = pxrInternal__aapl__pxrReserved__::TraceEvent::GetEndTimeStamp(a4);
  int v10 = *((_DWORD *)a4 + 2);
  uint64_t v11 = *a3;
  uint64_t v19 = v11;
  if ((v11 & 7) != 0)
  {
    unint64_t v12 = (atomic_uint *)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v12, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v19 = v12;
    }
  }
  *(_DWORD *)unint64_t v20 = v10;
  *(void *)&v20[8] = StartTimeStamp;
  *(void *)&v20[16] = EndTimeStamp;
  *(_WORD *)&v20[24] = 256;
  memset(v21, 0, sizeof(v21));
  uint64_t v22 = (long long *)a2;
  uint64_t v13 = (char *)sub_2168C2CD4(this + 2, a2, (uint64_t)&unk_2174BFD90, &v22);
  int v14 = v13;
  for (uint64_t i = (uint64_t *)(v13 + 56);
        ;
        uint64_t v13 = (char *)pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder::_PopAndClose((uint64_t)v13, (uint64_t)i))
  {
    unint64_t v16 = *((void *)v14 + 8);
    if (*(void *)&v20[8] >= *(void *)(v16 - 72) && *(void *)&v20[16] <= *(void *)(v16 - 64)) {
      break;
    }
    if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v16 - *i) >> 3)) < 2) {
      break;
    }
  }
  if (v16 >= *((void *)v14 + 9))
  {
    uint64_t v18 = sub_2168C3884(i, (uint64_t)&v19);
  }
  else
  {
    *(void *)unint64_t v16 = v19;
    long long v17 = *(_OWORD *)&v20[10];
    *(_OWORD *)(v16 + 8) = *(_OWORD *)v20;
    *(_OWORD *)(v16 + 18) = v17;
    *(void *)(v16 + 48) = 0;
    *(void *)(v16 + 56) = 0;
    *(void *)(v16 + 40) = 0;
    *(_OWORD *)(v16 + 40) = v21[0];
    *(void *)(v16 + 56) = *(void *)&v21[1];
    *(void *)(v16 + 64) = 0;
    memset(v21, 0, 24);
    *(void *)(v16 + 72) = 0;
    *(void *)(v16 + 80) = 0;
    *(_OWORD *)(v16 + 64) = *(_OWORD *)((char *)&v21[1] + 8);
    *(void *)(v16 + 80) = *((void *)&v21[2] + 1);
    uint64_t v19 = 0;
    memset((char *)&v21[1] + 8, 0, 24);
    uint64_t v18 = v16 + 88;
  }
  *((void *)v14 + 8) = v18;
  uint64_t v22 = (_OWORD *)((char *)&v21[1] + 8);
  sub_2168C0364((void ***)&v22);
  uint64_t v22 = v21;
  sub_2168C02E0((void ***)&v22);
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_2168BF8F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168BFC50((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder::_OnMarker(pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder *this, const pxrInternal__aapl__pxrReserved__::TraceThreadId *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TraceEvent *a4)
{
  unint64_t TimeStamp = (uint64_t *)a3;
  unint64_t v6 = sub_2168C39E4((uint64_t)this + 160, a3, (uint64_t)&unk_2174BFD90, &TimeStamp) + 3;
  unint64_t TimeStamp = (uint64_t *)pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(a4);
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(&__p, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long __p = *(_OWORD *)a2;
    uint64_t v9 = *((void *)a2 + 2);
  }
  sub_2168BFCB4(v6, (uint64_t)&TimeStamp);
  if (SHIBYTE(v9) < 0) {
    operator delete((void *)__p);
  }
}

void sub_2168BF9C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder::_OnData(uint64_t **this, const pxrInternal__aapl__pxrReserved__::TraceThreadId *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TraceEvent *a4)
{
  *(void *)&long long v16 = a2;
  uint64_t result = (uint64_t)sub_2168C2CD4(this + 2, a2, (uint64_t)&unk_2174BFD90, (long long **)&v16);
  uint64_t v7 = result + 56;
  uint64_t v8 = *(void *)(result + 64);
  if (*(void *)(result + 56) != v8)
  {
    for (i = result; ; uint64_t v8 = *(void *)(i + 64))
    {
      unint64_t TimeStamp = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(a4);
      if (TimeStamp >= *(void *)(v8 - 72))
      {
        unint64_t TimeStamp = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(a4);
        if (TimeStamp <= *(void *)(v8 - 64)) {
          break;
        }
      }
      if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(i + 64) - *(void *)(i + 56)) >> 3)) < 2) {
        break;
      }
      pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder::_PopAndClose(TimeStamp, v7);
    }
    uint64_t v11 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(a4);
    uint64_t v12 = *(void *)a3;
    *(void *)&long long v16 = v11;
    *((void *)&v16 + 1) = v12;
    if ((v12 & 7) != 0)
    {
      uint64_t v13 = (atomic_uint *)(v12 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v13, 2u, memory_order_relaxed) & 1) == 0) {
        *((void *)&v16 + 1) = v13;
      }
    }
    pxrInternal__aapl__pxrReserved__::TraceEvent::GetData(a4, (uint64_t)v17);
    int v14 = *(_OWORD **)(v8 - 16);
    if ((unint64_t)v14 >= *(void *)(v8 - 8))
    {
      uint64_t v15 = sub_2168C3F54((uint64_t *)(v8 - 24), (uint64_t)&v16);
    }
    else
    {
      *int v14 = v16;
      uint64_t v15 = (uint64_t)(v14 + 3);
      *((void *)&v16 + 1) = 0;
      sub_2168C4060((uint64_t)(v14 + 1), (uint64_t)v17);
    }
    *(void *)(v8 - 16) = v15;
    uint64_t result = sub_2168C0420((uint64_t)v17);
    if ((BYTE8(v16) & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v16 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return result;
}

void sub_2168BFB4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_2168C0420(v10);
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder::_PopAndClose(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder::_PendingEventNode::Close((pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder::_PendingEventNode *)(*(void *)(a2 + 8) - 88), (uint64_t *)&v5);
  uint64_t v3 = *(void *)(a2 + 8);
  sub_2168C2F9C(a2 + 16, v3 - 88);
  *(void *)(a2 + 8) = v3 - 88;
  sub_2168BF0D0((uint64_t *)(v3 - 136), (uint64_t *)&v5);
  return sub_2168BD7DC(&v5);
}

void sub_2168BFBEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168BD7DC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder::_PendingEventNode::_PendingEventNode(pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder::_PendingEventNode *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, int a3, uint64_t a4, uint64_t a5, char a6, char a7)
{
  uint64_t v7 = *(void *)a2;
  *(void *)this = *(void *)a2;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)this &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_DWORD *)this + 2) = a3;
  *((void *)this + 2) = a4;
  *((void *)this + 3) = a5;
  *((unsigned char *)this + 32) = a6;
  *((unsigned char *)this + 33) = a7;
  double result = 0.0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  return result;
}

{
  uint64_t v7;
  double result;

  uint64_t v7 = *(void *)a2;
  *(void *)this = *(void *)a2;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)this &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_DWORD *)this + 2) = a3;
  *((void *)this + 2) = a4;
  *((void *)this + 3) = a5;
  *((unsigned char *)this + 32) = a6;
  *((unsigned char *)this + 33) = a7;
  double result = 0.0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  return result;
}

uint64_t sub_2168BFC50(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 64);
  sub_2168C0364(&v3);
  uint64_t v3 = (void **)(a1 + 40);
  sub_2168C02E0(&v3);
  if ((*(void *)a1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)a1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

uint64_t sub_2168BFCB4(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(result - 8);
  if (v7 >= v6)
  {
    uint64_t v10 = (uint64_t)(v7 - *a1) >> 5;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 59) {
      sub_21677CB10();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 4 > v11) {
      unint64_t v11 = v12 >> 4;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v13 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v17[4] = result;
    if (v13) {
      int v14 = (char *)sub_2168707F4(result, v13);
    }
    else {
      int v14 = 0;
    }
    uint64_t v15 = &v14[32 * v10];
    v17[0] = v14;
    v17[1] = v15;
    v17[3] = &v14[32 * v13];
    *(void *)uint64_t v15 = *(void *)a2;
    long long v16 = *(_OWORD *)(a2 + 8);
    *((void *)v15 + 3) = *(void *)(a2 + 24);
    *(_OWORD *)(v15 + 8) = v16;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    v17[2] = v15 + 32;
    sub_2168C3D28(a1, v17);
    uint64_t v9 = a1[1];
    uint64_t result = sub_2168C3EC4((uint64_t)v17);
  }
  else
  {
    *(void *)unint64_t v7 = *(void *)a2;
    long long v8 = *(_OWORD *)(a2 + 8);
    *(void *)(v7 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(v7 + 8) = v8;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    uint64_t v9 = v7 + 32;
    a1[1] = v7 + 32;
  }
  a1[1] = v9;
  return result;
}

void sub_2168BFDCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168C3EC4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2168BFE30(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, __n128 *a5@<X4>, char a6@<W5>, void *a7@<X8>)
{
  int v14 = operator new(0x68uLL);
  sub_2168C04A4((uint64_t)v14, a1, a2, a3, a4, a5, a6);
  *a7 = v14;
}

void sub_2168BFEAC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder::CreateTree(pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor *a1, pxrInternal__aapl__pxrReserved__::TraceCollection **a2)
{
  uint64_t v3 = a1;
  pxrInternal__aapl__pxrReserved__::TraceCollection::ReverseIterate(a2, a1);
  pxrInternal__aapl__pxrReserved__::TraceCounterAccumulator::Update((pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor *)((char *)v3 + 48), a2);
  long long v8 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*((void *)v3 + 1);
  sub_2168BD80C((uint64_t *)&v8);
  sub_2168C4914((uint64_t)v7, (uint64_t)v3 + 80);
  sub_2168C4DC4((uint64_t)v6, (uint64_t)v3 + 160);
  sub_2168BFFBC(&v8, v7, v6, &v9);
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*((void *)v3 + 5);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor *)((char *)v3 + 40);
  *(void *)uint64_t v3 = v9;
  uint64_t v9 = 0;
  sub_2168BD378((int)v3, v4);
  sub_2168BD348(&v9);
  sub_2168C0A6C((uint64_t)v6);
  sub_2168C09A4((uint64_t)v7);
  return sub_2168BD7DC(&v8);
}

void sub_2168BFF78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  sub_2168BD348((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(v14 - 24));
  sub_2168C0A6C((uint64_t)&a9);
  sub_2168C09A4((uint64_t)&a14);
  sub_2168BD7DC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(v14 - 32));
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_2168BFFBC@<X0>(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  long long v8 = operator new(0x70uLL);
  uint64_t v12 = *a1;
  sub_2168BD80C((uint64_t *)&v12);
  sub_2168C06A4((uint64_t)v11, a2);
  sub_2168C06A4((uint64_t)v10, a3);
  sub_2168C0714((uint64_t)v8, &v12, v11, v10);
  *a4 = v8;
  sub_2168C0A6C((uint64_t)v10);
  sub_2168C09A4((uint64_t)v11);
  return sub_2168BD7DC(&v12);
}

void sub_2168C0064(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  sub_2168C0A6C((uint64_t)va);
  sub_2168C09A4((uint64_t)va1);
  sub_2168BD7DC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(v3 - 56));
  operator delete(v2);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder::_CounterAccumulator::_AcceptsCategory(pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder::_CounterAccumulator *this)
{
  return 1;
}

void sub_2168C00A0(pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor *a1)
{
  *(void *)a1 = &unk_26C74CFC0;
  sub_2168C08A0((uint64_t)a1 + 72);
  sub_2168C09A4((uint64_t)a1 + 32);
  sub_2168C092C((uint64_t)a1 + 8, *((void **)a1 + 2));

  pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor::~Visitor(a1);
}

void sub_2168C0108(pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor *a1)
{
  *(void *)a1 = &unk_26C74CFC0;
  sub_2168C08A0((uint64_t)a1 + 72);
  sub_2168C09A4((uint64_t)a1 + 32);
  sub_2168C092C((uint64_t)a1 + 8, *((void **)a1 + 2));
  pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor::~Visitor(a1);

  operator delete(v2);
}

void sub_2168C0174(uint64_t a1)
{
  *(void *)a1 = &unk_26C74CB18;
  sub_2168C0A6C(a1 + 160);
  *(void *)(a1 + 48) = &unk_26C74CFC0;
  sub_2168C08A0(a1 + 120);
  sub_2168C09A4(a1 + 80);
  sub_2168C092C(a1 + 56, *(void **)(a1 + 64));
  pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor::~Visitor((pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor *)(a1 + 48));
  sub_2168BD348((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 40));
  sub_2168C0BC0(a1 + 16, *(void **)(a1 + 24));
  sub_2168BD7DC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 8));

  pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor::~Visitor((pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor *)a1);
}

void sub_2168C0228(uint64_t a1)
{
  *(void *)a1 = &unk_26C74CB18;
  sub_2168C0A6C(a1 + 160);
  *(void *)(a1 + 48) = &unk_26C74CFC0;
  sub_2168C08A0(a1 + 120);
  sub_2168C09A4(a1 + 80);
  sub_2168C092C(a1 + 56, *(void **)(a1 + 64));
  pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor::~Visitor((pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor *)(a1 + 48));
  sub_2168BD348((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 40));
  sub_2168C0BC0(a1 + 16, *(void **)(a1 + 24));
  sub_2168BD7DC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor::~Visitor((pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor *)a1);

  operator delete(v2);
}

void sub_2168C02E0(void ***a1)
{
  uint64_t v1 = *a1;
  __n128 v2 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)**a1;
  if (v2)
  {
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        uint64_t v4 = sub_2168BD7DC(v4 - 1);
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_2168C0364(void ***a1)
{
  __n128 v2 = (uint64_t *)*a1;
  if (*v2)
  {
    sub_2168C03B8((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

uint64_t sub_2168C03B8(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  for (uint64_t i = *(void *)(result + 8); i != a2; i -= 48)
  {
    uint64_t result = sub_2168C0420(i - 32);
    uint64_t v5 = *(void *)(i - 40);
    if ((v5 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  *(void *)(v3 + 8) = a2;
  return result;
}

uint64_t sub_2168C0420(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C74CBF0[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

void sub_2168C0480(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
}

__n128 sub_2168C04A4(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, uint64_t a5, __n128 *a6, char a7)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)a1 = &unk_26C74CC30;
  uint64_t v7 = *a2;
  *(void *)(a1 + 16) = *a2;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 16) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_DWORD *)(a1 + 24) = a3;
  *(void *)(a1 + 32) = a4;
  *(void *)(a1 + 40) = a5;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = 0;
  __n128 result = *a6;
  *(__n128 *)(a1 + 48) = *a6;
  *(void *)(a1 + 64) = a6[1].n128_u64[0];
  a6->n128_u64[0] = 0;
  a6->n128_u64[1] = 0;
  a6[1].n128_u64[0] = 0;
  *(unsigned char *)(a1 + 72) = a7;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 80) = a1 + 88;
  return result;
}

void sub_2168C0534(uint64_t a1)
{
  *(void *)a1 = &unk_26C74CC30;
  sub_2168C0630(a1 + 80, *(void **)(a1 + 88));
  uint64_t v3 = (void **)(a1 + 48);
  sub_2168C02E0(&v3);
  uint64_t v2 = *(void *)(a1 + 16);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase((pxrInternal__aapl__pxrReserved__::TfRefBase *)a1);
}

void sub_2168C05B0(uint64_t a1)
{
  *(void *)a1 = &unk_26C74CC30;
  sub_2168C0630(a1 + 80, *(void **)(a1 + 88));
  char v4 = (void **)(a1 + 48);
  sub_2168C02E0(&v4);
  uint64_t v2 = *(void *)(a1 + 16);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase((pxrInternal__aapl__pxrReserved__::TfRefBase *)a1);
  operator delete(v3);
}

void sub_2168C0630(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_2168C0630(a1, *a2);
    sub_2168C0630(a1, a2[1]);
    sub_2168C0420((uint64_t)(a2 + 5));
    uint64_t v4 = a2[4];
    if ((v4 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    operator delete(a2);
  }
}

uint64_t sub_2168C06A4(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  *(void *)__n128 result = v2;
  *(void *)(result + 8) = a2[1];
  a2[1] = 0;
  uint64_t v5 = a2[2];
  uint64_t v3 = a2 + 2;
  uint64_t v4 = v5;
  *(void *)(result + 16) = v5;
  uint64_t v6 = v3[1];
  *(void *)(result + 24) = v6;
  *(_DWORD *)(result + 32) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    unint64_t v7 = *(void *)(v4 + 8);
    unint64_t v8 = *(void *)(result + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        v7 %= v8;
      }
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(void *)(v2 + 8 * v7) = result + 16;
    void *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t sub_2168C0714(uint64_t a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_26C74CC68;
  *(void *)(a1 + 24) = *a2;
  sub_2168BD80C((uint64_t *)(a1 + 24));
  sub_2168C06A4(a1 + 32, a3);
  sub_2168C06A4(a1 + 72, a4);
  return a1;
}

void sub_2168C0798(_Unwind_Exception *a1, const void *a2)
{
  sub_216859A88(v3, a2);
  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase(v2);
  _Unwind_Resume(a1);
}

void sub_2168C07B4(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  *a1 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)&unk_26C74CC68;
  uint64_t v2 = (uint64_t *)(a1 + 2);
  sub_2168C0A6C((uint64_t)(a1 + 9));
  sub_2168C09A4((uint64_t)(a1 + 4));
  sub_2168BD7DC(a1 + 3);
  sub_216859A88(v2, v3);

  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase((pxrInternal__aapl__pxrReserved__::TfRefBase *)a1);
}

void sub_2168C0828(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  *a1 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)&unk_26C74CC68;
  uint64_t v2 = (uint64_t *)(a1 + 2);
  sub_2168C0A6C((uint64_t)(a1 + 9));
  sub_2168C09A4((uint64_t)(a1 + 4));
  sub_2168BD7DC(a1 + 3);
  sub_216859A88(v2, v3);
  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase((pxrInternal__aapl__pxrReserved__::TfRefBase *)a1);

  operator delete(v4);
}

uint64_t sub_2168C08A0(uint64_t a1)
{
  sub_2168C08DC(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_2168C08DC(int a1, void *__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = (void *)*v2;
      uint64_t v4 = v2[2];
      if ((v4 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_2168C092C(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_2168C092C(a1, *a2);
    sub_2168C092C(a1, a2[1]);
    sub_2167FB780((uint64_t)(a2 + 5), (void *)a2[6]);
    uint64_t v4 = a2[4];
    if ((v4 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    operator delete(a2);
  }
}

uint64_t sub_2168C09A4(uint64_t a1)
{
  sub_2168C09E0(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_2168C09E0(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_2168C0A24(v2 + 2);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_2168C0A24(void *a1)
{
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  if ((*a1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*a1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

uint64_t sub_2168C0A6C(uint64_t a1)
{
  sub_2168C0AA8(a1, *(char **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_2168C0AA8(uint64_t a1, char *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = *(char **)v2;
      uint64_t v5 = (void **)(v2 + 24);
      sub_2168C0B1C(&v5);
      uint64_t v4 = *((void *)v2 + 2);
      if ((v4 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_2168C0B1C(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_2168C0B70((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_2168C0B70(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 32)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

void sub_2168C0BC0(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_2168C0BC0(a1, *a2);
    sub_2168C0BC0(a1, a2[1]);
    sub_2168C0C1C((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_2168C0C1C(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 24);
  sub_2168C2F04(&v2);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

void sub_2168C0C64(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
void sub_2168C11A4(unint64_t *a1, unint64_t *a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = a1 + 4;
    if (a1 + 4 != a2)
    {
      uint64_t v5 = 0;
      char v6 = a1;
      while (1)
      {
        unint64_t v7 = v6;
        char v6 = v4;
        unint64_t v8 = v7[4];
        if (v8 < *v7) {
          goto LABEL_8;
        }
        if (*v7 >= v8 && pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<(v7 + 5, v7 + 1)) {
          break;
        }
LABEL_21:
        uint64_t v4 = v6 + 4;
        v5 += 32;
        if (v6 + 4 == a2) {
          return;
        }
      }
      unint64_t v8 = *v6;
LABEL_8:
      unint64_t v15 = v8;
      long long v16 = *(_OWORD *)(v7 + 5);
      unint64_t v17 = v7[7];
      uint64_t v7[5] = 0;
      v7[6] = 0;
      v7[7] = 0;
      for (uint64_t i = v5; ; i -= 32)
      {
        uint64_t v10 = (char *)a1 + i;
        *(unint64_t *)((char *)a1 + i + 32) = *(unint64_t *)((char *)a1 + i);
        unint64_t v11 = (void **)((char *)a1 + i + 40);
        if (*((char *)a1 + i + 63) < 0) {
          operator delete(*v11);
        }
        *(_OWORD *)unint64_t v11 = *(_OWORD *)(v10 + 8);
        *(unint64_t *)((char *)a1 + i + 56) = *((void *)v10 + 3);
        v10[31] = 0;
        _OWORD v10[8] = 0;
        if (!i)
        {
          *a1 = v15;
          goto LABEL_20;
        }
        unint64_t v12 = *(unint64_t *)((char *)a1 + i - 32);
        if (v15 >= v12)
        {
          if (v12 < v15)
          {
            *(unint64_t *)((char *)a1 + i) = v15;
            goto LABEL_20;
          }
          if (!pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<(&v16, (unint64_t *)((char *)a1 + i - 24)))break; {
        }
          }
      }
      int v13 = *((char *)a1 + i + 31);
      *(unint64_t *)((char *)a1 + i) = v15;
      if (v13 < 0) {
        operator delete(*(void **)((char *)a1 + i + 8));
      }
LABEL_20:
      uint64_t v14 = (char *)a1 + i;
      *(_OWORD *)(v14 + 8) = v16;
      *((void *)v14 + 3) = v17;
      goto LABEL_21;
    }
  }
}

void sub_2168C1328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2168C1344(unint64_t *a1, unint64_t *a2)
{
  if (a1 != a2)
  {
    uint64_t v3 = a1;
    uint64_t v4 = a1 + 4;
    if (a1 + 4 != a2)
    {
      for (uint64_t i = (char *)a1 + 63; ; i += 32)
      {
        char v6 = v3;
        uint64_t v3 = v4;
        unint64_t v7 = v6[4];
        if (v7 < *v6) {
          goto LABEL_8;
        }
        if (*v6 >= v7 && pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<(v6 + 5, v6 + 1)) {
          break;
        }
LABEL_19:
        uint64_t v4 = v3 + 4;
        if (v3 + 4 == a2) {
          return;
        }
      }
      unint64_t v7 = *v3;
LABEL_8:
      unint64_t v12 = v7;
      long long v13 = *(_OWORD *)(v6 + 5);
      unint64_t v14 = v6[7];
      uint64_t v6[5] = 0;
      v6[6] = 0;
      v6[7] = 0;
      for (double j = i; ; j -= 32)
      {
        *(void *)(j - 31) = *(void *)(j - 63);
        uint64_t v9 = (void **)(j - 23);
        if (*j < 0) {
          operator delete(*v9);
        }
        *(_OWORD *)uint64_t v9 = *(_OWORD *)(j - 55);
        *(void *)(j - 7) = *(void *)(j - 39);
        *(j - 32) = 0;
        *(j - 55) = 0;
        unint64_t v10 = *(void *)(j - 95);
        if (v12 >= v10)
        {
          if (v10 < v12)
          {
            *(void *)(j - 63) = v12;
            goto LABEL_18;
          }
          if (!pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<(&v13, j - 87)) {
            break;
          }
        }
      }
      int v11 = *(j - 32);
      *(void *)(j - 63) = v12;
      if (v11 < 0) {
        operator delete(*(void **)(j - 55));
      }
LABEL_18:
      *(_OWORD *)(j - 55) = v13;
      *(void *)(j - 39) = v14;
      goto LABEL_19;
    }
  }
}

void sub_2168C1498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2168C14B4(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v6 = *a2;
  if (*a2 < *a1
    || *a1 >= v6 && (BOOL v7 = pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<(a2 + 1, a1 + 1), v6 = *a2, v7))
  {
    unint64_t v8 = *a3;
    if (*a3 < v6)
    {
LABEL_5:
      unint64_t v9 = *a1;
      *a1 = v8;
      *a3 = v9;
      unint64_t v10 = a1[1];
      *(void *)&long long v32 = a1[2];
      *(void *)((char *)&v32 + 7) = *(unint64_t *)((char *)a1 + 23);
      char v11 = *((unsigned char *)a1 + 31);
      a1[2] = 0;
      a1[3] = 0;
      a1[1] = 0;
      unint64_t v12 = a3[3];
      *(_OWORD *)(a1 + 1) = *(_OWORD *)(a3 + 1);
      a1[3] = v12;
      *(unint64_t *)((char *)a3 + 23) = *(void *)((char *)&v32 + 7);
      a3[1] = v10;
      a3[2] = v32;
      *((unsigned char *)a3 + 31) = v11;
      return 1;
    }
    if (v6 >= v8)
    {
      if (pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<(a3 + 1, a2 + 1))
      {
        unint64_t v8 = *a3;
        goto LABEL_5;
      }
      unint64_t v6 = *a2;
    }
    unint64_t v23 = *a1;
    *a1 = v6;
    *a2 = v23;
    char v24 = a2 + 1;
    unint64_t v25 = a1[1];
    *(void *)&long long v35 = a1[2];
    *(void *)((char *)&v35 + 7) = *(unint64_t *)((char *)a1 + 23);
    LOBYTE(v23) = *((unsigned char *)a1 + 31);
    a1[2] = 0;
    a1[3] = 0;
    a1[1] = 0;
    unint64_t v26 = a2[3];
    *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
    a1[3] = v26;
    a2[1] = v25;
    a2[2] = v35;
    *(unint64_t *)((char *)a2 + 23) = *(void *)((char *)&v35 + 7);
    *((unsigned char *)a2 + 31) = v23;
    unint64_t v27 = *a3;
    unint64_t v28 = *a2;
    if (*a3 >= *a2)
    {
      if (v28 < v27 || !pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<(a3 + 1, a2 + 1)) {
        return 1;
      }
      unint64_t v28 = *a2;
      unint64_t v27 = *a3;
    }
    *a2 = v27;
    *a3 = v28;
    unint64_t v29 = a2[1];
    *(void *)&long long v36 = a2[2];
    *(void *)((char *)&v36 + 7) = *(unint64_t *)((char *)a2 + 23);
    char v30 = *((unsigned char *)a2 + 31);
    a2[2] = 0;
    a2[3] = 0;
    *char v24 = 0;
    unint64_t v31 = a3[3];
    *(_OWORD *)char v24 = *(_OWORD *)(a3 + 1);
    a2[3] = v31;
    *(unint64_t *)((char *)a3 + 23) = *(void *)((char *)&v36 + 7);
    a3[1] = v29;
    a3[2] = v36;
    *((unsigned char *)a3 + 31) = v30;
    return 2;
  }
  unint64_t v14 = *a3;
  if (*a3 < v6)
  {
LABEL_15:
    *a2 = v14;
    *a3 = v6;
    unint64_t v15 = a2[1];
    *(void *)&long long v33 = a2[2];
    *(void *)((char *)&v33 + 7) = *(unint64_t *)((char *)a2 + 23);
    char v16 = *((unsigned char *)a2 + 31);
    a2[3] = 0;
    a2[2] = 0;
    a2[1] = 0;
    unint64_t v17 = a3[3];
    *(_OWORD *)(a2 + 1) = *(_OWORD *)(a3 + 1);
    a2[3] = v17;
    *(unint64_t *)((char *)a3 + 23) = *(void *)((char *)&v33 + 7);
    a3[1] = v15;
    a3[2] = v33;
    *((unsigned char *)a3 + 31) = v16;
    unint64_t v18 = *a2;
    unint64_t v19 = *a1;
    if (*a2 >= *a1)
    {
      if (v19 < v18 || !pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<(a2 + 1, a1 + 1)) {
        return 1;
      }
      unint64_t v19 = *a1;
      unint64_t v18 = *a2;
    }
    *a1 = v18;
    *a2 = v19;
    unint64_t v20 = a1[1];
    *(void *)&long long v34 = a1[2];
    *(void *)((char *)&v34 + 7) = *(unint64_t *)((char *)a1 + 23);
    char v21 = *((unsigned char *)a1 + 31);
    a1[2] = 0;
    a1[3] = 0;
    a1[1] = 0;
    unint64_t v22 = a2[3];
    *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
    a1[3] = v22;
    a2[1] = v20;
    *(unint64_t *)((char *)a2 + 23) = *(void *)((char *)&v34 + 7);
    a2[2] = v34;
    *((unsigned char *)a2 + 31) = v21;
    return 2;
  }
  if (v6 < v14) {
    return 0;
  }
  uint64_t result = pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<(a3 + 1, a2 + 1);
  if (result)
  {
    unint64_t v6 = *a2;
    unint64_t v14 = *a3;
    goto LABEL_15;
  }
  return result;
}

unint64_t *sub_2168C17BC(uint64_t *a1, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v32 = *MEMORY[0x263EF8340];
  unint64_t v28 = *a1;
  unint64_t v4 = *a1;
  long long v29 = *(_OWORD *)(a1 + 1);
  uint64_t v30 = a1[3];
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  unint64_t v5 = *(void *)(a2 - 32);
  if (v4 >= v5)
  {
    if (v5 < v4 || !pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<(&v29, (void *)(a2 - 24)))
    {
      for (uint64_t i = (unint64_t *)(a1 + 4);
            (unint64_t)i < v2
         && v28 >= *i
         && (*i < v28 || !pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<(&v29, i + 1));
      goto LABEL_16;
    }
    unint64_t v4 = v28;
  }
  uint64_t i = (unint64_t *)a1;
  while (1)
  {
    unint64_t v8 = i[4];
    i += 4;
    unint64_t v7 = v8;
    if (v4 < v8) {
      break;
    }
    if (v7 >= v4)
    {
      if (pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<(&v29, i + 1)) {
        break;
      }
      unint64_t v4 = v28;
    }
  }
LABEL_16:
  if ((unint64_t)i < v2)
  {
    do
    {
      do
      {
        unint64_t v10 = *(void *)(v2 - 32);
        v2 -= 32;
        unint64_t v9 = v10;
      }
      while (v28 < v10);
    }
    while (v9 >= v28 && pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<(&v29, (void *)(v2 + 8)));
  }
  while ((unint64_t)i < v2)
  {
    unint64_t v11 = *i;
    *uint64_t i = *(void *)v2;
    *(void *)unint64_t v2 = v11;
    uint64_t v12 = i[1];
    uint64_t v13 = i[2];
    *(void *)&v31[7] = *(unint64_t *)((char *)i + 23);
    *(void *)unint64_t v31 = v13;
    LOBYTE(v11) = *((unsigned char *)i + 31);
    i[2] = 0;
    i[3] = 0;
    i[1] = 0;
    uint64_t v14 = *(void *)(v2 + 24);
    *(_OWORD *)(i + 1) = *(_OWORD *)(v2 + 8);
    i[3] = v14;
    uint64_t v15 = *(void *)v31;
    *(void *)(v2 + 8) = v12;
    *(void *)(v2 + 16) = v15;
    *(void *)(v2 + 23) = *(void *)&v31[7];
    *(unsigned char *)(v2 + 31) = v11;
    unint64_t v17 = i[4];
    i += 4;
    unint64_t v16 = v17;
    unint64_t v18 = v28;
    while (v18 >= v16)
    {
      if (v16 >= v18)
      {
        if (pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<(&v29, i + 1)) {
          goto LABEL_27;
        }
        unint64_t v18 = v28;
      }
      unint64_t v19 = i[4];
      i += 4;
      unint64_t v16 = v19;
    }
    do
    {
      do
      {
LABEL_27:
        unint64_t v21 = *(void *)(v2 - 32);
        v2 -= 32;
        unint64_t v20 = v21;
      }
      while (v28 < v21);
    }
    while (v20 >= v28 && pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<(&v29, (void *)(v2 + 8)));
  }
  if (i - 4 == (unint64_t *)a1)
  {
    int v25 = *((char *)i - 1);
    *(i - 4) = v28;
    unint64_t v23 = (uint64_t *)(i - 3);
    if (v25 < 0) {
      operator delete((void *)*v23);
    }
  }
  else
  {
    unint64_t v22 = a1 + 1;
    *a1 = *(i - 4);
    if (*((char *)a1 + 31) < 0) {
      operator delete((void *)*v22);
    }
    unint64_t v23 = (uint64_t *)(i - 3);
    long long v24 = *(_OWORD *)(i - 3);
    v22[2] = *(i - 1);
    *(_OWORD *)unint64_t v22 = v24;
    *((unsigned char *)i - 1) = 0;
    *((unsigned char *)i - 24) = 0;
    *(i - 4) = v28;
  }
  long long v26 = v29;
  v23[2] = v30;
  *(_OWORD *)unint64_t v23 = v26;
  return i;
}

void sub_2168C1A44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2168C1A74(uint64_t *a1, unint64_t a2)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  unint64_t v4 = *a1;
  unint64_t v34 = *a1;
  unint64_t v5 = a1 + 1;
  long long v35 = *(_OWORD *)(a1 + 1);
  uint64_t v36 = a1[3];
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  unint64_t v6 = a1;
  while (1)
  {
    do
    {
      unint64_t v8 = v6[4];
      v6 += 4;
      unint64_t v7 = v8;
    }
    while (v8 < v4);
    if (v4 < v7 || !pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<(v6 + 1, &v35)) {
      break;
    }
    unint64_t v4 = v34;
  }
  if (v6 - 4 == a1)
  {
LABEL_20:
    if ((unint64_t)v6 < a2)
    {
      do
      {
        unint64_t v14 = *(void *)(a2 - 32);
        a2 -= 32;
        unint64_t v13 = v14;
        if (v14 < v34) {
          break;
        }
        if (v34 < v13) {
          goto LABEL_20;
        }
        BOOL v15 = pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<((void *)(a2 + 8), &v35);
        char v16 = (unint64_t)v6 >= a2 || v15;
      }
      while ((v16 & 1) == 0);
    }
  }
  else
  {
    unint64_t v10 = *(void *)(a2 - 32);
    a2 -= 32;
    unint64_t v9 = v10;
    unint64_t v11 = v34;
    while (v9 >= v11)
    {
      if (v11 >= v9)
      {
        if (pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<((void *)(a2 + 8), &v35)) {
          break;
        }
        unint64_t v11 = v34;
      }
      unint64_t v12 = *(void *)(a2 - 32);
      a2 -= 32;
      unint64_t v9 = v12;
    }
  }
  unint64_t v17 = v6;
  if ((unint64_t)v6 < a2)
  {
    unint64_t v18 = a2;
    do
    {
      uint64_t v19 = *v17;
      *unint64_t v17 = *(void *)v18;
      *(void *)unint64_t v18 = v19;
      uint64_t v20 = v17[1];
      uint64_t v21 = v17[2];
      *(void *)&v37[7] = *(uint64_t *)((char *)v17 + 23);
      *(void *)uint64_t v37 = v21;
      LOBYTE(v19) = *((unsigned char *)v17 + 31);
      v17[2] = 0;
      v17[3] = 0;
      v17[1] = 0;
      uint64_t v22 = *(void *)(v18 + 24);
      *(_OWORD *)(v17 + 1) = *(_OWORD *)(v18 + 8);
      v17[3] = v22;
      uint64_t v23 = *(void *)v37;
      *(void *)(v18 + 8) = v20;
      *(void *)(v18 + 16) = v23;
      *(void *)(v18 + 23) = *(void *)&v37[7];
      *(unsigned char *)(v18 + 31) = v19;
      while (1)
      {
        do
        {
          unint64_t v25 = v17[4];
          v17 += 4;
          unint64_t v24 = v25;
          unint64_t v26 = v34;
        }
        while (v25 < v34);
        if (v34 < v24) {
          break;
        }
        if (!pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<(v17 + 1, &v35)) {
          goto LABEL_27;
        }
      }
      do
      {
LABEL_28:
        unint64_t v28 = *(void *)(v18 - 32);
        v18 -= 32;
        unint64_t v27 = v28;
        if (v28 < v26) {
          goto LABEL_31;
        }
      }
      while (v26 < v27);
      if (!pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<((void *)(v18 + 8), &v35))
      {
LABEL_27:
        unint64_t v26 = v34;
        goto LABEL_28;
      }
LABEL_31:
      ;
    }
    while ((unint64_t)v17 < v18);
  }
  if (v17 - 4 == a1)
  {
    int v31 = *((char *)v17 - 1);
    *(v17 - 4) = v34;
    long long v29 = v17 - 3;
    if (v31 < 0) {
      operator delete((void *)*v29);
    }
  }
  else
  {
    *a1 = *(v17 - 4);
    if (*((char *)a1 + 31) < 0) {
      operator delete((void *)*v5);
    }
    long long v29 = v17 - 3;
    long long v30 = *(_OWORD *)(v17 - 3);
    v5[2] = *(v17 - 1);
    *(_OWORD *)unint64_t v5 = v30;
    *((unsigned char *)v17 - 1) = 0;
    *((unsigned char *)v17 - 24) = 0;
    *(v17 - 4) = v34;
  }
  long long v32 = v35;
  v29[2] = v36;
  *(_OWORD *)long long v29 = v32;
  return v17 - 4;
}

void sub_2168C1CF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_2168C1D24(uint64_t a1, unint64_t *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v4 = ((uint64_t)a2 - a1) >> 5;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v6 = *(a2 - 4);
      unint64_t v7 = *(void *)a1;
      if (v6 < *(void *)a1) {
        goto LABEL_6;
      }
      if (v7 >= v6)
      {
        if (!pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<(a2 - 3, (void *)(a1 + 8))) {
          return 1;
        }
        unint64_t v7 = *(void *)a1;
        unint64_t v6 = *(a2 - 4);
LABEL_6:
        *(void *)a1 = v6;
        *(a2 - 4) = v7;
        unint64_t v8 = *(void *)(a1 + 8);
        v22[0] = *(void *)(a1 + 16);
        *(void *)((char *)v22 + 7) = *(void *)(a1 + 23);
        char v9 = *(unsigned char *)(a1 + 31);
        *(void *)(a1 + 16) = 0;
        *(void *)(a1 + 24) = 0;
        *(void *)(a1 + 8) = 0;
        uint64_t v10 = *(a2 - 1);
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 - 3);
        *(void *)(a1 + 24) = v10;
        *(unint64_t *)((char *)a2 - 9) = *(void *)((char *)v22 + 7);
        *(a2 - 3) = v8;
        *(a2 - 2) = v22[0];
        *((unsigned char *)a2 - 1) = v9;
        return 1;
      }
      return result;
    case 3:
      sub_2168C14B4((unint64_t *)a1, (unint64_t *)(a1 + 32), a2 - 4);
      return 1;
    case 4:
      sub_2168C2058(a1, a1 + 32, a1 + 64, (uint64_t)(a2 - 4));
      return 1;
    case 5:
      sub_2168C2274(a1, a1 + 32, a1 + 64, a1 + 96, a2 - 4);
      return 1;
    default:
      unint64_t v11 = (unint64_t *)(a1 + 64);
      sub_2168C14B4((unint64_t *)a1, (unint64_t *)(a1 + 32), (unint64_t *)(a1 + 64));
      unint64_t v12 = (unint64_t *)(a1 + 96);
      if ((unint64_t *)(a1 + 96) == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    unint64_t v15 = *v12;
    if (*v12 < *v11) {
      break;
    }
    if (*v11 >= v15 && pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<(v12 + 1, v11 + 1))
    {
      unint64_t v15 = *v12;
      break;
    }
LABEL_26:
    unint64_t v11 = v12;
    v13 += 32;
    v12 += 4;
    if (v12 == a2) {
      return 1;
    }
  }
  v22[0] = v15;
  *(_OWORD *)&v22[1] = *(_OWORD *)(v12 + 1);
  unint64_t v23 = v12[3];
  v12[1] = 0;
  v12[2] = 0;
  void v12[3] = 0;
  for (uint64_t i = v13; ; i -= 32)
  {
    uint64_t v17 = a1 + i;
    *(void *)(a1 + i + 96) = *(void *)(a1 + i + 64);
    unint64_t v18 = (void **)(a1 + i + 104);
    if (*(char *)(a1 + i + 127) < 0) {
      operator delete(*v18);
    }
    *(_OWORD *)unint64_t v18 = *(_OWORD *)(v17 + 72);
    *(void *)(a1 + i + 120) = *(void *)(v17 + 88);
    *(unsigned char *)(v17 + 95) = 0;
    *(unsigned char *)(v17 + 72) = 0;
    if (i == -64)
    {
      *(void *)a1 = v22[0];
      goto LABEL_25;
    }
    unint64_t v19 = *(void *)(a1 + i + 32);
    if (v22[0] >= v19)
    {
      if (v19 < v22[0])
      {
        *(void *)(a1 + i + 64) = v22[0];
        goto LABEL_25;
      }
      if (!pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<(&v22[1], (void *)(a1 + i + 40))) {
        break;
      }
    }
  }
  int v20 = *(char *)(a1 + i + 95);
  *(void *)(a1 + i + 64) = v22[0];
  if (v20 < 0) {
    operator delete(*(void **)(a1 + i + 72));
  }
LABEL_25:
  uint64_t v21 = a1 + i;
  *(_OWORD *)(v21 + 72) = *(_OWORD *)&v22[1];
  *(void *)(v21 + 88) = v23;
  if (++v14 != 8) {
    goto LABEL_26;
  }
  return v12 + 4 == a2;
}

void sub_2168C201C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
}

uint64_t sub_2168C2058(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = sub_2168C14B4((unint64_t *)a1, (unint64_t *)a2, (unint64_t *)a3);
  unint64_t v9 = *(void *)a4;
  unint64_t v10 = *(void *)a3;
  if (*(void *)a4 >= *(void *)a3)
  {
    if (v10 < v9) {
      return result;
    }
    uint64_t result = pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<((void *)(a4 + 8), (void *)(a3 + 8));
    if (!result) {
      return result;
    }
    unint64_t v10 = *(void *)a3;
    unint64_t v9 = *(void *)a4;
  }
  *(void *)a3 = v9;
  *(void *)a4 = v10;
  uint64_t v11 = *(void *)(a3 + 8);
  *(void *)&long long v24 = *(void *)(a3 + 16);
  *(void *)((char *)&v24 + 7) = *(void *)(a3 + 23);
  char v12 = *(unsigned char *)(a3 + 31);
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 8) = 0;
  uint64_t v13 = *(void *)(a4 + 24);
  *(_OWORD *)(a3 + 8) = *(_OWORD *)(a4 + 8);
  *(void *)(a3 + 24) = v13;
  *(void *)(a4 + 23) = *(void *)((char *)&v24 + 7);
  *(void *)(a4 + 8) = v11;
  *(void *)(a4 + 16) = v24;
  *(unsigned char *)(a4 + 31) = v12;
  unint64_t v14 = *(void *)a3;
  unint64_t v15 = *(void *)a2;
  if (*(void *)a3 >= *(void *)a2)
  {
    if (v15 < v14) {
      return result;
    }
    uint64_t result = pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<((void *)(a3 + 8), (void *)(a2 + 8));
    if (!result) {
      return result;
    }
    unint64_t v15 = *(void *)a2;
    unint64_t v14 = *(void *)a3;
  }
  *(void *)a2 = v14;
  *(void *)a3 = v15;
  uint64_t v16 = *(void *)(a2 + 8);
  *(void *)&long long v25 = *(void *)(a2 + 16);
  *(void *)((char *)&v25 + 7) = *(void *)(a2 + 23);
  char v17 = *(unsigned char *)(a2 + 31);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v18 = *(void *)(a3 + 24);
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
  *(void *)(a2 + 24) = v18;
  *(void *)(a3 + 8) = v16;
  *(void *)(a3 + 23) = *(void *)((char *)&v25 + 7);
  *(void *)(a3 + 16) = v25;
  *(unsigned char *)(a3 + 31) = v17;
  unint64_t v19 = *(void *)a2;
  unint64_t v20 = *(void *)a1;
  if (*(void *)a2 < *(void *)a1)
  {
LABEL_7:
    *(void *)a1 = v19;
    *(void *)a2 = v20;
    uint64_t v21 = *(void *)(a1 + 8);
    *(void *)&long long v26 = *(void *)(a1 + 16);
    *(void *)((char *)&v26 + 7) = *(void *)(a1 + 23);
    char v22 = *(unsigned char *)(a1 + 31);
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v23 = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = v23;
    *(void *)(a2 + 8) = v21;
    *(void *)(a2 + 23) = *(void *)((char *)&v26 + 7);
    *(void *)(a2 + 16) = v26;
    *(unsigned char *)(a2 + 31) = v22;
    return result;
  }
  if (v20 >= v19)
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<((void *)(a2 + 8), (void *)(a1 + 8));
    if (result)
    {
      unint64_t v20 = *(void *)a1;
      unint64_t v19 = *(void *)a2;
      goto LABEL_7;
    }
  }
  return result;
}

uint64_t sub_2168C2274(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  uint64_t result = sub_2168C2058(a1, a2, a3, a4);
  unint64_t v11 = *a5;
  unint64_t v12 = *(void *)a4;
  if (*a5 >= *(void *)a4)
  {
    if (v12 < v11) {
      return result;
    }
    uint64_t result = pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<(a5 + 1, (void *)(a4 + 8));
    if (!result) {
      return result;
    }
    unint64_t v12 = *(void *)a4;
    unint64_t v11 = *a5;
  }
  *(void *)a4 = v11;
  *a5 = v12;
  unint64_t v13 = *(void *)(a4 + 8);
  *(void *)&long long v31 = *(void *)(a4 + 16);
  *(void *)((char *)&v31 + 7) = *(void *)(a4 + 23);
  char v14 = *(unsigned char *)(a4 + 31);
  *(void *)(a4 + 24) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)(a4 + 8) = 0;
  unint64_t v15 = a5[3];
  *(_OWORD *)(a4 + 8) = *(_OWORD *)(a5 + 1);
  *(void *)(a4 + 24) = v15;
  *(unint64_t *)((char *)a5 + 23) = *(void *)((char *)&v31 + 7);
  a5[1] = v13;
  a5[2] = v31;
  *((unsigned char *)a5 + 31) = v14;
  unint64_t v16 = *(void *)a4;
  unint64_t v17 = *(void *)a3;
  if (*(void *)a4 >= *(void *)a3)
  {
    if (v17 < v16) {
      return result;
    }
    uint64_t result = pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<((void *)(a4 + 8), (void *)(a3 + 8));
    if (!result) {
      return result;
    }
    unint64_t v17 = *(void *)a3;
    unint64_t v16 = *(void *)a4;
  }
  *(void *)a3 = v16;
  *(void *)a4 = v17;
  uint64_t v18 = *(void *)(a3 + 8);
  *(void *)&long long v32 = *(void *)(a3 + 16);
  *(void *)((char *)&v32 + 7) = *(void *)(a3 + 23);
  char v19 = *(unsigned char *)(a3 + 31);
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 8) = 0;
  uint64_t v20 = *(void *)(a4 + 24);
  *(_OWORD *)(a3 + 8) = *(_OWORD *)(a4 + 8);
  *(void *)(a3 + 24) = v20;
  *(void *)(a4 + 8) = v18;
  *(void *)(a4 + 23) = *(void *)((char *)&v32 + 7);
  *(void *)(a4 + 16) = v32;
  *(unsigned char *)(a4 + 31) = v19;
  unint64_t v21 = *(void *)a3;
  unint64_t v22 = *(void *)a2;
  if (*(void *)a3 >= *(void *)a2)
  {
    if (v22 < v21) {
      return result;
    }
    uint64_t result = pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<((void *)(a3 + 8), (void *)(a2 + 8));
    if (!result) {
      return result;
    }
    unint64_t v22 = *(void *)a2;
    unint64_t v21 = *(void *)a3;
  }
  *(void *)a2 = v21;
  *(void *)a3 = v22;
  uint64_t v23 = *(void *)(a2 + 8);
  *(void *)&long long v33 = *(void *)(a2 + 16);
  *(void *)((char *)&v33 + 7) = *(void *)(a2 + 23);
  char v24 = *(unsigned char *)(a2 + 31);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v25 = *(void *)(a3 + 24);
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
  *(void *)(a2 + 24) = v25;
  *(void *)(a3 + 8) = v23;
  *(void *)(a3 + 23) = *(void *)((char *)&v33 + 7);
  *(void *)(a3 + 16) = v33;
  *(unsigned char *)(a3 + 31) = v24;
  unint64_t v26 = *(void *)a2;
  unint64_t v27 = *(void *)a1;
  if (*(void *)a2 < *(void *)a1)
  {
LABEL_8:
    *(void *)a1 = v26;
    *(void *)a2 = v27;
    uint64_t v28 = *(void *)(a1 + 8);
    *(void *)&long long v34 = *(void *)(a1 + 16);
    *(void *)((char *)&v34 + 7) = *(void *)(a1 + 23);
    char v29 = *(unsigned char *)(a1 + 31);
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v30 = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = v30;
    *(void *)(a2 + 8) = v28;
    *(void *)(a2 + 23) = *(void *)((char *)&v34 + 7);
    *(void *)(a2 + 16) = v34;
    *(unsigned char *)(a2 + 31) = v29;
    return result;
  }
  if (v27 >= v26)
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<((void *)(a2 + 8), (void *)(a1 + 8));
    if (result)
    {
      unint64_t v27 = *(void *)a1;
      unint64_t v26 = *(void *)a2;
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_2168C2524(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v6 = a2;
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) >> 5;
    if (a2 - a1 >= 33)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      unint64_t v12 = (unint64_t *)(a1 + 32 * v10);
      do
      {
        sub_2168C26E0(a1, a4, v9, v12);
        v12 -= 4;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = v6;
    if (v6 != a3)
    {
      uint64_t v14 = v6;
      while (1)
      {
        unint64_t v15 = *(void *)v14;
        unint64_t v16 = *(void *)a1;
        if (*(void *)v14 >= *(void *)a1)
        {
          if (v16 < v15
            || !pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<((void *)(v14 + 8), (void *)(a1 + 8)))
          {
            goto LABEL_12;
          }
          unint64_t v15 = *(void *)v14;
          unint64_t v16 = *(void *)a1;
        }
        *(void *)uint64_t v14 = v16;
        *(void *)a1 = v15;
        uint64_t v17 = *(void *)(v14 + 8);
        *(void *)&long long v23 = *(void *)(v14 + 16);
        *(void *)((char *)&v23 + 7) = *(void *)(v14 + 23);
        char v18 = *(unsigned char *)(v14 + 31);
        *(void *)(v14 + 16) = 0;
        *(void *)(v14 + 24) = 0;
        *(void *)(v14 + 8) = 0;
        uint64_t v19 = *(void *)(a1 + 24);
        *(_OWORD *)(v14 + 8) = *(_OWORD *)(a1 + 8);
        *(void *)(v14 + 24) = v19;
        *(void *)(a1 + 8) = v17;
        *(void *)(a1 + 23) = *(void *)((char *)&v23 + 7);
        *(void *)(a1 + 16) = v23;
        *(unsigned char *)(a1 + 31) = v18;
        sub_2168C26E0(a1, a4, v9, (unint64_t *)a1);
LABEL_12:
        v14 += 32;
        if (v14 == a3)
        {
          uint64_t v13 = a3;
          break;
        }
      }
    }
    if (v8 >= 33)
    {
      unint64_t v20 = (unint64_t)v8 >> 5;
      do
      {
        sub_2168C290C(a1, v6, a4, v20);
        v6 -= 32;
      }
      while (v20-- > 2);
    }
    return v13;
  }
  return a3;
}

__n128 sub_2168C26E0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    unint64_t v5 = a4;
    int64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - a1) >> 5)
    {
      uint64_t v9 = ((uint64_t)a4 - a1) >> 4;
      uint64_t v10 = v9 + 1;
      unint64_t v11 = (unint64_t *)(a1 + 32 * (v9 + 1));
      uint64_t v12 = v9 + 2;
      if (v9 + 2 < a3)
      {
        unint64_t v13 = v11[4];
        if (*v11 < v13
          || v13 >= *v11
          && pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<((void *)(a1 + 32 * v10 + 8), v11 + 5))
        {
          v11 += 4;
          uint64_t v10 = v12;
        }
      }
      unint64_t v15 = *v5;
      if (*v11 >= *v5)
      {
        if (v15 >= *v11)
        {
          if (pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<(v11 + 1, v5 + 1)) {
            return result;
          }
          unint64_t v15 = *v5;
        }
        unint64_t v24 = v15;
        __n128 v25 = *(__n128 *)(v5 + 1);
        unint64_t v26 = v5[3];
        v5[1] = 0;
        v5[2] = 0;
        void v5[3] = 0;
        while (1)
        {
          unint64_t v16 = v11;
          *unint64_t v5 = *v11;
          uint64_t v17 = (void **)(v5 + 1);
          if (*((char *)v5 + 31) < 0) {
            operator delete(*v17);
          }
          char v18 = (void **)(v16 + 1);
          long long v19 = *(_OWORD *)(v16 + 1);
          void v5[3] = v16[3];
          *(_OWORD *)uint64_t v17 = v19;
          *((unsigned char *)v16 + 31) = 0;
          *((unsigned char *)v16 + 8) = 0;
          if (v7 < v10)
          {
            *unint64_t v16 = v24;
            goto LABEL_28;
          }
          uint64_t v20 = (2 * v10) | 1;
          unint64_t v11 = (unint64_t *)(a1 + 32 * v20);
          if (2 * v10 + 2 < a3)
          {
            unint64_t v21 = v11[4];
            if (*v11 < v21
              || v21 >= *v11
              && pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<((void *)(a1 + 32 * v20 + 8), v11 + 5))
            {
              v11 += 4;
              uint64_t v20 = 2 * v10 + 2;
            }
          }
          unint64_t v22 = v24;
          if (*v11 < v24) {
            break;
          }
          unint64_t v5 = v16;
          uint64_t v10 = v20;
          if (v24 >= *v11)
          {
            unint64_t v5 = v16;
            uint64_t v10 = v20;
            if (pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<(v11 + 1, &v25))
            {
              unint64_t v22 = v24;
              break;
            }
          }
        }
        int v23 = *((char *)v16 + 31);
        *unint64_t v16 = v22;
        if (v23 < 0) {
          operator delete(*v18);
        }
LABEL_28:
        __n128 result = v25;
        double v16[3] = v26;
        *(__n128 *)char v18 = result;
      }
    }
  }
  return result;
}

void sub_2168C28F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2168C290C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v8 = *(void *)a1;
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)uint64_t v14 = *(void *)(a1 + 16);
    *(void *)&v14[7] = *(void *)(a1 + 23);
    char v9 = *(unsigned char *)(a1 + 31);
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = sub_2168C2A64(a1, a3, a4);
    uint64_t v11 = v10;
    if (v10 == a2 - 32)
    {
      *(void *)uint64_t v10 = v8;
      if (*(char *)(v10 + 31) < 0) {
        operator delete(*(void **)(v10 + 8));
      }
      *(void *)(v11 + 8) = v7;
      *(void *)(v11 + 16) = *(void *)v14;
      *(void *)(v11 + 23) = *(void *)&v14[7];
      *(unsigned char *)(v11 + 31) = v9;
    }
    else
    {
      *(void *)uint64_t v10 = *(void *)(a2 - 32);
      uint64_t v12 = (void **)(v10 + 8);
      if (*(char *)(v10 + 31) < 0) {
        operator delete(*v12);
      }
      long long v13 = *(_OWORD *)(a2 - 24);
      *(void *)(v11 + 24) = *(void *)(a2 - 8);
      *(_OWORD *)uint64_t v12 = v13;
      *(void *)(a2 - 32) = v8;
      *(void *)(a2 - 24) = v7;
      *(void *)(a2 - 16) = *(void *)v14;
      *(void *)(a2 - 9) = *(void *)&v14[7];
      *(unsigned char *)(a2 - 1) = v9;
      sub_2168C2B58(a1, v11 + 32, a3, (v11 + 32 - a1) >> 5);
    }
  }
}

void sub_2168C2A4C(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2168C2A64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = a3 - 2;
  if (a3 < 2) {
    uint64_t v6 = a3 - 1;
  }
  uint64_t v7 = v6 >> 1;
  do
  {
    uint64_t v8 = v5 + 1;
    uint64_t v9 = a1 + 32 * (v5 + 1);
    uint64_t v10 = 2 * v5;
    uint64_t v5 = (2 * v5) | 1;
    uint64_t v11 = v10 + 2;
    if (v10 + 2 < a3)
    {
      unint64_t v12 = *(void *)(v9 + 32);
      if (*(void *)v9 < v12
        || v12 >= *(void *)v9
        && pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<((void *)(a1 + 32 * v8 + 8), (void *)(v9 + 40)))
      {
        v9 += 32;
        uint64_t v5 = v11;
      }
    }
    *(void *)a1 = *(void *)v9;
    long long v13 = (void **)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      operator delete(*v13);
    }
    long long v14 = *(_OWORD *)(v9 + 8);
    *(void *)(a1 + 24) = *(void *)(v9 + 24);
    *(_OWORD *)long long v13 = v14;
    *(unsigned char *)(v9 + 31) = 0;
    *(unsigned char *)(v9 + 8) = 0;
    a1 = v9;
  }
  while (v5 <= v7);
  return v9;
}

double sub_2168C2B58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v7 = v4 >> 1;
    uint64_t v8 = (unint64_t *)(a1 + 32 * (v4 >> 1));
    uint64_t v10 = (unint64_t *)(a2 - 32);
    unint64_t v9 = *(void *)(a2 - 32);
    if (*v8 >= v9)
    {
      if (v9 < *v8
        || !pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<((void *)(a1 + 32 * v7 + 8), (void *)(a2 - 24)))
      {
        return result;
      }
      unint64_t v9 = *v10;
    }
    unint64_t v18 = v9;
    long long v19 = *(_OWORD *)(a2 - 24);
    unint64_t v20 = *(void *)(a2 - 8);
    *(void *)(a2 - 24) = 0;
    *(void *)(a2 - 16) = 0;
    *(void *)(a2 - 8) = 0;
    while (1)
    {
      unint64_t v12 = v8;
      *uint64_t v10 = *v8;
      long long v13 = (void **)(v10 + 1);
      if (*((char *)v10 + 31) < 0) {
        operator delete(*v13);
      }
      long long v14 = (void **)(v12 + 1);
      long long v15 = *(_OWORD *)(v12 + 1);
      v10[3] = v12[3];
      *(_OWORD *)long long v13 = v15;
      *((unsigned char *)v12 + 31) = 0;
      *((unsigned char *)v12 + 8) = 0;
      if (!v7)
      {
        unint64_t v16 = v18;
LABEL_16:
        *unint64_t v12 = v16;
        goto LABEL_17;
      }
      unint64_t v7 = (v7 - 1) >> 1;
      uint64_t v8 = (unint64_t *)(a1 + 32 * v7);
      unint64_t v16 = v18;
      uint64_t v10 = v12;
      if (*v8 >= v18)
      {
        if (v18 < *v8) {
          goto LABEL_16;
        }
        uint64_t v10 = v12;
        if (!pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<((void *)(a1 + 32 * v7 + 8), &v19)) {
          break;
        }
      }
    }
    int v17 = *((char *)v12 + 31);
    *unint64_t v12 = v18;
    if (v17 < 0) {
      operator delete(*v14);
    }
LABEL_17:
    double result = *(double *)&v19;
    *(_OWORD *)long long v14 = v19;
    void v12[3] = v20;
  }
  return result;
}

void sub_2168C2CB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2168C2CD4(uint64_t **a1, void *a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)sub_2168C2D80((uint64_t)a1, &v11, a2);
  unint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    sub_2168C2E14((uint64_t)a1, a4, (uint64_t)v10);
    sub_21677B358(a1, v11, v8, v10[0]);
    unint64_t v7 = v10[0];
    v10[0] = 0;
    sub_2168C2EAC((uint64_t)v10, 0);
  }
  return v7;
}

void *sub_2168C2D80(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  unint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        unint64_t v7 = v4;
        uint64_t v8 = v4 + 4;
        if (!pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<(a3, v4 + 4)) {
          break;
        }
        unint64_t v4 = (void *)*v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<(v8, a3)) {
        break;
      }
      uint64_t v5 = v7 + 1;
      unint64_t v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    unint64_t v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

unsigned char *sub_2168C2E14@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  double result = v6 + 4;
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    double result = sub_216778F24(result, *(void **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)double result = v9;
  }
  v6[7] = 0;
  _OWORD v6[8] = 0;
  v6[9] = 0;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_2168C2E94(_Unwind_Exception *a1)
{
  sub_2168C2EAC(v1, 0);
  _Unwind_Resume(a1);
}

void sub_2168C2EAC(uint64_t a1, uint64_t a2)
{
  int v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_2168C0C1C((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void sub_2168C2F04(void ***a1)
{
  uint64_t v1 = *a1;
  int v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 88;
        sub_2168C2F9C((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_2168C2F9C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void **)(a2 + 64);
  sub_2168C0364(&v3);
  uint64_t v3 = (void **)(a2 + 40);
  sub_2168C02E0(&v3);
  if ((*(void *)a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_2168C2FFC(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 88;
        sub_2168C2F9C((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_2168C306C(uint64_t *a1, uint64_t *a2, int *a3, int *a4, int *a5, char *a6, char *a7)
{
  uint64_t v8 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  unint64_t v9 = v8 + 1;
  if ((unint64_t)(v8 + 1) > 0x2E8BA2E8BA2E8BALL) {
    sub_21677CB10();
  }
  if (0x5D1745D1745D1746 * ((a1[2] - *a1) >> 3) > v9) {
    unint64_t v9 = 0x5D1745D1745D1746 * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((a1[2] - *a1) >> 3)) >= 0x1745D1745D1745DLL) {
    unint64_t v16 = 0x2E8BA2E8BA2E8BALL;
  }
  else {
    unint64_t v16 = v9;
  }
  unint64_t v24 = a1 + 2;
  if (v16) {
    int v17 = (char *)sub_2168C32AC((uint64_t)(a1 + 2), v16);
  }
  else {
    int v17 = 0;
  }
  unint64_t v20 = v17;
  unint64_t v21 = &v17[88 * v8];
  int v23 = &v17[88 * v16];
  sub_2168C31D0((uint64_t)(a1 + 2), (uint64_t)v21, a2, a3, a4, a5, a6, a7);
  unint64_t v22 = v21 + 88;
  sub_2168C3234(a1, &v20);
  uint64_t v18 = a1[1];
  sub_2168C3464(&v20);
  return v18;
}

void sub_2168C31BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168C3464((void **)va);
  _Unwind_Resume(a1);
}

double sub_2168C31D0(uint64_t a1, uint64_t a2, uint64_t *a3, int *a4, int *a5, int *a6, char *a7, char *a8)
{
  int v8 = *a4;
  uint64_t v9 = *a5;
  uint64_t v10 = *a6;
  char v11 = *a7;
  char v12 = *a8;
  uint64_t v13 = *a3;
  *(void *)a2 = *a3;
  if ((v13 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)a2 &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_DWORD *)(a2 + 8) = v8;
  *(void *)(a2 + 16) = v9;
  *(void *)(a2 + 24) = v10;
  *(unsigned char *)(a2 + 32) = v11;
  *(unsigned char *)(a2 + 33) = v12;
  double result = 0.0;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  return result;
}

uint64_t sub_2168C3234(uint64_t *a1, void *a2)
{
  uint64_t result = sub_2168C32F8((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_2168C32AC(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2E8BA2E8BA2E8BBLL) {
    sub_21677CA1C();
  }
  return operator new(88 * a2);
}

uint64_t sub_2168C32F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    do
    {
      uint64_t v8 = *(void *)(a3 - 88);
      a3 -= 88;
      *(void *)(v7 - 88) = v8;
      *(void *)a3 = 0;
      long long v9 = *(_OWORD *)(a3 + 8);
      *(_OWORD *)(v7 - 70) = *(_OWORD *)(a3 + 18);
      *(_OWORD *)(v7 - 80) = v9;
      *(void *)(v7 - 40) = 0;
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 48) = 0;
      *(_OWORD *)(v7 - 48) = *(_OWORD *)(a3 + 40);
      *(void *)(v7 - 32) = *(void *)(a3 + 56);
      *(void *)(a3 + 40) = 0;
      *(void *)(a3 + 48) = 0;
      *(void *)(a3 + 56) = 0;
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 + 64);
      *(void *)(v7 - 8) = *(void *)(a3 + 80);
      *(void *)(a3 + 64) = 0;
      *(void *)(a3 + 72) = 0;
      *(void *)(a3 + 80) = 0;
      uint64_t v7 = *((void *)&v15 + 1) - 88;
      *((void *)&v15 + 1) -= 88;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_2168C33D8((uint64_t)v12);
  return v10;
}

uint64_t sub_2168C33D8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_2168C3410((uint64_t *)a1);
  }
  return a1;
}

void sub_2168C3410(uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_2168C2F9C(v3, v1);
      v1 += 88;
    }
    while (v1 != v2);
  }
}

void **sub_2168C3464(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_2168C3498(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 88;
    sub_2168C2F9C(v4, i - 88);
  }
}

void *sub_2168C34E0(uint64_t a1, void *a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = (void *)(a1 + 8);
  do
  {
    BOOL v6 = pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<(v3 + 4, a2);
    uint64_t v7 = v3 + 1;
    if (!v6)
    {
      uint64_t v7 = v3;
      uint64_t v5 = v3;
    }
    uint64_t v3 = (void *)*v7;
  }
  while (*v7);
  if (v5 == v2 || pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<(a2, v5 + 4)) {
    return v2;
  }
  return v5;
}

uint64_t sub_2168C355C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_2168C35D4((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_2168C35D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = 0;
  uint64_t v11 = a7 - 8;
  while (a3 + v10 != a5)
  {
    char v12 = (uint64_t *)(v11 + v10);
    *char v12 = *(void *)(a3 + v10 - 8);
    v10 -= 8;
    sub_2168BD80C(v12);
  }
  return a6;
}

uint64_t sub_2168C366C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    sub_2168BD7DC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(i - 8));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_2168C36BC(uint64_t *a1, uint64_t *a2, int *a3, int *a4, uint64_t *a5, char *a6, char *a7)
{
  uint64_t v8 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  unint64_t v9 = v8 + 1;
  if ((unint64_t)(v8 + 1) > 0x2E8BA2E8BA2E8BALL) {
    sub_21677CB10();
  }
  if (0x5D1745D1745D1746 * ((a1[2] - *a1) >> 3) > v9) {
    unint64_t v9 = 0x5D1745D1745D1746 * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((a1[2] - *a1) >> 3)) >= 0x1745D1745D1745DLL) {
    unint64_t v16 = 0x2E8BA2E8BA2E8BALL;
  }
  else {
    unint64_t v16 = v9;
  }
  unint64_t v24 = a1 + 2;
  if (v16) {
    int v17 = (char *)sub_2168C32AC((uint64_t)(a1 + 2), v16);
  }
  else {
    int v17 = 0;
  }
  unint64_t v20 = v17;
  unint64_t v21 = &v17[88 * v8];
  int v23 = &v17[88 * v16];
  sub_2168C3820((uint64_t)(a1 + 2), (uint64_t)v21, a2, a3, a4, a5, a6, a7);
  unint64_t v22 = v21 + 88;
  sub_2168C3234(a1, &v20);
  uint64_t v18 = a1[1];
  sub_2168C3464(&v20);
  return v18;
}

void sub_2168C380C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168C3464((void **)va);
  _Unwind_Resume(a1);
}

double sub_2168C3820(uint64_t a1, uint64_t a2, uint64_t *a3, int *a4, int *a5, uint64_t *a6, char *a7, char *a8)
{
  int v8 = *a4;
  uint64_t v9 = *a5;
  uint64_t v10 = *a6;
  char v11 = *a7;
  char v12 = *a8;
  uint64_t v13 = *a3;
  *(void *)a2 = *a3;
  if ((v13 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)a2 &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_DWORD *)(a2 + 8) = v8;
  *(void *)(a2 + 16) = v9;
  *(void *)(a2 + 24) = v10;
  *(unsigned char *)(a2 + 32) = v11;
  *(unsigned char *)(a2 + 33) = v12;
  double result = 0.0;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  return result;
}

uint64_t sub_2168C3884(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x2E8BA2E8BA2E8BALL) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x2E8BA2E8BA2E8BA3 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x1745D1745D1745DLL) {
    unint64_t v9 = 0x2E8BA2E8BA2E8BALL;
  }
  else {
    unint64_t v9 = v5;
  }
  v16[4] = a1 + 2;
  uint64_t v10 = (char *)sub_2168C32AC(v7, v9);
  char v11 = &v10[88 * v4];
  v16[0] = v10;
  v16[1] = v11;
  double v16[3] = &v10[88 * v12];
  *(void *)char v11 = *(void *)a2;
  *(void *)a2 = 0;
  long long v13 = *(_OWORD *)(a2 + 18);
  *(_OWORD *)(v11 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v11 + 18) = v13;
  *((void *)v11 + 6) = 0;
  *((void *)v11 + 7) = 0;
  *((void *)v11 + 5) = 0;
  *(_OWORD *)(v11 + 40) = *(_OWORD *)(a2 + 40);
  *((void *)v11 + 7) = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *((void *)v11 + 9) = 0;
  *((void *)v11 + 10) = 0;
  *((void *)v11 + 8) = 0;
  *((_OWORD *)v11 + 4) = *(_OWORD *)(a2 + 64);
  *((void *)v11 + 10) = *(void *)(a2 + 80);
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  v16[2] = v11 + 88;
  sub_2168C3234(a1, v16);
  uint64_t v14 = a1[1];
  sub_2168C3464(v16);
  return v14;
}

void sub_2168C39D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168C3464((void **)va);
  _Unwind_Resume(a1);
}

void *sub_2168C39E4(uint64_t a1, void *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v6 = *a2 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = bswap64(0x9E3779B97F4A7C55 * v6);
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = v7;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = v7 & (v8 - 1);
    }
    uint64_t v10 = *(void **)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      double result = (void *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = result[1];
          if (v12 == v7)
          {
            if ((result[2] & 0xFFFFFFFFFFFFFFF8) == v6) {
              return result;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          double result = (void *)*result;
        }
        while (result);
      }
    }
  }
  sub_2168C3C3C(a1, v7, a4, (uint64_t)&v21);
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_21678A04C(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  long long v19 = *(void **)(*(void *)a1 + 8 * v4);
  if (v19)
  {
    *unint64_t v21 = *v19;
    *long long v19 = v21;
  }
  else
  {
    *unint64_t v21 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v21;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*v21)
    {
      unint64_t v20 = *(void *)(*v21 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v20 >= v8) {
          v20 %= v8;
        }
      }
      else
      {
        v20 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v20) = v21;
    }
  }
  double result = v21;
  ++*(void *)(a1 + 24);
  return result;
}

void sub_2168C3C18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a10) {
    sub_2168C3CC0((uint64_t)&a11, a10);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2168C3C3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  double result = operator new(0x30uLL);
  *(void *)a4 = result;
  *(void *)(a4 + 8) = v7;
  *double result = 0;
  result[1] = a2;
  uint64_t v9 = **a3;
  result[2] = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    result[2] &= 0xFFFFFFFFFFFFFFF8;
  }
  result[3] = 0;
  result[4] = 0;
  result[5] = 0;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_2168C3CC0(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    unint64_t v4 = (void **)(a2 + 24);
    sub_2168C0B1C(&v4);
    uint64_t v3 = *(void *)(a2 + 16);
    if ((v3 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else if (!a2)
  {
    return;
  }
  operator delete((void *)a2);
}

uint64_t sub_2168C3D28(uint64_t *a1, void *a2)
{
  uint64_t result = sub_2168C3DA0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_2168C3DA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = a7;
    do
    {
      uint64_t v9 = *(void *)(a3 - 32);
      a3 -= 32;
      *(void *)(v8 - 32) = v9;
      v8 -= 32;
      long long v10 = *(_OWORD *)(a3 + 8);
      *(void *)(v8 + 24) = *(void *)(a3 + 24);
      *(_OWORD *)(v8 + 8) = v10;
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 24) = 0;
      *(void *)(a3 + 8) = 0;
      v7 -= 32;
    }
    while (a3 != a5);
    *((void *)&v16 + 1) = v8;
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_2168C3E44((uint64_t)v13);
  return v11;
}

uint64_t sub_2168C3E44(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_2168C3E7C(a1);
  }
  return a1;
}

void sub_2168C3E7C(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
    v1 += 32;
  }
}

uint64_t sub_2168C3EC4(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_2168C3EFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 32;
      *(void *)(a1 + 16) = v2 - 32;
      if (*(char *)(v2 - 1) < 0)
      {
        operator delete(*(void **)(v2 - 24));
        uint64_t v5 = *(void *)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t sub_2168C3F54(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v9 = 0x555555555555555;
  }
  else {
    unint64_t v9 = v5;
  }
  void v14[4] = a1 + 2;
  if (v9) {
    long long v10 = (char *)sub_2168073F4(v7, v9);
  }
  else {
    long long v10 = 0;
  }
  uint64_t v11 = &v10[48 * v4];
  v14[0] = v10;
  v14[1] = v11;
  void v14[3] = &v10[48 * v9];
  *(_OWORD *)uint64_t v11 = *(_OWORD *)a2;
  *(void *)(a2 + 8) = 0;
  sub_2168C4060((uint64_t)(v11 + 16), a2 + 16);
  v14[2] = v11 + 48;
  sub_2168C4178(a1, v14);
  uint64_t v12 = a1[1];
  sub_2168C4338((uint64_t)v14);
  return v12;
}

void sub_2168C404C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168C4338((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2168C4060(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 24) = -1;
  sub_2168C4098(a1, a2);
  return a1;
}

uint64_t sub_2168C4098(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 24);
  if (v4 != -1) {
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_26C74CBF0[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 24) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  if (v5 != -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_26C74CCB0[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 24) = v5;
  }
  return result;
}

__n128 sub_2168C412C(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  a3->n128_u64[0] = 0;
  return result;
}

void sub_2168C4148(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

void sub_2168C4154(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void sub_2168C4160(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

double sub_2168C416C(uint64_t a1, void *a2, double *a3)
{
  double result = *a3;
  *a2 = *(void *)a3;
  return result;
}

uint64_t sub_2168C4178(uint64_t *a1, void *a2)
{
  uint64_t result = sub_2168C41F0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_2168C41F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      long long v10 = *(_OWORD *)(v9 - 48);
      v9 -= 48;
      *(_OWORD *)(v7 - 48) = v10;
      *(void *)(v9 + 8) = 0;
      sub_2168C4060(v7 - 32, v9 + 16);
      uint64_t v7 = *((void *)&v16 + 1) - 48;
      *((void *)&v16 + 1) -= 48;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_2168C42A0((uint64_t)v13);
  return v11;
}

uint64_t sub_2168C42A0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_2168C42D8(a1);
  }
  return a1;
}

uint64_t sub_2168C42D8(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(result + 8) + 8);
  if (v1 != v2)
  {
    uint64_t result = v1 + 16;
    do
    {
      uint64_t v3 = sub_2168C0420(result);
      uint64_t v4 = *(void *)(v3 - 8);
      if ((v4 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v5 = v3 + 32;
      uint64_t result = v3 + 48;
    }
    while (v5 != v2);
  }
  return result;
}

uint64_t sub_2168C4338(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_2168C4370(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2 != a2)
  {
    uint64_t v4 = result;
    do
    {
      *(void *)(v4 + 16) = v2 - 48;
      uint64_t result = sub_2168C0420(v2 - 32);
      uint64_t v5 = *(void *)(v2 - 40);
      if ((v5 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v2 = *(void *)(v4 + 16);
    }
    while (v2 != a2);
  }
  return result;
}

uint64_t sub_2168C43DC(long long *a1, uint64_t a2)
{
  long long v8 = *a1;
  *((void *)a1 + 1) = 0;
  uint64_t v4 = (uint64_t)(a1 + 1);
  sub_2168C4060((uint64_t)v9, (uint64_t)(a1 + 1));
  *(void *)a1 = *(void *)a2;
  if ((long long *)a2 != a1)
  {
    uint64_t v5 = *((void *)a1 + 1);
    if ((v5 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    *((void *)a1 + 1) = *(void *)(a2 + 8);
    *(void *)(a2 + 8) = 0;
  }
  sub_2168C44E4(v4, a2 + 16);
  *(void *)a2 = v8;
  if (&v8 != (long long *)a2)
  {
    uint64_t v6 = *(void *)(a2 + 8);
    if ((v6 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    *(void *)(a2 + 8) = *((void *)&v8 + 1);
    *((void *)&v8 + 1) = 0;
  }
  sub_2168C44E4(a2 + 16, (uint64_t)v9);
  uint64_t result = sub_2168C0420((uint64_t)v9);
  if ((BYTE8(v8) & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v8 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

uint64_t sub_2168C44E4(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(unsigned int *)(result + 24);
  uint64_t v4 = *(unsigned int *)(a2 + 24);
  if (v3 == -1)
  {
    if (v4 == -1) {
      return result;
    }
  }
  else if (v4 == -1)
  {
    uint64_t result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_26C74CBF0[v3])(&v6, result, a2);
    *(_DWORD *)(v2 + 24) = -1;
    return result;
  }
  uint64_t v5 = result;
  return ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))off_26C74CCE0[v4])(&v5, result, a2);
}

uint64_t sub_2168C4574(uint64_t *a1)
{
  uint64_t result = *a1;
  if (*(_DWORD *)(result + 24)) {
    return sub_2168C4624(result);
  }
  return result;
}

void sub_2168C458C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_2168C4594(uint64_t *a1, unsigned char *a2, unsigned char *a3)
{
  uint64_t result = *a1;
  if (*(_DWORD *)(result + 24) != 2) {
    return sub_2168C4774(result, a3);
  }
  *a2 = *a3;
  return result;
}

uint64_t sub_2168C45B8(uint64_t *a1, void *a2, void *a3)
{
  uint64_t result = *a1;
  if (*(_DWORD *)(result + 24) != 3) {
    return sub_2168C47DC(result, a3);
  }
  *a2 = *a3;
  return result;
}

uint64_t sub_2168C45DC(uint64_t *a1, void *a2, void *a3)
{
  uint64_t result = *a1;
  if (*(_DWORD *)(result + 24) != 4) {
    return sub_2168C4844(result, a3);
  }
  *a2 = *a3;
  return result;
}

uint64_t sub_2168C4600(uint64_t *a1, void *a2, void *a3)
{
  uint64_t result = *a1;
  if (*(_DWORD *)(result + 24) != 5) {
    return sub_2168C48AC(result, a3);
  }
  *a2 = *a3;
  return result;
}

uint64_t sub_2168C4624(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C74CBF0[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 24) = 0;
  return a1;
}

void sub_2168C467C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 24) == 1)
  {
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    long long v5 = *(_OWORD *)a3;
    *(void *)(a2 + 16) = *(void *)(a3 + 16);
    *(_OWORD *)a2 = v5;
    *(unsigned char *)(a3 + 23) = 0;
    *(unsigned char *)a3 = 0;
  }
  else
  {
    sub_2168C46F4(a1, (long long *)a3);
  }
}

uint64_t sub_2168C46F4(uint64_t a1, long long *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 24);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_26C74CBF0[v4])(&v7, a1);
  }
  *(_DWORD *)(a1 + 24) = -1;
  long long v5 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v5;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  *(_DWORD *)(a1 + 24) = 1;
  return a1;
}

uint64_t sub_2168C4774(uint64_t a1, unsigned char *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 24);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_26C74CBF0[v4])(&v6, a1);
  }
  *(unsigned char *)a1 = *a2;
  *(_DWORD *)(a1 + 24) = 2;
  return a1;
}

uint64_t sub_2168C47DC(uint64_t a1, void *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 24);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_26C74CBF0[v4])(&v6, a1);
  }
  *(void *)a1 = *a2;
  *(_DWORD *)(a1 + 24) = 3;
  return a1;
}

uint64_t sub_2168C4844(uint64_t a1, void *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 24);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_26C74CBF0[v4])(&v6, a1);
  }
  *(void *)a1 = *a2;
  *(_DWORD *)(a1 + 24) = 4;
  return a1;
}

uint64_t sub_2168C48AC(uint64_t a1, void *a2)
{
  uint64_t v4 = *(unsigned int *)(a1 + 24);
  if (v4 != -1) {
    ((void (*)(char *, uint64_t))off_26C74CBF0[v4])(&v6, a1);
  }
  *(void *)a1 = *a2;
  *(_DWORD *)(a1 + 24) = 5;
  return a1;
}

uint64_t sub_2168C4914(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_21678A04C(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    sub_2168C498C(a1, i + 2, i + 2);
  return a1;
}

void sub_2168C4974(_Unwind_Exception *a1)
{
  sub_2168C09A4(v1);
  _Unwind_Resume(a1);
}

void *sub_2168C498C(uint64_t a1, void *a2, uint64_t *a3)
{
  unint64_t v5 = *a2 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = bswap64(0x9E3779B97F4A7C55 * v5);
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = v6;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = v6 & (v7 - 1);
    }
    uint64_t v9 = *(void **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      long long v10 = (void *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if ((v10[2] & 0xFFFFFFFFFFFFFFF8) == v5) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          long long v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  sub_2168C4BF4(a1, v6, a3, (uint64_t)v21);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_21678A04C(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  size_t v18 = *(void **)(*(void *)a1 + 8 * v3);
  if (v18)
  {
    *(void *)v21[0] = *v18;
    *size_t v18 = v21[0];
  }
  else
  {
    *(void *)v21[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v21[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v21[0])
    {
      unint64_t v19 = *(void *)(*(void *)v21[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7) {
          v19 %= v7;
        }
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v19) = v21[0];
    }
  }
  long long v10 = (void *)v21[0];
  v21[0] = 0;
  ++*(void *)(a1 + 24);
  sub_2168C4D6C((uint64_t)v21, 0);
  return v10;
}

void sub_2168C4BDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168C4D6C((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_2168C4BF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint8x8_t v8 = operator new(0x30uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *uint8x8_t v8 = 0;
  v8[1] = a2;
  uint64_t result = sub_2168C4C6C((uint64_t)(v8 + 2), a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_2168C4C54(_Unwind_Exception *a1)
{
  sub_2168C4D6C(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_2168C4C6C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  sub_2168C4CF8((char *)(a1 + 8), (long long *)a2[1], (long long *)a2[2], (a2[2] - a2[1]) >> 4);
  return a1;
}

char *sub_2168C4CF8(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = sub_21682BF78(result, a4);
    uint64_t v7 = (_OWORD *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_2168C4D50(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_2168C4D6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_2168C0A24(v2 + 2);
    }
    operator delete(v2);
  }
}

uint64_t sub_2168C4DC4(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_21678A04C(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    sub_2168C4E3C(a1, i + 2, i + 2);
  return a1;
}

void sub_2168C4E24(_Unwind_Exception *a1)
{
  sub_2168C0A6C(v1);
  _Unwind_Resume(a1);
}

void *sub_2168C4E3C(uint64_t a1, void *a2, uint64_t *a3)
{
  unint64_t v5 = *a2 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = bswap64(0x9E3779B97F4A7C55 * v5);
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = v6;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = v6 & (v7 - 1);
    }
    uint64_t v9 = *(void **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t result = (void *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = result[1];
          if (v11 == v6)
          {
            if ((result[2] & 0xFFFFFFFFFFFFFFF8) == v5) {
              return result;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t result = (void *)*result;
        }
        while (result);
      }
    }
  }
  sub_2168C5094(a1, v6, a3, (uint64_t)&v20);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_21678A04C(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  size_t v18 = *(void **)(*(void *)a1 + 8 * v3);
  if (v18)
  {
    *unint64_t v20 = *v18;
    *size_t v18 = v20;
  }
  else
  {
    *unint64_t v20 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v20;
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*v20)
    {
      unint64_t v19 = *(void *)(*v20 + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7) {
          v19 %= v7;
        }
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v19) = v20;
    }
  }
  uint64_t result = v20;
  ++*(void *)(a1 + 24);
  return result;
}

void sub_2168C5070(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a10) {
    sub_2168C3CC0((uint64_t)&a11, a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2168C5094@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint8x8_t v8 = operator new(0x30uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *uint8x8_t v8 = 0;
  v8[1] = a2;
  uint64_t result = sub_2168C5120(v8 + 2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_2168C5104(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_2168C3CC0(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_2168C5120(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  sub_2168C51AC(a1 + 1, a2[1], a2[2], (a2[2] - a2[1]) >> 5);
  return a1;
}

void *sub_2168C51AC(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    sub_2168C5234(result, a4);
    uint64_t result = sub_2168C5278((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_2168C5214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_2168C0B1C(&a9);
  _Unwind_Resume(a1);
}

char *sub_2168C5234(void *a1, unint64_t a2)
{
  if (a2 >> 59) {
    sub_21677CB10();
  }
  uint64_t result = (char *)sub_2168707F4((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

void *sub_2168C5278(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  float v13 = a4;
  BOOL v14 = a4;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  char v12 = 0;
  if (a2 != a3)
  {
    unint64_t v6 = (long long *)(a2 + 8);
    do
    {
      uint64_t v7 = (uint64_t)v6 - 8;
      *uint64_t v4 = *((void *)v6 - 1);
      uint8x8_t v8 = v4 + 1;
      if (*((char *)v6 + 23) < 0)
      {
        sub_216778F24(v8, *(void **)v6, *((void *)v6 + 1));
        uint64_t v4 = v14;
      }
      else
      {
        long long v9 = *v6;
        v4[3] = *((void *)v6 + 2);
        *(_OWORD *)uint8x8_t v8 = v9;
      }
      v4 += 4;
      BOOL v14 = v4;
      v6 += 2;
    }
    while (v7 + 32 != a3);
  }
  char v12 = 1;
  sub_2168C5348((uint64_t)v11);
  return v4;
}

void sub_2168C5334(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2168C5348(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_2168C5380(a1);
  }
  return a1;
}

void sub_2168C5380(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0) {
      operator delete(*(void **)(v1 - 24));
    }
    v1 -= 32;
  }
}

void pxrInternal__aapl__pxrReserved__::_TraceEventFromJSON(unint64_t **a1, uint64_t a2)
{
  uint64_t v70 = *MEMORY[0x263EF8340];
  if (pxrInternal__aapl__pxrReserved__::JsValue::IsObject((pxrInternal__aapl__pxrReserved__::JsValue *)a1))
  {
    unint64_t JsObject = pxrInternal__aapl__pxrReserved__::JsValue::GetJsObject(a1);
    sub_216779094(&__p, "key");
    unint64_t v5 = sub_2168C5F50(JsObject, (uint64_t)&__p);
    if (SHIBYTE(v68) < 0) {
      operator delete((void *)__p);
    }
    sub_216779094(&__p, "category");
    uint64_t v65 = sub_2168C6020(JsObject, (uint64_t)&__p);
    uint64_t v66 = v6;
    if (SHIBYTE(v68) < 0) {
      operator delete((void *)__p);
    }
    sub_216779094(&__p, "type");
    uint64_t v7 = (unsigned int *)sub_2168C5F50(JsObject, (uint64_t)&__p);
    if (SHIBYTE(v68) < 0) {
      operator delete((void *)__p);
    }
    sub_216779094(&__p, "ts");
    *(double *)&uint8x8_t v8 = COERCE_DOUBLE(sub_2168C6100(JsObject, (uint64_t)&__p));
    double v9 = *(double *)&v8;
    char v11 = v10;
    if (SHIBYTE(v68) < 0) {
      operator delete((void *)__p);
    }
    LOBYTE(v63) = 0;
    char v64 = 0;
    if (v11)
    {
      unint64_t v63 = pxrInternal__aapl__pxrReserved__::ArchSecondsToTicks(v8, v9 / 1000000.0);
      char v64 = 1;
    }
    if (v5 && (_BYTE)v66 && v7)
    {
      char v12 = (void **)(a2 + 128);
      if ((*((char *)v7 + 23) & 0x80000000) == 0)
      {
        switch(*((unsigned char *)v7 + 23))
        {
          case 3:
            if (*(_WORD *)v7 == 28229 && *((unsigned char *)v7 + 2) == 100) {
              goto LABEL_28;
            }
            return;
          case 4:
            if (*v7 == 1635017028) {
              goto LABEL_75;
            }
            goto LABEL_57;
          case 5:
            if (*v7 == 1768383810 && *((unsigned char *)v7 + 4) == 110) {
              goto LABEL_53;
            }
            return;
          case 8:
            size_t v17 = *(uint64_t **)v7;
            goto LABEL_64;
          case 0xC:
            if (*(void *)v7 == 0x447265746E756F43 && v7[2] == 1635019877) {
              goto LABEL_102;
            }
            if (*(void *)v7 != 0x567265746E756F43 || v7[2] != 1702194273) {
              return;
            }
            goto LABEL_95;
          default:
            return;
        }
      }
      uint64_t v14 = *((void *)v7 + 1);
      switch(v14)
      {
        case 3:
          if (**(_WORD **)v7 == 28229 && *(unsigned char *)(*(void *)v7 + 2) == 100)
          {
LABEL_28:
            if (v11)
            {
              LODWORD(v54) = 0;
              sub_2168C7F00(&__p);
              float v57 = sub_2168C7BFC(*(void *)(a2 + 40) + 16, (uint64_t)&__p, (uint64_t)&__p) + 2;
              sub_2168C62FC((void **)(a2 + 128), (uint64_t)&v54, &v57, (uint64_t *)&v63, &v65);
              goto LABEL_72;
            }
          }
          return;
        case 4:
          uint64_t v7 = *(unsigned int **)v7;
          if (*v7 != 1635017028)
          {
            if (v14 == 4)
            {
LABEL_57:
              unsigned int v21 = bswap32(*v7);
              BOOL v22 = v21 >= 0x4D61726B;
              int v23 = v21 > 0x4D61726B;
              int v24 = !v22;
              if (v23 == v24 && v11)
              {
                LODWORD(v54) = 0;
                sub_2168C7F00(&__p);
                float v57 = sub_2168C7BFC(*(void *)(a2 + 40) + 16, (uint64_t)&__p, (uint64_t)&__p) + 2;
                sub_2168C6420((void **)(a2 + 128), (uint64_t)&v54, &v57, (uint64_t *)&v63, &v65);
                goto LABEL_72;
              }
            }
            return;
          }
LABEL_75:
          if (!v11) {
            return;
          }
          sub_216779094(&__p, "data");
          LOBYTE(v57) = 0;
          char v59 = 0;
          pxrInternal__aapl__pxrReserved__::JsFindValue(JsObject, (uint64_t)&__p, (uint64_t *)&v57, (uint64_t)&v54);
          if (v59 && v58) {
            sub_216784EC4(v58);
          }
          if (SHIBYTE(v68) < 0) {
            operator delete((void *)__p);
          }
          if (!v56) {
            return;
          }
          if (pxrInternal__aapl__pxrReserved__::JsValue::IsBool((pxrInternal__aapl__pxrReserved__::JsValue *)&v54))
          {
            sub_2168C7F00(&v57);
            long long v31 = sub_2168C7BFC(*(void *)(a2 + 40) + 16, (uint64_t)&v57, (uint64_t)&v57);
            BOOL Bool = pxrInternal__aapl__pxrReserved__::JsValue::GetBool((pxrInternal__aapl__pxrReserved__::JsValue *)&v54);
            *(void *)&long long __p = v31 + 2;
            DWORD2(__p) = v65;
            WORD6(__p) = 1537;
            uint64_t v68 = mach_absolute_time();
            LOBYTE(v69) = Bool;
            if ((v60 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v60 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
          }
          else if (pxrInternal__aapl__pxrReserved__::JsValue::IsReal((pxrInternal__aapl__pxrReserved__::JsValue *)&v54))
          {
            sub_2168C7F00(&v57);
            uint64_t v44 = sub_2168C7BFC(*(void *)(a2 + 40) + 16, (uint64_t)&v57, (uint64_t)&v57);
            double Real = pxrInternal__aapl__pxrReserved__::JsValue::GetReal(&v54);
            *(void *)&long long __p = v44 + 2;
            DWORD2(__p) = v65;
            WORD6(__p) = 1540;
            uint64_t v68 = mach_absolute_time();
            double v69 = Real;
            if ((v60 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v60 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
          }
          else if (pxrInternal__aapl__pxrReserved__::JsValue::IsUInt64((pxrInternal__aapl__pxrReserved__::JsValue *)&v54))
          {
            sub_2168C7F00(&v57);
            unint64_t v46 = sub_2168C7BFC(*(void *)(a2 + 40) + 16, (uint64_t)&v57, (uint64_t)&v57);
            uint64_t UInt64 = pxrInternal__aapl__pxrReserved__::JsValue::GetUInt64(&v54);
            *(void *)&long long __p = v46 + 2;
            DWORD2(__p) = v65;
            WORD6(__p) = 1539;
            uint64_t v68 = mach_absolute_time();
            double v69 = *(double *)&UInt64;
            if ((v60 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v60 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
          }
          else if (pxrInternal__aapl__pxrReserved__::JsValue::IsInt((pxrInternal__aapl__pxrReserved__::JsValue *)&v54))
          {
            sub_2168C7F00(&v57);
            float v48 = sub_2168C7BFC(*(void *)(a2 + 40) + 16, (uint64_t)&v57, (uint64_t)&v57);
            uint64_t Int64 = pxrInternal__aapl__pxrReserved__::JsValue::GetInt64(&v54);
            *(void *)&long long __p = v48 + 2;
            DWORD2(__p) = v65;
            WORD6(__p) = 1538;
            uint64_t v68 = mach_absolute_time();
            double v69 = *(double *)&Int64;
            if ((v60 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v60 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
          }
          else
          {
            if (!pxrInternal__aapl__pxrReserved__::JsValue::IsString((pxrInternal__aapl__pxrReserved__::JsValue *)&v54))
            {
LABEL_128:
              if (v56 && v55) {
                sub_216784EC4(v55);
              }
              return;
            }
            sub_2168C7F00(&v57);
            uint64_t v50 = sub_2168C7BFC(*(void *)(a2 + 40) + 16, (uint64_t)&v57, (uint64_t)&v57);
            unint64_t String = pxrInternal__aapl__pxrReserved__::JsValue::GetString((pxrInternal__aapl__pxrReserved__::JsValue *)&v54);
            if (*(char *)(String + 23) >= 0) {
              uint64_t v52 = (char *)String;
            }
            else {
              uint64_t v52 = *(char **)String;
            }
            int v53 = sub_2168C9000((pxrInternal__aapl__pxrReserved__::TraceDataBuffer::Allocator *)(a2 + 56), v52);
            *(void *)&long long __p = v50 + 2;
            DWORD2(__p) = v65;
            WORD6(__p) = 1792;
            uint64_t v68 = mach_absolute_time();
            double v69 = *(double *)&v53;
            if ((v60 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v60 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
          }
          uint64_t v68 = v63;
          sub_2168C6674(v12, &__p);
          goto LABEL_128;
        case 5:
          if (**(_DWORD **)v7 == 1768383810 && *(unsigned char *)(*(void *)v7 + 4) == 110)
          {
LABEL_53:
            if (v11)
            {
              LODWORD(v54) = 0;
              sub_2168C7F00(&__p);
              float v57 = sub_2168C7BFC(*(void *)(a2 + 40) + 16, (uint64_t)&__p, (uint64_t)&__p) + 2;
              sub_2168C61E0((void **)(a2 + 128), (uint64_t)&v54, &v57, (uint64_t *)&v63, &v65);
              goto LABEL_72;
            }
          }
          return;
        case 8:
          size_t v17 = **(uint64_t ***)v7;
LABEL_64:
          if (v17 == (uint64_t *)0x6E617073656D6954)
          {
            sub_216779094(&__p, "start");
            __n128 v25 = (void *)sub_2168C6020(JsObject, (uint64_t)&__p);
            char v27 = (char)v26;
            float v57 = v25;
            int v58 = v26;
            if (SHIBYTE(v68) < 0) {
              operator delete((void *)__p);
            }
            sub_216779094(&__p, "end");
            uint64_t v28 = (uint64_t *)sub_2168C6020(JsObject, (uint64_t)&__p);
            char v30 = (char)v29;
            long long v54 = v28;
            long long v55 = v29;
            if (SHIBYTE(v68) < 0) {
              operator delete((void *)__p);
            }
            if (v27 && v30)
            {
              int v62 = 0;
              sub_2168C7F00(&__p);
              unsigned __int16 v61 = sub_2168C7BFC(*(void *)(a2 + 40) + 16, (uint64_t)&__p, (uint64_t)&__p) + 2;
              sub_2168C6544((void **)(a2 + 128), (uint64_t)&v62, &v61, (uint64_t *)&v57, (uint64_t *)&v54, &v65);
LABEL_72:
              if ((LOBYTE(v69) & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&v69 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
            }
          }
          return;
        case 12:
          long long v33 = *(unsigned int **)v7;
          if (**(void **)v7 == 0x447265746E756F43 && *(_DWORD *)(*(void *)v7 + 8) == 1635019877)
          {
LABEL_102:
            sub_216779094(&__p, "value");
            uint64_t v41 = sub_2168C6100(JsObject, (uint64_t)&__p);
            char v43 = v42;
            if (SHIBYTE(v68) < 0) {
              operator delete((void *)__p);
            }
            if (!v64 || !v43) {
              return;
            }
            sub_2168C7F00(&v57);
            *(void *)&long long __p = sub_2168C7BFC(*(void *)(a2 + 40) + 16, (uint64_t)&v57, (uint64_t)&v57) + 2;
            DWORD2(__p) = v65;
            BYTE13(__p) = 4;
            uint64_t v68 = mach_absolute_time();
            double v69 = *(double *)&v41;
            if ((v60 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v60 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
LABEL_101:
            uint64_t v68 = v63;
            sub_2168C6674((void **)(a2 + 128), &__p);
            return;
          }
          uint64_t v35 = *(void *)v33;
          unsigned int v36 = v33[2];
          if (v35 != 0x567265746E756F43 || v36 != 1702194273) {
            return;
          }
LABEL_95:
          sub_216779094(&__p, "value");
          uint64_t v38 = sub_2168C6100(JsObject, (uint64_t)&__p);
          char v40 = v39;
          if (SHIBYTE(v68) < 0) {
            operator delete((void *)__p);
          }
          if (v64 && v40)
          {
            sub_2168C7F00(&v57);
            *(void *)&long long __p = sub_2168C7BFC(*(void *)(a2 + 40) + 16, (uint64_t)&v57, (uint64_t)&v57) + 2;
            DWORD2(__p) = v65;
            BYTE13(__p) = 5;
            uint64_t v68 = mach_absolute_time();
            double v69 = *(double *)&v38;
            if ((v60 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v60 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            goto LABEL_101;
          }
          break;
        default:
          return;
      }
    }
  }
}

void sub_2168C5DF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28)
{
  if (a11)
  {
    if (a10) {
      sub_216784EC4(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_2168C5F50(uint64_t a1, uint64_t a2)
{
  LOBYTE(v4) = 0;
  char v6 = 0;
  pxrInternal__aapl__pxrReserved__::JsFindValue(a1, a2, &v4, (uint64_t)v7);
  if (v9)
  {
    if (pxrInternal__aapl__pxrReserved__::JsValue::IsString((pxrInternal__aapl__pxrReserved__::JsValue *)v7)) {
      unint64_t String = pxrInternal__aapl__pxrReserved__::JsValue::GetString((pxrInternal__aapl__pxrReserved__::JsValue *)v7);
    }
    else {
      unint64_t String = 0;
    }
    if (v9 && v8) {
      sub_216784EC4(v8);
    }
  }
  else
  {
    unint64_t String = 0;
  }
  if (v6 && v5) {
    sub_216784EC4(v5);
  }
  return String;
}

void sub_2168C5FE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, char a11, uint64_t a12, std::__shared_weak_count *a13, char a14)
{
  if (a14 && a13) {
    sub_216784EC4(a13);
  }
  if (a11)
  {
    if (a10) {
      sub_216784EC4(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2168C6020(uint64_t a1, uint64_t a2)
{
  LOBYTE(v4) = 0;
  char v6 = 0;
  pxrInternal__aapl__pxrReserved__::JsFindValue(a1, a2, &v4, (uint64_t)&v7);
  if (v9)
  {
    if (pxrInternal__aapl__pxrReserved__::JsValue::IsUInt64((pxrInternal__aapl__pxrReserved__::JsValue *)&v7)) {
      uint64_t UInt64 = pxrInternal__aapl__pxrReserved__::JsValue::GetUInt64(&v7);
    }
    else {
      uint64_t UInt64 = 0;
    }
    if (v9 && v8) {
      sub_216784EC4(v8);
    }
  }
  else
  {
    uint64_t UInt64 = 0;
  }
  if (v6 && v5) {
    sub_216784EC4(v5);
  }
  return UInt64;
}

void sub_2168C60C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, char a11, uint64_t a12, std::__shared_weak_count *a13, char a14)
{
  if (a14 && a13) {
    sub_216784EC4(a13);
  }
  if (a11)
  {
    if (a10) {
      sub_216784EC4(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2168C6100(uint64_t a1, uint64_t a2)
{
  LOBYTE(v4) = 0;
  char v6 = 0;
  pxrInternal__aapl__pxrReserved__::JsFindValue(a1, a2, &v4, (uint64_t)&v7);
  if (v9)
  {
    if (pxrInternal__aapl__pxrReserved__::JsValue::IsReal((pxrInternal__aapl__pxrReserved__::JsValue *)&v7)) {
      double Real = pxrInternal__aapl__pxrReserved__::JsValue::GetReal(&v7);
    }
    else {
      double Real = 0.0;
    }
    if (v9 && v8) {
      sub_216784EC4(v8);
    }
  }
  else
  {
    double Real = 0.0;
  }
  if (v6 && v5) {
    sub_216784EC4(v5);
  }
  return *(void *)&Real;
}

void sub_2168C61A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, char a11, uint64_t a12, std::__shared_weak_count *a13, char a14)
{
  if (a14 && a13) {
    sub_216784EC4(a13);
  }
  if (a11)
  {
    if (a10) {
      sub_216784EC4(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

char *sub_2168C61E0(void **a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t *a5)
{
  char v11 = a1[2];
  uint64_t v9 = (uint64_t)(a1 + 2);
  char v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (v12 >= (unint64_t)v11)
  {
    uint64_t v16 = (uint64_t)(v12 - (void)*a1) >> 5;
    unint64_t v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 59) {
      sub_21677CB10();
    }
    uint64_t v18 = v10 - (unsigned char *)*a1;
    if (v18 >> 4 > v17) {
      unint64_t v17 = v18 >> 4;
    }
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v19 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v19 = v17;
    }
    unint64_t v20 = (char *)sub_2168707F4(v9, v19);
    unsigned int v21 = &v20[32 * v16];
    int v23 = &v20[32 * v22];
    uint64_t v24 = *a4;
    uint64_t v25 = *a5;
    *(void *)unsigned int v21 = *a3;
    *((_DWORD *)v21 + 2) = v25;
    v21[13] = 0;
    *((void *)v21 + 2) = v24;
    unint64_t v15 = v21 + 32;
    char v27 = (char *)*a1;
    unint64_t v26 = (char *)a1[1];
    if (v26 != *a1)
    {
      do
      {
        long long v28 = *((_OWORD *)v26 - 1);
        *((_OWORD *)v21 - 2) = *((_OWORD *)v26 - 2);
        *((_OWORD *)v21 - 1) = v28;
        v21 -= 32;
        v26 -= 32;
      }
      while (v26 != v27);
      unint64_t v26 = (char *)*a1;
    }
    *a1 = v21;
    a1[1] = v15;
    a1[2] = v23;
    if (v26) {
      operator delete(v26);
    }
  }
  else
  {
    uint64_t v13 = *a4;
    uint64_t v14 = *a5;
    *(void *)unint64_t v12 = *a3;
    *(_DWORD *)(v12 + 8) = v14;
    *(unsigned char *)(v12 + 13) = 0;
    *(void *)(v12 + 16) = v13;
    unint64_t v15 = (char *)(v12 + 32);
  }
  a1[1] = v15;
  return v15 - 32;
}

char *sub_2168C62FC(void **a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t *a5)
{
  char v11 = a1[2];
  uint64_t v9 = (uint64_t)(a1 + 2);
  char v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (v12 >= (unint64_t)v11)
  {
    uint64_t v16 = (uint64_t)(v12 - (void)*a1) >> 5;
    unint64_t v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 59) {
      sub_21677CB10();
    }
    uint64_t v18 = v10 - (unsigned char *)*a1;
    if (v18 >> 4 > v17) {
      unint64_t v17 = v18 >> 4;
    }
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v19 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v19 = v17;
    }
    unint64_t v20 = (char *)sub_2168707F4(v9, v19);
    unsigned int v21 = &v20[32 * v16];
    int v23 = &v20[32 * v22];
    uint64_t v24 = *a4;
    uint64_t v25 = *a5;
    *(void *)unsigned int v21 = *a3;
    *((_DWORD *)v21 + 2) = v25;
    v21[13] = 1;
    *((void *)v21 + 2) = v24;
    unint64_t v15 = v21 + 32;
    char v27 = (char *)*a1;
    unint64_t v26 = (char *)a1[1];
    if (v26 != *a1)
    {
      do
      {
        long long v28 = *((_OWORD *)v26 - 1);
        *((_OWORD *)v21 - 2) = *((_OWORD *)v26 - 2);
        *((_OWORD *)v21 - 1) = v28;
        v21 -= 32;
        v26 -= 32;
      }
      while (v26 != v27);
      unint64_t v26 = (char *)*a1;
    }
    *a1 = v21;
    a1[1] = v15;
    a1[2] = v23;
    if (v26) {
      operator delete(v26);
    }
  }
  else
  {
    uint64_t v13 = *a4;
    uint64_t v14 = *a5;
    *(void *)unint64_t v12 = *a3;
    *(_DWORD *)(v12 + 8) = v14;
    *(unsigned char *)(v12 + 13) = 1;
    *(void *)(v12 + 16) = v13;
    unint64_t v15 = (char *)(v12 + 32);
  }
  a1[1] = v15;
  return v15 - 32;
}

char *sub_2168C6420(void **a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t *a5)
{
  char v11 = a1[2];
  uint64_t v9 = (uint64_t)(a1 + 2);
  char v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (v12 >= (unint64_t)v11)
  {
    uint64_t v16 = (uint64_t)(v12 - (void)*a1) >> 5;
    unint64_t v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 59) {
      sub_21677CB10();
    }
    uint64_t v18 = v10 - (unsigned char *)*a1;
    if (v18 >> 4 > v17) {
      unint64_t v17 = v18 >> 4;
    }
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v19 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v19 = v17;
    }
    unint64_t v20 = (char *)sub_2168707F4(v9, v19);
    unsigned int v21 = &v20[32 * v16];
    int v23 = &v20[32 * v22];
    uint64_t v24 = *a4;
    uint64_t v25 = *a5;
    *(void *)unsigned int v21 = *a3;
    *((_DWORD *)v21 + 2) = v25;
    v21[13] = 3;
    *((void *)v21 + 2) = v24;
    unint64_t v15 = v21 + 32;
    char v27 = (char *)*a1;
    unint64_t v26 = (char *)a1[1];
    if (v26 != *a1)
    {
      do
      {
        long long v28 = *((_OWORD *)v26 - 1);
        *((_OWORD *)v21 - 2) = *((_OWORD *)v26 - 2);
        *((_OWORD *)v21 - 1) = v28;
        v21 -= 32;
        v26 -= 32;
      }
      while (v26 != v27);
      unint64_t v26 = (char *)*a1;
    }
    *a1 = v21;
    a1[1] = v15;
    a1[2] = v23;
    if (v26) {
      operator delete(v26);
    }
  }
  else
  {
    uint64_t v13 = *a4;
    uint64_t v14 = *a5;
    *(void *)unint64_t v12 = *a3;
    *(_DWORD *)(v12 + 8) = v14;
    *(unsigned char *)(v12 + 13) = 3;
    *(void *)(v12 + 16) = v13;
    unint64_t v15 = (char *)(v12 + 32);
  }
  a1[1] = v15;
  return v15 - 32;
}

char *sub_2168C6544(void **a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v13 = a1[2];
  uint64_t v11 = (uint64_t)(a1 + 2);
  unint64_t v12 = v13;
  unint64_t v14 = *(void *)(v11 - 8);
  if (v14 >= (unint64_t)v13)
  {
    uint64_t v19 = (uint64_t)(v14 - (void)*a1) >> 5;
    unint64_t v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 59) {
      sub_21677CB10();
    }
    uint64_t v21 = v12 - (unsigned char *)*a1;
    if (v21 >> 4 > v20) {
      unint64_t v20 = v21 >> 4;
    }
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v22 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v22 = v20;
    }
    int v23 = (char *)sub_2168707F4(v11, v22);
    uint64_t v24 = &v23[32 * v19];
    unint64_t v26 = &v23[32 * v25];
    uint64_t v27 = *a4;
    uint64_t v28 = *a5;
    uint64_t v29 = *a6;
    *(void *)uint64_t v24 = *a3;
    *((_DWORD *)v24 + 2) = v29;
    v24[13] = 2;
    *((void *)v24 + 2) = v28;
    *((void *)v24 + 3) = v27;
    uint64_t v18 = v24 + 32;
    long long v31 = (char *)*a1;
    char v30 = (char *)a1[1];
    if (v30 != *a1)
    {
      do
      {
        long long v32 = *((_OWORD *)v30 - 1);
        *((_OWORD *)v24 - 2) = *((_OWORD *)v30 - 2);
        *((_OWORD *)v24 - 1) = v32;
        v24 -= 32;
        v30 -= 32;
      }
      while (v30 != v31);
      char v30 = (char *)*a1;
    }
    *a1 = v24;
    a1[1] = v18;
    a1[2] = v26;
    if (v30) {
      operator delete(v30);
    }
  }
  else
  {
    uint64_t v15 = *a4;
    uint64_t v16 = *a5;
    uint64_t v17 = *a6;
    *(void *)unint64_t v14 = *a3;
    *(_DWORD *)(v14 + 8) = v17;
    *(unsigned char *)(v14 + 13) = 2;
    *(void *)(v14 + 16) = v16;
    *(void *)(v14 + 24) = v15;
    uint64_t v18 = (char *)(v14 + 32);
  }
  a1[1] = v18;
  return v18 - 32;
}

_OWORD *sub_2168C6674(void **a1, _OWORD *a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(_OWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((char *)v7 - (unsigned char *)*a1) >> 5;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 59) {
      sub_21677CB10();
    }
    uint64_t v12 = v5 - (void)*a1;
    if (v12 >> 4 > v11) {
      unint64_t v11 = v12 >> 4;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v13 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13) {
      unint64_t v14 = (char *)sub_2168707F4(v4, v13);
    }
    else {
      unint64_t v14 = 0;
    }
    uint64_t v15 = &v14[32 * v10];
    uint64_t v16 = &v14[32 * v13];
    long long v17 = a2[1];
    *(_OWORD *)uint64_t v15 = *a2;
    *((_OWORD *)v15 + 1) = v17;
    uint64_t v9 = v15 + 32;
    uint64_t v19 = (char *)*a1;
    uint64_t v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        long long v20 = *((_OWORD *)v18 - 1);
        *((_OWORD *)v15 - 2) = *((_OWORD *)v18 - 2);
        *((_OWORD *)v15 - 1) = v20;
        v15 -= 32;
        v18 -= 32;
      }
      while (v18 != v19);
      uint64_t v18 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v9;
    a1[2] = v16;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    long long v8 = a2[1];
    *uint64_t v7 = *a2;
    v7[1] = v8;
    uint64_t v9 = v7 + 2;
  }
  a1[1] = v9;
  return v9 - 2;
}

uint64_t pxrInternal__aapl__pxrReserved__::Trace_JSONSerialization::WriteCollectionsToJSON(pxrInternal__aapl__pxrReserved__::JsWriter *a1, pxrInternal__aapl__pxrReserved__::TraceCollection ****a2)
{
  void v11[4] = *MEMORY[0x263EF8340];
  sub_2168C6880(&v10);
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  while (v4 != v5)
  {
    if (*v4)
    {
      unint64_t v6 = (pxrInternal__aapl__pxrReserved__::TraceEventTree *)sub_2168BC958((uint64_t *)&v10);
      pxrInternal__aapl__pxrReserved__::TraceEventTree::Add(v6, *v4, (uint64_t *)&v9);
      sub_2168BD348(&v9);
    }
    v4 += 2;
  }
  uint64_t v7 = sub_2168BC958((uint64_t *)&v10);
  v11[0] = &unk_26C74CD20;
  v11[1] = a2;
  void v11[3] = v11;
  pxrInternal__aapl__pxrReserved__::TraceEventTree::WriteChromeTraceObject(v7, a1, (uint64_t)v11);
  sub_2168CA13C(v11);
  sub_2168BD348(&v10);
  return 1;
}

void sub_2168C6850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *);
  sub_2168CA13C((uint64_t *)va1);
  sub_2168BD348((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_2168C6880@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x70uLL);
  sub_2168BEAFC(&v4);
  sub_2168C7F60((uint64_t)v2, &v4);
  *a1 = v2;
  return sub_2168BD7DC(&v4);
}

void sub_2168C68D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168BD7DC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  operator delete(v2);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Trace_JSONSerialization::CollectionFromJSON(pxrInternal__aapl__pxrReserved__::Trace_JSONSerialization *this@<X0>, uint64_t ***a2@<X8>)
{
  uint64_t v5 = *((void *)this + 1);
  long long __p = *(void **)this;
  *(void *)&long long v159 = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  BYTE8(v159) = 1;
  unint64_t v6 = sub_2168C79FC((pxrInternal__aapl__pxrReserved__::JsValue *)&__p);
  if (BYTE8(v159) && (void)v159) {
    sub_216784EC4((std::__shared_weak_count *)v159);
  }
  if (v6)
  {
    sub_216779094(&__p, "traceEvents");
    uint64_t v7 = (uint64_t *)sub_2168C7A50(v6, (uint64_t)&__p);
    if (SHIBYTE(v159) < 0) {
      operator delete(__p);
    }
    sub_216779094(&__p, "libTraceData");
    unint64_t v8 = sub_2168C7B50(v6, (uint64_t)&__p);
    if (SHIBYTE(v159) < 0) {
      operator delete(__p);
    }
  }
  else
  {
    uint64_t v9 = *((void *)this + 1);
    long long __p = *(void **)this;
    *(void *)&long long v159 = v9;
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
    BYTE8(v159) = 1;
    uint64_t v7 = (uint64_t *)sub_2168C7AFC((pxrInternal__aapl__pxrReserved__::JsValue *)&__p);
    if (BYTE8(v159) && (void)v159) {
      sub_216784EC4((std::__shared_weak_count *)v159);
    }
    unint64_t v8 = 0;
  }
  int v151 = 0;
  uint64_t v152 = 0;
  v150 = (uint64_t *)&v151;
  if (v7)
  {
    unint64_t v149 = v8;
    int v156 = 0;
    uint64_t v157 = 0;
    long long __dst = &v156;
    uint64_t v10 = *v7;
    uint64_t v11 = v7[1];
    if (*v7 != v11)
    {
      while (1)
      {
        uint64_t v12 = *(void *)(v10 + 8);
        long long __p = *(void **)v10;
        *(void *)&long long v159 = v12;
        if (v12) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
        }
        BYTE8(v159) = 1;
        unint64_t v13 = sub_2168C79FC((pxrInternal__aapl__pxrReserved__::JsValue *)&__p);
        if (BYTE8(v159) && (void)v159) {
          sub_216784EC4((std::__shared_weak_count *)v159);
        }
        if (!v13) {
          goto LABEL_131;
        }
        sub_216779094(&__p, "tid");
        unint64_t v14 = sub_2168C5F50(v13, (uint64_t)&__p);
        uint64_t v15 = (void *)v14;
        if (SHIBYTE(v159) < 0)
        {
          operator delete(__p);
          if (v15) {
            goto LABEL_49;
          }
        }
        else if (v14)
        {
          goto LABEL_49;
        }
        sub_216779094(&__p, "tid");
        uint64_t v18 = (void *)sub_2168C6020(v13, (uint64_t)&__p);
        char v19 = (char)v16;
        if (SHIBYTE(v159) < 0) {
          operator delete(__p);
        }
        if (v19)
        {
          long long v20 = v156;
          if (!v156) {
            goto LABEL_42;
          }
          uint64_t v21 = &v156;
          do
          {
            unint64_t v22 = v20;
            int v23 = v21;
            unint64_t v24 = v20[4];
            if (v24 >= (unint64_t)v18) {
              uint64_t v21 = v20;
            }
            else {
              ++v20;
            }
            long long v20 = (void *)*v20;
          }
          while (v20);
          if (v21 == &v156) {
            goto LABEL_42;
          }
          if (v24 < (unint64_t)v18) {
            unint64_t v22 = v23;
          }
          if ((unint64_t)v18 >= v22[4])
          {
            uint64_t v15 = v21 + 5;
          }
          else
          {
LABEL_42:
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%lld", v16, v17, v18);
            long long __p = v18;
            long long v159 = *(_OWORD *)v153;
            unint64_t v160 = (unint64_t)v154;
            v153[0] = 0;
            v153[1] = 0;
            uint64_t v154 = 0;
            uint64_t v25 = sub_2168C7FFC((uint64_t **)&__dst, (unint64_t *)&__p, (uint64_t)&__p);
            if (SHIBYTE(v160) < 0) {
              operator delete((void *)v159);
            }
            if (SHIBYTE(v154) < 0) {
              operator delete(v153[0]);
            }
            uint64_t v15 = v25 + 5;
          }
        }
        else
        {
          uint64_t v15 = 0;
        }
LABEL_49:
        sub_216779094(&__p, "ts");
        uint64_t v26 = sub_2168C6100(v13, (uint64_t)&__p);
        char v28 = v27;
        if (SHIBYTE(v159) < 0) {
          operator delete(__p);
        }
        double v29 = *(double *)&v26;
        if (!v28)
        {
          sub_216779094(&__p, "ts");
          uint64_t v30 = sub_2168C6020(v13, (uint64_t)&__p);
          char v32 = v31;
          if (SHIBYTE(v159) < 0) {
            operator delete(__p);
          }
          if (v32)
          {
            double v29 = (double)(unint64_t)v30;
            char v28 = 1;
          }
        }
        sub_216779094(&__p, "name");
        unint64_t v33 = sub_2168C5F50(v13, (uint64_t)&__p);
        if (SHIBYTE(v159) < 0) {
          operator delete(__p);
        }
        sub_216779094(&__p, "ph");
        long long v34 = (unsigned __int8 **)sub_2168C5F50(v13, (uint64_t)&__p);
        if (SHIBYTE(v159) < 0) {
          operator delete(__p);
        }
        sub_216779094(&__p, "libTraceCatId");
        int v35 = sub_2168C6020(v13, (uint64_t)&__p);
        char v37 = v36;
        if (SHIBYTE(v159) < 0)
        {
          operator delete(__p);
          if (!v15) {
            goto LABEL_131;
          }
        }
        else if (!v15)
        {
          goto LABEL_131;
        }
        if (!v28 || !v33 || !v34) {
          goto LABEL_131;
        }
        if (v37) {
          int v38 = v35;
        }
        else {
          int v38 = 0;
        }
        int v39 = *((char *)v34 + 23);
        if (v39 < 0)
        {
          if (v34[1] != (unsigned __int8 *)1) {
            goto LABEL_131;
          }
          int v40 = **v34;
        }
        else
        {
          if (v39 != 1) {
            goto LABEL_131;
          }
          int v40 = *(unsigned __int8 *)v34;
        }
        if (v40 <= 72)
        {
          if (v40 == 66)
          {
            long long __p = v15;
            uint64_t v65 = sub_2168CA1C0(&v150, (const void **)v15, (uint64_t)&unk_2174BFD90, (long long **)&__p);
            sub_2168C7F00(&__p);
            uint64_t v66 = sub_2168C7BFC(v65[12] + 16, (uint64_t)&__p, (uint64_t)&__p);
            if ((v160 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v160 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            long long __p = v15;
            char v43 = sub_2168CA1C0(&v150, (const void **)v15, (uint64_t)&unk_2174BFD90, (long long **)&__p);
            unint64_t v44 = pxrInternal__aapl__pxrReserved__::ArchSecondsToTicks((pxrInternal__aapl__pxrReserved__ *)v43, v29 / 1000000.0);
            unsigned int v67 = v66 + 2;
            unint64_t v46 = v43[24];
            unint64_t v68 = v43[25];
            if (v46 < v68)
            {
              *(void *)unint64_t v46 = v67;
              *(_DWORD *)(v46 + 8) = v38;
              *(unsigned char *)(v46 + 13) = 0;
              goto LABEL_102;
            }
            uint64_t v52 = (void **)(v43 + 23);
            uint64_t v74 = v43[23];
            uint64_t v75 = (uint64_t)(v46 - v74) >> 5;
            unint64_t v76 = v75 + 1;
            if ((unint64_t)(v75 + 1) >> 59) {
              sub_21677CB10();
            }
            uint64_t v77 = v68 - v74;
            if (v77 >> 4 > v76) {
              unint64_t v76 = v77 >> 4;
            }
            if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFE0) {
              unint64_t v78 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v78 = v76;
            }
            int v58 = (char *)sub_2168707F4((uint64_t)(v43 + 25), v78);
            uint64_t v60 = &v58[32 * v75];
            *(void *)uint64_t v60 = v67;
            *((_DWORD *)v60 + 2) = v38;
            v60[13] = 0;
            *((void *)v60 + 2) = v44;
            unsigned __int16 v79 = (char *)v43[23];
            unsigned __int16 v61 = (char *)v43[24];
            uint64_t v63 = (uint64_t)v60;
            if (v61 == v79) {
              goto LABEL_128;
            }
            do
            {
              long long v80 = *((_OWORD *)v61 - 1);
              *(_OWORD *)(v63 - 32) = *((_OWORD *)v61 - 2);
              *(_OWORD *)(v63 - 16) = v80;
              v63 -= 32;
              v61 -= 32;
            }
            while (v61 != v79);
LABEL_127:
            unsigned __int16 v61 = (char *)*v52;
            goto LABEL_128;
          }
          if (v40 == 69)
          {
            long long __p = v15;
            float v48 = sub_2168CA1C0(&v150, (const void **)v15, (uint64_t)&unk_2174BFD90, (long long **)&__p);
            sub_2168C7F00(&__p);
            uint64_t v49 = sub_2168C7BFC(v48[12] + 16, (uint64_t)&__p, (uint64_t)&__p);
            if ((v160 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v160 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            long long __p = v15;
            char v43 = sub_2168CA1C0(&v150, (const void **)v15, (uint64_t)&unk_2174BFD90, (long long **)&__p);
            unint64_t v44 = pxrInternal__aapl__pxrReserved__::ArchSecondsToTicks((pxrInternal__aapl__pxrReserved__ *)v43, v29 / 1000000.0);
            uint64_t v50 = v49 + 2;
            unint64_t v46 = v43[24];
            unint64_t v51 = v43[25];
            if (v46 < v51)
            {
              *(void *)unint64_t v46 = v50;
              *(_DWORD *)(v46 + 8) = v38;
              *(unsigned char *)(v46 + 13) = 1;
LABEL_102:
              uint64_t v69 = v46 + 32;
              *(void *)(v46 + 16) = v44;
              goto LABEL_130;
            }
            uint64_t v52 = (void **)(v43 + 23);
            uint64_t v81 = v43[23];
            uint64_t v82 = (uint64_t)(v46 - v81) >> 5;
            unint64_t v83 = v82 + 1;
            if ((unint64_t)(v82 + 1) >> 59) {
              sub_21677CB10();
            }
            uint64_t v84 = v51 - v81;
            if (v84 >> 4 > v83) {
              unint64_t v83 = v84 >> 4;
            }
            if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFE0) {
              unint64_t v85 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v85 = v83;
            }
            int v58 = (char *)sub_2168707F4((uint64_t)(v43 + 25), v85);
            uint64_t v60 = &v58[32 * v82];
            *(void *)uint64_t v60 = v50;
            *((_DWORD *)v60 + 2) = v38;
            v60[13] = 1;
            *((void *)v60 + 2) = v44;
            double v86 = (char *)v43[23];
            unsigned __int16 v61 = (char *)v43[24];
            uint64_t v63 = (uint64_t)v60;
            if (v61 == v86) {
              goto LABEL_128;
            }
            do
            {
              long long v87 = *((_OWORD *)v61 - 1);
              *(_OWORD *)(v63 - 32) = *((_OWORD *)v61 - 2);
              *(_OWORD *)(v63 - 16) = v87;
              v63 -= 32;
              v61 -= 32;
            }
            while (v61 != v86);
            goto LABEL_127;
          }
        }
        else if (v40 == 73 || v40 == 82 || v40 == 105)
        {
          long long __p = v15;
          uint64_t v41 = sub_2168CA1C0(&v150, (const void **)v15, (uint64_t)&unk_2174BFD90, (long long **)&__p);
          sub_2168C7F00(&__p);
          char v42 = sub_2168C7BFC(v41[12] + 16, (uint64_t)&__p, (uint64_t)&__p);
          if ((v160 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v160 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          long long __p = v15;
          char v43 = sub_2168CA1C0(&v150, (const void **)v15, (uint64_t)&unk_2174BFD90, (long long **)&__p);
          unint64_t v44 = pxrInternal__aapl__pxrReserved__::ArchSecondsToTicks((pxrInternal__aapl__pxrReserved__ *)v43, v29 / 1000000.0);
          uint64_t v45 = v42 + 2;
          unint64_t v46 = v43[24];
          unint64_t v47 = v43[25];
          if (v46 < v47)
          {
            *(void *)unint64_t v46 = v45;
            *(_DWORD *)(v46 + 8) = v38;
            *(unsigned char *)(v46 + 13) = 3;
            goto LABEL_102;
          }
          uint64_t v52 = (void **)(v43 + 23);
          uint64_t v53 = v43[23];
          uint64_t v54 = (uint64_t)(v46 - v53) >> 5;
          unint64_t v55 = v54 + 1;
          if ((unint64_t)(v54 + 1) >> 59) {
            sub_21677CB10();
          }
          uint64_t v56 = v47 - v53;
          if (v56 >> 4 > v55) {
            unint64_t v55 = v56 >> 4;
          }
          if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v57 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v57 = v55;
          }
          int v58 = (char *)sub_2168707F4((uint64_t)(v43 + 25), v57);
          uint64_t v60 = &v58[32 * v54];
          *(void *)uint64_t v60 = v45;
          *((_DWORD *)v60 + 2) = v38;
          v60[13] = 3;
          *((void *)v60 + 2) = v44;
          int v62 = (char *)v43[23];
          unsigned __int16 v61 = (char *)v43[24];
          uint64_t v63 = (uint64_t)v60;
          if (v61 != v62)
          {
            do
            {
              long long v64 = *((_OWORD *)v61 - 1);
              *(_OWORD *)(v63 - 32) = *((_OWORD *)v61 - 2);
              *(_OWORD *)(v63 - 16) = v64;
              v63 -= 32;
              v61 -= 32;
            }
            while (v61 != v62);
            goto LABEL_127;
          }
LABEL_128:
          uint64_t v69 = (uint64_t)(v60 + 32);
          v43[23] = v63;
          v43[24] = (uint64_t)(v60 + 32);
          v43[25] = (uint64_t)&v58[32 * v59];
          if (v61) {
            operator delete(v61);
          }
LABEL_130:
          v43[24] = v69;
          goto LABEL_131;
        }
        if (v40 == 88)
        {
          sub_216779094(&__p, "dur");
          uint64_t v70 = sub_2168C6100(v13, (uint64_t)&__p);
          unsigned __int8 v72 = v71;
          if (SHIBYTE(v159) < 0) {
            operator delete(__p);
          }
          if (v72) {
            goto LABEL_107;
          }
          sub_216779094(&__p, "dur");
          uint64_t v88 = sub_2168C6020(v13, (uint64_t)&__p);
          char v90 = v89;
          if (SHIBYTE(v159) < 0) {
            operator delete(__p);
          }
          if (v90)
          {
            double v73 = (double)(unint64_t)v88;
LABEL_137:
            long long __p = v15;
            unsigned int v91 = sub_2168CA1C0(&v150, (const void **)v15, (uint64_t)&unk_2174BFD90, (long long **)&__p);
            sub_2168C7F00(&__p);
            uint64_t v92 = sub_2168C7BFC(v91[12] + 16, (uint64_t)&__p, (uint64_t)&__p);
            if ((v160 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v160 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            long long __p = v15;
            double v93 = sub_2168CA1C0(&v150, (const void **)v15, (uint64_t)&unk_2174BFD90, (long long **)&__p);
            double v94 = v29 / 1000000.0;
            double v95 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::ArchSecondsToTicks((pxrInternal__aapl__pxrReserved__ *)v93, v94);
            unsigned int v96 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::ArchSecondsToTicks(v95, v94);
            uint64_t v97 = v92 + 2;
            uint64_t v98 = (char *)v96 + pxrInternal__aapl__pxrReserved__::ArchSecondsToTicks(v96, v73 / 1000000.0);
            unint64_t v99 = v93[25];
            unint64_t v100 = v93[24];
            if (v100 >= v99)
            {
              uint64_t v102 = v93[23];
              uint64_t v103 = (uint64_t)(v100 - v102) >> 5;
              unint64_t v104 = v103 + 1;
              if ((unint64_t)(v103 + 1) >> 59) {
                sub_21677CB10();
              }
              uint64_t v105 = v99 - v102;
              if (v105 >> 4 > v104) {
                unint64_t v104 = v105 >> 4;
              }
              if ((unint64_t)v105 >= 0x7FFFFFFFFFFFFFE0) {
                unint64_t v106 = 0x7FFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v106 = v104;
              }
              v107 = (char *)sub_2168707F4((uint64_t)(v93 + 25), v106);
              uint64_t v109 = &v107[32 * v103];
              *(void *)uint64_t v109 = v97;
              *((_DWORD *)v109 + 2) = v38;
              v109[13] = 2;
              *((void *)v109 + 2) = v98;
              *((void *)v109 + 3) = v95;
              unint64_t v111 = (char *)v93[23];
              uint64_t v110 = (char *)v93[24];
              uint64_t v112 = (uint64_t)v109;
              if (v110 != v111)
              {
                do
                {
                  long long v113 = *((_OWORD *)v110 - 1);
                  *(_OWORD *)(v112 - 32) = *((_OWORD *)v110 - 2);
                  *(_OWORD *)(v112 - 16) = v113;
                  v112 -= 32;
                  v110 -= 32;
                }
                while (v110 != v111);
                uint64_t v110 = (char *)v93[23];
              }
              uint64_t v101 = (uint64_t)(v109 + 32);
              v93[23] = v112;
              v93[24] = (uint64_t)(v109 + 32);
              v93[25] = (uint64_t)&v107[32 * v108];
              if (v110) {
                operator delete(v110);
              }
            }
            else
            {
              *(void *)unint64_t v100 = v97;
              *(_DWORD *)(v100 + 8) = v38;
              *(unsigned char *)(v100 + 13) = 2;
              uint64_t v101 = v100 + 32;
              *(void *)(v100 + 16) = v98;
              *(void *)(v100 + 24) = v95;
            }
            v93[24] = v101;
            goto LABEL_131;
          }
          sub_216779094(&__p, "tdur");
          uint64_t v70 = sub_2168C6100(v13, (uint64_t)&__p);
          unsigned __int8 v72 = v114;
          if (SHIBYTE(v159) < 0) {
            operator delete(__p);
          }
          sub_216779094(&__p, "tdur");
          uint64_t v115 = sub_2168C6020(v13, (uint64_t)&__p);
          char v117 = v116;
          if (SHIBYTE(v159) < 0) {
            operator delete(__p);
          }
          if (!v117)
          {
LABEL_107:
            double v73 = *(double *)&v70;
          }
          else
          {
            if (v72 <= 1uLL) {
              unsigned __int8 v72 = 1;
            }
            double v73 = (double)(unint64_t)v115;
          }
          if (v72) {
            goto LABEL_137;
          }
        }
LABEL_131:
        v10 += 16;
        if (v10 == v11)
        {
          unint64_t v118 = (char *)v156;
          goto LABEL_162;
        }
      }
    }
    unint64_t v118 = 0;
LABEL_162:
    sub_2168C80D0((uint64_t)&__dst, v118);
    unint64_t v8 = v149;
  }
  if (v8)
  {
    sub_216779094(&__p, "threadEvents");
    unint64_t v119 = sub_2168C7A50(v8, (uint64_t)&__p);
    unint64_t v120 = (uint64_t *)v119;
    if (SHIBYTE(v159) < 0)
    {
      operator delete(__p);
      if (!v120) {
        goto LABEL_186;
      }
    }
    else if (!v119)
    {
      goto LABEL_186;
    }
    uint64_t v121 = *v120;
    uint64_t v122 = v120[1];
    if (*v120 == v122) {
      goto LABEL_186;
    }
    do
    {
      uint64_t v123 = *(void *)(v121 + 8);
      long long __p = *(void **)v121;
      *(void *)&long long v159 = v123;
      if (v123) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v123 + 8), 1uLL, memory_order_relaxed);
      }
      BYTE8(v159) = 1;
      unint64_t v124 = sub_2168C79FC((pxrInternal__aapl__pxrReserved__::JsValue *)&__p);
      if (BYTE8(v159) && (void)v159) {
        sub_216784EC4((std::__shared_weak_count *)v159);
      }
      if (!v124) {
        goto LABEL_185;
      }
      sub_216779094(&__p, "thread");
      unint64_t v125 = (void *)sub_2168C5F50(v124, (uint64_t)&__p);
      if (SHIBYTE(v159) < 0) {
        operator delete(__p);
      }
      sub_216779094(&__p, "events");
      unint64_t v126 = sub_2168C7A50(v124, (uint64_t)&__p);
      if (SHIBYTE(v159) < 0)
      {
        operator delete(__p);
        if (v125)
        {
LABEL_181:
          if (v126)
          {
            uint64_t v127 = *(unint64_t ***)v126;
            uint64_t v128 = *(unint64_t ***)(v126 + 8);
            while (v127 != v128)
            {
              long long __p = v125;
              uint64_t v129 = sub_2168CA1C0(&v150, (const void **)v125, (uint64_t)&unk_2174BFD90, (long long **)&__p);
              pxrInternal__aapl__pxrReserved__::_TraceEventFromJSON(v127, (uint64_t)(v129 + 7));
              v127 += 2;
            }
          }
        }
      }
      else if (v125)
      {
        goto LABEL_181;
      }
LABEL_185:
      v121 += 16;
    }
    while (v121 != v122);
  }
LABEL_186:
  if (v152)
  {
    sub_216851EE4((uint64_t)&__p, "Trace", "TraceCollection");
    uint64_t v130 = (uint64_t **)malloc(0x18uLL);
    while (1)
    {
      int v131 = v159;
      LODWORD(v159) = v159 - 1;
      if (!v131) {
        break;
      }
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_End((uint64_t)__p);
    }
    v130[2] = 0;
    v130[1] = 0;
    *uint64_t v130 = (uint64_t *)(v130 + 1);
    *a2 = v130;
    v132 = v150;
    if (v150 != (uint64_t *)&v151)
    {
      do
      {
        uint64_t v133 = *a2;
        pxrInternal__aapl__pxrReserved__::TraceThreadId::TraceThreadId(&__dst, (long long *)v132 + 2);
        uint64_t v135 = (void *)v132[9];
        if (v135) {
          uint64_t v135 = (void *)*v135;
        }
        uint64_t v136 = v132[8];
        if (v136) {
          unint64_t v137 = (void *)(v136 + 32);
        }
        else {
          unint64_t v137 = 0;
        }
        if (v137 != v135)
        {
          long long __p = "trace/jsonSerialization.cpp";
          *(void *)&long long v159 = "_ConstructEventList";
          *((void *)&v159 + 1) = 561;
          unint64_t v160 = (unint64_t)"std::unique_ptr<TraceEventList> pxrInternal__aapl__pxrReserved__::_ConstructEventList"
                                   "(EventListConstructionData &)";
          char v161 = 0;
          int v162 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)&__p, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v134, "data.eventList.IsEmpty()");
        }
        v138 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)v132[23];
        uint64_t v139 = (char *)v132[24];
        unint64_t v140 = 126 - 2 * __clz((v139 - (char *)v138) >> 5);
        if (v139 == (char *)v138) {
          uint64_t v141 = 0;
        }
        else {
          uint64_t v141 = v140;
        }
        sub_2168C8134(v138, v139, v141, 1);
        uint64_t v142 = (_OWORD *)v132[23];
        unint64_t v143 = (_OWORD *)v132[24];
        if (v142 != v143)
        {
          do
          {
            sub_2168C8F10((pxrInternal__aapl__pxrReserved__::TraceEventContainer *)(v132 + 7), v142);
            v142 += 2;
          }
          while (v142 != v143);
          uint64_t v142 = (_OWORD *)v132[23];
        }
        v132[24] = (uint64_t)v142;
        v144 = operator new(0x80uLL);
        sub_2168C8F68((uint64_t)v144, (uint64_t)(v132 + 7));
        v153[0] = v144;
        pxrInternal__aapl__pxrReserved__::TraceCollection::AddToCollection(v133, &__dst, (uint64_t *)v153);
        uint64_t v145 = (uint64_t *)v153[0];
        v153[0] = 0;
        if (v145) {
          sub_2168CA67C((uint64_t)v153, v145);
        }
        if (SHIBYTE(v157) < 0) {
          operator delete(__dst);
        }
        uint64_t v146 = (uint64_t *)v132[1];
        if (v146)
        {
          do
          {
            uint64_t v147 = v146;
            uint64_t v146 = (uint64_t *)*v146;
          }
          while (v146);
        }
        else
        {
          do
          {
            uint64_t v147 = (uint64_t *)v132[2];
            BOOL v148 = *v147 == (void)v132;
            v132 = v147;
          }
          while (!v148);
        }
        v132 = v147;
      }
      while (v147 != (uint64_t *)&v151);
    }
  }
  else
  {
    *a2 = 0;
  }
  sub_2168CA6CC((uint64_t)&v150, v151);
}

void sub_2168C77C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,char *a25,int a26,__int16 a27,char a28,char a29,void *__p,void *a31,char a32,int a33,__int16 a34,char a35,uint64_t a36)
{
  if (SHIBYTE(a33) < 0) {
    operator delete(__p);
  }
  sub_2168C80D0((uint64_t)&a24, a25);
  sub_2168CA6CC((uint64_t)&a15, a16);
  _Unwind_Resume(a1);
}

unint64_t sub_2168C79FC(pxrInternal__aapl__pxrReserved__::JsValue *a1)
{
  if (!*((unsigned char *)a1 + 16) || !pxrInternal__aapl__pxrReserved__::JsValue::IsObject(a1)) {
    return 0;
  }

  return pxrInternal__aapl__pxrReserved__::JsValue::GetJsObject((unint64_t **)a1);
}

unint64_t sub_2168C7A50(uint64_t a1, uint64_t a2)
{
  LOBYTE(v4) = 0;
  char v6 = 0;
  pxrInternal__aapl__pxrReserved__::JsFindValue(a1, a2, &v4, (uint64_t)v7);
  unint64_t v2 = sub_2168C7AFC((pxrInternal__aapl__pxrReserved__::JsValue *)v7);
  if (v9 && v8) {
    sub_216784EC4(v8);
  }
  if (v6 && v5) {
    sub_216784EC4(v5);
  }
  return v2;
}

void sub_2168C7AC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, char a11, uint64_t a12, std::__shared_weak_count *a13, char a14)
{
  if (a14 && a13) {
    sub_216784EC4(a13);
  }
  if (a11)
  {
    if (a10) {
      sub_216784EC4(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_2168C7AFC(pxrInternal__aapl__pxrReserved__::JsValue *a1)
{
  if (!*((unsigned char *)a1 + 16) || !pxrInternal__aapl__pxrReserved__::JsValue::IsArray(a1)) {
    return 0;
  }

  return pxrInternal__aapl__pxrReserved__::JsValue::GetJsArray((unint64_t **)a1);
}

unint64_t sub_2168C7B50(uint64_t a1, uint64_t a2)
{
  LOBYTE(v4) = 0;
  char v6 = 0;
  pxrInternal__aapl__pxrReserved__::JsFindValue(a1, a2, &v4, (uint64_t)v7);
  unint64_t v2 = sub_2168C79FC((pxrInternal__aapl__pxrReserved__::JsValue *)v7);
  if (v9 && v8) {
    sub_216784EC4(v8);
  }
  if (v6 && v5) {
    sub_216784EC4(v5);
  }
  return v2;
}

void sub_2168C7BC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, char a11, uint64_t a12, std::__shared_weak_count *a13, char a14)
{
  if (a14 && a13) {
    sub_216784EC4(a13);
  }
  if (a11)
  {
    if (a10) {
      sub_216784EC4(a10);
    }
  }
  _Unwind_Resume(exception_object);
}

void *sub_2168C7BFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = *(void *)(a2 + 24) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = bswap64(0x9E3779B97F4A7C55 * v5);
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = v6;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = v6 & (v7 - 1);
    }
    char v9 = *(void **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t result = (void *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = result[1];
          if (v11 == v6)
          {
            if ((result[5] & 0xFFFFFFFFFFFFFFF8) == v5) {
              return result;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t result = (void *)*result;
        }
        while (result);
      }
    }
  }
  sub_2168C7E48(a1, v6, a3, (uint64_t)&v20);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_21678A04C(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void **)(*(void *)a1 + 8 * v3);
  if (v18)
  {
    *long long v20 = *v18;
    *uint64_t v18 = v20;
  }
  else
  {
    *long long v20 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v20;
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*v20)
    {
      unint64_t v19 = *(void *)(*v20 + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7) {
          v19 %= v7;
        }
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v19) = v20;
    }
  }
  uint64_t result = v20;
  ++*(void *)(a1 + 24);
  return result;
}

void sub_2168C7E30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168C7EC8((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *sub_2168C7E48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t result = operator new(0x30uLL);
  *(void *)a4 = result;
  *(void *)(a4 + 8) = v7;
  *uint64_t result = 0;
  result[1] = a2;
  *((_OWORD *)result + 1) = *(_OWORD *)a3;
  uint64_t v9 = *(void *)(a3 + 24);
  result[4] = *(void *)(a3 + 16);
  result[5] = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    result[5] &= 0xFFFFFFFFFFFFFFF8;
  }
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_2168C7EC8(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void **)a1;
  *(void *)a1 = a2;
  if (v3)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      uint64_t v4 = v3[5];
      if ((v4 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    operator delete(v3);
  }
}

void *sub_2168C7F00(void *a1)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a1 + 3);
  unint64_t v2 = a1[3] & 0xFFFFFFFFFFFFFFF8;
  if (v2)
  {
    unint64_t v3 = (const char *)(v2 + 16);
    if (*(char *)(v2 + 39) < 0) {
      unint64_t v3 = *(const char **)v3;
    }
  }
  else
  {
    unint64_t v3 = "";
  }
  a1[2] = v3;
  return a1;
}

uint64_t sub_2168C7F60(uint64_t a1, void *a2)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_26C74CC68;
  *(void *)(a1 + 24) = *a2;
  sub_2168BD80C((uint64_t *)(a1 + 24));
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) = 1065353216;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 1065353216;
  return a1;
}

void sub_2168C7FE0(_Unwind_Exception *a1, const void *a2)
{
  sub_216859A88(v3, a2);
  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase(v2);
  _Unwind_Resume(a1);
}

uint64_t **sub_2168C7FFC(uint64_t **a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v6 = a1 + 1;
  unint64_t v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        uint8x8_t v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        unint64_t v5 = *v8;
        unint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      unint64_t v5 = v8[1];
      if (!v5)
      {
        unint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint8x8_t v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = (char *)operator new(0x40uLL);
    *((void *)v10 + 4) = *(void *)a3;
    *(_OWORD *)(v10 + 40) = *(_OWORD *)(a3 + 8);
    *((void *)v10 + 7) = *(void *)(a3 + 24);
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    sub_21677B358(a1, (uint64_t)v8, v6, (uint64_t *)v10);
    return (uint64_t **)v10;
  }
  return v8;
}

void sub_2168C80D0(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_2168C80D0(a1, *(void *)a2);
    sub_2168C80D0(a1, *((void *)a2 + 1));
    if (a2[63] < 0) {
      operator delete(*((void **)a2 + 5));
    }
    operator delete(a2);
  }
}

void sub_2168C8134(pxrInternal__aapl__pxrReserved__::TraceEvent *a1, char *a2, uint64_t a3, char a4)
{
  uint64_t v129 = *MEMORY[0x263EF8340];
  while (2)
  {
    uint64_t v10 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)(a2 - 32);
    uint64_t v122 = a2;
    uint64_t v123 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)(a2 - 64);
    uint64_t v121 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)(a2 - 96);
    unint64_t v11 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v11;
          uint64_t v12 = a2 - (char *)v11;
          uint64_t v13 = (a2 - (char *)v11) >> 5;
          if (v5 || !v4)
          {
            switch(v13)
            {
              case 0:
              case 1:
                return;
              case 2:
                unint64_t TimeStamp = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(v10);
                if (TimeStamp < pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(a1))
                {
                  long long v55 = *((_OWORD *)a1 + 1);
                  long long v127 = *(_OWORD *)a1;
                  long long v128 = v55;
                  long long v56 = *((_OWORD *)v10 + 1);
                  *(_OWORD *)a1 = *(_OWORD *)v10;
                  *((_OWORD *)a1 + 1) = v56;
                  long long v57 = v128;
                  *(_OWORD *)uint64_t v10 = v127;
                  *((_OWORD *)v10 + 1) = v57;
                }
                break;
              case 3:
                sub_2168C8ACC(a1, (pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)a1 + 32), v10);
                break;
              case 4:
                sub_2168C8E18((__n128 *)a1, (pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)a1 + 32), (pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)a1 + 64), v10);
                break;
              case 5:
                sub_2168C89A4((__n128 *)a1, (pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)a1 + 32), (pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)a1 + 64), (pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)a1 + 96), v10);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v12 <= 767)
          {
            int v58 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)a1 + 32);
            BOOL v60 = a1 == (pxrInternal__aapl__pxrReserved__::TraceEvent *)a2
               || v58 == (pxrInternal__aapl__pxrReserved__::TraceEvent *)a2;
            if (a4)
            {
              if (!v60)
              {
                uint64_t v61 = 0;
                int v62 = a1;
                do
                {
                  uint64_t v63 = v62;
                  int v62 = v58;
                  unint64_t v64 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(v58);
                  if (v64 < pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(v63))
                  {
                    long long v65 = *((_OWORD *)v62 + 1);
                    long long v127 = *(_OWORD *)v62;
                    long long v128 = v65;
                    uint64_t v66 = v61;
                    while (1)
                    {
                      unsigned int v67 = (char *)a1 + v66;
                      long long v68 = *(_OWORD *)((char *)a1 + v66 + 16);
                      *((_OWORD *)v67 + 2) = *(_OWORD *)((char *)a1 + v66);
                      *((_OWORD *)v67 + 3) = v68;
                      if (!v66) {
                        break;
                      }
                      v66 -= 32;
                      unint64_t v69 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)&v127);
                      if (v69 >= pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)a1 + v66)))
                      {
                        uint64_t v70 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)a1 + v66 + 32);
                        goto LABEL_75;
                      }
                    }
                    uint64_t v70 = a1;
LABEL_75:
                    long long v71 = v128;
                    *(_OWORD *)uint64_t v70 = v127;
                    *((_OWORD *)v70 + 1) = v71;
                    a2 = v122;
                  }
                  int v58 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)v62 + 32);
                  v61 += 32;
                }
                while ((char *)v62 + 32 != a2);
              }
            }
            else if (!v60)
            {
              uint64_t v112 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)a1 - 32);
              do
              {
                long long v113 = a1;
                a1 = v58;
                unint64_t v114 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(v58);
                if (v114 < pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(v113))
                {
                  long long v115 = *((_OWORD *)a1 + 1);
                  long long v127 = *(_OWORD *)a1;
                  long long v128 = v115;
                  char v116 = v112;
                  do
                  {
                    long long v117 = *((_OWORD *)v116 + 3);
                    *((_OWORD *)v116 + 4) = *((_OWORD *)v116 + 2);
                    *((_OWORD *)v116 + 5) = v117;
                    unint64_t v118 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)&v127);
                    unint64_t v119 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(v116);
                    char v116 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)v116 - 32);
                  }
                  while (v118 < v119);
                  long long v120 = v128;
                  *((_OWORD *)v116 + 4) = v127;
                  *((_OWORD *)v116 + 5) = v120;
                }
                int v58 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)a1 + 32);
                uint64_t v112 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)v112 + 32);
              }
              while ((char *)a1 + 32 != a2);
            }
            return;
          }
          if (!a3)
          {
            if (a1 != (pxrInternal__aapl__pxrReserved__::TraceEvent *)a2)
            {
              int64_t v72 = (unint64_t)(v13 - 2) >> 1;
              int64_t v124 = v72;
              do
              {
                int64_t v73 = v72;
                if (v124 >= v72)
                {
                  uint64_t v74 = (2 * v72) | 1;
                  uint64_t v75 = (_OWORD *)((char *)a1 + 32 * v74);
                  if (2 * v72 + 2 < v13)
                  {
                    unint64_t v76 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)a1 + 32 * v74));
                    if (v76 < pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)(v75 + 2)))
                    {
                      v75 += 2;
                      uint64_t v74 = 2 * v73 + 2;
                    }
                  }
                  uint64_t v77 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)a1 + 32 * v73);
                  unint64_t v78 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)v75);
                  if (v78 >= pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(v77))
                  {
                    long long v79 = *((_OWORD *)v77 + 1);
                    long long v127 = *(_OWORD *)v77;
                    long long v128 = v79;
                    do
                    {
                      long long v80 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)v75;
                      long long v81 = v75[1];
                      *(_OWORD *)uint64_t v77 = *v75;
                      *((_OWORD *)v77 + 1) = v81;
                      if (v124 < v74) {
                        break;
                      }
                      uint64_t v82 = (2 * v74) | 1;
                      uint64_t v75 = (_OWORD *)((char *)a1 + 32 * v82);
                      uint64_t v83 = 2 * v74 + 2;
                      if (v83 < v13)
                      {
                        unint64_t v84 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)a1 + 32 * v82));
                        if (v84 < pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)(v75 + 2)))
                        {
                          v75 += 2;
                          uint64_t v82 = v83;
                        }
                      }
                      unint64_t v85 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)v75);
                      uint64_t v77 = v80;
                      uint64_t v74 = v82;
                    }
                    while (v85 >= pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)&v127));
                    long long v86 = v128;
                    *(_OWORD *)long long v80 = v127;
                    *((_OWORD *)v80 + 1) = v86;
                  }
                }
                int64_t v72 = v73 - 1;
              }
              while (v73);
              uint64_t v87 = (unint64_t)v12 >> 5;
              uint64_t v88 = v122;
              do
              {
                char v89 = v88;
                uint64_t v90 = 0;
                long long v91 = *((_OWORD *)a1 + 1);
                long long v125 = *(_OWORD *)a1;
                long long v126 = v91;
                uint64_t v92 = a1;
                do
                {
                  double v93 = (char *)v92 + 32 * v90 + 32;
                  uint64_t v94 = (2 * v90) | 1;
                  uint64_t v95 = 2 * v90 + 2;
                  if (v95 < v87)
                  {
                    unint64_t v96 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)v92 + 32 * v90 + 32));
                    if (v96 < pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)(v93 + 32)))
                    {
                      v93 += 32;
                      uint64_t v94 = v95;
                    }
                  }
                  long long v97 = *((_OWORD *)v93 + 1);
                  *(_OWORD *)uint64_t v92 = *(_OWORD *)v93;
                  *((_OWORD *)v92 + 1) = v97;
                  uint64_t v92 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)v93;
                  uint64_t v90 = v94;
                }
                while (v94 <= (uint64_t)((unint64_t)(v87 - 2) >> 1));
                uint64_t v98 = v89 - 32;
                if (v93 == v98)
                {
                  uint64_t v88 = v98;
                  long long v110 = v126;
                  *(_OWORD *)double v93 = v125;
                  *((_OWORD *)v93 + 1) = v110;
                }
                else
                {
                  long long v99 = *((_OWORD *)v98 + 1);
                  *(_OWORD *)double v93 = *(_OWORD *)v98;
                  *((_OWORD *)v93 + 1) = v99;
                  long long v100 = v126;
                  *(_OWORD *)uint64_t v98 = v125;
                  *((_OWORD *)v98 + 1) = v100;
                  uint64_t v88 = v98;
                  uint64_t v101 = v93 - (char *)a1 + 32;
                  if (v101 >= 33)
                  {
                    unint64_t v102 = (((unint64_t)v101 >> 5) - 2) >> 1;
                    uint64_t v103 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)a1 + 32 * v102);
                    unint64_t v104 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(v103);
                    if (v104 < pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)v93))
                    {
                      long long v105 = *((_OWORD *)v93 + 1);
                      long long v127 = *(_OWORD *)v93;
                      long long v128 = v105;
                      do
                      {
                        unint64_t v106 = v103;
                        long long v107 = *((_OWORD *)v103 + 1);
                        *(_OWORD *)double v93 = *(_OWORD *)v103;
                        *((_OWORD *)v93 + 1) = v107;
                        if (!v102) {
                          break;
                        }
                        unint64_t v102 = (v102 - 1) >> 1;
                        uint64_t v103 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)a1 + 32 * v102);
                        unint64_t v108 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(v103);
                        double v93 = (char *)v106;
                      }
                      while (v108 < pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)&v127));
                      long long v109 = v128;
                      *(_OWORD *)unint64_t v106 = v127;
                      *((_OWORD *)v106 + 1) = v109;
                    }
                  }
                }
              }
              while (v87-- > 2);
            }
            return;
          }
          unint64_t v14 = (unint64_t)v13 >> 1;
          unint64_t v15 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)a1 + 32 * ((unint64_t)v13 >> 1));
          if ((unint64_t)v12 <= 0x1000)
          {
            sub_2168C8ACC(v15, a1, v10);
          }
          else
          {
            sub_2168C8ACC(a1, v15, v10);
            sub_2168C8ACC((pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)a1 + 32), (pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)v15 - 32), v123);
            sub_2168C8ACC((pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)a1 + 64), (pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)a1 + 32 * v14 + 32), v121);
            sub_2168C8ACC((pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)v15 - 32), v15, (pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)a1 + 32 * v14 + 32));
            long long v16 = *((_OWORD *)a1 + 1);
            long long v127 = *(_OWORD *)a1;
            long long v128 = v16;
            long long v17 = *((_OWORD *)v15 + 1);
            *(_OWORD *)a1 = *(_OWORD *)v15;
            *((_OWORD *)a1 + 1) = v17;
            long long v18 = v128;
            *(_OWORD *)unint64_t v15 = v127;
            *((_OWORD *)v15 + 1) = v18;
          }
          --a3;
          if (a4) {
            break;
          }
          unint64_t v19 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)a1 - 32));
          if (v19 < pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(a1)) {
            break;
          }
          long long v38 = *((_OWORD *)a1 + 1);
          long long v125 = *(_OWORD *)a1;
          long long v126 = v38;
          unint64_t v39 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)&v125);
          if (v39 >= pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(v10))
          {
            uint64_t v41 = (char *)a1 + 32;
            a2 = v122;
            do
            {
              unint64_t v11 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)v41;
              if (v41 >= v122) {
                break;
              }
              unint64_t v42 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)&v125);
              unint64_t v43 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(v11);
              uint64_t v41 = (char *)v11 + 32;
            }
            while (v42 >= v43);
          }
          else
          {
            unint64_t v11 = a1;
            a2 = v122;
            do
            {
              unint64_t v11 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)v11 + 32);
              unint64_t v40 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)&v125);
            }
            while (v40 >= pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(v11));
          }
          unint64_t v44 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)a2;
          if (v11 < (pxrInternal__aapl__pxrReserved__::TraceEvent *)a2)
          {
            unint64_t v44 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)a2;
            do
            {
              unint64_t v44 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)v44 - 32);
              unint64_t v45 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)&v125);
            }
            while (v45 < pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(v44));
          }
          while (v11 < v44)
          {
            long long v46 = *((_OWORD *)v11 + 1);
            long long v127 = *(_OWORD *)v11;
            long long v128 = v46;
            long long v47 = *((_OWORD *)v44 + 1);
            *(_OWORD *)unint64_t v11 = *(_OWORD *)v44;
            *((_OWORD *)v11 + 1) = v47;
            long long v48 = v128;
            *(_OWORD *)unint64_t v44 = v127;
            *((_OWORD *)v44 + 1) = v48;
            do
            {
              unint64_t v11 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)v11 + 32);
              unint64_t v49 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)&v125);
            }
            while (v49 >= pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(v11));
            do
            {
              unint64_t v44 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)v44 - 32);
              unint64_t v50 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)&v125);
            }
            while (v50 < pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(v44));
          }
          unint64_t v51 = (_OWORD *)((char *)v11 - 32);
          BOOL v4 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)v11 - 32) >= a1;
          BOOL v5 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)v11 - 32) == a1;
          if ((pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)v11 - 32) != a1)
          {
            long long v52 = *((_OWORD *)v11 - 1);
            *(_OWORD *)a1 = *v51;
            *((_OWORD *)a1 + 1) = v52;
          }
          a4 = 0;
          long long v53 = v126;
          *unint64_t v51 = v125;
          *((_OWORD *)v11 - 1) = v53;
        }
        uint64_t v20 = 0;
        long long v21 = *((_OWORD *)a1 + 1);
        long long v125 = *(_OWORD *)a1;
        long long v126 = v21;
        do
        {
          v20 += 32;
          unint64_t v22 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)a1 + v20));
        }
        while (v22 < pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)&v125));
        int v23 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)a1 + v20);
        unint64_t v24 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)v122;
        BOOL v5 = v20 == 32;
        a2 = v122;
        if (v5)
        {
          unint64_t v24 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)v122;
          do
          {
            if (v23 >= v24) {
              break;
            }
            unint64_t v24 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)v24 - 32);
            unint64_t v26 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(v24);
          }
          while (v26 >= pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)&v125));
        }
        else
        {
          do
          {
            unint64_t v24 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)v24 - 32);
            unint64_t v25 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(v24);
          }
          while (v25 >= pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)&v125));
        }
        if (v23 >= v24)
        {
          long long v34 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)v23 - 32);
        }
        else
        {
          char v27 = v23;
          char v28 = v24;
          do
          {
            long long v29 = *((_OWORD *)v27 + 1);
            long long v127 = *(_OWORD *)v27;
            long long v128 = v29;
            long long v30 = *((_OWORD *)v28 + 1);
            *(_OWORD *)char v27 = *(_OWORD *)v28;
            *((_OWORD *)v27 + 1) = v30;
            long long v31 = v128;
            *(_OWORD *)char v28 = v127;
            *((_OWORD *)v28 + 1) = v31;
            do
            {
              char v27 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)v27 + 32);
              unint64_t v32 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(v27);
            }
            while (v32 < pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)&v125));
            do
            {
              char v28 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)v28 - 32);
              unint64_t v33 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(v28);
            }
            while (v33 >= pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)&v125));
          }
          while (v27 < v28);
          long long v34 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)v27 - 32);
        }
        if (v34 != a1)
        {
          long long v35 = *((_OWORD *)v34 + 1);
          *(_OWORD *)a1 = *(_OWORD *)v34;
          *((_OWORD *)a1 + 1) = v35;
        }
        long long v36 = v126;
        *(_OWORD *)long long v34 = v125;
        *((_OWORD *)v34 + 1) = v36;
        if (v23 >= v24) {
          break;
        }
LABEL_33:
        sub_2168C8134(a1, v34, a3, a4 & 1);
        a4 = 0;
        unint64_t v11 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)v34 + 32);
      }
      BOOL v37 = sub_2168C8C08((__n128 *)a1, (char *)v34);
      unint64_t v11 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)v34 + 32);
      if (sub_2168C8C08((__n128 *)v34 + 2, v122)) {
        break;
      }
      if (!v37) {
        goto LABEL_33;
      }
    }
    a2 = (char *)v34;
    if (!v37) {
      continue;
    }
    break;
  }
}

__n128 sub_2168C89A4(__n128 *a1, pxrInternal__aapl__pxrReserved__::TraceEvent *a2, pxrInternal__aapl__pxrReserved__::TraceEvent *a3, pxrInternal__aapl__pxrReserved__::TraceEvent *a4, pxrInternal__aapl__pxrReserved__::TraceEvent *a5)
{
  sub_2168C8E18(a1, a2, a3, a4);
  unint64_t TimeStamp = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(a5);
  if (TimeStamp < pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(a4))
  {
    long long v13 = *(_OWORD *)a4;
    long long v12 = *((_OWORD *)a4 + 1);
    long long v14 = *((_OWORD *)a5 + 1);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *((_OWORD *)a4 + 1) = v14;
    *(_OWORD *)a5 = v13;
    *((_OWORD *)a5 + 1) = v12;
    unint64_t v15 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(a4);
    if (v15 < pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(a3))
    {
      long long v17 = *(_OWORD *)a3;
      long long v16 = *((_OWORD *)a3 + 1);
      long long v18 = *((_OWORD *)a4 + 1);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *((_OWORD *)a3 + 1) = v18;
      *(_OWORD *)a4 = v17;
      *((_OWORD *)a4 + 1) = v16;
      unint64_t v19 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(a3);
      if (v19 < pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(a2))
      {
        __n128 v21 = *(__n128 *)a2;
        long long v20 = *((_OWORD *)a2 + 1);
        long long v22 = *((_OWORD *)a3 + 1);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *((_OWORD *)a2 + 1) = v22;
        *(__n128 *)a3 = v21;
        *((_OWORD *)a3 + 1) = v20;
        unint64_t v23 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(a2);
        if (v23 < pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)a1))
        {
          __n128 v24 = *a1;
          __n128 result = a1[1];
          __n128 v25 = *((__n128 *)a2 + 1);
          *a1 = *(__n128 *)a2;
          a1[1] = v25;
          *(__n128 *)a2 = v24;
          *((__n128 *)a2 + 1) = result;
        }
      }
    }
  }
  return result;
}

unint64_t sub_2168C8ACC(pxrInternal__aapl__pxrReserved__::TraceEvent *a1, pxrInternal__aapl__pxrReserved__::TraceEvent *this, pxrInternal__aapl__pxrReserved__::TraceEvent *a3)
{
  unint64_t TimeStamp = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(this);
  unint64_t v7 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(a1);
  unint64_t v8 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(a3);
  unint64_t result = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(this);
  if (TimeStamp >= v7)
  {
    if (v8 < result)
    {
      long long v14 = *(_OWORD *)this;
      long long v13 = *((_OWORD *)this + 1);
      long long v15 = *((_OWORD *)a3 + 1);
      *(_OWORD *)this = *(_OWORD *)a3;
      *((_OWORD *)this + 1) = v15;
      *(_OWORD *)a3 = v14;
      *((_OWORD *)a3 + 1) = v13;
      unint64_t v16 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(this);
      unint64_t result = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(a1);
      if (v16 < result)
      {
        long long v18 = *(_OWORD *)a1;
        long long v17 = *((_OWORD *)a1 + 1);
        long long v19 = *((_OWORD *)this + 1);
        *(_OWORD *)a1 = *(_OWORD *)this;
        *((_OWORD *)a1 + 1) = v19;
        *(_OWORD *)this = v18;
        *((_OWORD *)this + 1) = v17;
      }
    }
  }
  else
  {
    if (v8 >= result)
    {
      long long v21 = *(_OWORD *)a1;
      long long v20 = *((_OWORD *)a1 + 1);
      long long v22 = *((_OWORD *)this + 1);
      *(_OWORD *)a1 = *(_OWORD *)this;
      *((_OWORD *)a1 + 1) = v22;
      *(_OWORD *)this = v21;
      *((_OWORD *)this + 1) = v20;
      unint64_t v23 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(a3);
      unint64_t result = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(this);
      if (v23 >= result) {
        return result;
      }
      long long v11 = *(_OWORD *)this;
      long long v10 = *((_OWORD *)this + 1);
      long long v24 = *((_OWORD *)a3 + 1);
      *(_OWORD *)this = *(_OWORD *)a3;
      *((_OWORD *)this + 1) = v24;
    }
    else
    {
      long long v11 = *(_OWORD *)a1;
      long long v10 = *((_OWORD *)a1 + 1);
      long long v12 = *((_OWORD *)a3 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *((_OWORD *)a1 + 1) = v12;
    }
    *(_OWORD *)a3 = v11;
    *((_OWORD *)a3 + 1) = v10;
  }
  return result;
}

BOOL sub_2168C8C08(__n128 *a1, char *a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v4 = (a2 - (char *)a1) >> 5;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      unint64_t v6 = (__n128 *)(a2 - 32);
      unint64_t TimeStamp = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)(a2 - 32));
      if (TimeStamp < pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)a1))
      {
        __n128 v9 = *a1;
        __n128 v8 = a1[1];
        __n128 v10 = v6[1];
        *a1 = *v6;
        a1[1] = v10;
        *unint64_t v6 = v9;
        v6[1] = v8;
      }
      return 1;
    case 3:
      sub_2168C8ACC((pxrInternal__aapl__pxrReserved__::TraceEvent *)a1, (pxrInternal__aapl__pxrReserved__::TraceEvent *)&a1[2], (pxrInternal__aapl__pxrReserved__::TraceEvent *)(a2 - 32));
      return 1;
    case 4:
      sub_2168C8E18(a1, (pxrInternal__aapl__pxrReserved__::TraceEvent *)&a1[2], (pxrInternal__aapl__pxrReserved__::TraceEvent *)&a1[4], (pxrInternal__aapl__pxrReserved__::TraceEvent *)(a2 - 32));
      return 1;
    case 5:
      sub_2168C89A4(a1, (pxrInternal__aapl__pxrReserved__::TraceEvent *)&a1[2], (pxrInternal__aapl__pxrReserved__::TraceEvent *)&a1[4], (pxrInternal__aapl__pxrReserved__::TraceEvent *)&a1[6], (pxrInternal__aapl__pxrReserved__::TraceEvent *)(a2 - 32));
      return 1;
    default:
      long long v11 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)&a1[4];
      sub_2168C8ACC((pxrInternal__aapl__pxrReserved__::TraceEvent *)a1, (pxrInternal__aapl__pxrReserved__::TraceEvent *)&a1[2], (pxrInternal__aapl__pxrReserved__::TraceEvent *)&a1[4]);
      long long v12 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)&a1[6];
      if (&a1[6] == (__n128 *)a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    unint64_t v15 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(v12);
    if (v15 < pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(v11))
    {
      __n128 v16 = *((__n128 *)v12 + 1);
      __n128 v24 = *(__n128 *)v12;
      __n128 v25 = v16;
      uint64_t v17 = v13;
      while (1)
      {
        long long v18 = (_OWORD *)((char *)a1->n128_u64 + v17);
        long long v19 = *(long long *)((char *)&a1[5] + v17);
        v18[6] = *(__n128 *)((char *)&a1[4] + v17);
        v18[7] = v19;
        if (v17 == -64) {
          break;
        }
        long long v20 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)(v18 + 2);
        unint64_t v21 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)&v24);
        v17 -= 32;
        if (v21 >= pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(v20))
        {
          long long v22 = (__n128 *)((char *)a1 + v17 + 96);
          goto LABEL_12;
        }
      }
      long long v22 = a1;
LABEL_12:
      __n128 v23 = v25;
      *long long v22 = v24;
      v22[1] = v23;
      if (++v14 == 8) {
        return (char *)v12 + 32 == a2;
      }
    }
    long long v11 = v12;
    v13 += 32;
    long long v12 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)((char *)v12 + 32);
    if (v12 == (pxrInternal__aapl__pxrReserved__::TraceEvent *)a2) {
      return 1;
    }
  }
}

__n128 sub_2168C8E18(__n128 *a1, pxrInternal__aapl__pxrReserved__::TraceEvent *a2, pxrInternal__aapl__pxrReserved__::TraceEvent *a3, pxrInternal__aapl__pxrReserved__::TraceEvent *a4)
{
  sub_2168C8ACC((pxrInternal__aapl__pxrReserved__::TraceEvent *)a1, a2, a3);
  unint64_t TimeStamp = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(a4);
  if (TimeStamp < pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(a3))
  {
    long long v11 = *(_OWORD *)a3;
    long long v10 = *((_OWORD *)a3 + 1);
    long long v12 = *((_OWORD *)a4 + 1);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *((_OWORD *)a3 + 1) = v12;
    *(_OWORD *)a4 = v11;
    *((_OWORD *)a4 + 1) = v10;
    unint64_t v13 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(a3);
    if (v13 < pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(a2))
    {
      __n128 v15 = *(__n128 *)a2;
      long long v14 = *((_OWORD *)a2 + 1);
      long long v16 = *((_OWORD *)a3 + 1);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_OWORD *)a2 + 1) = v16;
      *(__n128 *)a3 = v15;
      *((_OWORD *)a3 + 1) = v14;
      unint64_t v17 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(a2);
      if (v17 < pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)a1))
      {
        __n128 v18 = *a1;
        __n128 result = a1[1];
        __n128 v19 = *((__n128 *)a2 + 1);
        *a1 = *(__n128 *)a2;
        a1[1] = v19;
        *(__n128 *)a2 = v18;
        *((__n128 *)a2 + 1) = result;
      }
    }
  }
  return result;
}

_OWORD *sub_2168C8F10(pxrInternal__aapl__pxrReserved__::TraceEventContainer *a1, _OWORD *a2)
{
  unint64_t v2 = *(_OWORD **)a1;
  *(void *)a1 += 32;
  long long v3 = a2[1];
  *unint64_t v2 = *a2;
  v2[1] = v3;
  **((void **)a1 + 2) += 32;
  if (**((void **)a1 + 2) == *(void *)(*((void *)a1 + 2) + 8)) {
    pxrInternal__aapl__pxrReserved__::TraceEventContainer::Allocate(a1);
  }
  return v2;
}

uint64_t sub_2168C8F68(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)((char *)pxrInternal__aapl__pxrReserved__::TraceEventContainer::TraceEventContainer((pxrInternal__aapl__pxrReserved__::TraceEventContainer *)a1, (void *)a2)+ 32);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = 0;
  sub_21685A0DC((uint64_t)v4, v4, (void *)(a2 + 32));
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  return a1;
}

void *sub_2168C9000(pxrInternal__aapl__pxrReserved__::TraceDataBuffer::Allocator *a1, char *__s)
{
  size_t v4 = strlen(__s) + 1;
  BOOL v5 = (char *)*((void *)a1 + 1);
  unint64_t v6 = &v5[v4];
  if ((unint64_t)&v5[v4] > *(void *)a1)
  {
    pxrInternal__aapl__pxrReserved__::TraceDataBuffer::Allocator::AllocateBlock(a1, 1uLL, v4);
    BOOL v5 = (char *)*((void *)a1 + 1);
    unint64_t v6 = &v5[v4];
  }
  *((void *)a1 + 1) = v6;

  return memcpy(v5, __s, v4);
}

void *sub_2168C9088(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26C74CD20;
  result[1] = v3;
  return result;
}

uint64_t sub_2168C90D0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C74CD20;
  a2[1] = v2;
  return result;
}

void sub_2168C90FC(uint64_t a1, uint64_t **this)
{
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey(this, "libTraceData");
  size_t v4 = *(pxrInternal__aapl__pxrReserved__::TraceCollection *****)(a1 + 8);
  v36[0] = 0;
  v36[1] = 0;
  long long v34 = &unk_26C74CDA0;
  long long v35 = v36;
  BOOL v5 = *v4;
  unint64_t v6 = v4[1];
  while (v5 != v6)
  {
    if (*v5) {
      pxrInternal__aapl__pxrReserved__::TraceCollection::Iterate(*v5, (pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor *)&v34);
    }
    v5 += 2;
  }
  pxrInternal__aapl__pxrReserved__::JsWriter::BeginObject((pxrInternal__aapl__pxrReserved__::JsWriter *)this);
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey(this, "threadEvents");
  memset(v37, 0, sizeof(v37));
  pxrInternal__aapl__pxrReserved__::JsWriter::BeginArray((pxrInternal__aapl__pxrReserved__::JsWriter *)this);
  unint64_t v7 = v35;
  if (v35 != v36)
  {
    do
    {
      pxrInternal__aapl__pxrReserved__::JsWriter::BeginObject((pxrInternal__aapl__pxrReserved__::JsWriter *)this);
      pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey(this, "thread");
      pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue(this, v7 + 4);
      pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey(this, "events");
      pxrInternal__aapl__pxrReserved__::JsWriter::BeginArray((pxrInternal__aapl__pxrReserved__::JsWriter *)this);
      __n128 v8 = (void *)v7[7];
      __n128 v9 = (void *)v7[8];
      while (v8 != v9)
      {
        long long v10 = (unsigned int *)v8[1];
        Type = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TraceEvent::GetType((pxrInternal__aapl__pxrReserved__::TraceEvent *)v10);
        switch((int)Type)
        {
          case 1:
          case 2:
            if ((*v8 & 0xFFFFFFFFFFFFFFF8) != 0) {
              Emptyunint64_t String = (uint64_t *)((*v8 & 0xFFFFFFFFFFFFFFF8) + 16);
            }
            else {
              Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Type);
            }
            v41[0] = (void **)v10[2];
            unsigned int v16 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetType((pxrInternal__aapl__pxrReserved__::TraceEvent *)v10);
            unint64_t v17 = "Unknown";
            if (v16 <= 7) {
              unint64_t v17 = off_2642943F0[(char)v16];
            }
            goto LABEL_23;
          case 3:
            if ((*v8 & 0xFFFFFFFFFFFFFFF8) != 0) {
              long long v14 = (uint64_t *)((*v8 & 0xFFFFFFFFFFFFFFF8) + 16);
            }
            else {
              long long v14 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Type);
            }
            v41[0] = (void **)v10[2];
            unsigned int v22 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetType((pxrInternal__aapl__pxrReserved__::TraceEvent *)v10);
            __n128 v23 = "Unknown";
            if (v22 <= 7) {
              __n128 v23 = off_2642943F0[(char)v22];
            }
            unint64_t v40 = v23;
            Startunint64_t TimeStamp = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::TraceEvent::GetStartTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)v10);
            double v39 = (double)(uint64_t)pxrInternal__aapl__pxrReserved__::ArchTicksToNanoseconds(StartTimeStamp) / 1000.0;
            Endunint64_t TimeStamp = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::TraceEvent::GetEndTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)v10);
            double CounterValue = (double)(uint64_t)pxrInternal__aapl__pxrReserved__::ArchTicksToNanoseconds(EndTimeStamp)
                         / 1000.0;
            sub_2168C9DCC((pxrInternal__aapl__pxrReserved__::JsWriter *)this, "key", v14, "category", (uint64_t)v41, "type", &v40, "start", &v39, "end", &CounterValue);
            break;
          case 4:
            if ((*v8 & 0xFFFFFFFFFFFFFFF8) != 0) {
              Emptyunint64_t String = (uint64_t *)((*v8 & 0xFFFFFFFFFFFFFFF8) + 16);
            }
            else {
              Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Type);
            }
            v41[0] = (void **)v10[2];
            unsigned int v26 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetType((pxrInternal__aapl__pxrReserved__::TraceEvent *)v10);
            unint64_t v17 = "Unknown";
            if (v26 <= 7) {
              unint64_t v17 = off_2642943F0[(char)v26];
            }
LABEL_23:
            unint64_t v40 = v17;
            unint64_t TimeStamp = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)v10);
            double v39 = (double)(uint64_t)pxrInternal__aapl__pxrReserved__::ArchTicksToNanoseconds(TimeStamp) / 1000.0;
            sub_2168C9D1C((pxrInternal__aapl__pxrReserved__::JsWriter *)this, "key", EmptyString, "category", (uint64_t)v41, "type", &v40, "ts", &v39);
            break;
          case 5:
          case 6:
            if ((*v8 & 0xFFFFFFFFFFFFFFF8) != 0) {
              unint64_t v13 = (uint64_t *)((*v8 & 0xFFFFFFFFFFFFFFF8) + 16);
            }
            else {
              unint64_t v13 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Type);
            }
            v41[0] = (void **)v10[2];
            unsigned int v19 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetType((pxrInternal__aapl__pxrReserved__::TraceEvent *)v10);
            long long v20 = "Unknown";
            if (v19 <= 7) {
              long long v20 = off_2642943F0[(char)v19];
            }
            unint64_t v40 = v20;
            unint64_t v21 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)v10);
            double v39 = (double)(uint64_t)pxrInternal__aapl__pxrReserved__::ArchTicksToNanoseconds(v21) / 1000.0;
            double CounterValue = pxrInternal__aapl__pxrReserved__::TraceEvent::GetCounterValue((pxrInternal__aapl__pxrReserved__::TraceEvent *)v10);
            sub_2168C9DCC((pxrInternal__aapl__pxrReserved__::JsWriter *)this, "key", v13, "category", (uint64_t)v41, "type", &v40, "ts", &v39, "value", &CounterValue);
            break;
          case 7:
            if ((*v8 & 0xFFFFFFFFFFFFFFF8) != 0) {
              __n128 v15 = (uint64_t *)((*v8 & 0xFFFFFFFFFFFFFFF8) + 16);
            }
            else {
              __n128 v15 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Type);
            }
            unsigned int v27 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetType((pxrInternal__aapl__pxrReserved__::TraceEvent *)v10);
            char v28 = "Unknown";
            if (v27 <= 7) {
              char v28 = off_2642943F0[(char)v27];
            }
            long long v29 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp((pxrInternal__aapl__pxrReserved__::TraceEvent *)v10);
            int64_t v30 = pxrInternal__aapl__pxrReserved__::ArchTicksToNanoseconds(v29);
            pxrInternal__aapl__pxrReserved__::JsWriter::BeginObject((pxrInternal__aapl__pxrReserved__::JsWriter *)this);
            pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey(this, "key");
            pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue(this, v15);
            pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey(this, "category");
            pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue((pxrInternal__aapl__pxrReserved__::JsWriter *)this);
            pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey(this, "type");
            pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue(this, v28);
            pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey(this, "ts");
            pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue((pxrInternal__aapl__pxrReserved__::JsWriter *)this, (double)v30 / 1000.0);
            pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey(this, "data");
            pxrInternal__aapl__pxrReserved__::TraceEvent::GetData((pxrInternal__aapl__pxrReserved__::TraceEvent *)v10, (uint64_t)v41);
            pxrInternal__aapl__pxrReserved__::TraceEventData::WriteJson((pxrInternal__aapl__pxrReserved__::TraceEventData *)v41, (pxrInternal__aapl__pxrReserved__::JsWriter *)this);
            sub_2168C0420((uint64_t)v41);
            pxrInternal__aapl__pxrReserved__::JsWriter::EndObject((pxrInternal__aapl__pxrReserved__::JsWriter *)this);
            break;
          default:
            break;
        }
        v8 += 2;
      }
      pxrInternal__aapl__pxrReserved__::JsWriter::EndArray((pxrInternal__aapl__pxrReserved__::JsWriter *)this);
      pxrInternal__aapl__pxrReserved__::JsWriter::EndObject((pxrInternal__aapl__pxrReserved__::JsWriter *)this);
      long long v31 = (void *)v7[1];
      if (v31)
      {
        do
        {
          unint64_t v32 = (void **)v31;
          long long v31 = (void *)*v31;
        }
        while (v31);
      }
      else
      {
        do
        {
          unint64_t v32 = (void **)v7[2];
          BOOL v33 = *v32 == v7;
          unint64_t v7 = v32;
        }
        while (!v33);
      }
      unint64_t v7 = v32;
    }
    while (v32 != v36);
  }
  pxrInternal__aapl__pxrReserved__::JsWriter::EndArray((pxrInternal__aapl__pxrReserved__::JsWriter *)this);
  v41[0] = (void **)v37;
  sub_216787968(v41);
  pxrInternal__aapl__pxrReserved__::JsWriter::EndObject((pxrInternal__aapl__pxrReserved__::JsWriter *)this);
  long long v34 = &unk_26C74CDA0;
  sub_2168CA0E0((uint64_t)&v35, v36[0]);
  pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor::~Visitor((pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor *)&v34);
}

void sub_2168C96EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, char a19)
{
  *(void *)(v19 - 112) = &a19;
  sub_216787968((void ***)(v19 - 112));
  a15 = a12;
  sub_2168CA0E0(a13, a17);
  pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor::~Visitor((pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor *)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_2168C9760(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C74CDF8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2168C97A0()
{
  return &unk_26C74CDF8;
}

void sub_2168C97AC(pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor *a1)
{
  *(void *)a1 = &unk_26C74CDA0;
  sub_2168CA0E0((uint64_t)a1 + 8, *((void **)a1 + 2));

  pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor::~Visitor(a1);
}

void sub_2168C9804(pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor *a1)
{
  *(void *)a1 = &unk_26C74CDA0;
  sub_2168CA0E0((uint64_t)a1 + 8, *((void **)a1 + 2));
  pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor::~Visitor(a1);

  operator delete(v2);
}

uint64_t sub_2168C9870()
{
  return 1;
}

char *sub_2168C9878(uint64_t a1, long long *a2, uint64_t *a3, pxrInternal__aapl__pxrReserved__::TraceEvent *this)
{
  __n128 result = (char *)pxrInternal__aapl__pxrReserved__::TraceEvent::GetType(this);
  if ((result - 5) <= 2)
  {
    unint64_t v13 = a2;
    __n128 v9 = sub_2168C9948((uint64_t **)(a1 + 8), (const void **)a2, (uint64_t)&unk_2174BFD90, &v13);
    long long v10 = v9;
    unint64_t v13 = (long long *)this;
    long long v11 = (uint64_t *)v9[8];
    if ((unint64_t)v11 >= v9[9])
    {
      __n128 result = sub_2168C9B80((char **)v9 + 7, a3, &v13);
    }
    else
    {
      uint64_t v12 = *a3;
      *long long v11 = *a3;
      if ((v12 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *v11 &= 0xFFFFFFFFFFFFFFF8;
      }
      v11[1] = (uint64_t)this;
      __n128 result = (char *)(v11 + 2);
    }
    _OWORD v10[8] = (uint64_t)result;
  }
  return result;
}

uint64_t *sub_2168C9948(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  unint64_t v6 = (uint64_t **)sub_21677B220((uint64_t)a1, &v11, a2);
  unint64_t v7 = *v6;
  if (!*v6)
  {
    __n128 v8 = v6;
    sub_2168C99F4((uint64_t)a1, a4, (uint64_t)v10);
    sub_21677B358(a1, v11, v8, v10[0]);
    unint64_t v7 = v10[0];
    v10[0] = 0;
    sub_2168C9A8C((uint64_t)v10, 0);
  }
  return v7;
}

unsigned char *sub_2168C99F4@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unint64_t v6 = operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  __n128 result = v6 + 4;
  __n128 v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    __n128 result = sub_216778F24(result, *(void **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)__n128 result = v9;
  }
  v6[7] = 0;
  _OWORD v6[8] = 0;
  v6[9] = 0;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_2168C9A74(_Unwind_Exception *a1)
{
  sub_2168C9A8C(v1, 0);
  _Unwind_Resume(a1);
}

void sub_2168C9A8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_2168C9AE4((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void sub_2168C9AE4(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 24);
  sub_2168C9B2C(&v2);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

void sub_2168C9B2C(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v3 = (char *)v1[1];
    size_t v4 = **a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *((void *)v3 - 2);
        v3 -= 16;
        uint64_t v5 = v6;
        if ((v6 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
      while (v3 != v2);
      size_t v4 = **a1;
    }
    v1[1] = v2;
    operator delete(v4);
  }
}

char *sub_2168C9B80(char **a1, uint64_t *a2, void *a3)
{
  size_t v4 = *a1;
  uint64_t v5 = (a1[1] - *a1) >> 4;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60) {
    sub_21677CB10();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v10 = a1[2] - v4;
  if (v10 >> 3 > v6) {
    unint64_t v6 = v10 >> 3;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v6;
  }
  unsigned int v26 = a1 + 2;
  if (v11) {
    uint64_t v12 = (char *)sub_216787EE0(v9, v11);
  }
  else {
    uint64_t v12 = 0;
  }
  unint64_t v13 = &v12[16 * v5];
  long long v14 = &v12[16 * v11];
  __n128 v25 = v14;
  uint64_t v15 = *a2;
  *(void *)unint64_t v13 = *a2;
  if ((v15 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)v13 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((void *)v13 + 1) = *a3;
  unsigned int v16 = v13 + 16;
  v24.i64[1] = (uint64_t)(v13 + 16);
  __n128 v18 = *a1;
  unint64_t v17 = a1[1];
  if (v17 == *a1)
  {
    int64x2_t v20 = vdupq_n_s64((unint64_t)v17);
  }
  else
  {
    do
    {
      uint64_t v19 = *((void *)v17 - 2);
      v17 -= 16;
      *((void *)v13 - 2) = v19;
      v13 -= 16;
      *(void *)unint64_t v17 = 0;
      *((void *)v13 + 1) = *((void *)v17 + 1);
    }
    while (v17 != v18);
    int64x2_t v20 = *(int64x2_t *)a1;
    unsigned int v16 = (char *)v24.i64[1];
    long long v14 = v25;
  }
  *a1 = v13;
  a1[1] = v16;
  int64x2_t v24 = v20;
  unint64_t v21 = a1[2];
  a1[2] = v14;
  __n128 v25 = v21;
  uint64_t v23 = v20.i64[0];
  sub_2168C9CB8((uint64_t)&v23);
  return v16;
}

uint64_t sub_2168C9CB8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  while (v3 != v2)
  {
    uint64_t v5 = *(void *)(v3 - 16);
    v3 -= 16;
    uint64_t v4 = v5;
    *(void *)(a1 + 16) = v3;
    if ((v5 & 7) != 0)
    {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      uint64_t v3 = *(void *)(a1 + 16);
    }
  }
  unint64_t v6 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v6);
  }
  return a1;
}

uint64_t sub_2168C9D1C(pxrInternal__aapl__pxrReserved__::JsWriter *a1, const char *a2, uint64_t *a3, const char *a4, uint64_t a5, const char *a6, const char **a7, const char *a8, double *a9)
{
  pxrInternal__aapl__pxrReserved__::JsWriter::BeginObject(a1);
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey((uint64_t **)a1, a2);
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue((uint64_t **)a1, a3);
  sub_2168C9E90((uint64_t **)a1, a4, a5, a6, a7, a8, a9);

  return pxrInternal__aapl__pxrReserved__::JsWriter::EndObject(a1);
}

uint64_t sub_2168C9DCC(pxrInternal__aapl__pxrReserved__::JsWriter *a1, const char *a2, uint64_t *a3, const char *a4, uint64_t a5, const char *a6, const char **a7, const char *a8, double *a9, const char *a10, double *a11)
{
  pxrInternal__aapl__pxrReserved__::JsWriter::BeginObject(a1);
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey((uint64_t **)a1, a2);
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue((uint64_t **)a1, a3);
  sub_2168C9F70((uint64_t **)a1, a4, a5, a6, a7, a8, a9, a10, a11);

  return pxrInternal__aapl__pxrReserved__::JsWriter::EndObject(a1);
}

uint64_t sub_2168C9E90(uint64_t **a1, const char *a2, uint64_t a3, const char *a4, const char **a5, const char *a6, double *a7)
{
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey(a1, a2);
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue((pxrInternal__aapl__pxrReserved__::JsWriter *)a1);

  return sub_2168C9F08(a1, a4, a5, a6, a7);
}

uint64_t sub_2168C9F08(uint64_t **a1, const char *a2, const char **a3, const char *a4, double *a5)
{
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey(a1, a2);
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue(a1, *a3);
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey(a1, a4);
  double v9 = *a5;

  return pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue((pxrInternal__aapl__pxrReserved__::JsWriter *)a1, v9);
}

uint64_t sub_2168C9F70(uint64_t **a1, const char *a2, uint64_t a3, const char *a4, const char **a5, const char *a6, double *a7, const char *a8, double *a9)
{
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey(a1, a2);
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue((pxrInternal__aapl__pxrReserved__::JsWriter *)a1);

  return sub_2168CA000(a1, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_2168CA000(uint64_t **a1, const char *a2, const char **a3, const char *a4, double *a5, const char *a6, double *a7)
{
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey(a1, a2);
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue(a1, *a3);

  return sub_2168CA078(a1, a4, a5, a6, a7);
}

uint64_t sub_2168CA078(uint64_t **a1, const char *a2, double *a3, const char *a4, double *a5)
{
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey(a1, a2);
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue((pxrInternal__aapl__pxrReserved__::JsWriter *)a1, *a3);
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey(a1, a4);
  double v9 = *a5;

  return pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue((pxrInternal__aapl__pxrReserved__::JsWriter *)a1, v9);
}

void sub_2168CA0E0(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_2168CA0E0(a1, *a2);
    sub_2168CA0E0(a1, a2[1]);
    sub_2168C9AE4((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void *sub_2168CA13C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *sub_2168CA1C0(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  unint64_t v6 = (uint64_t **)sub_21677B220((uint64_t)a1, &v11, a2);
  unint64_t v7 = *v6;
  if (!*v6)
  {
    __n128 v8 = v6;
    sub_2168CA26C((uint64_t)a1, a4, (uint64_t)v10);
    sub_21677B358(a1, v11, v8, v10[0]);
    unint64_t v7 = v10[0];
    v10[0] = 0;
    sub_2168CA370((uint64_t)v10, 0);
  }
  return v7;
}

char *sub_2168CA26C@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unint64_t v6 = (char *)operator new(0xD0uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  __n128 result = sub_2168CA2D8(v6 + 32, *a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_2168CA2C0(_Unwind_Exception *a1)
{
  sub_2168CA370(v1, 0);
  _Unwind_Resume(a1);
}

char *sub_2168CA2D8(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v3;
  }
  *(_OWORD *)(__dst + 24) = 0u;
  *((void *)__dst + 21) = 0;
  *(_OWORD *)(__dst + 136) = 0u;
  *(_OWORD *)(__dst + 152) = 0u;
  *(_OWORD *)(__dst + 104) = 0u;
  *(_OWORD *)(__dst + 120) = 0u;
  *(_OWORD *)(__dst + 72) = 0u;
  *(_OWORD *)(__dst + 88) = 0u;
  *(_OWORD *)(__dst + 40) = 0u;
  *(_OWORD *)(__dst + 56) = 0u;
  pxrInternal__aapl__pxrReserved__::TraceEventList::TraceEventList((pxrInternal__aapl__pxrReserved__::TraceEventList *)(__dst + 24));
  *((void *)__dst + 19) = 0;
  *((void *)__dst + 20) = 0;
  *((void *)__dst + 21) = 0;
  return __dst;
}

void sub_2168CA354(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_2168CA370(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_2168CA3C8((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void sub_2168CA3C8(uint64_t a1)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::TraceEventContainer *)(a1 + 24);
  long long v3 = *(void **)(a1 + 152);
  if (v3)
  {
    *(void *)(a1 + 160) = v3;
    operator delete(v3);
  }
  sub_2168CA43C((void *)(a1 + 96));
  sub_2168CA57C((uint64_t *)(a1 + 56));
  pxrInternal__aapl__pxrReserved__::TraceEventContainer::~TraceEventContainer(v2);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v4 = *(void **)a1;
    operator delete(v4);
  }
}

uint64_t sub_2168CA43C(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  long long v3 = (void **)a1[2];
  if (v3 == v2)
  {
    uint64_t v4 = a1 + 5;
    long long v3 = (void **)a1[1];
  }
  else
  {
    uint64_t v4 = a1 + 5;
    unint64_t v5 = a1[4];
    unint64_t v6 = &v2[v5 >> 9];
    unint64_t v7 = (void **)((char *)*v6 + 8 * (v5 & 0x1FF));
    uint64_t v8 = *(uint64_t *)((char *)v2 + (((a1[5] + v5) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((a1[5] + v5) & 0x1FF);
    if (v7 != (void **)v8)
    {
      do
      {
        double v9 = *v7;
        *unint64_t v7 = 0;
        if (v9) {
          operator delete[](v9);
        }
        if ((char *)++v7 - (unsigned char *)*v6 == 4096)
        {
          uint64_t v10 = (void **)v6[1];
          ++v6;
          unint64_t v7 = v10;
        }
      }
      while (v7 != (void **)v8);
      uint64_t v2 = (void **)a1[1];
      long long v3 = (void **)a1[2];
    }
  }
  *uint64_t v4 = 0;
  unint64_t v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      long long v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v12 = v11 >> 3;
  if (v12 == 1)
  {
    uint64_t v13 = 256;
  }
  else
  {
    if (v12 != 2) {
      goto LABEL_18;
    }
    uint64_t v13 = 512;
  }
  a1[4] = v13;
LABEL_18:
  while (v2 != v3)
  {
    long long v14 = *v2++;
    operator delete(v14);
  }

  return sub_21683347C((uint64_t)a1);
}

void sub_2168CA57C(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    long long v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        unint64_t v5 = (uint64_t *)v3[1];
        sub_2168CA5F0((uint64_t)(v3 + 2));
        operator delete(v3);
        long long v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

uint64_t sub_2168CA5F0(uint64_t a1)
{
  sub_2168CA62C(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_2168CA62C(int a1, void *__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      long long v3 = (void *)*v2;
      uint64_t v4 = v2[5];
      if ((v4 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_2168CA67C(uint64_t a1, uint64_t *a2)
{
  if (a2)
  {
    sub_2168CA43C(a2 + 9);
    sub_2168CA57C(a2 + 4);
    pxrInternal__aapl__pxrReserved__::TraceEventContainer::~TraceEventContainer((pxrInternal__aapl__pxrReserved__::TraceEventContainer *)a2);
    operator delete(v3);
  }
}

void sub_2168CA6CC(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_2168CA6CC(a1, *a2);
    sub_2168CA6CC(a1, a2[1]);
    sub_2168CA3C8((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_2168CA728(void ***a1, void **a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    sub_2168CA77C((uint64_t)v2, v2[1]);
    free(v2);
  }
}

void sub_2168CA77C(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_2168CA77C(a1, *a2);
    sub_2168CA77C(a1, a2[1]);
    sub_2168CA7D8((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_2168CA7D8(uint64_t a1)
{
  uint64_t v4 = *(uint64_t **)(a1 + 24);
  uint64_t v2 = (void *)(a1 + 24);
  long long v3 = v4;
  *uint64_t v2 = 0;
  if (v4) {
    sub_2168CA67C((uint64_t)v2, v3);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    unint64_t v5 = *(void **)a1;
    operator delete(v5);
  }
}

pxrInternal__aapl__pxrReserved__::TraceAggregateTree *pxrInternal__aapl__pxrReserved__::TraceAggregateTree::TraceAggregateTree(pxrInternal__aapl__pxrReserved__::TraceAggregateTree *this)
{
  *((_DWORD *)this + 2) = 1;
  *((_OWORD *)this + 1) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((void *)this + 4) = (char *)this + 40;
  *(void *)this = &unk_26C74CE18;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 1065353216;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_DWORD *)this + 32) = 1065353216;
  pxrInternal__aapl__pxrReserved__::TraceAggregateTree::Clear(this);
  return this;
}

void sub_2168CA8D4(_Unwind_Exception *a1)
{
  sub_2168C08A0(v5);
  sub_2168C08A0(v4);
  sub_2168CB05C(v3, *(void **)(v1 + 40));
  sub_2168BD6C4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(v1 + 24));
  sub_216859A88(v2, v7);
  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase((pxrInternal__aapl__pxrReserved__::TfRefBase *)v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TraceAggregateTree::Clear(pxrInternal__aapl__pxrReserved__::TraceAggregateTree *this)
{
  sub_2168CA9A8(&v4);
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*((void *)this + 3);
  *((void *)this + 3) = v4;
  uint64_t v4 = 0;
  sub_2168BD378(this + 24, v2);
  sub_2168BD6C4(&v4);
  uint64_t v3 = (void *)*((void *)this + 5);
  this = (pxrInternal__aapl__pxrReserved__::TraceAggregateTree *)((char *)this + 40);
  sub_2168CB05C((uint64_t)this - 8, v3);
  *((void *)this - 1) = this;
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  sub_2168CB0C8((uint64_t)this + 16);
  sub_2168CB0C8((uint64_t)this + 56);
  *((_DWORD *)this + 24) = 0;
}

void sub_2168CA990(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168BD6C4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  _Unwind_Resume(a1);
}

void sub_2168CA9A8(void *a1@<X8>)
{
  char v3 = 0;
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&v2, "root");
  sub_2168CAD20(&v3, &v2, 0, 0, 1, a1);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceAggregateTree::GetCounterIndex(pxrInternal__aapl__pxrReserved__::TraceAggregateTree *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v2 = sub_2168CB120((void *)this + 12, a2);
  if (v2) {
    return *((unsigned int *)v2 + 6);
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceAggregateTree::AddCounter(pxrInternal__aapl__pxrReserved__::TraceAggregateTree *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, int a3, double a4)
{
  if ((a3 & 0x80000000) == 0
    || (unint64_t v12 = "trace/aggregateTree.cpp",
        uint64_t v13 = "AddCounter",
        uint64_t v14 = 63,
        uint64_t v15 = "BOOL pxrInternal__aapl__pxrReserved__::TraceAggregateTree::AddCounter(const TfToken &, int, double)",
        char v16 = 0,
        char v10 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v12, "index >= 0", 0),
        uint64_t result = 0,
        (v10 & 1) != 0))
  {
    if (!sub_2168CB1F4((void *)this + 7, a2)
      || (unint64_t v12 = "trace/aggregateTree.cpp",
          uint64_t v13 = "AddCounter",
          uint64_t v14 = 68,
          uint64_t v15 = "BOOL pxrInternal__aapl__pxrReserved__::TraceAggregateTree::AddCounter(const TfToken &, int, double)",
          char v16 = 0,
          char v11 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v12, "_counters.find(key) == _counters.end()", 0), result = 0, (v11 & 1) != 0))
    {
      uint64_t v8 = (uint64_t *)*((void *)this + 14);
      if (v8)
      {
        while (1)
        {
          if (*((_DWORD *)v8 + 6) == a3)
          {
            unint64_t v12 = "trace/aggregateTree.cpp";
            uint64_t v13 = "AddCounter";
            uint64_t v14 = 74;
            uint64_t v15 = "BOOL pxrInternal__aapl__pxrReserved__::TraceAggregateTree::AddCounter(const TfToken &, int, double)";
            char v16 = 0;
            if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v12, "it.second != index", 0) & 1) == 0) {
              return 0;
            }
          }
          uint64_t v8 = (uint64_t *)*v8;
          if (!v8) {
            goto LABEL_9;
          }
        }
      }
      else
      {
LABEL_9:
        unint64_t v12 = (char *)a2;
        *((double *)sub_2168CB2C8((uint64_t)this + 56, a2, (uint64_t)&unk_2174BFD90, (uint64_t **)&v12) + 3) = a4;
        unint64_t v12 = (char *)a2;
        *((_DWORD *)sub_2168CB594((uint64_t)this + 96, a2, (uint64_t)&unk_2174BFD90, (uint64_t **)&v12) + 6) = a3;
        return 1;
      }
    }
  }
  return result;
}

void sub_2168CAC2C(uint64_t a1)
{
  *(void *)a1 = &unk_26C74CE18;
  sub_2168C08A0(a1 + 96);
  sub_2168C08A0(a1 + 56);
  sub_2168CB05C(a1 + 32, *(void **)(a1 + 40));
  sub_2168BD6C4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 24));
  sub_216859A88((uint64_t *)(a1 + 16), v2);

  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase((pxrInternal__aapl__pxrReserved__::TfRefBase *)a1);
}

void sub_2168CACA4(uint64_t a1)
{
  *(void *)a1 = &unk_26C74CE18;
  sub_2168C08A0(a1 + 96);
  sub_2168C08A0(a1 + 56);
  sub_2168CB05C(a1 + 32, *(void **)(a1 + 40));
  sub_2168BD6C4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 24));
  sub_216859A88((uint64_t *)(a1 + 16), v2);
  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase((pxrInternal__aapl__pxrReserved__::TfRefBase *)a1);

  operator delete(v3);
}

void sub_2168CAD20(unsigned char *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, void *a6@<X8>)
{
  unint64_t v12 = operator new(0xC0uLL);
  sub_2168CADA8((uint64_t)v12, a1, a2, a3, a4, a5);
  *a6 = v12;
}

void sub_2168CAD94(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

double sub_2168CADA8(uint64_t a1, unsigned char *a2, uint64_t *a3, uint64_t a4, int a5, int a6)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_26C74CE70;
  *(unsigned char *)(a1 + 24) = *a2;
  uint64_t v6 = *a3;
  *(void *)(a1 + 32) = *a3;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 32) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(a1 + 40) = a4;
  *(void *)(a1 + 48) = a4;
  *(_DWORD *)(a1 + 56) = a5;
  *(_DWORD *)(a1 + 60) = a6;
  *(_DWORD *)(a1 + 64) = a5;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = a4;
  double result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(void *)(a1 + 176) = 0;
  *(unsigned char *)(a1 + 184) &= 0xF0u;
  return result;
}

void sub_2168CAE40(uint64_t a1)
{
  sub_2168CAF6C(a1);

  operator delete(v1);
}

void sub_2168CAE68(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_2168C08A0(v3);
    operator delete(v4);
  }
}

void sub_2168CAEA8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_216850320(v3);
    operator delete(v4);
  }
}

void sub_2168CAEE8(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)**a1;
  if (v2)
  {
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        uint64_t v4 = sub_2168BD6C4(v4 - 1);
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_2168CAF6C(uint64_t a1)
{
  *(void *)a1 = &unk_26C74CE70;
  sub_2168CAEA8((uint64_t *)(a1 + 176), 0);
  uint64_t v2 = *(void **)(a1 + 152);
  if (v2)
  {
    *(void *)(a1 + 160) = v2;
    operator delete(v2);
  }
  sub_2168CAE68((uint64_t *)(a1 + 144), 0);
  uint64_t v6 = (void **)(a1 + 120);
  sub_2168C9B2C(&v6);
  uint64_t v6 = (void **)(a1 + 96);
  sub_2168CAEE8(&v6);
  uint64_t v4 = *(atomic_uint **)(a1 + 80);
  if (v4 && atomic_fetch_add_explicit(v4 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *(void *)(a1 + 32);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216859A88((uint64_t *)(a1 + 16), v3);
  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase((pxrInternal__aapl__pxrReserved__::TfRefBase *)a1);
}

void sub_2168CB05C(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_2168CB05C(a1, *a2);
    sub_2168CB05C(a1, a2[1]);
    uint64_t v4 = a2[4];
    if ((v4 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    operator delete(a2);
  }
}

void sub_2168CB0C8(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    sub_2168C08DC(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void *sub_2168CB120(void *a1, void *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v4 = bswap64(0x9E3779B97F4A7C55 * v3);
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v2);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = v4;
    if (v4 >= *(void *)&v2) {
      unint64_t v6 = v4 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v6 = v4 & (*(void *)&v2 - 1);
  }
  unint64_t v7 = *(void **)(*a1 + 8 * v6);
  if (!v7) {
    return 0;
  }
  double result = (void *)*v7;
  if (*v7)
  {
    do
    {
      unint64_t v9 = result[1];
      if (v4 == v9)
      {
        if ((result[2] & 0xFFFFFFFFFFFFFFF8) == v3) {
          return result;
        }
      }
      else
      {
        if (v5.u32[0] > 1uLL)
        {
          if (v9 >= *(void *)&v2) {
            v9 %= *(void *)&v2;
          }
        }
        else
        {
          v9 &= *(void *)&v2 - 1;
        }
        if (v9 != v6) {
          return 0;
        }
      }
      double result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void *sub_2168CB1F4(void *a1, void *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v4 = bswap64(0x9E3779B97F4A7C55 * v3);
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v2);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = v4;
    if (v4 >= *(void *)&v2) {
      unint64_t v6 = v4 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v6 = v4 & (*(void *)&v2 - 1);
  }
  unint64_t v7 = *(void **)(*a1 + 8 * v6);
  if (!v7) {
    return 0;
  }
  double result = (void *)*v7;
  if (*v7)
  {
    do
    {
      unint64_t v9 = result[1];
      if (v9 == v4)
      {
        if ((result[2] & 0xFFFFFFFFFFFFFFF8) == v3) {
          return result;
        }
      }
      else
      {
        if (v5.u32[0] > 1uLL)
        {
          if (v9 >= *(void *)&v2) {
            v9 %= *(void *)&v2;
          }
        }
        else
        {
          v9 &= *(void *)&v2 - 1;
        }
        if (v9 != v6) {
          return 0;
        }
      }
      double result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void *sub_2168CB2C8(uint64_t a1, void *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v6 = *a2 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = bswap64(0x9E3779B97F4A7C55 * v6);
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = v7;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = v7 & (v8 - 1);
    }
    char v10 = *(void **)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      double result = (void *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = result[1];
          if (v12 == v7)
          {
            if ((result[2] & 0xFFFFFFFFFFFFFFF8) == v6) {
              return result;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          double result = (void *)*result;
        }
        while (result);
      }
    }
  }
  sub_2168CB514(a1, v7, a4, (uint64_t)&v21);
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_21678A04C(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v4);
  if (v19)
  {
    *unint64_t v21 = *v19;
    *uint64_t v19 = v21;
  }
  else
  {
    *unint64_t v21 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v21;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*v21)
    {
      unint64_t v20 = *(void *)(*v21 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v20 >= v8) {
          v20 %= v8;
        }
      }
      else
      {
        v20 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v20) = v21;
    }
  }
  double result = v21;
  ++*(void *)(a1 + 24);
  return result;
}

void sub_2168CB4FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168BE6D4((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *sub_2168CB514@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  double result = operator new(0x20uLL);
  *(void *)a4 = result;
  *(void *)(a4 + 8) = v7;
  *double result = 0;
  result[1] = a2;
  uint64_t v9 = **a3;
  result[2] = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    result[2] &= 0xFFFFFFFFFFFFFFF8;
  }
  result[3] = 0;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void *sub_2168CB594(uint64_t a1, void *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v6 = *a2 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = bswap64(0x9E3779B97F4A7C55 * v6);
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = v7;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = v7 & (v8 - 1);
    }
    char v10 = *(void **)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      double result = (void *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = result[1];
          if (v12 == v7)
          {
            if ((result[2] & 0xFFFFFFFFFFFFFFF8) == v6) {
              return result;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          double result = (void *)*result;
        }
        while (result);
      }
    }
  }
  sub_2168CB7E0(a1, v7, a4, (uint64_t)&v21);
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_21678A04C(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v4);
  if (v19)
  {
    *unint64_t v21 = *v19;
    *uint64_t v19 = v21;
  }
  else
  {
    *unint64_t v21 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v21;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*v21)
    {
      unint64_t v20 = *(void *)(*v21 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v20 >= v8) {
          v20 %= v8;
        }
      }
      else
      {
        v20 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v20) = v21;
    }
  }
  double result = v21;
  ++*(void *)(a1 + 24);
  return result;
}

void sub_2168CB7C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168BE6D4((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *sub_2168CB7E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  double result = operator new(0x20uLL);
  *(void *)a4 = result;
  *(void *)(a4 + 8) = v7;
  *double result = 0;
  result[1] = a2;
  uint64_t v9 = **a3;
  result[2] = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    result[2] &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_DWORD *)result + 6) = 0;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void *pxrInternal__aapl__pxrReserved__::TraceAggregateNode::Append@<X0>(pxrInternal__aapl__pxrReserved__::TfToken *a1@<X2>, uint64_t *a2@<X0>, char a3@<W1>, unint64_t a4@<X3>, int a5@<W4>, int a6@<W5>, uint64_t *a7@<X8>)
{
  char v29 = a3;
  pxrInternal__aapl__pxrReserved__::TraceAggregateNode::GetChild((pxrInternal__aapl__pxrReserved__::TraceAggregateNode *)a2, a1, a7);
  if (*a7)
  {
    *(unsigned char *)(sub_2168CBA70(a7) + 24) = a3;
    uint64_t v14 = sub_2168CBA70(a7);
    *(void *)(v14 + 40) += a4;
    uint64_t v15 = sub_2168CBA70(a7);
    *(_DWORD *)(v15 + 56) += a5;
    uint64_t v16 = sub_2168CBA70(a7);
    *(_DWORD *)(v16 + 64) += a5;
    uint64_t v17 = sub_2168CBA70(a7);
    *(_DWORD *)(v17 + 60) += a6;
    uint64_t v18 = sub_2168CBA70(a7);
    *(void *)(v18 + 48) += a4;
    double result = (void *)sub_2168CBA70(a7);
    result[11] += a4;
  }
  else
  {
    sub_2168CAD20(&v29, (uint64_t *)a1, a4, a5, a6, &v28);
    unint64_t v20 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*a7;
    *a7 = (uint64_t)v28;
    char v28 = 0;
    sub_2168BD378((int)a7, v20);
    sub_2168BD6C4(&v28);
    sub_2168CBAFC(a2 + 12, a7);
    uint64_t v22 = a2[12];
    uint64_t v21 = a2[13];
    double result = sub_2168CBC18(a2 + 15, (unint64_t *)a1);
    *double result = ((v21 - v22) >> 3) - 1;
  }
  unint64_t v23 = a2[6];
  BOOL v24 = v23 >= a4;
  unint64_t v25 = v23 - a4;
  if (!v24) {
    unint64_t v25 = 0;
  }
  a2[6] = v25;
  unint64_t v26 = a2[11];
  BOOL v24 = v26 >= a4;
  unint64_t v27 = v26 - a4;
  if (!v24) {
    unint64_t v27 = 0;
  }
  a2[11] = v27;
  return result;
}

void sub_2168CB9DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a9)
{
  sub_2168BD6C4(&a9);
  sub_2168BD6C4(v9);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::TraceAggregateNode::GetChild@<X0>(pxrInternal__aapl__pxrReserved__::TraceAggregateNode *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t *a3@<X8>)
{
  double result = sub_2168CC1D8((void *)this + 15, a2);
  if (*((void **)this + 16) == result)
  {
    *a3 = 0;
  }
  else
  {
    *a3 = *(void *)(*((void *)this + 12) + 8 * result[1]);
    return (void *)sub_2168BD80C(a3);
  }
  return result;
}

uint64_t sub_2168CBA70(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    int8x8_t v2 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/refPtr.h", 47);
    v3[0] = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/refPtr.h", (uint64_t)v2, 0x2Fu);
    v3[1] = "operator->";
    v3[2] = 953;
    v3[3] = "T *pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::TraceAggregateNode>::operato"
            "r->() const [U = pxrInternal__aapl__pxrReserved__::TraceAggregateNode]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError((uint64_t)v3, (pxrInternal__aapl__pxrReserved__ *)(0x800000021745500DLL & 0x7FFFFFFFFFFFFFFFLL));
  }
  return result;
}

uint64_t sub_2168CBAFC(uint64_t *a1, uint64_t *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(uint64_t **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 3;
    if ((unint64_t)(v10 + 1) >> 61) {
      sub_21677CB10();
    }
    uint64_t v11 = v5 - *a1;
    uint64_t v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v19 = v4;
    if (v13) {
      uint64_t v14 = (uint64_t *)sub_21677CB28(v4, v13);
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v15 = v14;
    uint64_t v16 = &v14[v10];
    uint64_t v17 = v16;
    uint64_t v18 = &v14[v13];
    *uint64_t v16 = *a2;
    sub_2168BD80C(&v14[v10]);
    ++v17;
    sub_2168CD37C(a1, &v15);
    uint64_t v9 = (uint64_t *)a1[1];
    uint64_t result = sub_2168CD48C((uint64_t)&v15);
  }
  else
  {
    *uint64_t v7 = *a2;
    uint64_t result = sub_2168BD80C(v7);
    uint64_t v9 = v7 + 1;
    a1[1] = (uint64_t)(v7 + 1);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_2168CBBF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void *sub_2168CBC18(uint64_t *a1, unint64_t *a2)
{
  unint64_t v2 = *a2;
  v6[0] = v2;
  if ((v2 & 7) != 0)
  {
    unint64_t v3 = (atomic_uint *)(v2 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v3, 2u, memory_order_relaxed) & 1) == 0) {
      v6[0] = (unint64_t)v3;
    }
  }
  v6[1] = 0;
  uint64_t v4 = sub_2168CD4DC(a1, v6);
  if ((v6[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return v4 + 1;
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **pxrInternal__aapl__pxrReserved__::TraceAggregateNode::Append(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4 = *(void *)(sub_2168CBA70(a2) + 32);
  v38[0] = v4;
  if ((v4 & 7) != 0)
  {
    unint64_t v5 = (atomic_uint *)(v4 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v5, 2u, memory_order_relaxed) & 1) == 0) {
      v38[0] = (unint64_t)v5;
    }
  }
  pxrInternal__aapl__pxrReserved__::TraceAggregateNode::GetChild((pxrInternal__aapl__pxrReserved__::TraceAggregateNode *)a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)v38, (uint64_t *)&v37);
  if ((v38[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v38[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v37)
  {
    uint64_t v6 = sub_2168CBA70(a2);
    *(unsigned char *)(sub_2168CBA70((uint64_t *)&v37) + 24) = *(unsigned char *)(v6 + 24);
    uint64_t v7 = *(void *)(sub_2168CBA70(a2) + 40);
    uint64_t v8 = sub_2168CBA70((uint64_t *)&v37);
    *(void *)(v8 + 40) += v7;
    LODWORD(v7) = *(_DWORD *)(sub_2168CBA70(a2) + 56);
    uint64_t v9 = sub_2168CBA70((uint64_t *)&v37);
    *(_DWORD *)(v9 + 56) += v7;
    LODWORD(v7) = *(_DWORD *)(sub_2168CBA70(a2) + 56);
    uint64_t v10 = sub_2168CBA70((uint64_t *)&v37);
    *(_DWORD *)(v10 + 64) += v7;
    LODWORD(v7) = *(_DWORD *)(sub_2168CBA70(a2) + 60);
    uint64_t v11 = sub_2168CBA70((uint64_t *)&v37);
    *(_DWORD *)(v11 + 60) += v7;
    uint64_t v12 = *(void *)(sub_2168CBA70(a2) + 40);
    uint64_t v13 = sub_2168CBA70((uint64_t *)&v37);
    *(void *)(v13 + 48) += v12;
    uint64_t v14 = *(void *)(sub_2168CBA70(a2) + 40);
    uint64_t v15 = sub_2168CBA70((uint64_t *)&v37);
    *(void *)(v15 + 88) += v14;
    uint64_t v16 = sub_2168CBA70(a2);
    uint64_t v17 = *(void *)(v16 + 152);
    for (uint64_t i = *(void *)(v16 + 160); v17 != i; v17 += 24)
    {
      uint64_t v19 = sub_2168CBA70((uint64_t *)&v37);
      v38[1] = 0;
      v38[2] = 0;
      LODWORD(v38[0]) = *(_DWORD *)v17;
      unint64_t v20 = sub_2168CDC7C((uint64_t *)(v19 + 152), (int *)v38);
      *(float64x2_t *)(v20 + 2) = vaddq_f64(*(float64x2_t *)(v17 + 8), *(float64x2_t *)(v20 + 2));
    }
    uint64_t v21 = sub_2168CBA70(a2);
    uint64_t v22 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter ***)(v21 + 96);
    unint64_t v23 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter ***)(v21 + 104);
    while (v22 != v23)
    {
      uint64_t v24 = sub_2168CBA70((uint64_t *)&v37);
      long long v36 = *v22;
      sub_2168BD80C((uint64_t *)&v36);
      pxrInternal__aapl__pxrReserved__::TraceAggregateNode::Append(v24, &v36);
      sub_2168BD6C4(&v36);
      ++v22;
    }
  }
  else
  {
    sub_2168CBAFC(a1 + 12, a2);
    uint64_t v26 = a1[12];
    uint64_t v25 = a1[13];
    unint64_t v27 = *(void *)(sub_2168CBA70(a2) + 32);
    v38[0] = v27;
    if ((v27 & 7) != 0)
    {
      char v28 = (atomic_uint *)(v27 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v28, 2u, memory_order_relaxed) & 1) == 0) {
        v38[0] = (unint64_t)v28;
      }
    }
    *sub_2168CBC18(a1 + 15, v38) = ((v25 - v26) >> 3) - 1;
    if ((v38[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v38[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  unint64_t v29 = a1[6];
  if (v29 >= *(void *)(sub_2168CBA70(a2) + 40))
  {
    uint64_t v31 = a1[6];
    uint64_t v30 = v31 - *(void *)(sub_2168CBA70(a2) + 40);
  }
  else
  {
    uint64_t v30 = 0;
  }
  a1[6] = v30;
  unint64_t v32 = a1[11];
  if (v32 >= *(void *)(sub_2168CBA70(a2) + 40))
  {
    uint64_t v34 = a1[11];
    uint64_t v33 = v34 - *(void *)(sub_2168CBA70(a2) + 40);
  }
  else
  {
    uint64_t v33 = 0;
  }
  a1[11] = v33;
  return sub_2168BD6C4(&v37);
}

void sub_2168CBFA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a11, uint64_t a12)
{
  if ((a12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_2168BD6C4(&a11);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceAggregateNode::GetExclusiveTime(pxrInternal__aapl__pxrReserved__::TraceAggregateNode *this, int a2)
{
  uint64_t v2 = 48;
  if (a2) {
    uint64_t v2 = 88;
  }
  return *(void *)((char *)this + v2);
}

double pxrInternal__aapl__pxrReserved__::TraceAggregateNode::AppendInclusiveCounterValue(pxrInternal__aapl__pxrReserved__::TraceAggregateNode *this, int a2, double a3)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  int v6 = a2;
  unint64_t v4 = (double *)sub_2168CDC7C((uint64_t *)this + 19, &v6);
  double result = v4[1] + a3;
  v4[1] = result;
  return result;
}

double pxrInternal__aapl__pxrReserved__::TraceAggregateNode::GetInclusiveCounterValue(pxrInternal__aapl__pxrReserved__::TraceAggregateNode *this, int a2)
{
  int v5 = a2;
  unint64_t v3 = (double *)sub_2168CC0C8((void *)this + 19, &v5);
  if (*((double **)this + 20) == v3) {
    return 0.0;
  }
  else {
    return v3[1];
  }
}

_DWORD *sub_2168CC0C8(void *a1, int *a2)
{
  unint64_t v3 = (void *)a1[3];
  if (v3)
  {
    unint64_t v4 = sub_2168CE1D8(v3, a2);
    if (v4) {
      return (_DWORD *)(*a1 + 24 * v4[3]);
    }
    else {
      return (_DWORD *)a1[1];
    }
  }
  else
  {
    double result = (_DWORD *)*a1;
    int v6 = (_DWORD *)a1[1];
    if ((_DWORD *)*a1 != v6)
    {
      while (*result != *a2)
      {
        result += 6;
        if (result == v6) {
          return (_DWORD *)a1[1];
        }
      }
    }
  }
  return result;
}

double pxrInternal__aapl__pxrReserved__::TraceAggregateNode::AppendExclusiveCounterValue(pxrInternal__aapl__pxrReserved__::TraceAggregateNode *this, int a2, double a3)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  int v6 = a2;
  unint64_t v4 = (double *)sub_2168CDC7C((uint64_t *)this + 19, &v6);
  double result = v4[2] + a3;
  void v4[2] = result;
  return result;
}

double pxrInternal__aapl__pxrReserved__::TraceAggregateNode::GetExclusiveCounterValue(pxrInternal__aapl__pxrReserved__::TraceAggregateNode *this, int a2)
{
  int v5 = a2;
  unint64_t v3 = (double *)sub_2168CC0C8((void *)this + 19, &v5);
  if (*((double **)this + 20) == v3) {
    return 0.0;
  }
  else {
    return v3[2];
  }
}

void *sub_2168CC1D8(void *a1, void *a2)
{
  unint64_t v3 = (void *)a1[3];
  if (v3)
  {
    unint64_t v4 = sub_2168CB1F4(v3, a2);
    if (v4) {
      return (void *)(*a1 + 16 * v4[3]);
    }
    else {
      return (void *)a1[1];
    }
  }
  else
  {
    double result = (void *)*a1;
    int v6 = (void *)a1[1];
    if ((void *)*a1 != v6)
    {
      while ((*result & 0xFFFFFFFFFFFFFFF8) != (*a2 & 0xFFFFFFFFFFFFFFF8))
      {
        result += 2;
        if (result == v6) {
          return (void *)a1[1];
        }
      }
    }
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::TraceAggregateNode::AdjustForOverheadAndNoise(void *this, unint64_t a2, unint64_t a3, unint64_t *a4)
{
  int v6 = this;
  uint64_t v7 = (uint64_t *)this[12];
  uint64_t v8 = (uint64_t *)this[13];
  unint64_t v23 = v8 - v7;
  if (v8 == v7)
  {
    unint64_t v19 = (v8 - v7) * a2;
    unint64_t v20 = this[5];
    BOOL v21 = v20 >= v19;
    unint64_t v22 = v20 - v19;
    if (v21) {
      unint64_t v14 = v22;
    }
    else {
      unint64_t v14 = 0;
    }
    this[5] = v14;
  }
  else
  {
    do
    {
      uint64_t v10 = (pxrInternal__aapl__pxrReserved__::TraceAggregateNode *)sub_2168CBA70(v7);
      this = (void *)pxrInternal__aapl__pxrReserved__::TraceAggregateNode::AdjustForOverheadAndNoise(v10, a2, a3, &v23);
      ++v7;
    }
    while (v7 != v8);
    uint64_t v11 = (uint64_t *)v6[12];
    uint64_t v12 = (uint64_t *)v6[13];
    unint64_t v13 = v6[5];
    if (v13 >= v23 * a2) {
      unint64_t v14 = v13 - v23 * a2;
    }
    else {
      unint64_t v14 = 0;
    }
    uint64_t v6[5] = v14;
    if (v11 != v12)
    {
      uint64_t v15 = 20 * a3;
      do
      {
        unint64_t v16 = *(void *)(sub_2168CBA70(v11) + 40);
        unint64_t v17 = v15 * *(int *)(sub_2168CBA70(v11) + 56);
        this = (void *)sub_2168CBA70(v11);
        if (v17 >= v16)
        {
          this[6] = 0;
          this = (void *)sub_2168CBA70(v11);
          this[5] = 0;
        }
        else
        {
          unint64_t v18 = v14;
          if (v14 > this[5])
          {
            this = (void *)sub_2168CBA70(v11);
            unint64_t v18 = this[5];
          }
          v14 -= v18;
        }
        ++v11;
      }
      while (v11 != v12);
    }
  }
  v6[6] = v14;
  if (a4) {
    *a4 += v23;
  }
  return this;
}

void pxrInternal__aapl__pxrReserved__::TraceAggregateNode::MarkRecursiveChildren(pxrInternal__aapl__pxrReserved__::TraceAggregateNode *this)
{
  if ((*((unsigned char *)this + 184) & 4) == 0)
  {
    uint64_t v47 = 0;
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    sub_2168CE380(&v45, (uint64_t)this);
    sub_2168CD28C((uint64_t)&v38, &v45, -1);
    sub_2168CCB24(&v47, (uint64_t)&v38);
    uint64_t v1 = v39;
    if (v39 && atomic_fetch_add_explicit((atomic_uint *volatile)v39 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(const char *))(*(void *)v1 + 8))(v1);
    }
    uint64_t v2 = v46;
    if (v46 && atomic_fetch_add_explicit((atomic_uint *volatile)(v46 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    for (uint64_t i = v48; v48 != v47; uint64_t i = v48)
    {
      unint64_t v43 = *(void ***)(i - 24);
      uint64_t v4 = *(void *)(i - 16);
      uint64_t v44 = v4;
      if (v4)
      {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v4 + 8), 1u, memory_order_relaxed);
        uint64_t i = v48;
      }
      unsigned int v5 = *(_DWORD *)(i - 8);
      uint64_t v6 = *(unsigned int *)(i - 4);
      uint64_t v7 = sub_2168BC8B0((uint64_t *)&v43);
      *(unsigned char *)(v7 + 184) |= 8u;
      if (v6)
      {
        if ((int)v6 >= 1)
        {
          uint64_t v8 = 0;
          int v9 = -1 - 1431655765 * ((unint64_t)(v48 - v47) >> 3);
          do
          {
            uint64_t v10 = sub_2168BC8B0((uint64_t *)&v43);
            if ((*(unsigned char *)(sub_2168CBA70((uint64_t *)(*(void *)(v10 + 96) + v8)) + 184) & 8) != 0)
            {
              --*(_DWORD *)(v47 + 24 * v9 + 20);
            }
            else
            {
              uint64_t v11 = sub_2168BC8B0((uint64_t *)&v43);
              sub_2168BD6F4(&v32, (uint64_t *)(*(void *)(v11 + 96) + v8));
              sub_2168CD28C((uint64_t)&v38, &v32, v9);
              sub_2168CCB24(&v47, (uint64_t)&v38);
              uint64_t v12 = v39;
              if (v39
                && atomic_fetch_add_explicit((atomic_uint *volatile)v39 + 2, 0xFFFFFFFF, memory_order_release) == 1)
              {
                (*(void (**)(const char *))(*(void *)v12 + 8))(v12);
              }
              uint64_t v13 = v33;
              if (v33
                && atomic_fetch_add_explicit((atomic_uint *volatile)(v33 + 8), 0xFFFFFFFF, memory_order_release) == 1)
              {
                (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
              }
            }
            v8 += 8;
          }
          while (8 * v6 != v8);
        }
      }
      else
      {
        signed int v14 = v5;
        do
        {
          if (v14 == -1) {
            break;
          }
          uint64_t v15 = v47;
          if (v14 > (int)(-1431655765 * ((unint64_t)(v48 - v47) >> 3)))
          {
            long long v38 = (void **)"trace/aggregateNode.cpp";
            double v39 = "MarkRecursiveChildren";
            uint64_t v40 = 250;
            uint64_t v41 = "void pxrInternal__aapl__pxrReserved__::TraceAggregateNode::MarkRecursiveChildren()";
            char v42 = 0;
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v38, 1, (pxrInternal__aapl__pxrReserved__ *)"Corrupt stack state.");
            uint64_t v15 = v47;
          }
          unint64_t v16 = (uint64_t *)(v15 + 24 * v14);
          uint64_t v36 = *v16;
          uint64_t v17 = v16[1];
          uint64_t v37 = v17;
          if (v17) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v17 + 8), 1u, memory_order_relaxed);
          }
          unint64_t v18 = sub_2168BD290(&v36);
          if (!(v19 & 1 | (unint64_t)v18))
          {
            long long v38 = (void **)"trace/aggregateNode.cpp";
            double v39 = "MarkRecursiveChildren";
            uint64_t v40 = 259;
            uint64_t v41 = "void pxrInternal__aapl__pxrReserved__::TraceAggregateNode::MarkRecursiveChildren()";
            char v42 = 0;
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v38, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stack state.");
          }
          uint64_t v20 = *(void *)(sub_2168BC8B0((uint64_t *)&v43) + 32);
          if ((v20 & 7) != 0
            && (atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
          {
            v20 &= 0xFFFFFFFFFFFFFFF8;
          }
          uint64_t v21 = *(void *)(sub_2168BC8B0(&v36) + 32);
          if ((v21 & 7) != 0
            && (atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
          {
            v21 &= 0xFFFFFFFFFFFFFFF8;
          }
          unint64_t v22 = (atomic_uint *)(v21 & 0xFFFFFFFFFFFFFFF8);
          if ((v21 & 7) != 0) {
            atomic_fetch_add_explicit(v22, 0xFFFFFFFE, memory_order_release);
          }
          unint64_t v23 = (atomic_uint *)(v20 & 0xFFFFFFFFFFFFFFF8);
          if ((v20 & 7) != 0) {
            atomic_fetch_add_explicit(v23, 0xFFFFFFFE, memory_order_release);
          }
          if (v23 == v22)
          {
            uint64_t v24 = sub_2168BC8B0(&v36);
            uint64_t v25 = (void **)v44;
            if (v44)
            {
              if (*(unsigned char *)(sub_216850B68(&v44) + 14)) {
                uint64_t v25 = v43;
              }
              else {
                uint64_t v25 = 0;
              }
            }
            long long v38 = v25;
            sub_2168BD80C((uint64_t *)&v38);
            pxrInternal__aapl__pxrReserved__::TraceAggregateNode::_MergeRecursive(v24, (uint64_t *)&v38);
            sub_2168BD6C4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v38);
            uint64_t v26 = sub_2168BC8B0((uint64_t *)&v43);
            uint64_t v34 = v36;
            uint64_t v35 = v37;
            if (v37) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v37 + 8), 1u, memory_order_relaxed);
            }
            pxrInternal__aapl__pxrReserved__::TraceAggregateNode::_SetAsRecursionMarker(v26, (uint64_t)&v34);
            uint64_t v27 = v35;
            if (v35
              && atomic_fetch_add_explicit((atomic_uint *volatile)(v35 + 8), 0xFFFFFFFF, memory_order_release) == 1)
            {
              (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
            }
          }
          else
          {
            signed int v14 = *(_DWORD *)(v47 + 24 * v14 + 16);
          }
          uint64_t v28 = v37;
          if (v37 && atomic_fetch_add_explicit((atomic_uint *volatile)(v37 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
            (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
          }
        }
        while (v23 != v22);
        if ((v5 & 0x80000000) == 0) {
          --*(_DWORD *)(v47 + 24 * v5 + 20);
        }
        uint64_t v29 = v48;
        uint64_t v30 = *(atomic_uint **)(v48 - 16);
        if (v30 && atomic_fetch_add_explicit(v30 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v30 + 8))(v30);
        }
        uint64_t v48 = v29 - 24;
      }
      uint64_t v31 = v44;
      if (v44)
      {
        if (atomic_fetch_add_explicit((atomic_uint *volatile)(v44 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
          (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
        }
      }
    }
    long long v38 = (void **)&v47;
    sub_2168CE2A4(&v38);
  }
}

void sub_2168CC93C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v26 = a17;
  if (a17 && atomic_fetch_add_explicit((atomic_uint *volatile)(a17 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }
  uint64_t v27 = a24;
  if (a24)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(a24 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
    }
  }
  a16 = (void **)(v24 - 112);
  sub_2168CE2A4(&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_2168CCB24(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(result - 8);
  if (v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_21677CB10();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v16[4] = result;
    uint64_t v13 = (char *)sub_216782ED8(result, v12);
    signed int v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    double v16[3] = &v13[24 * v15];
    *(_OWORD *)signed int v14 = *(_OWORD *)a2;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    v16[2] = v14 + 24;
    sub_2168CE464(a1, v16);
    uint64_t v8 = a1[1];
    uint64_t result = sub_2168CE630((uint64_t)v16);
  }
  else
  {
    *(_OWORD *)unint64_t v7 = *(_OWORD *)a2;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(v7 + 16) = *(void *)(a2 + 16);
    uint64_t v8 = v7 + 24;
    a1[1] = v7 + 24;
  }
  a1[1] = v8;
  return result;
}

void sub_2168CCC38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168CE630((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TraceAggregateNode::_MergeRecursive(uint64_t a1, uint64_t *a2)
{
  while (1)
  {
    uint64_t v3 = a1;
    if ((*(unsigned char *)(a1 + 184) & 2) == 0)
    {
      *(_DWORD *)(a1 + 64) += *(_DWORD *)(sub_2168CBA70(a2) + 64);
      *(void *)(v3 + 88) += *(void *)(sub_2168CBA70(a2) + 88);
      *(unsigned char *)(v3 + 184) |= 4u;
      uint64_t v7 = sub_2168CBA70(a2);
      uint64_t v8 = *(void *)(v7 + 104) - *(void *)(v7 + 96);
      if (!v8) {
        return;
      }
      uint64_t v9 = 0;
      unint64_t v10 = v8 >> 3;
      if (v10 <= 1) {
        uint64_t v11 = 1;
      }
      else {
        uint64_t v11 = v10;
      }
      while (1)
      {
        uint64_t v36 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(*(void *)(sub_2168CBA70(a2) + 96)
                                                                                   + 8 * v9);
        sub_2168BD80C((uint64_t *)&v36);
        if (v36) {
          break;
        }
        uint64_t v37 = (atomic_uint *)"trace/aggregateNode.cpp";
        long long v38 = "_MergeRecursive";
        uint64_t v39 = 339;
        uint64_t v40 = "void pxrInternal__aapl__pxrReserved__::TraceAggregateNode::_MergeRecursive(const TraceAggregateNodeRefPtr &)";
        char v41 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v37, 1, (pxrInternal__aapl__pxrReserved__ *)"NULL child is not allowed.");
LABEL_36:
        sub_2168BD6C4(&v36);
        if (v11 == ++v9) {
          return;
        }
      }
      unint64_t v12 = *(atomic_uint **)(sub_2168CBA70((uint64_t *)&v36) + 32);
      uint64_t v37 = v12;
      if ((v12 & 7) != 0)
      {
        uint64_t v13 = (atomic_uint *)((unint64_t)v12 & 0xFFFFFFFFFFFFFFF8);
        if ((atomic_fetch_add_explicit(v13, 2u, memory_order_relaxed) & 1) == 0) {
          uint64_t v37 = v13;
        }
      }
      pxrInternal__aapl__pxrReserved__::TraceAggregateNode::GetChild((pxrInternal__aapl__pxrReserved__::TraceAggregateNode *)v3, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v37, (uint64_t *)&v35);
      if (v35)
      {
        BOOL v14 = (*(unsigned char *)(sub_2168CBA70((uint64_t *)&v36) + 184) & 2) == 0
           && (*(unsigned char *)(sub_2168CBA70((uint64_t *)&v35) + 184) & 2) == 0;
        if ((*(unsigned char *)(sub_2168CBA70((uint64_t *)&v36) + 184) & 2) != 0) {
          int v26 = 0;
        }
        else {
          int v26 = (*(unsigned __int8 *)(sub_2168CBA70((uint64_t *)&v35) + 184) >> 1) & 1;
        }
        if ((v14 | v26) != 1) {
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v15 = sub_2168CBA70((uint64_t *)&v36);
        uint64_t v16 = *(void *)(sub_2168CBA70((uint64_t *)&v36) + 32);
        uint64_t v33 = v16;
        if ((v16 & 7) != 0)
        {
          uint64_t v17 = (atomic_uint *)(v16 & 0xFFFFFFFFFFFFFFF8);
          if ((atomic_fetch_add_explicit(v17, 2u, memory_order_relaxed) & 1) == 0) {
            uint64_t v33 = (uint64_t)v17;
          }
        }
        uint64_t v18 = *(void *)(sub_2168CBA70((uint64_t *)&v36) + 40);
        uint64_t v19 = sub_2168CBA70((uint64_t *)&v36);
        sub_2168CAD20((unsigned char *)(v15 + 24), &v33, v18, 0, *(_DWORD *)(v19 + 60), &v34);
        uint64_t v21 = v34;
        uint64_t v20 = v35;
        uint64_t v34 = 0;
        uint64_t v35 = v21;
        sub_2168BD378((int)&v35, v20);
        sub_2168BD6C4(&v34);
        if ((v33 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        uint64_t v22 = *(void *)(sub_2168CBA70((uint64_t *)&v36) + 48);
        *(void *)(sub_2168CBA70((uint64_t *)&v35) + 48) = v22;
        *(void *)(sub_2168CBA70((uint64_t *)&v35) + 88) = 0;
        sub_2168CBAFC((uint64_t *)(v3 + 96), (uint64_t *)&v35);
        uint64_t v24 = *(void *)(v3 + 96);
        uint64_t v23 = *(void *)(v3 + 104);
        *sub_2168CBC18((uint64_t *)(v3 + 120), (unint64_t *)&v37) = ((v23 - v24) >> 3) - 1;
        if ((*(unsigned char *)(sub_2168CBA70((uint64_t *)&v36) + 184) & 2) != 0)
        {
          uint64_t v27 = sub_2168CBA70((uint64_t *)&v35);
          uint64_t v28 = sub_2168CBA70((uint64_t *)&v36);
          uint64_t v29 = *(void *)(v28 + 80);
          uint64_t v31 = *(void *)(v28 + 72);
          uint64_t v32 = v29;
          if (v29) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v29 + 8), 1u, memory_order_relaxed);
          }
          pxrInternal__aapl__pxrReserved__::TraceAggregateNode::_SetAsRecursionMarker(v27, (uint64_t)&v31);
          uint64_t v30 = v32;
          if (v32 && atomic_fetch_add_explicit((atomic_uint *volatile)(v32 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
            (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
          }
          goto LABEL_34;
        }
      }
      uint64_t v25 = sub_2168CBA70((uint64_t *)&v35);
      pxrInternal__aapl__pxrReserved__::TraceAggregateNode::_MergeRecursive(v25, &v36);
LABEL_34:
      sub_2168BD6C4(&v35);
      if ((v37 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      goto LABEL_36;
    }
    uint64_t v4 = (uint64_t *)(a1 + 72);
    unint64_t v5 = sub_2168BD290((void *)(a1 + 72));
    if (!(v6 & 1 | (unint64_t)v5)) {
      break;
    }
    a1 = sub_2168BC8B0(v4);
  }
  uint64_t v37 = (atomic_uint *)"trace/aggregateNode.cpp";
  long long v38 = "_MergeRecursive";
  uint64_t v39 = 313;
  uint64_t v40 = "void pxrInternal__aapl__pxrReserved__::TraceAggregateNode::_MergeRecursive(const TraceAggregateNodeRefPtr &)";
  char v41 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v37, 1, (pxrInternal__aapl__pxrReserved__ *)"Marker has no or expired parent.");
}

void sub_2168CD040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, atomic_uint *a11, uint64_t a12, uint64_t a13, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a14, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a15, uint64_t a16)
{
  if (a11 && atomic_fetch_add_explicit(a11 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)a11 + 8))(a11);
  }
  sub_2168BD6C4(&a14);
  if ((a16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_2168BD6C4(&a15);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TraceAggregateNode::_SetAsRecursionMarker(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 184) |= 2u;
  *(void *)(a1 + 72) = *(void *)a2;
  sub_2168CD2FC((atomic_uint **)(a1 + 80), (atomic_uint **)(a2 + 8));
  uint64_t v3 = sub_2168BD290((void *)a2);
  if (!(v4 & 1 | (unint64_t)v3))
  {
    v5[0] = "trace/aggregateNode.cpp";
    v5[1] = "_SetAsRecursionMarker";
    v5[2] = 417;
    void v5[3] = "void pxrInternal__aapl__pxrReserved__::TraceAggregateNode::_SetAsRecursionMarker(TraceAggregateNodePtr)";
    char v6 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"Marker has no or expired parent.");
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceAggregateNode::CalculateInclusiveCounterValues(uint64_t this)
{
  uint64_t v1 = (void *)this;
  uint64_t v2 = *(uint64_t **)(this + 96);
  uint64_t v3 = *(uint64_t **)(this + 104);
  while (v2 != v3)
  {
    char v4 = (pxrInternal__aapl__pxrReserved__::TraceAggregateNode *)sub_2168CBA70(v2);
    this = pxrInternal__aapl__pxrReserved__::TraceAggregateNode::CalculateInclusiveCounterValues(v4);
    ++v2;
  }
  uint64_t v5 = v1[19];
  uint64_t v6 = v1[20];
  uint64_t v7 = v1 + 19;
  while (v5 != v6)
  {
    *(void *)(v5 + 8) = *(void *)(v5 + 16);
    v5 += 24;
  }
  uint64_t v8 = (uint64_t *)v1[12];
  for (uint64_t i = (uint64_t *)v1[13]; v8 != i; ++v8)
  {
    this = sub_2168CBA70(v8);
    uint64_t v10 = *(void *)(this + 152);
    uint64_t v11 = *(void *)(this + 160);
    while (v10 != v11)
    {
      if (*(double *)(v10 + 8) != 0.0)
      {
        uint64_t v13 = 0;
        uint64_t v14 = 0;
        int v12 = *(_DWORD *)v10;
        this = (uint64_t)sub_2168CDC7C(v7, &v12);
        *(double *)(this + 8) = *(double *)(v10 + 8) + *(double *)(this + 8);
      }
      v10 += 24;
    }
  }
  return this;
}

uint64_t sub_2168CD28C(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v4 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 + 8), 1u, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 16) = a3;
  uint64_t v5 = sub_2168BC8B0(a2);
  *(_DWORD *)(a1 + 20) = (*(void *)(v5 + 104) - *(void *)(v5 + 96)) >> 3;
  return a1;
}

void sub_2168CD2E4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 8);
  if (v3) {
    sub_217324248(v3);
  }
  _Unwind_Resume(exception_object);
}

atomic_uint **sub_2168CD2FC(atomic_uint **a1, atomic_uint **a2)
{
  uint64_t v3 = *a1;
  *a1 = *a2;
  if (*a2) {
    atomic_fetch_add_explicit(*a2 + 2, 1u, memory_order_relaxed);
  }
  if (v3 && atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

uint64_t sub_2168CD37C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_2168CD3F4((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_2168CD3F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = 0;
  uint64_t v11 = a7 - 8;
  while (a3 + v10 != a5)
  {
    int v12 = (uint64_t *)(v11 + v10);
    *int v12 = *(void *)(a3 + v10 - 8);
    v10 -= 8;
    sub_2168BD80C(v12);
  }
  return a6;
}

uint64_t sub_2168CD48C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    sub_2168BD6C4((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(i - 8));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_2168CD4DC(uint64_t *a1, unint64_t *a2)
{
  uint64_t v4 = a1[3];
  if (v4)
  {
    uint64_t v5 = (a1[1] - *a1) >> 4;
    unint64_t v6 = *a2;
    if ((*a2 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v6 &= 0xFFFFFFFFFFFFFFF8;
    }
    unint64_t v15 = v6;
    uint64_t v16 = v5;
    uint64_t v7 = sub_2168CD6A4(v4, &v15, (uint64_t *)&v15);
    if ((v15 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if (!v8) {
      return (void *)(*a1 + 16 * v7[3]);
    }
    goto LABEL_14;
  }
  uint64_t result = (void *)*a1;
  uint64_t v10 = (void *)a1[1];
  if ((void *)*a1 != v10)
  {
    while ((*result & 0xFFFFFFFFFFFFFFF8) != (*a2 & 0xFFFFFFFFFFFFFFF8))
    {
      result += 2;
      if (result == v10) {
        goto LABEL_14;
      }
    }
  }
  if (result == v10)
  {
LABEL_14:
    unint64_t v11 = *a2;
    unint64_t v15 = v11;
    if ((v11 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      unint64_t v15 = v11 & 0xFFFFFFFFFFFFFFF8;
      v11 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v12 = a2[1];
    uint64_t v16 = v12;
    uint64_t v13 = (unint64_t *)a1[1];
    if ((unint64_t)v13 >= a1[2])
    {
      uint64_t v14 = sub_2168CD970(a1, (uint64_t *)&v15);
      unint64_t v11 = v15;
    }
    else
    {
      *uint64_t v13 = v11;
      if ((v11 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *v13 &= 0xFFFFFFFFFFFFFFF8;
      }
      v13[1] = v12;
      uint64_t v14 = (uint64_t)(v13 + 2);
    }
    a1[1] = v14;
    if ((v11 & 7) != 0)
    {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      uint64_t v14 = a1[1];
    }
    if ((unint64_t)(v14 - *a1) >= 0x7F1)
    {
      sub_2168CDB58(a1);
      uint64_t v14 = a1[1];
    }
    return (void *)(v14 - 16);
  }
  return result;
}

void sub_2168CD684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if ((a9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void *sub_2168CD6A4(uint64_t a1, void *a2, uint64_t *a3)
{
  unint64_t v5 = *a2 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = bswap64(0x9E3779B97F4A7C55 * v5);
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = v6;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = v6 & (v7 - 1);
    }
    uint64_t v9 = *(void **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t result = (void *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = result[1];
          if (v11 == v6)
          {
            if ((result[2] & 0xFFFFFFFFFFFFFFF8) == v5) {
              return result;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t result = (void *)*result;
        }
        while (result);
      }
    }
  }
  sub_2168CD8F0(a1, v6, a3, (uint64_t)&v20);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_21678A04C(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void **)(*(void *)a1 + 8 * v3);
  if (v18)
  {
    *uint64_t v20 = *v18;
    *uint64_t v18 = v20;
  }
  else
  {
    *uint64_t v20 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v20;
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*v20)
    {
      unint64_t v19 = *(void *)(*v20 + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7) {
          v19 %= v7;
        }
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v19) = v20;
    }
  }
  uint64_t result = v20;
  ++*(void *)(a1 + 24);
  return result;
}

void sub_2168CD8D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168BE6D4((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *sub_2168CD8F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t result = operator new(0x20uLL);
  *(void *)a4 = result;
  *(void *)(a4 + 8) = v7;
  *uint64_t result = 0;
  result[1] = a2;
  uint64_t v9 = *a3;
  result[2] = *a3;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    result[2] &= 0xFFFFFFFFFFFFFFF8;
  }
  result[3] = a3[1];
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

uint64_t sub_2168CD970(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 4;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 3 > v5) {
    unint64_t v5 = v8 >> 3;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  void v15[4] = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_216787EE0(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  unint64_t v11 = &v10[16 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v15[3] = &v10[16 * v9];
  uint64_t v12 = *a2;
  *(void *)unint64_t v11 = *a2;
  if ((v12 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)v11 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((void *)v11 + 1) = a2[1];
  v15[2] = v11 + 16;
  sub_2168CDA7C(a1, v15);
  uint64_t v13 = a1[1];
  sub_2168C9CB8((uint64_t)v15);
  return v13;
}

void sub_2168CDA68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168C9CB8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2168CDA7C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_2168CDAF4((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_2168CDAF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  uint64_t result = a6;
  if (a3 != a5)
  {
    unint64_t v9 = (void *)(a7 - 16);
    uint64_t v10 = a3;
    do
    {
      uint64_t v12 = *(void *)(v10 - 16);
      v10 -= 16;
      uint64_t v11 = v12;
      *unint64_t v9 = v12;
      if ((v12 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *v9 &= 0xFFFFFFFFFFFFFFF8;
      }
      v9[1] = *(void *)(a3 - 8);
      v7 -= 16;
      v9 -= 2;
      a3 = v10;
    }
    while (v10 != a5);
  }
  return result;
}

void sub_2168CDB58(uint64_t *a1)
{
  uint64_t v1 = a1 + 3;
  if (!a1[3])
  {
    uint64_t v3 = operator new(0x28uLL);
    _OWORD *v3 = 0u;
    v3[1] = 0u;
    *((_DWORD *)v3 + 8) = 1065353216;
    sub_21678A04C((uint64_t)v3, 0x80uLL);
    sub_2168CAE68(v1, (uint64_t)v3);
    uint64_t v4 = *a1;
    if (a1[1] != *a1)
    {
      uint64_t v5 = 0;
      unint64_t v6 = 0;
      do
      {
        uint64_t v7 = *v1;
        uint64_t v8 = *(void *)(v4 + v5);
        if ((v8 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          v8 &= 0xFFFFFFFFFFFFFFF8;
        }
        v9[0] = v8;
        v9[1] = v6;
        sub_2168CD6A4(v7, v9, v9);
        if ((v9[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v9[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        ++v6;
        uint64_t v4 = *a1;
        v5 += 16;
      }
      while (v6 < (a1[1] - *a1) >> 4);
    }
  }
}

void sub_2168CDC44(_Unwind_Exception *a1)
{
  uint64_t v3 = (void *)sub_2168C08A0(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

_DWORD *sub_2168CDC7C(uint64_t *a1, int *a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v4 = a1[3];
  if (v4)
  {
    unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
    *(_DWORD *)uint64_t v23 = *a2;
    *(void *)&v23[8] = v5;
    unint64_t v6 = sub_2168CDFA4(v4, (int *)v23, v23);
    if (!v7) {
      return (_DWORD *)(*a1 + 24 * v6[3]);
    }
    unint64_t v8 = a1[1];
    goto LABEL_9;
  }
  uint64_t result = (_DWORD *)*a1;
  unint64_t v8 = a1[1];
  if (*a1 != v8)
  {
    while (*result != *a2)
    {
      result += 6;
      if (result == (_DWORD *)v8) {
        goto LABEL_9;
      }
    }
  }
  if (result == (_DWORD *)v8)
  {
LABEL_9:
    int v10 = *a2;
    *(_OWORD *)&float32x4_t v23[4] = *(_OWORD *)(a2 + 2);
    unint64_t v11 = a1[2];
    if (v8 >= v11)
    {
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - *a1) >> 3);
      unint64_t v14 = v13 + 1;
      if (v13 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_21677CB10();
      }
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *a1) >> 3);
      if (2 * v15 > v14) {
        unint64_t v14 = 2 * v15;
      }
      if (v15 >= 0x555555555555555) {
        unint64_t v16 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v16 = v14;
      }
      if (v16) {
        size_t v17 = (char *)sub_216782ED8((uint64_t)(a1 + 2), v16);
      }
      else {
        size_t v17 = 0;
      }
      uint64_t v18 = &v17[24 * v13];
      unint64_t v19 = &v17[24 * v16];
      *(_DWORD *)uint64_t v18 = v10;
      *(_OWORD *)(v18 + 4) = *(_OWORD *)v23;
      *((_DWORD *)v18 + 5) = *(_DWORD *)&v23[16];
      uint64_t v12 = (uint64_t)(v18 + 24);
      uint64_t v21 = (char *)*a1;
      uint64_t v20 = (char *)a1[1];
      if (v20 != (char *)*a1)
      {
        do
        {
          long long v22 = *(_OWORD *)(v20 - 24);
          *((void *)v18 - 1) = *((void *)v20 - 1);
          *(_OWORD *)(v18 - 24) = v22;
          v18 -= 24;
          v20 -= 24;
        }
        while (v20 != v21);
        uint64_t v20 = (char *)*a1;
      }
      *a1 = (uint64_t)v18;
      a1[1] = v12;
      a1[2] = (uint64_t)v19;
      if (v20) {
        operator delete(v20);
      }
    }
    else
    {
      *(_DWORD *)unint64_t v8 = v10;
      *(_OWORD *)(v8 + 4) = *(_OWORD *)v23;
      *(_DWORD *)(v8 + 20) = *(_DWORD *)&v23[16];
      uint64_t v12 = v8 + 24;
    }
    a1[1] = v12;
    sub_2168CDEA8(a1);
    return (_DWORD *)(a1[1] - 24);
  }
  return result;
}

void sub_2168CDEA8(uint64_t *a1)
{
  if (0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3) >= 0x80)
  {
    uint64_t v2 = a1 + 3;
    if (!a1[3])
    {
      uint64_t v3 = operator new(0x28uLL);
      _OWORD *v3 = 0u;
      v3[1] = 0u;
      *((_DWORD *)v3 + 8) = 1065353216;
      sub_21678A04C((uint64_t)v3, 0x80uLL);
      sub_2168CAEA8(v2, (uint64_t)v3);
      uint64_t v4 = *a1;
      if (a1[1] != *a1)
      {
        uint64_t v5 = 0;
        unint64_t v6 = 0;
        do
        {
          uint64_t v7 = a1[3];
          LODWORD(v8) = *(_DWORD *)(v4 + v5);
          *((void *)&v8 + 1) = v6;
          sub_2168CDFA4(v7, (int *)&v8, &v8);
          ++v6;
          uint64_t v4 = *a1;
          v5 += 24;
        }
        while (v6 < 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
      }
    }
  }
}

void sub_2168CDF8C(_Unwind_Exception *a1)
{
  uint64_t v3 = (void *)sub_216850320(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void *sub_2168CDFA4(uint64_t a1, int *a2, _OWORD *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = bswap64(0x9E3779B97F4A7C55 * v6);
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
    }
    else
    {
      unint64_t v3 = v7 & (v8 - 1);
    }
    int v10 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v10)
    {
      unint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v6) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v3) {
              break;
            }
          }
          unint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  unint64_t v11 = operator new(0x20uLL);
  *unint64_t v11 = 0;
  v11[1] = v7;
  *((_OWORD *)v11 + 1) = *a3;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_21678A04C(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
      else {
        unint64_t v3 = v7;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  uint64_t v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    *unint64_t v11 = *v20;
LABEL_38:
    *uint64_t v20 = v11;
    goto LABEL_39;
  }
  *unint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v3) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    uint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_2168CE1C4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_2168CE1D8(void *a1, int *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  uint64_t v3 = *a2;
  unint64_t v4 = bswap64(0x9E3779B97F4A7C55 * v3);
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v2);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = v4;
    if (v4 >= *(void *)&v2) {
      unint64_t v6 = v4 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v6 = v4 & (*(void *)&v2 - 1);
  }
  unint64_t v7 = *(uint64_t ***)(*a1 + 8 * v6);
  if (!v7) {
    return 0;
  }
  for (uint64_t result = *v7; result; uint64_t result = (uint64_t *)*result)
  {
    unint64_t v9 = result[1];
    if (v9 == v4)
    {
      if (*((_DWORD *)result + 4) == v3) {
        return result;
      }
    }
    else
    {
      if (v5.u32[0] > 1uLL)
      {
        if (v9 >= *(void *)&v2) {
          v9 %= *(void *)&v2;
        }
      }
      else
      {
        v9 &= *(void *)&v2 - 1;
      }
      if (v9 != v6) {
        return 0;
      }
    }
  }
  return result;
}

void sub_2168CE2A4(void ***a1)
{
  int8x8_t v2 = *a1;
  if (*v2)
  {
    sub_2168CE2F8((atomic_uint *)v2, (uint64_t)*v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

atomic_uint *sub_2168CE2F8(atomic_uint *result, uint64_t a2)
{
  uint64_t v3 = result;
  for (uint64_t i = *((void *)result + 1); i != a2; i -= 24)
  {
    uint64_t result = *(atomic_uint **)(i - 16);
    if (result && atomic_fetch_add_explicit(result + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      uint64_t result = (atomic_uint *)(*(uint64_t (**)(atomic_uint *))(*(void *)result + 8))(result);
    }
  }
  *((void *)v3 + 1) = a2;
  return result;
}

void *sub_2168CE380(void *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0;
  if (a2)
  {
    sub_21685203C((unint64_t *)(a2 + 16), &v6);
    uint64_t v3 = (atomic_uint *)a1[1];
    a1[1] = v6;
    uint64_t v6 = 0;
    if (v3)
    {
      if (atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
      }
      uint64_t v4 = v6;
      if (v6 && atomic_fetch_add_explicit((atomic_uint *volatile)(v6 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      }
    }
  }
  return a1;
}

void sub_2168CE44C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 8);
  if (v3) {
    sub_217324208(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2168CE464(uint64_t *a1, void *a2)
{
  uint64_t result = sub_2168CE4DC((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_2168CE4DC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *a3 = 0;
      a3[1] = 0;
      *(void *)(v7 - 8) = a3[2];
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_2168CE574((uint64_t)v11);
  return v9;
}

uint64_t sub_2168CE574(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_2168CE5AC(a1);
  }
  return a1;
}

uint64_t sub_2168CE5AC(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 16) + 8);
  for (uint64_t i = *(void *)(*(void *)(result + 8) + 8); v1 != i; v1 += 24)
  {
    uint64_t result = *(void *)(v1 + 8);
    if (result)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(result + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
  }
  return result;
}

uint64_t sub_2168CE630(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_2168CE668(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2 != a2)
  {
    uint64_t v4 = result;
    do
    {
      *(void *)(v4 + 16) = v2 - 24;
      uint64_t result = *(void *)(v2 - 16);
      if (result)
      {
        if (atomic_fetch_add_explicit((atomic_uint *volatile)(result + 8), 0xFFFFFFFF, memory_order_release) == 1) {
          uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
        }
      }
      uint64_t v2 = *(void *)(v4 + 16);
    }
    while (v2 != a2);
  }
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCategory>::GetInstance()
{
  unint64_t result = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCategory>::_instance);
  if (!result) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCategory>::_CreateInstance();
  }
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCategory>::_CreateInstance(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x8000000217455055 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&v12);
  uint64_t v2 = std::string::insert(&v12, 0, "Create Singleton ");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  uint64_t v16 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)long long __p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  sub_216851098((uint64_t)&v13, "Tf", "TfSingleton::_CreateInstance", (char *)__p);
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (atomic_exchange(pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCategory>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::TraceCategory*> &)::isInitializing, 1u))
  {
    while (!atomic_load(a1))
      sched_yield();
  }
  else
  {
    if (!atomic_load(a1))
    {
      uint64_t v5 = (pxrInternal__aapl__pxrReserved__::TraceCategory *)operator new(0x18uLL);
      pxrInternal__aapl__pxrReserved__::TraceCategory::TraceCategory(v5);
      unint64_t v7 = atomic_load(a1);
      if (v7)
      {
        if (v5 != (pxrInternal__aapl__pxrReserved__::TraceCategory *)v7)
        {
          __p[0] = "tf/instantiateSingleton.h";
          __p[1] = "_CreateInstance";
          uint64_t v16 = 84;
          unint64_t v17 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCategory>"
                "::_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::TraceCategory]";
          char v18 = 0;
          int v19 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"race detected setting singleton instance", v6);
        }
      }
      else if (atomic_exchange((atomic_ullong *volatile)a1, (unint64_t)v5))
      {
        __p[0] = "tf/instantiateSingleton.h";
        __p[1] = "_CreateInstance";
        uint64_t v16 = 88;
        unint64_t v17 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCategory>::"
              "_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::TraceCategory]";
        char v18 = 0;
        int v19 = 4;
        pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v6, "instance.exchange(newInst) == nullptr");
      }
    }
    atomic_store(0, (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCategory>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::TraceCategory*> &)::isInitializing);
  }
  unint64_t v9 = atomic_load(a1);
  while (v14--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v13);
  return v9;
}

void sub_2168CE8D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
}

BOOL pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCategory>::CurrentlyExists()
{
  unint64_t v0 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCategory>::_instance);
  return v0 != 0;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCategory>::SetInstanceConstructed(unint64_t result)
{
  if (atomic_exchange((atomic_ullong *volatile)&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCategory>::_instance, result))
  {
    uint64_t v1 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/instantiateSingleton.h", 47);
    v3[0] = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/instantiateSingleton.h", (uint64_t)v1, 0x2Fu);
    v3[1] = "SetInstanceConstructed";
    v3[2] = 56;
    v3[3] = "static void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCategory>::"
            "SetInstanceConstructed(T &) [T = pxrInternal__aapl__pxrReserved__::TraceCategory]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"this function may not be called after GetInstance() or another SetInstanceConstructed() has completed", v2);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCategory>::DeleteInstance()
{
  for (uint64_t i = (char **)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCategory>::_instance);
        i;
        uint64_t i = v1)
  {
    uint64_t v1 = i;
    atomic_compare_exchange_strong((atomic_ullong *volatile)&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCategory>::_instance, (unint64_t *)&v1, 0);
    if (v1 == i)
    {
      sub_2168C80D0((uint64_t)i, i[1]);
      operator delete(i);
      return;
    }
    sched_yield();
  }
}

pxrInternal__aapl__pxrReserved__::TraceCategory *pxrInternal__aapl__pxrReserved__::TraceCategory::TraceCategory(pxrInternal__aapl__pxrReserved__::TraceCategory *this)
{
  *((void *)this + 2) = 0;
  *((void *)this + 1) = 0;
  *(void *)this = (char *)this + 8;
  sub_216779094(__p, "Default");
  pxrInternal__aapl__pxrReserved__::TraceCategory::RegisterCategory((uint64_t **)this, 0, (long long *)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  return this;
}

void sub_2168CEAD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_2168C80D0(v15, *(char **)(v15 + 8));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TraceCategory::RegisterCategory(uint64_t **a1, int a2, long long *a3)
{
  int v4 = a2;
  if (*((char *)a3 + 23) < 0)
  {
    sub_216778F24(&__p, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long __p = *a3;
    uint64_t v6 = *((void *)a3 + 2);
  }
  sub_2168CEC94(a1, &v4);
  if (SHIBYTE(v6) < 0) {
    operator delete((void *)__p);
  }
}

void sub_2168CEB7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t pxrInternal__aapl__pxrReserved__::TraceCategory::GetInstance(pxrInternal__aapl__pxrReserved__::TraceCategory *this)
{
  unint64_t result = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCategory>::_instance);
  if (!result) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCategory>::_CreateInstance();
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::TraceCategory::GetCategories@<X0>(pxrInternal__aapl__pxrReserved__::TraceCategory *this@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X8>)
{
  v13[0] = a2;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  unint64_t result = sub_2168CED3C((uint64_t)this, v13);
  uint64_t v5 = (uint64_t)result;
  unint64_t v7 = v6;
  if (result != v6)
  {
    unint64_t v8 = a3[1];
    do
    {
      unint64_t v9 = (long long *)(v5 + 40);
      if (v8 >= a3[2])
      {
        unint64_t result = (void *)sub_2167E9A44(a3, v9);
        unint64_t v8 = (unint64_t)result;
      }
      else
      {
        unint64_t result = sub_2167E99E4(a3, v9);
        v8 += 24;
      }
      a3[1] = v8;
      int v10 = *(void **)(v5 + 8);
      if (v10)
      {
        do
        {
          unint64_t v11 = v10;
          int v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          unint64_t v11 = *(void **)(v5 + 16);
          BOOL v12 = *v11 == v5;
          uint64_t v5 = (uint64_t)v11;
        }
        while (!v12);
      }
      uint64_t v5 = (uint64_t)v11;
    }
    while (v11 != v7);
  }
  return result;
}

void sub_2168CEC78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216782F20((void ***)va);
  _Unwind_Resume(a1);
}

char *sub_2168CEC94(uint64_t **a1, int *a2)
{
  int v4 = (char *)operator new(0x40uLL);
  uint64_t v5 = *((void *)a2 + 3);
  long long v6 = *(_OWORD *)(a2 + 2);
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  unint64_t v7 = a1 + 1;
  unint64_t v8 = a1[1];
  unsigned int v9 = *a2;
  *((_DWORD *)v4 + 8) = *a2;
  *(_OWORD *)(v4 + 40) = v6;
  *((void *)v4 + 7) = v5;
  if (v8)
  {
    do
    {
      while (1)
      {
        unint64_t v7 = (uint64_t **)v8;
        if (v9 >= *((_DWORD *)v8 + 8)) {
          break;
        }
        unint64_t v8 = (uint64_t *)*v8;
        int v10 = v7;
        if (!*v7) {
          goto LABEL_8;
        }
      }
      unint64_t v8 = (uint64_t *)v8[1];
    }
    while (v8);
    int v10 = v7 + 1;
  }
  else
  {
    int v10 = a1 + 1;
  }
LABEL_8:
  sub_21677B358(a1, (uint64_t)v7, v10, (uint64_t *)v4);
  return v4;
}

uint64_t *sub_2168CED3C(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  long long v3 = *(uint64_t **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  unsigned int v4 = *a2;
  while (1)
  {
    unsigned int v5 = *((_DWORD *)v3 + 8);
    if (v4 >= v5) {
      break;
    }
    uint64_t v2 = v3;
LABEL_7:
    long long v3 = (uint64_t *)*v3;
    if (!v3) {
      return v2;
    }
  }
  if (v5 < v4)
  {
    ++v3;
    goto LABEL_7;
  }
  unint64_t v7 = (uint64_t *)*v3;
  unint64_t result = v3;
  if (*v3)
  {
    unint64_t result = v3;
    do
    {
      unsigned int v8 = *((_DWORD *)v7 + 8);
      BOOL v9 = v8 >= v4;
      if (v8 >= v4) {
        int v10 = (uint64_t **)v7;
      }
      else {
        int v10 = (uint64_t **)(v7 + 1);
      }
      if (v9) {
        unint64_t result = v7;
      }
      unint64_t v7 = *v10;
    }
    while (*v10);
  }
  uint64_t v11 = v3[1];
  if (v11)
  {
    do
    {
      if (v4 >= *(_DWORD *)(v11 + 32)) {
        BOOL v12 = (uint64_t *)(v11 + 8);
      }
      else {
        BOOL v12 = (uint64_t *)v11;
      }
      uint64_t v11 = *v12;
    }
    while (*v12);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::TraceCollection::AddToCollection(uint64_t **a1, void *a2, uint64_t *a3)
{
  long long v6 = (uint64_t **)sub_2168C34E0((uint64_t)a1, a2);
  if (a1 + 1 == v6)
  {
    return sub_2168CF420(a1, a2, (uint64_t)a2, a3);
  }
  else
  {
    unint64_t v7 = v6[7];
    unsigned int v8 = (pxrInternal__aapl__pxrReserved__::TraceEventContainer *)*a3;
    return pxrInternal__aapl__pxrReserved__::TraceEventList::Append(v7, v8);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceCollection::_Iterate(pxrInternal__aapl__pxrReserved__::TraceCollection **this, pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor *a2, int a3)
{
  memset(v22, 0, sizeof(v22));
  int v23 = 1065353216;
  (*(void (**)(pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor *))(*(void *)a2 + 16))(a2);
  long long v6 = *this;
  if (*this != (pxrInternal__aapl__pxrReserved__::TraceCollection *)(this + 1))
  {
    do
    {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor *, uint64_t))(*(void *)a2 + 32))(a2, (uint64_t)v6 + 32);
      uint64_t v7 = *((void *)v6 + 7);
      if (a3)
      {
        unsigned int v8 = *(uint64_t **)(v7 + 16);
        if (v8) {
          uint64_t v9 = *v8;
        }
        else {
          uint64_t v9 = 0;
        }
        v21[0] = *(void *)(v7 + 16);
        v21[1] = v9;
        double v21[2] = v8;
        void v21[3] = v9;
        uint64_t v14 = *(void *)(v7 + 8);
        uint64_t v15 = v14 + 32;
        if (!v14) {
          uint64_t v15 = 0;
        }
        v20[0] = v14;
        v20[1] = v15;
        v20[2] = v14;
        v20[3] = v15;
        sub_2168CF050((uint64_t)this, (uint64_t)a2, v22, (uint64_t)v6 + 32, (uint64_t)v21, (uint64_t)v20);
      }
      else
      {
        int v10 = *(void **)(v7 + 8);
        uint64_t v11 = *(uint64_t **)(v7 + 16);
        if (v10) {
          uint64_t v12 = (uint64_t)(v10 + 4);
        }
        else {
          uint64_t v12 = 0;
        }
        if (v11) {
          uint64_t v13 = *v11;
        }
        else {
          uint64_t v13 = 0;
        }
        sub_2168CF238((uint64_t)this, (uint64_t)a2, v22, (uint64_t)v6 + 32, v10, v12, (uint64_t)v11, v13);
      }
      (*(void (**)(pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor *, uint64_t))(*(void *)a2 + 40))(a2, (uint64_t)v6 + 32);
      uint64_t v16 = (pxrInternal__aapl__pxrReserved__::TraceCollection *)*((void *)v6 + 1);
      if (v16)
      {
        do
        {
          unint64_t v17 = v16;
          uint64_t v16 = *(pxrInternal__aapl__pxrReserved__::TraceCollection **)v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          unint64_t v17 = (pxrInternal__aapl__pxrReserved__::TraceCollection *)*((void *)v6 + 2);
          BOOL v18 = *(void *)v17 == (void)v6;
          long long v6 = v17;
        }
        while (!v18);
      }
      long long v6 = v17;
    }
    while (v17 != (pxrInternal__aapl__pxrReserved__::TraceCollection *)(this + 1));
  }
  (*(void (**)(pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor *))(*(void *)a2 + 24))(a2);
  return sub_2168CF5C0((uint64_t)v22);
}

void sub_2168CF038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_2168CF5C0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2168CF050(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  long long v6 = *(uint64_t **)(a5 + 24);
  if (v6 != *(uint64_t **)(a6 + 24))
  {
    uint64_t v11 = *(uint64_t ***)(a5 + 16);
    do
    {
      uint64_t v12 = v6;
      if (v6 == (uint64_t *)(v11 + 4)) {
        uint64_t v12 = (uint64_t *)*v11[2];
      }
      if ((*(unsigned int (**)(uint64_t, void))(*(void *)a2 + 48))(a2, *((unsigned int *)v12 - 6)))
      {
        uint64_t v13 = (const char ***)(v12 - 4);
        uint64_t v14 = sub_2168CF64C(a3, v13);
        if (!v14)
        {
          pxrInternal__aapl__pxrReserved__::TraceStaticKeyData::GetString((pxrInternal__aapl__pxrReserved__::TraceStaticKeyData *)*v13, (uint64_t)&__p);
          pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v17);
          BOOL v18 = *v13;
          uint64_t v19 = v17;
          uint64_t v17 = 0;
          uint64_t v14 = sub_2168CF754((uint64_t)a3, &v18, (uint64_t)&v18);
          if ((v19 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          if ((v17 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          if (v16 < 0) {
            operator delete(__p);
          }
        }
        (*(void (**)(uint64_t, uint64_t, void *, const char ***))(*(void *)a2 + 56))(a2, a4, v14 + 3, v13);
      }
      if (v6 == (uint64_t *)(v11 + 4))
      {
        uint64_t v11 = (uint64_t **)v11[2];
        long long v6 = *v11;
      }
      v6 -= 4;
    }
    while (v6 != *(uint64_t **)(a6 + 24));
  }
}

void sub_2168CF1E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if ((a17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((a15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2168CF238(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a6 != a8)
  {
    uint64_t v9 = a6;
    do
    {
      if ((*(unsigned int (**)(uint64_t, void))(*(void *)a2 + 48))(a2, *(unsigned int *)(v9 + 8)))
      {
        uint64_t v14 = sub_2168CF64C(a3, (const char ***)v9);
        if (!v14)
        {
          pxrInternal__aapl__pxrReserved__::TraceStaticKeyData::GetString(*(pxrInternal__aapl__pxrReserved__::TraceStaticKeyData **)v9, (uint64_t)&__p);
          pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v18);
          uint64_t v19 = *(const char ***)v9;
          uint64_t v20 = v18;
          uint64_t v18 = 0;
          uint64_t v14 = sub_2168CF754((uint64_t)a3, &v19, (uint64_t)&v19);
          if ((v20 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          if ((v18 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          if (v17 < 0) {
            operator delete(__p);
          }
        }
        (*(void (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)a2 + 56))(a2, a4, v14 + 3, v9);
      }
      v9 += 32;
      if (v9 == *a5)
      {
        uint64_t v15 = a5[3];
        if (v15)
        {
          a5 = (void *)a5[3];
          uint64_t v9 = v15 + 32;
        }
      }
    }
    while (v9 != a8);
  }
}

void sub_2168CF3B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if ((a17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((a15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceCollection::Iterate(pxrInternal__aapl__pxrReserved__::TraceCollection **this, pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor *a2)
{
  return pxrInternal__aapl__pxrReserved__::TraceCollection::_Iterate(this, a2, 0);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceCollection::ReverseIterate(pxrInternal__aapl__pxrReserved__::TraceCollection **this, pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor *a2)
{
  return pxrInternal__aapl__pxrReserved__::TraceCollection::_Iterate(this, a2, 1);
}

uint64_t *sub_2168CF420(uint64_t **a1, void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = (uint64_t **)sub_2168C2D80((uint64_t)a1, &v12, a2);
  unsigned int v8 = *v7;
  if (!*v7)
  {
    uint64_t v9 = v7;
    sub_2168CF4C4((uint64_t)a1, a3, a4, (uint64_t)v11);
    sub_21677B358(a1, v12, v9, v11[0]);
    unsigned int v8 = v11[0];
    v11[0] = 0;
    sub_2168CF568((uint64_t)v11, 0);
  }
  return v8;
}

unsigned char *sub_2168CF4C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  unsigned int v8 = (char *)operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  unint64_t result = v8 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    unint64_t result = sub_216778F24(result, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)unint64_t result = *(_OWORD *)a2;
    *((void *)v8 + 6) = *(void *)(a2 + 16);
  }
  uint64_t v10 = *a3;
  *a3 = 0;
  *((void *)v8 + 7) = v10;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_2168CF550(_Unwind_Exception *a1)
{
  sub_2168CF568(v1, 0);
  _Unwind_Resume(a1);
}

void sub_2168CF568(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_2168CA7D8((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t sub_2168CF5C0(uint64_t a1)
{
  sub_2168CF5FC(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_2168CF5FC(int a1, void *__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      long long v3 = (void *)*v2;
      uint64_t v4 = v2[3];
      if ((v4 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void *sub_2168CF64C(void *a1, const char ***a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v4 = (unint64_t)*a2 / 0x18;
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v2);
  v5.i16[0] = vaddlv_u8(v5);
  unint64_t v6 = v5.u32[0];
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v7 = (unint64_t)*a2 / 0x18;
    if (v4 >= *(void *)&v2) {
      unint64_t v7 = v4 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = (*(void *)&v2 - 1) & v4;
  }
  unsigned int v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  uint64_t v9 = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = v9[1];
      if (v10 == v4)
      {
        uint64_t v11 = (const char **)v9[2];
        if (v11 == *a2 || pxrInternal__aapl__pxrReserved__::TraceStaticKeyData::operator==(v11, *a2)) {
          return v9;
        }
      }
      else
      {
        if (v6 > 1)
        {
          if (v10 >= *(void *)&v2) {
            v10 %= *(void *)&v2;
          }
        }
        else
        {
          v10 &= *(void *)&v2 - 1;
        }
        if (v10 != v7) {
          return 0;
        }
      }
      uint64_t v9 = (void *)*v9;
    }
    while (v9);
  }
  return v9;
}

void *sub_2168CF754(uint64_t a1, const char ***a2, uint64_t a3)
{
  unint64_t v6 = (unint64_t)*a2 / 0x18;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v9.i16[0] = vaddlv_u8(v9);
    unint64_t v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v3 = (unint64_t)*a2 / 0x18;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v6)
        {
          uint64_t v14 = (const char **)i[2];
          if (v14 == *a2 || pxrInternal__aapl__pxrReserved__::TraceStaticKeyData::operator==(v14, *a2)) {
            return i;
          }
        }
        else
        {
          if (v10 > 1)
          {
            if (v13 >= v7) {
              v13 %= v7;
            }
          }
          else
          {
            v13 &= v7 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v15 = (void *)(a1 + 16);
  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0;
  i[1] = v6;
  *((_OWORD *)i + 1) = *(_OWORD *)a3;
  *(void *)(a3 + 8) = 0;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v7 || (float)(v17 * (float)v7) < v16)
  {
    BOOL v18 = 1;
    if (v7 >= 3) {
      BOOL v18 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v7);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_21678A04C(a1, v21);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v22 = *(void *)a1;
  int v23 = *(void **)(*(void *)a1 + 8 * v3);
  if (v23)
  {
    *uint64_t i = *v23;
LABEL_39:
    *int v23 = i;
    goto LABEL_40;
  }
  *uint64_t i = *v15;
  *uint64_t v15 = i;
  *(void *)(v22 + 8 * v3) = v15;
  if (*i)
  {
    unint64_t v24 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7) {
        v24 %= v7;
      }
    }
    else
    {
      v24 &= v7 - 1;
    }
    int v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_39;
  }
LABEL_40:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_2168CF9A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168CF9BC((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_2168CF9BC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void **)a1;
  *(void *)a1 = a2;
  if (v3)
  {
    if (*(unsigned char *)(a1 + 16))
    {
      uint64_t v4 = v3[3];
      if ((v4 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    operator delete(v3);
  }
}

void pxrInternal__aapl__pxrReserved__::TraceCollectionAvailable::~TraceCollectionAvailable(pxrInternal__aapl__pxrReserved__::TraceCollectionAvailable *this)
{
  *(void *)this = &unk_26C74CF28;
  int8x8_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_216784EC4(v2);
  }

  pxrInternal__aapl__pxrReserved__::TfNotice::~TfNotice(this);
}

{
  void *v1;
  uint64_t vars8;

  pxrInternal__aapl__pxrReserved__::TraceCollectionAvailable::~TraceCollectionAvailable(this);

  operator delete(v1);
}

uint64_t *sub_2168CFA80()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216856744((unint64_t **)v5);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_2168CFB60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCollector>::GetInstance()
{
  unint64_t result = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCollector>::_instance);
  if (!result) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCollector>::_CreateInstance();
  }
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCollector>::_CreateInstance(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000021745514ALL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&v13);
  int8x8_t v2 = std::string::insert(&v13, 0, "Create Singleton ");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  uint64_t v17 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)long long __p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  sub_216851098((uint64_t)&v14, "Tf", "TfSingleton::_CreateInstance", (char *)__p);
  if (SHIBYTE(v17) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (atomic_exchange(pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCollector>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::TraceCollector*> &)::isInitializing, 1u))
  {
    while (!atomic_load(a1))
      sched_yield();
  }
  else
  {
    if (!atomic_load(a1))
    {
      sub_216851EE4((uint64_t)__p, "Trace", "TraceCollector");
      uint8x8_t v9 = (pxrInternal__aapl__pxrReserved__::TraceCollector *)malloc(0x50uLL);
      while (LODWORD(__p[1])--)
        pxrInternal__aapl__pxrReserved__::TfMallocTag::_End((uint64_t)__p[0]);
      pxrInternal__aapl__pxrReserved__::TraceCollector::TraceCollector(v9);
      unint64_t v12 = atomic_load(a1);
      if (v12)
      {
        if (v9 != (pxrInternal__aapl__pxrReserved__::TraceCollector *)v12)
        {
          __p[0] = "tf/instantiateSingleton.h";
          __p[1] = "_CreateInstance";
          uint64_t v17 = 84;
          BOOL v18 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCollector"
                ">::_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::TraceCollector]";
          char v19 = 0;
          int v20 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"race detected setting singleton instance", v11);
        }
      }
      else if (atomic_exchange((atomic_ullong *volatile)a1, (unint64_t)v9))
      {
        __p[0] = "tf/instantiateSingleton.h";
        __p[1] = "_CreateInstance";
        uint64_t v17 = 88;
        BOOL v18 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCollector>:"
              ":_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::TraceCollector]";
        char v19 = 0;
        int v20 = 4;
        pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v11, "instance.exchange(newInst) == nullptr");
      }
    }
    atomic_store(0, (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCollector>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::TraceCollector*> &)::isInitializing);
  }
  unint64_t v5 = atomic_load(a1);
  while (v15--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v14);
  return v5;
}

void sub_2168CFDCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
}

BOOL pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCollector>::CurrentlyExists()
{
  unint64_t v0 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCollector>::_instance);
  return v0 != 0;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCollector>::SetInstanceConstructed(unint64_t result, uint64_t a2, char *a3)
{
  if (atomic_exchange((atomic_ullong *volatile)&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCollector>::_instance, result))
  {
    v3[0] = "tf/instantiateSingleton.h";
    v3[1] = "SetInstanceConstructed";
    v3[2] = 56;
    v3[3] = "static void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCollector>:"
            ":SetInstanceConstructed(T &) [T = pxrInternal__aapl__pxrReserved__::TraceCollector]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"this function may not be called after GetInstance() or another SetInstanceConstructed() has completed", a3);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCollector>::DeleteInstance()
{
  for (uint64_t i = (pxrInternal__aapl__pxrReserved__::TraceCollector *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCollector>::_instance);
        i;
        uint64_t i = v1)
  {
    uint64_t v1 = i;
    atomic_compare_exchange_strong((atomic_ullong *volatile)&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCollector>::_instance, (unint64_t *)&v1, 0);
    if (v1 == i)
    {
      pxrInternal__aapl__pxrReserved__::TraceCollector::~TraceCollector(i);
      free(v2);
      return;
    }
    sched_yield();
  }
}

void pxrInternal__aapl__pxrReserved__::TraceCollector::_GetThreadData(pxrInternal__aapl__pxrReserved__::TraceCollector *this)
{
  int v5 = (void *)off_26B4B19F8();
  if (!*v5)
  {
    sub_2168CFF7C((atomic_ullong *)(v4 + 8), v1, v2, v3);
    *int v5 = v6;
  }
}

void sub_2168CFF7C(atomic_ullong *a1, uint64_t a2, uint64_t a3, void *a4)
{
  int v5 = (pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData *)tbb::internal::NFS_Allocate(1uLL, 256, 0, a4);
  *(_OWORD *)int v5 = 0u;
  *((_OWORD *)v5 + 1) = 0u;
  *((_OWORD *)v5 + 2) = 0u;
  *((_OWORD *)v5 + 3) = 0u;
  *((_OWORD *)v5 + 4) = 0u;
  *((_OWORD *)v5 + 5) = 0u;
  *((_OWORD *)v5 + 6) = 0u;
  *((_OWORD *)v5 + 7) = 0u;
  *((_OWORD *)v5 + 8) = 0u;
  *((_OWORD *)v5 + 9) = 0u;
  *((_OWORD *)v5 + 10) = 0u;
  *((_OWORD *)v5 + 11) = 0u;
  *((_OWORD *)v5 + 12) = 0u;
  *((_OWORD *)v5 + 13) = 0u;
  *((_OWORD *)v5 + 14) = 0u;
  *((_OWORD *)v5 + 15) = 0u;
  for (uint64_t i = pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData::_PerThreadData(v5); ; *((void *)i + 8) = v8)
  {
    atomic_ullong v7 = *a1;
    *((void *)i + 8) = *a1;
    atomic_ullong v8 = v7;
    atomic_compare_exchange_strong(a1, (unint64_t *)&v8, (unint64_t)i);
    if (v8 == v7) {
      break;
    }
  }
}

pxrInternal__aapl__pxrReserved__::TraceCollector *pxrInternal__aapl__pxrReserved__::TraceCollector::TraceCollector(pxrInternal__aapl__pxrReserved__::TraceCollector *this)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  sub_216779094((void *)this + 3, "TraceRegistry global collector");
  *((void *)this + 6) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  if (atomic_exchange((atomic_ullong *volatile)&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCollector>::_instance, (unint64_t)this))
  {
    __p[0] = "tf/instantiateSingleton.h";
    __p[1] = "SetInstanceConstructed";
    uint64_t v7 = 56;
    atomic_ullong v8 = "static void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCollector>::Se"
         "tInstanceConstructed(T &) [T = pxrInternal__aapl__pxrReserved__::TraceCollector]";
    char v9 = 0;
    int v10 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"this function may not be called after GetInstance() or another SetInstanceConstructed() has completed", v2);
  }
  sub_216779094(__p, "PXR_ENABLE_GLOBAL_TRACE");
  BOOL v3 = pxrInternal__aapl__pxrReserved__::TfGetenvBool((const char *)__p, 0);
  BOOL v4 = v3;
  if ((SHIBYTE(v7) & 0x80000000) == 0)
  {
    if (!v3) {
      return this;
    }
    goto LABEL_7;
  }
  operator delete(__p[0]);
  if (v4)
  {
LABEL_7:
    atexit((void (*)(void))sub_2168D0158);
    atomic_store(1u, (unsigned int *)&pxrInternal__aapl__pxrReserved__::TraceCollector::_isEnabled);
  }
  return this;
}

void sub_2168D00F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v17 = *(std::__shared_weak_count **)(v14 + 72);
  if (v17) {
    sub_216784EC4(v17);
  }
  if (*(char *)(v14 + 47) < 0) {
    operator delete(*v15);
  }
  sub_2168D13F8((atomic_ullong *)(v14 + 8));
  sub_216859A88((uint64_t *)v14, v18);
  _Unwind_Resume(a1);
}

uint64_t sub_2168D0158()
{
  pxrInternal__aapl__pxrReserved__::TraceReporter::GetGlobalReporter(&v2);
  uint64_t v0 = sub_2168D1350(&v2);
  pxrInternal__aapl__pxrReserved__::TraceReporter::Report(v0, MEMORY[0x263F8C100], 1);
  uint64_t result = v3;
  if (v3)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_2168D01DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10)
{
  if (a10) {
    sub_217323F90(a10);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::TraceCollector::SetEnabled(pxrInternal__aapl__pxrReserved__::TraceCollector *this, unsigned int a2)
{
}

void pxrInternal__aapl__pxrReserved__::TraceCollector::~TraceCollector(pxrInternal__aapl__pxrReserved__::TraceCollector *this)
{
  atomic_store(0, (unsigned int *)&pxrInternal__aapl__pxrReserved__::TraceCollector::_isEnabled);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v2) {
    sub_216784EC4(v2);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
  sub_2168D13F8((atomic_ullong *)this + 1);

  sub_216859A88((uint64_t *)this, v3);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceCollector::Scope(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = a3;
  uint64_t v10 = a2;
  BOOL v4 = (pxrInternal__aapl__pxrReserved__::TraceCollector *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCollector>::_instance);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCollector>::_CreateInstance();
  }
  pxrInternal__aapl__pxrReserved__::TraceCollector::_GetThreadData(v4);
  uint64_t v6 = (unsigned __int8 *)v5;
  uint64_t v8 = 0;
  atomic_store(1u, (unsigned __int8 *)v5);
  uint64_t result = sub_2168D143C((pxrInternal__aapl__pxrReserved__::TraceEventContainer *)atomic_load_explicit((atomic_ullong *volatile)(v5 + 8), memory_order_acquire), (uint64_t)&v8 + 4, a1, &v10, &v9, (int *)&v8);
  atomic_store(0, v6);
  return result;
}

void sub_2168D02EC(void *a1)
{
  atomic_store(0, v1);
  sub_21675DB74(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceCollector::_BeginEvent(pxrInternal__aapl__pxrReserved__::TraceCollector *a1, uint64_t a2, int a3)
{
  sub_216851EE4((uint64_t)&v10, "Trace", "TraceCollector::BeginEvent");
  if (atomic_load_explicit(pxrInternal__aapl__pxrReserved__::TraceCollector::_isEnabled, memory_order_acquire) == 1)
  {
    pxrInternal__aapl__pxrReserved__::TraceCollector::_GetThreadData(a1);
    uint64_t v7 = pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData::BeginEvent(v6, a2, a3);
  }
  else
  {
    uint64_t v7 = 0;
  }
  while (v11--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v10);
  return v7;
}

void sub_2168D0398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData::BeginEvent(uint64_t a1, uint64_t a2, int a3)
{
  int v14 = a3;
  sub_216851EE4((uint64_t)&v12, "Trace", "TraceCollector::_PerThreadData::BeginEvent");
  atomic_store(1u, (unsigned __int8 *)a1);
  explicit = (pxrInternal__aapl__pxrReserved__::TraceEventContainer *)atomic_load_explicit((atomic_ullong *volatile)(a1 + 8), memory_order_acquire);
  int v11 = 0;
  uint64_t v10 = sub_2168C7BFC(*((void *)explicit + 5) + 16, a2, a2) + 2;
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)sub_2168D1624(explicit, (uint64_t)&v11, &v10, &v14);
  uint64_t TimeStamp = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(v6);
  atomic_store(0, (unsigned __int8 *)a1);
  while (v13--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v12);
  return TimeStamp;
}

void sub_2168D0470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  atomic_store(0, v4);
  sub_21684E6B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceCollector::_EndEvent(pxrInternal__aapl__pxrReserved__::TraceCollector *a1, uint64_t a2, int a3)
{
  sub_216851EE4((uint64_t)&v10, "Trace", "TraceCollector::EndEvent (key)");
  if (atomic_load_explicit(pxrInternal__aapl__pxrReserved__::TraceCollector::_isEnabled, memory_order_acquire) == 1)
  {
    pxrInternal__aapl__pxrReserved__::TraceCollector::_GetThreadData(a1);
    uint64_t v7 = pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData::EndEvent(v6, a2, a3);
  }
  else
  {
    uint64_t v7 = 0;
  }
  while (v11--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v10);
  return v7;
}

void sub_2168D0534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData::EndEvent(uint64_t a1, uint64_t a2, int a3)
{
  int v14 = a3;
  sub_216851EE4((uint64_t)&v12, "Trace", "TraceCollector::_PerThreadData::EndEvent");
  atomic_store(1u, (unsigned __int8 *)a1);
  explicit = (pxrInternal__aapl__pxrReserved__::TraceEventContainer *)atomic_load_explicit((atomic_ullong *volatile)(a1 + 8), memory_order_acquire);
  int v11 = 0;
  uint64_t v10 = sub_2168C7BFC(*((void *)explicit + 5) + 16, a2, a2) + 2;
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)sub_2168D1698(explicit, (uint64_t)&v11, &v10, &v14);
  uint64_t TimeStamp = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(v6);
  atomic_store(0, (unsigned __int8 *)a1);
  while (v13--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v12);
  return TimeStamp;
}

void sub_2168D060C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  atomic_store(0, v4);
  sub_21684E6B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceCollector::_MarkerEvent(pxrInternal__aapl__pxrReserved__::TraceCollector *a1, uint64_t a2, int a3)
{
  sub_216851EE4((uint64_t)&v10, "Trace", "TraceCollector::MarkerEvent");
  if (atomic_load_explicit(pxrInternal__aapl__pxrReserved__::TraceCollector::_isEnabled, memory_order_acquire) == 1)
  {
    pxrInternal__aapl__pxrReserved__::TraceCollector::_GetThreadData(a1);
    uint64_t v7 = pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData::MarkerEvent(v6, a2, a3);
  }
  else
  {
    uint64_t v7 = 0;
  }
  while (v11--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v10);
  return v7;
}

void sub_2168D06D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData::MarkerEvent(uint64_t a1, uint64_t a2, int a3)
{
  int v14 = a3;
  sub_216851EE4((uint64_t)&v12, "Trace", "TraceCollector::_PerThreadData::MarkerEvent");
  atomic_store(1u, (unsigned __int8 *)a1);
  explicit = (pxrInternal__aapl__pxrReserved__::TraceEventContainer *)atomic_load_explicit((atomic_ullong *volatile)(a1 + 8), memory_order_acquire);
  int v11 = 0;
  uint64_t v10 = sub_2168C7BFC(*((void *)explicit + 5) + 16, a2, a2) + 2;
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::TraceEvent *)sub_2168D1710(explicit, (uint64_t)&v11, &v10, &v14);
  uint64_t TimeStamp = pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(v6);
  atomic_store(0, (unsigned __int8 *)a1);
  while (v13--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v12);
  return TimeStamp;
}

void sub_2168D07A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  atomic_store(0, v4);
  sub_21684E6B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceCollector::_EndEventAtTime(pxrInternal__aapl__pxrReserved__::TraceCollector *a1, uint64_t a2, int a3, double a4)
{
  uint64_t result = sub_216851EE4((uint64_t)&v11, "Trace", "TraceCollector::EndEventAtTime (key, double)");
  if (atomic_load_explicit(pxrInternal__aapl__pxrReserved__::TraceCollector::_isEnabled, memory_order_acquire) == 1)
  {
    pxrInternal__aapl__pxrReserved__::TraceCollector::_GetThreadData(a1);
    uint64_t result = pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData::EndEventAtTime(v9, a2, a3, a4);
  }
  while (v12--)
    uint64_t result = pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v11);
  return result;
}

void sub_2168D086C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData::EndEventAtTime(uint64_t a1, uint64_t a2, int a3, double a4)
{
  int v15 = a3;
  atomic_store(1u, (unsigned __int8 *)a1);
  sub_216851EE4((uint64_t)&v13, "Trace", "TraceCollector::_PerThreadData::EndEventAtTime");
  unint64_t v12 = (unint64_t)(a4
                         * 1000.0
                         / pxrInternal__aapl__pxrReserved__::ArchTicksToSeconds((pxrInternal__aapl__pxrReserved__ *)0xF4240));
  explicit = (pxrInternal__aapl__pxrReserved__::TraceEventContainer *)atomic_load_explicit((atomic_ullong *volatile)(a1 + 8), memory_order_acquire);
  int v11 = 0;
  uint64_t v10 = sub_2168C7BFC(*((void *)explicit + 5) + 16, a2, a2) + 2;
  for (uint64_t result = sub_2168D17F4(explicit, (uint64_t)&v11, &v10, (uint64_t *)&v12, &v15);
        v14--;
  atomic_store(0, (unsigned __int8 *)a1);
  return result;
}

void sub_2168D096C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_21684E6B8((uint64_t)va);
  atomic_store(0, v4);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceCollector::_BeginEventAtTime(pxrInternal__aapl__pxrReserved__::TraceCollector *a1, uint64_t a2, int a3, double a4)
{
  uint64_t result = sub_216851EE4((uint64_t)&v11, "Trace", "TraceCollector::BeginEventAtTime (key, double)");
  if (atomic_load_explicit(pxrInternal__aapl__pxrReserved__::TraceCollector::_isEnabled, memory_order_acquire) == 1)
  {
    pxrInternal__aapl__pxrReserved__::TraceCollector::_GetThreadData(a1);
    uint64_t result = pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData::BeginEventAtTime(v9, a2, a3, a4);
  }
  while (v12--)
    uint64_t result = pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v11);
  return result;
}

void sub_2168D0A38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData::BeginEventAtTime(uint64_t a1, uint64_t a2, int a3, double a4)
{
  int v15 = a3;
  atomic_store(1u, (unsigned __int8 *)a1);
  sub_216851EE4((uint64_t)&v13, "Trace", "TraceCollector::_PerThreadData::BeginEventAtTime");
  unint64_t v12 = (unint64_t)(a4
                         * 1000.0
                         / pxrInternal__aapl__pxrReserved__::ArchTicksToSeconds((pxrInternal__aapl__pxrReserved__ *)0xF4240));
  explicit = (pxrInternal__aapl__pxrReserved__::TraceEventContainer *)atomic_load_explicit((atomic_ullong *volatile)(a1 + 8), memory_order_acquire);
  int v11 = 0;
  uint64_t v10 = sub_2168C7BFC(*((void *)explicit + 5) + 16, a2, a2) + 2;
  for (uint64_t result = sub_2168D1788(explicit, (uint64_t)&v11, &v10, (uint64_t *)&v12, &v15);
        v14--;
  atomic_store(0, (unsigned __int8 *)a1);
  return result;
}

void sub_2168D0B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_21684E6B8((uint64_t)va);
  atomic_store(0, v4);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceCollector::_MarkerEventAtTime(pxrInternal__aapl__pxrReserved__::TraceCollector *a1, uint64_t a2, int a3, double a4)
{
  uint64_t result = sub_216851EE4((uint64_t)&v11, "Trace", "TraceCollector::MarkerEventAtTime (key, double)");
  if (atomic_load_explicit(pxrInternal__aapl__pxrReserved__::TraceCollector::_isEnabled, memory_order_acquire) == 1)
  {
    pxrInternal__aapl__pxrReserved__::TraceCollector::_GetThreadData(a1);
    uint64_t result = pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData::MarkerEventAtTime(v9, a2, a3, a4);
  }
  while (v12--)
    uint64_t result = pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v11);
  return result;
}

void sub_2168D0C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData::MarkerEventAtTime(uint64_t a1, uint64_t a2, int a3, double a4)
{
  int v15 = a3;
  atomic_store(1u, (unsigned __int8 *)a1);
  sub_216851EE4((uint64_t)&v13, "Trace", "TraceCollector::_PerThreadData::MarkerEventAtTime");
  unint64_t v12 = (unint64_t)(a4
                         * 1000.0
                         / pxrInternal__aapl__pxrReserved__::ArchTicksToSeconds((pxrInternal__aapl__pxrReserved__ *)0xF4240));
  explicit = (pxrInternal__aapl__pxrReserved__::TraceEventContainer *)atomic_load_explicit((atomic_ullong *volatile)(a1 + 8), memory_order_acquire);
  int v11 = 0;
  uint64_t v10 = sub_2168C7BFC(*((void *)explicit + 5) + 16, a2, a2) + 2;
  for (uint64_t result = sub_2168D1864(explicit, (uint64_t)&v11, &v10, (uint64_t *)&v12, &v15);
        v14--;
  atomic_store(0, (unsigned __int8 *)a1);
  return result;
}

void sub_2168D0D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_21684E6B8((uint64_t)va);
  atomic_store(0, v4);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceCollector::GetScopeOverhead(pxrInternal__aapl__pxrReserved__::TraceCollector *this)
{
  return *((void *)this + 6);
}

void pxrInternal__aapl__pxrReserved__::TraceCollector::Clear(atomic_ullong *this)
{
  for (uint64_t i = (atomic_ullong *)atomic_load_explicit(this + 1, memory_order_acquire); i; uint64_t i = (atomic_ullong *)i[8])
    pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData::Clear(i);
}

void pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData::Clear(atomic_ullong *this)
{
  pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData::GetCollectionData(this, &v2);
  uint64_t v1 = v2;
  uint64_t v2 = 0;
  if (v1) {
    sub_2168CA67C((uint64_t)&v2, v1);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceCollector::_EndScope(pxrInternal__aapl__pxrReserved__::TraceCollector *a1, void *a2, int a3)
{
  pxrInternal__aapl__pxrReserved__::TraceCollector::_GetThreadData(a1);

  return sub_2168D0DE4(v5, a2, a3);
}

uint64_t sub_2168D0DE4(uint64_t a1, void *a2, int a3)
{
  atomic_store(1u, (unsigned __int8 *)a1);
  int v5 = 0;
  int v6 = a3;
  uint64_t result = sub_2168D1698((pxrInternal__aapl__pxrReserved__::TraceEventContainer *)atomic_load_explicit((atomic_ullong *volatile)(a1 + 8), memory_order_acquire), (uint64_t)&v5, a2, &v6);
  atomic_store(0, (unsigned __int8 *)a1);
  return result;
}

void sub_2168D0E38(_Unwind_Exception *a1)
{
  atomic_store(0, v1);
  _Unwind_Resume(a1);
}

unint64_t pxrInternal__aapl__pxrReserved__::TraceCollector::_MeasureScopeOverhead(pxrInternal__aapl__pxrReserved__::TraceCollector *this, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t (*a5)(const void *, int))
{
  uint64_t v7 = &pxrInternal__aapl__pxrReserved__::externallyVisibleValue;
  *(void *)uint64_t v8 = &v7;
  unint64_t result = pxrInternal__aapl__pxrReserved__::Arch_MeasureExecutionTime((pxrInternal__aapl__pxrReserved__ *)0x989680, 0, v8, (uint64_t (*)(void, void))sub_2168D14B0, a5);
  *((void *)this + 6) = result;
  return result;
}

void pxrInternal__aapl__pxrReserved__::TraceCollector::CreateCollection(atomic_ullong *this)
{
  sub_216851EE4((uint64_t)&v11, "Trace", "TraceCollection");
  uint64_t v2 = (uint64_t **)malloc(0x18uLL);
  while (1)
  {
    int v3 = (int)v12;
    LODWORD(v12) = v12 - 1;
    if (!v3) {
      break;
    }
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End((uint64_t)v11);
  }
  v2[2] = 0;
  v2[1] = 0;
  *uint64_t v2 = (uint64_t *)(v2 + 1);
  int v14 = v2;
  for (uint64_t i = (atomic_ullong *)atomic_load_explicit(this + 1, memory_order_acquire); i; uint64_t i = (atomic_ullong *)i[8])
  {
    pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData::GetCollectionData(i, &v11);
    int v5 = v11;
    int v6 = (void *)v11[2];
    if (v6) {
      int v6 = (void *)*v6;
    }
    uint64_t v7 = v11[1];
    if (v7) {
      uint64_t v8 = (void *)(v7 + 32);
    }
    else {
      uint64_t v8 = 0;
    }
    if (v8 == v6)
    {
      int v11 = 0;
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::TraceCollection::AddToCollection(v14, i + 2, (uint64_t *)&v11);
      int v5 = v11;
      int v11 = 0;
      if (!v5) {
        continue;
      }
    }
    sub_2168CA67C((uint64_t)&v11, v5);
  }
  uint64_t v9 = v14;
  if (v14)
  {
    uint64_t v10 = (std::__shared_weak_count *)operator new(0x20uLL);
    v10->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C74CF60;
    v10->__shared_owners_ = 0;
    v10->__shared_weak_owners_ = 0;
    v10[1].__vftable = (std::__shared_weak_count_vtbl *)v9;
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v13 = v10;
  int v14 = 0;
  int v11 = (uint64_t *)&unk_26C74CF28;
  unint64_t v12 = v9;
  if (v10)
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    sub_216784EC4(v10);
  }
  pxrInternal__aapl__pxrReserved__::TfNotice::Send((pxrInternal__aapl__pxrReserved__::TfNotice *)&v11);
  pxrInternal__aapl__pxrReserved__::TraceCollectionAvailable::~TraceCollectionAvailable((pxrInternal__aapl__pxrReserved__::TraceCollectionAvailable *)&v11);
  sub_2168CA728(&v14, 0);
}

void sub_2168D101C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_2168CA728((void ***)va, 0);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData::GetCollectionData@<X0>(atomic_ullong *this@<X0>, void *a2@<X8>)
{
  BOOL v4 = (pxrInternal__aapl__pxrReserved__::TraceEventList *)operator new(0x80uLL);
  uint64_t result = pxrInternal__aapl__pxrReserved__::TraceEventList::TraceEventList(v4);
  *a2 = atomic_exchange(this + 1, (unint64_t)v4);
  while ((atomic_load_explicit((atomic_uchar *volatile)this, memory_order_acquire) & 1) != 0)
    ;
  return result;
}

void sub_2168D10B8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData *pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData::_PerThreadData(pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData *this)
{
  *(unsigned char *)this = 0;
  uint64_t v2 = (char *)this + 16;
  pxrInternal__aapl__pxrReserved__::TraceThreadId::TraceThreadId((pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData *)((char *)this + 16));
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  pxrInternal__aapl__pxrReserved__::TraceThreadId::TraceThreadId((pxrInternal__aapl__pxrReserved__::TraceThreadId *)&v5);
  if (*((char *)this + 39) < 0) {
    operator delete(*(void **)v2);
  }
  *(_OWORD *)uint64_t v2 = v5;
  *((void *)v2 + 2) = v6;
  int v3 = (pxrInternal__aapl__pxrReserved__::TraceEventList *)operator new(0x80uLL);
  pxrInternal__aapl__pxrReserved__::TraceEventList::TraceEventList(v3);
  atomic_store((unint64_t)v3, (unint64_t *)this + 1);
  return this;
}

void sub_2168D115C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v13 = v12;
  operator delete(v13);
  sub_2168D15CC((void ***)&a10);
  if (*(char *)(v10 + 39) < 0) {
    operator delete(*v11);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData::~_PerThreadData(pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData *this)
{
  explicit = (uint64_t *)atomic_load_explicit((atomic_ullong *volatile)this + 1, memory_order_acquire);
  if (explicit)
  {
    sub_2168CA43C(explicit + 9);
    sub_2168CA57C(explicit + 4);
    pxrInternal__aapl__pxrReserved__::TraceEventContainer::~TraceEventContainer((pxrInternal__aapl__pxrReserved__::TraceEventContainer *)explicit);
    operator delete(v3);
  }
  BOOL v4 = (void **)((char *)this + 40);
  sub_2168D15CC(&v4);
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData::_EndScope(uint64_t a1, void *a2, int a3)
{
  int v6 = a3;
  explicit = (pxrInternal__aapl__pxrReserved__::TraceEventContainer *)atomic_load_explicit((atomic_ullong *volatile)(a1 + 8), memory_order_acquire);
  int v5 = 0;
  return sub_2168D1698(explicit, (uint64_t)&v5, a2, &v6);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData::CounterDelta(uint64_t a1, uint64_t a2, int a3, double a4)
{
  double v10 = a4;
  int v8 = 0;
  int v9 = a3;
  atomic_store(1u, (unsigned __int8 *)a1);
  explicit = (pxrInternal__aapl__pxrReserved__::TraceEventContainer *)atomic_load_explicit((atomic_ullong *volatile)(a1 + 8), memory_order_acquire);
  uint64_t v7 = sub_2168C7BFC(*((void *)explicit + 5) + 16, a2, a2) + 2;
  uint64_t result = sub_2168D18D4(explicit, (uint64_t)&v8, &v7, (uint64_t *)&v10, &v9);
  atomic_store(0, (unsigned __int8 *)a1);
  return result;
}

void sub_2168D12CC(_Unwind_Exception *a1)
{
  atomic_store(0, v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData::CounterValue(uint64_t a1, uint64_t a2, int a3, double a4)
{
  double v10 = a4;
  int v8 = 0;
  int v9 = a3;
  atomic_store(1u, (unsigned __int8 *)a1);
  explicit = (pxrInternal__aapl__pxrReserved__::TraceEventContainer *)atomic_load_explicit((atomic_ullong *volatile)(a1 + 8), memory_order_acquire);
  uint64_t v7 = sub_2168C7BFC(*((void *)explicit + 5) + 16, a2, a2) + 2;
  uint64_t result = sub_2168D195C(explicit, (uint64_t)&v8, &v7, (uint64_t *)&v10, &v9);
  atomic_store(0, (unsigned __int8 *)a1);
  return result;
}

void sub_2168D1348(_Unwind_Exception *a1)
{
  atomic_store(0, v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2168D1350(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1 + 1;
  if (!v3
    || ((v4 = *(unsigned __int8 *)(sub_216850B68(v2) + 14), result = *a1, v4) ? (BOOL v6 = result == 0) : (BOOL v6 = 1), v6))
  {
    uint64_t v7 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/weakPtrFacade.h", 47);
    v8[0] = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/weakPtrFacade.h", (uint64_t)v7, 0x2Fu);
    v8[1] = "operator->";
    float64x2_t v8[2] = 216;
    float v8[3] = "DataType *pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr, pxr"
            "Internal__aapl__pxrReserved__::TraceReporter>::operator->() const [PtrTemplate = pxrInternal__aapl__pxrReser"
            "ved__::TfWeakPtr, Type = pxrInternal__aapl__pxrReserved__::TraceReporter]";
    char v9 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError((uint64_t)v8, (pxrInternal__aapl__pxrReserved__ *)(0x8000000217455106 & 0x7FFFFFFFFFFFFFFFLL));
  }
  return result;
}

atomic_ullong *sub_2168D13F8(atomic_ullong *a1)
{
  for (uint64_t i = (pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData *)atomic_load_explicit(a1, memory_order_acquire); i; uint64_t i = v3)
  {
    uint64_t v3 = (pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData *)*((void *)i + 8);
    pxrInternal__aapl__pxrReserved__::TraceCollector::_PerThreadData::~_PerThreadData(i);
    tbb::internal::NFS_Free(v4, v5);
  }
  return a1;
}

uint64_t sub_2168D143C(pxrInternal__aapl__pxrReserved__::TraceEventContainer *a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t *a5, int *a6)
{
  uint64_t v6 = *(void *)a1;
  *(void *)a1 += 32;
  uint64_t v7 = *a4;
  uint64_t v8 = *a5;
  int v9 = *a6;
  *(void *)uint64_t v6 = *a3;
  *(_DWORD *)(v6 + 8) = v9;
  *(unsigned char *)(v6 + 13) = 2;
  *(void *)(v6 + 16) = v8;
  *(void *)(v6 + 24) = v7;
  **((void **)a1 + 2) += 32;
  if (**((void **)a1 + 2) == *(void *)(*((void *)a1 + 2) + 8)) {
    pxrInternal__aapl__pxrReserved__::TraceEventContainer::Allocate(a1);
  }
  return v6;
}

uint64_t sub_2168D14B0(void ***a1, int a2)
{
  for (uint64_t i = mach_absolute_time(); a2; --a2)
    ++***a1;
  return mach_absolute_time() - i;
}

void sub_2168D150C(uint64_t a1, void **a2)
{
  if (a2)
  {
    sub_2168CA77C((uint64_t)a2, a2[1]);
    free(a2);
  }
}

void sub_2168D1558(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void sub_2168D1580(uint64_t a1)
{
}

uint64_t sub_2168D1588(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C74CFA0)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_2168D15CC(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v3 = (char *)v1[1];
    int v4 = **a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *((void *)v3 - 1);
        if ((v5 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        v3 -= 32;
      }
      while (v3 != v2);
      int v4 = **a1;
    }
    v1[1] = v2;
    operator delete(v4);
  }
}

uint64_t sub_2168D1624(pxrInternal__aapl__pxrReserved__::TraceEventContainer *a1, uint64_t a2, void *a3, int *a4)
{
  uint64_t v5 = *(void *)a1;
  *(void *)a1 += 32;
  int v6 = *a4;
  *(void *)uint64_t v5 = *a3;
  *(_DWORD *)(v5 + 8) = v6;
  *(unsigned char *)(v5 + 13) = 0;
  *(void *)(v5 + 16) = mach_absolute_time();
  **((void **)a1 + 2) += 32;
  if (**((void **)a1 + 2) == *(void *)(*((void *)a1 + 2) + 8)) {
    pxrInternal__aapl__pxrReserved__::TraceEventContainer::Allocate(a1);
  }
  return v5;
}

uint64_t sub_2168D1698(pxrInternal__aapl__pxrReserved__::TraceEventContainer *a1, uint64_t a2, void *a3, int *a4)
{
  uint64_t v5 = *(void *)a1;
  *(void *)a1 += 32;
  int v6 = *a4;
  *(void *)uint64_t v5 = *a3;
  *(_DWORD *)(v5 + 8) = v6;
  *(unsigned char *)(v5 + 13) = 1;
  *(void *)(v5 + 16) = mach_absolute_time();
  **((void **)a1 + 2) += 32;
  if (**((void **)a1 + 2) == *(void *)(*((void *)a1 + 2) + 8)) {
    pxrInternal__aapl__pxrReserved__::TraceEventContainer::Allocate(a1);
  }
  return v5;
}

uint64_t sub_2168D1710(pxrInternal__aapl__pxrReserved__::TraceEventContainer *a1, uint64_t a2, void *a3, int *a4)
{
  uint64_t v5 = *(void *)a1;
  *(void *)a1 += 32;
  int v6 = *a4;
  *(void *)uint64_t v5 = *a3;
  *(_DWORD *)(v5 + 8) = v6;
  *(unsigned char *)(v5 + 13) = 3;
  *(void *)(v5 + 16) = mach_absolute_time();
  **((void **)a1 + 2) += 32;
  if (**((void **)a1 + 2) == *(void *)(*((void *)a1 + 2) + 8)) {
    pxrInternal__aapl__pxrReserved__::TraceEventContainer::Allocate(a1);
  }
  return v5;
}

uint64_t sub_2168D1788(pxrInternal__aapl__pxrReserved__::TraceEventContainer *a1, uint64_t a2, void *a3, uint64_t *a4, int *a5)
{
  uint64_t v5 = *(void *)a1;
  *(void *)a1 += 32;
  uint64_t v6 = *a4;
  int v7 = *a5;
  *(void *)uint64_t v5 = *a3;
  *(_DWORD *)(v5 + 8) = v7;
  *(unsigned char *)(v5 + 13) = 0;
  *(void *)(v5 + 16) = v6;
  **((void **)a1 + 2) += 32;
  if (**((void **)a1 + 2) == *(void *)(*((void *)a1 + 2) + 8)) {
    pxrInternal__aapl__pxrReserved__::TraceEventContainer::Allocate(a1);
  }
  return v5;
}

uint64_t sub_2168D17F4(pxrInternal__aapl__pxrReserved__::TraceEventContainer *a1, uint64_t a2, void *a3, uint64_t *a4, int *a5)
{
  uint64_t v5 = *(void *)a1;
  *(void *)a1 += 32;
  uint64_t v6 = *a4;
  int v7 = *a5;
  *(void *)uint64_t v5 = *a3;
  *(_DWORD *)(v5 + 8) = v7;
  *(unsigned char *)(v5 + 13) = 1;
  *(void *)(v5 + 16) = v6;
  **((void **)a1 + 2) += 32;
  if (**((void **)a1 + 2) == *(void *)(*((void *)a1 + 2) + 8)) {
    pxrInternal__aapl__pxrReserved__::TraceEventContainer::Allocate(a1);
  }
  return v5;
}

uint64_t sub_2168D1864(pxrInternal__aapl__pxrReserved__::TraceEventContainer *a1, uint64_t a2, void *a3, uint64_t *a4, int *a5)
{
  uint64_t v5 = *(void *)a1;
  *(void *)a1 += 32;
  uint64_t v6 = *a4;
  int v7 = *a5;
  *(void *)uint64_t v5 = *a3;
  *(_DWORD *)(v5 + 8) = v7;
  *(unsigned char *)(v5 + 13) = 3;
  *(void *)(v5 + 16) = v6;
  **((void **)a1 + 2) += 32;
  if (**((void **)a1 + 2) == *(void *)(*((void *)a1 + 2) + 8)) {
    pxrInternal__aapl__pxrReserved__::TraceEventContainer::Allocate(a1);
  }
  return v5;
}

uint64_t sub_2168D18D4(pxrInternal__aapl__pxrReserved__::TraceEventContainer *a1, uint64_t a2, void *a3, uint64_t *a4, int *a5)
{
  uint64_t v6 = *(void *)a1;
  *(void *)a1 += 32;
  uint64_t v7 = *a4;
  int v8 = *a5;
  *(void *)uint64_t v6 = *a3;
  *(_DWORD *)(v6 + 8) = v8;
  *(unsigned char *)(v6 + 13) = 4;
  *(void *)(v6 + 16) = mach_absolute_time();
  *(void *)(v6 + 24) = v7;
  **((void **)a1 + 2) += 32;
  if (**((void **)a1 + 2) == *(void *)(*((void *)a1 + 2) + 8)) {
    pxrInternal__aapl__pxrReserved__::TraceEventContainer::Allocate(a1);
  }
  return v6;
}

uint64_t sub_2168D195C(pxrInternal__aapl__pxrReserved__::TraceEventContainer *a1, uint64_t a2, void *a3, uint64_t *a4, int *a5)
{
  uint64_t v6 = *(void *)a1;
  *(void *)a1 += 32;
  uint64_t v7 = *a4;
  int v8 = *a5;
  *(void *)uint64_t v6 = *a3;
  *(_DWORD *)(v6 + 8) = v8;
  *(unsigned char *)(v6 + 13) = 5;
  *(void *)(v6 + 16) = mach_absolute_time();
  *(void *)(v6 + 24) = v7;
  **((void **)a1 + 2) += 32;
  if (**((void **)a1 + 2) == *(void *)(*((void *)a1 + 2) + 8)) {
    pxrInternal__aapl__pxrReserved__::TraceEventContainer::Allocate(a1);
  }
  return v6;
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceCounterAccumulator::Update(pxrInternal__aapl__pxrReserved__::TraceCounterAccumulator *this, pxrInternal__aapl__pxrReserved__::TraceCollection **a2)
{
  return pxrInternal__aapl__pxrReserved__::TraceCollection::Iterate(a2, this);
}

void pxrInternal__aapl__pxrReserved__::TraceCounterAccumulator::OnEndCollection(pxrInternal__aapl__pxrReserved__::TraceCounterAccumulator *this)
{
  uint64_t v1 = (char *)*((void *)this + 1);
  uint64_t v27 = (char *)this + 8;
  uint64_t v30 = (char *)this + 16;
  if (v1 != (char *)this + 16)
  {
    uint64_t v2 = (char *)this + 72;
    uint64_t v3 = (char *)this + 32;
    uint64_t v29 = (char *)this + 72;
    do
    {
      uint64_t v31 = (uint64_t *)(v1 + 32);
      double v4 = *((double *)sub_2168CB2C8((uint64_t)v2, (void *)v1 + 4, (uint64_t)&unk_2174BFD90, &v31) + 3);
      uint64_t v5 = (char *)*((void *)v1 + 5);
      if (v5 != v1 + 48)
      {
        do
        {
          double v6 = -0.0;
          if (v5[48]) {
            double v6 = v4;
          }
          double v4 = *((double *)v5 + 5) + v6;
          uint64_t v31 = (uint64_t *)(v1 + 32);
          uint64_t v7 = sub_2168D1DA4((uint64_t)v3, (void *)v1 + 4, (uint64_t)&unk_2174BFD90, &v31);
          unint64_t v8 = v7[4];
          unint64_t v9 = v7[5];
          if (v8 >= v9)
          {
            uint64_t v11 = v7[3];
            uint64_t v12 = (uint64_t)(v8 - v11) >> 4;
            unint64_t v13 = v12 + 1;
            if ((unint64_t)(v12 + 1) >> 60) {
              sub_21677CB10();
            }
            uint64_t v14 = v9 - v11;
            if (v14 >> 3 > v13) {
              unint64_t v13 = v14 >> 3;
            }
            if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v15 = v13;
            }
            uint64_t v16 = (char *)sub_216787EE0((uint64_t)(v7 + 5), v15);
            BOOL v18 = (double *)&v16[16 * v12];
            *BOOL v18 = *((double *)v5 + 4);
            v18[1] = v4;
            int v20 = (char *)v7[3];
            char v19 = (char *)v7[4];
            size_t v21 = v18;
            if (v19 != v20)
            {
              do
              {
                *((_OWORD *)v21 - 1) = *((_OWORD *)v19 - 1);
                v21 -= 2;
                v19 -= 16;
              }
              while (v19 != v20);
              char v19 = (char *)v7[3];
            }
            double v10 = (char *)(v18 + 2);
            void v7[3] = v21;
            void v7[4] = v18 + 2;
            uint64_t v7[5] = &v16[16 * v17];
            if (v19) {
              operator delete(v19);
            }
          }
          else
          {
            *(void *)unint64_t v8 = *((void *)v5 + 4);
            *(double *)(v8 + 8) = v4;
            double v10 = (char *)(v8 + 16);
          }
          void v7[4] = v10;
          uint64_t v22 = (char *)*((void *)v5 + 1);
          if (v22)
          {
            do
            {
              int v23 = v22;
              uint64_t v22 = *(char **)v22;
            }
            while (v22);
          }
          else
          {
            do
            {
              int v23 = (char *)*((void *)v5 + 2);
              BOOL v24 = *(void *)v23 == (void)v5;
              uint64_t v5 = v23;
            }
            while (!v24);
          }
          uint64_t v5 = v23;
        }
        while (v23 != v1 + 48);
      }
      uint64_t v31 = (uint64_t *)(v1 + 32);
      uint64_t v2 = v29;
      *((double *)sub_2168CB2C8((uint64_t)v29, (void *)v1 + 4, (uint64_t)&unk_2174BFD90, &v31) + 3) = v4;
      uint64_t v25 = (char *)*((void *)v1 + 1);
      if (v25)
      {
        do
        {
          int v26 = v25;
          uint64_t v25 = *(char **)v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          int v26 = (char *)*((void *)v1 + 2);
          BOOL v24 = *(void *)v26 == (void)v1;
          uint64_t v1 = v26;
        }
        while (!v24);
      }
      uint64_t v1 = v26;
    }
    while (v26 != v30);
  }
  sub_2168C092C((uint64_t)v27, *((void **)this + 2));
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 1) = v30;
}

char *pxrInternal__aapl__pxrReserved__::TraceCounterAccumulator::OnEvent(uint64_t a1, int a2, uint64_t *a3, pxrInternal__aapl__pxrReserved__::TraceEvent *this)
{
  uint64_t result = (char *)pxrInternal__aapl__pxrReserved__::TraceEvent::GetType(this);
  if (result == 6)
  {
    unint64_t v13 = a3;
    unint64_t v8 = (uint64_t **)(sub_2168D200C((uint64_t **)(a1 + 8), a3, (uint64_t)&unk_2174BFD90, &v13) + 5);
    uint64_t TimeStamp = (uint64_t *)pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(this);
    double CounterValue = pxrInternal__aapl__pxrReserved__::TraceEvent::GetCounterValue(this);
    unint64_t v13 = TimeStamp;
    double v14 = CounterValue;
    char v15 = 0;
  }
  else
  {
    if (result != 5) {
      return result;
    }
    unint64_t v13 = a3;
    unint64_t v8 = (uint64_t **)(sub_2168D200C((uint64_t **)(a1 + 8), a3, (uint64_t)&unk_2174BFD90, &v13) + 5);
    unint64_t v9 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(this);
    double v10 = pxrInternal__aapl__pxrReserved__::TraceEvent::GetCounterValue(this);
    unint64_t v13 = v9;
    double v14 = v10;
    char v15 = 1;
  }
  return sub_2168D2120(v8, (uint64_t *)&v13);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceCounterAccumulator::AcceptsCategory(pxrInternal__aapl__pxrReserved__::TraceCounterAccumulator *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 64))();
}

void pxrInternal__aapl__pxrReserved__::TraceCounterAccumulator::SetCurrentValues(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a1 + 72);
  if (v3 != (void *)a2)
  {
    *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 32);
    sub_2168D21B8(v3, *(double **)(a2 + 16), 0);
  }
}

void *sub_2168D1DA4(uint64_t a1, void *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v6 = *a2 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = bswap64(0x9E3779B97F4A7C55 * v6);
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = v7;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = v7 & (v8 - 1);
    }
    double v10 = *(void **)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = (void *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if ((v11[2] & 0xFFFFFFFFFFFFFFF8) == v6) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  sub_2168C3C3C(a1, v7, a4, (uint64_t)v22);
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_21678A04C(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  char v19 = *(void **)(*(void *)a1 + 8 * v4);
  if (v19)
  {
    *(void *)v22[0] = *v19;
    *char v19 = v22[0];
  }
  else
  {
    *(void *)v22[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v22[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v22[0])
    {
      unint64_t v20 = *(void *)(*(void *)v22[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v20 >= v8) {
          v20 %= v8;
        }
      }
      else
      {
        v20 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v20) = v22[0];
    }
  }
  uint64_t v11 = (void *)v22[0];
  v22[0] = 0;
  ++*(void *)(a1 + 24);
  sub_2168C4D6C((uint64_t)v22, 0);
  return v11;
}

void sub_2168D1FF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168C4D6C((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t *sub_2168D200C(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v6 = (uint64_t **)sub_2168BE158((uint64_t)a1, &v9, a2);
  uint64_t result = *v6;
  if (!*v6)
  {
    sub_2168D20A4((uint64_t)a1, a4, (uint64_t)&v8);
    sub_21677B358(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

void *sub_2168D20A4@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  unint64_t v6 = operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  uint64_t v7 = **a2;
  void v6[4] = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v6[4] &= 0xFFFFFFFFFFFFFFF8;
  }
  v6[6] = 0;
  v6[7] = 0;
  uint64_t result = v6 + 6;
  *(result - 1) = result;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

char *sub_2168D2120(uint64_t **a1, uint64_t *a2)
{
  unint64_t v4 = (char *)operator new(0x38uLL);
  unint64_t v5 = *a2;
  *((void *)v4 + 4) = *a2;
  *(_OWORD *)(v4 + 40) = *(_OWORD *)(a2 + 1);
  unint64_t v6 = a1 + 1;
  uint64_t v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        unint64_t v6 = (uint64_t **)v7;
        if (v5 >= v7[4]) {
          break;
        }
        uint64_t v7 = (uint64_t *)*v7;
        unint64_t v8 = v6;
        if (!*v6) {
          goto LABEL_8;
        }
      }
      uint64_t v7 = (uint64_t *)v7[1];
    }
    while (v7);
    unint64_t v8 = v6 + 1;
  }
  else
  {
    unint64_t v8 = a1 + 1;
  }
LABEL_8:
  sub_21677B358(a1, (uint64_t)v6, v8, (uint64_t *)v4);
  return v4;
}

void sub_2168D21B8(void *a1, double *a2, double *a3)
{
  unint64_t v4 = a2;
  uint64_t v6 = a1[1];
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
      *(void *)(*a1 + 8 * i) = 0;
    unint64_t v8 = (void *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8) {
      BOOL v9 = a2 == a3;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      double v10 = v8;
    }
    else
    {
      do
      {
        sub_2168D2318(v8 + 2, (void *)v4 + 2);
        float v8[3] = *((void *)v4 + 3);
        double v10 = (void *)*v8;
        sub_2168D22B4(a1, v8);
        unint64_t v4 = *(double **)v4;
        if (v10) {
          BOOL v11 = v4 == a3;
        }
        else {
          BOOL v11 = 1;
        }
        unint64_t v8 = v10;
      }
      while (!v11);
    }
    sub_2168C08DC((int)a1, v10);
  }
  while (v4 != a3)
  {
    sub_2168D2738(a1, v4 + 2);
    unint64_t v4 = *(double **)v4;
  }
}

void sub_2168D228C(void *a1)
{
  __cxa_begin_catch(a1);
  sub_217324288(v1);
  __cxa_rethrow();
}

void sub_2168D22A0(_Unwind_Exception *a1)
{
}

void *sub_2168D22B4(void *a1, void *a2)
{
  unint64_t v4 = a2 + 2;
  unint64_t v5 = bswap64(0x9E3779B97F4A7C55 * (a2[2] & 0xFFFFFFFFFFFFFFF8));
  a2[1] = v5;
  uint64_t v6 = sub_2168D236C((uint64_t)a1, v5, v4);
  sub_216862FF0(a1, a2, v6);
  return a2;
}

void *sub_2168D2318(void *result, void *a2)
{
  if (a2 != result)
  {
    if ((*a2 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(*a2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *a2 &= 0xFFFFFFFFFFFFFFF8;
    }
    if ((*result & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*result & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    *uint64_t result = *a2;
  }
  return result;
}

void *sub_2168D236C(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    uint64_t v9 = 2 * v6;
    BOOL v10 = v6 < 3 || (v6 & (v6 - 1)) != 0;
    size_t v11 = v10 | v9;
    unint64_t v12 = vcvtps_u32_f32(v7 / v8);
    if (v11 <= v12) {
      size_t v13 = v12;
    }
    else {
      size_t v13 = v11;
    }
    sub_2168D24CC(a1, v13);
    unint64_t v6 = *(void *)(a1 + 8);
  }
  uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    unint64_t v15 = a2;
    if (v6 <= a2) {
      unint64_t v15 = a2 % v6;
    }
  }
  else
  {
    unint64_t v15 = (v6 - 1) & a2;
  }
  unint64_t v16 = *(void **)(*(void *)a1 + 8 * v15);
  if (!v16) {
    return 0;
  }
  int v17 = 0;
  do
  {
    uint64_t result = v16;
    unint64_t v16 = (void *)*v16;
    if (!v16) {
      break;
    }
    unint64_t v19 = v16[1];
    if (v14.u32[0] > 1uLL)
    {
      unint64_t v20 = v16[1];
      if (v19 >= v6) {
        unint64_t v20 = v19 % v6;
      }
    }
    else
    {
      unint64_t v20 = v19 & (v6 - 1);
    }
    if (v20 != v15) {
      break;
    }
    BOOL v21 = v19 == a2 && (v16[2] & 0xFFFFFFFFFFFFFFF8) == (*a3 & 0xFFFFFFFFFFFFFFF8);
    int v22 = v17 & !v21;
    v17 |= v21;
  }
  while (v22 != 1);
  return result;
}

void sub_2168D24CC(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      sub_2168D25BC(a1, prime);
    }
  }
}

void sub_2168D25BC(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      sub_21677CA1C();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      for (uint64_t i = (void *)*v7; *v7; uint64_t i = (void *)*v7)
      {
        unint64_t v12 = i[1];
        if (v9.u32[0] > 1uLL)
        {
          if (v12 >= a2) {
            v12 %= a2;
          }
        }
        else
        {
          v12 &= a2 - 1;
        }
        if (v12 == v8)
        {
          uint64_t v7 = i;
        }
        else
        {
          size_t v13 = i;
          if (*(void *)(*(void *)a1 + 8 * v12))
          {
            do
            {
              uint8x8_t v14 = v13;
              size_t v13 = (void *)*v13;
            }
            while (v13 && (i[2] & 0xFFFFFFFFFFFFFFF8) == (v13[2] & 0xFFFFFFFFFFFFFFF8));
            *uint64_t v7 = v13;
            *uint8x8_t v14 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = i;
          }
          else
          {
            *(void *)(*(void *)a1 + 8 * v12) = v7;
            uint64_t v7 = i;
            unint64_t v8 = v12;
          }
        }
      }
    }
  }
  else
  {
    BOOL v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void *sub_2168D2738(void *a1, double *a2)
{
  sub_2168D278C((uint64_t)a1, a2, (uint64_t)&v4);
  return sub_2168D22B4(a1, v4);
}

void sub_2168D2774(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168BE6D4((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

double sub_2168D278C@<D0>(uint64_t a1@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 16;
  uint64_t v6 = (double *)operator new(0x20uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *uint64_t v6 = 0.0;
  v6[1] = 0.0;
  double v7 = *a2;
  unint64_t v6[2] = *a2;
  if ((LOBYTE(v7) & 7) != 0)
  {
    char add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed);
    double v7 = v6[2];
    if ((add_explicit & 1) == 0)
    {
      *(void *)&v7 &= 0xFFFFFFFFFFFFFFF8;
      unint64_t v6[2] = v7;
    }
  }
  double result = a2[1];
  v6[3] = result;
  *(unsigned char *)(a3 + 16) = 1;
  *((void *)v6 + 1) = bswap64(0x9E3779B97F4A7C55 * (*(void *)&v7 & 0xFFFFFFFFFFFFFFF8));
  return result;
}

void pxrInternal__aapl__pxrReserved__::TraceDataBuffer::Allocator::AllocateBlock(pxrInternal__aapl__pxrReserved__::TraceDataBuffer::Allocator *this, unint64_t a2, uint64_t a3)
{
  if (a2 <= 8) {
    unint64_t v4 = 0;
  }
  else {
    unint64_t v4 = a2;
  }
  size_t v5 = v4 + a3;
  if (v5 <= *((void *)this + 8)) {
    size_t v6 = *((void *)this + 8);
  }
  else {
    size_t v6 = v5;
  }
  double v7 = (char *)operator new[](v6);
  long long __p = v7;
  *(void *)this = &v7[v6];
  *((void *)this + 1) = v7;
  sub_2168D28B4((void *)this + 2, (uint64_t *)&__p);
  unint64_t v8 = __p;
  long long __p = 0;
  if (v8) {
    operator delete[](v8);
  }
}

void sub_2168D2898(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete[](__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2168D28B4(void *a1, uint64_t *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_2168D2940(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  uint64_t v9 = *(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8));
  uint64_t v10 = *a2;
  *a2 = 0;
  *(void *)(v9 + 8 * (v8 & 0x1FF)) = v10;
  a1[5] = v7 + 1;
}

void sub_2168D2940(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_21677CB28(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      long long v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        char v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)char v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    unint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_216832B24(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_216832C3C((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_21677CB28((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        unint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)unint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      unint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  long long v56 = a1 + 3;
  *(void *)&long long v54 = sub_21677CB28((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  long long v53 = operator new(0x1000uLL);
  sub_216832D5C(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_216832E74((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_2168D2C0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceEvent::GetTimeStamp(pxrInternal__aapl__pxrReserved__::TraceEvent *this)
{
  return *((void *)this + 2);
}

double pxrInternal__aapl__pxrReserved__::TraceEvent::GetCounterValue(pxrInternal__aapl__pxrReserved__::TraceEvent *this)
{
  double result = 0.0;
  if ((*((unsigned char *)this + 13) & 0xFE) == 4) {
    return *((double *)this + 3);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::TraceEvent::GetData(pxrInternal__aapl__pxrReserved__::TraceEvent *this@<X0>, uint64_t a2@<X8>)
{
  int v3 = *((unsigned __int8 *)this + 13);
  if ((v3 & 0xFE) == 6)
  {
    unint64_t v4 = (char *)this + 24;
    if (v3 != 6) {
      unint64_t v4 = *(char **)v4;
    }
    switch(*((unsigned char *)this + 12))
    {
      case 0:
        sub_216779094(__p, v4);
        if (SHIBYTE(v8) < 0)
        {
          sub_216778F24((unsigned char *)a2, __p[0], (unint64_t)__p[1]);
          int v6 = SHIBYTE(v8);
          *(_DWORD *)(a2 + 24) = 1;
          if (v6 < 0) {
            operator delete(__p[0]);
          }
        }
        else
        {
          *(_OWORD *)a2 = *(_OWORD *)__p;
          *(void *)(a2 + 16) = v8;
          int v5 = 1;
LABEL_12:
          *(_DWORD *)(a2 + 24) = v5;
        }
        break;
      case 1:
        *(unsigned char *)a2 = *v4;
        int v5 = 2;
        goto LABEL_12;
      case 2:
        *(void *)a2 = *(void *)v4;
        int v5 = 3;
        goto LABEL_12;
      case 3:
        *(void *)a2 = *(void *)v4;
        int v5 = 4;
        goto LABEL_12;
      case 4:
        *(void *)a2 = *(void *)v4;
        int v5 = 5;
        goto LABEL_12;
      default:
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    *(_DWORD *)(a2 + 24) = 0;
  }
}

void sub_2168D2D88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceEvent::GetStartTimeStamp(pxrInternal__aapl__pxrReserved__::TraceEvent *this)
{
  if (*((unsigned char *)this + 13) == 2) {
    return *((void *)this + 3);
  }
  else {
    return 0;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceEvent::GetEndTimeStamp(pxrInternal__aapl__pxrReserved__::TraceEvent *this)
{
  if (*((unsigned char *)this + 13) == 2) {
    return *((void *)this + 2);
  }
  else {
    return 0;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceEvent::GetType(pxrInternal__aapl__pxrReserved__::TraceEvent *this)
{
  unint64_t v1 = *((unsigned __int8 *)this + 13);
  if (v1 >= 8) {
    char v2 = 0;
  }
  else {
    char v2 = 0x707060504030201uLL >> (8 * v1);
  }
  return v2 & 7;
}

pxrInternal__aapl__pxrReserved__::TraceEventContainer *pxrInternal__aapl__pxrReserved__::TraceEventContainer::TraceEventContainer(pxrInternal__aapl__pxrReserved__::TraceEventContainer *this)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 512;
  pxrInternal__aapl__pxrReserved__::TraceEventContainer::Allocate(this);
  return this;
}

{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 512;
  pxrInternal__aapl__pxrReserved__::TraceEventContainer::Allocate(this);
  return this;
}

void *pxrInternal__aapl__pxrReserved__::TraceEventContainer::Allocate(pxrInternal__aapl__pxrReserved__::TraceEventContainer *this)
{
  uint64_t v2 = *((void *)this + 3);
  unint64_t v3 = (v2 - 32) & 0xFFFFFFFFFFFFFFE0;
  double result = malloc(v3 + 32);
  *double result = result + 4;
  result[1] = (char *)result + v3 + 32;
  result[2] = 0;
  result[3] = 0;
  if (*((void *)this + 1))
  {
    uint64_t v5 = *((void *)this + 2);
    *(void *)(v5 + 24) = result;
    result[2] = v5;
    uint64_t v2 = *((void *)this + 3);
  }
  else
  {
    *((void *)this + 1) = result;
  }
  *(void *)this = result + 4;
  *((void *)this + 2) = result;
  *((void *)this + 3) = 2 * v2;
  return result;
}

void pxrInternal__aapl__pxrReserved__::TraceEventContainer::~TraceEventContainer(pxrInternal__aapl__pxrReserved__::TraceEventContainer *this)
{
  unint64_t v1 = (void *)*((void *)this + 1);
  if (v1)
  {
    do
    {
      uint64_t v2 = (void *)v1[3];
      free(v1);
      unint64_t v1 = v2;
    }
    while (v2);
  }
}

{
  void *v1;
  void *v2;

  unint64_t v1 = (void *)*((void *)this + 1);
  if (v1)
  {
    do
    {
      uint64_t v2 = (void *)v1[3];
      free(v1);
      unint64_t v1 = v2;
    }
    while (v2);
  }
}

void *pxrInternal__aapl__pxrReserved__::TraceEventContainer::_Node::DestroyList(void *result)
{
  if (result)
  {
    do
    {
      unint64_t v1 = (void *)result[3];
      free(result);
      double result = v1;
    }
    while (v1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::TraceEventContainer *pxrInternal__aapl__pxrReserved__::TraceEventContainer::TraceEventContainer(pxrInternal__aapl__pxrReserved__::TraceEventContainer *a1, void *a2)
{
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  *((void *)a1 + 3) = 512;
  pxrInternal__aapl__pxrReserved__::TraceEventContainer::Allocate(a1);
  uint64_t v4 = *(void *)a1;
  *(void *)a1 = *a2;
  *a2 = v4;
  uint64_t v5 = *((void *)a1 + 2);
  uint64_t v6 = a2[3];
  *((void *)a1 + 2) = a2[2];
  a2[2] = v5;
  uint64_t v7 = *((void *)a1 + 1);
  *((void *)a1 + 1) = a2[1];
  a2[1] = v7;
  *((void *)a1 + 3) = v6;
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  *((void *)a1 + 3) = 512;
  pxrInternal__aapl__pxrReserved__::TraceEventContainer::Allocate(a1);
  uint64_t v4 = *(void *)a1;
  *(void *)a1 = *a2;
  *a2 = v4;
  uint64_t v5 = *((void *)a1 + 2);
  uint64_t v6 = a2[3];
  *((void *)a1 + 2) = a2[2];
  a2[2] = v5;
  uint64_t v7 = *((void *)a1 + 1);
  *((void *)a1 + 1) = a2[1];
  a2[1] = v7;
  *((void *)a1 + 3) = v6;
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceEventContainer::operator=(uint64_t a1, void *a2)
{
  pxrInternal__aapl__pxrReserved__::TraceEventContainer::TraceEventContainer((pxrInternal__aapl__pxrReserved__::TraceEventContainer *)v8, a2);
  long long v3 = *(_OWORD *)v8;
  *(void *)uint64_t v8 = *(void *)a1;
  long long v4 = *(_OWORD *)(a1 + 8);
  *(void *)(a1 + 16) = *(void *)&v8[16];
  *(_OWORD *)a1 = v3;
  *(_OWORD *)&BOOL v8[8] = v4;
  uint64_t v5 = (void *)v4;
  if ((void)v4)
  {
    do
    {
      uint64_t v6 = (void *)v5[3];
      free(v5);
      uint64_t v5 = v6;
    }
    while (v6);
  }
  return a1;
}

void *pxrInternal__aapl__pxrReserved__::TraceEventContainer::Append(void *result, pxrInternal__aapl__pxrReserved__::TraceEventContainer *this)
{
  long long v3 = result;
  uint64_t v4 = *((void *)this + 1);
  uint64_t v5 = (void *)*((void *)this + 2);
  if (v5) {
    uint64_t v5 = (void *)*v5;
  }
  uint64_t v6 = (void *)(v4 + 32);
  if (!v4) {
    uint64_t v6 = 0;
  }
  if (v6 != v5)
  {
    uint64_t v8 = result[1];
    uint64_t v7 = (void *)result[2];
    if (v7) {
      uint64_t v9 = (void *)*v7;
    }
    else {
      uint64_t v9 = 0;
    }
    if (v8) {
      uint64_t v10 = (void *)(v8 + 32);
    }
    else {
      uint64_t v10 = 0;
    }
    if (v10 == v9)
    {
      return (void *)pxrInternal__aapl__pxrReserved__::TraceEventContainer::operator=((uint64_t)v3, this);
    }
    else
    {
      if (v7 + 4 == (void *)*v7)
      {
        uint64_t v11 = v7 + 2;
        v3[2] = v7[2];
        uint64_t v12 = v7[2];
        if (v12) {
          *(void *)(v12 + 24) = v7[3];
        }
        uint64_t v13 = v7[3];
        if (v13) {
          *(void *)(v13 + 16) = *v11;
        }
        *uint64_t v11 = 0;
        void v7[3] = 0;
        do
        {
          BOOL v14 = (void *)v7[3];
          free(v7);
          uint64_t v7 = v14;
        }
        while (v14);
        uint64_t v7 = (void *)v3[2];
        uint64_t v4 = *((void *)this + 1);
      }
      void v7[3] = v4;
      *(void *)(v4 + 16) = v7;
      v3[2] = *((void *)this + 2);
      void *v3 = *(void *)this;
      *(void *)this = 0;
      *((void *)this + 1) = 0;
      *((void *)this + 2) = 0;
      return pxrInternal__aapl__pxrReserved__::TraceEventContainer::Allocate(this);
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceEventContainer::_Node::Join(uint64_t result, uint64_t a2)
{
  *(void *)(result + 24) = a2;
  *(void *)(a2 + 16) = result;
  return result;
}

void *pxrInternal__aapl__pxrReserved__::TraceEventContainer::_Node::New(pxrInternal__aapl__pxrReserved__::TraceEventContainer::_Node *this)
{
  double result = malloc(32 * (void)this + 32);
  *double result = result + 4;
  result[1] = &result[4 * (void)this + 4];
  result[2] = 0;
  result[3] = 0;
  return result;
}

void *pxrInternal__aapl__pxrReserved__::TraceEventContainer::_Node::_Node(void *this, pxrInternal__aapl__pxrReserved__::TraceEvent *a2, uint64_t a3)
{
  *this = a2;
  this[1] = (char *)a2 + 32 * a3;
  this[2] = 0;
  this[3] = 0;
  return this;
}

{
  *this = a2;
  this[1] = (char *)a2 + 32 * a3;
  this[2] = 0;
  this[3] = 0;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceEventData::GetType(pxrInternal__aapl__pxrReserved__::TraceEventData *this)
{
  uint64_t v1 = *((unsigned int *)this + 6);
  if (v1 == -1) {
    sub_2168BBB60();
  }
  uint64_t v4 = &v3;
  return ((uint64_t (*)(char **, pxrInternal__aapl__pxrReserved__::TraceEventData *))off_26C74D030[v1])(&v4, this);
}

pxrInternal__aapl__pxrReserved__::TraceEventData *pxrInternal__aapl__pxrReserved__::TraceEventData::GetInt(pxrInternal__aapl__pxrReserved__::TraceEventData *this)
{
  uint64_t v1 = this;
  if (pxrInternal__aapl__pxrReserved__::TraceEventData::GetType(this) != 2) {
    return 0;
  }
  if (*((_DWORD *)v1 + 6) != 3) {
    sub_2168BBB60();
  }
  return v1;
}

pxrInternal__aapl__pxrReserved__::TraceEventData *pxrInternal__aapl__pxrReserved__::TraceEventData::GetUInt(pxrInternal__aapl__pxrReserved__::TraceEventData *this)
{
  uint64_t v1 = this;
  if (pxrInternal__aapl__pxrReserved__::TraceEventData::GetType(this) != 3) {
    return 0;
  }
  if (*((_DWORD *)v1 + 6) != 4) {
    sub_2168BBB60();
  }
  return v1;
}

pxrInternal__aapl__pxrReserved__::TraceEventData *pxrInternal__aapl__pxrReserved__::TraceEventData::GetFloat(pxrInternal__aapl__pxrReserved__::TraceEventData *this)
{
  uint64_t v1 = this;
  if (pxrInternal__aapl__pxrReserved__::TraceEventData::GetType(this) != 4) {
    return 0;
  }
  if (*((_DWORD *)v1 + 6) != 5) {
    sub_2168BBB60();
  }
  return v1;
}

pxrInternal__aapl__pxrReserved__::TraceEventData *pxrInternal__aapl__pxrReserved__::TraceEventData::GetBool(pxrInternal__aapl__pxrReserved__::TraceEventData *this)
{
  uint64_t v1 = this;
  if (pxrInternal__aapl__pxrReserved__::TraceEventData::GetType(this) != 1) {
    return 0;
  }
  if (*((_DWORD *)v1 + 6) != 2) {
    sub_2168BBB60();
  }
  return v1;
}

pxrInternal__aapl__pxrReserved__::TraceEventData *pxrInternal__aapl__pxrReserved__::TraceEventData::GetString(pxrInternal__aapl__pxrReserved__::TraceEventData *this)
{
  uint64_t v1 = this;
  if (pxrInternal__aapl__pxrReserved__::TraceEventData::GetType(this)) {
    return 0;
  }
  if (*((_DWORD *)v1 + 6) != 1) {
    sub_2168BBB60();
  }
  return v1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceEventData::WriteJson(pxrInternal__aapl__pxrReserved__::TraceEventData *this, pxrInternal__aapl__pxrReserved__::JsWriter *a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *((unsigned int *)this + 6);
  if (v2 == -1) {
    sub_2168BBB60();
  }
  uint64_t v5 = &v4;
  return ((uint64_t (*)(pxrInternal__aapl__pxrReserved__::JsWriter ***, pxrInternal__aapl__pxrReserved__::TraceEventData *))off_26C74D060[v2])(&v5, this);
}

uint64_t sub_2168D348C()
{
  return 5;
}

uint64_t sub_2168D3494()
{
  return 0;
}

uint64_t sub_2168D349C()
{
  return 1;
}

uint64_t sub_2168D34A4()
{
  return 2;
}

uint64_t sub_2168D34AC()
{
  return 3;
}

uint64_t sub_2168D34B4()
{
  return 4;
}

uint64_t sub_2168D34BC(uint64_t **a1)
{
  return pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue(**a1);
}

uint64_t sub_2168D34CC(uint64_t ****a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue(**a1, a2);
}

uint64_t sub_2168D34D8(pxrInternal__aapl__pxrReserved__::JsWriter ***a1)
{
  return pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue(**a1);
}

uint64_t sub_2168D34E8(pxrInternal__aapl__pxrReserved__::JsWriter ***a1)
{
  return pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue(**a1);
}

uint64_t sub_2168D34F8(pxrInternal__aapl__pxrReserved__::JsWriter ***a1)
{
  return pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue(**a1);
}

uint64_t sub_2168D3508(pxrInternal__aapl__pxrReserved__::JsWriter ***a1, double *a2)
{
  return pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue(**a1, *a2);
}

pxrInternal__aapl__pxrReserved__::TraceEventList *pxrInternal__aapl__pxrReserved__::TraceEventList::TraceEventList(pxrInternal__aapl__pxrReserved__::TraceEventList *this)
{
  uint64_t v2 = pxrInternal__aapl__pxrReserved__::TraceEventContainer::TraceEventContainer(this);
  char v3 = (char *)v2 + 32;
  *((void *)v2 + 4) = (char *)v2 + 32;
  *((void *)v2 + 5) = (char *)v2 + 32;
  *((_OWORD *)v2 + 3) = 0u;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_OWORD *)v2 + 6) = 0u;
  *((void *)v2 + 14) = 0;
  *((void *)v2 + 15) = 1024;
  uint64_t v4 = operator new(0x38uLL);
  v4[1] = 0u;
  void v4[2] = 0u;
  *((_DWORD *)v4 + 12) = 1065353216;
  *(void *)uint64_t v4 = v3;
  *((void *)v4 + 1) = v3;
  *((void *)this + 4) = v4;
  *((void *)this + 5) = v4;
  *((void *)this + 6) = 1;
  return this;
}

void sub_2168D358C(_Unwind_Exception *a1)
{
  sub_2168CA43C((void *)v1 + 9);
  sub_2168CA57C(v2);
  pxrInternal__aapl__pxrReserved__::TraceEventContainer::~TraceEventContainer(v1);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::TraceEventList::Append(void *a1, pxrInternal__aapl__pxrReserved__::TraceEventContainer *a2)
{
  sub_21685A0DC((uint64_t)(a1 + 4), a1 + 4, (void *)a2 + 4);

  return pxrInternal__aapl__pxrReserved__::TraceEventContainer::Append(a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceEventNode::Append@<X0>(pxrInternal__aapl__pxrReserved__::TraceEventNode *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t *a7@<X8>)
{
  __n128 v10 = 0uLL;
  uint64_t v11 = 0;
  sub_2168BFE30((uint64_t *)a2, a3, a4, a5, &v10, a6, a7);
  uint64_t v12 = &v10;
  sub_2168C02E0((void ***)&v12);
  return sub_2168BF0D0((uint64_t *)this + 6, a7);
}

void sub_2168D3674(_Unwind_Exception *a1)
{
  sub_2168BD7DC(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceEventNode::Append(uint64_t a1, uint64_t *a2)
{
  return sub_2168BF0D0((uint64_t *)(a1 + 48), a2);
}

void *pxrInternal__aapl__pxrReserved__::TraceEventNode::SetBeginAndEndTimesFromChildren(void *this)
{
  uint64_t v1 = this;
  uint64_t v2 = (uint64_t *)this[6];
  char v3 = (uint64_t *)this[7];
  if (v2 == v3)
  {
    this[4] = 0;
    this[5] = 0;
  }
  else
  {
    *((_OWORD *)this + 2) = xmmword_217455290;
    do
    {
      unint64_t v4 = *(void *)(sub_2168BC9E4(v2) + 32);
      if (v4 >= v1[4]) {
        unint64_t v4 = v1[4];
      }
      v1[4] = v4;
      this = (void *)sub_2168BC9E4(v2);
      unint64_t v5 = this[5];
      if (v1[5] > v5) {
        unint64_t v5 = v1[5];
      }
      v1[5] = v5;
      ++v2;
    }
    while (v2 != v3);
  }
  return this;
}

uint64_t *pxrInternal__aapl__pxrReserved__::TraceEventNode::AddAttribute(uint64_t **this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TraceEventData *a3)
{
  return sub_2168D373C(this + 10, (uint64_t *)a2, (uint64_t)a3);
}

uint64_t *sub_2168D373C(uint64_t **a1, uint64_t *a2, uint64_t a3)
{
  sub_2168D37B8((uint64_t)a1, a2, a3, (uint64_t)&v7);
  unint64_t v4 = (uint64_t **)sub_2168D3844((uint64_t)a1, &v6, v7 + 4);
  sub_21677B358(a1, v6, v4, v7);
  return v7;
}

void sub_2168D3794(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11)
{
  if (a10) {
    sub_2168D3A70((uint64_t)&a11, a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2168D37B8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  uint64_t v8 = (uint64_t *)operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  double result = sub_2168D38C0(v8 + 4, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_2168D3828(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_2168D3A70(v3, v2);
  _Unwind_Resume(a1);
}

void *sub_2168D3844(uint64_t a1, void *a2, uint64_t *a3)
{
  unint64_t v5 = (void *)(a1 + 8);
  unint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        unint64_t v5 = v4;
        if (!sub_2168BE1F8(v7, a3, v4 + 4)) {
          break;
        }
        unint64_t v4 = (void *)*v5;
        double result = v5;
        if (!*v5) {
          goto LABEL_9;
        }
      }
      unint64_t v4 = (void *)v5[1];
    }
    while (v4);
    double result = v5 + 1;
  }
  else
  {
    double result = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v5;
  return result;
}

uint64_t *sub_2168D38C0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  sub_2168D3938((uint64_t)(a1 + 1), a3);
  return a1;
}

uint64_t sub_2168D3938(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 24) = -1;
  sub_2168D3980(a1, a2);
  return a1;
}

void sub_2168D396C(_Unwind_Exception *a1)
{
  sub_2168C0420(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2168D3980(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(unsigned int *)(result + 24);
  if (v4 != -1) {
    double result = ((uint64_t (*)(char *, uint64_t))off_26C74D090[v4])(&v7, result);
  }
  *(_DWORD *)(v3 + 24) = -1;
  uint64_t v5 = *(unsigned int *)(a2 + 24);
  if (v5 != -1)
  {
    double result = ((uint64_t (*)(char *, uint64_t, uint64_t))*(&off_26C74D0C0 + v5))(&v6, v3, a2);
    *(_DWORD *)(v3 + 24) = v5;
  }
  return result;
}

void *sub_2168D3A14(int a1, void *__dst, long long *a3)
{
  if (*((char *)a3 + 23) < 0) {
    return sub_216778F24(__dst, *(void **)a3, *((void *)a3 + 1));
  }
  long long v3 = *a3;
  __dst[2] = *((void *)a3 + 2);
  *(_OWORD *)long long __dst = v3;
  return result;
}

void sub_2168D3A40(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

void sub_2168D3A4C(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void sub_2168D3A58(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

double sub_2168D3A64(uint64_t a1, void *a2, double *a3)
{
  double result = *a3;
  *a2 = *(void *)a3;
  return result;
}

void sub_2168D3A70(uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    sub_2168C0420((uint64_t)(a2 + 5));
    uint64_t v3 = a2[4];
    if ((v3 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else if (!a2)
  {
    return;
  }

  operator delete(a2);
}

void pxrInternal__aapl__pxrReserved__::TraceEventTree::New(pxrInternal__aapl__pxrReserved__::TraceCollection **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder::Trace_EventTreeBuilder((pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder *)&v6);
  if (a2) {
    pxrInternal__aapl__pxrReserved__::TraceCounterAccumulator::SetCurrentValues((uint64_t)&v10, a2);
  }
  pxrInternal__aapl__pxrReserved__::Trace_EventTreeBuilder::CreateTree((pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor *)&v6, a1);
  *a3 = (uint64_t)v9;
  sub_2168BD80C(a3);
  char v6 = &unk_26C74CB18;
  sub_2168C0A6C((uint64_t)&v14);
  __n128 v10 = &unk_26C74CFC0;
  sub_2168C08A0((uint64_t)&v13);
  sub_2168C09A4((uint64_t)&v12);
  sub_2168C092C((uint64_t)v11, v11[1]);
  pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor::~Visitor((pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor *)&v10);
  sub_2168BD348(&v9);
  sub_2168C0BC0((uint64_t)v8, v8[1]);
  sub_2168BD7DC(&v7);
  pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor::~Visitor((pxrInternal__aapl__pxrReserved__::TraceCollection::Visitor *)&v6);
}

void sub_2168D3BF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168C0174((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceEventTree::Add@<X0>(pxrInternal__aapl__pxrReserved__::TraceEventTree *this@<X0>, pxrInternal__aapl__pxrReserved__::TraceCollection **a2@<X1>, uint64_t *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::TraceEventTree::GetFinalCounterValues(this, (uint64_t)v7);
  pxrInternal__aapl__pxrReserved__::TraceEventTree::New(a2, (uint64_t)v7, a3);
  pxrInternal__aapl__pxrReserved__::TraceEventTree::Merge((uint64_t *)this, a3);
  return sub_2168C08A0((uint64_t)v7);
}

void sub_2168D3C68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168BD348(v2);
  sub_2168C08A0((uint64_t)va);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::TraceEventTree::GetFinalCounterValues@<X0>(void *this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  for (uint64_t i = (void *)this[6]; i; uint64_t i = (void *)*i)
  {
    uint64_t v4 = i[4];
    if (i[3] != v4)
    {
      uint64_t v5 = *(void *)(v4 - 8);
      char v6 = i + 2;
      this = sub_2168CB2C8(a2, i + 2, (uint64_t)&unk_2174BFD90, &v6);
      this[3] = v5;
    }
  }
  return this;
}

void sub_2168D3D1C(_Unwind_Exception *a1)
{
  sub_2168C08A0(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TraceEventTree::Merge(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = sub_2168BC958(a2);
  uint64_t v4 = sub_2168BC9E4((uint64_t *)(v3 + 24));
  uint64_t v5 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter ***)(v4 + 48);
  char v6 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter ***)(v4 + 56);
  if (v5 != v6)
  {
    char v7 = a1 + 3;
    do
    {
      long long v38 = *v5;
      sub_2168BD80C((uint64_t *)&v38);
      uint64_t v8 = sub_2168BC9E4(v7);
      uint64_t v9 = *(uint64_t **)(v8 + 48);
      __n128 v10 = *(uint64_t **)(v8 + 56);
      if (v9 == v10) {
        goto LABEL_22;
      }
      while (1)
      {
        uint64_t v11 = *(void *)(sub_2168BC9E4(v9) + 16);
        if ((v11 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          v11 &= 0xFFFFFFFFFFFFFFF8;
        }
        unint64_t v12 = *(void *)(sub_2168BC9E4((uint64_t *)&v38) + 16);
        if ((v12 & 7) != 0)
        {
          unint64_t v13 = v12 & 0xFFFFFFFFFFFFFFF8;
          if (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed)) {
            unint64_t v13 = v12;
          }
          uint64_t v14 = (atomic_uint *)(v13 & 0xFFFFFFFFFFFFFFF8);
          if ((v13 & 7) != 0) {
            atomic_fetch_add_explicit(v14, 0xFFFFFFFE, memory_order_release);
          }
        }
        else
        {
          uint64_t v14 = (atomic_uint *)(v12 & 0xFFFFFFFFFFFFFFF8);
        }
        uint64_t v15 = (atomic_uint *)(v11 & 0xFFFFFFFFFFFFFFF8);
        if ((v11 & 7) != 0) {
          atomic_fetch_add_explicit(v15, 0xFFFFFFFE, memory_order_release);
        }
        if (v14 == v15) {
          break;
        }
        if (++v9 == v10)
        {
          uint64_t v9 = v10;
          break;
        }
      }
      if (v9 == *(uint64_t **)(v8 + 56))
      {
LABEL_22:
        uint64_t v20 = sub_2168BC9E4(v7);
        uint64_t v35 = v38;
        sub_2168BD80C((uint64_t *)&v35);
        pxrInternal__aapl__pxrReserved__::TraceEventNode::Append(v20, (uint64_t *)&v35);
        sub_2168BD7DC(&v35);
      }
      else
      {
        uint64_t v16 = sub_2168BC9E4((uint64_t *)&v38);
        uint64_t v17 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter ***)(v16 + 48);
        uint64_t v18 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter ***)(v16 + 56);
        while (v17 != v18)
        {
          uint64_t v37 = *v17;
          sub_2168BD80C((uint64_t *)&v37);
          uint64_t v19 = sub_2168BC9E4(v9);
          uint64_t v36 = v37;
          sub_2168BD80C((uint64_t *)&v36);
          pxrInternal__aapl__pxrReserved__::TraceEventNode::Append(v19, (uint64_t *)&v36);
          sub_2168BD7DC(&v36);
          sub_2168BD7DC(&v37);
          ++v17;
        }
        uint64_t v21 = (void *)sub_2168BC9E4(v9);
        pxrInternal__aapl__pxrReserved__::TraceEventNode::SetBeginAndEndTimesFromChildren(v21);
      }
      sub_2168BD7DC(&v38);
      ++v5;
    }
    while (v5 != v6);
  }
  unint64_t v22 = *(uint64_t **)(sub_2168BC958(a2) + 48);
  if (v22)
  {
    uint64_t v23 = a1 + 4;
    do
    {
      uint64_t v24 = (char **)sub_2168CB1F4(v23, v22 + 2);
      if (v24)
      {
        uint64_t v25 = (uint64_t)v24[4];
        uint64_t v26 = (uint64_t *)(v24 + 3);
        uint64_t v27 = v25 - (void)v24[3];
        sub_2168D5140(v24 + 3, v25, (long long *)v22[3], (long long *)v22[4], (v22[4] - v22[3]) >> 4);
        sub_2168D5368(*v26, (unint64_t *)(*v26 + v27), (uint64_t *)v26[1], (uint64_t)&v38);
      }
      else
      {
        sub_2168C498C((uint64_t)v23, v22 + 2, v22 + 2);
      }
      unint64_t v22 = (uint64_t *)*v22;
    }
    while (v22);
  }
  uint64_t v28 = *(uint64_t **)(sub_2168BC958(a2) + 88);
  if (v28)
  {
    uint64_t v29 = a1 + 9;
    do
    {
      long long v30 = sub_2168CB1F4(v29, v28 + 2);
      if (v30)
      {
        long long v31 = (void *)v30[4];
        long long v32 = v30 + 3;
        unint64_t v33 = (char *)v31 - v30[3];
        sub_2168D5A64(v30 + 3, v31, (void *)v28[3], v28[4], (v28[4] - v28[3]) >> 5);
        sub_2168D5F40(*v32, &v33[*v32], (uint64_t *)v32[1], (uint64_t)&v38);
      }
      else
      {
        sub_2168C4E3C((uint64_t)v29, v28 + 2, v28 + 2);
      }
      uint64_t v28 = (uint64_t *)*v28;
    }
    while (v28);
  }
}

void sub_2168D400C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_2168BD7DC((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceEventTree::WriteChromeTraceObject(uint64_t a1, pxrInternal__aapl__pxrReserved__::JsWriter *this, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::JsWriter::BeginObject(this);
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey((uint64_t **)this, "traceEvents");
  pxrInternal__aapl__pxrReserved__::JsWriter::BeginArray(this);
  char v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_2168BC9E4((uint64_t *)(a1 + 24));
  char v7 = (uint64_t *)*((void *)v6 + 6);
  for (uint64_t i = (uint64_t *)*((void *)v6 + 7); v7 != i; ++v7)
  {
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_2168BC9E4(v7);
    uint64_t v10 = *((void *)v9 + 2);
    if ((v10 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v10 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v11 = (atomic_uint *)(v10 & 0xFFFFFFFFFFFFFFF8);
    if ((v10 & 0xFFFFFFFFFFFFFFF8) != 0) {
      Emptyunint64_t String = (uint64_t *)(v11 + 4);
    }
    else {
      Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
    }
    pxrInternal__aapl__pxrReserved__::TraceThreadId::TraceThreadId(__p, (long long *)EmptyString);
    if ((v10 & 7) != 0) {
      atomic_fetch_add_explicit(v11, 0xFFFFFFFE, memory_order_release);
    }
    char v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_2168BC9E4(v7);
    unint64_t v13 = (uint64_t *)*((void *)v6 + 6);
    uint64_t v14 = (uint64_t *)*((void *)v6 + 7);
    while (v13 != v14)
      sub_2168D447C(v13++, 0, __p, (void **)this);
    if (v29 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v26 = a1;
  uint64_t v27 = a3;
  for (double j = *(void **)(a1 + 48); j; double j = (void *)*j)
  {
    uint64_t v17 = (pxrInternal__aapl__pxrReserved__ **)j[3];
    for (k = (pxrInternal__aapl__pxrReserved__ **)j[4]; v17 != k; v17 += 2)
    {
      if ((j[2] & 0xFFFFFFFFFFFFFFF8) != 0) {
        uint64_t v18 = (uint64_t *)((j[2] & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        uint64_t v18 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
      }
      double v19 = (double)(uint64_t)pxrInternal__aapl__pxrReserved__::ArchTicksToNanoseconds(*v17) / 1000.0;
      pxrInternal__aapl__pxrReserved__::JsWriter::BeginObject(this);
      pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey((uint64_t **)this, "cat");
      pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue((uint64_t **)this, "");
      pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey((uint64_t **)this, "tid");
      pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue(this);
      pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey((uint64_t **)this, "pid");
      pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue(this);
      pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey((uint64_t **)this, "name");
      pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue((uint64_t **)this, v18);
      pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey((uint64_t **)this, "ph");
      pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue((uint64_t **)this, "C");
      pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey((uint64_t **)this, "ts");
      pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue(this, v19);
      pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey((uint64_t **)this, "args");
      sub_2168D4E68(this, "value", (double *)v17 + 1);
      char v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::JsWriter::EndObject(this);
    }
  }
  int v30 = 0;
  for (m = *(void **)(v26 + 88); m; m = (void *)*m)
  {
    uint64_t v21 = m[3];
    for (uint64_t n = m[4]; v21 != n; v21 += 32)
    {
      if ((m[2] & 0xFFFFFFFFFFFFFFF8) != 0) {
        uint64_t v23 = (uint64_t *)((m[2] & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        uint64_t v23 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
      }
      *(double *)long long __p = (double)(uint64_t)pxrInternal__aapl__pxrReserved__::ArchTicksToNanoseconds(*(pxrInternal__aapl__pxrReserved__ **)v21)
                     / 1000.0;
      pxrInternal__aapl__pxrReserved__::JsWriter::BeginObject(this);
      sub_2168D4EC8((uint64_t **)this, "cat", "", "tid", (uint64_t *)(v21 + 8), "pid", (uint64_t)&v30, "name", v23, "ph", "I", "s", "t", "ts", (double *)__p);
      char v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::JsWriter::EndObject(this);
    }
  }
  pxrInternal__aapl__pxrReserved__::JsWriter::EndArray(this);
  uint64_t v24 = *(void *)(v27 + 24);
  if (v24) {
    (*(void (**)(uint64_t, pxrInternal__aapl__pxrReserved__::JsWriter *))(*(void *)v24 + 48))(v24, this);
  }
  return pxrInternal__aapl__pxrReserved__::JsWriter::EndObject(this);
}

void sub_2168D4444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2168D447C(uint64_t *a1, unsigned int a2, void **a3, void **a4)
{
  unsigned int v52 = a2;
  char v7 = (pxrInternal__aapl__pxrReserved__::TraceCategory *)sub_216779094(&v51, "");
  Instance = (pxrInternal__aapl__pxrReserved__::TraceCategory *)pxrInternal__aapl__pxrReserved__::TraceCategory::GetInstance(v7);
  uint64_t v9 = sub_2168BC9E4(a1);
  pxrInternal__aapl__pxrReserved__::TraceCategory::GetCategories(Instance, *(_DWORD *)(v9 + 24), &v49);
  uint64_t v10 = v49;
  for (uint64_t i = v50; v10 != i; v10 += 24)
  {
    std::string::size_type size = HIBYTE(v51.__r_.__value_.__r.__words[2]);
    if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v51.__r_.__value_.__l.__size_;
    }
    if (size) {
      std::string::append(&v51, ",");
    }
    int v13 = *(char *)(v10 + 23);
    if (v13 >= 0) {
      uint64_t v14 = (const std::string::value_type *)v10;
    }
    else {
      uint64_t v14 = *(const std::string::value_type **)v10;
    }
    if (v13 >= 0) {
      std::string::size_type v15 = *(unsigned __int8 *)(v10 + 23);
    }
    else {
      std::string::size_type v15 = *(void *)(v10 + 8);
    }
    std::string::append(&v51, v14, v15);
  }
  v48[0] = a4;
  v48[1] = (void **)&v51;
  void v48[2] = (void **)a1;
  v48[3] = (void **)&v52;
  v48[4] = a3;
  sub_2168D4964((uint64_t)v48);
  uint64_t v16 = sub_2168BC9E4(a1);
  int64_t v17 = pxrInternal__aapl__pxrReserved__::ArchTicksToNanoseconds(*(pxrInternal__aapl__pxrReserved__ **)(v16 + 32));
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey((uint64_t **)a4, "ts");
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue((pxrInternal__aapl__pxrReserved__::JsWriter *)a4, (double)v17 / 1000.0);
  if (*(void *)(sub_2168BC9E4(a1) + 96))
  {
    pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey((uint64_t **)a4, "args");
    pxrInternal__aapl__pxrReserved__::JsWriter::BeginObject((pxrInternal__aapl__pxrReserved__::JsWriter *)a4);
    memset(v46, 0, sizeof(v46));
    int v47 = 1065353216;
    uint64_t v18 = sub_2168BC9E4(a1);
    double v19 = *(void **)(v18 + 80);
    uint64_t v20 = (void *)(v18 + 88);
    if (v19 != (void *)(v18 + 88))
    {
      do
      {
        uint64_t v21 = v19 + 4;
        if (!sub_2168CB1F4(v46, v19 + 4))
        {
          sub_2168D4AAC((uint64_t)v46, v19 + 4, v19 + 4);
          uint64_t v22 = sub_2168BC9E4(a1);
          uint64_t v23 = sub_2168D4D70(v22 + 80, v19 + 4);
          uint64_t v25 = v23;
          uint64_t v26 = v24;
          if (v23 == v24) {
            goto LABEL_25;
          }
          uint64_t v27 = 0;
          uint64_t v28 = v23;
          do
          {
            uint64_t v29 = v27;
            int v30 = (void *)v28[1];
            if (v30)
            {
              do
              {
                long long v31 = v30;
                int v30 = (void *)*v30;
              }
              while (v30);
            }
            else
            {
              do
              {
                long long v31 = (void *)v28[2];
                BOOL v32 = *v31 == (void)v28;
                uint64_t v28 = v31;
              }
              while (!v32);
            }
            uint64_t v27 = v29 + 1;
            uint64_t v28 = v31;
          }
          while (v31 != v24);
          if (v29)
          {
LABEL_25:
            if ((*v21 & 0xFFFFFFFFFFFFFFF8) != 0) {
              Emptyunint64_t String = (uint64_t *)((*v21 & 0xFFFFFFFFFFFFFFF8) + 16);
            }
            else {
              Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v23);
            }
            pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey((uint64_t **)a4, EmptyString);
            pxrInternal__aapl__pxrReserved__::JsWriter::BeginArray((pxrInternal__aapl__pxrReserved__::JsWriter *)a4);
            if (v25 != v26)
            {
              do
              {
                pxrInternal__aapl__pxrReserved__::TraceEventData::WriteJson((pxrInternal__aapl__pxrReserved__::TraceEventData *)(v25 + 5), (pxrInternal__aapl__pxrReserved__::JsWriter *)a4);
                uint64_t v34 = (void *)v25[1];
                if (v34)
                {
                  do
                  {
                    uint64_t v35 = v34;
                    uint64_t v34 = (void *)*v34;
                  }
                  while (v34);
                }
                else
                {
                  do
                  {
                    uint64_t v35 = (void *)v25[2];
                    BOOL v32 = *v35 == (void)v25;
                    uint64_t v25 = v35;
                  }
                  while (!v32);
                }
                uint64_t v25 = v35;
              }
              while (v35 != v26);
            }
            pxrInternal__aapl__pxrReserved__::JsWriter::EndArray((pxrInternal__aapl__pxrReserved__::JsWriter *)a4);
          }
          else
          {
            if ((v23[4] & 0xFFFFFFFFFFFFFFF8) != 0) {
              uint64_t v36 = (uint64_t *)((v23[4] & 0xFFFFFFFFFFFFFFF8) + 16);
            }
            else {
              uint64_t v36 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v23);
            }
            pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey((uint64_t **)a4, v36);
            pxrInternal__aapl__pxrReserved__::TraceEventData::WriteJson((pxrInternal__aapl__pxrReserved__::TraceEventData *)(v25 + 5), (pxrInternal__aapl__pxrReserved__::JsWriter *)a4);
          }
        }
        uint64_t v37 = (void *)v19[1];
        if (v37)
        {
          do
          {
            long long v38 = v37;
            uint64_t v37 = (void *)*v37;
          }
          while (v37);
        }
        else
        {
          do
          {
            long long v38 = (void *)v19[2];
            BOOL v32 = *v38 == (void)v19;
            double v19 = v38;
          }
          while (!v32);
        }
        double v19 = v38;
      }
      while (v38 != v20);
    }
    pxrInternal__aapl__pxrReserved__::JsWriter::EndObject((pxrInternal__aapl__pxrReserved__::JsWriter *)a4);
    sub_2168C08A0((uint64_t)v46);
  }
  if (*(unsigned char *)(sub_2168BC9E4(a1) + 72))
  {
    pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey((uint64_t **)a4, "ph");
    pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue((uint64_t **)a4, "B");
    pxrInternal__aapl__pxrReserved__::JsWriter::EndObject((pxrInternal__aapl__pxrReserved__::JsWriter *)a4);
    sub_2168D4964((uint64_t)v48);
    pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey((uint64_t **)a4, "ph");
    pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue((uint64_t **)a4, "E");
    uint64_t v39 = sub_2168BC9E4(a1);
    int64_t v40 = pxrInternal__aapl__pxrReserved__::ArchTicksToNanoseconds(*(pxrInternal__aapl__pxrReserved__ **)(v39 + 40));
    pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey((uint64_t **)a4, "ts");
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey((uint64_t **)a4, "ph");
    pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue((uint64_t **)a4, "X");
    uint64_t v41 = *(void *)(sub_2168BC9E4(a1) + 40);
    uint64_t v42 = sub_2168BC9E4(a1);
    int64_t v40 = pxrInternal__aapl__pxrReserved__::ArchTicksToNanoseconds((pxrInternal__aapl__pxrReserved__ *)(v41 - *(void *)(v42 + 32)));
    pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey((uint64_t **)a4, "dur");
  }
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue((pxrInternal__aapl__pxrReserved__::JsWriter *)a4, (double)v40 / 1000.0);
  pxrInternal__aapl__pxrReserved__::JsWriter::EndObject((pxrInternal__aapl__pxrReserved__::JsWriter *)a4);
  uint64_t v43 = sub_2168BC9E4(a1);
  uint64_t v44 = *(void *)(v43 + 48);
  uint64_t v45 = *(void *)(v43 + 56);
  while (v44 != v45)
  {
    sub_2168D447C(v44, v52, a3, a4);
    v44 += 8;
  }
  v48[0] = (void **)&v49;
  sub_216782F20(v48);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
}

void sub_2168D48F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  a15 = &a20;
  sub_216782F20((void ***)&a15);
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2168D4964(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::JsWriter::BeginObject(*(pxrInternal__aapl__pxrReserved__::JsWriter **)a1);
  uint64_t v2 = *(pxrInternal__aapl__pxrReserved__::JsWriter **)a1;
  uint64_t v3 = *(uint64_t **)(a1 + 8);
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey(*(uint64_t ***)a1, "cat");
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue((uint64_t **)v2, v3);
  uint64_t v4 = *(pxrInternal__aapl__pxrReserved__::JsWriter **)a1;
  sub_2168BC9E4(*(uint64_t **)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey((uint64_t **)v4, "libTraceCatId");
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue(v4);
  uint64_t v5 = *(pxrInternal__aapl__pxrReserved__::JsWriter **)a1;
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey(*(uint64_t ***)a1, "pid");
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue(v5);
  char v6 = *(pxrInternal__aapl__pxrReserved__::JsWriter **)a1;
  char v7 = *(uint64_t **)(a1 + 32);
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey(*(uint64_t ***)a1, "tid");
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue((uint64_t **)v6, v7);
  uint64_t v8 = *(pxrInternal__aapl__pxrReserved__::JsWriter **)a1;
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_2168BC9E4(*(uint64_t **)(a1 + 16));
  uint64_t v10 = *((void *)v9 + 2);
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v10 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v11 = (atomic_uint *)(v10 & 0xFFFFFFFFFFFFFFF8);
  if ((v10 & 0xFFFFFFFFFFFFFFF8) != 0) {
    Emptyunint64_t String = (uint64_t *)(v11 + 4);
  }
  else {
    Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
  }
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey((uint64_t **)v8, "name");
  uint64_t result = pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue((uint64_t **)v8, EmptyString);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit(v11, 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void *sub_2168D4AAC(uint64_t a1, void *a2, uint64_t *a3)
{
  unint64_t v5 = *a2 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = bswap64(0x9E3779B97F4A7C55 * v5);
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = v6;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = v6 & (v7 - 1);
    }
    uint64_t v9 = *(void **)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t result = (void *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = result[1];
          if (v11 == v6)
          {
            if ((result[2] & 0xFFFFFFFFFFFFFFF8) == v5) {
              return result;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t result = (void *)*result;
        }
        while (result);
      }
    }
  }
  sub_2168D4CF8(a1, v6, a3, (uint64_t)&v20);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_21678A04C(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void **)(*(void *)a1 + 8 * v3);
  if (v18)
  {
    *uint64_t v20 = *v18;
    *uint64_t v18 = v20;
  }
  else
  {
    *uint64_t v20 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v20;
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*v20)
    {
      unint64_t v19 = *(void *)(*v20 + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7) {
          v19 %= v7;
        }
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v19) = v20;
    }
  }
  uint64_t result = v20;
  ++*(void *)(a1 + 24);
  return result;
}

void sub_2168D4CE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168BE6D4((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void *sub_2168D4CF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t result = operator new(0x18uLL);
  *(void *)a4 = result;
  *(void *)(a4 + 8) = v7;
  *uint64_t result = 0;
  result[1] = a2;
  uint64_t v9 = *a3;
  result[2] = *a3;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    result[2] &= 0xFFFFFFFFFFFFFFF8;
  }
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void *sub_2168D4D70(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  unint64_t v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 16;
  while ((sub_2168BE1F8(v5, a2, v3 + 4) & 1) != 0)
  {
    uint64_t v2 = v3;
LABEL_7:
    unint64_t v3 = (void *)*v3;
    if (!v3) {
      return v2;
    }
  }
  if (sub_2168BE1F8(v5, v3 + 4, a2))
  {
    ++v3;
    goto LABEL_7;
  }
  uint8x8_t v8 = (void *)*v3;
  unint64_t v6 = v3;
  if (*v3)
  {
    unint64_t v6 = v3;
    do
    {
      int v9 = sub_2168BE1F8(v5, v8 + 4, a2);
      uint64_t v10 = v8 + 1;
      if (!v9)
      {
        uint64_t v10 = v8;
        unint64_t v6 = v8;
      }
      uint8x8_t v8 = (void *)*v10;
    }
    while (*v10);
  }
  unint64_t v11 = (void *)v3[1];
  if (v11)
  {
    do
    {
      int v12 = sub_2168BE1F8(v5, a2, v11 + 4);
      float v13 = v11 + 1;
      if (v12) {
        float v13 = v11;
      }
      unint64_t v11 = (void *)*v13;
    }
    while (*v13);
  }
  return v6;
}

uint64_t sub_2168D4E68(pxrInternal__aapl__pxrReserved__::JsWriter *a1, const char *a2, double *a3)
{
  pxrInternal__aapl__pxrReserved__::JsWriter::BeginObject(a1);
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey((uint64_t **)a1, a2);
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue(a1, *a3);

  return pxrInternal__aapl__pxrReserved__::JsWriter::EndObject(a1);
}

uint64_t sub_2168D4EC8(uint64_t **a1, const char *a2, const char *a3, const char *a4, uint64_t *a5, const char *a6, uint64_t a7, const char *a8, uint64_t *a9, const char *a10, const char *a11, const char *a12, const char *a13, const char *a14, double *a15)
{
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey(a1, a2);
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue(a1, a3);
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey(a1, a4);
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue(a1, a5);

  return sub_2168D4F94(a1, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
}

uint64_t sub_2168D4F94(uint64_t **a1, const char *a2, uint64_t a3, const char *a4, uint64_t *a5, const char *a6, const char *a7, const char *a8, const char *a9, const char *a10, double *a11)
{
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey(a1, a2);
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue((pxrInternal__aapl__pxrReserved__::JsWriter *)a1);

  return sub_2168D5038(a1, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t sub_2168D5038(uint64_t **a1, const char *a2, uint64_t *a3, const char *a4, const char *a5, const char *a6, const char *a7, const char *a8, double *a9)
{
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey(a1, a2);
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue(a1, a3);
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey(a1, a4);
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue(a1, a5);

  return sub_2168D50D8(a1, a6, a7, a8, a9);
}

uint64_t sub_2168D50D8(uint64_t **a1, const char *a2, const char *a3, const char *a4, double *a5)
{
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey(a1, a2);
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue(a1, a3);
  pxrInternal__aapl__pxrReserved__::JsWriter::WriteKey(a1, a4);
  double v9 = *a5;

  return pxrInternal__aapl__pxrReserved__::JsWriter::WriteValue((pxrInternal__aapl__pxrReserved__::JsWriter *)a1, v9);
}

char *sub_2168D5140(char **a1, uint64_t a2, long long *a3, long long *a4, uint64_t a5)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a2 - (void)*a1;
  uint64_t v7 = &(*a1)[v6 & 0xFFFFFFFFFFFFFFF0];
  if (a5 < 1) {
    return v7;
  }
  double v9 = a3;
  float v13 = a1[2];
  uint64_t v11 = (uint64_t)(a1 + 2);
  int v12 = v13;
  unint64_t v14 = *(void *)(v11 - 8);
  if (a5 <= (uint64_t)&v13[-v14] >> 4)
  {
    uint64_t v20 = (uint64_t)(v14 - (void)v7) >> 4;
    if (v20 >= a5)
    {
      uint64_t v21 = &a3[a5];
      uint64_t v22 = *(char **)(v11 - 8);
    }
    else
    {
      uint64_t v21 = &a3[v20];
      uint64_t v22 = *(char **)(v11 - 8);
      if (v21 != a4)
      {
        uint64_t v23 = v21;
        uint64_t v24 = *(_OWORD **)(v11 - 8);
        do
        {
          long long v25 = *v23++;
          *v24++ = v25;
          v22 += 16;
        }
        while (v23 != a4);
      }
      a1[1] = v22;
      if ((uint64_t)(v14 - (void)v7) < 1) {
        return v7;
      }
    }
    uint64_t v26 = &v7[16 * a5];
    uint64_t v27 = (long long *)&v22[-16 * a5];
    uint64_t v28 = v22;
    if ((unint64_t)v27 < v14)
    {
      uint64_t v28 = v22;
      do
      {
        long long v29 = *v27++;
        *(_OWORD *)uint64_t v28 = v29;
        v28 += 16;
      }
      while ((unint64_t)v27 < v14);
    }
    a1[1] = v28;
    if (v22 != v26)
    {
      int v30 = v22 - 8;
      uint64_t v31 = 16 * ((v22 - v26) >> 4);
      do
      {
        *((void *)v30 - 1) = *(void *)&v7[v31 - 16];
        *(void *)int v30 = *(void *)&v7[v31 - 8];
        v30 -= 16;
        v31 -= 16;
      }
      while (v31);
    }
    if (v21 != a3)
    {
      BOOL v32 = v7;
      do
      {
        *(void *)BOOL v32 = *(void *)v9;
        *((void *)v32 + 1) = *((void *)v9++ + 1);
        v32 += 16;
      }
      while (v9 != v21);
    }
    return v7;
  }
  unint64_t v15 = a5 + ((uint64_t)(v14 - (void)v5) >> 4);
  if (v15 >> 60) {
    sub_21677CB10();
  }
  uint64_t v16 = v6 >> 4;
  uint64_t v17 = v12 - v5;
  if (v17 >> 3 > v15) {
    unint64_t v15 = v17 >> 3;
  }
  if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v18 = v15;
  }
  if (v18) {
    unint64_t v19 = (char *)sub_216787EE0(v11, v18);
  }
  else {
    unint64_t v19 = 0;
  }
  unint64_t v33 = &v19[16 * v16];
  uint64_t v34 = &v33[16 * a5];
  uint64_t v35 = 16 * a5;
  uint64_t v36 = v33;
  do
  {
    long long v37 = *v9++;
    *(_OWORD *)uint64_t v36 = v37;
    v36 += 16;
    v35 -= 16;
  }
  while (v35);
  long long v38 = *a1;
  uint64_t v39 = v33;
  if (*a1 != v7)
  {
    int64_t v40 = v7;
    uint64_t v41 = v33;
    do
    {
      uint64_t v39 = v41 - 16;
      *((_OWORD *)v41 - 1) = *((_OWORD *)v40 - 1);
      v40 -= 16;
      v41 -= 16;
    }
    while (v40 != v38);
  }
  uint64_t v42 = &v19[16 * v18];
  for (uint64_t i = a1[1]; v7 != i; v34 += 16)
  {
    long long v44 = *(_OWORD *)v7;
    v7 += 16;
    *(_OWORD *)uint64_t v34 = v44;
  }
  uint64_t v45 = *a1;
  *a1 = v39;
  a1[1] = v34;
  a1[2] = v42;
  if (v45) {
    operator delete(v45);
  }
  return v33;
}

void sub_2168D5368(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8 = ((uint64_t)a2 - a1) >> 4;
  uint64_t v9 = ((char *)a3 - (char *)a2) >> 4;
  if (v9 >= v8) {
    uint64_t v10 = ((uint64_t)a2 - a1) >> 4;
  }
  else {
    uint64_t v10 = ((char *)a3 - (char *)a2) >> 4;
  }
  uint64_t v11 = (uint64_t *)sub_2168D5438(v10);
  sub_2168D549C(a1, a2, a3, a4, v8, v9, v11, v12, v13);
  if (v11)
  {
    operator delete(v11);
  }
}

void sub_2168D5420(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2168D5438(uint64_t a1)
{
  if (a1 < 1) {
    return 0;
  }
  if (a1 >= 0x7FFFFFFFFFFFFFFLL) {
    unint64_t v1 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v1 = a1;
  }
  uint64_t v2 = (const std::nothrow_t *)MEMORY[0x263F8C180];
  while (1)
  {
    uint64_t result = operator new(16 * v1, v2);
    if (result) {
      break;
    }
    BOOL v4 = v1 > 1;
    v1 >>= 1;
    if (!v4) {
      return 0;
    }
  }
  return result;
}

double sub_2168D549C(uint64_t a1, unint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t a8, double result)
{
  if (a6)
  {
    uint64_t v9 = a6;
    uint64_t v39 = a8;
    while (v9 > a8 && a5 > a8)
    {
      if (!a5) {
        return result;
      }
      uint64_t v12 = 0;
      unint64_t v13 = *a2;
      uint64_t v14 = -a5;
      while (1)
      {
        unint64_t v15 = *(unint64_t *)((char *)v12 + a1);
        if (v13 < v15) {
          break;
        }
        if (v15 >= v13)
        {
          uint64_t result = *((double *)a2 + 1);
          if (result < *(double *)((char *)v12 + a1 + 8)) {
            break;
          }
        }
        v12 += 2;
        if (__CFADD__(v14++, 1)) {
          return result;
        }
      }
      if (-v14 >= v9)
      {
        if (v14 == -1)
        {
          long long v38 = (unint64_t *)((char *)v12 + a1);
          *long long v38 = v13;
          *a2 = v15;
          uint64_t result = *(double *)((char *)v12 + a1 + 8);
          v38[1] = a2[1];
          *((double *)a2 + 1) = result;
          return result;
        }
        if (v14 <= 0) {
          uint64_t v26 = -v14;
        }
        else {
          uint64_t v26 = 1 - v14;
        }
        uint64_t v25 = v26 >> 1;
        uint64_t v20 = (unint64_t *)((char *)&v12[2 * (v26 >> 1)] + a1);
        unint64_t v19 = a2;
        if (a2 != (unint64_t *)a3)
        {
          unint64_t v27 = ((char *)a3 - (char *)a2) >> 4;
          unint64_t v28 = *v20;
          unint64_t v19 = a2;
          do
          {
            unint64_t v29 = v27 >> 1;
            int v30 = &v19[2 * (v27 >> 1)];
            if (*v30 < v28 || v28 >= *v30 && *(double *)&v19[2 * v29 + 1] < *((double *)v20 + 1))
            {
              unint64_t v19 = v30 + 2;
              unint64_t v29 = v27 + ~v29;
            }
            unint64_t v27 = v29;
          }
          while (v29);
        }
        uint64_t v18 = ((char *)v19 - (char *)a2) >> 4;
      }
      else
      {
        if (v9 >= 0) {
          uint64_t v17 = v9;
        }
        else {
          uint64_t v17 = v9 + 1;
        }
        uint64_t v18 = v17 >> 1;
        unint64_t v19 = &a2[2 * (v17 >> 1)];
        uint64_t v20 = (unint64_t *)((char *)v12 + a1);
        if ((unint64_t *)((char *)a2 - a1) != v12)
        {
          unint64_t v21 = ((char *)a2 - a1 - (char *)v12) >> 4;
          unint64_t v22 = *v19;
          uint64_t v20 = (unint64_t *)((char *)v12 + a1);
          do
          {
            unint64_t v23 = v21 >> 1;
            uint64_t v24 = &v20[2 * (v21 >> 1)];
            if (v22 >= *v24 && (*v24 < v22 || *((double *)v19 + 1) >= *(double *)&v20[2 * v23 + 1]))
            {
              uint64_t v20 = v24 + 2;
              unint64_t v23 = v21 + ~v23;
            }
            unint64_t v21 = v23;
          }
          while (v23);
        }
        uint64_t v25 = ((char *)v20 - a1 - (char *)v12) >> 4;
      }
      uint64_t v31 = (uint64_t *)v19;
      if (v20 != a2)
      {
        uint64_t v31 = (uint64_t *)v20;
        if (v19 != a2)
        {
          BOOL v32 = a3;
          uint64_t v33 = v18;
          uint64_t v34 = sub_2168D59A0((uint64_t *)v20, (uint64_t *)a2, (uint64_t *)v19);
          uint64_t v18 = v33;
          a3 = v32;
          a8 = v39;
          uint64_t v31 = v34;
        }
      }
      a5 = -v25 - v14;
      uint64_t v35 = v9 - v18;
      if (v25 + v18 >= v9 - (v25 + v18) - v14)
      {
        uint64_t v37 = v18;
        sub_2168D549C(v31, v19, a3, a4, -v25 - v14, v35, a7, a8);
        unint64_t v19 = v20;
        uint64_t v35 = v37;
        a5 = v25;
        a3 = v31;
        a1 += (uint64_t)v12;
      }
      else
      {
        uint64_t v36 = a3;
        sub_2168D549C((char *)v12 + a1, v20, v31, a4, v25, v18, a7, a8);
        a3 = v36;
        a1 = (uint64_t)v31;
      }
      uint64_t v9 = v35;
      a2 = v19;
      a8 = v39;
      if (!v35) {
        return result;
      }
    }
    return sub_2168D578C(a1, a2, a3, result, a4, a5, v9, a7);
  }
  return result;
}

double sub_2168D578C(uint64_t a1, unint64_t *a2, uint64_t *a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  if (a6 <= a7)
  {
    uint64_t v14 = a8;
    if ((unint64_t *)a1 != a2)
    {
      uint64_t v14 = a8;
      unint64_t v15 = (unint64_t *)a1;
      do
      {
        long long v16 = *(_OWORD *)v15;
        v15 += 2;
        a4 = *(double *)&v16;
        *(_OWORD *)uint64_t v14 = v16;
        v14 += 2;
      }
      while (v15 != a2);
    }
    return sub_2168D5860(a8, v14, a2, a3, a1, a4);
  }
  else
  {
    uint64_t v10 = a8;
    if (a2 != (unint64_t *)a3)
    {
      uint64_t v10 = a8;
      uint64_t v11 = (uint64_t *)a2;
      do
      {
        long long v12 = *(_OWORD *)v11;
        v11 += 2;
        a4 = *(double *)&v12;
        *(_OWORD *)uint64_t v10 = v12;
        v10 += 2;
      }
      while (v11 != a3);
    }
    return sub_2168D58F8(a4, (uint64_t)v10, (uint64_t)v10, (uint64_t)a8, (uint64_t)a8, (uint64_t)a2, (uint64_t)a2, a1, a1, (uint64_t)a3, (uint64_t)a3);
  }
}

double sub_2168D5860(uint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4, uint64_t a5, double result)
{
  while (a1 != a2)
  {
    if (a3 == (unint64_t *)a4)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t v10 = a5 + v9 * 8;
        uint64_t v11 = &a1[v9];
        *(void *)uint64_t v10 = a1[v9];
        uint64_t result = *(double *)&a1[v9 + 1];
        *(double *)(v10 + 8) = result;
        v9 += 2;
      }
      while (v11 + 2 != a2);
      return result;
    }
    unint64_t v6 = *a3;
    unint64_t v7 = *a1;
    if (*a3 < *a1)
    {
      uint64_t result = *((double *)a3 + 1);
LABEL_5:
      *(void *)a5 = v6;
      *(double *)(a5 + 8) = result;
      a3 += 2;
      goto LABEL_10;
    }
    if (v7 >= v6)
    {
      uint64_t result = *((double *)a3 + 1);
      double v8 = *((double *)a1 + 1);
      if (result < v8) {
        goto LABEL_5;
      }
    }
    else
    {
      double v8 = *((double *)a1 + 1);
    }
    *(void *)a5 = v7;
    *(double *)(a5 + 8) = v8;
    a1 += 2;
LABEL_10:
    a5 += 16;
  }
  return result;
}

double sub_2168D58F8(double result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a3 != a5)
  {
    uint64_t v11 = (double *)(a11 - 8);
    while (a7 != a9)
    {
      uint64_t v12 = a7 - 16;
      unint64_t v13 = *(void *)(a7 - 16);
      unint64_t v14 = *(void *)(a3 - 16);
      if (v14 >= v13)
      {
        if (v13 < v14 || (uint64_t result = *(double *)(a7 - 8), *(double *)(a3 - 8) >= result))
        {
          unint64_t v13 = *(void *)(a3 - 16);
          uint64_t result = *(double *)(a3 - 8);
          uint64_t v12 = a7;
          a3 -= 16;
        }
      }
      else
      {
        uint64_t result = *(double *)(a7 - 8);
      }
      *((void *)v11 - 1) = v13;
      *uint64_t v11 = result;
      v11 -= 2;
      a7 = v12;
      if (a3 == a5) {
        return result;
      }
    }
    unint64_t v15 = 0;
    do
    {
      long long v16 = &v11[v15 / 8];
      *(v16 - 1) = *(double *)(a3 + v15 - 16);
      uint64_t result = *(double *)(a3 + v15 - 8);
      *long long v16 = result;
      v15 -= 16;
    }
    while (a3 + v15 != a5);
  }
  return result;
}

uint64_t *sub_2168D59A0(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a1;
  *a1 = *a2;
  *a2 = v3;
  uint64_t v4 = a1[1];
  a1[1] = a2[1];
  a2[1] = v4;
  uint64_t result = a1 + 2;
  for (uint64_t i = a2 + 2; i != a3; i += 2)
  {
    if (result == a2) {
      a2 = i;
    }
    uint64_t v7 = *result;
    *uint64_t result = *i;
    *uint64_t i = v7;
    uint64_t v8 = result[1];
    result[1] = i[1];
    i[1] = v8;
    result += 2;
  }
  if (result != a2)
  {
    uint64_t v9 = result;
    uint64_t v10 = a2;
    do
    {
      while (1)
      {
        uint64_t v11 = *v9;
        *uint64_t v9 = *v10;
        *uint64_t v10 = v11;
        uint64_t v12 = v9[1];
        v9[1] = v10[1];
        v10[1] = v12;
        v9 += 2;
        v10 += 2;
        if (v10 == a3) {
          break;
        }
        if (v9 == a2) {
          a2 = v10;
        }
      }
      uint64_t v10 = a2;
    }
    while (v9 != a2);
  }
  return result;
}

void *sub_2168D5A64(uint64_t *a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if (a5 <= (uint64_t)(v11 - v12) >> 5)
    {
      uint64_t v19 = v12 - (void)a2;
      uint64_t v20 = (uint64_t)(v12 - (void)a2) >> 5;
      if (v20 >= a5)
      {
        unint64_t v21 = &a3[4 * a5];
      }
      else
      {
        unint64_t v21 = &a3[4 * v20];
        a1[1] = (uint64_t)sub_2168C5278(v9, (uint64_t)v21, a4, *(void **)(v9 - 8));
        if (v19 < 1) {
          return v5;
        }
      }
      sub_2168D5BE4((uint64_t)a1, (uint64_t)v5, v12, (uint64_t)&v5[4 * a5]);
      sub_2168D5E4C(a3, v21, v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 + ((uint64_t)(v12 - *a1) >> 5);
      if (v14 >> 59) {
        sub_21677CB10();
      }
      uint64_t v15 = ((uint64_t)a2 - v13) >> 5;
      uint64_t v16 = v10 - v13;
      if (v16 >> 4 > v14) {
        unint64_t v14 = v16 >> 4;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v17 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v14;
      }
      uint64_t v27 = v9;
      if (v17) {
        uint64_t v18 = (char *)sub_2168707F4(v9, v17);
      }
      else {
        uint64_t v18 = 0;
      }
      unint64_t v23 = v18;
      uint64_t v24 = &v18[32 * v15];
      uint64_t v25 = v24;
      uint64_t v26 = &v18[32 * v17];
      sub_2168D5C64(&v23, (uint64_t)a3, a5);
      uint64_t v5 = (void *)sub_2168D5CFC(a1, &v23, (uint64_t)v5);
      sub_2168C3EC4((uint64_t)&v23);
    }
  }
  return v5;
}

void sub_2168D5BC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t sub_2168D5BE4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    unint64_t v9 = v7;
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      *(void *)uint64_t v8 = *(void *)v9;
      long long v10 = *(_OWORD *)(v9 + 8);
      *(void *)(v8 + 24) = *(void *)(v9 + 24);
      *(_OWORD *)(v8 + 8) = v10;
      *(void *)(v9 + 16) = 0;
      *(void *)(v9 + 24) = 0;
      *(void *)(v9 + 8) = 0;
      v8 += 32;
      v9 += 32;
    }
    while (v9 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return sub_2168D5DB0((uint64_t)&v12, a2, v7, v6);
}

void *sub_2168D5C64(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  uint64_t v4 = result[2];
  if (a3)
  {
    uint64_t v5 = v4 + 8;
    uint64_t v6 = 32 * a3;
    unint64_t v7 = (long long *)(a2 + 8);
    v4 += 32 * a3;
    do
    {
      *(void *)(v5 - 8) = *((void *)v7 - 1);
      if (*((char *)v7 + 23) < 0)
      {
        uint64_t result = sub_216778F24((unsigned char *)v5, *(void **)v7, *((void *)v7 + 1));
      }
      else
      {
        long long v8 = *v7;
        *(void *)(v5 + 16) = *((void *)v7 + 2);
        *(_OWORD *)uint64_t v5 = v8;
      }
      v5 += 32;
      v7 += 2;
      v6 -= 32;
    }
    while (v6);
  }
  v3[2] = v4;
  return result;
}

void sub_2168D5CF0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2 - 8;
  _Unwind_Resume(a1);
}

uint64_t sub_2168D5CFC(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  sub_2168C3DA0((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_2168D5EB0(v7, a3, a1[1], a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_2168D5DB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a3 + v7;
      *(void *)(a4 + v7 - 32) = *(void *)(a3 + v7 - 32);
      uint64_t v9 = (void **)(a4 + v7 - 24);
      if (*(char *)(a4 + v7 - 1) < 0) {
        operator delete(*v9);
      }
      long long v10 = *(_OWORD *)(v8 - 24);
      *(void *)(a4 + v7 - 8) = *(void *)(v8 - 8);
      *(_OWORD *)uint64_t v9 = v10;
      *(unsigned char *)(v8 - 1) = 0;
      *(unsigned char *)(v8 - 24) = 0;
      v7 -= 32;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

void *sub_2168D5E4C(void *a1, void *a2, void *a3)
{
  uint64_t v4 = a1;
  if (a1 == a2) {
    return a1;
  }
  uint64_t v5 = a2;
  do
  {
    uint64_t v6 = (const std::string *)(v4 + 1);
    uint64_t v7 = *v4;
    v4 += 4;
    uint64_t v8 = (std::string *)(a3 + 1);
    *a3 = v7;
    a3 += 4;
    std::string::operator=(v8, v6);
  }
  while (v4 != v5);
  return v5;
}

uint64_t sub_2168D5EB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *(void *)uint64_t v4 = *(void *)a2;
      long long v5 = *(_OWORD *)(a2 + 8);
      *(void *)(v4 + 24) = *(void *)(a2 + 24);
      *(_OWORD *)(v4 + 8) = v5;
      *(void *)(a2 + 16) = 0;
      *(void *)(a2 + 24) = 0;
      *(void *)(a2 + 8) = 0;
      v4 += 32;
      a2 += 32;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  sub_2168C5348((uint64_t)v7);
  return v4;
}

void sub_2168D5F40(uint64_t a1, char *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8 = (uint64_t)&a2[-a1] >> 5;
  uint64_t v9 = ((char *)a3 - a2) >> 5;
  if (v9 >= v8) {
    uint64_t v10 = (uint64_t)&a2[-a1] >> 5;
  }
  else {
    uint64_t v10 = ((char *)a3 - a2) >> 5;
  }
  uint64_t v11 = sub_2168D6010(v10);
  sub_2168D6074(a1, a2, a3, a4, v8, v9, (uint64_t)v11, v12);
  if (v11)
  {
    operator delete(v11);
  }
}

void sub_2168D5FF8(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2168D6010(uint64_t a1)
{
  if (a1 < 1) {
    return 0;
  }
  if (a1 >= 0x3FFFFFFFFFFFFFFLL) {
    unint64_t v1 = 0x3FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v1 = a1;
  }
  uint64_t v2 = (const std::nothrow_t *)MEMORY[0x263F8C180];
  while (1)
  {
    uint64_t result = operator new(32 * v1, v2);
    if (result) {
      break;
    }
    BOOL v4 = v1 > 1;
    v1 >>= 1;
    if (!v4) {
      return 0;
    }
  }
  return result;
}

__n128 sub_2168D6074(uint64_t a1, char *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a6)
  {
    uint64_t v8 = a6;
    do
    {
      if (v8 <= a8 || a5 <= a8)
      {
        sub_2168D6338(a1, (uint64_t *)a2, a3, a4, a5, v8, a7);
        return result;
      }
      if (!a5) {
        return result;
      }
      uint64_t v12 = 0;
      uint64_t v13 = -a5;
      while (1)
      {
        unint64_t v14 = *(void *)(a1 + v12);
        if (*(void *)a2 < v14
          || v14 >= *(void *)a2
          && pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<((void *)a2 + 1, (void *)(a1 + v12 + 8)))
        {
          break;
        }
        v12 += 32;
        if (__CFADD__(v13++, 1)) {
          return result;
        }
      }
      uint64_t v17 = -v13;
      if (-v13 >= v8)
      {
        if (v13 == -1)
        {
          uint64_t v25 = (void *)(a1 + v12);
          uint64_t v26 = *(void *)(a1 + v12);
          *uint64_t v25 = *(void *)a2;
          *(void *)a2 = v26;
          uint64_t v27 = *(void *)(a1 + v12 + 8);
          *(void *)((char *)&v34 + 7) = *(void *)(a1 + v12 + 23);
          *(void *)&long long v34 = *(void *)(a1 + v12 + 16);
          char v28 = *(unsigned char *)(a1 + v12 + 31);
          v25[1] = 0;
          v25[2] = 0;
          void v25[3] = 0;
          __n128 result = *(__n128 *)(a2 + 8);
          void v25[3] = *((void *)a2 + 3);
          *(__n128 *)(v25 + 1) = result;
          *((void *)a2 + 1) = v27;
          *((void *)a2 + 2) = v34;
          *(void *)(a2 + 23) = *(void *)((char *)&v34 + 7);
          a2[31] = v28;
          return result;
        }
        if (v13 > 0) {
          uint64_t v17 = 1 - v13;
        }
        uint64_t v30 = v17 >> 1;
        unint64_t v21 = (char *)(a1 + 32 * (v17 >> 1) + v12);
        uint64_t v20 = sub_2168D6944(a2, (char *)a3, v21);
        uint64_t v19 = (v20 - a2) >> 5;
      }
      else
      {
        if (v8 >= 0) {
          uint64_t v18 = v8;
        }
        else {
          uint64_t v18 = v8 + 1;
        }
        uint64_t v19 = v18 >> 1;
        uint64_t v20 = &a2[32 * (v18 >> 1)];
        unint64_t v21 = sub_2168D649C((char *)(a1 + v12), a2, v20);
        uint64_t v30 = (uint64_t)&v21[-a1 - v12] >> 5;
      }
      if (v21 == a2)
      {
        unint64_t v22 = (uint64_t *)v20;
      }
      else if (v20 == a2)
      {
        unint64_t v22 = (uint64_t *)v21;
      }
      else
      {
        unint64_t v22 = sub_2168D69D8((uint64_t)v21, (uint64_t *)a2, (uint64_t *)v20);
      }
      a5 = -(v30 + v13);
      uint64_t v23 = v8 - v19;
      if (v30 + v19 >= v8 - (v30 + v19) - v13)
      {
        sub_2168D6074(v22, v20, a3, a4, -(v30 + v13), v8 - v19, a7, a8);
        a1 += v12;
        uint64_t v24 = v22;
        a2 = v21;
        uint64_t v23 = v19;
        a5 = v30;
        a3 = v24;
      }
      else
      {
        sub_2168D6074(a1 + v12, v21, v22, a4, v30, v19, a7, a8);
        a1 = (uint64_t)v22;
        a2 = v20;
      }
      uint64_t v8 = v23;
    }
    while (v23);
  }
  return result;
}

void sub_2168D6338(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a5 <= a6)
  {
    if ((uint64_t *)a1 == a2)
    {
      unint64_t v14 = 0;
      uint64_t v15 = a7;
    }
    else
    {
      unint64_t v14 = 0;
      uint64_t v15 = a7;
      uint64_t v16 = a1;
      do
      {
        *(void *)uint64_t v15 = *(void *)v16;
        long long v17 = *(_OWORD *)(v16 + 8);
        *(void *)(v15 + 24) = *(void *)(v16 + 24);
        *(_OWORD *)(v15 + 8) = v17;
        *(void *)(v16 + 16) = 0;
        *(void *)(v16 + 24) = 0;
        *(void *)(v16 + 8) = 0;
        ++v14;
        v15 += 32;
        v16 += 32;
      }
      while ((uint64_t *)v16 != a2);
    }
    unint64_t v18 = v14;
    sub_2168D652C(a7, v15, a2, a3, a1);
  }
  else
  {
    if (a2 == a3)
    {
      unint64_t v10 = 0;
      uint64_t v11 = a7;
    }
    else
    {
      unint64_t v10 = 0;
      uint64_t v11 = a7;
      uint64_t v12 = a2;
      do
      {
        *(void *)uint64_t v11 = *v12;
        long long v13 = *(_OWORD *)(v12 + 1);
        *(void *)(v11 + 24) = v12[3];
        *(_OWORD *)(v11 + 8) = v13;
        v12[2] = 0;
        void v12[3] = 0;
        v12[1] = 0;
        ++v10;
        v11 += 32;
        v12 += 4;
      }
      while (v12 != a3);
    }
    unint64_t v18 = v10;
    sub_2168D6648(v11, v11, a7, a7, (uint64_t)a2, (uint64_t)a2, a1, a1, (uint64_t)a3, (uint64_t)a3);
  }
  if (a7) {
    sub_2168D68E4(&v18, a7);
  }
}

void sub_2168D647C(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_2168D68E4((unint64_t *)(v2 - 24), v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_2168D649C(char *a1, char *a2, void *a3)
{
  uint64_t v3 = a1;
  if (a2 != a1)
  {
    unint64_t v5 = (a2 - a1) >> 5;
    uint64_t v6 = a3 + 1;
    do
    {
      unint64_t v7 = v5 >> 1;
      uint64_t v8 = &v3[32 * (v5 >> 1)];
      if (*a3 >= *(void *)v8
        && (*(void *)v8 < *a3 || !pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<(v6, &v3[32 * v7 + 8])))
      {
        uint64_t v3 = v8 + 32;
        unint64_t v7 = v5 + ~v7;
      }
      unint64_t v5 = v7;
    }
    while (v7);
  }
  return v3;
}

void sub_2168D652C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  if (a1 != a2)
  {
    uint64_t v19 = v5;
    uint64_t v20 = v6;
    uint64_t v11 = a1;
    do
    {
      if (a3 == a4)
      {
        sub_2168D679C((uint64_t)&v18, v11, a2, a5);
        return;
      }
      unint64_t v12 = *a3;
      unint64_t v13 = *(void *)v11;
      if ((unint64_t)*a3 >= *(void *)v11)
      {
        if (v13 < v12) {
          goto LABEL_12;
        }
        if (!pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<(a3 + 1, (void *)(v11 + 8)))
        {
          unint64_t v13 = *(void *)v11;
LABEL_12:
          *(void *)a5 = v13;
          uint64_t v16 = (void **)(a5 + 8);
          if (*(char *)(a5 + 31) < 0) {
            operator delete(*v16);
          }
          long long v17 = *(_OWORD *)(v11 + 8);
          *(void *)(a5 + 24) = *(void *)(v11 + 24);
          *(_OWORD *)uint64_t v16 = v17;
          *(unsigned char *)(v11 + 31) = 0;
          *(unsigned char *)(v11 + 8) = 0;
          v11 += 32;
          goto LABEL_15;
        }
        unint64_t v12 = *a3;
      }
      *(void *)a5 = v12;
      unint64_t v14 = (void **)(a5 + 8);
      if (*(char *)(a5 + 31) < 0) {
        operator delete(*v14);
      }
      long long v15 = *(_OWORD *)(a3 + 1);
      *(void *)(a5 + 24) = a3[3];
      *(_OWORD *)unint64_t v14 = v15;
      *((unsigned char *)a3 + 31) = 0;
      *((unsigned char *)a3 + 8) = 0;
      a3 += 4;
LABEL_15:
      a5 += 32;
    }
    while (v11 != a2);
  }
}

void sub_2168D6648(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a2 != a4)
  {
    v26[14] = v10;
    v26[15] = v11;
    uint64_t v15 = a2;
    uint64_t v17 = a10;
    uint64_t v18 = a10 - 32;
    do
    {
      if (a6 == a8)
      {
        sub_2168D6824(a1, v15, a4, a9, v17, v26);
        return;
      }
      unint64_t v19 = *(void *)(a6 - 32);
      unint64_t v20 = *(void *)(v15 - 32);
      if (v20 >= v19)
      {
        if (v19 < v20) {
          goto LABEL_12;
        }
        if (!pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<((void *)(v15 - 24), (void *)(a6 - 24)))
        {
          unint64_t v20 = *(void *)(v15 - 32);
LABEL_12:
          *(void *)uint64_t v18 = v20;
          uint64_t v24 = (void **)(v18 + 8);
          if (*(char *)(v18 + 31) < 0) {
            operator delete(*v24);
          }
          long long v25 = *(_OWORD *)(v15 - 24);
          *(void *)(v18 + 24) = *(void *)(v15 - 8);
          *(_OWORD *)uint64_t v24 = v25;
          uint64_t v23 = v15;
          v15 -= 32;
          goto LABEL_15;
        }
        unint64_t v19 = *(void *)(a6 - 32);
      }
      *(void *)uint64_t v18 = v19;
      unint64_t v21 = (void **)(v18 + 8);
      if (*(char *)(v18 + 31) < 0) {
        operator delete(*v21);
      }
      long long v22 = *(_OWORD *)(a6 - 24);
      *(void *)(v18 + 24) = *(void *)(a6 - 8);
      *(_OWORD *)unint64_t v21 = v22;
      uint64_t v23 = a6;
      a6 -= 32;
LABEL_15:
      *(unsigned char *)(v23 - 1) = 0;
      *(unsigned char *)(v23 - 24) = 0;
      v17 -= 32;
      v18 -= 32;
    }
    while (v15 != a4);
  }
}

uint64_t sub_2168D679C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      *(void *)a4 = *(void *)v5;
      unint64_t v7 = (void **)(a4 + 8);
      if (*(char *)(a4 + 31) < 0) {
        operator delete(*v7);
      }
      long long v8 = *(_OWORD *)(v5 + 8);
      *(void *)(a4 + 24) = *(void *)(v5 + 24);
      *(_OWORD *)unint64_t v7 = v8;
      *(unsigned char *)(v5 + 31) = 0;
      *(unsigned char *)(v5 + 8) = 0;
      a4 += 32;
      v5 += 32;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void sub_2168D6824(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, void *a6@<X8>)
{
  if (a2 == a3)
  {
    uint64_t v11 = a2;
  }
  else
  {
    uint64_t v11 = a3;
    uint64_t v12 = 0;
    do
    {
      uint64_t v13 = a2 + v12;
      *(void *)(a5 + v12 - 32) = *(void *)(a2 + v12 - 32);
      unint64_t v14 = (void **)(a5 + v12 - 24);
      if (*(char *)(a5 + v12 - 1) < 0) {
        operator delete(*v14);
      }
      long long v15 = *(_OWORD *)(v13 - 24);
      *(void *)(a5 + v12 - 8) = *(void *)(v13 - 8);
      *(_OWORD *)unint64_t v14 = v15;
      *(unsigned char *)(v13 - 1) = 0;
      *(unsigned char *)(v13 - 24) = 0;
      v12 -= 32;
    }
    while (a2 + v12 != v11);
    a5 += v12;
  }
  *a6 = a1;
  a6[1] = v11;
  a6[2] = a4;
  a6[3] = a5;
}

void sub_2168D68E4(unint64_t *a1, uint64_t a2)
{
  unint64_t v2 = *a1;
  if (*a1)
  {
    unint64_t v4 = 0;
    uint64_t v5 = (char *)(a2 + 31);
    uint64_t v6 = (char *)(a2 + 31);
    do
    {
      int v7 = *v6;
      v6 += 32;
      if (v7 < 0)
      {
        operator delete(*(void **)(v5 - 23));
        unint64_t v2 = *a1;
      }
      ++v4;
      uint64_t v5 = v6;
    }
    while (v4 < v2);
  }
}

char *sub_2168D6944(char *a1, char *a2, void *a3)
{
  uint64_t v3 = a1;
  if (a2 != a1)
  {
    unint64_t v5 = (a2 - a1) >> 5;
    uint64_t v6 = a3 + 1;
    do
    {
      unint64_t v7 = v5 >> 1;
      long long v8 = &v3[32 * (v5 >> 1)];
      if (*(void *)v8 < *a3
        || *a3 >= *(void *)v8 && pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<(&v3[32 * v7 + 8], v6))
      {
        uint64_t v3 = v8 + 32;
        unint64_t v7 = v5 + ~v7;
      }
      unint64_t v5 = v7;
    }
    while (v7);
  }
  return v3;
}

uint64_t *sub_2168D69D8(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  __n128 result = (uint64_t *)(a1 + 32);
  unint64_t v4 = result;
  unint64_t v5 = a2;
  while (1)
  {
    uint64_t v6 = *(v4 - 4);
    *(v4 - 4) = *v5;
    *unint64_t v5 = v6;
    uint64_t v7 = *(v4 - 3);
    *(void *)&long long v14 = *(v4 - 2);
    *(void *)((char *)&v14 + 7) = *(uint64_t *)((char *)v4 - 9);
    char v8 = *((unsigned char *)v4 - 1);
    *(v4 - 2) = 0;
    *(v4 - 1) = 0;
    *(v4 - 3) = 0;
    uint64_t v9 = v5[3];
    *(_OWORD *)(v4 - 3) = *(_OWORD *)(v5 + 1);
    *(v4 - 1) = v9;
    *(uint64_t *)((char *)v5 + 23) = *(void *)((char *)&v14 + 7);
    v5[1] = v7;
    v5[2] = v14;
    *((unsigned char *)v5 + 31) = v8;
    v5 += 4;
    if (v5 == a3) {
      break;
    }
    if (v4 == a2) {
      a2 = v5;
    }
    v4 += 4;
    result += 4;
  }
  if (v4 != a2)
  {
    uint64_t v10 = a2;
    do
    {
      while (1)
      {
        uint64_t v11 = *v4;
        *unint64_t v4 = *v10;
        *uint64_t v10 = v11;
        uint64_t v12 = v4[1];
        *(void *)&long long v15 = v4[2];
        *(void *)((char *)&v15 + 7) = *(uint64_t *)((char *)v4 + 23);
        LOBYTE(v11) = *((unsigned char *)v4 + 31);
        void v4[2] = 0;
        v4[3] = 0;
        v4[1] = 0;
        long long v13 = *(_OWORD *)(v10 + 1);
        v4[3] = v10[3];
        *(_OWORD *)(v4 + 1) = v13;
        v10[1] = v12;
        v10[2] = v15;
        *(uint64_t *)((char *)v10 + 23) = *(void *)((char *)&v15 + 7);
        *((unsigned char *)v10 + 31) = v11;
        v4 += 4;
        v10 += 4;
        if (v10 == a3) {
          break;
        }
        if (v4 == a2) {
          a2 = v10;
        }
      }
      uint64_t v10 = a2;
    }
    while (v4 != a2);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::TraceReporterTokens_StaticTokenType::~TraceReporterTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::TraceReporterTokens_StaticTokenType *this)
{
  unint64_t v2 = (void **)((char *)this + 8);
  sub_216889A04(&v2);
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

{
  void **v2;

  unint64_t v2 = (void **)((char *)this + 8);
  sub_216889A04(&v2);
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

pxrInternal__aapl__pxrReserved__::TraceReporterTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::TraceReporterTokens_StaticTokenType::TraceReporterTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::TraceReporterTokens_StaticTokenType *this)
{
  unint64_t v2 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "WARNING:", 0);
  uint64_t v3 = *v2;
  if ((*v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v3 &= 0xFFFFFFFFFFFFFFF8;
  }
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  unint64_t v4 = operator new(8uLL);
  *((void *)this + 1) = v4;
  *((void *)this + 2) = v4;
  *unint64_t v4 = v3;
  unint64_t v5 = v4 + 1;
  *((void *)this + 3) = v4 + 1;
  if ((v3 & 7) != 0)
  {
    if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
      *v4 &= 0xFFFFFFFFFFFFFFF8;
    }
    *((void *)this + 2) = v5;
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  else
  {
    *((void *)this + 2) = v5;
  }
  return this;
}

void sub_2168D6C94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v11 = v10;
  sub_216889A04(&a9);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_2173242CC(v9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceReporter::TraceReporter(uint64_t a1, long long *a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  *a3 = 0;
  uint64_t v12 = v5;
  pxrInternal__aapl__pxrReserved__::TraceReporterBase::TraceReporterBase(a1, &v12);
  uint64_t v6 = v12;
  uint64_t v12 = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  *(void *)a1 = &unk_26C74D100;
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24((unsigned char *)(a1 + 96), *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v7 = *a2;
    *(void *)(a1 + 112) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 96) = v7;
  }
  *(void *)(a1 + 128) = 0;
  *(_WORD *)(a1 + 120) = 1;
  *(unsigned char *)(a1 + 122) = 1;
  *(void *)(a1 + 136) = 0;
  sub_2168D6E80(&v11);
  char v8 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 128);
  *(void *)(a1 + 128) = v11;
  uint64_t v11 = 0;
  sub_2168BD378(a1 + 128, v8);
  sub_2168D8784(&v11);
  sub_2168C6880(&v11);
  uint64_t v9 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 136);
  *(void *)(a1 + 136) = v11;
  uint64_t v11 = 0;
  sub_2168BD378(a1 + 136, v9);
  sub_2168BD348(&v11);
  return a1;
}

void sub_2168D6E08(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::TraceReporterBase::~TraceReporterBase(v1);
  _Unwind_Resume(a1);
}

void sub_2168D6E68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_2173242E8(a10);
  }
  JUMPOUT(0x2168D6E60);
}

uint64_t sub_2168D6E80@<X0>(pxrInternal__aapl__pxrReserved__::TraceAggregateTree **a1@<X8>)
{
  unint64_t v2 = (pxrInternal__aapl__pxrReserved__::TraceAggregateTree *)operator new(0x90uLL);
  uint64_t result = pxrInternal__aapl__pxrReserved__::TraceAggregateTree::TraceAggregateTree(v2);
  *a1 = v2;
  return result;
}

void sub_2168D6EB4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TraceReporter::~TraceReporter(pxrInternal__aapl__pxrReserved__::TraceReporter *this)
{
  *(void *)this = &unk_26C74D100;
  sub_2168BD348((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)this + 17);
  sub_2168D8784((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)this + 16);
  if (*((char *)this + 119) < 0) {
    operator delete(*((void **)this + 12));
  }

  pxrInternal__aapl__pxrReserved__::TraceReporterBase::~TraceReporterBase(this);
}

{
  void *v1;
  uint64_t vars8;

  pxrInternal__aapl__pxrReserved__::TraceReporter::~TraceReporter(this);

  free(v1);
}

void pxrInternal__aapl__pxrReserved__::TraceReporter::_PrintTimes(uint64_t a1, void *a2)
{
  v27[0] = 0;
  v27[1] = 0;
  uint64_t v26 = (uint64_t *)v27;
  uint64_t v3 = sub_2168D71E4((uint64_t *)(a1 + 128));
  unint64_t v4 = *(int8x16_t **)(v3 + 32);
  uint64_t v5 = (int8x16_t **)(v3 + 40);
  if (v4 != (int8x16_t *)(v3 + 40))
  {
    do
    {
      int8x16_t v6 = v4[2];
      *(int8x16_t *)uint64_t v24 = vextq_s8(v6, v6, 8uLL);
      if ((v6.i8[0] & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6.i64[0] & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v24[1] = (void *)((unint64_t)v24[1] & 0xFFFFFFFFFFFFFFF8);
      }
      sub_2168D8820(&v26, (long long *)v24);
      if (((uint64_t)v24[1] & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v24[1] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      long long v7 = (int8x16_t *)v4->i64[1];
      if (v7)
      {
        do
        {
          char v8 = (int8x16_t **)v7;
          long long v7 = (int8x16_t *)v7->i64[0];
        }
        while (v7);
      }
      else
      {
        do
        {
          char v8 = (int8x16_t **)v4[1].i64[0];
          BOOL v9 = *v8 == v4;
          unint64_t v4 = (int8x16_t *)v8;
        }
        while (!v9);
      }
      unint64_t v4 = (int8x16_t *)v8;
    }
    while (v8 != v5);
  }
  uint64_t v10 = v26;
  if (v26 != (uint64_t *)v27)
  {
    do
    {
      double v11 = pxrInternal__aapl__pxrReserved__::ArchTicksToSeconds((pxrInternal__aapl__pxrReserved__ *)((double)(unint64_t)v10[4] * 1000.0));
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%9.3f ms ", v12, v13, *(void *)&v11);
      if ((v25 & 0x80u) == 0) {
        long long v14 = v24;
      }
      else {
        long long v14 = (void **)v24[0];
      }
      if ((v25 & 0x80u) == 0) {
        uint64_t v15 = v25;
      }
      else {
        uint64_t v15 = (uint64_t)v24[1];
      }
      uint64_t v16 = sub_216779180(a2, (uint64_t)v14, v15);
      sub_2168D7270((pxrInternal__aapl__pxrReserved__::TfToken *)(v10 + 5), (uint64_t)__p);
      if ((v23 & 0x80u) == 0) {
        uint64_t v17 = __p;
      }
      else {
        uint64_t v17 = (void **)__p[0];
      }
      if ((v23 & 0x80u) == 0) {
        uint64_t v18 = v23;
      }
      else {
        uint64_t v18 = (uint64_t)__p[1];
      }
      unint64_t v19 = sub_216779180(v16, (uint64_t)v17, v18);
      sub_216779180(v19, (uint64_t)"\n", 1);
      if ((char)v23 < 0) {
        operator delete(__p[0]);
      }
      if ((char)v25 < 0) {
        operator delete(v24[0]);
      }
      unint64_t v20 = (uint64_t *)v10[1];
      if (v20)
      {
        do
        {
          unint64_t v21 = v20;
          unint64_t v20 = (uint64_t *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          unint64_t v21 = (uint64_t *)v10[2];
          BOOL v9 = *v21 == (void)v10;
          uint64_t v10 = v21;
        }
        while (!v9);
      }
      uint64_t v10 = v21;
    }
    while (v21 != (uint64_t *)v27);
  }
  sub_2168D87B4((uint64_t)&v26, v27[0]);
}

void sub_2168D7174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,void *a23)
{
}

uint64_t sub_2168D71E4(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    unint64_t v2 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/refPtr.h", 47);
    v3[0] = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/refPtr.h", (uint64_t)v2, 0x2Fu);
    v3[1] = "operator->";
    v3[2] = 953;
    v3[3] = "T *pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::TraceAggregateTree>::operato"
            "r->() const [U = pxrInternal__aapl__pxrReserved__::TraceAggregateTree]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError((uint64_t)v3, (pxrInternal__aapl__pxrReserved__ *)(0x80000002174552D4 & 0x7FFFFFFFFFFFFFFFLL));
  }
  return result;
}

uint64_t *sub_2168D7270@<X0>(pxrInternal__aapl__pxrReserved__::TfToken *a1@<X0>, uint64_t a2@<X8>)
{
  if ((*(void *)a1 & 0xFFFFFFFFFFFFFFF8) != 0) {
    uint64_t result = (uint64_t *)((*(void *)a1 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    uint64_t result = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  }
  if (*((char *)result + 23) < 0)
  {
    uint64_t v5 = (void *)*result;
    unint64_t v6 = result[1];
    return (uint64_t *)sub_216778F24((unsigned char *)a2, v5, v6);
  }
  else
  {
    long long v4 = *(_OWORD *)result;
    *(void *)(a2 + 16) = result[2];
    *(_OWORD *)a2 = v4;
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::TraceReporter::Report(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  if ((int)a3 <= 0)
  {
    uint64_t v24 = "trace/reporter.cpp";
    v25[0] = (uint64_t)"Report";
    v25[1] = 206;
    v25[2] = (uint64_t)"void pxrInternal__aapl__pxrReserved__::TraceReporter::Report(std::ostream &, int)";
    char v26 = 0;
    uint64_t v3 = 1;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v24, 1, (pxrInternal__aapl__pxrReserved__ *)"iterationCount %d is invalid; falling back to 1",
      a3);
  }
  pxrInternal__aapl__pxrReserved__::TraceReporter::_RebuildEventAndAggregateTrees((pxrInternal__aapl__pxrReserved__::TraceReporter *)a1);
  if (*(unsigned char *)(a1 + 122))
  {
    uint64_t v6 = sub_2168D71E4((uint64_t *)(a1 + 128));
    sub_2168BD6F4((uint64_t *)&v24, (uint64_t *)(v6 + 24));
    long long v7 = (void *)sub_2168BC8B0((uint64_t *)&v24);
    char v8 = (pxrInternal__aapl__pxrReserved__::TraceCollector *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCollector>::_instance);
    if (!v8) {
      pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCollector>::_CreateInstance();
    }
    ScopeOverhead = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::TraceCollector::GetScopeOverhead(v8);
    unint64_t TickQuantum = pxrInternal__aapl__pxrReserved__::ArchGetTickQuantum(ScopeOverhead);
    pxrInternal__aapl__pxrReserved__::TraceAggregateNode::AdjustForOverheadAndNoise(v7, (unint64_t)ScopeOverhead, TickQuantum, 0);
    uint64_t v11 = v25[0];
    if (v25[0] && atomic_fetch_add_explicit((atomic_uint *volatile)(v25[0] + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    }
  }
  if (*(unsigned char *)(a1 + 121))
  {
    uint64_t v12 = sub_2168D71E4((uint64_t *)(a1 + 128));
    sub_2168BD6F4((uint64_t *)&v24, (uint64_t *)(v12 + 24));
    long long v13 = (pxrInternal__aapl__pxrReserved__::TraceAggregateNode *)sub_2168BC8B0((uint64_t *)&v24);
    pxrInternal__aapl__pxrReserved__::TraceAggregateNode::MarkRecursiveChildren(v13);
    uint64_t v14 = v25[0];
    if (v25[0])
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v25[0] + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
      }
    }
  }
  if (v3 <= 1)
  {
    sub_216779180(a2, (uint64_t)"\nTree view  ==============\n", 27);
    uint64_t v16 = "   inclusive    exclusive        \n";
    uint64_t v17 = a2;
    uint64_t v18 = 34;
  }
  else
  {
    sub_216779180(a2, (uint64_t)"\nNumber of iterations: ", 23);
    uint64_t v15 = (void *)std::ostream::operator<<();
    sub_216779180(v15, (uint64_t)"\n", 1);
    sub_216779180(a2, (uint64_t)"\nTree view  ==============\n", 27);
    uint64_t v16 = "  incl./iter   excl./iter       samples/iter\n";
    uint64_t v17 = a2;
    uint64_t v18 = 45;
  }
  sub_216779180(v17, (uint64_t)v16, v18);
  uint64_t v19 = sub_2168D71E4((uint64_t *)(a1 + 128));
  sub_2168BD6F4((uint64_t *)&v24, (uint64_t *)(v19 + 24));
  unint64_t v20 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)v25[0];
  if (v25[0])
  {
    if (*(unsigned char *)(sub_216850B68(v25) + 14)) {
      unint64_t v20 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)v24;
    }
    else {
      unint64_t v20 = 0;
    }
  }
  unsigned __int8 v23 = v20;
  sub_2168BD80C((uint64_t *)&v23);
  sub_2168D7660(a2, (uint64_t *)&v23, 0, v3);
  sub_2168BD6C4(&v23);
  uint64_t v21 = v25[0];
  if (v25[0] && atomic_fetch_add_explicit((atomic_uint *volatile)(v25[0] + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  return sub_216779180(a2, (uint64_t)"\n", 1);
}

void sub_2168D75C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a11, uint64_t a12, uint64_t a13)
{
  sub_2168BD6C4(&a11);
  uint64_t v14 = a13;
  if (a13)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(a13 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceReporter::ShouldAdjustForOverheadAndNoise(pxrInternal__aapl__pxrReserved__::TraceReporter *this)
{
  return *((unsigned __int8 *)this + 122);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceReporter::GetFoldRecursiveCalls(pxrInternal__aapl__pxrReserved__::TraceReporter *this)
{
  return *((unsigned __int8 *)this + 121);
}

void sub_2168D7660(void *a1, uint64_t *a2, int a3, uint64_t a4)
{
  if (!*(unsigned char *)(sub_2168CBA70(a2) + 24))
  {
LABEL_105:
    memset(&v67, 0, sizeof(v67));
    uint64_t v53 = sub_2168CBA70(a2);
    long long v54 = *(uint64_t **)(v53 + 96);
    long long v55 = *(uint64_t **)(v53 + 104);
    while (v54 != v55)
      sub_2168CBAFC((uint64_t *)&v67, v54++);
    std::string::size_type size = v67.__r_.__value_.__l.__size_;
    long long v56 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v67.__r_.__value_.__r.__words[0];
    if (v67.__r_.__value_.__r.__words[0] != v67.__r_.__value_.__l.__size_)
    {
      uint64_t v58 = (a3 + 2);
      do
      {
        uint64_t v59 = *v56;
        sub_2168BD80C((uint64_t *)&v59);
        sub_2168D7660(a1, &v59, v58, a4);
        sub_2168BD6C4(&v59);
        ++v56;
      }
      while (v56 != (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)size);
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v67;
    sub_2168CAEE8((void ***)&__p);
    return;
  }
  if ((*(unsigned char *)(sub_2168CBA70(a2) + 184) & 2) == 0)
  {
    char v8 = *(unsigned char *)(sub_2168CBA70(a2) + 184);
    unint64_t v9 = *(void *)(sub_2168CBA70(a2) + 40);
    uint64_t v10 = (pxrInternal__aapl__pxrReserved__::TraceAggregateNode *)sub_2168CBA70(a2);
    if ((v8 & 4) != 0) {
      uint64_t v11 = 64;
    }
    else {
      uint64_t v11 = 56;
    }
    uint64_t ExclusiveTime = pxrInternal__aapl__pxrReserved__::TraceAggregateNode::GetExclusiveTime(v10, (v8 & 4) >> 2);
    int v13 = *(_DWORD *)(sub_2168CBA70(a2) + v11);
    unint64_t v14 = *(void *)(sub_2168CBA70(a2) + 32);
    unint64_t v60 = v14;
    if ((v14 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      unint64_t v60 = v14 & 0xFFFFFFFFFFFFFFF8;
      v14 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_2168D7270((pxrInternal__aapl__pxrReserved__::TfToken *)&v60, (uint64_t)&v61);
    double v15 = pxrInternal__aapl__pxrReserved__::ArchTicksToSeconds((pxrInternal__aapl__pxrReserved__ *)((unint64_t)((double)v9 * 1000.0)
                                                                                                  / a4));
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%9.3f ms ", v16, v17, *(void *)&v15);
    if (!v9)
    {
      if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v18 = HIBYTE(v67.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v18 = v67.__r_.__value_.__l.__size_;
      }
      sub_2167794AC(&__p, v18, 32);
      if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v67.__r_.__value_.__l.__data_);
      }
      std::string v67 = __p;
    }
    double v19 = pxrInternal__aapl__pxrReserved__::ArchTicksToSeconds((pxrInternal__aapl__pxrReserved__ *)((unint64_t)((double)(unint64_t)ExclusiveTime * 1000.0)
                                                                                                  / a4));
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%9.3f ms ", v20, v21, *(void *)&v19);
    if (!ExclusiveTime)
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v24 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v24 = __p.__r_.__value_.__l.__size_;
      }
      sub_2167794AC(&__b, v24, 32);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = __b;
    }
    memset(&__b, 0, sizeof(__b));
    if (a4 == 1) {
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%7.0f samples ", v22, v23, (double)v13);
    }
    else {
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%10.3f samples ", v22, v23, (double)v13 / (double)(int)a4);
    }
    std::string __b = v64;
    if (v13 <= 0)
    {
      int v37 = SHIBYTE(__b.__r_.__value_.__r.__words[2]);
      if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v38 = HIBYTE(__b.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v38 = __b.__r_.__value_.__l.__size_;
      }
      sub_2167794AC(&v64, v38, 32);
      if (v37 < 0) {
        operator delete(__b.__r_.__value_.__l.__data_);
      }
      std::string __b = v64;
    }
    if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v39 = &v67;
    }
    else {
      uint64_t v39 = (std::string *)v67.__r_.__value_.__r.__words[0];
    }
    if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v40 = HIBYTE(v67.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v40 = v67.__r_.__value_.__l.__size_;
    }
    uint64_t v41 = sub_216779180(a1, (uint64_t)v39, v40);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v43 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v43 = __p.__r_.__value_.__l.__size_;
    }
    long long v44 = sub_216779180(v41, (uint64_t)p_p, v43);
    if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_b = &__b;
    }
    else {
      p_b = (std::string *)__b.__r_.__value_.__r.__words[0];
    }
    if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v46 = HIBYTE(__b.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v46 = __b.__r_.__value_.__l.__size_;
    }
    int v47 = sub_216779180(v44, (uint64_t)p_b, v46);
    sub_216779180(v47, (uint64_t)" ", 1);
    sub_2168D86F0(a3, &v64);
    if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v48 = &v64;
    }
    else {
      uint64_t v48 = (std::string *)v64.__r_.__value_.__r.__words[0];
    }
    if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v49 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v49 = v64.__r_.__value_.__l.__size_;
    }
    sub_216779180(a1, (uint64_t)v48, v49);
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v64.__r_.__value_.__l.__data_);
      if ((v8 & 4) == 0)
      {
LABEL_89:
        if ((v63 & 0x80u) == 0) {
          uint64_t v50 = &v61;
        }
        else {
          uint64_t v50 = v61;
        }
        if ((v63 & 0x80u) == 0) {
          uint64_t v51 = v63;
        }
        else {
          uint64_t v51 = v62;
        }
        unsigned int v52 = sub_216779180(a1, (uint64_t)v50, v51);
        sub_216779180(v52, (uint64_t)"\n", 1);
        if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__b.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v67.__r_.__value_.__l.__data_);
        }
        if ((char)v63 < 0) {
          operator delete(v61);
        }
        if ((v14 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        goto LABEL_105;
      }
    }
    else if ((v8 & 4) == 0)
    {
      goto LABEL_89;
    }
    sub_216779180(a1, (uint64_t)"*", 1);
    goto LABEL_89;
  }
  unint64_t v25 = *(void *)(sub_2168CBA70(a2) + 32);
  unint64_t v60 = v25;
  if ((v25 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    unint64_t v60 = v25 & 0xFFFFFFFFFFFFFFF8;
    v25 &= 0xFFFFFFFFFFFFFFF8;
  }
  sub_2168D7270((pxrInternal__aapl__pxrReserved__::TfToken *)&v60, (uint64_t)&v61);
  *((unsigned char *)&v67.__r_.__value_.__s + 23) = 13;
  strcpy((char *)&v67, "             ");
  *((unsigned char *)&__p.__r_.__value_.__s + 23) = 13;
  strcpy((char *)&__p, "             ");
  *((unsigned char *)&__b.__r_.__value_.__s + 23) = 16;
  strcpy((char *)&__b, "                ");
  sub_2168D86F0(a3 - 1, &v64);
  char v26 = sub_216779180(a1, (uint64_t)&v67, 13);
  uint64_t v27 = sub_216779180(v26, (uint64_t)&__p, 13);
  char v28 = sub_216779180(v27, (uint64_t)&__b, 16);
  unint64_t v29 = sub_216779180(v28, (uint64_t)" ", 1);
  if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v30 = &v64;
  }
  else {
    uint64_t v30 = (std::string *)v64.__r_.__value_.__r.__words[0];
  }
  if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v31 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v31 = v64.__r_.__value_.__l.__size_;
  }
  BOOL v32 = sub_216779180(v29, (uint64_t)v30, v31);
  sub_216779180(v32, (uint64_t)" ", 1);
  uint64_t v33 = sub_216779180(a1, (uint64_t)"[", 1);
  if ((v63 & 0x80u) == 0) {
    long long v34 = &v61;
  }
  else {
    long long v34 = v61;
  }
  if ((v63 & 0x80u) == 0) {
    uint64_t v35 = v63;
  }
  else {
    uint64_t v35 = v62;
  }
  uint64_t v36 = sub_216779180(v33, (uint64_t)v34, v35);
  sub_216779180(v36, (uint64_t)"]\n", 2);
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v64.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__b.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v67.__r_.__value_.__l.__data_);
  }
  if ((char)v63 < 0) {
    operator delete(v61);
  }
  if ((v25 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_2168D7C58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  if (*(char *)(v38 - 105) < 0) {
    operator delete(*(void **)(v38 - 128));
  }
  if (a18 < 0) {
    operator delete(a13);
  }
  if ((v37 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

void *pxrInternal__aapl__pxrReserved__::TraceReporter::ReportTimes(pxrInternal__aapl__pxrReserved__::TraceReporter *a1, void *a2)
{
  pxrInternal__aapl__pxrReserved__::TraceReporter::_RebuildEventAndAggregateTrees(a1);
  sub_216779180(a2, (uint64_t)"\nTotal time for each key ==============\n", 40);
  pxrInternal__aapl__pxrReserved__::TraceReporter::_PrintTimes((uint64_t)a1, a2);

  return sub_216779180(a2, (uint64_t)"\n", 1);
}

void pxrInternal__aapl__pxrReserved__::TraceReporter::ReportChromeTracing(uint64_t *a1, uint64_t a2)
{
  void v6[4] = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::TraceReporter::_RebuildEventAndAggregateTrees((pxrInternal__aapl__pxrReserved__::TraceReporter *)a1);
  pxrInternal__aapl__pxrReserved__::JsWriter::JsWriter(&v5, a2, 0);
  uint64_t v4 = sub_2168BC958(a1 + 17);
  v6[3] = 0;
  pxrInternal__aapl__pxrReserved__::TraceEventTree::WriteChromeTraceObject(v4, (pxrInternal__aapl__pxrReserved__::JsWriter *)&v5, (uint64_t)v6);
  sub_2168CA13C(v6);
  pxrInternal__aapl__pxrReserved__::JsWriter::~JsWriter(&v5);
}

void sub_2168D7EA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t a10)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceReporter::_RebuildEventAndAggregateTrees(pxrInternal__aapl__pxrReserved__::TraceReporter *this)
{
  pxrInternal__aapl__pxrReserved__::TraceReporterBase::_Update(this);
  uint64_t v2 = sub_2168D71E4((uint64_t *)this + 16);
  sub_2168BD6F4(&v18, (uint64_t *)(v2 + 24));
  uint64_t v3 = sub_2168BD290(&v18);
  if (v4 & 1 | (unint64_t)v3)
  {
    uint64_t v5 = sub_2168BC8B0(&v18);
    if (*(void *)(v5 + 96) != *(void *)(v5 + 104))
    {
      unsigned __int8 v6 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
      if (v6)
      {
        long long v7 = (uint64_t *)sub_2168BC8B0(&v18);
        char v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::TraceReporterTokens);
        if (!v8) {
          char v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_2168D88B8(&pxrInternal__aapl__pxrReserved__::TraceReporterTokens);
        }
        if ((*(void *)v8 & 0xFFFFFFFFFFFFFFF8) != 0) {
          Emptyunint64_t String = (uint64_t *)((*(void *)v8 & 0xFFFFFFFFFFFFFFF8) + 16);
        }
        else {
          Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
        }
        if (*((char *)EmptyString + 23) >= 0) {
          size_t v10 = *((unsigned __int8 *)EmptyString + 23);
        }
        else {
          size_t v10 = EmptyString[1];
        }
        uint64_t v11 = __p;
        sub_2167940B4((uint64_t)__p, v10 + 19);
        if (v15 < 0) {
          uint64_t v11 = (void **)__p[0];
        }
        if (v10)
        {
          if (*((char *)EmptyString + 23) >= 0) {
            uint64_t v12 = EmptyString;
          }
          else {
            uint64_t v12 = (const void *)*EmptyString;
          }
          memmove(v11, v12, v10);
        }
        strcpy((char *)v11 + v10, " MallocTags enabled");
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v16);
        pxrInternal__aapl__pxrReserved__::TraceAggregateNode::Append((pxrInternal__aapl__pxrReserved__::TfToken *)&v16, v7, 0, 0, 1, 1, (uint64_t *)&v17);
        sub_2168BD6C4(&v17);
        if ((v16 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if (v15 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  uint64_t result = v19;
  if (v19)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(v19 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_2168D80B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, atomic_uint *a18)
{
  if ((a15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a18)
  {
    if (atomic_fetch_add_explicit(a18 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a18 + 8))(a18);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceReporter::ClearTree(pxrInternal__aapl__pxrReserved__::TraceReporter *this)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::TraceAggregateTree *)sub_2168D71E4((uint64_t *)this + 16);
  pxrInternal__aapl__pxrReserved__::TraceAggregateTree::Clear(v2);
  sub_2168C6880(&v5);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*((void *)this + 17);
  *((void *)this + 17) = v5;
  uint64_t v5 = 0;
  sub_2168BD378(this + 136, v3);
  sub_2168BD348(&v5);
  return pxrInternal__aapl__pxrReserved__::TraceReporterBase::_Clear(this);
}

void sub_2168D81A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168BD348((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::TraceReporter::GetAggregateTreeRoot@<X0>(pxrInternal__aapl__pxrReserved__::TraceReporter *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = (uint64_t *)(sub_2168D71E4((uint64_t *)this + 16) + 24);

  return sub_2168BD6F4(a2, v3);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceReporter::GetEventRoot@<X0>(pxrInternal__aapl__pxrReserved__::TraceReporter *this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = *(void *)(sub_2168BC958((uint64_t *)this + 17) + 24);

  return sub_2168BD80C(a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceReporter::GetEventTree@<X0>(pxrInternal__aapl__pxrReserved__::TraceReporter *this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = *((void *)this + 17);
  return sub_2168BD80C(a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceReporter::GetCounters(pxrInternal__aapl__pxrReserved__::TraceReporter *this)
{
  return sub_2168D71E4((uint64_t *)this + 16) + 56;
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceReporter::GetCounterIndex(pxrInternal__aapl__pxrReserved__::TraceReporter *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::TraceAggregateTree *)sub_2168D71E4((uint64_t *)this + 16);

  return pxrInternal__aapl__pxrReserved__::TraceAggregateTree::GetCounterIndex(v3, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceReporter::AddCounter(pxrInternal__aapl__pxrReserved__::TraceReporter *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, int a3, double a4)
{
  long long v7 = (pxrInternal__aapl__pxrReserved__::TraceAggregateTree *)sub_2168D71E4((uint64_t *)this + 16);

  return pxrInternal__aapl__pxrReserved__::TraceAggregateTree::AddCounter(v7, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceReporter::SetGroupByFunction(uint64_t this, char a2)
{
  *(unsigned char *)(this + 120) = a2;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceReporter::GetGroupByFunction(pxrInternal__aapl__pxrReserved__::TraceReporter *this)
{
  return *((unsigned __int8 *)this + 120);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceReporter::SetFoldRecursiveCalls(uint64_t this, char a2)
{
  *(unsigned char *)(this + 121) = a2;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceReporter::SetShouldAdjustForOverheadAndNoise(uint64_t this, char a2)
{
  *(unsigned char *)(this + 122) = a2;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceReporter::CreateValidEventId(pxrInternal__aapl__pxrReserved__::TraceReporter *this)
{
  pxrInternal__aapl__pxrReserved__::TraceThreadId::TraceThreadId((pxrInternal__aapl__pxrReserved__::TraceThreadId *)&__p);
  if (v3 < 0) {
    operator delete(__p);
  }
  return 1;
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **pxrInternal__aapl__pxrReserved__::TraceReporter::_ProcessCollection(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **result, pxrInternal__aapl__pxrReserved__::TraceCollection ***a2)
{
  if (*a2)
  {
    char v3 = result;
    char v4 = (pxrInternal__aapl__pxrReserved__::TraceEventTree *)sub_2168BC958((uint64_t *)result + 17);
    pxrInternal__aapl__pxrReserved__::TraceEventTree::Add(v4, *a2, (uint64_t *)&v6);
    uint64_t v5 = sub_2168D71E4((uint64_t *)v3 + 16);
    pxrInternal__aapl__pxrReserved__::TraceAggregateTree::Append(v5, &v6, *a2);
    return sub_2168BD348(&v6);
  }
  return result;
}

void sub_2168D83B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168BD348((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TraceReporter::GetGlobalReporter(void *a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B8E5D8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B8E5D8))
  {
    char v4 = sub_2168D85D4(0x90uLL);
    sub_216779094(__p, "Trace global reporter");
    sub_2168D8644(&v7);
    uint64_t v5 = v7;
    long long v7 = 0;
    char v8 = v5;
    pxrInternal__aapl__pxrReserved__::TraceReporter::TraceReporter((uint64_t)v4, (long long *)__p, (uint64_t *)&v8);
    sub_2168D897C(&qword_267B8E5C8, (uint64_t)v4);
    if (v8) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceCollector *))(*(void *)v8 + 8))(v8);
    }
    unsigned __int8 v6 = v7;
    long long v7 = 0;
    if (v6) {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceCollector *))(*(void *)v6 + 8))(v6);
    }
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    __cxa_atexit((void (*)(void *))sub_2168D868C, &qword_267B8E5C8, &dword_216758000);
    __cxa_guard_release(&qword_267B8E5D8);
  }
  uint64_t v3 = unk_267B8E5D0;
  *a1 = qword_267B8E5C8;
  a1[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 + 8), 1u, memory_order_relaxed);
  }
}

void sub_2168D8534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  free(v17);
  __cxa_guard_abort(&qword_267B8E5D8);
  _Unwind_Resume(a1);
}

void *sub_2168D85D4(size_t a1)
{
  sub_216851EE4((uint64_t)&v5, "Trace", "TraceReporter");
  uint64_t v2 = malloc(a1);
  while (v6--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v5);
  return v2;
}

pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceCollector *sub_2168D8644@<X0>(pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceCollector **a1@<X8>)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceCollector *)operator new(0x48uLL);
  uint64_t result = pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceCollector::TraceReporterDataSourceCollector(v2);
  *a1 = v2;
  return result;
}

void sub_2168D8678(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2168D868C(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)(a1 + 8);
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_2168D86F0(int a1@<W0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  uint64_t v4 = a1;
  std::string::resize(a2, a1, 32);
  if (a1 >= 3)
  {
    uint64_t v5 = 2;
    do
    {
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v6 = a2;
      }
      else {
        int v6 = (std::string *)a2->__r_.__value_.__r.__words[0];
      }
      v6->__r_.__value_.__s.__data_[v5] = 124;
      v5 += 4;
    }
    while (v5 < v4);
  }
}

void sub_2168D8768(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_2168D8784(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  return a1;
}

void sub_2168D87B4(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_2168D87B4(a1, *a2);
    sub_2168D87B4(a1, a2[1]);
    uint64_t v4 = a2[5];
    if ((v4 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    operator delete(a2);
  }
}

uint64_t *sub_2168D8820(uint64_t **a1, long long *a2)
{
  uint64_t v4 = (uint64_t *)operator new(0x30uLL);
  long long v5 = *a2;
  *((void *)a2 + 1) = 0;
  int v6 = a1 + 1;
  long long v7 = a1[1];
  *((_OWORD *)v4 + 2) = v5;
  if (v7)
  {
    do
    {
      while (1)
      {
        int v6 = (uint64_t **)v7;
        if ((unint64_t)v5 >= v7[4]) {
          break;
        }
        long long v7 = (uint64_t *)*v7;
        char v8 = v6;
        if (!*v6) {
          goto LABEL_8;
        }
      }
      long long v7 = (uint64_t *)v7[1];
    }
    while (v7);
    char v8 = v6 + 1;
  }
  else
  {
    char v8 = a1 + 1;
  }
LABEL_8:
  sub_21677B358(a1, (uint64_t)v6, v8, v4);
  return v4;
}

unint64_t sub_2168D88B8(atomic_ullong *a1)
{
  uint64_t v2 = sub_2168D8938();
  uint64_t v3 = v2;
  uint64_t v4 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v4, (unint64_t)v2);
  if (v4)
  {
    if (v2)
    {
      int v6 = (void **)((char *)v2 + 8);
      sub_216889A04(&v6);
      if ((*(void *)v3 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v3);
    }
    return atomic_load((unint64_t *)a1);
  }
  return (unint64_t)v3;
}

pxrInternal__aapl__pxrReserved__::TraceReporterTokens_StaticTokenType *sub_2168D8938()
{
  uint64_t v0 = (pxrInternal__aapl__pxrReserved__::TraceReporterTokens_StaticTokenType *)operator new(0x20uLL);
  pxrInternal__aapl__pxrReserved__::TraceReporterTokens_StaticTokenType::TraceReporterTokens_StaticTokenType(v0);
  return v0;
}

void sub_2168D8968(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_2168D897C(void *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0;
  if (a2)
  {
    sub_21685203C((unint64_t *)(a2 + 16), &v6);
    uint64_t v3 = (atomic_uint *)a1[1];
    a1[1] = v6;
    uint64_t v6 = 0;
    if (v3)
    {
      if (atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
      }
      uint64_t v4 = v6;
      if (v6 && atomic_fetch_add_explicit((atomic_uint *volatile)(v6 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      }
    }
  }
  return a1;
}

void sub_2168D8A48(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 8);
  if (v3) {
    sub_217324208(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceReporterBase::TraceReporterBase(uint64_t result, uint64_t *a2)
{
  *(_DWORD *)(result + 8) = 1;
  *(void *)(result + 16) = 0;
  *(void *)uint64_t result = &unk_26C74D140;
  uint64_t v2 = *a2;
  *a2 = 0;
  *(void *)(result + 24) = v2;
  for (uint64_t i = 72; i != 96; i += 8)
    *(void *)(result + i) = 0;
  *(void *)(result + 56) = 0;
  *(void *)(result + 48) = 0;
  *(void *)(result + 64) = result + 72;
  *(void *)(result + 40) = sub_2168D8F78;
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::TraceReporterBase::SerializeProcessedCollections(void *a1, uint64_t a2)
{
  memset(v15, 0, sizeof(v15));
  unint64_t v4 = a1[7];
  __dmb(0xBu);
  unint64_t v5 = tbb::internal::concurrent_vector_base_v3::internal_capacity((tbb::internal::concurrent_vector_base_v3 *)(a1 + 5));
  if (v5 >= v4) {
    unint64_t v6 = v4;
  }
  else {
    unint64_t v6 = v5;
  }
  if (v6)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    unint64_t v9 = 0;
    do
    {
      if (!v9)
      {
        unint64_t v10 = sub_216851020(v8);
        uint64_t v11 = a1[8];
        __dmb(0xBu);
        unint64_t v9 = (long long *)(*(void *)(v11 + 8 * v10) - 32 * ((unint64_t)(1 << v10) >> 1) + v7);
      }
      sub_2168D8BE4((uint64_t *)v15, v9);
      unint64_t v12 = v8 + 1;
      if (((v8 - 1) & (v8 + 1)) != 0) {
        ++v9;
      }
      else {
        unint64_t v9 = 0;
      }
      v7 += 16;
      ++v8;
    }
    while (v6 != v12);
  }
  BOOL v13 = pxrInternal__aapl__pxrReserved__::TraceSerialization::Write(a2, v15);
  uint64_t v16 = v15;
  sub_216787968((void ***)&v16);
  return v13;
}

void sub_2168D8BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_216787968(&a12);
  _Unwind_Resume(a1);
}

void **sub_2168D8BE4(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      sub_21677CB10();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    unint64_t v14 = (char *)sub_216787EE0((uint64_t)result, v13);
    char v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)char v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    sub_2168D903C(a1, v18);
    unint64_t v9 = (void *)a1[1];
    uint64_t result = sub_216788028(v18);
  }
  else
  {
    *uint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_2168D8CEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216788028((void **)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TraceReporterBase::~TraceReporterBase(pxrInternal__aapl__pxrReserved__::TraceReporterBase *this)
{
  *(void *)this = &unk_26C74D140;
  sub_2168D8F88((unint64_t *)this + 4);
  uint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  sub_216859A88((uint64_t *)this + 2, v2);

  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase(this);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceReporterBase::_Clear(pxrInternal__aapl__pxrReserved__::TraceReporterBase *this)
{
  tbb::internal::concurrent_vector_base_v3::internal_clear((pxrInternal__aapl__pxrReserved__::TraceReporterBase *)((char *)this + 40), (void (*)(void *, unint64_t))tbb::concurrent_vector<std::shared_ptr<pxrInternal__aapl__pxrReserved__::TraceCollection>,tbb::cache_aligned_allocator<std::shared_ptr<pxrInternal__aapl__pxrReserved__::TraceCollection>>>::destroy_array);
  uint64_t result = *((void *)this + 3);
  if (result)
  {
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v3();
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::TraceReporterBase::_Update(pxrInternal__aapl__pxrReserved__::TraceReporterBase *this)
{
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {
    (*(void (**)(void **__return_ptr))(*(void *)v2 + 24))(&v7);
    uint64_t v3 = v7;
    for (uint64_t i = v8; v3 != i; v3 += 2)
    {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::TraceReporterBase *, void *))(*(void *)this + 16))(this, v3);
      sub_2168D8F00((uint64_t)this + 32, v3, v5, v6);
    }
    v6[0] = (void **)&v7;
    sub_216787968(v6);
  }
}

void sub_2168D8EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, char a12)
{
  a9 = (void **)&a12;
  sub_216787968(&a9);
  _Unwind_Resume(a1);
}

void *sub_2168D8F00@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X3>, void *a4@<X8>)
{
  uint64_t result = (void *)tbb::internal::concurrent_vector_base_v3::internal_push_back((atomic_ullong *)(a1 + 8), 16, &v10, a3);
  unint64_t v11 = result;
  *uint64_t result = *a2;
  uint64_t v7 = a2[1];
  result[1] = v7;
  if (v7)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    uint64_t result = v11;
  }
  unint64_t v8 = v10;
  *a4 = a1;
  a4[1] = v8;
  a4[2] = result;
  return result;
}

uint64_t sub_2168D8F78(int a1, tbb::internal *this, uint64_t a3, void *a4)
{
  return tbb::internal::NFS_Allocate((unint64_t)this, 16, 0, a4);
}

unint64_t *sub_2168D8F88(unint64_t *a1)
{
  uint64_t v2 = (tbb::internal::concurrent_vector_base_v3 *)(a1 + 1);
  uint64_t v3 = (void *)a1[4];
  unint64_t v4 = tbb::internal::concurrent_vector_base_v3::internal_clear((tbb::internal::concurrent_vector_base_v3 *)(a1 + 1), (void (*)(void *, unint64_t))tbb::concurrent_vector<std::shared_ptr<pxrInternal__aapl__pxrReserved__::TraceCollection>,tbb::cache_aligned_allocator<std::shared_ptr<pxrInternal__aapl__pxrReserved__::TraceCollection>>>::destroy_array);
  sub_216850F48((uint64_t)a1, v3, v4, a1[2]);
  tbb::internal::concurrent_vector_base_v3::~concurrent_vector_base_v3(v2, v5);
  return a1;
}

void tbb::concurrent_vector<std::shared_ptr<pxrInternal__aapl__pxrReserved__::TraceCollection>,tbb::cache_aligned_allocator<std::shared_ptr<pxrInternal__aapl__pxrReserved__::TraceCollection>>>::destroy_array(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    uint64_t v3 = (std::__shared_weak_count **)(a1 + 16 * a2 - 8);
    do
    {
      if (*v3) {
        sub_216784EC4(*v3);
      }
      v3 -= 2;
      --v2;
    }
    while (v2);
  }
}

uint64_t sub_2168D903C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_2168D90B4((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_2168D90B4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_2168D9148((uint64_t)v12);
  return v10;
}

uint64_t sub_2168D9148(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216787FE4(a1);
  }
  return a1;
}

void *pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceCollection::TraceReporterDataSourceCollection(void *a1, uint64_t *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  *a1 = &unk_26C74D1E0;
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v6 = *a2;
  uint64_t v7 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  unint64_t v4 = operator new(0x10uLL);
  a1[3] = v4 + 2;
  a1[1] = v4;
  a1[2] = v4;
  a1[2] = sub_2168D943C((uint64_t)(a1 + 3), &v6, &v8, v4);
  if (v7) {
    sub_216784EC4(v7);
  }
  return a1;
}

void sub_2168D926C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  uint64_t v15 = v14;
  *((void *)v13 + 2) = v15;
  sub_216787968(&a10);
  if (a13) {
    sub_216784EC4(a13);
  }
  pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceBase::~TraceReporterDataSourceBase(v13);
  _Unwind_Resume(a1);
}

__n128 pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceCollection::TraceReporterDataSourceCollection(void *a1, __n128 *a2)
{
  *a1 = &unk_26C74D1E0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  __n128 result = *a2;
  *(__n128 *)(a1 + 1) = *a2;
  a1[3] = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

{
  __n128 result;

  *a1 = &unk_26C74D1E0;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  __n128 result = *a2;
  *(__n128 *)(a1 + 1) = *a2;
  a1[3] = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

__n128 pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceCollection::Clear(pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceCollection *this)
{
  long long v1 = *(_OWORD *)((char *)this + 8);
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  long long v4 = v1;
  uint64_t v2 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  uint64_t v5 = v2;
  uint64_t v6 = (void **)&v4;
  sub_216787968(&v6);
  return result;
}

__n128 pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceCollection::ConsumeData@<Q0>(pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceCollection *this@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *(__n128 *)((char *)this + 8);
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *a2 = result;
  unint64_t v3 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  a2[1].n128_u64[0] = v3;
  return result;
}

void sub_2168D9380(void **a1)
{
  *a1 = &unk_26C74D1E0;
  uint64_t v2 = a1 + 1;
  sub_216787968(&v2);
  pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceBase::~TraceReporterDataSourceBase((pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceBase *)a1);
}

void sub_2168D93DC(void **a1)
{
  *a1 = &unk_26C74D1E0;
  unint64_t v3 = a1 + 1;
  sub_216787968(&v3);
  pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceBase::~TraceReporterDataSourceBase((pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceBase *)a1);
  operator delete(v2);
}

void *sub_2168D943C(uint64_t a1, void *a2, void *a3, void *a4)
{
  long long v4 = a4;
  uint64_t v10 = a4;
  long long v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *long long v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  sub_2168D94CC((uint64_t)v7);
  return v4;
}

uint64_t sub_2168D94CC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_2168B84AC(a1);
  }
  return a1;
}

pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceCollector *pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceCollector::TraceReporterDataSourceCollector(pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceCollector *this)
{
  void v3[4] = *MEMORY[0x263EF8340];
  v3[0] = &unk_26C74D290;
  v3[1] = sub_2168D95B4;
  v3[3] = v3;
  pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceCollector::TraceReporterDataSourceCollector(this, (uint64_t)v3);
  sub_2168D9C9C(v3);
  return this;
}

{
  void v3[5];

  void v3[4] = *MEMORY[0x263EF8340];
  v3[0] = &unk_26C74D290;
  v3[1] = sub_2168D95B4;
  v3[3] = v3;
  pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceCollector::TraceReporterDataSourceCollector(this, (uint64_t)v3);
  sub_2168D9C9C(v3);
  return this;
}

void sub_2168D95A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168D9C9C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2168D95B4()
{
  return 1;
}

void *pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceCollector::TraceReporterDataSourceCollector(void *a1, uint64_t a2)
{
  a1[1] = 0;
  *a1 = &unk_26C74D228;
  sub_2168D9C1C((uint64_t)(a1 + 2), a2);
  a1[6] = &unk_26C74D3C0;
  long long v4 = (void *)tbb::internal::NFS_Allocate(1uLL, 704, 0, v3);
  a1[7] = v4;
  bzero(v4, 0x2C0uLL);
  *(int64x2_t *)(a1[7] + 256) = vdupq_n_s64(0x10uLL);
  a1[6] = &unk_26C74D340;
  sub_2168D9FEC(&v9, (uint64_t)a1);
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::TfNotice *)sub_2168DA0D0(&v9, (uint64_t)pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceCollector::_OnTraceCollection, 0);
  pxrInternal__aapl__pxrReserved__::TfNotice::_Register(v5, &v11);
  uint64_t v6 = v12;
  if (v12 && atomic_fetch_add_explicit((atomic_uint *volatile)(v12 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = v10;
  if (v10 && atomic_fetch_add_explicit((atomic_uint *volatile)(v10 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  return a1;
}

void sub_2168D9748(_Unwind_Exception *a1)
{
  sub_2168D9DF0(v4);
  sub_2168D9C9C(v3);
  sub_216859A88(v2, v6);
  pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceBase::~TraceReporterDataSourceBase(v1);
  _Unwind_Resume(a1);
}

void sub_2168D9860(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168D9C9C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceCollector::_OnTraceCollection(pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceCollector *this, const pxrInternal__aapl__pxrReserved__::TraceCollectionAvailable *a2)
{
  uint64_t v3 = *((void *)this + 5);
  if (!v3) {
    sub_21683A7CC();
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 48))(v3);
  if (result)
  {
    uint64_t v6 = *((void *)this + 7);
    unint64_t add = atomic_fetch_add((atomic_ullong *volatile)(v6 + 128), 1uLL);
    return sub_2168DABE8((void *)(v6 + 40 * ((3 * (_BYTE)add) & 7) + 384), (uint64_t)a2 + 8, add, (uint64_t *)this + 6, (uint64_t (*)(void *, uint64_t))sub_2168DABCC);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceCollector::ConsumeData(pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceCollector *this@<X0>, uint64_t *a2@<X8>)
{
  long long v4 = (atomic_ullong *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCollector>::_instance);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TraceCollector>::_CreateInstance();
  }
  pxrInternal__aapl__pxrReserved__::TraceCollector::CreateCollection(v4);
  a2[2] = 0;
  *a2 = 0;
  a2[1] = 0;
  uint64_t v5 = (char *)this + 48;
  long long v16 = 0uLL;
  while (sub_2168DA8C8((uint64_t)v5, (uint64_t)&v16))
  {
    uint64_t v7 = (_OWORD *)a2[1];
    unint64_t v6 = a2[2];
    if ((unint64_t)v7 >= v6)
    {
      uint64_t v9 = ((uint64_t)v7 - *a2) >> 4;
      if ((unint64_t)(v9 + 1) >> 60) {
        sub_21677CB10();
      }
      uint64_t v10 = v6 - *a2;
      uint64_t v11 = v10 >> 3;
      if (v10 >> 3 <= (unint64_t)(v9 + 1)) {
        uint64_t v11 = v9 + 1;
      }
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v11;
      }
      v17[4] = a2 + 2;
      char v13 = (char *)sub_216787EE0((uint64_t)(a2 + 2), v12);
      uint64_t v14 = &v13[16 * v9];
      v17[0] = v13;
      v17[1] = v14;
      v17[3] = &v13[16 * v15];
      *(_OWORD *)uint64_t v14 = v16;
      long long v16 = 0uLL;
      v17[2] = v14 + 16;
      sub_2168D903C(a2, v17);
      char v8 = (_OWORD *)a2[1];
      sub_216788028(v17);
    }
    else
    {
      *uint64_t v7 = v16;
      char v8 = v7 + 1;
      long long v16 = 0uLL;
      a2[1] = (uint64_t)v8;
    }
    a2[1] = (uint64_t)v8;
  }
  if (*((void *)&v16 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v16 + 1));
  }
}

void sub_2168D9A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  sub_216787968(&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceCollector::Clear(pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceCollector *this)
{
}

void sub_2168D9AA8(uint64_t a1)
{
  uint64_t v7 = 0;
  char v8 = 0;
  while (1)
  {
    uint64_t v2 = *(uint64_t **)(a1 + 8);
    uint64_t v3 = v2[16];
    __dmb(0xBu);
    uint64_t v4 = *v2;
    __dmb(0xBu);
    uint64_t v5 = v2[16];
    __dmb(0xBu);
    if (v3 == v5)
    {
      uint64_t v6 = v2[34];
      __dmb(0xBu);
      if (v3 == v6 + v4) {
        break;
      }
    }
    sub_2168DA8C8(a1, (uint64_t)&v7);
  }
  if (v8) {
    sub_216784EC4(v8);
  }
}

void sub_2168D9B28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_2168D9B40(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_26C74D228;
  uint64_t v2 = a1 + 1;
  sub_2168D9DF0(a1 + 6);
  sub_2168D9C9C(a1 + 2);
  sub_216859A88(v2, v3);

  pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceBase::~TraceReporterDataSourceBase((pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceBase *)a1);
}

void sub_2168D9BAC(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_26C74D228;
  uint64_t v2 = a1 + 1;
  sub_2168D9DF0(a1 + 6);
  sub_2168D9C9C(a1 + 2);
  sub_216859A88(v2, v3);
  pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceBase::~TraceReporterDataSourceBase((pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceBase *)a1);

  operator delete(v4);
}

uint64_t sub_2168D9C1C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *sub_2168D9C9C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_2168D9D28(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26C74D290;
  result[1] = v3;
  return result;
}

uint64_t sub_2168D9D70(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C74D290;
  a2[1] = v2;
  return result;
}

uint64_t sub_2168D9D9C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 8))();
}

uint64_t sub_2168D9DA4(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C74D310)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2168D9DE4()
{
  return &unk_26C74D310;
}

uint64_t sub_2168D9DF0(void *a1)
{
  *a1 = &unk_26C74D340;
  sub_2168D9AA8((uint64_t)a1);
  sub_2168D9E50((uint64_t)a1);

  return sub_2168D9ED0((uint64_t)a1, v2);
}

uint64_t sub_2168D9E50(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = 0;
  uint64_t v3 = *(void *)(result + 8) + 400;
  do
  {
    unint64_t v4 = *(void *)(v3 + v2);
    __dmb(0xBu);
    if (v4 >= 2)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 24))(v1);
      __dmb(0xBu);
      *(void *)(v3 + v2) = 0;
    }
    v2 += 40;
  }
  while (v2 != 320);
  return result;
}

uint64_t sub_2168D9ED0(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_26C74D3C0;
  tbb::internal::NFS_Free(*(tbb::internal **)(a1 + 8), a2);
  return a1;
}

void sub_2168D9F1C(void *a1)
{
  uint64_t v1 = (void *)sub_2168D9DF0(a1);

  operator delete(v1);
}

uint64_t sub_2168D9F44(void *a1)
{
  return (*(uint64_t (**)(void *, uint64_t))(*a1 + 32))(a1, 16 * *(void *)(a1[1] + 256) + 16);
}

uint64_t sub_2168D9F74(void *a1, uint64_t a2)
{
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*a1 + 40))(a1, a2, 16 * *(void *)(a1[1] + 256) + 16);
}

uint64_t sub_2168D9FA4(int a1, tbb::internal *this, uint64_t a3, void *a4)
{
  uint64_t v4 = tbb::internal::NFS_Allocate((unint64_t)this, 1, 0, a4);
  if (!v4) {
    tbb::internal::throw_exception_v4(1);
  }
  return v4;
}

uint64_t sub_2168D9FE4(int a1, tbb::internal *this)
{
  return tbb::internal::NFS_Free(this, this);
}

void *sub_2168D9FEC(void *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0;
  if (a2)
  {
    sub_21685203C((unint64_t *)(a2 + 8), &v6);
    uint64_t v3 = (atomic_uint *)a1[1];
    a1[1] = v6;
    uint64_t v6 = 0;
    if (v3)
    {
      if (atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
      }
      uint64_t v4 = v6;
      if (v6 && atomic_fetch_add_explicit((atomic_uint *volatile)(v6 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      }
    }
  }
  return a1;
}

void sub_2168DA0B8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(atomic_uint **)(v1 + 8);
  if (v3) {
    sub_217323F90(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2168DA0D0(void *a1, uint64_t a2, uint64_t a3)
{
  *(void *)&long long v8 = a2;
  *((void *)&v8 + 1) = a3;
  uint64_t v4 = operator new(0x68uLL);
  v7[0] = &unk_26C74B5E8;
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)v6);
  sub_2168DA1BC((uint64_t)v4, a1, &v8, (uint64_t)v7);
  (*(void (**)(void *))v7[0])(v7);
  return v4;
}

void sub_2168DA180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void (**a11)(void))
{
  (*a11)(&a11);
  operator delete(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_2168DA1BC(uint64_t a1, void *a2, _OWORD *a3, uint64_t a4)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 32) = 1;
  *(void *)a1 = &unk_26C74D400;
  uint64_t v6 = a2[1];
  *(void *)(a1 + 40) = *a2;
  *(void *)(a1 + sub_2168D9AA8((uint64_t)this + 48) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 + 8), 1u, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)a4 + 16))(a4, a1 + 56);
  *(_OWORD *)(a1 + 88) = *a3;
  return a1;
}

void sub_2168DA258(_Unwind_Exception *a1, const void *a2)
{
  uint64_t v4 = (atomic_uint *)*((void *)v2 + 6);
  if (v4) {
    sub_217324328(v4);
  }
  pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase::~_DelivererBase(v2, a2);
  _Unwind_Resume(a1);
}

void sub_2168DA278(uint64_t a1)
{
  *(void *)a1 = &unk_26C74D400;
  (**(void (***)(void))(a1 + 56))();
  uint64_t v3 = *(atomic_uint **)(a1 + 48);
  if (v3 && atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  }

  pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase::~_DelivererBase((pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase *)a1, v2);
}

void sub_2168DA32C(uint64_t a1)
{
  *(void *)a1 = &unk_26C74D400;
  (**(void (***)(void))(a1 + 56))();
  uint64_t v3 = *(atomic_uint **)(a1 + 48);
  if (v3 && atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
  }
  pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase::~_DelivererBase((pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase *)a1, v2);

  operator delete(v4);
}

uint64_t sub_2168DA3E4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v9 = a1[6];
  long long v8 = a1 + 6;
  if (!v9) {
    return 0;
  }
  char v13 = v8 - 1;
  uint64_t v14 = sub_216850B68(v8);
  uint64_t v15 = *v13;
  BOOL v16 = !*(unsigned char *)(v14 + 14) || v15 == 0;
  if (v16
    || (pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::IsInvalid((pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr *)(a1 + 7)) & 1) != 0)
  {
    return 0;
  }
  if (*a7 != a7[1])
  {
    uint64_t v26 = v15;
    uint64_t v22 = (*(uint64_t (**)(uint64_t *))(*a1 + 40))(a1);
    uint64_t v23 = sub_2168DA820(v13) + 8;
    if (v22) {
      uint64_t v24 = a6;
    }
    else {
      uint64_t v24 = MEMORY[0x263F8C288];
    }
    unint64_t v25 = (char *)v22;
    uint64_t v15 = v26;
  }
  uint64_t v18 = (void (*)(void *, uint64_t))a1[11];
  uint64_t v19 = a1[12];
  unint64_t v20 = (void *)(v15 + (v19 >> 1));
  if (v19) {
    uint64_t v18 = *(void (**)(void *, uint64_t))(*v20 + v18);
  }
  v18(v20, a2);
  if (*a7 != a7[1]) {
    pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase::_EndDelivery((uint64_t)a1, a7, v21);
  }
  return 1;
}

uint64_t sub_2168DA544(uint64_t a1, const std::type_info *a2, char *a3)
{
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)v13);
  if (v13[0] == v3)
  {
    v13[0] = "tf/notice.h";
    v13[1] = "GetNoticeType";
    v13[2] = 563;
    unsigned int v13[3] = "virtual TfType pxrInternal__aapl__pxrReserved__::TfNotice::_StandardDeliverer<pxrInternal__aapl__pxrReserve"
             "d__::TfNotice::_Deliverer<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::Tra"
             "ceReporterDataSourceCollector>, pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr, void (pxrInternal__aapl__px"
             "rReserved__::TraceReporterDataSourceCollector::*)(const pxrInternal__aapl__pxrReserved__::TraceCollectionAv"
             "ailable &), pxrInternal__aapl__pxrReserved__::TraceCollectionAvailable>>::GetNoticeType() const [Derived = "
             "pxrInternal__aapl__pxrReserved__::TfNotice::_Deliverer<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInter"
             "nal__aapl__pxrReserved__::TraceReporterDataSourceCollector>, pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr"
             ", void (pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceCollector::*)(const pxrInternal__aapl__pxr"
             "Reserved__::TraceCollectionAvailable &), pxrInternal__aapl__pxrReserved__::TraceCollectionAvailable>]";
    char v14 = 0;
    int v15 = 4;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)((unint64_t)off_26C74CF40 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&v9);
    uint64_t v4 = std::string::insert(&v9, 0, "notice type ");
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v10.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v10.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    uint64_t v6 = std::string::append(&v10, " undefined in the TfType system");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    std::string::size_type v12 = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((uint64_t)v13, (uint64_t)__p);
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v10.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v9.__r_.__value_.__l.__data_);
    }
  }
  return v3;
}

void sub_2168DA664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2168DA6B0(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  uint64_t result = pxrInternal__aapl__pxrReserved__::TfType::IsA(a2, v6, v7);
  if (result)
  {
    std::string v9 = (pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr *)(a1 + 56);
    char IsInvalid = pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::IsInvalid(v9);
    uint64_t result = 0;
    if (a3)
    {
      if ((IsInvalid & 1) == 0) {
        return pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::GetWeakBase(v9) == a3;
      }
    }
  }
  return result;
}

uint64_t sub_2168DA740(uint64_t a1)
{
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr *)(a1 + 56);
  if (!pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::operator BOOL(a1 + 56)) {
    return 0;
  }

  return pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::GetWeakBase(v1);
}

void *sub_2168DA790(uint64_t a1)
{
  uint64_t v2 = operator new(0x68uLL);
  (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  sub_2168DA1BC((uint64_t)v2, (void *)(a1 + 40), (_OWORD *)(a1 + 88), a1 + 56);
  return v2;
}

void sub_2168DA80C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2168DA820(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1 + 1;
  if (!v3
    || ((v4 = *(unsigned __int8 *)(sub_216850B68(v2) + 14), result = *a1, v4) ? (BOOL v6 = result == 0) : (BOOL v6 = 1), v6))
  {
    long long v7 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/weakPtrFacade.h", 47);
    v8[0] = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/weakPtrFacade.h", (uint64_t)v7, 0x2Fu);
    v8[1] = "operator->";
    float64x2_t v8[2] = 216;
    float v8[3] = "DataType *pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr, pxr"
            "Internal__aapl__pxrReserved__::TraceReporterDataSourceCollector>::operator->() const [PtrTemplate = pxrInter"
            "nal__aapl__pxrReserved__::TfWeakPtr, Type = pxrInternal__aapl__pxrReserved__::TraceReporterDataSourceCollector]";
    char v9 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError((uint64_t)v8, (pxrInternal__aapl__pxrReserved__ *)(0x8000000217455719 & 0x7FFFFFFFFFFFFFFFLL));
  }
  return result;
}

BOOL sub_2168DA8C8(uint64_t a1, uint64_t a2)
{
  int v4 = *(atomic_ullong **)(a1 + 8);
  while (1)
  {
    unint64_t v5 = *v4;
    __dmb(0xBu);
    atomic_ullong v6 = v4[16];
    __dmb(0xBu);
    uint64_t v7 = v6 - v5;
    BOOL v8 = v7 > 0;
LABEL_3:
    if (v7 < 1) {
      return 0;
    }
    while (1)
    {
      unint64_t v9 = v5;
      atomic_compare_exchange_strong(v4, &v9, v5 + 1);
      if (v9 == v5) {
        break;
      }
      unint64_t add_explicit = atomic_fetch_add_explicit(v4, 0, memory_order_relaxed);
      if (add_explicit != v5)
      {
        atomic_ullong v11 = v4[16];
        __dmb(0xBu);
        uint64_t v7 = v11 - add_explicit;
        unint64_t v5 = add_explicit;
        goto LABEL_3;
      }
    }
    if (sub_2168DA988(&v4[5 * ((3 * v5) & 7) + 48], a2, v5, a1)) {
      return v8;
    }
  }
}

BOOL sub_2168DA988(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v8 = a3 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = a1[1];
  __dmb(0xBu);
  if (v9 != (a3 & 0xFFFFFFFFFFFFFFF8))
  {
    while (1)
    {
      uint64_t v12 = a1[1];
      __dmb(0xBu);
      if (v12 == v8) {
        break;
      }
      sched_yield();
    }
  }
  uint64_t v10 = a1[3];
  __dmb(0xBu);
  if (v10 == v8)
  {
    while (1)
    {
      uint64_t v11 = a1[3];
      __dmb(0xBu);
      if (v11 != v8) {
        break;
      }
      sched_yield();
    }
  }
  uint64_t v13 = *a1;
  __dmb(0xBu);
  uint64_t v14 = *(void *)(a4 + 8);
  uint64_t v15 = *(void *)(v14 + 256) - 1;
  uint64_t v16 = v15 & (a3 >> 3);
  if (v16 == v15) {
    uint64_t v17 = v13;
  }
  else {
    uint64_t v17 = 0;
  }
  v20[0] = v8 + 8;
  v20[1] = (uint64_t)a1;
  v20[2] = v17;
  v20[3] = a4;
  uint64_t v18 = *(void *)(v13 + 8) & (1 << v16);
  if (v18) {
    sub_2168DAAA4((uint64_t)a1, a2, v13, v16);
  }
  else {
    atomic_fetch_add((atomic_ullong *volatile)(v14 + 272), 0xFFFFFFFFFFFFFFFFLL);
  }
  sub_2168DAB04(v20);
  return v18 != 0;
}

void sub_2168DAA90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2168DAAA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a3 + 16 * a4;
  long long v5 = *(_OWORD *)(v4 + 16);
  *(void *)(v4 + 16) = 0;
  *(void *)(v4 + 24) = 0;
  atomic_ullong v6 = (std::__shared_weak_count **)(v4 + 24);
  uint64_t v7 = *(std::__shared_weak_count **)(a2 + 8);
  *(_OWORD *)a2 = v5;
  if (v7) {
    sub_216784EC4(v7);
  }
  unint64_t v8 = *v6;
  if (*v6)
  {
    sub_216784EC4(v8);
  }
}

uint64_t *sub_2168DAB04(uint64_t *a1)
{
  uint64_t v2 = (unint64_t *)a1[2];
  if ((unint64_t)v2 < 2)
  {
    uint64_t v10 = *a1;
    uint64_t v9 = a1[1];
    __dmb(0xBu);
    *(void *)(v9 + 8) = v10;
  }
  else
  {
    sub_21685036C((uint64_t)&v12, a1[1] + 32);
    unint64_t v3 = *v2;
    uint64_t v4 = (unint64_t *)a1[1];
    __dmb(0xBu);
    *uint64_t v4 = v3;
    if (v3 <= 1)
    {
      uint64_t v5 = a1[1];
      __dmb(0xBu);
      *(void *)(v5 + 16) = 0;
    }
    atomic_ullong v6 = v12;
    if (v12)
    {
      __dmb(0xBu);
      *atomic_ullong v6 = 0;
    }
    uint64_t v8 = *a1;
    uint64_t v7 = a1[1];
    __dmb(0xBu);
    *(void *)(v7 + 8) = v8;
    (*(void (**)(uint64_t, unint64_t *))(*(void *)a1[3] + 24))(a1[3], v2);
  }
  return a1;
}

void *sub_2168DABCC(void *result, void *a2)
{
  uint64_t v2 = a2[1];
  *uint64_t result = *a2;
  result[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_2168DABE8(void *a1, uint64_t a2, unint64_t a3, uint64_t *a4, uint64_t (*a5)(void *, uint64_t))
{
  unint64_t v9 = a3 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = (*(void *)(a4[1] + 256) - 1) & (a3 >> 3);
  if (v10)
  {
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v11 = (void *)(*(uint64_t (**)(uint64_t *))(*a4 + 16))(a4);
    *uint64_t v11 = 0;
    v11[1] = 0;
  }
  uint64_t v12 = a1[3];
  __dmb(0xBu);
  if (v12 != v9) {
    sub_2168DAE14((uint64_t)a1, a1 + 3, v9, a4[1]);
  }
  if (v11)
  {
    sub_21685036C((uint64_t)&v16, (uint64_t)(a1 + 4));
    uint64_t v13 = (void *)a1[2];
    __dmb(0xBu);
    if ((unint64_t)v13 < 2)
    {
      __dmb(0xBu);
      *a1 = v11;
    }
    else
    {
      *uint64_t v13 = v11;
    }
    __dmb(0xBu);
    a1[2] = v11;
    uint64_t v14 = v16;
    if (v16)
    {
      __dmb(0xBu);
      *uint64_t v14 = 0;
    }
  }
  else
  {
    uint64_t v11 = (void *)a1[2];
    __dmb(0xBu);
  }
  uint64_t result = a5(&v11[2 * v10 + 2], a2);
  v11[1] |= 1 << v10;
  atomic_fetch_add(a1 + 3, 8uLL);
  return result;
}

void sub_2168DAD2C(void *a1)
{
  __cxa_begin_catch(a1);
  atomic_fetch_add((atomic_ullong *volatile)(*(void *)(v1 + 8) + 272), 1uLL);
  sub_2168DAD98(v2, v3);
}

void sub_2168DAD4C()
{
}

void sub_2168DAD54(_Unwind_Exception *a1)
{
}

void sub_2168DAD98(void *a1, uint64_t a2)
{
  sub_21685036C((uint64_t)&v6, (uint64_t)(a1 + 4));
  __dmb(0xBu);
  a1[3] = a2 + 9;
  uint64_t v4 = (void *)a1[2];
  __dmb(0xBu);
  if ((unint64_t)v4 < 2)
  {
    __dmb(0xBu);
    *a1 = 1;
  }
  else
  {
    *uint64_t v4 = 1;
  }
  __dmb(0xBu);
  a1[2] = 1;
  uint64_t v5 = v6;
  if (v6)
  {
    __dmb(0xBu);
    *uint64_t v5 = 0;
  }
  __cxa_rethrow();
}

uint64_t sub_2168DAE14(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = sched_yield();
  uint64_t v8 = *a2;
  __dmb(0xBu);
  if (v8 != a3)
  {
    unint64_t v9 = (atomic_ullong *)(a4 + 272);
    do
    {
      if (v8)
      {
        atomic_fetch_add(v9, 1uLL);
        tbb::internal::throw_exception_v4(2);
      }
      uint64_t result = sched_yield();
      uint64_t v8 = *a2;
      __dmb(0xBu);
    }
    while (v8 != a3);
  }
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::TraceSerialization::Write(uint64_t a1, uint64_t *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (!*a2) {
    return 0;
  }
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  uint64_t v11 = *a2;
  uint64_t v12 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  atomic_ullong v6 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  unint64_t v9 = &v6;
  char v10 = 0;
  atomic_ullong v6 = (pxrInternal__aapl__pxrReserved__::TraceCollection ***)operator new(0x10uLL);
  uint64_t v7 = v6;
  uint64_t v8 = v6 + 2;
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::TraceCollection ***)sub_2168D943C((uint64_t)&v8, &v11, &v13, v6);
  BOOL v4 = pxrInternal__aapl__pxrReserved__::TraceSerialization::Write(a1, &v6);
  unint64_t v9 = &v6;
  sub_216787968((void ***)&v9);
  if (v12) {
    sub_216784EC4(v12);
  }
  return v4;
}

void sub_2168DAF7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    sub_216784EC4(a15);
  }
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::TraceSerialization::Write(uint64_t a1, pxrInternal__aapl__pxrReserved__::TraceCollection ****a2)
{
  pxrInternal__aapl__pxrReserved__::JsValue::JsValue((pxrInternal__aapl__pxrReserved__::JsValue *)v10);
  BOOL v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    v7[0] = (uint64_t *)"trace/serialization.cpp";
    v7[1] = (uint64_t *)"Write";
    v7[2] = (uint64_t *)55;
    void v7[3] = (uint64_t *)"static BOOL pxrInternal__aapl__pxrReserved__::TraceSerialization::Write(std::ostream &, const std"
                       "::vector<std::shared_ptr<TraceCollection>> &)";
    char v8 = 0;
    pxrInternal__aapl__pxrReserved__::TfScopeDescription::TfScopeDescription(v9, "Writing JSON", v7);
    pxrInternal__aapl__pxrReserved__::JsWriter::JsWriter(v7, a1, 0);
    pxrInternal__aapl__pxrReserved__::Trace_JSONSerialization::WriteCollectionsToJSON((pxrInternal__aapl__pxrReserved__::JsWriter *)v7, a2);
    pxrInternal__aapl__pxrReserved__::JsWriter::~JsWriter(v7);
    pxrInternal__aapl__pxrReserved__::TfScopeDescription::~TfScopeDescription((pxrInternal__aapl__pxrReserved__::TfScopeDescription *)v9);
  }
  if (v11) {
    sub_216784EC4(v11);
  }
  return v4 != v5;
}

void sub_2168DB078(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, uint64_t *);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  pxrInternal__aapl__pxrReserved__::JsWriter::~JsWriter((uint64_t **)va);
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::~TfScopeDescription((pxrInternal__aapl__pxrReserved__::TfScopeDescription *)va1);
  BOOL v4 = *(std::__shared_weak_count **)(v2 - 40);
  if (v4) {
    sub_216784EC4(v4);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TraceSerialization::Read(void *a1@<X0>, uint64_t a2@<X1>, uint64_t ***a3@<X8>)
{
  long long v12 = 0u;
  long long v13 = 0u;
  pxrInternal__aapl__pxrReserved__::JsParseStream(a1, (uint64_t)&v12, (pxrInternal__aapl__pxrReserved__::JsValue *)v10);
  if (pxrInternal__aapl__pxrReserved__::JsValue::IsNull((pxrInternal__aapl__pxrReserved__::JsValue *)v10))
  {
    if (a2)
    {
      uint64_t v7 = (char *)&v12 + 8;
      if (v13 < 0) {
        uint64_t v7 = (char *)*((void *)&v12 + 1);
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Error parsing JSON\nline: %d, col: %d ->\n\t%s.\n", v5, v6, v12, DWORD1(v12), v7);
      if (*(char *)(a2 + 23) < 0) {
        operator delete(*(void **)a2);
      }
      *(_OWORD *)a2 = v8;
      *(void *)(a2 + 16) = v9;
    }
    *a3 = 0;
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::Trace_JSONSerialization::CollectionFromJSON((pxrInternal__aapl__pxrReserved__::Trace_JSONSerialization *)v10, a3);
  }
  if (v11) {
    sub_216784EC4(v11);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(*((void **)&v12 + 1));
  }
}

void sub_2168DB184(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_216784EC4(a16);
  }
  if (*(char *)(v16 - 17) < 0) {
    operator delete(*(void **)(v16 - 40));
  }
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::TraceStaticKeyData::operator==(const char **a1, const char **a2)
{
  BOOL v4 = *a1;
  uint64_t v5 = *a2;
  if (v4 != v5)
  {
    BOOL v6 = !v4 || v5 == 0;
    if (v6 || strcmp(v4, v5)) {
      return 0;
    }
  }
  uint64_t v7 = a1[1];
  long long v8 = a2[1];
  if (v7 != v8)
  {
    BOOL v9 = !v7 || v8 == 0;
    if (v9 || strcmp(v7, v8)) {
      return 0;
    }
  }
  uint64_t v11 = a1[2];
  long long v12 = a2[2];
  if (v11 == v12) {
    return 1;
  }
  BOOL result = 0;
  if (v11)
  {
    if (v12) {
      return strcmp(a1[2], v12) == 0;
    }
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::TraceStaticKeyData::GetString(pxrInternal__aapl__pxrReserved__::TraceStaticKeyData *this@<X0>, uint64_t a2@<X8>)
{
  _OWORD v22[2] = *MEMORY[0x263EF8340];
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  BOOL v4 = *(char **)this;
  if (*(void *)this && *((void *)this + 1))
  {
    if (*((void *)this + 2))
    {
      sub_216779094(v17, v4);
      sub_216779094(&__p, *((char **)this + 1));
      pxrInternal__aapl__pxrReserved__::ArchGetPrettierFunctionName((uint64_t)v17, &__p, &v19);
      uint64_t v5 = std::string::append(&v19, " (");
      long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v20.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      uint64_t v7 = std::string::append(&v20, *((const std::string::value_type **)this + 2));
      long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v21.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      BOOL v9 = std::string::append(&v21, ")");
      std::string::size_type v10 = v9->__r_.__value_.__r.__words[0];
      v22[0] = v9->__r_.__value_.__l.__size_;
      *(void *)((char *)v22 + 7) = *(std::string::size_type *)((char *)&v9->__r_.__value_.__r.__words[1] + 7);
      char v11 = HIBYTE(v9->__r_.__value_.__r.__words[2]);
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      int v12 = SHIBYTE(v21.__r_.__value_.__r.__words[2]);
      *(void *)(a2 + 15) = *(void *)((char *)v22 + 7);
      uint64_t v13 = v22[0];
      *(void *)a2 = v10;
      *(void *)(a2 + 8) = v13;
      *(unsigned char *)(a2 + 23) = v11;
      if (v12 < 0) {
        operator delete(v21.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v20.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v19.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v18 < 0)
      {
        uint64_t v14 = (void *)v17[0];
LABEL_20:
        operator delete(v14);
      }
    }
    else
    {
      sub_216779094(&v20, v4);
      sub_216779094(&v19, *((char **)this + 1));
      pxrInternal__aapl__pxrReserved__::ArchGetPrettierFunctionName((uint64_t)&v20, &v19, &v21);
      int v15 = SHIBYTE(v19.__r_.__value_.__r.__words[2]);
      *(std::string *)a2 = v21;
      *((unsigned char *)&v21.__r_.__value_.__s + 23) = 0;
      v21.__r_.__value_.__s.__data_[0] = 0;
      if (v15 < 0) {
        operator delete(v19.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      {
        uint64_t v14 = (void *)v20.__r_.__value_.__r.__words[0];
        goto LABEL_20;
      }
    }
  }
  else
  {
    MEMORY[0x21D4477E0](a2, *((void *)this + 2));
  }
}

void sub_2168DB448(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::TraceThreadId *pxrInternal__aapl__pxrReserved__::TraceThreadId::TraceThreadId(pxrInternal__aapl__pxrReserved__::TraceThreadId *this)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__ *)pthread_self();
  uint64_t MainThreadId = pxrInternal__aapl__pxrReserved__::ArchGetMainThreadId(v2);
  if (v2)
  {
    if (MainThreadId && v2 == (pxrInternal__aapl__pxrReserved__ *)MainThreadId) {
      goto LABEL_4;
    }
  }
  else if (!MainThreadId)
  {
LABEL_4:
    MEMORY[0x21D4477E0](this, "Main Thread");
    return this;
  }
  sub_21677B834((uint64_t)v8);
  BOOL v4 = sub_216779180(v8, (uint64_t)"Thread ", 7);
  pthread_self();
  sub_21685D574(v4);
  std::stringbuf::str();
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
  *(_OWORD *)this = v6;
  *((void *)this + 2) = v7;
  v8[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v8 + *(void *)(v8[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v8[1] = MEMORY[0x263F8C318] + 16;
  if (v9 < 0) {
    operator delete((void *)v8[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x21D447E60](&v10);
  return this;
}

void sub_2168DB6C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_21677B9CC((uint64_t)va);
  if (*(char *)(v4 + 23) < 0) {
    operator delete(*(void **)v4);
  }
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::TraceThreadId::TraceThreadId(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v3;
  }
  return __dst;
}

{
  long long v3;

  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v3;
  }
  return __dst;
}

BOOL pxrInternal__aapl__pxrReserved__::TraceThreadId::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0;
  }
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0) {
    return memcmp(*(const void **)a1, a2, *((void *)a1 + 1)) == 0;
  }
  if (!a1[23]) {
    return 1;
  }
  uint64_t v6 = v2 - 1;
  do
  {
    int v8 = *a1++;
    int v7 = v8;
    int v10 = *a2++;
    int v9 = v10;
    BOOL v12 = v6-- != 0;
    BOOL v13 = v7 == v9;
    BOOL v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

BOOL pxrInternal__aapl__pxrReserved__::TraceThreadId::operator<(void *a1, void *a2)
{
  unint64_t v2 = *((unsigned __int8 *)a1 + 23);
  if (*((char *)a1 + 23) < 0)
  {
    size_t v5 = a1[1];
    BOOL v3 = *((char *)a2 + 23) < 0;
    unint64_t v4 = *((unsigned __int8 *)a2 + 23);
    if (*((char *)a2 + 23) < 0) {
      unint64_t v4 = a2[1];
    }
    if (v5 == v4) {
      goto LABEL_9;
    }
    unint64_t v2 = a1[1];
    return v2 < v4;
  }
  BOOL v3 = *((char *)a2 + 23) < 0;
  unint64_t v4 = *((unsigned __int8 *)a2 + 23);
  if (*((char *)a2 + 23) < 0) {
    unint64_t v4 = a2[1];
  }
  if (v4 != v2) {
    return v2 < v4;
  }
  size_t v5 = *((unsigned __int8 *)a1 + 23);
LABEL_9:
  if ((v2 & 0x80u) == 0) {
    size_t v6 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v6 = a1[1];
  }
  if ((v2 & 0x80u) != 0) {
    a1 = (void *)*a1;
  }
  if (v3) {
    a2 = (void *)*a2;
  }
  if (v5 >= v6) {
    size_t v7 = v6;
  }
  else {
    size_t v7 = v5;
  }
  int v8 = memcmp(a1, a2, v7);
  if (v8) {
    return v8 < 0;
  }
  else {
    return v6 < v5;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::Work_GetDetachedDispatcher(pxrInternal__aapl__pxrReserved__ *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B8E5E8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B8E5E8))
  {
    unint64_t v2 = (pxrInternal__aapl__pxrReserved__::WorkDispatcher *)operator new(0x150uLL);
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::WorkDispatcher(v2);
    qword_267B8E5E0 = (uint64_t)v2;
    __cxa_guard_release(&qword_267B8E5E8);
  }
  return qword_267B8E5E0;
}

void sub_2168DB974(_Unwind_Exception *a1)
{
  operator delete(v1);
  __cxa_guard_abort(&qword_267B8E5E8);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Work_EnsureDetachedTaskProgress(pxrInternal__aapl__pxrReserved__ *this)
{
  if (!atomic_load((unint64_t *)&qword_267B8E5F0))
  {
    unint64_t v2 = (std::thread *)operator new(8uLL);
    BOOL v3 = v2;
    uint64_t v4 = 0;
    v2->__t_ = 0;
    atomic_compare_exchange_strong(&qword_267B8E5F0, (unint64_t *)&v4, (unint64_t)v2);
    if (v4)
    {
      std::thread::~thread(v2);
      operator delete(v5);
    }
    else
    {
      uint64_t DetachedDispatcher = pxrInternal__aapl__pxrReserved__::Work_GetDetachedDispatcher((pxrInternal__aapl__pxrReserved__ *)v2);
      sub_2168DBA58(&v7.__t_, &DetachedDispatcher);
      if (v3->__t_) {
        std::terminate();
      }
      v3->__t_ = v7.__t_;
      v7.__t_ = 0;
      std::thread::~thread(&v7);
      std::thread::detach(v3);
    }
  }
}

pthread_t *sub_2168DBA58(pthread_t *a1, uint64_t *a2)
{
  uint64_t v4 = (std::__thread_struct *)operator new(8uLL);
  std::__thread_struct::__thread_struct(v4);
  size_t v5 = (uint64_t *)operator new(0x10uLL);
  uint64_t v6 = *a2;
  *size_t v5 = (uint64_t)v4;
  v5[1] = v6;
  int v9 = v5;
  int v7 = pthread_create(a1, 0, (void *(__cdecl *)(void *))sub_2168DBB28, v5);
  if (v7)
  {
    std::__throw_system_error(v7, "thread constructor failed");
    __break(1u);
    JUMPOUT(0x2168DBAF4);
  }
  int v9 = 0;
  sub_2168DBB90(&v9);
  return a1;
}

void sub_2168DBB28(uint64_t a1)
{
  unint64_t v2 = std::__thread_local_data();
  BOOL v3 = *(const void **)a1;
  *(void *)a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  while (1)
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::Wait(*(pxrInternal__aapl__pxrReserved__::WorkDispatcher **)(a1 + 8));
    __ns.__rep_ = 50000000;
    std::this_thread::sleep_for (&__ns);
  }
}

void sub_2168DBB78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
}

uint64_t **sub_2168DBB90(uint64_t **a1)
{
  unint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_2168DBBD4(v2, 0);
    operator delete(v2);
  }
  return a1;
}

void sub_2168DBBD4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)MEMORY[0x21D447B50]();
    operator delete(v4);
  }
}

pxrInternal__aapl__pxrReserved__::WorkDispatcher *pxrInternal__aapl__pxrReserved__::WorkDispatcher::WorkDispatcher(pxrInternal__aapl__pxrReserved__::WorkDispatcher *this, uint64_t a2, uint64_t a3, void *a4)
{
  *(_DWORD *)this = 0;
  *((void *)this + 16) = 327683;
  *((_DWORD *)this + 42) = 55;
  tbb::task_group_context::init((uint64_t)this, a2, a3, a4);
  for (uint64_t i = 304; i != 328; i += 8)
    *(void *)((char *)this + i) = 0;
  *((void *)this + 36) = 0;
  *((void *)this + 35) = 0;
  *((void *)this + 37) = (char *)this + 304;
  *((void *)this + 34) = sub_2168DC000;
  atomic_store(0, (unsigned __int8 *)this + 328);
  int v8 = this;
  uint64_t v6 = (void *)tbb::internal::allocate_root_with_context_proxy::allocate(&v8, 8uLL);
  *((unsigned char *)v6 - 11) = 1;
  *uint64_t v6 = &unk_26C746C48;
  *((void *)this + 32) = v6;
  *(v6 - 3) = 1;
  return this;
}

void sub_2168DBCD4(_Unwind_Exception *a1)
{
  sub_2168DC010(v1 + 33);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::WorkDispatcher::~WorkDispatcher(pxrInternal__aapl__pxrReserved__::WorkDispatcher *this)
{
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::Wait(this);
  tbb::interface5::internal::task_base::destroy(*((tbb::interface5::internal::task_base **)this + 32), v2);
  sub_2168DC010((unint64_t *)this + 33);

  tbb::task_group_context::~task_group_context(this);
}

unint64_t pxrInternal__aapl__pxrReserved__::WorkDispatcher::Wait(pxrInternal__aapl__pxrReserved__::WorkDispatcher *this)
{
  unint64_t result = (*(uint64_t (**)(void, void, void))(**(void **)(*((void *)this + 32) - 40) + 8))(*(void *)(*((void *)this + 32) - 40), *((void *)this + 32), 0);
  if ((atomic_exchange((atomic_uchar *volatile)this + 328, 1u) & 1) == 0)
  {
    if (tbb::task_group_context::is_group_execution_cancelled(this)) {
      tbb::task_group_context::reset(this);
    }
    unint64_t v3 = *((void *)this + 36);
    __dmb(0xBu);
    unint64_t v4 = tbb::internal::concurrent_vector_base_v3::internal_capacity((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)((char *)this + 272));
    if (v4 >= v3) {
      unint64_t v5 = v3;
    }
    else {
      unint64_t v5 = v4;
    }
    if (v5)
    {
      uint64_t v6 = 0;
      unint64_t v7 = 0;
      int v8 = 0;
      do
      {
        if (!v8)
        {
          unint64_t v9 = sub_216851020(v7);
          uint64_t v10 = *((void *)this + 37);
          __dmb(0xBu);
          int v8 = (pxrInternal__aapl__pxrReserved__::TfErrorTransport *)(*(void *)(v10 + 8 * v9)
                                                                    - 48 * ((unint64_t)(1 << v9) >> 1)
                                                                    + v6);
        }
        if (*((void *)v8 + 2)) {
          pxrInternal__aapl__pxrReserved__::TfErrorTransport::_PostImpl(v8);
        }
        unint64_t v11 = v7 + 1;
        if (((v7 - 1) & (v7 + 1)) != 0) {
          int v8 = (pxrInternal__aapl__pxrReserved__::TfErrorTransport *)((char *)v8 + 24);
        }
        else {
          int v8 = 0;
        }
        v6 += 24;
        ++v7;
      }
      while (v5 != v11);
    }
    unint64_t result = tbb::internal::concurrent_vector_base_v3::internal_clear((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)((char *)this + 272), (void (*)(void *, unint64_t))tbb::concurrent_vector<pxrInternal__aapl__pxrReserved__::TfErrorTransport,tbb::cache_aligned_allocator<pxrInternal__aapl__pxrReserved__::TfErrorTransport>>::destroy_array);
    atomic_store(0, (unsigned __int8 *)this + 328);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(unint64_t *a1, uint64_t a2)
{
  unint64_t v4 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v5 = (atomic_ullong *)(v4 + 152);
  char v13 = 0;
  uint64_t v6 = sub_2168520EC((atomic_ullong *)(v4 + 152), &v13);
  unint64_t v7 = sub_216862604(a1, 0);
  char v13 = 0;
  int v8 = (void *)sub_2168520EC(v5, &v13);
  sub_2168DBFAC(v12, v6, v7, v8);
  unint64_t v9 = tbb::internal::concurrent_vector_base_v3::internal_grow_by((atomic_ullong *)(a2 + 8), 1uLL, (void *)0x18, (void (*)(void *, const void *, unint64_t))tbb::concurrent_vector<pxrInternal__aapl__pxrReserved__::TfErrorTransport,tbb::cache_aligned_allocator<pxrInternal__aapl__pxrReserved__::TfErrorTransport>>::initialize_array, 0);
  unint64_t v10 = sub_216851020((unint64_t)v9);
  uint64_t v11 = *(void *)(a2 + 32);
  __dmb(0xBu);
  sub_21687CBF8((long long *)(*(void *)(v11 + 8 * v10) + 24 * ((void)v9 - ((1 << v10) & 0xFFFFFFFFFFFFFFFELL))), v12);
  sub_21685D0A8(v12);
}

void sub_2168DBF88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2168DBFA4()
{
  return 0;
}

uint64_t *sub_2168DBFAC(uint64_t *a1, uint64_t a2, void *a3, void *a4)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  sub_21687C978((uint64_t)a1, a1, a2, a3, a4);
  return a1;
}

void sub_2168DBFEC(_Unwind_Exception *a1)
{
  sub_21685D0A8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2168DC000(int a1, tbb::internal *this, uint64_t a3, void *a4)
{
  return tbb::internal::NFS_Allocate((unint64_t)this, 24, 0, a4);
}

unint64_t *sub_2168DC010(unint64_t *a1)
{
  unint64_t v2 = (tbb::internal::concurrent_vector_base_v3 *)(a1 + 1);
  unint64_t v3 = (void *)a1[4];
  unint64_t v4 = tbb::internal::concurrent_vector_base_v3::internal_clear((tbb::internal::concurrent_vector_base_v3 *)(a1 + 1), (void (*)(void *, unint64_t))tbb::concurrent_vector<pxrInternal__aapl__pxrReserved__::TfErrorTransport,tbb::cache_aligned_allocator<pxrInternal__aapl__pxrReserved__::TfErrorTransport>>::destroy_array);
  sub_216850F48((uint64_t)a1, v3, v4, a1[2]);
  tbb::internal::concurrent_vector_base_v3::~concurrent_vector_base_v3(v2, v5);
  return a1;
}

void tbb::concurrent_vector<pxrInternal__aapl__pxrReserved__::TfErrorTransport,tbb::cache_aligned_allocator<pxrInternal__aapl__pxrReserved__::TfErrorTransport>>::destroy_array(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    unint64_t v3 = (uint64_t *)(a1 + 24 * a2 - 24);
    do
    {
      --v2;
      sub_21685D0A8(v3);
      v3 -= 3;
    }
    while (v2);
  }
}

void *tbb::concurrent_vector<pxrInternal__aapl__pxrReserved__::TfErrorTransport,tbb::cache_aligned_allocator<pxrInternal__aapl__pxrReserved__::TfErrorTransport>>::initialize_array(void *result, uint64_t a2, uint64_t a3)
{
  {
    *unint64_t result = result;
    result[1] = result;
    result[2] = 0;
    result += 3;
  }
  return result;
}

void sub_2168DC0E0()
{
  if (!atomic_load((unint64_t *)PXR_WORK_THREAD_LIMIT)) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<int>();
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::Work_InitializeThreading(pxrInternal__aapl__pxrReserved__ *this)
{
  uint64_t v1 = (tbb::task_scheduler_init *)sub_2168DC190(this);
  uint64_t result = tbb::task_scheduler_init::default_num_threads(v1);
  if (v1)
  {
    unint64_t v3 = operator new(8uLL);
    void *v3 = 0;
    uint64_t result = tbb::task_scheduler_init::initialize((uint64_t)v3, v1, 1, v4, v5);
    qword_267B8E5F8 = (uint64_t)v3;
  }
  return result;
}

void sub_2168DC17C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2168DC190(tbb::task_scheduler_init *a1)
{
  uint64_t v1 = (unsigned int *)atomic_load((unint64_t *)PXR_WORK_THREAD_LIMIT);
  if (!v1) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<int>();
  }
  if ((*v1 & 0x80000000) == 0) {
    return *v1;
  }
  int v2 = *v1;
  int v4 = tbb::task_scheduler_init::default_num_threads(a1) + v2;
  if (v4 <= 1) {
    return 1;
  }
  else {
    return v4;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::WorkSetConcurrencyLimit(pxrInternal__aapl__pxrReserved__ *this)
{
  if (this)
  {
    LODWORD(v1) = this;
    unsigned int v2 = sub_2168DC190(this);
    if (v2) {
      uint64_t v1 = v2;
    }
    else {
      uint64_t v1 = v1;
    }
  }
  else
  {
    uint64_t v1 = tbb::interface7::internal::task_arena_base::internal_max_concurrency(0);
  }
  if (qword_267B8E5F8)
  {
    tbb::task_scheduler_init::terminate((const char *)qword_267B8E5F8, v3, v4, v5, v6);
    uint64_t v10 = qword_267B8E5F8;
    return tbb::task_scheduler_init::initialize(v10, (tbb::internal::governor *)v1, v7, v8, v9);
  }
  else
  {
    BOOL v12 = operator new(8uLL);
    *BOOL v12 = 0;
    uint64_t result = tbb::task_scheduler_init::initialize((uint64_t)v12, (tbb::internal::governor *)v1, 1, v13, v14);
    qword_267B8E5F8 = (uint64_t)v12;
  }
  return result;
}

void sub_2168DC298(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::WorkGetConcurrencyLimit(pxrInternal__aapl__pxrReserved__ *this)
{
  return tbb::interface7::internal::task_arena_base::internal_max_concurrency(0);
}

uint64_t pxrInternal__aapl__pxrReserved__::WorkSetMaximumConcurrencyLimit(pxrInternal__aapl__pxrReserved__ *this)
{
  uint64_t v1 = (pxrInternal__aapl__pxrReserved__ *)tbb::task_scheduler_init::default_num_threads(this);

  return pxrInternal__aapl__pxrReserved__::WorkSetConcurrencyLimit(v1);
}

uint64_t pxrInternal__aapl__pxrReserved__::WorkSetConcurrencyLimitArgument(pxrInternal__aapl__pxrReserved__ *this)
{
  unint64_t v1 = (unint64_t)this;
  if ((this & 0x80000000) != 0)
  {
    int v2 = tbb::task_scheduler_init::default_num_threads(this) + this;
    if (v2 <= 1) {
      unint64_t v1 = 1;
    }
    else {
      unint64_t v1 = v2;
    }
  }

  return pxrInternal__aapl__pxrReserved__::WorkSetConcurrencyLimit((pxrInternal__aapl__pxrReserved__ *)v1);
}

BOOL pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(pxrInternal__aapl__pxrReserved__ *this)
{
  return tbb::interface7::internal::task_arena_base::internal_max_concurrency(0) > 1;
}

void sub_2168DC348()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::WORK_SYNCHRONIZE_ASYNC_DESTROY_CALLS)) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::Work_ShouldSynchronizeAsyncDestroyCalls(pxrInternal__aapl__pxrReserved__ *this)
{
  unint64_t v1 = (unsigned __int8 *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::WORK_SYNCHRONIZE_ASYNC_DESTROY_CALLS);
  if (!v1) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
  }
  return *v1;
}

void sub_2168DC3DC()
{
  memset(v25, 0, sizeof(v25));
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  unint64_t v24 = 0;
  memset(&__p, 0, sizeof(__p));
  if (!pxrInternal__aapl__pxrReserved__::ArchGetAddressInfo(sub_2168DC3DC, (uint64_t)&__p, 0, 0, 0))
  {
    uint64_t v0 = v23;
    if ((unint64_t)v23 >= v24)
    {
      unint64_t v1 = (void *)sub_2168DCAB0(&v22, "Failed to determine absolute path for Plug search using using ArchGetAddressInfo().  This is expected if pxr is linked as a static library.\n");
    }
    else
    {
      sub_216779094(v23, "Failed to determine absolute path for Plug search using using ArchGetAddressInfo().  This is expected if pxr is linked as a static library.\n");
      unint64_t v1 = v0 + 3;
    }
    uint64_t v23 = v1;
  }
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (!size)
  {
    uint64_t v3 = v23;
    if ((unint64_t)v23 >= v24)
    {
      uint64_t v4 = (void *)sub_2168DCBB8(&v22, "Using ArchGetExecutablePath() to determine absolute path for Plug search location.\n");
    }
    else
    {
      sub_216779094(v23, "Using ArchGetExecutablePath() to determine absolute path for Plug search location.\n");
      uint64_t v4 = v3 + 3;
    }
    uint64_t v23 = v4;
    pxrInternal__aapl__pxrReserved__::ArchGetExecutablePath(&v26);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = v26;
  }
  pxrInternal__aapl__pxrReserved__::TfGetPathName(&__p, &v26);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string __p = v26;
  p_p = &__p;
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Plug will search for plug infos under '%s'\n", v5, v6, p_p);
  uint64_t v8 = v23;
  if ((unint64_t)v23 >= v24)
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v23 - v22) >> 3);
    unint64_t v11 = v10 + 1;
    if (v10 + 1 > 0xAAAAAAAAAAAAAAALL) {
      sub_21677CB10();
    }
    if (0x5555555555555556 * ((uint64_t)(v24 - v22) >> 3) > v11) {
      unint64_t v11 = 0x5555555555555556 * ((uint64_t)(v24 - v22) >> 3);
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - v22) >> 3) >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v11;
    }
    char v28 = &v24;
    if (v12) {
      uint64_t v13 = (char *)sub_216782ED8((uint64_t)&v24, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    std::string::size_type v14 = (std::string::size_type)&v13[24 * v10];
    v26.__r_.__value_.__r.__words[0] = (std::string::size_type)v13;
    v26.__r_.__value_.__l.__size_ = v14;
    uint64_t v27 = &v13[24 * v12];
    long long v15 = *(_OWORD *)v19;
    *(void *)(v14 + 16) = v20;
    *(_OWORD *)std::string::size_type v14 = v15;
    v19[1] = 0;
    uint64_t v20 = 0;
    v19[0] = 0;
    v26.__r_.__value_.__r.__words[2] = v14 + 24;
    sub_216790CCC(&v22, &v26);
    uint64_t v16 = v23;
    sub_216790E64((uint64_t)&v26);
    uint64_t v23 = v16;
  }
  else
  {
    long long v9 = *(_OWORD *)v19;
    v23[2] = v20;
    *(_OWORD *)uint64_t v8 = v9;
    uint64_t v23 = v8 + 3;
  }
  sub_216779094(v19, "PXR_PLUGINPATH_NAME");
  sub_216779094(v17, "");
  pxrInternal__aapl__pxrReserved__::TfGetenv((const char *)v19, (uint64_t)v17, (uint64_t)&v26);
  sub_2168DC838(v25, &v26, (const void **)&__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (v18 < 0) {
    operator delete(v17[0]);
  }
  if (SHIBYTE(v20) < 0) {
    operator delete(v19[0]);
  }
  sub_216779094(&v26, "usd");
  sub_2168DC838(v25, &v26, (const void **)&__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  sub_216779094(&v26, "../plugin/usd");
  sub_2168DC838(v25, &v26, (const void **)&__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  pxrInternal__aapl__pxrReserved__::Plug_SetPaths((uint64_t)v25, (uint64_t)&v22, 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v26.__r_.__value_.__r.__words[0] = (std::string::size_type)&v22;
  sub_216782F20((void ***)&v26);
  v26.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
  sub_216782F20((void ***)&v26);
}

void sub_2168DC758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30)
{
  uint64_t v32 = v30;
  a30 = v32;
  if (a28 < 0) {
    operator delete(__p);
  }
  std::string __p = &a29;
  sub_216782F20((void ***)&__p);
  a29 = v31 - 80;
  sub_216782F20((void ***)&a29);
  _Unwind_Resume(a1);
}

void sub_2168DC838(uint64_t *a1, std::string *a2, const void **a3)
{
  sub_216779094(__p, ":");
  pxrInternal__aapl__pxrReserved__::TfStringSplit(a2, (char *)__p, &v24);
  if (SHIBYTE(v27) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v6 = v24;
  uint64_t v7 = v25;
  while (v6 != v7)
  {
    if (*(char *)(v6 + 23) < 0)
    {
      if (*(void *)(v6 + 8))
      {
LABEL_8:
        if (pxrInternal__aapl__pxrReserved__::TfIsRelativePath((unsigned __int8 *)v6))
        {
          pxrInternal__aapl__pxrReserved__::TfStringCatPaths(a3, v6, v22);
          unint64_t v9 = a1[1];
          unint64_t v8 = a1[2];
          if (v9 >= v8)
          {
            unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *a1) >> 3);
            unint64_t v14 = v13 + 1;
            if (v13 + 1 > 0xAAAAAAAAAAAAAAALL) {
              sub_21677CB10();
            }
            unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - *a1) >> 3);
            if (2 * v15 > v14) {
              unint64_t v14 = 2 * v15;
            }
            if (v15 >= 0x555555555555555) {
              unint64_t v16 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v16 = v14;
            }
            unint64_t v29 = a1 + 2;
            if (v16) {
              uint64_t v17 = (char *)sub_216782ED8((uint64_t)(a1 + 2), v16);
            }
            else {
              uint64_t v17 = 0;
            }
            char v18 = &v17[24 * v13];
            __p[0] = v17;
            __p[1] = v18;
            char v28 = &v17[24 * v16];
            long long v19 = *(_OWORD *)v22;
            *((void *)v18 + 2) = v23;
            *(_OWORD *)char v18 = v19;
            v22[1] = 0;
            uint64_t v23 = 0;
            v22[0] = 0;
            uint64_t v27 = v18 + 24;
            sub_216790CCC(a1, __p);
            uint64_t v20 = a1[1];
            sub_216790E64((uint64_t)__p);
            int v21 = SHIBYTE(v23);
            a1[1] = v20;
            if (v21 < 0) {
              operator delete(v22[0]);
            }
          }
          else
          {
            long long v10 = *(_OWORD *)v22;
            *(void *)(v9 + 16) = v23;
            *(_OWORD *)unint64_t v9 = v10;
            a1[1] = v9 + 24;
          }
        }
        else
        {
          unint64_t v11 = a1[1];
          if (v11 >= a1[2])
          {
            uint64_t v12 = sub_2167E9A44(a1, (long long *)v6);
          }
          else
          {
            sub_2167E99E4(a1, (long long *)v6);
            uint64_t v12 = v11 + 24;
          }
          a1[1] = v12;
        }
      }
    }
    else if (*(unsigned char *)(v6 + 23))
    {
      goto LABEL_8;
    }
    v6 += 24;
  }
  __p[0] = &v24;
  sub_216782F20((void ***)__p);
}

void sub_2168DCA4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2168DCAB0(uint64_t *a1, char *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    long long v10 = (char *)sub_216782ED8(v7, v9);
  }
  else {
    long long v10 = 0;
  }
  unint64_t v13 = v10;
  unint64_t v14 = &v10[24 * v4];
  unint64_t v16 = &v10[24 * v9];
  sub_216779094(v14, a2);
  unint64_t v15 = v14 + 24;
  sub_216790CCC(a1, &v13);
  uint64_t v11 = a1[1];
  sub_216790E64((uint64_t)&v13);
  return v11;
}

void sub_2168DCBA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216790E64((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2168DCBB8(uint64_t *a1, char *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    long long v10 = (char *)sub_216782ED8(v7, v9);
  }
  else {
    long long v10 = 0;
  }
  unint64_t v13 = v10;
  unint64_t v14 = &v10[24 * v4];
  unint64_t v16 = &v10[24 * v9];
  sub_216779094(v14, a2);
  unint64_t v15 = v14 + 24;
  sub_216790CCC(a1, &v13);
  uint64_t v11 = a1[1];
  sub_216790E64((uint64_t)&v13);
  return v11;
}

void sub_2168DCCAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216790E64((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Plug_SetAdditionalEntitlements(void *a1)
{
  sub_2168DCDA8();
  unint64_t v4 = (void *)*a1;
  int v2 = a1 + 1;
  uint64_t v3 = v4;
  if (v4 != v2)
  {
    do
    {
      if (*((char *)v3 + 55) < 0)
      {
        sub_216778F24(__p, (void *)v3[4], v3[5]);
      }
      else
      {
        *(_OWORD *)std::string __p = *((_OWORD *)v3 + 2);
        uint64_t v9 = v3[6];
      }
      sub_21680EE0C((uint64_t **)&qword_267B8E600, (const void **)__p, (uint64_t)__p);
      if (SHIBYTE(v9) < 0) {
        operator delete(__p[0]);
      }
      unint64_t v5 = (void *)v3[1];
      if (v5)
      {
        do
        {
          uint64_t v6 = v5;
          unint64_t v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          uint64_t v6 = (void *)v3[2];
          BOOL v7 = *v6 == (void)v3;
          uint64_t v3 = v6;
        }
        while (!v7);
      }
      uint64_t v3 = v6;
    }
    while (v6 != v2);
  }
}

void sub_2168DCD8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2168DCDA8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B8E618, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B8E618))
  {
    qword_267B8E610 = 0;
    qword_267B8E608 = 0;
    qword_267B8E600 = (uint64_t)&qword_267B8E608;
    __cxa_atexit((void (*)(void *))sub_2168DD0A4, &qword_267B8E600, &dword_216758000);
    __cxa_guard_release(&qword_267B8E618);
  }
}

BOOL pxrInternal__aapl__pxrReserved__::Plug_RegistrationMetadata::PassesEntitlementCheck(pxrInternal__aapl__pxrReserved__::Plug_RegistrationMetadata *this)
{
  if (*((void *)this + 17) != *((void *)this + 16))
  {
    int v2 = SecTaskCreateFromSelf(0);
    if (!v2 && sub_2168DD040(0))
    {
      unint64_t v5 = (void *)((char *)this + 8);
      if (*((char *)this + 31) < 0) {
        unint64_t v5 = (void *)*v5;
      }
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Failed to fetch entitlement task for %s\n", v3, v4, v5);
    }
    sub_2168DCDA8();
    uint64_t v6 = (const void ***)*((void *)this + 16);
    uint64_t v23 = (const void ***)*((void *)this + 17);
    CFErrorRef error = 0;
    if (v6 == v23)
    {
      BOOL v10 = 0;
      goto LABEL_37;
    }
    CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    while (1)
    {
      uint64_t v9 = *v6;
      unint64_t v8 = v6[1];
      BOOL v10 = *v6 == v8;
      if (*v6 == v8) {
        goto LABEL_37;
      }
      while (1)
      {
        uint64_t v11 = (uint64_t *)sub_21678C2D8((uint64_t)&qword_267B8E600, v9);
        if (!v2 || v11 != &qword_267B8E608)
        {
          if (v11 == &qword_267B8E608) {
            goto LABEL_33;
          }
          goto LABEL_19;
        }
        uint64_t v12 = (const char *)v9;
        if (*((char *)v9 + 23) < 0) {
          uint64_t v12 = (const char *)*v9;
        }
        CFStringRef v13 = CFStringCreateWithCString(v7, v12, 0x8000100u);
        unint64_t v14 = (void *)SecTaskCopyValueForEntitlement(v2, v13, &error);
        CFRelease(v13);
        if (!v14) {
          break;
        }
        CFTypeID v15 = CFGetTypeID(v14);
        if (v15 != CFBooleanGetTypeID())
        {
          if (sub_2168DD040(0))
          {
            if (*((char *)v9 + 23) < 0) {
              uint64_t v9 = (const void **)*v9;
            }
            pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Entitlement is not a BOOLean %s\n", v20, v21, v9);
          }
          CFErrorRef v19 = (CFErrorRef)v14;
          goto LABEL_32;
        }
        int Value = CFBooleanGetValue((CFBooleanRef)v14);
        CFRelease(v14);
        if (!Value) {
          goto LABEL_33;
        }
LABEL_19:
        v9 += 3;
        if (v9 == v8)
        {
          BOOL v10 = 1;
          goto LABEL_37;
        }
      }
      if (!error) {
        goto LABEL_33;
      }
      if (sub_2168DD040(0))
      {
        if (*((char *)v9 + 23) < 0) {
          uint64_t v9 = (const void **)*v9;
        }
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Failed to check entitlement %s\n", v17, v18, v9);
      }
      CFErrorRef v19 = error;
LABEL_32:
      CFRelease(v19);
LABEL_33:
      v6 += 3;
      if (v6 == v23)
      {
LABEL_37:
        CFRelease(v2);
        return v10;
      }
    }
  }
  return 1;
}

BOOL sub_2168DD040(int a1)
{
  uint64_t v2 = sub_2168DD0D0();
  unsigned int v3 = atomic_load((unsigned int *)(v2 + 4 * a1));
  if (!v3)
  {
    uint64_t v5 = v2;
    uint64_t v6 = sub_2168DD0D0();
    pxrInternal__aapl__pxrReserved__::TfDebug::_InitializeNode((void *)(v6 + 4 * a1), off_264294430[a1]);
    unsigned int v3 = atomic_load((unsigned int *)(v5 + 4 * a1));
  }
  return v3 == 2;
}

uint64_t sub_2168DD0A4(uint64_t a1)
{
  return a1;
}

uint64_t sub_2168DD0D0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26798B188, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26798B188))
  {
    unint64_t v1 = operator new(0x10uLL);
    void *v1 = 0;
    v1[1] = 0;
    qword_26798B180 = (uint64_t)v1;
    __cxa_guard_release(&qword_26798B188);
  }
  return qword_26798B180;
}

void sub_2168DD134(_Unwind_Exception *a1)
{
}

void sub_2168DD14C()
{
  sub_216779094(v7, "PLUG_LOAD");
  std::string __p = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C74D468, 0, (uint64_t)v7, (uint64_t)&__p);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  uint64_t v0 = sub_2168DD0D0();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v0, "PLUG_LOAD", "Plugin loading");
  sub_216779094(v7, "PLUG_REGISTRATION");
  std::string __p = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C74D468, 1, (uint64_t)v7, (uint64_t)&__p);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  uint64_t v1 = sub_2168DD0D0();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v1 + 4, "PLUG_REGISTRATION", "Plugin registration");
  sub_216779094(v7, "PLUG_LOAD_IN_SECONDARY_THREAD");
  std::string __p = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C74D468, 2, (uint64_t)v7, (uint64_t)&__p);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  uint64_t v2 = sub_2168DD0D0();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v2 + 8, "PLUG_LOAD_IN_SECONDARY_THREAD", "Plugins loaded from non-main threads");
  sub_216779094(v7, "PLUG_INFO_SEARCH");
  std::string __p = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C74D468, 3, (uint64_t)v7, (uint64_t)&__p);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  uint64_t v3 = sub_2168DD0D0();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v3 + 12, "PLUG_INFO_SEARCH", "Plugin info file search");
}

void sub_2168DD31C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::Plug_TaskArena *pxrInternal__aapl__pxrReserved__::Plug_TaskArena::Plug_TaskArena(pxrInternal__aapl__pxrReserved__::Plug_TaskArena *this)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::WorkDispatcher *)operator new(0x150uLL);
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::WorkDispatcher(v2);
  *(void *)this = v2;
  return this;
}

void sub_2168DD38C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::Plug_TaskArena::Plug_TaskArena(void *result)
{
  *uint64_t result = 0;
  return result;
}

{
  *uint64_t result = 0;
  return result;
}

void pxrInternal__aapl__pxrReserved__::Plug_TaskArena::~Plug_TaskArena(pxrInternal__aapl__pxrReserved__::WorkDispatcher **this)
{
}

{
  sub_2168DF148(this, 0);
}

pxrInternal__aapl__pxrReserved__::WorkDispatcher *pxrInternal__aapl__pxrReserved__::Plug_TaskArena::Wait(pxrInternal__aapl__pxrReserved__::WorkDispatcher **this)
{
  uint64_t result = *this;
  if (result) {
    return (pxrInternal__aapl__pxrReserved__::WorkDispatcher *)pxrInternal__aapl__pxrReserved__::WorkDispatcher::Wait(result);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Plug_RegistrationMetadata::Plug_RegistrationMetadata(uint64_t a1, pxrInternal__aapl__pxrReserved__::JsValue *this, std::string *a3, uint64_t a4)
{
  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  char v8 = (std::string *)(a1 + 8);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  uint64_t v9 = (uint64_t **)(a1 + 56);
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4sub_2168DF148(this, 0) = 0u;
  *(_OWORD *)(a1 + 8sub_2168DF148(this, 0) = 0u;
  BOOL v10 = (void **)(a1 + 80);
  uint64_t v87 = (void **)(a1 + 104);
  __str = (std::string *)(a1 + 32);
  *(_OWORD *)(a1 + 128) = 0u;
  uint64_t v11 = (uint64_t *)(a1 + 128);
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(void *)(a1 + 144) = 0;
  if (!pxrInternal__aapl__pxrReserved__::JsValue::IsObject(this))
  {
    v89.__r_.__value_.__r.__words[0] = (std::string::size_type)"plug/info.cpp";
    v89.__r_.__value_.__l.__size_ = (std::string::size_type)"Plug_RegistrationMetadata";
    v89.__r_.__value_.__r.__words[2] = 545;
    uint64_t v90 = "pxrInternal__aapl__pxrReserved__::Plug_RegistrationMetadata::Plug_RegistrationMetadata(const JsValue &, const "
          "std::string &, const std::string &)";
    char v91 = 0;
    if (*(char *)(a4 + 23) >= 0) {
      unint64_t v16 = (const char *)a4;
    }
    else {
      unint64_t v16 = *(const char **)a4;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v89, 3, (pxrInternal__aapl__pxrReserved__ *)"Plugin info %s doesn't hold an object; plugin ignored",
      v16);
    return a1;
  }
  unint64_t JsObject = (void *)pxrInternal__aapl__pxrReserved__::JsValue::GetJsObject((unint64_t **)this);
  CFStringRef v13 = (void *)sub_2168DDD84();
  unint64_t v14 = v13 + 3;
  if ((v13[3] & 0xFFFFFFFFFFFFFFF8) != 0) {
    Emptyunint64_t String = (uint64_t *)((v13[3] & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v13);
  }
  uint64_t v17 = sub_21678C2D8((uint64_t)JsObject, (const void **)EmptyString);
  long long v86 = JsObject + 1;
  if (JsObject + 1 == (void *)v17) {
    goto LABEL_95;
  }
  char v18 = (pxrInternal__aapl__pxrReserved__::JsValue *)(v17 + 56);
  if (!pxrInternal__aapl__pxrReserved__::JsValue::IsString((pxrInternal__aapl__pxrReserved__::JsValue *)(v17 + 56))) {
    goto LABEL_79;
  }
  unint64_t String = (_DWORD *)pxrInternal__aapl__pxrReserved__::JsValue::GetString(v18);
  if (*((char *)String + 23) < 0)
  {
    uint64_t v21 = *((void *)String + 1);
    if (v21 != 7
      || (**(_DWORD **)String == 1919052140 ? (BOOL v22 = *(_DWORD *)(*(void *)String + 3) == 2037539186) : (BOOL v22 = 0),
          !v22))
    {
      if (v21 != 8) {
        goto LABEL_28;
      }
      unint64_t String = *(_DWORD **)String;
LABEL_22:
      if (*(void *)String == 0x656372756F736572)
      {
        int v23 = 3;
        goto LABEL_30;
      }
LABEL_28:
      uint64_t v25 = "doesn't hold a valid type";
LABEL_96:
      v89.__r_.__value_.__r.__words[0] = (std::string::size_type)"plug/info.cpp";
      v89.__r_.__value_.__l.__size_ = (std::string::size_type)"Plug_RegistrationMetadata";
      v89.__r_.__value_.__r.__words[2] = 743;
      uint64_t v90 = "pxrInternal__aapl__pxrReserved__::Plug_RegistrationMetadata::Plug_RegistrationMetadata(const JsValue &, cons"
            "t std::string &, const std::string &)";
      char v91 = 0;
      if (*(char *)(a4 + 23) >= 0) {
        uint64_t v59 = (const char *)a4;
      }
      else {
        uint64_t v59 = *(const char **)a4;
      }
      unint64_t v60 = *v14 & 0xFFFFFFFFFFFFFFF8;
      if (v60)
      {
        uint64_t v61 = (const char *)(v60 + 16);
        if (*(char *)(v60 + 39) < 0) {
          uint64_t v61 = *(const char **)v61;
        }
      }
      else
      {
        uint64_t v61 = "";
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v89, 3, (pxrInternal__aapl__pxrReserved__ *)"Plugin info %s key '%s' %s; plugin ignored",
        v59,
        v61,
        v25);
      *(_DWORD *)a1 = 0;
      return a1;
    }
  }
  else
  {
    int v20 = *((unsigned __int8 *)String + 23);
    if (v20 != 7)
    {
      if (v20 != 8) {
        goto LABEL_28;
      }
      goto LABEL_22;
    }
    if (*String != 1919052140 || *(_DWORD *)((char *)String + 3) != 2037539186) {
      goto LABEL_28;
    }
  }
  int v23 = 1;
LABEL_30:
  *(_DWORD *)a1 = v23;
  std::string v26 = (void *)sub_2168DDD84();
  unint64_t v14 = v26 + 4;
  if ((v26[4] & 0xFFFFFFFFFFFFFFF8) != 0) {
    uint64_t v27 = (uint64_t *)((v26[4] & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    uint64_t v27 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v26);
  }
  uint64_t v28 = sub_21678C2D8((uint64_t)JsObject, (const void **)v27);
  if (v86 == (void *)v28) {
    goto LABEL_95;
  }
  unint64_t v29 = (pxrInternal__aapl__pxrReserved__::JsValue *)(v28 + 56);
  if (!pxrInternal__aapl__pxrReserved__::JsValue::IsString((pxrInternal__aapl__pxrReserved__::JsValue *)(v28 + 56))) {
    goto LABEL_79;
  }
  uint64_t v30 = (const std::string *)pxrInternal__aapl__pxrReserved__::JsValue::GetString(v29);
  std::string::operator=(v8, v30);
  if (*(char *)(a1 + 31) < 0) {
    uint64_t v31 = *(void *)(a1 + 16);
  }
  else {
    uint64_t v31 = *(unsigned __int8 *)(a1 + 31);
  }
  if (!v31)
  {
    uint64_t v25 = "doesn't hold a valid name";
    goto LABEL_96;
  }
  uint64_t v32 = (void *)sub_2168DDD84();
  unint64_t v14 = v32 + 6;
  if ((v32[6] & 0xFFFFFFFFFFFFFFF8) != 0) {
    uint64_t v33 = (uint64_t *)((v32[6] & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    uint64_t v33 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v32);
  }
  uint64_t v34 = sub_21678C2D8((uint64_t)JsObject, (const void **)v33);
  if (v86 == (void *)v34)
  {
    pxrInternal__aapl__pxrReserved__::TfGetPathName(a3, &v89);
    if (*(char *)(a1 + 55) < 0) {
      operator delete(__str->__r_.__value_.__l.__data_);
    }
    std::string *__str = v89;
  }
  else
  {
    uint64_t v35 = (pxrInternal__aapl__pxrReserved__::JsValue *)(v34 + 56);
    if (!pxrInternal__aapl__pxrReserved__::JsValue::IsString((pxrInternal__aapl__pxrReserved__::JsValue *)(v34 + 56))) {
      goto LABEL_79;
    }
    unint64_t v36 = pxrInternal__aapl__pxrReserved__::JsValue::GetString(v35);
    sub_2168DE40C(a3, v36, 0, &v89);
    if (*(char *)(a1 + 55) < 0) {
      operator delete(__str->__r_.__value_.__l.__data_);
    }
    std::string *__str = v89;
    if (*(char *)(a1 + 55) < 0) {
      uint64_t v37 = *(void *)(a1 + 40);
    }
    else {
      uint64_t v37 = *(unsigned __int8 *)(a1 + 55);
    }
    if (!v37) {
      goto LABEL_87;
    }
  }
  uint64_t v38 = (void *)sub_2168DDD84();
  unint64_t v14 = v38 + 7;
  if ((v38[7] & 0xFFFFFFFFFFFFFFF8) != 0) {
    uint64_t v39 = (uint64_t *)((v38[7] & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    uint64_t v39 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v38);
  }
  uint64_t v40 = sub_21678C2D8((uint64_t)JsObject, (const void **)v39);
  if (v86 == (void *)v40)
  {
    if (*(_DWORD *)a1 != 1) {
      goto LABEL_70;
    }
LABEL_95:
    uint64_t v25 = "is missing";
    goto LABEL_96;
  }
  uint64_t v41 = (pxrInternal__aapl__pxrReserved__::JsValue *)(v40 + 56);
  if (!pxrInternal__aapl__pxrReserved__::JsValue::IsString((pxrInternal__aapl__pxrReserved__::JsValue *)(v40 + 56))) {
    goto LABEL_79;
  }
  unint64_t v42 = pxrInternal__aapl__pxrReserved__::JsValue::GetString(v41);
  uint64_t v43 = *(unsigned __int8 *)(v42 + 23);
  if ((v43 & 0x80u) != 0) {
    uint64_t v43 = *(void *)(v42 + 8);
  }
  if (v43)
  {
    unint64_t v44 = pxrInternal__aapl__pxrReserved__::JsValue::GetString(v41);
    sub_2168DE5E0((uint64_t)__str, v44, &v89);
    if (*(char *)(a1 + 103) < 0) {
      operator delete(*v10);
    }
    *(std::string *)BOOL v10 = v89;
    if (!(*(char *)(a1 + 103) < 0 ? *(void *)(a1 + 88) : *(unsigned __int8 *)(a1 + 103))) {
      goto LABEL_87;
    }
  }
LABEL_70:
  std::string::size_type v46 = (void *)sub_2168DDD84();
  unint64_t v14 = v46 + 8;
  if ((v46[8] & 0xFFFFFFFFFFFFFFF8) != 0) {
    int v47 = (uint64_t *)((v46[8] & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    int v47 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v46);
  }
  uint64_t v48 = sub_21678C2D8((uint64_t)JsObject, (const void **)v47);
  if (v86 != (void *)v48)
  {
    std::string::size_type v49 = (pxrInternal__aapl__pxrReserved__::JsValue *)(v48 + 56);
    if (pxrInternal__aapl__pxrReserved__::JsValue::IsString((pxrInternal__aapl__pxrReserved__::JsValue *)(v48 + 56)))
    {
      unint64_t v50 = pxrInternal__aapl__pxrReserved__::JsValue::GetString(v49);
      sub_2168DE5E0((uint64_t)__str, v50, &v89);
      if (*(char *)(a1 + 127) < 0) {
        operator delete(*v87);
      }
      *(std::string *)uint64_t v87 = v89;
      if (*(char *)(a1 + 127) < 0) {
        uint64_t v51 = *(void *)(a1 + 112);
      }
      else {
        uint64_t v51 = *(unsigned __int8 *)(a1 + 127);
      }
      if (v51) {
        goto LABEL_85;
      }
LABEL_87:
      uint64_t v25 = "doesn't hold a valid path";
      goto LABEL_96;
    }
LABEL_79:
    uint64_t v25 = "doesn't hold a string";
    goto LABEL_96;
  }
  pxrInternal__aapl__pxrReserved__::TfGetPathName(__str, &v89);
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*v87);
  }
  *(std::string *)uint64_t v87 = v89;
LABEL_85:
  unsigned int v52 = (void *)sub_2168DDD84();
  unint64_t v14 = v52 + 5;
  if ((v52[5] & 0xFFFFFFFFFFFFFFF8) != 0) {
    uint64_t v53 = (uint64_t *)((v52[5] & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    uint64_t v53 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v52);
  }
  uint64_t v54 = sub_21678C2D8((uint64_t)JsObject, (const void **)v53);
  if (v86 == (void *)v54) {
    goto LABEL_95;
  }
  long long v55 = (unint64_t **)(v54 + 56);
  if (!pxrInternal__aapl__pxrReserved__::JsValue::IsObject((pxrInternal__aapl__pxrReserved__::JsValue *)(v54 + 56)))
  {
    uint64_t v25 = "doesn't hold an object";
    goto LABEL_96;
  }
  unint64_t v56 = pxrInternal__aapl__pxrReserved__::JsValue::GetJsObject(v55);
  if (v9 != (uint64_t **)v56) {
    sub_2168DEE84(v9, *(long long **)v56, (long long *)(v56 + 8));
  }
  long long v57 = (void *)sub_2168DDD84();
  unint64_t v14 = v57 + 9;
  if ((v57[9] & 0xFFFFFFFFFFFFFFF8) != 0) {
    uint64_t v58 = (uint64_t *)((v57[9] & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    uint64_t v58 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v57);
  }
  uint64_t v63 = sub_21678C2D8((uint64_t)JsObject, (const void **)v58);
  if (v86 != (void *)v63)
  {
    std::string v64 = (unint64_t **)(v63 + 56);
    if (!pxrInternal__aapl__pxrReserved__::JsValue::IsArray((pxrInternal__aapl__pxrReserved__::JsValue *)(v63 + 56)))
    {
      uint64_t v25 = "outer element is not an array";
      goto LABEL_96;
    }
    unint64_t JsArray = pxrInternal__aapl__pxrReserved__::JsValue::GetJsArray(v64);
    uint64_t v66 = *(pxrInternal__aapl__pxrReserved__::JsValue **)JsArray;
    uint64_t v83 = *(pxrInternal__aapl__pxrReserved__::JsValue **)(JsArray + 8);
    if (*(pxrInternal__aapl__pxrReserved__::JsValue **)JsArray != v83)
    {
      uint64_t v25 = "inner element is not an array";
      while (2)
      {
        if (!pxrInternal__aapl__pxrReserved__::JsValue::IsArray(v66)) {
          goto LABEL_96;
        }
        unint64_t v84 = v66;
        unint64_t v67 = pxrInternal__aapl__pxrReserved__::JsValue::GetJsArray((unint64_t **)v66);
        memset(&v89, 0, sizeof(v89));
        unint64_t v69 = *(pxrInternal__aapl__pxrReserved__::JsValue **)v67;
        long long v68 = *(pxrInternal__aapl__pxrReserved__::JsValue **)(v67 + 8);
        unint64_t v85 = v68;
        while (v69 != v68)
        {
          if (!pxrInternal__aapl__pxrReserved__::JsValue::IsString(v69))
          {
            uint64_t v92 = &v89;
            sub_216782F20((void ***)&v92);
            uint64_t v25 = "entitlement is not a string";
            goto LABEL_96;
          }
          uint64_t v70 = (long long *)pxrInternal__aapl__pxrReserved__::JsValue::GetString(v69);
          sub_2168DE6C0((uint64_t *)&v89, v70);
          unint64_t v69 = (pxrInternal__aapl__pxrReserved__::JsValue *)((char *)v69 + 16);
          long long v68 = v85;
        }
        sub_2168DE704(v11, (long long **)&v89);
        uint64_t v92 = &v89;
        sub_216782F20((void ***)&v92);
        uint64_t v66 = (pxrInternal__aapl__pxrReserved__::JsValue *)((char *)v84 + 16);
        if ((pxrInternal__aapl__pxrReserved__::JsValue *)((char *)v84 + 16) != v83) {
          continue;
        }
        break;
      }
    }
  }
  long long v71 = (void *)*JsObject;
  if ((void *)*JsObject != v86)
  {
    do
    {
      unint64_t v72 = sub_2168DDD84();
      int64_t v73 = (const char *)(v71 + 4);
      if ((pxrInternal__aapl__pxrReserved__::TfToken::operator==((pxrInternal__aapl__pxrReserved__::TfToken *)(v72 + 24), (unsigned __int8 *)v71 + 32) & 1) == 0)
      {
        unint64_t v74 = sub_2168DDD84();
        if ((pxrInternal__aapl__pxrReserved__::TfToken::operator==((pxrInternal__aapl__pxrReserved__::TfToken *)(v74 + 32), (unsigned __int8 *)v71 + 32) & 1) == 0)
        {
          unint64_t v75 = sub_2168DDD84();
          if ((pxrInternal__aapl__pxrReserved__::TfToken::operator==((pxrInternal__aapl__pxrReserved__::TfToken *)(v75 + 40), (unsigned __int8 *)v71 + 32) & 1) == 0)
          {
            unint64_t v76 = sub_2168DDD84();
            if ((pxrInternal__aapl__pxrReserved__::TfToken::operator==((pxrInternal__aapl__pxrReserved__::TfToken *)(v76 + 48), (unsigned __int8 *)v71 + 32) & 1) == 0)
            {
              unint64_t v77 = sub_2168DDD84();
              if ((pxrInternal__aapl__pxrReserved__::TfToken::operator==((pxrInternal__aapl__pxrReserved__::TfToken *)(v77 + 56), (unsigned __int8 *)v71 + 32) & 1) == 0)
              {
                unint64_t v78 = sub_2168DDD84();
                if ((pxrInternal__aapl__pxrReserved__::TfToken::operator==((pxrInternal__aapl__pxrReserved__::TfToken *)(v78 + 64), (unsigned __int8 *)v71 + 32) & 1) == 0)
                {
                  unint64_t v79 = sub_2168DDD84();
                  if ((pxrInternal__aapl__pxrReserved__::TfToken::operator==((pxrInternal__aapl__pxrReserved__::TfToken *)(v79 + 72), (unsigned __int8 *)v71 + 32) & 1) == 0)
                  {
                    v89.__r_.__value_.__r.__words[0] = (std::string::size_type)"plug/info.cpp";
                    v89.__r_.__value_.__l.__size_ = (std::string::size_type)"Plug_RegistrationMetadata";
                    v89.__r_.__value_.__r.__words[2] = 734;
                    uint64_t v90 = "pxrInternal__aapl__pxrReserved__::Plug_RegistrationMetadata::Plug_RegistrationMetadata(const J"
                          "sValue &, const std::string &, const std::string &)";
                    char v91 = 0;
                    if (*(char *)(a4 + 23) >= 0) {
                      long long v80 = (const char *)a4;
                    }
                    else {
                      long long v80 = *(const char **)a4;
                    }
                    if (*((char *)v71 + 55) < 0) {
                      int64_t v73 = *(const char **)v73;
                    }
                    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v89, 3, (pxrInternal__aapl__pxrReserved__ *)"Plugin info %s: ignoring unknown key '%s'", v80, v73);
                  }
                }
              }
            }
          }
        }
      }
      long long v81 = (void *)v71[1];
      if (v81)
      {
        do
        {
          uint64_t v82 = v81;
          long long v81 = (void *)*v81;
        }
        while (v81);
      }
      else
      {
        do
        {
          uint64_t v82 = (void *)v71[2];
          BOOL v22 = *v82 == (void)v71;
          long long v71 = v82;
        }
        while (!v22);
      }
      long long v71 = v82;
    }
    while (v82 != v86);
  }
  return a1;
}

void sub_2168DDCA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11, ...)
{
  va_start(va, a11);
  sub_2168DEE10((void ***)va);
  if (*(char *)(v11 + 127) < 0) {
    operator delete(*a10);
  }
  if (*(char *)(v11 + 103) < 0) {
    operator delete(*v13);
  }
  sub_216812ED4(v14, *(void **)(v11 + 64));
  if (*(char *)(v11 + 55) < 0) {
    operator delete(*a11);
  }
  if (*(char *)(v11 + 31) < 0) {
    operator delete(*v12);
  }
  _Unwind_Resume(a1);
}

unint64_t sub_2168DDD84()
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v0 = (unint64_t *)atomic_load((unint64_t *)&qword_267B8E620);
  if (!v0)
  {
    uint64_t v0 = (unint64_t *)operator new(0x68uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0, "plugInfo.json", 0);
    std::string v26 = (uint64_t *)(v0 + 1);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 1, "Includes", 0);
    uint64_t v25 = (uint64_t *)(v0 + 2);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 2, "Plugins", 0);
    uint64_t v2 = (uint64_t *)(v0 + 3);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 3, "Type", 0);
    uint64_t v3 = (uint64_t *)(v0 + 4);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 4, "Name", 0);
    unint64_t v4 = (uint64_t *)(v0 + 5);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 5, "Info", 0);
    uint64_t v5 = (uint64_t *)(v0 + 6);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 6, "Root", 0);
    uint64_t v6 = (uint64_t *)(v0 + 7);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 7, "LibraryPath", 0);
    CFAllocatorRef v7 = (uint64_t *)(v0 + 8);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 8, "ResourcePath", 0);
    char v8 = (uint64_t *)(v0 + 9);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 9, "Entitlements", 0);
    unint64_t v9 = *v0;
    unint64_t v27 = v9;
    if ((v9 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v27 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v10 = *v26;
    uint64_t v28 = v10;
    if ((v10 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v28 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v11 = *v25;
    uint64_t v29 = v11;
    if ((v11 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v29 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v12 = *v2;
    uint64_t v30 = v12;
    if ((v12 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v30 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v13 = *v3;
    uint64_t v31 = v13;
    if ((v13 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v31 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v14 = *v4;
    uint64_t v32 = v14;
    if ((v14 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v32 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v15 = *v5;
    uint64_t v33 = v15;
    if ((v15 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v33 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v16 = *v6;
    uint64_t v34 = v16;
    if ((v16 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v34 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v17 = *v7;
    uint64_t v35 = v17;
    if ((v17 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v35 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v18 = *v8;
    uint64_t v36 = v18;
    if ((v18 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v36 &= 0xFFFFFFFFFFFFFFF8;
    }
    v0[10] = 0;
    v0[11] = 0;
    v0[12] = 0;
    CFErrorRef v19 = (char *)operator new(0x50uLL);
    uint64_t v20 = 0;
    v0[10] = (unint64_t)v19;
    v0[11] = (unint64_t)v19;
    v0[12] = (unint64_t)(v19 + 80);
    do
    {
      unint64_t v21 = *(unint64_t *)((char *)&v27 + v20);
      *(void *)&v19[v20] = v21;
      if ((v21 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *(void *)&v19[v20] &= 0xFFFFFFFFFFFFFFF8;
      }
      v20 += 8;
    }
    while (v20 != 80);
    v0[11] = (unint64_t)(v19 + 80);
    for (uint64_t i = 72; i != -8; i -= 8)
    {
      unint64_t v23 = *(unint64_t *)((char *)&v27 + i);
      if ((v23 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    uint64_t v24 = 0;
    atomic_compare_exchange_strong(&qword_267B8E620, (unint64_t *)&v24, (unint64_t)v0);
    if (v24)
    {
      unint64_t v27 = (unint64_t)(v0 + 10);
      sub_216889A04((void ***)&v27);
      if ((*v8 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v7 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v6 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v5 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v4 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v3 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v2 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v25 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v26 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v0 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v0 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v0);
      return atomic_load((unint64_t *)&qword_267B8E620);
    }
  }
  return (unint64_t)v0;
}

void sub_2168DE27C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void **a12, uint64_t a13, char a14)
{
  sub_216889A04(&a12);
  uint64_t v23 = 72;
  while (1)
  {
    uint64_t v24 = *(void *)(&a14 + v23);
    if ((v24 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v23 -= 8;
    if (v23 == -8)
    {
      if ((*v21 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v20 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a10 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v14);
      _Unwind_Resume(a1);
    }
  }
}

void sub_2168DE3FC()
{
}

void sub_2168DE404()
{
}

void sub_2168DE40C(std::string *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  char v7 = v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  if (v6)
  {
    if (pxrInternal__aapl__pxrReserved__::TfIsRelativePath((unsigned __int8 *)a2))
    {
      pxrInternal__aapl__pxrReserved__::TfGetPathName(a1, &__p);
      pxrInternal__aapl__pxrReserved__::TfStringCatPaths((const void **)&__p.__r_.__value_.__l.__data_, a2, v17);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (!a3) {
          goto LABEL_32;
        }
      }
      else if (!a3)
      {
        goto LABEL_32;
      }
      uint64_t v12 = *(unsigned __int8 *)(a2 + 23);
      if ((v12 & 0x80u) == 0) {
        uint64_t v13 = (char *)a2;
      }
      else {
        uint64_t v13 = *(char **)a2;
      }
      if ((v12 & 0x80u) != 0) {
        uint64_t v12 = *(void *)(a2 + 8);
      }
      if (v13[v12 - 1] == 47)
      {
        if (v18 >= 0) {
          size_t v14 = HIBYTE(v18);
        }
        else {
          size_t v14 = (size_t)v17[1];
        }
        sub_2167940B4((uint64_t)a4, v14 + 1);
        if (*((char *)a4 + 23) < 0) {
          a4 = (void *)*a4;
        }
        if (v14)
        {
          if (v18 >= 0) {
            uint64_t v15 = v17;
          }
          else {
            uint64_t v15 = (void **)v17[0];
          }
          memmove(a4, v15, v14);
        }
        *(_WORD *)((char *)a4 + v14) = 47;
        goto LABEL_35;
      }
LABEL_32:
      if (SHIBYTE(v18) < 0)
      {
        sub_216778F24(a4, v17[0], (unint64_t)v17[1]);
      }
      else
      {
        *(_OWORD *)a4 = *(_OWORD *)v17;
        a4[2] = v18;
      }
LABEL_35:
      if (SHIBYTE(v18) < 0) {
        operator delete(v17[0]);
      }
      return;
    }
    char v7 = *(unsigned char *)(a2 + 23);
  }
  if (v7 < 0)
  {
    uint64_t v10 = *(char **)a2;
    unint64_t v11 = *(void *)(a2 + 8);
    sub_216778F24(a4, v10, v11);
  }
  else
  {
    *(_OWORD *)a4 = *(_OWORD *)a2;
    a4[2] = *(void *)(a2 + 16);
  }
}

void sub_2168DE5B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2168DE5E0(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(a2 + 8);
  }
  if (v5)
  {
    if (pxrInternal__aapl__pxrReserved__::TfIsRelativePath((unsigned __int8 *)a2))
    {
      pxrInternal__aapl__pxrReserved__::TfStringCatPaths((const void **)a1, a2, a3);
      return;
    }
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
    {
      *(_OWORD *)a3 = *(_OWORD *)a2;
      uint64_t v7 = *(void *)(a2 + 16);
      goto LABEL_12;
    }
    char v8 = *(void **)a2;
    unint64_t v9 = *(void *)(a2 + 8);
  }
  else
  {
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    {
      *(_OWORD *)a3 = *(_OWORD *)a1;
      uint64_t v7 = *(void *)(a1 + 16);
LABEL_12:
      a3[2] = v7;
      return;
    }
    char v8 = *(void **)a1;
    unint64_t v9 = *(void *)(a1 + 8);
  }

  sub_216778F24(a3, v8, v9);
}

uint64_t sub_2168DE6C0(uint64_t *a1, long long *a2)
{
  unint64_t v3 = a1[1];
  if (v3 >= a1[2])
  {
    uint64_t v4 = sub_2168DF188(a1, a2);
  }
  else
  {
    sub_2167E99E4(a1, a2);
    uint64_t v4 = v3 + 24;
  }
  a1[1] = v4;
  return v4 - 24;
}

uint64_t sub_2168DE704(uint64_t *a1, long long **a2)
{
  unint64_t v3 = a1[1];
  if (v3 >= a1[2])
  {
    uint64_t v4 = sub_2168DF30C(a1, a2);
  }
  else
  {
    sub_2168DF2AC((uint64_t)a1, a2);
    uint64_t v4 = v3 + 24;
  }
  a1[1] = v4;
  return v4 - 24;
}

void *pxrInternal__aapl__pxrReserved__::Plug_ReadPlugInfo(std::string **a1, int a2, uint64_t a3, uint64_t a4, std::string::size_type a5)
{
  void v47[4] = *MEMORY[0x263EF8340];
  if (sub_2168DD040(3) && sub_2168DD040(3))
  {
    pxrInternal__aapl__pxrReserved__::TfStringJoin("\n    ", a1, &__p);
    uint64_t v12 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Will check plugin info paths:\n    %s\n", v10, v11, v12);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v39 = mach_absolute_time();
  __p.__r_.__value_.__r.__words[0] = a5;
  sub_2168DEBD8((uint64_t)&__p.__r_.__value_.__l.__size_, a3);
  sub_2168DEC70((uint64_t)v47, a4);
  uint64_t v13 = *a1;
  size_t v14 = a1[1];
  if (*a1 != v14)
  {
    while (1)
    {
      int v15 = SHIBYTE(v13->__r_.__value_.__r.__words[2]);
      if (v15 < 0)
      {
        std::string::size_type size = v13->__r_.__value_.__l.__size_;
        if (!size) {
          goto LABEL_42;
        }
        uint64_t v17 = (std::string *)v13->__r_.__value_.__r.__words[0];
      }
      else
      {
        if (!*((unsigned char *)&v13->__r_.__value_.__s + 23)) {
          goto LABEL_42;
        }
        std::string::size_type size = HIBYTE(v13->__r_.__value_.__r.__words[2]);
        uint64_t v17 = v13;
      }
      int v18 = v17->__r_.__value_.__s.__data_[size - 1];
      BOOL v19 = v18 == 47;
      if (v18 == 47) {
        break;
      }
      int IsDir = pxrInternal__aapl__pxrReserved__::TfIsDir((const char *)v13, 1);
      uint64_t v20 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
      int v15 = SHIBYTE(v13->__r_.__value_.__r.__words[2]);
      if (IsDir) {
        goto LABEL_18;
      }
      p_p = (uint64_t **)&__p;
      if (v15 < 0)
      {
        sub_216778F24(&v41, v13->__r_.__value_.__l.__data_, v13->__r_.__value_.__l.__size_);
      }
      else
      {
        long long v28 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
        std::string::size_type v42 = v13->__r_.__value_.__r.__words[2];
        long long v41 = v28;
      }
      uint64_t v29 = *v20;
      if (*v20)
      {
        uint64_t v30 = *(void *)(v29 + 256);
        uint64_t v44 = 0;
        uint64_t v45 = v30;
        uint64_t v31 = (void *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)&v44, 0x30uLL);
        *((unsigned char *)v31 - 11) = 1;
        *uint64_t v31 = &unk_26C74D6F8;
        v31[1] = p_p;
        uint64_t v32 = v31 + 2;
        if (SHIBYTE(v42) < 0)
        {
          sub_216778F24(v32, (void *)v41, *((unint64_t *)&v41 + 1));
        }
        else
        {
          long long v33 = v41;
          v31[4] = v42;
          *(_OWORD *)uint64_t v32 = v33;
        }
        v31[5] = v29 + 264;
        (**(void (***)(void, void *, uint64_t))*(v31 - 5))(*(v31 - 5), v31, (uint64_t)(v31 - 1));
      }
      else
      {
        sub_2168DF8B0(p_p, (uint64_t)&v41);
      }
LABEL_36:
      if (SHIBYTE(v42) < 0)
      {
        operator delete((void *)v41);
        if (a2)
        {
LABEL_40:
          if (*(void *)__p.__r_.__value_.__l.__data_) {
            pxrInternal__aapl__pxrReserved__::WorkDispatcher::Wait(*(pxrInternal__aapl__pxrReserved__::WorkDispatcher **)__p.__r_.__value_.__l.__data_);
          }
        }
      }
      else if (a2)
      {
        goto LABEL_40;
      }
LABEL_42:
      if (++v13 == v14) {
        goto LABEL_43;
      }
    }
    uint64_t v20 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
LABEL_18:
    p_p = (uint64_t **)&__p;
    if (v15 < 0)
    {
      sub_216778F24(&v41, v13->__r_.__value_.__l.__data_, v13->__r_.__value_.__l.__size_);
    }
    else
    {
      long long v22 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      std::string::size_type v42 = v13->__r_.__value_.__r.__words[2];
      long long v41 = v22;
    }
    BOOL v43 = v19;
    uint64_t v23 = *v20;
    if (*v20)
    {
      uint64_t v24 = *(void *)(v23 + 256);
      uint64_t v44 = 0;
      uint64_t v45 = v24;
      uint64_t v25 = tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)&v44, 0x38uLL);
      *(unsigned char *)(v25 - 11) = 1;
      *(void *)uint64_t v25 = &unk_26C74D488;
      *(void *)(v25 + 8) = p_p;
      std::string v26 = (unsigned char *)(v25 + 16);
      if (SHIBYTE(v42) < 0)
      {
        sub_216778F24(v26, (void *)v41, *((unint64_t *)&v41 + 1));
      }
      else
      {
        long long v27 = v41;
        *(void *)(v25 + 32) = v42;
        *(_OWORD *)std::string v26 = v27;
      }
      *(unsigned char *)(v25 + 4sub_2168DF148(this, 0) = v43;
      *(void *)(v25 + sub_2168D9AA8((uint64_t)this + 48) = v23 + 264;
      (***(void (****)(void, uint64_t, uint64_t))(v25 - 40))(*(void *)(v25 - 40), v25, v25 - 8);
    }
    else
    {
      sub_2168DF658((uint64_t)&p_p);
    }
    goto LABEL_36;
  }
LABEL_43:
  if ((a2 & 1) == 0 && *(void *)__p.__r_.__value_.__l.__data_) {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::Wait(*(pxrInternal__aapl__pxrReserved__::WorkDispatcher **)__p.__r_.__value_.__l.__data_);
  }
  uint64_t v34 = mach_absolute_time();
  if (sub_2168DD040(3))
  {
    double v35 = pxrInternal__aapl__pxrReserved__::ArchTicksToSeconds((pxrInternal__aapl__pxrReserved__ *)(v34 - v39));
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)" Did check plugin info paths in %f seconds\n", v36, v37, *(void *)&v35);
  }
  sub_2168DED8C(v47);
  return sub_2168DED08(&__p.__r_.__value_.__l.__size_);
}

void sub_2168DEB2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2168DEBD8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_2168DEC70(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_2168DED08(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_2168DED8C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_2168DEE10(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    uint64_t v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        sub_216782F20(&v6);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t **sub_2168DEE84(uint64_t **result, long long *a2, long long *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    uint64_t v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      char v8 = (uint64_t *)v6[1];
    }
    else {
      char v8 = v6;
    }
    int v15 = result;
    uint64_t v16 = v8;
    uint64_t v17 = (const void **)v8;
    if (v8)
    {
      uint64_t v16 = sub_216799E28((uint64_t)v8);
      if (a2 != a3)
      {
        unint64_t v9 = a2;
        do
        {
          v18[0] = (uint64_t)(v8 + 4);
          v18[1] = (uint64_t)(v8 + 7);
          sub_2168DF014((uint64_t)v18, (const std::string *)(v9 + 2));
          uint64_t v10 = (uint64_t **)sub_216799DAC((uint64_t)v5, v18, v17 + 4);
          sub_21677B358(v5, v18[0], v10, (uint64_t *)v17);
          uint64_t v17 = (const void **)v16;
          if (v16) {
            uint64_t v16 = sub_216799E28((uint64_t)v16);
          }
          unint64_t v11 = (long long *)*((void *)v9 + 1);
          if (v11)
          {
            do
            {
              a2 = v11;
              unint64_t v11 = *(long long **)v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (long long *)*((void *)v9 + 2);
              BOOL v12 = *(void *)a2 == (void)v9;
              unint64_t v9 = a2;
            }
            while (!v12);
          }
          char v8 = (uint64_t *)v17;
          if (v17) {
            BOOL v12 = a2 == a3;
          }
          else {
            BOOL v12 = 1;
          }
          unint64_t v9 = a2;
        }
        while (!v12);
      }
    }
    uint64_t result = (uint64_t **)sub_2168DF06C((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)sub_2168DF0C4(v5, a2 + 2);
      uint64_t v13 = (long long *)*((void *)a2 + 1);
      if (v13)
      {
        do
        {
          size_t v14 = v13;
          uint64_t v13 = *(long long **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          size_t v14 = (long long *)*((void *)a2 + 2);
          BOOL v12 = *(void *)v14 == (void)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_2168DF000(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168DF06C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2168DF014(uint64_t a1, const std::string *a2)
{
  std::string::operator=(*(std::string **)a1, a2);
  uint64_t v4 = *(std::string::pointer **)(a1 + 8);
  std::string::pointer data = a2[1].__r_.__value_.__l.__data_;
  std::string::size_type size = a2[1].__r_.__value_.__l.__size_;
  if (size) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(size + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)v4[1];
  *uint64_t v4 = data;
  v4[1] = (std::string::pointer)size;
  if (v7) {
    sub_216784EC4(v7);
  }
  return a1;
}

uint64_t sub_2168DF06C(uint64_t a1)
{
  sub_216812ED4(*(void *)a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    sub_216812ED4(*(void *)a1, v2);
  }
  return a1;
}

uint64_t *sub_2168DF0C4(uint64_t **a1, long long *a2)
{
  sub_2170A3A38((uint64_t)a1, a2, (uint64_t)v7);
  uint64_t v3 = (uint64_t **)sub_216799DAC((uint64_t)a1, &v6, (const void **)v7[0] + 4);
  sub_21677B358(a1, v6, v3, v7[0]);
  uint64_t v4 = v7[0];
  v7[0] = 0;
  sub_21681534C((uint64_t)v7, 0);
  return v4;
}

void sub_2168DF130(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21681534C((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_2168DF148(pxrInternal__aapl__pxrReserved__::WorkDispatcher **a1, pxrInternal__aapl__pxrReserved__::WorkDispatcher *a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::~WorkDispatcher(v3);
    operator delete(v4);
  }
}

uint64_t sub_2168DF188(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  int v18 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_216782ED8(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  unint64_t v11 = &v10[24 * v4];
  v15[0] = v10;
  v15[1] = v11;
  uint64_t v16 = v11;
  uint64_t v17 = &v10[24 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(v11, *(void **)a2, *((void *)a2 + 1));
    unint64_t v11 = v16;
  }
  else
  {
    long long v12 = *a2;
    *((void *)v11 + 2) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v11 = v12;
  }
  uint64_t v16 = v11 + 24;
  sub_216790CCC(a1, v15);
  uint64_t v13 = a1[1];
  sub_216790E64((uint64_t)v15);
  return v13;
}

void sub_2168DF298(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216790E64((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_2168DF2AC(uint64_t a1, long long **a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)uint64_t v3 = 0;
  *(void *)(v3 + 8) = 0;
  *(void *)(v3 + 16) = 0;
  uint64_t result = sub_216812BD8((char *)v3, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  *(void *)(a1 + 8) = v3 + 24;
  return result;
}

void sub_2168DF304(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_2168DF30C(uint64_t *a1, long long **a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_216782ED8(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  unint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  int v15 = v11;
  uint64_t v16 = &v10[24 * v9];
  *(void *)unint64_t v11 = 0;
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  sub_216812BD8(v11, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  v15 += 24;
  sub_2168DF430(a1, v14);
  uint64_t v12 = a1[1];
  sub_2168DF5D0(v14);
  return v12;
}

void sub_2168DF41C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168DF5D0((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2168DF430(uint64_t *a1, void *a2)
{
  uint64_t result = sub_2168DF4A8((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_2168DF4A8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_2168DF54C((uint64_t)v11);
  return v9;
}

uint64_t sub_2168DF54C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_2168DF584(a1);
  }
  return a1;
}

void sub_2168DF584(uint64_t a1)
{
  uint64_t v1 = *(void ***)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void ***)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = v1;
    sub_216782F20(&v3);
    v1 += 3;
  }
}

void **sub_2168DF5D0(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_2168DF604(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    unint64_t v4 = (void **)(i - 24);
    *(void *)(a1 + 16) = v4;
    uint64_t v5 = v4;
    sub_216782F20(&v5);
  }
}

void sub_2168DF658(uint64_t a1)
{
  uint64_t v2 = *(uint64_t ***)a1;
  if (*(unsigned char *)(a1 + 32))
  {
    if (*(char *)(a1 + 31) < 0)
    {
      sub_216778F24(__p, *(void **)(a1 + 8), *(void *)(a1 + 16));
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)(a1 + 8);
      uint64_t v10 = *(void *)(a1 + 24);
    }
  }
  else
  {
    if (*(char *)(a1 + 31) >= 0) {
      size_t v3 = *(unsigned __int8 *)(a1 + 31);
    }
    else {
      size_t v3 = *(void *)(a1 + 16);
    }
    unint64_t v4 = __p;
    sub_2167940B4((uint64_t)__p, v3 + 1);
    if (v10 < 0) {
      unint64_t v4 = (void **)__p[0];
    }
    if (v3)
    {
      uint64_t v7 = *(char **)(a1 + 8);
      uint64_t v6 = (char *)(a1 + 8);
      uint64_t v5 = v7;
      if (v6[23] >= 0) {
        long long v8 = v6;
      }
      else {
        long long v8 = v5;
      }
      memmove(v4, v8, v3);
    }
    *(_WORD *)((char *)v4 + v3) = 47;
  }
  sub_2168DF8B0(v2, (uint64_t)__p);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
}

void sub_2168DF740(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2168DF75C(uint64_t a1)
{
  *(void *)a1 = &unk_26C74D488;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_2168DF7AC(void **__p)
{
  *std::string __p = &unk_26C74D488;
  if (*((char *)__p + 39) < 0) {
    operator delete(__p[2]);
  }

  operator delete(__p);
}

uint64_t sub_2168DF80C(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  sub_2168DF658(a1 + 8);
  unint64_t v2 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v3 = v6;
  unint64_t v4 = atomic_load((unint64_t *)(v2 + 144));
  if (v3 < v4
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6, (atomic_ullong *)v2))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v6, *(void *)(a1 + 48));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  return 0;
}

void sub_2168DF89C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

void sub_2168DF8B0(uint64_t **a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a2 + 23);
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *(void *)(a2 + 8);
  }
  if (!v2) {
    return;
  }
  if (pxrInternal__aapl__pxrReserved__::TfIsRelativePath((unsigned __int8 *)a2))
  {
    *(void *)unint64_t v56 = "plug/info.cpp";
    *(void *)&v56[8] = "_ReadPlugInfoWithWildcards";
    *(void *)&v56[16] = 388;
    *(void *)&v56[24] = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ReadPlugInfoWithWildcards(_Read"
                          "Context *, const std::string &)";
    LOBYTE(v57) = 0;
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v5 = (const char *)a2;
    }
    else {
      uint64_t v5 = *(const char **)a2;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v56, 3, (pxrInternal__aapl__pxrReserved__ *)"Plugin info file %s is not absolute", v5);
    return;
  }
  std::string::size_type v6 = std::string::find((const std::string *)a2, 42, 0);
  uint64_t v7 = *(unsigned __int8 *)(a2 + 23);
  if (v6 != -1)
  {
    BOOL v8 = (v7 & 0x80u) != 0;
    if ((v7 & 0x80u) != 0) {
      uint64_t v7 = *(void *)(a2 + 8);
    }
    if (v8) {
      uint64_t v9 = *(char **)a2;
    }
    else {
      uint64_t v9 = (char *)a2;
    }
    if (v7 < 2) {
      goto LABEL_59;
    }
    uint64_t v10 = &v9[v7];
    unint64_t v11 = v9;
    while (1)
    {
      char v12 = (char *)memchr(v11, 42, v7 - 1);
      if (!v12) {
        goto LABEL_59;
      }
      if (*(_WORD *)v12 == 10794) {
        break;
      }
      unint64_t v11 = v12 + 1;
      uint64_t v7 = v10 - (unsigned char *)v11;
      if (v10 - (unsigned char *)v11 < 2) {
        goto LABEL_59;
      }
    }
    if (v12 == v10 || (std::string::size_type v14 = v12 - v9, v14 == -1))
    {
LABEL_59:
      if (sub_2168DD040(3))
      {
        if (*(char *)(a2 + 23) >= 0) {
          std::string v26 = (const char *)a2;
        }
        else {
          std::string v26 = *(const char **)a2;
        }
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Globbing plugin info path %s\n", v24, v25, v26);
      }
      pxrInternal__aapl__pxrReserved__::TfGlob(a2, 0, (uint64_t *)v62);
      long long v27 = (char *)v62[0];
      for (uint64_t i = (char *)v62[1]; v27 != i; v27 += 24)
      {
        uint64_t v29 = *a1;
        *(void *)unint64_t v56 = a1;
        if (v27[23] < 0)
        {
          sub_216778F24(&v56[8], *(void **)v27, *((void *)v27 + 1));
        }
        else
        {
          long long v30 = *(_OWORD *)v27;
          *(void *)&v56[24] = *((void *)v27 + 2);
          *(_OWORD *)&v56[8] = v30;
        }
        uint64_t v31 = *v29;
        if (*v29)
        {
          std::string::size_type v32 = *(void *)(v31 + 256);
          __str.__r_.__value_.__r.__words[0] = 0;
          __str.__r_.__value_.__l.__size_ = v32;
          long long v33 = (void *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)&__str, 0x30uLL);
          *((unsigned char *)v33 - 11) = 1;
          *long long v33 = &unk_26C74D560;
          v33[1] = *(void *)v56;
          uint64_t v34 = v33 + 2;
          if ((v56[31] & 0x80000000) != 0)
          {
            sub_216778F24(v34, *(void **)&v56[8], *(unint64_t *)&v56[16]);
          }
          else
          {
            long long v35 = *(_OWORD *)&v56[8];
            v33[4] = *(void *)&v56[24];
            *(_OWORD *)uint64_t v34 = v35;
          }
          v33[5] = v31 + 264;
          (**(void (***)(void, void *, uint64_t))*(v33 - 5))(*(v33 - 5), v33, (uint64_t)(v33 - 1));
        }
        else
        {
          if ((v56[31] & 0x80000000) != 0) {
            sub_216778F24(&__str, *(void **)&v56[8], *(unint64_t *)&v56[16]);
          }
          else {
            std::string __str = *(std::string *)&v56[8];
          }
          sub_2168E02D4(*(uint64_t *)v56, &__str);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
        }
        if ((v56[31] & 0x80000000) != 0) {
          operator delete(*(void **)&v56[8]);
        }
      }
      *(void *)unint64_t v56 = v62;
      sub_216782F20((void ***)v56);
      return;
    }
    sub_216779094(v56, "\\"");
    sub_216779094(v62, "/");
    pxrInternal__aapl__pxrReserved__::TfStringReplace((void **)a2, v56, (unsigned __int8 *)v62, &__str);
    if (SHIBYTE(v63) < 0) {
      operator delete(v62[0]);
    }
    if ((v56[23] & 0x80000000) != 0) {
      operator delete(*(void **)v56);
    }
    std::string::size_type v15 = std::string::rfind(&__str, 47, v14);
    std::string::basic_string((std::string *)v56, &__str, 0, v15, (std::allocator<char> *)&v61);
    pxrInternal__aapl__pxrReserved__::TfNormPath(v62, v56, 0);
    if ((v56[23] & 0x80000000) != 0) {
      operator delete(*(void **)v56);
    }
    std::string::basic_string(&v61, &__str, v15 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v56);
    memset(v56, 0, 24);
    std::string::size_type size = HIBYTE(v61.__r_.__value_.__r.__words[2]);
    if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v61.__r_.__value_.__l.__size_;
    }
    std::string::reserve((std::string *)v56, 5 * size);
    char v19 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
    if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v20 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v20 = v61.__r_.__value_.__l.__size_;
    }
    if (v20)
    {
      uint64_t v21 = 0;
      while (1)
      {
        long long v22 = (v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v61
            : (std::string *)v61.__r_.__value_.__r.__words[0];
        int v23 = v22->__r_.__value_.__s.__data_[v21];
        if (v23 > 90) {
          break;
        }
        if (v23 == 42)
        {
          if (v21 + 1 == v20 || v22->__r_.__value_.__s.__data_[v21 + 1] != 42)
          {
            std::string::append((std::string *)v56, "[^/]*", 5uLL);
          }
          else
          {
            std::string::append((std::string *)v56, ".*", 2uLL);
            ++v21;
          }
          goto LABEL_53;
        }
        if (v23 == 46) {
          goto LABEL_51;
        }
LABEL_52:
        std::string::push_back((std::string *)v56, v23);
LABEL_53:
        if (++v21 == v20)
        {
          char v19 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
          goto LABEL_83;
        }
      }
      if (v23 != 93 && v23 != 91) {
        goto LABEL_52;
      }
LABEL_51:
      std::string::push_back((std::string *)v56, 92);
      goto LABEL_52;
    }
LABEL_83:
    if (v19 < 0) {
      operator delete(v61.__r_.__value_.__l.__data_);
    }
    std::string v61 = *(std::string *)v56;
    if (v63 >= 0) {
      uint64_t v36 = v62;
    }
    else {
      uint64_t v36 = (void **)v62[0];
    }
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::size_type v37 = v61.__r_.__value_.__l.__size_;
      uint64_t v38 = (std::string *)v61.__r_.__value_.__r.__words[0];
      if (!v61.__r_.__value_.__l.__size_) {
        goto LABEL_96;
      }
    }
    else
    {
      std::string::size_type v37 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
      if (!*((unsigned char *)&v61.__r_.__value_.__s + 23))
      {
        uint64_t v40 = "";
        uint64_t v38 = &v61;
        goto LABEL_98;
      }
      uint64_t v38 = &v61;
    }
    if (v38->__r_.__value_.__s.__data_[v37 - 1] == 47)
    {
      unint64_t v39 = *(void *)sub_2168DDD84() & 0xFFFFFFFFFFFFFFF8;
      if (v39)
      {
        uint64_t v40 = (const char *)(v39 + 16);
        if (*(char *)(v39 + 39) < 0) {
          uint64_t v40 = *(const char **)v40;
        }
LABEL_98:
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s/%s%s", v17, v18, v36, v38, v40);
        if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v61.__r_.__value_.__l.__data_);
        }
        std::string v61 = *(std::string *)v56;
        uint64_t v59 = 0;
        unint64_t v60 = 0;
        long long v41 = (const std::locale *)operator new(0x40uLL);
        uint64_t v42 = (uint64_t)v41;
        if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          BOOL v43 = &v61;
        }
        else {
          BOOL v43 = (std::string *)v61.__r_.__value_.__r.__words[0];
        }
        sub_2168290A4(v41, (char *)v43, 32);
        sub_2168E1240(&v59, v42);
        if (sub_2168DD040(3))
        {
          if (*(char *)(a2 + 23) >= 0) {
            std::string::size_type v46 = (const char *)a2;
          }
          else {
            std::string::size_type v46 = *(const char **)a2;
          }
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Recursively walking plugin info path %s\n", v44, v45, v46);
        }
        int v47 = *a1;
        *(void *)unint64_t v56 = a1;
        if (SHIBYTE(v63) < 0)
        {
          sub_216778F24(&v56[8], v62[0], (unint64_t)v62[1]);
        }
        else
        {
          *(_OWORD *)&v56[8] = *(_OWORD *)v62;
          *(void *)&v56[24] = v63;
        }
        uint64_t v57 = v59;
        uint64_t v58 = v60;
        if (v60) {
          atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v48 = *v47;
        if (*v47)
        {
          std::string::size_type v49 = *(std::__shared_weak_count **)(v48 + 256);
          uint64_t v66 = 0;
          unint64_t v67 = v49;
          unint64_t v50 = (void *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)&v66, 0x40uLL);
          *((unsigned char *)v50 - 11) = 1;
          *unint64_t v50 = &unk_26C74D620;
          v50[1] = *(void *)v56;
          uint64_t v51 = v50 + 2;
          if ((v56[31] & 0x80000000) != 0)
          {
            sub_216778F24(v51, *(void **)&v56[8], *(unint64_t *)&v56[16]);
          }
          else
          {
            long long v52 = *(_OWORD *)&v56[8];
            v50[4] = *(void *)&v56[24];
            *(_OWORD *)uint64_t v51 = v52;
          }
          v50[5] = v57;
          long long v55 = v58;
          v50[6] = v58;
          if (v55) {
            atomic_fetch_add_explicit(&v55->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          v50[7] = v48 + 264;
          (**(void (***)(void, void *, uint64_t))*(v50 - 5))(*(v50 - 5), v50, (uint64_t)(v50 - 1));
        }
        else
        {
          uint64_t v53 = *(uint64_t ***)v56;
          uint64_t v54 = v58;
          uint64_t v66 = v57;
          unint64_t v67 = v58;
          if (v58) {
            atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_2168E2004(v53, &v56[8], (uint64_t)&v66);
          if (v54) {
            sub_216784EC4(v54);
          }
        }
        if (v58) {
          sub_216784EC4(v58);
        }
        if ((v56[31] & 0x80000000) != 0) {
          operator delete(*(void **)&v56[8]);
        }
        if (v60) {
          sub_216784EC4(v60);
        }
        if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v61.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v63) < 0) {
          operator delete(v62[0]);
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        {
          long long v13 = (void *)__str.__r_.__value_.__r.__words[0];
          goto LABEL_26;
        }
        return;
      }
    }
LABEL_96:
    uint64_t v40 = "";
    goto LABEL_98;
  }
  if ((v7 & 0x80) != 0) {
    sub_216778F24(&__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  sub_2168E02D4((uint64_t)a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    long long v13 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_26:
    operator delete(v13);
  }
}

void sub_2168E008C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  tbb::internal::allocate_additional_child_of_proxy::free((tbb::internal::allocate_additional_child_of_proxy *)(v39 - 96), v38);
  sub_2167A0790((uint64_t)&a13);
  if (a20) {
    sub_216784EC4(a20);
  }
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (*(char *)(v39 - 105) < 0) {
    operator delete(*(void **)(v39 - 128));
  }
  _Unwind_Resume(a1);
}

void sub_2168E02D4(uint64_t a1, std::string *a2)
{
  uint64_t v2 = a2;
  v125[19] = *MEMORY[0x263EF8340];
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = a2->__r_.__value_.__l.__size_;
    if (!size) {
      return;
    }
    unint64_t v4 = (std::string *)a2->__r_.__value_.__r.__words[0];
  }
  else
  {
    std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    if (!*((unsigned char *)&a2->__r_.__value_.__s + 23)) {
      return;
    }
    unint64_t v4 = a2;
  }
  if (v4->__r_.__value_.__s.__data_[size - 1] == 47)
  {
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_2168DDD84();
    if ((*(void *)v5 & 0xFFFFFFFFFFFFFFF8) != 0) {
      Emptyunint64_t String = (uint64_t *)((*(void *)v5 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      Emptyunint64_t String = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v5);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier((const void **)&v2->__r_.__value_.__l.__data_, (const void **)EmptyString, (uint64_t)v115);
    if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v2->__r_.__value_.__l.__data_);
    }
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = *(_OWORD *)v115;
    v2->__r_.__value_.__r.__words[2] = *(void *)&v115[16];
  }
  uint64_t v7 = *(void *)(a1 + 32);
  if (!v7) {
    sub_21683A7CC();
  }
  char v8 = (*(uint64_t (**)(uint64_t, std::string *))(*(void *)v7 + 48))(v7, v2);
  BOOL v9 = sub_2168DD040(3);
  if (v8)
  {
    if (v9)
    {
      char v12 = v2;
      if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0) {
        char v12 = (std::string *)v2->__r_.__value_.__r.__words[0];
      }
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Will read plugin info %s\n", v10, v11, v12);
    }
    v97[0] = 0;
    v97[1] = 0;
    unint64_t v96 = (uint64_t *)v97;
    uint64_t v13 = MEMORY[0x263F8C308] + 64;
    v125[0] = MEMORY[0x263F8C308] + 64;
    std::string::size_type v14 = (void *)MEMORY[0x263F8C2A8];
    uint64_t v15 = *(void *)(MEMORY[0x263F8C2A8] + 16);
    *(void *)long long v115 = *(void *)(MEMORY[0x263F8C2A8] + 8);
    *(void *)&v115[*(void *)(*(void *)v115 - 24)] = v15;
    *(void *)&v115[8] = 0;
    uint64_t v16 = (std::ios_base *)&v115[*(void *)(*(void *)v115 - 24)];
    std::ios_base::init(v16, &v115[16]);
    uint64_t v17 = MEMORY[0x263F8C308] + 24;
    v16[1].__vftable = 0;
    v16[1].__fmtflags_ = -1;
    *(void *)long long v115 = v17;
    v125[0] = v13;
    MEMORY[0x21D447900](&v115[16]);
    std::ifstream::open();
    uint64_t v18 = v124;
    uint64_t v95 = v2;
    if (v124)
    {
      uint64_t v92 = v124;
      memset(&v105, 0, sizeof(v105));
      unint64_t v102 = 0;
      uint64_t v103 = 0;
      unint64_t v104 = 0;
      char v19 = (std::locale::id *)MEMORY[0x263F8C108];
      while (1)
      {
        std::ios_base::getloc((const std::ios_base *)&v115[*(void *)(*(void *)v115 - 24)]);
        std::string::size_type v20 = std::locale::use_facet(v100, v19);
        unsigned __int8 v21 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
        std::locale::~locale(v100);
        long long v22 = sub_21683AAFC(v115, (uint64_t)&v105, v21);
        if ((*((unsigned char *)v22 + *(void *)(*v22 - 24) + 32) & 5) != 0) {
          break;
        }
        std::string::size_type v23 = std::string::find(&v105, 35, 0);
        int v24 = SHIBYTE(v105.__r_.__value_.__r.__words[2]);
        std::string::size_type v26 = v105.__r_.__value_.__l.__size_;
        uint64_t v25 = (unsigned char *)v105.__r_.__value_.__r.__words[0];
        if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v27 = &v105;
        }
        else {
          long long v27 = (std::string *)v105.__r_.__value_.__r.__words[0];
        }
        if ((v105.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v28 = HIBYTE(v105.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v28 = v105.__r_.__value_.__l.__size_;
        }
        if (v28)
        {
          unint64_t v29 = 0;
          while (memchr(" \t#", v27->__r_.__value_.__s.__data_[v29], 3uLL))
          {
            if (v28 == ++v29) {
              goto LABEL_32;
            }
          }
        }
        else
        {
LABEL_32:
          unint64_t v29 = -1;
        }
        uint64_t v2 = v95;
        if (v23 < v29)
        {
          if (v24 < 0)
          {
            std::string::size_type v26 = 0;
            *uint64_t v25 = 0;
            v105.__r_.__value_.__l.__size_ = 0;
          }
          else
          {
            v105.__r_.__value_.__s.__data_[0] = 0;
            *((unsigned char *)&v105.__r_.__value_.__s + 23) = 0;
          }
        }
        long long v30 = v103;
        if ((unint64_t)v103 >= v104)
        {
          std::string::size_type v32 = (unsigned char *)sub_2167E9A44((uint64_t *)&v102, (long long *)&v105);
        }
        else
        {
          if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
          {
            sub_216778F24(v103, v105.__r_.__value_.__l.__data_, v26);
          }
          else
          {
            long long v31 = *(_OWORD *)&v105.__r_.__value_.__l.__data_;
            *((void *)v103 + 2) = *((void *)&v105.__r_.__value_.__l + 2);
            *long long v30 = v31;
          }
          std::string::size_type v32 = (char *)v30 + 24;
        }
        uint64_t v103 = v32;
      }
      *(_OWORD *)&v100[0].__locale_ = 0u;
      long long v101 = 0u;
      pxrInternal__aapl__pxrReserved__::TfStringJoin("\n", &v102, &__p);
      pxrInternal__aapl__pxrReserved__::JsParseString((char *)&__p, (uint64_t)v100, v33, (pxrInternal__aapl__pxrReserved__::JsValue *)&v98);
      std::string::size_type v14 = (void *)MEMORY[0x263F8C2A8];
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v18 = v92;
      if (pxrInternal__aapl__pxrReserved__::JsValue::IsNull((pxrInternal__aapl__pxrReserved__::JsValue *)&v98))
      {
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"plug/info.cpp";
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)"_ReadPlugInfoObject";
        __p.__r_.__value_.__r.__words[2] = 196;
        long long v107 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ReadPlugInfoObject(const std::string &, JsObject *)";
        LOBYTE(v108) = 0;
        if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v34 = (const char *)v2;
        }
        else {
          uint64_t v34 = (const char *)v2->__r_.__value_.__r.__words[0];
        }
        locale = (std::locale::__imp *)&v100[1];
        if (v101 < 0) {
          locale = v100[1].__locale_;
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Plugin info file %s couldn't be read (line %d, col %d): %s", v34, LODWORD(v100[0].__locale_), HIDWORD(v100[0].__locale_), (const char *)locale);
      }
      else if (pxrInternal__aapl__pxrReserved__::JsValue::IsObject((pxrInternal__aapl__pxrReserved__::JsValue *)&v98))
      {
        unint64_t JsObject = pxrInternal__aapl__pxrReserved__::JsValue::GetJsObject(&v98);
        if ((uint64_t **)JsObject != &v96) {
          sub_2168DEE84(&v96, *(long long **)JsObject, (long long *)(JsObject + 8));
        }
      }
      else
      {
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"plug/info.cpp";
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)"_ReadPlugInfoObject";
        __p.__r_.__value_.__r.__words[2] = 201;
        long long v107 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ReadPlugInfoObject(const std::string &, JsObject *)";
        LOBYTE(v108) = 0;
        if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v40 = (const char *)v2;
        }
        else {
          uint64_t v40 = (const char *)v2->__r_.__value_.__r.__words[0];
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Plugin info file %s did not contain a JSON object", v40);
      }
      if (v99) {
        sub_216784EC4(v99);
      }
      if (SHIBYTE(v101) < 0) {
        operator delete(v100[1].__locale_);
      }
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v102;
      sub_216782F20((void ***)&__p);
      if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v105.__r_.__value_.__l.__data_);
      }
    }
    else if (sub_2168DD040(3))
    {
      if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v38 = v2;
      }
      else {
        uint64_t v38 = (std::string *)v2->__r_.__value_.__r.__words[0];
      }
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Failed to open plugin info %s\n", v36, v37, v38);
    }
    *(void *)long long v115 = *v14;
    *(void *)&v115[*(void *)(*(void *)v115 - 24)] = v14[3];
    MEMORY[0x21D447910](&v115[16]);
    std::istream::~istream();
    MEMORY[0x21D447E60](v125);
    if (v18)
    {
      if (sub_2168DD040(3))
      {
        BOOL v43 = v2;
        if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0) {
          BOOL v43 = (std::string *)v2->__r_.__value_.__r.__words[0];
        }
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)" Did read plugin info %s\n", v41, v42, v43);
      }
      uint64_t v44 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_2168DDD84();
      if ((*((void *)v44 + 2) & 0xFFFFFFFFFFFFFFF8) != 0) {
        uint64_t v45 = (uint64_t *)((*((void *)v44 + 2) & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        uint64_t v45 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v44);
      }
      std::string::size_type v46 = (void **)sub_21678C2D8((uint64_t)&v96, (const void **)v45);
      int v47 = v46;
      if (v97 != v46)
      {
        uint64_t v48 = (const char *)(v46 + 4);
        if (pxrInternal__aapl__pxrReserved__::JsValue::IsArray((pxrInternal__aapl__pxrReserved__::JsValue *)(v46 + 7)))
        {
          unint64_t JsArray = (uint64_t *)pxrInternal__aapl__pxrReserved__::JsValue::GetJsArray(v47 + 7);
          uint64_t v52 = JsArray[1] - *JsArray;
          if (v52)
          {
            uint64_t v53 = 0;
            uint64_t v54 = 0;
            uint64_t v93 = v52 >> 4;
            do
            {
              uint64_t v55 = *JsArray;
              unint64_t v56 = (std::string *)v2->__r_.__value_.__r.__words[0];
              if ((v2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                unint64_t v56 = v2;
              }
              uint64_t v57 = (void **)v47[4];
              if (*((char *)v47 + 55) >= 0) {
                uint64_t v57 = v47 + 4;
              }
              pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"file %s %s[%zd]", v49, v50, v56, v57, v54);
              pxrInternal__aapl__pxrReserved__::Plug_RegistrationMetadata::Plug_RegistrationMetadata((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__::JsValue *)(v55 + v53), v2, (uint64_t)v100);
              if (LODWORD(__p.__r_.__value_.__l.__data_))
              {
                uint64_t v58 = *(uint64_t **)a1;
                *(void *)long long v115 = a1;
                sub_2168E1688((uint64_t)&v115[8], (uint64_t)&__p);
                uint64_t v59 = *v58;
                if (*v58)
                {
                  std::string::size_type v60 = *(void *)(v59 + 256);
                  v105.__r_.__value_.__r.__words[0] = 0;
                  v105.__r_.__value_.__l.__size_ = v60;
                  std::string v61 = (void *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)&v105, 0xB0uLL);
                  *((unsigned char *)v61 - 11) = 1;
                  *std::string v61 = &unk_26C74D4D0;
                  v61[1] = *(void *)v115;
                  sub_2168E1688((uint64_t)(v61 + 2), (uint64_t)&v115[8]);
                  v61[21] = v59 + 264;
                  (**(void (***)(void, void *, uint64_t))*(v61 - 5))(*(v61 - 5), v61, (uint64_t)(v61 - 1));
                }
                else
                {
                  uint64_t v62 = *(void *)(*(void *)v115 + 64);
                  if (!v62) {
                    sub_21683A7CC();
                  }
                  (*(void (**)(uint64_t, unsigned char *))(*(void *)v62 + 48))(v62, &v115[8]);
                }
                v105.__r_.__value_.__r.__words[0] = (std::string::size_type)&v124;
                sub_2168DEE10((void ***)&v105);
                if (v123 < 0) {
                  operator delete(v122);
                }
                uint64_t v2 = v95;
                if (v121 < 0) {
                  operator delete(v120[3]);
                }
                sub_216812ED4((uint64_t)v120, v120[1]);
                if (v119 < 0) {
                  operator delete(v118);
                }
                if (v117 < 0) {
                  operator delete(*(void **)&v115[16]);
                }
              }
              *(void *)long long v115 = &v114;
              sub_2168DEE10((void ***)v115);
              if (v113 < 0) {
                operator delete(v112);
              }
              if (v111 < 0) {
                operator delete(v110[3]);
              }
              sub_216812ED4((uint64_t)v110, v110[1]);
              if (v109 < 0) {
                operator delete(v108);
              }
              if (SHIBYTE(v107) < 0) {
                operator delete((void *)__p.__r_.__value_.__l.__size_);
              }
              if (SBYTE7(v101) < 0) {
                operator delete(v100[0].__locale_);
              }
              ++v54;
              v53 += 16;
            }
            while (v93 != v54);
          }
        }
        else
        {
          *(void *)long long v115 = "plug/info.cpp";
          *(void *)&v115[8] = "_ReadPlugInfo";
          *(void *)&v115[16] = 249;
          *(void *)&v115[24] = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ReadPlugInfo(_ReadContex"
                                 "t *, std::string)";
          char v116 = 0;
          uint64_t v63 = (const char *)v2;
          if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0) {
            uint64_t v63 = (const char *)v2->__r_.__value_.__r.__words[0];
          }
          if (*((char *)v47 + 55) < 0) {
            uint64_t v48 = *(const char **)v48;
          }
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v115, 3, (pxrInternal__aapl__pxrReserved__ *)"Plugin info file %s key '%s' doesn't hold an array", v63, v48);
        }
      }
      std::string v64 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_2168DDD84();
      if ((*((void *)v64 + 1) & 0xFFFFFFFFFFFFFFF8) != 0) {
        long long v65 = (uint64_t *)((*((void *)v64 + 1) & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        long long v65 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v64);
      }
      uint64_t v66 = (void **)sub_21678C2D8((uint64_t)&v96, (const void **)v65);
      unint64_t v67 = v66;
      if (v97 != v66)
      {
        long long v68 = (const char *)(v66 + 4);
        if (pxrInternal__aapl__pxrReserved__::JsValue::IsArray((pxrInternal__aapl__pxrReserved__::JsValue *)(v66 + 7)))
        {
          unint64_t v69 = (void *)pxrInternal__aapl__pxrReserved__::JsValue::GetJsArray(v67 + 7);
          uint64_t v70 = v69[1] - *v69;
          if (v70)
          {
            uint64_t v71 = 0;
            uint64_t v72 = 0;
            uint64_t v73 = v70 >> 4;
            do
            {
              if (pxrInternal__aapl__pxrReserved__::JsValue::IsString((pxrInternal__aapl__pxrReserved__::JsValue *)(*v69 + v71)))
              {
                unint64_t String = pxrInternal__aapl__pxrReserved__::JsValue::GetString((pxrInternal__aapl__pxrReserved__::JsValue *)(*v69 + v71));
                sub_2168DE40C(v95, String, 1, &__p);
                unint64_t v75 = *(uint64_t **)a1;
                *(void *)long long v115 = a1;
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  sub_216778F24(&v115[8], __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
                }
                else {
                  *(std::string *)&v115[8] = __p;
                }
                uint64_t v78 = *v75;
                if (*v75)
                {
                  unint64_t v79 = *(std::locale::__imp **)(v78 + 256);
                  v100[0].__locale_ = 0;
                  v100[1].__locale_ = v79;
                  long long v80 = (void *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v100, 0x30uLL);
                  *((unsigned char *)v80 - 11) = 1;
                  *long long v80 = &unk_26C74D518;
                  v80[1] = *(void *)v115;
                  long long v81 = v80 + 2;
                  if ((v115[31] & 0x80000000) != 0)
                  {
                    sub_216778F24(v81, *(void **)&v115[8], *(unint64_t *)&v115[16]);
                  }
                  else
                  {
                    long long v82 = *(_OWORD *)&v115[8];
                    v80[4] = *(void *)&v115[24];
                    *(_OWORD *)long long v81 = v82;
                  }
                  v80[5] = v78 + 264;
                  (**(void (***)(void, void *, uint64_t))*(v80 - 5))(*(v80 - 5), v80, (uint64_t)(v80 - 1));
                }
                else
                {
                  sub_2168DF8B0(*(void *)v115, &v115[8]);
                }
                if ((v115[31] & 0x80000000) != 0) {
                  operator delete(*(void **)&v115[8]);
                }
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
              }
              else
              {
                *(void *)long long v115 = "plug/info.cpp";
                *(void *)&v115[8] = "_ReadPlugInfo";
                *(void *)&v115[16] = 271;
                *(void *)&v115[24] = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ReadPlugInfo(_Read"
                                       "Context *, std::string)";
                char v116 = 0;
                unint64_t v76 = (const char *)v95;
                if (SHIBYTE(v95->__r_.__value_.__r.__words[2]) < 0) {
                  unint64_t v76 = (const char *)v95->__r_.__value_.__r.__words[0];
                }
                unint64_t v77 = (const char *)(v67 + 4);
                if (*((char *)v67 + 55) < 0) {
                  unint64_t v77 = *(const char **)v68;
                }
                pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v115, 3, (pxrInternal__aapl__pxrReserved__ *)"Plugin info file %s key '%s' index %zd doesn't hold a string", v76, v77, v72);
              }
              ++v72;
              v71 += 16;
            }
            while (v73 != v72);
          }
        }
        else
        {
          *(void *)long long v115 = "plug/info.cpp";
          *(void *)&v115[8] = "_ReadPlugInfo";
          *(void *)&v115[16] = 263;
          *(void *)&v115[24] = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ReadPlugInfo(_ReadContex"
                                 "t *, std::string)";
          char v116 = 0;
          uint64_t v83 = (const char *)v95;
          if (SHIBYTE(v95->__r_.__value_.__r.__words[2]) < 0) {
            uint64_t v83 = (const char *)v95->__r_.__value_.__r.__words[0];
          }
          if (*((char *)v67 + 55) < 0) {
            long long v68 = *(const char **)v68;
          }
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v115, 3, (pxrInternal__aapl__pxrReserved__ *)"Plugin info file %s key '%s' doesn't hold an array", v83, v68);
        }
      }
      unint64_t v84 = v96;
      if (v96 != (uint64_t *)v97)
      {
        do
        {
          unint64_t v85 = sub_2168DDD84();
          long long v86 = (const char *)(v84 + 4);
          if ((pxrInternal__aapl__pxrReserved__::TfToken::operator==((pxrInternal__aapl__pxrReserved__::TfToken *)(v85 + 16), (unsigned __int8 *)v84 + 32) & 1) == 0)
          {
            unint64_t v87 = sub_2168DDD84();
            if ((pxrInternal__aapl__pxrReserved__::TfToken::operator==((pxrInternal__aapl__pxrReserved__::TfToken *)(v87 + 8), (unsigned __int8 *)v84 + 32) & 1) == 0)
            {
              *(void *)long long v115 = "plug/info.cpp";
              *(void *)&v115[8] = "_ReadPlugInfo";
              *(void *)&v115[16] = 293;
              *(void *)&v115[24] = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ReadPlugInfo(_ReadCo"
                                     "ntext *, std::string)";
              char v116 = 0;
              uint64_t v88 = (const char *)v95;
              if (SHIBYTE(v95->__r_.__value_.__r.__words[2]) < 0) {
                uint64_t v88 = (const char *)v95->__r_.__value_.__r.__words[0];
              }
              if (*((char *)v84 + 55) < 0) {
                long long v86 = *(const char **)v86;
              }
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v115, 3, (pxrInternal__aapl__pxrReserved__ *)"Plugin info file %s has unknown key %s", v88, v86);
            }
          }
          std::string v89 = (uint64_t *)v84[1];
          if (v89)
          {
            do
            {
              uint64_t v90 = v89;
              std::string v89 = (uint64_t *)*v89;
            }
            while (v89);
          }
          else
          {
            do
            {
              uint64_t v90 = (uint64_t *)v84[2];
              BOOL v91 = *v90 == (void)v84;
              unint64_t v84 = v90;
            }
            while (!v91);
          }
          unint64_t v84 = v90;
        }
        while (v90 != (uint64_t *)v97);
      }
    }
    sub_216812ED4((uint64_t)&v96, v97[0]);
  }
  else if (v9)
  {
    if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0) {
      uint64_t v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    }
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Ignore already read plugin info %s\n", v10, v11, v2);
  }
}

void sub_2168E1074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::locale a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  if (a24) {
    sub_216784EC4((std::__shared_weak_count *)a24);
  }
  if (a31 < 0) {
    operator delete(__p);
  }
  a42 = &a33;
  sub_216782F20((void ***)&a42);
  if (a41 < 0) {
    operator delete(a36);
  }
  sub_2168E1288(&a61);
  sub_216812ED4((uint64_t)&a20, (void *)a21);
  _Unwind_Resume(a1);
}

void sub_2168E1240(void *a1, uint64_t a2)
{
  sub_2168E1D14(&v5, a2);
  unint64_t v3 = (std::__shared_weak_count *)a1[1];
  long long v4 = v5;
  *(void *)&long long v5 = *a1;
  *((void *)&v5 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3) {
    sub_216784EC4(v3);
  }
}

void *sub_2168E1288(void *a1)
{
  uint64_t v2 = MEMORY[0x263F8C2A8];
  uint64_t v3 = *MEMORY[0x263F8C2A8];
  *a1 = *MEMORY[0x263F8C2A8];
  *(void *)((char *)a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  MEMORY[0x21D447910](a1 + 2);
  std::istream::~istream();
  MEMORY[0x21D447E60](a1 + 53);
  return a1;
}

uint64_t sub_2168E1354(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 136);
  sub_2168DEE10(&v3);
  if (*(char *)(a1 + 135) < 0) {
    operator delete(*(void **)(a1 + 112));
  }
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  sub_216812ED4(a1 + 64, *(void **)(a1 + 72));
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

uint64_t sub_2168E13DC(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 128);
  sub_2168DEE10(&v3);
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  sub_216812ED4(a1 + 56, *(void **)(a1 + 64));
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_2168E1464(uint64_t a1)
{
  *(void *)a1 = &unk_26C74D4D0;
  uint64_t v3 = (void **)(a1 + 144);
  sub_2168DEE10(&v3);
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  sub_216812ED4(a1 + 72, *(void **)(a1 + 80));
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void sub_2168E1508(void **a1)
{
  *a1 = &unk_26C74D4D0;
  uint64_t v2 = a1 + 18;
  sub_2168DEE10(&v2);
  if (*((char *)a1 + 143) < 0) {
    operator delete(a1[15]);
  }
  if (*((char *)a1 + 119) < 0) {
    operator delete(a1[12]);
  }
  sub_216812ED4((uint64_t)(a1 + 9), a1[10]);
  if (*((char *)a1 + 71) < 0) {
    operator delete(a1[6]);
  }
  if (*((char *)a1 + 47) < 0) {
    operator delete(a1[3]);
  }
  operator delete(a1);
}

uint64_t sub_2168E15B0(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v7);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 64);
  if (!v2) {
    sub_21683A7CC();
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 48))(v2, a1 + 16);
  unint64_t v3 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v3) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v4 = v7;
  unint64_t v5 = atomic_load((unint64_t *)(v3 + 144));
  if (v4 < v5
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v7, (atomic_ullong *)v3))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v7, *(void *)(a1 + 168));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v7);
  return 0;
}

void sub_2168E1674(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2168E1688(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_216778F24((unsigned char *)(a1 + 8), *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  if (*(char *)(a2 + 55) < 0)
  {
    sub_216778F24((unsigned char *)(a1 + 32), *(void **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + sub_2168D9AA8((uint64_t)this + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v5;
  }
  sub_2168BB7AC((uint64_t *)(a1 + 56), (const void ***)(a2 + 56));
  if (*(char *)(a2 + 103) < 0)
  {
    sub_216778F24((unsigned char *)(a1 + 80), *(void **)(a2 + 80), *(void *)(a2 + 88));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 80);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(_OWORD *)(a1 + 8sub_2168DF148(this, 0) = v6;
  }
  if (*(char *)(a2 + 127) < 0)
  {
    sub_216778F24((unsigned char *)(a1 + 104), *(void **)(a2 + 104), *(void *)(a2 + 112));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 104);
    *(void *)(a1 + 12sub_2168DF148(this, 0) = *(void *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = v7;
  }
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  sub_2168E1840((void *)(a1 + 128), *(long long ***)(a2 + 128), *(long long ***)(a2 + 136), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 136) - *(void *)(a2 + 128)) >> 3));
  return a1;
}

void sub_2168E17C8(_Unwind_Exception *a1)
{
  if (*(char *)(v2 + 103) < 0) {
    operator delete(*v5);
  }
  sub_216812ED4(v4, *(void **)(v2 + 64));
  if (*(char *)(v2 + 55) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v2 + 31) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(a1);
}

void *sub_2168E1840(void *result, long long **a2, long long **a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    sub_216782E84(result, a4);
    uint64_t result = (void *)sub_2168E18C8((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_2168E18A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_2168DEE10(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2168E18C8(uint64_t a1, long long **a2, long long **a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  float64x2_t v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    long long v6 = a2;
    do
    {
      *(void *)uint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0;
      sub_216812BD8((char *)v4, *v6, v6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v6[1] - (char *)*v6) >> 3));
      uint64_t v4 = v11 + 24;
      v11 += 24;
      v6 += 3;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  sub_2168E1988((uint64_t)v8);
  return v4;
}

void sub_2168E1974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2168E1988(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_2168E19C0(a1);
  }
  return a1;
}

void sub_2168E19C0(uint64_t a1)
{
  uint64_t v1 = **(void ****)(a1 + 16);
  uint64_t v2 = **(void ****)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 3;
    unint64_t v3 = v1;
    sub_216782F20(&v3);
  }
}

uint64_t sub_2168E1A0C(uint64_t a1)
{
  *(void *)a1 = &unk_26C74D518;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_2168E1A5C(void **__p)
{
  *std::string __p = &unk_26C74D518;
  if (*((char *)__p + 39) < 0) {
    operator delete(__p[2]);
  }

  operator delete(__p);
}

uint64_t sub_2168E1ABC(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  sub_2168DF8B0(*(uint64_t ***)(a1 + 8), a1 + 16);
  unint64_t v2 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v3 = v6;
  unint64_t v4 = atomic_load((unint64_t *)(v2 + 144));
  if (v3 < v4
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6, (atomic_ullong *)v2))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v6, *(void *)(a1 + 40));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  return 0;
}

void sub_2168E1B50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2168E1B64(uint64_t a1)
{
  *(void *)a1 = &unk_26C74D560;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_2168E1BB4(void **__p)
{
  *std::string __p = &unk_26C74D560;
  if (*((char *)__p + 39) < 0) {
    operator delete(__p[2]);
  }

  operator delete(__p);
}

uint64_t sub_2168E1C14(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v7);
  uint64_t v2 = *(void *)(a1 + 8);
  if (*(char *)(a1 + 39) < 0) {
    sub_216778F24(&__p, *(void **)(a1 + 16), *(void *)(a1 + 24));
  }
  else {
    std::string __p = *(std::string *)(a1 + 16);
  }
  sub_2168E02D4(v2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  unint64_t v3 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v3) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v4 = v7;
  unint64_t v5 = atomic_load((unint64_t *)(v3 + 144));
  if (v4 < v5
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v7, (atomic_ullong *)v3))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v7, *(void *)(a1 + 40));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v7);
  return 0;
}

void sub_2168E1CE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&a10);
  _Unwind_Resume(a1);
}

void *sub_2168E1D14(void *a1, uint64_t a2)
{
  *a1 = a2;
  unint64_t v4 = operator new(0x20uLL);
  *unint64_t v4 = &unk_26C74D5A8;
  v4[1] = 0;
  void v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_2168E1D74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  a10 = 0;
  if (v10) {
    sub_2168E1E0C((int)&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_2168E1D98(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void sub_2168E1DC0(uint64_t a1)
{
}

uint64_t sub_2168E1DC8(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C74D5F8)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_2168E1E0C(int a1, std::locale *this)
{
  if (this)
  {
    locale = (std::__shared_weak_count *)this[6].__locale_;
    if (locale) {
      sub_216784EC4(locale);
    }
    std::locale::~locale(this);
    operator delete(v4);
  }
}

uint64_t sub_2168E1E58(uint64_t a1)
{
  *(void *)a1 = &unk_26C74D620;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
    sub_216784EC4(v2);
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_2168E1EB4(char *__p)
{
  *(void *)std::string __p = &unk_26C74D620;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)__p + 6);
  if (v2) {
    sub_216784EC4(v2);
  }
  if (__p[39] < 0) {
    operator delete(*((void **)__p + 2));
  }

  operator delete(__p);
}

uint64_t sub_2168E1F20(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v8);
  uint64_t v2 = *(uint64_t ***)(a1 + 8);
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  v9[0] = *(void *)(a1 + 40);
  v9[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_2168E2004(v2, (char *)(a1 + 16), (uint64_t)v9);
  if (v3) {
    sub_216784EC4(v3);
  }
  unint64_t v4 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v5 = v8;
  unint64_t v6 = atomic_load((unint64_t *)(v4 + 144));
  if (v5 < v6
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v8, (atomic_ullong *)v4))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v8, *(void *)(a1 + 56));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v8);
  return 0;
}

void sub_2168E1FDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (v2) {
    sub_216784EC4(v2);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

void sub_2168E2004(uint64_t **a1, char *a2, uint64_t a3)
{
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  pxrInternal__aapl__pxrReserved__::TfReadDir(a2, &v36, &v33, &v33, 0);
  uint64_t v6 = v33;
  uint64_t v7 = v34;
  if (v33 == v34)
  {
LABEL_13:
    uint64_t v12 = v36;
    for (uint64_t i = v37; v12 != i; v12 += 24)
    {
      pxrInternal__aapl__pxrReserved__::TfStringCatPaths((const void **)a2, v12, __dst);
      std::string::size_type v14 = *a1;
      __p[0] = a1;
      if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0) {
        sub_216778F24(&__p[1], __dst[0].__r_.__value_.__l.__data_, __dst[0].__r_.__value_.__l.__size_);
      }
      else {
        *(std::string *)&__p[1] = __dst[0];
      }
      uint64_t v15 = *(atomic_ullong **)(a3 + 8);
      __p[4] = *(void **)a3;
      __p[5] = v15;
      if (v15) {
        atomic_fetch_add_explicit(v15 + 1, 1uLL, memory_order_relaxed);
      }
      uint64_t v16 = *v14;
      if (*v14)
      {
        uint64_t v17 = *(void **)(v16 + 256);
        v31[0] = 0;
        v31[1] = v17;
        uint64_t v18 = tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v31, 0x40uLL);
        *(unsigned char *)(v18 - 11) = 1;
        *(void *)uint64_t v18 = &unk_26C74D6B0;
        *(void **)(v18 + 8) = __p[0];
        char v19 = (unsigned char *)(v18 + 16);
        if (SHIBYTE(__p[3]) < 0)
        {
          sub_216778F24(v19, __p[1], (unint64_t)__p[2]);
        }
        else
        {
          long long v20 = *(_OWORD *)&__p[1];
          *(void **)(v18 + 32) = __p[3];
          *(_OWORD *)char v19 = v20;
        }
        *(void **)(v18 + 4sub_2168DF148(this, 0) = __p[4];
        std::string::size_type v23 = (atomic_ullong *)__p[5];
        *(void **)(v18 + sub_2168D9AA8((uint64_t)this + 48) = __p[5];
        if (v23) {
          atomic_fetch_add_explicit(v23 + 1, 1uLL, memory_order_relaxed);
        }
        *(void *)(v18 + 56) = v16 + 264;
        (***(void (****)(void, uint64_t, uint64_t))(v18 - 40))(*(void *)(v18 - 40), v18, v18 - 8);
      }
      else
      {
        unsigned __int8 v21 = __p[0];
        long long v22 = (std::__shared_weak_count *)__p[5];
        v31[0] = __p[4];
        v31[1] = __p[5];
        if (__p[5]) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)__p[5] + 1, 1uLL, memory_order_relaxed);
        }
        sub_2168E2004(v21, &__p[1], v31);
        if (v22) {
          sub_216784EC4(v22);
        }
      }
      if (__p[5]) {
        sub_216784EC4((std::__shared_weak_count *)__p[5]);
      }
      if (SHIBYTE(__p[3]) < 0) {
        operator delete(__p[1]);
      }
      if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst[0].__r_.__value_.__l.__data_);
      }
    }
  }
  else
  {
    while (1)
    {
      pxrInternal__aapl__pxrReserved__::TfStringCatPaths((const void **)a2, v6, v31);
      unint64_t v8 = *(void **)a3;
      char v9 = (void *)HIBYTE(v32);
      if (SHIBYTE(v32) >= 0) {
        uint64_t v10 = v31;
      }
      else {
        uint64_t v10 = (void **)v31[0];
      }
      if (SHIBYTE(v32) < 0) {
        char v9 = v31[1];
      }
      __p[6] = 0;
      __p[7] = 0;
      char v40 = 0;
      uint64_t v41 = 0;
      uint64_t v42 = 0;
      char v43 = 0;
      char v44 = 0;
      uint64_t v45 = 0;
      memset(__p, 0, 41);
      int v11 = sub_2168E2538((uint64_t)v10, (uint64_t)v9 + (void)v10, (uint64_t)__p, (uint64_t)v8, 0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (v11) {
        break;
      }
      if (SHIBYTE(v32) < 0) {
        operator delete(v31[0]);
      }
      v6 += 24;
      if (v6 == v7) {
        goto LABEL_13;
      }
    }
    int v24 = *a1;
    __p[0] = a1;
    if (SHIBYTE(v32) < 0)
    {
      sub_216778F24(&__p[1], v31[0], (unint64_t)v31[1]);
    }
    else
    {
      *(_OWORD *)&__p[1] = *(_OWORD *)v31;
      __p[3] = v32;
    }
    uint64_t v25 = *v24;
    if (*v24)
    {
      std::string::size_type v26 = *(void *)(v25 + 256);
      __dst[0].__r_.__value_.__r.__words[0] = 0;
      __dst[0].__r_.__value_.__l.__size_ = v26;
      uint64_t v27 = tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)__dst, 0x30uLL);
      *(unsigned char *)(v27 - 11) = 1;
      *(void *)uint64_t v27 = &unk_26C74D668;
      *(void **)(v27 + 8) = __p[0];
      std::string::size_type v28 = (unsigned char *)(v27 + 16);
      if (SHIBYTE(__p[3]) < 0)
      {
        sub_216778F24(v28, __p[1], (unint64_t)__p[2]);
      }
      else
      {
        long long v29 = *(_OWORD *)&__p[1];
        *(void **)(v27 + 32) = __p[3];
        *(_OWORD *)std::string::size_type v28 = v29;
      }
      *(void *)(v27 + 4sub_2168DF148(this, 0) = v25 + 264;
      (***(void (****)(void, uint64_t, uint64_t))(v27 - 40))(*(void *)(v27 - 40), v27, v27 - 8);
    }
    else
    {
      long long v30 = __p[0];
      if (SHIBYTE(__p[3]) < 0) {
        sub_216778F24(__dst, __p[1], (unint64_t)__p[2]);
      }
      else {
        __dst[0] = *(std::string *)&__p[1];
      }
      sub_2168E02D4((uint64_t)v30, __dst);
      if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst[0].__r_.__value_.__l.__data_);
      }
    }
    if (SHIBYTE(__p[3]) < 0) {
      operator delete(__p[1]);
    }
    if (SHIBYTE(v32) < 0) {
      operator delete(v31[0]);
    }
  }
  __p[0] = &v33;
  sub_216782F20((void ***)__p);
  __p[0] = &v36;
  sub_216782F20((void ***)__p);
}

void sub_2168E2440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char *a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  tbb::internal::allocate_additional_child_of_proxy::free((tbb::internal::allocate_additional_child_of_proxy *)(v29 - 128), v28);
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  a22 = &a16;
  sub_216782F20((void ***)&a22);
  a22 = &a19;
  sub_216782F20((void ***)&a22);
  _Unwind_Resume(a1);
}

uint64_t sub_2168E2538(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  __int16 v5 = a5;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  char v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  char v18 = 0;
  char v19 = 0;
  uint64_t v20 = 0;
  *(_OWORD *)std::string __p = 0u;
  memset(v12, 0, sizeof(v12));
  int v9 = sub_21683167C(a4, a1, a2, (uint64_t)__p, a5 | 0x1040u);
  sub_216831858(a3, a1, a2, (uint64_t *)__p, (v5 & 0x800) != 0);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (!v9) {
    return 0;
  }
  if (!*(unsigned char *)(a3 + 88)) {
    return 1;
  }
  uint64_t result = 0;
  *(void *)(a3 + 8) = *(void *)a3;
  return result;
}

void sub_2168E2614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2168E2630(uint64_t a1)
{
  *(void *)a1 = &unk_26C74D668;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_2168E2680(void **__p)
{
  *std::string __p = &unk_26C74D668;
  if (*((char *)__p + 39) < 0) {
    operator delete(__p[2]);
  }

  operator delete(__p);
}

uint64_t sub_2168E26E0(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v7);
  uint64_t v2 = *(void *)(a1 + 8);
  if (*(char *)(a1 + 39) < 0) {
    sub_216778F24(&__p, *(void **)(a1 + 16), *(void *)(a1 + 24));
  }
  else {
    std::string __p = *(std::string *)(a1 + 16);
  }
  sub_2168E02D4(v2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  unint64_t v3 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v3) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v4 = v7;
  unint64_t v5 = atomic_load((unint64_t *)(v3 + 144));
  if (v4 < v5
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v7, (atomic_ullong *)v3))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v7, *(void *)(a1 + 40));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v7);
  return 0;
}

void sub_2168E27B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_2168E27E0(uint64_t a1)
{
  *(void *)a1 = &unk_26C74D6B0;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
    sub_216784EC4(v2);
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_2168E283C(char *__p)
{
  *(void *)std::string __p = &unk_26C74D6B0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)__p + 6);
  if (v2) {
    sub_216784EC4(v2);
  }
  if (__p[39] < 0) {
    operator delete(*((void **)__p + 2));
  }

  operator delete(__p);
}

uint64_t sub_2168E28A8(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v8);
  uint64_t v2 = *(uint64_t ***)(a1 + 8);
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  v9[0] = *(void *)(a1 + 40);
  v9[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_2168E2004(v2, (char *)(a1 + 16), (uint64_t)v9);
  if (v3) {
    sub_216784EC4(v3);
  }
  unint64_t v4 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v5 = v8;
  unint64_t v6 = atomic_load((unint64_t *)(v4 + 144));
  if (v5 < v6
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v8, (atomic_ullong *)v4))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v8, *(void *)(a1 + 56));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v8);
  return 0;
}

void sub_2168E2964(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (v2) {
    sub_216784EC4(v2);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2168E298C(uint64_t a1)
{
  *(void *)a1 = &unk_26C74D6F8;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_2168E29DC(void **__p)
{
  *std::string __p = &unk_26C74D6F8;
  if (*((char *)__p + 39) < 0) {
    operator delete(__p[2]);
  }

  operator delete(__p);
}

uint64_t sub_2168E2A3C(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  sub_2168DF8B0(*(uint64_t ***)(a1 + 8), a1 + 16);
  unint64_t v2 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v3 = v6;
  unint64_t v4 = atomic_load((unint64_t *)(v2 + 144));
  if (v3 < v4
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6, (atomic_ullong *)v2))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v6, *(void *)(a1 + 40));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  return 0;
}

void sub_2168E2AD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::_TestPlugBase<1>::~_TestPlugBase(uint64_t *a1, const void *a2)
{
  sub_216859A88(a1 + 2, a2);

  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase((pxrInternal__aapl__pxrReserved__::TfRefBase *)a1);
}

{
  uint64_t vars8;

  sub_216859A88(a1 + 2, a2);

  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase((pxrInternal__aapl__pxrReserved__::TfRefBase *)a1);
}

{
  void *v3;
  uint64_t vars8;

  sub_216859A88(a1 + 2, a2);
  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase((pxrInternal__aapl__pxrReserved__::TfRefBase *)a1);

  operator delete(v3);
}

char *pxrInternal__aapl__pxrReserved__::_TestPlugBase<1>::GetTypeName@<X0>(uint64_t a1@<X0>, const std::type_info *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1;
  unint64_t v5 = (pxrInternal__aapl__pxrReserved__::TfType *)sub_2168E2BFC((pxrInternal__aapl__pxrReserved__::TfType *)&v8, a2, a3);
  uint64_t result = (char *)pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v5);
  if (result[23] < 0) {
    return (char *)sub_216778F24((unsigned char *)a4, *(void **)result, *((void *)result + 1));
  }
  long long v7 = *(_OWORD *)result;
  *(void *)(a4 + 16) = *((void *)result + 2);
  *(_OWORD *)a4 = v7;
  return result;
}

uint64_t sub_2168E2BFC(pxrInternal__aapl__pxrReserved__::TfType *a1, const std::type_info *a2, char *a3)
{
  if (*(void *)a1) {
    return pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(*(pxrInternal__aapl__pxrReserved__::TfType **)(**(void **)a1 - 8), a2, a3);
  }
  else {
    return pxrInternal__aapl__pxrReserved__::TfType::GetUnknownType(a1);
  }
}

_DWORD *pxrInternal__aapl__pxrReserved__::_TestPlugBase<1>::New@<X0>(void *a1@<X8>)
{
  uint64_t result = operator new(0x18uLL);
  result[2] = 1;
  *((void *)result + 2) = 0;
  *(void *)uint64_t result = &unk_26C74D740;
  *a1 = result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::_TestPlugBase<1>::_TestPlugBase(uint64_t result)
{
  *(_DWORD *)(result + 8) = 1;
  *(void *)(result + 16) = 0;
  *(void *)uint64_t result = &unk_26C74D740;
  return result;
}

{
  *(_DWORD *)(result + 8) = 1;
  *(void *)(result + 16) = 0;
  *(void *)uint64_t result = &unk_26C74D740;
  return result;
}

void pxrInternal__aapl__pxrReserved__::_TestPlugBase<1>::Manufacture(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t TypeByName = pxrInternal__aapl__pxrReserved__::PlugRegistry::FindTypeByName(a1);
  uint64_t v11 = TypeByName;
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)v9);
  if (v9[0] == TypeByName)
  {
    v9[0] = "plug/testPlugBase.cpp";
    v9[1] = "Manufacture";
    void v9[2] = 42;
    double v9[3] = "static TfRefPtr<_TestPlugBase<N>> pxrInternal__aapl__pxrReserved__::_TestPlugBase<1>::Manufacture(const std:"
            ":string &) [M = 1]";
    char v10 = 0;
    if (*(char *)(a1 + 23) >= 0) {
      uint64_t v8 = (const char *)a1;
    }
    else {
      uint64_t v8 = *(const char **)a1;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Failed to find TfType for %s", v8);
  }
  else
  {
    long long v7 = sub_2168E2D80((pxrInternal__aapl__pxrReserved__::TfType *)&v11, v5, v6);
    if (v7)
    {
      (*(void (**)(void *))(*(void *)v7 + 16))(v7);
      return;
    }
  }
  *a2 = 0;
}

void *sub_2168E2D80(pxrInternal__aapl__pxrReserved__::TfType *a1, uint64_t a2, char *a3)
{
  uint64_t result = (void *)pxrInternal__aapl__pxrReserved__::TfType::_GetFactory(a1, a2, a3);
  if (result)
  {
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::_TestPlugBase<2>::~_TestPlugBase(uint64_t *a1, const void *a2)
{
  sub_216859A88(a1 + 2, a2);

  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase((pxrInternal__aapl__pxrReserved__::TfRefBase *)a1);
}

{
  uint64_t vars8;

  sub_216859A88(a1 + 2, a2);

  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase((pxrInternal__aapl__pxrReserved__::TfRefBase *)a1);
}

{
  void *v3;
  uint64_t vars8;

  sub_216859A88(a1 + 2, a2);
  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase((pxrInternal__aapl__pxrReserved__::TfRefBase *)a1);

  operator delete(v3);
}

char *pxrInternal__aapl__pxrReserved__::_TestPlugBase<2>::GetTypeName@<X0>(uint64_t a1@<X0>, const std::type_info *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1;
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::TfType *)sub_2168E2BFC((pxrInternal__aapl__pxrReserved__::TfType *)&v8, a2, a3);
  uint64_t result = (char *)pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v5);
  if (result[23] < 0) {
    return (char *)sub_216778F24((unsigned char *)a4, *(void **)result, *((void *)result + 1));
  }
  long long v7 = *(_OWORD *)result;
  *(void *)(a4 + 16) = *((void *)result + 2);
  *(_OWORD *)a4 = v7;
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::_TestPlugBase<2>::New@<X0>(void *a1@<X8>)
{
  uint64_t result = operator new(0x18uLL);
  result[2] = 1;
  *((void *)result + 2) = 0;
  *(void *)uint64_t result = &unk_26C74D768;
  *a1 = result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::_TestPlugBase<2>::_TestPlugBase(uint64_t result)
{
  *(_DWORD *)(result + 8) = 1;
  *(void *)(result + 16) = 0;
  *(void *)uint64_t result = &unk_26C74D768;
  return result;
}

{
  *(_DWORD *)(result + 8) = 1;
  *(void *)(result + 16) = 0;
  *(void *)uint64_t result = &unk_26C74D768;
  return result;
}

void pxrInternal__aapl__pxrReserved__::_TestPlugBase<2>::Manufacture(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t TypeByName = pxrInternal__aapl__pxrReserved__::PlugRegistry::FindTypeByName(a1);
  uint64_t v11 = TypeByName;
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)v9);
  if (v9[0] == TypeByName)
  {
    v9[0] = "plug/testPlugBase.cpp";
    v9[1] = "Manufacture";
    void v9[2] = 42;
    double v9[3] = "static TfRefPtr<_TestPlugBase<N>> pxrInternal__aapl__pxrReserved__::_TestPlugBase<2>::Manufacture(const std:"
            ":string &) [M = 2]";
    char v10 = 0;
    if (*(char *)(a1 + 23) >= 0) {
      uint64_t v8 = (const char *)a1;
    }
    else {
      uint64_t v8 = *(const char **)a1;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Failed to find TfType for %s", v8);
  }
  else
  {
    long long v7 = sub_2168E3094((pxrInternal__aapl__pxrReserved__::TfType *)&v11, v5, v6);
    if (v7)
    {
      (*(void (**)(void *))(*(void *)v7 + 16))(v7);
      return;
    }
  }
  *a2 = 0;
}

void *sub_2168E3094(pxrInternal__aapl__pxrReserved__::TfType *a1, uint64_t a2, char *a3)
{
  uint64_t result = (void *)pxrInternal__aapl__pxrReserved__::TfType::_GetFactory(a1, a2, a3);
  if (result)
  {
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::_TestPlugBase<3>::~_TestPlugBase(uint64_t *a1, const void *a2)
{
  sub_216859A88(a1 + 2, a2);

  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase((pxrInternal__aapl__pxrReserved__::TfRefBase *)a1);
}

{
  uint64_t vars8;

  sub_216859A88(a1 + 2, a2);

  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase((pxrInternal__aapl__pxrReserved__::TfRefBase *)a1);
}

{
  void *v3;
  uint64_t vars8;

  sub_216859A88(a1 + 2, a2);
  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase((pxrInternal__aapl__pxrReserved__::TfRefBase *)a1);

  operator delete(v3);
}

char *pxrInternal__aapl__pxrReserved__::_TestPlugBase<3>::GetTypeName@<X0>(uint64_t a1@<X0>, const std::type_info *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1;
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::TfType *)sub_2168E2BFC((pxrInternal__aapl__pxrReserved__::TfType *)&v8, a2, a3);
  uint64_t result = (char *)pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v5);
  if (result[23] < 0) {
    return (char *)sub_216778F24((unsigned char *)a4, *(void **)result, *((void *)result + 1));
  }
  long long v7 = *(_OWORD *)result;
  *(void *)(a4 + 16) = *((void *)result + 2);
  *(_OWORD *)a4 = v7;
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::_TestPlugBase<3>::New@<X0>(void *a1@<X8>)
{
  uint64_t result = operator new(0x18uLL);
  result[2] = 1;
  *((void *)result + 2) = 0;
  *(void *)uint64_t result = &unk_26C74D790;
  *a1 = result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::_TestPlugBase<3>::_TestPlugBase(uint64_t result)
{
  *(_DWORD *)(result + 8) = 1;
  *(void *)(result + 16) = 0;
  *(void *)uint64_t result = &unk_26C74D790;
  return result;
}

{
  *(_DWORD *)(result + 8) = 1;
  *(void *)(result + 16) = 0;
  *(void *)uint64_t result = &unk_26C74D790;
  return result;
}

void pxrInternal__aapl__pxrReserved__::_TestPlugBase<3>::Manufacture(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t TypeByName = pxrInternal__aapl__pxrReserved__::PlugRegistry::FindTypeByName(a1);
  uint64_t v11 = TypeByName;
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)v9);
  if (v9[0] == TypeByName)
  {
    v9[0] = "plug/testPlugBase.cpp";
    v9[1] = "Manufacture";
    void v9[2] = 42;
    double v9[3] = "static TfRefPtr<_TestPlugBase<N>> pxrInternal__aapl__pxrReserved__::_TestPlugBase<3>::Manufacture(const std:"
            ":string &) [M = 3]";
    char v10 = 0;
    if (*(char *)(a1 + 23) >= 0) {
      uint64_t v8 = (const char *)a1;
    }
    else {
      uint64_t v8 = *(const char **)a1;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Failed to find TfType for %s", v8);
  }
  else
  {
    long long v7 = sub_2168E33A8((pxrInternal__aapl__pxrReserved__::TfType *)&v11, v5, v6);
    if (v7)
    {
      (*(void (**)(void *))(*(void *)v7 + 16))(v7);
      return;
    }
  }
  *a2 = 0;
}

void *sub_2168E33A8(pxrInternal__aapl__pxrReserved__::TfType *a1, uint64_t a2, char *a3)
{
  uint64_t result = (void *)pxrInternal__aapl__pxrReserved__::TfType::_GetFactory(a1, a2, a3);
  if (result)
  {
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::_TestPlugBase<4>::~_TestPlugBase(uint64_t *a1, const void *a2)
{
  sub_216859A88(a1 + 2, a2);

  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase((pxrInternal__aapl__pxrReserved__::TfRefBase *)a1);
}

{
  uint64_t vars8;

  sub_216859A88(a1 + 2, a2);

  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase((pxrInternal__aapl__pxrReserved__::TfRefBase *)a1);
}

{
  void *v3;
  uint64_t vars8;

  sub_216859A88(a1 + 2, a2);
  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase((pxrInternal__aapl__pxrReserved__::TfRefBase *)a1);

  operator delete(v3);
}

char *pxrInternal__aapl__pxrReserved__::_TestPlugBase<4>::GetTypeName@<X0>(uint64_t a1@<X0>, const std::type_info *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = a1;
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::TfType *)sub_2168E2BFC((pxrInternal__aapl__pxrReserved__::TfType *)&v8, a2, a3);
  uint64_t result = (char *)pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v5);
  if (result[23] < 0) {
    return (char *)sub_216778F24((unsigned char *)a4, *(void **)result, *((void *)result + 1));
  }
  long long v7 = *(_OWORD *)result;
  *(void *)(a4 + 16) = *((void *)result + 2);
  *(_OWORD *)a4 = v7;
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::_TestPlugBase<4>::New@<X0>(void *a1@<X8>)
{
  uint64_t result = operator new(0x18uLL);
  result[2] = 1;
  *((void *)result + 2) = 0;
  *(void *)uint64_t result = &unk_26C74D7B8;
  *a1 = result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::_TestPlugBase<4>::_TestPlugBase(uint64_t result)
{
  *(_DWORD *)(result + 8) = 1;
  *(void *)(result + 16) = 0;
  *(void *)uint64_t result = &unk_26C74D7B8;
  return result;
}

{
  *(_DWORD *)(result + 8) = 1;
  *(void *)(result + 16) = 0;
  *(void *)uint64_t result = &unk_26C74D7B8;
  return result;
}

void pxrInternal__aapl__pxrReserved__::_TestPlugBase<4>::Manufacture(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t TypeByName = pxrInternal__aapl__pxrReserved__::PlugRegistry::FindTypeByName(a1);
  uint64_t v11 = TypeByName;
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)v9);
  if (v9[0] == TypeByName)
  {
    v9[0] = "plug/testPlugBase.cpp";
    v9[1] = "Manufacture";
    void v9[2] = 42;
    double v9[3] = "static TfRefPtr<_TestPlugBase<N>> pxrInternal__aapl__pxrReserved__::_TestPlugBase<4>::Manufacture(const std:"
            ":string &) [M = 4]";
    char v10 = 0;
    if (*(char *)(a1 + 23) >= 0) {
      uint64_t v8 = (const char *)a1;
    }
    else {
      uint64_t v8 = *(const char **)a1;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Failed to find TfType for %s", v8);
  }
  else
  {
    long long v7 = sub_2168E36BC((pxrInternal__aapl__pxrReserved__::TfType *)&v11, v5, v6);
    if (v7)
    {
      (*(void (**)(void *))(*(void *)v7 + 16))(v7);
      return;
    }
  }
  *a2 = 0;
}

void *sub_2168E36BC(pxrInternal__aapl__pxrReserved__::TfType *a1, uint64_t a2, char *a3)
{
  uint64_t result = (void *)pxrInternal__aapl__pxrReserved__::TfType::_GetFactory(a1, a2, a3);
  if (result)
  {
  }
  return result;
}

uint64_t sub_2168E3758()
{
  uint64_t v0 = sub_2168E3C14();
  sub_2168E37A0(v0);
  uint64_t v1 = sub_2168E3D98();
  sub_2168E3848(v1);
  unint64_t v2 = sub_2168E3F1C();
  sub_2168E38F0(v2);
  unint64_t v3 = sub_2168E40A0();
  sub_2168E3998(v3);
  unint64_t v4 = sub_2168E3A40();

  return sub_2168E3B6C(v4);
}

uint64_t sub_2168E37A0(uint64_t *a1)
{
  unint64_t v2 = operator new(8uLL);
  *unint64_t v2 = &unk_26C74D8C0;
  uint64_t v5 = v2;
  pxrInternal__aapl__pxrReserved__::TfType::SetFactory(a1, (uint64_t *)&v5, v3);
  uint64_t result = (uint64_t)v5;
  uint64_t v5 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_2168E382C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_217324364();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2168E3848(uint64_t *a1)
{
  unint64_t v2 = operator new(8uLL);
  *unint64_t v2 = &unk_26C74D918;
  uint64_t v5 = v2;
  pxrInternal__aapl__pxrReserved__::TfType::SetFactory(a1, (uint64_t *)&v5, v3);
  uint64_t result = (uint64_t)v5;
  uint64_t v5 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_2168E38D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_217324364();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2168E38F0(uint64_t *a1)
{
  unint64_t v2 = operator new(8uLL);
  *unint64_t v2 = &unk_26C74D970;
  uint64_t v5 = v2;
  pxrInternal__aapl__pxrReserved__::TfType::SetFactory(a1, (uint64_t *)&v5, v3);
  uint64_t result = (uint64_t)v5;
  uint64_t v5 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_2168E397C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_217324364();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2168E3998(uint64_t *a1)
{
  unint64_t v2 = operator new(8uLL);
  *unint64_t v2 = &unk_26C74D9C8;
  uint64_t v5 = v2;
  pxrInternal__aapl__pxrReserved__::TfType::SetFactory(a1, (uint64_t *)&v5, v3);
  uint64_t result = (uint64_t)v5;
  uint64_t v5 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_2168E3A24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_217324364();
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2168E3A40()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_2168E4224((unint64_t **)v5);
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74DA10, (uint64_t)__p);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74DA10, (char *)0x18, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_2168E3B20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_2168E3B6C(uint64_t *a1)
{
  unint64_t v2 = operator new(8uLL);
  *unint64_t v2 = &unk_26C74DA38;
  uint64_t v5 = v2;
  pxrInternal__aapl__pxrReserved__::TfType::SetFactory(a1, (uint64_t *)&v5, v3);
  uint64_t result = (uint64_t)v5;
  uint64_t v5 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_2168E3BF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_217324364();
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2168E3C14()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168E3CD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_2168E3D1C(pxrInternal__aapl__pxrReserved__::TfType::FactoryBase *a1)
{
  pxrInternal__aapl__pxrReserved__::TfType::FactoryBase::~FactoryBase(a1);

  operator delete(v1);
}

_DWORD *sub_2168E3D44@<X0>(void *a1@<X8>)
{
  uint64_t result = operator new(0x18uLL);
  result[2] = 1;
  *((void *)result + 2) = 0;
  *(void *)uint64_t result = &unk_26C74D740;
  *a1 = result;
  return result;
}

uint64_t *sub_2168E3D98()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168E3E58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_2168E3EA0(pxrInternal__aapl__pxrReserved__::TfType::FactoryBase *a1)
{
  pxrInternal__aapl__pxrReserved__::TfType::FactoryBase::~FactoryBase(a1);

  operator delete(v1);
}

_DWORD *sub_2168E3EC8@<X0>(void *a1@<X8>)
{
  uint64_t result = operator new(0x18uLL);
  result[2] = 1;
  *((void *)result + 2) = 0;
  *(void *)uint64_t result = &unk_26C74D768;
  *a1 = result;
  return result;
}

uint64_t *sub_2168E3F1C()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168E3FDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_2168E4024(pxrInternal__aapl__pxrReserved__::TfType::FactoryBase *a1)
{
  pxrInternal__aapl__pxrReserved__::TfType::FactoryBase::~FactoryBase(a1);

  operator delete(v1);
}

_DWORD *sub_2168E404C@<X0>(void *a1@<X8>)
{
  uint64_t result = operator new(0x18uLL);
  result[2] = 1;
  *((void *)result + 2) = 0;
  *(void *)uint64_t result = &unk_26C74D790;
  *a1 = result;
  return result;
}

uint64_t *sub_2168E40A0()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168E4160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_2168E41A8(pxrInternal__aapl__pxrReserved__::TfType::FactoryBase *a1)
{
  pxrInternal__aapl__pxrReserved__::TfType::FactoryBase::~FactoryBase(a1);

  operator delete(v1);
}

_DWORD *sub_2168E41D0@<X0>(void *a1@<X8>)
{
  uint64_t result = operator new(0x18uLL);
  result[2] = 1;
  *((void *)result + 2) = 0;
  *(void *)uint64_t result = &unk_26C74D7B8;
  *a1 = result;
  return result;
}

void sub_2168E4224(unint64_t **a1@<X8>)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  unint64_t v3 = (unint64_t *)operator new(8uLL);
  *a1 = v3;
  *v3++ = v2;
  a1[1] = v3;
  a1[2] = v3;
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_2168E4294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2168E42BC(pxrInternal__aapl__pxrReserved__::TfType::FactoryBase *a1)
{
  pxrInternal__aapl__pxrReserved__::TfType::FactoryBase::~FactoryBase(a1);

  operator delete(v1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_2168E42E8@<X0>(void *a1@<X8>)
{
  unint64_t v2 = operator new(0x18uLL);
  v2[2] = 1;
  *((void *)v2 + 2) = 0;
  *(void *)unint64_t v2 = &unk_26C74DA78;
  *a1 = v2;
  char v4 = 0;
  return sub_2168E43CC(&v4);
}

void sub_2168E4350(uint64_t *a1, const void *a2)
{
  sub_216859A88(a1 + 2, a2);

  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase((pxrInternal__aapl__pxrReserved__::TfRefBase *)a1);
}

void sub_2168E438C(uint64_t *a1, const void *a2)
{
  sub_216859A88(a1 + 2, a2);
  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase((pxrInternal__aapl__pxrReserved__::TfRefBase *)a1);

  operator delete(v3);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_2168E43CC(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  return a1;
}

uint64_t *sub_2168E4408()
{
  sub_2168E45EC();

  return sub_2168E4718();
}

void pxrInternal__aapl__pxrReserved__::PlugNotice::Base::~Base(pxrInternal__aapl__pxrReserved__::PlugNotice::Base *this)
{
  pxrInternal__aapl__pxrReserved__::TfNotice::~TfNotice(this);

  operator delete(v1);
}

void *pxrInternal__aapl__pxrReserved__::PlugNotice::DidRegisterPlugins::DidRegisterPlugins(void *a1, void **a2)
{
  *a1 = &unk_26C74DAA0;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  sub_2168E48DC(a1 + 1, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  return a1;
}

void sub_2168E44BC(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::TfNotice::~TfNotice(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PlugNotice::DidRegisterPlugins::~DidRegisterPlugins(pxrInternal__aapl__pxrReserved__::PlugNotice::DidRegisterPlugins *this)
{
  *(void *)this = &unk_26C74DAA0;
  unint64_t v2 = (void **)((char *)this + 8);
  sub_216850BF4(&v2);
  pxrInternal__aapl__pxrReserved__::TfNotice::~TfNotice(this);
}

{
  void **v2;

  *(void *)this = &unk_26C74DAA0;
  unint64_t v2 = (void **)((char *)this + 8);
  sub_216850BF4(&v2);
  pxrInternal__aapl__pxrReserved__::TfNotice::~TfNotice(this);
}

{
  void *v2;
  void **v3;

  *(void *)this = &unk_26C74DAA0;
  unint64_t v3 = (void **)((char *)this + 8);
  sub_216850BF4(&v3);
  pxrInternal__aapl__pxrReserved__::TfNotice::~TfNotice(this);
  operator delete(v2);
}

uint64_t *sub_2168E45EC()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216856744((unint64_t **)v5);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_2168E46CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_2168E4718()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_2168E4848((unint64_t **)v5);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_2168E47F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_2168E4848(unint64_t **a1@<X8>)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  unint64_t v3 = (unint64_t *)operator new(8uLL);
  *a1 = v3;
  *v3++ = v2;
  a1[1] = v3;
  a1[2] = v3;
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_2168E48B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2168E48DC(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_21682BF78(result, a4);
    uint64_t result = sub_2168E4964((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_2168E4944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_216850BF4(&a9);
  _Unwind_Resume(a1);
}

void *sub_2168E4964(uint64_t a1, void *a2, void *a3, void *a4)
{
  char v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *char v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v5 + 8), 1u, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  sub_2168E49F4((uint64_t)v7);
  return v4;
}

uint64_t sub_2168E49F4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_2168E4A2C(a1);
  }
  return a1;
}

uint64_t sub_2168E4A2C(uint64_t result)
{
  unint64_t v2 = *(uint64_t **)(result + 8);
  uint64_t v1 = *(uint64_t **)(result + 16);
  uint64_t v3 = *v1;
  for (uint64_t i = *v2; v3 != i; v3 -= 16)
  {
    uint64_t result = *(void *)(v3 - 8);
    if (result)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(result + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
  }
  return result;
}

void sub_2168E4AB0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v4 = (void *)atomic_load((unint64_t *)&qword_267B8E628);
  if (!v4) {
    char v4 = sub_2168E7B3C(&qword_267B8E628);
  }

  sub_2168E4B18(a1, 0, (long long *)(a1 + 80), v4, a2);
}

void sub_2168E4B18(uint64_t a1@<X0>, int a2@<W1>, long long *a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = (char *)atomic_load((unint64_t *)&qword_267B8E640);
  if (!v10) {
    uint64_t v10 = sub_2168E8DD8(&qword_267B8E640);
  }
  std::mutex::lock((std::mutex *)v10);
  uint64_t v11 = (uint64_t *)atomic_load((unint64_t *)&qword_267B8E650);
  if (!v11) {
    uint64_t v11 = (uint64_t *)sub_2168E8F84(&qword_267B8E650);
  }
  *(void *)&long long v46 = a1 + 32;
  uint64_t v12 = sub_2168E7C9C(v11, (unsigned __int8 *)(a1 + 32), (uint64_t)&unk_2174BFD90, (long long **)&v46);
  uint64_t v13 = v12;
  if (!v14)
  {
    uint64_t v29 = *(unint64_t **)(v12 + 32);
    if (!v29)
    {
      *(void *)&long long v46 = "plug/plugin.cpp";
      *((void *)&v46 + 1) = "_NewPlugin";
      uint64_t v47 = 106;
      uint64_t v48 = "static pair<PlugPluginPtr, BOOL> pxrInternal__aapl__pxrReserved__::PlugPlugin::_NewPlugin(const Plug_Registr"
            "ationMetadata &, _Type, const std::string &, PluginMap *) [PluginMap = pxrInternal__aapl__pxrReserved__::TfH"
            "ashMap<std::string, pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::PlugPlugin"
            ">, pxrInternal__aapl__pxrReserved__::TfHash>]";
      char v49 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v46, "it->second", 0);
      uint64_t v29 = *(unint64_t **)(v13 + 32);
    }
    sub_2168E9050((unint64_t **)&v46, v29);
    *(_OWORD *)a5 = v46;
    goto LABEL_31;
  }
  char v15 = sub_2168602D4(a4, (unsigned __int8 *)(a1 + 8));
  uint64_t v16 = v15;
  if (v15)
  {
    uint64_t v17 = sub_2168E79D8((void *)v15 + 5);
    if (!(v18 & 1 | (unint64_t)v17))
    {
      *(void *)&long long v46 = "plug/plugin.cpp";
      *((void *)&v46 + 1) = "_NewPlugin";
      uint64_t v47 = 114;
      uint64_t v48 = "static pair<PlugPluginPtr, BOOL> pxrInternal__aapl__pxrReserved__::PlugPlugin::_NewPlugin(const Plug_Registr"
            "ationMetadata &, _Type, const std::string &, PluginMap *) [PluginMap = pxrInternal__aapl__pxrReserved__::TfH"
            "ashMap<std::string, pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::PlugPlugin"
            ">, pxrInternal__aapl__pxrReserved__::TfHash>]";
      char v49 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v46, "it->second", 0);
    }
    if (sub_2168DD040(1))
    {
      char v19 = "<invalid enum value>";
      if (a2 == 2) {
        char v19 = "resource";
      }
      if (a2) {
        uint64_t v20 = v19;
      }
      else {
        uint64_t v20 = "shared library";
      }
      if (*(char *)(a1 + 31) >= 0) {
        uint64_t v21 = a1 + 8;
      }
      else {
        uint64_t v21 = *(void *)(a1 + 8);
      }
      uint64_t v22 = sub_2168E5D78((uint64_t *)v16 + 5);
      uint64_t v25 = (void *)(v22 + 32);
      if (*(char *)(v22 + 55) < 0) {
        uint64_t v25 = (void *)*v25;
      }
      if (*((char *)a3 + 23) >= 0) {
        std::string::size_type v26 = (uint64_t *)a3;
      }
      else {
        std::string::size_type v26 = *(uint64_t **)a3;
      }
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Already registered %s plugin '%s' at %s - not registering '%s'.\n\n", v23, v24, v20, v21, v25, v26);
    }
    unint64_t v27 = atomic_load((unint64_t *)&qword_267B8E650);
    if (!v27) {
      unint64_t v27 = sub_2168E8F84(&qword_267B8E650);
    }
    sub_2168E870C(v27, v13);
    uint64_t v28 = *((void *)v16 + 6);
    *(void *)a5 = *((void *)v16 + 5);
    *(void *)(a5 + 8) = v28;
    if (v28) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v28 + 8), 1u, memory_order_relaxed);
    }
LABEL_31:
    *(unsigned char *)(a5 + 16) = 0;
    goto LABEL_32;
  }
  if (sub_2168DD040(1))
  {
    std::string::size_type v32 = "<invalid enum value>";
    if (a2 == 2) {
      std::string::size_type v32 = "resource";
    }
    if (!a2) {
      std::string::size_type v32 = "shared library";
    }
    if (*(char *)(a1 + 31) >= 0) {
      uint64_t v33 = a1 + 8;
    }
    else {
      uint64_t v33 = *(void *)(a1 + 8);
    }
    if (*((char *)a3 + 23) >= 0) {
      uint64_t v34 = (uint64_t *)a3;
    }
    else {
      uint64_t v34 = *(uint64_t **)a3;
    }
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Registering %s plugin '%s' at '%s'.\n\n", v30, v31, v32, v33, v34);
  }
  uint64_t v35 = (unint64_t *)operator new(0x78uLL);
  sub_2168E5050((uint64_t)v35, a3, (long long *)(a1 + 8), (long long *)(a1 + 104), (const void ***)(a1 + 56), a2);
  if (sub_2168DD040(1))
  {
    uint64_t v36 = *(unsigned __int8 *)(a1 + 55);
    if ((v36 & 0x80u) != 0) {
      uint64_t v36 = *(void *)(a1 + 40);
    }
    if (v36 && (pxrInternal__aapl__pxrReserved__::TfIsFile((const char *)a3, 1) & 1) == 0 && sub_2168DD040(1))
    {
      if (*(char *)(a1 + 31) >= 0) {
        uint64_t v39 = a1 + 8;
      }
      else {
        uint64_t v39 = *(void *)(a1 + 8);
      }
      if (*((char *)a3 + 23) >= 0) {
        char v40 = (uint64_t *)a3;
      }
      else {
        char v40 = *(uint64_t **)a3;
      }
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Unable to read library plugin '%s' at '%s'.\n\n", v37, v38, v39, v40);
    }
  }
  sub_2168E9050((unint64_t **)&v46, v35);
  sub_2168E8888((pxrInternal__aapl__pxrReserved__::PlugPlugin **)(v13 + 32), (pxrInternal__aapl__pxrReserved__::PlugPlugin *)v35);
  unint64_t v50 = (long long *)(a1 + 8);
  uint64_t v41 = sub_2168E88C8((uint64_t)a4, (unsigned __int8 *)(a1 + 8), (uint64_t)&unk_2174BFD90, &v50);
  uint64_t v42 = (atomic_uint *)*((void *)v41 + 6);
  uint64_t v43 = *((void *)&v46 + 1);
  *((void *)v41 + 5) = v46;
  *((void *)v41 + 6) = v43;
  if (v43) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v43 + 8), 1u, memory_order_relaxed);
  }
  if (v42 && atomic_fetch_add_explicit(v42 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v42 + 8))(v42);
  }
  uint64_t v44 = *((void *)&v46 + 1);
  *(void *)a5 = v46;
  *(void *)(a5 + 8) = v44;
  if (v44)
  {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v44 + 8), 1u, memory_order_relaxed);
    uint64_t v45 = (atomic_uint *)*((void *)&v46 + 1);
    *(unsigned char *)(a5 + 16) = 1;
    if (v45 && atomic_fetch_add_explicit(v45 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v45 + 8))(v45);
    }
  }
  else
  {
    *(unsigned char *)(a5 + 16) = 1;
  }
LABEL_32:
  std::mutex::unlock((std::mutex *)v10);
}

void sub_2168E4F7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  std::mutex::unlock(v14);
  _Unwind_Resume(a1);
}

void sub_2168E4FE8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v4 = (void *)atomic_load((unint64_t *)&qword_267B8E630);
  if (!v4) {
    char v4 = sub_2168E7B3C(&qword_267B8E630);
  }

  sub_2168E4B18(a1, 2, (long long *)(a1 + 32), v4, a2);
}

uint64_t sub_2168E5050(uint64_t a1, long long *a2, long long *a3, long long *a4, const void ***a5, int a6)
{
  *(void *)a1 = 0;
  if (*((char *)a3 + 23) < 0)
  {
    sub_216778F24((unsigned char *)(a1 + 8), *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v11 = *a3;
    *(void *)(a1 + 24) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 8) = v11;
  }
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24((unsigned char *)(a1 + 32), *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v12 = *a2;
    *(void *)(a1 + sub_2168D9AA8((uint64_t)this + 48) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 32) = v12;
  }
  if (*((char *)a4 + 23) < 0)
  {
    sub_216778F24((unsigned char *)(a1 + 56), *(void **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v13 = *a4;
    *(void *)(a1 + 72) = *((void *)a4 + 2);
    *(_OWORD *)(a1 + 56) = v13;
  }
  sub_2168BB7AC((uint64_t *)(a1 + 80), a5);
  *(void *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 112) = a6 == 2;
  *(_DWORD *)(a1 + 116) = a6;
  return a1;
}

void sub_2168E5144(_Unwind_Exception *a1, const void *a2)
{
  if (*(char *)(v2 + 55) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v2 + 31) < 0) {
    operator delete(*v3);
  }
  sub_216859A88((uint64_t *)v2, a2);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PlugPlugin::~PlugPlugin(pxrInternal__aapl__pxrReserved__::PlugPlugin *this)
{
  sub_216812ED4((uint64_t)this + 80, *((void **)this + 11));
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
  if (*((char *)this + 55) < 0) {
    operator delete(*((void **)this + 4));
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }

  sub_216859A88((uint64_t *)this, v2);
}

uint64_t *pxrInternal__aapl__pxrReserved__::PlugPlugin::GetMetadata@<X0>(const void ***this@<X0>, uint64_t *a2@<X8>)
{
  return sub_2168BB7AC(a2, this + 10);
}

void pxrInternal__aapl__pxrReserved__::PlugPlugin::GetDependencies(pxrInternal__aapl__pxrReserved__::PlugPlugin *this@<X0>, uint64_t *a2@<X8>)
{
  char v4 = (char *)this + 80;
  sub_216779094(__p, "PluginDependencies");
  uint64_t v5 = (unint64_t **)sub_21678C2D8((uint64_t)v4, (const void **)__p);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if ((unint64_t **)((char *)this + 88) == v5
    || !pxrInternal__aapl__pxrReserved__::JsValue::IsObject((pxrInternal__aapl__pxrReserved__::JsValue *)(v5 + 7)))
  {
    a2[2] = 0;
    a2[1] = 0;
    *a2 = (uint64_t)(a2 + 1);
  }
  else
  {
    unint64_t JsObject = (const void ***)pxrInternal__aapl__pxrReserved__::JsValue::GetJsObject(v5 + 7);
    sub_2168BB7AC(a2, JsObject);
  }
}

void sub_2168E52CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_2168E52E8(uint64_t a1, const char *a2, char *a3)
{
  char v4 = (std::string *)(a1 + 8);
  std::string::size_type v5 = a1 + 8;
  if (*(char *)(a1 + 31) < 0) {
    std::string::size_type v5 = v4->__r_.__value_.__r.__words[0];
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Load %s", a2, a3, v5);
  sub_2168E8C88((uint64_t)&v32, "PlugPlugin::_Load", (char *)__p);
  if (v30 < 0) {
    operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::TfGetBaseName(v4, &v31);
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v8 = &v31;
  }
  else {
    char v8 = (std::string *)v31.__r_.__value_.__r.__words[0];
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Loading plugin '%s'", v6, v7, v8);
  uint64_t v21 = "plug/plugin.cpp";
  uint64_t v22 = "_Load";
  uint64_t v23 = 228;
  int v24 = "BOOL pxrInternal__aapl__pxrReserved__::PlugPlugin::_Load()";
  char v25 = 0;
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::TfScopeDescription(__p, &v26, &v21);
  if (SHIBYTE(v28) < 0) {
    operator delete(v26);
  }
  if (sub_2168DD040(0))
  {
    long long v11 = v4;
    if (*(char *)(a1 + 31) < 0) {
      long long v11 = (std::string *)v4->__r_.__value_.__r.__words[0];
    }
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Loading plugin '%s'.\n", v9, v10, v11);
  }
  if (*(_DWORD *)(a1 + 116) == 2) {
    goto LABEL_15;
  }
  long long v13 = (const char *)(a1 + 32);
  if (*(char *)(a1 + 55) < 0)
  {
    if (*(void *)(a1 + 40))
    {
      std::string::size_type v26 = 0;
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      char v14 = *(char **)v13;
      goto LABEL_21;
    }
LABEL_38:
    if (sub_2168DD040(0))
    {
      if (*(char *)(a1 + 31) < 0) {
        char v4 = (std::string *)v4->__r_.__value_.__r.__words[0];
      }
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"No path to library for '%s'.\n", v19, v20, v4);
    }
LABEL_15:
    BOOL v12 = 1;
    goto LABEL_33;
  }
  if (!*(unsigned char *)(a1 + 55)) {
    goto LABEL_38;
  }
  std::string::size_type v26 = 0;
  uint64_t v27 = 0;
  char v14 = (char *)(a1 + 32);
  uint64_t v28 = 0;
LABEL_21:
  sub_216779094(&v21, v14);
  char v15 = pxrInternal__aapl__pxrReserved__::TfDlopen((char *)&v21, 2, &v26);
  *(void *)(a1 + 104) = v15;
  if (SHIBYTE(v23) < 0)
  {
    operator delete(v21);
    char v15 = *(void **)(a1 + 104);
  }
  BOOL v12 = v15 != 0;
  if (!v15)
  {
    uint64_t v21 = "plug/plugin.cpp";
    uint64_t v22 = "_Load";
    uint64_t v23 = 261;
    int v24 = "BOOL pxrInternal__aapl__pxrReserved__::PlugPlugin::_Load()";
    char v25 = 0;
    if (*(char *)(a1 + 31) < 0) {
      char v4 = (std::string *)v4->__r_.__value_.__r.__words[0];
    }
    uint64_t v16 = (const char *)&v26;
    if (v28 < 0) {
      uint64_t v16 = (const char *)v26;
    }
    if (*(char *)(a1 + 55) < 0) {
      long long v13 = *(const char **)v13;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v21, 1, (pxrInternal__aapl__pxrReserved__ *)"Failed to load plugin '%s': %s in '%s'", (const char *)v4, v16, v13);
  }
  if (SHIBYTE(v28) < 0) {
    operator delete(v26);
  }
LABEL_33:
  atomic_store(v12, (unsigned __int8 *)(a1 + 112));
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::~TfScopeDescription((pxrInternal__aapl__pxrReserved__::TfScopeDescription *)__p);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  while (v33--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v32);
  return v12;
}

void sub_2168E5578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::~TfScopeDescription((pxrInternal__aapl__pxrReserved__::TfScopeDescription *)&a26);
  if (*(char *)(v26 - 81) < 0) {
    operator delete(*(void **)(v26 - 104));
  }
  sub_21684E6B8(v26 - 80);
  _Unwind_Resume(a1);
}

void sub_2168E560C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x2168E5604);
}

BOOL pxrInternal__aapl__pxrReserved__::PlugPlugin::IsResource(pxrInternal__aapl__pxrReserved__::PlugPlugin *this)
{
  return *((_DWORD *)this + 29) == 2;
}

uint64_t sub_2168E5638(uint64_t a1, void *a2)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(a1 + 112));
  if (v2) {
    return 1;
  }
  std::string::size_type v5 = (char *)(a1 + 8);
  if (sub_2168512B4(a2, (unsigned __int8 *)(a1 + 8)))
  {
    *(void *)&long long __dst = "plug/plugin.cpp";
    *((void *)&__dst + 1) = "_LoadWithDependents";
    uint64_t v58 = 284;
    uint64_t v59 = "BOOL pxrInternal__aapl__pxrReserved__::PlugPlugin::_LoadWithDependents(_SeenPlugins *)";
    char v60 = 0;
    if (*(char *)(a1 + 31) < 0) {
      std::string::size_type v5 = *(char **)v5;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 1, (pxrInternal__aapl__pxrReserved__ *)"Load failed because of cyclic dependency for '%s'", v5);
    return 0;
  }
  sub_2168514A0((uint64_t)a2, (unsigned __int8 *)v5, (uint64_t)v5);
  pxrInternal__aapl__pxrReserved__::PlugPlugin::GetDependencies((pxrInternal__aapl__pxrReserved__::PlugPlugin *)a1, &v55);
  uint64_t v53 = v55;
  uint64_t v54 = &v56;
LABEL_8:
  if ((void **)v53 != v54)
  {
    uint64_t v9 = sub_2168E5B8C(&v53, (uint64_t)v7, v8);
    uint64_t v12 = *v9;
    if (*(char *)(*v9 + 55) < 0)
    {
      sub_216778F24(__p, *(void **)(v12 + 32), *(void *)(v12 + 40));
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)(v12 + 32);
      uint64_t v52 = *(void *)(v12 + 48);
    }
    uint64_t v13 = *(void *)pxrInternal__aapl__pxrReserved__::TfType::FindByName((uint64_t)__p, v10, v11);
    pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&__dst);
    if ((void)__dst == v13)
    {
      *(void *)&long long __dst = "plug/plugin.cpp";
      *((void *)&__dst + 1) = "_LoadWithDependents";
      uint64_t v58 = 298;
      uint64_t v59 = "BOOL pxrInternal__aapl__pxrReserved__::PlugPlugin::_LoadWithDependents(_SeenPlugins *)";
      char v60 = 0;
      uint64_t v45 = __p;
      if (v52 < 0) {
        uint64_t v45 = (void **)__p[0];
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 1, (pxrInternal__aapl__pxrReserved__ *)"Load failed: unknown base class '%s'", (const char *)v45);
      goto LABEL_55;
    }
    uint64_t v16 = (pxrInternal__aapl__pxrReserved__::JsValue *)(*sub_2168E5B8C(&v53, v14, v15) + 56);
    if (!pxrInternal__aapl__pxrReserved__::JsValue::IsArray(v16))
    {
LABEL_54:
      *(void *)&long long __dst = "plug/plugin.cpp";
      *((void *)&__dst + 1) = "_LoadWithDependents";
      uint64_t v58 = 305;
      uint64_t v59 = "BOOL pxrInternal__aapl__pxrReserved__::PlugPlugin::_LoadWithDependents(_SeenPlugins *)";
      char v60 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 1, (pxrInternal__aapl__pxrReserved__ *)"Load failed: dependency list has wrong type");
LABEL_55:
      if (SHIBYTE(v52) < 0) {
        operator delete(__p[0]);
      }
LABEL_57:
      BOOL v6 = 0;
      goto LABEL_58;
    }
    unint64_t JsArray = pxrInternal__aapl__pxrReserved__::JsValue::GetJsArray((unint64_t **)v16);
    uint64_t v21 = *(pxrInternal__aapl__pxrReserved__::JsValue **)JsArray;
    uint64_t v20 = *(pxrInternal__aapl__pxrReserved__::JsValue **)(JsArray + 8);
    while (v21 != v20)
    {
      if (!pxrInternal__aapl__pxrReserved__::JsValue::IsString(v21)) {
        goto LABEL_54;
      }
      uint64_t v21 = (pxrInternal__aapl__pxrReserved__::JsValue *)((char *)v21 + 16);
    }
    uint64_t v22 = sub_2168E5B8C(&v53, v18, v19);
    uint64_t v23 = (pxrInternal__aapl__pxrReserved__::JsValue **)pxrInternal__aapl__pxrReserved__::JsValue::GetJsArray((unint64_t **)(*v22 + 56));
    sub_216782DE0(v50, (v23[1] - *v23) >> 4);
    uint64_t v27 = *v23;
    uint64_t v26 = v23[1];
    if (*v23 != v26)
    {
      uint64_t v28 = *(void *)&v50[0];
      do
      {
        unint64_t String = pxrInternal__aapl__pxrReserved__::JsValue::GetString(v27);
        if (*(char *)(String + 23) < 0)
        {
          sub_216778F24(&__dst, *(void **)String, *(void *)(String + 8));
        }
        else
        {
          long long v30 = *(_OWORD *)String;
          uint64_t v58 = *(void *)(String + 16);
          long long __dst = v30;
        }
        if (*(char *)(v28 + 23) < 0) {
          operator delete(*(void **)v28);
        }
        long long v31 = __dst;
        *(void *)(v28 + 16) = v58;
        *(_OWORD *)uint64_t v28 = v31;
        v28 += 24;
        uint64_t v27 = (pxrInternal__aapl__pxrReserved__::JsValue *)((char *)v27 + 16);
      }
      while (v27 != v26);
    }
    for (long long i = v50[0]; ; sub_2168E5E20(&i))
    {
      long long v32 = i;
      if ((void)i == *((void *)&i + 1))
      {
LABEL_50:
        *(void *)&long long __dst = v50;
        sub_216782F20((void ***)&__dst);
        if (SHIBYTE(v52) < 0) {
          operator delete(__p[0]);
        }
        if ((void)v32 != *((void *)&v32 + 1)) {
          goto LABEL_57;
        }
        sub_2168E5EA0(&v53);
        goto LABEL_8;
      }
      uint64_t v33 = sub_2168E5C08((uint64_t *)&i, v24, v25);
      uint64_t v48 = *(void *)pxrInternal__aapl__pxrReserved__::TfType::FindByName(v33, v34, v35);
      pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v46);
      if (v48 == v46)
      {
        *(void *)&long long __dst = "plug/plugin.cpp";
        *((void *)&__dst + 1) = "_LoadWithDependents";
        uint64_t v58 = 317;
        uint64_t v59 = "BOOL pxrInternal__aapl__pxrReserved__::PlugPlugin::_LoadWithDependents(_SeenPlugins *)";
        char v60 = 0;
        if (*(char *)(v33 + 23) >= 0) {
          uint64_t v43 = (const char *)v33;
        }
        else {
          uint64_t v43 = *(const char **)v33;
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 1, (pxrInternal__aapl__pxrReserved__ *)"Load failed: unknown dependent class '%s'", v43);
        goto LABEL_50;
      }
      sub_2168E5C88(&v48, &v46);
      uint64_t v36 = sub_2168E79D8(&v46);
      if (!(v37 & 1 | (unint64_t)v36)) {
        break;
      }
      uint64_t v38 = sub_2168E5D78(&v46);
      if ((sub_2168E5638(v38, a2) & 1) == 0)
      {
        *(void *)&long long __dst = "plug/plugin.cpp";
        *((void *)&__dst + 1) = "_LoadWithDependents";
        uint64_t v58 = 329;
        uint64_t v59 = "BOOL pxrInternal__aapl__pxrReserved__::PlugPlugin::_LoadWithDependents(_SeenPlugins *)";
        char v60 = 0;
        if (*(char *)(v33 + 23) >= 0) {
          uint64_t v41 = (const char *)v33;
        }
        else {
          uint64_t v41 = *(const char **)v33;
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 1, (pxrInternal__aapl__pxrReserved__ *)"Load failed: unable to load dependent plugin '%s'", v41);
LABEL_40:
        int v39 = 0;
        goto LABEL_41;
      }
      int v39 = 1;
LABEL_41:
      uint64_t v42 = v47;
      if (v47 && atomic_fetch_add_explicit((atomic_uint *volatile)(v47 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t))(*(void *)v42 + 8))(v42);
      }
      if (!v39) {
        goto LABEL_50;
      }
    }
    *(void *)&long long __dst = "plug/plugin.cpp";
    *((void *)&__dst + 1) = "_LoadWithDependents";
    uint64_t v58 = 324;
    uint64_t v59 = "BOOL pxrInternal__aapl__pxrReserved__::PlugPlugin::_LoadWithDependents(_SeenPlugins *)";
    char v60 = 0;
    if (*(char *)(v33 + 23) >= 0) {
      char v40 = (const char *)v33;
    }
    else {
      char v40 = *(const char **)v33;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 1, (pxrInternal__aapl__pxrReserved__ *)"Load failed: unknown dependent plugin '%s'", v40);
    goto LABEL_40;
  }
  BOOL v6 = sub_2168E52E8(a1, v7, v8);
LABEL_58:
  sub_216812ED4((uint64_t)&v55, v56);
  return v6;
}

void sub_2168E5AB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,char a27,void *a28,uint64_t a29,uint64_t a30)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  sub_216812ED4((uint64_t)&a27, a28);
  _Unwind_Resume(a1);
}

void *sub_2168E5B8C(void *result, uint64_t a2, char *a3)
{
  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<std::map<std::string, pxrInternal__aapl__pxrReserved_"
            "_::JsValue>>::operator->() [T = std::map<std::string, pxrInternal__aapl__pxrReserved__::JsValue>, Reverse = false]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

uint64_t sub_2168E5C08(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    void v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<std::string>>::operator*() [T = con"
            "st std::vector<std::string>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_2168E5C80()
{
}

void sub_2168E5C88(void *a1@<X0>, void *a2@<X8>)
{
  sub_2168EA2EC();
  char v4 = (char *)atomic_load((unint64_t *)&qword_267B8E658);
  if (!v4) {
    char v4 = sub_2168E8DD8(&qword_267B8E658);
  }
  std::mutex::lock((std::mutex *)v4);
  int v5 = (void *)atomic_load((unint64_t *)&qword_267B8E660);
  if (!v5) {
    int v5 = sub_2168E9134(&qword_267B8E660);
  }
  char v6 = sub_2168503EC(v5, a1);
  if (!atomic_load((unint64_t *)&qword_267B8E660)) {
    sub_2168E9134(&qword_267B8E660);
  }
  if (v6)
  {
    uint64_t v8 = v6[4];
    *a2 = v6[3];
    a2[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v8 + 8), 1u, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }

  std::mutex::unlock((std::mutex *)v4);
}

void sub_2168E5D60(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2168E5D78(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  unsigned __int8 v2 = a1 + 1;
  if (!v3
    || ((v4 = *(unsigned __int8 *)(sub_216850B68(v2) + 14), result = *a1, v4) ? (BOOL v6 = result == 0) : (BOOL v6 = 1), v6))
  {
    int v7 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/weakPtrFacade.h", 47);
    v8[0] = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/weakPtrFacade.h", (uint64_t)v7, 0x2Fu);
    v8[1] = "operator->";
    float64x2_t v8[2] = 216;
    void v8[3] = "DataType *pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr, pxr"
            "Internal__aapl__pxrReserved__::PlugPlugin>::operator->() const [PtrTemplate = pxrInternal__aapl__pxrReserved"
            "__::TfWeakPtr, Type = pxrInternal__aapl__pxrReserved__::PlugPlugin]";
    char v9 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError((uint64_t)v8, (pxrInternal__aapl__pxrReserved__ *)(0x8000000217456509 & 0x7FFFFFFFFFFFFFFFLL));
  }
  return result;
}

void *sub_2168E5E20(void *a1)
{
  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<std::string>>::operat"
            "or++() [T = const std::vector<std::string>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 24;
  }
  return a1;
}

void *sub_2168E5EA0(void *a1)
{
  unsigned __int8 v2 = (void *)*a1;
  if (*a1 == a1[1])
  {
    v7[0] = "tf/iterator.h";
    v7[1] = "operator++";
    v7[2] = 250;
    void v7[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::map<std::string, pxrInternal__aapl"
            "__pxrReserved__::JsValue>>::operator++() [T = std::map<std::string, pxrInternal__aapl__pxrReserved__::JsValu"
            "e>, Reverse = false]";
    char v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    uint64_t v3 = (void *)v2[1];
    if (v3)
    {
      do
      {
        char v4 = v3;
        uint64_t v3 = (void *)*v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        char v4 = (void *)v2[2];
        BOOL v5 = *v4 == (void)v2;
        unsigned __int8 v2 = v4;
      }
      while (!v5);
    }
    *a1 = v4;
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::PlugPlugin::Load(pxrInternal__aapl__pxrReserved__::PlugPlugin *this)
{
  unsigned __int8 v2 = (std::recursive_mutex *)atomic_load((unint64_t *)&qword_267B8E638);
  if (!v2) {
    unsigned __int8 v2 = sub_2168E8D4C(&qword_267B8E638);
  }
  std::recursive_mutex::lock(v2);
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)this + 112);
  BOOL v5 = (v4 & 1) == 0 && !pxrInternal__aapl__pxrReserved__::ArchIsMainThread(v3);
  memset(v11, 0, sizeof(v11));
  int v12 = 1065353216;
  uint64_t v6 = sub_2168E5638((uint64_t)this, v11);
  sub_216850298((uint64_t)v11);
  std::recursive_mutex::unlock(v2);
  if (v5 && sub_2168DD040(2))
  {
    char v9 = (void *)((char *)this + 8);
    if (*((char *)this + 31) < 0) {
      char v9 = (void *)*v9;
    }
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Loaded plugin '%s' in a secondary thread.\n", v7, v8, v9);
  }
  return v6;
}

void sub_2168E6024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  std::recursive_mutex::unlock(v11);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PlugPlugin::IsLoaded(pxrInternal__aapl__pxrReserved__::PlugPlugin *this)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)this + 112);
  return v1 & 1;
}

double pxrInternal__aapl__pxrReserved__::PlugPlugin::MakeResourcePath@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_216778F24((unsigned char *)a3, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    long long v6 = *(_OWORD *)a2;
    *(_OWORD *)a3 = *(_OWORD *)a2;
    *(void *)(a3 + 16) = *(void *)(a2 + 16);
  }
  if (*(char *)(a3 + 23) < 0)
  {
    if (!*(void *)(a3 + 8)) {
      return *(double *)&v6;
    }
    int v7 = *(unsigned char **)a3;
  }
  else
  {
    int v7 = (unsigned char *)a3;
    if (!*(unsigned char *)(a3 + 23)) {
      return *(double *)&v6;
    }
  }
  if (*v7 != 47)
  {
    pxrInternal__aapl__pxrReserved__::TfStringCatPaths((const void **)(a1 + 56), a2, &v9);
    if (*(char *)(a3 + 23) < 0) {
      operator delete(*(void **)a3);
    }
    *(void *)&long long v6 = v9;
    *(_OWORD *)a3 = v9;
    *(void *)(a3 + 16) = v10;
  }
  return *(double *)&v6;
}

void sub_2168E6114(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::PlugPlugin::FindPluginResource(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (a3 && !pxrInternal__aapl__pxrReserved__::TfPathExists((const char *)a4, 0))
  {
    if (*(char *)(a4 + 23) < 0)
    {
      **(unsigned char **)a4 = 0;
      *(void *)(a4 + 8) = 0;
    }
    else
    {
      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + 23) = 0;
    }
  }
}

void sub_2168E618C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_2168E61A8(unsigned __int8 *a1@<X0>, void *a2@<X8>)
{
  sub_2168EA2EC();
  unsigned __int8 v4 = (char *)atomic_load((unint64_t *)&qword_267B8E640);
  if (!v4) {
    unsigned __int8 v4 = sub_2168E8DD8(&qword_267B8E640);
  }
  std::mutex::lock((std::mutex *)v4);
  BOOL v5 = (void *)atomic_load((unint64_t *)&qword_267B8E628);
  if (!v5) {
    BOOL v5 = sub_2168E7B3C(&qword_267B8E628);
  }
  long long v6 = sub_2168602D4(v5, a1);
  if (!atomic_load((unint64_t *)&qword_267B8E628)) {
    sub_2168E7B3C(&qword_267B8E628);
  }
  if (v6) {
    goto LABEL_13;
  }
  char v8 = (void *)atomic_load((unint64_t *)&qword_267B8E648);
  if (!v8) {
    char v8 = sub_2168E7B3C(&qword_267B8E648);
  }
  long long v6 = sub_2168602D4(v8, a1);
  if (!atomic_load((unint64_t *)&qword_267B8E648)) {
    sub_2168E7B3C(&qword_267B8E648);
  }
  if (v6)
  {
LABEL_13:
    uint64_t v11 = *((void *)v6 + 5);
    uint64_t v10 = *((void *)v6 + 6);
  }
  else
  {
    int v12 = (void *)atomic_load((unint64_t *)&qword_267B8E630);
    if (!v12) {
      int v12 = sub_2168E7B3C(&qword_267B8E630);
    }
    uint64_t v13 = sub_2168602D4(v12, a1);
    if (!atomic_load((unint64_t *)&qword_267B8E630)) {
      sub_2168E7B3C(&qword_267B8E630);
    }
    if (!v13)
    {
      *a2 = 0;
      a2[1] = 0;
      goto LABEL_16;
    }
    uint64_t v11 = *((void *)v13 + 5);
    uint64_t v10 = *((void *)v13 + 6);
  }
  *a2 = v11;
  a2[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 + 8), 1u, memory_order_relaxed);
  }
LABEL_16:

  std::mutex::unlock((std::mutex *)v4);
}

void sub_2168E6320(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PlugRegistry::GetAllPlugins(uint64_t *a1@<X8>)
{
  sub_2168EA2EC();
  uint64_t v3 = (char *)atomic_load((unint64_t *)&qword_267B8E640);
  if (!v3) {
    uint64_t v3 = sub_2168E8DD8(&qword_267B8E640);
  }
  std::mutex::lock((std::mutex *)v3);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  unint64_t v4 = atomic_load((unint64_t *)&qword_267B8E650);
  if (!v4) {
    unint64_t v4 = sub_2168E8F84(&qword_267B8E650);
  }
  sub_2168E65F0(a1, *(void *)(v4 + 48));
  unint64_t v7 = atomic_load((unint64_t *)&qword_267B8E650);
  if (!v7) {
    unint64_t v7 = sub_2168E8F84(&qword_267B8E650);
  }
  uint64_t v9 = *(void *)(v7 + 32);
  uint64_t v8 = *(void *)(v7 + 40);
  uint64_t v10 = 0;
  if (v8)
  {
    uint64_t v11 = (__int16 *)(v9 + 4);
    while (1)
    {
      int v12 = *v11;
      v11 += 20;
      if (v12 != -1) {
        break;
      }
      if (v8 == ++v10)
      {
        uint64_t v10 = *(void *)(v7 + 40);
        break;
      }
    }
  }
  uint64_t v26 = v9 + 40 * v10;
  uint64_t v27 = v9 + 40 * v8;
  while (v26 != v27)
  {
    uint64_t v13 = sub_2168E6684(&v26, v5, v6);
    sub_2168E9050((unint64_t **)&v25, *(unint64_t **)(*v13 + 32));
    char v15 = (_OWORD *)a1[1];
    unint64_t v14 = a1[2];
    if ((unint64_t)v15 >= v14)
    {
      uint64_t v16 = ((uint64_t)v15 - *a1) >> 4;
      unint64_t v17 = v16 + 1;
      if ((unint64_t)(v16 + 1) >> 60) {
        sub_21677CB10();
      }
      uint64_t v18 = v14 - *a1;
      if (v18 >> 3 > v17) {
        unint64_t v17 = v18 >> 3;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v19 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v17;
      }
      v28[4] = a1 + 2;
      uint64_t v20 = (char *)sub_216787EE0((uint64_t)(a1 + 2), v19);
      uint64_t v21 = &v20[16 * v16];
      v28[0] = v20;
      v28[1] = v21;
      v28[3] = &v20[16 * v22];
      *(_OWORD *)uint64_t v21 = v25;
      long long v25 = 0uLL;
      v28[2] = v21 + 16;
      sub_2168E8E40(a1, v28);
      uint64_t v23 = a1[1];
      sub_216852520((uint64_t)v28);
      uint64_t v24 = (atomic_uint *)*((void *)&v25 + 1);
      a1[1] = v23;
      if (v24)
      {
        if (atomic_fetch_add_explicit(v24 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v24 + 8))(v24);
        }
      }
    }
    else
    {
      *char v15 = v25;
      a1[1] = (uint64_t)(v15 + 1);
    }
    sub_2168E6700(&v26);
  }
  std::mutex::unlock((std::mutex *)v3);
}

void sub_2168E6568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216850BF4((void ***)va);
  std::mutex::unlock(v4);
  _Unwind_Resume(a1);
}

uint64_t sub_2168E65F0(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60) {
      sub_21677CB10();
    }
    uint64_t v5 = a1[1] - *a1;
    void v7[4] = result;
    v7[0] = sub_216787EE0(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    void v7[3] = v7[0] + 16 * v6;
    sub_2168E8E40(a1, v7);
    return sub_216852520((uint64_t)v7);
  }
  return result;
}

void sub_2168E6670(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216852520((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_2168E6684(void *result, uint64_t a2, char *a3)
{
  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::pxr_tsl::robin_map<"
            "std::string, std::unique_ptr<pxrInternal__aapl__pxrReserved__::PlugPlugin>, pxrInternal__aapl__pxrReserved__"
            "::TfHash>>::operator->() [T = pxrInternal__aapl__pxrReserved__::pxr_tsl::robin_map<std::string, std::unique_"
            "ptr<pxrInternal__aapl__pxrReserved__::PlugPlugin>, pxrInternal__aapl__pxrReserved__::TfHash>, Reverse = false]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

uint64_t *sub_2168E6700(uint64_t *a1)
{
  if (*a1 == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator++";
    v5[2] = 250;
    void v5[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::pxr_t"
            "sl::robin_map<std::string, std::unique_ptr<pxrInternal__aapl__pxrReserved__::PlugPlugin>, pxrInternal__aapl_"
            "_pxrReserved__::TfHash>>::operator++() [T = pxrInternal__aapl__pxrReserved__::pxr_tsl::robin_map<std::string"
            ", std::unique_ptr<pxrInternal__aapl__pxrReserved__::PlugPlugin>, pxrInternal__aapl__pxrReserved__::TfHash>, "
            "Reverse = false]";
    char v6 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    uint64_t v2 = *a1 + 40;
    do
    {
      uint64_t v3 = v2;
      if (*(unsigned char *)(v2 - 34)) {
        break;
      }
      v2 += 40;
    }
    while (*(__int16 *)(v3 + 4) == -1);
    *a1 = v3;
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::PlugPlugin::GetMetadataForType(pxrInternal__aapl__pxrReserved__::PlugPlugin *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfType *a2@<X1>, uint64_t *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::JsValue::JsValue((pxrInternal__aapl__pxrReserved__::JsValue *)&v11);
  sub_2168E924C((uint64_t)this + 80, "Types", &v11);
  if (pxrInternal__aapl__pxrReserved__::JsValue::IsObject((pxrInternal__aapl__pxrReserved__::JsValue *)&v11))
  {
    unint64_t JsObject = pxrInternal__aapl__pxrReserved__::JsValue::GetJsObject(&v11);
    pxrInternal__aapl__pxrReserved__::JsValue::JsValue((pxrInternal__aapl__pxrReserved__::JsValue *)&v9);
    TypeName = (const void **)pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(a2);
    sub_2168E92FC(JsObject, TypeName, &v9);
    if (pxrInternal__aapl__pxrReserved__::JsValue::IsObject((pxrInternal__aapl__pxrReserved__::JsValue *)&v9))
    {
      uint64_t v8 = (const void ***)pxrInternal__aapl__pxrReserved__::JsValue::GetJsObject(&v9);
      sub_2168BB7AC(a3, v8);
    }
    else
    {
      a3[2] = 0;
      a3[1] = 0;
      *a3 = (uint64_t)(a3 + 1);
    }
    if (v10) {
      sub_216784EC4(v10);
    }
  }
  else
  {
    a3[2] = 0;
    a3[1] = 0;
    *a3 = (uint64_t)(a3 + 1);
  }
  if (v12) {
    sub_216784EC4(v12);
  }
}

void sub_2168E6888(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_216784EC4(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::PlugPlugin::DeclaresType(pxrInternal__aapl__pxrReserved__::PlugPlugin *this, const pxrInternal__aapl__pxrReserved__::TfType *a2, int a3)
{
  uint64_t result = sub_2168E6988((uint64_t)this + 80, "Types");
  if (result)
  {
    char v6 = (unint64_t **)result;
    uint64_t result = pxrInternal__aapl__pxrReserved__::JsValue::IsObject((pxrInternal__aapl__pxrReserved__::JsValue *)result);
    if (result)
    {
      unint64_t JsObject = (void *)pxrInternal__aapl__pxrReserved__::JsValue::GetJsObject(v6);
      uint64_t v16 = (void *)*JsObject;
      unint64_t v17 = JsObject + 1;
      if (v16 == JsObject + 1) {
        return 0;
      }
      while (1)
      {
        uint64_t v10 = sub_2168E6A04(&v16, v8, v9);
        uint64_t v14 = *(void *)pxrInternal__aapl__pxrReserved__::TfType::FindByName(*v10 + 32, v11, v12);
        uint64_t v15 = v14;
        if (a3)
        {
          if (pxrInternal__aapl__pxrReserved__::TfType::IsA((char *)&v15, *(void *)a2, v13)) {
            return 1;
          }
        }
        else if (*(void *)a2 == v14)
        {
          return 1;
        }
        sub_2168E6A80(&v16);
        if (v16 == v17) {
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t sub_2168E6988(uint64_t a1, char *a2)
{
  sub_216779094(__p, a2);
  uint64_t v3 = sub_21678C2D8(a1, (const void **)__p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (a1 + 8 == v3) {
    return 0;
  }
  else {
    return v3 + 56;
  }
}

void sub_2168E69E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2168E6A04(void *result, uint64_t a2, char *a3)
{
  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const std::map<std::string, pxrInternal__aapl__pxrRes"
            "erved__::JsValue>>::operator->() [T = const std::map<std::string, pxrInternal__aapl__pxrReserved__::JsValue>"
            ", Reverse = false]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void *sub_2168E6A80(void *a1)
{
  uint64_t v2 = (void *)*a1;
  if (*a1 == a1[1])
  {
    v7[0] = "tf/iterator.h";
    v7[1] = "operator++";
    v7[2] = 250;
    void v7[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::map<std::string, pxrInternal"
            "__aapl__pxrReserved__::JsValue>>::operator++() [T = const std::map<std::string, pxrInternal__aapl__pxrReserv"
            "ed__::JsValue>, Reverse = false]";
    char v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    uint64_t v3 = (void *)v2[1];
    if (v3)
    {
      do
      {
        char v4 = v3;
        uint64_t v3 = (void *)*v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        char v4 = (void *)v2[2];
        BOOL v5 = *v4 == (void)v2;
        uint64_t v2 = v4;
      }
      while (!v5);
    }
    *a1 = v4;
  }
  return a1;
}

uint64_t sub_2168E6B28(uint64_t a1)
{
  uint64_t v14 = a1;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v1 = (char *)atomic_load((unint64_t *)&qword_267B8E658);
  if (!v1) {
    uint64_t v1 = sub_2168E8DD8(&qword_267B8E658);
  }
  std::mutex::lock((std::mutex *)v1);
  uint64_t v2 = (void *)atomic_load((unint64_t *)&qword_267B8E660);
  if (!v2) {
    uint64_t v2 = sub_2168E9134(&qword_267B8E660);
  }
  uint64_t v3 = sub_2168503EC(v2, &v14);
  if (!atomic_load((unint64_t *)&qword_267B8E660)) {
    sub_2168E9134(&qword_267B8E660);
  }
  if (v3)
  {
    uint64_t v5 = v3[4];
    uint64_t v12 = v3[3];
    uint64_t v13 = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v5 + 8), 1u, memory_order_relaxed);
    }
    std::mutex::unlock((std::mutex *)v1);
    char v6 = (pxrInternal__aapl__pxrReserved__::PlugPlugin *)sub_2168E5D78(&v12);
    pxrInternal__aapl__pxrReserved__::PlugPlugin::Load(v6);
  }
  else
  {
    v10[0] = "plug/plugin.cpp";
    v10[1] = "_DefineType";
    v10[2] = 520;
    v10[3] = "static void pxrInternal__aapl__pxrReserved__::PlugPlugin::_DefineType(TfType)";
    char v11 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v14);
    if (*(char *)(TypeName + 23) >= 0) {
      char v8 = (const char *)TypeName;
    }
    else {
      char v8 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"unknown plugin type %s", v8);
    std::mutex::unlock((std::mutex *)v1);
  }
  uint64_t result = v13;
  if (v13)
  {
    if (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    }
  }
  return result;
}

void sub_2168E6CE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, atomic_uint *a17)
{
  std::mutex::unlock(v17);
  if (a17)
  {
    if (atomic_fetch_add_explicit(a17 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a17 + 8))(a17);
    }
  }
  _Unwind_Resume(a1);
}

void sub_2168E6D48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v28 = a2;
  sub_216779094(__p, "alias");
  uint64_t v4 = sub_21678C2D8(a3, (const void **)__p);
  if (SHIBYTE(v23) < 0) {
    operator delete(__p[0]);
  }
  if (a3 + 8 != v4
    && pxrInternal__aapl__pxrReserved__::JsValue::IsObject((pxrInternal__aapl__pxrReserved__::JsValue *)(v4 + 56)))
  {
    unint64_t JsObject = (void *)pxrInternal__aapl__pxrReserved__::JsValue::GetJsObject((unint64_t **)(v4 + 56));
    uint64_t v26 = (void *)*JsObject;
    uint64_t v27 = JsObject + 1;
    while (v26 != v27)
    {
      char v8 = sub_2168E6A04(&v26, v6, v7);
      if (pxrInternal__aapl__pxrReserved__::JsValue::IsString((pxrInternal__aapl__pxrReserved__::JsValue *)(*v8 + 56)))
      {
        char v11 = sub_2168E6A04(&v26, v9, v10);
        unint64_t String = (char *)pxrInternal__aapl__pxrReserved__::JsValue::GetString((pxrInternal__aapl__pxrReserved__::JsValue *)(*v11 + 56));
        uint64_t v15 = sub_2168E6A04(&v26, v13, v14);
        uint64_t v16 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)(*v15 + 32));
        pxrInternal__aapl__pxrReserved__::TfType::AddAlias(&v28, *v16, String);
      }
      else
      {
        __p[0] = "plug/plugin.cpp";
        __p[1] = "_DeclareAliases";
        uint64_t v23 = 543;
        uint64_t v24 = "void pxrInternal__aapl__pxrReserved__::PlugPlugin::_DeclareAliases(TfType, const JsObject &)";
        char v25 = 0;
        unint64_t v17 = sub_2168E6A04(&v26, v9, v10);
        pxrInternal__aapl__pxrReserved__::JsValue::GetTypeName((pxrInternal__aapl__pxrReserved__::JsValue *)(*v17 + 56), v20);
        if (v21 >= 0) {
          unint64_t v19 = v20;
        }
        else {
          unint64_t v19 = (void **)v20[0];
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)__p, (pxrInternal__aapl__pxrReserved__ *)"Expected string for alias name, but found %s", v18, v19);
        if (v21 < 0) {
          operator delete(v20[0]);
        }
      }
      sub_2168E6A80(&v26);
    }
  }
}

void sub_2168E6ED8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2168E6F08(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::JsValue::JsValue((pxrInternal__aapl__pxrReserved__::JsValue *)&v15);
  sub_2168E924C(a1 + 80, "Types", &v15);
  if (pxrInternal__aapl__pxrReserved__::JsValue::IsObject((pxrInternal__aapl__pxrReserved__::JsValue *)&v15))
  {
    unint64_t JsObject = (void *)pxrInternal__aapl__pxrReserved__::JsValue::GetJsObject(&v15);
    uint64_t v13 = (void *)*JsObject;
    uint64_t v14 = JsObject + 1;
    while (v13 != v14)
    {
      uint64_t v5 = sub_2168E6A04(&v13, v3, v4);
      if (pxrInternal__aapl__pxrReserved__::JsValue::IsObject((pxrInternal__aapl__pxrReserved__::JsValue *)(*v5 + 56)))
      {
        uint64_t v8 = *sub_2168E6A04(&v13, v6, v7);
        char v11 = sub_2168E6A04(&v13, v9, v10);
        unint64_t v12 = pxrInternal__aapl__pxrReserved__::JsValue::GetJsObject((unint64_t **)(*v11 + 56));
        sub_2168E6FF4(a1, (char *)(v8 + 32), v12);
      }
      sub_2168E6A80(&v13);
    }
  }
  if (v16) {
    sub_216784EC4(v16);
  }
}

void sub_2168E6FD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_216784EC4(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_2168E6FF4(uint64_t a1, char *a2, uint64_t a3)
{
  long long v83 = 0uLL;
  unint64_t v84 = 0;
  pxrInternal__aapl__pxrReserved__::JsValue::JsValue((pxrInternal__aapl__pxrReserved__::JsValue *)&v81);
  uint64_t v68 = a3;
  sub_2168E924C(a3, "bases", &v81);
  if (pxrInternal__aapl__pxrReserved__::JsValue::IsArray((pxrInternal__aapl__pxrReserved__::JsValue *)&v81))
  {
    unint64_t JsArray = pxrInternal__aapl__pxrReserved__::JsValue::GetJsArray(&v81);
    uint64_t v8 = *(pxrInternal__aapl__pxrReserved__::JsValue **)JsArray;
    unint64_t v7 = *(pxrInternal__aapl__pxrReserved__::JsValue **)(JsArray + 8);
    while (v8 != v7)
    {
      if (!pxrInternal__aapl__pxrReserved__::JsValue::IsString(v8)) {
        goto LABEL_6;
      }
      uint64_t v8 = (pxrInternal__aapl__pxrReserved__::JsValue *)((char *)v8 + 16);
    }
    char v11 = (pxrInternal__aapl__pxrReserved__::JsValue **)pxrInternal__aapl__pxrReserved__::JsValue::GetJsArray(&v81);
    sub_216782DE0(&v79, (v11[1] - *v11) >> 4);
    uint64_t v13 = *v11;
    unint64_t v12 = v11[1];
    if (*v11 != v12)
    {
      uint64_t v14 = (void **)v79;
      do
      {
        unint64_t String = pxrInternal__aapl__pxrReserved__::JsValue::GetString(v13);
        if (*(char *)(String + 23) < 0)
        {
          sub_216778F24(__p, *(void **)String, *(void *)(String + 8));
        }
        else
        {
          long long v16 = *(_OWORD *)String;
          uint64_t v76 = *(void *)(String + 16);
          *(_OWORD *)std::string __p = v16;
        }
        if (*((char *)v14 + 23) < 0) {
          operator delete(*v14);
        }
        long long v17 = *(_OWORD *)__p;
        v14[2] = (void *)v76;
        *(_OWORD *)uint64_t v14 = v17;
        v14 += 3;
        uint64_t v13 = (pxrInternal__aapl__pxrReserved__::JsValue *)((char *)v13 + 16);
      }
      while (v13 != v12);
    }
    unint64_t v19 = (long long *)v79;
    uint64_t v18 = v80;
    if (v79 != v80)
    {
      do
      {
        uint64_t v20 = pxrInternal__aapl__pxrReserved__::TfType::Declare(v19);
        char v21 = v20;
        uint64_t v22 = *((void *)&v83 + 1);
        if (*((void *)&v83 + 1) >= (unint64_t)v84)
        {
          uint64_t v24 = (uint64_t)(*((void *)&v83 + 1) - v83) >> 3;
          if ((unint64_t)(v24 + 1) >> 61) {
            sub_21677CB10();
          }
          unint64_t v25 = (uint64_t)&v84[-v83] >> 2;
          if (v25 <= v24 + 1) {
            unint64_t v25 = v24 + 1;
          }
          if ((unint64_t)&v84[-v83] >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v26 = v25;
          }
          if (v26) {
            uint64_t v27 = (char *)sub_21677CB28((uint64_t)&v84, v26);
          }
          else {
            uint64_t v27 = 0;
          }
          uint64_t v28 = (unint64_t *)&v27[8 * v24];
          *uint64_t v28 = *v21;
          uint64_t v23 = v28 + 1;
          uint64_t v29 = (char *)*((void *)&v83 + 1);
          long long v30 = (char *)v83;
          if (*((void *)&v83 + 1) != (void)v83)
          {
            do
            {
              unint64_t v31 = *((void *)v29 - 1);
              v29 -= 8;
              *--uint64_t v28 = v31;
            }
            while (v29 != v30);
            uint64_t v29 = (char *)v83;
          }
          *(void *)&long long v83 = v28;
          *((void *)&v83 + 1) = v23;
          unint64_t v84 = &v27[8 * v26];
          if (v29) {
            operator delete(v29);
          }
        }
        else
        {
          **((void **)&v83 + 1) = *v20;
          uint64_t v23 = (void *)(v22 + 8);
        }
        *((void *)&v83 + 1) = v23;
        unint64_t v19 = (long long *)((char *)v19 + 24);
      }
      while (v19 != v18);
    }
    __p[0] = &v79;
    sub_216782F20((void ***)__p);
  }
  else
  {
LABEL_6:
    if (!pxrInternal__aapl__pxrReserved__::JsValue::IsNull((pxrInternal__aapl__pxrReserved__::JsValue *)&v81))
    {
      __p[0] = "plug/plugin.cpp";
      __p[1] = "_DeclareType";
      uint64_t v76 = 588;
      unint64_t v77 = "void pxrInternal__aapl__pxrReserved__::PlugPlugin::_DeclareType(const std::string &, const JsObject &)";
      char v78 = 0;
      if (a2[23] >= 0) {
        uint64_t v9 = a2;
      }
      else {
        uint64_t v9 = *(const char **)a2;
      }
      uint64_t v10 = (const char *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0) {
        uint64_t v10 = *(const char **)v10;
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid bases for type %s specified by plugin %s. Expected list of strings.", v9, v10);
    }
  }
  unint64_t v74 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)a2);
  pxrInternal__aapl__pxrReserved__::TfType::GetBaseTypes((pxrInternal__aapl__pxrReserved__::TfType *)&v74, v32, v33, &v79);
  if (v79 == v80)
  {
    pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)a2, (char **)&v83, (uint64_t)sub_2168E6B28);
  }
  else
  {
    for (long long i = v83; (void)i != *((void *)&i + 1); sub_21688D3C0(&i))
    {
      uint64_t v72 = *(void *)sub_2168E78D4((uint64_t *)&i, v34, v35);
      uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v72);
      if (v79 == v80)
      {
        char v37 = (long long *)v79;
      }
      else
      {
        char v37 = (long long *)v79;
        while (*(void *)v37 != v72)
        {
          char v37 = (long long *)((char *)v37 + 8);
          if (v37 == v80)
          {
            char v37 = v80;
            break;
          }
        }
      }
      if (v37 == v80)
      {
        memset(&v71, 0, sizeof(v71));
        unint64_t v69 = (long long *)v79;
        uint64_t v70 = v80;
        while (v69 != v70)
        {
          uint64_t v38 = (pxrInternal__aapl__pxrReserved__::TfType **)sub_21688D334(&v69);
          uint64_t v39 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(*v38);
          char v40 = (char *)v39;
          if (*(char *)(v39 + 23) >= 0) {
            size_t v41 = *(unsigned __int8 *)(v39 + 23);
          }
          else {
            size_t v41 = *(void *)(v39 + 8);
          }
          sub_2167940B4((uint64_t)__p, v41 + 1);
          if (v76 >= 0) {
            uint64_t v42 = __p;
          }
          else {
            uint64_t v42 = (void **)__p[0];
          }
          if (v41)
          {
            if (v40[23] >= 0) {
              uint64_t v43 = v40;
            }
            else {
              uint64_t v43 = *(char **)v40;
            }
            memmove(v42, v43, v41);
          }
          *(_WORD *)((char *)v42 + v41) = 32;
          if (v76 >= 0) {
            uint64_t v44 = __p;
          }
          else {
            uint64_t v44 = (void **)__p[0];
          }
          if (v76 >= 0) {
            std::string::size_type v45 = HIBYTE(v76);
          }
          else {
            std::string::size_type v45 = (std::string::size_type)__p[1];
          }
          std::string::append(&v71, (const std::string::value_type *)v44, v45);
          if (SHIBYTE(v76) < 0) {
            operator delete(__p[0]);
          }
          sub_21688D3C0(&v69);
        }
        __p[0] = "plug/plugin.cpp";
        __p[1] = "_DeclareType";
        uint64_t v76 = 629;
        unint64_t v77 = "void pxrInternal__aapl__pxrReserved__::PlugPlugin::_DeclareType(const std::string &, const JsObject &)";
        char v78 = 0;
        uint64_t v46 = (const char *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0) {
          uint64_t v46 = *(const char **)(a1 + 8);
        }
        uint64_t v47 = (const char *)(a1 + 32);
        if (*(char *)(a1 + 55) < 0) {
          uint64_t v47 = *(const char **)(a1 + 32);
        }
        if (a2[23] >= 0) {
          uint64_t v48 = a2;
        }
        else {
          uint64_t v48 = *(const char **)a2;
        }
        if (*(char *)(TypeName + 23) >= 0) {
          char v49 = (const char *)TypeName;
        }
        else {
          char v49 = *(const char **)TypeName;
        }
        unint64_t v50 = &v71;
        if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          unint64_t v50 = (std::string *)v71.__r_.__value_.__r.__words[0];
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"The metadata for plugin '%s' defined in %s declares type '%s' with base type '%s', but the type has already been declared with a different set of bases that does not include that type.  The existing bases are: (%s).  Please fix the plugin.", v46, v47, v48, v49, (const char *)v50);
        if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v71.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  uint64_t v51 = (char *)atomic_load((unint64_t *)&qword_267B8E658);
  if (!v51) {
    uint64_t v51 = sub_2168E8DD8(&qword_267B8E658);
  }
  std::mutex::lock((std::mutex *)v51);
  uint64_t v52 = (void *)atomic_load((unint64_t *)&qword_267B8E660);
  if (!v52) {
    uint64_t v52 = sub_2168E9134(&qword_267B8E660);
  }
  if (sub_216877FD4(v52, &v74))
  {
    uint64_t v53 = (_OWORD *)atomic_load((unint64_t *)&qword_267B8E660);
    if (!v53) {
      uint64_t v53 = sub_2168E9134(&qword_267B8E660);
    }
    __p[0] = &v74;
    uint64_t v54 = sub_2168E9368((uint64_t)v53, &v74, (uint64_t)&unk_2174BFD90, (uint64_t **)__p);
    std::string::size_type v55 = v54[4];
    v71.__r_.__value_.__r.__words[0] = v54[3];
    v71.__r_.__value_.__l.__size_ = v55;
    if (v55) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v55 + 8), 1u, memory_order_relaxed);
    }
    __p[0] = "plug/plugin.cpp";
    __p[1] = "_DeclareType";
    uint64_t v76 = 649;
    unint64_t v77 = "void pxrInternal__aapl__pxrReserved__::PlugPlugin::_DeclareType(const std::string &, const JsObject &)";
    char v78 = 0;
    unint64_t v56 = (const char *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      unint64_t v56 = *(const char **)v56;
    }
    uint64_t v57 = (const char *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      uint64_t v57 = *(const char **)v57;
    }
    if (a2[23] < 0) {
      a2 = *(char **)a2;
    }
    uint64_t v58 = sub_2168E5D78((uint64_t *)&v71);
    uint64_t v59 = (const char *)(v58 + 8);
    if (*(char *)(v58 + 31) < 0) {
      uint64_t v59 = *(const char **)v59;
    }
    uint64_t v60 = sub_2168E5D78((uint64_t *)&v71);
    std::string v61 = (const char *)(v60 + 32);
    if (*(char *)(v60 + 55) < 0) {
      std::string v61 = *(const char **)v61;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Plugin '%s' defined in %s has metadata claiming that it provides type %s, but this was previously provided by plugin '%s' defined in %s.", v56, v57, a2, v59, v61);
    std::string::size_type size = v71.__r_.__value_.__l.__size_;
    if (v71.__r_.__value_.__l.__size_
      && atomic_fetch_add_explicit((atomic_uint *volatile)(v71.__r_.__value_.__l.__size_ + 8), 0xFFFFFFFF, memory_order_release) == 1)
    {
      (*(void (**)(std::string::size_type))(*(void *)size + 8))(size);
    }
    std::mutex::unlock((std::mutex *)v51);
  }
  else
  {
    sub_2168E9050((unint64_t **)__p, (unint64_t *)a1);
    uint64_t v63 = (_OWORD *)atomic_load((unint64_t *)&qword_267B8E660);
    if (!v63) {
      uint64_t v63 = sub_2168E9134(&qword_267B8E660);
    }
    v71.__r_.__value_.__r.__words[0] = (std::string::size_type)&v74;
    std::string v64 = sub_2168E9368((uint64_t)v63, &v74, (uint64_t)&unk_2174BFD90, (uint64_t **)&v71);
    long long v65 = (atomic_uint *)v64[4];
    *(_OWORD *)(v64 + 3) = *(_OWORD *)__p;
    __p[1] = 0;
    if (v65)
    {
      if (atomic_fetch_add_explicit(v65 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v65 + 8))(v65);
      }
      uint64_t v66 = __p[1];
      __p[0] = 0;
      if (__p[1] && atomic_fetch_add_explicit((atomic_uint *volatile)__p[1] + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(void *))(*(void *)v66 + 8))(v66);
      }
    }
    std::mutex::unlock((std::mutex *)v51);
    sub_2168E6D48(v67, v74, v68);
  }
  if (v79)
  {
    long long v80 = (long long *)v79;
    operator delete(v79);
  }
  if (v82) {
    sub_216784EC4(v82);
  }
  if ((void)v83)
  {
    *((void *)&v83 + 1) = v83;
    operator delete((void *)v83);
  }
}

void sub_2168E7790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37)
{
  uint64_t v39 = *(std::__shared_weak_count **)(v37 - 136);
  if (v39) {
    sub_216784EC4(v39);
  }
  char v40 = *(void **)(v37 - 128);
  if (v40)
  {
    *(void *)(v37 - 12sub_2168DF148(this, 0) = v40;
    operator delete(v40);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2168E78D4(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    void v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReserved__::TfType>"
            ">::operator*() [T = std::vector<pxrInternal__aapl__pxrReserved__::TfType>, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_2168E794C()
{
}

void pxrInternal__aapl__pxrReserved__::PlugFindPluginResource(uint64_t *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  uint64_t v8 = sub_2168E79D8(a1);
  if (v9 & 1 | (unint64_t)v8)
  {
    uint64_t v10 = sub_2168E5D78(a1);
    pxrInternal__aapl__pxrReserved__::PlugPlugin::FindPluginResource(v10, a2, a3, (uint64_t)a4);
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
}

uint64_t (*sub_2168E79D8(void *a1))(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1 + 1;
  if (!v3) {
    return 0;
  }
  int v4 = *(unsigned __int8 *)(sub_216850B68(v2) + 14);
  if (*a1) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    return 0;
  }
  else {
    return sub_2168E8D08;
  }
}

uint64_t *sub_2168E7A38()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  BOOL v5 = 0;
  char v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74DB00, (uint64_t)__p);
  uint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74DB00, (char *)0x78, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    char v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168E7AF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

_OWORD *sub_2168E7B3C(atomic_ullong *a1)
{
  uint64_t result = operator new(0x28uLL);
  uint64_t v3 = 0;
  *uint64_t result = 0u;
  result[1] = 0u;
  *((_DWORD *)result + 8) = 1065353216;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    char v4 = (void *)sub_2168E7B94((uint64_t)result);
    operator delete(v4);
    return (_OWORD *)atomic_load((unint64_t *)a1);
  }
  return result;
}

uint64_t sub_2168E7B94(uint64_t a1)
{
  sub_2168E7BD0(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_2168E7BD0(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_2168E7C14((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_2168E7C14(uint64_t a1)
{
  uint64_t v2 = *(atomic_uint **)(a1 + 32);
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

uint64_t sub_2168E7C9C(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  char v6 = a2;
  uint64_t v22 = 0;
  char v23 = 0;
  uint64_t v8 = (char *)*((void *)a2 + 1);
  if ((a2[23] & 0x80u) == 0)
  {
    int v9 = (char *)a2[23];
  }
  else
  {
    a2 = *(unsigned __int8 **)a2;
    int v9 = v8;
  }
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v22, (pxrInternal__aapl__pxrReserved__ *)a2, v9);
  unint64_t v10 = bswap64(0x9E3779B97F4A7C55 * v22);
  uint64_t v11 = *a1 & v10;
  uint64_t v12 = a1[4];
  if (*(__int16 *)(v12 + 40 * v11 + 4) < 0)
  {
    LOWORD(v13) = 0;
LABEL_10:
    char v14 = sub_2168E7EBC((uint64_t)a1);
    uint64_t v15 = a1[4];
    if (v14)
    {
      uint64_t v11 = v10 & *a1;
      if (*(__int16 *)(v15 + 40 * v11 + 4) < 0)
      {
        LOWORD(v13) = 0;
        int v16 = *(unsigned __int16 *)(v15 + 40 * v11 + 4);
      }
      else
      {
        LOWORD(v13) = 0;
        do
        {
          int v13 = (__int16)(v13 + 1);
          uint64_t v11 = (v11 + 1) & *a1;
        }
        while (v13 <= *(__int16 *)(v15 + 40 * v11 + 4));
        int v16 = *(unsigned __int16 *)(v15 + 40 * v11 + 4);
      }
    }
    else
    {
      int v16 = *(unsigned __int16 *)(v15 + 40 * v11 + 4);
    }
    if (v16 == 0xFFFF)
    {
      uint64_t v17 = v15 + 40 * v11;
      uint64_t v18 = (unsigned char *)(v17 + 8);
      unint64_t v19 = *a4;
      if (*((char *)*a4 + 23) < 0)
      {
        sub_216778F24(v18, *(void **)v19, *((void *)v19 + 1));
      }
      else
      {
        long long v20 = *v19;
        *(void *)(v15 + 40 * v11 + 24) = *((void *)v19 + 2);
        *(_OWORD *)uint64_t v18 = v20;
      }
      *(void *)(v15 + 40 * v11 + 32) = 0;
      *(_DWORD *)uint64_t v17 = v10;
      *(_WORD *)(v17 + 4) = v13;
    }
    else
    {
      sub_2168E7F84(a1, v11, v13, v10, a3, a4);
    }
    ++a1[6];
  }
  else
  {
    LOWORD(v13) = 0;
    while ((sub_2168513F8((uint64_t)a1, (unsigned __int8 *)(v12 + 40 * v11 + 8), v6) & 1) == 0)
    {
      uint64_t v11 = *a1 & (v11 + 1);
      int v13 = (__int16)(v13 + 1);
      uint64_t v12 = a1[4];
      if (v13 > *(__int16 *)(v12 + 40 * v11 + 4)) {
        goto LABEL_10;
      }
    }
  }
  return a1[4] + 40 * v11;
}

uint64_t sub_2168E7EBC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72) || (unint64_t v2 = *(void *)(a1 + 48), v2 >= *(void *)(a1 + 56)))
  {
    unint64_t v6 = sub_21686E8DC((void *)a1);
    sub_2168E802C(a1, v6);
    *(unsigned char *)(a1 + 72) = 0;
    return 1;
  }
  if (*(unsigned char *)(a1 + 73))
  {
    *(unsigned char *)(a1 + 73) = 0;
    float v3 = *(float *)(a1 + 64);
    if (v3 != 0.0)
    {
      unint64_t v4 = *(void *)(a1 + 40);
      float v5 = v4 ? (float)v2 / (float)v4 : 0.0;
      if (v5 < v3)
      {
        float v8 = *(float *)(a1 + 68);
        unint64_t v9 = vcvtps_u32_f32((float)(v2 + 1) / v8);
        unint64_t v10 = vcvtps_u32_f32((float)v2 / v8);
        if (v10 <= v9) {
          unint64_t v11 = v9;
        }
        else {
          unint64_t v11 = v10;
        }
        sub_2168E802C(a1, v11);
        return 1;
      }
    }
  }
  return 0;
}

void sub_2168E7F84(uint64_t *a1, uint64_t a2, __int16 a3, int a4, uint64_t a5, long long **a6)
{
  unint64_t v10 = *a6;
  if (*((char *)*a6 + 23) < 0)
  {
    sub_216778F24(__p, *(void **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    uint64_t v15 = *((void *)v10 + 2);
    *(_OWORD *)std::string __p = v11;
  }
  int v16 = 0;
  sub_2168E85BC(a1, a2, a3, a4, (__n128 *)__p);
  uint64_t v12 = v16;
  int v16 = 0;
  if (v12)
  {
    pxrInternal__aapl__pxrReserved__::PlugPlugin::~PlugPlugin(v12);
    operator delete(v13);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete(__p[0]);
  }
}

void sub_2168E802C(uint64_t a1, unint64_t a2)
{
  sub_2168E8230((uint64_t)&v10, a2, *(float *)(a1 + 64), *(float *)(a1 + 68));
  float v3 = *(unsigned int **)(a1 + 8);
  unint64_t v4 = *(unsigned int **)(a1 + 16);
  if (v3 != v4)
  {
    unint64_t v5 = (unint64_t)(v11[4] - 1) >> 32;
    do
    {
      if (*((__int16 *)v3 + 2) != -1)
      {
        if (v5)
        {
          uint64_t v12 = 0;
          char v13 = 0;
          int v7 = *((char *)v3 + 31);
          if (v7 >= 0) {
            float v8 = (pxrInternal__aapl__pxrReserved__ *)(v3 + 2);
          }
          else {
            float v8 = (pxrInternal__aapl__pxrReserved__ *)*((void *)v3 + 1);
          }
          if (v7 >= 0) {
            unint64_t v9 = (char *)*((unsigned __int8 *)v3 + 31);
          }
          else {
            unint64_t v9 = (char *)*((void *)v3 + 2);
          }
          pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v12, v8, v9);
          unint64_t v6 = bswap64(0x9E3779B97F4A7C55 * (void)v12);
        }
        else
        {
          unint64_t v6 = *v3;
        }
        sub_2168E8168(&v10, v10 & v6, 0, v6, (__n128 *)(v3 + 2));
      }
      v3 += 10;
    }
    while (v3 != v4);
  }
  void v11[5] = *(void *)(a1 + 48);
  sub_21686E9D4(&v10, (uint64_t *)a1);
  uint64_t v12 = (void **)v11;
  sub_2168E846C(&v12);
}

void sub_2168E8144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  *(void *)(v11 - 56) = &a11;
  sub_2168E846C((void ***)(v11 - 56));
  _Unwind_Resume(a1);
}

__n128 sub_2168E8168(void *a1, uint64_t a2, __int16 a3, int a4, __n128 *a5)
{
  while (1)
  {
    uint64_t v5 = a1[4];
    unint64_t v6 = (int *)(v5 + 40 * a2);
    int v7 = v6 + 1;
    int v8 = *((__int16 *)v6 + 2);
    if (v8 >= a3) {
      goto LABEL_4;
    }
    unint64_t v9 = (__n128 *)(v5 + 40 * a2 + 8);
    if (v8 == -1) {
      break;
    }
    unint64_t v10 = a5[1].n128_u64[0];
    __n128 v11 = *a5;
    unint64_t v12 = *(void *)(v5 + 40 * a2 + 24);
    *a5 = *v9;
    a5[1].n128_u64[0] = v12;
    *unint64_t v9 = v11;
    *(void *)(v5 + 40 * a2 + 24) = v10;
    uint64_t v13 = v5 + 40 * a2;
    unint64_t v14 = a5[1].n128_u64[1];
    a5[1].n128_u64[1] = *(void *)(v13 + 32);
    *(void *)(v13 + 32) = v14;
    LOWORD(v13) = *v7;
    *int v7 = a3;
    int v15 = *v6;
    *unint64_t v6 = a4;
    a3 = v13;
    a4 = v15;
LABEL_4:
    ++a3;
    a2 = *a1 & (a2 + 1);
  }
  __n128 result = *a5;
  *(void *)(v5 + 40 * a2 + 24) = a5[1].n128_u64[0];
  *unint64_t v9 = result;
  a5->n128_u64[0] = 0;
  a5->n128_u64[1] = 0;
  uint64_t v17 = v5 + 40 * a2;
  unint64_t v18 = a5[1].n128_u64[1];
  a5[1].n128_u64[0] = 0;
  a5[1].n128_u64[1] = 0;
  *(void *)(v17 + 32) = v18;
  *unint64_t v6 = a4;
  *int v7 = a3;
  return result;
}

uint64_t sub_2168E8230(uint64_t a1, unint64_t a2, float a3, float a4)
{
  unint64_t v12 = a2;
  sub_21686EB98((unint64_t *)a1, (uint64_t *)&v12);
  if (v12 >= 0x666666666666667)
  {
    exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_216767B04(exception, "The map exceeds its maximum bucket count.");
    __cxa_throw(exception, (struct type_info *)off_264293928, MEMORY[0x263F8C060]);
  }
  sub_2168E83E0((void *)(a1 + 8), v12);
  int v7 = *(int **)(a1 + 8);
  if (v7 == *(int **)(a1 + 16)) {
    int v7 = sub_2168E835C();
  }
  unint64_t v8 = v12;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 4sub_2168DF148(this, 0) = v8;
  *(void *)(a1 + sub_2168D9AA8((uint64_t)this + 48) = 0;
  *(_WORD *)(a1 + 72) = 0;
  if (v8) {
    *(unsigned char *)(*(void *)(a1 + 16) - 34) = 1;
  }
  float v9 = fminf(fmaxf(a4, 0.2), 0.95);
  *(float *)(a1 + 64) = fminf(fmaxf(a3, 0.0), 0.15);
  *(float *)(a1 + 68) = v9;
  *(void *)(a1 + 56) = (unint64_t)(float)(v9 * (float)v8);
  return a1;
}

void sub_2168E8348(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

int *sub_2168E835C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26798B1B8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26798B1B8))
  {
    dword_26798B190 = 0;
    word_26798B194 = -1;
    byte_26798B196 = 1;
    __cxa_atexit((void (*)(void *))sub_2168E8528, &dword_26798B190, &dword_216758000);
    __cxa_guard_release(&qword_26798B1B8);
  }
  return &dword_26798B190;
}

void *sub_2168E83E0(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_2168724E8(a1, a2);
    uint64_t v4 = a1[1];
    uint64_t v5 = v4 + 40 * a2;
    do
    {
      *(_DWORD *)uint64_t v4 = 0;
      *(_WORD *)(v4 + 4) = -1;
      *(unsigned char *)(v4 + 6) = 0;
      v4 += 40;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_2168E8458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_2168E846C(void ***a1)
{
  unint64_t v2 = *a1;
  if (*v2)
  {
    sub_2168E84C0((uint64_t *)v2);
    float v3 = **a1;
    operator delete(v3);
  }
}

void sub_2168E84C0(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = v2 - 40;
    do
    {
      if (*(__int16 *)(v4 + 4) != -1)
      {
        sub_2168E8568(v4);
        *(_WORD *)(v4 + 4) = -1;
      }
      BOOL v5 = v4 == v3;
      v4 -= 40;
    }
    while (!v5);
  }
  a1[1] = v3;
}

uint64_t sub_2168E8528(uint64_t a1)
{
  if (*(__int16 *)(a1 + 4) != -1)
  {
    sub_2168E8568(a1);
    *(_WORD *)(a1 + 4) = -1;
  }
  return a1;
}

void sub_2168E8568(uint64_t a1)
{
  sub_2168E8888((pxrInternal__aapl__pxrReserved__::PlugPlugin **)(a1 + 32), 0);
  if (*(char *)(a1 + 31) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 8);
    operator delete(v2);
  }
}

__n128 sub_2168E85BC(uint64_t *a1, uint64_t a2, __int16 a3, int a4, __n128 *a5)
{
  uint64_t v5 = a1[4] + 40 * a2;
  unint64_t v6 = a5[1].n128_u64[0];
  __n128 v7 = *a5;
  unint64_t v8 = *(void *)(v5 + 24);
  *a5 = *(__n128 *)(v5 + 8);
  a5[1].n128_u64[0] = v8;
  *(__n128 *)(v5 + 8) = v7;
  *(void *)(v5 + 24) = v6;
  unint64_t v9 = a5[1].n128_u64[1];
  a5[1].n128_u64[1] = *(void *)(v5 + 32);
  *(void *)(v5 + 32) = v9;
  __int16 v10 = *(_WORD *)(v5 + 4);
  *(_WORD *)(v5 + 4) = a3;
  int v11 = *(_DWORD *)v5;
  *(_DWORD *)uint64_t v5 = a4;
  uint64_t v12 = *a1;
  uint64_t v13 = *a1 & (a2 + 1);
  __int16 v14 = v10 + 1;
  uint64_t v15 = a1[4];
  int v16 = (int *)(v15 + 40 * v13);
  unint64_t v18 = v16 + 1;
  for (unsigned __int16 i = *((_WORD *)v16 + 2); i != 0xFFFF; unsigned __int16 i = *((_WORD *)v16 + 2))
  {
    if (v14 > (__int16)i)
    {
      if (v14 >= 4096) {
        *((unsigned char *)a1 + 72) = 1;
      }
      uint64_t v19 = v15 + 40 * v13;
      __n128 v20 = *a5;
      unint64_t v21 = a5[1].n128_u64[0];
      unint64_t v22 = *(void *)(v19 + 24);
      *a5 = *(__n128 *)(v19 + 8);
      a5[1].n128_u64[0] = v22;
      *(void *)(v19 + 24) = v21;
      *(__n128 *)(v19 + 8) = v20;
      unint64_t v23 = a5[1].n128_u64[1];
      a5[1].n128_u64[1] = *(void *)(v19 + 32);
      *(void *)(v19 + 32) = v23;
      LOWORD(v22) = *v18;
      *unint64_t v18 = v14;
      int v24 = *v16;
      *int v16 = v11;
      uint64_t v12 = *a1;
      uint64_t v15 = a1[4];
      __int16 v14 = v22;
      int v11 = v24;
    }
    uint64_t v13 = v12 & (v13 + 1);
    ++v14;
    int v16 = (int *)(v15 + 40 * v13);
    unint64_t v18 = v16 + 1;
  }
  uint64_t v25 = v15 + 40 * v13;
  __n128 result = *a5;
  *(void *)(v25 + 24) = a5[1].n128_u64[0];
  *(__n128 *)(v25 + 8) = result;
  a5->n128_u64[0] = 0;
  a5->n128_u64[1] = 0;
  unint64_t v27 = a5[1].n128_u64[1];
  a5[1].n128_u64[0] = 0;
  a5[1].n128_u64[1] = 0;
  *(void *)(v25 + 32) = v27;
  *int v16 = v11;
  *unint64_t v18 = v14;
  return result;
}

uint64_t sub_2168E870C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  sub_2168E8770((void *)a1, a2);
  if (*(__int16 *)(v2 + 4) == -1)
  {
    uint64_t v4 = (__int16 *)(v2 + 44);
    uint64_t v5 = v2 + 40;
    do
    {
      uint64_t v2 = v5;
      if (*((unsigned char *)v4 - 38)) {
        break;
      }
      int v6 = *v4;
      v4 += 20;
      v5 += 40;
    }
    while (v6 == -1);
  }
  *(unsigned char *)(a1 + 73) = 1;
  return v2;
}

void sub_2168E8770(void *a1, uint64_t a2)
{
  if (*(__int16 *)(a2 + 4) != -1)
  {
    sub_2168E8568(a2);
    *(_WORD *)(a2 + 4) = -1;
  }
  --a1[6];
  uint64_t v4 = a1[4];
  unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - v4) >> 3);
  uint64_t v6 = (v5 + 1) & *a1;
  int v7 = *(__int16 *)(v4 + 40 * v6 + 4);
  if (v7 >= 1)
  {
    do
    {
      unint64_t v8 = (int *)(v4 + 40 * v6);
      uint64_t v9 = v4 + 40 * v5;
      long long v10 = *(_OWORD *)(v8 + 2);
      uint64_t v11 = *((void *)v8 + 4);
      *(void *)(v9 + 24) = *((void *)v8 + 3);
      int v12 = *v8;
      *(_OWORD *)(v9 + 8) = v10;
      *((void *)v8 + 1) = 0;
      *((void *)v8 + 2) = 0;
      *((void *)v8 + 3) = 0;
      *((void *)v8 + 4) = 0;
      *(void *)(v9 + 32) = v11;
      *(_DWORD *)uint64_t v9 = v12;
      *(_WORD *)(v9 + 4) = v7 - 1;
      uint64_t v4 = a1[4];
      uint64_t v13 = v4 + 40 * v6;
      int v15 = *(__int16 *)(v13 + 4);
      __int16 v14 = (_WORD *)(v13 + 4);
      if (v15 != -1)
      {
        sub_2168E8568(v4 + 40 * v6);
        *__int16 v14 = -1;
        uint64_t v4 = a1[4];
      }
      unint64_t v5 = v6;
      uint64_t v6 = *a1 & (v6 + 1);
      int v7 = *(__int16 *)(v4 + 40 * v6 + 4);
    }
    while (v7 > 0);
  }
}

void sub_2168E8888(pxrInternal__aapl__pxrReserved__::PlugPlugin **a1, pxrInternal__aapl__pxrReserved__::PlugPlugin *a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    pxrInternal__aapl__pxrReserved__::PlugPlugin::~PlugPlugin(v3);
    operator delete(v4);
  }
}

unsigned __int8 *sub_2168E88C8(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = a2;
  unint64_t v26 = 0;
  char v27 = 0;
  unint64_t v8 = (char *)*((void *)a2 + 1);
  if ((a2[23] & 0x80u) == 0)
  {
    uint64_t v9 = (char *)a2[23];
  }
  else
  {
    a2 = *(unsigned __int8 **)a2;
    uint64_t v9 = v8;
  }
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v26, (pxrInternal__aapl__pxrReserved__ *)a2, v9);
  unint64_t v10 = bswap64(0x9E3779B97F4A7C55 * (void)v26);
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
    __int16 v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (unsigned __int16 i = *v14; i; unsigned __int16 i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (sub_2168513F8(a1 + 32, i + 16, v6)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  sub_2168E8B90(a1, v10, a4, (uint64_t)&v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_21678A04C(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  unint64_t v23 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)unint64_t v26 = *v23;
    *unint64_t v23 = v26;
  }
  else
  {
    *(void *)unint64_t v26 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26)
    {
      unint64_t v24 = *(void *)(*(void *)v26 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26;
    }
  }
  unsigned __int16 i = v26;
  unint64_t v26 = 0;
  ++*(void *)(a1 + 24);
  sub_2168E8C30((uint64_t)&v26, 0);
  return i;
}

void sub_2168E8B78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_2168E8C30((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unsigned char *sub_2168E8B90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x38uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  __n128 result = v8 + 2;
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    __n128 result = sub_216778F24(result, *(void **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    void v8[4] = *((void *)v10 + 2);
    *(_OWORD *)__n128 result = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_2168E8C18(_Unwind_Exception *a1)
{
  sub_2168E8C30(v1, 0);
  _Unwind_Resume(a1);
}

void sub_2168E8C30(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_2168E7C14((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

uint64_t sub_2168E8C88(uint64_t a1, char *a2, char *a3)
{
  unsigned __int8 v4 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if (v4)
  {
    uint64_t v7 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin(a2, 0, a3);
    *(void *)a1 = v7;
    if (v7)
    {
      uint64_t v9 = v7;
      if (a3[23] >= 0) {
        unint64_t v10 = a3;
      }
      else {
        unint64_t v10 = *(char **)a3;
      }
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin(v10, v9, v8);
      int v5 = 2;
    }
    else
    {
      int v5 = 0;
    }
  }
  else
  {
    int v5 = 0;
    *(void *)a1 = 0;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return a1;
}

uint64_t sub_2168E8D08(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1 + 1;
  if (!v3) {
    return 0;
  }
  if (*(unsigned char *)(sub_216850B68(v2) + 14)) {
    return *a1;
  }
  return 0;
}

std::recursive_mutex *sub_2168E8D4C(atomic_ullong *a1)
{
  __n128 result = (std::recursive_mutex *)sub_2168E8D94();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      std::recursive_mutex::~recursive_mutex(result);
      operator delete(v4);
    }
    return (std::recursive_mutex *)atomic_load((unint64_t *)a1);
  }
  return result;
}

void *sub_2168E8D94()
{
  uint64_t v0 = operator new(0x40uLL);
  MEMORY[0x21D447BA0]();
  return v0;
}

void sub_2168E8DC4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_2168E8DD8(atomic_ullong *a1)
{
  __n128 result = (char *)operator new(0x40uLL);
  uint64_t v3 = 0;
  *(void *)__n128 result = 850045863;
  *(_OWORD *)(result + 8) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 4sub_2168DF148(this, 0) = 0u;
  *((void *)result + 7) = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    std::mutex::~mutex((std::mutex *)result);
    operator delete(v4);
    return (char *)atomic_load((unint64_t *)a1);
  }
  return result;
}

uint64_t sub_2168E8E40(uint64_t *a1, void *a2)
{
  uint64_t result = sub_2168E8EB8((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_2168E8EB8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_2168E8F4C((uint64_t)v12);
  return v10;
}

uint64_t sub_2168E8F4C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_21685249C(a1);
  }
  return a1;
}

unint64_t sub_2168E8F84(atomic_ullong *a1)
{
  uint64_t v2 = (void **)sub_2168E8FEC();
  uint64_t v3 = v2;
  uint64_t v4 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v4, (unint64_t)v2);
  if (v4)
  {
    if (v2)
    {
      uint64_t v6 = v2 + 1;
      sub_2168E846C(&v6);
      operator delete(v3);
    }
    return atomic_load((unint64_t *)a1);
  }
  return (unint64_t)v3;
}

void *sub_2168E8FEC()
{
  uint64_t v0 = operator new(0x50uLL);
  sub_2168E8230((uint64_t)v0, 0, 0.0, 0.5);
  return v0;
}

void sub_2168E903C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

unint64_t **sub_2168E9050(unint64_t **a1, unint64_t *a2)
{
  *a1 = a2;
  a1[1] = 0;
  if (a2)
  {
    sub_21685203C(a2, &v6);
    uint64_t v3 = (atomic_uint *)a1[1];
    a1[1] = (unint64_t *)v6;
    uint64_t v6 = 0;
    if (v3)
    {
      if (atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
      }
      uint64_t v4 = v6;
      if (v6 && atomic_fetch_add_explicit((atomic_uint *volatile)(v6 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      }
    }
  }
  return a1;
}

void sub_2168E911C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 8);
  if (v3) {
    sub_217324208(v3);
  }
  _Unwind_Resume(exception_object);
}

_OWORD *sub_2168E9134(atomic_ullong *a1)
{
  uint64_t result = operator new(0x28uLL);
  uint64_t v3 = 0;
  *uint64_t result = 0u;
  result[1] = 0u;
  *((_DWORD *)result + 8) = 1065353216;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    uint64_t v4 = (void *)sub_2168E918C((uint64_t)result);
    operator delete(v4);
    return (_OWORD *)atomic_load((unint64_t *)a1);
  }
  return result;
}

uint64_t sub_2168E918C(uint64_t a1)
{
  sub_2168E91C8(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_2168E91C8(int a1, void *__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = v2;
      uint64_t v2 = (void *)*v2;
      uint64_t v4 = (atomic_uint *)v3[4];
      if (v4)
      {
        if (atomic_fetch_add_explicit(v4 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
          (*(void (**)(atomic_uint *))(*(void *)v4 + 8))(v4);
        }
      }
      operator delete(v3);
    }
    while (v2);
  }
}

BOOL sub_2168E924C(uint64_t a1, char *a2, void *a3)
{
  sub_216779094(__p, a2);
  uint64_t v5 = sub_21678C2D8(a1, (const void **)__p);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v6 = a1 + 8;
  if (v6 != v5)
  {
    uint64_t v8 = *(void *)(v5 + 56);
    uint64_t v7 = *(void *)(v5 + 64);
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    long long v9 = (std::__shared_weak_count *)a3[1];
    *a3 = v8;
    a3[1] = v7;
    if (v9) {
      sub_216784EC4(v9);
    }
  }
  return v6 != v5;
}

void sub_2168E92E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_2168E92FC(uint64_t a1, const void **a2, void *a3)
{
  uint64_t v5 = sub_21678C2D8(a1, a2);
  uint64_t v6 = v5;
  uint64_t v7 = a1 + 8;
  if (v7 != v5)
  {
    uint64_t v9 = *(void *)(v5 + 56);
    uint64_t v8 = *(void *)(v5 + 64);
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v10 = (std::__shared_weak_count *)a3[1];
    *a3 = v9;
    a3[1] = v8;
    if (v10) {
      sub_216784EC4(v10);
    }
  }
  return v7 != v6;
}

void *sub_2168E9368(uint64_t a1, void *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v7 = bswap64(0x9E3779B97F4A7C55 * *a2);
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = v7;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = v7 & (v8 - 1);
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (unsigned __int16 i = *v10; i; unsigned __int16 i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  char v13 = (void *)(a1 + 16);
  unsigned __int16 i = operator new(0x28uLL);
  *unsigned __int16 i = 0;
  i[1] = v7;
  uint64_t v14 = **a4;
  i[3] = 0;
  i[4] = 0;
  i[2] = v14;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_21678A04C(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v21 = *(void *)a1;
  size_t v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *unsigned __int16 i = *v22;
LABEL_38:
    *size_t v22 = i;
    goto LABEL_39;
  }
  *unsigned __int16 i = *v13;
  *char v13 = i;
  *(void *)(v21 + 8 * v4) = v13;
  if (*i)
  {
    unint64_t v23 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8) {
        v23 %= v8;
      }
    }
    else
    {
      v23 &= v8 - 1;
    }
    size_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_2168E95B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_2168E95D0(v11, v10);
  _Unwind_Resume(a1);
}

void sub_2168E95D0(uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = (atomic_uint *)__p[4];
    if (v3 && atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::PlugRegistry>::GetInstance()
{
  unint64_t result = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::PlugRegistry>::_instance);
  if (!result) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::PlugRegistry>::_CreateInstance();
  }
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::PlugRegistry>::_CreateInstance(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x8000000217456C7DLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&v15);
  uint64_t v2 = std::string::insert(&v15, 0, "Create Singleton ");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  uint64_t v19 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  sub_216851098((uint64_t)&v16, "Tf", "TfSingleton::_CreateInstance", (char *)__p);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  if (atomic_exchange(pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::PlugRegistry>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::PlugRegistry*> &)::isInitializing, 1u))
  {
    while (!atomic_load(a1))
      sched_yield();
  }
  else
  {
    if (!atomic_load(a1))
    {
      uint8x8_t v9 = operator new(0x70uLL);
      *(void *)&double v13 = sub_2168E99D8((unint64_t)v9, v10, v11).n128_u64[0];
      unint64_t v14 = atomic_load(a1);
      if (v14)
      {
        if (v9 != (void *)v14)
        {
          __p[0] = "tf/instantiateSingleton.h";
          __p[1] = "_CreateInstance";
          uint64_t v19 = 84;
          size_t v20 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::PlugRegistry>:"
                ":_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::PlugRegistry]";
          char v21 = 0;
          int v22 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"race detected setting singleton instance", v12, v13);
        }
      }
      else if (atomic_exchange((atomic_ullong *volatile)a1, (unint64_t)v9))
      {
        __p[0] = "tf/instantiateSingleton.h";
        __p[1] = "_CreateInstance";
        uint64_t v19 = 88;
        size_t v20 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::PlugRegistry>::_"
              "CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::PlugRegistry]";
        char v21 = 0;
        int v22 = 4;
        pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v12, v13, "instance.exchange(newInst) == nullptr");
      }
    }
    atomic_store(0, (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::PlugRegistry>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::PlugRegistry*> &)::isInitializing);
  }
  unint64_t v5 = atomic_load(a1);
  while (v17--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v16);
  return v5;
}

void sub_2168E9844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
}

BOOL pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::PlugRegistry>::CurrentlyExists()
{
  unint64_t v0 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::PlugRegistry>::_instance);
  return v0 != 0;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::PlugRegistry>::SetInstanceConstructed(unint64_t result, uint64_t a2, char *a3)
{
  if (atomic_exchange((atomic_ullong *volatile)&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::PlugRegistry>::_instance, result))
  {
    v3[0] = "tf/instantiateSingleton.h";
    v3[1] = "SetInstanceConstructed";
    v3[2] = 56;
    v3[3] = "static void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::PlugRegistry>::S"
            "etInstanceConstructed(T &) [T = pxrInternal__aapl__pxrReserved__::PlugRegistry]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"this function may not be called after GetInstance() or another SetInstanceConstructed() has completed", a3);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::PlugRegistry>::DeleteInstance()
{
  for (unint64_t i = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::PlugRegistry>::_instance);
        i;
        unint64_t i = v1)
  {
    unint64_t v1 = i;
    atomic_compare_exchange_strong((atomic_ullong *volatile)&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::PlugRegistry>::_instance, &v1, 0);
    if (v1 == i)
    {
      std::mutex::~mutex((std::mutex *)(i + 48));
      sub_216850298(i + 8);
      long long v3 = sub_216859A88((uint64_t *)i, v2);
      operator delete(v3);
      return;
    }
    sched_yield();
  }
}

unint64_t pxrInternal__aapl__pxrReserved__::PlugRegistry::GetInstance(pxrInternal__aapl__pxrReserved__::PlugRegistry *this)
{
  unint64_t result = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::PlugRegistry>::_instance);
  if (!result) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::PlugRegistry>::_CreateInstance();
  }
  return result;
}

__n128 sub_2168E99D8(unint64_t a1, uint64_t a2, char *a3)
{
  *(void *)(a1 + 32) = 0;
  __n128 result = 0uLL;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 4sub_2168DF148(this, 0) = 1065353216;
  *(void *)(a1 + sub_2168D9AA8((uint64_t)this + 48) = 850045863;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 104) = 0;
  if (atomic_exchange((atomic_ullong *volatile)&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::PlugRegistry>::_instance, a1))
  {
    v4[0] = "tf/instantiateSingleton.h";
    v4[1] = "SetInstanceConstructed";
    void v4[2] = 56;
    v4[3] = "static void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::PlugRegistry>::S"
            "etInstanceConstructed(T &) [T = pxrInternal__aapl__pxrReserved__::PlugRegistry]";
    char v5 = 0;
    int v6 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v4, (pxrInternal__aapl__pxrReserved__ *)"this function may not be called after GetInstance() or another SetInstanceConstructed() has completed", a3);
  }
  return result;
}

void sub_2168E9A90(_Unwind_Exception *a1)
{
  std::mutex::~mutex(v2);
  sub_216850298((uint64_t)(v1 + 1));
  sub_216859A88(v1, v4);
  _Unwind_Resume(a1);
}

uint64_t sub_2168E9AB8(uint64_t a1, unsigned __int8 *a2)
{
void sub_2168E9B60(_Unwind_Exception *a1)
{
  LOBYTE(dword_267B8E668) = 0;
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PlugRegistry::RegisterPlugins(unint64_t *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  sub_2168758C4(v5, 1uLL, a2);
  pxrInternal__aapl__pxrReserved__::PlugRegistry::RegisterPlugins(a1, v5, a3);
  unsigned int v6 = v5;
  sub_216782F20((void ***)&v6);
}

void sub_2168E9BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216782F20((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PlugRegistry::RegisterPlugins(unint64_t *a1@<X0>, char **a2@<X1>, uint64_t a3@<X8>)
{
  sub_2168E9D0C((uint64_t)a1, a2, 1, (uint64_t **)a3);
  if (*(void *)a3 != *(void *)(a3 + 8))
  {
    pxrInternal__aapl__pxrReserved__::PlugNotice::DidRegisterPlugins::DidRegisterPlugins(v8, a3);
    sub_2168EACD8(&v6, a1);
    sub_2168E9F58((pxrInternal__aapl__pxrReserved__::TfNotice *)v8, (uint64_t *)&v6);
    uint64_t v5 = v7;
    if (v7)
    {
      if (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
      }
    }
    pxrInternal__aapl__pxrReserved__::PlugNotice::DidRegisterPlugins::~DidRegisterPlugins((pxrInternal__aapl__pxrReserved__::PlugNotice::DidRegisterPlugins *)v8);
  }
}

void sub_2168E9C9C(_Unwind_Exception *a1, uint64_t a2, atomic_uint *a3, ...)
{
  va_start(va, a3);
  if (a3)
  {
    if (atomic_fetch_add_explicit(a3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a3 + 8))(a3);
    }
  }
  pxrInternal__aapl__pxrReserved__::PlugNotice::DidRegisterPlugins::~DidRegisterPlugins((pxrInternal__aapl__pxrReserved__::PlugNotice::DidRegisterPlugins *)va);
  sub_216850BF4((void ***)va);
  _Unwind_Resume(a1);
}

void sub_2168E9D0C(uint64_t a1@<X0>, char **a2@<X1>, char a3@<W2>, uint64_t **a4@<X8>)
{
  char v31 = a3;
  int v22 = "plug/registry.cpp";
  unint64_t v23 = (uint64_t (*)(int, tbb::internal *, uint64_t, void *))"_RegisterPlugins";
  uint64_t v24 = 136;
  uint64_t v25 = "PlugPluginPtrVector pxrInternal__aapl__pxrReserved__::PlugRegistry::_RegisterPlugins(const std::vector<std::string> &, BOOL)";
  LOBYTE(v26) = 0;
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::TfScopeDescription(v30, "Registering plugins", &v22);
  sub_216851EE4((uint64_t)&v28, "Plug", "PlugRegistry::RegisterPlugins");
  for (uint64_t i = 5; i != 8; ++i)
    (&v22)[i] = 0;
  uint64_t v25 = 0;
  uint64_t v24 = 0;
  unint64_t v26 = &v27;
  unint64_t v23 = sub_2168EAF08;
  pxrInternal__aapl__pxrReserved__::Plug_TaskArena::Plug_TaskArena((pxrInternal__aapl__pxrReserved__::Plug_TaskArena *)&v21);
  std::mutex::lock((std::mutex *)(a1 + 48));
  uint64_t v16 = a2;
  int v17 = &v31;
  uint64_t v18 = a1;
  uint64_t v19 = &v22;
  size_t v20 = &v21;
  uint64_t v32 = (char **)&unk_26C74DB28;
  uint64_t v33 = &v16;
  tbb::interface7::internal::isolate_within_arena((uint64_t (***)(void))&v32, 0);
  std::mutex::unlock((std::mutex *)(a1 + 48));
  pxrInternal__aapl__pxrReserved__::Plug_TaskArena::~Plug_TaskArena(&v21);
  char v8 = v25;
  __dmb(0xBu);
  if (v8)
  {
    uint8x8_t v9 = v25;
    __dmb(0xBu);
    unint64_t v10 = tbb::internal::concurrent_vector_base_v3::internal_capacity((tbb::internal::concurrent_vector_base_v3 *)&v23);
    if (v10 >= (unint64_t)v9) {
      unint64_t v11 = (unint64_t)v9;
    }
    else {
      unint64_t v11 = v10;
    }
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    int v17 = 0;
    uint64_t v18 = 0;
    uint64_t v16 = &v22;
    uint64_t v32 = &v22;
    uint64_t v33 = (void *)v11;
    uint64_t v34 = 0;
    sub_2168EB008(a4, (uint64_t)&v16, (uint64_t)&v32, v11);
    unint64_t v12 = *a4;
    double v13 = a4[1];
    while (v12 != v13)
    {
      uint64_t v14 = sub_2168E5D78(v12);
      sub_2168E6F08(v14);
      v12 += 2;
    }
  }
  else
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  sub_2168EAF18((unint64_t *)&v22);
  while (v29--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v28);
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::~TfScopeDescription((pxrInternal__aapl__pxrReserved__::TfScopeDescription *)v30);
}

void sub_2168E9EF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, pxrInternal__aapl__pxrReserved__::WorkDispatcher *a14, unint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25)
{
  std::mutex::unlock(v25);
  pxrInternal__aapl__pxrReserved__::Plug_TaskArena::~Plug_TaskArena(&a14);
  sub_2168EAF18(&a15);
  sub_21684E6B8((uint64_t)&a23);
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::~TfScopeDescription((pxrInternal__aapl__pxrReserved__::TfScopeDescription *)&a25);
  _Unwind_Resume(a1);
}

uint64_t sub_2168E9F58(pxrInternal__aapl__pxrReserved__::TfNotice *a1, uint64_t *a2)
{
  char v4 = sub_2168EADBC(a2);
  if (v5 & 1 | (unint64_t)v4)
  {
    unsigned int v6 = (const std::type_info *)sub_2168EAE60(a2);
    if (v6)
    {
      uint64_t v7 = (char *)sub_216851B24((uint64_t)a2);
      char v8 = (const std::type_info *)&unk_26C74DCC0;
      goto LABEL_6;
    }
  }
  else
  {
    unsigned int v6 = 0;
  }
  uint64_t v7 = 0;
  char v8 = (const std::type_info *)MEMORY[0x263F8C288];
LABEL_6:

  return pxrInternal__aapl__pxrReserved__::TfNotice::_Send(a1, v6, v7, v8);
}

void pxrInternal__aapl__pxrReserved__::PlugRegistry::GetPluginForType(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v6 = a1;
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)v4);
  if (v4[0] == a1)
  {
    v4[0] = "plug/registry.cpp";
    v4[1] = "GetPluginForType";
    void v4[2] = 185;
    v4[3] = "PlugPluginPtr pxrInternal__aapl__pxrReserved__::PlugRegistry::GetPluginForType(TfType) const";
    char v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"Unknown base type");
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    sub_2168E5C88(&v6, a2);
  }
}

void pxrInternal__aapl__pxrReserved__::PlugRegistry::GetPluginWithName(unsigned __int8 *a1@<X1>, void *a2@<X8>)
{
}

void pxrInternal__aapl__pxrReserved__::PlugRegistry::GetDataFromPluginMetaData(uint64_t a1@<X1>, const void **a2@<X2>, pxrInternal__aapl__pxrReserved__::JsValue *a3@<X8>)
{
  uint64_t v16 = a1;
  pxrInternal__aapl__pxrReserved__::JsValue::JsValue(a3);
  uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v16);
  if (*(char *)(TypeName + 23) < 0)
  {
    sub_216778F24(__p, *(void **)TypeName, *(void *)(TypeName + 8));
  }
  else
  {
    long long v6 = *(_OWORD *)TypeName;
    uint64_t v15 = *(void *)(TypeName + 16);
    *(_OWORD *)std::string __p = v6;
  }
  pxrInternal__aapl__pxrReserved__::PlugRegistry::GetPluginForType(v16, &v12);
  uint64_t v7 = sub_2168E79D8(&v12);
  if (v8 & 1 | (unint64_t)v7)
  {
    uint8x8_t v9 = (pxrInternal__aapl__pxrReserved__::PlugPlugin *)sub_2168E5D78(&v12);
    pxrInternal__aapl__pxrReserved__::PlugPlugin::GetMetadataForType(v9, (const pxrInternal__aapl__pxrReserved__::TfType *)&v16, v11);
    sub_2168E92FC((uint64_t)v11, a2, a3);
    sub_216812ED4((uint64_t)v11, (void *)v11[1]);
  }
  uint64_t v10 = v13;
  if (v13 && atomic_fetch_add_explicit((atomic_uint *volatile)(v13 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete(__p[0]);
  }
}

void sub_2168EA190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  sub_216812ED4((uint64_t)&a10, a11);
  uint64_t v22 = a14;
  if (a14 && atomic_fetch_add_explicit((atomic_uint *volatile)(a14 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  if (a20 < 0) {
    operator delete(__p);
  }
  unint64_t v23 = *(std::__shared_weak_count **)(v20 + 8);
  if (v23) {
    sub_216784EC4(v23);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::PlugRegistry::GetStringFromPluginMetaData(uint64_t a1@<X1>, const void **a2@<X2>, uint64_t a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::PlugRegistry::GetDataFromPluginMetaData(a1, a2, (pxrInternal__aapl__pxrReserved__::JsValue *)&v6);
  if (pxrInternal__aapl__pxrReserved__::JsValue::IsString((pxrInternal__aapl__pxrReserved__::JsValue *)&v6))
  {
    unint64_t String = pxrInternal__aapl__pxrReserved__::JsValue::GetString((pxrInternal__aapl__pxrReserved__::JsValue *)&v6);
    if (*(char *)(String + 23) < 0)
    {
      sub_216778F24((unsigned char *)a3, *(void **)String, *(void *)(String + 8));
    }
    else
    {
      long long v5 = *(_OWORD *)String;
      *(void *)(a3 + 16) = *(void *)(String + 16);
      *(_OWORD *)a3 = v5;
    }
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  if (v7) {
    sub_216784EC4(v7);
  }
}

void sub_2168EA2A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::PlugRegistry::FindTypeByName(uint64_t a1)
{
  sub_2168EA2EC();
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::FindByName(a1, v2, v3);
}

void sub_2168EA2EC()
{
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  v4[0] = (void **)&v5;
  if (atomic_load_explicit((atomic_ullong *volatile)&qword_267B8E670, memory_order_acquire) != -1)
  {
    uint64_t v2 = v4;
    char v8 = (unint64_t **)&v2;
    std::__call_once(&qword_267B8E670, &v8, (void (__cdecl *)(void *))sub_2168EB264);
  }
  if (v5 != v6)
  {
    pxrInternal__aapl__pxrReserved__::PlugNotice::DidRegisterPlugins::DidRegisterPlugins(v4, &v5);
    unint64_t v0 = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::PlugRegistry>::_instance);
    if (!v0) {
      pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::PlugRegistry>::_CreateInstance();
    }
    sub_2168EACD8((unint64_t **)&v2, v0);
    sub_2168E9F58((pxrInternal__aapl__pxrReserved__::TfNotice *)v4, (uint64_t *)&v2);
    uint64_t v1 = v3;
    if (v3 && atomic_fetch_add_explicit((atomic_uint *volatile)(v3 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
    }
    pxrInternal__aapl__pxrReserved__::PlugNotice::DidRegisterPlugins::~DidRegisterPlugins((pxrInternal__aapl__pxrReserved__::PlugNotice::DidRegisterPlugins *)v4);
  }
  v4[0] = (void **)&v5;
  sub_216850BF4(v4);
}

void sub_2168EA40C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, atomic_uint *a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a10)
  {
    if (atomic_fetch_add_explicit(a10 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a10 + 8))(a10);
    }
  }
  pxrInternal__aapl__pxrReserved__::PlugNotice::DidRegisterPlugins::~DidRegisterPlugins((pxrInternal__aapl__pxrReserved__::PlugNotice::DidRegisterPlugins *)&a11);
  a11 = (void **)&a15;
  sub_216850BF4(&a11);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::PlugRegistry::FindDerivedTypeByName(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a1;
  sub_2168EA2EC();
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::FindDerivedByName(&v5, a2, v3);
}

uint64_t pxrInternal__aapl__pxrReserved__::PlugRegistry::GetDirectlyDerivedTypes@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v6 = a1;
  sub_2168EA2EC();
  return pxrInternal__aapl__pxrReserved__::TfType::GetDirectlyDerivedTypes((pxrInternal__aapl__pxrReserved__::TfType *)&v6, v3, v4, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::PlugRegistry::GetAllDerivedTypes(uint64_t a1, uint64_t **a2)
{
  uint64_t v5 = a1;
  sub_2168EA2EC();
  return pxrInternal__aapl__pxrReserved__::TfType::GetAllDerivedTypes(&v5, a2, v3);
}

void pxrInternal__aapl__pxrReserved__::Plug_SetPaths(uint64_t a1, uint64_t a2, char a3)
{
  if ((long long *)a1 != &xmmword_267B8E678) {
    sub_21680F694((uint64_t)&xmmword_267B8E678, *(std::string **)a1, *(long long **)(a1 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3));
  }
  if ((long long *)a2 != (long long *)((char *)&xmmword_267B8E688 + 8)) {
    sub_21680F694((uint64_t)&xmmword_267B8E688 + 8, *(std::string **)a2, *(long long **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  }
  byte_267B8E6A8 = a3;
}

void sub_2168EA5E0()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B8E6B0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B8E6B0))
  {
    xmmword_267B8E688 = 0u;
    unk_267B8E698 = 0u;
    xmmword_267B8E678 = 0u;
    byte_267B8E6A8 = 1;
    __cxa_atexit((void (*)(void *))sub_2168EAB8C, &xmmword_267B8E678, &dword_216758000);
    __cxa_guard_release(&qword_267B8E6B0);
  }
}

void *sub_2168EA674(uint64_t a1)
{
  void v10[4] = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(std::string ***)v1;
  int v4 = **(unsigned __int8 **)(v1 + 8);
  uint64_t v5 = operator new(0x20uLL);
  *uint64_t v5 = &unk_26C74DB68;
  v5[1] = sub_2168E9AB8;
  v5[2] = 0;
  void v5[3] = v2;
  v10[3] = v5;
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = operator new(0x28uLL);
  *uint64_t v7 = &unk_26C74DC28;
  v7[1] = sub_2168EA7BC;
  v7[2] = 0;
  void v7[3] = v2;
  void v7[4] = v6;
  double v9[3] = v7;
  pxrInternal__aapl__pxrReserved__::Plug_ReadPlugInfo(v3, v4 != 0, (uint64_t)v10, (uint64_t)v9, *(void *)(v1 + 32));
  sub_2168DED8C(v9);
  return sub_2168DED08(v10);
}

void sub_2168EA794(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_2168DED8C((uint64_t *)va);
  sub_2168DED08((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_2168EA7BC(int a1, const char **this, uint64_t a3)
{
  if (!pxrInternal__aapl__pxrReserved__::Plug_RegistrationMetadata::PassesEntitlementCheck((pxrInternal__aapl__pxrReserved__::Plug_RegistrationMetadata *)this)) {
    return;
  }
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  char v17 = 0;
  if (*(_DWORD *)this == 1)
  {
    sub_2168E4AB0((uint64_t)this, (uint64_t)&v10);
    goto LABEL_6;
  }
  if (*(_DWORD *)this == 3)
  {
    sub_2168E4FE8((uint64_t)this, (uint64_t)&v10);
LABEL_6:
    uint64_t v6 = (atomic_uint *)v11;
    uint64_t v15 = v10;
    uint64_t v16 = (atomic_uint *)v11;
    char v17 = v12;
    if ((_BYTE)v12)
    {
      sub_2168EAA04(a3, &v15, v5, &v10);
      uint64_t v6 = v16;
    }
    if (v6)
    {
      if (atomic_fetch_add_explicit(v6 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v6 + 8))(v6);
      }
    }
    return;
  }
  uint64_t v10 = "plug/registry.cpp";
  unint64_t v11 = "_RegisterPlugin";
  uint64_t v12 = 93;
  uint64_t v13 = "void pxrInternal__aapl__pxrReserved__::PlugRegistry::_RegisterPlugin(const Plug_RegistrationMetadata &, Concurre"
        "ntVector *) [ConcurrentVector = tbb::concurrent_vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__"
        "aapl__pxrReserved__::PlugPlugin>>]";
  char v14 = 0;
  uint8x8_t v9 = this[4];
  char v8 = (const char *)(this + 4);
  uint64_t v7 = v9;
  if (v8[23] >= 0) {
    uint64_t v7 = v8;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Tried to register a plugin of unknown type (maybe from %s)", v7);
}

void sub_2168EA8E4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 32);
  if (v3) {
    sub_217324208(v3);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_2168EA904(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26C74DB68;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_2168EA958(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C74DB68;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_2168EA990(void *a1)
{
  uint64_t v1 = a1[2];
  uint64_t v2 = (uint64_t (*)(void *))a1[1];
  uint64_t v3 = (void *)(a1[3] + (v1 >> 1));
  if (v1) {
    return (*(uint64_t (**)(void))(*v3 + v2))();
  }
  else {
    return v2(v3);
  }
}

uint64_t sub_2168EA9B8(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C74DC00)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2168EA9F8()
{
  return &unk_26C74DC00;
}

void *sub_2168EAA04@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X3>, void *a4@<X8>)
{
  __n128 result = (void *)tbb::internal::concurrent_vector_base_v3::internal_push_back((atomic_ullong *)(a1 + 8), 16, &v10, a3);
  unint64_t v11 = result;
  *__n128 result = *a2;
  uint64_t v7 = a2[1];
  result[1] = v7;
  if (v7)
  {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 + 8), 1u, memory_order_relaxed);
    __n128 result = v11;
  }
  unint64_t v8 = v10;
  *a4 = a1;
  a4[1] = v8;
  a4[2] = result;
  return result;
}

__n128 sub_2168EAA84(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_26C74DC28;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_2168EAAD8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C74DC28;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_2168EAB10(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = (uint64_t (*)(void *, uint64_t, void))a1[1];
  int v4 = (void *)(a1[3] + (v2 >> 1));
  if (v2) {
    uint64_t v3 = *(uint64_t (**)(void *, uint64_t, void))(*v4 + v3);
  }
  return v3(v4, a2, a1[4]);
}

uint64_t sub_2168EAB40(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C74DCA8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2168EAB80()
{
  return &unk_26C74DCA8;
}

void **sub_2168EAB8C(void **a1)
{
  uint64_t v3 = a1 + 3;
  sub_216782F20(&v3);
  uint64_t v3 = a1;
  sub_216782F20(&v3);
  return a1;
}

uint64_t *sub_2168EABD4()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74DCC0, (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74DCC0, (char *)0x70, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168EAC94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

unint64_t **sub_2168EACD8(unint64_t **a1, unint64_t *a2)
{
  *a1 = a2;
  a1[1] = 0;
  if (a2)
  {
    sub_21685203C(a2, &v6);
    uint64_t v3 = (atomic_uint *)a1[1];
    a1[1] = (unint64_t *)v6;
    uint64_t v6 = 0;
    if (v3)
    {
      if (atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
      }
      uint64_t v4 = v6;
      if (v6 && atomic_fetch_add_explicit((atomic_uint *volatile)(v6 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      }
    }
  }
  return a1;
}

void sub_2168EADA4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 + 8);
  if (v3) {
    sub_217324208(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t (*sub_2168EADBC(void *a1))(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1 + 1;
  if (!v3) {
    return 0;
  }
  int v4 = *(unsigned __int8 *)(sub_216850B68(v2) + 14);
  if (*a1) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    return 0;
  }
  else {
    return sub_2168EAE1C;
  }
}

uint64_t sub_2168EAE1C(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1 + 1;
  if (!v3) {
    return 0;
  }
  if (*(unsigned char *)(sub_216850B68(v2) + 14)) {
    return *a1;
  }
  return 0;
}

uint64_t sub_2168EAE60(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1 + 1;
  if (!v3
    || ((v4 = *(unsigned __int8 *)(sub_216850B68(v2) + 14), result = *a1, v4) ? (BOOL v6 = result == 0) : (BOOL v6 = 1), v6))
  {
    uint64_t v7 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/weakPtrFacade.h", 47);
    v8[0] = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/weakPtrFacade.h", (uint64_t)v7, 0x2Fu);
    v8[1] = "operator->";
    float64x2_t v8[2] = 216;
    void v8[3] = "DataType *pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr, pxr"
            "Internal__aapl__pxrReserved__::PlugRegistry>::operator->() const [PtrTemplate = pxrInternal__aapl__pxrReserv"
            "ed__::TfWeakPtr, Type = pxrInternal__aapl__pxrReserved__::PlugRegistry]";
    char v9 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError((uint64_t)v8, (pxrInternal__aapl__pxrReserved__ *)(0x8000000217456CB0 & 0x7FFFFFFFFFFFFFFFLL));
  }
  return result;
}

uint64_t sub_2168EAF08(int a1, tbb::internal *this, uint64_t a3, void *a4)
{
  return tbb::internal::NFS_Allocate((unint64_t)this, 16, 0, a4);
}

unint64_t *sub_2168EAF18(unint64_t *a1)
{
  uint64_t v2 = (tbb::internal::concurrent_vector_base_v3 *)(a1 + 1);
  uint64_t v3 = (void *)a1[4];
  unint64_t v4 = tbb::internal::concurrent_vector_base_v3::internal_clear((tbb::internal::concurrent_vector_base_v3 *)(a1 + 1), (void (*)(void *, unint64_t))tbb::concurrent_vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::PlugPlugin>,tbb::cache_aligned_allocator<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::PlugPlugin>>>::destroy_array);
  sub_216850F48((uint64_t)a1, v3, v4, a1[2]);
  tbb::internal::concurrent_vector_base_v3::~concurrent_vector_base_v3(v2, v5);
  return a1;
}

atomic_uint *tbb::concurrent_vector<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::PlugPlugin>,tbb::cache_aligned_allocator<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::PlugPlugin>>>::destroy_array(atomic_uint *result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    uint64_t v3 = (atomic_uint **)&result[4 * a2 - 2];
    do
    {
      uint64_t result = *v3;
      if (*v3)
      {
        if (atomic_fetch_add_explicit(result + 2, 0xFFFFFFFF, memory_order_release) == 1) {
          uint64_t result = (atomic_uint *)(*(uint64_t (**)(atomic_uint *))(*(void *)result + 8))(result);
        }
      }
      v3 -= 2;
      --v2;
    }
    while (v2);
  }
  return result;
}

void *sub_2168EB008(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v11 = result;
  char v12 = 0;
  if (a4)
  {
    uint64_t v6 = (uint64_t)result;
    sub_21682BF78(result, a4);
    long long v9 = *(_OWORD *)a2;
    uint64_t v10 = *(void *)(a2 + 16);
    long long v7 = *(_OWORD *)a3;
    uint64_t v8 = *(void *)(a3 + 16);
    return sub_2168EB0A0(v6, &v9, &v7);
  }
  return result;
}

void sub_2168EB08C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_216850BF4((void ***)va);
  _Unwind_Resume(a1);
}

void *sub_2168EB0A0(uint64_t a1, long long *a2, long long *a3)
{
  unint64_t v4 = *(void **)(a1 + 8);
  uint64_t v5 = *((void *)a2 + 2);
  long long v6 = *a3;
  uint64_t v7 = *((void *)a3 + 2);
  long long v11 = *a2;
  uint64_t v12 = v5;
  long long v9 = v6;
  uint64_t v10 = v7;
  uint64_t result = sub_2168EB10C(a1 + 16, (uint64_t *)&v11, &v9, v4);
  *(void *)(a1 + 8) = result;
  return result;
}

void sub_2168EB104(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void *sub_2168EB10C(uint64_t a1, uint64_t *a2, void *a3, void *a4)
{
  unint64_t v4 = a4;
  uint64_t v19 = a4;
  uint64_t v20 = a4;
  v17[0] = a1;
  v17[1] = &v19;
  void v17[2] = &v20;
  char v18 = 0;
  if (a2[1] != a3[1] || *a2 != *a3)
  {
    do
    {
      uint64_t v8 = (void *)sub_2168EB204(a2);
      *unint64_t v4 = *v8;
      uint64_t v9 = v8[1];
      v4[1] = v9;
      if (v9) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v9 + 8), 1u, memory_order_relaxed);
      }
      uint64_t v10 = a2[1];
      uint64_t v11 = a2[2];
      uint64_t v12 = v10 + 1;
      a2[1] = v10 + 1;
      if (v11)
      {
        uint64_t v13 = v11 + 16;
        if (((v10 - 1) & v12) != 0) {
          uint64_t v14 = v13;
        }
        else {
          uint64_t v14 = 0;
        }
        a2[2] = v14;
      }
      unint64_t v4 = v20 + 2;
      v20 += 2;
    }
    while (v12 != a3[1] || *a2 != *a3);
  }
  char v18 = 1;
  sub_2168E49F4((uint64_t)v17);
  return v4;
}

void sub_2168EB1F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2168EB204(uint64_t *a1)
{
  uint64_t result = a1[2];
  if (!result)
  {
    uint64_t v4 = *a1;
    unint64_t v3 = a1[1];
    unint64_t v5 = sub_216851020(v3);
    uint64_t v6 = *(void *)(v4 + 32);
    __dmb(0xBu);
    uint64_t result = *(void *)(v6 + 8 * v5) + 16 * (v3 - ((1 << v5) & 0xFFFFFFFFFFFFFFELL));
    a1[2] = result;
  }
  return result;
}

void sub_2168EB264(uint64_t ***a1)
{
  uint64_t v1 = **a1;
  uint64_t v2 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::PlugRegistry>::_instance);
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::PlugRegistry>::_CreateInstance();
  }
  sub_216779094(__p, "PXR_DISABLE_STANDARD_PLUG_SEARCH_PATH");
  BOOL v3 = pxrInternal__aapl__pxrReserved__::TfGetenvBool((const char *)__p, 0);
  BOOL v4 = v3;
  if (SHIBYTE(v12) < 0)
  {
    operator delete(__p[0]);
    if (v4) {
      return;
    }
  }
  else if (v3)
  {
    return;
  }
  sub_2168EA5E0();
  unint64_t v5 = (uint64_t *)*((void *)&xmmword_267B8E688 + 1);
  for (uint64_t i = (uint64_t *)unk_267B8E698; v5 != i; v5 += 3)
  {
    if (sub_2168DD040(3))
    {
      uint64_t v9 = v5;
      if (*((char *)v5 + 23) < 0) {
        uint64_t v9 = (uint64_t *)*v5;
      }
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"%s", v7, v8, v9);
    }
  }
  sub_2168EA5E0();
  sub_2168EA5E0();
  sub_2168E9D0C(v2, (char **)&xmmword_267B8E678, byte_267B8E6A8, (uint64_t **)__p);
  uint64_t v10 = *v1;
  sub_2168EB3BC(*v1);
  *(_OWORD *)uint64_t v10 = *(_OWORD *)__p;
  *(void *)(v10 + 16) = v12;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v12 = 0;
  uint64_t v13 = __p;
  sub_216850BF4(&v13);
}

void sub_2168EB3A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2168EB3BC(uint64_t a1)
{
  if (*(void *)a1)
  {
    sub_216850C48((atomic_uint *)a1, *(void *)a1);
    operator delete(*(void **)a1);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
}

void pxrInternal__aapl__pxrReserved__::Plug_StaticInterfaceBase::_LoadAndInstantiate(pxrInternal__aapl__pxrReserved__::Plug_StaticInterfaceBase *this, std::type_info *a2)
{
  v34[4] = *MEMORY[0x263EF8340];
  BOOL v4 = (char *)atomic_load((unint64_t *)&qword_267B8E6B8);
  if (!v4) {
    BOOL v4 = sub_2168E8DD8(&qword_267B8E6B8);
  }
  std::mutex::lock((std::mutex *)v4);
  unsigned __int8 v5 = atomic_load((unsigned __int8 *)this);
  if ((v5 & 1) == 0)
  {
    std::string __p = &unk_26C74DCE8;
    long long v30 = (const char *)this;
    p_p = &__p;
    sub_21687BABC((uint64_t)v34, (uint64_t)&__p);
    sub_21686060C(&__p);
    pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)a2, (uint64_t)&__p);
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::FindByName((uint64_t)&__p, v6, v7);
    if (SHIBYTE(v31) < 0) {
      operator delete(__p);
    }
    uint64_t v9 = pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&__p);
    if (*(void **)v8 == __p)
    {
      std::string __p = "plug/staticInterface.cpp";
      long long v30 = "_LoadAndInstantiate";
      uint64_t v31 = 64;
      p_p = (void **)"void pxrInternal__aapl__pxrReserved__::Plug_StaticInterfaceBase::_LoadAndInstantiate(const std::type_info &) const";
      char v33 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Failed to load plugin interface: Can't find type %s", (const char *)(a2->__type_name & 0x7FFFFFFFFFFFFFFFLL));
    }
    else
    {
      Root = (pxrInternal__aapl__pxrReserved__::PlugRegistry *)pxrInternal__aapl__pxrReserved__::TfType::GetRoot(v9);
      if (*(void *)v8 == *(void *)Root)
      {
        std::string __p = "plug/staticInterface.cpp";
        long long v30 = "_LoadAndInstantiate";
        uint64_t v31 = 70;
        p_p = (void **)"void pxrInternal__aapl__pxrReserved__::Plug_StaticInterfaceBase::_LoadAndInstantiate(const std::t"
                       "ype_info &) const";
        char v33 = 0;
        uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v8);
        if (*(char *)(TypeName + 23) >= 0) {
          char v21 = (const char *)TypeName;
        }
        else {
          char v21 = *(const char **)TypeName;
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Failed to load plugin interface: Can't manufacture type %s", v21);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::PlugRegistry::GetInstance(Root);
        pxrInternal__aapl__pxrReserved__::PlugRegistry::GetPluginForType(*(void *)v8, &v27);
        uint64_t v11 = sub_2168E79D8(&v27);
        if (v12 & 1 | (unint64_t)v11)
        {
          uint64_t v13 = (pxrInternal__aapl__pxrReserved__::PlugPlugin *)sub_2168E5D78(&v27);
          if (pxrInternal__aapl__pxrReserved__::PlugPlugin::Load(v13))
          {
            uint64_t v16 = sub_2168EB838(v8, v14, v15);
            if (v16)
            {
              uint64_t v17 = (*(uint64_t (**)(void *))(*(void *)v16 + 16))(v16);
              *((void *)this + 1) = v17;
              if (!v17)
              {
                std::string __p = "plug/staticInterface.cpp";
                long long v30 = "_LoadAndInstantiate";
                uint64_t v31 = 104;
                p_p = (void **)"void pxrInternal__aapl__pxrReserved__::Plug_StaticInterfaceBase::_LoadAndInstantiate(cons"
                               "t std::type_info &) const";
                char v33 = 0;
                uint64_t v18 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v8);
                if (*(char *)(v18 + 23) >= 0) {
                  uint64_t v19 = (const char *)v18;
                }
                else {
                  uint64_t v19 = *(const char **)v18;
                }
                pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Failed to load plugin interface: Plugin didn't manufacture an instance of %s", v19);
              }
            }
            else
            {
              std::string __p = "plug/staticInterface.cpp";
              long long v30 = "_LoadAndInstantiate";
              uint64_t v31 = 95;
              p_p = (void **)"void pxrInternal__aapl__pxrReserved__::Plug_StaticInterfaceBase::_LoadAndInstantiate(const "
                             "std::type_info &) const";
              char v33 = 0;
              uint64_t v24 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v8);
              if (*(char *)(v24 + 23) >= 0) {
                uint64_t v25 = (const char *)v24;
              }
              else {
                uint64_t v25 = *(const char **)v24;
              }
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Failed to load plugin interface: No default constructor for type %s", v25);
            }
          }
        }
        else
        {
          std::string __p = "plug/staticInterface.cpp";
          long long v30 = "_LoadAndInstantiate";
          uint64_t v31 = 79;
          p_p = (void **)"void pxrInternal__aapl__pxrReserved__::Plug_StaticInterfaceBase::_LoadAndInstantiate(const std:"
                         ":type_info &) const";
          char v33 = 0;
          uint64_t v22 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v8);
          if (*(char *)(v22 + 23) >= 0) {
            unint64_t v23 = (const char *)v22;
          }
          else {
            unint64_t v23 = *(const char **)v22;
          }
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to load plugin interface: Can't find plugin that defines type %s", v23);
        }
        uint64_t v26 = v28;
        if (v28 && atomic_fetch_add_explicit((atomic_uint *volatile)(v28 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
          (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
        }
      }
    }
    sub_2168EB980(v34);
  }
  std::mutex::unlock((std::mutex *)v4);
}

void sub_2168EB78C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, atomic_uint *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a12)
  {
    if (atomic_fetch_add_explicit(a12 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)a12 + 8))(a12);
    }
  }
  sub_2168EB980(&a21);
  std::mutex::unlock(v21);
  _Unwind_Resume(a1);
}

void *sub_2168EB838(pxrInternal__aapl__pxrReserved__::TfType *a1, uint64_t a2, char *a3)
{
  uint64_t result = (void *)pxrInternal__aapl__pxrReserved__::TfType::_GetFactory(a1, a2, a3);
  if (result)
  {
  }
  return result;
}

void *sub_2168EB8B0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26C74DCE8;
  result[1] = v3;
  return result;
}

uint64_t sub_2168EB8F8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C74DCE8;
  a2[1] = v2;
  return result;
}

uint64_t sub_2168EB924(uint64_t result)
{
  return result;
}

uint64_t sub_2168EB934(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C74DD48)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2168EB974()
{
  return &unk_26C74DD48;
}

void *sub_2168EB980(void *a1)
{
  uint64_t v2 = a1[3];
  if (!v2) {
    sub_21683A7CC();
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 48))(v2);

  return sub_21686060C(a1);
}

void sub_2168EB9EC()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::VT_LOG_STACK_ON_ARRAY_DETACH_COPY)) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
  }
}

void pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, const char *a2, char *a3)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B8E6C8, memory_order_acquire) & 1) == 0)
  {
    unsigned __int8 v5 = a2;
    int v3 = __cxa_guard_acquire(&qword_267B8E6C8);
    a2 = v5;
    if (v3)
    {
      BOOL v4 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::VT_LOG_STACK_ON_ARRAY_DETACH_COPY);
      if (!v4) {
        pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
      }
      byte_267B8E6C0 = *v4;
      __cxa_guard_release(&qword_267B8E6C8);
      a2 = v5;
    }
  }
  if (byte_267B8E6C0)
  {
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Detach/copy VtArray (%s)", a2, a3, a2);
    pxrInternal__aapl__pxrReserved__::TfLogStackTrace((char *)&__p, 0);
    if (v7 < 0) {
      operator delete(__p);
    }
  }
}

void sub_2168EBB04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
}

pxrInternal__aapl__pxrReserved__::VtDictionary *pxrInternal__aapl__pxrReserved__::VtDictionary::VtDictionary(pxrInternal__aapl__pxrReserved__::VtDictionary *this, const void ****a2)
{
  *(void *)this = 0;
  int v3 = *a2;
  if (*a2)
  {
    BOOL v4 = (uint64_t *)operator new(0x18uLL);
    sub_2168EE264(v4, v3);
    sub_2168EBBB8((void ***)this, (void **)v4);
  }
  return this;
}

void sub_2168EBB90(_Unwind_Exception *a1)
{
  operator delete(v2);
  sub_2168EBBB8(v1, 0);
  _Unwind_Resume(a1);
}

void sub_2168EBBB8(void ***a1, void **a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    sub_2168EE1B8((uint64_t)v2, v2[1]);
    operator delete(v2);
  }
}

void *pxrInternal__aapl__pxrReserved__::VtDictionary::VtDictionary(void *a1, const void **a2, uint64_t a3)
{
  uint64_t v6 = operator new(0x18uLL);
  sub_2168EE618((uint64_t)v6, a2, &a2[5 * a3]);
  *a1 = v6;
  return a1;
}

void sub_2168EBC70(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

const void ****pxrInternal__aapl__pxrReserved__::VtDictionary::operator=(const void ****a1, const void ****a2)
{
  if (a1 != a2)
  {
    int v3 = *a2;
    if (*a2)
    {
      BOOL v4 = (uint64_t *)operator new(0x18uLL);
      sub_2168EE264(v4, v3);
    }
    else
    {
      BOOL v4 = 0;
    }
    sub_2168EBBB8(a1, (void **)v4);
  }
  return a1;
}

void sub_2168EBCEC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtDictionary::operator[](pxrInternal__aapl__pxrReserved__::VtDictionary *a1, long long *a2)
{
  sub_216851EE4((uint64_t)&v8, "Vt", "VtDictionary::operator[]");
  pxrInternal__aapl__pxrReserved__::VtDictionary::_CreateDictIfNeeded(a1);
  BOOL v4 = *(uint64_t ***)a1;
  uint64_t v10 = a2;
  unsigned __int8 v5 = sub_2168EE69C(v4, (const void **)a2, (uint64_t)&unk_2174BFD90, &v10);
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v5 + 7;
}

void sub_2168EBD90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::VtDictionary::_CreateDictIfNeeded(pxrInternal__aapl__pxrReserved__::VtDictionary *this)
{
  if (!*(void *)this)
  {
    sub_216851EE4((uint64_t)&v4, "Vt", "VtDictionary::_CreateDictIfNeeded");
    uint64_t v2 = operator new(0x18uLL);
    v2[2] = 0;
    v2[1] = 0;
    *uint64_t v2 = v2 + 1;
    sub_2168EBBB8((void ***)this, (void **)v2);
    while (v5--)
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v4);
  }
}

void sub_2168EBE30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtDictionary::count(uint64_t *a1, const void **a2)
{
  uint64_t result = *a1;
  if (result) {
    return sub_21677B088(result, a2);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtDictionary::count(pxrInternal__aapl__pxrReserved__::VtDictionary *this, const char *a2)
{
  int v3 = a2;
  uint64_t result = *(void *)this;
  if (result) {
    return sub_2168EE7DC(result, &v3);
  }
  return result;
}

uint64_t **pxrInternal__aapl__pxrReserved__::VtDictionary::erase(uint64_t ***a1, const void **a2)
{
  uint64_t result = *a1;
  if (result) {
    return (uint64_t **)sub_2168EE904(result, a2);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::VtDictionary::erase(uint64_t *a1, uint64_t a2, char *a3)
{
  v5[0] = a2;
  v5[1] = a3;
  int v3 = (uint64_t **)*a1;
  uint64_t v4 = (uint64_t *)sub_2168EBEF0(v5, *a1, a3);
  sub_2167AE00C(v3, v4);
  sub_2168EE214((uint64_t)(v4 + 4));
  operator delete(v4);
}

uint64_t sub_2168EBEF0(void *a1, uint64_t a2, char *a3)
{
  uint64_t v3 = a1[1];
  if (v3) {
    BOOL v4 = v3 == a2;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    v6[0] = "vt/dictionary.h";
    v6[1] = "GetUnderlyingIterator";
    unint64_t v6[2] = 147;
    v6[3] = "UnderlyingIterator pxrInternal__aapl__pxrReserved__::VtDictionary::Iterator<std::map<std::string, pxrInterna"
            "l__aapl__pxrReserved__::VtValue, std::less<void>> *, std::__map_iterator<std::__tree_iterator<std::__value_t"
            "ype<std::string, pxrInternal__aapl__pxrReserved__::VtValue>, std::__tree_node<std::__value_type<std::string,"
            " pxrInternal__aapl__pxrReserved__::VtValue>, void *> *, long>>>::GetUnderlyingIterator(UnderlyingMapPtr) con"
            "st [UnderlyingMapPtr = std::map<std::string, pxrInternal__aapl__pxrReserved__::VtValue, std::less<void>> *, "
            "UnderlyingIterator = std::__map_iterator<std::__tree_iterator<std::__value_type<std::string, pxrInternal__aa"
            "pl__pxrReserved__::VtValue>, std::__tree_node<std::__value_type<std::string, pxrInternal__aapl__pxrReserved_"
            "_::VtValue>, void *> *, long>>]";
    char v7 = 0;
    int v8 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v6, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", a3, "!_underlyingMap || _underlyingMap == map");
  }
  if (v3) {
    return *a1;
  }
  else {
    return a2 + 8;
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtDictionary::erase(uint64_t *result, uint64_t a2, char *a3, uint64_t a4, uint64_t a5)
{
  v11[0] = a2;
  v11[1] = a3;
  v10[0] = a4;
  v10[1] = a5;
  int v5 = (uint64_t **)*result;
  if (*result)
  {
    uint64_t v6 = result;
    char v7 = (uint64_t *)sub_2168EBEF0(v11, (uint64_t)v5, a3);
    int v9 = (uint64_t *)sub_2168EBEF0(v10, *v6, v8);
    return sub_2168EE960(v5, v7, v9);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::VtDictionary::clear(pxrInternal__aapl__pxrReserved__::VtDictionary *this)
{
  uint64_t v1 = *(void *)this;
  if (*(void *)this)
  {
    sub_2168EE1B8(*(void *)this, *(void **)(v1 + 8));
    *(void *)uint64_t v1 = v1 + 8;
    *(void *)(v1 + 16) = 0;
    *(void *)(v1 + 8) = 0;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::VtDictionary::find(uint64_t *a1, const void **a2)
{
  if (*a1) {
    return sub_21678C2D8(*a1, a2);
  }
  else {
    return 0;
  }
}

{
  if (*a1) {
    return sub_21678C2D8(*a1, a2);
  }
  else {
    return 0;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::VtDictionary::find(pxrInternal__aapl__pxrReserved__::VtDictionary *this, const char *a2)
{
  uint64_t v3 = a2;
  if (*(void *)this) {
    return sub_2168EE9C8(*(void *)this, &v3);
  }
  else {
    return 0;
  }
}

{
  const std::string::value_type *v3;

  uint64_t v3 = a2;
  if (*(void *)this) {
    return sub_2168EE9C8(*(void *)this, &v3);
  }
  else {
    return 0;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::VtDictionary::begin(pxrInternal__aapl__pxrReserved__::VtDictionary *this)
{
  if (*(void *)this) {
    return **(void **)this;
  }
  else {
    return 0;
  }
}

{
  if (*(void *)this) {
    return **(void **)this;
  }
  else {
    return 0;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::VtDictionary::end(pxrInternal__aapl__pxrReserved__::VtDictionary *this)
{
  return 0;
}

{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtDictionary::size(pxrInternal__aapl__pxrReserved__::VtDictionary *this)
{
  if (*(void *)this) {
    return *(void *)(*(void *)this + 16);
  }
  else {
    return 0;
  }
}

BOOL pxrInternal__aapl__pxrReserved__::VtDictionary::empty(pxrInternal__aapl__pxrReserved__::VtDictionary *this)
{
  return !*(void *)this || *(void *)(*(void *)this + 16) == 0;
}

uint64_t *pxrInternal__aapl__pxrReserved__::VtDictionary::swap(uint64_t *this, pxrInternal__aapl__pxrReserved__::VtDictionary *a2)
{
  uint64_t v2 = *this;
  *this = *(void *)a2;
  *(void *)a2 = v2;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtDictionary::insert@<X0>(pxrInternal__aapl__pxrReserved__::VtDictionary *a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  sub_216851EE4((uint64_t)&v11, "Vt", "VtDictionary::insert");
  pxrInternal__aapl__pxrReserved__::VtDictionary::_CreateDictIfNeeded(a1);
  uint64_t result = (uint64_t)sub_2168EEA48(*(uint64_t ***)a1, a2, (long long *)a2);
  int v8 = *(uint64_t ***)a1;
  if (*(void *)a1 + 8 == result && v8 != 0) {
    int v8 = 0;
  }
  *(void *)a3 = result;
  *(void *)(a3 + 8) = v8;
  *(unsigned char *)(a3 + 16) = v7;
  while (v12--)
    uint64_t result = pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v11);
  return result;
}

void sub_2168EC2A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath(uint64_t *a1, std::string *a2, char *__s)
{
  sub_216779094(__p, __s);
  pxrInternal__aapl__pxrReserved__::TfStringSplit(a2, (char *)__p, v9);
  uint64_t ValueAtPath = pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath(a1, (uint64_t)v9);
  uint64_t v10 = (void **)v9;
  sub_216782F20(&v10);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  return ValueAtPath;
}

void sub_2168EC340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  *(void *)(v16 - 24) = v15;
  sub_216782F20((void ***)(v16 - 24));
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *(const void ***)a2;
  uint64_t v2 = *(void *)(a2 + 8);
  if (*(void *)a2 == v2) {
    return 0;
  }
  BOOL v4 = (const void **)(v2 - 24);
  while (v3 != v4)
  {
    uint64_t v5 = *a1;
    if (!*a1) {
      return 0;
    }
    uint64_t v6 = sub_21678C2D8(*a1, v3);
    if (v5 + 8 == v6) {
      return 0;
    }
    uint64_t v7 = v6;
    char v8 = (uint64_t **)(v6 + 56);
    if (!sub_2168EC434((pxrInternal__aapl__pxrReserved__::VtValue *)(v6 + 56))) {
      return 0;
    }
    uint64_t v9 = *(void *)(v7 + 64);
    if ((v9 & 4) != 0) {
      a1 = (uint64_t *)(*(uint64_t (**)(uint64_t **))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v8);
    }
    else {
      a1 = *v8;
    }
    v3 += 3;
  }
  uint64_t v10 = *a1;
  if (!*a1) {
    return 0;
  }
  uint64_t v11 = sub_21678C2D8(*a1, v4);
  if (v10 + 8 == v11) {
    return 0;
  }
  else {
    return v11 + 56;
  }
}

uint64_t sub_2168EC434(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x8000000217473E6ALL & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;

  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C74DD70);
}

void pxrInternal__aapl__pxrReserved__::VtDictionary::_SetValueAtPathImpl(pxrInternal__aapl__pxrReserved__::VtDictionary *a1, long long *a2, long long *a3, void *a4)
{
  v20[2] = *MEMORY[0x263EF8340];
  uint64_t v7 = (char *)a2 + 24;
  if ((long long *)((char *)a2 + 24) == a3)
  {
    uint64_t v11 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[](a1, a2);
    sub_2168EC6DC(v11, a4);
  }
  else
  {
    int v12 = 0;
    v14[1] = (unsigned int *)&off_26C74DD80;
    sub_2168EEEA8(v14, (const void ****)&v12);
    sub_2168EDF48(__dst, a2, v14);
    *(_OWORD *)std::string __p = *(_OWORD *)__dst;
    uint64_t v19 = v16;
    __dst[1] = 0;
    uint64_t v16 = 0;
    __dst[0] = 0;
    sub_2168EDFA8(v20, v17);
    pxrInternal__aapl__pxrReserved__::VtDictionary::insert(a1, (const void **)__p, (uint64_t)v13);
    uint64_t v9 = v13[0];
    sub_2168EE084((uint64_t)v20);
    if (SHIBYTE(v19) < 0) {
      operator delete(__p[0]);
    }
    sub_2168EE084((uint64_t)v17);
    if (SHIBYTE(v16) < 0) {
      operator delete(__dst[0]);
    }
    sub_2168EE084((uint64_t)v14);
    sub_2168EBBB8(&v12, 0);
    __p[0] = 0;
    uint64_t v10 = (pxrInternal__aapl__pxrReserved__::VtValue *)(v9 + 56);
    sub_2168EC844(v10, (const void ****)__p);
    pxrInternal__aapl__pxrReserved__::VtDictionary::_SetValueAtPathImpl(__p, v7, a3, a4);
    sub_2168EC844(v10, (const void ****)__p);
    sub_2168EBBB8((void ***)__p, 0);
  }
}

void sub_2168EC690(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void **);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v11 = va_arg(va3, void);
  uint64_t v13 = va_arg(va3, void);
  uint64_t v14 = va_arg(va3, void);
  uint64_t v15 = va_arg(va3, void);
  uint64_t v16 = va_arg(va3, void);
  sub_2168EC808((uint64_t)va3);
  sub_2168EC808((uint64_t)va2);
  sub_2168EE084((uint64_t)va1);
  sub_2168EBBB8((void ***)va, 0);
  _Unwind_Resume(a1);
}

void *sub_2168EC6DC(void *a1, void *a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (a1 != a2)
  {
    if (a2[1])
    {
      sub_2168EDEE4((uint64_t)v8, (uint64_t)a1);
      uint64_t v4 = a2[1];
      a1[1] = v4;
      if ((~*((_DWORD *)a2 + 2) & 3) != 0) {
        (*(void (**)(void *, void *))((v4 & 0xFFFFFFFFFFFFFFF8) + 24))(a2, a1);
      }
      else {
        *a1 = *a2;
      }
      if (v9) {
        (*(void (**)(unsigned char *))(v9 + 32))(v8);
      }
    }
    else
    {
      uint64_t v5 = a1[1];
      if (v5) {
        BOOL v6 = (a1[1] & 3) == 3;
      }
      else {
        BOOL v6 = 1;
      }
      if (!v6) {
        (*(void (**)(void *))((v5 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
      }
      a1[1] = 0;
    }
  }
  return a1;
}

void sub_2168EC7CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a11) {
    (*(void (**)(char *))(a11 + 32))(&a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2168EC808(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

const void ****sub_2168EC844(pxrInternal__aapl__pxrReserved__::VtValue *a1, const void ****a2)
{
  if ((sub_2168EC434(a1) & 1) == 0)
  {
    BOOL v6 = 0;
    sub_2168EEF10((uint64_t)a1, (const void ****)&v6);
    sub_2168EBBB8(&v6, 0);
  }
  uint64_t result = sub_2168EEFE0((const void *****)a1);
  uint64_t v5 = *result;
  *uint64_t result = *a2;
  *a2 = v5;
  return result;
}

void sub_2168EC8AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EBBB8((void ***)va, 0);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtDictionary::SetValueAtPath(pxrInternal__aapl__pxrReserved__::VtDictionary *a1, std::string *a2, void *a3, char *__s)
{
  sub_216779094(__p, __s);
  pxrInternal__aapl__pxrReserved__::TfStringSplit(a2, (char *)__p, (uint64_t *)&v9);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v9 != v10) {
    pxrInternal__aapl__pxrReserved__::VtDictionary::_SetValueAtPathImpl(a1, v9, v10, a3);
  }
  __p[0] = &v9;
  sub_216782F20((void ***)__p);
}

void sub_2168EC950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::string __p = &a15;
  sub_216782F20((void ***)&__p);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtDictionary::SetValueAtPath(pxrInternal__aapl__pxrReserved__::VtDictionary *a1, long long **a2, void *a3)
{
  uint64_t v5 = *a2;
  BOOL v6 = a2[1];
  if (v5 != v6) {
    pxrInternal__aapl__pxrReserved__::VtDictionary::_SetValueAtPathImpl(a1, v5, v6, a3);
  }
}

void pxrInternal__aapl__pxrReserved__::VtDictionary::_EraseValueAtPathImpl(uint64_t *a1, const void **a2, const void **a3)
{
  uint64_t v3 = a2 + 3;
  uint64_t v4 = (char *)*a1;
  if (a2 + 3 == a3)
  {
    if (v4)
    {
      uint64_t v10 = (uint64_t **)*a1;
      sub_2168EE904(v10, a2);
    }
  }
  else if (v4)
  {
    uint64_t v7 = sub_21678C2D8(*a1, a2);
    if (v4 + 8 != (char *)v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = (pxrInternal__aapl__pxrReserved__::VtValue *)(v7 + 56);
      if (sub_2168EC434((pxrInternal__aapl__pxrReserved__::VtValue *)(v7 + 56)))
      {
        uint64_t v11 = 0;
        sub_2168EC844(v9, (const void ****)&v11);
        pxrInternal__aapl__pxrReserved__::VtDictionary::_EraseValueAtPathImpl(&v11, v3, a3);
        if (v11 && v11[2]) {
          sub_2168EC844(v9, (const void ****)&v11);
        }
        else {
          pxrInternal__aapl__pxrReserved__::VtDictionary::erase(a1, v8, v4);
        }
        sub_2168EBBB8(&v11, 0);
      }
    }
  }
}

void sub_2168ECAAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EBBB8((void ***)va, 0);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtDictionary::EraseValueAtPath(uint64_t *a1, std::string *a2, char *__s)
{
  sub_216779094(__p, __s);
  pxrInternal__aapl__pxrReserved__::TfStringSplit(a2, (char *)__p, (uint64_t *)&v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v7 != v8) {
    pxrInternal__aapl__pxrReserved__::VtDictionary::_EraseValueAtPathImpl(a1, v7, v8);
  }
  __p[0] = &v7;
  sub_216782F20((void ***)__p);
}

void sub_2168ECB40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::string __p = &a15;
  sub_216782F20((void ***)&__p);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtDictionary::EraseValueAtPath(uint64_t *a1, const void ***a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (v3 != v4) {
    pxrInternal__aapl__pxrReserved__::VtDictionary::_EraseValueAtPathImpl(a1, v3, v4);
  }
}

unint64_t pxrInternal__aapl__pxrReserved__::VtGetEmptyDictionary(pxrInternal__aapl__pxrReserved__ *this)
{
  uint64_t v1 = (void ***)atomic_load((unint64_t *)&qword_267B8E6D0);
  if (!v1)
  {
    sub_216851EE4((uint64_t)&v5, "Vt", "VtDictionary");
    uint64_t v1 = (void ***)malloc(8uLL);
    while (v6--)
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_End((uint64_t)v5);
    void *v1 = 0;
    uint64_t v5 = 0;
    sub_2168EBBB8(v1, 0);
    sub_2168EBBB8(&v5, 0);
    uint64_t v4 = 0;
    atomic_compare_exchange_strong(&qword_267B8E6D0, (unint64_t *)&v4, (unint64_t)v1);
    if (v4)
    {
      sub_2168EBBB8(v1, 0);
      free(v1);
      return atomic_load((unint64_t *)&qword_267B8E6D0);
    }
  }
  return (unint64_t)v1;
}

void pxrInternal__aapl__pxrReserved__::VtDictionaryOver(const void ****this@<X0>, uint64_t **a2@<X1>, const pxrInternal__aapl__pxrReserved__::VtDictionary *a3@<X2>, pxrInternal__aapl__pxrReserved__::VtDictionary *a4@<X8>)
{
}

void sub_2168ECCA4(_Unwind_Exception *a1)
{
  sub_2168EBBB8(v1, 0);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtDictionaryOver(pxrInternal__aapl__pxrReserved__ *this, uint64_t **a2, const pxrInternal__aapl__pxrReserved__::VtDictionary *a3)
{
  if (this)
  {
    int v3 = (int)a3;
    int v6 = *a2;
    if (*a2)
    {
      uint64_t v7 = *v6;
      if (v6 + 1 == (uint64_t *)*v6) {
        uint64_t v8 = 0;
      }
      else {
        uint64_t v8 = (uint64_t)v6;
      }
    }
    else
    {
      uint64_t v8 = 0;
      uint64_t v7 = 0;
    }
    sub_2168ECE20(this, v7, v8, 0, 0);
    if (v3)
    {
      uint64_t v11 = *(const char **)this;
      if (*(void *)this)
      {
        int v12 = *(char **)v11;
        if (v11 + 8 == *(const char **)v11) {
          uint64_t v11 = 0;
        }
      }
      else
      {
        int v12 = 0;
      }
      uint64_t v13 = 0;
      uint64_t v22 = v12;
      unint64_t v23 = v11;
      uint64_t v24 = 0;
      uint64_t v25 = 0;
      while (v11 != v13 || v13 && v22 != (char *)v24)
      {
        uint64_t v14 = sub_2168ECEE8(&v22, v9, v10);
        uint64_t v17 = *a2;
        if (*a2)
        {
          uint64_t v18 = sub_21678C2D8((uint64_t)*a2, (const void **)(*v14 + 32));
          if (v17 + 1 != (uint64_t *)v18)
          {
            uint64_t v19 = v18;
            uint64_t v20 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*sub_2168ECEE8(&v22, v15, v16) + 56);
            Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)(v19 + 56));
            sub_2168EE0D4(v20, Typeid);
          }
        }
        sub_2168ECF78(&v22, v15, v16);
        uint64_t v11 = v23;
        uint64_t v13 = v25;
      }
    }
  }
  else
  {
    uint64_t v22 = "vt/dictionary.cpp";
    unint64_t v23 = "VtDictionaryOver";
    uint64_t v24 = 326;
    uint64_t v25 = "void pxrInternal__aapl__pxrReserved__::VtDictionaryOver(VtDictionary *, const VtDictionary &, BOOL)";
    char v26 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v22, 1, (pxrInternal__aapl__pxrReserved__ *)"VtDictionaryOver: NULL dictionary pointer.");
  }
}

uint64_t sub_2168ECE20(pxrInternal__aapl__pxrReserved__::VtDictionary *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = sub_216851EE4((uint64_t)&v12, "Vt", "VtDictionary::insert (range)");
  if (a3 != a5 || a3 && a2 != a4)
  {
    pxrInternal__aapl__pxrReserved__::VtDictionary::_CreateDictIfNeeded(a1);
    uint64_t result = (uint64_t)sub_2168EF074(*(void **)a1, a2, a3, a4, a5);
  }
  while (v13--)
    uint64_t result = pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v12);
  return result;
}

void sub_2168ECED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_2168ECEE8(void *result, uint64_t a2, char *a3)
{
  uint64_t v3 = result[1];
  if (v3 == result[3] && (!v3 || *result == result[2]))
  {
    v4[0] = "tf/iterator.h";
    v4[1] = "operator->";
    void v4[2] = 287;
    v4[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtDictionary>::oper"
            "ator->() [T = pxrInternal__aapl__pxrReserved__::VtDictionary, Reverse = false]";
    char v5 = 0;
    int v6 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v4, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void *sub_2168ECF78(void *a1, uint64_t a2, char *a3)
{
  uint64_t v4 = a1[1];
  if (v4 == a1[3] && (!v4 || *a1 == a1[2]))
  {
    v6[0] = "tf/iterator.h";
    v6[1] = "operator++";
    unint64_t v6[2] = 250;
    v6[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::VtDic"
            "tionary>::operator++() [T = pxrInternal__aapl__pxrReserved__::VtDictionary, Reverse = false]";
    char v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v6, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    sub_2168EF1B0(a1, a2, a3);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::VtDictionaryOver(const char **this, const pxrInternal__aapl__pxrReserved__::VtDictionary *a2, pxrInternal__aapl__pxrReserved__::VtDictionary *a3)
{
  v32[3] = *MEMORY[0x263EF8340];
  if (a2)
  {
    if (a3)
    {
      uint64_t v4 = *this;
      if (*this)
      {
        char v5 = *(char **)v4;
        if (v4 + 8 == *(const char **)v4) {
          uint64_t v4 = 0;
        }
      }
      else
      {
        char v5 = 0;
      }
      uint64_t v8 = 0;
      uint64_t v27 = v5;
      uint64_t v28 = v4;
      uint64_t v29 = 0;
      long long v30 = 0;
      while (v4 != v8 || v8 && v27 != (char *)v29)
      {
        uint64_t v9 = sub_2168ED218(&v27, (uint64_t)a2, (char *)a3);
        uint64_t v12 = *(void *)a2;
        if (!*(void *)a2 || (uint64_t v13 = sub_21678C2D8(*(void *)a2, (const void **)(*v9 + 32)), v12 + 8 == v13))
        {
          uint64_t v18 = (const void **)sub_2168ED2A8(&v27, v10, v11);
          pxrInternal__aapl__pxrReserved__::VtDictionary::insert(a2, v18, (uint64_t)v32);
        }
        else
        {
          uint64_t v14 = sub_2168ED218(&v27, v10, v11);
          uint64_t v15 = (const pxrInternal__aapl__pxrReserved__::VtValue *)(v13 + 56);
          pxrInternal__aapl__pxrReserved__::VtValue::CastToTypeOf((pxrInternal__aapl__pxrReserved__::VtValue *)(*v14 + 56), v15, v32);
          sub_2168ED33C(v15, v32);
          sub_2168EE084((uint64_t)v32);
        }
        sub_2168ED448(&v27, v16, v17);
        uint64_t v4 = v28;
        uint64_t v8 = v30;
      }
    }
    else
    {
      int v6 = *this;
      if (*this)
      {
        char v7 = *(char **)v6;
        if (v6 + 8 == *(const char **)v6) {
          int v6 = 0;
        }
      }
      else
      {
        char v7 = 0;
      }
      uint64_t v19 = 0;
      uint64_t v27 = v7;
      uint64_t v28 = v6;
      uint64_t v29 = 0;
      long long v30 = 0;
      while (v6 != v19 || v19 && v27 != (char *)v29)
      {
        uint64_t v20 = *sub_2168ED218(&v27, (uint64_t)a2, (char *)a3);
        unint64_t v23 = sub_2168ED218(&v27, v21, v22);
        uint64_t v24 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[](a2, (long long *)(*v23 + 32));
        sub_2168EC6DC(v24, (void *)(v20 + 56));
        sub_2168ED448(&v27, v25, v26);
        int v6 = v28;
        uint64_t v19 = v30;
      }
    }
  }
  else
  {
    uint64_t v27 = "vt/dictionary.cpp";
    uint64_t v28 = "VtDictionaryOver";
    uint64_t v29 = 346;
    long long v30 = "void pxrInternal__aapl__pxrReserved__::VtDictionaryOver(const VtDictionary &, VtDictionary *, BOOL)";
    char v31 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v27, 1, (pxrInternal__aapl__pxrReserved__ *)"VtDictionaryOver: NULL dictionary pointer");
  }
}

void *sub_2168ED218(void *result, uint64_t a2, char *a3)
{
  uint64_t v3 = result[1];
  if (v3 == result[3] && (!v3 || *result == result[2]))
  {
    v4[0] = "tf/iterator.h";
    v4[1] = "operator->";
    void v4[2] = 287;
    v4[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__::VtDictionary>"
            "::operator->() [T = const pxrInternal__aapl__pxrReserved__::VtDictionary, Reverse = false]";
    char v5 = 0;
    int v6 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v4, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

uint64_t sub_2168ED2A8(void *a1, uint64_t a2, char *a3)
{
  uint64_t v3 = a1[1];
  if (v3 == a1[3] && (!v3 || *a1 == a1[2]))
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    void v5[2] = 271;
    void v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__::VtDictionary>"
            "::operator*() [T = const pxrInternal__aapl__pxrReserved__::VtDictionary, Reverse = false]";
    char v6 = 0;
    int v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return *a1 + 32;
}

void *sub_2168ED33C(void *a1, void *a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (a1 != a2)
  {
    if (a2[1])
    {
      sub_2168EDEE4((uint64_t)v8, (uint64_t)a1);
      uint64_t v4 = a2[1];
      a1[1] = v4;
      if ((~*((_DWORD *)a2 + 2) & 3) != 0) {
        (*(void (**)(void *, void *))((v4 & 0xFFFFFFFFFFFFFFF8) + 40))(a2, a1);
      }
      else {
        *a1 = *a2;
      }
      a2[1] = 0;
      if (v9) {
        (*(void (**)(unsigned char *))(v9 + 32))(v8);
      }
    }
    else
    {
      uint64_t v5 = a1[1];
      if (v5) {
        BOOL v6 = (a1[1] & 3) == 3;
      }
      else {
        BOOL v6 = 1;
      }
      if (!v6) {
        (*(void (**)(void *))((v5 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
      }
      a1[1] = 0;
    }
  }
  return a1;
}

void sub_2168ED430(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_21675DB74(a1);
  }
  _Unwind_Resume(a1);
}

void *sub_2168ED448(void *a1, uint64_t a2, char *a3)
{
  uint64_t v4 = a1[1];
  if (v4 == a1[3] && (!v4 || *a1 == a1[2]))
  {
    v6[0] = "tf/iterator.h";
    v6[1] = "operator++";
    unint64_t v6[2] = 250;
    v6[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__:"
            ":VtDictionary>::operator++() [T = const pxrInternal__aapl__pxrReserved__::VtDictionary, Reverse = false]";
    char v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v6, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    sub_2168EF104(a1, a2, a3);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::VtDictionaryOverRecursive(const void ****this@<X0>, const char **a2@<X1>, const pxrInternal__aapl__pxrReserved__::VtDictionary *a3@<X2>, pxrInternal__aapl__pxrReserved__::VtDictionary *a4@<X8>)
{
}

void sub_2168ED52C(_Unwind_Exception *a1)
{
  sub_2168EBBB8(v1, 0);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::VtDictionaryOverRecursive(pxrInternal__aapl__pxrReserved__ *this, const char **a2, const pxrInternal__aapl__pxrReserved__::VtDictionary *a3)
{
  if (this)
  {
    int v3 = (int)a3;
    BOOL v6 = *a2;
    if (*a2)
    {
      char v7 = *(char **)v6;
      if (v6 + 8 == *(const char **)v6) {
        BOOL v6 = 0;
      }
    }
    else
    {
      char v7 = 0;
    }
    uint64_t v8 = 0;
    uint64_t v29 = v7;
    long long v30 = v6;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    while (v6 != v8 || v8 && v29 != (char *)v31)
    {
      uint64_t v9 = sub_2168ED218(&v29, (uint64_t)a2, (char *)a3);
      if (sub_2168ED738((uint64_t *)this, (const void **)(*v9 + 32))
        && (uint64_t v12 = sub_2168ED218(&v29, v10, v11), sub_2168ED738((uint64_t *)a2, (const void **)(*v12 + 32))))
      {
        uint64_t v13 = sub_2168ED218(&v29, v10, v11);
        uint64_t v14 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)sub_2168ED794((uint64_t *)a2, (const void **)(*v13 + 32));
        uint64_t v17 = sub_2168ED218(&v29, v15, v16);
        uint64_t v18 = *(void *)this;
        if (*(void *)this) {
          uint64_t v18 = sub_21678C2D8(v18, (const void **)(*v17 + 32));
        }
        v27[0] = 0;
        uint64_t v19 = (pxrInternal__aapl__pxrReserved__::VtValue *)(v18 + 56);
        sub_2168EC844((pxrInternal__aapl__pxrReserved__::VtValue *)(v18 + 56), (const void ****)v27);
        pxrInternal__aapl__pxrReserved__::VtDictionaryOverRecursive((pxrInternal__aapl__pxrReserved__ *)v27, v14, 0, v20);
        sub_2168EC844(v19, (const void ****)v27);
        sub_2168EBBB8(v27, 0);
      }
      else
      {
        unint64_t v23 = (const void **)sub_2168ED2A8(&v29, v10, v11);
        pxrInternal__aapl__pxrReserved__::VtDictionary::insert(this, v23, (uint64_t)v27);
        if (!v28 && v3)
        {
          uint64_t v24 = (pxrInternal__aapl__pxrReserved__::VtValue *)(v27[0] + 7);
          uint64_t v25 = sub_2168ED218(&v29, v21, v22);
          Typeid = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)(*v25 + 56));
          sub_2168EE0D4(v24, Typeid);
        }
      }
      sub_2168ED448(&v29, v21, v22);
      BOOL v6 = v30;
      uint64_t v8 = v32;
    }
  }
  else
  {
    uint64_t v29 = "vt/dictionary.cpp";
    long long v30 = "VtDictionaryOverRecursive";
    uint64_t v31 = 383;
    uint64_t v32 = "void pxrInternal__aapl__pxrReserved__::VtDictionaryOverRecursive(VtDictionary *, const VtDictionary &, BOOL)";
    char v33 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v29, 1, (pxrInternal__aapl__pxrReserved__ *)"VtDictionaryOverRecursive: NULL dictionary pointer.");
  }
}

void sub_2168ED720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t sub_2168ED738(uint64_t *a1, const void **a2)
{
  uint64_t v2 = *a1;
  if (!*a1) {
    return 0;
  }
  uint64_t v3 = sub_21678C2D8(*a1, a2);
  if (v2 + 8 == v3) {
    return 0;
  }
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::VtValue *)(v3 + 56);

  return sub_2168EC434(v4);
}

uint64_t sub_2168ED794(uint64_t *a1, const void **a2)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = sub_21678C2D8(*a1, a2);
    if (v2 + 8 != v3) {
      return sub_2168EF25C((pxrInternal__aapl__pxrReserved__::VtValue *)(v3 + 56));
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  v10[0] = "vt/dictionary.h";
  v10[1] = "VtDictionaryGet";
  void v10[2] = 459;
  v10[3] = "const T &pxrInternal__aapl__pxrReserved__::VtDictionaryGet(const VtDictionary &, const std::string &) [T = px"
           "rInternal__aapl__pxrReserved__::VtDictionary]";
  char v11 = 0;
  int v12 = 4;
  std::operator+<char>();
  uint64_t v4 = std::string::append(&v7, "', which is not in the dictionary.");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  std::string::size_type v9 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((uint64_t)v10, (uint64_t)__p);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  return sub_2168EF25C((pxrInternal__aapl__pxrReserved__::VtValue *)(v3 + 56));
}

void sub_2168ED890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::VtDictionaryOverRecursive(const char **this, const pxrInternal__aapl__pxrReserved__::VtDictionary *a2, pxrInternal__aapl__pxrReserved__::VtDictionary *a3)
{
  v39[3] = *(void ***)MEMORY[0x263EF8340];
  if (a2)
  {
    int v3 = (int)a3;
    BOOL v6 = *this;
    if (*this)
    {
      std::string v7 = *(char **)v6;
      if (v6 + 8 == *(const char **)v6) {
        BOOL v6 = 0;
      }
    }
    else
    {
      std::string v7 = 0;
    }
    uint64_t v8 = 0;
    uint64_t v34 = v7;
    uint64_t v35 = v6;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    while (v6 != v8 || v8 && v34 != (char *)v36)
    {
      std::string::size_type v9 = sub_2168ED218(&v34, (uint64_t)a2, (char *)a3);
      if (sub_2168ED738((uint64_t *)this, (const void **)(*v9 + 32))
        && (int v12 = sub_2168ED218(&v34, v10, v11), sub_2168ED738((uint64_t *)a2, (const void **)(*v12 + 32))))
      {
        uint64_t v13 = sub_2168ED218(&v34, v10, v11);
        uint64_t v14 = (pxrInternal__aapl__pxrReserved__ *)sub_2168ED794((uint64_t *)this, (const void **)(*v13 + 32));
        uint64_t v17 = sub_2168ED218(&v34, v15, v16);
        if (*(void *)a2) {
          uint64_t v18 = sub_21678C2D8(*(void *)a2, (const void **)(*v17 + 32));
        }
        else {
          uint64_t v18 = 0;
        }
        v39[0] = 0;
        uint64_t v32 = (pxrInternal__aapl__pxrReserved__::VtValue *)(v18 + 56);
        sub_2168EC844((pxrInternal__aapl__pxrReserved__::VtValue *)(v18 + 56), (const void ****)v39);
        pxrInternal__aapl__pxrReserved__::VtDictionaryOverRecursive(v14, (const pxrInternal__aapl__pxrReserved__::VtDictionary *)v39, 0, v33);
        sub_2168EC844(v32, (const void ****)v39);
        sub_2168EBBB8(v39, 0);
      }
      else
      {
        uint64_t v19 = sub_2168ED218(&v34, v10, v11);
        if (v3)
        {
          uint64_t v22 = *(void *)a2;
          if (!*(void *)a2 || (uint64_t v23 = sub_21678C2D8(*(void *)a2, (const void **)(*v19 + 32)), v22 + 8 == v23))
          {
            uint64_t v31 = (const void **)sub_2168ED2A8(&v34, v20, v21);
            pxrInternal__aapl__pxrReserved__::VtDictionary::insert(a2, v31, (uint64_t)v39);
          }
          else
          {
            uint64_t v24 = sub_2168ED218(&v34, v20, v21);
            uint64_t v25 = (const pxrInternal__aapl__pxrReserved__::VtValue *)(v23 + 56);
            pxrInternal__aapl__pxrReserved__::VtValue::CastToTypeOf((pxrInternal__aapl__pxrReserved__::VtValue *)(*v24 + 56), v25, v39);
            sub_2168ED33C(v25, v39);
            sub_2168EE084((uint64_t)v39);
          }
        }
        else
        {
          uint64_t v28 = *v19;
          uint64_t v29 = sub_2168ED218(&v34, v20, v21);
          long long v30 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[](a2, (long long *)(*v29 + 32));
          sub_2168EC6DC(v30, (void *)(v28 + 56));
        }
      }
      sub_2168ED448(&v34, v26, v27);
      BOOL v6 = v35;
      uint64_t v8 = v37;
    }
  }
  else
  {
    uint64_t v34 = "vt/dictionary.cpp";
    uint64_t v35 = "VtDictionaryOverRecursive";
    uint64_t v36 = 423;
    uint64_t v37 = "void pxrInternal__aapl__pxrReserved__::VtDictionaryOverRecursive(const VtDictionary &, VtDictionary *, BOOL)";
    char v38 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v34, 1, (pxrInternal__aapl__pxrReserved__ *)"VtDictionaryOverRecursive: NULL dictionary pointer.");
  }
}

void sub_2168EDB34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168EBBB8((void ***)va, 0);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::operator==(void **a1, uint64_t *a2, char *a3)
{
  uint64_t v4 = *a1;
  if (*a1) {
    uint64_t v5 = v4[2];
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *a2;
  if (*a2) {
    uint64_t v6 = *(void *)(v6 + 16);
  }
  if (v5 != v6) {
    return 0;
  }
  if (v4)
  {
    std::string v7 = (void *)*v4;
    if (v4 + 1 == (void *)*v4) {
      uint64_t v4 = 0;
    }
  }
  else
  {
    std::string v7 = 0;
  }
  uint64_t v8 = 0;
  uint64_t v20 = v7;
  uint64_t v21 = v4;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  while (v4 != v8 || v8 && v20 != v22)
  {
    std::string::size_type v9 = sub_2168ED218(&v20, (uint64_t)a2, a3);
    uint64_t v10 = *a2;
    if (!*a2) {
      return 0;
    }
    uint64_t v11 = sub_21678C2D8(*a2, (const void **)(*v9 + 32));
    if (v10 + 8 == v11) {
      return 0;
    }
    uint64_t v14 = v11;
    uint64_t v15 = sub_2168ED218(&v20, v12, v13);
    uint64_t result = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)(*v15 + 56), (std::type_info *)(v14 + 56), v16);
    if (!result) {
      return result;
    }
    sub_2168ED448(&v20, v18, v19);
    uint64_t v4 = v21;
    uint64_t v8 = v23;
  }
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::operator!=(void **a1, uint64_t *a2, char *a3)
{
  return pxrInternal__aapl__pxrReserved__::operator==(a1, a2, a3) ^ 1;
}

void *pxrInternal__aapl__pxrReserved__::operator<<(void *a1, void **a2)
{
  LOBYTE(v23) = 123;
  sub_216779180(a1, (uint64_t)&v23, 1);
  uint64_t v4 = *a2;
  if (*a2)
  {
    uint64_t v5 = (void *)*v4;
    if (v4 + 1 == (void *)*v4) {
      uint64_t v4 = 0;
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v6 = 0;
  uint64_t v23 = v5;
  uint64_t v24 = v4;
  char v7 = 1;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  while (v4 != v6 || v6 && v23 != v25)
  {
    if ((v7 & 1) == 0) {
      sub_216779180(a1, (uint64_t)", ", 2);
    }
    char v27 = 39;
    uint64_t v8 = sub_216779180(a1, (uint64_t)&v27, 1);
    uint64_t v11 = sub_2168ED218(&v23, v9, v10);
    int v12 = *(char *)(*v11 + 55);
    if (v12 >= 0) {
      uint64_t v13 = *v11 + 32;
    }
    else {
      uint64_t v13 = *(void *)(*v11 + 32);
    }
    if (v12 >= 0) {
      uint64_t v14 = *(unsigned __int8 *)(*v11 + 55);
    }
    else {
      uint64_t v14 = *(void *)(*v11 + 40);
    }
    uint64_t v15 = sub_216779180(v8, v13, v14);
    uint64_t v16 = sub_216779180(v15, (uint64_t)"': ", 3);
    uint64_t v19 = sub_2168ED218(&v23, v17, v18);
    pxrInternal__aapl__pxrReserved__::operator<<((uint64_t)v16, *v19 + 56);
    sub_2168ED448(&v23, v20, v21);
    char v7 = 0;
    uint64_t v4 = v24;
    uint64_t v6 = v26;
  }
  LOBYTE(v23) = 125;
  sub_216779180(a1, (uint64_t)&v23, 1);
  return a1;
}

uint64_t *sub_2168EDDE0()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74DD70, (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74DD70, (char *)8, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168EDEA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_2168EDEE4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3) {
    BOOL v4 = (~(_BYTE)v3 & 3) == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    *(void *)(a1 + 8) = 0;
  }
  else
  {
    unint64_t v5 = v3 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(a1 + 8) = v5;
    if (v5) {
      (*(void (**)(uint64_t, uint64_t))(v5 + 40))(a2, a1);
    }
  }
  return a1;
}

void *sub_2168EDF48(void *__dst, long long *a2, void *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    std::string __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v5;
  }
  sub_2168EDFA8(__dst + 3, a3);
  return __dst;
}

void *sub_2168EDFA8(void *a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  a1[1] = 0;
  if (a2[1])
  {
    sub_2168EDEE4((uint64_t)v6, (uint64_t)a1);
    uint64_t v4 = a2[1];
    a1[1] = v4;
    if ((~*((_DWORD *)a2 + 2) & 3) != 0) {
      (*(void (**)(void *, void *))((v4 & 0xFFFFFFFFFFFFFFF8) + 40))(a2, a1);
    }
    else {
      *a1 = *a2;
    }
    a2[1] = 0;
    if (v7) {
      (*(void (**)(unsigned char *))(v7 + 32))(v6);
    }
  }
  return a1;
}

void sub_2168EE06C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_21675DB74(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2168EE084(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v3 = (*(void *)(a1 + 8) & 3) == 3;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3) {
    (*(void (**)(uint64_t))((v2 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  }
  *(void *)(a1 + 8) = 0;
  return a1;
}

pxrInternal__aapl__pxrReserved__::VtValue *sub_2168EE0D4(pxrInternal__aapl__pxrReserved__::VtValue *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  unint64_t v6[2] = *MEMORY[0x263EF8340];
  uint64_t Typeid = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid(a1);
  if (strcmp((const char *)(*(void *)(Typeid + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*((void *)a2 + 1) & 0x7FFFFFFFFFFFFFFFLL)))
  {
    pxrInternal__aapl__pxrReserved__::VtValue::_PerformCast(a2, (std::type_info *)a1, v6);
    sub_2168ED33C(a1, v6);
    sub_2168EE084((uint64_t)v6);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(pxrInternal__aapl__pxrReserved__::VtValue *a1, std::type_info *a2, char *a3)
{
  uint64_t v3 = *((void *)a1 + 1);
  std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t type_name = a2->__type_name;
  if (v3) {
    BOOL v5 = type_name == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5) {
    return (v3 == 0) == (type_name == 0);
  }
  if (v3 == type_name) {
    return (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 64))();
  }
  return pxrInternal__aapl__pxrReserved__::VtValue::_EqualityImpl(a1, a2, a3);
}

void sub_2168EE1B8(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_2168EE1B8(a1, *a2);
    sub_2168EE1B8(a1, a2[1]);
    sub_2168EE214((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_2168EE214(uint64_t a1)
{
  sub_2168EE084(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t *sub_2168EE264(uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_2168EE2BC(a1, *a2, a2 + 1);
  return a1;
}

void sub_2168EE2A4(_Unwind_Exception *a1)
{
  sub_2168EE1B8(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_2168EE2BC(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    uint64_t v4 = a2;
    BOOL v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      uint64_t result = sub_2168EE348(v5, v6, v4 + 4, (long long *)v4 + 2);
      uint64_t v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = (const void ***)v7;
          uint64_t v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          uint64_t v4 = (const void **)v8;
        }
        while (!v9);
      }
      uint64_t v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_2168EE348(uint64_t **a1, uint64_t *a2, const void **a3, long long *a4)
{
  uint64_t v6 = sub_216789A4C(a1, a2, &v12, &v11, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    sub_2168EE3E0((uint64_t)a1, a4, (uint64_t)v10);
    sub_21677B358(a1, (uint64_t)v12, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    sub_2168EE5C0((uint64_t)v10, 0);
  }
  return v7;
}

void *sub_2168EE3E0@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = sub_2168EE44C(v6 + 4, a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_2168EE434(_Unwind_Exception *a1)
{
  sub_2168EE5C0(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_2168EE44C(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    std::string __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  sub_2168EE4C4(__dst + 3, (void *)a2 + 3);
  return __dst;
}

void sub_2168EE4A8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2168EE4C4(void *a1, void *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  a1[1] = 0;
  if (a2[1])
  {
    sub_2168EDEE4((uint64_t)v6, (uint64_t)a1);
    uint64_t v4 = a2[1];
    a1[1] = v4;
    if ((~*((_DWORD *)a2 + 2) & 3) != 0) {
      (*(void (**)(void *, void *))((v4 & 0xFFFFFFFFFFFFFFF8) + 24))(a2, a1);
    }
    else {
      *a1 = *a2;
    }
    if (v7) {
      (*(void (**)(unsigned char *))(v7 + 32))(v6);
    }
  }
  return a1;
}

void sub_2168EE584(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a11) {
    (*(void (**)(char *))(a11 + 32))(&a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_2168EE5C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_2168EE214((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t sub_2168EE618(uint64_t a1, const void **a2, const void **a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_2168EE348((uint64_t **)a1, v4, v6, (long long *)v6);
      v6 += 5;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_2168EE684(_Unwind_Exception *a1)
{
  sub_2168EE1B8(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_2168EE69C(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)sub_21677B220((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    sub_2168EE748((uint64_t)a1, a4, (uint64_t)v10);
    sub_21677B358(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    sub_2168EE5C0((uint64_t)v10, 0);
  }
  return v7;
}

unsigned char *sub_2168EE748@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = v6 + 32;
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    uint64_t result = sub_216778F24(result, *(void **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    *((void *)v6 + 6) = *((void *)v8 + 2);
    *(_OWORD *)uint64_t result = v9;
  }
  *((void *)v6 + 8) = 0;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_2168EE7C4(_Unwind_Exception *a1)
{
  sub_2168EE5C0(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_2168EE7DC(uint64_t a1, const std::string::value_type **a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  uint64_t v3 = *(uint64_t **)(a1 + 8);
  if (!v3) {
    return 0;
  }
  while (std::string::compare((const std::string *)(v3 + 4), *a2) > 0)
  {
    uint64_t v2 = v3;
LABEL_6:
    uint64_t v3 = (uint64_t *)*v3;
    if (!v3) {
      return 0;
    }
  }
  if (std::string::compare((const std::string *)(v3 + 4), *a2) < 0)
  {
    ++v3;
    goto LABEL_6;
  }
  uint64_t v6 = *v3;
  uint64_t v7 = v3;
  if (*v3)
  {
    uint64_t v7 = v3;
    do
    {
      int v8 = std::string::compare((const std::string *)(v6 + 32), *a2);
      long long v9 = (uint64_t *)(v6 + 8);
      if (v8 >= 0)
      {
        long long v9 = (uint64_t *)v6;
        uint64_t v7 = (void *)v6;
      }
      uint64_t v6 = *v9;
    }
    while (*v9);
  }
  uint64_t v10 = v3[1];
  if (v10)
  {
    do
    {
      int v11 = std::string::compare((const std::string *)(v10 + 32), *a2);
      int v12 = (uint64_t *)(v10 + 8);
      if (v11 > 0)
      {
        int v12 = (uint64_t *)v10;
        uint64_t v2 = (void *)v10;
      }
      uint64_t v10 = *v12;
    }
    while (*v12);
  }
  if (v7 == v2) {
    return 0;
  }
  uint64_t result = 0;
  do
  {
    uint64_t v13 = (void *)v7[1];
    if (v13)
    {
      do
      {
        uint64_t v14 = v13;
        uint64_t v13 = (void *)*v13;
      }
      while (v13);
    }
    else
    {
      do
      {
        uint64_t v14 = (void *)v7[2];
        BOOL v15 = *v14 == (void)v7;
        uint64_t v7 = v14;
      }
      while (!v15);
    }
    ++result;
    uint64_t v7 = v14;
  }
  while (v14 != v2);
  return result;
}

uint64_t sub_2168EE904(uint64_t **a1, const void **a2)
{
  uint64_t v3 = (uint64_t *)sub_21678C2D8((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3) {
    return 0;
  }
  uint64_t v4 = v3;
  sub_2167AE00C(a1, v3);
  sub_2168EE214((uint64_t)(v4 + 4));
  operator delete(v4);
  return 1;
}

uint64_t *sub_2168EE960(uint64_t **a1, uint64_t *a2, uint64_t *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    do
    {
      uint64_t v6 = sub_2167AE00C(a1, v4);
      sub_2168EE214((uint64_t)(v4 + 4));
      operator delete(v4);
      uint64_t v4 = v6;
    }
    while (v6 != a3);
  }
  return a3;
}

uint64_t sub_2168EE9C8(uint64_t a1, const std::string::value_type **a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 8;
  do
  {
    int v6 = std::string::compare((const std::string *)(v3 + 32), *a2);
    uint64_t v7 = (uint64_t *)(v3 + 8);
    if (v6 >= 0)
    {
      uint64_t v7 = (uint64_t *)v3;
      uint64_t v5 = v3;
    }
    uint64_t v3 = *v7;
  }
  while (*v7);
  if (v5 == v2 || std::string::compare((const std::string *)(v5 + 32), *a2) >= 1) {
    return v2;
  }
  return v5;
}

uint64_t *sub_2168EEA48(uint64_t **a1, const void **a2, long long *a3)
{
  uint64_t v5 = (uint64_t **)sub_21677B220((uint64_t)a1, &v10, a2);
  int v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = v5;
    sub_2168EE3E0((uint64_t)a1, a3, (uint64_t)v9);
    sub_21677B358(a1, v10, v7, v9[0]);
    int v6 = v9[0];
    v9[0] = 0;
    sub_2168EE5C0((uint64_t)v9, 0);
  }
  return v6;
}

uint64_t *sub_2168EEADC(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 8), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *sub_2168EEAFC(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2168EEC38(a1);
}

uint64_t sub_2168EEB0C()
{
  return 1;
}

unint64_t sub_2168EEB14(uint64_t **a1)
{
  return bswap64(0x9E3779B97F4A7C55 * sub_2168EEC90(*a1));
}

uint64_t sub_2168EEB48(void ***a1, uint64_t **a2, char *a3)
{
  return pxrInternal__aapl__pxrReserved__::operator==(*a1, *a2, a3);
}

uint64_t sub_2168EEB54(void ***a1, uint64_t *a2, char *a3)
{
  return pxrInternal__aapl__pxrReserved__::operator==(*a1, a2, a3);
}

uint64_t sub_2168EEB60()
{
  return 0;
}

void *sub_2168EEB6C(void ***a1, void *a2)
{
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, *a1);
}

void *sub_2168EEB7C()
{
  return &unk_26C74DD70;
}

uint64_t sub_2168EEB88()
{
  return 0;
}

uint64_t sub_2168EEB90()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_2168EEB9C()
{
  return 0;
}

uint64_t sub_2168EEBA4()
{
  return 0;
}

BOOL sub_2168EEBAC(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x8000000217473E6ALL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2168EEBE8(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74DD70, a2, a3);
}

void *sub_2168EEC0C()
{
  return &unk_26C74DD70;
}

uint64_t sub_2168EEC18(uint64_t a1)
{
  return *(void *)a1;
}

pxrInternal__aapl__pxrReserved__::VtDictionary *sub_2168EEC20@<X0>(const void *****a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  *(void *)(a2 + 8) = &off_26C74DD80;
  return sub_2168EEEA8((unsigned int **)a2, v2);
}

uint64_t *sub_2168EEC38(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 8), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_2168EBBB8((void ***)v2, 0);
    operator delete((void *)v2);
  }
  return a1;
}

unint64_t sub_2168EEC90(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (!*a1 || !*(void *)(v1 + 16)) {
    return 0;
  }
  uint64_t v3 = 0;
  char v4 = 0;
  sub_2168EECF4((uint64_t)&v3, *(void **)v1, (void *)(v1 + 8));
  return bswap64(0x9E3779B97F4A7C55 * v3);
}

uint64_t sub_2168EECF4(uint64_t result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    char v4 = (pxrInternal__aapl__pxrReserved__::Tf_HashState *)result;
    do
    {
      uint64_t v5 = (void *)a2[1];
      int v6 = a2;
      if (v5)
      {
        do
        {
          uint64_t v7 = v5;
          uint64_t v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v6[2];
          BOOL v8 = *v7 == (void)v6;
          int v6 = v7;
        }
        while (!v8);
      }
      uint64_t result = sub_2168EED74(v4, (pxrInternal__aapl__pxrReserved__ *)(a2 + 4));
      a2 = v7;
    }
    while (v7 != a3);
  }
  return result;
}

uint64_t sub_2168EED74(pxrInternal__aapl__pxrReserved__::Tf_HashState *a1, pxrInternal__aapl__pxrReserved__ *a2)
{
  uint64_t v2 = a2;
  char v4 = (char *)*((void *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    uint64_t v5 = (char *)*((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = *(pxrInternal__aapl__pxrReserved__ **)a2;
    uint64_t v5 = v4;
  }
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes(a1, a2, v5);

  return sub_2168EEDCC((uint64_t)a1, (pxrInternal__aapl__pxrReserved__ *)((char *)v2 + 24));
}

uint64_t sub_2168EEDCC(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::VtValue::GetHash(this);
  if (*(unsigned char *)(a1 + 8)) {
    result += (unint64_t)(*(void *)a1 + result + (*(void *)a1 + result) * (*(void *)a1 + result)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = result;
  return result;
}

const void ****sub_2168EEE1C(const void *****a1)
{
  unsigned int v2 = atomic_load((unsigned int *)*a1 + 2);
  if (v2 != 1)
  {
    uint64_t v3 = (unsigned int *)operator new(0x10uLL);
    pxrInternal__aapl__pxrReserved__::VtDictionary::VtDictionary((pxrInternal__aapl__pxrReserved__::VtDictionary *)v3, *a1);
    atomic_store(0, v3 + 2);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 2, 1u, memory_order_relaxed);
    uint64_t v5 = *a1;
    *a1 = (const void ****)v3;
    sub_2168EEC38((uint64_t *)&v5);
  }
  return *a1;
}

void sub_2168EEE94(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::VtDictionary *sub_2168EEEA8(unsigned int **a1, const void ****a2)
{
  char v4 = (unsigned int *)operator new(0x10uLL);
  uint64_t result = pxrInternal__aapl__pxrReserved__::VtDictionary::VtDictionary((pxrInternal__aapl__pxrReserved__::VtDictionary *)v4, a2);
  atomic_store(0, v4 + 2);
  *a1 = v4;
  atomic_fetch_add_explicit((atomic_uint *volatile)v4 + 2, 1u, memory_order_relaxed);
  return result;
}

void sub_2168EEEFC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2168EEF10(uint64_t a1, const void ****a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v5, a1);
  *(void *)(a1 + 8) = &off_26C74DD80;
  sub_2168EEEA8((unsigned int **)a1, a2);
  if (v6) {
    (*(void (**)(unsigned char *))(v6 + 32))(v5);
  }
  return a1;
}

void sub_2168EEFA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

const void ****sub_2168EEFE0(const void *****a1)
{
  void v4[2] = *MEMORY[0x263EF8340];
  unsigned int v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, const void *****))(((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_2168EEE1C(a1);
}

void *sub_2168EF074(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = result;
  uint64_t v14 = a2;
  uint64_t v15 = a3;
  if (a5) {
    BOOL v8 = a2 == a4;
  }
  else {
    BOOL v8 = 1;
  }
  char v9 = v8;
  if (a3 != a5 || (v9 & 1) == 0)
  {
    do
    {
      sub_2168EE348((uint64_t **)v7, v7 + 1, (const void **)(a2 + 32), (long long *)(a2 + 32));
      uint64_t result = sub_2168EF104(&v14, v10, v11);
      a2 = v14;
      if (a5) {
        BOOL v12 = v14 == a4;
      }
      else {
        BOOL v12 = 1;
      }
      char v13 = v12;
    }
    while (v15 != a5 || (v13 & 1) == 0);
  }
  return result;
}

void *sub_2168EF104(void *result, uint64_t a2, char *a3)
{
  uint64_t v3 = result[1];
  if (!v3)
  {
    v8[0] = "vt/dictionary.h";
    v8[1] = "increment";
    float64x2_t v8[2] = 159;
    void v8[3] = "void pxrInternal__aapl__pxrReserved__::VtDictionary::Iterator<const std::map<std::string, pxrInternal__aapl_"
            "_pxrReserved__::VtValue, std::less<void>> *, std::__map_const_iterator<std::__tree_const_iterator<std::__val"
            "ue_type<std::string, pxrInternal__aapl__pxrReserved__::VtValue>, std::__tree_node<std::__value_type<std::str"
            "ing, pxrInternal__aapl__pxrReserved__::VtValue>, void *> *, long>>>::increment() [UnderlyingMapPtr = const s"
            "td::map<std::string, pxrInternal__aapl__pxrReserved__::VtValue, std::less<void>> *, UnderlyingIterator = std"
            "::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string, pxrInternal__aapl__pxrReser"
            "ved__::VtValue>, std::__tree_node<std::__value_type<std::string, pxrInternal__aapl__pxrReserved__::VtValue>,"
            " void *> *, long>>]";
    char v9 = 0;
    int v10 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v8, (pxrInternal__aapl__pxrReserved__ *)"Attempted invalid increment operation on a VtDictionary iterator", a3);
  }
  char v4 = (void *)*result;
  uint64_t v5 = *(void **)(*result + 8);
  if (v5)
  {
    do
    {
      uint64_t v6 = v5;
      uint64_t v5 = (void *)*v5;
    }
    while (v5);
  }
  else
  {
    do
    {
      uint64_t v6 = (void *)v4[2];
      BOOL v7 = *v6 == (void)v4;
      char v4 = v6;
    }
    while (!v7);
  }
  *uint64_t result = v6;
  if (v6 == (void *)(v3 + 8)) {
    result[1] = 0;
  }
  return result;
}

void *sub_2168EF1B0(void *result, uint64_t a2, char *a3)
{
  uint64_t v3 = result[1];
  if (!v3)
  {
    v8[0] = "vt/dictionary.h";
    v8[1] = "increment";
    float64x2_t v8[2] = 159;
    void v8[3] = "void pxrInternal__aapl__pxrReserved__::VtDictionary::Iterator<std::map<std::string, pxrInternal__aapl__pxrRe"
            "served__::VtValue, std::less<void>> *, std::__map_iterator<std::__tree_iterator<std::__value_type<std::strin"
            "g, pxrInternal__aapl__pxrReserved__::VtValue>, std::__tree_node<std::__value_type<std::string, pxrInternal__"
            "aapl__pxrReserved__::VtValue>, void *> *, long>>>::increment() [UnderlyingMapPtr = std::map<std::string, pxr"
            "Internal__aapl__pxrReserved__::VtValue, std::less<void>> *, UnderlyingIterator = std::__map_iterator<std::__"
            "tree_iterator<std::__value_type<std::string, pxrInternal__aapl__pxrReserved__::VtValue>, std::__tree_node<st"
            "d::__value_type<std::string, pxrInternal__aapl__pxrReserved__::VtValue>, void *> *, long>>]";
    char v9 = 0;
    int v10 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v8, (pxrInternal__aapl__pxrReserved__ *)"Attempted invalid increment operation on a VtDictionary iterator", a3);
  }
  char v4 = (void *)*result;
  uint64_t v5 = *(void **)(*result + 8);
  if (v5)
  {
    do
    {
      uint64_t v6 = v5;
      uint64_t v5 = (void *)*v5;
    }
    while (v5);
  }
  else
  {
    do
    {
      uint64_t v6 = (void *)v4[2];
      BOOL v7 = *v6 == (void)v4;
      char v4 = v6;
    }
    while (!v7);
  }
  *uint64_t result = v6;
  if (v6 == (void *)(v3 + 8)) {
    result[1] = 0;
  }
  return result;
}

uint64_t sub_2168EF25C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (sub_2168EC434(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      char v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_2168EF2F0, (uint64_t)&stru_26C74DD70);
  }
}

uint64_t sub_2168EF2F4@<X0>(void *a1@<X8>)
{
  sub_2168EF348(v4);
  uint64_t v2 = (uint64_t (*)(void))v4[1];
  *a1 = v4[0];
  a1[1] = v2;
  v4[0] = 0;
  a1[2] = &stru_26C74DD70;
  return v2(0);
}

uint64_t sub_2168EF348@<X0>(void *a1@<X8>)
{
  sub_216851EE4((uint64_t)&v5, "Vt", "VtDictionary");
  uint64_t result = (uint64_t)malloc(8uLL);
  uint64_t v3 = (void *)result;
  while (v6--)
    uint64_t result = pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v5);
  void *v3 = 0;
  *a1 = v3;
  a1[1] = sub_2168EF3C8;
  return result;
}

void sub_2168EF3C8(void ***a1)
{
  if (a1)
  {
    sub_2168EBBB8(a1, 0);
    free(a1);
  }
}

void pxrInternal__aapl__pxrReserved__::Vt_HashDetail::_IssueUnimplementedHashError(pxrInternal__aapl__pxrReserved__::Vt_HashDetail *this, const std::type_info *a2)
{
  v5[0] = "vt/hash.cpp";
  v5[1] = "_IssueUnimplementedHashError";
  void v5[2] = 42;
  void v5[3] = "void pxrInternal__aapl__pxrReserved__::Vt_HashDetail::_IssueUnimplementedHashError(const std::type_info &)";
  char v6 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*((void *)this + 1) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  if (v4 >= 0) {
    uint64_t v2 = __p;
  }
  else {
    uint64_t v2 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"Invoked VtHashValue on an object of type <%s>, which is not hashable by TfHash().  Consider providing an overload of hash_value() or TfHashAppend().", (const char *)v2);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
}

void sub_2168EF4A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *pxrInternal__aapl__pxrReserved__::Vt_StreamOutGeneric(uint64_t a1, uint64_t a2, void *a3)
{
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(void *)(a1 + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v12);
  if (v13 >= 0) {
    BOOL v7 = v12;
  }
  else {
    BOOL v7 = (void **)v12[0];
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"<'%s' @ %p>", v5, v6, v7, a2);
  if ((v15 & 0x80u) == 0) {
    BOOL v8 = __p;
  }
  else {
    BOOL v8 = (void **)__p[0];
  }
  if ((v15 & 0x80u) == 0) {
    uint64_t v9 = v15;
  }
  else {
    uint64_t v9 = (uint64_t)__p[1];
  }
  int v10 = sub_216779180(a3, (uint64_t)v8, v9);
  if ((char)v15 < 0) {
    operator delete(__p[0]);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  return v10;
}

void sub_2168EF578(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtStreamOut()
{
  return std::ostream::operator<<();
}

{
  return std::ostream::operator<<();
}

{
  return std::ostream::operator<<();
}

{
  return std::ostream::operator<<();
}

void *pxrInternal__aapl__pxrReserved__::VtStreamOut(float *a1, void *a2)
{
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, *a1);
}

void *pxrInternal__aapl__pxrReserved__::VtStreamOut(double *a1, void *a2)
{
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, *a1);
}

void *pxrInternal__aapl__pxrReserved__::VtStreamOutArray(void *a1, uint64_t *a2, uint64_t a3, void (*a4)(uint64_t, void *))
{
  if (*((_DWORD *)a2 + 2))
  {
    if (*((_DWORD *)a2 + 3))
    {
      if (*((_DWORD *)a2 + 4)) {
        uint64_t v4 = 4;
      }
      else {
        uint64_t v4 = 3;
      }
    }
    else
    {
      uint64_t v4 = 2;
    }
  }
  else
  {
    uint64_t v4 = 1;
  }
  if (a2 + 1 == (uint64_t *)((char *)a2 + 4 * v4 + 4))
  {
    unint64_t v7 = 1;
  }
  else
  {
    unint64_t v5 = 0;
    uint64_t v6 = 4 * v4 - 4;
    LODWORD(v7) = 1;
    do
    {
      LODWORD(v7) = *(_DWORD *)((char *)a2 + v5 + 8) * v7;
      v5 += 4;
    }
    while (v6 != v5);
    if (!v7)
    {
      uint64_t v8 = 0;
      return sub_2168EF6C4(a1, a2, a3, a4, v8, 0);
    }
    unint64_t v7 = (int)v7;
  }
  uint64_t v8 = *a2 / v7;
  if (*a2 % v7)
  {
    uint64_t v10 = *a2;
    a2 = &v10;
  }
  return sub_2168EF6C4(a1, a2, a3, a4, v8, 0);
}

void *sub_2168EF6C4(void *a1, _DWORD *a2, uint64_t a3, void (*a4)(uint64_t, void *), uint64_t a5, uint64_t a6)
{
  char v20 = 91;
  sub_216779180(a1, (uint64_t)&v20, 1);
  if (a2[2])
  {
    if (a2[3])
    {
      uint64_t v12 = 2;
      if (a2[4]) {
        uint64_t v12 = 3;
      }
    }
    else
    {
      uint64_t v12 = 1;
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  if (v12 == a6)
  {
    if (a5)
    {
      uint64_t v13 = 0;
      do
      {
        if (v13) {
          sub_216779180(a1, (uint64_t)", ", 2);
        }
        a4(a3, a1);
        ++v13;
      }
      while (a5 != v13);
    }
  }
  else
  {
    uint64_t v14 = &a2[a6];
    int v16 = v14[2];
    unsigned __int8 v15 = v14 + 2;
    if (v16)
    {
      unint64_t v17 = 0;
      uint64_t v18 = a6 + 1;
      do
      {
        if (v17) {
          sub_216779180(a1, (uint64_t)", ", 2);
        }
        sub_2168EF6C4(a1, a2, a3, a4, a5, v18);
        ++v17;
      }
      while (v17 < *v15);
    }
  }
  char v21 = 93;
  return sub_216779180(a1, (uint64_t)&v21, 1);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtZero<BOOL>()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtZero<char>()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtZero<unsigned char>()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtZero<short>()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtZero<unsigned short>()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtZero<int>()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtZero<unsigned int>()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtZero<long long>()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtZero<unsigned long long>()
{
  return 0;
}

double pxrInternal__aapl__pxrReserved__::VtZero<double>()
{
  return 0.0;
}

double pxrInternal__aapl__pxrReserved__::VtZero<float>()
{
  return 0.0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::pxr_half::half>()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfVec4i>()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfVec3i>()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfVec2i>()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfVec4h>()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfVec3h>()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfVec2h>()
{
  return 0;
}

double pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfVec4f>()
{
  return 0.0;
}

double pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfVec3f>()
{
  return 0.0;
}

double pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfVec2f>()
{
  return 0.0;
}

double pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfVec4d>()
{
  return 0.0;
}

double pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfVec3d>()
{
  return 0.0;
}

double pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfVec2d>()
{
  return 0.0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfQuath>()
{
  return 0;
}

double pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfQuatf>()
{
  return 0.0;
}

double pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfQuatd>()
{
  return 0.0;
}

double pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfQuaternion>()
{
  return 0.0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfDualQuath>()
{
  return 0;
}

double pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfDualQuatf>@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

double pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfDualQuatd>@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfMatrix4f>@<X0>(uint64_t a1@<X8>)
{
  return pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetDiagonal(a1, 0.0);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfMatrix3f>@<X0>(uint64_t a1@<X8>)
{
  return pxrInternal__aapl__pxrReserved__::GfMatrix3f::SetDiagonal(a1, 0.0);
}

float pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfMatrix2f>()
{
  pxrInternal__aapl__pxrReserved__::GfMatrix2f::SetDiagonal((uint64_t)&v1, 0.0);
  return v1;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfMatrix4d>@<X0>(uint64_t a1@<X8>)
{
  return pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal(a1, 0.0);
}

uint64_t pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfMatrix3d>@<X0>(uint64_t a1@<X8>)
{
  return pxrInternal__aapl__pxrReserved__::GfMatrix3d::SetDiagonal(a1, 0.0);
}

double pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfMatrix2d>()
{
  pxrInternal__aapl__pxrReserved__::GfMatrix2d::SetDiagonal((uint64_t)&v1, 0.0);
  return v1;
}

double pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfRange3f>@<D0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_217456E40;
  double result = 2.84809454e-306;
  *(void *)(a1 + 16) = 0x80000000800000;
  return result;
}

int64x2_t pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfRange3d>@<Q0>(uint64_t a1@<X8>)
{
  *(int64x2_t *)a1 = vdupq_n_s64(0x47EFFFFFE0000000uLL);
  *(_OWORD *)(a1 + 16) = xmmword_217412860;
  int64x2_t result = vdupq_n_s64(0xC7EFFFFFE0000000);
  *(int64x2_t *)(a1 + 32) = result;
  return result;
}

float pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfRange2f>()
{
  return 3.4028e38;
}

double pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfRange2d>()
{
  return 3.40282347e38;
}

float pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfRange1f>()
{
  return 3.4028e38;
}

double pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfRange1d>()
{
  return 3.40282347e38;
}

void pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfInterval>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfRect2i>()
{
  return 0;
}

void pxrInternal__aapl__pxrReserved__::VtZero<std::string>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::TfToken>(void *a1@<X8>)
{
  *a1 = 0;
}

double pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfFrustum>@<D0>(pxrInternal__aapl__pxrReserved__::GfFrustum *a1@<X8>)
{
  return pxrInternal__aapl__pxrReserved__::GfFrustum::GfFrustum(a1);
}

void pxrInternal__aapl__pxrReserved__::VtZero<pxrInternal__aapl__pxrReserved__::GfMultiInterval>(void *a1@<X8>)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = a1 + 1;
}

uint64_t *sub_2168EFB08()
{
  sub_2168F0618();
  sub_2168F071C();
  sub_2168F0820();
  sub_2168F0924();
  sub_2168F0A28();
  sub_2168F0B2C();
  sub_2168F0C30();
  sub_2168F0D34();
  sub_2168F0E38();
  sub_2168F0F3C();
  sub_2168F1040();
  sub_2168F1144();
  sub_2168F1248();
  sub_2168F134C();
  sub_2168F1450();
  sub_2168F1554();
  sub_2168F1658();
  sub_2168F175C();
  sub_2168F1860();
  sub_2168F1964();
  sub_2168F1A68();
  sub_2168F1B6C();
  sub_2168F1C70();
  sub_2168F1D74();
  sub_2168F1E78();
  sub_2168F1F7C();
  sub_2168F2080();
  sub_2168F2184();
  sub_2168F2288();
  sub_2168F238C();
  sub_2168F2490();
  sub_2168F2594();
  sub_2168F2698();
  sub_2168F279C();
  sub_2168F28A0();
  sub_2168F29A4();
  sub_2168F2AA8();
  sub_2168F2BAC();
  sub_2168F2CB0();
  sub_2168F2DB4();
  sub_2168F2EB8();
  sub_2168F2FBC();
  sub_2168F30C0();
  sub_2168F31C4();
  sub_2168F32C8();
  sub_2168F33CC();

  return sub_2168F34D0();
}

void sub_2168EFBE4()
{
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74C720, (uint64_t)&stru_26C74C710, (uint64_t)sub_2168F35D4);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74C720, (uint64_t)&stru_26C74C700, (uint64_t)sub_2168F38C8);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74C720, (uint64_t)&stru_26C74C6F0, (uint64_t)sub_2168F3AFC);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74C710, (uint64_t)&stru_26C74C6F0, (uint64_t)sub_2168F3E5C);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74C6F0, (uint64_t)&stru_26C74C710, (uint64_t)sub_2168F3EEC);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74C710, (uint64_t)&stru_26C74C700, (uint64_t)sub_2168F3FE8);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74C700, (uint64_t)&stru_26C74C710, (uint64_t)sub_2168F404C);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74C700, (uint64_t)&stru_26C74C6F0, (uint64_t)sub_2168F4144);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74C6F0, (uint64_t)&stru_26C74C700, (uint64_t)sub_2168F41C4);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74C760, (uint64_t)&stru_26C74C750, (uint64_t)sub_2168F421C);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74C760, (uint64_t)&stru_26C74C740, (uint64_t)sub_2168F4568);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74C760, (uint64_t)&stru_26C74C730, (uint64_t)sub_2168F4924);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74C750, (uint64_t)&stru_26C74C730, (uint64_t)sub_2168F4CE8);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74C730, (uint64_t)&stru_26C74C750, (uint64_t)sub_2168F4D90);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74C750, (uint64_t)&stru_26C74C740, (uint64_t)sub_2168F4EE0);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74C740, (uint64_t)&stru_26C74C750, (uint64_t)sub_2168F4F7C);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74C740, (uint64_t)&stru_26C74C730, (uint64_t)sub_2168F50C0);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74C730, (uint64_t)&stru_26C74C740, (uint64_t)sub_2168F5158);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74C7A0, (uint64_t)&stru_26C74C790, (uint64_t)sub_2168F51E0);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74C7A0, (uint64_t)&stru_26C74C780, (uint64_t)sub_2168F55A0);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74C7A0, (uint64_t)&stru_26C74C770, (uint64_t)sub_2168F5970);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74C790, (uint64_t)&stru_26C74C770, (uint64_t)sub_2168F5D50);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74C770, (uint64_t)&stru_26C74C790, (uint64_t)sub_2168F5E04);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74C790, (uint64_t)&stru_26C74C780, (uint64_t)sub_2168F5FD0);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74C780, (uint64_t)&stru_26C74C790, (uint64_t)sub_2168F6074);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74C780, (uint64_t)&stru_26C74C770, (uint64_t)sub_2168F6230);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74C770, (uint64_t)&stru_26C74C780, (uint64_t)sub_2168F62BC);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74C5B0, (uint64_t)&stru_26C74C5C0, (uint64_t)sub_2168F6344);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74C5C0, (uint64_t)&stru_26C74C5B0, (uint64_t)sub_2168F6BD0);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74C610, (uint64_t)&stru_26C74C600, (uint64_t)sub_2168F745C);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74C600, (uint64_t)&stru_26C74C610, (uint64_t)sub_2168F7824);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74C610, (uint64_t)&stru_26C74C5F0, (uint64_t)sub_2168F7AF4);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74C5F0, (uint64_t)&stru_26C74C610, (uint64_t)sub_2168F7EB8);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74C600, (uint64_t)&stru_26C74C5F0, (uint64_t)sub_2168F7F1C);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74C5F0, (uint64_t)&stru_26C74C600, (uint64_t)sub_2168F7F9C);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74E268, (uint64_t)&stru_26C74E250, (uint64_t)sub_2168F801C);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74E250, (uint64_t)&stru_26C74E268, (uint64_t)sub_2168F80C8);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74E268, (uint64_t)&stru_26C74E238, (uint64_t)sub_2168F9934);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74E238, (uint64_t)&stru_26C74E268, (uint64_t)sub_2168F99E4);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74E250, (uint64_t)&stru_26C74E238, (uint64_t)sub_2168FA58C);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74E238, (uint64_t)&stru_26C74E250, (uint64_t)sub_2168FA630);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74DEC0, (uint64_t)&stru_26C74DF08, (uint64_t)sub_2168FA6D4);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74DF08, (uint64_t)&stru_26C74DEC0, (uint64_t)sub_2168FA78C);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74DEC0, (uint64_t)&stru_26C74DF50, (uint64_t)sub_2168FBF40);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74DF50, (uint64_t)&stru_26C74DEC0, (uint64_t)sub_2168FC000);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74DF08, (uint64_t)&stru_26C74DF50, (uint64_t)sub_2168FCCAC);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74DF50, (uint64_t)&stru_26C74DF08, (uint64_t)sub_2168FCD50);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74DEA8, (uint64_t)&stru_26C74DEF0, (uint64_t)sub_2168FCDF4);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74DEF0, (uint64_t)&stru_26C74DEA8, (uint64_t)sub_2168FCEC0);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74DEA8, (uint64_t)&stru_26C74DF38, (uint64_t)sub_2168FE780);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74DF38, (uint64_t)&stru_26C74DEA8, (uint64_t)sub_2168FE858);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74DEF0, (uint64_t)&stru_26C74DF38, (uint64_t)sub_2168FF598);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74DF38, (uint64_t)&stru_26C74DEF0, (uint64_t)sub_2168FF658);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74DE90, (uint64_t)&stru_26C74DED8, (uint64_t)sub_2168FF718);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74DED8, (uint64_t)&stru_26C74DE90, (uint64_t)sub_2168FF7E8);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74DE90, (uint64_t)&stru_26C74DF20, (uint64_t)sub_216900FDC);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74DF20, (uint64_t)&stru_26C74DE90, (uint64_t)sub_2169010BC);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74DED8, (uint64_t)&stru_26C74DF20, (uint64_t)sub_216901D34);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74DF20, (uint64_t)&stru_26C74DED8, (uint64_t)sub_216901DDC);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74DF68, (uint64_t)&stru_26C74DFB0, (uint64_t)sub_216901E84);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74DFB0, (uint64_t)&stru_26C74DF68, (uint64_t)sub_216901F60);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74E0B8, (uint64_t)&stru_26C74E0D0, (uint64_t)sub_2169038CC);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74E0D0, (uint64_t)&stru_26C74E0B8, (uint64_t)sub_216903980);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74E0B8, (uint64_t)&stru_26C74E0E8, (uint64_t)sub_216905198);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74E0E8, (uint64_t)&stru_26C74E0B8, (uint64_t)sub_21690524C);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74E0D0, (uint64_t)&stru_26C74E0E8, (uint64_t)sub_216905ECC);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74E0E8, (uint64_t)&stru_26C74E0D0, (uint64_t)sub_216905F80);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74E1F0, (uint64_t)&stru_26C74E1C0, (uint64_t)sub_216906034);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74E1C0, (uint64_t)&stru_26C74E1F0, (uint64_t)sub_2169060D4);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74E1D8, (uint64_t)&stru_26C74E1C0, (uint64_t)sub_2169076AC);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74E1C0, (uint64_t)&stru_26C74E1D8, (uint64_t)sub_21690774C);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74E1D8, (uint64_t)&stru_26C74E190, (uint64_t)sub_216908200);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74E190, (uint64_t)&stru_26C74E1D8, (uint64_t)sub_2169082A0);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74E058, (uint64_t)&stru_26C74E070, (uint64_t)sub_216908D90);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74E070, (uint64_t)&stru_26C74E058, (uint64_t)sub_216908E34);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74E028, (uint64_t)&stru_26C74E040, (uint64_t)sub_21690A2A4);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74E040, (uint64_t)&stru_26C74E028, (uint64_t)sub_21690A34C);
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74DFF8, (uint64_t)&stru_26C74E010, (uint64_t)sub_21690BAB8);

  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_26C74E010, (uint64_t)&stru_26C74DFF8, (uint64_t)sub_21690BB78);
}

uint64_t *sub_2168F0618()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74DE48, (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74DE48, (char *)0x28, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168F06D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_2168F071C()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74DE60, (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74DE60, (char *)0x28, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168F07DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_2168F0820()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74DE78, (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74DE78, (char *)0x28, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168F08E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_2168F0924()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74DE90, (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74DE90, (char *)0x28, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168F09E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_2168F0A28()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74DEA8, (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74DEA8, (char *)0x28, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168F0AE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_2168F0B2C()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74DEC0, (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74DEC0, (char *)0x28, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168F0BEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_2168F0C30()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74DED8, (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74DED8, (char *)0x28, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168F0CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_2168F0D34()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74DEF0, (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74DEF0, (char *)0x28, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168F0DF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_2168F0E38()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74DF08, (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74DF08, (char *)0x28, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168F0EF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_2168F0F3C()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74DF20, (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74DF20, (char *)0x28, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168F0FFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_2168F1040()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74DF38, (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74DF38, (char *)0x28, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168F1100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_2168F1144()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74DF50, (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74DF50, (char *)0x28, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168F1204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_2168F1248()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74DF68, (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74DF68, (char *)0x28, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168F1308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_2168F134C()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74DF80, (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74DF80, (char *)0x28, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168F140C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_2168F1450()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74DF98, (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74DF98, (char *)0x28, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168F1510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_2168F1554()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74DFB0, (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74DFB0, (char *)0x28, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168F1614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_2168F1658()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74DFC8, (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74DFC8, (char *)0x28, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168F1718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_2168F175C()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74DFE0, (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74DFE0, (char *)0x28, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168F181C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_2168F1860()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74DFF8, (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74DFF8, (char *)0x28, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168F1920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_2168F1964()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74E010, (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74E010, (char *)0x28, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168F1A24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_2168F1A68()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74E028, (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74E028, (char *)0x28, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168F1B28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_2168F1B6C()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74E040, (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74E040, (char *)0x28, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168F1C2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_2168F1C70()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74E058, (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74E058, (char *)0x28, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168F1D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_2168F1D74()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74E070, (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74E070, (char *)0x28, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168F1E34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_2168F1E78()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74E088, (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74E088, (char *)0x28, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168F1F38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_2168F1F7C()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74E0A0, (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74E0A0, (char *)0x28, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168F203C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_2168F2080()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74E0B8, (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74E0B8, (char *)0x28, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168F2140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_2168F2184()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74E0D0, (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74E0D0, (char *)0x28, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168F2244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_2168F2288()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74E0E8, (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74E0E8, (char *)0x28, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168F2348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_2168F238C()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74E100, (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74E100, (char *)0x28, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168F244C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_2168F2490()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74E118, (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74E118, (char *)0x28, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168F2550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_2168F2594()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74E130, (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74E130, (char *)0x28, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168F2654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_2168F2698()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74E148, (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74E148, (char *)0x28, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168F2758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_2168F279C()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74E160, (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74E160, (char *)0x28, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168F285C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_2168F28A0()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74E178, (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74E178, (char *)0x28, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168F2960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_2168F29A4()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74E190, (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74E190, (char *)0x28, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168F2A64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_2168F2AA8()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74E1A8, (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74E1A8, (char *)0x28, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168F2B68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_2168F2BAC()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74E1C0, (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74E1C0, (char *)0x28, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168F2C6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_2168F2CB0()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74E1D8, (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74E1D8, (char *)0x28, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168F2D70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_2168F2DB4()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74E1F0, (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74E1F0, (char *)0x28, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168F2E74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_2168F2EB8()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74E208, (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74E208, (char *)0x28, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168F2F78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_2168F2FBC()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74E220, (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74E220, (char *)0x28, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168F307C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_2168F30C0()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74E238, (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74E238, (char *)0x28, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168F3180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_2168F31C4()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74E250, (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74E250, (char *)0x28, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168F3284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_2168F32C8()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74E268, (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74E268, (char *)0x28, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168F3388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_2168F33CC()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74E280, (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74E280, (char *)0x28, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168F348C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_2168F34D0()
{
  sub_216851EE4((uint64_t)&v8, "Tf", "TfType::Define");
  unint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74E298, (uint64_t)__p);
  unint64_t v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_26C74E298, (char *)0x28, 0, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5)
  {
    uint64_t v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_2168F3590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_2168F35D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = (int *)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  if ((v4 & 4) != 0) {
    uint64_t v2 = (int *)(*(uint64_t (**)(uint64_t))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  unint64_t v5 = (pxrInternal__aapl__pxrReserved__::pxr_half::half *)COERCE_UNSIGNED_INT((float)*v2);
  if (*v2)
  {
    if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v5 >> 23]) {
      unsigned int v6 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v5 >> 23]
    }
         + (((v5 & 0x7FFFFF) + ((v5 >> 13) & 1) + 4095) >> 13);
    else {
      LOWORD(v6) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert(v5);
    }
  }
  else
  {
    unsigned int v6 = v5 >> 16;
  }
  int v7 = v2[1];
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::pxr_half::half *)COERCE_UNSIGNED_INT((float)v7);
  if (v7)
  {
    if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v8 >> 23]) {
      uint64_t result = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v8 >> 23]
    }
             + (((v8 & 0x7FFFFF) + ((v8 >> 13) & 1) + 4095) >> 13);
    else {
      uint64_t result = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert(v8);
    }
  }
  else
  {
    uint64_t result = v8 >> 16;
  }
  *(void *)(a2 + 8) = (char *)&off_26C74E2B0 + 3;
  *(_DWORD *)a2 = (unsigned __int16)v6 | ((unsigned __int16)result << 16);
  return result;
}

_DWORD *sub_2168F36C4(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

_DWORD *sub_2168F36D4(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_2168F36E0()
{
  return 1;
}

unint64_t sub_2168F36E8(unsigned __int16 *a1)
{
  return bswap64(0x9E3779B97F4A7C55* bswap64(0x9E3779B97F4A7C55* (a1[1]+ ((a1[1]+ (unint64_t)*a1+ (a1[1] + *a1) * (unint64_t)(a1[1] + *a1)) >> 1))));
}

BOOL sub_2168F3720(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a2]
      && pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[1]] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[1]];
}

BOOL sub_2168F3764(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a2]
      && pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[1]] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[1]];
}

uint64_t sub_2168F37AC()
{
  return 0;
}

void *sub_2168F37B8(uint64_t a1, void *a2)
{
  return pxrInternal__aapl__pxrReserved__::operator<<(a2);
}

void *sub_2168F37C8()
{
  return &unk_26C74C710;
}

uint64_t sub_2168F37D4()
{
  return 0;
}

uint64_t sub_2168F37DC()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_2168F37E8()
{
  return 0;
}

uint64_t sub_2168F37F0()
{
  return 0;
}

BOOL sub_2168F37F8(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x80000002174E4366 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2168F3834(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C710, a2, a3);
}

void *sub_2168F3858()
{
  return &unk_26C74C710;
}

_DWORD *sub_2168F3868@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = (char *)&off_26C74E2B0 + 3;
  *(_DWORD *)a2 = *result;
  return result;
}

uint64_t sub_2168F3884(uint64_t result, unsigned __int16 *a2, unsigned __int16 *a3)
{
  uint64_t v3 = *a2;
  if (*(unsigned char *)(result + 8)) {
    v3 += (unint64_t)(*(void *)result + v3 + (*(void *)result + v3) * (*(void *)result + v3)) >> 1;
  }
  else {
    *(unsigned char *)(result + 8) = 1;
  }
  *(void *)uint64_t result = v3;
  *(void *)uint64_t result = *a3 + ((v3 + *a3 + (v3 + *a3) * (v3 + (unint64_t)*a3)) >> 1);
  return result;
}

float32x2_t sub_2168F38C8@<D0>(int32x2_t *a1@<X0>, float32x2_t *a2@<X8>)
{
  int32x2_t v3 = a1[1];
  if ((v3.i8[0] & 4) != 0) {
    a1 = (int32x2_t *)(*(uint64_t (**)(void))((*(void *)&v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  a2[1] = (float32x2_t)((char *)&off_26C74E368 + 3);
  float32x2_t result = vcvt_f32_s32(*a1);
  *a2 = result;
  return result;
}

void *sub_2168F391C(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

void *sub_2168F392C(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_2168F3938()
{
  return 1;
}

unint64_t sub_2168F3940(int8x8_t *a1)
{
  int8x8_t v1 = vbic_s8(*a1, (int8x8_t)vceqz_f32((float32x2_t)*a1));
  v2.i64[0] = v1.u32[0];
  v2.i64[1] = v1.u32[1];
  uint64_t v3 = vaddvq_s64(v2);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * (v1.u32[1]
                                                                      + ((unint64_t)(v3 + v3 * v3) >> 1))));
}

BOOL sub_2168F3988(float *a1, float *a2)
{
  return a1[1] == a2[1] && *a1 == *a2;
}

BOOL sub_2168F39A4(float *a1, float *a2)
{
  return a1[1] == a2[1] && *a1 == *a2;
}

uint64_t sub_2168F39C4()
{
  return 0;
}

void *sub_2168F39D0(float *a1, void *a2)
{
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, a1);
}

void *sub_2168F39E0()
{
  return &unk_26C74C700;
}

uint64_t sub_2168F39EC()
{
  return 0;
}

uint64_t sub_2168F39F4()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_2168F3A00()
{
  return 0;
}

uint64_t sub_2168F3A08()
{
  return 0;
}

BOOL sub_2168F3A10(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x80000002174C2ED4 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2168F3A4C(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C700, a2, a3);
}

void *sub_2168F3A70()
{
  return &unk_26C74C700;
}

void *sub_2168F3A80@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  a2[1] = (char *)&off_26C74E368 + 3;
  return result;
}

uint64_t sub_2168F3A98(uint64_t result, float *a2, float *a3)
{
  float v3 = *a2;
  if (*a2 == 0.0) {
    float v3 = 0.0;
  }
  unint64_t v4 = LODWORD(v3);
  if (*(unsigned char *)(result + 8)) {
    unint64_t v4 = ((*(void *)result
  }
         + LODWORD(v3)
         + (*(void *)result + LODWORD(v3)) * (*(void *)result + (unint64_t)LODWORD(v3))) >> 1)
       + LODWORD(v3);
  else {
    *(unsigned char *)(result + 8) = 1;
  }
  *(void *)float32x2_t result = v4;
  float v5 = *a3;
  if (*a3 == 0.0) {
    float v5 = 0.0;
  }
  *(void *)float32x2_t result = LODWORD(v5) + ((v4 + LODWORD(v5) + (v4 + LODWORD(v5)) * (v4 + LODWORD(v5))) >> 1);
  return result;
}

void *sub_2168F3AFC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    a1 = (*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  double v4 = (double)*(int *)a1;
  double v5 = (double)*(int *)(a1 + 4);
  a2[1] = (char *)&off_26C74E420 + 2;
  float32x2_t result = operator new(0x18uLL);
  *(double *)float32x2_t result = v4;
  *((double *)result + 1) = v5;
  atomic_store(0, (unsigned int *)result + 4);
  *a2 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 4, 1u, memory_order_relaxed);
  return result;
}

uint64_t *sub_2168F3B78(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 16), 1u, memory_order_relaxed);
  }
  return result;
}

void sub_2168F3B94(atomic_uint **a1)
{
  int8x8_t v1 = *a1;
  if (v1)
  {
    if (atomic_fetch_add_explicit(v1 + 4, 0xFFFFFFFF, memory_order_release) == 1)
    {
      __dmb(9u);
      operator delete(v1);
    }
  }
}

void *sub_2168F3BBC(void *result, void *a2)
{
  *a2 = *result;
  *float32x2_t result = 0;
  return result;
}

uint64_t sub_2168F3BCC()
{
  return 1;
}

unint64_t sub_2168F3BD4(int8x16_t **a1)
{
  int64x2_t v1 = (int64x2_t)vbicq_s8(**a1, (int8x16_t)vceqzq_f64(*(float64x2_t *)*a1));
  uint64_t v2 = vaddvq_s64(v1);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * (v1.i64[1]
                                                                      + ((unint64_t)(v2 + v2 * v2) >> 1))));
}

BOOL sub_2168F3C1C(uint64_t a1, uint64_t a2)
{
  return *(double *)(*(void *)a1 + 8) == *(double *)(*(void *)a2 + 8) && **(double **)a1 == **(double **)a2;
}

BOOL sub_2168F3C40(uint64_t a1, double *a2)
{
  return *(double *)(*(void *)a1 + 8) == a2[1] && **(double **)a1 == *a2;
}

uint64_t sub_2168F3C64()
{
  return 0;
}

void *sub_2168F3C70(double **a1, void *a2)
{
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, *a1);
}

void *sub_2168F3C80()
{
  return &unk_26C74C6F0;
}

uint64_t sub_2168F3C8C()
{
  return 0;
}

uint64_t sub_2168F3C94()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_2168F3CA0()
{
  return 0;
}

uint64_t sub_2168F3CA8()
{
  return 0;
}

BOOL sub_2168F3CB0(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x80000002174E4336 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2168F3CEC(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C6F0, a2, a3);
}

void *sub_2168F3D10()
{
  return &unk_26C74C6F0;
}

uint64_t sub_2168F3D1C(uint64_t a1)
{
  return *(void *)a1;
}

unsigned int *sub_2168F3D24@<X0>(_OWORD **a1@<X0>, unsigned int **a2@<X8>)
{
  uint64_t v3 = *a1;
  a2[1] = (unsigned int *)((char *)&off_26C74E420 + 2);
  float32x2_t result = (unsigned int *)operator new(0x18uLL);
  *(_OWORD *)float32x2_t result = *v3;
  atomic_store(0, result + 4);
  *a2 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 4, 1u, memory_order_relaxed);
  return result;
}

uint64_t sub_2168F3D7C(uint64_t result, double *a2, double *a3)
{
  double v3 = *a2;
  if (*a2 == 0.0) {
    double v3 = 0.0;
  }
  double v4 = v3;
  if (*(unsigned char *)(result + 8)) {
    *(void *)&double v4 = *(void *)&v3
  }
                   + ((*(void *)result
                     + *(void *)&v3
                     + (*(void *)result + *(void *)&v3) * (*(void *)result + *(void *)&v3)) >> 1);
  else {
    *(unsigned char *)(result + 8) = 1;
  }
  *(double *)float32x2_t result = v4;
  double v5 = *a3;
  if (*a3 == 0.0) {
    double v5 = 0.0;
  }
  *(void *)float32x2_t result = *(void *)&v5
                    + ((*(void *)&v4
                      + *(void *)&v5
                      + (*(void *)&v4 + *(void *)&v5) * (*(void *)&v4 + *(void *)&v5)) >> 1);
  return result;
}

atomic_uint *sub_2168F3DDC(atomic_uint **a1)
{
  unsigned int v2 = atomic_load((unsigned int *)*a1 + 4);
  if (v2 != 1)
  {
    double v3 = (unsigned int *)operator new(0x18uLL);
    double v4 = *a1;
    *(_OWORD *)double v3 = *(_OWORD *)*a1;
    atomic_store(0, v3 + 4);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 4, 1u, memory_order_relaxed);
    *a1 = (atomic_uint *)v3;
    if (atomic_fetch_add_explicit(v4 + 4, 0xFFFFFFFF, memory_order_release) == 1)
    {
      __dmb(9u);
      operator delete(v4);
    }
  }
  return *a1;
}

void *sub_2168F3E5C@<X0>(unsigned __int16 *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)a1 + 1);
  if ((v3 & 4) != 0) {
    a1 = (unsigned __int16 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  double v4 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1];
  double v5 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[1]];
  a2[1] = (char *)&off_26C74E420 + 2;
  float32x2_t result = operator new(0x18uLL);
  *(double *)float32x2_t result = v4;
  *((double *)result + 1) = v5;
  atomic_store(0, (unsigned int *)result + 4);
  *a2 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 4, 1u, memory_order_relaxed);
  return result;
}

uint64_t sub_2168F3EEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    double v4 = (double *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  else {
    double v4 = *(double **)a1;
  }
  float v5 = *v4;
  if (v5 == 0.0)
  {
    unsigned int v6 = HIWORD(LODWORD(v5));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v5) >> 23])
  {
    unsigned int v6 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v5) >> 23]
       + (((LODWORD(v5) & 0x7FFFFF) + ((LODWORD(v5) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v6) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v5));
  }
  float v7 = v4[1];
  if (v7 == 0.0)
  {
    uint64_t result = HIWORD(LODWORD(v7));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v7) >> 23])
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v7) >> 23]
           + (((LODWORD(v7) & 0x7FFFFF) + ((LODWORD(v7) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v7));
  }
  *(void *)(a2 + 8) = (char *)&off_26C74E2B0 + 3;
  *(_DWORD *)a2 = (unsigned __int16)v6 | ((unsigned __int16)result << 16);
  return result;
}

unsigned __int16 *sub_2168F3FE8@<X0>(unsigned __int16 *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *((void *)result + 1);
  if ((v3 & 4) != 0) {
    uint64_t result = (unsigned __int16 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  float v4 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*result];
  float v5 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[result[1]];
  *(void *)(a2 + 8) = (char *)&off_26C74E368 + 3;
  *(float *)a2 = v4;
  *(float *)(a2 + 4) = v5;
  return result;
}

uint64_t sub_2168F404C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int v2 = (float *)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  if ((v4 & 4) != 0) {
    unsigned int v2 = (float *)(*(uint64_t (**)(uint64_t))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  float v5 = (pxrInternal__aapl__pxrReserved__::pxr_half::half *)*(unsigned int *)v2;
  if (*v2 == 0.0)
  {
    unsigned int v6 = v5 >> 16;
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v5 >> 23])
  {
    unsigned int v6 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v5 >> 23]
       + (((v5 & 0x7FFFFF) + ((v5 >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v6) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert(v5);
  }
  float v7 = v2[1];
  if (v7 == 0.0)
  {
    uint64_t result = HIWORD(LODWORD(v7));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v7) >> 23])
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v7) >> 23]
           + (((LODWORD(v7) & 0x7FFFFF) + ((LODWORD(v7) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v7));
  }
  *(void *)(a2 + 8) = (char *)&off_26C74E2B0 + 3;
  *(_DWORD *)a2 = (unsigned __int16)v6 | ((unsigned __int16)result << 16);
  return result;
}

unsigned int *sub_2168F4144@<X0>(float32x2_t *a1@<X0>, unsigned int **a2@<X8>)
{
  float32x2_t v3 = a1[1];
  if ((v3.i8[0] & 4) != 0) {
    a1 = (float32x2_t *)(*(uint64_t (**)(void))((*(void *)&v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  a2[1] = (unsigned int *)((char *)&off_26C74E420 + 2);
  float64x2_t v5 = vcvtq_f64_f32(*a1);
  uint64_t result = (unsigned int *)operator new(0x18uLL);
  *(float64x2_t *)uint64_t result = v5;
  atomic_store(0, result + 4);
  *a2 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 4, 1u, memory_order_relaxed);
  return result;
}

float32x2_t sub_2168F41C4@<D0>(uint64_t a1@<X0>, float32x2_t *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    uint64_t v4 = (float64x2_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  else {
    uint64_t v4 = *(float64x2_t **)a1;
  }
  a2[1] = (float32x2_t)((char *)&off_26C74E368 + 3);
  float32x2_t result = vcvt_f32_f64(*v4);
  *a2 = result;
  return result;
}

uint64_t sub_2168F421C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    uint64_t v4 = (int *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  else {
    uint64_t v4 = *(int **)a1;
  }
  float64x2_t v5 = (pxrInternal__aapl__pxrReserved__::pxr_half::half *)COERCE_UNSIGNED_INT((float)*v4);
  if (*v4)
  {
    if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v5 >> 23]) {
      unsigned int v6 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v5 >> 23]
    }
         + (((v5 & 0x7FFFFF) + ((v5 >> 13) & 1) + 4095) >> 13);
    else {
      LOWORD(v6) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert(v5);
    }
  }
  else
  {
    unsigned int v6 = v5 >> 16;
  }
  int v7 = v4[1];
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::pxr_half::half *)COERCE_UNSIGNED_INT((float)v7);
  if (v7)
  {
    if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v8 >> 23]) {
      unsigned int v9 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v8 >> 23]
    }
         + (((v8 & 0x7FFFFF) + ((v8 >> 13) & 1) + 4095) >> 13);
    else {
      LOWORD(v9) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert(v8);
    }
  }
  else
  {
    unsigned int v9 = v8 >> 16;
  }
  int v10 = v4[2];
  int v11 = (pxrInternal__aapl__pxrReserved__::pxr_half::half *)COERCE_UNSIGNED_INT((float)v10);
  if (v10)
  {
    if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v11 >> 23]) {
      uint64_t result = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v11 >> 23]
    }
             + (((v11 & 0x7FFFFF) + ((v11 >> 13) & 1) + 4095) >> 13);
    else {
      uint64_t result = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert(v11);
    }
  }
  else
  {
    uint64_t result = v11 >> 16;
  }
  *(void *)(a2 + 8) = (char *)&off_26C74E4D8 + 3;
  *(_WORD *)a2 = v6;
  *(_WORD *)(a2 + 2) = v9;
  *(_WORD *)(a2 + 4) = result;
  return result;
}

int *sub_2168F4358(int *result, uint64_t a2)
{
  int v2 = *result;
  *(_WORD *)(a2 + 4) = *((_WORD *)result + 2);
  *(_DWORD *)a2 = v2;
  return result;
}

int *sub_2168F4370(int *result, uint64_t a2)
{
  int v2 = *result;
  *(_WORD *)(a2 + 4) = *((_WORD *)result + 2);
  *(_DWORD *)a2 = v2;
  return result;
}

uint64_t sub_2168F4384()
{
  return 1;
}

unint64_t sub_2168F438C(unsigned __int16 *a1)
{
  uint64_t v2 = 0;
  char v3 = 0;
  sub_2168F44D4((uint64_t)&v2, a1, a1 + 1, a1 + 2);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v2));
}

uint64_t sub_2168F43F4()
{
  return 0;
}

void *sub_2168F4400(uint64_t a1, void *a2)
{
  return pxrInternal__aapl__pxrReserved__::operator<<(a2);
}

void *sub_2168F4410()
{
  return &unk_26C74C750;
}

uint64_t sub_2168F441C()
{
  return 0;
}

uint64_t sub_2168F4424()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_2168F4430()
{
  return 0;
}

uint64_t sub_2168F4438()
{
  return 0;
}

BOOL sub_2168F4440(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x80000002174E4426 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2168F447C(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C750, a2, a3);
}

void *sub_2168F44A0()
{
  return &unk_26C74C750;
}

uint64_t sub_2168F44B0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = (char *)&off_26C74E4D8 + 3;
  *(_DWORD *)a2 = *(_DWORD *)result;
  *(_WORD *)(a2 + 4) = *(_WORD *)(result + 4);
  return result;
}

uint64_t sub_2168F44D4(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3, unsigned __int16 *a4)
{
  uint64_t v4 = *a2;
  if (*(unsigned char *)(a1 + 8)) {
    v4 += (unint64_t)(*(void *)a1 + v4 + (*(void *)a1 + v4) * (*(void *)a1 + v4)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v4;
  return sub_2168F3884(a1, a3, a4);
}

BOOL sub_2168F450C(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a2]
      && pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[1]] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[1]]
      && pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[2]] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[2]];
}

void *sub_2168F4568@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    uint64_t v4 = (int32x2_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  else {
    uint64_t v4 = *(int32x2_t **)a1;
  }
  float v5 = (float)v4[1].i32[0];
  a2[1] = (char *)&off_26C74E590 + 2;
  float32x2_t v6 = vcvt_f32_s32(*v4);
  uint64_t result = operator new(0x10uLL);
  *(float32x2_t *)uint64_t result = v6;
  *((float *)result + 2) = v5;
  atomic_store(0, (unsigned int *)result + 3);
  *a2 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 3, 1u, memory_order_relaxed);
  return result;
}

uint64_t *sub_2168F45F0(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 12), 1u, memory_order_relaxed);
  }
  return result;
}

void sub_2168F460C(atomic_uint **a1)
{
  int64x2_t v1 = *a1;
  if (v1)
  {
    if (atomic_fetch_add_explicit(v1 + 3, 0xFFFFFFFF, memory_order_release) == 1)
    {
      __dmb(9u);
      operator delete(v1);
    }
  }
}

void *sub_2168F4634(void *result, void *a2)
{
  *a2 = *result;
  *uint64_t result = 0;
  return result;
}

uint64_t sub_2168F4644()
{
  return 1;
}

unint64_t sub_2168F464C(float **a1)
{
  int64x2_t v1 = *a1;
  uint64_t v2 = *a1 + 1;
  uint64_t v3 = *a1 + 2;
  uint64_t v5 = 0;
  char v6 = 0;
  sub_2168F4850((uint64_t)&v5, v1, v2, v3);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v5));
}

BOOL sub_2168F46A8(float **a1, float **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  return **a1 == **a2 && v2[1] == v3[1] && v2[2] == v3[2];
}

BOOL sub_2168F46EC(float **a1, float *a2)
{
  uint64_t v2 = *a1;
  return **a1 == *a2 && v2[1] == a2[1] && v2[2] == a2[2];
}

uint64_t sub_2168F4730()
{
  return 0;
}

void *sub_2168F473C(float **a1, void *a2)
{
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, *a1);
}

void *sub_2168F474C()
{
  return &unk_26C74C740;
}

uint64_t sub_2168F4758()
{
  return 0;
}

uint64_t sub_2168F4760()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_2168F476C()
{
  return 0;
}

uint64_t sub_2168F4774()
{
  return 0;
}

BOOL sub_2168F477C(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x80000002174E43F6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2168F47B8(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C740, a2, a3);
}

void *sub_2168F47DC()
{
  return &unk_26C74C740;
}

uint64_t sub_2168F47E8(uint64_t a1)
{
  return *(void *)a1;
}

_DWORD *sub_2168F47F0@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  a2[1] = (char *)&off_26C74E590 + 2;
  uint64_t result = operator new(0x10uLL);
  int v5 = *(_DWORD *)(v3 + 8);
  *(void *)uint64_t result = *(void *)v3;
  result[2] = v5;
  atomic_store(0, result + 3);
  *a2 = result;
  atomic_fetch_add_explicit(result + 3, 1u, memory_order_relaxed);
  return result;
}

uint64_t sub_2168F4850(uint64_t a1, float *a2, float *a3, float *a4)
{
  float v4 = *a2;
  if (*a2 == 0.0) {
    float v4 = 0.0;
  }
  unint64_t v5 = LODWORD(v4);
  if (*(unsigned char *)(a1 + 8)) {
    unint64_t v5 = ((*(void *)a1 + LODWORD(v4) + (*(void *)a1 + LODWORD(v4)) * (*(void *)a1 + (unint64_t)LODWORD(v4))) >> 1)
  }
       + LODWORD(v4);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v5;
  return sub_2168F3A98(a1, a3, a4);
}

atomic_uint *sub_2168F489C(atomic_uint **a1)
{
  unsigned int v2 = atomic_load((unsigned int *)*a1 + 3);
  if (v2 != 1)
  {
    uint64_t v3 = operator new(0x10uLL);
    float v4 = *a1;
    atomic_uint v5 = (*a1)[2];
    *(void *)uint64_t v3 = *(void *)*a1;
    v3[2] = v5;
    atomic_store(0, v3 + 3);
    atomic_fetch_add_explicit(v3 + 3, 1u, memory_order_relaxed);
    *a1 = v3;
    if (atomic_fetch_add_explicit(v4 + 3, 0xFFFFFFFF, memory_order_release) == 1)
    {
      __dmb(9u);
      operator delete(v4);
    }
  }
  return *a1;
}

void *sub_2168F4924@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    float v4 = (int *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  else {
    float v4 = *(int **)a1;
  }
  double v5 = (double)*v4;
  double v6 = (double)v4[1];
  double v7 = (double)v4[2];
  a2[1] = (char *)&off_26C74E648 + 2;
  uint64_t result = operator new(0x20uLL);
  *(double *)uint64_t result = v5;
  *((double *)result + 1) = v6;
  *((double *)result + 2) = v7;
  atomic_store(0, (unsigned int *)result + 6);
  *a2 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 6, 1u, memory_order_relaxed);
  return result;
}

uint64_t *sub_2168F49B8(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 24), 1u, memory_order_relaxed);
  }
  return result;
}

void sub_2168F49D4(atomic_uint **a1)
{
  int64x2_t v1 = *a1;
  if (v1)
  {
    if (atomic_fetch_add_explicit(v1 + 6, 0xFFFFFFFF, memory_order_release) == 1)
    {
      __dmb(9u);
      operator delete(v1);
    }
  }
}

void *sub_2168F49FC(void *result, void *a2)
{
  *a2 = *result;
  *uint64_t result = 0;
  return result;
}

uint64_t sub_2168F4A0C()
{
  return 1;
}

unint64_t sub_2168F4A14(double **a1)
{
  int64x2_t v1 = *a1;
  uint64_t v2 = *a1 + 1;
  uint64_t v3 = *a1 + 2;
  uint64_t v5 = 0;
  char v6 = 0;
  sub_2168F4C18((uint64_t)&v5, v1, v2, v3);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v5));
}

BOOL sub_2168F4A70(double **a1, double **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  return **a1 == **a2 && v2[1] == v3[1] && v2[2] == v3[2];
}

BOOL sub_2168F4AB4(double **a1, double *a2)
{
  uint64_t v2 = *a1;
  return **a1 == *a2 && v2[1] == a2[1] && v2[2] == a2[2];
}

uint64_t sub_2168F4AF8()
{
  return 0;
}

void *sub_2168F4B04(double **a1, void *a2)
{
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, *a1);
}

void *sub_2168F4B14()
{
  return &unk_26C74C730;
}

uint64_t sub_2168F4B20()
{
  return 0;
}

uint64_t sub_2168F4B28()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_2168F4B34()
{
  return 0;
}

uint64_t sub_2168F4B3C()
{
  return 0;
}

BOOL sub_2168F4B44(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x80000002174E43C6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2168F4B80(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C730, a2, a3);
}

void *sub_2168F4BA4()
{
  return &unk_26C74C730;
}

uint64_t sub_2168F4BB0(uint64_t a1)
{
  return *(void *)a1;
}

void *sub_2168F4BB8@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  a2[1] = (char *)&off_26C74E648 + 2;
  uint64_t result = operator new(0x20uLL);
  uint64_t v5 = *(void *)(v3 + 16);
  *(_OWORD *)uint64_t result = *(_OWORD *)v3;
  *((void *)result + 2) = v5;
  atomic_store(0, (unsigned int *)result + 6);
  *a2 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 6, 1u, memory_order_relaxed);
  return result;
}

uint64_t sub_2168F4C18(uint64_t a1, double *a2, double *a3, double *a4)
{
  double v4 = *a2;
  if (*a2 == 0.0) {
    double v4 = 0.0;
  }
  double v5 = v4;
  if (*(unsigned char *)(a1 + 8)) {
    *(void *)&double v5 = *(void *)&v4
  }
                   + ((*(void *)a1
                     + *(void *)&v4
                     + (*(void *)a1 + *(void *)&v4) * (*(void *)a1 + *(void *)&v4)) >> 1);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(double *)a1 = v5;
  return sub_2168F3D7C(a1, a3, a4);
}

atomic_uint *sub_2168F4C60(atomic_uint **a1)
{
  unsigned int v2 = atomic_load((unsigned int *)*a1 + 6);
  if (v2 != 1)
  {
    uint64_t v3 = operator new(0x20uLL);
    double v4 = *a1;
    uint64_t v5 = *((void *)*a1 + 2);
    *(_OWORD *)uint64_t v3 = *(_OWORD *)*a1;
    *((void *)v3 + 2) = v5;
    atomic_store(0, (unsigned int *)v3 + 6);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 6, 1u, memory_order_relaxed);
    *a1 = (atomic_uint *)v3;
    if (atomic_fetch_add_explicit(v4 + 6, 0xFFFFFFFF, memory_order_release) == 1)
    {
      __dmb(9u);
      operator delete(v4);
    }
  }
  return *a1;
}

void *sub_2168F4CE8@<X0>(unsigned __int16 *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)a1 + 1);
  if ((v3 & 4) != 0) {
    a1 = (unsigned __int16 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  double v4 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1];
  double v5 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[1]];
  double v6 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[2]];
  a2[1] = (char *)&off_26C74E648 + 2;
  uint64_t result = operator new(0x20uLL);
  *(double *)uint64_t result = v4;
  *((double *)result + 1) = v5;
  *((double *)result + 2) = v6;
  atomic_store(0, (unsigned int *)result + 6);
  *a2 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 6, 1u, memory_order_relaxed);
  return result;
}

uint64_t sub_2168F4D90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    double v4 = (double *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  else {
    double v4 = *(double **)a1;
  }
  float v5 = *v4;
  if (v5 == 0.0)
  {
    unsigned int v6 = HIWORD(LODWORD(v5));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v5) >> 23])
  {
    unsigned int v6 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v5) >> 23]
       + (((LODWORD(v5) & 0x7FFFFF) + ((LODWORD(v5) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v6) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v5));
  }
  float v7 = v4[1];
  if (v7 == 0.0)
  {
    unsigned int v8 = HIWORD(LODWORD(v7));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v7) >> 23])
  {
    unsigned int v8 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v7) >> 23]
       + (((LODWORD(v7) & 0x7FFFFF) + ((LODWORD(v7) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v8) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v7));
  }
  float v9 = v4[2];
  if (v9 == 0.0)
  {
    uint64_t result = HIWORD(LODWORD(v9));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v9) >> 23])
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v9) >> 23]
           + (((LODWORD(v9) & 0x7FFFFF) + ((LODWORD(v9) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v9));
  }
  *(void *)(a2 + 8) = (char *)&off_26C74E4D8 + 3;
  *(_WORD *)a2 = v6;
  *(_WORD *)(a2 + 2) = v8;
  *(_WORD *)(a2 + 4) = result;
  return result;
}

_DWORD *sub_2168F4EE0@<X0>(unsigned __int16 *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)a1 + 1);
  if ((v3 & 4) != 0) {
    a1 = (unsigned __int16 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  float v4 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1];
  float v5 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[1]];
  float v6 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[2]];
  a2[1] = (char *)&off_26C74E590 + 2;
  uint64_t result = operator new(0x10uLL);
  *(float *)uint64_t result = v4;
  *((float *)result + 1) = v5;
  *((float *)result + 2) = v6;
  atomic_store(0, result + 3);
  *a2 = result;
  atomic_fetch_add_explicit(result + 3, 1u, memory_order_relaxed);
  return result;
}

uint64_t sub_2168F4F7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    float v4 = (float *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  else {
    float v4 = *(float **)a1;
  }
  float v5 = (pxrInternal__aapl__pxrReserved__::pxr_half::half *)*(unsigned int *)v4;
  if (*v4 == 0.0)
  {
    unsigned int v6 = v5 >> 16;
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v5 >> 23])
  {
    unsigned int v6 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v5 >> 23]
       + (((v5 & 0x7FFFFF) + ((v5 >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v6) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert(v5);
  }
  float v7 = v4[1];
  if (v7 == 0.0)
  {
    unsigned int v8 = HIWORD(LODWORD(v7));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v7) >> 23])
  {
    unsigned int v8 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v7) >> 23]
       + (((LODWORD(v7) & 0x7FFFFF) + ((LODWORD(v7) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v8) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v7));
  }
  float v9 = v4[2];
  if (v9 == 0.0)
  {
    uint64_t result = HIWORD(LODWORD(v9));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v9) >> 23])
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v9) >> 23]
           + (((LODWORD(v9) & 0x7FFFFF) + ((LODWORD(v9) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    uint64_t result = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v9));
  }
  *(void *)(a2 + 8) = (char *)&off_26C74E4D8 + 3;
  *(_WORD *)a2 = v6;
  *(_WORD *)(a2 + 2) = v8;
  *(_WORD *)(a2 + 4) = result;
  return result;
}

void *sub_2168F50C0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    float v4 = (float32x2_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  else {
    float v4 = *(float32x2_t **)a1;
  }
  double v5 = v4[1].f32[0];
  a2[1] = (char *)&off_26C74E648 + 2;
  float64x2_t v7 = vcvtq_f64_f32(*v4);
  uint64_t result = operator new(0x20uLL);
  *(float64x2_t *)uint64_t result = v7;
  *((double *)result + 2) = v5;
  atomic_store(0, (unsigned int *)result + 6);
  *a2 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 6, 1u, memory_order_relaxed);
  return result;
}

void *sub_2168F5158@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    float v4 = (float64x2_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  else {
    float v4 = *(float64x2_t **)a1;
  }
  float v5 = v4[1].f64[0];
  a2[1] = (char *)&off_26C74E590 + 2;
  float32x2_t v6 = vcvt_f32_f64(*v4);
  uint64_t result = operator new(0x10uLL);
  *(float32x2_t *)uint64_t result = v6;
  *((float *)result + 2) = v5;
  atomic_store(0, (unsigned int *)result + 3);
  *a2 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 3, 1u, memory_order_relaxed);
  return result;
}

_WORD *sub_2168F51E0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    float v4 = (int *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  else {
    float v4 = *(int **)a1;
  }
  uint64_t result = sub_2168F5244(&v6, v4);
  *a2 = v6;
  a2[1] = (char *)&off_26C74E700 + 3;
  return result;
}

_WORD *sub_2168F5244(_WORD *a1, int *a2)
{
  float v4 = (pxrInternal__aapl__pxrReserved__::pxr_half::half *)COERCE_UNSIGNED_INT((float)*a2);
  if (*a2)
  {
    if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v4 >> 23]) {
      unsigned int v5 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v4 >> 23]
    }
         + (((v4 & 0x7FFFFF) + ((v4 >> 13) & 1) + 4095) >> 13);
    else {
      LOWORD(v5) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert(v4);
    }
  }
  else
  {
    unsigned int v5 = v4 >> 16;
  }
  *a1 = v5;
  int v6 = a2[1];
  float64x2_t v7 = (pxrInternal__aapl__pxrReserved__::pxr_half::half *)COERCE_UNSIGNED_INT((float)v6);
  if (v6)
  {
    if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v7 >> 23]) {
      unsigned int v8 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v7 >> 23]
    }
         + (((v7 & 0x7FFFFF) + ((v7 >> 13) & 1) + 4095) >> 13);
    else {
      LOWORD(v8) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert(v7);
    }
  }
  else
  {
    unsigned int v8 = v7 >> 16;
  }
  a1[1] = v8;
  int v9 = a2[2];
  int v10 = (pxrInternal__aapl__pxrReserved__::pxr_half::half *)COERCE_UNSIGNED_INT((float)v9);
  if (v9)
  {
    if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v10 >> 23]) {
      unsigned int v11 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v10 >> 23]
    }
          + (((v10 & 0x7FFFFF) + ((v10 >> 13) & 1) + 4095) >> 13);
    else {
      LOWORD(v11) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert(v10);
    }
  }
  else
  {
    unsigned int v11 = v10 >> 16;
  }
  a1[2] = v11;
  int v12 = a2[3];
  uint64_t v13 = (pxrInternal__aapl__pxrReserved__::pxr_half::half *)COERCE_UNSIGNED_INT((float)v12);
  if (v12)
  {
    if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v13 >> 23]) {
      unsigned int v14 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v13 >> 23]
    }
          + (((v13 & 0x7FFFFF) + ((v13 >> 13) & 1) + 4095) >> 13);
    else {
      LOWORD(v14) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert(v13);
    }
  }
  else
  {
    unsigned int v14 = v13 >> 16;
  }
  a1[3] = v14;
  return a1;
}

void *sub_2168F538C(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

void *sub_2168F539C(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_2168F53A8()
{
  return 1;
}

unint64_t sub_2168F53B0(unsigned __int16 *a1)
{
  uint64_t v2 = 0;
  char v3 = 0;
  sub_2168F54F0((uint64_t)&v2, a1, a1 + 1, a1 + 2, a1 + 3);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v2));
}

uint64_t sub_2168F541C()
{
  return 0;
}

void *sub_2168F5428(uint64_t a1, void *a2)
{
  return pxrInternal__aapl__pxrReserved__::operator<<(a2);
}

void *sub_2168F5438()
{
  return &unk_26C74C790;
}

uint64_t sub_2168F5444()
{
  return 0;
}

uint64_t sub_2168F544C()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_2168F5458()
{
  return 0;
}

uint64_t sub_2168F5460()
{
  return 0;
}

BOOL sub_2168F5468(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x80000002174E44E6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2168F54A4(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C790, a2, a3);
}

void *sub_2168F54C8()
{
  return &unk_26C74C790;
}

void *sub_2168F54D8@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  a2[1] = (char *)&off_26C74E700 + 3;
  return result;
}

uint64_t sub_2168F54F0(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3, unsigned __int16 *a4, unsigned __int16 *a5)
{
  uint64_t v5 = *a2;
  if (*(unsigned char *)(a1 + 8)) {
    v5 += (unint64_t)(*(void *)a1 + v5 + (*(void *)a1 + v5) * (*(void *)a1 + v5)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v5;
  return sub_2168F44D4(a1, a3, a4, a5);
}

BOOL sub_2168F552C(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a2]
      && pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[1]] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[1]]
      && pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[2]] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[2]]
      && pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[3]] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[3]];
}

unsigned int *sub_2168F55A0@<X0>(uint64_t a1@<X0>, unsigned int **a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    float v4 = (int32x4_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  else {
    float v4 = *(int32x4_t **)a1;
  }
  a2[1] = (unsigned int *)((char *)&off_26C74E7B8 + 2);
  float32x4_t v6 = vcvtq_f32_s32(*v4);
  uint64_t result = (unsigned int *)operator new(0x14uLL);
  *(float32x4_t *)uint64_t result = v6;
  atomic_store(0, result + 4);
  *a2 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 4, 1u, memory_order_relaxed);
  return result;
}

uint64_t *sub_2168F5624(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 16), 1u, memory_order_relaxed);
  }
  return result;
}

void sub_2168F5640(atomic_uint **a1)
{
  int64x2_t v1 = *a1;
  if (v1)
  {
    if (atomic_fetch_add_explicit(v1 + 4, 0xFFFFFFFF, memory_order_release) == 1)
    {
      __dmb(9u);
      operator delete(v1);
    }
  }
}

void *sub_2168F5668(void *result, void *a2)
{
  *a2 = *result;
  *uint64_t result = 0;
  return result;
}

uint64_t sub_2168F5678()
{
  return 1;
}

unint64_t sub_2168F5680(float **a1)
{
  int64x2_t v1 = *a1;
  uint64_t v2 = *a1 + 1;
  uint64_t v3 = *a1 + 2;
  float v4 = *a1 + 3;
  uint64_t v6 = 0;
  char v7 = 0;
  sub_2168F58A0((uint64_t)&v6, v1, v2, v3, v4);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v6));
}

BOOL sub_2168F56E0(float **a1, float **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  return **a1 == **a2 && v2[1] == v3[1] && v2[2] == v3[2] && v2[3] == v3[3];
}

BOOL sub_2168F5734(float **a1, float *a2)
{
  uint64_t v2 = *a1;
  return **a1 == *a2 && v2[1] == a2[1] && v2[2] == a2[2] && v2[3] == a2[3];
}

uint64_t sub_2168F5788()
{
  return 0;
}

void *sub_2168F5794(float **a1, void *a2)
{
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, *a1);
}

void *sub_2168F57A4()
{
  return &unk_26C74C780;
}

uint64_t sub_2168F57B0()
{
  return 0;
}

uint64_t sub_2168F57B8()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_2168F57C4()
{
  return 0;
}

uint64_t sub_2168F57CC()
{
  return 0;
}

BOOL sub_2168F57D4(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x80000002174E44B6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2168F5810(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C780, a2, a3);
}

void *sub_2168F5834()
{
  return &unk_26C74C780;
}

uint64_t sub_2168F5840(uint64_t a1)
{
  return *(void *)a1;
}

unsigned int *sub_2168F5848@<X0>(_OWORD **a1@<X0>, unsigned int **a2@<X8>)
{
  uint64_t v3 = *a1;
  a2[1] = (unsigned int *)((char *)&off_26C74E7B8 + 2);
  uint64_t result = (unsigned int *)operator new(0x14uLL);
  *(_OWORD *)uint64_t result = *v3;
  atomic_store(0, result + 4);
  *a2 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 4, 1u, memory_order_relaxed);
  return result;
}

uint64_t sub_2168F58A0(uint64_t a1, float *a2, float *a3, float *a4, float *a5)
{
  float v5 = *a2;
  if (*a2 == 0.0) {
    float v5 = 0.0;
  }
  unint64_t v6 = LODWORD(v5);
  if (*(unsigned char *)(a1 + 8)) {
    unint64_t v6 = ((*(void *)a1 + LODWORD(v5) + (*(void *)a1 + LODWORD(v5)) * (*(void *)a1 + (unint64_t)LODWORD(v5))) >> 1)
  }
       + LODWORD(v5);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v6;
  return sub_2168F4850(a1, a3, a4, a5);
}

atomic_uint *sub_2168F58F0(atomic_uint **a1)
{
  unsigned int v2 = atomic_load((unsigned int *)*a1 + 4);
  if (v2 != 1)
  {
    uint64_t v3 = (unsigned int *)operator new(0x14uLL);
    float v4 = *a1;
    *(_OWORD *)uint64_t v3 = *(_OWORD *)*a1;
    atomic_store(0, v3 + 4);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 4, 1u, memory_order_relaxed);
    *a1 = (atomic_uint *)v3;
    if (atomic_fetch_add_explicit(v4 + 4, 0xFFFFFFFF, memory_order_release) == 1)
    {
      __dmb(9u);
      operator delete(v4);
    }
  }
  return *a1;
}

void *sub_2168F5970@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    float v4 = (int *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  else {
    float v4 = *(int **)a1;
  }
  double v5 = (double)*v4;
  double v6 = (double)v4[1];
  double v7 = (double)v4[2];
  double v8 = (double)v4[3];
  a2[1] = (char *)&off_26C74E870 + 2;
  uint64_t result = operator new(0x28uLL);
  *(double *)uint64_t result = v5;
  *((double *)result + 1) = v6;
  *((double *)result + 2) = v7;
  *((double *)result + 3) = v8;
  atomic_store(0, (unsigned int *)result + 8);
  *a2 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 8, 1u, memory_order_relaxed);
  return result;
}

uint64_t *sub_2168F5A08(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 32), 1u, memory_order_relaxed);
  }
  return result;
}

void sub_2168F5A24(atomic_uint **a1)
{
  int64x2_t v1 = *a1;
  if (v1)
  {
    if (atomic_fetch_add_explicit(v1 + 8, 0xFFFFFFFF, memory_order_release) == 1)
    {
      __dmb(9u);
      operator delete(v1);
    }
  }
}

void *sub_2168F5A4C(void *result, void *a2)
{
  *a2 = *result;
  *uint64_t result = 0;
  return result;
}

uint64_t sub_2168F5A5C()
{
  return 1;
}

unint64_t sub_2168F5A64(double **a1)
{
  int64x2_t v1 = *a1;
  uint64_t v2 = *a1 + 1;
  uint64_t v3 = *a1 + 2;
  float v4 = *a1 + 3;
  uint64_t v6 = 0;
  char v7 = 0;
  sub_2168F5C84((uint64_t)&v6, v1, v2, v3, v4);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v6));
}

BOOL sub_2168F5AC4(double **a1, double **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  return **a1 == **a2 && v2[1] == v3[1] && v2[2] == v3[2] && v2[3] == v3[3];
}

BOOL sub_2168F5B18(double **a1, double *a2)
{
  uint64_t v2 = *a1;
  return **a1 == *a2 && v2[1] == a2[1] && v2[2] == a2[2] && v2[3] == a2[3];
}

uint64_t sub_2168F5B6C()
{
  return 0;
}

void *sub_2168F5B78(double **a1, void *a2)
{
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, *a1);
}

void *sub_2168F5B88()
{
  return &unk_26C74C770;
}

uint64_t sub_2168F5B94()
{
  return 0;
}

uint64_t sub_2168F5B9C()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_2168F5BA8()
{
  return 0;
}

uint64_t sub_2168F5BB0()
{
  return 0;
}

BOOL sub_2168F5BB8(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x80000002174E4486 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2168F5BF4(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C770, a2, a3);
}

void *sub_2168F5C18()
{
  return &unk_26C74C770;
}

uint64_t sub_2168F5C24(uint64_t a1)
{
  return *(void *)a1;
}

void *sub_2168F5C2C@<X0>(_OWORD **a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  a2[1] = (char *)&off_26C74E870 + 2;
  uint64_t result = operator new(0x28uLL);
  long long v5 = v3[1];
  *(_OWORD *)uint64_t result = *v3;
  *((_OWORD *)result + 1) = v5;
  atomic_store(0, (unsigned int *)result + 8);
  *a2 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 8, 1u, memory_order_relaxed);
  return result;
}

uint64_t sub_2168F5C84(uint64_t a1, double *a2, double *a3, double *a4, double *a5)
{
  double v5 = *a2;
  if (*a2 == 0.0) {
    double v5 = 0.0;
  }
  double v6 = v5;
  if (*(unsigned char *)(a1 + 8)) {
    *(void *)&double v6 = *(void *)&v5
  }
                   + ((*(void *)a1
                     + *(void *)&v5
                     + (*(void *)a1 + *(void *)&v5) * (*(void *)a1 + *(void *)&v5)) >> 1);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(double *)a1 = v6;
  return sub_2168F4C18(a1, a3, a4, a5);
}

atomic_uint *sub_2168F5CD0(atomic_uint **a1)
{
  unsigned int v2 = atomic_load((unsigned int *)*a1 + 8);
  if (v2 != 1)
  {
    uint64_t v3 = operator new(0x28uLL);
    float v4 = *a1;
    long long v5 = *((_OWORD *)*a1 + 1);
    *(_OWORD *)uint64_t v3 = *(_OWORD *)*a1;
    *((_OWORD *)v3 + 1) = v5;
    atomic_store(0, (unsigned int *)v3 + 8);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 8, 1u, memory_order_relaxed);
    *a1 = (atomic_uint *)v3;
    if (atomic_fetch_add_explicit(v4 + 8, 0xFFFFFFFF, memory_order_release) == 1)
    {
      __dmb(9u);
      operator delete(v4);
    }
  }
  return *a1;
}

void *sub_2168F5D50@<X0>(unsigned __int16 *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)a1 + 1);
  if ((v3 & 4) != 0) {
    a1 = (unsigned __int16 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  double v4 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1];
  double v5 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[1]];
  double v6 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[2]];
  double v7 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[3]];
  a2[1] = (char *)&off_26C74E870 + 2;
  uint64_t result = operator new(0x28uLL);
  *(double *)uint64_t result = v4;
  *((double *)result + 1) = v5;
  *((double *)result + 2) = v6;
  *((double *)result + 3) = v7;
  atomic_store(0, (unsigned int *)result + 8);
  *a2 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 8, 1u, memory_order_relaxed);
  return result;
}

_WORD *sub_2168F5E04@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    double v4 = (double *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  else {
    double v4 = *(double **)a1;
  }
  uint64_t result = sub_2168F5E68(&v6, v4);
  *a2 = v6;
  a2[1] = (char *)&off_26C74E700 + 3;
  return result;
}

_WORD *sub_2168F5E68(_WORD *a1, double *a2)
{
  float v4 = *a2;
  if (v4 == 0.0)
  {
    unsigned int v5 = HIWORD(LODWORD(v4));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v4) >> 23])
  {
    unsigned int v5 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v4) >> 23]
       + (((LODWORD(v4) & 0x7FFFFF) + ((LODWORD(v4) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v5) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v4));
  }
  *a1 = v5;
  float v6 = a2[1];
  if (v6 == 0.0)
  {
    unsigned int v7 = HIWORD(LODWORD(v6));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v6) >> 23])
  {
    unsigned int v7 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v6) >> 23]
       + (((LODWORD(v6) & 0x7FFFFF) + ((LODWORD(v6) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v7) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v6));
  }
  a1[1] = v7;
  float v8 = a2[2];
  if (v8 == 0.0)
  {
    unsigned int v9 = HIWORD(LODWORD(v8));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v8) >> 23])
  {
    unsigned int v9 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v8) >> 23]
       + (((LODWORD(v8) & 0x7FFFFF) + ((LODWORD(v8) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v9) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v8));
  }
  a1[2] = v9;
  float v10 = a2[3];
  if (v10 == 0.0)
  {
    unsigned int v11 = HIWORD(LODWORD(v10));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v10) >> 23])
  {
    unsigned int v11 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v10) >> 23]
        + (((LODWORD(v10) & 0x7FFFFF) + ((LODWORD(v10) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v11) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v10));
  }
  a1[3] = v11;
  return a1;
}

_DWORD *sub_2168F5FD0@<X0>(unsigned __int16 *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)a1 + 1);
  if ((v3 & 4) != 0) {
    a1 = (unsigned __int16 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  float v4 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1];
  float v5 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[1]];
  float v6 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[2]];
  float v7 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[3]];
  a2[1] = (char *)&off_26C74E7B8 + 2;
  uint64_t result = operator new(0x14uLL);
  *(float *)uint64_t result = v4;
  *((float *)result + 1) = v5;
  *((float *)result + 2) = v6;
  *((float *)result + 3) = v7;
  atomic_store(0, result + 4);
  *a2 = result;
  atomic_fetch_add_explicit(result + 4, 1u, memory_order_relaxed);
  return result;
}

_WORD *sub_2168F6074@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    float v4 = (float *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  else {
    float v4 = *(float **)a1;
  }
  uint64_t result = sub_2168F60D8(&v6, v4);
  *a2 = v6;
  a2[1] = (char *)&off_26C74E700 + 3;
  return result;
}

_WORD *sub_2168F60D8(_WORD *a1, float *a2)
{
  float v4 = (pxrInternal__aapl__pxrReserved__::pxr_half::half *)*(unsigned int *)a2;
  if (*a2 == 0.0)
  {
    unsigned int v5 = v4 >> 16;
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v4 >> 23])
  {
    unsigned int v5 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v4 >> 23]
       + (((v4 & 0x7FFFFF) + ((v4 >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v5) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert(v4);
  }
  *a1 = v5;
  float v6 = a2[1];
  if (v6 == 0.0)
  {
    unsigned int v7 = HIWORD(LODWORD(v6));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v6) >> 23])
  {
    unsigned int v7 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v6) >> 23]
       + (((LODWORD(v6) & 0x7FFFFF) + ((LODWORD(v6) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v7) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v6));
  }
  a1[1] = v7;
  float v8 = a2[2];
  if (v8 == 0.0)
  {
    unsigned int v9 = HIWORD(LODWORD(v8));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v8) >> 23])
  {
    unsigned int v9 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v8) >> 23]
       + (((LODWORD(v8) & 0x7FFFFF) + ((LODWORD(v8) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v9) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v8));
  }
  a1[2] = v9;
  float v10 = a2[3];
  if (v10 == 0.0)
  {
    unsigned int v11 = HIWORD(LODWORD(v10));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v10) >> 23])
  {
    unsigned int v11 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v10) >> 23]
        + (((LODWORD(v10) & 0x7FFFFF) + ((LODWORD(v10) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v11) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v10));
  }
  a1[3] = v11;
  return a1;
}

void *sub_2168F6230@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    float v4 = (float32x2_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  else {
    float v4 = *(float32x2_t **)a1;
  }
  a2[1] = (char *)&off_26C74E870 + 2;
  float64x2_t v6 = vcvtq_f64_f32(*v4);
  float64x2_t v7 = vcvtq_f64_f32(v4[1]);
  uint64_t result = operator new(0x28uLL);
  *(float64x2_t *)uint64_t result = v6;
  *((float64x2_t *)result + 1) = v7;
  atomic_store(0, (unsigned int *)result + 8);
  *a2 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 8, 1u, memory_order_relaxed);
  return result;
}

unsigned int *sub_2168F62BC@<X0>(uint64_t a1@<X0>, unsigned int **a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    float v4 = (float64x2_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  else {
    float v4 = *(float64x2_t **)a1;
  }
  a2[1] = (unsigned int *)((char *)&off_26C74E7B8 + 2);
  float32x4_t v6 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*v4), v4[1]);
  uint64_t result = (unsigned int *)operator new(0x14uLL);
  *(float32x4_t *)uint64_t result = v6;
  atomic_store(0, result + 4);
  *a2 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 4, 1u, memory_order_relaxed);
  return result;
}

void *sub_2168F6344@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    float v4 = (const pxrInternal__aapl__pxrReserved__::GfMatrix4f *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  else {
    float v4 = *(const pxrInternal__aapl__pxrReserved__::GfMatrix4f **)a1;
  }
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::GfMatrix4d((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)v10, v4);
  a2[1] = (char *)&off_26C74E928 + 2;
  uint64_t result = operator new(0x88uLL);
  long long v6 = v10[5];
  *((_OWORD *)result + 4) = v10[4];
  *((_OWORD *)result + 5) = v6;
  long long v7 = v10[7];
  *((_OWORD *)result + 6) = v10[6];
  *((_OWORD *)result + 7) = v7;
  long long v8 = v10[1];
  *(_OWORD *)uint64_t result = v10[0];
  *((_OWORD *)result + 1) = v8;
  long long v9 = v10[3];
  *((_OWORD *)result + 2) = v10[2];
  *((_OWORD *)result + 3) = v9;
  atomic_store(0, (unsigned int *)result + 32);
  *a2 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 32, 1u, memory_order_relaxed);
  return result;
}

uint64_t *sub_2168F63E0(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 128), 1u, memory_order_relaxed);
  }
  return result;
}

void sub_2168F63FC(atomic_uint **a1)
{
  int64x2_t v1 = *a1;
  if (v1)
  {
    if (atomic_fetch_add_explicit(v1 + 32, 0xFFFFFFFF, memory_order_release) == 1)
    {
      __dmb(9u);
      operator delete(v1);
    }
  }
}

void *sub_2168F6424(void *result, void *a2)
{
  *a2 = *result;
  *uint64_t result = 0;
  return result;
}

uint64_t sub_2168F6434()
{
  return 1;
}

unint64_t sub_2168F643C(double **a1)
{
  return sub_2168F65AC((uint64_t)&v2, *a1);
}

BOOL sub_2168F6464(double **a1, double **a2)
{
  return pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator==(*a1, *a2);
}

BOOL sub_2168F6470(double **a1, double *a2)
{
  return pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator==(*a1, a2);
}

uint64_t sub_2168F647C()
{
  return 0;
}

void *sub_2168F6488(double **a1, void *a2)
{
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, *a1);
}

void *sub_2168F6498()
{
  return &unk_26C74C5C0;
}

uint64_t sub_2168F64A4()
{
  return 0;
}

uint64_t sub_2168F64AC()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_2168F64B8()
{
  return 0;
}

uint64_t sub_2168F64C0()
{
  return 0;
}

BOOL sub_2168F64C8(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x80000002174E42C6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2168F6504(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C5C0, a2, a3);
}

void *sub_2168F6528()
{
  return &unk_26C74C5C0;
}

uint64_t sub_2168F6534(uint64_t a1)
{
  return *(void *)a1;
}

void *sub_2168F653C@<X0>(long long **a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  a2[1] = (char *)&off_26C74E928 + 2;
  uint64_t result = operator new(0x88uLL);
  long long v5 = v3[3];
  long long v7 = *v3;
  long long v6 = v3[1];
  *((_OWORD *)result + 2) = v3[2];
  *((_OWORD *)result + 3) = v5;
  *(_OWORD *)uint64_t result = v7;
  *((_OWORD *)result + 1) = v6;
  long long v8 = v3[7];
  long long v10 = v3[4];
  long long v9 = v3[5];
  *((_OWORD *)result + 6) = v3[6];
  *((_OWORD *)result + 7) = v8;
  *((_OWORD *)result + 4) = v10;
  *((_OWORD *)result + 5) = v9;
  atomic_store(0, (unsigned int *)result + 32);
  *a2 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 32, 1u, memory_order_relaxed);
  return result;
}

unint64_t sub_2168F65AC(uint64_t a1, double *a2)
{
  uint64_t v3 = 0;
  char v4 = 0;
  sub_2168F664C((uint64_t)&v3, a2, a2 + 1, a2 + 2, a2 + 3, a2 + 4, a2 + 5, a2 + 6, a2 + 7, a2 + 8, a2 + 9, a2 + 10, a2 + 11, a2 + 12, a2 + 13, a2 + 14, a2 + 15);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v3));
}

uint64_t sub_2168F664C(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9, double *a10, double *a11, double *a12, double *a13, double *a14, double *a15, double *a16, double *a17)
{
  double v17 = *a2;
  if (*a2 == 0.0) {
    double v17 = 0.0;
  }
  double v18 = v17;
  if (*(unsigned char *)(a1 + 8)) {
    *(void *)&double v18 = *(void *)&v17
  }
                    + ((*(void *)a1
                      + *(void *)&v17
                      + (*(void *)a1 + *(void *)&v17) * (*(void *)a1 + *(void *)&v17)) >> 1);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(double *)a1 = v18;
  return sub_2168F66CC(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
}

uint64_t sub_2168F66CC(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9, double *a10, double *a11, double *a12, double *a13, double *a14, double *a15, double *a16)
{
  double v16 = *a2;
  if (*a2 == 0.0) {
    double v16 = 0.0;
  }
  double v17 = v16;
  if (*(unsigned char *)(a1 + 8)) {
    *(void *)&double v17 = *(void *)&v16
  }
                    + ((*(void *)a1
                      + *(void *)&v16
                      + (*(void *)a1 + *(void *)&v16) * (*(void *)a1 + *(void *)&v16)) >> 1);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(double *)a1 = v17;
  return sub_2168F6748(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
}

uint64_t sub_2168F6748(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9, double *a10, double *a11, double *a12, double *a13, double *a14, double *a15)
{
  double v15 = *a2;
  if (*a2 == 0.0) {
    double v15 = 0.0;
  }
  double v16 = v15;
  if (*(unsigned char *)(a1 + 8)) {
    *(void *)&double v16 = *(void *)&v15
  }
                    + ((*(void *)a1
                      + *(void *)&v15
                      + (*(void *)a1 + *(void *)&v15) * (*(void *)a1 + *(void *)&v15)) >> 1);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(double *)a1 = v16;
  return sub_2168F67C0(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
}

uint64_t sub_2168F67C0(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9, double *a10, double *a11, double *a12, double *a13, double *a14)
{
  double v14 = *a2;
  if (*a2 == 0.0) {
    double v14 = 0.0;
  }
  double v15 = v14;
  if (*(unsigned char *)(a1 + 8)) {
    *(void *)&double v15 = *(void *)&v14
  }
                    + ((*(void *)a1
                      + *(void *)&v14
                      + (*(void *)a1 + *(void *)&v14) * (*(void *)a1 + *(void *)&v14)) >> 1);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(double *)a1 = v15;
  return sub_2168F6834(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_2168F6834(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9, double *a10, double *a11, double *a12, double *a13)
{
  double v13 = *a2;
  if (*a2 == 0.0) {
    double v13 = 0.0;
  }
  double v14 = v13;
  if (*(unsigned char *)(a1 + 8)) {
    *(void *)&double v14 = *(void *)&v13
  }
                    + ((*(void *)a1
                      + *(void *)&v13
                      + (*(void *)a1 + *(void *)&v13) * (*(void *)a1 + *(void *)&v13)) >> 1);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(double *)a1 = v14;
  return sub_2168F68A4(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t sub_2168F68A4(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9, double *a10, double *a11, double *a12)
{
  double v12 = *a2;
  if (*a2 == 0.0) {
    double v12 = 0.0;
  }
  double v13 = v12;
  if (*(unsigned char *)(a1 + 8)) {
    *(void *)&double v13 = *(void *)&v12
  }
                    + ((*(void *)a1
                      + *(void *)&v12
                      + (*(void *)a1 + *(void *)&v12) * (*(void *)a1 + *(void *)&v12)) >> 1);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(double *)a1 = v13;
  return sub_2168F6910(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t sub_2168F6910(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9, double *a10, double *a11)
{
  double v11 = *a2;
  if (*a2 == 0.0) {
    double v11 = 0.0;
  }
  double v12 = v11;
  if (*(unsigned char *)(a1 + 8)) {
    *(void *)&double v12 = *(void *)&v11
  }
                    + ((*(void *)a1
                      + *(void *)&v11
                      + (*(void *)a1 + *(void *)&v11) * (*(void *)a1 + *(void *)&v11)) >> 1);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(double *)a1 = v12;
  return sub_2168F6978(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t sub_2168F6978(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9, double *a10)
{
  double v10 = *a2;
  if (*a2 == 0.0) {
    double v10 = 0.0;
  }
  double v11 = v10;
  if (*(unsigned char *)(a1 + 8)) {
    *(void *)&double v11 = *(void *)&v10
  }
                    + ((*(void *)a1
                      + *(void *)&v10
                      + (*(void *)a1 + *(void *)&v10) * (*(void *)a1 + *(void *)&v10)) >> 1);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(double *)a1 = v11;
  return sub_2168F69DC(a1, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t sub_2168F69DC(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8, double *a9)
{
  double v9 = *a2;
  if (*a2 == 0.0) {
    double v9 = 0.0;
  }
  double v10 = v9;
  if (*(unsigned char *)(a1 + 8)) {
    *(void *)&double v10 = *(void *)&v9
  }
                    + ((*(void *)a1
                      + *(void *)&v9
                      + (*(void *)a1 + *(void *)&v9) * (*(void *)a1 + *(void *)&v9)) >> 1);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(double *)a1 = v10;
  return sub_2168F6A3C(a1, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_2168F6A3C(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7, double *a8)
{
  double v8 = *a2;
  if (*a2 == 0.0) {
    double v8 = 0.0;
  }
  double v9 = v8;
  if (*(unsigned char *)(a1 + 8)) {
    *(void *)&double v9 = *(void *)&v8
  }
                   + ((*(void *)a1
                     + *(void *)&v8
                     + (*(void *)a1 + *(void *)&v8) * (*(void *)a1 + *(void *)&v8)) >> 1);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(double *)a1 = v9;
  return sub_2168F6A94(a1, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_2168F6A94(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6, double *a7)
{
  double v7 = *a2;
  if (*a2 == 0.0) {
    double v7 = 0.0;
  }
  double v8 = v7;
  if (*(unsigned char *)(a1 + 8)) {
    *(void *)&double v8 = *(void *)&v7
  }
                   + ((*(void *)a1
                     + *(void *)&v7
                     + (*(void *)a1 + *(void *)&v7) * (*(void *)a1 + *(void *)&v7)) >> 1);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(double *)a1 = v8;
  return sub_2168F6AE8(a1, a3, a4, a5, a6, a7);
}

uint64_t sub_2168F6AE8(uint64_t a1, double *a2, double *a3, double *a4, double *a5, double *a6)
{
  double v6 = *a2;
  if (*a2 == 0.0) {
    double v6 = 0.0;
  }
  double v7 = v6;
  if (*(unsigned char *)(a1 + 8)) {
    *(void *)&double v7 = *(void *)&v6
  }
                   + ((*(void *)a1
                     + *(void *)&v6
                     + (*(void *)a1 + *(void *)&v6) * (*(void *)a1 + *(void *)&v6)) >> 1);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(double *)a1 = v7;
  return sub_2168F5C84(a1, a3, a4, a5, a6);
}

long long *sub_2168F6B38(long long **a1)
{
  unsigned int v2 = atomic_load((unsigned int *)*a1 + 32);
  if (v2 != 1)
  {
    uint64_t v3 = operator new(0x88uLL);
    char v4 = (atomic_uint *)*a1;
    long long v5 = (*a1)[3];
    long long v7 = **a1;
    long long v6 = (*a1)[1];
    *((_OWORD *)v3 + 2) = (*a1)[2];
    *((_OWORD *)v3 + 3) = v5;
    *(_OWORD *)uint64_t v3 = v7;
    *((_OWORD *)v3 + 1) = v6;
    long long v8 = *((_OWORD *)v4 + 7);
    long long v10 = *((_OWORD *)v4 + 4);
    long long v9 = *((_OWORD *)v4 + 5);
    *((_OWORD *)v3 + 6) = *((_OWORD *)v4 + 6);
    *((_OWORD *)v3 + 7) = v8;
    *((_OWORD *)v3 + 4) = v10;
    *((_OWORD *)v3 + 5) = v9;
    atomic_store(0, (unsigned int *)v3 + 32);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 32, 1u, memory_order_relaxed);
    *a1 = (long long *)v3;
    if (atomic_fetch_add_explicit(v4 + 32, 0xFFFFFFFF, memory_order_release) == 1)
    {
      __dmb(9u);
      operator delete(v4);
    }
  }
  return *a1;
}

void *sub_2168F6BD0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    char v4 = (const pxrInternal__aapl__pxrReserved__::GfMatrix4d *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  else {
    char v4 = *(const pxrInternal__aapl__pxrReserved__::GfMatrix4d **)a1;
  }
  pxrInternal__aapl__pxrReserved__::GfMatrix4f::GfMatrix4f((pxrInternal__aapl__pxrReserved__::GfMatrix4f *)v8, v4);
  a2[1] = (char *)&off_26C74E9E0 + 2;
  uint64_t result = operator new(0x44uLL);
  long long v6 = v8[1];
  *(_OWORD *)uint64_t result = v8[0];
  *((_OWORD *)result + 1) = v6;
  long long v7 = v8[3];
  *((_OWORD *)result + 2) = v8[2];
  *((_OWORD *)result + 3) = v7;
  atomic_store(0, (unsigned int *)result + 16);
  *a2 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 16, 1u, memory_order_relaxed);
  return result;
}

uint64_t *sub_2168F6C5C(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 64), 1u, memory_order_relaxed);
  }
  return result;
}

void sub_2168F6C78(atomic_uint **a1)
{
  int64x2_t v1 = *a1;
  if (v1)
  {
    if (atomic_fetch_add_explicit(v1 + 16, 0xFFFFFFFF, memory_order_release) == 1)
    {
      __dmb(9u);
      operator delete(v1);
    }
  }
}

void *sub_2168F6CA0(void *result, void *a2)
{
  *a2 = *result;
  *uint64_t result = 0;
  return result;
}

uint64_t sub_2168F6CB0()
{
  return 1;
}

unint64_t sub_2168F6CB8(float **a1)
{
  return sub_2168F6E18((uint64_t)&v2, *a1);
}

BOOL sub_2168F6CE0(float **a1, float **a2)
{
  return pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator==(*a1, *a2);
}

BOOL sub_2168F6CEC(float **a1, float *a2)
{
  return pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator==(*a1, a2);
}

uint64_t sub_2168F6CF8()
{
  return 0;
}

void *sub_2168F6D04(float **a1, void *a2)
{
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, *a1);
}

void *sub_2168F6D14()
{
  return &unk_26C74C5B0;
}

uint64_t sub_2168F6D20()
{
  return 0;
}

uint64_t sub_2168F6D28()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_2168F6D34()
{
  return 0;
}

uint64_t sub_2168F6D3C()
{
  return 0;
}

BOOL sub_2168F6D44(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x80000002174E42FELL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2168F6D80(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C5B0, a2, a3);
}

void *sub_2168F6DA4()
{
  return &unk_26C74C5B0;
}

uint64_t sub_2168F6DB0(uint64_t a1)
{
  return *(void *)a1;
}

void *sub_2168F6DB8@<X0>(long long **a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  a2[1] = (char *)&off_26C74E9E0 + 2;
  uint64_t result = operator new(0x44uLL);
  long long v5 = v3[3];
  long long v7 = *v3;
  long long v6 = v3[1];
  *((_OWORD *)result + 2) = v3[2];
  *((_OWORD *)result + 3) = v5;
  *(_OWORD *)uint64_t result = v7;
  *((_OWORD *)result + 1) = v6;
  atomic_store(0, (unsigned int *)result + 16);
  *a2 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 16, 1u, memory_order_relaxed);
  return result;
}

unint64_t sub_2168F6E18(uint64_t a1, float *a2)
{
  uint64_t v3 = 0;
  char v4 = 0;
  sub_2168F6EB8((uint64_t)&v3, a2, a2 + 1, a2 + 2, a2 + 3, a2 + 4, a2 + 5, a2 + 6, a2 + 7, a2 + 8, a2 + 9, a2 + 10, a2 + 11, a2 + 12, a2 + 13, a2 + 14, a2 + 15);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v3));
}

uint64_t sub_2168F6EB8(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7, float *a8, float *a9, float *a10, float *a11, float *a12, float *a13, float *a14, float *a15, float *a16, float *a17)
{
  float v17 = *a2;
  if (*a2 == 0.0) {
    float v17 = 0.0;
  }
  unint64_t v18 = LODWORD(v17);
  if (*(unsigned char *)(a1 + 8)) {
    unint64_t v18 = ((*(void *)a1
  }
          + LODWORD(v17)
          + (*(void *)a1 + LODWORD(v17)) * (*(void *)a1 + (unint64_t)LODWORD(v17))) >> 1)
        + LODWORD(v17);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v18;
  return sub_2168F6F3C(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
}

uint64_t sub_2168F6F3C(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7, float *a8, float *a9, float *a10, float *a11, float *a12, float *a13, float *a14, float *a15, float *a16)
{
  float v16 = *a2;
  if (*a2 == 0.0) {
    float v16 = 0.0;
  }
  unint64_t v17 = LODWORD(v16);
  if (*(unsigned char *)(a1 + 8)) {
    unint64_t v17 = ((*(void *)a1
  }
          + LODWORD(v16)
          + (*(void *)a1 + LODWORD(v16)) * (*(void *)a1 + (unint64_t)LODWORD(v16))) >> 1)
        + LODWORD(v16);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v17;
  return sub_2168F6FBC(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
}

uint64_t sub_2168F6FBC(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7, float *a8, float *a9, float *a10, float *a11, float *a12, float *a13, float *a14, float *a15)
{
  float v15 = *a2;
  if (*a2 == 0.0) {
    float v15 = 0.0;
  }
  unint64_t v16 = LODWORD(v15);
  if (*(unsigned char *)(a1 + 8)) {
    unint64_t v16 = ((*(void *)a1
  }
          + LODWORD(v15)
          + (*(void *)a1 + LODWORD(v15)) * (*(void *)a1 + (unint64_t)LODWORD(v15))) >> 1)
        + LODWORD(v15);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v16;
  return sub_2168F7038(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
}

uint64_t sub_2168F7038(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7, float *a8, float *a9, float *a10, float *a11, float *a12, float *a13, float *a14)
{
  float v14 = *a2;
  if (*a2 == 0.0) {
    float v14 = 0.0;
  }
  unint64_t v15 = LODWORD(v14);
  if (*(unsigned char *)(a1 + 8)) {
    unint64_t v15 = ((*(void *)a1
  }
          + LODWORD(v14)
          + (*(void *)a1 + LODWORD(v14)) * (*(void *)a1 + (unint64_t)LODWORD(v14))) >> 1)
        + LODWORD(v14);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v15;
  return sub_2168F70B0(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

uint64_t sub_2168F70B0(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7, float *a8, float *a9, float *a10, float *a11, float *a12, float *a13)
{
  float v13 = *a2;
  if (*a2 == 0.0) {
    float v13 = 0.0;
  }
  unint64_t v14 = LODWORD(v13);
  if (*(unsigned char *)(a1 + 8)) {
    unint64_t v14 = ((*(void *)a1
  }
          + LODWORD(v13)
          + (*(void *)a1 + LODWORD(v13)) * (*(void *)a1 + (unint64_t)LODWORD(v13))) >> 1)
        + LODWORD(v13);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v14;
  return sub_2168F7124(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t sub_2168F7124(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7, float *a8, float *a9, float *a10, float *a11, float *a12)
{
  float v12 = *a2;
  if (*a2 == 0.0) {
    float v12 = 0.0;
  }
  unint64_t v13 = LODWORD(v12);
  if (*(unsigned char *)(a1 + 8)) {
    unint64_t v13 = ((*(void *)a1
  }
          + LODWORD(v12)
          + (*(void *)a1 + LODWORD(v12)) * (*(void *)a1 + (unint64_t)LODWORD(v12))) >> 1)
        + LODWORD(v12);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v13;
  return sub_2168F7194(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t sub_2168F7194(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7, float *a8, float *a9, float *a10, float *a11)
{
  float v11 = *a2;
  if (*a2 == 0.0) {
    float v11 = 0.0;
  }
  unint64_t v12 = LODWORD(v11);
  if (*(unsigned char *)(a1 + 8)) {
    unint64_t v12 = ((*(void *)a1
  }
          + LODWORD(v11)
          + (*(void *)a1 + LODWORD(v11)) * (*(void *)a1 + (unint64_t)LODWORD(v11))) >> 1)
        + LODWORD(v11);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v12;
  return sub_2168F7200(a1, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t sub_2168F7200(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7, float *a8, float *a9, float *a10)
{
  float v10 = *a2;
  if (*a2 == 0.0) {
    float v10 = 0.0;
  }
  unint64_t v11 = LODWORD(v10);
  if (*(unsigned char *)(a1 + 8)) {
    unint64_t v11 = ((*(void *)a1
  }
          + LODWORD(v10)
          + (*(void *)a1 + LODWORD(v10)) * (*(void *)a1 + (unint64_t)LODWORD(v10))) >> 1)
        + LODWORD(v10);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v11;
  return sub_2168F7268(a1, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t sub_2168F7268(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7, float *a8, float *a9)
{
  float v9 = *a2;
  if (*a2 == 0.0) {
    float v9 = 0.0;
  }
  unint64_t v10 = LODWORD(v9);
  if (*(unsigned char *)(a1 + 8)) {
    unint64_t v10 = ((*(void *)a1 + LODWORD(v9) + (*(void *)a1 + LODWORD(v9))
  }
                                        * (*(void *)a1 + (unint64_t)LODWORD(v9))) >> 1)
        + LODWORD(v9);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v10;
  return sub_2168F72CC(a1, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_2168F72CC(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7, float *a8)
{
  float v8 = *a2;
  if (*a2 == 0.0) {
    float v8 = 0.0;
  }
  unint64_t v9 = LODWORD(v8);
  if (*(unsigned char *)(a1 + 8)) {
    unint64_t v9 = ((*(void *)a1 + LODWORD(v8) + (*(void *)a1 + LODWORD(v8)) * (*(void *)a1 + (unint64_t)LODWORD(v8))) >> 1)
  }
       + LODWORD(v8);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v9;
  return sub_2168F7328(a1, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_2168F7328(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6, float *a7)
{
  float v7 = *a2;
  if (*a2 == 0.0) {
    float v7 = 0.0;
  }
  unint64_t v8 = LODWORD(v7);
  if (*(unsigned char *)(a1 + 8)) {
    unint64_t v8 = ((*(void *)a1 + LODWORD(v7) + (*(void *)a1 + LODWORD(v7)) * (*(void *)a1 + (unint64_t)LODWORD(v7))) >> 1)
  }
       + LODWORD(v7);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v8;
  return sub_2168F7380(a1, a3, a4, a5, a6, a7);
}

uint64_t sub_2168F7380(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float *a6)
{
  float v6 = *a2;
  if (*a2 == 0.0) {
    float v6 = 0.0;
  }
  unint64_t v7 = LODWORD(v6);
  if (*(unsigned char *)(a1 + 8)) {
    unint64_t v7 = ((*(void *)a1 + LODWORD(v6) + (*(void *)a1 + LODWORD(v6)) * (*(void *)a1 + (unint64_t)LODWORD(v6))) >> 1)
  }
       + LODWORD(v6);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v7;
  return sub_2168F58A0(a1, a3, a4, a5, a6);
}

atomic_uint *sub_2168F73D4(atomic_uint **a1)
{
  unsigned int v2 = atomic_load((unsigned int *)*a1 + 16);
  if (v2 != 1)
  {
    uint64_t v3 = operator new(0x44uLL);
    char v4 = *a1;
    long long v5 = *((_OWORD *)*a1 + 3);
    long long v7 = *(_OWORD *)*a1;
    long long v6 = *((_OWORD *)*a1 + 1);
    *((_OWORD *)v3 + 2) = *((_OWORD *)*a1 + 2);
    *((_OWORD *)v3 + 3) = v5;
    *(_OWORD *)uint64_t v3 = v7;
    *((_OWORD *)v3 + 1) = v6;
    atomic_store(0, (unsigned int *)v3 + 16);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 16, 1u, memory_order_relaxed);
    *a1 = (atomic_uint *)v3;
    if (atomic_fetch_add_explicit(v4 + 16, 0xFFFFFFFF, memory_order_release) == 1)
    {
      __dmb(9u);
      operator delete(v4);
    }
  }
  return *a1;
}

unsigned int *sub_2168F745C@<X0>(uint64_t a1@<X0>, unsigned int **a2@<X8>)
{
  unsigned int v2 = (unsigned __int16 *)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  if ((v4 & 4) != 0) {
    unsigned int v2 = (unsigned __int16 *)(*(uint64_t (**)(uint64_t))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  pxrInternal__aapl__pxrReserved__::GfQuatf::GfQuatf((float *)&v6, v2);
  a2[1] = (unsigned int *)&off_26C74EA98;
  uint64_t result = (unsigned int *)operator new(0x14uLL);
  *(_OWORD *)uint64_t result = v6;
  atomic_store(0, result + 4);
  *a2 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 4, 1u, memory_order_relaxed);
  return result;
}

uint64_t *sub_2168F74E0(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 16), 1u, memory_order_relaxed);
  }
  return result;
}

void sub_2168F74FC(atomic_uint **a1)
{
  int64x2_t v1 = *a1;
  if (v1)
  {
    if (atomic_fetch_add_explicit(v1 + 4, 0xFFFFFFFF, memory_order_release) == 1)
    {
      __dmb(9u);
      operator delete(v1);
    }
  }
}

void *sub_2168F7524(void *result, void *a2)
{
  *a2 = *result;
  *uint64_t result = 0;
  return result;
}

uint64_t sub_2168F7534()
{
  return 1;
}

unint64_t sub_2168F753C(float **a1)
{
  int64x2_t v1 = *a1;
  int v3 = *((_DWORD *)*a1 + 3);
  uint64_t v4 = 0;
  char v5 = 0;
  sub_2168F7758((uint64_t)&v4, (float *)&v3, v1);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v4));
}

BOOL sub_2168F759C(float **a1, float **a2)
{
  uint64_t v2 = *a1;
  int v3 = *a2;
  return (*a1)[3] == (*a2)[3] && *v2 == *v3 && v2[1] == v3[1] && v2[2] == v3[2];
}

BOOL sub_2168F75F0(float **a1, float *a2)
{
  uint64_t v2 = *a1;
  return (*a1)[3] == a2[3] && *v2 == *a2 && v2[1] == a2[1] && v2[2] == a2[2];
}

uint64_t sub_2168F7644()
{
  return 0;
}

void *sub_2168F7650(int8x16_t **a1, void *a2)
{
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, *a1);
}

void *sub_2168F7660()
{
  return &unk_26C74C600;
}

uint64_t sub_2168F766C()
{
  return 0;
}

uint64_t sub_2168F7674()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_2168F7680()
{
  return 0;
}

uint64_t sub_2168F7688()
{
  return 0;
}

BOOL sub_2168F7690(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x80000002174E4576 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2168F76CC(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C600, a2, a3);
}

void *sub_2168F76F0()
{
  return &unk_26C74C600;
}

uint64_t sub_2168F76FC(uint64_t a1)
{
  return *(void *)a1;
}

unsigned int *sub_2168F7704@<X0>(_OWORD **a1@<X0>, unsigned int **a2@<X8>)
{
  int v3 = *a1;
  a2[1] = (unsigned int *)&off_26C74EA98;
  uint64_t result = (unsigned int *)operator new(0x14uLL);
  *(_OWORD *)uint64_t result = *v3;
  atomic_store(0, result + 4);
  *a2 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 4, 1u, memory_order_relaxed);
  return result;
}

uint64_t sub_2168F7758(uint64_t a1, float *a2, float *a3)
{
  float v3 = *a2;
  if (*a2 == 0.0) {
    float v3 = 0.0;
  }
  unint64_t v4 = LODWORD(v3);
  if (*(unsigned char *)(a1 + 8)) {
    unint64_t v4 = ((*(void *)a1 + LODWORD(v3) + (*(void *)a1 + LODWORD(v3)) * (*(void *)a1 + (unint64_t)LODWORD(v3))) >> 1)
  }
       + LODWORD(v3);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v4;
  return sub_2168F77A0(a1, a3);
}

uint64_t sub_2168F77A0(uint64_t a1, float *a2)
{
  uint64_t v5 = 0;
  char v6 = 0;
  uint64_t result = sub_2168F4850((uint64_t)&v5, a2, a2 + 1, a2 + 2);
  unint64_t v4 = bswap64(0x9E3779B97F4A7C55 * v5);
  if (*(unsigned char *)(a1 + 8)) {
    v4 += (*(void *)a1 + v4 + (*(void *)a1 + v4) * (*(void *)a1 + v4)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v4;
  return result;
}

uint64_t sub_2168F7824@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    unint64_t v4 = (const pxrInternal__aapl__pxrReserved__::GfQuatf *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  else {
    unint64_t v4 = *(const pxrInternal__aapl__pxrReserved__::GfQuatf **)a1;
  }
  uint64_t result = pxrInternal__aapl__pxrReserved__::GfQuath::GfQuath((pxrInternal__aapl__pxrReserved__::GfQuath *)&v6, v4);
  *a2 = v6;
  a2[1] = (char *)&off_26C74EB50 + 1;
  return result;
}

void *sub_2168F7888(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

void *sub_2168F7898(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_2168F78A4()
{
  return 1;
}

unint64_t sub_2168F78AC(unsigned __int16 *a1)
{
  unsigned __int16 v2 = a1[3];
  uint64_t v3 = 0;
  char v4 = 0;
  sub_2168F7A3C((uint64_t)&v3, &v2, a1);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v3));
}

BOOL sub_2168F790C(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[3]] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[3]]
      && sub_2168F450C(a1, a2);
}

BOOL sub_2168F7938(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[3]] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[3]]
      && sub_2168F450C(a1, a2);
}

uint64_t sub_2168F7968()
{
  return 0;
}

void *sub_2168F7974(uint64_t a1, void *a2)
{
  return pxrInternal__aapl__pxrReserved__::operator<<(a2);
}

void *sub_2168F7984()
{
  return &unk_26C74C610;
}

uint64_t sub_2168F7990()
{
  return 0;
}

uint64_t sub_2168F7998()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_2168F79A4()
{
  return 0;
}

uint64_t sub_2168F79AC()
{
  return 0;
}

BOOL sub_2168F79B4(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x80000002174E4546 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2168F79F0(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C610, a2, a3);
}

void *sub_2168F7A14()
{
  return &unk_26C74C610;
}

void *sub_2168F7A24@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  a2[1] = (char *)&off_26C74EB50 + 1;
  return result;
}

uint64_t sub_2168F7A3C(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  uint64_t v3 = *a2;
  if (*(unsigned char *)(a1 + 8)) {
    v3 += (unint64_t)(*(void *)a1 + v3 + (*(void *)a1 + v3) * (*(void *)a1 + v3)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v3;
  return sub_2168F7A70(a1, a3);
}

uint64_t sub_2168F7A70(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v5 = 0;
  char v6 = 0;
  uint64_t result = sub_2168F44D4((uint64_t)&v5, a2, a2 + 1, a2 + 2);
  unint64_t v4 = bswap64(0x9E3779B97F4A7C55 * v5);
  if (*(unsigned char *)(a1 + 8)) {
    v4 += (*(void *)a1 + v4 + (*(void *)a1 + v4) * (*(void *)a1 + v4)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v4;
  return result;
}

void *sub_2168F7AF4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  unsigned __int16 v2 = (unsigned __int16 *)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  if ((v4 & 4) != 0) {
    unsigned __int16 v2 = (unsigned __int16 *)(*(uint64_t (**)(uint64_t))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  pxrInternal__aapl__pxrReserved__::GfQuatd::GfQuatd((double *)v7, v2);
  a2[1] = &off_26C74EC08;
  uint64_t result = operator new(0x28uLL);
  long long v6 = v7[1];
  *(_OWORD *)uint64_t result = v7[0];
  *((_OWORD *)result + 1) = v6;
  atomic_store(0, (unsigned int *)result + 8);
  *a2 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 8, 1u, memory_order_relaxed);
  return result;
}

uint64_t *sub_2168F7B78(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 32), 1u, memory_order_relaxed);
  }
  return result;
}

void sub_2168F7B94(atomic_uint **a1)
{
  int64x2_t v1 = *a1;
  if (v1)
  {
    if (atomic_fetch_add_explicit(v1 + 8, 0xFFFFFFFF, memory_order_release) == 1)
    {
      __dmb(9u);
      operator delete(v1);
    }
  }
}

void *sub_2168F7BBC(void *result, void *a2)
{
  *a2 = *result;
  *uint64_t result = 0;
  return result;
}

uint64_t sub_2168F7BCC()
{
  return 1;
}

unint64_t sub_2168F7BD4(double **a1)
{
  int64x2_t v1 = *a1;
  uint64_t v3 = *((void *)*a1 + 3);
  uint64_t v4 = 0;
  char v5 = 0;
  sub_2168F7DF0((uint64_t)&v4, (double *)&v3, v1);
  return bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v4));
}

BOOL sub_2168F7C34(double **a1, double **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  return (*a1)[3] == (*a2)[3] && *v2 == *v3 && v2[1] == v3[1] && v2[2] == v3[2];
}

BOOL sub_2168F7C88(double **a1, double *a2)
{
  uint64_t v2 = *a1;
  return (*a1)[3] == a2[3] && *v2 == *a2 && v2[1] == a2[1] && v2[2] == a2[2];
}

uint64_t sub_2168F7CDC()
{
  return 0;
}

void *sub_2168F7CE8(long long **a1, void *a2)
{
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, *a1);
}

void *sub_2168F7CF8()
{
  return &unk_26C74C5F0;
}

uint64_t sub_2168F7D04()
{
  return 0;
}

uint64_t sub_2168F7D0C()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_2168F7D18()
{
  return 0;
}

uint64_t sub_2168F7D20()
{
  return 0;
}

BOOL sub_2168F7D28(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x80000002174E45A6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2168F7D64(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C5F0, a2, a3);
}

void *sub_2168F7D88()
{
  return &unk_26C74C5F0;
}

uint64_t sub_2168F7D94(uint64_t a1)
{
  return *(void *)a1;
}

void *sub_2168F7D9C@<X0>(_OWORD **a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  a2[1] = &off_26C74EC08;
  uint64_t result = operator new(0x28uLL);
  long long v5 = v3[1];
  *(_OWORD *)uint64_t result = *v3;
  *((_OWORD *)result + 1) = v5;
  atomic_store(0, (unsigned int *)result + 8);
  *a2 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 8, 1u, memory_order_relaxed);
  return result;
}

uint64_t sub_2168F7DF0(uint64_t a1, double *a2, double *a3)
{
  double v3 = *a2;
  if (*a2 == 0.0) {
    double v3 = 0.0;
  }
  double v4 = v3;
  if (*(unsigned char *)(a1 + 8)) {
    *(void *)&double v4 = *(void *)&v3
  }
                   + ((*(void *)a1
                     + *(void *)&v3
                     + (*(void *)a1 + *(void *)&v3) * (*(void *)a1 + *(void *)&v3)) >> 1);
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(double *)a1 = v4;
  return sub_2168F7E34(a1, a3);
}

uint64_t sub_2168F7E34(uint64_t a1, double *a2)
{
  uint64_t v5 = 0;
  char v6 = 0;
  uint64_t result = sub_2168F4C18((uint64_t)&v5, a2, a2 + 1, a2 + 2);
  unint64_t v4 = bswap64(0x9E3779B97F4A7C55 * v5);
  if (*(unsigned char *)(a1 + 8)) {
    v4 += (*(void *)a1 + v4 + (*(void *)a1 + v4) * (*(void *)a1 + v4)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v4;
  return result;
}

uint64_t sub_2168F7EB8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    unint64_t v4 = (const pxrInternal__aapl__pxrReserved__::GfQuatd *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  else {
    unint64_t v4 = *(const pxrInternal__aapl__pxrReserved__::GfQuatd **)a1;
  }
  uint64_t result = pxrInternal__aapl__pxrReserved__::GfQuath::GfQuath((pxrInternal__aapl__pxrReserved__::GfQuath *)&v6, v4);
  *a2 = v6;
  a2[1] = (char *)&off_26C74EB50 + 1;
  return result;
}

void *sub_2168F7F1C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    unint64_t v4 = (float32x2_t *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  else {
    unint64_t v4 = *(float32x2_t **)a1;
  }
  pxrInternal__aapl__pxrReserved__::GfQuatd::GfQuatd(v7, v4);
  a2[1] = &off_26C74EC08;
  uint64_t result = operator new(0x28uLL);
  float64x2_t v6 = v7[1];
  *(float64x2_t *)uint64_t result = v7[0];
  *((float64x2_t *)result + 1) = v6;
  atomic_store(0, (unsigned int *)result + 8);
  *a2 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 8, 1u, memory_order_relaxed);
  return result;
}

float32x4_t *sub_2168F7F9C@<X0>(uint64_t a1@<X0>, float32x4_t **a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    unint64_t v4 = (__n128 *)(*(uint64_t (**)(void))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))();
  }
  else {
    unint64_t v4 = *(__n128 **)a1;
  }
  pxrInternal__aapl__pxrReserved__::GfQuatf::GfQuatf(&v6, v4);
  a2[1] = (float32x4_t *)&off_26C74EA98;
  uint64_t result = (float32x4_t *)operator new(0x14uLL);
  *uint64_t result = v6;
  atomic_store(0, (unsigned int *)&result[1]);
  *a2 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)&result[1], 1u, memory_order_relaxed);
  return result;
}

void sub_2168F801C(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  uint64_t v3 = (unint64_t *)sub_2168F81BC(a1);
  sub_2168F8250((uint64_t)v11, *v3);
  unint64_t v4 = (unsigned __int16 *)v3[4];
  unint64_t v5 = *v3;
  sub_2168F8710((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v11, v6, v7);
  if (v5)
  {
    unint64_t v8 = v12;
    uint64_t v9 = 2 * v5;
    do
    {
      int v10 = *v4++;
      *v8++ = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v10];
      v9 -= 2;
    }
    while (v9);
  }
  sub_2168F82C4(v11, a2);
  sub_2168F83DC((uint64_t)v11);
}

void sub_2168F80B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2168F80C8(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  uint64_t v3 = (unint64_t *)sub_2168F8EBC(a1);
  sub_2168F8F50((uint64_t)v12, *v3);
  unint64_t v4 = (float *)v3[4];
  unint64_t v5 = *v3;
  sub_2168F930C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v12, v6, v7);
  if (v5)
  {
    unint64_t v8 = v13;
    uint64_t v9 = 4 * v5;
    do
    {
      int v10 = (pxrInternal__aapl__pxrReserved__::pxr_half::half *)*(unsigned int *)v4;
      if (*v4 == 0.0)
      {
        unsigned int v11 = v10 >> 16;
      }
      else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v10 >> 23])
      {
        unsigned int v11 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v10 >> 23]
            + (((v10 & 0x7FFFFF) + ((v10 >> 13) & 1) + 4095) >> 13);
      }
      else
      {
        LOWORD(v11) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert(v10);
      }
      *v8++ = v11;
      ++v4;
      v9 -= 4;
    }
    while (v9);
  }
  sub_2168F8FC4(v12, a2);
  sub_2168F83DC((uint64_t)v12);
}

void sub_2168F81A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2168F81BC(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (sub_2168F8308(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      unint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_2168F8340, (uint64_t)&stru_26C74E268);
  }
}

uint64_t sub_2168F8250(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  int v5 = 0;
  sub_2168F845C((void *)a1);
  uint64_t v6 = &v5;
  sub_2168F84A8((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_2168F82AC(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

double sub_2168F82C4@<D0>(__n128 *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  *((void *)a2 + 1) = 0;
  *(void *)&double result = sub_2168F87A8(a2, a1).n128_u64[0];
  return result;
}

void sub_2168F82F4(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2168F8308(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 58) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C74E268);
  }
  else {
    return 0;
  }
}

double sub_2168F8340@<D0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x28uLL);
  double result = 0.0;
  *uint64_t v2 = 0u;
  v2[1] = 0u;
  *((void *)v2 + 4) = 0;
  *a1 = v2;
  a1[1] = sub_2168F8390;
  a1[2] = &stru_26C74E268;
  return result;
}

void sub_2168F8390(void *a1)
{
  if (a1)
  {
    sub_2168F83DC((uint64_t)a1);
    operator delete(a1);
  }
}

void sub_2168F83DC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    uint64_t v3 = (void *)(a1 + 24);
    uint64_t v2 = *(atomic_ullong **)(a1 + 24);
    if (v2)
    {
      if (atomic_fetch_add_explicit(v2, 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
      {
        __dmb(9u);
        unint64_t v4 = *(void (**)(void))(*v3 + 8);
        if (v4) {
          v4();
        }
      }
    }
    else if (atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 - 16), 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
    {
      __dmb(9u);
      operator delete((void *)(*(void *)(a1 + 32) - 16));
    }
    void *v3 = 0;
    v3[1] = 0;
  }
}

void sub_2168F845C(void *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    if (a1[3] || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1)) {
      sub_2168F83DC((uint64_t)a1);
    }
    *a1 = 0;
  }
}

void sub_2168F84A8(unint64_t *a1, unint64_t a2, _DWORD **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    long long v7 = (unint64_t *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              int v10 = sub_2168F8670((uint64_t)a1, a2);
              long long v7 = v10;
              if (v3)
              {
                uint64_t v11 = 0;
                do
                {
                  *(_DWORD *)((char *)v10 + v11) = *(_DWORD *)(v9 + v11);
                  v11 += 4;
                }
                while (4 * v3 != v11);
              }
            }
            unint64_t v12 = *a3;
            uint64_t v13 = 4 * v3;
            do
            {
              *(_DWORD *)((char *)v7 + v13) = *v12;
              v13 += 4;
            }
            while (4 * a2 != v13);
          }
          unint64_t v14 = v7;
          goto LABEL_31;
        }
        long long v7 = (unint64_t *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v19 = a2;
      }
      else {
        unint64_t v19 = *a1;
      }
      char v20 = sub_2168F8670((uint64_t)a1, a2);
      unint64_t v14 = v20;
      if (v19)
      {
        uint64_t v21 = 4 * v19;
        uint64_t v22 = v20;
        do
        {
          int v23 = *(_DWORD *)v7;
          long long v7 = (unint64_t *)((char *)v7 + 4);
          *(_DWORD *)uint64_t v22 = v23;
          uint64_t v22 = (unint64_t *)((char *)v22 + 4);
          v21 -= 4;
        }
        while (v21);
      }
      if (v3 < a2)
      {
        uint64_t v24 = *a3;
        uint64_t v25 = 4 * v3;
        do
        {
          *(_DWORD *)((char *)v20 + v25) = *v24;
          v25 += 4;
        }
        while (4 * a2 != v25);
      }
      goto LABEL_31;
    }
    uint64_t v15 = 4 * a2;
    if (4 * a2 / a2 == 4)
    {
      unint64_t v16 = sub_2168F8670((uint64_t)a1, a2);
      unint64_t v14 = v16;
      uint64_t v17 = 0;
      unint64_t v18 = *a3;
      do
      {
        *(_DWORD *)((char *)v16 + v17) = *v18;
        v17 += 4;
      }
      while (v15 != v17);
LABEL_31:
      if (v14 != (unint64_t *)a1[4])
      {
        sub_2168F83DC((uint64_t)a1);
        a1[4] = (unint64_t)v14;
      }
      *a1 = a2;
      return;
    }
  }

  sub_2168F845C(a1);
}

void *sub_2168F8670(uint64_t a1, unint64_t a2)
{
  sub_216851EE4((uint64_t)&v7, "VtArray::_AllocateNew", "value_type *pxrInternal__aapl__pxrReserved__::VtArray<float>::_AllocateNew(size_t) [T = float]");
  if (a2 > 0x3FFFFFFFFFFFFFFBLL) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 4 * a2 + 16;
  }
  unint64_t v4 = operator new(v3);
  *unint64_t v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_2168F86F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2168F8710(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    if (*((void *)this + 3) || (unint64_t v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<float>::_DetachIfNotUnique() [T = float]", a3);
      uint64_t v6 = (int *)*((void *)this + 4);
      uint64_t v7 = *(void *)this;
      int v8 = sub_2168F8670((uint64_t)this, *(void *)this);
      unint64_t v9 = v8;
      if (v7)
      {
        uint64_t v10 = 4 * v7;
        uint64_t v11 = v8;
        do
        {
          int v12 = *v6++;
          *v11++ = v12;
          v10 -= 4;
        }
        while (v10);
      }
      sub_2168F83DC((uint64_t)this);
      *((void *)this + 4) = v9;
    }
  }
}

__n128 sub_2168F87A8(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  if ((sub_2168F8860(a1) & 1) == 0)
  {
    uint64_t v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_2168F8898(a1, (uint64_t)v10);
    sub_2168F83DC((uint64_t)v10);
  }
  unint64_t v4 = (__n128 *)sub_2168F8E28(a1);
  unint64_t v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  unint64_t v6 = v4[1].n128_u64[0];
  __n128 result = *v4;
  unint64_t v8 = a2[1].n128_u64[0];
  *unint64_t v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  unint64_t v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_2168F8848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2168F8860(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 57) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C74E250);
  }
  else {
    return 0;
  }
}

void *sub_2168F8898(void *a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v5, (uint64_t)a1);
  a1[1] = &off_26C74ECC0;
  sub_2168F8DBC(a1, a2);
  if (v6) {
    (*(void (**)(unsigned char *))(v6 + 32))(v5);
  }
  return a1;
}

void sub_2168F892C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2168F8968(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

atomic_uint **sub_2168F8988(atomic_uint **a1, atomic_uint **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2168F8AE0(a1);
}

uint64_t sub_2168F8998()
{
  return 1;
}

unint64_t sub_2168F89A0(unint64_t **a1)
{
  return sub_2168F8B38(*a1);
}

BOOL sub_2168F89A8(void **a1, uint64_t *a2)
{
  return sub_2168F8B8C(*a1, *a2);
}

BOOL sub_2168F89B4(void **a1, uint64_t a2)
{
  return sub_2168F8B8C(*a1, a2);
}

uint64_t sub_2168F89C0()
{
  return 0;
}

void *sub_2168F89CC(uint64_t **a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, void *))sub_2168F8DA8);
  return a2;
}

void *sub_2168F8A20()
{
  return &unk_26C74E250;
}

uint64_t sub_2168F8A2C()
{
  return 1;
}

uint64_t sub_2168F8A34()
{
  return MEMORY[0x263F8C248];
}

uint64_t sub_2168F8A40(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_2168F8A48(uint64_t a1)
{
  return **(void **)a1;
}

BOOL sub_2168F8A54(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x80000002174E54ECLL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2168F8A90(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74E250, a2, a3);
}

void *sub_2168F8AB4()
{
  return &unk_26C74E250;
}

uint64_t sub_2168F8AC0(uint64_t a1)
{
  return *(void *)a1;
}

void *sub_2168F8AC8@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  a2[1] = &off_26C74ECC0;
  return sub_2168F8DBC(a2, v2);
}

atomic_uint **sub_2168F8AE0(atomic_uint **a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit(v2 + 10, 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_2168F83DC((uint64_t)v2);
    operator delete(v2);
  }
  return a1;
}

unint64_t sub_2168F8B38(unint64_t *a1)
{
  unint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v2 = (float *)a1[4];
    unint64_t v3 = *a1;
    do
    {
      float v4 = *v2++;
      float v5 = v4;
      if (v4 == 0.0) {
        float v5 = 0.0;
      }
      unint64_t v1 = LODWORD(v5) + ((v1 + LODWORD(v5) + (v1 + LODWORD(v5)) * (v1 + LODWORD(v5))) >> 1);
      --v3;
    }
    while (v3);
    v1 *= 0x9E3779B97F4A7C55;
  }
  return bswap64(v1);
}

BOOL sub_2168F8B8C(void *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32) && sub_2168F8C2C((uint64_t)a1, a2) && a1[3] == *(void *)(a2 + 24)) {
    return 1;
  }
  BOOL result = sub_2168F8C2C((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  if (!*a1) {
    return 1;
  }
  float v5 = (float *)a1[4];
  uint64_t v6 = *(float **)(a2 + 32);
  uint64_t v7 = 4 * *a1 - 4;
  do
  {
    float v8 = *v5++;
    float v9 = v8;
    float v10 = *v6++;
    BOOL result = v9 == v10;
    BOOL v11 = v9 != v10 || v7 == 0;
    v7 -= 4;
  }
  while (!v11);
  return result;
}

BOOL sub_2168F8C2C(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != *(void *)a2) {
    return 0;
  }
  int v6 = *(_DWORD *)(a1 + 8);
  float v4 = (const void *)(a1 + 8);
  int v5 = v6;
  if (v6)
  {
    if (*(_DWORD *)(a1 + 12)) {
      int v7 = *(_DWORD *)(a1 + 16) ? 4 : 3;
    }
    else {
      int v7 = 2;
    }
  }
  else
  {
    int v7 = 1;
  }
  float v8 = (const void *)(a2 + 8);
  if (*(_DWORD *)(a2 + 8))
  {
    if (*(_DWORD *)(a2 + 12)) {
      int v9 = *(_DWORD *)(a2 + 16) ? 4 : 3;
    }
    else {
      int v9 = 2;
    }
  }
  else
  {
    int v9 = 1;
  }
  if (v7 != v9) {
    return 0;
  }
  if (v5)
  {
    if (*(_DWORD *)(a1 + 12))
    {
      BOOL v10 = *(_DWORD *)(a1 + 16) == 0;
      uint64_t v11 = 3;
      if (!v10) {
        uint64_t v11 = 4;
      }
    }
    else
    {
      uint64_t v11 = 2;
    }
  }
  else
  {
    uint64_t v11 = 1;
  }
  return memcmp(v4, v8, 4 * v11 - 4) == 0;
}

uint64_t sub_2168F8D0C(_OWORD **a1)
{
  unsigned int v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    unint64_t v3 = operator new(0x30uLL);
    float v4 = *a1;
    long long v5 = (*a1)[1];
    *(_OWORD *)unint64_t v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    uint64_t v6 = *((void *)v4 + 4);
    *((void *)v3 + 4) = v6;
    if (v6)
    {
      int v7 = (atomic_ullong *)*((void *)v3 + 3);
      float v8 = (atomic_ullong *)(v6 - 16);
      if (!v7) {
        int v7 = v8;
      }
      atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
      float v4 = *a1;
    }
    atomic_store(0, (unsigned int *)v3 + 10);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 10, 1u, memory_order_relaxed);
    BOOL v10 = (atomic_uint *)v4;
    *a1 = v3;
    sub_2168F8AE0(&v10);
  }
  return (uint64_t)*a1;
}

void *sub_2168F8DA8(float **a1, void *a2)
{
  unsigned int v2 = (*a1)++;
  return pxrInternal__aapl__pxrReserved__::VtStreamOut(v2, a2);
}

void *sub_2168F8DBC(void *a1, uint64_t a2)
{
  BOOL result = operator new(0x30uLL);
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)BOOL result = *(_OWORD *)a2;
  *((_OWORD *)result + 1) = v5;
  uint64_t v6 = *(void *)(a2 + 32);
  *((void *)result + 4) = v6;
  if (v6)
  {
    int v7 = (atomic_ullong *)(v6 - 16);
    if (*((void *)result + 3)) {
      int v7 = (atomic_ullong *)*((void *)result + 3);
    }
    atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
  }
  atomic_store(0, (unsigned int *)result + 10);
  *a1 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 10, 1u, memory_order_relaxed);
  return result;
}

uint64_t sub_2168F8E28(void *a1)
{
  void v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_2168F8D0C((_OWORD **)a1);
}

uint64_t sub_2168F8EBC(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (sub_2168F8860(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      float v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_2168F9008, (uint64_t)&stru_26C74E250);
  }
}

uint64_t sub_2168F8F50(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  __int16 v5 = 0;
  sub_2168F845C((void *)a1);
  uint64_t v6 = &v5;
  sub_2168F90A4((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_2168F8FAC(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

double sub_2168F8FC4@<D0>(__n128 *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  *((void *)a2 + 1) = 0;
  *(void *)&double result = sub_2168F93A4(a2, a1).n128_u64[0];
  return result;
}

void sub_2168F8FF4(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

double sub_2168F9008@<D0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x28uLL);
  double result = 0.0;
  *uint64_t v2 = 0u;
  v2[1] = 0u;
  *((void *)v2 + 4) = 0;
  *a1 = v2;
  a1[1] = sub_2168F9058;
  a1[2] = &stru_26C74E250;
  return result;
}

void sub_2168F9058(void *a1)
{
  if (a1)
  {
    sub_2168F83DC((uint64_t)a1);
    operator delete(a1);
  }
}

void sub_2168F90A4(unint64_t *a1, unint64_t a2, _WORD **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    int v7 = (unint64_t *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              BOOL v10 = sub_2168F926C((uint64_t)a1, a2);
              int v7 = v10;
              if (v3)
              {
                uint64_t v11 = 0;
                do
                {
                  *(_WORD *)((char *)v10 + v11) = *(_WORD *)(v9 + v11);
                  v11 += 2;
                }
                while (2 * v3 != v11);
              }
            }
            int v12 = *a3;
            uint64_t v13 = 2 * v3;
            do
            {
              *(_WORD *)((char *)v7 + v13) = *v12;
              v13 += 2;
            }
            while (2 * a2 != v13);
          }
          unint64_t v14 = v7;
          goto LABEL_31;
        }
        int v7 = (unint64_t *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v19 = a2;
      }
      else {
        unint64_t v19 = *a1;
      }
      char v20 = sub_2168F926C((uint64_t)a1, a2);
      unint64_t v14 = v20;
      if (v19)
      {
        uint64_t v21 = 2 * v19;
        uint64_t v22 = v20;
        do
        {
          __int16 v23 = *(_WORD *)v7;
          int v7 = (unint64_t *)((char *)v7 + 2);
          *(_WORD *)uint64_t v22 = v23;
          uint64_t v22 = (unint64_t *)((char *)v22 + 2);
          v21 -= 2;
        }
        while (v21);
      }
      if (v3 < a2)
      {
        uint64_t v24 = *a3;
        uint64_t v25 = 2 * v3;
        do
        {
          *(_WORD *)((char *)v20 + v25) = *v24;
          v25 += 2;
        }
        while (2 * a2 != v25);
      }
      goto LABEL_31;
    }
    uint64_t v15 = 2 * a2;
    if (2 * a2 / a2 == 2)
    {
      unint64_t v16 = sub_2168F926C((uint64_t)a1, a2);
      unint64_t v14 = v16;
      uint64_t v17 = 0;
      unint64_t v18 = *a3;
      do
      {
        *(_WORD *)((char *)v16 + v17) = *v18;
        v17 += 2;
      }
      while (v15 != v17);
LABEL_31:
      if (v14 != (unint64_t *)a1[4])
      {
        sub_2168F83DC((uint64_t)a1);
        a1[4] = (unint64_t)v14;
      }
      *a1 = a2;
      return;
    }
  }

  sub_2168F845C(a1);
}

void *sub_2168F926C(uint64_t a1, unint64_t a2)
{
  sub_216851EE4((uint64_t)&v7, "VtArray::_AllocateNew", "value_type *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>::_AllocateNew(size_t) [T = pxrInternal__aapl__pxrReserved__::pxr_half::half]");
  if (a2 > 0x7FFFFFFFFFFFFFF7) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 2 * a2 + 16;
  }
  float v4 = operator new(v3);
  *float v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_2168F92F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2168F930C(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    if (*((void *)this + 3) || (unint64_t v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::pxr_half::half]", a3);
      uint64_t v6 = (__int16 *)*((void *)this + 4);
      uint64_t v7 = *(void *)this;
      int v8 = sub_2168F926C((uint64_t)this, *(void *)this);
      unint64_t v9 = v8;
      if (v7)
      {
        uint64_t v10 = 2 * v7;
        uint64_t v11 = v8;
        do
        {
          __int16 v12 = *v6++;
          *v11++ = v12;
          v10 -= 2;
        }
        while (v10);
      }
      sub_2168F83DC((uint64_t)this);
      *((void *)this + 4) = v9;
    }
  }
}

__n128 sub_2168F93A4(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  if ((sub_2168F8308(a1) & 1) == 0)
  {
    uint64_t v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_2168F945C(a1, (uint64_t)v10);
    sub_2168F83DC((uint64_t)v10);
  }
  float v4 = (__n128 *)sub_2168F98A0(a1);
  unint64_t v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  unint64_t v6 = v4[1].n128_u64[0];
  __n128 result = *v4;
  unint64_t v8 = a2[1].n128_u64[0];
  *float v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  unint64_t v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_2168F9444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_2168F945C(void *a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v5, (uint64_t)a1);
  a1[1] = off_26C74ED78;
  sub_2168F8DBC(a1, a2);
  if (v6) {
    (*(void (**)(unsigned char *))(v6 + 32))(v5);
  }
  return a1;
}

void sub_2168F94F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2168F952C(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

atomic_uint **sub_2168F954C(atomic_uint **a1, atomic_uint **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2168F96E4(a1);
}

uint64_t sub_2168F955C()
{
  return 1;
}

unint64_t sub_2168F9564(unint64_t **a1)
{
  unint64_t v1 = **a1;
  if (v1)
  {
    uint64_t v2 = (unsigned __int16 *)(*a1)[4];
    unint64_t v3 = **a1;
    do
    {
      unsigned int v4 = *v2++;
      unint64_t v1 = v4 + ((v1 + v4 + (v1 + v4) * (v1 + v4)) >> 1);
      --v3;
    }
    while (v3);
    v1 *= 0x9E3779B97F4A7C55;
  }
  return bswap64(v1);
}

BOOL sub_2168F95AC(void **a1, uint64_t *a2)
{
  return sub_2168F973C(*a1, *a2);
}

BOOL sub_2168F95B8(void **a1, uint64_t a2)
{
  return sub_2168F973C(*a1, a2);
}

uint64_t sub_2168F95C4()
{
  return 0;
}

void *sub_2168F95D0(uint64_t **a1, void *a2)
{
  unint64_t v3 = *a1;
  uint64_t v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, void *))sub_2168F9888);
  return a2;
}

void *sub_2168F9624()
{
  return &unk_26C74E268;
}

uint64_t sub_2168F9630()
{
  return 1;
}

void *sub_2168F9638()
{
  return &unk_26C74C510;
}

uint64_t sub_2168F9644(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_2168F964C(uint64_t a1)
{
  return **(void **)a1;
}

BOOL sub_2168F9658(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x80000002174E551CLL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2168F9694(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74E268, a2, a3);
}

void *sub_2168F96B8()
{
  return &unk_26C74E268;
}

uint64_t sub_2168F96C4(uint64_t a1)
{
  return *(void *)a1;
}

void *sub_2168F96CC@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  a2[1] = off_26C74ED78;
  return sub_2168F8DBC(a2, v2);
}

atomic_uint **sub_2168F96E4(atomic_uint **a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit(v2 + 10, 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_2168F83DC((uint64_t)v2);
    operator delete(v2);
  }
  return a1;
}

BOOL sub_2168F973C(void *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32) && sub_2168F8C2C((uint64_t)a1, a2) && a1[3] == *(void *)(a2 + 24)) {
    return 1;
  }
  BOOL result = sub_2168F8C2C((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  if (!*a1) {
    return 1;
  }
  uint64_t v5 = (unsigned __int16 *)a1[4];
  uint64_t v6 = *(unsigned __int16 **)(a2 + 32);
  uint64_t v7 = 2 * *a1 - 2;
  do
  {
    int v8 = *v5++;
    float v9 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v8];
    int v10 = *v6++;
    float v11 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v10];
    BOOL result = v9 == v11;
    BOOL v12 = v9 != v11 || v7 == 0;
    v7 -= 2;
  }
  while (!v12);
  return result;
}

uint64_t sub_2168F97EC(_OWORD **a1)
{
  unsigned int v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    unint64_t v3 = operator new(0x30uLL);
    unsigned int v4 = *a1;
    long long v5 = (*a1)[1];
    *(_OWORD *)unint64_t v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    uint64_t v6 = *((void *)v4 + 4);
    *((void *)v3 + 4) = v6;
    if (v6)
    {
      uint64_t v7 = (atomic_ullong *)*((void *)v3 + 3);
      int v8 = (atomic_ullong *)(v6 - 16);
      if (!v7) {
        uint64_t v7 = v8;
      }
      atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
      unsigned int v4 = *a1;
    }
    atomic_store(0, (unsigned int *)v3 + 10);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 10, 1u, memory_order_relaxed);
    int v10 = (atomic_uint *)v4;
    *a1 = v3;
    sub_2168F96E4(&v10);
  }
  return (uint64_t)*a1;
}

uint64_t sub_2168F9888(void *a1, uint64_t a2)
{
  *a1 += 2;
  return pxrInternal__aapl__pxrReserved__::pxr_half::operator<<(a2);
}

uint64_t sub_2168F98A0(void *a1)
{
  void v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_2168F97EC((_OWORD **)a1);
}

void sub_2168F9934(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  unint64_t v3 = (unint64_t *)sub_2168F81BC(a1);
  sub_2168F9ADC((uint64_t)v11, *v3);
  unsigned int v4 = (unsigned __int16 *)v3[4];
  unint64_t v5 = *v3;
  sub_2168F9DFC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v11, v6, v7);
  if (v5)
  {
    int v8 = v12;
    uint64_t v9 = 2 * v5;
    do
    {
      int v10 = *v4++;
      *v8++ = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v10];
      v9 -= 2;
    }
    while (v9);
  }
  sub_2168F9B50(v11, a2);
  sub_2168F83DC((uint64_t)v11);
}

void sub_2168F99CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2168F99E4(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  unint64_t v3 = (unint64_t *)sub_2168FA45C(a1);
  sub_2168F8F50((uint64_t)v12, *v3);
  unsigned int v4 = (double *)v3[4];
  unint64_t v5 = *v3;
  sub_2168F930C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v12, v6, v7);
  if (v5)
  {
    int v8 = v13;
    uint64_t v9 = 8 * v5;
    do
    {
      float v10 = *v4;
      if (v10 == 0.0)
      {
        unsigned int v11 = HIWORD(LODWORD(v10));
      }
      else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v10) >> 23])
      {
        unsigned int v11 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v10) >> 23]
            + (((LODWORD(v10) & 0x7FFFFF) + ((LODWORD(v10) >> 13) & 1) + 4095) >> 13);
      }
      else
      {
        LOWORD(v11) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v10));
      }
      *v8++ = v11;
      ++v4;
      v9 -= 8;
    }
    while (v9);
  }
  sub_2168F8FC4(v12, a2);
  sub_2168F83DC((uint64_t)v12);
}

void sub_2168F9AC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2168F9ADC(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v5 = 0;
  sub_2168F845C((void *)a1);
  uint64_t v6 = &v5;
  sub_2168F9B94((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_2168F9B38(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

double sub_2168F9B50@<D0>(__n128 *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  *((void *)a2 + 1) = 0;
  *(void *)&double result = sub_2168F9E94(a2, a1).n128_u64[0];
  return result;
}

void sub_2168F9B80(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

void sub_2168F9B94(unint64_t *a1, unint64_t a2, uint64_t **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    uint64_t v7 = (uint64_t *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load((unint64_t *)v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              float v10 = sub_2168F9D5C((uint64_t)a1, a2);
              uint64_t v7 = v10;
              if (v3)
              {
                for (uint64_t i = 0; i != v3; ++i)
                  v10[i] = *(void *)(v9 + i * 8);
              }
            }
            BOOL v12 = *a3;
            uint64_t v13 = v3;
            do
              v7[v13++] = *v12;
            while (a2 != v13);
          }
          unint64_t v14 = v7;
          goto LABEL_31;
        }
        uint64_t v7 = (uint64_t *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v19 = a2;
      }
      else {
        unint64_t v19 = *a1;
      }
      char v20 = sub_2168F9D5C((uint64_t)a1, a2);
      unint64_t v14 = v20;
      if (v19)
      {
        uint64_t v21 = 8 * v19;
        uint64_t v22 = v20;
        do
        {
          uint64_t v23 = *v7++;
          *v22++ = v23;
          v21 -= 8;
        }
        while (v21);
      }
      if (v3 < a2)
      {
        uint64_t v24 = *a3;
        uint64_t v25 = v3;
        do
          v20[v25++] = *v24;
        while (a2 != v25);
      }
      goto LABEL_31;
    }
    uint64_t v15 = 8 * a2;
    if (8 * a2 / a2 == 8)
    {
      unint64_t v16 = sub_2168F9D5C((uint64_t)a1, a2);
      unint64_t v14 = v16;
      unint64_t v17 = 0;
      unint64_t v18 = *a3;
      do
      {
        v16[v17 / 8] = *v18;
        v17 += 8;
      }
      while (v15 != v17);
LABEL_31:
      if (v14 != (uint64_t *)a1[4])
      {
        sub_2168F83DC((uint64_t)a1);
        a1[4] = (unint64_t)v14;
      }
      *a1 = a2;
      return;
    }
  }

  sub_2168F845C(a1);
}

void *sub_2168F9D5C(uint64_t a1, unint64_t a2)
{
  sub_216851EE4((uint64_t)&v7, "VtArray::_AllocateNew", "value_type *pxrInternal__aapl__pxrReserved__::VtArray<double>::_AllocateNew(size_t) [T = double]");
  if (a2 > 0x1FFFFFFFFFFFFFFDLL) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 8 * a2 + 16;
  }
  unsigned int v4 = operator new(v3);
  *unsigned int v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_2168F9DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2168F9DFC(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    if (*((void *)this + 3) || (unint64_t v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<double>::_DetachIfNotUnique() [T = double]", a3);
      uint64_t v6 = (uint64_t *)*((void *)this + 4);
      uint64_t v7 = *(void *)this;
      int v8 = sub_2168F9D5C((uint64_t)this, *(void *)this);
      unint64_t v9 = v8;
      if (v7)
      {
        uint64_t v10 = 8 * v7;
        unsigned int v11 = v8;
        do
        {
          uint64_t v12 = *v6++;
          *v11++ = v12;
          v10 -= 8;
        }
        while (v10);
      }
      sub_2168F83DC((uint64_t)this);
      *((void *)this + 4) = v9;
    }
  }
}

__n128 sub_2168F9E94(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  if ((sub_2168F9F4C(a1) & 1) == 0)
  {
    uint64_t v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_2168F9F84(a1, (uint64_t)v10);
    sub_2168F83DC((uint64_t)v10);
  }
  unsigned int v4 = (__n128 *)sub_2168FA3C8(a1);
  unint64_t v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  unint64_t v6 = v4[1].n128_u64[0];
  __n128 result = *v4;
  unint64_t v8 = a2[1].n128_u64[0];
  *unsigned int v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  unint64_t v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_2168F9F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2168F9F4C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 56) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C74E238);
  }
  else {
    return 0;
  }
}

void *sub_2168F9F84(void *a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v5, (uint64_t)a1);
  a1[1] = &off_26C74EE30;
  sub_2168F8DBC(a1, a2);
  if (v6) {
    (*(void (**)(unsigned char *))(v6 + 32))(v5);
  }
  return a1;
}

void sub_2168FA018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2168FA054(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

atomic_uint **sub_2168FA074(atomic_uint **a1, atomic_uint **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2168FA1CC(a1);
}

uint64_t sub_2168FA084()
{
  return 1;
}

unint64_t sub_2168FA08C(unint64_t **a1)
{
  return sub_2168FA224(*a1);
}

BOOL sub_2168FA094(void **a1, uint64_t *a2)
{
  return sub_2168FA278(*a1, *a2);
}

BOOL sub_2168FA0A0(void **a1, uint64_t a2)
{
  return sub_2168FA278(*a1, a2);
}

uint64_t sub_2168FA0AC()
{
  return 0;
}

void *sub_2168FA0B8(uint64_t **a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, void *))sub_2168FA3B4);
  return a2;
}

void *sub_2168FA10C()
{
  return &unk_26C74E238;
}

uint64_t sub_2168FA118()
{
  return 1;
}

uint64_t sub_2168FA120()
{
  return MEMORY[0x263F8C240];
}

uint64_t sub_2168FA12C(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_2168FA134(uint64_t a1)
{
  return **(void **)a1;
}

BOOL sub_2168FA140(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x80000002174E548CLL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2168FA17C(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74E238, a2, a3);
}

void *sub_2168FA1A0()
{
  return &unk_26C74E238;
}

uint64_t sub_2168FA1AC(uint64_t a1)
{
  return *(void *)a1;
}

void *sub_2168FA1B4@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  a2[1] = &off_26C74EE30;
  return sub_2168F8DBC(a2, v2);
}

atomic_uint **sub_2168FA1CC(atomic_uint **a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit(v2 + 10, 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_2168F83DC((uint64_t)v2);
    operator delete(v2);
  }
  return a1;
}

unint64_t sub_2168FA224(unint64_t *a1)
{
  unint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v2 = (double *)a1[4];
    unint64_t v3 = *a1;
    do
    {
      double v4 = *v2++;
      double v5 = v4;
      if (v4 == 0.0) {
        double v5 = 0.0;
      }
      unint64_t v1 = *(void *)&v5 + ((v1 + *(void *)&v5 + (v1 + *(void *)&v5) * (v1 + *(void *)&v5)) >> 1);
      --v3;
    }
    while (v3);
    v1 *= 0x9E3779B97F4A7C55;
  }
  return bswap64(v1);
}

BOOL sub_2168FA278(void *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32) && sub_2168F8C2C((uint64_t)a1, a2) && a1[3] == *(void *)(a2 + 24)) {
    return 1;
  }
  BOOL result = sub_2168F8C2C((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  if (!*a1) {
    return 1;
  }
  double v5 = (double *)a1[4];
  uint64_t v6 = *(double **)(a2 + 32);
  uint64_t v7 = 8 * *a1 - 8;
  do
  {
    double v8 = *v5++;
    double v9 = v8;
    double v10 = *v6++;
    BOOL result = v9 == v10;
    BOOL v11 = v9 != v10 || v7 == 0;
    v7 -= 8;
  }
  while (!v11);
  return result;
}

uint64_t sub_2168FA318(_OWORD **a1)
{
  unsigned int v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    unint64_t v3 = operator new(0x30uLL);
    double v4 = *a1;
    long long v5 = (*a1)[1];
    *(_OWORD *)unint64_t v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    uint64_t v6 = *((void *)v4 + 4);
    *((void *)v3 + 4) = v6;
    if (v6)
    {
      uint64_t v7 = (atomic_ullong *)*((void *)v3 + 3);
      double v8 = (atomic_ullong *)(v6 - 16);
      if (!v7) {
        uint64_t v7 = v8;
      }
      atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
      double v4 = *a1;
    }
    atomic_store(0, (unsigned int *)v3 + 10);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 10, 1u, memory_order_relaxed);
    double v10 = (atomic_uint *)v4;
    *a1 = v3;
    sub_2168FA1CC(&v10);
  }
  return (uint64_t)*a1;
}

void *sub_2168FA3B4(double **a1, void *a2)
{
  unsigned int v2 = (*a1)++;
  return pxrInternal__aapl__pxrReserved__::VtStreamOut(v2, a2);
}

uint64_t sub_2168FA3C8(void *a1)
{
  void v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_2168FA318((_OWORD **)a1);
}

uint64_t sub_2168FA45C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (sub_2168F9F4C(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      double v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_2168FA4F0, (uint64_t)&stru_26C74E238);
  }
}

double sub_2168FA4F0@<D0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x28uLL);
  double result = 0.0;
  *uint64_t v2 = 0u;
  v2[1] = 0u;
  *((void *)v2 + 4) = 0;
  *a1 = v2;
  a1[1] = sub_2168FA540;
  a1[2] = &stru_26C74E238;
  return result;
}

void sub_2168FA540(void *a1)
{
  if (a1)
  {
    sub_2168F83DC((uint64_t)a1);
    operator delete(a1);
  }
}

void sub_2168FA58C(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  unint64_t v3 = (unint64_t *)sub_2168F8EBC(a1);
  sub_2168F9ADC((uint64_t)v11, *v3);
  double v4 = (float *)v3[4];
  unint64_t v5 = *v3;
  sub_2168F9DFC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v11, v6, v7);
  if (v5)
  {
    double v8 = v12;
    uint64_t v9 = 4 * v5;
    do
    {
      float v10 = *v4++;
      *v8++ = v10;
      v9 -= 4;
    }
    while (v9);
  }
  sub_2168F9B50(v11, a2);
  sub_2168F83DC((uint64_t)v11);
}

void sub_2168FA618(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2168FA630(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  unint64_t v3 = (unint64_t *)sub_2168FA45C(a1);
  sub_2168F8250((uint64_t)v12, *v3);
  double v4 = (double *)v3[4];
  unint64_t v5 = *v3;
  sub_2168F8710((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v12, v6, v7);
  if (v5)
  {
    double v8 = v13;
    uint64_t v9 = 8 * v5;
    do
    {
      double v10 = *v4++;
      float v11 = v10;
      *v8++ = v11;
      v9 -= 8;
    }
    while (v9);
  }
  sub_2168F82C4(v12, a2);
  sub_2168F83DC((uint64_t)v12);
}

void sub_2168FA6BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2168FA6D4(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  unint64_t v3 = (unint64_t *)sub_2168FA8C8(a1);
  sub_2168FA95C((uint64_t)v11, *v3);
  double v4 = (unsigned __int16 *)v3[4];
  unint64_t v5 = *v3;
  sub_2168FAD50((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v11, v6, v7);
  if (v5)
  {
    double v8 = &v4[2 * v5];
    uint64_t v9 = v12;
    do
    {
      float v10 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v4[1]];
      *uint64_t v9 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*v4];
      v9[1] = v10;
      v9 += 2;
      v4 += 2;
    }
    while (v4 != v8);
  }
  sub_2168FA9D0(v11, a2);
  sub_2168F83DC((uint64_t)v11);
}

void sub_2168FA774(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2168FA78C(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  unint64_t v3 = (unint64_t *)sub_2168FB46C(a1);
  sub_2168FB500((uint64_t)v14, *v3);
  double v4 = (float *)v3[4];
  unint64_t v5 = *v3;
  sub_2168FB8BC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v14, v6, v7);
  if (v5)
  {
    double v8 = &v4[2 * v5];
    uint64_t v9 = v15;
    do
    {
      float v10 = (pxrInternal__aapl__pxrReserved__::pxr_half::half *)*(unsigned int *)v4;
      if (*v4 == 0.0)
      {
        unsigned int v11 = v10 >> 16;
      }
      else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v10 >> 23])
      {
        unsigned int v11 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v10 >> 23]
            + (((v10 & 0x7FFFFF) + ((v10 >> 13) & 1) + 4095) >> 13);
      }
      else
      {
        LOWORD(v11) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert(v10);
      }
      float v12 = v4[1];
      if (v12 == 0.0)
      {
        unsigned int v13 = HIWORD(LODWORD(v12));
      }
      else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v12) >> 23])
      {
        unsigned int v13 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v12) >> 23]
            + (((LODWORD(v12) & 0x7FFFFF) + ((LODWORD(v12) >> 13) & 1) + 4095) >> 13);
      }
      else
      {
        LOWORD(v13) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v12));
      }
      *v9++ = (unsigned __int16)v11 | ((unsigned __int16)v13 << 16);
      v4 += 2;
    }
    while (v4 != v8);
  }
  sub_2168FB574(v14, a2);
  sub_2168F83DC((uint64_t)v14);
}

void sub_2168FA8AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2168FA8C8(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (sub_2168FAA14(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      double v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_2168FAA4C, (uint64_t)&stru_26C74DEC0);
  }
}

uint64_t sub_2168FA95C(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v5 = 0;
  sub_2168F845C((void *)a1);
  uint64_t v6 = &v5;
  sub_2168FAAE8((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_2168FA9B8(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

double sub_2168FA9D0@<D0>(__n128 *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  *((void *)a2 + 1) = 0;
  *(void *)&double result = sub_2168FADE8(a2, a1).n128_u64[0];
  return result;
}

void sub_2168FAA00(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2168FAA14(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 19) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C74DEC0);
  }
  else {
    return 0;
  }
}

double sub_2168FAA4C@<D0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x28uLL);
  double result = 0.0;
  *uint64_t v2 = 0u;
  v2[1] = 0u;
  *((void *)v2 + 4) = 0;
  *a1 = v2;
  a1[1] = sub_2168FAA9C;
  a1[2] = &stru_26C74DEC0;
  return result;
}

void sub_2168FAA9C(void *a1)
{
  if (a1)
  {
    sub_2168F83DC((uint64_t)a1);
    operator delete(a1);
  }
}

void sub_2168FAAE8(unint64_t *a1, unint64_t a2, uint64_t **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    uint64_t v7 = (uint64_t *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load((unint64_t *)v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              float v10 = sub_2168FACB0((uint64_t)a1, a2);
              uint64_t v7 = v10;
              if (v3)
              {
                for (uint64_t i = 0; i != v3; ++i)
                  v10[i] = *(void *)(v9 + i * 8);
              }
            }
            float v12 = *a3;
            uint64_t v13 = v3;
            do
              v7[v13++] = *v12;
            while (a2 != v13);
          }
          unint64_t v14 = v7;
          goto LABEL_31;
        }
        uint64_t v7 = (uint64_t *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v19 = a2;
      }
      else {
        unint64_t v19 = *a1;
      }
      char v20 = sub_2168FACB0((uint64_t)a1, a2);
      unint64_t v14 = v20;
      if (v19)
      {
        uint64_t v21 = 8 * v19;
        uint64_t v22 = v20;
        do
        {
          uint64_t v23 = *v7++;
          *v22++ = v23;
          v21 -= 8;
        }
        while (v21);
      }
      if (v3 < a2)
      {
        uint64_t v24 = *a3;
        uint64_t v25 = v3;
        do
          v20[v25++] = *v24;
        while (a2 != v25);
      }
      goto LABEL_31;
    }
    uint64_t v15 = 8 * a2;
    if (8 * a2 / a2 == 8)
    {
      unint64_t v16 = sub_2168FACB0((uint64_t)a1, a2);
      unint64_t v14 = v16;
      unint64_t v17 = 0;
      unint64_t v18 = *a3;
      do
      {
        v16[v17 / 8] = *v18;
        v17 += 8;
      }
      while (v15 != v17);
LABEL_31:
      if (v14 != (uint64_t *)a1[4])
      {
        sub_2168F83DC((uint64_t)a1);
        a1[4] = (unint64_t)v14;
      }
      *a1 = a2;
      return;
    }
  }

  sub_2168F845C(a1);
}

void *sub_2168FACB0(uint64_t a1, unint64_t a2)
{
  sub_216851EE4((uint64_t)&v7, "VtArray::_AllocateNew", "value_type *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>::_AllocateNew(size_t) [T = pxrInternal__aapl__pxrReserved__::GfVec2f]");
  if (a2 > 0x1FFFFFFFFFFFFFFDLL) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 8 * a2 + 16;
  }
  double v4 = operator new(v3);
  *double v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_2168FAD38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2168FAD50(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    if (*((void *)this + 3) || (unint64_t v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec2f]", a3);
      uint64_t v6 = (uint64_t *)*((void *)this + 4);
      uint64_t v7 = *(void *)this;
      int v8 = sub_2168FACB0((uint64_t)this, *(void *)this);
      unint64_t v9 = v8;
      if (v7)
      {
        uint64_t v10 = 8 * v7;
        unsigned int v11 = v8;
        do
        {
          uint64_t v12 = *v6++;
          *v11++ = v12;
          v10 -= 8;
        }
        while (v10);
      }
      sub_2168F83DC((uint64_t)this);
      *((void *)this + 4) = v9;
    }
  }
}

__n128 sub_2168FADE8(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  if ((sub_2168FAEA0(a1) & 1) == 0)
  {
    uint64_t v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_2168FAED8(a1, (uint64_t)v10);
    sub_2168F83DC((uint64_t)v10);
  }
  double v4 = (__n128 *)sub_2168FB3D8(a1);
  unint64_t v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  unint64_t v6 = v4[1].n128_u64[0];
  __n128 result = *v4;
  unint64_t v8 = a2[1].n128_u64[0];
  *double v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  unint64_t v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_2168FAE88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2168FAEA0(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 22) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C74DF08);
  }
  else {
    return 0;
  }
}

void *sub_2168FAED8(void *a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v5, (uint64_t)a1);
  a1[1] = off_26C74EEE8;
  sub_2168F8DBC(a1, a2);
  if (v6) {
    (*(void (**)(unsigned char *))(v6 + 32))(v5);
  }
  return a1;
}

void sub_2168FAF6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2168FAFA8(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

atomic_uint **sub_2168FAFC8(atomic_uint **a1, atomic_uint **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2168FB140(a1);
}

uint64_t sub_2168FAFD8()
{
  return 1;
}

unint64_t sub_2168FAFE0(uint64_t **a1)
{
  return sub_2168FB198((uint64_t)&v2, *a1);
}

BOOL sub_2168FB008(void **a1, uint64_t *a2)
{
  return sub_2168FB280(*a1, *a2);
}

BOOL sub_2168FB014(void **a1, uint64_t a2)
{
  return sub_2168FB280(*a1, a2);
}

uint64_t sub_2168FB020()
{
  return 0;
}

void *sub_2168FB02C(uint64_t **a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, void *))sub_2168FB3C0);
  return a2;
}

void *sub_2168FB080()
{
  return &unk_26C74DF08;
}

uint64_t sub_2168FB08C()
{
  return 1;
}

void *sub_2168FB094()
{
  return &unk_26C74C700;
}

uint64_t sub_2168FB0A0(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_2168FB0A8(uint64_t a1)
{
  return **(void **)a1;
}

BOOL sub_2168FB0B4(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x8000000217456F19 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2168FB0F0(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74DF08, a2, a3);
}

void *sub_2168FB114()
{
  return &unk_26C74DF08;
}

uint64_t sub_2168FB120(uint64_t a1)
{
  return *(void *)a1;
}

void *sub_2168FB128@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  a2[1] = off_26C74EEE8;
  return sub_2168F8DBC(a2, v2);
}

atomic_uint **sub_2168FB140(atomic_uint **a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit(v2 + 10, 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_2168F83DC((uint64_t)v2);
    operator delete(v2);
  }
  return a1;
}

unint64_t sub_2168FB198(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  char v8 = 1;
  uint64_t v7 = v2;
  if (v2)
  {
    uint64_t v3 = (float *)a2[4];
    do
    {
      --v2;
      double v4 = v3 + 2;
      sub_2168FB210((uint64_t)&v7, v3);
      uint64_t v3 = v4;
    }
    while (v2);
    unint64_t v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    unint64_t v5 = 0;
  }
  return bswap64(v5);
}

uint64_t sub_2168FB210(uint64_t result, float *a2)
{
  float v2 = *a2;
  if (*a2 == 0.0) {
    float v2 = 0.0;
  }
  uint64_t v3 = LODWORD(v2);
  if (a2[1] == 0.0) {
    float v4 = 0.0;
  }
  else {
    float v4 = a2[1];
  }
  unint64_t v5 = bswap64(0x9E3779B97F4A7C55* (LODWORD(v4) + ((LODWORD(v4) + v3 + (LODWORD(v4) + v3) * ((unint64_t)LODWORD(v4) + v3)) >> 1)));
  if (*(unsigned char *)(result + 8)) {
    v5 += (*(void *)result + v5 + (*(void *)result + v5) * (*(void *)result + v5)) >> 1;
  }
  else {
    *(unsigned char *)(result + 8) = 1;
  }
  *(void *)__n128 result = v5;
  return result;
}

BOOL sub_2168FB280(void *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32) && sub_2168F8C2C((uint64_t)a1, a2) && a1[3] == *(void *)(a2 + 24)) {
    return 1;
  }
  BOOL result = sub_2168F8C2C((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  if (!*a1) {
    return 1;
  }
  unint64_t v5 = (float *)a1[4];
  uint64_t v6 = &v5[2 * *a1];
  uint64_t v7 = *(float **)(a2 + 32);
  do
  {
    float v8 = *v5;
    float v9 = v5[1];
    v5 += 2;
    float v10 = *v7;
    float v11 = v7[1];
    v7 += 2;
    BOOL result = v9 == v11 && v8 == v10;
  }
  while (result && v5 != v6);
  return result;
}

uint64_t sub_2168FB324(_OWORD **a1)
{
  unsigned int v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    uint64_t v3 = operator new(0x30uLL);
    float v4 = *a1;
    long long v5 = (*a1)[1];
    *(_OWORD *)uint64_t v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    uint64_t v6 = *((void *)v4 + 4);
    *((void *)v3 + 4) = v6;
    if (v6)
    {
      uint64_t v7 = (atomic_ullong *)*((void *)v3 + 3);
      float v8 = (atomic_ullong *)(v6 - 16);
      if (!v7) {
        uint64_t v7 = v8;
      }
      atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
      float v4 = *a1;
    }
    atomic_store(0, (unsigned int *)v3 + 10);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 10, 1u, memory_order_relaxed);
    float v10 = (atomic_uint *)v4;
    *a1 = v3;
    sub_2168FB140(&v10);
  }
  return (uint64_t)*a1;
}

void *sub_2168FB3C0(float **a1, void *a2)
{
  uint64_t v3 = *a1;
  *a1 += 2;
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, v3);
}

uint64_t sub_2168FB3D8(void *a1)
{
  void v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_2168FB324((_OWORD **)a1);
}

uint64_t sub_2168FB46C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (sub_2168FAEA0(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      float v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_2168FB5B8, (uint64_t)&stru_26C74DF08);
  }
}

uint64_t sub_2168FB500(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  int v5 = 0;
  sub_2168F845C((void *)a1);
  uint64_t v6 = &v5;
  sub_2168FB654((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_2168FB55C(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

double sub_2168FB574@<D0>(__n128 *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  *((void *)a2 + 1) = 0;
  *(void *)&double result = sub_2168FB954(a2, a1).n128_u64[0];
  return result;
}

void sub_2168FB5A4(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

double sub_2168FB5B8@<D0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x28uLL);
  double result = 0.0;
  *uint64_t v2 = 0u;
  v2[1] = 0u;
  *((void *)v2 + 4) = 0;
  *a1 = v2;
  a1[1] = sub_2168FB608;
  a1[2] = &stru_26C74DF08;
  return result;
}

void sub_2168FB608(void *a1)
{
  if (a1)
  {
    sub_2168F83DC((uint64_t)a1);
    operator delete(a1);
  }
}

void sub_2168FB654(unint64_t *a1, unint64_t a2, _DWORD **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    uint64_t v7 = (unint64_t *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              float v10 = sub_2168FB81C((uint64_t)a1, a2);
              uint64_t v7 = v10;
              if (v3)
              {
                uint64_t v11 = 0;
                do
                {
                  *(_DWORD *)((char *)v10 + v11) = *(_DWORD *)(v9 + v11);
                  v11 += 4;
                }
                while (4 * v3 != v11);
              }
            }
            uint64_t v12 = *a3;
            uint64_t v13 = 4 * v3;
            do
            {
              *(_DWORD *)((char *)v7 + v13) = *v12;
              v13 += 4;
            }
            while (4 * a2 != v13);
          }
          unint64_t v14 = v7;
          goto LABEL_31;
        }
        uint64_t v7 = (unint64_t *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v19 = a2;
      }
      else {
        unint64_t v19 = *a1;
      }
      char v20 = sub_2168FB81C((uint64_t)a1, a2);
      unint64_t v14 = v20;
      if (v19)
      {
        uint64_t v21 = 4 * v19;
        uint64_t v22 = v20;
        do
        {
          int v23 = *(_DWORD *)v7;
          uint64_t v7 = (unint64_t *)((char *)v7 + 4);
          *(_DWORD *)uint64_t v22 = v23;
          uint64_t v22 = (unint64_t *)((char *)v22 + 4);
          v21 -= 4;
        }
        while (v21);
      }
      if (v3 < a2)
      {
        uint64_t v24 = *a3;
        uint64_t v25 = 4 * v3;
        do
        {
          *(_DWORD *)((char *)v20 + v25) = *v24;
          v25 += 4;
        }
        while (4 * a2 != v25);
      }
      goto LABEL_31;
    }
    uint64_t v15 = 4 * a2;
    if (4 * a2 / a2 == 4)
    {
      unint64_t v16 = sub_2168FB81C((uint64_t)a1, a2);
      unint64_t v14 = v16;
      uint64_t v17 = 0;
      unint64_t v18 = *a3;
      do
      {
        *(_DWORD *)((char *)v16 + v17) = *v18;
        v17 += 4;
      }
      while (v15 != v17);
LABEL_31:
      if (v14 != (unint64_t *)a1[4])
      {
        sub_2168F83DC((uint64_t)a1);
        a1[4] = (unint64_t)v14;
      }
      *a1 = a2;
      return;
    }
  }

  sub_2168F845C(a1);
}

void *sub_2168FB81C(uint64_t a1, unint64_t a2)
{
  sub_216851EE4((uint64_t)&v7, "VtArray::_AllocateNew", "value_type *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>::_AllocateNew(size_t) [T = pxrInternal__aapl__pxrReserved__::GfVec2h]");
  if (a2 > 0x3FFFFFFFFFFFFFFBLL) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 4 * a2 + 16;
  }
  float v4 = operator new(v3);
  *float v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_2168FB8A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2168FB8BC(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    if (*((void *)this + 3) || (unint64_t v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec2h]", a3);
      uint64_t v6 = (int *)*((void *)this + 4);
      uint64_t v7 = *(void *)this;
      int v8 = sub_2168FB81C((uint64_t)this, *(void *)this);
      unint64_t v9 = v8;
      if (v7)
      {
        uint64_t v10 = 4 * v7;
        uint64_t v11 = v8;
        do
        {
          int v12 = *v6++;
          *v11++ = v12;
          v10 -= 4;
        }
        while (v10);
      }
      sub_2168F83DC((uint64_t)this);
      *((void *)this + 4) = v9;
    }
  }
}

__n128 sub_2168FB954(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  if ((sub_2168FAA14(a1) & 1) == 0)
  {
    uint64_t v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_2168FBA0C(a1, (uint64_t)v10);
    sub_2168F83DC((uint64_t)v10);
  }
  float v4 = (__n128 *)sub_2168FBEAC(a1);
  unint64_t v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  unint64_t v6 = v4[1].n128_u64[0];
  __n128 result = *v4;
  unint64_t v8 = a2[1].n128_u64[0];
  *float v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  unint64_t v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_2168FB9F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_2168FBA0C(void *a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v5, (uint64_t)a1);
  a1[1] = off_26C74EFA0;
  sub_2168F8DBC(a1, a2);
  if (v6) {
    (*(void (**)(unsigned char *))(v6 + 32))(v5);
  }
  return a1;
}

void sub_2168FBAA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2168FBADC(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

atomic_uint **sub_2168FBAFC(atomic_uint **a1, atomic_uint **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2168FBC74(a1);
}

uint64_t sub_2168FBB0C()
{
  return 1;
}

unint64_t sub_2168FBB14(unint64_t **a1)
{
  return sub_2168FBCCC((uint64_t)&v2, *a1);
}

BOOL sub_2168FBB3C(void **a1, uint64_t *a2)
{
  return sub_2168FBD2C(*a1, *a2);
}

BOOL sub_2168FBB48(void **a1, uint64_t a2)
{
  return sub_2168FBD2C(*a1, a2);
}

uint64_t sub_2168FBB54()
{
  return 0;
}

void *sub_2168FBB60(uint64_t **a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, void *))sub_2168FBE94);
  return a2;
}

void *sub_2168FBBB4()
{
  return &unk_26C74DEC0;
}

uint64_t sub_2168FBBC0()
{
  return 1;
}

void *sub_2168FBBC8()
{
  return &unk_26C74C710;
}

uint64_t sub_2168FBBD4(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_2168FBBDC(uint64_t a1)
{
  return **(void **)a1;
}

BOOL sub_2168FBBE8(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x80000002174E52DCLL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2168FBC24(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74DEC0, a2, a3);
}

void *sub_2168FBC48()
{
  return &unk_26C74DEC0;
}

uint64_t sub_2168FBC54(uint64_t a1)
{
  return *(void *)a1;
}

void *sub_2168FBC5C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  a2[1] = off_26C74EFA0;
  return sub_2168F8DBC(a2, v2);
}

atomic_uint **sub_2168FBC74(atomic_uint **a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit(v2 + 10, 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_2168F83DC((uint64_t)v2);
    operator delete(v2);
  }
  return a1;
}

unint64_t sub_2168FBCCC(uint64_t a1, unint64_t *a2)
{
  unint64_t v2 = *a2;
  if (*a2)
  {
    uint64_t v3 = (unsigned __int16 *)a2[4];
    unint64_t v4 = *a2;
    do
    {
      unint64_t v5 = bswap64(0x9E3779B97F4A7C55* (v3[1]+ ((v3[1]+ (unint64_t)*v3+ (v3[1] + *v3) * (unint64_t)(v3[1] + *v3)) >> 1)));
      unint64_t v2 = v5 + ((v5 + v2 + (v5 + v2) * (v5 + v2)) >> 1);
      v3 += 2;
      --v4;
    }
    while (v4);
    v2 *= 0x9E3779B97F4A7C55;
  }
  return bswap64(v2);
}

BOOL sub_2168FBD2C(void *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32) && sub_2168F8C2C((uint64_t)a1, a2) && a1[3] == *(void *)(a2 + 24)) {
    return 1;
  }
  BOOL result = sub_2168F8C2C((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  if (!*a1) {
    return 1;
  }
  unint64_t v5 = (unsigned __int16 *)a1[4];
  uint64_t v6 = &v5[2 * *a1];
  for (uint64_t i = *(unsigned __int16 **)(a2 + 32);
        pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*v5] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*i]
     && pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v5[1]] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[i[1]];
        i += 2)
  {
    v5 += 2;
    if (v5 == v6) {
      return 1;
    }
  }
  return 0;
}

uint64_t sub_2168FBDF8(_OWORD **a1)
{
  unsigned int v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    uint64_t v3 = operator new(0x30uLL);
    unint64_t v4 = *a1;
    long long v5 = (*a1)[1];
    *(_OWORD *)uint64_t v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    uint64_t v6 = *((void *)v4 + 4);
    *((void *)v3 + 4) = v6;
    if (v6)
    {
      uint64_t v7 = (atomic_ullong *)*((void *)v3 + 3);
      unint64_t v8 = (atomic_ullong *)(v6 - 16);
      if (!v7) {
        uint64_t v7 = v8;
      }
      atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
      unint64_t v4 = *a1;
    }
    atomic_store(0, (unsigned int *)v3 + 10);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 10, 1u, memory_order_relaxed);
    uint64_t v10 = (atomic_uint *)v4;
    *a1 = v3;
    sub_2168FBC74(&v10);
  }
  return (uint64_t)*a1;
}

void *sub_2168FBE94(void *a1, void *a2)
{
  *a1 += 4;
  return pxrInternal__aapl__pxrReserved__::operator<<(a2);
}

uint64_t sub_2168FBEAC(void *a1)
{
  void v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_2168FBDF8((_OWORD **)a1);
}

void sub_2168FBF40(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  uint64_t v3 = (unint64_t *)sub_2168FA8C8(a1);
  sub_2168FC144((uint64_t)v11, *v3);
  unint64_t v4 = (unsigned __int16 *)v3[4];
  unint64_t v5 = *v3;
  sub_2168FC460((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v11, v6, v7);
  if (v5)
  {
    unint64_t v8 = &v4[2 * v5];
    unint64_t v9 = v12;
    do
    {
      double v10 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v4[1]];
      *unint64_t v9 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*v4];
      v9[1] = v10;
      v9 += 2;
      v4 += 2;
    }
    while (v4 != v8);
  }
  sub_2168FC1B8(v11, a2);
  sub_2168F83DC((uint64_t)v11);
}

void sub_2168FBFE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2168FC000(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  uint64_t v3 = (unint64_t *)sub_2168FCB7C(a1);
  sub_2168FB500((uint64_t)v14, *v3);
  unint64_t v4 = (double *)v3[4];
  unint64_t v5 = *v3;
  sub_2168FB8BC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v14, v6, v7);
  if (v5)
  {
    unint64_t v8 = &v4[2 * v5];
    unint64_t v9 = v15;
    do
    {
      float v10 = *v4;
      if (v10 == 0.0)
      {
        unsigned int v11 = HIWORD(LODWORD(v10));
      }
      else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v10) >> 23])
      {
        unsigned int v11 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v10) >> 23]
            + (((LODWORD(v10) & 0x7FFFFF) + ((LODWORD(v10) >> 13) & 1) + 4095) >> 13);
      }
      else
      {
        LOWORD(v11) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v10));
      }
      float v12 = v4[1];
      if (v12 == 0.0)
      {
        unsigned int v13 = HIWORD(LODWORD(v12));
      }
      else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v12) >> 23])
      {
        unsigned int v13 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v12) >> 23]
            + (((LODWORD(v12) & 0x7FFFFF) + ((LODWORD(v12) >> 13) & 1) + 4095) >> 13);
      }
      else
      {
        LOWORD(v13) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v12));
      }
      *v9++ = (unsigned __int16)v11 | ((unsigned __int16)v13 << 16);
      v4 += 2;
    }
    while (v4 != v8);
  }
  sub_2168FB574(v14, a2);
  sub_2168F83DC((uint64_t)v14);
}

void sub_2168FC128(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2168FC144(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v5[0] = 0;
  v5[1] = 0;
  sub_2168F845C((void *)a1);
  uint64_t v6 = v5;
  sub_2168FC1FC((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_2168FC1A0(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

double sub_2168FC1B8@<D0>(__n128 *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  *((void *)a2 + 1) = 0;
  *(void *)&double result = sub_2168FC4F8(a2, a1).n128_u64[0];
  return result;
}

void sub_2168FC1E8(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

void sub_2168FC1FC(unint64_t *a1, unint64_t a2, _OWORD **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    uint64_t v7 = (unint64_t *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              float v10 = sub_2168FC3C4((uint64_t)a1, a2);
              uint64_t v7 = v10;
              if (v3)
              {
                uint64_t v11 = 0;
                do
                {
                  *(_OWORD *)&v10[v11] = *(_OWORD *)(v9 + v11 * 8);
                  v11 += 2;
                }
                while (2 * v3 != v11);
              }
            }
            float v12 = *a3;
            uint64_t v13 = 2 * v3;
            do
            {
              *(_OWORD *)&v7[v13] = *v12;
              v13 += 2;
            }
            while (2 * a2 != v13);
          }
          unint64_t v14 = v7;
          goto LABEL_31;
        }
        uint64_t v7 = (unint64_t *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v19 = a2;
      }
      else {
        unint64_t v19 = *a1;
      }
      char v20 = sub_2168FC3C4((uint64_t)a1, a2);
      unint64_t v14 = v20;
      if (v19)
      {
        uint64_t v21 = 16 * v19;
        uint64_t v22 = v20;
        do
        {
          long long v23 = *(_OWORD *)v7;
          v7 += 2;
          *(_OWORD *)uint64_t v22 = v23;
          v22 += 2;
          v21 -= 16;
        }
        while (v21);
      }
      if (v3 < a2)
      {
        uint64_t v24 = *a3;
        uint64_t v25 = 2 * v3;
        do
        {
          *(_OWORD *)&v20[v25] = *v24;
          v25 += 2;
        }
        while (2 * a2 != v25);
      }
      goto LABEL_31;
    }
    uint64_t v15 = 16 * a2;
    if (16 * a2 / a2 == 16)
    {
      unint64_t v16 = sub_2168FC3C4((uint64_t)a1, a2);
      unint64_t v14 = v16;
      unint64_t v17 = 0;
      unint64_t v18 = *a3;
      do
      {
        *(_OWORD *)&v16[v17 / 8] = *v18;
        v17 += 16;
      }
      while (v15 != v17);
LABEL_31:
      if (v14 != (unint64_t *)a1[4])
      {
        sub_2168F83DC((uint64_t)a1);
        a1[4] = (unint64_t)v14;
      }
      *a1 = a2;
      return;
    }
  }

  sub_2168F845C(a1);
}

void *sub_2168FC3C4(uint64_t a1, unint64_t a2)
{
  sub_216851EE4((uint64_t)&v7, "VtArray::_AllocateNew", "value_type *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>::_AllocateNew(size_t) [T = pxrInternal__aapl__pxrReserved__::GfVec2d]");
  if (a2 > 0xFFFFFFFFFFFFFFELL) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 16 * a2 + 16;
  }
  unint64_t v4 = operator new(v3);
  *unint64_t v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_2168FC448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2168FC460(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    if (*((void *)this + 3) || (unint64_t v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec2d]", a3);
      uint64_t v6 = (long long *)*((void *)this + 4);
      uint64_t v7 = *(void *)this;
      int v8 = sub_2168FC3C4((uint64_t)this, *(void *)this);
      unint64_t v9 = v8;
      if (v7)
      {
        uint64_t v10 = 16 * v7;
        uint64_t v11 = v8;
        do
        {
          long long v12 = *v6++;
          *v11++ = v12;
          v10 -= 16;
        }
        while (v10);
      }
      sub_2168F83DC((uint64_t)this);
      *((void *)this + 4) = v9;
    }
  }
}

__n128 sub_2168FC4F8(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  if ((sub_2168FC5B0(a1) & 1) == 0)
  {
    uint64_t v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_2168FC5E8(a1, (uint64_t)v10);
    sub_2168F83DC((uint64_t)v10);
  }
  unint64_t v4 = (__n128 *)sub_2168FCAE8(a1);
  unint64_t v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  unint64_t v6 = v4[1].n128_u64[0];
  __n128 result = *v4;
  unint64_t v8 = a2[1].n128_u64[0];
  *unint64_t v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  unint64_t v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_2168FC598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2168FC5B0(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 25) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C74DF50);
  }
  else {
    return 0;
  }
}

void *sub_2168FC5E8(void *a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v5, (uint64_t)a1);
  a1[1] = off_26C74F058;
  sub_2168F8DBC(a1, a2);
  if (v6) {
    (*(void (**)(unsigned char *))(v6 + 32))(v5);
  }
  return a1;
}

void sub_2168FC67C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2168FC6B8(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

atomic_uint **sub_2168FC6D8(atomic_uint **a1, atomic_uint **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2168FC850(a1);
}

uint64_t sub_2168FC6E8()
{
  return 1;
}

unint64_t sub_2168FC6F0(uint64_t **a1)
{
  return sub_2168FC8A8((uint64_t)&v2, *a1);
}

BOOL sub_2168FC718(void **a1, uint64_t *a2)
{
  return sub_2168FC990(*a1, *a2);
}

BOOL sub_2168FC724(void **a1, uint64_t a2)
{
  return sub_2168FC990(*a1, a2);
}

uint64_t sub_2168FC730()
{
  return 0;
}

void *sub_2168FC73C(uint64_t **a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, void *))sub_2168FCAD0);
  return a2;
}

void *sub_2168FC790()
{
  return &unk_26C74DF50;
}

uint64_t sub_2168FC79C()
{
  return 1;
}

void *sub_2168FC7A4()
{
  return &unk_26C74C6F0;
}

uint64_t sub_2168FC7B0(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_2168FC7B8(uint64_t a1)
{
  return **(void **)a1;
}

BOOL sub_2168FC7C4(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x80000002174E5264 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2168FC800(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74DF50, a2, a3);
}

void *sub_2168FC824()
{
  return &unk_26C74DF50;
}

uint64_t sub_2168FC830(uint64_t a1)
{
  return *(void *)a1;
}

void *sub_2168FC838@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  a2[1] = off_26C74F058;
  return sub_2168F8DBC(a2, v2);
}

atomic_uint **sub_2168FC850(atomic_uint **a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit(v2 + 10, 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_2168F83DC((uint64_t)v2);
    operator delete(v2);
  }
  return a1;
}

unint64_t sub_2168FC8A8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  char v8 = 1;
  uint64_t v7 = v2;
  if (v2)
  {
    uint64_t v3 = (double *)a2[4];
    do
    {
      --v2;
      unint64_t v4 = v3 + 2;
      sub_2168FC920((uint64_t)&v7, v3);
      uint64_t v3 = v4;
    }
    while (v2);
    unint64_t v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    unint64_t v5 = 0;
  }
  return bswap64(v5);
}

uint64_t sub_2168FC920(uint64_t result, double *a2)
{
  double v2 = *a2;
  if (*a2 == 0.0) {
    double v2 = 0.0;
  }
  double v3 = v2;
  if (a2[1] == 0.0) {
    double v4 = 0.0;
  }
  else {
    double v4 = a2[1];
  }
  unint64_t v5 = bswap64(0x9E3779B97F4A7C55* (*(void *)&v4+ ((*(void *)&v4 + *(void *)&v3 + (*(void *)&v4 + *(void *)&v3) * (*(void *)&v4 + *(void *)&v3)) >> 1)));
  if (*(unsigned char *)(result + 8)) {
    v5 += (*(void *)result + v5 + (*(void *)result + v5) * (*(void *)result + v5)) >> 1;
  }
  else {
    *(unsigned char *)(result + 8) = 1;
  }
  *(void *)__n128 result = v5;
  return result;
}

BOOL sub_2168FC990(void *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32) && sub_2168F8C2C((uint64_t)a1, a2) && a1[3] == *(void *)(a2 + 24)) {
    return 1;
  }
  BOOL result = sub_2168F8C2C((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  if (!*a1) {
    return 1;
  }
  unint64_t v5 = (double *)a1[4];
  uint64_t v6 = &v5[2 * *a1];
  uint64_t v7 = *(double **)(a2 + 32);
  do
  {
    double v8 = *v5;
    double v9 = v5[1];
    v5 += 2;
    double v10 = *v7;
    double v11 = v7[1];
    v7 += 2;
    BOOL result = v9 == v11 && v8 == v10;
  }
  while (result && v5 != v6);
  return result;
}

uint64_t sub_2168FCA34(_OWORD **a1)
{
  unsigned int v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    double v3 = operator new(0x30uLL);
    double v4 = *a1;
    long long v5 = (*a1)[1];
    *(_OWORD *)double v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    uint64_t v6 = *((void *)v4 + 4);
    *((void *)v3 + 4) = v6;
    if (v6)
    {
      uint64_t v7 = (atomic_ullong *)*((void *)v3 + 3);
      double v8 = (atomic_ullong *)(v6 - 16);
      if (!v7) {
        uint64_t v7 = v8;
      }
      atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
      double v4 = *a1;
    }
    atomic_store(0, (unsigned int *)v3 + 10);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 10, 1u, memory_order_relaxed);
    double v10 = (atomic_uint *)v4;
    *a1 = v3;
    sub_2168FC850(&v10);
  }
  return (uint64_t)*a1;
}

void *sub_2168FCAD0(double **a1, void *a2)
{
  double v3 = *a1;
  *a1 += 2;
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, v3);
}

uint64_t sub_2168FCAE8(void *a1)
{
  void v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_2168FCA34((_OWORD **)a1);
}

uint64_t sub_2168FCB7C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (sub_2168FC5B0(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      double v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_2168FCC10, (uint64_t)&stru_26C74DF50);
  }
}

double sub_2168FCC10@<D0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x28uLL);
  double result = 0.0;
  *uint64_t v2 = 0u;
  v2[1] = 0u;
  *((void *)v2 + 4) = 0;
  *a1 = v2;
  a1[1] = sub_2168FCC60;
  a1[2] = &stru_26C74DF50;
  return result;
}

void sub_2168FCC60(void *a1)
{
  if (a1)
  {
    sub_2168F83DC((uint64_t)a1);
    operator delete(a1);
  }
}

void sub_2168FCCAC(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  double v3 = (unint64_t *)sub_2168FB46C(a1);
  sub_2168FC144((uint64_t)v11, *v3);
  double v4 = (float32x2_t *)v3[4];
  unint64_t v5 = *v3;
  sub_2168FC460((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v11, v6, v7);
  if (v5)
  {
    double v8 = v12;
    uint64_t v9 = 8 * v5;
    do
    {
      float32x2_t v10 = *v4++;
      *v8++ = vcvtq_f64_f32(v10);
      v9 -= 8;
    }
    while (v9);
  }
  sub_2168FC1B8(v11, a2);
  sub_2168F83DC((uint64_t)v11);
}

void sub_2168FCD38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2168FCD50(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  double v3 = (unint64_t *)sub_2168FCB7C(a1);
  sub_2168FA95C((uint64_t)v11, *v3);
  double v4 = (float64x2_t *)v3[4];
  unint64_t v5 = *v3;
  sub_2168FAD50((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v11, v6, v7);
  if (v5)
  {
    double v8 = v12;
    uint64_t v9 = 16 * v5;
    do
    {
      float64x2_t v10 = *v4++;
      *v8++ = vcvt_f32_f64(v10);
      v9 -= 16;
    }
    while (v9);
  }
  sub_2168FA9D0(v11, a2);
  sub_2168F83DC((uint64_t)v11);
}

void sub_2168FCDDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2168FCDF4(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  double v3 = (unint64_t *)sub_2168FD054(a1);
  sub_2168FD0E8((uint64_t)v12, *v3);
  double v4 = (unsigned __int16 *)v3[4];
  unint64_t v5 = *v3;
  sub_2168FD54C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v12, v6, v7);
  if (v5)
  {
    double v8 = &v4[3 * v5];
    uint64_t v9 = v13;
    do
    {
      float v10 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v4[1]];
      float v11 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v4[2]];
      *uint64_t v9 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*v4];
      v9[1] = v10;
      void v9[2] = v11;
      v4 += 3;
      v9 += 3;
    }
    while (v4 != v8);
  }
  sub_2168FD160(v12, a2);
  sub_2168F83DC((uint64_t)v12);
}

void sub_2168FCEA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2168FCEC0(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  double v3 = (unint64_t *)sub_2168FDC2C(a1);
  sub_2168FDCC0((uint64_t)v16, *v3);
  double v4 = (float *)v3[4];
  unint64_t v5 = *v3;
  sub_2168FE0EC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v16, v6, v7);
  if (v5)
  {
    double v8 = &v4[3 * v5];
    uint64_t v9 = v17;
    do
    {
      float v10 = (pxrInternal__aapl__pxrReserved__::pxr_half::half *)*(unsigned int *)v4;
      if (*v4 == 0.0)
      {
        unsigned int v11 = v10 >> 16;
      }
      else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v10 >> 23])
      {
        unsigned int v11 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v10 >> 23]
            + (((v10 & 0x7FFFFF) + ((v10 >> 13) & 1) + 4095) >> 13);
      }
      else
      {
        LOWORD(v11) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert(v10);
      }
      float v12 = v4[1];
      if (v12 == 0.0)
      {
        unsigned int v13 = HIWORD(LODWORD(v12));
      }
      else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v12) >> 23])
      {
        unsigned int v13 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v12) >> 23]
            + (((LODWORD(v12) & 0x7FFFFF) + ((LODWORD(v12) >> 13) & 1) + 4095) >> 13);
      }
      else
      {
        LOWORD(v13) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v12));
      }
      float v14 = v4[2];
      if (v14 == 0.0)
      {
        unsigned int v15 = HIWORD(LODWORD(v14));
      }
      else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v14) >> 23])
      {
        unsigned int v15 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v14) >> 23]
            + (((LODWORD(v14) & 0x7FFFFF) + ((LODWORD(v14) >> 13) & 1) + 4095) >> 13);
      }
      else
      {
        LOWORD(v15) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v14));
      }
      *(_DWORD *)uint64_t v9 = (unsigned __int16)v11 | ((unsigned __int16)v13 << 16);
      *(_WORD *)(v9 + 4) = v15;
      v9 += 6;
      v4 += 3;
    }
    while (v4 != v8);
  }
  sub_2168FDD38(v16, a2);
  sub_2168F83DC((uint64_t)v16);
}

void sub_2168FD038(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2168FD054(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (sub_2168FD1A4(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      double v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_2168FD1DC, (uint64_t)&stru_26C74DEA8);
  }
}

uint64_t sub_2168FD0E8(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  int v6 = 0;
  uint64_t v5 = 0;
  sub_2168F845C((void *)a1);
  uint64_t v7 = &v5;
  sub_2168FD278((unint64_t *)a1, a2, &v7);
  return a1;
}

void sub_2168FD148(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

double sub_2168FD160@<D0>(__n128 *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  *((void *)a2 + 1) = 0;
  *(void *)&double result = sub_2168FD5F4(a2, a1).n128_u64[0];
  return result;
}

void sub_2168FD190(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2168FD1A4(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 18) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C74DEA8);
  }
  else {
    return 0;
  }
}

double sub_2168FD1DC@<D0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x28uLL);
  double result = 0.0;
  *uint64_t v2 = 0u;
  v2[1] = 0u;
  *((void *)v2 + 4) = 0;
  *a1 = v2;
  a1[1] = sub_2168FD22C;
  a1[2] = &stru_26C74DEA8;
  return result;
}

void sub_2168FD22C(void *a1)
{
  if (a1)
  {
    sub_2168F83DC((uint64_t)a1);
    operator delete(a1);
  }
}

void sub_2168FD278(unint64_t *a1, unint64_t a2, uint64_t **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    uint64_t v7 = (void *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              float v10 = sub_2168FD4A4((uint64_t)a1, a2);
              uint64_t v7 = v10;
              if (v3)
              {
                uint64_t v11 = 0;
                do
                {
                  float v12 = (char *)v10 + v11;
                  uint64_t v13 = *(void *)(v9 + v11);
                  *((_DWORD *)v12 + 2) = *(_DWORD *)(v9 + v11 + 8);
                  *(void *)float v12 = v13;
                  v11 += 12;
                }
                while (12 * v3 != v11);
              }
            }
            float v14 = *a3;
            uint64_t v15 = 12 * v3;
            do
            {
              unint64_t v16 = (char *)v7 + v15;
              uint64_t v17 = *v14;
              *((_DWORD *)v16 + 2) = *((_DWORD *)v14 + 2);
              *(void *)unint64_t v16 = v17;
              v15 += 12;
            }
            while (12 * a2 != v15);
          }
          unint64_t v18 = v7;
          goto LABEL_31;
        }
        uint64_t v7 = (void *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v24 = a2;
      }
      else {
        unint64_t v24 = *a1;
      }
      uint64_t v25 = sub_2168FD4A4((uint64_t)a1, a2);
      unint64_t v18 = v25;
      if (v24)
      {
        uint64_t v26 = 12 * v24;
        char v27 = v25;
        do
        {
          uint64_t v28 = *v7;
          *((_DWORD *)v27 + 2) = *((_DWORD *)v7 + 2);
          *char v27 = v28;
          char v27 = (void *)((char *)v27 + 12);
          uint64_t v7 = (void *)((char *)v7 + 12);
          v26 -= 12;
        }
        while (v26);
      }
      if (v3 < a2)
      {
        uint64_t v29 = *a3;
        uint64_t v30 = 12 * v3;
        do
        {
          uint64_t v31 = (char *)v25 + v30;
          uint64_t v32 = *v29;
          *((_DWORD *)v31 + 2) = *((_DWORD *)v29 + 2);
          *(void *)uint64_t v31 = v32;
          v30 += 12;
        }
        while (12 * a2 != v30);
      }
      goto LABEL_31;
    }
    if (a2 < 0x1555555555555556)
    {
      unint64_t v19 = sub_2168FD4A4((uint64_t)a1, a2);
      unint64_t v18 = v19;
      uint64_t v20 = 0;
      uint64_t v21 = *a3;
      do
      {
        uint64_t v22 = (char *)v19 + v20;
        uint64_t v23 = *v21;
        *((_DWORD *)v22 + 2) = *((_DWORD *)v21 + 2);
        *(void *)uint64_t v22 = v23;
        v20 += 12;
      }
      while (12 * a2 != v20);
LABEL_31:
      if (v18 != (void *)a1[4])
      {
        sub_2168F83DC((uint64_t)a1);
        a1[4] = (unint64_t)v18;
      }
      *a1 = a2;
      return;
    }
  }

  sub_2168F845C(a1);
}

void *sub_2168FD4A4(uint64_t a1, unint64_t a2)
{
  sub_216851EE4((uint64_t)&v7, "VtArray::_AllocateNew", "value_type *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_AllocateNew(size_t) [T = pxrInternal__aapl__pxrReserved__::GfVec3f]");
  if (a2 > 0x1555555555555553) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 12 * a2 + 16;
  }
  double v4 = operator new(v3);
  *double v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_2168FD534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2168FD54C(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    if (*((void *)this + 3) || (unint64_t v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec3f]", a3);
      int v6 = (uint64_t *)*((void *)this + 4);
      uint64_t v7 = *(void *)this;
      int v8 = sub_2168FD4A4((uint64_t)this, *(void *)this);
      unint64_t v9 = v8;
      if (v7)
      {
        uint64_t v10 = 12 * v7;
        uint64_t v11 = v8;
        do
        {
          uint64_t v12 = *v6;
          *((_DWORD *)v11 + 2) = *((_DWORD *)v6 + 2);
          *uint64_t v11 = v12;
          uint64_t v11 = (void *)((char *)v11 + 12);
          int v6 = (uint64_t *)((char *)v6 + 12);
          v10 -= 12;
        }
        while (v10);
      }
      sub_2168F83DC((uint64_t)this);
      *((void *)this + 4) = v9;
    }
  }
}

__n128 sub_2168FD5F4(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  if ((sub_2168FD6AC(a1) & 1) == 0)
  {
    uint64_t v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_2168FD6E4(a1, (uint64_t)v10);
    sub_2168F83DC((uint64_t)v10);
  }
  double v4 = (__n128 *)sub_2168FDB98(a1);
  unint64_t v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  unint64_t v6 = v4[1].n128_u64[0];
  __n128 result = *v4;
  unint64_t v8 = a2[1].n128_u64[0];
  *double v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  unint64_t v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_2168FD694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2168FD6AC(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 21) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C74DEF0);
  }
  else {
    return 0;
  }
}

void *sub_2168FD6E4(void *a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v5, (uint64_t)a1);
  a1[1] = off_26C74F110;
  sub_2168F8DBC(a1, a2);
  if (v6) {
    (*(void (**)(unsigned char *))(v6 + 32))(v5);
  }
  return a1;
}

void sub_2168FD778(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2168FD7B4(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

atomic_uint **sub_2168FD7D4(atomic_uint **a1, atomic_uint **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2168FD94C(a1);
}

uint64_t sub_2168FD7E4()
{
  return 1;
}

unint64_t sub_2168FD7EC(uint64_t **a1)
{
  return sub_2168FD9A4((uint64_t)&v2, *a1);
}

BOOL sub_2168FD814(void **a1, uint64_t *a2)
{
  return sub_2168FDA1C(*a1, *a2);
}

BOOL sub_2168FD820(void **a1, uint64_t a2)
{
  return sub_2168FDA1C(*a1, a2);
}

uint64_t sub_2168FD82C()
{
  return 0;
}

void *sub_2168FD838(uint64_t **a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, void *))sub_2168FDB80);
  return a2;
}

void *sub_2168FD88C()
{
  return &unk_26C74DEF0;
}

uint64_t sub_2168FD898()
{
  return 1;
}

void *sub_2168FD8A0()
{
  return &unk_26C74C740;
}

uint64_t sub_2168FD8AC(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_2168FD8B4(uint64_t a1)
{
  return **(void **)a1;
}

BOOL sub_2168FD8C0(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x80000002174E5318 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2168FD8FC(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74DEF0, a2, a3);
}

void *sub_2168FD920()
{
  return &unk_26C74DEF0;
}

uint64_t sub_2168FD92C(uint64_t a1)
{
  return *(void *)a1;
}

void *sub_2168FD934@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  a2[1] = off_26C74F110;
  return sub_2168F8DBC(a2, v2);
}

atomic_uint **sub_2168FD94C(atomic_uint **a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit(v2 + 10, 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_2168F83DC((uint64_t)v2);
    operator delete(v2);
  }
  return a1;
}

unint64_t sub_2168FD9A4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  char v8 = 1;
  uint64_t v7 = v2;
  if (v2)
  {
    uint64_t v3 = (float *)a2[4];
    do
    {
      --v2;
      double v4 = v3 + 3;
      sub_2168F77A0((uint64_t)&v7, v3);
      uint64_t v3 = v4;
    }
    while (v2);
    unint64_t v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    unint64_t v5 = 0;
  }
  return bswap64(v5);
}

BOOL sub_2168FDA1C(void *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32) && sub_2168F8C2C((uint64_t)a1, a2) && a1[3] == *(void *)(a2 + 24)) {
    return 1;
  }
  BOOL result = sub_2168F8C2C((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  if (!*a1) {
    return 1;
  }
  unint64_t v5 = (float *)a1[4];
  uint64_t v6 = &v5[3 * *a1];
  for (uint64_t i = *(float **)(a2 + 32); *v5 == *i && v5[1] == i[1] && v5[2] == i[2]; i += 3)
  {
    v5 += 3;
    if (v5 == v6) {
      return 1;
    }
  }
  return 0;
}

uint64_t sub_2168FDAE4(_OWORD **a1)
{
  unsigned int v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    uint64_t v3 = operator new(0x30uLL);
    double v4 = *a1;
    long long v5 = (*a1)[1];
    *(_OWORD *)uint64_t v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    uint64_t v6 = *((void *)v4 + 4);
    *((void *)v3 + 4) = v6;
    if (v6)
    {
      uint64_t v7 = (atomic_ullong *)*((void *)v3 + 3);
      char v8 = (atomic_ullong *)(v6 - 16);
      if (!v7) {
        uint64_t v7 = v8;
      }
      atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
      double v4 = *a1;
    }
    atomic_store(0, (unsigned int *)v3 + 10);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 10, 1u, memory_order_relaxed);
    uint64_t v10 = (atomic_uint *)v4;
    *a1 = v3;
    sub_2168FD94C(&v10);
  }
  return (uint64_t)*a1;
}

void *sub_2168FDB80(float **a1, void *a2)
{
  uint64_t v3 = *a1;
  *a1 += 3;
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, v3);
}

uint64_t sub_2168FDB98(void *a1)
{
  void v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_2168FDAE4((_OWORD **)a1);
}

uint64_t sub_2168FDC2C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (sub_2168FD6AC(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      double v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_2168FDD7C, (uint64_t)&stru_26C74DEF0);
  }
}

uint64_t sub_2168FDCC0(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  __int16 v6 = 0;
  int v5 = 0;
  sub_2168F845C((void *)a1);
  uint64_t v7 = &v5;
  sub_2168FDE18((unint64_t *)a1, a2, &v7);
  return a1;
}

void sub_2168FDD20(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

double sub_2168FDD38@<D0>(__n128 *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  *((void *)a2 + 1) = 0;
  *(void *)&double result = sub_2168FE194(a2, a1).n128_u64[0];
  return result;
}

void sub_2168FDD68(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

double sub_2168FDD7C@<D0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x28uLL);
  double result = 0.0;
  *uint64_t v2 = 0u;
  v2[1] = 0u;
  *((void *)v2 + 4) = 0;
  *a1 = v2;
  a1[1] = sub_2168FDDCC;
  a1[2] = &stru_26C74DEF0;
  return result;
}

void sub_2168FDDCC(void *a1)
{
  if (a1)
  {
    sub_2168F83DC((uint64_t)a1);
    operator delete(a1);
  }
}

void sub_2168FDE18(unint64_t *a1, unint64_t a2, int **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    uint64_t v7 = (void *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              uint64_t v10 = sub_2168FE044((uint64_t)a1, a2);
              uint64_t v7 = v10;
              if (v3)
              {
                uint64_t v11 = 0;
                do
                {
                  uint64_t v12 = (char *)v10 + v11;
                  int v13 = *(_DWORD *)(v9 + v11);
                  *((_WORD *)v12 + 2) = *(_WORD *)(v9 + v11 + 4);
                  *(_DWORD *)uint64_t v12 = v13;
                  v11 += 6;
                }
                while (6 * v3 != v11);
              }
            }
            float v14 = *a3;
            uint64_t v15 = 6 * v3;
            do
            {
              unint64_t v16 = (char *)v7 + v15;
              int v17 = *v14;
              *((_WORD *)v16 + 2) = *((_WORD *)v14 + 2);
              *(_DWORD *)unint64_t v16 = v17;
              v15 += 6;
            }
            while (6 * a2 != v15);
          }
          unint64_t v18 = v7;
          goto LABEL_31;
        }
        uint64_t v7 = (void *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v24 = a2;
      }
      else {
        unint64_t v24 = *a1;
      }
      uint64_t v25 = sub_2168FE044((uint64_t)a1, a2);
      unint64_t v18 = v25;
      if (v24)
      {
        uint64_t v26 = 6 * v24;
        char v27 = v25;
        do
        {
          int v28 = *(_DWORD *)v7;
          *((_WORD *)v27 + 2) = *((_WORD *)v7 + 2);
          *(_DWORD *)char v27 = v28;
          char v27 = (void *)((char *)v27 + 6);
          uint64_t v7 = (void *)((char *)v7 + 6);
          v26 -= 6;
        }
        while (v26);
      }
      if (v3 < a2)
      {
        uint64_t v29 = *a3;
        uint64_t v30 = 6 * v3;
        do
        {
          uint64_t v31 = (char *)v25 + v30;
          int v32 = *v29;
          *((_WORD *)v31 + 2) = *((_WORD *)v29 + 2);
          *(_DWORD *)uint64_t v31 = v32;
          v30 += 6;
        }
        while (6 * a2 != v30);
      }
      goto LABEL_31;
    }
    if (a2 < 0x2AAAAAAAAAAAAAABLL)
    {
      unint64_t v19 = sub_2168FE044((uint64_t)a1, a2);
      unint64_t v18 = v19;
      uint64_t v20 = 0;
      uint64_t v21 = *a3;
      do
      {
        uint64_t v22 = (char *)v19 + v20;
        int v23 = *v21;
        *((_WORD *)v22 + 2) = *((_WORD *)v21 + 2);
        *(_DWORD *)uint64_t v22 = v23;
        v20 += 6;
      }
      while (6 * a2 != v20);
LABEL_31:
      if (v18 != (void *)a1[4])
      {
        sub_2168F83DC((uint64_t)a1);
        a1[4] = (unint64_t)v18;
      }
      *a1 = a2;
      return;
    }
  }

  sub_2168F845C(a1);
}

void *sub_2168FE044(uint64_t a1, unint64_t a2)
{
  sub_216851EE4((uint64_t)&v7, "VtArray::_AllocateNew", "value_type *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_AllocateNew(size_t) [T = pxrInternal__aapl__pxrReserved__::GfVec3h]");
  if (a2 > 0x2AAAAAAAAAAAAAA7) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 6 * a2 + 16;
  }
  double v4 = operator new(v3);
  *double v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_2168FE0D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2168FE0EC(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    if (*((void *)this + 3) || (unint64_t v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec3h]", a3);
      __int16 v6 = (int *)*((void *)this + 4);
      uint64_t v7 = *(void *)this;
      int v8 = sub_2168FE044((uint64_t)this, *(void *)this);
      unint64_t v9 = v8;
      if (v7)
      {
        uint64_t v10 = 6 * v7;
        uint64_t v11 = v8;
        do
        {
          int v12 = *v6;
          *((_WORD *)v11 + 2) = *((_WORD *)v6 + 2);
          *(_DWORD *)uint64_t v11 = v12;
          uint64_t v11 = (void *)((char *)v11 + 6);
          __int16 v6 = (int *)((char *)v6 + 6);
          v10 -= 6;
        }
        while (v10);
      }
      sub_2168F83DC((uint64_t)this);
      *((void *)this + 4) = v9;
    }
  }
}

__n128 sub_2168FE194(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  if ((sub_2168FD1A4(a1) & 1) == 0)
  {
    uint64_t v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_2168FE24C(a1, (uint64_t)v10);
    sub_2168F83DC((uint64_t)v10);
  }
  double v4 = (__n128 *)sub_2168FE6EC(a1);
  unint64_t v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  unint64_t v6 = v4[1].n128_u64[0];
  __n128 result = *v4;
  unint64_t v8 = a2[1].n128_u64[0];
  *double v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  unint64_t v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_2168FE234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_2168FE24C(void *a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v5, (uint64_t)a1);
  a1[1] = off_26C74F1C8;
  sub_2168F8DBC(a1, a2);
  if (v6) {
    (*(void (**)(unsigned char *))(v6 + 32))(v5);
  }
  return a1;
}

void sub_2168FE2E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2168FE31C(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

atomic_uint **sub_2168FE33C(atomic_uint **a1, atomic_uint **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2168FE4B4(a1);
}

uint64_t sub_2168FE34C()
{
  return 1;
}

unint64_t sub_2168FE354(uint64_t **a1)
{
  return sub_2168FE50C((uint64_t)&v2, *a1);
}

BOOL sub_2168FE37C(uint64_t **a1, uint64_t *a2)
{
  return sub_2168FE584(*a1, *a2);
}

BOOL sub_2168FE388(uint64_t **a1, uint64_t a2)
{
  return sub_2168FE584(*a1, a2);
}

uint64_t sub_2168FE394()
{
  return 0;
}

void *sub_2168FE3A0(uint64_t **a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, void *))sub_2168FE6D4);
  return a2;
}

void *sub_2168FE3F4()
{
  return &unk_26C74DEA8;
}

uint64_t sub_2168FE400()
{
  return 1;
}

void *sub_2168FE408()
{
  return &unk_26C74C750;
}

uint64_t sub_2168FE414(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_2168FE41C(uint64_t a1)
{
  return **(void **)a1;
}

BOOL sub_2168FE428(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x8000000217456EA3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2168FE464(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74DEA8, a2, a3);
}

void *sub_2168FE488()
{
  return &unk_26C74DEA8;
}

uint64_t sub_2168FE494(uint64_t a1)
{
  return *(void *)a1;
}

void *sub_2168FE49C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  a2[1] = off_26C74F1C8;
  return sub_2168F8DBC(a2, v2);
}

atomic_uint **sub_2168FE4B4(atomic_uint **a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit(v2 + 10, 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_2168F83DC((uint64_t)v2);
    operator delete(v2);
  }
  return a1;
}

unint64_t sub_2168FE50C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  char v8 = 1;
  uint64_t v7 = v2;
  if (v2)
  {
    uint64_t v3 = (unsigned __int16 *)a2[4];
    do
    {
      --v2;
      double v4 = v3 + 3;
      sub_2168F7A70((uint64_t)&v7, v3);
      uint64_t v3 = v4;
    }
    while (v2);
    unint64_t v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    unint64_t v5 = 0;
  }
  return bswap64(v5);
}

BOOL sub_2168FE584(uint64_t *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32) && sub_2168F8C2C((uint64_t)a1, a2) && a1[3] == *(void *)(a2 + 24)) {
    return 1;
  }
  BOOL result = sub_2168F8C2C((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  uint64_t v5 = *a1;
  if (!*a1) {
    return 1;
  }
  uint64_t v6 = (unsigned __int16 *)a1[4];
  uint64_t v7 = *(unsigned __int16 **)(a2 + 32);
  uint64_t v8 = 6 * v5 - 6;
  do
  {
    BOOL result = sub_2168F450C(v6, v7);
    if (!result) {
      break;
    }
    v6 += 3;
    v7 += 3;
    uint64_t v9 = v8;
    v8 -= 6;
  }
  while (v9);
  return result;
}

uint64_t sub_2168FE638(_OWORD **a1)
{
  unsigned int v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    uint64_t v3 = operator new(0x30uLL);
    double v4 = *a1;
    long long v5 = (*a1)[1];
    *(_OWORD *)uint64_t v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    uint64_t v6 = *((void *)v4 + 4);
    *((void *)v3 + 4) = v6;
    if (v6)
    {
      uint64_t v7 = (atomic_ullong *)*((void *)v3 + 3);
      uint64_t v8 = (atomic_ullong *)(v6 - 16);
      if (!v7) {
        uint64_t v7 = v8;
      }
      atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
      double v4 = *a1;
    }
    atomic_store(0, (unsigned int *)v3 + 10);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 10, 1u, memory_order_relaxed);
    uint64_t v10 = (atomic_uint *)v4;
    *a1 = v3;
    sub_2168FE4B4(&v10);
  }
  return (uint64_t)*a1;
}

void *sub_2168FE6D4(void *a1, void *a2)
{
  *a1 += 6;
  return pxrInternal__aapl__pxrReserved__::operator<<(a2);
}

uint64_t sub_2168FE6EC(void *a1)
{
  void v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_2168FE638((_OWORD **)a1);
}

void sub_2168FE780(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  uint64_t v3 = (unint64_t *)sub_2168FD054(a1);
  sub_2168FE9F8((uint64_t)v12, *v3);
  double v4 = (unsigned __int16 *)v3[4];
  unint64_t v5 = *v3;
  sub_2168FED88((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v12, v6, v7);
  if (v5)
  {
    uint64_t v8 = &v4[3 * v5];
    uint64_t v9 = v13;
    do
    {
      double v10 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v4[1]];
      double v11 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v4[2]];
      *uint64_t v9 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*v4];
      v9[1] = v10;
      void v9[2] = v11;
      v4 += 3;
      v9 += 3;
    }
    while (v4 != v8);
  }
  sub_2168FEA70(v12, a2);
  sub_2168F83DC((uint64_t)v12);
}

void sub_2168FE840(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2168FE858(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  uint64_t v3 = (unint64_t *)sub_2168FF468(a1);
  sub_2168FDCC0((uint64_t)v16, *v3);
  double v4 = (double *)v3[4];
  unint64_t v5 = *v3;
  sub_2168FE0EC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v16, v6, v7);
  if (v5)
  {
    uint64_t v8 = &v4[3 * v5];
    uint64_t v9 = v17;
    do
    {
      float v10 = *v4;
      if (v10 == 0.0)
      {
        unsigned int v11 = HIWORD(LODWORD(v10));
      }
      else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v10) >> 23])
      {
        unsigned int v11 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v10) >> 23]
            + (((LODWORD(v10) & 0x7FFFFF) + ((LODWORD(v10) >> 13) & 1) + 4095) >> 13);
      }
      else
      {
        LOWORD(v11) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v10));
      }
      float v12 = v4[1];
      if (v12 == 0.0)
      {
        unsigned int v13 = HIWORD(LODWORD(v12));
      }
      else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v12) >> 23])
      {
        unsigned int v13 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v12) >> 23]
            + (((LODWORD(v12) & 0x7FFFFF) + ((LODWORD(v12) >> 13) & 1) + 4095) >> 13);
      }
      else
      {
        LOWORD(v13) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v12));
      }
      float v14 = v4[2];
      if (v14 == 0.0)
      {
        unsigned int v15 = HIWORD(LODWORD(v14));
      }
      else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v14) >> 23])
      {
        unsigned int v15 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v14) >> 23]
            + (((LODWORD(v14) & 0x7FFFFF) + ((LODWORD(v14) >> 13) & 1) + 4095) >> 13);
      }
      else
      {
        LOWORD(v15) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v14));
      }
      *(_DWORD *)uint64_t v9 = (unsigned __int16)v11 | ((unsigned __int16)v13 << 16);
      *(_WORD *)(v9 + 4) = v15;
      v9 += 6;
      v4 += 3;
    }
    while (v4 != v8);
  }
  sub_2168FDD38(v16, a2);
  sub_2168F83DC((uint64_t)v16);
}

void sub_2168FE9DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2168FE9F8(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  memset(v5, 0, sizeof(v5));
  sub_2168F845C((void *)a1);
  uint64_t v6 = (long long *)v5;
  sub_2168FEAB4((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_2168FEA58(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

double sub_2168FEA70@<D0>(__n128 *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  *((void *)a2 + 1) = 0;
  *(void *)&double result = sub_2168FEE30(a2, a1).n128_u64[0];
  return result;
}

void sub_2168FEAA0(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

void sub_2168FEAB4(unint64_t *a1, unint64_t a2, long long **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    uint64_t v7 = (void *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              float v10 = sub_2168FECE0((uint64_t)a1, a2);
              uint64_t v7 = v10;
              if (v3)
              {
                uint64_t v11 = 0;
                do
                {
                  float v12 = &v10[v11];
                  long long v13 = *(_OWORD *)(v9 + v11 * 8);
                  __n128 v12[2] = *(void *)(v9 + v11 * 8 + 16);
                  *(_OWORD *)float v12 = v13;
                  v11 += 3;
                }
                while (3 * v3 != v11);
              }
            }
            float v14 = *a3;
            uint64_t v15 = 3 * v3;
            do
            {
              unint64_t v16 = &v7[v15];
              long long v17 = *v14;
              __n128 v16[2] = *((void *)v14 + 2);
              *(_OWORD *)unint64_t v16 = v17;
              v15 += 3;
            }
            while (3 * a2 != v15);
          }
          unint64_t v18 = v7;
          goto LABEL_31;
        }
        uint64_t v7 = (void *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v24 = a2;
      }
      else {
        unint64_t v24 = *a1;
      }
      uint64_t v25 = sub_2168FECE0((uint64_t)a1, a2);
      unint64_t v18 = v25;
      if (v24)
      {
        uint64_t v26 = 24 * v24;
        char v27 = v25;
        do
        {
          long long v28 = *(_OWORD *)v7;
          v27[2] = v7[2];
          *(_OWORD *)char v27 = v28;
          v27 += 3;
          v7 += 3;
          v26 -= 24;
        }
        while (v26);
      }
      if (v3 < a2)
      {
        uint64_t v29 = *a3;
        uint64_t v30 = 3 * v3;
        do
        {
          uint64_t v31 = &v25[v30];
          long long v32 = *v29;
          int v31[2] = *((void *)v29 + 2);
          *(_OWORD *)uint64_t v31 = v32;
          v30 += 3;
        }
        while (3 * a2 != v30);
      }
      goto LABEL_31;
    }
    if (a2 < 0xAAAAAAAAAAAAAABLL)
    {
      unint64_t v19 = sub_2168FECE0((uint64_t)a1, a2);
      unint64_t v18 = v19;
      uint64_t v20 = 0;
      uint64_t v21 = *a3;
      do
      {
        uint64_t v22 = &v19[v20];
        long long v23 = *v21;
        _OWORD v22[2] = *((void *)v21 + 2);
        *(_OWORD *)uint64_t v22 = v23;
        v20 += 3;
      }
      while (3 * a2 != v20);
LABEL_31:
      if (v18 != (void *)a1[4])
      {
        sub_2168F83DC((uint64_t)a1);
        a1[4] = (unint64_t)v18;
      }
      *a1 = a2;
      return;
    }
  }

  sub_2168F845C(a1);
}

void *sub_2168FECE0(uint64_t a1, unint64_t a2)
{
  sub_216851EE4((uint64_t)&v7, "VtArray::_AllocateNew", "value_type *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>::_AllocateNew(size_t) [T = pxrInternal__aapl__pxrReserved__::GfVec3d]");
  if (a2 > 0xAAAAAAAAAAAAAA9) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 24 * a2 + 16;
  }
  double v4 = operator new(v3);
  *double v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_2168FED70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2168FED88(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    if (*((void *)this + 3) || (unint64_t v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec3d]", a3);
      uint64_t v6 = (long long *)*((void *)this + 4);
      uint64_t v7 = *(void *)this;
      int v8 = sub_2168FECE0((uint64_t)this, *(void *)this);
      unint64_t v9 = v8;
      if (v7)
      {
        uint64_t v10 = 24 * v7;
        uint64_t v11 = v8;
        do
        {
          long long v12 = *v6;
          __n128 v11[2] = *((void *)v6 + 2);
          *(_OWORD *)uint64_t v11 = v12;
          v11 += 3;
          uint64_t v6 = (long long *)((char *)v6 + 24);
          v10 -= 24;
        }
        while (v10);
      }
      sub_2168F83DC((uint64_t)this);
      *((void *)this + 4) = v9;
    }
  }
}

__n128 sub_2168FEE30(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  if ((sub_2168FEEE8(a1) & 1) == 0)
  {
    uint64_t v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_2168FEF20(a1, (uint64_t)v10);
    sub_2168F83DC((uint64_t)v10);
  }
  double v4 = (__n128 *)sub_2168FF3D4(a1);
  unint64_t v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  unint64_t v6 = v4[1].n128_u64[0];
  __n128 result = *v4;
  unint64_t v8 = a2[1].n128_u64[0];
  *double v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  unint64_t v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_2168FEED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2168FEEE8(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 24) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C74DF38);
  }
  else {
    return 0;
  }
}

void *sub_2168FEF20(void *a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v5, (uint64_t)a1);
  a1[1] = off_26C74F280;
  sub_2168F8DBC(a1, a2);
  if (v6) {
    (*(void (**)(unsigned char *))(v6 + 32))(v5);
  }
  return a1;
}

void sub_2168FEFB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2168FEFF0(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

atomic_uint **sub_2168FF010(atomic_uint **a1, atomic_uint **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2168FF188(a1);
}

uint64_t sub_2168FF020()
{
  return 1;
}

unint64_t sub_2168FF028(uint64_t **a1)
{
  return sub_2168FF1E0((uint64_t)&v2, *a1);
}

BOOL sub_2168FF050(void **a1, uint64_t *a2)
{
  return sub_2168FF258(*a1, *a2);
}

BOOL sub_2168FF05C(void **a1, uint64_t a2)
{
  return sub_2168FF258(*a1, a2);
}

uint64_t sub_2168FF068()
{
  return 0;
}

void *sub_2168FF074(uint64_t **a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, void *))sub_2168FF3BC);
  return a2;
}

void *sub_2168FF0C8()
{
  return &unk_26C74DF38;
}

uint64_t sub_2168FF0D4()
{
  return 1;
}

void *sub_2168FF0DC()
{
  return &unk_26C74C730;
}

uint64_t sub_2168FF0E8(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_2168FF0F0(uint64_t a1)
{
  return **(void **)a1;
}

BOOL sub_2168FF0FC(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x8000000217456F54 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2168FF138(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74DF38, a2, a3);
}

void *sub_2168FF15C()
{
  return &unk_26C74DF38;
}

uint64_t sub_2168FF168(uint64_t a1)
{
  return *(void *)a1;
}

void *sub_2168FF170@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  a2[1] = off_26C74F280;
  return sub_2168F8DBC(a2, v2);
}

atomic_uint **sub_2168FF188(atomic_uint **a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit(v2 + 10, 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_2168F83DC((uint64_t)v2);
    operator delete(v2);
  }
  return a1;
}

unint64_t sub_2168FF1E0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  char v8 = 1;
  uint64_t v7 = v2;
  if (v2)
  {
    uint64_t v3 = (double *)a2[4];
    do
    {
      --v2;
      double v4 = v3 + 3;
      sub_2168F7E34((uint64_t)&v7, v3);
      uint64_t v3 = v4;
    }
    while (v2);
    unint64_t v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    unint64_t v5 = 0;
  }
  return bswap64(v5);
}

BOOL sub_2168FF258(void *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32) && sub_2168F8C2C((uint64_t)a1, a2) && a1[3] == *(void *)(a2 + 24)) {
    return 1;
  }
  BOOL result = sub_2168F8C2C((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  if (!*a1) {
    return 1;
  }
  unint64_t v5 = (double *)a1[4];
  uint64_t v6 = &v5[3 * *a1];
  for (uint64_t i = *(double **)(a2 + 32); *v5 == *i && v5[1] == i[1] && v5[2] == i[2]; i += 3)
  {
    v5 += 3;
    if (v5 == v6) {
      return 1;
    }
  }
  return 0;
}

uint64_t sub_2168FF320(_OWORD **a1)
{
  unsigned int v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    uint64_t v3 = operator new(0x30uLL);
    double v4 = *a1;
    long long v5 = (*a1)[1];
    *(_OWORD *)uint64_t v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    uint64_t v6 = *((void *)v4 + 4);
    *((void *)v3 + 4) = v6;
    if (v6)
    {
      uint64_t v7 = (atomic_ullong *)*((void *)v3 + 3);
      char v8 = (atomic_ullong *)(v6 - 16);
      if (!v7) {
        uint64_t v7 = v8;
      }
      atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
      double v4 = *a1;
    }
    atomic_store(0, (unsigned int *)v3 + 10);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 10, 1u, memory_order_relaxed);
    uint64_t v10 = (atomic_uint *)v4;
    *a1 = v3;
    sub_2168FF188(&v10);
  }
  return (uint64_t)*a1;
}

void *sub_2168FF3BC(double **a1, void *a2)
{
  uint64_t v3 = *a1;
  *a1 += 3;
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, v3);
}

uint64_t sub_2168FF3D4(void *a1)
{
  void v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_2168FF320((_OWORD **)a1);
}

uint64_t sub_2168FF468(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (sub_2168FEEE8(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      double v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_2168FF4FC, (uint64_t)&stru_26C74DF38);
  }
}

double sub_2168FF4FC@<D0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x28uLL);
  double result = 0.0;
  *uint64_t v2 = 0u;
  v2[1] = 0u;
  *((void *)v2 + 4) = 0;
  *a1 = v2;
  a1[1] = sub_2168FF54C;
  a1[2] = &stru_26C74DF38;
  return result;
}

void sub_2168FF54C(void *a1)
{
  if (a1)
  {
    sub_2168F83DC((uint64_t)a1);
    operator delete(a1);
  }
}

void sub_2168FF598(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  uint64_t v3 = (unint64_t *)sub_2168FDC2C(a1);
  sub_2168FE9F8((uint64_t)v12, *v3);
  unint64_t v4 = v3[4];
  unint64_t v5 = *v3;
  sub_2168FED88((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v12, v6, v7);
  if (v5)
  {
    char v8 = v13;
    unint64_t v9 = (float *)(v4 + 8);
    uint64_t v10 = 12 * v5;
    do
    {
      float64_t v11 = *v9;
      *char v8 = vcvtq_f64_f32(*(float32x2_t *)(v9 - 2));
      v8[1].f64[0] = v11;
      v9 += 3;
      char v8 = (float64x2_t *)((char *)v8 + 24);
      v10 -= 12;
    }
    while (v10);
  }
  sub_2168FEA70(v12, a2);
  sub_2168F83DC((uint64_t)v12);
}

void sub_2168FF640(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2168FF658(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  uint64_t v3 = (unint64_t *)sub_2168FF468(a1);
  sub_2168FD0E8((uint64_t)v12, *v3);
  unint64_t v4 = v3[4];
  unint64_t v5 = *v3;
  sub_2168FD54C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v12, v6, v7);
  if (v5)
  {
    char v8 = v13;
    unint64_t v9 = (double *)(v4 + 16);
    uint64_t v10 = 24 * v5;
    do
    {
      float32_t v11 = *v9;
      *char v8 = vcvt_f32_f64(*(float64x2_t *)(v9 - 2));
      v8[1].f32[0] = v11;
      v9 += 3;
      char v8 = (float32x2_t *)((char *)v8 + 12);
      v10 -= 24;
    }
    while (v10);
  }
  sub_2168FD160(v12, a2);
  sub_2168F83DC((uint64_t)v12);
}

void sub_2168FF700(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2168FF718(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  uint64_t v3 = (unint64_t *)sub_2168FF89C(a1);
  sub_2168FF930((uint64_t)v13, *v3);
  unint64_t v4 = (unsigned __int16 *)v3[4];
  unint64_t v5 = *v3;
  sub_2168FFD20((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v13, v6, v7);
  if (v5)
  {
    char v8 = &v4[4 * v5];
    unint64_t v9 = v14;
    do
    {
      float v10 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v4[1]];
      float v11 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v4[2]];
      float v12 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v4[3]];
      *unint64_t v9 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*v4];
      v9[1] = v10;
      void v9[2] = v11;
      uint64_t v9[3] = v12;
      v4 += 4;
      v9 += 4;
    }
    while (v4 != v8);
  }
  sub_2168FF9A4(v13, a2);
  sub_2168F83DC((uint64_t)v13);
}

void sub_2168FF7D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2168FF7E8(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  uint64_t v3 = (unint64_t *)sub_216900484(a1);
  sub_216900518((uint64_t)v10, *v3);
  unint64_t v4 = (float *)v3[4];
  unint64_t v5 = *v3;
  sub_2169008D4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v10, v6, v7);
  if (v5)
  {
    char v8 = v11;
    uint64_t v9 = 16 * v5;
    do
    {
      sub_2168F60D8(&v12, v4);
      *v8++ = v12;
      v4 += 4;
      v9 -= 16;
    }
    while (v9);
  }
  sub_21690058C(v10, a2);
  sub_2168F83DC((uint64_t)v10);
}

void sub_2168FF880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2168FF89C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (sub_2168FF9E8(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      unint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_2168FFA20, (uint64_t)&stru_26C74DE90);
  }
}

uint64_t sub_2168FF930(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v5[0] = 0;
  v5[1] = 0;
  sub_2168F845C((void *)a1);
  uint64_t v6 = v5;
  sub_2168FFABC((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_2168FF98C(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

double sub_2168FF9A4@<D0>(__n128 *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  *((void *)a2 + 1) = 0;
  *(void *)&double result = sub_2168FFDB8(a2, a1).n128_u64[0];
  return result;
}

void sub_2168FF9D4(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2168FF9E8(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 17) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C74DE90);
  }
  else {
    return 0;
  }
}

double sub_2168FFA20@<D0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x28uLL);
  double result = 0.0;
  *uint64_t v2 = 0u;
  v2[1] = 0u;
  *((void *)v2 + 4) = 0;
  *a1 = v2;
  a1[1] = sub_2168FFA70;
  a1[2] = &stru_26C74DE90;
  return result;
}

void sub_2168FFA70(void *a1)
{
  if (a1)
  {
    sub_2168F83DC((uint64_t)a1);
    operator delete(a1);
  }
}

void sub_2168FFABC(unint64_t *a1, unint64_t a2, _OWORD **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    uint64_t v7 = (unint64_t *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              float v10 = sub_2168FFC84((uint64_t)a1, a2);
              uint64_t v7 = v10;
              if (v3)
              {
                uint64_t v11 = 0;
                do
                {
                  *(_OWORD *)&v10[v11] = *(_OWORD *)(v9 + v11 * 8);
                  v11 += 2;
                }
                while (2 * v3 != v11);
              }
            }
            uint64_t v12 = *a3;
            uint64_t v13 = 2 * v3;
            do
            {
              *(_OWORD *)&v7[v13] = *v12;
              v13 += 2;
            }
            while (2 * a2 != v13);
          }
          float v14 = v7;
          goto LABEL_31;
        }
        uint64_t v7 = (unint64_t *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v19 = a2;
      }
      else {
        unint64_t v19 = *a1;
      }
      uint64_t v20 = sub_2168FFC84((uint64_t)a1, a2);
      float v14 = v20;
      if (v19)
      {
        uint64_t v21 = 16 * v19;
        uint64_t v22 = v20;
        do
        {
          long long v23 = *(_OWORD *)v7;
          v7 += 2;
          *(_OWORD *)uint64_t v22 = v23;
          v22 += 2;
          v21 -= 16;
        }
        while (v21);
      }
      if (v3 < a2)
      {
        unint64_t v24 = *a3;
        uint64_t v25 = 2 * v3;
        do
        {
          *(_OWORD *)&v20[v25] = *v24;
          v25 += 2;
        }
        while (2 * a2 != v25);
      }
      goto LABEL_31;
    }
    uint64_t v15 = 16 * a2;
    if (16 * a2 / a2 == 16)
    {
      unint64_t v16 = sub_2168FFC84((uint64_t)a1, a2);
      float v14 = v16;
      unint64_t v17 = 0;
      unint64_t v18 = *a3;
      do
      {
        *(_OWORD *)&v16[v17 / 8] = *v18;
        v17 += 16;
      }
      while (v15 != v17);
LABEL_31:
      if (v14 != (unint64_t *)a1[4])
      {
        sub_2168F83DC((uint64_t)a1);
        a1[4] = (unint64_t)v14;
      }
      *a1 = a2;
      return;
    }
  }

  sub_2168F845C(a1);
}

void *sub_2168FFC84(uint64_t a1, unint64_t a2)
{
  sub_216851EE4((uint64_t)&v7, "VtArray::_AllocateNew", "value_type *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>::_AllocateNew(size_t) [T = pxrInternal__aapl__pxrReserved__::GfVec4f]");
  if (a2 > 0xFFFFFFFFFFFFFFELL) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 16 * a2 + 16;
  }
  unint64_t v4 = operator new(v3);
  *unint64_t v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_2168FFD08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2168FFD20(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    if (*((void *)this + 3) || (unint64_t v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec4f]", a3);
      uint64_t v6 = (long long *)*((void *)this + 4);
      uint64_t v7 = *(void *)this;
      int v8 = sub_2168FFC84((uint64_t)this, *(void *)this);
      unint64_t v9 = v8;
      if (v7)
      {
        uint64_t v10 = 16 * v7;
        uint64_t v11 = v8;
        do
        {
          long long v12 = *v6++;
          *v11++ = v12;
          v10 -= 16;
        }
        while (v10);
      }
      sub_2168F83DC((uint64_t)this);
      *((void *)this + 4) = v9;
    }
  }
}

__n128 sub_2168FFDB8(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  if ((sub_2168FFE70(a1) & 1) == 0)
  {
    uint64_t v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_2168FFEA8(a1, (uint64_t)v10);
    sub_2168F83DC((uint64_t)v10);
  }
  unint64_t v4 = (__n128 *)sub_2169003F0(a1);
  unint64_t v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  unint64_t v6 = v4[1].n128_u64[0];
  __n128 result = *v4;
  unint64_t v8 = a2[1].n128_u64[0];
  *unint64_t v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  unint64_t v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_2168FFE58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2168FFE70(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 20) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C74DED8);
  }
  else {
    return 0;
  }
}

void *sub_2168FFEA8(void *a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v5, (uint64_t)a1);
  a1[1] = off_26C74F338;
  sub_2168F8DBC(a1, a2);
  if (v6) {
    (*(void (**)(unsigned char *))(v6 + 32))(v5);
  }
  return a1;
}

void sub_2168FFF3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2168FFF78(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

atomic_uint **sub_2168FFF98(atomic_uint **a1, atomic_uint **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_216900110(a1);
}

uint64_t sub_2168FFFA8()
{
  return 1;
}

unint64_t sub_2168FFFB0(uint64_t **a1)
{
  return sub_216900168((uint64_t)&v2, *a1);
}

BOOL sub_2168FFFD8(void **a1, uint64_t *a2)
{
  return sub_216900268(*a1, *a2);
}

BOOL sub_2168FFFE4(void **a1, uint64_t a2)
{
  return sub_216900268(*a1, a2);
}

uint64_t sub_2168FFFF0()
{
  return 0;
}

void *sub_2168FFFFC(uint64_t **a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, void *))sub_2169003D8);
  return a2;
}

void *sub_216900050()
{
  return &unk_26C74DED8;
}

uint64_t sub_21690005C()
{
  return 1;
}

void *sub_216900064()
{
  return &unk_26C74C780;
}

uint64_t sub_216900070(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_216900078(uint64_t a1)
{
  return **(void **)a1;
}

BOOL sub_216900084(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x8000000217456EDELL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2169000C0(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74DED8, a2, a3);
}

void *sub_2169000E4()
{
  return &unk_26C74DED8;
}

uint64_t sub_2169000F0(uint64_t a1)
{
  return *(void *)a1;
}

void *sub_2169000F8@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  a2[1] = off_26C74F338;
  return sub_2168F8DBC(a2, v2);
}

atomic_uint **sub_216900110(atomic_uint **a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit(v2 + 10, 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_2168F83DC((uint64_t)v2);
    operator delete(v2);
  }
  return a1;
}

unint64_t sub_216900168(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  char v8 = 1;
  uint64_t v7 = v2;
  if (v2)
  {
    uint64_t v3 = (float *)a2[4];
    do
    {
      --v2;
      unint64_t v4 = v3 + 4;
      sub_2169001E0((uint64_t)&v7, v3);
      uint64_t v3 = v4;
    }
    while (v2);
    unint64_t v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    unint64_t v5 = 0;
  }
  return bswap64(v5);
}

uint64_t sub_2169001E0(uint64_t a1, float *a2)
{
  uint64_t v5 = 0;
  char v6 = 0;
  uint64_t result = sub_2168F58A0((uint64_t)&v5, a2, a2 + 1, a2 + 2, a2 + 3);
  unint64_t v4 = bswap64(0x9E3779B97F4A7C55 * v5);
  if (*(unsigned char *)(a1 + 8)) {
    v4 += (*(void *)a1 + v4 + (*(void *)a1 + v4) * (*(void *)a1 + v4)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v4;
  return result;
}

BOOL sub_216900268(void *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32) && sub_2168F8C2C((uint64_t)a1, a2) && a1[3] == *(void *)(a2 + 24)) {
    return 1;
  }
  BOOL result = sub_2168F8C2C((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  if (!*a1) {
    return 1;
  }
  uint64_t v5 = (float *)a1[4];
  char v6 = &v5[4 * *a1];
  for (uint64_t i = *(float **)(a2 + 32); *v5 == *i && v5[1] == i[1] && v5[2] == i[2] && v5[3] == i[3]; i += 4)
  {
    v5 += 4;
    if (v5 == v6) {
      return 1;
    }
  }
  return 0;
}

uint64_t sub_21690033C(_OWORD **a1)
{
  unsigned int v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    uint64_t v3 = operator new(0x30uLL);
    unint64_t v4 = *a1;
    long long v5 = (*a1)[1];
    *(_OWORD *)uint64_t v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    uint64_t v6 = *((void *)v4 + 4);
    *((void *)v3 + 4) = v6;
    if (v6)
    {
      uint64_t v7 = (atomic_ullong *)*((void *)v3 + 3);
      char v8 = (atomic_ullong *)(v6 - 16);
      if (!v7) {
        uint64_t v7 = v8;
      }
      atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
      unint64_t v4 = *a1;
    }
    atomic_store(0, (unsigned int *)v3 + 10);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 10, 1u, memory_order_relaxed);
    uint64_t v10 = (atomic_uint *)v4;
    *a1 = v3;
    sub_216900110(&v10);
  }
  return (uint64_t)*a1;
}

void *sub_2169003D8(float **a1, void *a2)
{
  uint64_t v3 = *a1;
  *a1 += 4;
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, v3);
}

uint64_t sub_2169003F0(void *a1)
{
  void v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_21690033C((_OWORD **)a1);
}

uint64_t sub_216900484(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (sub_2168FFE70(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      unint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_2169005D0, (uint64_t)&stru_26C74DED8);
  }
}

uint64_t sub_216900518(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v5 = 0;
  sub_2168F845C((void *)a1);
  uint64_t v6 = &v5;
  sub_21690066C((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_216900574(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

double sub_21690058C@<D0>(__n128 *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  *((void *)a2 + 1) = 0;
  *(void *)&double result = sub_21690096C(a2, a1).n128_u64[0];
  return result;
}

void sub_2169005BC(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

double sub_2169005D0@<D0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x28uLL);
  double result = 0.0;
  *uint64_t v2 = 0u;
  v2[1] = 0u;
  *((void *)v2 + 4) = 0;
  *a1 = v2;
  a1[1] = sub_216900620;
  a1[2] = &stru_26C74DED8;
  return result;
}

void sub_216900620(void *a1)
{
  if (a1)
  {
    sub_2168F83DC((uint64_t)a1);
    operator delete(a1);
  }
}

void sub_21690066C(unint64_t *a1, unint64_t a2, uint64_t **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    uint64_t v7 = (uint64_t *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load((unint64_t *)v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              uint64_t v10 = sub_216900834((uint64_t)a1, a2);
              uint64_t v7 = v10;
              if (v3)
              {
                for (uint64_t i = 0; i != v3; ++i)
                  v10[i] = *(void *)(v9 + i * 8);
              }
            }
            long long v12 = *a3;
            uint64_t v13 = v3;
            do
              v7[v13++] = *v12;
            while (a2 != v13);
          }
          float v14 = v7;
          goto LABEL_31;
        }
        uint64_t v7 = (uint64_t *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v19 = a2;
      }
      else {
        unint64_t v19 = *a1;
      }
      uint64_t v20 = sub_216900834((uint64_t)a1, a2);
      float v14 = v20;
      if (v19)
      {
        uint64_t v21 = 8 * v19;
        uint64_t v22 = v20;
        do
        {
          uint64_t v23 = *v7++;
          *v22++ = v23;
          v21 -= 8;
        }
        while (v21);
      }
      if (v3 < a2)
      {
        unint64_t v24 = *a3;
        uint64_t v25 = v3;
        do
          v20[v25++] = *v24;
        while (a2 != v25);
      }
      goto LABEL_31;
    }
    uint64_t v15 = 8 * a2;
    if (8 * a2 / a2 == 8)
    {
      unint64_t v16 = sub_216900834((uint64_t)a1, a2);
      float v14 = v16;
      unint64_t v17 = 0;
      unint64_t v18 = *a3;
      do
      {
        v16[v17 / 8] = *v18;
        v17 += 8;
      }
      while (v15 != v17);
LABEL_31:
      if (v14 != (uint64_t *)a1[4])
      {
        sub_2168F83DC((uint64_t)a1);
        a1[4] = (unint64_t)v14;
      }
      *a1 = a2;
      return;
    }
  }

  sub_2168F845C(a1);
}

void *sub_216900834(uint64_t a1, unint64_t a2)
{
  sub_216851EE4((uint64_t)&v7, "VtArray::_AllocateNew", "value_type *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>::_AllocateNew(size_t) [T = pxrInternal__aapl__pxrReserved__::GfVec4h]");
  if (a2 > 0x1FFFFFFFFFFFFFFDLL) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 8 * a2 + 16;
  }
  unint64_t v4 = operator new(v3);
  *unint64_t v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_2169008BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2169008D4(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    if (*((void *)this + 3) || (unint64_t v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec4h]", a3);
      uint64_t v6 = (uint64_t *)*((void *)this + 4);
      uint64_t v7 = *(void *)this;
      int v8 = sub_216900834((uint64_t)this, *(void *)this);
      unint64_t v9 = v8;
      if (v7)
      {
        uint64_t v10 = 8 * v7;
        uint64_t v11 = v8;
        do
        {
          uint64_t v12 = *v6++;
          *v11++ = v12;
          v10 -= 8;
        }
        while (v10);
      }
      sub_2168F83DC((uint64_t)this);
      *((void *)this + 4) = v9;
    }
  }
}

__n128 sub_21690096C(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  if ((sub_2168FF9E8(a1) & 1) == 0)
  {
    uint64_t v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_216900A24(a1, (uint64_t)v10);
    sub_2168F83DC((uint64_t)v10);
  }
  unint64_t v4 = (__n128 *)sub_216900F48(a1);
  unint64_t v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  unint64_t v6 = v4[1].n128_u64[0];
  __n128 result = *v4;
  unint64_t v8 = a2[1].n128_u64[0];
  *unint64_t v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  unint64_t v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_216900A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_216900A24(void *a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v5, (uint64_t)a1);
  a1[1] = off_26C74F3F0;
  sub_2168F8DBC(a1, a2);
  if (v6) {
    (*(void (**)(unsigned char *))(v6 + 32))(v5);
  }
  return a1;
}

void sub_216900AB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_216900AF4(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

atomic_uint **sub_216900B14(atomic_uint **a1, atomic_uint **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_216900C8C(a1);
}

uint64_t sub_216900B24()
{
  return 1;
}

unint64_t sub_216900B2C(uint64_t **a1)
{
  return sub_216900CE4((uint64_t)&v2, *a1);
}

BOOL sub_216900B54(uint64_t **a1, uint64_t *a2)
{
  return sub_216900DE4(*a1, *a2);
}

BOOL sub_216900B60(uint64_t **a1, uint64_t a2)
{
  return sub_216900DE4(*a1, a2);
}

uint64_t sub_216900B6C()
{
  return 0;
}

void *sub_216900B78(uint64_t **a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, void *))sub_216900F30);
  return a2;
}

void *sub_216900BCC()
{
  return &unk_26C74DE90;
}

uint64_t sub_216900BD8()
{
  return 1;
}

void *sub_216900BE0()
{
  return &unk_26C74C790;
}

uint64_t sub_216900BEC(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_216900BF4(uint64_t a1)
{
  return **(void **)a1;
}

BOOL sub_216900C00(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x80000002174E53CELL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_216900C3C(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74DE90, a2, a3);
}

void *sub_216900C60()
{
  return &unk_26C74DE90;
}

uint64_t sub_216900C6C(uint64_t a1)
{
  return *(void *)a1;
}

void *sub_216900C74@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  a2[1] = off_26C74F3F0;
  return sub_2168F8DBC(a2, v2);
}

atomic_uint **sub_216900C8C(atomic_uint **a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit(v2 + 10, 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_2168F83DC((uint64_t)v2);
    operator delete(v2);
  }
  return a1;
}

unint64_t sub_216900CE4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  char v8 = 1;
  uint64_t v7 = v2;
  if (v2)
  {
    uint64_t v3 = (unsigned __int16 *)a2[4];
    do
    {
      --v2;
      unint64_t v4 = v3 + 4;
      sub_216900D5C((uint64_t)&v7, v3);
      uint64_t v3 = v4;
    }
    while (v2);
    unint64_t v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    unint64_t v5 = 0;
  }
  return bswap64(v5);
}

uint64_t sub_216900D5C(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v5 = 0;
  char v6 = 0;
  uint64_t result = sub_2168F54F0((uint64_t)&v5, a2, a2 + 1, a2 + 2, a2 + 3);
  unint64_t v4 = bswap64(0x9E3779B97F4A7C55 * v5);
  if (*(unsigned char *)(a1 + 8)) {
    v4 += (*(void *)a1 + v4 + (*(void *)a1 + v4) * (*(void *)a1 + v4)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v4;
  return result;
}

BOOL sub_216900DE4(uint64_t *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32) && sub_2168F8C2C((uint64_t)a1, a2) && a1[3] == *(void *)(a2 + 24)) {
    return 1;
  }
  BOOL result = sub_2168F8C2C((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  uint64_t v5 = *a1;
  if (!*a1) {
    return 1;
  }
  char v6 = (unsigned __int16 *)a1[4];
  uint64_t v7 = *(unsigned __int16 **)(a2 + 32);
  uint64_t v8 = 8 * v5 - 8;
  do
  {
    BOOL result = sub_2168F552C(v6, v7);
    if (!result) {
      break;
    }
    v6 += 4;
    v7 += 4;
    uint64_t v9 = v8;
    v8 -= 8;
  }
  while (v9);
  return result;
}

uint64_t sub_216900E94(_OWORD **a1)
{
  unsigned int v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    uint64_t v3 = operator new(0x30uLL);
    unint64_t v4 = *a1;
    long long v5 = (*a1)[1];
    *(_OWORD *)uint64_t v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    uint64_t v6 = *((void *)v4 + 4);
    *((void *)v3 + 4) = v6;
    if (v6)
    {
      uint64_t v7 = (atomic_ullong *)*((void *)v3 + 3);
      uint64_t v8 = (atomic_ullong *)(v6 - 16);
      if (!v7) {
        uint64_t v7 = v8;
      }
      atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
      unint64_t v4 = *a1;
    }
    atomic_store(0, (unsigned int *)v3 + 10);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 10, 1u, memory_order_relaxed);
    uint64_t v10 = (atomic_uint *)v4;
    *a1 = v3;
    sub_216900C8C(&v10);
  }
  return (uint64_t)*a1;
}

void *sub_216900F30(void *a1, void *a2)
{
  *a1 += 8;
  return pxrInternal__aapl__pxrReserved__::operator<<(a2);
}

uint64_t sub_216900F48(void *a1)
{
  void v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_216900E94((_OWORD **)a1);
}

void sub_216900FDC(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  uint64_t v3 = (unint64_t *)sub_2168FF89C(a1);
  sub_216901170((uint64_t)v13, *v3);
  unint64_t v4 = (unsigned __int16 *)v3[4];
  unint64_t v5 = *v3;
  sub_2169014A0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v13, v6, v7);
  if (v5)
  {
    uint64_t v8 = &v4[4 * v5];
    uint64_t v9 = v14;
    do
    {
      double v10 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v4[1]];
      double v11 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v4[2]];
      double v12 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v4[3]];
      *uint64_t v9 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*v4];
      v9[1] = v10;
      void v9[2] = v11;
      uint64_t v9[3] = v12;
      v4 += 4;
      v9 += 4;
    }
    while (v4 != v8);
  }
  sub_2169011E4(v13, a2);
  sub_2168F83DC((uint64_t)v13);
}

void sub_2169010A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2169010BC(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  uint64_t v3 = (unint64_t *)sub_216901C04(a1);
  sub_216900518((uint64_t)v10, *v3);
  unint64_t v4 = (double *)v3[4];
  unint64_t v5 = *v3;
  sub_2169008D4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v10, v6, v7);
  if (v5)
  {
    uint64_t v8 = v11;
    uint64_t v9 = 32 * v5;
    do
    {
      sub_2168F5E68(&v12, v4);
      *v8++ = v12;
      v4 += 4;
      v9 -= 32;
    }
    while (v9);
  }
  sub_21690058C(v10, a2);
  sub_2168F83DC((uint64_t)v10);
}

void sub_216901154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216901170(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  memset(v5, 0, sizeof(v5));
  sub_2168F845C((void *)a1);
  uint64_t v6 = v5;
  sub_216901228((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_2169011CC(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

double sub_2169011E4@<D0>(__n128 *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  *((void *)a2 + 1) = 0;
  *(void *)&double result = sub_216901538(a2, a1).n128_u64[0];
  return result;
}

void sub_216901214(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

void sub_216901228(unint64_t *a1, unint64_t a2, _OWORD **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    uint64_t v7 = (unint64_t *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              double v10 = sub_216901404((uint64_t)a1, a2);
              uint64_t v7 = v10;
              if (v3)
              {
                uint64_t v11 = 0;
                do
                {
                  uint64_t v12 = &v10[v11];
                  long long v13 = *(_OWORD *)(v9 + v11 * 8 + 16);
                  *(_OWORD *)uint64_t v12 = *(_OWORD *)(v9 + v11 * 8);
                  *((_OWORD *)v12 + 1) = v13;
                  v11 += 4;
                }
                while (4 * v3 != v11);
              }
            }
            float v14 = *a3;
            uint64_t v15 = 4 * v3;
            do
            {
              unint64_t v16 = &v7[v15];
              long long v17 = v14[1];
              *(_OWORD *)unint64_t v16 = *v14;
              *((_OWORD *)v16 + 1) = v17;
              v15 += 4;
            }
            while (4 * a2 != v15);
          }
          unint64_t v18 = v7;
          goto LABEL_31;
        }
        uint64_t v7 = (unint64_t *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v25 = a2;
      }
      else {
        unint64_t v25 = *a1;
      }
      uint64_t v26 = sub_216901404((uint64_t)a1, a2);
      unint64_t v18 = v26;
      if (v25)
      {
        uint64_t v27 = 32 * v25;
        long long v28 = v26;
        do
        {
          long long v29 = *(_OWORD *)v7;
          long long v30 = *((_OWORD *)v7 + 1);
          v7 += 4;
          *(_OWORD *)long long v28 = v29;
          *((_OWORD *)v28 + 1) = v30;
          v28 += 4;
          v27 -= 32;
        }
        while (v27);
      }
      if (v3 < a2)
      {
        uint64_t v31 = *a3;
        uint64_t v32 = 4 * v3;
        do
        {
          BOOL v33 = &v26[v32];
          long long v34 = v31[1];
          *(_OWORD *)BOOL v33 = *v31;
          *((_OWORD *)v33 + 1) = v34;
          v32 += 4;
        }
        while (4 * a2 != v32);
      }
      goto LABEL_31;
    }
    uint64_t v19 = 32 * a2;
    if (32 * a2 / a2 == 32)
    {
      uint64_t v20 = sub_216901404((uint64_t)a1, a2);
      unint64_t v18 = v20;
      unint64_t v21 = 0;
      uint64_t v22 = *a3;
      do
      {
        uint64_t v23 = &v20[v21 / 8];
        long long v24 = v22[1];
        *(_OWORD *)uint64_t v23 = *v22;
        *((_OWORD *)v23 + 1) = v24;
        v21 += 32;
      }
      while (v19 != v21);
LABEL_31:
      if (v18 != (unint64_t *)a1[4])
      {
        sub_2168F83DC((uint64_t)a1);
        a1[4] = (unint64_t)v18;
      }
      *a1 = a2;
      return;
    }
  }

  sub_2168F845C(a1);
}

void *sub_216901404(uint64_t a1, unint64_t a2)
{
  sub_216851EE4((uint64_t)&v7, "VtArray::_AllocateNew", "value_type *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>::_AllocateNew(size_t) [T = pxrInternal__aapl__pxrReserved__::GfVec4d]");
  if (a2 >> 59) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = (32 * a2) | 0x10;
  }
  unint64_t v4 = operator new(v3);
  *unint64_t v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_216901488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2169014A0(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    if (*((void *)this + 3) || (unint64_t v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfVec4d]", a3);
      uint64_t v6 = (long long *)*((void *)this + 4);
      uint64_t v7 = *(void *)this;
      int v8 = sub_216901404((uint64_t)this, *(void *)this);
      unint64_t v9 = v8;
      if (v7)
      {
        uint64_t v10 = 32 * v7;
        uint64_t v11 = v8;
        do
        {
          long long v12 = *v6;
          long long v13 = v6[1];
          v6 += 2;
          *uint64_t v11 = v12;
          v11[1] = v13;
          v11 += 2;
          v10 -= 32;
        }
        while (v10);
      }
      sub_2168F83DC((uint64_t)this);
      *((void *)this + 4) = v9;
    }
  }
}

__n128 sub_216901538(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  if ((sub_2169015F0(a1) & 1) == 0)
  {
    uint64_t v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_216901628(a1, (uint64_t)v10);
    sub_2168F83DC((uint64_t)v10);
  }
  unint64_t v4 = (__n128 *)sub_216901B70(a1);
  unint64_t v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  unint64_t v6 = v4[1].n128_u64[0];
  __n128 result = *v4;
  unint64_t v8 = a2[1].n128_u64[0];
  *unint64_t v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  unint64_t v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_2169015D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2169015F0(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 23) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C74DF20);
  }
  else {
    return 0;
  }
}

void *sub_216901628(void *a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v5, (uint64_t)a1);
  a1[1] = off_26C74F4A8;
  sub_2168F8DBC(a1, a2);
  if (v6) {
    (*(void (**)(unsigned char *))(v6 + 32))(v5);
  }
  return a1;
}

void sub_2169016BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2169016F8(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

atomic_uint **sub_216901718(atomic_uint **a1, atomic_uint **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_216901890(a1);
}

uint64_t sub_216901728()
{
  return 1;
}

unint64_t sub_216901730(uint64_t **a1)
{
  return sub_2169018E8((uint64_t)&v2, *a1);
}

BOOL sub_216901758(void **a1, uint64_t *a2)
{
  return sub_2169019E8(*a1, *a2);
}

BOOL sub_216901764(void **a1, uint64_t a2)
{
  return sub_2169019E8(*a1, a2);
}

uint64_t sub_216901770()
{
  return 0;
}

void *sub_21690177C(uint64_t **a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, void *))sub_216901B58);
  return a2;
}

void *sub_2169017D0()
{
  return &unk_26C74DF20;
}

uint64_t sub_2169017DC()
{
  return 1;
}

void *sub_2169017E4()
{
  return &unk_26C74C770;
}

uint64_t sub_2169017F0(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_2169017F8(uint64_t a1)
{
  return **(void **)a1;
}

BOOL sub_216901804(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x80000002174E5356 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_216901840(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74DF20, a2, a3);
}

void *sub_216901864()
{
  return &unk_26C74DF20;
}

uint64_t sub_216901870(uint64_t a1)
{
  return *(void *)a1;
}

void *sub_216901878@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  a2[1] = off_26C74F4A8;
  return sub_2168F8DBC(a2, v2);
}

atomic_uint **sub_216901890(atomic_uint **a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit(v2 + 10, 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_2168F83DC((uint64_t)v2);
    operator delete(v2);
  }
  return a1;
}

unint64_t sub_2169018E8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  char v8 = 1;
  uint64_t v7 = v2;
  if (v2)
  {
    uint64_t v3 = (double *)a2[4];
    do
    {
      --v2;
      unint64_t v4 = v3 + 4;
      sub_216901960((uint64_t)&v7, v3);
      uint64_t v3 = v4;
    }
    while (v2);
    unint64_t v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    unint64_t v5 = 0;
  }
  return bswap64(v5);
}

uint64_t sub_216901960(uint64_t a1, double *a2)
{
  uint64_t v5 = 0;
  char v6 = 0;
  uint64_t result = sub_2168F5C84((uint64_t)&v5, a2, a2 + 1, a2 + 2, a2 + 3);
  unint64_t v4 = bswap64(0x9E3779B97F4A7C55 * v5);
  if (*(unsigned char *)(a1 + 8)) {
    v4 += (*(void *)a1 + v4 + (*(void *)a1 + v4) * (*(void *)a1 + v4)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v4;
  return result;
}

BOOL sub_2169019E8(void *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32) && sub_2168F8C2C((uint64_t)a1, a2) && a1[3] == *(void *)(a2 + 24)) {
    return 1;
  }
  BOOL result = sub_2168F8C2C((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  if (!*a1) {
    return 1;
  }
  uint64_t v5 = (double *)a1[4];
  char v6 = &v5[4 * *a1];
  for (uint64_t i = *(double **)(a2 + 32); *v5 == *i && v5[1] == i[1] && v5[2] == i[2] && v5[3] == i[3]; i += 4)
  {
    v5 += 4;
    if (v5 == v6) {
      return 1;
    }
  }
  return 0;
}

uint64_t sub_216901ABC(_OWORD **a1)
{
  unsigned int v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    uint64_t v3 = operator new(0x30uLL);
    unint64_t v4 = *a1;
    long long v5 = (*a1)[1];
    *(_OWORD *)uint64_t v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    uint64_t v6 = *((void *)v4 + 4);
    *((void *)v3 + 4) = v6;
    if (v6)
    {
      uint64_t v7 = (atomic_ullong *)*((void *)v3 + 3);
      char v8 = (atomic_ullong *)(v6 - 16);
      if (!v7) {
        uint64_t v7 = v8;
      }
      atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
      unint64_t v4 = *a1;
    }
    atomic_store(0, (unsigned int *)v3 + 10);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 10, 1u, memory_order_relaxed);
    uint64_t v10 = (atomic_uint *)v4;
    *a1 = v3;
    sub_216901890(&v10);
  }
  return (uint64_t)*a1;
}

void *sub_216901B58(double **a1, void *a2)
{
  uint64_t v3 = *a1;
  *a1 += 4;
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, v3);
}

uint64_t sub_216901B70(void *a1)
{
  void v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_216901ABC((_OWORD **)a1);
}

uint64_t sub_216901C04(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (sub_2169015F0(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      unint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_216901C98, (uint64_t)&stru_26C74DF20);
  }
}

double sub_216901C98@<D0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x28uLL);
  double result = 0.0;
  *uint64_t v2 = 0u;
  v2[1] = 0u;
  *((void *)v2 + 4) = 0;
  *a1 = v2;
  a1[1] = sub_216901CE8;
  a1[2] = &stru_26C74DF20;
  return result;
}

void sub_216901CE8(void *a1)
{
  if (a1)
  {
    sub_2168F83DC((uint64_t)a1);
    operator delete(a1);
  }
}

void sub_216901D34(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  uint64_t v3 = (unint64_t *)sub_216900484(a1);
  sub_216901170((uint64_t)v12, *v3);
  unint64_t v4 = (float32x2_t *)v3[4];
  unint64_t v5 = *v3;
  sub_2169014A0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v12, v6, v7);
  if (v5)
  {
    char v8 = &v4[2 * v5];
    unint64_t v9 = v13;
    do
    {
      float32x2_t v10 = *v4;
      float32x2_t v11 = v4[1];
      v4 += 2;
      *unint64_t v9 = vcvtq_f64_f32(v10);
      v9[1] = vcvtq_f64_f32(v11);
      v9 += 2;
    }
    while (v4 != v8);
  }
  sub_2169011E4(v12, a2);
  sub_2168F83DC((uint64_t)v12);
}

void sub_216901DC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216901DDC(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  uint64_t v3 = (unint64_t *)sub_216901C04(a1);
  sub_2168FF930((uint64_t)v12, *v3);
  unint64_t v4 = (float64x2_t *)v3[4];
  unint64_t v5 = *v3;
  sub_2168FFD20((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v12, v6, v7);
  if (v5)
  {
    char v8 = v13;
    uint64_t v9 = 32 * v5;
    do
    {
      float64x2_t v11 = *v4;
      float64x2_t v10 = v4[1];
      v4 += 2;
      *v8++ = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v11), v10);
      v9 -= 32;
    }
    while (v9);
  }
  sub_2168FF9A4(v12, a2);
  sub_2168F83DC((uint64_t)v12);
}

void sub_216901E6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216901E84(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  uint64_t v3 = (unint64_t *)sub_21690201C(a1);
  sub_2169020B0((uint64_t)v16, *v3);
  unint64_t v4 = (const pxrInternal__aapl__pxrReserved__::GfMatrix4f *)v3[4];
  unint64_t v5 = *v3;
  sub_216902540((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v16, v6, v7);
  if (v5)
  {
    char v8 = v17;
    unint64_t v9 = v5 << 6;
    do
    {
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::GfMatrix4d((pxrInternal__aapl__pxrReserved__::GfMatrix4d *)v18, v4);
      long long v10 = v18[0];
      long long v11 = v18[1];
      long long v12 = v18[3];
      float64x2_t v8[2] = v18[2];
      void v8[3] = v12;
      *char v8 = v10;
      v8[1] = v11;
      long long v13 = v18[4];
      long long v14 = v18[5];
      long long v15 = v18[7];
      v8[6] = v18[6];
      v8[7] = v15;
      _OWORD v8[4] = v13;
      v8[5] = v14;
      unint64_t v4 = (const pxrInternal__aapl__pxrReserved__::GfMatrix4f *)((char *)v4 + 64);
      v8 += 8;
      v9 -= 64;
    }
    while (v9);
  }
  sub_216902130(v16, a2);
  sub_2168F83DC((uint64_t)v16);
}

void sub_216901F44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216901F60(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  uint64_t v3 = (unint64_t *)sub_216902CE4(a1);
  sub_216902D78((uint64_t)v13, *v3);
  unint64_t v4 = (const pxrInternal__aapl__pxrReserved__::GfMatrix4d *)v3[4];
  unint64_t v5 = *v3;
  sub_216903174((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v13, v6, v7);
  if (v5)
  {
    char v8 = v14;
    unint64_t v9 = v5 << 7;
    do
    {
      pxrInternal__aapl__pxrReserved__::GfMatrix4f::GfMatrix4f((pxrInternal__aapl__pxrReserved__::GfMatrix4f *)v15, v4);
      long long v10 = v15[0];
      long long v11 = v15[1];
      long long v12 = v15[3];
      float64x2_t v8[2] = v15[2];
      void v8[3] = v12;
      *char v8 = v10;
      v8[1] = v11;
      v8 += 4;
      unint64_t v4 = (const pxrInternal__aapl__pxrReserved__::GfMatrix4d *)((char *)v4 + 128);
      v9 -= 128;
    }
    while (v9);
  }
  sub_216902DF0(v13, a2);
  sub_2168F83DC((uint64_t)v13);
}

void sub_216902000(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21690201C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (sub_216902174(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      unint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_2169021AC, (uint64_t)&stru_26C74DF68);
  }
}

uint64_t sub_2169020B0(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  memset(v5, 0, sizeof(v5));
  sub_2168F845C((void *)a1);
  uint64_t v6 = v5;
  sub_216902248((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_216902118(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

double sub_216902130@<D0>(__n128 *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  *((void *)a2 + 1) = 0;
  *(void *)&double result = sub_2169025F8(a2, a1).n128_u64[0];
  return result;
}

void sub_216902160(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216902174(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 26) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C74DF68);
  }
  else {
    return 0;
  }
}

double sub_2169021AC@<D0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x28uLL);
  double result = 0.0;
  *uint64_t v2 = 0u;
  v2[1] = 0u;
  *((void *)v2 + 4) = 0;
  *a1 = v2;
  a1[1] = sub_2169021FC;
  a1[2] = &stru_26C74DF68;
  return result;
}

void sub_2169021FC(void *a1)
{
  if (a1)
  {
    sub_2168F83DC((uint64_t)a1);
    operator delete(a1);
  }
}

void sub_216902248(unint64_t *a1, unint64_t a2, long long **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    uint64_t v7 = (unint64_t *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              long long v10 = sub_2169024A4((uint64_t)a1, a2);
              uint64_t v7 = v10;
              if (v3)
              {
                unint64_t v11 = 0;
                do
                {
                  long long v12 = &v10[v11 / 8];
                  long long v13 = *(_OWORD *)(v9 + v11);
                  long long v14 = *(_OWORD *)(v9 + v11 + 16);
                  long long v15 = *(_OWORD *)(v9 + v11 + 48);
                  *((_OWORD *)v12 + 2) = *(_OWORD *)(v9 + v11 + 32);
                  *((_OWORD *)v12 + 3) = v15;
                  *(_OWORD *)long long v12 = v13;
                  *((_OWORD *)v12 + 1) = v14;
                  long long v16 = *(_OWORD *)(v9 + v11 + 64);
                  long long v17 = *(_OWORD *)(v9 + v11 + 80);
                  long long v18 = *(_OWORD *)(v9 + v11 + 112);
                  *((_OWORD *)v12 + 6) = *(_OWORD *)(v9 + v11 + 96);
                  *((_OWORD *)v12 + 7) = v18;
                  *((_OWORD *)v12 + 4) = v16;
                  *((_OWORD *)v12 + 5) = v17;
                  v11 += 128;
                }
                while (v3 << 7 != v11);
              }
            }
            uint64_t v19 = *a3;
            unint64_t v20 = v3 << 7;
            do
            {
              unint64_t v21 = (_OWORD *)((char *)v7 + v20);
              long long v22 = *v19;
              long long v23 = v19[1];
              long long v24 = v19[3];
              double v21[2] = v19[2];
              void v21[3] = v24;
              *unint64_t v21 = v22;
              v21[1] = v23;
              long long v25 = v19[4];
              long long v26 = v19[5];
              long long v27 = v19[7];
              v21[6] = v19[6];
              v21[7] = v27;
              void v21[4] = v25;
              v21[5] = v26;
              v20 += 128;
            }
            while (a2 << 7 != v20);
          }
          long long v28 = v7;
          goto LABEL_31;
        }
        uint64_t v7 = (unint64_t *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v40 = a2;
      }
      else {
        unint64_t v40 = *a1;
      }
      size_t v41 = sub_2169024A4((uint64_t)a1, a2);
      long long v28 = v41;
      if (v40)
      {
        unint64_t v42 = v40 << 7;
        uint64_t v43 = v41;
        do
        {
          long long v44 = *(_OWORD *)v7;
          long long v45 = *((_OWORD *)v7 + 1);
          long long v46 = *((_OWORD *)v7 + 3);
          *((_OWORD *)v43 + 2) = *((_OWORD *)v7 + 2);
          *((_OWORD *)v43 + 3) = v46;
          *(_OWORD *)uint64_t v43 = v44;
          *((_OWORD *)v43 + 1) = v45;
          long long v47 = *((_OWORD *)v7 + 4);
          long long v48 = *((_OWORD *)v7 + 5);
          long long v49 = *((_OWORD *)v7 + 7);
          *((_OWORD *)v43 + 6) = *((_OWORD *)v7 + 6);
          *((_OWORD *)v43 + 7) = v49;
          *((_OWORD *)v43 + 4) = v47;
          *((_OWORD *)v43 + 5) = v48;
          v7 += 16;
          v43 += 16;
          v42 -= 128;
        }
        while (v42);
      }
      if (v3 < a2)
      {
        unint64_t v50 = *a3;
        unint64_t v51 = v3 << 7;
        do
        {
          uint64_t v52 = (_OWORD *)((char *)v41 + v51);
          long long v53 = *v50;
          long long v54 = v50[1];
          long long v55 = v50[3];
          v52[2] = v50[2];
          v52[3] = v55;
          *uint64_t v52 = v53;
          v52[1] = v54;
          long long v56 = v50[4];
          long long v57 = v50[5];
          long long v58 = v50[7];
          v52[6] = v50[6];
          v52[7] = v58;
          v52[4] = v56;
          v52[5] = v57;
          v51 += 128;
        }
        while (a2 << 7 != v51);
      }
      goto LABEL_31;
    }
    unint64_t v29 = a2 << 7;
    if ((a2 << 7) / a2 == 128)
    {
      long long v30 = sub_2169024A4((uint64_t)a1, a2);
      long long v28 = v30;
      unint64_t v31 = 0;
      uint64_t v32 = *a3;
      do
      {
        BOOL v33 = &v30[v31 / 8];
        long long v34 = *v32;
        long long v35 = v32[1];
        long long v36 = v32[3];
        *((_OWORD *)v33 + 2) = v32[2];
        *((_OWORD *)v33 + 3) = v36;
        *(_OWORD *)BOOL v33 = v34;
        *((_OWORD *)v33 + 1) = v35;
        long long v37 = v32[4];
        long long v38 = v32[5];
        long long v39 = v32[7];
        *((_OWORD *)v33 + 6) = v32[6];
        *((_OWORD *)v33 + 7) = v39;
        *((_OWORD *)v33 + 4) = v37;
        *((_OWORD *)v33 + 5) = v38;
        v31 += 128;
      }
      while (v29 != v31);
LABEL_31:
      if (v28 != (unint64_t *)a1[4])
      {
        sub_2168F83DC((uint64_t)a1);
        a1[4] = (unint64_t)v28;
      }
      *a1 = a2;
      return;
    }
  }

  sub_2168F845C(a1);
}

void *sub_2169024A4(uint64_t a1, unint64_t a2)
{
  sub_216851EE4((uint64_t)&v7, "VtArray::_AllocateNew", "value_type *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::_AllocateNew(size_t) [T = pxrInternal__aapl__pxrReserved__::GfMatrix4d]");
  if (a2 >> 57) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = (a2 << 7) | 0x10;
  }
  unint64_t v4 = operator new(v3);
  *unint64_t v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_216902528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_216902540(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    if (*((void *)this + 3) || (unint64_t v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfMatrix4d]", a3);
      uint64_t v6 = (long long *)*((void *)this + 4);
      uint64_t v7 = *(void *)this;
      int v8 = sub_2169024A4((uint64_t)this, *(void *)this);
      unint64_t v9 = v8;
      if (v7)
      {
        uint64_t v10 = v7 << 7;
        unint64_t v11 = v8;
        do
        {
          long long v12 = *v6;
          long long v13 = v6[1];
          long long v14 = v6[3];
          __n128 v11[2] = v6[2];
          uint64_t v11[3] = v14;
          *unint64_t v11 = v12;
          v11[1] = v13;
          long long v15 = v6[4];
          long long v16 = v6[5];
          long long v17 = v6[7];
          v11[6] = v6[6];
          v11[7] = v17;
          void v11[4] = v15;
          void v11[5] = v16;
          v6 += 8;
          v11 += 8;
          v10 -= 128;
        }
        while (v10);
      }
      sub_2168F83DC((uint64_t)this);
      *((void *)this + 4) = v9;
    }
  }
}

__n128 sub_2169025F8(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  if ((sub_2169026B0(a1) & 1) == 0)
  {
    uint64_t v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_2169026E8(a1, (uint64_t)v10);
    sub_2168F83DC((uint64_t)v10);
  }
  unint64_t v4 = (__n128 *)sub_216902C50(a1);
  unint64_t v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  unint64_t v6 = v4[1].n128_u64[0];
  __n128 result = *v4;
  unint64_t v8 = a2[1].n128_u64[0];
  *unint64_t v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  unint64_t v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_216902698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2169026B0(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 29) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C74DFB0);
  }
  else {
    return 0;
  }
}

void *sub_2169026E8(void *a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v5, (uint64_t)a1);
  a1[1] = off_26C74F560;
  sub_2168F8DBC(a1, a2);
  if (v6) {
    (*(void (**)(unsigned char *))(v6 + 32))(v5);
  }
  return a1;
}

void sub_21690277C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2169027B8(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

atomic_uint **sub_2169027D8(atomic_uint **a1, atomic_uint **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_216902950(a1);
}

uint64_t sub_2169027E8()
{
  return 1;
}

unint64_t sub_2169027F0(uint64_t **a1)
{
  return sub_2169029A8((uint64_t)&v2, *a1);
}

BOOL sub_216902818(uint64_t **a1, uint64_t *a2)
{
  return sub_216902AEC(*a1, *a2);
}

BOOL sub_216902824(uint64_t **a1, uint64_t a2)
{
  return sub_216902AEC(*a1, a2);
}

uint64_t sub_216902830()
{
  return 0;
}

void *sub_21690283C(uint64_t **a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, void *))sub_216902C38);
  return a2;
}

void *sub_216902890()
{
  return &unk_26C74DFB0;
}

uint64_t sub_21690289C()
{
  return 1;
}

void *sub_2169028A4()
{
  return &unk_26C74C5C0;
}

uint64_t sub_2169028B0(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_2169028B8(uint64_t a1)
{
  return **(void **)a1;
}

BOOL sub_2169028C4(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x80000002174E544ALL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_216902900(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74DFB0, a2, a3);
}

void *sub_216902924()
{
  return &unk_26C74DFB0;
}

uint64_t sub_216902930(uint64_t a1)
{
  return *(void *)a1;
}

void *sub_216902938@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  a2[1] = off_26C74F560;
  return sub_2168F8DBC(a2, v2);
}

atomic_uint **sub_216902950(atomic_uint **a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit(v2 + 10, 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_2168F83DC((uint64_t)v2);
    operator delete(v2);
  }
  return a1;
}

unint64_t sub_2169029A8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  char v8 = 1;
  uint64_t v7 = v2;
  if (v2)
  {
    uint64_t v3 = (double *)a2[4];
    do
    {
      --v2;
      unint64_t v4 = v3 + 16;
      sub_216902A20((uint64_t)&v7, v3);
      uint64_t v3 = v4;
    }
    while (v2);
    unint64_t v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    unint64_t v5 = 0;
  }
  return bswap64(v5);
}

uint64_t sub_216902A20(uint64_t a1, double *a2)
{
  uint64_t v5 = 0;
  char v6 = 0;
  uint64_t result = sub_2168F664C((uint64_t)&v5, a2, a2 + 1, a2 + 2, a2 + 3, a2 + 4, a2 + 5, a2 + 6, a2 + 7, a2 + 8, a2 + 9, a2 + 10, a2 + 11, a2 + 12, a2 + 13, a2 + 14, a2 + 15);
  unint64_t v4 = bswap64(0x9E3779B97F4A7C55 * v5);
  if (*(unsigned char *)(a1 + 8)) {
    v4 += (*(void *)a1 + v4 + (*(void *)a1 + v4) * (*(void *)a1 + v4)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v4;
  return result;
}

BOOL sub_216902AEC(uint64_t *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32) && sub_2168F8C2C((uint64_t)a1, a2) && a1[3] == *(void *)(a2 + 24)) {
    return 1;
  }
  BOOL result = sub_2168F8C2C((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  uint64_t v5 = *a1;
  if (!*a1) {
    return 1;
  }
  char v6 = (double *)a1[4];
  uint64_t v7 = *(double **)(a2 + 32);
  uint64_t v8 = (v5 << 7) - 128;
  do
  {
    BOOL result = pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator==(v6, v7);
    if (!result) {
      break;
    }
    v6 += 16;
    v7 += 16;
    uint64_t v9 = v8;
    v8 -= 128;
  }
  while (v9);
  return result;
}

uint64_t sub_216902B9C(_OWORD **a1)
{
  unsigned int v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    uint64_t v3 = operator new(0x30uLL);
    unint64_t v4 = *a1;
    long long v5 = (*a1)[1];
    *(_OWORD *)uint64_t v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    uint64_t v6 = *((void *)v4 + 4);
    *((void *)v3 + 4) = v6;
    if (v6)
    {
      uint64_t v7 = (atomic_ullong *)*((void *)v3 + 3);
      uint64_t v8 = (atomic_ullong *)(v6 - 16);
      if (!v7) {
        uint64_t v7 = v8;
      }
      atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
      unint64_t v4 = *a1;
    }
    atomic_store(0, (unsigned int *)v3 + 10);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 10, 1u, memory_order_relaxed);
    uint64_t v10 = (atomic_uint *)v4;
    *a1 = v3;
    sub_216902950(&v10);
  }
  return (uint64_t)*a1;
}

void *sub_216902C38(double **a1, void *a2)
{
  uint64_t v3 = *a1;
  *a1 += 16;
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, v3);
}

uint64_t sub_216902C50(void *a1)
{
  void v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_216902B9C((_OWORD **)a1);
}

uint64_t sub_216902CE4(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (sub_2169026B0(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      unint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_216902E34, (uint64_t)&stru_26C74DFB0);
  }
}

uint64_t sub_216902D78(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  memset(v5, 0, sizeof(v5));
  sub_2168F845C((void *)a1);
  uint64_t v6 = v5;
  sub_216902ED0((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_216902DD8(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

double sub_216902DF0@<D0>(__n128 *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  *((void *)a2 + 1) = 0;
  *(void *)&double result = sub_216903218(a2, a1).n128_u64[0];
  return result;
}

void sub_216902E20(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

double sub_216902E34@<D0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x28uLL);
  double result = 0.0;
  *uint64_t v2 = 0u;
  v2[1] = 0u;
  *((void *)v2 + 4) = 0;
  *a1 = v2;
  a1[1] = sub_216902E84;
  a1[2] = &stru_26C74DFB0;
  return result;
}

void sub_216902E84(void *a1)
{
  if (a1)
  {
    sub_2168F83DC((uint64_t)a1);
    operator delete(a1);
  }
}

void sub_216902ED0(unint64_t *a1, unint64_t a2, long long **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    uint64_t v7 = (unint64_t *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              uint64_t v10 = sub_2169030D8((uint64_t)a1, a2);
              uint64_t v7 = v10;
              if (v3)
              {
                unint64_t v11 = 0;
                do
                {
                  long long v12 = &v10[v11 / 8];
                  long long v13 = *(_OWORD *)(v9 + v11);
                  long long v14 = *(_OWORD *)(v9 + v11 + 16);
                  long long v15 = *(_OWORD *)(v9 + v11 + 48);
                  *((_OWORD *)v12 + 2) = *(_OWORD *)(v9 + v11 + 32);
                  *((_OWORD *)v12 + 3) = v15;
                  *(_OWORD *)long long v12 = v13;
                  *((_OWORD *)v12 + 1) = v14;
                  v11 += 64;
                }
                while (v3 << 6 != v11);
              }
            }
            long long v16 = *a3;
            unint64_t v17 = v3 << 6;
            do
            {
              long long v18 = (_OWORD *)((char *)v7 + v17);
              long long v19 = *v16;
              long long v20 = v16[1];
              long long v21 = v16[3];
              uint64_t v18[2] = v16[2];
              v18[3] = v21;
              *long long v18 = v19;
              v18[1] = v20;
              v17 += 64;
            }
            while (a2 << 6 != v17);
          }
          long long v22 = v7;
          goto LABEL_31;
        }
        uint64_t v7 = (unint64_t *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v31 = a2;
      }
      else {
        unint64_t v31 = *a1;
      }
      uint64_t v32 = sub_2169030D8((uint64_t)a1, a2);
      long long v22 = v32;
      if (v31)
      {
        unint64_t v33 = v31 << 6;
        long long v34 = v32;
        do
        {
          long long v35 = *(_OWORD *)v7;
          long long v36 = *((_OWORD *)v7 + 1);
          long long v37 = *((_OWORD *)v7 + 3);
          *((_OWORD *)v34 + 2) = *((_OWORD *)v7 + 2);
          *((_OWORD *)v34 + 3) = v37;
          *(_OWORD *)long long v34 = v35;
          *((_OWORD *)v34 + 1) = v36;
          v34 += 8;
          v7 += 8;
          v33 -= 64;
        }
        while (v33);
      }
      if (v3 < a2)
      {
        long long v38 = *a3;
        unint64_t v39 = v3 << 6;
        do
        {
          unint64_t v40 = (_OWORD *)((char *)v32 + v39);
          long long v41 = *v38;
          long long v42 = v38[1];
          long long v43 = v38[3];
          v40[2] = v38[2];
          v40[3] = v43;
          *unint64_t v40 = v41;
          v40[1] = v42;
          v39 += 64;
        }
        while (a2 << 6 != v39);
      }
      goto LABEL_31;
    }
    unint64_t v23 = a2 << 6;
    if ((a2 << 6) / a2 == 64)
    {
      long long v24 = sub_2169030D8((uint64_t)a1, a2);
      long long v22 = v24;
      unint64_t v25 = 0;
      long long v26 = *a3;
      do
      {
        long long v27 = &v24[v25 / 8];
        long long v28 = *v26;
        long long v29 = v26[1];
        long long v30 = v26[3];
        *((_OWORD *)v27 + 2) = v26[2];
        *((_OWORD *)v27 + 3) = v30;
        *(_OWORD *)long long v27 = v28;
        *((_OWORD *)v27 + 1) = v29;
        v25 += 64;
      }
      while (v23 != v25);
LABEL_31:
      if (v22 != (unint64_t *)a1[4])
      {
        sub_2168F83DC((uint64_t)a1);
        a1[4] = (unint64_t)v22;
      }
      *a1 = a2;
      return;
    }
  }

  sub_2168F845C(a1);
}

void *sub_2169030D8(uint64_t a1, unint64_t a2)
{
  sub_216851EE4((uint64_t)&v7, "VtArray::_AllocateNew", "value_type *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4f>::_AllocateNew(size_t) [T = pxrInternal__aapl__pxrReserved__::GfMatrix4f]");
  if (a2 >> 58) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = (a2 << 6) | 0x10;
  }
  unint64_t v4 = operator new(v3);
  *unint64_t v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_21690315C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_216903174(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    if (*((void *)this + 3) || (unint64_t v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4f>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfMatrix4f]", a3);
      uint64_t v6 = (long long *)*((void *)this + 4);
      uint64_t v7 = *(void *)this;
      int v8 = sub_2169030D8((uint64_t)this, *(void *)this);
      unint64_t v9 = v8;
      if (v7)
      {
        uint64_t v10 = v7 << 6;
        unint64_t v11 = v8;
        do
        {
          long long v12 = *v6;
          long long v13 = v6[1];
          long long v14 = v6[3];
          __n128 v11[2] = v6[2];
          uint64_t v11[3] = v14;
          *unint64_t v11 = v12;
          v11[1] = v13;
          v11 += 4;
          v6 += 4;
          v10 -= 64;
        }
        while (v10);
      }
      sub_2168F83DC((uint64_t)this);
      *((void *)this + 4) = v9;
    }
  }
}

__n128 sub_216903218(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  if ((sub_216902174(a1) & 1) == 0)
  {
    uint64_t v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_2169032D0(a1, (uint64_t)v10);
    sub_2168F83DC((uint64_t)v10);
  }
  unint64_t v4 = (__n128 *)sub_216903838(a1);
  unint64_t v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  unint64_t v6 = v4[1].n128_u64[0];
  __n128 result = *v4;
  unint64_t v8 = a2[1].n128_u64[0];
  *unint64_t v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  unint64_t v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_2169032B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_2169032D0(void *a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v5, (uint64_t)a1);
  a1[1] = off_26C74F618;
  sub_2168F8DBC(a1, a2);
  if (v6) {
    (*(void (**)(unsigned char *))(v6 + 32))(v5);
  }
  return a1;
}

void sub_216903364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2169033A0(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

atomic_uint **sub_2169033C0(atomic_uint **a1, atomic_uint **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_216903538(a1);
}

uint64_t sub_2169033D0()
{
  return 1;
}

unint64_t sub_2169033D8(uint64_t **a1)
{
  return sub_216903590((uint64_t)&v2, *a1);
}

BOOL sub_216903400(uint64_t **a1, uint64_t *a2)
{
  return sub_2169036D4(*a1, *a2);
}

BOOL sub_21690340C(uint64_t **a1, uint64_t a2)
{
  return sub_2169036D4(*a1, a2);
}

uint64_t sub_216903418()
{
  return 0;
}

void *sub_216903424(uint64_t **a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, void *))sub_216903820);
  return a2;
}

void *sub_216903478()
{
  return &unk_26C74DF68;
}

uint64_t sub_216903484()
{
  return 1;
}

void *sub_21690348C()
{
  return &unk_26C74C5B0;
}

uint64_t sub_216903498(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_2169034A0(uint64_t a1)
{
  return **(void **)a1;
}

BOOL sub_2169034AC(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x8000000217456F8FLL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2169034E8(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74DF68, a2, a3);
}

void *sub_21690350C()
{
  return &unk_26C74DF68;
}

uint64_t sub_216903518(uint64_t a1)
{
  return *(void *)a1;
}

void *sub_216903520@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  a2[1] = off_26C74F618;
  return sub_2168F8DBC(a2, v2);
}

atomic_uint **sub_216903538(atomic_uint **a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit(v2 + 10, 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_2168F83DC((uint64_t)v2);
    operator delete(v2);
  }
  return a1;
}

unint64_t sub_216903590(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  char v8 = 1;
  uint64_t v7 = v2;
  if (v2)
  {
    uint64_t v3 = (float *)a2[4];
    do
    {
      --v2;
      unint64_t v4 = v3 + 16;
      sub_216903608((uint64_t)&v7, v3);
      uint64_t v3 = v4;
    }
    while (v2);
    unint64_t v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    unint64_t v5 = 0;
  }
  return bswap64(v5);
}

uint64_t sub_216903608(uint64_t a1, float *a2)
{
  uint64_t v5 = 0;
  char v6 = 0;
  uint64_t result = sub_2168F6EB8((uint64_t)&v5, a2, a2 + 1, a2 + 2, a2 + 3, a2 + 4, a2 + 5, a2 + 6, a2 + 7, a2 + 8, a2 + 9, a2 + 10, a2 + 11, a2 + 12, a2 + 13, a2 + 14, a2 + 15);
  unint64_t v4 = bswap64(0x9E3779B97F4A7C55 * v5);
  if (*(unsigned char *)(a1 + 8)) {
    v4 += (*(void *)a1 + v4 + (*(void *)a1 + v4) * (*(void *)a1 + v4)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v4;
  return result;
}

BOOL sub_2169036D4(uint64_t *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32) && sub_2168F8C2C((uint64_t)a1, a2) && a1[3] == *(void *)(a2 + 24)) {
    return 1;
  }
  BOOL result = sub_2168F8C2C((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  uint64_t v5 = *a1;
  if (!*a1) {
    return 1;
  }
  char v6 = (float *)a1[4];
  uint64_t v7 = *(float **)(a2 + 32);
  uint64_t v8 = (v5 << 6) - 64;
  do
  {
    BOOL result = pxrInternal__aapl__pxrReserved__::GfMatrix4f::operator==(v6, v7);
    if (!result) {
      break;
    }
    v6 += 16;
    v7 += 16;
    uint64_t v9 = v8;
    v8 -= 64;
  }
  while (v9);
  return result;
}

uint64_t sub_216903784(_OWORD **a1)
{
  unsigned int v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    uint64_t v3 = operator new(0x30uLL);
    unint64_t v4 = *a1;
    long long v5 = (*a1)[1];
    *(_OWORD *)uint64_t v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    uint64_t v6 = *((void *)v4 + 4);
    *((void *)v3 + 4) = v6;
    if (v6)
    {
      uint64_t v7 = (atomic_ullong *)*((void *)v3 + 3);
      uint64_t v8 = (atomic_ullong *)(v6 - 16);
      if (!v7) {
        uint64_t v7 = v8;
      }
      atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
      unint64_t v4 = *a1;
    }
    atomic_store(0, (unsigned int *)v3 + 10);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 10, 1u, memory_order_relaxed);
    uint64_t v10 = (atomic_uint *)v4;
    *a1 = v3;
    sub_216903538(&v10);
  }
  return (uint64_t)*a1;
}

void *sub_216903820(float **a1, void *a2)
{
  uint64_t v3 = *a1;
  *a1 += 16;
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, v3);
}

uint64_t sub_216903838(void *a1)
{
  void v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_216903784((_OWORD **)a1);
}

void sub_2169038CC(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  uint64_t v3 = (unint64_t *)sub_216903A34(a1);
  sub_216903AC8((uint64_t)v10, *v3);
  unint64_t v4 = (unsigned __int16 *)v3[4];
  unint64_t v5 = *v3;
  sub_216903EB4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v10, v6, v7);
  if (v5)
  {
    uint64_t v8 = v11;
    uint64_t v9 = 8 * v5;
    do
    {
      pxrInternal__aapl__pxrReserved__::GfQuatf::GfQuatf((float *)&v12, v4);
      *v8++ = v12;
      v4 += 4;
      v9 -= 8;
    }
    while (v9);
  }
  sub_216903B38(v10, a2);
  sub_2168F83DC((uint64_t)v10);
}

void sub_216903964(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_216903980(pxrInternal__aapl__pxrReserved__::VtValue *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  uint64_t v3 = (unint64_t *)sub_216904624(a1);
  sub_2169046B8((uint64_t)v10, *v3);
  unint64_t v4 = (const pxrInternal__aapl__pxrReserved__::GfQuatf *)v3[4];
  unint64_t v5 = *v3;
  sub_216904A70((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v10, v6, v7);
  if (v5)
  {
    uint64_t v8 = v11;
    uint64_t v9 = 16 * v5;
    do
    {
      pxrInternal__aapl__pxrReserved__::GfQuath::GfQuath((pxrInternal__aapl__pxrReserved__::GfQuath *)&v12, v4);
      *v8++ = v12;
      unint64_t v4 = (const pxrInternal__aapl__pxrReserved__::GfQuatf *)((char *)v4 + 16);
      v9 -= 16;
    }
    while (v9);
  }
  sub_216904728(v10, a2);
  sub_2168F83DC((uint64_t)v10);
}

void sub_216903A18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216903A34(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (sub_216903B7C(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      unint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_216903BB4, (uint64_t)&stru_26C74E0B8);
  }
}

uint64_t sub_216903AC8(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  sub_2168F845C((void *)a1);
  uint64_t v6 = &v5;
  sub_216903C50((unint64_t *)a1, a2, (_OWORD **)&v6);
  return a1;
}

void sub_216903B20(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

double sub_216903B38@<D0>(__n128 *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  *((void *)a2 + 1) = 0;
  *(void *)&double result = sub_216903F4C(a2, a1).n128_u64[0];
  return result;
}

void sub_216903B68(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_216903B7C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 40) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C74E0B8);
  }
  else {
    return 0;
  }
}

double sub_216903BB4@<D0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x28uLL);
  double result = 0.0;
  *uint64_t v2 = 0u;
  v2[1] = 0u;
  *((void *)v2 + 4) = 0;
  *a1 = v2;
  a1[1] = sub_216903C04;
  a1[2] = &stru_26C74E0B8;
  return result;
}

void sub_216903C04(void *a1)
{
  if (a1)
  {
    sub_2168F83DC((uint64_t)a1);
    operator delete(a1);
  }
}

void sub_216903C50(unint64_t *a1, unint64_t a2, _OWORD **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    uint64_t v7 = (unint64_t *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              uint64_t v10 = sub_216903E18((uint64_t)a1, a2);
              uint64_t v7 = v10;
              if (v3)
              {
                uint64_t v11 = 0;
                do
                {
                  *(_OWORD *)&v10[v11] = *(_OWORD *)(v9 + v11 * 8);
                  v11 += 2;
                }
                while (2 * v3 != v11);
              }
            }
            uint64_t v12 = *a3;
            uint64_t v13 = 2 * v3;
            do
            {
              *(_OWORD *)&v7[v13] = *v12;
              v13 += 2;
            }
            while (2 * a2 != v13);
          }
          long long v14 = v7;
          goto LABEL_31;
        }
        uint64_t v7 = (unint64_t *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v19 = a2;
      }
      else {
        unint64_t v19 = *a1;
      }
      long long v20 = sub_216903E18((uint64_t)a1, a2);
      long long v14 = v20;
      if (v19)
      {
        uint64_t v21 = 16 * v19;
        long long v22 = v20;
        do
        {
          long long v23 = *(_OWORD *)v7;
          v7 += 2;
          *(_OWORD *)long long v22 = v23;
          v22 += 2;
          v21 -= 16;
        }
        while (v21);
      }
      if (v3 < a2)
      {
        long long v24 = *a3;
        uint64_t v25 = 2 * v3;
        do
        {
          *(_OWORD *)&v20[v25] = *v24;
          v25 += 2;
        }
        while (2 * a2 != v25);
      }
      goto LABEL_31;
    }
    uint64_t v15 = 16 * a2;
    if (16 * a2 / a2 == 16)
    {
      long long v16 = sub_216903E18((uint64_t)a1, a2);
      long long v14 = v16;
      unint64_t v17 = 0;
      long long v18 = *a3;
      do
      {
        *(_OWORD *)&v16[v17 / 8] = *v18;
        v17 += 16;
      }
      while (v15 != v17);
LABEL_31:
      if (v14 != (unint64_t *)a1[4])
      {
        sub_2168F83DC((uint64_t)a1);
        a1[4] = (unint64_t)v14;
      }
      *a1 = a2;
      return;
    }
  }

  sub_2168F845C(a1);
}

void *sub_216903E18(uint64_t a1, unint64_t a2)
{
  sub_216851EE4((uint64_t)&v7, "VtArray::_AllocateNew", "value_type *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::_AllocateNew(size_t) [T = pxrInternal__aapl__pxrReserved__::GfQuatf]");
  if (a2 > 0xFFFFFFFFFFFFFFELL) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 16 * a2 + 16;
  }
  unint64_t v4 = operator new(v3);
  *unint64_t v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_216903E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_216903EB4(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    if (*((void *)this + 3) || (unint64_t v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfQuatf]", a3);
      uint64_t v6 = (long long *)*((void *)this + 4);
      uint64_t v7 = *(void *)this;
      int v8 = sub_216903E18((uint64_t)this, *(void *)this);
      unint64_t v9 = v8;
      if (v7)
      {
        uint64_t v10 = 16 * v7;
        uint64_t v11 = v8;
        do
        {
          long long v12 = *v6++;
          *v11++ = v12;
          v10 -= 16;
        }
        while (v10);
      }
      sub_2168F83DC((uint64_t)this);
      *((void *)this + 4) = v9;
    }
  }
}

__n128 sub_216903F4C(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  if ((sub_216904004(a1) & 1) == 0)
  {
    uint64_t v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_21690403C(a1, (uint64_t)v10);
    sub_2168F83DC((uint64_t)v10);
  }
  unint64_t v4 = (__n128 *)sub_216904590(a1);
  unint64_t v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  unint64_t v6 = v4[1].n128_u64[0];
  __n128 result = *v4;
  unint64_t v8 = a2[1].n128_u64[0];
  *unint64_t v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  unint64_t v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_216903FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_216904004(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (*(_DWORD *)((v1 & 0xFFFFFFFFFFFFFFF8) + 16) == 41) {
    return 1;
  }
  if ((v1 & 4) != 0) {
    return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C74E0D0);
  }
  else {
    return 0;
  }
}

void *sub_21690403C(void *a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v5, (uint64_t)a1);
  a1[1] = off_26C74F6D0;
  sub_2168F8DBC(a1, a2);
  if (v6) {
    (*(void (**)(unsigned char *))(v6 + 32))(v5);
  }
  return a1;
}

void sub_2169040D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_21690410C(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

atomic_uint **sub_21690412C(atomic_uint **a1, atomic_uint **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2169042A4(a1);
}

uint64_t sub_21690413C()
{
  return 1;
}

unint64_t sub_216904144(uint64_t **a1)
{
  return sub_2169042FC((uint64_t)&v2, *a1);
}

BOOL sub_21690416C(void **a1, uint64_t *a2)
{
  return sub_216904400(*a1, *a2);
}

BOOL sub_216904178(void **a1, uint64_t a2)
{
  return sub_216904400(*a1, a2);
}

uint64_t sub_216904184()
{
  return 0;
}

void *sub_216904190(uint64_t **a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, void *))sub_216904578);
  return a2;
}

void *sub_2169041E4()
{
  return &unk_26C74E0D0;
}

uint64_t sub_2169041F0()
{
  return 1;
}

void *sub_2169041F8()
{
  return &unk_26C74C600;
}

uint64_t sub_216904204(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_21690420C(uint64_t a1)
{
  return **(void **)a1;
}

BOOL sub_216904218(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x80000002174572AFLL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_216904254(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74E0D0, a2, a3);
}

void *sub_216904278()
{
  return &unk_26C74E0D0;
}

uint64_t sub_216904284(uint64_t a1)
{
  return *(void *)a1;
}

void *sub_21690428C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  a2[1] = off_26C74F6D0;
  return sub_2168F8DBC(a2, v2);
}

atomic_uint **sub_2169042A4(atomic_uint **a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit(v2 + 10, 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_2168F83DC((uint64_t)v2);
    operator delete(v2);
  }
  return a1;
}

unint64_t sub_2169042FC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  char v8 = 1;
  uint64_t v7 = v2;
  if (v2)
  {
    uint64_t v3 = a2[4];
    do
    {
      --v2;
      uint64_t v4 = v3 + 16;
      sub_216904374((uint64_t)&v7, v3);
      uint64_t v3 = v4;
    }
    while (v2);
    unint64_t v5 = 0x9E3779B97F4A7C55 * v7;
  }
  else
  {
    unint64_t v5 = 0;
  }
  return bswap64(v5);
}

uint64_t sub_216904374(uint64_t a1, uint64_t a2)
{
  int v5 = *(_DWORD *)(a2 + 12);
  uint64_t v6 = 0;
  char v7 = 0;
  uint64_t result = sub_2168F7758((uint64_t)&v6, (float *)&v5, (float *)a2);
  unint64_t v4 = bswap64(0x9E3779B97F4A7C55 * v6);
  if (*(unsigned char *)(a1 + 8)) {
    v4 += (*(void *)a1 + v4 + (*(void *)a1 + v4) * (*(void *)a1 + v4)) >> 1;
  }
  else {
    *(unsigned char *)(a1 + 8) = 1;
  }
  *(void *)a1 = v4;
  return result;
}

BOOL sub_216904400(void *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32) && sub_2168F8C2C((uint64_t)a1, a2) && a1[3] == *(void *)(a2 + 24)) {
    return 1;
  }
  BOOL result = sub_2168F8C2C((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  if (!*a1) {
    return 1;
  }
  int v5 = (float *)(a1[4] + 8);
  uint64_t v6 = 16 * *a1;
  for (uint64_t i = (float *)(*(void *)(a2 + 32) + 8);
        v5[1] == i[1] && *(v5 - 2) == *(i - 2) && *(v5 - 1) == *(i - 1) && *v5 == *i;
        i += 4)
  {
    v5 += 4;
    v6 -= 16;
    if (!v6) {
      return 1;
    }
  }
  return 0;
}

uint64_t sub_2169044DC(_OWORD **a1)
{
  unsigned int v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    uint64_t v3 = operator new(0x30uLL);
    unint64_t v4 = *a1;
    long long v5 = (*a1)[1];
    *(_OWORD *)uint64_t v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    uint64_t v6 = *((void *)v4 + 4);
    *((void *)v3 + 4) = v6;
    if (v6)
    {
      char v7 = (atomic_ullong *)*((void *)v3 + 3);
      char v8 = (atomic_ullong *)(v6 - 16);
      if (!v7) {
        char v7 = v8;
      }
      atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
      unint64_t v4 = *a1;
    }
    atomic_store(0, (unsigned int *)v3 + 10);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 10, 1u, memory_order_relaxed);
    uint64_t v10 = (atomic_uint *)v4;
    *a1 = v3;
    sub_2169042A4(&v10);
  }
  return (uint64_t)*a1;
}

void *sub_216904578(int8x16_t **a1, void *a2)
{
  uint64_t v3 = (*a1)++;
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, v3);
}

uint64_t sub_216904590(void *a1)
{
  void v4[2] = *MEMORY[0x263EF8340];
  uint64_t v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(void *__return_ptr, void *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_2168ED33C(a1, v4);
    sub_2168EE084((uint64_t)v4);
  }
  return sub_2169044DC((_OWORD **)a1);
}

uint64_t sub_216904624(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (sub_216904004(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      unint64_t v4 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v4(a1);
    }
    else
    {
      return *(void *)a1;
    }
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_21690476C, (uint64_t)&stru_26C74E0D0);
  }
}

uint64_t sub_2169046B8(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  sub_2168F845C((void *)a1);
  uint64_t v6 = &v5;
  sub_216904808((unint64_t *)a1, a2, &v6);
  return a1;
}

void sub_216904710(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

double sub_216904728@<D0>(__n128 *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  *((void *)a2 + 1) = 0;
  *(void *)&double result = sub_216904B08(a2, a1).n128_u64[0];
  return result;
}

void sub_216904758(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

double sub_21690476C@<D0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x28uLL);
  double result = 0.0;
  *uint64_t v2 = 0u;
  v2[1] = 0u;
  *((void *)v2 + 4) = 0;
  *a1 = v2;
  a1[1] = sub_2169047BC;
  a1[2] = &stru_26C74E0D0;
  return result;
}

void sub_2169047BC(void *a1)
{
  if (a1)
  {
    sub_2168F83DC((uint64_t)a1);
    operator delete(a1);
  }
}

void sub_216904808(unint64_t *a1, unint64_t a2, uint64_t **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    char v7 = (uint64_t *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load((unint64_t *)v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              uint64_t v10 = sub_2169049D0((uint64_t)a1, a2);
              char v7 = v10;
              if (v3)
              {
                for (uint64_t i = 0; i != v3; ++i)
                  v10[i] = *(void *)(v9 + i * 8);
              }
            }
            long long v12 = *a3;
            uint64_t v13 = v3;
            do
              v7[v13++] = *v12;
            while (a2 != v13);
          }
          long long v14 = v7;
          goto LABEL_31;
        }
        char v7 = (uint64_t *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v19 = a2;
      }
      else {
        unint64_t v19 = *a1;
      }
      long long v20 = sub_2169049D0((uint64_t)a1, a2);
      long long v14 = v20;
      if (v19)
      {
        uint64_t v21 = 8 * v19;
        long long v22 = v20;
        do
        {
          uint64_t v23 = *v7++;
          *v22++ = v23;
          v21 -= 8;
        }
        while (v21);
      }
      if (v3 < a2)
      {
        long long v24 = *a3;
        uint64_t v25 = v3;
        do
          v20[v25++] = *v24;
        while (a2 != v25);
      }
      goto LABEL_31;
    }
    uint64_t v15 = 8 * a2;
    if (8 * a2 / a2 == 8)
    {
      long long v16 = sub_2169049D0((uint64_t)a1, a2);
      long long v14 = v16;
      unint64_t v17 = 0;
      long long v18 = *a3;
      do
      {
        v16[v17 / 8] = *v18;
        v17 += 8;
      }
      while (v15 != v17);
LABEL_31:
      if (v14 != (uint64_t *)a1[4])
      {
        sub_2168F83DC((uint64_t)a1);
        a1[4] = (unint64_t)v14;
      }
      *a1 = a2;
      return;
    }
  }

  sub_2168F845C(a1);
}

void *sub_2169049D0(uint64_t a1, unint64_t a2)
{
  sub_216851EE4((uint64_t)&v7, "VtArray::_AllocateNew", "value_type *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>::_AllocateNew(size_t) [T = pxrInternal__aapl__pxrReserved__::GfQuath]");
  if (a2 > 0x1FFFFFFFFFFFFFFDLL) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 8 * a2 + 16;
  }
  unint64_t v4 = operator new(v3);
  *unint64_t v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_216904A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_216904A70(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    if (*((void *)this + 3) || (unint64_t v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::GfQuath]", a3);
      uint64_t v6 = (uint64_t *)*((void *)this + 4);
      uint64_t v7 = *(void *)this;
      int v8 = sub_2169049D0((uint64_t)this, *(void *)this);
      unint64_t v9 = v8;
      if (v7)
      {
        uint64_t v10 = 8 * v7;
        uint64_t v11 = v8;
        do
        {
          uint64_t v12 = *v6++;
          *v11++ = v12;
          v10 -= 8;
        }
        while (v10);
      }
      sub_2168F83DC((uint64_t)this);
      *((void *)this + 4) = v9;
    }
  }
}

__n128 sub_216904B08(pxrInternal__aapl__pxrReserved__::VtValue *a1, __n128 *a2)
{
  if ((sub_216903B7C(a1) & 1) == 0)
  {
    uint64_t v11 = 0;
    memset(v10, 0, sizeof(v10));
    sub_216904BC0(a1, (uint64_t)v10);
    sub_2168F83DC((uint64_t)v10);
  }
  unint64_t v4 = (__n128 *)sub_216905104(a1);
  unint64_t v5 = v4[2].n128_u64[0];
  v4[2].n128_u64[0] = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = v5;
  unint64_t v6 = v4[1].n128_u64[0];
  __n128 result = *v4;
  unint64_t v8 = a2[1].n128_u64[0];
  *unint64_t v4 = *a2;
  v4[1].n128_u64[0] = v8;
  *a2 = result;
  a2[1].n128_u64[0] = v6;
  unint64_t v9 = v4[1].n128_u64[1];
  v4[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = v9;
  return result;
}

void sub_216904BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_216904BC0(void *a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  sub_2168EDEE4((uint64_t)v5, (uint64_t)a1);
  a1[1] = off_26C74F788;
  sub_2168F8DBC(a1, a2);
  if (v6) {
    (*(void (**)(unsigned char *))(v6 + 32))(v5);
  }
  return a1;
}