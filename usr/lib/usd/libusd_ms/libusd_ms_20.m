void pxrInternal__aapl__pxrReserved__::HdCameraSchema::GetHorizontalApertureOffset(pxrInternal__aapl__pxrReserved__::HdCameraSchema *this@<X0>, void *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *v4;
  atomic_uint *v5;
  atomic_uint *v6;
  atomic_uint *v7;

  v4 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  if (!v4) {
    v4 = sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  }
  v5 = (atomic_uint *)*((void *)v4 + 4);
  v7 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      v7 = v6;
    }
  }
  sub_2171A1C50((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdCameraSchema::GetVerticalApertureOffset(pxrInternal__aapl__pxrReserved__::HdCameraSchema *this@<X0>, void *a2@<X8>)
{
  v4 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  if (!v4) {
    v4 = sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  }
  v5 = (atomic_uint *)*((void *)v4 + 5);
  v7 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      v7 = v6;
    }
  }
  sub_2171A1C50((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdCameraSchema::GetFocalLength(pxrInternal__aapl__pxrReserved__::HdCameraSchema *this@<X0>, void *a2@<X8>)
{
  v4 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  if (!v4) {
    v4 = sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  }
  v5 = (atomic_uint *)*((void *)v4 + 6);
  v7 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      v7 = v6;
    }
  }
  sub_2171A1C50((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdCameraSchema::GetClippingRange(pxrInternal__aapl__pxrReserved__::HdCameraSchema *this@<X0>, void *a2@<X8>)
{
  v4 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  if (!v4) {
    v4 = sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  }
  v5 = (atomic_uint *)*((void *)v4 + 7);
  v7 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      v7 = v6;
    }
  }
  sub_2171A204C((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_2171A204C(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (v3)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v3 + 24))(&v4);
    sub_2171A3EB8((uint64_t)&v4, a2);
    if (v5) {
      sub_216784EC4(v5);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

void pxrInternal__aapl__pxrReserved__::HdCameraSchema::GetClippingPlanes(pxrInternal__aapl__pxrReserved__::HdCameraSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  }
  v5 = (atomic_uint *)*((void *)v4 + 8);
  v7 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      v7 = v6;
    }
  }
  sub_2171A2178((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_2171A2178(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (v3)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v3 + 24))(&v4);
    sub_2171A3F48((uint64_t)&v4, a2);
    if (v5) {
      sub_216784EC4(v5);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

void pxrInternal__aapl__pxrReserved__::HdCameraSchema::GetFStop(pxrInternal__aapl__pxrReserved__::HdCameraSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  }
  v5 = (atomic_uint *)*((void *)v4 + 9);
  v7 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      v7 = v6;
    }
  }
  sub_2171A1C50((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdCameraSchema::GetFocusDistance(pxrInternal__aapl__pxrReserved__::HdCameraSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  }
  v5 = (atomic_uint *)*((void *)v4 + 10);
  v7 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      v7 = v6;
    }
  }
  sub_2171A1C50((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdCameraSchema::GetShutterOpen(pxrInternal__aapl__pxrReserved__::HdCameraSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  }
  v5 = (atomic_uint *)*((void *)v4 + 11);
  v7 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      v7 = v6;
    }
  }
  sub_2171A240C((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_2171A240C(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (v3)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v3 + 24))(&v4);
    sub_2171A3FD8((uint64_t)&v4, a2);
    if (v5) {
      sub_216784EC4(v5);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

void pxrInternal__aapl__pxrReserved__::HdCameraSchema::GetShutterClose(pxrInternal__aapl__pxrReserved__::HdCameraSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  }
  v5 = (atomic_uint *)*((void *)v4 + 12);
  v7 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      v7 = v6;
    }
  }
  sub_2171A240C((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdCameraSchema::GetExposure(pxrInternal__aapl__pxrReserved__::HdCameraSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  }
  v5 = (atomic_uint *)*((void *)v4 + 13);
  v7 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      v7 = v6;
    }
  }
  sub_2171A1C50((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdCameraSchema::GetFocusOn(pxrInternal__aapl__pxrReserved__::HdCameraSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  }
  v5 = (atomic_uint *)*((void *)v4 + 14);
  v7 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      v7 = v6;
    }
  }
  sub_2171A26A0((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_2171A26A0(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (v3)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v3 + 24))(&v4);
    sub_2171A4068((uint64_t)&v4, a2);
    if (v5) {
      sub_216784EC4(v5);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

void pxrInternal__aapl__pxrReserved__::HdCameraSchema::GetDofAspect(pxrInternal__aapl__pxrReserved__::HdCameraSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  }
  v5 = (atomic_uint *)*((void *)v4 + 15);
  v7 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      v7 = v6;
    }
  }
  sub_2171A1C50((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdCameraSchema::GetSplitDiopter(pxrInternal__aapl__pxrReserved__::HdCameraSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  }
  v5 = (atomic_uint *)*((void *)v4 + 16);
  v10 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      v10 = v6;
    }
  }
  sub_217199340((uint64_t *)this, &v11);
  uint64_t v8 = v11;
  v7 = v12;
  if (v12)
  {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    sub_216784EC4(v7);
    v9 = v12;
    *a2 = v8;
    a2[1] = v7;
    if (v9) {
      sub_216784EC4(v9);
    }
  }
  else
  {
    *a2 = v11;
    a2[1] = 0;
  }
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdCameraSchema::GetLensDistortion(pxrInternal__aapl__pxrReserved__::HdCameraSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  }
  v5 = (atomic_uint *)*((void *)v4 + 17);
  v10 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      v10 = v6;
    }
  }
  sub_217199340((uint64_t *)this, &v11);
  uint64_t v8 = v11;
  v7 = v12;
  if (v12)
  {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    sub_216784EC4(v7);
    v9 = v12;
    *a2 = v8;
    a2[1] = v7;
    if (v9) {
      sub_216784EC4(v9);
    }
  }
  else
  {
    *a2 = v11;
    a2[1] = 0;
  }
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdCameraSchema::BuildRetained(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, uint64_t *a7@<X6>, uint64_t *a8@<X7>, _OWORD *a9@<X8>, uint64_t *a10, uint64_t *a11, uint64_t *a12, uint64_t *a13, uint64_t *a14, uint64_t *a15, uint64_t *a16, uint64_t *a17, uint64_t *a18)
{
  uint64_t v136 = *MEMORY[0x263EF8340];
  uint64_t v135 = 0;
  memset(v134, 0, sizeof(v134));
  memset(v133, 0, sizeof(v133));
  if (*a1)
  {
    v26 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    if (!v26) {
      v26 = sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    }
    sub_2168D2318(v134, (void *)v26 + 1);
    uint64_t v28 = *a1;
    uint64_t v27 = a1[1];
    if (v27) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
    }
    v29 = (std::__shared_weak_count *)*((void *)&v133[0] + 1);
    *(void *)&v133[0] = v28;
    *((void *)&v133[0] + 1) = v27;
    if (v29) {
      sub_216784EC4(v29);
    }
    uint64_t v30 = 1;
  }
  else
  {
    uint64_t v30 = 0;
  }
  if (*a2)
  {
    v31 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    if (!v31) {
      v31 = sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    }
    sub_2168D2318((void *)((unint64_t)v134 | (8 * v30)), (void *)v31 + 2);
    uint64_t v32 = v30 + 1;
    v33 = &v133[v30];
    uint64_t v35 = *a2;
    uint64_t v34 = a2[1];
    if (v34) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v34 + 8), 1uLL, memory_order_relaxed);
    }
    v36 = (std::__shared_weak_count *)v33[1];
    void *v33 = v35;
    v33[1] = v34;
    if (v36) {
      sub_216784EC4(v36);
    }
  }
  else
  {
    uint64_t v32 = v30;
  }
  if (*a3)
  {
    v37 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    if (!v37) {
      v37 = sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    }
    sub_2168D2318((void *)v134 + v32, (void *)v37 + 3);
    uint64_t v38 = v32 + 1;
    v39 = &v133[v32];
    uint64_t v41 = *a3;
    uint64_t v40 = a3[1];
    if (v40) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v40 + 8), 1uLL, memory_order_relaxed);
    }
    v42 = (std::__shared_weak_count *)v39[1];
    void *v39 = v41;
    v39[1] = v40;
    if (v42) {
      sub_216784EC4(v42);
    }
  }
  else
  {
    uint64_t v38 = v32;
  }
  if (*a4)
  {
    v43 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    if (!v43) {
      v43 = sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    }
    sub_2168D2318((void *)v134 + v38, (void *)v43 + 4);
    uint64_t v44 = v38 + 1;
    v45 = &v133[v38];
    uint64_t v47 = *a4;
    uint64_t v46 = a4[1];
    if (v46) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v46 + 8), 1uLL, memory_order_relaxed);
    }
    v48 = (std::__shared_weak_count *)v45[1];
    void *v45 = v47;
    v45[1] = v46;
    if (v48) {
      sub_216784EC4(v48);
    }
  }
  else
  {
    uint64_t v44 = v38;
  }
  if (*a5)
  {
    v49 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    if (!v49) {
      v49 = sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    }
    sub_2168D2318((void *)v134 + v44, (void *)v49 + 5);
    unint64_t v50 = v44 + 1;
    v51 = &v133[v44];
    uint64_t v53 = *a5;
    uint64_t v52 = a5[1];
    if (v52) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v52 + 8), 1uLL, memory_order_relaxed);
    }
    v54 = (std::__shared_weak_count *)v51[1];
    void *v51 = v53;
    v51[1] = v52;
    if (v54) {
      sub_216784EC4(v54);
    }
  }
  else
  {
    unint64_t v50 = v44;
  }
  if (*a6)
  {
    v55 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    if (!v55) {
      v55 = sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    }
    sub_2168D2318((void *)v134 + v50, (void *)v55 + 6);
    unint64_t v56 = v50 + 1;
    v57 = &v133[v50];
    uint64_t v59 = *a6;
    uint64_t v58 = a6[1];
    if (v58) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v58 + 8), 1uLL, memory_order_relaxed);
    }
    v60 = (std::__shared_weak_count *)v57[1];
    void *v57 = v59;
    v57[1] = v58;
    if (v60) {
      sub_216784EC4(v60);
    }
  }
  else
  {
    unint64_t v56 = v50;
  }
  if (*a7)
  {
    v61 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    if (!v61) {
      v61 = sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    }
    sub_2168D2318((void *)v134 + v56, (void *)v61 + 7);
    unint64_t v62 = v56 + 1;
    v63 = &v133[v56];
    uint64_t v65 = *a7;
    uint64_t v64 = a7[1];
    if (v64) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v64 + 8), 1uLL, memory_order_relaxed);
    }
    v66 = (std::__shared_weak_count *)v63[1];
    void *v63 = v65;
    v63[1] = v64;
    if (v66) {
      sub_216784EC4(v66);
    }
  }
  else
  {
    unint64_t v62 = v56;
  }
  if (*a8)
  {
    v67 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    if (!v67) {
      v67 = sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    }
    sub_2168D2318((void *)v134 + v62, (void *)v67 + 8);
    unint64_t v68 = v62 + 1;
    v69 = &v133[v62];
    uint64_t v71 = *a8;
    uint64_t v70 = a8[1];
    if (v70) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v70 + 8), 1uLL, memory_order_relaxed);
    }
    v72 = (std::__shared_weak_count *)v69[1];
    void *v69 = v71;
    v69[1] = v70;
    if (v72) {
      sub_216784EC4(v72);
    }
  }
  else
  {
    unint64_t v68 = v62;
  }
  if (*a10)
  {
    v73 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    if (!v73) {
      v73 = sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    }
    sub_2168D2318((void *)v134 + v68, (void *)v73 + 9);
    unint64_t v74 = v68 + 1;
    v75 = &v133[v68];
    uint64_t v77 = *a10;
    uint64_t v76 = a10[1];
    if (v76) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v76 + 8), 1uLL, memory_order_relaxed);
    }
    v78 = (std::__shared_weak_count *)v75[1];
    void *v75 = v77;
    v75[1] = v76;
    if (v78) {
      sub_216784EC4(v78);
    }
  }
  else
  {
    unint64_t v74 = v68;
  }
  if (*a11)
  {
    v79 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    if (!v79) {
      v79 = sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    }
    sub_2168D2318((void *)v134 + v74, (void *)v79 + 10);
    unint64_t v80 = v74 + 1;
    v81 = &v133[v74];
    uint64_t v83 = *a11;
    uint64_t v82 = a11[1];
    if (v82) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v82 + 8), 1uLL, memory_order_relaxed);
    }
    v84 = (std::__shared_weak_count *)v81[1];
    void *v81 = v83;
    v81[1] = v82;
    if (v84) {
      sub_216784EC4(v84);
    }
  }
  else
  {
    unint64_t v80 = v74;
  }
  if (*a12)
  {
    v85 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    if (!v85) {
      v85 = sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    }
    sub_2168D2318((void *)v134 + v80, (void *)v85 + 11);
    unint64_t v86 = v80 + 1;
    v87 = &v133[v80];
    uint64_t v89 = *a12;
    uint64_t v88 = a12[1];
    if (v88) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v88 + 8), 1uLL, memory_order_relaxed);
    }
    v90 = (std::__shared_weak_count *)v87[1];
    void *v87 = v89;
    v87[1] = v88;
    if (v90) {
      sub_216784EC4(v90);
    }
  }
  else
  {
    unint64_t v86 = v80;
  }
  if (*a13)
  {
    v91 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    if (!v91) {
      v91 = sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    }
    sub_2168D2318((void *)v134 + v86, (void *)v91 + 12);
    unint64_t v92 = v86 + 1;
    v93 = &v133[v86];
    uint64_t v95 = *a13;
    uint64_t v94 = a13[1];
    if (v94) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v94 + 8), 1uLL, memory_order_relaxed);
    }
    v96 = (std::__shared_weak_count *)v93[1];
    void *v93 = v95;
    v93[1] = v94;
    if (v96) {
      sub_216784EC4(v96);
    }
  }
  else
  {
    unint64_t v92 = v86;
  }
  if (*a14)
  {
    v97 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    if (!v97) {
      v97 = sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    }
    sub_2168D2318((void *)v134 + v92, (void *)v97 + 13);
    unint64_t v98 = v92 + 1;
    v99 = &v133[v92];
    uint64_t v101 = *a14;
    uint64_t v100 = a14[1];
    if (v100) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v100 + 8), 1uLL, memory_order_relaxed);
    }
    v102 = (std::__shared_weak_count *)v99[1];
    void *v99 = v101;
    v99[1] = v100;
    if (v102) {
      sub_216784EC4(v102);
    }
  }
  else
  {
    unint64_t v98 = v92;
  }
  if (*a15)
  {
    v103 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    if (!v103) {
      v103 = sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    }
    sub_2168D2318((void *)v134 + v98, (void *)v103 + 14);
    unint64_t v104 = v98 + 1;
    v105 = &v133[v98];
    uint64_t v107 = *a15;
    uint64_t v106 = a15[1];
    if (v106) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v106 + 8), 1uLL, memory_order_relaxed);
    }
    v108 = (std::__shared_weak_count *)v105[1];
    void *v105 = v107;
    v105[1] = v106;
    if (v108) {
      sub_216784EC4(v108);
    }
  }
  else
  {
    unint64_t v104 = v98;
  }
  if (*a16)
  {
    v109 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    if (!v109) {
      v109 = sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    }
    sub_2168D2318((void *)v134 + v104, (void *)v109 + 15);
    unint64_t v110 = v104 + 1;
    v111 = &v133[v104];
    uint64_t v113 = *a16;
    uint64_t v112 = a16[1];
    if (v112) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v112 + 8), 1uLL, memory_order_relaxed);
    }
    v114 = (std::__shared_weak_count *)v111[1];
    void *v111 = v113;
    v111[1] = v112;
    if (v114) {
      sub_216784EC4(v114);
    }
  }
  else
  {
    unint64_t v110 = v104;
  }
  if (*a17)
  {
    v115 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    if (!v115) {
      v115 = sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    }
    sub_2168D2318((void *)v134 + v110, (void *)v115 + 16);
    unint64_t v116 = v110 + 1;
    v117 = &v133[v110];
    uint64_t v119 = *a17;
    uint64_t v118 = a17[1];
    if (v118) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v118 + 8), 1uLL, memory_order_relaxed);
    }
    v120 = (std::__shared_weak_count *)v117[1];
    void *v117 = v119;
    v117[1] = v118;
    if (v120) {
      sub_216784EC4(v120);
    }
  }
  else
  {
    unint64_t v116 = v110;
  }
  if (*a18)
  {
    v121 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    if (!v121) {
      v121 = sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    }
    sub_2168D2318((void *)v134 + v116, (void *)v121 + 17);
    unint64_t v122 = v116 + 1;
    v123 = &v133[v116];
    uint64_t v125 = *a18;
    uint64_t v124 = a18[1];
    if (v124) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v124 + 8), 1uLL, memory_order_relaxed);
    }
    v126 = (std::__shared_weak_count *)v123[1];
    void *v123 = v125;
    v123[1] = v124;
    if (v126) {
      sub_216784EC4(v126);
    }
  }
  else
  {
    unint64_t v122 = v116;
  }
  pxrInternal__aapl__pxrReserved__::HdRetainedContainerDataSource::New(v122, (uint64_t *)v134, (uint64_t *)v133, &v132);
  *a9 = v132;
  for (uint64_t i = 264; i != -8; i -= 16)
  {
    v128 = *(std::__shared_weak_count **)((char *)v133 + i);
    if (v128) {
      sub_216784EC4(v128);
    }
  }
  for (uint64_t j = 128; j != -8; j -= 8)
  {
    uint64_t v130 = *(void *)((char *)v134 + j);
    if ((v130 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v130 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
}

void sub_2171A31F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v15 = 264;
  while (1)
  {
    v16 = *(std::__shared_weak_count **)(&a13 + v15);
    if (v16) {
      sub_216784EC4(v16);
    }
    v15 -= 16;
    if (v15 == -8)
    {
      uint64_t v17 = 128;
      while (1)
      {
        uint64_t v18 = *(void *)(v13 - 240 + v17);
        if ((v18 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        v17 -= 8;
        if (v17 == -8) {
          _Unwind_Resume(exception_object);
        }
      }
    }
  }
}

void *pxrInternal__aapl__pxrReserved__::HdCameraSchema::Builder::SetProjection(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  v5 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdCameraSchema::Builder::SetHorizontalAperture(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  v5 = *(std::__shared_weak_count **)(a1 + 24);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdCameraSchema::Builder::SetVerticalAperture(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  v5 = *(std::__shared_weak_count **)(a1 + 40);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdCameraSchema::Builder::SetHorizontalApertureOffset(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  v5 = *(std::__shared_weak_count **)(a1 + 56);
  *(void *)(a1 + 48) = v4;
  *(void *)(a1 + 56) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdCameraSchema::Builder::SetVerticalApertureOffset(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  v5 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = v4;
  *(void *)(a1 + 72) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdCameraSchema::Builder::SetFocalLength(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  v5 = *(std::__shared_weak_count **)(a1 + 88);
  *(void *)(a1 + 80) = v4;
  *(void *)(a1 + 88) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdCameraSchema::Builder::SetClippingRange(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  v5 = *(std::__shared_weak_count **)(a1 + 104);
  *(void *)(a1 + 96) = v4;
  *(void *)(a1 + 104) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdCameraSchema::Builder::SetClippingPlanes(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  v5 = *(std::__shared_weak_count **)(a1 + 120);
  *(void *)(a1 + 112) = v4;
  *(void *)(a1 + 120) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdCameraSchema::Builder::SetFStop(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  v5 = *(std::__shared_weak_count **)(a1 + 136);
  *(void *)(a1 + 128) = v4;
  *(void *)(a1 + 136) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdCameraSchema::Builder::SetFocusDistance(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  v5 = *(std::__shared_weak_count **)(a1 + 152);
  *(void *)(a1 + 144) = v4;
  *(void *)(a1 + 152) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdCameraSchema::Builder::SetShutterOpen(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  v5 = *(std::__shared_weak_count **)(a1 + 168);
  *(void *)(a1 + 160) = v4;
  *(void *)(a1 + 168) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdCameraSchema::Builder::SetShutterClose(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  v5 = *(std::__shared_weak_count **)(a1 + 184);
  *(void *)(a1 + 176) = v4;
  *(void *)(a1 + 184) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdCameraSchema::Builder::SetExposure(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  v5 = *(std::__shared_weak_count **)(a1 + 200);
  *(void *)(a1 + 192) = v4;
  *(void *)(a1 + 200) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdCameraSchema::Builder::SetFocusOn(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  v5 = *(std::__shared_weak_count **)(a1 + 216);
  *(void *)(a1 + 208) = v4;
  *(void *)(a1 + 216) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdCameraSchema::Builder::SetDofAspect(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  v5 = *(std::__shared_weak_count **)(a1 + 232);
  *(void *)(a1 + 224) = v4;
  *(void *)(a1 + 232) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdCameraSchema::Builder::SetSplitDiopter(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  v5 = *(std::__shared_weak_count **)(a1 + 248);
  *(void *)(a1 + 240) = v4;
  *(void *)(a1 + 248) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdCameraSchema::Builder::SetLensDistortion(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  v5 = *(std::__shared_weak_count **)(a1 + 264);
  *(void *)(a1 + 256) = v4;
  *(void *)(a1 + 264) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::HdCameraSchema::Builder::Build(pxrInternal__aapl__pxrReserved__::HdCameraSchema::Builder *this@<X0>, _OWORD *a2@<X8>)
{
}

void pxrInternal__aapl__pxrReserved__::HdCameraSchema::GetFromParent(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens)) {
      sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v3 + 24))(&v8, v3);
    sub_2171997C0((uint64_t)&v8, &v10);
    uint64_t v6 = v10;
    v5 = v11;
    if (v11)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_216784EC4(v5);
      v7 = v11;
      *a2 = v6;
      a2[1] = v5;
      if (v7) {
        sub_216784EC4(v7);
      }
    }
    else
    {
      *a2 = v10;
      a2[1] = 0;
    }
    if (v9) {
      sub_216784EC4(v9);
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    *a2 = 0;
    a2[1] = 0;
  }
}

pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::HdCameraSchema::GetSchemaToken(pxrInternal__aapl__pxrReserved__::HdCameraSchema *this)
{
  result = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  if (!result) {
    return sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::HdCameraSchema::GetDefaultLocator(pxrInternal__aapl__pxrReserved__::HdCameraSchema *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B96A00, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B96A00))
  {
    v2 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    if (!v2) {
      v2 = sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    }
    pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&unk_267B969C8, v2);
    __cxa_atexit((void (*)(void *))sub_217199930, &unk_267B969C8, &dword_216758000);
    __cxa_guard_release(&qword_267B96A00);
  }
  return &unk_267B969C8;
}

void sub_2171A3964(_Unwind_Exception *a1)
{
}

_DWORD *pxrInternal__aapl__pxrReserved__::HdCameraSchema::GetShutterOpenLocator(pxrInternal__aapl__pxrReserved__::HdCameraSchema *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B96A40, memory_order_acquire) & 1) == 0)
  {
    v2 = (pxrInternal__aapl__pxrReserved__::HdCameraSchema *)__cxa_guard_acquire(&qword_267B96A40);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::HdCameraSchema::GetDefaultLocator(v2);
      uint64_t v3 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
      if (!v3) {
        uint64_t v3 = sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
      }
      pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::Append((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&unk_267B969C8, (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)((char *)v3 + 88), dword_267B96A08);
      __cxa_atexit((void (*)(void *))sub_217199930, dword_267B96A08, &dword_216758000);
      __cxa_guard_release(&qword_267B96A40);
    }
  }
  return dword_267B96A08;
}

void sub_2171A3A30(_Unwind_Exception *a1)
{
}

_DWORD *pxrInternal__aapl__pxrReserved__::HdCameraSchema::GetShutterCloseLocator(pxrInternal__aapl__pxrReserved__::HdCameraSchema *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B96A80, memory_order_acquire) & 1) == 0)
  {
    v2 = (pxrInternal__aapl__pxrReserved__::HdCameraSchema *)__cxa_guard_acquire(&qword_267B96A80);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::HdCameraSchema::GetDefaultLocator(v2);
      uint64_t v3 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
      if (!v3) {
        uint64_t v3 = sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
      }
      pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::Append((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&unk_267B969C8, (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)((char *)v3 + 96), dword_267B96A48);
      __cxa_atexit((void (*)(void *))sub_217199930, dword_267B96A48, &dword_216758000);
      __cxa_guard_release(&qword_267B96A80);
    }
  }
  return dword_267B96A48;
}

void sub_2171A3AFC(_Unwind_Exception *a1)
{
}

void pxrInternal__aapl__pxrReserved__::HdCameraSchema::BuildProjectionDataSource(pxrInternal__aapl__pxrReserved__::HdCameraSchema *this@<X0>, uint64_t a2@<X8>)
{
  v5 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  if (!v5) {
    v5 = sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  }
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) == (*((void *)v5 + 18) & 0xFFFFFFFFFFFFFFF8))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B96A98, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_267B96A98))
    {
      sub_2171A3CE4((uint64_t *)this, &qword_267B96A88);
      __cxa_atexit((void (*)(void *))sub_2171A3D6C, &qword_267B96A88, &dword_216758000);
      __cxa_guard_release(&qword_267B96A98);
    }
    v7 = &qword_267B96A88;
  }
  else
  {
    uint64_t v6 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    if (!v6) {
      uint64_t v6 = sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    }
    if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) != (*((void *)v6 + 19) & 0xFFFFFFFFFFFFFFF8))
    {
      sub_2171A3CE4((uint64_t *)this, &v10);
      *(_OWORD *)a2 = v10;
      return;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B96AB0, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_267B96AB0))
    {
      sub_2171A3CE4((uint64_t *)this, &qword_267B96AA0);
      __cxa_atexit((void (*)(void *))sub_2171A3D6C, &qword_267B96AA0, &dword_216758000);
      __cxa_guard_release(&qword_267B96AB0);
    }
    v7 = &qword_267B96AA0;
  }
  uint64_t v9 = *v7;
  uint64_t v8 = v7[1];
  *(void *)a2 = v9;
  *(void *)(a2 + 8) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
}

void sub_2171A3CBC(_Unwind_Exception *a1)
{
}

void *sub_2171A3CE4@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x10uLL);
  uint64_t v5 = *a1;
  void *v4 = &unk_26C77C218;
  v4[1] = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v4[1] &= 0xFFFFFFFFFFFFFFF8;
  }

  return sub_2171A41F0(a2, (uint64_t)v4);
}

uint64_t sub_2171A3D6C(uint64_t a1)
{
  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    sub_216784EC4(v2);
  }
  return a1;
}

pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *sub_2171A3D9C(atomic_ullong *a1)
{
  result = sub_2171A3DE4();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType::~HdCameraSchemaTokens_StaticTokenType(result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *sub_2171A3DE4()
{
  v0 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)operator new(0xB8uLL);
  pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType::HdCameraSchemaTokens_StaticTokenType(v0);
  return v0;
}

void sub_2171A3E14(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_2171A3E28@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  result = *(void **)a1;
  if (result
    && (result = __dynamic_cast(result, (const struct __class_type_info *)&unk_26C77BD10, (const struct __class_type_info *)&unk_26C77C190, 0)) != 0)
  {
    uint64_t v5 = *(void *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void *sub_2171A3EB8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  result = *(void **)a1;
  if (result
    && (result = __dynamic_cast(result, (const struct __class_type_info *)&unk_26C77BD10, (const struct __class_type_info *)&unk_26C77C1A8, 0)) != 0)
  {
    uint64_t v5 = *(void *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void *sub_2171A3F48@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  result = *(void **)a1;
  if (result
    && (result = __dynamic_cast(result, (const struct __class_type_info *)&unk_26C77BD10, (const struct __class_type_info *)&unk_26C77C1C0, 0)) != 0)
  {
    uint64_t v5 = *(void *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void *sub_2171A3FD8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  result = *(void **)a1;
  if (result
    && (result = __dynamic_cast(result, (const struct __class_type_info *)&unk_26C77BD10, (const struct __class_type_info *)&unk_26C77C1D8, 0)) != 0)
  {
    uint64_t v5 = *(void *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void *sub_2171A4068@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  result = *(void **)a1;
  if (result
    && (result = __dynamic_cast(result, (const struct __class_type_info *)&unk_26C77BD10, (const struct __class_type_info *)&unk_26C77C1F0, 0)) != 0)
  {
    uint64_t v5 = *(void *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void sub_2171A40F8(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *a1)
{
  *(void *)a1 = &unk_26C77C218;
  uint64_t v1 = *((void *)a1 + 1);
  if ((v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(a1);
}

void sub_2171A4130(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *a1)
{
  *(void *)a1 = &unk_26C77C218;
  uint64_t v1 = *((void *)a1 + 1);
  if ((v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(a1);

  operator delete(v2);
}

uint64_t sub_2171A418C@<X0>(uint64_t result@<X0>, atomic_uint **a2@<X8>)
{
  v2 = *(atomic_uint **)(result + 8);
  *a2 = v2;
  a2[1] = (atomic_uint *)((char *)&off_26C750C70 + 1);
  if ((v2 & 7) != 0)
  {
    uint64_t v3 = (atomic_uint *)((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v3, 2u, memory_order_relaxed) & 1) == 0) {
      *a2 = v3;
    }
  }
  return result;
}

uint64_t sub_2171A41C0()
{
  return 0;
}

uint64_t sub_2171A41C8@<X0>(uint64_t result@<X0>, atomic_uint **a2@<X8>)
{
  v2 = *(atomic_uint **)(result + 8);
  *a2 = v2;
  if ((v2 & 7) != 0)
  {
    uint64_t v3 = (atomic_uint *)((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v3, 2u, memory_order_relaxed) & 1) == 0) {
      *a2 = v3;
    }
  }
  return result;
}

void *sub_2171A41F0(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  void *v4 = &unk_26C77C268;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_2171A4248(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_2173254E8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_2171A4264(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171A428C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2171A42BC(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77C2B8)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens_StaticTokenType::~HdCapsuleSchemaTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens_StaticTokenType *this)
{
  long long v10 = (void **)((char *)this + 72);
  sub_216889A04(&v10);
  uint64_t v2 = *((void *)this + 8);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 7);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *((void *)this + 6);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *((void *)this + 5);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v6 = *((void *)this + 4);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v7 = *((void *)this + 3);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v8 = *((void *)this + 2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v9 = *((void *)this + 1);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens_StaticTokenType::HdCapsuleSchemaTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens_StaticTokenType *this)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v2 = (uint64_t *)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "capsule", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2, "height", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 16, "radius", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 24, "radiusTop", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 32, "radiusBottom", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 40, "axis", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 48, "X", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 56, "Y", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 64, "Z", 0);
  uint64_t v3 = *(void *)this;
  uint64_t v18 = v3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v18 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v4 = *v2;
  uint64_t v19 = v4;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v19 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v5 = *((void *)this + 2);
  uint64_t v20 = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v20 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v6 = *((void *)this + 3);
  uint64_t v21 = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v21 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = *((void *)this + 4);
  uint64_t v22 = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v22 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v8 = *((void *)this + 5);
  uint64_t v23 = v8;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v23 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v9 = *((void *)this + 6);
  uint64_t v24 = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v24 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v10 = *((void *)this + 7);
  uint64_t v25 = v10;
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v25 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v11 = *((void *)this + 8);
  uint64_t v26 = v11;
  if ((v11 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v26 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  v12 = (char *)operator new(0x48uLL);
  uint64_t v13 = 0;
  *((void *)this + 9) = v12;
  *((void *)this + 10) = v12;
  *((void *)this + 11) = v12 + 72;
  do
  {
    uint64_t v14 = *(uint64_t *)((char *)&v18 + v13);
    *(void *)&v12[v13] = v14;
    if ((v14 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v12[v13] &= 0xFFFFFFFFFFFFFFF8;
    }
    v13 += 8;
  }
  while (v13 != 72);
  *((void *)this + 10) = v12 + 72;
  for (uint64_t i = 64; i != -8; i -= 8)
  {
    uint64_t v16 = *(uint64_t *)((char *)&v18 + i);
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return this;
}

void sub_2171A4788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  sub_216889A04(&a9);
  uint64_t v21 = 64;
  while (1)
  {
    uint64_t v22 = *(void *)(&a11 + v21);
    if ((v22 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v21 -= 8;
    if (v21 == -8)
    {
      if ((*v19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void pxrInternal__aapl__pxrReserved__::HdCapsuleSchema::GetHeight(pxrInternal__aapl__pxrReserved__::HdCapsuleSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171A55B0(&pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens);
  }
  uint64_t v5 = (atomic_uint *)*((void *)v4 + 1);
  uint64_t v7 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v7 = v6;
    }
  }
  sub_2171A240C((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdCapsuleSchema::GetRadius(pxrInternal__aapl__pxrReserved__::HdCapsuleSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171A55B0(&pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens);
  }
  uint64_t v5 = (atomic_uint *)*((void *)v4 + 2);
  uint64_t v7 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v7 = v6;
    }
  }
  sub_2171A240C((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdCapsuleSchema::GetRadiusTop(pxrInternal__aapl__pxrReserved__::HdCapsuleSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171A55B0(&pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens);
  }
  uint64_t v5 = (atomic_uint *)*((void *)v4 + 3);
  uint64_t v7 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v7 = v6;
    }
  }
  sub_2171A240C((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdCapsuleSchema::GetRadiusBottom(pxrInternal__aapl__pxrReserved__::HdCapsuleSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171A55B0(&pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens);
  }
  uint64_t v5 = (atomic_uint *)*((void *)v4 + 4);
  uint64_t v7 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v7 = v6;
    }
  }
  sub_2171A240C((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdCapsuleSchema::GetAxis(pxrInternal__aapl__pxrReserved__::HdCapsuleSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171A55B0(&pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens);
  }
  uint64_t v5 = (atomic_uint *)*((void *)v4 + 5);
  uint64_t v7 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v7 = v6;
    }
  }
  sub_21719B418((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdCapsuleSchema::BuildRetained(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, _OWORD *a6@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  uint64_t v48 = 0;
  memset(v47, 0, sizeof(v47));
  memset(v46, 0, sizeof(v46));
  if (*a1)
  {
    v12 = (pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens);
    if (!v12) {
      v12 = sub_2171A55B0(&pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens);
    }
    sub_2168D2318(v47, (void *)v12 + 1);
    uint64_t v14 = *a1;
    uint64_t v13 = a1[1];
    if (v13) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v15 = (std::__shared_weak_count *)*((void *)&v46[0] + 1);
    *(void *)&v46[0] = v14;
    *((void *)&v46[0] + 1) = v13;
    if (v15) {
      sub_216784EC4(v15);
    }
    uint64_t v16 = 1;
  }
  else
  {
    uint64_t v16 = 0;
  }
  if (*a2)
  {
    uint64_t v17 = (pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens);
    if (!v17) {
      uint64_t v17 = sub_2171A55B0(&pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens);
    }
    sub_2168D2318((void *)((unint64_t)v47 | (8 * v16)), (void *)v17 + 2);
    uint64_t v18 = v16 + 1;
    uint64_t v19 = &v46[v16];
    uint64_t v21 = *a2;
    uint64_t v20 = a2[1];
    if (v20) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v22 = (std::__shared_weak_count *)v19[1];
    *uint64_t v19 = v21;
    v19[1] = v20;
    if (v22) {
      sub_216784EC4(v22);
    }
  }
  else
  {
    uint64_t v18 = v16;
  }
  if (*a3)
  {
    uint64_t v23 = (pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens);
    if (!v23) {
      uint64_t v23 = sub_2171A55B0(&pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens);
    }
    sub_2168D2318((void *)v47 + v18, (void *)v23 + 3);
    unint64_t v24 = v18 + 1;
    uint64_t v25 = &v46[v18];
    uint64_t v27 = *a3;
    uint64_t v26 = a3[1];
    if (v26) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v28 = (std::__shared_weak_count *)v25[1];
    *uint64_t v25 = v27;
    v25[1] = v26;
    if (v28) {
      sub_216784EC4(v28);
    }
  }
  else
  {
    unint64_t v24 = v18;
  }
  if (*a4)
  {
    v29 = (pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens);
    if (!v29) {
      v29 = sub_2171A55B0(&pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens);
    }
    sub_2168D2318((void *)v47 + v24, (void *)v29 + 4);
    unint64_t v30 = v24 + 1;
    v31 = &v46[v24];
    uint64_t v33 = *a4;
    uint64_t v32 = a4[1];
    if (v32) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v32 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v34 = (std::__shared_weak_count *)v31[1];
    void *v31 = v33;
    v31[1] = v32;
    if (v34) {
      sub_216784EC4(v34);
    }
  }
  else
  {
    unint64_t v30 = v24;
  }
  if (*a5)
  {
    uint64_t v35 = (pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens);
    if (!v35) {
      uint64_t v35 = sub_2171A55B0(&pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens);
    }
    sub_2168D2318((void *)v47 + v30, (void *)v35 + 5);
    unint64_t v36 = v30 + 1;
    v37 = &v46[v30];
    uint64_t v39 = *a5;
    uint64_t v38 = a5[1];
    if (v38) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v38 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v40 = (std::__shared_weak_count *)v37[1];
    void *v37 = v39;
    v37[1] = v38;
    if (v40) {
      sub_216784EC4(v40);
    }
  }
  else
  {
    unint64_t v36 = v30;
  }
  pxrInternal__aapl__pxrReserved__::HdRetainedContainerDataSource::New(v36, (uint64_t *)v47, (uint64_t *)v46, &v45);
  *a6 = v45;
  for (uint64_t i = 72; i != -8; i -= 16)
  {
    v42 = *(std::__shared_weak_count **)((char *)v46 + i);
    if (v42) {
      sub_216784EC4(v42);
    }
  }
  for (uint64_t j = 32; j != -8; j -= 8)
  {
    uint64_t v44 = *(void *)((char *)v47 + j);
    if ((v44 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v44 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
}

void sub_2171A4F6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v22 = 72;
  while (1)
  {
    uint64_t v23 = *(std::__shared_weak_count **)(&a11 + v22);
    if (v23) {
      sub_216784EC4(v23);
    }
    v22 -= 16;
    if (v22 == -8)
    {
      uint64_t v24 = 32;
      while (1)
      {
        uint64_t v25 = *(void *)(&a21 + v24);
        if ((v25 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        v24 -= 8;
        if (v24 == -8) {
          _Unwind_Resume(exception_object);
        }
      }
    }
  }
}

void pxrInternal__aapl__pxrReserved__::HdCapsuleSchema::GetFromParent(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens)) {
      sub_2171A55B0(&pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens);
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v3 + 24))(&v8, v3);
    sub_2171997C0((uint64_t)&v8, &v10);
    uint64_t v6 = v10;
    uint64_t v5 = v11;
    if (v11)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_216784EC4(v5);
      uint64_t v7 = v11;
      *a2 = v6;
      a2[1] = v5;
      if (v7) {
        sub_216784EC4(v7);
      }
    }
    else
    {
      *a2 = v10;
      a2[1] = 0;
    }
    if (v9) {
      sub_216784EC4(v9);
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    *a2 = 0;
    a2[1] = 0;
  }
}

pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::HdCapsuleSchema::GetSchemaToken(pxrInternal__aapl__pxrReserved__::HdCapsuleSchema *this)
{
  uint64_t result = (pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens);
  if (!result) {
    return sub_2171A55B0(&pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens);
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::HdCapsuleSchema::GetDefaultLocator(pxrInternal__aapl__pxrReserved__::HdCapsuleSchema *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B96AF0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B96AF0))
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens);
    if (!v2) {
      uint64_t v2 = sub_2171A55B0(&pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens);
    }
    pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&unk_267B96AB8, v2);
    __cxa_atexit((void (*)(void *))sub_217199930, &unk_267B96AB8, &dword_216758000);
    __cxa_guard_release(&qword_267B96AF0);
  }
  return &unk_267B96AB8;
}

void sub_2171A519C(_Unwind_Exception *a1)
{
}

void pxrInternal__aapl__pxrReserved__::HdCapsuleSchema::BuildAxisDataSource(pxrInternal__aapl__pxrReserved__::HdCapsuleSchema *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens);
  if (!v5) {
    uint64_t v5 = sub_2171A55B0(&pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens);
  }
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) == (*((void *)v5 + 6) & 0xFFFFFFFFFFFFFFF8))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B96B08, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_267B96B08))
    {
      sub_2171A3CE4((uint64_t *)this, &qword_267B96AF8);
      __cxa_atexit((void (*)(void *))sub_2171A3D6C, &qword_267B96AF8, &dword_216758000);
      __cxa_guard_release(&qword_267B96B08);
    }
    uint64_t v8 = &qword_267B96AF8;
  }
  else
  {
    uint64_t v6 = (pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens);
    if (!v6) {
      uint64_t v6 = sub_2171A55B0(&pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens);
    }
    if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) == (*((void *)v6 + 7) & 0xFFFFFFFFFFFFFFF8))
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B96B20, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_267B96B20))
      {
        sub_2171A3CE4((uint64_t *)this, &qword_267B96B10);
        __cxa_atexit((void (*)(void *))sub_2171A3D6C, &qword_267B96B10, &dword_216758000);
        __cxa_guard_release(&qword_267B96B20);
      }
      uint64_t v8 = &qword_267B96B10;
    }
    else
    {
      uint64_t v7 = (pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens);
      if (!v7) {
        uint64_t v7 = sub_2171A55B0(&pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens);
      }
      if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) != (*((void *)v7 + 8) & 0xFFFFFFFFFFFFFFF8))
      {
        sub_2171A3CE4((uint64_t *)this, &v11);
        *(_OWORD *)a2 = v11;
        return;
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B96B38, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_267B96B38))
      {
        sub_2171A3CE4((uint64_t *)this, &qword_267B96B28);
        __cxa_atexit((void (*)(void *))sub_2171A3D6C, &qword_267B96B28, &dword_216758000);
        __cxa_guard_release(&qword_267B96B38);
      }
      uint64_t v8 = &qword_267B96B28;
    }
  }
  uint64_t v10 = *v8;
  uint64_t v9 = v8[1];
  *(void *)a2 = v10;
  *(void *)(a2 + 8) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
}

void sub_2171A53FC(_Unwind_Exception *a1)
{
}

void *pxrInternal__aapl__pxrReserved__::HdCapsuleSchema::Builder::SetHeight(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdCapsuleSchema::Builder::SetRadius(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 24);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdCapsuleSchema::Builder::SetRadiusTop(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 40);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdCapsuleSchema::Builder::SetRadiusBottom(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 56);
  *(void *)(a1 + 48) = v4;
  *(void *)(a1 + 56) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdCapsuleSchema::Builder::SetAxis(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = v4;
  *(void *)(a1 + 72) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::HdCapsuleSchema::Builder::Build(pxrInternal__aapl__pxrReserved__::HdCapsuleSchema::Builder *this@<X0>, _OWORD *a2@<X8>)
{
}

pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens_StaticTokenType *sub_2171A55B0(atomic_ullong *a1)
{
  uint64_t result = sub_2171A55F8();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens_StaticTokenType::~HdCapsuleSchemaTokens_StaticTokenType(result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens_StaticTokenType *sub_2171A55F8()
{
  v0 = (pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens_StaticTokenType *)operator new(0x60uLL);
  pxrInternal__aapl__pxrReserved__::HdCapsuleSchemaTokens_StaticTokenType::HdCapsuleSchemaTokens_StaticTokenType(v0);
  return v0;
}

void sub_2171A5628(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdCategoriesSchemaTokens_StaticTokenType::~HdCategoriesSchemaTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::HdCategoriesSchemaTokens_StaticTokenType *this)
{
  uint64_t v2 = (void **)((char *)this + 8);
  sub_216889A04(&v2);
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

{
  void **v2;

  uint64_t v2 = (void **)((char *)this + 8);
  sub_216889A04(&v2);
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

pxrInternal__aapl__pxrReserved__::HdCategoriesSchemaTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::HdCategoriesSchemaTokens_StaticTokenType::HdCategoriesSchemaTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::HdCategoriesSchemaTokens_StaticTokenType *this)
{
  uint64_t v2 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "categories", 0);
  uint64_t v3 = *v2;
  if ((*v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v3 &= 0xFFFFFFFFFFFFFFF8;
  }
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  uint64_t v4 = operator new(8uLL);
  *((void *)this + 1) = v4;
  *((void *)this + 2) = v4;
  void *v4 = v3;
  uint64_t v5 = v4 + 1;
  *((void *)this + 3) = v4 + 1;
  if ((v3 & 7) != 0)
  {
    if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
      *v4 &= 0xFFFFFFFFFFFFFFF8;
    }
    *((void *)this + 2) = v5;
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  else
  {
    *((void *)this + 2) = v5;
  }
  return this;
}

void sub_2171A57AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v11 = v10;
  sub_216889A04(&a9);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_2173242CC(v9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdCategoriesSchema::GetIncludedCategoryNames(pxrInternal__aapl__pxrReserved__::HdCategoriesSchema *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t v3 = *(void *)this;
  if (v3)
  {
    (*(void (**)(uint64_t **__return_ptr))(*(void *)v3 + 16))(&v11);
    sub_216F57EA8((uint64_t *)a2, v12 - v11);
    uint64_t v5 = v11;
    uint64_t v6 = v12;
    while (v5 != v6)
    {
      (*(void (**)(uint64_t *__return_ptr))(**(void **)this + 24))(&v7);
      sub_2171A4068((uint64_t)&v7, &v9);
      if (v8) {
        sub_216784EC4(v8);
      }
      if (v9 && (*v9)[4]((void **)v9, 0.0)) {
        sub_216F5A46C(a2, v5);
      }
      if (v10) {
        sub_216784EC4(v10);
      }
      ++v5;
    }
    uint64_t v9 = (unsigned int (***)(void **, double))&v11;
    sub_216889A04((void ***)&v9);
  }
}

void sub_2171A5924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  a12 = (void **)&a14;
  sub_216889A04(&a12);
  sub_2169B2E0C(v14);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::HdCategoriesSchema::IsIncludedInCategory(pxrInternal__aapl__pxrReserved__::HdCategoriesSchema *this, atomic_uint **a2)
{
  uint64_t v5 = *a2;
  if (((unint64_t)*a2 & 7) != 0)
  {
    uint64_t v2 = (atomic_uint *)((unint64_t)*a2 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v2, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v5 = v2;
    }
  }
  sub_2171A26A0((uint64_t *)this, &v6);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  BOOL v3 = v6 && ((*(uint64_t (**)(uint64_t, double))(*(void *)v6 + 32))(v6, 0.0) & 1) != 0;
  if (v7) {
    sub_216784EC4(v7);
  }
  return v3;
}

void sub_2171A5A28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_216784EC4(a12);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::HdCategoriesSchema::BuildRetained(pxrInternal__aapl__pxrReserved__::HdCategoriesSchema *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X2>, uint64_t *a3@<X1>, uint64_t *a4@<X3>, _OWORD *a5@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)qword_267B96B50, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(qword_267B96B50))
  {
    LOBYTE(v71) = 1;
    pxrInternal__aapl__pxrReserved__::HdRetainedTypedSampledDataSource<BOOL>::New(&v71, (uint64_t *)&xmmword_267B96B40);
    __cxa_atexit((void (*)(void *))sub_2171A615C, &xmmword_267B96B40, &dword_216758000);
    __cxa_guard_release(qword_267B96B50);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B96B70, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B96B70))
  {
    LOBYTE(v71) = 0;
    pxrInternal__aapl__pxrReserved__::HdRetainedTypedSampledDataSource<BOOL>::New(&v71, (uint64_t *)&xmmword_267B96B60);
    __cxa_atexit((void (*)(void *))sub_2171A615C, &xmmword_267B96B60, &dword_216758000);
    __cxa_guard_release(&qword_267B96B70);
  }
  unint64_t v68 = 0;
  v69 = 0;
  unint64_t v70 = 0;
  if (a3 && this && !a2)
  {
    sub_2171A618C((uint64_t *)&v68, (unint64_t)this);
    uint64_t v10 = xmmword_267B96B40;
    uint64_t v11 = this;
    do
    {
      uint64_t v12 = *((void *)&xmmword_267B96B40 + 1);
      if (*((void *)&xmmword_267B96B40 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_267B96B40 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v13 = v69;
      if ((unint64_t)v69 >= v70)
      {
        uint64_t v15 = (v69 - v68) >> 4;
        unint64_t v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 60) {
          sub_21677CB10();
        }
        uint64_t v17 = v70 - (void)v68;
        if ((uint64_t)(v70 - (void)v68) >> 3 > v16) {
          unint64_t v16 = v17 >> 3;
        }
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v16;
        }
        unint64_t v74 = &v70;
        uint64_t v19 = (char *)sub_216787EE0((uint64_t)&v70, v18);
        uint64_t v20 = &v19[16 * v15];
        *(void *)&long long v71 = v19;
        *((void *)&v71 + 1) = v20;
        v73 = &v19[16 * v21];
        *(void *)uint64_t v20 = v10;
        *((void *)v20 + 1) = v12;
        v72 = v20 + 16;
        sub_2171A640C((uint64_t *)&v68, &v71);
        uint64_t v14 = v69;
        sub_216788028((void **)&v71);
        uint64_t v10 = xmmword_267B96B40;
      }
      else
      {
        *(void *)v69 = v10;
        *((void *)v13 + 1) = v12;
        uint64_t v14 = v13 + 16;
      }
      v69 = v14;
      uint64_t v11 = (pxrInternal__aapl__pxrReserved__::HdCategoriesSchema *)((char *)v11 - 1);
    }
    while (v11);
    pxrInternal__aapl__pxrReserved__::HdRetainedContainerDataSource::New((unint64_t)this, a3, (uint64_t *)v68, &v71);
LABEL_37:
    *a5 = v71;
    goto LABEL_79;
  }
  if (!this && a2 && a4)
  {
    sub_2171A618C((uint64_t *)&v68, (unint64_t)a2);
    uint64_t v22 = xmmword_267B96B60;
    uint64_t v23 = a2;
    do
    {
      uint64_t v24 = *((void *)&xmmword_267B96B60 + 1);
      if (*((void *)&xmmword_267B96B60 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_267B96B60 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v25 = v69;
      if ((unint64_t)v69 >= v70)
      {
        uint64_t v27 = (v69 - v68) >> 4;
        unint64_t v28 = v27 + 1;
        if ((unint64_t)(v27 + 1) >> 60) {
          sub_21677CB10();
        }
        uint64_t v29 = v70 - (void)v68;
        if ((uint64_t)(v70 - (void)v68) >> 3 > v28) {
          unint64_t v28 = v29 >> 3;
        }
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v30 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v30 = v28;
        }
        unint64_t v74 = &v70;
        v31 = (char *)sub_216787EE0((uint64_t)&v70, v30);
        uint64_t v32 = &v31[16 * v27];
        *(void *)&long long v71 = v31;
        *((void *)&v71 + 1) = v32;
        v73 = &v31[16 * v33];
        *(void *)uint64_t v32 = v22;
        *((void *)v32 + 1) = v24;
        v72 = v32 + 16;
        sub_2171A640C((uint64_t *)&v68, &v71);
        uint64_t v26 = v69;
        sub_216788028((void **)&v71);
        uint64_t v22 = xmmword_267B96B60;
      }
      else
      {
        *(void *)v69 = v22;
        *((void *)v25 + 1) = v24;
        uint64_t v26 = v25 + 16;
      }
      v69 = v26;
      uint64_t v23 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v23 - 1);
    }
    while (v23);
    pxrInternal__aapl__pxrReserved__::HdRetainedContainerDataSource::New((unint64_t)a2, a4, (uint64_t *)v68, &v71);
    goto LABEL_37;
  }
  uint64_t v65 = 0;
  v66 = 0;
  unint64_t v67 = 0;
  sub_216973388(&v65, (unint64_t)this + (void)a2);
  sub_2171A618C((uint64_t *)&v68, (unint64_t)this + (void)a2);
  if (a3 && this)
  {
    do
    {
      uint64_t v34 = v66;
      if ((unint64_t)v66 >= v67)
      {
        unint64_t v36 = sub_216973984(&v65, a3);
      }
      else
      {
        uint64_t v35 = *a3;
        void *v66 = *a3;
        if ((v35 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          *v34 &= 0xFFFFFFFFFFFFFFF8;
        }
        unint64_t v36 = (char *)(v34 + 1);
      }
      v66 = v36;
      long long v37 = xmmword_267B96B40;
      uint64_t v38 = *((void *)&xmmword_267B96B40 + 1);
      if (*((void *)&xmmword_267B96B40 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_267B96B40 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v39 = v69;
      if ((unint64_t)v69 >= v70)
      {
        long long v63 = v37;
        uint64_t v41 = (v69 - v68) >> 4;
        unint64_t v42 = v41 + 1;
        if ((unint64_t)(v41 + 1) >> 60) {
          sub_21677CB10();
        }
        uint64_t v43 = v70 - (void)v68;
        if ((uint64_t)(v70 - (void)v68) >> 3 > v42) {
          unint64_t v42 = v43 >> 3;
        }
        if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v44 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v44 = v42;
        }
        unint64_t v74 = &v70;
        long long v45 = (char *)sub_216787EE0((uint64_t)&v70, v44);
        uint64_t v46 = (long long *)&v45[16 * v41];
        *(void *)&long long v71 = v45;
        *((void *)&v71 + 1) = v46;
        v73 = &v45[16 * v47];
        *uint64_t v46 = v63;
        v72 = v46 + 1;
        sub_2171A640C((uint64_t *)&v68, &v71);
        uint64_t v40 = v69;
        sub_216788028((void **)&v71);
      }
      else
      {
        *(void *)v69 = v37;
        *((void *)v39 + 1) = v38;
        uint64_t v40 = v39 + 16;
      }
      v69 = v40;
      ++a3;
      this = (pxrInternal__aapl__pxrReserved__::HdCategoriesSchema *)((char *)this - 1);
    }
    while (this);
  }
  if (a4 && a2)
  {
    do
    {
      uint64_t v48 = v66;
      if ((unint64_t)v66 >= v67)
      {
        unint64_t v50 = sub_216973984(&v65, a4);
      }
      else
      {
        uint64_t v49 = *a4;
        void *v66 = *a4;
        if ((v49 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v49 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          *v48 &= 0xFFFFFFFFFFFFFFF8;
        }
        unint64_t v50 = (char *)(v48 + 1);
      }
      v66 = v50;
      long long v51 = xmmword_267B96B60;
      uint64_t v52 = *((void *)&xmmword_267B96B60 + 1);
      if (*((void *)&xmmword_267B96B60 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_267B96B60 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v53 = v69;
      if ((unint64_t)v69 >= v70)
      {
        long long v64 = v51;
        uint64_t v55 = (v69 - v68) >> 4;
        unint64_t v56 = v55 + 1;
        if ((unint64_t)(v55 + 1) >> 60) {
          sub_21677CB10();
        }
        uint64_t v57 = v70 - (void)v68;
        if ((uint64_t)(v70 - (void)v68) >> 3 > v56) {
          unint64_t v56 = v57 >> 3;
        }
        if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v58 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v58 = v56;
        }
        unint64_t v74 = &v70;
        uint64_t v59 = (char *)sub_216787EE0((uint64_t)&v70, v58);
        v60 = (long long *)&v59[16 * v55];
        *(void *)&long long v71 = v59;
        *((void *)&v71 + 1) = v60;
        v73 = &v59[16 * v61];
        long long *v60 = v64;
        v72 = v60 + 1;
        sub_2171A640C((uint64_t *)&v68, &v71);
        v54 = v69;
        sub_216788028((void **)&v71);
      }
      else
      {
        *(void *)v69 = v51;
        *((void *)v53 + 1) = v52;
        v54 = v53 + 16;
      }
      v69 = v54;
      ++a4;
      a2 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)a2 - 1);
    }
    while (a2);
  }
  pxrInternal__aapl__pxrReserved__::HdRetainedContainerDataSource::New(((char *)v66 - v65) >> 3, (uint64_t *)v65, (uint64_t *)v68, &v71);
  *a5 = v71;
  *(void *)&long long v71 = &v65;
  sub_216889A04((void ***)&v71);
LABEL_79:
  *(void *)&long long v71 = &v68;
  sub_216787968((void ***)&v71);
}

void sub_2171A6070(_Unwind_Exception *a1)
{
}

uint64_t sub_2171A615C(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    sub_216784EC4(v2);
  }
  return a1;
}

void **sub_2171A618C(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60) {
      sub_21677CB10();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_216787EE0((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 16 * v6;
    sub_2171A640C(a1, v7);
    return sub_216788028(v7);
  }
  return result;
}

void sub_2171A620C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216788028((void **)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdCategoriesSchema::GetFromParent(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCategoriesSchemaTokens)) {
      sub_2171A6550(&pxrInternal__aapl__pxrReserved__::HdCategoriesSchemaTokens);
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v3 + 24))(&v8, v3);
    sub_2171997C0((uint64_t)&v8, &v10);
    uint64_t v6 = v10;
    uint64_t v5 = v11;
    if (v11)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_216784EC4(v5);
      uint64_t v7 = v11;
      *a2 = v6;
      a2[1] = v5;
      if (v7) {
        sub_216784EC4(v7);
      }
    }
    else
    {
      *a2 = v10;
      a2[1] = 0;
    }
    if (v9) {
      sub_216784EC4(v9);
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    *a2 = 0;
    a2[1] = 0;
  }
}

unint64_t pxrInternal__aapl__pxrReserved__::HdCategoriesSchema::GetSchemaToken(pxrInternal__aapl__pxrReserved__::HdCategoriesSchema *this)
{
  unint64_t result = atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCategoriesSchemaTokens);
  if (!result) {
    return sub_2171A6550(&pxrInternal__aapl__pxrReserved__::HdCategoriesSchemaTokens);
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::HdCategoriesSchema::GetDefaultLocator(pxrInternal__aapl__pxrReserved__::HdCategoriesSchema *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B96BB0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B96BB0))
  {
    uint64_t v2 = (const pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCategoriesSchemaTokens);
    if (!v2) {
      uint64_t v2 = (const pxrInternal__aapl__pxrReserved__::TfToken *)sub_2171A6550(&pxrInternal__aapl__pxrReserved__::HdCategoriesSchemaTokens);
    }
    pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&unk_267B96B78, v2);
    __cxa_atexit((void (*)(void *))sub_217199930, &unk_267B96B78, &dword_216758000);
    __cxa_guard_release(&qword_267B96BB0);
  }
  return &unk_267B96B78;
}

void sub_2171A63F4(_Unwind_Exception *a1)
{
}

uint64_t sub_2171A640C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_2171A6484((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_2171A6484(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_2171A6518((uint64_t)v12);
  return v10;
}

uint64_t sub_2171A6518(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216787FE4(a1);
  }
  return a1;
}

unint64_t sub_2171A6550(atomic_ullong *a1)
{
  uint64_t v2 = sub_2171A65D0();
  uint64_t v3 = v2;
  uint64_t v4 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v4, (unint64_t)v2);
  if (v4)
  {
    if (v2)
    {
      uint64_t v6 = (void **)((char *)v2 + 8);
      sub_216889A04(&v6);
      if ((*(void *)v3 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v3);
    }
    return atomic_load((unint64_t *)a1);
  }
  return (unint64_t)v3;
}

pxrInternal__aapl__pxrReserved__::HdCategoriesSchemaTokens_StaticTokenType *sub_2171A65D0()
{
  v0 = (pxrInternal__aapl__pxrReserved__::HdCategoriesSchemaTokens_StaticTokenType *)operator new(0x20uLL);
  pxrInternal__aapl__pxrReserved__::HdCategoriesSchemaTokens_StaticTokenType::HdCategoriesSchemaTokens_StaticTokenType(v0);
  return v0;
}

void sub_2171A6600(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 pxrInternal__aapl__pxrReserved__::HdChangeTracker::HdChangeTracker(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this)
{
  *(void *)this = &unk_26C77C2E0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 1065353216;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_DWORD *)this + 20) = 1065353216;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_DWORD *)this + 30) = 1065353216;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_DWORD *)this + 40) = 1065353216;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((_DWORD *)this + 50) = 1065353216;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((_DWORD *)this + 60) = 1065353216;
  *(_OWORD *)((char *)this + 264) = 0u;
  *((_DWORD *)this + 70) = 1065353216;
  uint64_t v1 = (_OWORD *)((char *)this + 816);
  uint64_t v2 = 824;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  do
  {
    *(void *)((char *)this + v2) = 0;
    v2 += 24;
  }
  while (v2 != 872);
  *(_OWORD *)((char *)this + 536) = 0u;
  *(_OWORD *)((char *)this + 520) = 0u;
  *(_OWORD *)((char *)this + 504) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 776) = 0u;
  *(_OWORD *)((char *)this + 792) = 0u;
  *(_OWORD *)((char *)this + 744) = 0u;
  *(_OWORD *)((char *)this + 760) = 0u;
  *(_OWORD *)((char *)this + 712) = 0u;
  *(_OWORD *)((char *)this + 728) = 0u;
  *(_OWORD *)((char *)this + 680) = 0u;
  *(_OWORD *)((char *)this + 696) = 0u;
  *(_OWORD *)((char *)this + 648) = 0u;
  *(_OWORD *)((char *)this + 664) = 0u;
  *(_OWORD *)((char *)this + 616) = 0u;
  *(_OWORD *)((char *)this + 632) = 0u;
  *(_OWORD *)((char *)this + 584) = 0u;
  *(_OWORD *)((char *)this + 600) = 0u;
  *(_OWORD *)((char *)this + 552) = 0u;
  *(_OWORD *)((char *)this + 568) = 0u;
  __dmb(0xBu);
  *((void *)this + 36) = 0;
  __dmb(0xBu);
  *((void *)this + 101) = 0;
  _OWORD *v1 = 0u;
  *((_OWORD *)this + 52) = 0u;
  *((_OWORD *)this + 53) = 0u;
  *((void *)this + 37) = v1;
  __dmb(0xBu);
  uint64_t v3 = (_OWORD *)((char *)this + 1400);
  *((void *)this + 36) = 1;
  for (uint64_t i = 1408; i != 1456; i += 24)
    *(void *)((char *)this + i) = 0;
  *((_OWORD *)this + 86) = 0u;
  *((_OWORD *)this + 85) = 0u;
  *((_OWORD *)this + 84) = 0u;
  *((_OWORD *)this + 83) = 0u;
  *((_OWORD *)this + 82) = 0u;
  *((_OWORD *)this + 81) = 0u;
  *((_OWORD *)this + 80) = 0u;
  *((_OWORD *)this + 79) = 0u;
  *((_OWORD *)this + 78) = 0u;
  *((_OWORD *)this + 77) = 0u;
  *((_OWORD *)this + 76) = 0u;
  *((_OWORD *)this + 75) = 0u;
  *((_OWORD *)this + 74) = 0u;
  *((_OWORD *)this + 73) = 0u;
  *((_OWORD *)this + 72) = 0u;
  *((_OWORD *)this + 71) = 0u;
  *((_OWORD *)this + 70) = 0u;
  *((_OWORD *)this + 69) = 0u;
  *((_OWORD *)this + 68) = 0u;
  *((_OWORD *)this + 67) = 0u;
  *((_OWORD *)this + 66) = 0u;
  *((_OWORD *)this + 65) = 0u;
  *((_OWORD *)this + 63) = 0u;
  *((_OWORD *)this + 64) = 0u;
  *((_OWORD *)this + 61) = 0u;
  *((_OWORD *)this + 62) = 0u;
  *((_OWORD *)this + 59) = 0u;
  *((_OWORD *)this + 60) = 0u;
  *((_OWORD *)this + 57) = 0u;
  *((_OWORD *)this + 58) = 0u;
  *((_OWORD *)this + 55) = 0u;
  *((_OWORD *)this + 56) = 0u;
  __dmb(0xBu);
  *((void *)this + 109) = 0;
  __dmb(0xBu);
  *((void *)this + 174) = 0;
  *uint64_t v3 = 0u;
  *(_OWORD *)((char *)this + 1416) = 0u;
  *(_OWORD *)((char *)this + 1432) = 0u;
  *((void *)this + 110) = v3;
  __dmb(0xBu);
  uint64_t v5 = (_OWORD *)((char *)this + 1984);
  *((void *)this + 109) = 1;
  for (uint64_t j = 1992; j != 2040; j += 24)
    *(void *)((char *)this + j) = 0;
  *(_OWORD *)((char *)this + 1704) = 0u;
  *(_OWORD *)((char *)this + 1688) = 0u;
  *(_OWORD *)((char *)this + 1672) = 0u;
  *(_OWORD *)((char *)this + 1656) = 0u;
  *(_OWORD *)((char *)this + 1640) = 0u;
  *(_OWORD *)((char *)this + 1624) = 0u;
  *(_OWORD *)((char *)this + 1608) = 0u;
  *(_OWORD *)((char *)this + 1592) = 0u;
  *(_OWORD *)((char *)this + 1576) = 0u;
  *(_OWORD *)((char *)this + 1560) = 0u;
  *(_OWORD *)((char *)this + 1544) = 0u;
  *(_OWORD *)((char *)this + 1528) = 0u;
  *(_OWORD *)((char *)this + 1512) = 0u;
  *(_OWORD *)((char *)this + 1496) = 0u;
  *(_OWORD *)((char *)this + 1480) = 0u;
  *(_OWORD *)((char *)this + 1464) = 0u;
  *(_OWORD *)((char *)this + 1944) = 0u;
  *(_OWORD *)((char *)this + 1960) = 0u;
  *(_OWORD *)((char *)this + 1912) = 0u;
  *(_OWORD *)((char *)this + 1928) = 0u;
  *(_OWORD *)((char *)this + 1880) = 0u;
  *(_OWORD *)((char *)this + 1896) = 0u;
  *(_OWORD *)((char *)this + 1848) = 0u;
  *(_OWORD *)((char *)this + 1864) = 0u;
  *(_OWORD *)((char *)this + 1816) = 0u;
  *(_OWORD *)((char *)this + 1832) = 0u;
  *(_OWORD *)((char *)this + 1784) = 0u;
  *(_OWORD *)((char *)this + 1800) = 0u;
  *(_OWORD *)((char *)this + 1752) = 0u;
  *(_OWORD *)((char *)this + 1768) = 0u;
  *(_OWORD *)((char *)this + 1720) = 0u;
  *(_OWORD *)((char *)this + 1736) = 0u;
  __dmb(0xBu);
  *((void *)this + 182) = 0;
  __dmb(0xBu);
  *((void *)this + 247) = 0;
  _OWORD *v5 = 0u;
  *((_OWORD *)this + 125) = 0u;
  *((_OWORD *)this + 126) = 0u;
  *((void *)this + 183) = v5;
  __dmb(0xBu);
  uint64_t v7 = (_OWORD *)((char *)this + 2568);
  *((void *)this + 182) = 1;
  for (uint64_t k = 2576; k != 2624; k += 24)
    *(void *)((char *)this + k) = 0;
  *((_OWORD *)this + 159) = 0u;
  *((_OWORD *)this + 158) = 0u;
  *((_OWORD *)this + 157) = 0u;
  *((_OWORD *)this + 156) = 0u;
  *((_OWORD *)this + 155) = 0u;
  *((_OWORD *)this + 154) = 0u;
  *((_OWORD *)this + 153) = 0u;
  *((_OWORD *)this + 152) = 0u;
  *((_OWORD *)this + 151) = 0u;
  *((_OWORD *)this + 150) = 0u;
  *((_OWORD *)this + 149) = 0u;
  *((_OWORD *)this + 148) = 0u;
  *((_OWORD *)this + 147) = 0u;
  *((_OWORD *)this + 146) = 0u;
  *((_OWORD *)this + 145) = 0u;
  *((_OWORD *)this + 144) = 0u;
  *((_OWORD *)this + 143) = 0u;
  *((_OWORD *)this + 142) = 0u;
  *((_OWORD *)this + 141) = 0u;
  *((_OWORD *)this + 140) = 0u;
  *((_OWORD *)this + 139) = 0u;
  *((_OWORD *)this + 138) = 0u;
  *((_OWORD *)this + 137) = 0u;
  *((_OWORD *)this + 136) = 0u;
  *((_OWORD *)this + 135) = 0u;
  *((_OWORD *)this + 134) = 0u;
  *((_OWORD *)this + 133) = 0u;
  *((_OWORD *)this + 132) = 0u;
  *((_OWORD *)this + 131) = 0u;
  *((_OWORD *)this + 130) = 0u;
  *((_OWORD *)this + 129) = 0u;
  *((_OWORD *)this + 128) = 0u;
  __dmb(0xBu);
  *((void *)this + 255) = 0;
  __dmb(0xBu);
  *((void *)this + 320) = 0;
  _OWORD *v7 = 0u;
  *(_OWORD *)((char *)this + 2584) = 0u;
  *(_OWORD *)((char *)this + 2600) = 0u;
  *((void *)this + 256) = v7;
  __dmb(0xBu);
  long long v9 = (_OWORD *)((char *)this + 3152);
  *((void *)this + 255) = 1;
  for (uint64_t m = 3160; m != 3208; m += 24)
    *(void *)((char *)this + m) = 0;
  *(_OWORD *)((char *)this + 2872) = 0u;
  *(_OWORD *)((char *)this + 2856) = 0u;
  *(_OWORD *)((char *)this + 2840) = 0u;
  *(_OWORD *)((char *)this + 2824) = 0u;
  *(_OWORD *)((char *)this + 2808) = 0u;
  *(_OWORD *)((char *)this + 2792) = 0u;
  *(_OWORD *)((char *)this + 2776) = 0u;
  *(_OWORD *)((char *)this + 2760) = 0u;
  *(_OWORD *)((char *)this + 2744) = 0u;
  *(_OWORD *)((char *)this + 2728) = 0u;
  *(_OWORD *)((char *)this + 2712) = 0u;
  *(_OWORD *)((char *)this + 2696) = 0u;
  *(_OWORD *)((char *)this + 2680) = 0u;
  *(_OWORD *)((char *)this + 2664) = 0u;
  *(_OWORD *)((char *)this + 2648) = 0u;
  *(_OWORD *)((char *)this + 2632) = 0u;
  *(_OWORD *)((char *)this + 3112) = 0u;
  *(_OWORD *)((char *)this + 3128) = 0u;
  *(_OWORD *)((char *)this + 3080) = 0u;
  *(_OWORD *)((char *)this + 3096) = 0u;
  *(_OWORD *)((char *)this + 3048) = 0u;
  *(_OWORD *)((char *)this + 3064) = 0u;
  *(_OWORD *)((char *)this + 3016) = 0u;
  *(_OWORD *)((char *)this + 3032) = 0u;
  *(_OWORD *)((char *)this + 2984) = 0u;
  *(_OWORD *)((char *)this + 3000) = 0u;
  *(_OWORD *)((char *)this + 2952) = 0u;
  *(_OWORD *)((char *)this + 2968) = 0u;
  *(_OWORD *)((char *)this + 2920) = 0u;
  *(_OWORD *)((char *)this + 2936) = 0u;
  *(_OWORD *)((char *)this + 2888) = 0u;
  *(_OWORD *)((char *)this + 2904) = 0u;
  __dmb(0xBu);
  *((void *)this + 328) = 0;
  __dmb(0xBu);
  *((void *)this + 393) = 0;
  _OWORD *v9 = 0u;
  *((_OWORD *)this + 198) = 0u;
  *((_OWORD *)this + 199) = 0u;
  *((void *)this + 329) = v9;
  __dmb(0xBu);
  *((void *)this + 328) = 1;
  result.n128_u64[0] = 0x100000001;
  result.n128_u64[1] = 0x100000001;
  *(__n128 *)((char *)this + 3208) = result;
  *(__n128 *)((char *)this + 3224) = result;
  *((void *)this + 405) = 0x100000001;
  *((void *)this + 406) = 0;
  return result;
}

void pxrInternal__aapl__pxrReserved__::HdChangeTracker::~HdChangeTracker(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this)
{
  *(void *)this = &unk_26C77C2E0;
  sub_216851EE4((uint64_t)&v3, "hd", "virtual pxrInternal__aapl__pxrReserved__::HdChangeTracker::~HdChangeTracker()");
  while (v4--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v3);
  sub_2171AA9A4((unint64_t *)this + 328);
  sub_2171AA9A4((unint64_t *)this + 255);
  sub_2171AA9A4((unint64_t *)this + 182);
  sub_2171AA9A4((unint64_t *)this + 109);
  sub_2171AA9A4((unint64_t *)this + 36);
  sub_2168C08A0((uint64_t)this + 248);
  sub_2168C08A0((uint64_t)this + 208);
  sub_2171AA608((uint64_t)this + 168);
  sub_2171AA608((uint64_t)this + 128);
  sub_2171AA608((uint64_t)this + 88);
  sub_2171AA608((uint64_t)this + 48);
  sub_2171AA608((uint64_t)this + 8);
}

{
  void *v1;
  uint64_t vars8;

  pxrInternal__aapl__pxrReserved__::HdChangeTracker::~HdChangeTracker(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::HdChangeTracker::_LogCacheAccess(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  int v4 = (pxrInternal__aapl__pxrReserved__::HdPerfLog *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::HdPerfLog>::_instance);
  if (a3)
  {
    if (!v4) {
      pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::HdPerfLog>::_CreateInstance();
    }
    uint64_t v5 = 0;
    pxrInternal__aapl__pxrReserved__::HdPerfLog::AddCacheHit(v4, this, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v5);
  }
  else
  {
    if (!v4) {
      pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::HdPerfLog>::_CreateInstance();
    }
    uint64_t v5 = 0;
    pxrInternal__aapl__pxrReserved__::HdPerfLog::AddCacheMiss(v4, this, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v5);
  }
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_2171A6BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::HdChangeTracker::RprimInserted(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, int a3)
{
  if (sub_2171A6C8C(22))
  {
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Rprim Added: %s\n", v7, v8, Text);
  }
  uint64_t v10 = a2;
  __n128 result = sub_2171AABD4((uint64_t)this + 8, (unsigned int *)a2, (uint64_t)&unk_2174BFD90, &v10);
  *((_DWORD *)result + 6) = a3;
  ++*((_DWORD *)this + 807);
  ++*((_DWORD *)this + 803);
  return result;
}

BOOL sub_2171A6C8C(int a1)
{
  uint64_t v2 = sub_2171AAB44();
  unsigned int v3 = atomic_load((unsigned int *)(v2 + 4 * a1));
  if (!v3)
  {
    uint64_t v5 = v2;
    uint64_t v6 = sub_2171AAB44();
    pxrInternal__aapl__pxrReserved__::TfDebug::_InitializeNode((void *)(v6 + 4 * a1), off_2642947D8[a1]);
    unsigned int v3 = atomic_load((unsigned int *)(v5 + 4 * a1));
  }
  return v3 == 2;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::RprimRemoved(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  if (sub_2171A6C8C(24))
  {
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Rprim Removed: %s\n", v5, v6, Text);
  }
  uint64_t result = sub_2171AAE9C((void *)this + 1, (unsigned int *)a2);
  ++*((_DWORD *)this + 807);
  ++*((_DWORD *)this + 803);
  return result;
}

void pxrInternal__aapl__pxrReserved__::HdChangeTracker::MarkRprimDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3)
{
  unsigned int v3 = (pxrInternal__aapl__pxrReserved__::HdChangeTracker *)MEMORY[0x270FA5388](this, a2, a3);
  v20[57] = *MEMORY[0x263EF8340];
  if (v5)
  {
    uint64_t v6 = (const pxrInternal__aapl__pxrReserved__::TfToken *)v5;
    uint64_t v7 = v4;
    uint64_t v8 = v3;
    if (*((void *)v3 + 406))
    {
      long long v9 = (pxrInternal__aapl__pxrReserved__::HdChangeTracker *)(v5 & 0x7F800003);
      if ((v6 & 0x7F800003) != 0) {
        pxrInternal__aapl__pxrReserved__::HdChangeTracker::_MarkRprimDirty(v3, v4, v9);
      }
      if ((v6 & 0x807FFFFC) != 0)
      {
        (*(void (**)(void *__return_ptr))(**((void **)v8 + 406) + 16))(v12);
        v20[56] = 0x800000000;
        pxrInternal__aapl__pxrReserved__::HdDirtyBitsTranslator::RprimDirtyBitsToLocatorSet(v12, v6, (pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *)v20, v10);
        if (!pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::IsEmpty((pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *)v20))
        {
          uint64_t v11 = *((void *)v8 + 406);
          sub_2171AA6C8(&v14, v7, (uint64_t)v20);
          uint64_t v19 = 0x1000000001;
          sub_2171AAEEC((uint64_t)&v14, (uint64_t)v17, (uint64_t)v17);
          (*(void (**)(uint64_t, void **))(*(void *)v11 + 56))(v11, v17);
          sub_2171AB018(v17);
          sub_2171AA914((uint64_t)&v16);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
          sub_21697C414(&v14);
        }
        sub_2171AA914((uint64_t)v20);
        if (v13) {
          sub_216784EC4(v13);
        }
        if ((v12[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v12[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
    }
    else
    {
      if ((v5 & 0x40) != 0) {
        unint64_t v5 = v5 | 0x8820;
      }
      else {
        unint64_t v5 = v5;
      }
      pxrInternal__aapl__pxrReserved__::HdChangeTracker::_MarkRprimDirty(v3, v4, (pxrInternal__aapl__pxrReserved__::HdChangeTracker *)v5);
    }
  }
  else
  {
    v17[0] = "hd/changeTracker.cpp";
    v17[1] = "MarkRprimDirty";
    v17[2] = (void *)114;
    v17[3] = "void pxrInternal__aapl__pxrReserved__::HdChangeTracker::MarkRprimDirty(const SdfPath &, HdDirtyBits)";
    char v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v17, 1, (pxrInternal__aapl__pxrReserved__ *)"MarkRprimDirty called with bits == clean!");
  }
}

void sub_2171A6FCC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_21675DB74(a1);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdChangeTracker::_MarkRprimDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::HdChangeTracker *a3)
{
  uint64_t v6 = sub_216A62F60((void *)this + 1, (unsigned int *)a2);
  if (v6
    || (__p[0] = "hd/changeTracker.cpp",
        __p[1] = "_MarkRprimDirty",
        uint64_t v17 = 158,
        char v18 = "void pxrInternal__aapl__pxrReserved__::HdChangeTracker::_MarkRprimDirty(const SdfPath &, HdDirtyBits)",
        char v19 = 0,
        uint64_t v12 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2),
        int v15 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"%s\n", v13, v14, v12), (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)__p, "it != _rprimState.end()", v15) & 1) != 0))
  {
    int v7 = *((_DWORD *)v6 + 6);
    if (((~v7 | 0xC0000) & a3) != 0)
    {
      if (a3 == 1)
      {
        *((_DWORD *)v6 + 6) = v7 | 1;
        return;
      }
      if ((v7 & 2) == 0)
      {
        if (sub_2171A6C8C(34))
        {
          Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
          pxrInternal__aapl__pxrReserved__::HdChangeTracker::StringifyDirtyBits(a3, __p);
          if (v17 >= 0) {
            uint64_t v11 = __p;
          }
          else {
            uint64_t v11 = (void **)__p[0];
          }
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"New Varying State %s: %s\n", v9, v10, Text, v11);
          if (SHIBYTE(v17) < 0) {
            operator delete(__p[0]);
          }
        }
        LODWORD(a3) = a3 | 2;
        ++*((_DWORD *)this + 802);
      }
      *((_DWORD *)v6 + 6) = a3 | v7;
      ++*((_DWORD *)this + 807);
      if (((unsigned __int16)a3 & 0x400) != 0)
      {
        ++*((_DWORD *)this + 808);
        if ((a3 & 0x20000) == 0)
        {
LABEL_15:
          if ((a3 & 0x80000) == 0) {
            goto LABEL_17;
          }
          goto LABEL_16;
        }
      }
      else if ((a3 & 0x20000) == 0)
      {
        goto LABEL_15;
      }
      ++*((_DWORD *)this + 809);
      if ((a3 & 0x80000) == 0)
      {
LABEL_17:
        if ((a3 & 0xC0000) != 0) {
          ++*((_DWORD *)this + 803);
        }
        return;
      }
LABEL_16:
      ++*((_DWORD *)this + 810);
      goto LABEL_17;
    }
  }
}

void sub_2171A71E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *sub_2171A7204(_DWORD *a1)
{
  sub_2171AA914((uint64_t)(a1 + 2));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);

  return sub_21697C414(a1);
}

void *pxrInternal__aapl__pxrReserved__::HdChangeTracker::StringifyDirtyBits@<X0>(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this@<X0>, void *a2@<X8>)
{
  if (this)
  {
    unsigned int v2 = this;
    sub_216778A5C((uint64_t)v8);
    if ((v2 & 2) != 0) {
      sub_216779180(v9, (uint64_t)"<Varying> ", 10);
    }
    if (v2) {
      sub_216779180(v9, (uint64_t)"<InitRepr> ", 11);
    }
    if ((v2 & 4) != 0) {
      sub_216779180(v9, (uint64_t)" PrimID ", 8);
    }
    if ((v2 & 8) != 0) {
      sub_216779180(v9, (uint64_t)"Extent ", 7);
    }
    if ((v2 & 0x10) != 0) {
      sub_216779180(v9, (uint64_t)"DisplayStyle ", 13);
    }
    if ((v2 & 0x20) != 0) {
      sub_216779180(v9, (uint64_t)"Points ", 7);
    }
    if ((v2 & 0x40) != 0) {
      sub_216779180(v9, (uint64_t)"Primvar ", 8);
    }
    if ((v2 & 0x80) != 0) {
      sub_216779180(v9, (uint64_t)"MaterialId ", 11);
    }
    if ((v2 & 0x100) != 0) {
      sub_216779180(v9, (uint64_t)"Topology ", 9);
    }
    if ((v2 & 0x200) != 0) {
      sub_216779180(v9, (uint64_t)"Transform ", 10);
    }
    if ((v2 & 0x400) != 0) {
      sub_216779180(v9, (uint64_t)"Visibility ", 11);
    }
    if ((v2 & 0x800) != 0) {
      sub_216779180(v9, (uint64_t)"Normals ", 8);
    }
    if ((v2 & 0x1000) != 0) {
      sub_216779180(v9, (uint64_t)"DoubleSided ", 12);
    }
    if ((v2 & 0x2000) != 0) {
      sub_216779180(v9, (uint64_t)"CullStyle ", 10);
    }
    if ((v2 & 0x4000) != 0) {
      sub_216779180(v9, (uint64_t)"SubdivTags ", 11);
    }
    if ((v2 & 0x8000) != 0) {
      sub_216779180(v9, (uint64_t)"Widths ", 7);
    }
    if ((v2 & 0x10000) != 0) {
      sub_216779180(v9, (uint64_t)"Instancer ", 10);
    }
    if ((v2 & 0x20000) != 0) {
      sub_216779180(v9, (uint64_t)"InstanceIndex ", 14);
    }
    if ((v2 & 0x40000) != 0) {
      sub_216779180(v9, (uint64_t)"Repr ", 5);
    }
    if ((v2 & 0x80000) != 0) {
      sub_216779180(v9, (uint64_t)"RenderTag ", 10);
    }
    if ((v2 & 0x100000) != 0) {
      sub_216779180(v9, (uint64_t)"ComputationPrimvarDesc ", 23);
    }
    if ((v2 & 0x200000) != 0) {
      sub_216779180(v9, (uint64_t)"Categories ", 11);
    }
    if ((v2 & 0x400000) != 0) {
      sub_216779180(v9, (uint64_t)"VolumeField ", 12);
    }
    if ((v2 & 0x800000) != 0)
    {
      sub_216779180(v9, (uint64_t)"NewRepr ", 8);
    }
    else if (v2 < 0x800000)
    {
LABEL_61:
      std::stringbuf::str();
      v8[0] = *MEMORY[0x263F8C2B8];
      uint64_t v7 = *(void *)(MEMORY[0x263F8C2B8] + 72);
      *(void *)((char *)v8 + *(void *)(v8[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
      v9[0] = v7;
      v9[1] = MEMORY[0x263F8C318] + 16;
      if (v10 < 0) {
        operator delete((void *)v9[9]);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      return (void *)MEMORY[0x21D447E60](&v11);
    }
    sub_216779180(v9, (uint64_t)"CustomBits:", 11);
    unint64_t v4 = 0x1000000;
    do
    {
      if ((v4 & v2) != 0) {
        unint64_t v5 = "1";
      }
      else {
        unint64_t v5 = "0";
      }
      sub_216779180(v9, (uint64_t)v5, 1);
      BOOL v6 = v4 >= 0x20000001;
      v4 *= 2;
    }
    while (!v6);
    goto LABEL_61;
  }

  return sub_216779094(a2, "Clean");
}

void sub_2171A7700(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216778D38((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdChangeTracker::ResetVaryingState(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this)
{
  if (sub_2171A6C8C(34)) {
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Resetting Rprim Varying State: varyingStateVersion (%d -> %d)\n", v2, v3, *((unsigned int *)this + 802), (*((_DWORD *)this + 802) + 1));
  }
  ++*((_DWORD *)this + 802);
  uint64_t v7 = *((void *)this + 3);
  uint64_t v8 = 0;
  if (v7)
  {
    do
    {
      if ((*(_DWORD *)(*sub_2171A77C0(&v7, (uint64_t)v2, v3) + 24) & 0xFFFFFFFD) == 0)
      {
        BOOL v6 = sub_2171A77C0(&v7, v4, v5);
        *(_DWORD *)(*v6 + 24) &= ~2u;
      }
      sub_2171A783C((uint64_t)&v7);
    }
    while (v7 != v8);
  }
}

void *sub_2171A77C0(void *result, uint64_t a2, char *a3)
{
  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::TfHashMap<pxrIntern"
            "al__aapl__pxrReserved__::SdfPath, unsigned int, pxrInternal__aapl__pxrReserved__::SdfPath::Hash>>::operator-"
            ">() [T = pxrInternal__aapl__pxrReserved__::TfHashMap<pxrInternal__aapl__pxrReserved__::SdfPath, unsigned int"
            ", pxrInternal__aapl__pxrReserved__::SdfPath::Hash>, Reverse = false]";
    char v4 = 0;
    int v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

uint64_t sub_2171A783C(uint64_t a1)
{
  if (*(void *)a1 == *(void *)(a1 + 8))
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::TfHas"
            "hMap<pxrInternal__aapl__pxrReserved__::SdfPath, unsigned int, pxrInternal__aapl__pxrReserved__::SdfPath::Has"
            "h>>::operator++() [T = pxrInternal__aapl__pxrReserved__::TfHashMap<pxrInternal__aapl__pxrReserved__::SdfPath"
            ", unsigned int, pxrInternal__aapl__pxrReserved__::SdfPath::Hash>, Reverse = false]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *(void *)a1 = **(void **)a1;
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::ResetRprimVaryingState(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  if (sub_2171A6C8C(34))
  {
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Resetting Rprim Varying State: %s\n", v5, v6, Text);
  }
  uint64_t result = (uint64_t)sub_216A62F60((void *)this + 1, (unsigned int *)a2);
  uint64_t v8 = result;
  if (result
    || (LOBYTE(v14) = 0,
        long long v9 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2),
        v12 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"%s\n", v10, v11, v9, "hd/changeTracker.cpp", "ResetRprimVaryingState", 247, "void pxrInternal__aapl__pxrReserved__::HdChangeTracker::ResetRprimVaryingState(const SdfPath &)", v14), uint64_t result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v13, "it != _rprimState.end()", v12), (result & 1) != 0))
  {
    *(_DWORD *)(v8 + 24) &= ~2u;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::MarkRprimClean(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, int a3)
{
  if (sub_2171A6C8C(23))
  {
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Rprim Cleaned: %s\n", v7, v8, Text);
  }
  uint64_t result = (uint64_t)sub_216A62F60((void *)this + 1, (unsigned int *)a2);
  uint64_t v10 = result;
  if (result
    || (v11[0] = "hd/changeTracker.cpp",
        v11[1] = "MarkRprimClean",
        v11[2] = 263,
        v11[3] = "void pxrInternal__aapl__pxrReserved__::HdChangeTracker::MarkRprimClean(const SdfPath &, HdDirtyBits)",
        char v12 = 0,
        uint64_t result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v11, "it != _rprimState.end()", 0),
        (result & 1) != 0))
  {
    *(_DWORD *)(v10 + 24) = *(_DWORD *)(v10 + 24) & 2 | a3;
  }
  return result;
}

int32x2_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::InstancerInserted(int32x2_t *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, int a3)
{
  if (sub_2171A6C8C(17))
  {
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Instancer Added: %s\n", v7, v8, Text);
  }
  uint64_t v10 = a2;
  *((_DWORD *)sub_2171AABD4((uint64_t)&this[6], (unsigned int *)a2, (uint64_t)&unk_2174BFD90, &v10) + 6) = a3;
  int32x2_t result = vadd_s32(this[403], (int32x2_t)0x100000001);
  this[403] = result;
  return result;
}

int32x2_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::InstancerRemoved(int32x2_t *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  if (sub_2171A6C8C(19))
  {
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Instancer Removed: %s\n", v5, v6, Text);
  }
  sub_2171AAE9C(&this[6], (unsigned int *)a2);
  int32x2_t result = vadd_s32(this[403], (int32x2_t)0x100000001);
  this[403] = result;
  return result;
}

void *pxrInternal__aapl__pxrReserved__::HdChangeTracker::AddInstancerRprimDependency(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  return pxrInternal__aapl__pxrReserved__::HdChangeTracker::_AddDependency((uint64_t)this, (uint64_t *)this + 36, (unsigned int *)a2, a3);
}

void *pxrInternal__aapl__pxrReserved__::HdChangeTracker::_AddDependency(uint64_t a1, uint64_t *a2, unsigned int *a3, pxrInternal__aapl__pxrReserved__::SdfPath *a4)
{
  uint64_t v6 = 0;
  char v7 = 0;
  uint64_t v8 = 0;
  sub_2171A822C(a2, (uint64_t)&v6, a3);
  sub_216A5CF30((uint64_t **)(v8 + 24), a4, a4);
  uint64_t v8 = 0;
  return sub_21685C048(&v6);
}

void sub_2171A7BB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  a11 = 0;
  sub_21685C048(&a9);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::HdChangeTracker::RemoveInstancerRprimDependency(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  return pxrInternal__aapl__pxrReserved__::HdChangeTracker::_RemoveDependency((uint64_t)this, (uint64_t *)this + 36, (unsigned int *)a2, a3);
}

void *pxrInternal__aapl__pxrReserved__::HdChangeTracker::_RemoveDependency(uint64_t a1, uint64_t *a2, unsigned int *a3, const pxrInternal__aapl__pxrReserved__::SdfPath *a4)
{
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v9 = 0;
  if (sub_2171A7F08(a2, (uint64_t)&v7, a3))
  {
    sub_216AF1BE4((uint64_t **)(v9 + 24), a4);
    if (!*(void *)(v9 + 40)) {
      sub_2171AB800(a2, (uint64_t)&v7);
    }
  }
  uint64_t v9 = 0;
  return sub_21685C048(&v7);
}

void sub_2171A7C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  a11 = 0;
  sub_21685C048(&a9);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::HdChangeTracker::AddInstancerInstancerDependency(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  return pxrInternal__aapl__pxrReserved__::HdChangeTracker::_AddDependency((uint64_t)this, (uint64_t *)this + 182, (unsigned int *)a2, a3);
}

void *pxrInternal__aapl__pxrReserved__::HdChangeTracker::RemoveInstancerInstancerDependency(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  return pxrInternal__aapl__pxrReserved__::HdChangeTracker::_RemoveDependency((uint64_t)this, (uint64_t *)this + 182, (unsigned int *)a2, a3);
}

void *pxrInternal__aapl__pxrReserved__::HdChangeTracker::AddSprimSprimDependency(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  uint64_t v6 = pxrInternal__aapl__pxrReserved__::HdChangeTracker::_AddDependency((uint64_t)this, (uint64_t *)this + 255, (unsigned int *)a2, a3);

  return pxrInternal__aapl__pxrReserved__::HdChangeTracker::_AddDependency((uint64_t)v6, (uint64_t *)this + 328, (unsigned int *)a3, a2);
}

void *pxrInternal__aapl__pxrReserved__::HdChangeTracker::RemoveSprimSprimDependency(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  uint64_t v6 = pxrInternal__aapl__pxrReserved__::HdChangeTracker::_RemoveDependency((uint64_t)this, (uint64_t *)this + 255, (unsigned int *)a2, a3);

  return pxrInternal__aapl__pxrReserved__::HdChangeTracker::_RemoveDependency((uint64_t)v6, (uint64_t *)this + 328, (unsigned int *)a3, a2);
}

uint64_t *pxrInternal__aapl__pxrReserved__::HdChangeTracker::RemoveSprimFromSprimSprimDependencies(uint64_t *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v2 = this[320];
  __dmb(0xBu);
  if (v2)
  {
    char v4 = this;
    int v5 = this + 255;
    uint64_t v18 = 0;
    char v19 = 0;
    uint64_t v20 = 0;
    if (sub_2171A7F08(this + 255, (uint64_t)&v18, (unsigned int *)a2))
    {
      uint64_t v6 = *(unsigned int **)(v20 + 24);
      uint64_t v7 = (unsigned int *)(v20 + 32);
      if (v6 != (unsigned int *)(v20 + 32))
      {
        do
        {
          pxrInternal__aapl__pxrReserved__::HdChangeTracker::MarkSprimDirty((pxrInternal__aapl__pxrReserved__::HdChangeTracker *)v4, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 + 7), 0xFFFFFFFFLL);
          pxrInternal__aapl__pxrReserved__::HdChangeTracker::_RemoveDependency(v8, v4 + 328, v6 + 7, a2);
          uint64_t v9 = (unsigned int *)*((void *)v6 + 1);
          if (v9)
          {
            do
            {
              uint64_t v10 = v9;
              uint64_t v9 = *(unsigned int **)v9;
            }
            while (v9);
          }
          else
          {
            do
            {
              uint64_t v10 = (unsigned int *)*((void *)v6 + 2);
              BOOL v11 = *(void *)v10 == (void)v6;
              uint64_t v6 = v10;
            }
            while (!v11);
          }
          uint64_t v6 = v10;
        }
        while (v10 != v7);
      }
      sub_2171AB800(v5, (uint64_t)&v18);
    }
    uint64_t v20 = 0;
    sub_21685C048(&v18);
    uint64_t v18 = 0;
    char v19 = 0;
    char v12 = v4 + 328;
    uint64_t v20 = 0;
    uint64_t v13 = sub_2171A7F08(v12, (uint64_t)&v18, (unsigned int *)a2);
    if (v13)
    {
      uint64_t v14 = *(unsigned int **)(v20 + 24);
      int v15 = (unsigned int *)(v20 + 32);
      if (v14 != (unsigned int *)(v20 + 32))
      {
        do
        {
          uint64_t v13 = (uint64_t)pxrInternal__aapl__pxrReserved__::HdChangeTracker::_RemoveDependency(v13, v5, v14 + 7, a2);
          uint64_t v16 = (unsigned int *)*((void *)v14 + 1);
          if (v16)
          {
            do
            {
              uint64_t v17 = v16;
              uint64_t v16 = *(unsigned int **)v16;
            }
            while (v16);
          }
          else
          {
            do
            {
              uint64_t v17 = (unsigned int *)*((void *)v14 + 2);
              BOOL v11 = *(void *)v17 == (void)v14;
              uint64_t v14 = v17;
            }
            while (!v11);
          }
          uint64_t v14 = v17;
        }
        while (v17 != v15);
      }
      sub_2171AB800(v12, (uint64_t)&v18);
    }
    uint64_t v20 = 0;
    return sub_21685C048(&v18);
  }
  return this;
}

void sub_2171A7EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  a11 = 0;
  sub_21685C048(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2171A7F08(uint64_t *a1, uint64_t a2, unsigned int *a3)
{
  if (*(void *)(a2 + 16))
  {
    sub_21685C080(a2);
    *(void *)(a2 + 16) = 0;
  }

  return sub_2171AB0C0(a1, 0, a3, 0, a2, 1, (uint64_t (*)(uint64_t, unsigned int *, uint64_t))sub_2171AB3D8, 0);
}

void pxrInternal__aapl__pxrReserved__::HdChangeTracker::MarkSprimDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3)
{
  uint64_t v3 = MEMORY[0x270FA5388](this, a2, a3);
  v20[57] = *MEMORY[0x263EF8340];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = v4;
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::HdChangeTracker *)v3;
    uint64_t v9 = *(void *)(v3 + 3248);
    if (v9)
    {
      (*(void (**)(void *__return_ptr))(*(void *)v9 + 16))(v12);
      v20[56] = 0x800000000;
      pxrInternal__aapl__pxrReserved__::HdDirtyBitsTranslator::SprimDirtyBitsToLocatorSet((pxrInternal__aapl__pxrReserved__::HdDirtyBitsTranslator *)v12, v6, (pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *)v20, v10);
      if (!pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::IsEmpty((pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *)v20))
      {
        uint64_t v11 = *((void *)v8 + 406);
        sub_2171AA6C8(&v14, v7, (uint64_t)v20);
        uint64_t v19 = 0x1000000001;
        sub_2171AAEEC((uint64_t)&v14, (uint64_t)v17, (uint64_t)v17);
        (*(void (**)(uint64_t, void **))(*(void *)v11 + 56))(v11, v17);
        sub_2171AB018(v17);
        sub_2171AA914((uint64_t)&v16);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
        sub_21697C414(&v14);
      }
      sub_2171AA914((uint64_t)v20);
      if (v13) {
        sub_216784EC4(v13);
      }
      if ((v12[0] & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v12[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::HdChangeTracker::_MarkSprimDirty(v8, v4, (int)v5);
    }
  }
  else
  {
    v17[0] = "hd/changeTracker.cpp";
    v17[1] = "MarkSprimDirty";
    v17[2] = (void *)608;
    v17[3] = "void pxrInternal__aapl__pxrReserved__::HdChangeTracker::MarkSprimDirty(const SdfPath &, HdDirtyBits)";
    char v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v17, 1, (pxrInternal__aapl__pxrReserved__ *)"MarkSprimDirty called with bits == clean!");
  }
}

void sub_2171A81B4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_21675DB74(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2171A822C(uint64_t *a1, uint64_t a2, unsigned int *a3)
{
  if (*(void *)(a2 + 16))
  {
    sub_21685C080(a2);
    *(void *)(a2 + 16) = 0;
  }

  return sub_2171AB0C0(a1, 1, a3, 0, a2, 1, (uint64_t (*)(uint64_t, unsigned int *, uint64_t))sub_2171AB950, 0);
}

void *pxrInternal__aapl__pxrReserved__::HdChangeTracker::TaskInserted(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, int a3)
{
  if (sub_2171A6C8C(32))
  {
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Task Added: %s\n", v7, v8, Text);
  }
  uint64_t v10 = a2;
  int32x2_t result = sub_2171AABD4((uint64_t)this + 88, (unsigned int *)a2, (uint64_t)&unk_2174BFD90, &v10);
  *((_DWORD *)result + 6) = a3;
  ++*((_DWORD *)this + 807);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::TaskRemoved(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  if (sub_2171A6C8C(33))
  {
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Task Removed: %s\n", v5, v6, Text);
  }
  uint64_t result = sub_2171AAE9C((void *)this + 11, (unsigned int *)a2);
  ++*((_DWORD *)this + 807);
  return result;
}

void pxrInternal__aapl__pxrReserved__::HdChangeTracker::MarkTaskDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, int a3)
{
  if (a3)
  {
    uint64_t v6 = sub_216A62F60((void *)this + 11, (unsigned int *)a2);
    if (v6
      || (LOBYTE(v13) = 0,
          Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2),
          uint64_t v11 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Task Id = %s", v9, v10, Text, "hd/changeTracker.cpp", "MarkTaskDirty", 422, "void pxrInternal__aapl__pxrReserved__::HdChangeTracker::MarkTaskDirty(const SdfPath &, HdDirtyBits)", v13), (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v12, "it != _taskState.end()", v11) & 1) != 0))
    {
      int v7 = *((_DWORD *)v6 + 6);
      if ((a3 & 0x10) != 0 && (v7 & 0x10) == 0) {
        ++*((_DWORD *)this + 811);
      }
      *((_DWORD *)v6 + 6) = v7 | a3;
      ++*((_DWORD *)this + 807);
    }
  }
  else
  {
    v12[0] = "hd/changeTracker.cpp";
    v12[1] = "MarkTaskDirty";
    void v12[2] = 417;
    void v12[3] = "void pxrInternal__aapl__pxrReserved__::HdChangeTracker::MarkTaskDirty(const SdfPath &, HdDirtyBits)";
    LOBYTE(v13) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"MarkTaskDirty called with bits == clean!");
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::GetTaskDirtyBits(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v2 = sub_216A62F60((void *)this + 11, (unsigned int *)a2);
  if (v2) {
    return *((unsigned int *)v2 + 6);
  }
  v5[0] = "hd/changeTracker.cpp";
  v5[1] = "GetTaskDirtyBits";
  v5[2] = 438;
  v5[3] = "HdDirtyBits pxrInternal__aapl__pxrReserved__::HdChangeTracker::GetTaskDirtyBits(const SdfPath &)";
  char v6 = 0;
  char v4 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v5, "it != _taskState.end()", 0);
  uint64_t result = 0;
  if (v4) {
    return *((unsigned int *)v2 + 6);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::MarkTaskClean(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, int a3)
{
  uint64_t result = (uint64_t)sub_216A62F60((void *)this + 11, (unsigned int *)a2);
  uint64_t v5 = result;
  if (result
    || (v6[0] = "hd/changeTracker.cpp",
        v6[1] = "MarkTaskClean",
        v6[2] = 447,
        v6[3] = "void pxrInternal__aapl__pxrReserved__::HdChangeTracker::MarkTaskClean(const SdfPath &, HdDirtyBits)",
        char v7 = 0,
        uint64_t result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v6, "it != _taskState.end()", 0),
        (result & 1) != 0))
  {
    *(_DWORD *)(v5 + 24) = *(_DWORD *)(v5 + 24) & 2 | a3;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::GetRenderTagVersion(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this)
{
  return *((unsigned int *)this + 810);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::GetTaskRenderTagsVersion(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this)
{
  return *((unsigned int *)this + 811);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::GetInstancerDirtyBits(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v2 = sub_216A62F60((void *)this + 6, (unsigned int *)a2);
  if (v2) {
    return *((unsigned int *)v2 + 6);
  }
  v5[0] = "hd/changeTracker.cpp";
  v5[1] = "GetInstancerDirtyBits";
  v5[2] = 473;
  v5[3] = "HdDirtyBits pxrInternal__aapl__pxrReserved__::HdChangeTracker::GetInstancerDirtyBits(const SdfPath &)";
  char v6 = 0;
  char v4 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v5, "it != _instancerState.end()", 0);
  uint64_t result = 0;
  if (v4) {
    return *((unsigned int *)v2 + 6);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::HdChangeTracker::MarkInstancerDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3)
{
  uint64_t v3 = MEMORY[0x270FA5388](this, a2, a3);
  v20[57] = *MEMORY[0x263EF8340];
  if (v5)
  {
    char v6 = v5;
    char v7 = v4;
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::HdChangeTracker *)v3;
    uint64_t v9 = *(void *)(v3 + 3248);
    if (v9)
    {
      (*(void (**)(void *__return_ptr))(*(void *)v9 + 16))(v12);
      v20[56] = 0x800000000;
      pxrInternal__aapl__pxrReserved__::HdDirtyBitsTranslator::InstancerDirtyBitsToLocatorSet((pxrInternal__aapl__pxrReserved__::HdInstancedBySchema *)v12, v6, (pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *)v20, v10);
      if (!pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::IsEmpty((pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *)v20))
      {
        uint64_t v11 = *((void *)v8 + 406);
        sub_2171AA6C8(&v14, v7, (uint64_t)v20);
        uint64_t v19 = 0x1000000001;
        sub_2171AAEEC((uint64_t)&v14, (uint64_t)v17, (uint64_t)v17);
        (*(void (**)(uint64_t, void **))(*(void *)v11 + 56))(v11, v17);
        sub_2171AB018(v17);
        sub_2171AA914((uint64_t)&v16);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
        sub_21697C414(&v14);
      }
      sub_2171AA914((uint64_t)v20);
      if (v13) {
        sub_216784EC4(v13);
      }
      if ((v12[0] & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v12[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::HdChangeTracker::_MarkInstancerDirty(v8, v4, (int)v5);
    }
  }
  else
  {
    v17[0] = "hd/changeTracker.cpp";
    v17[1] = "MarkInstancerDirty";
    v17[2] = (void *)482;
    v17[3] = "void pxrInternal__aapl__pxrReserved__::HdChangeTracker::MarkInstancerDirty(const SdfPath &, HdDirtyBits)";
    char v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v17, 1, (pxrInternal__aapl__pxrReserved__ *)"MarkInstancerDirty called with bits == clean!");
  }
}

void sub_2171A8884(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_21675DB74(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::_MarkInstancerDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, int a3)
{
  uint64_t result = (uint64_t)sub_216A62F60((void *)this + 6, (unsigned int *)a2);
  uint64_t v7 = result;
  if (result
    || (unint64_t v30 = "hd/changeTracker.cpp",
        v31 = "_MarkInstancerDirty",
        uint64_t v32 = 504,
        uint64_t v33 = "void pxrInternal__aapl__pxrReserved__::HdChangeTracker::_MarkInstancerDirty(const SdfPath &, HdDirtyBits)",
        char v34 = 0,
        uint64_t result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v30, "it != _instancerState.end()", 0), (result & 1) != 0))
  {
    int v8 = *(_DWORD *)(v7 + 24);
    if ((a3 & ~v8) != 0)
    {
      *(_DWORD *)(v7 + 24) = v8 | a3;
      ++*((_DWORD *)this + 807);
      int v9 = a3 & 0x200;
      if ((a3 & 0x20000) != 0)
      {
        uint64_t v10 = (pxrInternal__aapl__pxrReserved__::HdChangeTracker *)(v9 | 0x30000u);
        ++*((_DWORD *)this + 809);
      }
      else
      {
        uint64_t v10 = (pxrInternal__aapl__pxrReserved__::HdChangeTracker *)(v9 | 0x10000u);
      }
      unint64_t v30 = 0;
      LOBYTE(v31) = 0;
      uint64_t v32 = 0;
      if (sub_2171A8BB4((uint64_t *)this + 182, (uint64_t)&v30, (unsigned int *)a2))
      {
        uint64_t v11 = *(void **)(v32 + 24);
        char v12 = (void *)(v32 + 32);
        if (v11 != (void *)(v32 + 32))
        {
          do
          {
            pxrInternal__aapl__pxrReserved__::HdChangeTracker::_MarkInstancerDirty(this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v11 + 28), v10);
            uint64_t v13 = (void *)v11[1];
            if (v13)
            {
              do
              {
                int v14 = v13;
                uint64_t v13 = (void *)*v13;
              }
              while (v13);
            }
            else
            {
              do
              {
                int v14 = (void *)v11[2];
                BOOL v15 = *v14 == (void)v11;
                uint64_t v11 = v14;
              }
              while (!v15);
            }
            uint64_t v11 = v14;
          }
          while (v14 != v12);
        }
      }
      uint64_t v27 = 0;
      char v28 = 0;
      uint64_t v29 = 0;
      if (sub_2171A8BB4((uint64_t *)this + 36, (uint64_t)&v27, (unsigned int *)a2))
      {
        uint64_t v16 = *(void **)(v29 + 24);
        uint64_t v17 = (void *)(v29 + 32);
        if (v16 != (void *)(v29 + 32))
        {
          do
          {
            pxrInternal__aapl__pxrReserved__::HdChangeTracker::_MarkRprimDirty(this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v16 + 28), v10);
            char v18 = (void *)v16[1];
            if (v18)
            {
              do
              {
                uint64_t v19 = v18;
                char v18 = (void *)*v18;
              }
              while (v18);
            }
            else
            {
              do
              {
                uint64_t v19 = (void *)v16[2];
                BOOL v15 = *v19 == (void)v16;
                uint64_t v16 = v19;
              }
              while (!v15);
            }
            uint64_t v16 = v19;
          }
          while (v19 != v17);
        }
      }
      uint64_t v24 = 0;
      char v25 = 0;
      uint64_t v26 = 0;
      if (sub_2171A8BB4((uint64_t *)this + 109, (uint64_t)&v24, (unsigned int *)a2))
      {
        uint64_t v20 = *(void **)(v26 + 24);
        uint64_t v21 = (void *)(v26 + 32);
        if (v20 != (void *)(v26 + 32))
        {
          do
          {
            pxrInternal__aapl__pxrReserved__::HdChangeTracker::_MarkSprimDirty(this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v20 + 28), (int)v10);
            uint64_t v22 = (void *)v20[1];
            if (v22)
            {
              do
              {
                uint64_t v23 = v22;
                uint64_t v22 = (void *)*v22;
              }
              while (v22);
            }
            else
            {
              do
              {
                uint64_t v23 = (void *)v20[2];
                BOOL v15 = *v23 == (void)v20;
                uint64_t v20 = v23;
              }
              while (!v15);
            }
            uint64_t v20 = v23;
          }
          while (v23 != v21);
        }
      }
      uint64_t v26 = 0;
      sub_21685C048(&v24);
      uint64_t v29 = 0;
      sub_21685C048(&v27);
      uint64_t v32 = 0;
      return (uint64_t)sub_21685C048(&v30);
    }
  }
  return result;
}

void sub_2171A8B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  a12 = 0;
  sub_21685C048(&a10);
  a16 = 0;
  sub_21685C048(&a14);
  a20 = 0;
  sub_21685C048(&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_2171A8BB4(uint64_t *a1, uint64_t a2, unsigned int *a3)
{
  if (*(void *)(a2 + 16))
  {
    sub_21685C080(a2);
    *(void *)(a2 + 16) = 0;
  }

  return sub_2171AB0C0(a1, 0, a3, 0, a2, 0, (uint64_t (*)(uint64_t, unsigned int *, uint64_t))sub_2171AB3D8, 0);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::_MarkSprimDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, int a3)
{
  char v6 = sub_216A62F60((void *)this + 16, (unsigned int *)a2);
  if (v6
    || (uint64_t v13 = "hd/changeTracker.cpp",
        int v14 = "_MarkSprimDirty",
        uint64_t v15 = 630,
        uint64_t v16 = "void pxrInternal__aapl__pxrReserved__::HdChangeTracker::_MarkSprimDirty(const SdfPath &, HdDirtyBits)",
        char v17 = 0,
        uint64_t result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v13, "it != _sprimState.end()", 0),
        (result & 1) != 0))
  {
    *((_DWORD *)v6 + 6) |= a3;
    uint64_t v13 = 0;
    LOBYTE(v14) = 0;
    uint64_t v15 = 0;
    if (sub_2171A8BB4((uint64_t *)this + 255, (uint64_t)&v13, (unsigned int *)a2))
    {
      uint64_t v7 = *(void **)(v15 + 24);
      int v8 = (void *)(v15 + 32);
      if (v7 != (void *)(v15 + 32))
      {
        do
        {
          pxrInternal__aapl__pxrReserved__::HdChangeTracker::MarkSprimDirty(this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v7 + 28), 0xFFFFFFFF);
          int v9 = (void *)v7[1];
          if (v9)
          {
            do
            {
              uint64_t v10 = v9;
              int v9 = (void *)*v9;
            }
            while (v9);
          }
          else
          {
            do
            {
              uint64_t v10 = (void *)v7[2];
              BOOL v11 = *v10 == (void)v7;
              uint64_t v7 = v10;
            }
            while (!v11);
          }
          uint64_t v7 = v10;
        }
        while (v10 != v8);
      }
    }
    ++*((_DWORD *)this + 807);
    uint64_t v15 = 0;
    return (uint64_t)sub_21685C048(&v13);
  }
  return result;
}

void sub_2171A8D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  a12 = 0;
  sub_21685C048(&a10);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::MarkInstancerClean(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, int a3)
{
  if (sub_2171A6C8C(18))
  {
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Instancer Cleaned: %s\n", v7, v8, Text);
  }
  uint64_t result = (uint64_t)sub_216A62F60((void *)this + 6, (unsigned int *)a2);
  uint64_t v10 = result;
  if (result
    || (v11[0] = "hd/changeTracker.cpp",
        v11[1] = "MarkInstancerClean",
        v11[2] = 567,
        v11[3] = "void pxrInternal__aapl__pxrReserved__::HdChangeTracker::MarkInstancerClean(const SdfPath &, HdDirtyBits)",
        char v12 = 0,
        uint64_t result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v11, "it != _instancerState.end()", 0), (result & 1) != 0))
  {
    *(_DWORD *)(v10 + 24) = *(_DWORD *)(v10 + 24) & 2 | a3;
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::HdChangeTracker::SprimInserted(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, int a3)
{
  if (sub_2171A6C8C(29))
  {
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Sprim Added: %s\n", v7, v8, Text);
  }
  uint64_t v10 = a2;
  uint64_t result = sub_2171AABD4((uint64_t)this + 128, (unsigned int *)a2, (uint64_t)&unk_2174BFD90, &v10);
  *((_DWORD *)result + 6) = a3;
  ++*((_DWORD *)this + 807);
  ++*((_DWORD *)this + 804);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::SprimRemoved(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  if (sub_2171A6C8C(30))
  {
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Sprim Removed: %s\n", v5, v6, Text);
  }
  uint64_t result = sub_2171AAE9C((void *)this + 16, (unsigned int *)a2);
  ++*((_DWORD *)this + 807);
  ++*((_DWORD *)this + 804);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::GetSprimDirtyBits(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v2 = sub_216A62F60((void *)this + 16, (unsigned int *)a2);
  if (v2) {
    return *((unsigned int *)v2 + 6);
  }
  v5[0] = "hd/changeTracker.cpp";
  v5[1] = "GetSprimDirtyBits";
  v5[2] = 599;
  v5[3] = "HdDirtyBits pxrInternal__aapl__pxrReserved__::HdChangeTracker::GetSprimDirtyBits(const SdfPath &)";
  char v6 = 0;
  char v4 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v5, "it != _sprimState.end()", 0);
  uint64_t result = 0;
  if (v4) {
    return *((unsigned int *)v2 + 6);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::MarkSprimClean(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, int a3)
{
  uint64_t result = (uint64_t)sub_216A62F60((void *)this + 16, (unsigned int *)a2);
  uint64_t v5 = result;
  if (result
    || (v6[0] = "hd/changeTracker.cpp",
        v6[1] = "MarkSprimClean",
        v6[2] = 651,
        v6[3] = "void pxrInternal__aapl__pxrReserved__::HdChangeTracker::MarkSprimClean(const SdfPath &, HdDirtyBits)",
        char v7 = 0,
        uint64_t result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v6, "it != _sprimState.end()", 0),
        (result & 1) != 0))
  {
    *(_DWORD *)(v5 + 24) = a3;
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::HdChangeTracker::AddInstancerSprimDependency(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  return pxrInternal__aapl__pxrReserved__::HdChangeTracker::_AddDependency((uint64_t)this, (uint64_t *)this + 109, (unsigned int *)a2, a3);
}

void *pxrInternal__aapl__pxrReserved__::HdChangeTracker::RemoveInstancerSprimDependency(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  return pxrInternal__aapl__pxrReserved__::HdChangeTracker::_RemoveDependency((uint64_t)this, (uint64_t *)this + 109, (unsigned int *)a2, a3);
}

void *pxrInternal__aapl__pxrReserved__::HdChangeTracker::BprimInserted(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, int a3)
{
  if (sub_2171A6C8C(0))
  {
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Bprim Added: %s\n", v7, v8, Text);
  }
  uint64_t v10 = a2;
  uint64_t result = sub_2171AABD4((uint64_t)this + 168, (unsigned int *)a2, (uint64_t)&unk_2174BFD90, &v10);
  *((_DWORD *)result + 6) = a3;
  ++*((_DWORD *)this + 807);
  ++*((_DWORD *)this + 805);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::BprimRemoved(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  if (sub_2171A6C8C(1))
  {
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Bprim Removed: %s\n", v5, v6, Text);
  }
  uint64_t result = sub_2171AAE9C((void *)this + 21, (unsigned int *)a2);
  ++*((_DWORD *)this + 807);
  ++*((_DWORD *)this + 805);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::GetBprimDirtyBits(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v2 = sub_216A62F60((void *)this + 21, (unsigned int *)a2);
  if (v2) {
    return *((unsigned int *)v2 + 6);
  }
  v5[0] = "hd/changeTracker.cpp";
  v5[1] = "GetBprimDirtyBits";
  v5[2] = 696;
  v5[3] = "HdDirtyBits pxrInternal__aapl__pxrReserved__::HdChangeTracker::GetBprimDirtyBits(const SdfPath &)";
  char v6 = 0;
  char v4 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v5, "it != _bprimState.end()", 0);
  uint64_t result = 0;
  if (v4) {
    return *((unsigned int *)v2 + 6);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::HdChangeTracker::MarkBprimDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3)
{
  uint64_t v3 = MEMORY[0x270FA5388](this, a2, a3);
  v20[57] = *MEMORY[0x263EF8340];
  if (v5)
  {
    char v6 = v5;
    char v7 = v4;
    int v8 = (pxrInternal__aapl__pxrReserved__::HdChangeTracker *)v3;
    uint64_t v9 = *(void *)(v3 + 3248);
    if (v9)
    {
      (*(void (**)(void *__return_ptr))(*(void *)v9 + 16))(v12);
      v20[56] = 0x800000000;
      pxrInternal__aapl__pxrReserved__::HdDirtyBitsTranslator::BprimDirtyBitsToLocatorSet((unint64_t)v12, v6, (pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *)v20, v10);
      if (!pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::IsEmpty((pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *)v20))
      {
        uint64_t v11 = *((void *)v8 + 406);
        sub_2171AA6C8(&v14, v7, (uint64_t)v20);
        uint64_t v19 = 0x1000000001;
        sub_2171AAEEC((uint64_t)&v14, (uint64_t)v17, (uint64_t)v17);
        (*(void (**)(uint64_t, void **))(*(void *)v11 + 56))(v11, v17);
        sub_2171AB018(v17);
        sub_2171AA914((uint64_t)&v16);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
        sub_21697C414(&v14);
      }
      sub_2171AA914((uint64_t)v20);
      if (v13) {
        sub_216784EC4(v13);
      }
      if ((v12[0] & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v12[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::HdChangeTracker::_MarkBprimDirty(v8, v4, (int)v5);
    }
  }
  else
  {
    v17[0] = "hd/changeTracker.cpp";
    v17[1] = "MarkBprimDirty";
    v17[2] = (void *)705;
    v17[3] = "void pxrInternal__aapl__pxrReserved__::HdChangeTracker::MarkBprimDirty(const SdfPath &, HdDirtyBits)";
    char v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v17, 1, (pxrInternal__aapl__pxrReserved__ *)"MarkBprimDirty called with bits == clean!");
  }
}

void sub_2171A942C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_21675DB74(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::_MarkBprimDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, int a3)
{
  uint64_t result = (uint64_t)sub_216A62F60((void *)this + 21, (unsigned int *)a2);
  uint64_t v6 = result;
  if (result
    || (v7[0] = "hd/changeTracker.cpp",
        v7[1] = "_MarkBprimDirty",
        v7[2] = 727,
        v7[3] = "void pxrInternal__aapl__pxrReserved__::HdChangeTracker::_MarkBprimDirty(const SdfPath &, HdDirtyBits)",
        char v8 = 0,
        uint64_t result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v7, "it != _bprimState.end()", 0),
        (result & 1) != 0))
  {
    *(_DWORD *)(v6 + 24) |= a3;
    ++*((_DWORD *)this + 807);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::MarkBprimClean(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, int a3)
{
  uint64_t result = (uint64_t)sub_216A62F60((void *)this + 21, (unsigned int *)a2);
  uint64_t v5 = result;
  if (result
    || (v6[0] = "hd/changeTracker.cpp",
        v6[1] = "MarkBprimClean",
        v6[2] = 737,
        v6[3] = "void pxrInternal__aapl__pxrReserved__::HdChangeTracker::MarkBprimClean(const SdfPath &, HdDirtyBits)",
        char v7 = 0,
        uint64_t result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v6, "it != _bprimState.end()", 0),
        (result & 1) != 0))
  {
    *(_DWORD *)(v5 + 24) = a3;
  }
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsRprimDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return (pxrInternal__aapl__pxrReserved__::HdChangeTracker::GetRprimDirtyBits(this, a2) & 0xFFFFFFFD) != 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::GetRprimDirtyBits(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v2 = sub_216A9DB14((void *)this + 1, (unsigned int *)a2);
  if (v2) {
    return *((unsigned int *)v2 + 6);
  }
  v5[0] = "hd/changeTracker.cpp";
  v5[1] = "GetRprimDirtyBits";
  v5[2] = 1079;
  v5[3] = "HdDirtyBits pxrInternal__aapl__pxrReserved__::HdChangeTracker::GetRprimDirtyBits(const SdfPath &) const";
  char v6 = 0;
  char v4 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v5, "it != _rprimState.end()", 0);
  uint64_t result = 0;
  if (v4) {
    return *((unsigned int *)v2 + 6);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsTopologyDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  RprimDirtyBits = (pxrInternal__aapl__pxrReserved__::HdChangeTracker *)pxrInternal__aapl__pxrReserved__::HdChangeTracker::GetRprimDirtyBits(this, a2);

  return pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsTopologyDirty(RprimDirtyBits, a2, v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsTopologyDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  __int16 v4 = (__int16)this;
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdTokens);
  if (!v5) {
    uint64_t v5 = sub_217198988(&pxrInternal__aapl__pxrReserved__::HdTokens);
  }
  BOOL v6 = (v4 & 0x100) == 0;
  uint64_t v7 = (unsigned __int16)(v4 & 0x100) >> 8;
  uint64_t v8 = v6;
  pxrInternal__aapl__pxrReserved__::HdChangeTracker::_LogCacheAccess((pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)((char *)v5 + 600), a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v8);
  return v7;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsDoubleSidedDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  RprimDirtyBits = (pxrInternal__aapl__pxrReserved__::HdChangeTracker *)pxrInternal__aapl__pxrReserved__::HdChangeTracker::GetRprimDirtyBits(this, a2);

  return pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsDoubleSidedDirty(RprimDirtyBits, a2, v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsDoubleSidedDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  __int16 v4 = (__int16)this;
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdTokens);
  if (!v5) {
    uint64_t v5 = sub_217198988(&pxrInternal__aapl__pxrReserved__::HdTokens);
  }
  BOOL v6 = (v4 & 0x1000) == 0;
  uint64_t v7 = (unsigned __int16)(v4 & 0x1000) >> 12;
  uint64_t v8 = v6;
  pxrInternal__aapl__pxrReserved__::HdChangeTracker::_LogCacheAccess((pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)((char *)v5 + 128), a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v8);
  return v7;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsCullStyleDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  RprimDirtyBits = (pxrInternal__aapl__pxrReserved__::HdChangeTracker *)pxrInternal__aapl__pxrReserved__::HdChangeTracker::GetRprimDirtyBits(this, a2);

  return pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsCullStyleDirty(RprimDirtyBits, a2, v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsCullStyleDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  __int16 v4 = (__int16)this;
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdTokens);
  if (!v5) {
    uint64_t v5 = sub_217198988(&pxrInternal__aapl__pxrReserved__::HdTokens);
  }
  BOOL v6 = (v4 & 0x2000) == 0;
  uint64_t v7 = (unsigned __int16)(v4 & 0x2000) >> 13;
  uint64_t v8 = v6;
  pxrInternal__aapl__pxrReserved__::HdChangeTracker::_LogCacheAccess((pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)((char *)v5 + 120), a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v8);
  return v7;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsDisplayStyleDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  RprimDirtyBits = (pxrInternal__aapl__pxrReserved__::HdChangeTracker *)pxrInternal__aapl__pxrReserved__::HdChangeTracker::GetRprimDirtyBits(this, a2);

  return pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsDisplayStyleDirty(RprimDirtyBits, a2, v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsDisplayStyleDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  char v4 = (char)this;
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdTokens);
  if (!v5) {
    uint64_t v5 = sub_217198988(&pxrInternal__aapl__pxrReserved__::HdTokens);
  }
  BOOL v6 = (v4 & 0x10) == 0;
  uint64_t v7 = (v4 & 0x10) >> 4;
  uint64_t v8 = v6;
  pxrInternal__aapl__pxrReserved__::HdChangeTracker::_LogCacheAccess((pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)((char *)v5 + 160), a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v8);
  return v7;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsSubdivTagsDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  RprimDirtyBits = (pxrInternal__aapl__pxrReserved__::HdChangeTracker *)pxrInternal__aapl__pxrReserved__::HdChangeTracker::GetRprimDirtyBits(this, a2);

  return pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsSubdivTagsDirty(RprimDirtyBits, a2, v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsSubdivTagsDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  __int16 v4 = (__int16)this;
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdTokens);
  if (!v5) {
    uint64_t v5 = sub_217198988(&pxrInternal__aapl__pxrReserved__::HdTokens);
  }
  BOOL v6 = (v4 & 0x4000) == 0;
  uint64_t v7 = (unsigned __int16)(v4 & 0x4000) >> 14;
  uint64_t v8 = v6;
  pxrInternal__aapl__pxrReserved__::HdChangeTracker::_LogCacheAccess((pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)((char *)v5 + 576), a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v8);
  return v7;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsTransformDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  RprimDirtyBits = (pxrInternal__aapl__pxrReserved__::HdChangeTracker *)pxrInternal__aapl__pxrReserved__::HdChangeTracker::GetRprimDirtyBits(this, a2);

  return pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsTransformDirty(RprimDirtyBits, a2, v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsTransformDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  __int16 v4 = (__int16)this;
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdTokens);
  if (!v5) {
    uint64_t v5 = sub_217198988(&pxrInternal__aapl__pxrReserved__::HdTokens);
  }
  BOOL v6 = (v4 & 0x200) == 0;
  uint64_t v7 = (unsigned __int16)(v4 & 0x200) >> 9;
  uint64_t v8 = v6;
  pxrInternal__aapl__pxrReserved__::HdChangeTracker::_LogCacheAccess((pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)((char *)v5 + 624), a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v8);
  return v7;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsVisibilityDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  RprimDirtyBits = (pxrInternal__aapl__pxrReserved__::HdChangeTracker *)pxrInternal__aapl__pxrReserved__::HdChangeTracker::GetRprimDirtyBits(this, a2);

  return pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsVisibilityDirty(RprimDirtyBits, a2, v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsVisibilityDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  __int16 v4 = (__int16)this;
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdTokens);
  if (!v5) {
    uint64_t v5 = sub_217198988(&pxrInternal__aapl__pxrReserved__::HdTokens);
  }
  BOOL v6 = (v4 & 0x400) == 0;
  uint64_t v7 = (unsigned __int16)(v4 & 0x400) >> 10;
  uint64_t v8 = v6;
  pxrInternal__aapl__pxrReserved__::HdChangeTracker::_LogCacheAccess((pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)((char *)v5 + 648), a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v8);
  return v7;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsExtentDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  RprimDirtyBits = (pxrInternal__aapl__pxrReserved__::HdChangeTracker *)pxrInternal__aapl__pxrReserved__::HdChangeTracker::GetRprimDirtyBits(this, a2);

  return pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsExtentDirty(RprimDirtyBits, a2, v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsExtentDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  char v4 = (char)this;
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdTokens);
  if (!v5) {
    uint64_t v5 = sub_217198988(&pxrInternal__aapl__pxrReserved__::HdTokens);
  }
  BOOL v6 = (v4 & 8) == 0;
  uint64_t v7 = (v4 & 8) >> 3;
  uint64_t v8 = v6;
  pxrInternal__aapl__pxrReserved__::HdChangeTracker::_LogCacheAccess((pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)((char *)v5 + 248), a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v8);
  return v7;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsPrimIdDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  RprimDirtyBits = (pxrInternal__aapl__pxrReserved__::HdChangeTracker *)pxrInternal__aapl__pxrReserved__::HdChangeTracker::GetRprimDirtyBits(this, a2);

  return pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsPrimIdDirty(RprimDirtyBits, a2, v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsPrimIdDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  char v4 = (char)this;
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdTokens);
  if (!v5) {
    uint64_t v5 = sub_217198988(&pxrInternal__aapl__pxrReserved__::HdTokens);
  }
  BOOL v6 = (v4 & 4) == 0;
  uint64_t v7 = (v4 & 4) >> 2;
  uint64_t v8 = v6;
  pxrInternal__aapl__pxrReserved__::HdChangeTracker::_LogCacheAccess((pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)((char *)v5 + 512), a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v8);
  return v7;
}

BOOL pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsAnyPrimvarDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  RprimDirtyBits = (pxrInternal__aapl__pxrReserved__::HdChangeTracker *)pxrInternal__aapl__pxrReserved__::HdChangeTracker::GetRprimDirtyBits(this, a2);

  return pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsAnyPrimvarDirty(RprimDirtyBits, a2, v4);
}

BOOL pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsAnyPrimvarDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  __int16 v4 = (__int16)this;
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdTokens);
  if (!v5) {
    uint64_t v5 = sub_217198988(&pxrInternal__aapl__pxrReserved__::HdTokens);
  }
  BOOL v6 = (v4 & 0x8860) == 0;
  BOOL v7 = (v4 & 0x8860) != 0;
  uint64_t v8 = v6;
  pxrInternal__aapl__pxrReserved__::HdChangeTracker::_LogCacheAccess((pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)((char *)v5 + 504), a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v8);
  return v7;
}

BOOL pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsPrimvarDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  RprimDirtyBits = (pxrInternal__aapl__pxrReserved__::HdChangeTracker *)pxrInternal__aapl__pxrReserved__::HdChangeTracker::GetRprimDirtyBits(this, a2);

  return pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsPrimvarDirty(RprimDirtyBits, a2, a3, v6);
}

BOOL pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsPrimvarDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  int v6 = (int)this;
  BOOL v7 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdTokens);
  if (!v7) {
    BOOL v7 = sub_217198988(&pxrInternal__aapl__pxrReserved__::HdTokens);
  }
  if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v7 + 57) & 0xFFFFFFFFFFFFFFF8)) {
    goto LABEL_21;
  }
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdTokens);
  if (!v8) {
    uint64_t v8 = sub_217198988(&pxrInternal__aapl__pxrReserved__::HdTokens);
  }
  if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v8 + 80) & 0xFFFFFFFFFFFFFFF8)) {
    goto LABEL_21;
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdTokens);
  if (!v9) {
    uint64_t v9 = sub_217198988(&pxrInternal__aapl__pxrReserved__::HdTokens);
  }
  if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*(void *)v9 & 0xFFFFFFFFFFFFFFF8)) {
    goto LABEL_21;
  }
  uint64_t v10 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdTokens);
  if (!v10) {
    uint64_t v10 = sub_217198988(&pxrInternal__aapl__pxrReserved__::HdTokens);
  }
  if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v10 + 50) & 0xFFFFFFFFFFFFFFF8))
  {
LABEL_21:
    int v13 = 32;
  }
  else
  {
    uint64_t v11 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdTokens);
    if (!v11) {
      uint64_t v11 = sub_217198988(&pxrInternal__aapl__pxrReserved__::HdTokens);
    }
    if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v11 + 52) & 0xFFFFFFFFFFFFFFF8))
    {
      int v13 = 2048;
    }
    else
    {
      char v12 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdTokens);
      if (!v12) {
        char v12 = sub_217198988(&pxrInternal__aapl__pxrReserved__::HdTokens);
      }
      if ((*(void *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v12 + 82) & 0xFFFFFFFFFFFFFFF8)) {
        int v13 = 0x8000;
      }
      else {
        int v13 = 64;
      }
    }
  }
  BOOL v14 = (v13 & v6) == 0;
  BOOL v15 = (v13 & v6) != 0;
  uint64_t v16 = v14;
  pxrInternal__aapl__pxrReserved__::HdChangeTracker::_LogCacheAccess(a3, a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v16);
  return v15;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsInstancerDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  int v4 = (int)this;
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::HdInstancerTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdInstancerTokens);
  if (!v5) {
    uint64_t v5 = sub_2171ABA44(&pxrInternal__aapl__pxrReserved__::HdInstancerTokens);
  }
  BOOL v6 = (v4 & 0x10000) == 0;
  uint64_t v7 = (v4 & 0x10000u) >> 16;
  uint64_t v8 = v6;
  pxrInternal__aapl__pxrReserved__::HdChangeTracker::_LogCacheAccess((pxrInternal__aapl__pxrReserved__::HdInstancerTokens_StaticTokenType *)((char *)v5 + 8), a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v8);
  return v7;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsInstanceIndexDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  int v4 = (int)this;
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::HdInstancerTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdInstancerTokens);
  if (!v5) {
    uint64_t v5 = sub_2171ABA44(&pxrInternal__aapl__pxrReserved__::HdInstancerTokens);
  }
  BOOL v6 = (v4 & 0x20000) == 0;
  uint64_t v7 = (v4 & 0x20000u) >> 17;
  uint64_t v8 = v6;
  pxrInternal__aapl__pxrReserved__::HdChangeTracker::_LogCacheAccess((pxrInternal__aapl__pxrReserved__::HdInstancerTokens_StaticTokenType *)((char *)v5 + 32), a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v8);
  return v7;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsReprDirty(unsigned int a1)
{
  return (a1 >> 18) & 1;
}

void pxrInternal__aapl__pxrReserved__::HdChangeTracker::MarkPrimvarDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  unsigned int v6 = 0;
  pxrInternal__aapl__pxrReserved__::HdChangeTracker::MarkPrimvarDirty((pxrInternal__aapl__pxrReserved__::HdChangeTracker *)&v6, (unsigned int *)a3, a3);
  uint64_t v5 = v6;

  pxrInternal__aapl__pxrReserved__::HdChangeTracker::MarkRprimDirty(this, a2, v5);
}

pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::HdChangeTracker::MarkPrimvarDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, unsigned int *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  uint64_t result = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdTokens);
  if (!result) {
    uint64_t result = sub_217198988(&pxrInternal__aapl__pxrReserved__::HdTokens);
  }
  if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)result + 57) & 0xFFFFFFFFFFFFFFF8))
  {
    int v6 = 32;
  }
  else
  {
    uint64_t result = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdTokens);
    if (!result) {
      uint64_t result = sub_217198988(&pxrInternal__aapl__pxrReserved__::HdTokens);
    }
    if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)result + 52) & 0xFFFFFFFFFFFFFFF8))
    {
      int v6 = 2048;
    }
    else
    {
      uint64_t result = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdTokens);
      if (!result) {
        uint64_t result = sub_217198988(&pxrInternal__aapl__pxrReserved__::HdTokens);
      }
      if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)result + 82) & 0xFFFFFFFFFFFFFFF8)) {
        int v6 = 0x8000;
      }
      else {
        int v6 = 64;
      }
    }
  }
  *(_DWORD *)this |= v6;
  return result;
}

void pxrInternal__aapl__pxrReserved__::HdChangeTracker::MarkAllRprimsDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, uint64_t a2)
{
  if (!a2)
  {
    v8[0] = "hd/changeTracker.cpp";
    v8[1] = "MarkAllRprimsDirty";
    void v8[2] = 978;
    v8[3] = "void pxrInternal__aapl__pxrReserved__::HdChangeTracker::MarkAllRprimsDirty(HdDirtyBits)";
    char v9 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v8, 1, (pxrInternal__aapl__pxrReserved__ *)"MarkAllRprimsDirty called with bits == clean!");
    return;
  }
  int v4 = (uint64_t *)*((void *)this + 3);
  if (*((void *)this + 406))
  {
    for (; v4; int v4 = (uint64_t *)*v4)
      pxrInternal__aapl__pxrReserved__::HdChangeTracker::MarkRprimDirty(this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v4 + 2), a2);
    return;
  }
  if (v4)
  {
    char v5 = 0;
    do
    {
      while (1)
      {
        int v6 = *((_DWORD *)v4 + 6);
        if (((~v6 | 0xC0000) & a2) == 0) {
          break;
        }
        int v7 = v6 | a2;
        *((_DWORD *)v4 + 6) = v7;
        if ((v7 & 2) != 0) {
          break;
        }
        *((_DWORD *)v4 + 6) = v7 | 2;
        int v4 = (uint64_t *)*v4;
        char v5 = 1;
        if (!v4) {
          goto LABEL_15;
        }
      }
      int v4 = (uint64_t *)*v4;
    }
    while (v4);
    if ((v5 & 1) == 0) {
      goto LABEL_16;
    }
LABEL_15:
    ++*((_DWORD *)this + 802);
  }
LABEL_16:
  ++*((_DWORD *)this + 807);
  if ((a2 & 0x400) != 0)
  {
    ++*((_DWORD *)this + 808);
    if ((a2 & 0x20000) == 0)
    {
LABEL_18:
      if ((a2 & 0x80000) == 0) {
        goto LABEL_20;
      }
      goto LABEL_19;
    }
  }
  else if ((a2 & 0x20000) == 0)
  {
    goto LABEL_18;
  }
  ++*((_DWORD *)this + 809);
  if ((a2 & 0x80000) != 0) {
LABEL_19:
  }
    ++*((_DWORD *)this + 810);
LABEL_20:
  if ((a2 & 0xC0000) != 0) {
    ++*((_DWORD *)this + 803);
  }
}

void *pxrInternal__aapl__pxrReserved__::HdChangeTracker::AddCollection(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v3 = (char *)this + 248;
  uint64_t result = sub_2168CB1F4((void *)this + 31, a2);
  if (!result)
  {
    char v5 = (uint64_t *)a2;
    uint64_t result = sub_2168CB594((uint64_t)v3, a2, (uint64_t)&unk_2174BFD90, &v5);
    *((_DWORD *)result + 6) = 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::MarkCollectionDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t result = (uint64_t)sub_2168CB1F4((void *)this + 31, a2);
  uint64_t v7 = result;
  if (result) {
    goto LABEL_2;
  }
  uint64_t v11 = "hd/changeTracker.cpp";
  char v12 = "MarkCollectionDirty";
  uint64_t v13 = 1108;
  BOOL v14 = "void pxrInternal__aapl__pxrReserved__::HdChangeTracker::MarkCollectionDirty(const TfToken &)";
  LOBYTE(v15) = 0;
  unint64_t v8 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
  if (v8)
  {
    char v9 = (const char *)(v8 + 16);
    if (*(char *)(v8 + 39) < 0) {
      char v9 = *(const char **)v9;
    }
  }
  else
  {
    char v9 = "";
  }
  uint64_t v10 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Collection %s not found\n", v5, v6, v9, v11, v12, v13, v14, v15);
  uint64_t result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v11, "it != _collectionState.end()", v10);
  if (result)
  {
LABEL_2:
    ++*(_DWORD *)(v7 + 24);
    ++*((_DWORD *)this + 807);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::GetCollectionVersion(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  int v4 = sub_2168CB120((void *)this + 31, a2);
  if (v4) {
    return (*((_DWORD *)this + 803) + *((_DWORD *)v4 + 6));
  }
  v8[0] = "hd/changeTracker.cpp";
  v8[1] = "GetCollectionVersion";
  void v8[2] = 1123;
  v8[3] = "unsigned int pxrInternal__aapl__pxrReserved__::HdChangeTracker::GetCollectionVersion(const TfToken &) const";
  char v9 = 0;
  unint64_t v6 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
  if (v6)
  {
    uint64_t v7 = (const char *)(v6 + 16);
    if (*(char *)(v6 + 39) < 0) {
      uint64_t v7 = *(const char **)v7;
    }
  }
  else
  {
    uint64_t v7 = "";
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v8, 1, (pxrInternal__aapl__pxrReserved__ *)"Change Tracker unable to find collection %s", v7);
  return *((unsigned int *)this + 803);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::GetVisibilityChangeCount(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this)
{
  return *((unsigned int *)this + 808);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::GetInstanceIndicesChangeCount(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this)
{
  return *((unsigned int *)this + 809);
}

void *pxrInternal__aapl__pxrReserved__::HdChangeTracker::AddState(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v3 = (char *)this + 208;
  uint64_t result = sub_2168CB1F4((void *)this + 26, a2);
  if (result)
  {
    int v5 = *((_DWORD *)result + 6) + 1;
  }
  else
  {
    unint64_t v6 = (uint64_t *)a2;
    uint64_t result = sub_2168CB594((uint64_t)v3, a2, (uint64_t)&unk_2174BFD90, &v6);
    int v5 = 1;
  }
  *((_DWORD *)result + 6) = v5;
  return result;
}

void pxrInternal__aapl__pxrReserved__::HdChangeTracker::MarkStateDirty(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v3 = sub_2168CB1F4((void *)this + 26, a2);
  if (v3)
  {
    ++*((_DWORD *)v3 + 6);
  }
  else
  {
    v6[0] = "hd/changeTracker.cpp";
    v6[1] = "MarkStateDirty";
    v6[2] = 1161;
    v6[3] = "void pxrInternal__aapl__pxrReserved__::HdChangeTracker::MarkStateDirty(const TfToken &)";
    char v7 = 0;
    unint64_t v4 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
    if (v4)
    {
      int v5 = (const char *)(v4 + 16);
      if (*(char *)(v4 + 39) < 0) {
        int v5 = *(const char **)v5;
      }
    }
    else
    {
      int v5 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v6, 1, (pxrInternal__aapl__pxrReserved__ *)"Change Tracker unable to find state %s", v5);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::GetStateVersion(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v3 = sub_2168CB120((void *)this + 26, a2);
  if (v3) {
    return *((unsigned int *)v3 + 6);
  }
  v7[0] = "hd/changeTracker.cpp";
  v7[1] = "GetStateVersion";
  v7[2] = 1173;
  v7[3] = "unsigned int pxrInternal__aapl__pxrReserved__::HdChangeTracker::GetStateVersion(const TfToken &) const";
  char v8 = 0;
  unint64_t v5 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
  if (v5)
  {
    unint64_t v6 = (const char *)(v5 + 16);
    if (*(char *)(v5 + 39) < 0) {
      unint64_t v6 = *(const char **)v6;
    }
  }
  else
  {
    unint64_t v6 = "";
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1, (pxrInternal__aapl__pxrReserved__ *)"Change Tracker unable to find state %s", v6);
  return 0;
}

void pxrInternal__aapl__pxrReserved__::HdChangeTracker::DumpDirtyBits(pxrInternal__aapl__pxrReserved__::HdChangeTracker *this)
{
  uint64_t v2 = sub_216779180(MEMORY[0x263F8C0F8], (uint64_t)"DirtyBits:", 10);
  pxrInternal__aapl__pxrReserved__::HdChangeTracker::StringifyDirtyBits(this, __p);
  if ((v7 & 0x80u) == 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)__p[0];
  }
  if ((v7 & 0x80u) == 0) {
    uint64_t v4 = v7;
  }
  else {
    uint64_t v4 = (uint64_t)__p[1];
  }
  unint64_t v5 = sub_216779180(v2, (uint64_t)v3, v4);
  sub_216779180(v5, (uint64_t)"\n", 1);
  if ((char)v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_2171AA5E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdChangeTracker::_SetTargetSceneIndex(uint64_t result, uint64_t a2)
{
  *(void *)(result + 3248) = a2;
  return result;
}

uint64_t sub_2171AA608(uint64_t a1)
{
  sub_2171AA644(a1, *(_DWORD **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_2171AA644(uint64_t a1, _DWORD *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = *(_DWORD **)v2;
      sub_2171AA688(v2 + 4);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

_DWORD *sub_2171AA688(_DWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);

  return sub_21697C414(a1);
}

_DWORD *sub_2171AA6C8(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  unint64_t v6 = sub_216981010(a1, a2);
  sub_21698105C(v6 + 1, a2 + 1);
  sub_2171AA72C(a1 + 2, a3);
  return a1;
}

void sub_2171AA718(_Unwind_Exception *a1)
{
  sub_21697B754(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_2171AA72C(_DWORD *a1, uint64_t a2)
{
  a1[113] = 8;
  uint64_t v4 = *(unsigned int *)(a2 + 448);
  unint64_t v5 = a1;
  if (v4 >= 9)
  {
    unint64_t v5 = malloc(56 * v4);
    *(void *)a1 = v5;
    a1[113] = v4;
  }
  a1[112] = v4;
  if (*(_DWORD *)(a2 + 452) >= 9u) {
    uint64_t v6 = *(void *)a2;
  }
  else {
    uint64_t v6 = a2;
  }
  sub_2171AA7B0(v6, v6 + 56 * *(unsigned int *)(a2 + 448), (uint64_t)v5);
  return a1;
}

uint64_t sub_2171AA7B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = 0;
    do
    {
      sub_2171AA848((_DWORD *)(a3 + v6), a1 + v6);
      v6 += 56;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

void sub_2171AA810(void *a1)
{
  __cxa_begin_catch(a1);
  for (; v2; v2 -= 56)
  {
    sub_217199B64(v1);
    v1 += 56;
  }
  __cxa_rethrow();
}

void sub_2171AA834(_Unwind_Exception *a1)
{
}

_DWORD *sub_2171AA848(_DWORD *a1, uint64_t a2)
{
  uint64_t v3 = a1;
  a1[13] = 6;
  uint64_t v4 = *(unsigned int *)(a2 + 48);
  if (v4 <= 6)
  {
    a1[12] = v4;
    unint64_t v5 = *(uint64_t **)a2;
    uint64_t v6 = *(unsigned int *)(a2 + 48);
    if (*(_DWORD *)(a2 + 52) < 7u) {
      unint64_t v5 = (uint64_t *)a2;
    }
    unsigned __int8 v7 = &v5[v6];
    if (!v6) {
      return v3;
    }
    do
    {
LABEL_9:
      uint64_t v9 = *v5;
      *(void *)a1 = *v5;
      if ((v9 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *(void *)a1 &= 0xFFFFFFFFFFFFFFF8;
      }
      ++v5;
      a1 += 2;
    }
    while (v5 != v7);
    return v3;
  }
  a1 = malloc(8 * v4);
  *(void *)uint64_t v3 = a1;
  v3[12] = v4;
  v3[13] = v4;
  unint64_t v5 = *(uint64_t **)a2;
  uint64_t v8 = *(unsigned int *)(a2 + 48);
  if (*(_DWORD *)(a2 + 52) < 7u) {
    unint64_t v5 = (uint64_t *)a2;
  }
  unsigned __int8 v7 = &v5[v8];
  if (v8) {
    goto LABEL_9;
  }
  return v3;
}

uint64_t sub_2171AA914(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 452) >= 9u) {
    free(*(void **)a1);
  }
  return a1;
}

uint64_t sub_2171AA954(uint64_t result)
{
  uint64_t v1 = result;
  if (*(_DWORD *)(result + 452) >= 9u) {
    uint64_t result = *(void *)result;
  }
  uint64_t v2 = *(unsigned int *)(v1 + 448);
  if (v2)
  {
    uint64_t v3 = 56 * v2;
    do
    {
      uint64_t result = sub_217199B64(result) + 56;
      v3 -= 56;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_2171AA9A4(unint64_t *a1)
{
  unint64_t v2 = *a1;
  __dmb(0xBu);
  __dmb(0xBu);
  a1[65] = 0;
  unint64_t v3 = sub_216851020(v2);
  do
  {
    unint64_t v4 = 0;
    unint64_t v5 = v3;
    unint64_t v6 = a1[v3 + 1];
    if (v3-- > 1) {
      char v8 = v5;
    }
    else {
      char v8 = 1;
    }
    do
    {
      unint64_t v9 = v6 + 24 * v4;
      unint64_t v12 = *(void *)(v9 + 16);
      uint64_t v11 = (void *)(v9 + 16);
      uint64_t v10 = (void *)v12;
      if (v12 >= 0x40)
      {
        do
        {
          *uint64_t v11 = *v10;
          sub_2171AAA74((uint64_t)a1, (uint64_t)v10);
          uint64_t v10 = (void *)*v11;
        }
        while (*v11 > 0x3FuLL);
      }
      ++v4;
    }
    while (!(v4 >> v8));
    uint64_t result = sub_2171AAAA8((uint64_t)a1, v5);
  }
  while (v5);
  __dmb(0xBu);
  *a1 = 1;
  return result;
}

uint64_t sub_2171AAA74(uint64_t a1, uint64_t a2)
{
  sub_2171AAAF8(a2 + 16);
  return tbb::internal::deallocate_via_handler_v3(a2, v3);
}

uint64_t sub_2171AAAA8(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = a1 + 8 * a2;
  uint64_t v5 = *(void *)(v2 + 8);
  unint64_t v4 = (void *)(v2 + 8);
  uint64_t result = v5;
  if (a2 < 8)
  {
    if (!a2) {
      return result;
    }
    if (a2 == 1) {
      uint64_t result = tbb::internal::deallocate_via_handler_v3(result, (void *)1);
    }
  }
  else
  {
    uint64_t result = tbb::internal::deallocate_via_handler_v3(result, (void *)a2);
  }
  void *v4 = 0;
  return result;
}

_DWORD *sub_2171AAAF8(uint64_t a1)
{
  sub_216981EE8(a1 + 8, *(void **)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));

  return sub_21697C414((_DWORD *)a1);
}

uint64_t sub_2171AAB44()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26798DA58, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26798DA58))
  {
    uint64_t v1 = operator new(0x8CuLL);
    *(_OWORD *)((char *)v1 + 124) = 0u;
    v1[6] = 0u;
    v1[7] = 0u;
    v1[4] = 0u;
    v1[5] = 0u;
    v1[2] = 0u;
    v1[3] = 0u;
    _OWORD *v1 = 0u;
    v1[1] = 0u;
    qword_26798DA50 = (uint64_t)v1;
    __cxa_guard_release(&qword_26798DA58);
  }
  return qword_26798DA50;
}

void sub_2171AABBC(_Unwind_Exception *a1)
{
}

void *sub_2171AABD4(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v6 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v4 = v6;
      if (v6 >= v7) {
        unint64_t v4 = v6 % v7;
      }
    }
    else
    {
      unint64_t v4 = v6 & (v7 - 1);
    }
    unint64_t v9 = *(void **)(*(void *)a1 + 8 * v4);
    if (v9)
    {
      uint64_t v10 = (void *)*v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == *(void *)a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v4) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  sub_21701ADA4(a1, v6, a4, (uint64_t)v21);
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    sub_21678A04C(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v4 = v6 % v7;
      }
      else {
        unint64_t v4 = v6;
      }
    }
    else
    {
      unint64_t v4 = (v7 - 1) & v6;
    }
  }
  char v18 = *(void **)(*(void *)a1 + 8 * v4);
  if (v18)
  {
    *(void *)v21[0] = *v18;
    *char v18 = v21[0];
  }
  else
  {
    *(void *)v21[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v21[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v21[0])
    {
      unint64_t v19 = *(void *)(*(void *)v21[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7) {
          v19 %= v7;
        }
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v19) = v21[0];
    }
  }
  uint64_t v10 = (void *)v21[0];
  v21[0] = 0;
  ++*(void *)(a1 + 24);
  sub_2171AAE44((uint64_t)v21, 0);
  return v10;
}

void sub_2171AAE2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2171AAE44((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_2171AAE44(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(_DWORD **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_2171AA688(v2 + 4);
    }
    operator delete(v2);
  }
}

uint64_t sub_2171AAE9C(void *a1, unsigned int *a2)
{
  uint64_t result = (uint64_t)sub_216A62F60(a1, a2);
  if (result)
  {
    sub_216851DB0(a1, (void *)result, (uint64_t)v4);
    sub_2171AAE44((uint64_t)v4, 0);
    return 1;
  }
  return result;
}

uint64_t sub_2171AAEEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 == a2) {
    return a1;
  }
  uint64_t v5 = a2;
  uint64_t v6 = 0;
  do
  {
    sub_216981010((_DWORD *)(a3 + v6), (_DWORD *)(a1 + v6));
    sub_21698105C((_DWORD *)(a3 + v6 + 4), (_DWORD *)(a1 + v6 + 4));
    sub_2171AA72C((_DWORD *)(a3 + v6 + 8), a1 + v6 + 8);
    v6 += 464;
  }
  while (a1 + v6 != v5);
  return v5;
}

void sub_2171AAF8C(void *a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v4);
  sub_21732550C(v3, a1, a2, v2);
  __cxa_rethrow();
}

void sub_2171AAFBC(_Unwind_Exception *a1)
{
}

_DWORD *sub_2171AAFD0(_DWORD *a1)
{
  sub_2171AA914((uint64_t)(a1 + 2));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);

  return sub_21697C414(a1);
}

void **sub_2171AB018(void **a1)
{
  if (*((_DWORD *)a1 + 1857) >= 0x11u) {
    free(*a1);
  }
  return a1;
}

_DWORD *sub_2171AB058(_DWORD *result)
{
  uint64_t v1 = result;
  if (result[1857] >= 0x11u) {
    uint64_t v1 = *(_DWORD **)result;
  }
  unsigned int v2 = result[1856];
  if (v2)
  {
    uint64_t v3 = 464 * v2;
    do
    {
      sub_2171AA914((uint64_t)(v1 + 2));
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v1 + 1);
      uint64_t result = sub_21697C414(v1);
      v1 += 116;
      v3 -= 464;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_2171AB0C0(uint64_t *a1, int a2, unsigned int *a3, uint64_t a4, uint64_t a5, int a6, uint64_t (*a7)(uint64_t, unsigned int *, uint64_t), void *a8)
{
  unint64_t v29 = 0;
  uint64_t v13 = bswap64(0x9E3779B97F4A7C55* (a3[1]+ ((a3[1] + (unint64_t)*a3 + (a3[1] + (unint64_t)*a3) * (a3[1] + (unint64_t)*a3)) >> 1)));
  uint64_t v14 = *a1;
  __dmb(0xBu);
  uint64_t v28 = (uint64_t)(a1 + 72);
  while (1)
  {
    sub_2171AB578((uint64_t)&v31, (uint64_t)a1, v14 & v13, 0);
    unint64_t v15 = (void *)(v33 + 16);
    do
      unint64_t v15 = (void *)*v15;
    while ((unint64_t)v15 >= 0x40 && *(void *)a3 != v15[2]);
    if (a2) {
      break;
    }
    if (v15)
    {
      uint64_t v16 = 1;
LABEL_10:
      uint64_t v17 = (uint64_t)a8;
      if (!a5) {
        goto LABEL_46;
      }
      goto LABEL_11;
    }
    unint64_t v24 = *a1;
    __dmb(0xBu);
    if (v14 == v24 || !sub_21686CF40((uint64_t)a1, v13, v14, v24))
    {
      sub_21685C048(&v31);
      return 0;
    }
LABEL_31:
    sub_21685C048(&v31);
    uint64_t v14 = v24;
  }
  if (v15)
  {
LABEL_7:
    uint64_t v16 = 0;
    goto LABEL_10;
  }
  if (!a8) {
    a8 = (void *)a7(v28, a3, a4);
  }
  if (!v32)
  {
    char v32 = 1;
    if ((tbb::spin_rw_mutex_v3::internal_upgrade((atomic_ullong *)v31) & 1) == 0)
    {
      unint64_t v15 = (void *)(v33 + 16);
      while (1)
      {
        unint64_t v15 = (void *)*v15;
        if ((unint64_t)v15 < 0x40) {
          break;
        }
        if (*(void *)a3 == v15[2])
        {
          if (!v32) {
            goto LABEL_7;
          }
          uint64_t v16 = 0;
          atomic_fetch_add((atomic_ullong *volatile)v31, 3uLL);
          char v32 = 0;
          goto LABEL_10;
        }
      }
    }
  }
  unint64_t v24 = *a1;
  __dmb(0xBu);
  if (v14 != v24)
  {
    if (!sub_21686CF40((uint64_t)a1, v13, v14, v24)) {
      goto LABEL_33;
    }
    goto LABEL_31;
  }
  unint64_t v24 = v14;
LABEL_33:
  unint64_t v29 = sub_21686C9CC((uint64_t)a1, v33, a8, v24);
  uint64_t v17 = 0;
  uint64_t v16 = 1;
  unint64_t v15 = a8;
  if (!a5)
  {
LABEL_46:
    sub_21685C048(&v31);
    goto LABEL_41;
  }
LABEL_11:
  if ((sub_21686CAA4(a5, v15 + 1, a6) & 1) == 0)
  {
    sched_yield();
    int v18 = 2;
    while ((sub_21686CAA4(a5, v15 + 1, a6) & 1) == 0)
    {
      sched_yield();
      BOOL v19 = v18 < 16;
      v18 *= 2;
      if (!v19)
      {
        uint64_t v20 = (atomic_ullong *)v31;
        v31 = 0;
        if (v32)
        {
LABEL_16:
          atomic_ullong v21 = *v20;
          unint64_t v22 = *v20 & 0xFFFFFFFFFFFFFFFCLL;
          while (1)
          {
            atomic_ullong v23 = v21;
            atomic_compare_exchange_strong(v20, (unint64_t *)&v23, v22);
            if (v23 == v21) {
              break;
            }
            if (atomic_fetch_add_explicit(v20, 0, memory_order_relaxed) != v21)
            {
              sched_yield();
              goto LABEL_16;
            }
          }
        }
        else
        {
          atomic_fetch_add(v20, 0xFFFFFFFFFFFFFFFCLL);
        }
        sched_yield();
        unint64_t v24 = *a1;
        __dmb(0xBu);
        a8 = (void *)v17;
        goto LABEL_31;
      }
    }
  }
  sub_21685C048(&v31);
  *(void *)(a5 + 16) = v15;
  *(void *)(a5 + 24) = v13;
LABEL_41:
  if (v29) {
    sub_2171AB3E0(a1, v29, v28, 0);
  }
  if (v17) {
    sub_2171AAA74((uint64_t)a1, v17);
  }
  return v16;
}

void sub_2171AB3B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_21685C048((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2171AB3D8()
{
  return 0;
}

void sub_2171AB3E0(uint64_t *a1, unint64_t a2, uint64_t a3, char a4)
{
  if (a2 < 8)
  {
    unint64_t v9 = (char *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x17D0);
    uint64_t v10 = v9;
    if (a4)
    {
      bzero(v9, 0x17D0uLL);
    }
    else
    {
      uint64_t v14 = -6096;
      do
      {
        unint64_t v15 = &v9[v14];
        *((void *)v15 + 763) = 0;
        *((void *)v15 + 764) = 3;
        v14 += 24;
      }
      while (v14);
    }
    unint64_t v16 = 0;
    int64x2_t v17 = (int64x2_t)xmmword_217411D20;
    int v18 = v10 - 48;
    uint64x2_t v19 = (uint64x2_t)vdupq_n_s64(7uLL);
    uint64x2_t v20 = (uint64x2_t)vdupq_n_s64(1uLL);
    int8x16_t v21 = (int8x16_t)vdupq_n_s64(0x7FFFFFFFFFFFFFFEuLL);
    int64x2_t v22 = vdupq_n_s64(2uLL);
    uint64_t v13 = 255;
    do
    {
      uint64x2_t v23 = (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v16), (int8x16_t)xmmword_217411D30);
      int8x16_t v24 = vandq_s8((int8x16_t)vshlq_u64(v20, (uint64x2_t)v17), v21);
      if (vmovn_s64((int64x2_t)vcgtq_u64(v19, v23)).u8[0]) {
        a1[v16 + 2] = (uint64_t)&v18[24 * v24.i64[0]];
      }
      if (vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(7uLL), v23)).i32[1]) {
        a1[v16 + 3] = (uint64_t)&v18[24 * v24.i64[1]];
      }
      v16 += 2;
      int64x2_t v17 = vaddq_s64(v17, v22);
    }
    while (v16 != 8);
  }
  else
  {
    unint64_t v7 = (void *)tbb::internal::allocate_via_handler_v3((tbb::internal *)(24 << a2));
    uint8x8_t v8 = v7;
    if (a4)
    {
      bzero(v7, 24 << a2);
    }
    else
    {
      uint64_t v11 = 1 << a2;
      float v12 = v7 + 2;
      do
      {
        *(v12 - 1) = 0;
        void *v12 = 3;
        v12 += 3;
        --v11;
      }
      while (v11);
    }
    a1[a2 + 1] = (uint64_t)v8;
    uint64_t v13 = (2 << a2) - 1;
  }
  __dmb(0xBu);
  *a1 = v13;
}

void sub_2171AB568(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8 * v2 + 8) = 0;
  _Unwind_Resume(a1);
}

uint64_t sub_2171AB578(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
  unint64_t v8 = sub_21686CD68(a2, a3);
  *(void *)(a1 + 16) = v8;
  uint64_t v9 = *(void *)(v8 + 16);
  __dmb(0xBu);
  if (v9 == 3
    && (uint64_t v10 = (atomic_ullong *)(*(void *)(a1 + 16) + 8),
        *(unsigned char *)(a1 + 8) = 1,
        tbb::spin_rw_mutex_v3::internal_try_acquire_writer(v10)))
  {
    *(void *)a1 = v10;
    uint64_t v11 = *(void *)(a1 + 16);
    if (*(void *)(v11 + 16) == 3) {
      sub_2171AB654(a2, v11, a3);
    }
  }
  else
  {
    float v12 = (atomic_ullong *)(*(void *)(a1 + 16) + 8);
    *(unsigned char *)(a1 + 8) = a4;
    *(void *)a1 = v12;
    if (a4) {
      tbb::spin_rw_mutex_v3::internal_acquire_writer(v12);
    }
    else {
      tbb::spin_rw_mutex_v3::internal_acquire_reader(v12);
    }
  }
  return a1;
}

void sub_2171AB640(_Unwind_Exception *a1)
{
  sub_21685C048(v1);
  _Unwind_Resume(a1);
}

void *sub_2171AB654(uint64_t a1, uint64_t a2, unint64_t a3)
{
  __dmb(0xBu);
  *(void *)(a2 + 16) = 0;
  if (a3)
  {
    unint64_t v5 = HIDWORD(a3);
    if (!HIDWORD(a3)) {
      unint64_t v5 = a3;
    }
    char v6 = 32 * (HIDWORD(a3) != 0);
    if (v5 >= 0x10000)
    {
      v5 >>= 16;
      char v6 = (32 * (HIDWORD(a3) != 0)) | 0x10;
    }
    if (v5 >= 0x100)
    {
      v5 >>= 8;
      v6 |= 8u;
    }
    if (v5 >= 0x10)
    {
      v5 >>= 4;
      v6 |= 4u;
    }
    BOOL v7 = v5 >= 4;
    if (v5 >= 4) {
      LODWORD(v5) = v5 >> 2;
    }
    unsigned int v8 = (v5 >> 1) & 1;
    if (v7) {
      v6 += 2;
    }
    char v9 = v8 + v6;
  }
  else
  {
    char v9 = -1;
  }
  uint64_t v10 = ~(-1 << v9);
  sub_2171AB578(&v15, a1, v10 & a3, 0);
  uint64_t v11 = (unint64_t *)(v17 + 16);
  unint64_t v12 = *(void *)(v17 + 16);
  __dmb(0xBu);
  if (v12 >= 0x40)
  {
    uint64_t v13 = (2 * v10) | 1;
    while ((bswap64(0x9E3779B97F4A7C55* (*(unsigned int *)(v12 + 20)+ ((*(unsigned int *)(v12 + 20)+ (unint64_t)*(unsigned int *)(v12 + 16)+ (*(unsigned int *)(v12 + 20) + (unint64_t)*(unsigned int *)(v12 + 16))* (*(unsigned int *)(v12 + 20) + (unint64_t)*(unsigned int *)(v12 + 16))) >> 1))) & v13) == a3)
    {
      if (v16 || (char v16 = 1, (tbb::spin_rw_mutex_v3::internal_upgrade((atomic_ullong *)v15) & 1) != 0))
      {
        *uint64_t v11 = *(void *)v12;
        *(void *)unint64_t v12 = *(void *)(a2 + 16);
        *(void *)(a2 + 16) = v12;
LABEL_24:
        unint64_t v12 = *v11;
        if (*v11 <= 0x3F) {
          return sub_21685C048(&v15);
        }
      }
      else
      {
        uint64_t v11 = (unint64_t *)(v17 + 16);
        unint64_t v12 = *(void *)(v17 + 16);
        __dmb(0xBu);
        if (v12 < 0x40) {
          return sub_21685C048(&v15);
        }
      }
    }
    uint64_t v11 = (unint64_t *)v12;
    goto LABEL_24;
  }
  return sub_21685C048(&v15);
}

void sub_2171AB7EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21685C048((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL sub_2171AB800(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = *(void **)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = *a1;
  __dmb(0xBu);
  while (1)
  {
    sub_2171AB578((uint64_t)v12, (uint64_t)a1, v6 & v5, 1);
    BOOL v7 = (void *)(v12[2] + 16);
    do
    {
      unsigned int v8 = v7;
      BOOL v7 = (void *)*v7;
      if (v7) {
        BOOL v9 = v7 == v4;
      }
      else {
        BOOL v9 = 1;
      }
    }
    while (!v9);
    if (v7) {
      break;
    }
    uint64_t v10 = *a1;
    __dmb(0xBu);
    if (v6 == v10 || !sub_21686CF40((uint64_t)a1, v5, v6, v10))
    {
      if (*(void *)(a2 + 16))
      {
        sub_21685C080(a2);
        *(void *)(a2 + 16) = 0;
      }
      sub_21685C048(v12);
      return v7 != 0;
    }
    sub_21685C048(v12);
    uint64_t v6 = v10;
  }
  *unsigned int v8 = *v4;
  atomic_fetch_add(a1 + 65, 0xFFFFFFFFFFFFFFFFLL);
  sub_21685C048(v12);
  if (!*(unsigned char *)(a2 + 8))
  {
    *(unsigned char *)(a2 + 8) = 1;
    tbb::spin_rw_mutex_v3::internal_upgrade(*(atomic_ullong **)a2);
  }
  if (*(void *)(a2 + 16))
  {
    sub_21685C080(a2);
    *(void *)(a2 + 16) = 0;
  }
  sub_2171AAA74((uint64_t)a1, (uint64_t)v4);
  return v7 != 0;
}

void sub_2171AB938(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21685C048((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2171AB950(uint64_t a1, _DWORD *a2)
{
  uint64_t v3 = a2;
  return sub_2171AB984(a1, (uint64_t)&unk_2174BFD90, &v3);
}

uint64_t sub_2171AB984(uint64_t a1, uint64_t a2, _DWORD **a3)
{
  uint64_t v5 = tbb::internal::allocate_via_handler_v3((tbb::internal *)0x30);
  v9[1] = a1;
  *(_OWORD *)uint64_t v5 = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  uint64_t v6 = *a3;
  sub_216981010((_DWORD *)(v5 + 16), v6);
  sub_21698105C((_DWORD *)(v5 + 20), v6 + 1);
  *(void *)(v5 + 40) = 0;
  *(void *)(v5 + 32) = 0;
  *(void *)(v5 + 24) = v5 + 32;
  v9[0] = 0;
  sub_2171ABA10(v9, v7);
  return v5;
}

uint64_t *sub_2171ABA10(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  if (v3) {
    tbb::internal::deallocate_via_handler_v3(v3, a2);
  }
  return a1;
}

pxrInternal__aapl__pxrReserved__::HdInstancerTokens_StaticTokenType *sub_2171ABA44(atomic_ullong *a1)
{
  uint64_t result = sub_2171ABA8C();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::HdInstancerTokens_StaticTokenType::~HdInstancerTokens_StaticTokenType(result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::HdInstancerTokens_StaticTokenType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::HdInstancerTokens_StaticTokenType *sub_2171ABA8C()
{
  v0 = (pxrInternal__aapl__pxrReserved__::HdInstancerTokens_StaticTokenType *)operator new(0x88uLL);
  pxrInternal__aapl__pxrReserved__::HdInstancerTokens_StaticTokenType::HdInstancerTokens_StaticTokenType(v0);
  return v0;
}

void sub_2171ABABC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::HdCommandArgDescriptor::HdCommandArgDescriptor(void *this)
{
  *this = 0;
  this[2] = 0;
  return this;
}

{
  *this = 0;
  this[2] = 0;
  return this;
}

double pxrInternal__aapl__pxrReserved__::HdCommandDescriptor::HdCommandDescriptor(pxrInternal__aapl__pxrReserved__::HdCommandDescriptor *this)
{
  *((void *)this + 6) = 0;
  double result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return result;
}

{
  double result;

  *((void *)this + 6) = 0;
  double result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return result;
}

void pxrInternal__aapl__pxrReserved__::HdConeSchemaTokens_StaticTokenType::~HdConeSchemaTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::HdConeSchemaTokens_StaticTokenType *this)
{
  unsigned int v8 = (void **)((char *)this + 56);
  sub_216889A04(&v8);
  uint64_t v2 = *((void *)this + 6);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 5);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *((void *)this + 4);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *((void *)this + 3);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v6 = *((void *)this + 2);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v7 = *((void *)this + 1);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

pxrInternal__aapl__pxrReserved__::HdConeSchemaTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::HdConeSchemaTokens_StaticTokenType::HdConeSchemaTokens_StaticTokenType(atomic_uint **this)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v2 = (atomic_uint **)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "cone", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2, "height", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 2, "radius", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 3, "axis", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 4, "X", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 5, "Y", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 6, "Z", 0);
  uint64_t v3 = *this;
  uint64x2_t v23 = v3;
  if ((v3 & 7) != 0)
  {
    uint64_t v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
      uint64x2_t v23 = v4;
    }
  }
  uint64_t v5 = *v2;
  int8x16_t v24 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      int8x16_t v24 = v6;
    }
  }
  uint64_t v7 = this[2];
  char v25 = v7;
  if ((v7 & 7) != 0)
  {
    unsigned int v8 = (atomic_uint *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
      char v25 = v8;
    }
  }
  BOOL v9 = this[3];
  uint64_t v26 = v9;
  if ((v9 & 7) != 0)
  {
    uint64_t v10 = (atomic_uint *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v10, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v26 = v10;
    }
  }
  uint64_t v11 = this[4];
  uint64_t v27 = v11;
  if ((v11 & 7) != 0)
  {
    unint64_t v12 = (atomic_uint *)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v12, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v27 = v12;
    }
  }
  uint64_t v13 = this[5];
  uint64_t v28 = v13;
  if ((v13 & 7) != 0)
  {
    uint64_t v14 = (atomic_uint *)((unint64_t)v13 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v14, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v28 = v14;
    }
  }
  unint64_t v15 = this[6];
  unint64_t v29 = v15;
  if ((v15 & 7) != 0)
  {
    char v16 = (atomic_uint *)((unint64_t)v15 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v16, 2u, memory_order_relaxed) & 1) == 0) {
      unint64_t v29 = v16;
    }
  }
  this[7] = 0;
  this[8] = 0;
  this[9] = 0;
  uint64_t v17 = (atomic_uint *)operator new(0x38uLL);
  unint64_t v18 = 0;
  this[7] = v17;
  this[8] = v17;
  this[9] = v17 + 14;
  do
  {
    uint64x2_t v19 = (&v23)[v18 / 2];
    *(void *)&v17[v18] = v19;
    if ((v19 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v19 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v17[v18] &= 0xFFFFFFFFFFFFFFF8;
    }
    v18 += 2;
  }
  while (v18 != 14);
  this[8] = v17 + 14;
  for (uint64_t i = 6; i != -1; --i)
  {
    int8x16_t v21 = (&v23)[i];
    if ((v21 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return (pxrInternal__aapl__pxrReserved__::HdConeSchemaTokens_StaticTokenType *)this;
}

void sub_2171ABEA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  sub_216889A04(&a9);
  uint64_t v19 = 48;
  while (1)
  {
    uint64_t v20 = *(void *)(&a11 + v19);
    if ((v20 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v19 -= 8;
    if (v19 == -8)
    {
      if ((*v17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void pxrInternal__aapl__pxrReserved__::HdConeSchema::GetHeight(pxrInternal__aapl__pxrReserved__::HdConeSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdConeSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171AC9A4(&pxrInternal__aapl__pxrReserved__::HdConeSchemaTokens);
  }
  uint64_t v5 = v4[1];
  uint64_t v7 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v7 = v6;
    }
  }
  sub_2171A240C((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdConeSchema::GetRadius(pxrInternal__aapl__pxrReserved__::HdConeSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdConeSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171AC9A4(&pxrInternal__aapl__pxrReserved__::HdConeSchemaTokens);
  }
  uint64_t v5 = v4[2];
  uint64_t v7 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v7 = v6;
    }
  }
  sub_2171A240C((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdConeSchema::GetAxis(pxrInternal__aapl__pxrReserved__::HdConeSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdConeSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171AC9A4(&pxrInternal__aapl__pxrReserved__::HdConeSchemaTokens);
  }
  uint64_t v5 = v4[3];
  uint64_t v7 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v7 = v6;
    }
  }
  sub_21719B418((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdConeSchema::BuildRetained(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, _OWORD *a4@<X8>)
{
  v31[3] = *MEMORY[0x263EF8340];
  memset(v31, 0, 24);
  memset(v30, 0, sizeof(v30));
  if (*a1)
  {
    unsigned int v8 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdConeSchemaTokens);
    if (!v8) {
      unsigned int v8 = sub_2171AC9A4(&pxrInternal__aapl__pxrReserved__::HdConeSchemaTokens);
    }
    sub_2168D2318(v31, v8 + 1);
    uint64_t v10 = *a1;
    uint64_t v9 = a1[1];
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v11 = (std::__shared_weak_count *)*((void *)&v30[0] + 1);
    *(void *)&v30[0] = v10;
    *((void *)&v30[0] + 1) = v9;
    if (v11) {
      sub_216784EC4(v11);
    }
    uint64_t v12 = 1;
  }
  else
  {
    uint64_t v12 = 0;
  }
  if (*a2)
  {
    uint64_t v13 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdConeSchemaTokens);
    if (!v13) {
      uint64_t v13 = sub_2171AC9A4(&pxrInternal__aapl__pxrReserved__::HdConeSchemaTokens);
    }
    sub_2168D2318(&v31[v12], v13 + 2);
    unint64_t v14 = v12 + 1;
    unint64_t v15 = &v30[v12];
    uint64_t v17 = *a2;
    uint64_t v16 = a2[1];
    if (v16) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v18 = (std::__shared_weak_count *)v15[1];
    *unint64_t v15 = v17;
    v15[1] = v16;
    if (v18) {
      sub_216784EC4(v18);
    }
  }
  else
  {
    unint64_t v14 = v12;
  }
  if (*a3)
  {
    uint64_t v19 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdConeSchemaTokens);
    if (!v19) {
      uint64_t v19 = sub_2171AC9A4(&pxrInternal__aapl__pxrReserved__::HdConeSchemaTokens);
    }
    sub_2168D2318(&v31[v14], v19 + 3);
    unint64_t v20 = v14 + 1;
    int8x16_t v21 = &v30[v14];
    uint64_t v23 = *a3;
    uint64_t v22 = a3[1];
    if (v22) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
    }
    int8x16_t v24 = (std::__shared_weak_count *)v21[1];
    *int8x16_t v21 = v23;
    v21[1] = v22;
    if (v24) {
      sub_216784EC4(v24);
    }
  }
  else
  {
    unint64_t v20 = v14;
  }
  pxrInternal__aapl__pxrReserved__::HdRetainedContainerDataSource::New(v20, v31, (uint64_t *)v30, &v29);
  *a4 = v29;
  for (uint64_t i = 40; i != -8; i -= 16)
  {
    uint64_t v26 = *(std::__shared_weak_count **)((char *)v30 + i);
    if (v26) {
      sub_216784EC4(v26);
    }
  }
  for (uint64_t j = 2; j != -1; --j)
  {
    uint64_t v28 = v31[j];
    if ((v28 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
}

void sub_2171AC3F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v18 = 40;
  while (1)
  {
    uint64_t v19 = *(std::__shared_weak_count **)(&a11 + v18);
    if (v19) {
      sub_216784EC4(v19);
    }
    v18 -= 16;
    if (v18 == -8)
    {
      uint64_t v20 = 16;
      while (1)
      {
        uint64_t v21 = *(void *)(&a17 + v20);
        if ((v21 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        v20 -= 8;
        if (v20 == -8) {
          _Unwind_Resume(exception_object);
        }
      }
    }
  }
}

void pxrInternal__aapl__pxrReserved__::HdConeSchema::GetFromParent(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdConeSchemaTokens)) {
      sub_2171AC9A4(&pxrInternal__aapl__pxrReserved__::HdConeSchemaTokens);
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v3 + 24))(&v8, v3);
    sub_2171997C0((uint64_t)&v8, &v10);
    uint64_t v6 = v10;
    uint64_t v5 = v11;
    if (v11)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_216784EC4(v5);
      uint64_t v7 = v11;
      *a2 = v6;
      a2[1] = v5;
      if (v7) {
        sub_216784EC4(v7);
      }
    }
    else
    {
      *a2 = v10;
      a2[1] = 0;
    }
    if (v9) {
      sub_216784EC4(v9);
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    *a2 = 0;
    a2[1] = 0;
  }
}

atomic_uint **pxrInternal__aapl__pxrReserved__::HdConeSchema::GetSchemaToken(pxrInternal__aapl__pxrReserved__::HdConeSchema *this)
{
  double result = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdConeSchemaTokens);
  if (!result) {
    return sub_2171AC9A4(&pxrInternal__aapl__pxrReserved__::HdConeSchemaTokens);
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::HdConeSchema::GetDefaultLocator(pxrInternal__aapl__pxrReserved__::HdConeSchema *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B96BF0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B96BF0))
  {
    uint64_t v2 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdConeSchemaTokens);
    if (!v2) {
      uint64_t v2 = sub_2171AC9A4(&pxrInternal__aapl__pxrReserved__::HdConeSchemaTokens);
    }
    pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&unk_267B96BB8, (const pxrInternal__aapl__pxrReserved__::TfToken *)v2);
    __cxa_atexit((void (*)(void *))sub_217199930, &unk_267B96BB8, &dword_216758000);
    __cxa_guard_release(&qword_267B96BF0);
  }
  return &unk_267B96BB8;
}

void sub_2171AC628(_Unwind_Exception *a1)
{
}

void pxrInternal__aapl__pxrReserved__::HdConeSchema::BuildAxisDataSource(pxrInternal__aapl__pxrReserved__::HdConeSchema *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdConeSchemaTokens);
  if (!v5) {
    uint64_t v5 = sub_2171AC9A4(&pxrInternal__aapl__pxrReserved__::HdConeSchemaTokens);
  }
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) == ((unint64_t)v5[4] & 0xFFFFFFFFFFFFFFF8))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B96C08, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_267B96C08))
    {
      sub_2171A3CE4((uint64_t *)this, &qword_267B96BF8);
      __cxa_atexit((void (*)(void *))sub_2171A3D6C, &qword_267B96BF8, &dword_216758000);
      __cxa_guard_release(&qword_267B96C08);
    }
    uint64_t v8 = &qword_267B96BF8;
  }
  else
  {
    uint64_t v6 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdConeSchemaTokens);
    if (!v6) {
      uint64_t v6 = sub_2171AC9A4(&pxrInternal__aapl__pxrReserved__::HdConeSchemaTokens);
    }
    if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) == ((unint64_t)v6[5] & 0xFFFFFFFFFFFFFFF8))
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B96C20, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_267B96C20))
      {
        sub_2171A3CE4((uint64_t *)this, &qword_267B96C10);
        __cxa_atexit((void (*)(void *))sub_2171A3D6C, &qword_267B96C10, &dword_216758000);
        __cxa_guard_release(&qword_267B96C20);
      }
      uint64_t v8 = &qword_267B96C10;
    }
    else
    {
      uint64_t v7 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdConeSchemaTokens);
      if (!v7) {
        uint64_t v7 = sub_2171AC9A4(&pxrInternal__aapl__pxrReserved__::HdConeSchemaTokens);
      }
      if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) != ((unint64_t)v7[6] & 0xFFFFFFFFFFFFFFF8))
      {
        sub_2171A3CE4((uint64_t *)this, &v11);
        *(_OWORD *)a2 = v11;
        return;
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B96C38, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_267B96C38))
      {
        sub_2171A3CE4((uint64_t *)this, &qword_267B96C28);
        __cxa_atexit((void (*)(void *))sub_2171A3D6C, &qword_267B96C28, &dword_216758000);
        __cxa_guard_release(&qword_267B96C38);
      }
      uint64_t v8 = &qword_267B96C28;
    }
  }
  uint64_t v10 = *v8;
  uint64_t v9 = v8[1];
  *(void *)a2 = v10;
  *(void *)(a2 + 8) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
}

void sub_2171AC888(_Unwind_Exception *a1)
{
}

void *pxrInternal__aapl__pxrReserved__::HdConeSchema::Builder::SetHeight(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdConeSchema::Builder::SetRadius(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 24);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdConeSchema::Builder::SetAxis(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 40);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::HdConeSchema::Builder::Build(pxrInternal__aapl__pxrReserved__::HdConeSchema::Builder *this@<X0>, _OWORD *a2@<X8>)
{
}

atomic_uint **sub_2171AC9A4(atomic_ullong *a1)
{
  double result = sub_2171AC9EC();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::HdConeSchemaTokens_StaticTokenType::~HdConeSchemaTokens_StaticTokenType((pxrInternal__aapl__pxrReserved__::HdConeSchemaTokens_StaticTokenType *)result);
      operator delete(v4);
    }
    return (atomic_uint **)atomic_load((unint64_t *)a1);
  }
  return result;
}

atomic_uint **sub_2171AC9EC()
{
  v0 = (atomic_uint **)operator new(0x50uLL);
  pxrInternal__aapl__pxrReserved__::HdConeSchemaTokens_StaticTokenType::HdConeSchemaTokens_StaticTokenType(v0);
  return v0;
}

void sub_2171ACA1C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdContainerDataSourceEditor::_GetNode(pxrInternal__aapl__pxrReserved__::HdContainerDataSourceEditor *this@<X0>, const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t v6 = *(uint64_t **)this;
  if (!*(void *)this)
  {
    uint64_t v7 = operator new(0x20uLL);
    _OWORD *v7 = 0u;
    v7[1] = 0u;
    sub_2171ADD2C(&v24, (uint64_t)v7);
    long long v8 = v24;
    long long v24 = 0uLL;
    uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 1);
    *(_OWORD *)this = v8;
    if (v9)
    {
      sub_216784EC4(v9);
      if (*((void *)&v24 + 1)) {
        sub_216784EC4(*((std::__shared_weak_count **)&v24 + 1));
      }
    }
    uint64_t v6 = *(uint64_t **)this;
  }
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 1);
  *a3 = v6;
  a3[1] = (uint64_t *)v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t ElementCount = pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::GetElementCount(a2);
  if (ElementCount)
  {
    uint64_t v12 = 0;
    while (1)
    {
      Element = (uint64_t *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::GetElement(a2, v12);
      unint64_t v14 = sub_2171ACC94(v6, Element);
      unint64_t v15 = v14;
      if ((void *)v6[1] == v14) {
        break;
      }
      uint64_t v17 = (uint64_t *)v14[3];
      uint64_t v16 = (std::__shared_weak_count *)v14[4];
      if (v16) {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *a3 = v17;
      a3[1] = (uint64_t *)v16;
      if (v10) {
        sub_216784EC4(v10);
      }
      if (!v17)
      {
        uint64_t v23 = operator new(0x20uLL);
        *uint64_t v23 = 0u;
        v23[1] = 0u;
        sub_2171ADD2C(&v24, (uint64_t)v23);
        uint64_t v18 = (std::__shared_weak_count *)*((void *)&v24 + 1);
        uint64_t v17 = (uint64_t *)v24;
        long long v24 = 0uLL;
        *(_OWORD *)a3 = __PAIR128__((unint64_t)v18, (unint64_t)v17);
        if (v16)
        {
          sub_216784EC4(v16);
          if (*((void *)&v24 + 1)) {
            sub_216784EC4(*((std::__shared_weak_count **)&v24 + 1));
          }
        }
        if (v18) {
          atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v22 = (std::__shared_weak_count *)v15[4];
        v15[3] = v17;
        v15[4] = v18;
        if (!v22) {
          goto LABEL_26;
        }
        goto LABEL_25;
      }
      uint64_t v18 = v16;
LABEL_26:
      ++v12;
      uint64_t v6 = v17;
      uint64_t v10 = v18;
      if (ElementCount == v12) {
        return;
      }
    }
    uint64_t v19 = operator new(0x20uLL);
    *uint64_t v19 = 0u;
    v19[1] = 0u;
    sub_2171ADD2C(&v24, (uint64_t)v19);
    uint64_t v18 = (std::__shared_weak_count *)*((void *)&v24 + 1);
    uint64_t v17 = (uint64_t *)v24;
    long long v24 = 0uLL;
    *(_OWORD *)a3 = __PAIR128__((unint64_t)v18, (unint64_t)v17);
    if (v10)
    {
      sub_216784EC4(v10);
      if (*((void *)&v24 + 1)) {
        sub_216784EC4(*((std::__shared_weak_count **)&v24 + 1));
      }
    }
    long long v24 = 0uLL;
    *(void *)&long long v25 = v17;
    *((void *)&v25 + 1) = v18;
    if (v18) {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v20 = sub_2171ACD14(v6, Element);
    uint64_t v21 = (std::__shared_weak_count *)v20[1];
    *(_OWORD *)uint64_t v20 = v24;
    if (v21) {
      sub_216784EC4(v21);
    }
    uint64_t v22 = (std::__shared_weak_count *)v20[3];
    *((_OWORD *)v20 + 1) = v25;
    if (!v22) {
      goto LABEL_26;
    }
LABEL_25:
    sub_216784EC4(v22);
    goto LABEL_26;
  }
}

void sub_2171ACC5C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    sub_216784EC4(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2171ACC94(void *a1, void *a2)
{
  uint64_t v3 = (void *)a1[3];
  if (v3)
  {
    uint64_t v4 = sub_2168CB1F4(v3, a2);
    if (v4) {
      return (void *)(*a1 + 40 * v4[3]);
    }
    else {
      return (void *)a1[1];
    }
  }
  else
  {
    double result = (void *)*a1;
    uint64_t v6 = (void *)a1[1];
    if ((void *)*a1 != v6)
    {
      while ((*result & 0xFFFFFFFFFFFFFFF8) != (*a2 & 0xFFFFFFFFFFFFFFF8))
      {
        result += 5;
        if (result == v6) {
          return (void *)a1[1];
        }
      }
    }
  }
  return result;
}

void *sub_2171ACD14(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  v6[0] = v2;
  if ((v2 & 7) != 0)
  {
    uint64_t v3 = (atomic_uint *)(v2 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v3, 2u, memory_order_relaxed) & 1) == 0) {
      v6[0] = (uint64_t)v3;
    }
  }
  v6[1] = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v4 = sub_2171ADE74(a1, v6);
  if (v9) {
    sub_216784EC4(v9);
  }
  if (v7) {
    sub_216784EC4(v7);
  }
  if ((v6[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return v4 + 1;
}

void sub_2171ACDC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_2171ADC48((uint64_t *)va1);
  sub_2171ACDE0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2171ACDE0(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    sub_216784EC4(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3) {
    sub_216784EC4(v3);
  }
  return a1;
}

pxrInternal__aapl__pxrReserved__::HdContainerDataSourceEditor *pxrInternal__aapl__pxrReserved__::HdContainerDataSourceEditor::Set(pxrInternal__aapl__pxrReserved__::HdContainerDataSourceEditor *a1, pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *this, uint64_t *a3)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (!*((_DWORD *)this + 12)) {
    return a1;
  }
  pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::RemoveLastElement(this, (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)v21);
  pxrInternal__aapl__pxrReserved__::HdContainerDataSourceEditor::_GetNode(a1, (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)v21, &v19);
  sub_217199B64((uint64_t)v21);
  uint64_t v6 = v19;
  LastElement = (uint64_t *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::GetLastElement(this);
  uint64_t v8 = sub_2171ACD14(v6, LastElement);
  uint64_t v9 = v8;
  uint64_t v10 = *a3;
  if (*a3)
  {
    uint64_t v11 = a3[1];
    if (v11) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v12 = (std::__shared_weak_count *)v8[1];
    void *v9 = v10;
    v9[1] = v11;
    if (!v12) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  uint64_t v13 = operator new(8uLL);
  *uint64_t v13 = &unk_26C77C3D0;
  sub_2171AE594(v21, (uint64_t)v13);
  long long v14 = v21[0];
  v21[0] = 0uLL;
  unint64_t v15 = (std::__shared_weak_count *)v9[1];
  *(_OWORD *)uint64_t v9 = v14;
  if (v15)
  {
    sub_216784EC4(v15);
    uint64_t v12 = (std::__shared_weak_count *)*((void *)&v21[0] + 1);
    if (*((void *)&v21[0] + 1)) {
LABEL_9:
    }
      sub_216784EC4(v12);
  }
LABEL_10:
  if (*((void *)a1 + 2))
  {
    if (!*a3) {
      goto LABEL_15;
    }
    sub_2171997C0((uint64_t)a3, v21);
    uint64_t v16 = *(void *)&v21[0];
    if (*((void *)&v21[0] + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v21[0] + 1));
    }
    if (v16) {
LABEL_15:
    }
      sub_2171AE6A4((uint64_t)a1 + 32, (uint64_t)this);
  }
  uint64_t v17 = (std::__shared_weak_count *)v9[3];
  uint64_t v9[2] = 0;
  v9[3] = 0;
  if (v17) {
    sub_216784EC4(v17);
  }
  if (v20) {
    sub_216784EC4(v20);
  }
  return a1;
}

void sub_2171ACFA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, char a11)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2171ACFD4@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(8uLL);
  void *v2 = &unk_26C77C3D0;

  return sub_2171AE594(a1, (uint64_t)v2);
}

uint64_t sub_2171AD030(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    sub_216784EC4(v2);
  }
  return a1;
}

pxrInternal__aapl__pxrReserved__::HdContainerDataSourceEditor *pxrInternal__aapl__pxrReserved__::HdContainerDataSourceEditor::Overlay(pxrInternal__aapl__pxrReserved__::HdContainerDataSourceEditor *a1, pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *this, uint64_t *a3)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)this + 12)) {
    BOOL v4 = *a3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::RemoveLastElement(this, (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)v16);
    pxrInternal__aapl__pxrReserved__::HdContainerDataSourceEditor::_GetNode(a1, (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)v16, &v14);
    sub_217199B64((uint64_t)v16);
    uint64_t v7 = v14;
    LastElement = (uint64_t *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::GetLastElement(this);
    uint64_t v9 = sub_2171ACD14(v7, LastElement);
    uint64_t v11 = *a3;
    uint64_t v10 = a3[1];
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v12 = (std::__shared_weak_count *)v9[1];
    void *v9 = v11;
    v9[1] = v10;
    if (v12) {
      sub_216784EC4(v12);
    }
    if (v15) {
      sub_216784EC4(v15);
    }
  }
  return a1;
}

void sub_2171AD14C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_217199B64((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdContainerDataSourceEditor::Finish(pxrInternal__aapl__pxrReserved__::HdContainerDataSourceEditor *this@<X0>, _OWORD *a2@<X8>)
{
  v19[29] = *MEMORY[0x263EF8340];
  BOOL v4 = (char *)this + 16;
  if (!*((void *)this + 2))
  {
    sub_2171AD514((uint64_t *)this, &v17);
    *a2 = v17;
    return;
  }
  if (!*((_DWORD *)this + 64))
  {
    sub_2171AD514((uint64_t *)this, &v16);
    sub_2171AD474(&v16, (uint64_t)v4, &v17);
    *a2 = v17;
    long long v17 = 0uLL;
    uint64_t v12 = (std::__shared_weak_count *)*((void *)&v16 + 1);
    if (!*((void *)&v16 + 1)) {
      return;
    }
    goto LABEL_28;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B96C50, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B96C50))
  {
    sub_2171ACFD4(&xmmword_267B96C40);
    __cxa_atexit((void (*)(void *))sub_2171AD030, &xmmword_267B96C40, &dword_216758000);
    __cxa_guard_release(&qword_267B96C50);
  }
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::HdContainerDataSourceEditor *)((char *)this + 32);
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::HdContainerDataSourceEditor *)((char *)this + 32);
  if (*((_DWORD *)this + 65) >= 5u) {
    uint64_t v6 = *(pxrInternal__aapl__pxrReserved__::HdDataSourceLocator **)v5;
  }
  unint64_t v7 = *((unsigned int *)this + 64);
  *(void *)&long long v17 = sub_2171AD5E4;
  unint64_t v8 = 126 - 2 * __clz(v7);
  if (v7) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  sub_2171AEA58((uint64_t)v6, (unint64_t)v6 + 56 * v7, (uint64_t (**)(uint64_t, uint64_t))&v17, v9, 1);
  long long v17 = 0u;
  long long v18 = 0u;
  v19[28] = 0x400000000;
  if (*((_DWORD *)this + 65) >= 5u) {
    uint64_t v5 = *(pxrInternal__aapl__pxrReserved__::HdDataSourceLocator **)v5;
  }
  uint64_t v10 = *((unsigned int *)this + 64);
  if (v10)
  {
    uint64_t v11 = 56 * v10;
    do
    {
      long long v16 = xmmword_267B96C40;
      if (*((void *)&xmmword_267B96C40 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&xmmword_267B96C40 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      pxrInternal__aapl__pxrReserved__::HdContainerDataSourceEditor::Set((pxrInternal__aapl__pxrReserved__::HdContainerDataSourceEditor *)&v17, v5, (uint64_t *)&v16);
      if (*((void *)&v16 + 1)) {
        sub_216784EC4(*((std::__shared_weak_count **)&v16 + 1));
      }
      uint64_t v5 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)((char *)v5 + 56);
      v11 -= 56;
    }
    while (v11);
  }
  sub_2171AD514((uint64_t *)this, &v14);
  sub_2171AD514((uint64_t *)&v17, &v16);
  long long v13 = v16;
  sub_2171AD61C(&v14, (uint64_t)&v13, (uint64_t)v4, &v15);
  *a2 = v15;
  long long v15 = 0uLL;
  if (*((void *)&v13 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v13 + 1));
  }
  if (*((void *)&v14 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v14 + 1));
  }
  sub_2171ADC9C((uint64_t)v19);
  if (*((void *)&v18 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v18 + 1));
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)&v17 + 1);
  if (*((void *)&v17 + 1)) {
LABEL_28:
  }
    sub_216784EC4(v12);
}

void sub_2171AD3F8(_Unwind_Exception *a1)
{
}

void sub_2171AD474(long long *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x90uLL);
  long long v7 = *a1;
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  pxrInternal__aapl__pxrReserved__::HdOverlayContainerDataSource::HdOverlayContainerDataSource(v6, &v7, a2);
  sub_2171AE948(a3, (uint64_t)v6);
  if (*((void *)&v7 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v7 + 1));
  }
}

void sub_2171AD4F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  if (v11) {
    operator delete(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_2171AD514(uint64_t *a1@<X0>, void *a2@<X8>)
{
  BOOL v4 = operator new(0x18uLL);
  uint64_t v5 = *a1;
  uint64_t v6 = (std::__shared_weak_count *)a1[1];
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    void *v4 = &unk_26C77C310;
    v4[1] = v5;
    v4[2] = v6;
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    void *v4 = &unk_26C77C310;
    v4[1] = v5;
    v4[2] = 0;
  }
  sub_2171AE838(a2, (uint64_t)v4);
  if (v6)
  {
    sub_216784EC4(v6);
  }
}

void sub_2171AD5CC(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_216784EC4(v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_2171AD5E4(pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *a1, pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *a2)
{
  unint64_t ElementCount = pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::GetElementCount(a1);
  return ElementCount < pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::GetElementCount(a2);
}

void sub_2171AD61C(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  unint64_t v8 = operator new(0x90uLL);
  long long v9 = *a1;
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  pxrInternal__aapl__pxrReserved__::HdOverlayContainerDataSource::HdOverlayContainerDataSource(v8, &v9, a2, a3);
  sub_2171AE948(a4, (uint64_t)v8);
  if (*((void *)&v9 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v9 + 1));
  }
}

void sub_2171AD6A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  if (v11) {
    operator delete(v10);
  }
  _Unwind_Resume(exception_object);
}

double pxrInternal__aapl__pxrReserved__::HdContainerDataSourceEditor::_FinishWithNoInitialContainer@<D0>(pxrInternal__aapl__pxrReserved__::HdContainerDataSourceEditor *this@<X0>, _OWORD *a2@<X8>)
{
  sub_2171AD514((uint64_t *)this, &v4);
  double result = *(double *)&v4;
  *a2 = v4;
  return result;
}

uint64_t sub_2171AD704(uint64_t a1)
{
  sub_2171ADC9C(a1 + 32);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    sub_216784EC4(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3) {
    sub_216784EC4(v3);
  }
  return a1;
}

void *pxrInternal__aapl__pxrReserved__::HdContainerDataSourceEditor::_NodeContainerDataSource::_NodeContainerDataSource(void *result, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  void *result = &unk_26C77C310;
  result[1] = v3;
  result[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;

  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  void *result = &unk_26C77C310;
  result[1] = v3;
  result[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

char *pxrInternal__aapl__pxrReserved__::HdContainerDataSourceEditor::_NodeContainerDataSource::GetNames@<X0>(char *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v3 = (uint64_t **)*((void *)this + 1);
  if (v3)
  {
    long long v4 = *v3;
    uint64_t v5 = v3[1];
    if (*v3 != v5)
    {
      this = 0;
      do
      {
        if (v4[1] || v4[3])
        {
          if ((unint64_t)this >= *(void *)(a2 + 16))
          {
            this = sub_216973984((char **)a2, v4);
          }
          else
          {
            uint64_t v6 = *v4;
            *(void *)this = *v4;
            if ((v6 & 7) != 0
              && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
            {
              *(void *)this &= 0xFFFFFFFFFFFFFFF8;
            }
            this += 8;
          }
          *(void *)(a2 + 8) = this;
        }
        v4 += 5;
      }
      while (v4 != v5);
    }
  }
  return this;
}

void sub_2171AD874(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdContainerDataSourceEditor::_NodeContainerDataSource::Get(pxrInternal__aapl__pxrReserved__::HdContainerDataSourceEditor::_NodeContainerDataSource *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = (void *)*((void *)this + 1);
  if (!v5) {
    goto LABEL_17;
  }
  uint64_t v6 = sub_2171ACC94(v5, a2);
  if (*(void **)(*((void *)this + 1) + 8) == v6) {
    goto LABEL_17;
  }
  long long v7 = v6;
  unint64_t v8 = v6 + 1;
  sub_2171997C0((uint64_t)(v6 + 1), &v17);
  if (!(void)v17)
  {
    if (*v8)
    {
      uint64_t v11 = v7[2];
      *a3 = *v8;
      a3[1] = v11;
      if (v11) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
      }
      goto LABEL_11;
    }
    if (*((void *)&v17 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v17 + 1));
    }
    uint64_t v14 = v7[3];
    long long v13 = v7 + 3;
    if (v14)
    {
      sub_2171AD9D4(v13, &v17);
      *(_OWORD *)a3 = v17;
      return;
    }
LABEL_17:
    *a3 = 0;
    a3[1] = 0;
    return;
  }
  uint64_t v10 = v7[3];
  long long v9 = v7 + 3;
  if (v10)
  {
    sub_2171AD9D4(v9, &v15);
    sub_2171AD474(&v15, (uint64_t)&v17, &v16);
    *(_OWORD *)a3 = v16;
    long long v16 = 0uLL;
    if (*((void *)&v15 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v15 + 1));
    }
  }
  else
  {
    uint64_t v12 = *((void *)&v17 + 1);
    *a3 = v17;
    a3[1] = v12;
    long long v17 = 0uLL;
  }
LABEL_11:
  if (*((void *)&v17 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v17 + 1));
  }
}

void sub_2171AD9A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  if (a14) {
    sub_216784EC4(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_2171AD9D4(uint64_t *a1@<X0>, void *a2@<X8>)
{
  long long v4 = operator new(0x18uLL);
  uint64_t v5 = *a1;
  uint64_t v6 = (std::__shared_weak_count *)a1[1];
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    void *v4 = &unk_26C77C310;
    v4[1] = v5;
    v4[2] = v6;
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    void *v4 = &unk_26C77C310;
    v4[1] = v5;
    v4[2] = 0;
  }
  sub_2171AE838(a2, (uint64_t)v4);
  if (v6)
  {
    sub_216784EC4(v6);
  }
}

void sub_2171ADA8C(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_216784EC4(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_2171ADAA4(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *this)
{
  *(void *)this = &unk_26C77C310;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_216784EC4(v2);
  }

  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(this);
}

void sub_2171ADB00(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *this)
{
  *(void *)this = &unk_26C77C310;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_216784EC4(v2);
  }
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(this);

  operator delete(v3);
}

void sub_2171ADB60(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    long long v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 5;
        sub_2171ADBF8((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_2171ADBF8(uint64_t a1, void *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[4];
  if (v3) {
    sub_216784EC4(v3);
  }
  long long v4 = (std::__shared_weak_count *)a2[2];
  if (v4) {
    sub_216784EC4(v4);
  }
  if ((*a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void *sub_2171ADC48(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    sub_216784EC4(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    sub_216784EC4(v3);
  }
  if ((*a1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*a1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

uint64_t sub_2171ADC9C(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 228) >= 5u) {
    free(*(void **)a1);
  }
  return a1;
}

uint64_t sub_2171ADCDC(uint64_t result)
{
  uint64_t v1 = result;
  if (*(_DWORD *)(result + 228) >= 5u) {
    double result = *(void *)result;
  }
  uint64_t v2 = *(unsigned int *)(v1 + 224);
  if (v2)
  {
    uint64_t v3 = 56 * v2;
    do
    {
      double result = sub_217199B64(result) + 56;
      v3 -= 56;
    }
    while (v3);
  }
  return result;
}

void *sub_2171ADD2C(void *a1, uint64_t a2)
{
  *a1 = a2;
  long long v4 = operator new(0x20uLL);
  void *v4 = &unk_26C77C358;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_2171ADD8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  a10 = 0;
  if (v10) {
    sub_2171ADE24((uint64_t)&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_2171ADDB0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void sub_2171ADDD8(uint64_t a1)
{
}

uint64_t sub_2171ADDE0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77C3A8)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_2171ADE24(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_2168CAE68((uint64_t *)(a2 + 24), 0);
    uint64_t v3 = (void **)a2;
    sub_2171ADB60(&v3);
    operator delete((void *)a2);
  }
}

void *sub_2171ADE74(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a1[3];
  if (v4)
  {
    unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
    uint64_t v6 = *a2;
    if ((*a2 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v6 &= 0xFFFFFFFFFFFFFFF8;
    }
    v12[0] = v6;
    v12[1] = v5;
    long long v7 = sub_2168CD6A4(v4, v12, v12);
    if ((v12[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if (!v8) {
      return (void *)(*a1 + 40 * v7[3]);
    }
    goto LABEL_14;
  }
  double result = (void *)*a1;
  uint64_t v10 = (void *)a1[1];
  if ((void *)*a1 != v10)
  {
    while ((*result & 0xFFFFFFFFFFFFFFF8) != (*a2 & 0xFFFFFFFFFFFFFFF8))
    {
      result += 5;
      if (result == v10) {
        goto LABEL_14;
      }
    }
  }
  if (result == v10)
  {
LABEL_14:
    sub_2171AE3CC(v12, a2, a2 + 1);
    sub_2171AE020(a1, v12);
    if (v14) {
      sub_216784EC4(v14);
    }
    if (v13) {
      sub_216784EC4(v13);
    }
    if ((v12[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v11 = a1[1];
    if (0xCCCCCCCCCCCCCCCDLL * ((v11 - *a1) >> 3) >= 8)
    {
      sub_2171AE42C(a1);
      uint64_t v11 = a1[1];
    }
    return (void *)(v11 - 40);
  }
  return result;
}

void sub_2171ADFEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2171ADC48((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_2171AE020(uint64_t *a1, uint64_t *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - *a1) >> 3);
    if (v10 + 1 > 0x666666666666666) {
      sub_21677CB10();
    }
    unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *a1) >> 3);
    uint64_t v12 = 2 * v11;
    if (2 * v11 <= v10 + 1) {
      uint64_t v12 = v10 + 1;
    }
    if (v11 >= 0x333333333333333) {
      unint64_t v13 = 0x666666666666666;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v19 = v4;
    if (v13) {
      uint64_t v14 = (char *)sub_2168720A4(v4, v13);
    }
    else {
      uint64_t v14 = 0;
    }
    long long v15 = v14;
    long long v16 = (uint64_t *)&v14[40 * v10];
    long long v18 = &v14[40 * v13];
    sub_2171AE144(v16, a2);
    long long v17 = v16 + 5;
    sub_2171AE1A4(a1, &v15);
    uint64_t v9 = a1[1];
    double result = sub_2171AE350(&v15);
  }
  else
  {
    double result = sub_2171AE144(*(uint64_t **)(v4 - 8), a2);
    uint64_t v9 = v7 + 40;
    a1[1] = v7 + 40;
  }
  a1[1] = v9;
  return result;
}

void sub_2171AE130(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2171AE350((void **)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_2171AE144(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  void *result = *a2;
  if ((v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *result &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v3 = a2[2];
  result[1] = a2[1];
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = a2[4];
  result[3] = a2[3];
  result[4] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_2171AE1A4(uint64_t *a1, void *a2)
{
  uint64_t result = sub_2171AE21C((uint64_t)(a1 + 2), a1[1], (uint64_t *)a1[1], *a1, (uint64_t *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_2171AE21C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  uint64_t v12[2] = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 5;
      sub_2171AE144((uint64_t *)(v7 - 40), v9);
      uint64_t v7 = *((void *)&v15 + 1) - 40;
      *((void *)&v15 + 1) -= 40;
    }
    while (v9 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_2171AE2C4((uint64_t)v12);
  return v10;
}

uint64_t sub_2171AE2C4(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_2171AE2FC((uint64_t *)a1);
  }
  return a1;
}

void sub_2171AE2FC(uint64_t *a1)
{
  uint64_t v1 = *(void **)(a1[2] + 8);
  uint64_t v2 = *(void **)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_2171ADBF8(v3, v1);
      v1 += 5;
    }
    while (v1 != v2);
  }
}

void **sub_2171AE350(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_2171AE384(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 40;
    sub_2171ADBF8(v4, (void *)(i - 40));
  }
}

uint64_t *sub_2171AE3CC(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  void *result = *a2;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *result &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v4 = a3[1];
  result[1] = *a3;
  result[2] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = a3[3];
  result[3] = a3[2];
  result[4] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_2171AE42C(uint64_t *a1)
{
  uint64_t v1 = a1 + 3;
  if (!a1[3])
  {
    uint64_t v3 = operator new(0x28uLL);
    *uint64_t v3 = 0u;
    v3[1] = 0u;
    *((_DWORD *)v3 + 8) = 1065353216;
    sub_21678A04C((uint64_t)v3, 8uLL);
    sub_2168CAE68(v1, (uint64_t)v3);
    uint64_t v4 = *a1;
    if (a1[1] != *a1)
    {
      uint64_t v5 = 0;
      unint64_t v6 = 0;
      do
      {
        uint64_t v7 = *v1;
        uint64_t v8 = *(void *)(v4 + v5);
        if ((v8 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          v8 &= 0xFFFFFFFFFFFFFFF8;
        }
        v9[0] = v8;
        v9[1] = v6;
        sub_2168CD6A4(v7, v9, v9);
        if ((v9[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v9[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        ++v6;
        uint64_t v4 = *a1;
        v5 += 40;
      }
      while (v6 < 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3));
    }
  }
}

void sub_2171AE530(_Unwind_Exception *a1)
{
  uint64_t v3 = (void *)sub_2168C08A0(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_2171AE56C(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *a1)
{
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(a1);

  operator delete(v1);
}

void *sub_2171AE594(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  void *v4 = &unk_26C77C408;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_2171AE5EC(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_2173254E8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_2171AE608(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171AE630(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2171AE660(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77C458)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

_DWORD *sub_2171AE6A4(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(_DWORD *)(a1 + 224);
  unsigned int v5 = *(_DWORD *)(a1 + 228);
  if (v4 == v5)
  {
    sub_2171AE718(a1, v4 + (v4 >> 1) + 1);
    unsigned int v5 = *(_DWORD *)(a1 + 228);
  }
  uint64_t v6 = a1;
  if (v5 >= 5) {
    uint64_t v6 = *(void *)a1;
  }
  uint64_t result = sub_2171AA848((_DWORD *)(v6 + 56 * *(unsigned int *)(a1 + 224)), a2);
  ++*(_DWORD *)(a1 + 224);
  return result;
}

void sub_2171AE718(uint64_t a1, unsigned int a2)
{
  unsigned int v4 = malloc(56 * a2);
  unsigned int v5 = (void *)a1;
  if (*(_DWORD *)(a1 + 228) >= 5u) {
    unsigned int v5 = *(void **)a1;
  }
  sub_2171AE7A0((uint64_t)v5, (uint64_t)v5 + 56 * *(unsigned int *)(a1 + 224), (uint64_t)v4);
  sub_2171ADCDC(a1);
  if (*(_DWORD *)(a1 + 228) >= 5u) {
    free(*(void **)a1);
  }
  *(void *)a1 = v4;
  *(_DWORD *)(a1 + 228) = a2;
}

uint64_t sub_2171AE7A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = 0;
    do
    {
      sub_2171AA848((_DWORD *)(a3 + v6), a1 + v6);
      v6 += 56;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

void sub_2171AE800(void *a1)
{
  __cxa_begin_catch(a1);
  for (; v2; v2 -= 56)
  {
    sub_217199B64(v1);
    v1 += 56;
  }
  __cxa_rethrow();
}

void sub_2171AE824(_Unwind_Exception *a1)
{
}

void *sub_2171AE838(void *a1, uint64_t a2)
{
  *a1 = a2;
  unsigned int v4 = operator new(0x20uLL);
  void *v4 = &unk_26C77C480;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_2171AE890(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_2173254E8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_2171AE8AC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171AE8D4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2171AE904(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77C4D0)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void *sub_2171AE948(void *a1, uint64_t a2)
{
  *a1 = a2;
  unsigned int v4 = operator new(0x20uLL);
  void *v4 = &unk_26C77C4F8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_2171AE9A0(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_2173254E8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_2171AE9BC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171AE9E4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2171AEA14(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77C548)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t sub_2171AEA58(uint64_t result, unint64_t a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4, char a5)
{
  unint64_t v9 = a2;
  uint64_t v10 = result;
  unint64_t v25 = a2;
  uint64_t v26 = (char *)result;
LABEL_2:
  for (uint64_t i = 1 - a4; ; ++i)
  {
    uint64_t v12 = v9 - v10;
    unint64_t v13 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v9 - v10) >> 3);
    if (!(!v6 & v5))
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          uint64_t v23 = *a3;
          unint64_t v25 = v9 - 56;
          uint64_t result = ((uint64_t (*)(void))v23)();
          if (result) {
            uint64_t result = sub_2171AED6C((uint64_t *)&v26, (uint64_t *)&v25);
          }
          break;
        case 3uLL:
          unint64_t v25 = v9 - 56;
          uint64_t result = sub_2171AF0E0(v10, v10 + 56, v9 - 56, a3);
          break;
        case 4uLL:
          unint64_t v25 = v9 - 56;
          uint64_t result = sub_2171AFAA0(v10, v10 + 56, v10 + 112, v9 - 56, a3);
          break;
        case 5uLL:
          unint64_t v25 = v9 - 56;
          uint64_t result = sub_2171AFB58(v10, v10 + 56, v10 + 112, v10 + 168, v9 - 56, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v12 <= 1343)
    {
      if (a5) {
        return sub_2171AEE40(v10, v9, a3);
      }
      else {
        return sub_2171AEFA4(v10, v9, a3);
      }
    }
    if (i == 1) {
      break;
    }
    unint64_t v14 = v13 >> 1;
    uint64_t v15 = v9 - 56;
    if ((unint64_t)v12 >= 0x1C01)
    {
      sub_2171AF0E0(v10, v10 + 56 * (v13 >> 1), v15, a3);
      uint64_t v16 = 56 * v14;
      uint64_t v17 = 56 * v14 - 56;
      unint64_t v18 = v25;
      sub_2171AF0E0((uint64_t)(v26 + 56), (uint64_t)&v26[v17], v25 - 112, a3);
      sub_2171AF0E0((uint64_t)(v26 + 112), (uint64_t)&v26[v16 + 56], v18 - 168, a3);
      sub_2171AF0E0((uint64_t)&v26[v17], (uint64_t)&v26[v16], (uint64_t)&v26[v16 + 56], a3);
      long long v24 = &v26[v16];
      sub_2171AF1BC((uint64_t *)&v26, (uint64_t *)&v24);
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      sub_2171AF0E0(v10 + 56 * (v13 >> 1), v10, v15, a3);
      if (a5)
      {
LABEL_13:
        unint64_t v9 = v25;
        goto LABEL_14;
      }
    }
    char v19 = ((uint64_t (*)(char *))*a3)(v26 - 56);
    unint64_t v9 = v25;
    if ((v19 & 1) == 0)
    {
      uint64_t result = sub_2171AF290((uint64_t)v26, v25, (unsigned int (**)(void *))a3);
      uint64_t v10 = result;
LABEL_22:
      a5 = 0;
      uint64_t v26 = (char *)v10;
      a4 = -i;
      goto LABEL_2;
    }
LABEL_14:
    uint64_t v20 = sub_2171AF488((uint64_t)v26, v9, (uint64_t (**)(void))a3);
    if ((v21 & 1) == 0) {
      goto LABEL_21;
    }
    int v22 = sub_2171AF674((uint64_t)v26, (uint64_t)v20, a3);
    uint64_t v10 = (uint64_t)(v20 + 56);
    uint64_t result = sub_2171AF674((uint64_t)(v20 + 56), v9, a3);
    if (result)
    {
      if (v22) {
        return result;
      }
      unint64_t v25 = (unint64_t)v20;
      uint64_t v10 = (uint64_t)v26;
      unint64_t v9 = (unint64_t)v20;
    }
    else
    {
      if (!v22)
      {
LABEL_21:
        uint64_t result = sub_2171AEA58(v26, v20, a3, -i, a5 & 1);
        uint64_t v10 = (uint64_t)(v20 + 56);
        goto LABEL_22;
      }
      uint64_t v26 = v20 + 56;
    }
  }
  if (v10 != v9) {
    return sub_2171AFC38(v10, v9, v9, a3);
  }
  return result;
}

uint64_t sub_2171AED6C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  sub_2171AA848(v7, *a1);
  if (v2 != v3)
  {
    if (*(_DWORD *)(v3 + 52) >= 7u) {
      unsigned int v4 = *(char **)v3;
    }
    else {
      unsigned int v4 = (char *)v3;
    }
    sub_2171AF8E4(v2, v4, &v4[8 * *(unsigned int *)(v3 + 48)]);
  }
  if (v7 != (void *)v3)
  {
    if (v9 >= 7) {
      char v5 = (char *)v7[0];
    }
    else {
      char v5 = (char *)v7;
    }
    sub_2171AF8E4(v3, v5, &v5[8 * v8]);
  }
  return sub_217199B64((uint64_t)v7);
}

void sub_2171AEE24(_Unwind_Exception *exception_object)
{
}

uint64_t sub_2171AEE40(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (result != a2)
  {
    unsigned int v4 = (void *)result;
    uint64_t v5 = result + 56;
    if (result + 56 != a2)
    {
      uint64_t v7 = 0;
      uint64_t v8 = result;
      do
      {
        uint64_t v9 = v8;
        uint64_t v8 = v5;
        uint64_t result = (*a3)(v5, v9);
        if (result)
        {
          sub_2171AA848(v15, v8);
          uint64_t v10 = v7;
          while (1)
          {
            unint64_t v11 = *(_DWORD *)((char *)v4 + v10 + 52) >= 7u ? *(char **)((char *)v4 + v10) : (char *)v4 + v10;
            sub_2171AF8E4((uint64_t)v4 + v10 + 56, v11, &v11[8 * *(unsigned int *)((char *)v4 + v10 + 48)]);
            if (!v10) {
              break;
            }
            char v12 = (*a3)((uint64_t)v15, (uint64_t)v4 + v10 - 56);
            v10 -= 56;
            if ((v12 & 1) == 0)
            {
              unint64_t v13 = (void *)((char *)v4 + v10 + 56);
              goto LABEL_13;
            }
          }
          unint64_t v13 = v4;
LABEL_13:
          if (v13 != v15)
          {
            if (v17 >= 7) {
              unint64_t v14 = (char *)v15[0];
            }
            else {
              unint64_t v14 = (char *)v15;
            }
            sub_2171AF8E4((uint64_t)v13, v14, &v14[8 * v16]);
          }
          uint64_t result = sub_217199B64((uint64_t)v15);
        }
        uint64_t v5 = v8 + 56;
        v7 += 56;
      }
      while (v8 + 56 != a2);
    }
  }
  return result;
}

void sub_2171AEF84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2171AEFA4(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (result != a2)
  {
    uint64_t v4 = result;
    for (uint64_t i = result + 56; v4 + 56 != a2; uint64_t i = v4 + 56)
    {
      uint64_t v7 = v4;
      uint64_t v4 = i;
      uint64_t result = (*a3)(i, v7);
      if (result)
      {
        sub_2171AA848(v12, v4);
        uint64_t v8 = (void *)v4;
        do
        {
          if (*((_DWORD *)v8 - 1) >= 7u) {
            uint64_t v9 = (char *)*(v8 - 7);
          }
          else {
            uint64_t v9 = (char *)(v8 - 7);
          }
          sub_2171AF8E4((uint64_t)v8, v9, &v9[8 * *((unsigned int *)v8 - 2)]);
          char v10 = (*a3)((uint64_t)v12, (uint64_t)(v8 - 14));
          v8 -= 7;
        }
        while ((v10 & 1) != 0);
        if (v8 != v12)
        {
          if (v14 >= 7) {
            unint64_t v11 = (char *)v12[0];
          }
          else {
            unint64_t v11 = (char *)v12;
          }
          sub_2171AF8E4((uint64_t)v8, v11, &v11[8 * v13]);
        }
        uint64_t result = sub_217199B64((uint64_t)v12);
      }
    }
  }
  return result;
}

void sub_2171AF0C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2171AF0E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(uint64_t, uint64_t))
{
  uint64_t v12 = a2;
  uint64_t v13 = a1;
  uint64_t v11 = a3;
  char v7 = (*a4)(a2, a1);
  uint64_t result = (*a4)(a3, a2);
  if ((v7 & 1) == 0)
  {
    if (!result) {
      return result;
    }
    sub_2171AED6C(&v12, &v11);
    if (!(*a4)(v12, v13)) {
      return 1;
    }
    uint64_t v9 = &v13;
    char v10 = &v12;
    goto LABEL_9;
  }
  if (!result)
  {
    sub_2171AED6C(&v13, &v12);
    if (!(*a4)(v11, v12)) {
      return 1;
    }
    uint64_t v9 = &v12;
    char v10 = &v11;
LABEL_9:
    sub_2171AED6C(v9, v10);
    return 2;
  }
  sub_2171AED6C(&v13, &v11);
  return 1;
}

uint64_t sub_2171AF1BC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  sub_2171AA848(v7, *a1);
  if (v2 != v3)
  {
    if (*(_DWORD *)(v3 + 52) >= 7u) {
      uint64_t v4 = *(char **)v3;
    }
    else {
      uint64_t v4 = (char *)v3;
    }
    sub_2171AF8E4(v2, v4, &v4[8 * *(unsigned int *)(v3 + 48)]);
  }
  if (v7 != (void *)v3)
  {
    if (v9 >= 7) {
      uint64_t v5 = (char *)v7[0];
    }
    else {
      uint64_t v5 = (char *)v7;
    }
    sub_2171AF8E4(v3, v5, &v5[8 * v8]);
  }
  return sub_217199B64((uint64_t)v7);
}

void sub_2171AF274(_Unwind_Exception *exception_object)
{
}

unint64_t sub_2171AF290(uint64_t a1, unint64_t a2, unsigned int (**a3)(void *))
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  unint64_t v14 = a2;
  unint64_t v15 = a1;
  sub_2171AA848(v16, a1);
  if (((uint64_t (*)(void *, unint64_t))*a3)(v16, a2 - 56))
  {
    unint64_t v6 = a1;
    do
    {
      v6 += 56;
      unint64_t v15 = v6;
    }
    while ((((uint64_t (*)(void *, unint64_t))*a3)(v16, v6) & 1) == 0);
  }
  else
  {
    unint64_t v7 = a1 + 56;
    do
    {
      unint64_t v6 = v7;
      unint64_t v15 = v7;
      if (v7 >= v14) {
        break;
      }
      int v8 = ((uint64_t (*)(void *, unint64_t))*a3)(v16, v7);
      unint64_t v7 = v6 + 56;
    }
    while (!v8);
  }
  unint64_t v9 = v14;
  if (v6 < v14)
  {
    do
    {
      v9 -= 56;
      unint64_t v14 = v9;
    }
    while ((((uint64_t (*)(void *, unint64_t))*a3)(v16, v9) & 1) != 0);
    unint64_t v6 = v15;
  }
  if (v6 < v9)
  {
    do
    {
      sub_2171AED6C((uint64_t *)&v15, (uint64_t *)&v14);
      do
        v15 += 56;
      while (!(*a3)(v16));
      do
        v14 -= 56;
      while ((((uint64_t (*)(void *))*a3)(v16) & 1) != 0);
      unint64_t v6 = v15;
    }
    while (v15 < v14);
  }
  if (v6 - 56 != a1)
  {
    if (*(_DWORD *)(v6 - 4) >= 7u) {
      uint64_t v10 = *(char **)(v6 - 56);
    }
    else {
      uint64_t v10 = (char *)(v6 - 56);
    }
    sub_2171AF8E4(a1, v10, &v10[8 * *(unsigned int *)(v6 - 8)]);
  }
  if ((void *)(v6 - 56) != v16)
  {
    if (v18 >= 7) {
      uint64_t v11 = (char *)v16[0];
    }
    else {
      uint64_t v11 = (char *)v16;
    }
    sub_2171AF8E4(v6 - 56, v11, &v11[8 * v17]);
  }
  unint64_t v12 = v15;
  sub_217199B64((uint64_t)v16);
  return v12;
}

void sub_2171AF450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_217199B64((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_2171AF488(uint64_t a1, unint64_t a2, uint64_t (**a3)(void))
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  unint64_t v19 = a2;
  sub_2171AA848(v21, a1);
  uint64_t v5 = 0;
  do
  {
    unint64_t v20 = a1 + v5 + 56;
    v5 += 56;
  }
  while (((*a3)() & 1) != 0);
  unint64_t v6 = v19;
  if (v5 == 56)
  {
    unint64_t v9 = a1 + 56;
    do
    {
      if (v9 >= v6) {
        break;
      }
      uint64_t v10 = *a3;
      v6 -= 56;
      unint64_t v19 = v6;
    }
    while ((((uint64_t (*)(unint64_t, void *))v10)(v6, v21) & 1) == 0);
  }
  else
  {
    unint64_t v7 = v19 - 56;
    do
    {
      unint64_t v19 = v7;
      int v8 = ((uint64_t (*)(unint64_t, void *))*a3)(v7, v21);
      v7 -= 56;
    }
    while (!v8);
    unint64_t v9 = v20;
  }
  unint64_t v11 = v9;
  if (v9 < v19)
  {
    do
    {
      sub_2171AED6C((uint64_t *)&v20, (uint64_t *)&v19);
      do
        v20 += 56;
      while (((*a3)() & 1) != 0);
      do
        v19 -= 56;
      while (!(*a3)());
      unint64_t v11 = v20;
    }
    while (v20 < v19);
  }
  unint64_t v12 = (char *)(v11 - 56);
  if (v11 - 56 != a1)
  {
    uint64_t v13 = *(char **)(v11 - 56);
    unint64_t v15 = v11 - 8;
    uint64_t v14 = *(unsigned int *)(v11 - 8);
    if (*(_DWORD *)(v15 + 4) >= 7u) {
      int v16 = v13;
    }
    else {
      int v16 = v12;
    }
    sub_2171AF8E4(a1, v16, &v16[8 * v14]);
  }
  if (v12 != (char *)v21)
  {
    if (v23 >= 7) {
      int v17 = (char *)v21[0];
    }
    else {
      int v17 = (char *)v21;
    }
    sub_2171AF8E4((uint64_t)v12, v17, &v17[8 * v22]);
  }
  sub_217199B64((uint64_t)v21);
  return v12;
}

void sub_2171AF640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t sub_2171AF674(uint64_t a1, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v15 = a2;
  uint64_t v16 = a1;
  BOOL v6 = 1;
  switch(0x6DB6DB6DB6DB6DB7 * ((a2 - a1) >> 3))
  {
    case 0:
    case 1:
      return v6;
    case 2:
      unint64_t v7 = *a3;
      uint64_t v15 = a2 - 56;
      if (((unsigned int (*)(uint64_t))v7)(a2 - 56)) {
        sub_2171AED6C(&v16, &v15);
      }
      return v6;
    case 3:
      sub_2171AF0E0(a1, a1 + 56, a2 - 56, a3);
      return v6;
    case 4:
      sub_2171AFAA0(a1, a1 + 56, a1 + 112, a2 - 56, a3);
      return v6;
    case 5:
      sub_2171AFB58(a1, a1 + 56, a1 + 112, a1 + 168, a2 - 56, a3);
      return v6;
    default:
      uint64_t v8 = a1 + 112;
      sub_2171AF0E0(a1, a1 + 56, a1 + 112, a3);
      uint64_t v9 = a1 + 168;
      if (v9 == a2) {
        return 1;
      }
      int v10 = 0;
      break;
  }
  while (!(*a3)(v9, v8))
  {
LABEL_20:
    uint64_t v8 = v9;
    v9 += 56;
    if (v9 == v15) {
      return 1;
    }
  }
  sub_2171AA848(v17, v9);
  do
  {
    unint64_t v11 = (void *)v8;
    if (*(_DWORD *)(v8 + 52) >= 7u) {
      unint64_t v12 = *(char **)v8;
    }
    else {
      unint64_t v12 = (char *)v8;
    }
    sub_2171AF8E4(v8 + 56, v12, &v12[8 * *(unsigned int *)(v8 + 48)]);
    if (v8 == v16) {
      break;
    }
    v8 -= 56;
  }
  while (((*a3)((uint64_t)v17, (uint64_t)(v11 - 7)) & 1) != 0);
  if (v11 != v17)
  {
    if (v19 >= 7) {
      uint64_t v13 = (char *)v17[0];
    }
    else {
      uint64_t v13 = (char *)v17;
    }
    sub_2171AF8E4((uint64_t)v11, v13, &v13[8 * v18]);
  }
  if (++v10 != 8)
  {
    sub_217199B64((uint64_t)v17);
    goto LABEL_20;
  }
  BOOL v6 = v9 + 56 == v15;
  sub_217199B64((uint64_t)v17);
  return v6;
}

void sub_2171AF8AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_217199B64((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2171AF8E4(uint64_t a1, char *a2, char *a3)
{
  uint64_t v4 = a2;
  unsigned int v6 = *(_DWORD *)(a1 + 52);
  unint64_t v7 = (void *)a1;
  if (v6 >= 7) {
    unint64_t v7 = *(void **)a1;
  }
  uint64_t v8 = *(unsigned int *)(a1 + 48);
  if (v8)
  {
    uint64_t v9 = 8 * v8;
    do
    {
      if ((*v7 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      ++v7;
      v9 -= 8;
    }
    while (v9);
    unsigned int v6 = *(_DWORD *)(a1 + 52);
  }
  *(_DWORD *)(a1 + 48) = 0;
  unint64_t v10 = (unint64_t)(a3 - a2) >> 3;
  if (v6 < v10)
  {
    sub_2171AF9D8(a1, (unint64_t)(a3 - a2) >> 3);
    unsigned int v6 = *(_DWORD *)(a1 + 52);
  }
  unint64_t v11 = (void *)a1;
  if (v6 >= 7) {
    unint64_t v11 = *(void **)a1;
  }
  for (; v4 != a3; ++v11)
  {
    uint64_t v12 = *(void *)v4;
    *unint64_t v11 = *(void *)v4;
    if ((v12 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *v11 &= 0xFFFFFFFFFFFFFFF8;
    }
    v4 += 8;
  }
  *(_DWORD *)(a1 + 48) = v10;
}

void sub_2171AF9D8(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = malloc(8 * a2);
  uint64_t v5 = v4;
  unsigned int v6 = *(_DWORD *)(a1 + 52);
  unint64_t v7 = (void *)a1;
  if (v6 >= 7) {
    unint64_t v7 = *(void **)a1;
  }
  uint64_t v8 = *(unsigned int *)(a1 + 48);
  uint64_t v9 = 8 * v8;
  if (v8)
  {
    uint64_t v10 = 8 * v8;
    unint64_t v11 = v4;
    do
    {
      *v11++ = *v7;
      *v7++ = 0;
      v10 -= 8;
    }
    while (v10);
  }
  uint64_t v12 = (void *)a1;
  if (v6 >= 7) {
    uint64_t v12 = *(void **)a1;
  }
  if (v8)
  {
    do
    {
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      ++v12;
      v9 -= 8;
    }
    while (v9);
    unsigned int v6 = *(_DWORD *)(a1 + 52);
  }
  if (v6 >= 7) {
    free(*(void **)a1);
  }
  *(void *)a1 = v5;
  *(_DWORD *)(a1 + 52) = a2;
}

uint64_t sub_2171AFAA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(uint64_t, uint64_t))
{
  uint64_t v13 = a2;
  uint64_t v14 = a1;
  uint64_t v11 = a4;
  uint64_t v12 = a3;
  sub_2171AF0E0(a1, a2, a3, a5);
  uint64_t result = (*a5)(a4, a3);
  if (result)
  {
    sub_2171AED6C(&v12, &v11);
    uint64_t result = (*a5)(v12, a2);
    if (result)
    {
      sub_2171AED6C(&v13, &v12);
      uint64_t result = (*a5)(v13, a1);
      if (result) {
        return sub_2171AED6C(&v14, &v13);
      }
    }
  }
  return result;
}

uint64_t sub_2171AFB58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (**a6)(uint64_t, uint64_t))
{
  uint64_t v16 = a2;
  uint64_t v17 = a1;
  uint64_t v14 = a4;
  uint64_t v15 = a3;
  uint64_t v13 = a5;
  sub_2171AFAA0(a1, a2, a3, a4, a6);
  uint64_t result = (*a6)(a5, a4);
  if (result)
  {
    sub_2171AED6C(&v14, &v13);
    uint64_t result = (*a6)(v14, a3);
    if (result)
    {
      sub_2171AED6C(&v15, &v14);
      uint64_t result = (*a6)(v15, a2);
      if (result)
      {
        sub_2171AED6C(&v16, &v15);
        uint64_t result = (*a6)(v16, a1);
        if (result) {
          return sub_2171AED6C(&v17, &v16);
        }
      }
    }
  }
  return result;
}

uint64_t sub_2171AFC38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(uint64_t, uint64_t))
{
  uint64_t v18 = a1;
  if (a1 != a2)
  {
    uint64_t v6 = a2;
    uint64_t v7 = a1;
    uint64_t v8 = a2 - a1;
    uint64_t v9 = (a2 - a1) / 56;
    if (a2 - a1 >= 57)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = a1 + 56 * v10;
      do
      {
        sub_2171AFDA0(v7, a4, v9, v12);
        v12 -= 56;
        --v11;
      }
      while (v11);
    }
    uint64_t v17 = v6;
    if (v6 == a3)
    {
      a3 = v6;
    }
    else
    {
      uint64_t v13 = v6;
      do
      {
        if ((*a4)(v13, v18))
        {
          sub_2171AED6C(&v17, &v18);
          sub_2171AFDA0(v18, a4, v9, v18);
        }
        uint64_t v13 = v17 + 56;
        uint64_t v17 = v13;
      }
      while (v13 != a3);
      uint64_t v7 = v18;
      uint64_t v8 = v6 - v18;
    }
    if (v8 >= 57)
    {
      unint64_t v14 = v8 / 0x38uLL;
      do
      {
        sub_2171AFF90(v7, v6, (unsigned int (**)(uint64_t, uint64_t))a4, v14);
        v6 -= 56;
      }
      while (v14-- > 2);
      return v17;
    }
  }
  return a3;
}

uint64_t sub_2171AFDA0(uint64_t result, uint64_t (**a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v5 = a4;
    uint64_t v6 = result;
    int64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= 0x6DB6DB6DB6DB6DB7 * ((a4 - result) >> 3))
    {
      int64_t v10 = (0xDB6DB6DB6DB6DB6ELL * ((a4 - result) >> 3)) | 1;
      uint64_t v11 = result + 56 * v10;
      int64_t v12 = 0xDB6DB6DB6DB6DB6ELL * ((a4 - result) >> 3) + 2;
      if (v12 < a3 && (*a2)(result + 56 * v10, v11 + 56))
      {
        v11 += 56;
        int64_t v10 = v12;
      }
      uint64_t result = (*a2)(v11, v5);
      if ((result & 1) == 0)
      {
        sub_2171AA848(v17, v5);
        do
        {
          uint64_t v13 = (void *)v11;
          if (v5 != v11)
          {
            if (*(_DWORD *)(v11 + 52) >= 7u) {
              unint64_t v14 = *(char **)v11;
            }
            else {
              unint64_t v14 = (char *)v11;
            }
            sub_2171AF8E4(v5, v14, &v14[8 * *(unsigned int *)(v11 + 48)]);
          }
          if (v7 < v10) {
            break;
          }
          uint64_t v15 = (2 * v10) | 1;
          uint64_t v11 = v6 + 56 * v15;
          int64_t v10 = 2 * v10 + 2;
          if (v10 >= a3)
          {
            int64_t v10 = v15;
          }
          else if ((*a2)(v6 + 56 * v15, v11 + 56))
          {
            v11 += 56;
          }
          else
          {
            int64_t v10 = v15;
          }
          uint64_t v5 = (uint64_t)v13;
        }
        while (!(*a2)(v11, (uint64_t)v17));
        if (v13 != v17)
        {
          if (v19 >= 7) {
            uint64_t v16 = (char *)v17[0];
          }
          else {
            uint64_t v16 = (char *)v17;
          }
          sub_2171AF8E4((uint64_t)v13, v16, &v16[8 * v18]);
        }
        return sub_217199B64((uint64_t)v17);
      }
    }
  }
  return result;
}

void sub_2171AFF70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2171AFF90(uint64_t result, uint64_t a2, unsigned int (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (a4 >= 2)
  {
    uint64_t v7 = result;
    sub_2171AA848(v13, result);
    uint64_t v8 = (void *)sub_2171B00F4(v7, a3, a4);
    uint64_t v9 = v8;
    if (v8 == (void *)(a2 - 56))
    {
      if (v8 != v13)
      {
        if (v15 >= 7) {
          int64_t v12 = (char *)v13[0];
        }
        else {
          int64_t v12 = (char *)v13;
        }
        sub_2171AF8E4((uint64_t)v8, v12, &v12[8 * v14]);
      }
    }
    else
    {
      if (*(_DWORD *)(a2 - 4) >= 7u) {
        int64_t v10 = *(char **)(a2 - 56);
      }
      else {
        int64_t v10 = (char *)(a2 - 56);
      }
      sub_2171AF8E4((uint64_t)v8, v10, &v10[8 * *(unsigned int *)(a2 - 8)]);
      if ((void *)(a2 - 56) != v13)
      {
        if (v15 >= 7) {
          uint64_t v11 = (char *)v13[0];
        }
        else {
          uint64_t v11 = (char *)v13;
        }
        sub_2171AF8E4(a2 - 56, v11, &v11[8 * v14]);
      }
      sub_2171B01CC(v7, (uint64_t)(v9 + 7), (uint64_t (**)(uint64_t, uint64_t))a3, 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v9 - v7 + 56) >> 3));
    }
    return sub_217199B64((uint64_t)v13);
  }
  return result;
}

void sub_2171B00D8(_Unwind_Exception *exception_object)
{
}

uint64_t sub_2171B00F4(uint64_t a1, unsigned int (**a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = a1 + 56 * v6 + 56;
    uint64_t v10 = 2 * v6;
    uint64_t v6 = (2 * v6) | 1;
    uint64_t v11 = v10 + 2;
    if (v10 + 2 < a3 && (*a2)(v9, v9 + 56))
    {
      v9 += 56;
      uint64_t v6 = v11;
    }
    if (a1 != v9)
    {
      if (*(_DWORD *)(v9 + 52) >= 7u) {
        int64_t v12 = *(char **)v9;
      }
      else {
        int64_t v12 = (char *)v9;
      }
      sub_2171AF8E4(a1, v12, &v12[8 * *(unsigned int *)(v9 + 48)]);
    }
    a1 = v9;
  }
  while (v6 <= v8);
  return v9;
}

uint64_t sub_2171B01CC(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v6 = result;
    unint64_t v7 = v4 >> 1;
    uint64_t v8 = result + 56 * (v4 >> 1);
    uint64_t v9 = a2 - 56;
    uint64_t result = (*a3)(v8, a2 - 56);
    if (result)
    {
      sub_2171AA848(v13, v9);
      do
      {
        uint64_t v10 = (void *)v8;
        if (v9 != v8)
        {
          if (*(_DWORD *)(v8 + 52) >= 7u) {
            uint64_t v11 = *(char **)v8;
          }
          else {
            uint64_t v11 = (char *)v8;
          }
          sub_2171AF8E4(v9, v11, &v11[8 * *(unsigned int *)(v8 + 48)]);
        }
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v8 = v6 + 56 * v7;
        uint64_t v9 = (uint64_t)v10;
      }
      while (((*a3)(v8, (uint64_t)v13) & 1) != 0);
      if (v10 != v13)
      {
        if (v15 >= 7) {
          int64_t v12 = (char *)v13[0];
        }
        else {
          int64_t v12 = (char *)v13;
        }
        sub_2171AF8E4((uint64_t)v10, v12, &v12[8 * v14]);
      }
      return sub_217199B64((uint64_t)v13);
    }
  }
  return result;
}

void sub_2171B02F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::HdContainerSchema::GetNames@<X0>(pxrInternal__aapl__pxrReserved__::HdContainerSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t result = *(void *)this;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

double pxrInternal__aapl__pxrReserved__::HdContainerSchema::BuildRetained@<D0>(unint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, _OWORD *a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::HdRetainedContainerDataSource::New(a1, a2, a3, &v6);
  double result = *(double *)&v6;
  *a4 = v6;
  return result;
}

pxrInternal__aapl__pxrReserved__::HdCoordSys *pxrInternal__aapl__pxrReserved__::HdCoordSys::HdCoordSys(pxrInternal__aapl__pxrReserved__::HdCoordSys *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  unint64_t v4 = pxrInternal__aapl__pxrReserved__::HdSprim::HdSprim(this, a2);
  *(void *)unint64_t v4 = &unk_26C77C570;
  sub_2171B03F0(a2, (uint64_t)v4 + 16);
  return this;
}

void sub_2171B03DC(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::HdSprim::~HdSprim(v1);
  _Unwind_Resume(a1);
}

void sub_2171B03F0(pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X0>, uint64_t a2@<X8>)
{
  Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName(a1);
  unint64_t v4 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_2171B0A14();
  if ((*((void *)v4 + 1) & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*((void *)v4 + 1) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v4);
  }
  if (*((char *)EmptyString + 23) >= 0) {
    long long v6 = (const char *)EmptyString;
  }
  else {
    long long v6 = (const char *)*EmptyString;
  }
  int v7 = *((char *)Name + 23);
  unint64_t v8 = Name[1];
  if (v7 >= 0) {
    size_t v9 = *((unsigned __int8 *)Name + 23);
  }
  else {
    size_t v9 = Name[1];
  }
  size_t v10 = strlen(v6);
  if (v9 < v10) {
    goto LABEL_14;
  }
  uint64_t v11 = (const char *)*Name;
  if (v7 >= 0) {
    uint64_t v11 = (const char *)Name;
  }
  if (!strcmp(&v11[v9 - v10], v6))
  {
    uint64_t v13 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
    if (!v13) {
      uint64_t v13 = sub_216AFE274(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
    }
    unint64_t v14 = *((void *)v13 + 10) & 0xFFFFFFFFFFFFFFF8;
    if (v14)
    {
      unsigned int v15 = (const char *)(v14 + 16);
      if (*(char *)(v14 + 39) < 0) {
        unsigned int v15 = *(const char **)v15;
      }
    }
    else
    {
      unsigned int v15 = "";
    }
    pxrInternal__aapl__pxrReserved__::TfStringGetBeforeSuffix((uint64_t)Name, *v15, &__dst);
  }
  else
  {
LABEL_14:
    if (v7 < 0)
    {
      sub_216778F24(&__dst, (void *)*Name, v8);
    }
    else
    {
      long long v12 = *(_OWORD *)Name;
      __dst.__r_.__value_.__r.__words[2] = Name[2];
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v12;
    }
  }
  uint64_t v16 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_2171B0A14();
  if ((*(void *)v16 & 0xFFFFFFFFFFFFFFF8) != 0) {
    uint64_t v17 = (uint64_t *)((*(void *)v16 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    uint64_t v17 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v16);
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::StripPrefixNamespace(&__dst, (uint64_t)v17, &__p);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_2171B0578(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdCoordSys::Sync(uint64_t this, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *a2, pxrInternal__aapl__pxrReserved__::HdRenderParam *a3, unsigned int *a4)
{
  uint64_t v6 = this;
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (a2
    || (__p.__r_.__value_.__r.__words[0] = (std::string::size_type)"hd/coordSys.cpp",
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)"Sync",
        __p.__r_.__value_.__r.__words[2] = 70,
        uint64_t v20 = "virtual void pxrInternal__aapl__pxrReserved__::HdCoordSys::Sync(HdSceneDelegate *const, HdRenderParam *con"
              "st, HdDirtyBits *const)",
        char v21 = 0,
        this = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&__p, "sceneDelegate", 0),
        (this & 1) != 0))
  {
    if (*(unsigned char *)a4)
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B96C60, memory_order_acquire) & 1) == 0)
      {
        size_t v9 = (pxrInternal__aapl__pxrReserved__::HdCoordSysSchema *)__cxa_guard_acquire(&qword_267B96C60);
        if (v9)
        {
          uint64_t v10 = *(void *)pxrInternal__aapl__pxrReserved__::HdCoordSysSchema::GetSchemaToken(v9);
          uint64_t v17 = v10;
          if ((v10 & 7) != 0
            && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
          {
            v17 &= 0xFFFFFFFFFFFFFFF8;
          }
          uint64_t v11 = (pxrInternal__aapl__pxrReserved__::HdCoordSysSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCoordSysSchemaTokens);
          if (!v11) {
            uint64_t v11 = sub_2171B0C7C(&pxrInternal__aapl__pxrReserved__::HdCoordSysSchemaTokens);
          }
          uint64_t v12 = *((void *)v11 + 1);
          uint64_t v18 = v12;
          if ((v12 & 7) != 0
            && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
          {
            v18 &= 0xFFFFFFFFFFFFFFF8;
          }
          sub_216D30CFC(v15, &v17, 2uLL);
          pxrInternal__aapl__pxrReserved__::SdfPath::JoinIdentifier(v15, &__p);
          pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&unk_267B96C58);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          uint64_t v16 = (void **)v15;
          sub_216889A04(&v16);
          for (uint64_t i = 8; i != -8; i -= 8)
          {
            uint64_t v14 = *(uint64_t *)((char *)&v17 + i);
            if ((v14 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
          }
          __cxa_atexit((void (*)(void *))sub_216BC90EC, &unk_267B96C58, &dword_216758000);
          __cxa_guard_release(&qword_267B96C60);
        }
      }
      (*(void (**)(std::string *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, uint64_t, void *))(*(void *)a2 + 120))(&__p, a2, v6 + 8, &unk_267B96C58);
      if (sub_21695DC44((pxrInternal__aapl__pxrReserved__::VtValue *)&__p))
      {
        if ((__p.__r_.__value_.__s.__data_[8] & 4) != 0) {
          p_p = (std::string *)(*(uint64_t (**)(std::string *))((__p.__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFF8)
        }
                                                                        + 168))(&__p);
        else {
          p_p = &__p;
        }
        sub_2168D2318((void *)(v6 + 16), p_p);
      }
      else
      {
        sub_2171B03F0((pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 + 8), (uint64_t)v15);
        unint64_t v8 = (void *)(v6 + 16);
        if (v15 == (void *)(v6 + 16))
        {
          if ((v15[0] & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v15[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
        }
        else
        {
          if ((*v8 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          *unint64_t v8 = v15[0];
        }
      }
      this = sub_2168EE084((uint64_t)&__p);
    }
    *a4 = 0;
  }
  return this;
}

void sub_2171B0888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if ((a13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  __cxa_guard_abort(&qword_267B96C60);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdCoordSys::~HdCoordSys(pxrInternal__aapl__pxrReserved__::HdCoordSys *this)
{
  *(void *)this = &unk_26C77C570;
  uint64_t v1 = *((void *)this + 2);
  if ((v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::HdSprim::~HdSprim(this);
}

{
  uint64_t v1;

  *(void *)this = &unk_26C77C570;
  uint64_t v1 = *((void *)this + 2);
  if ((v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::HdSprim::~HdSprim(this);
}

{
  uint64_t v1;
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_26C77C570;
  uint64_t v1 = *((void *)this + 2);
  if ((v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::HdSprim::~HdSprim(this);

  operator delete(v2);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdCoordSys::GetInitialDirtyBitsMask(pxrInternal__aapl__pxrReserved__::HdCoordSys *this)
{
  return 3;
}

unint64_t sub_2171B0A14()
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  v0 = (char *)atomic_load((unint64_t *)&qword_267B96C68);
  if (!v0)
  {
    v0 = (char *)operator new(0x28uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0, "coordSys", 0);
    uint64_t v2 = v0 + 8;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 8, "binding", 0);
    uint64_t v3 = *(atomic_uint **)v0;
    unsigned int v15 = v3;
    if ((v3 & 7) != 0)
    {
      unint64_t v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
        unsigned int v15 = v4;
      }
    }
    uint64_t v5 = (atomic_uint *)*v2;
    uint64_t v16 = v5;
    if ((v5 & 7) != 0)
    {
      uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v16 = v6;
      }
    }
    *((void *)v0 + 2) = 0;
    *((void *)v0 + 3) = 0;
    *((void *)v0 + 4) = 0;
    uint64_t v13 = (void **)(v0 + 16);
    char v14 = 0;
    int v7 = (char *)operator new(0x10uLL);
    uint64_t v8 = 0;
    *((void *)v0 + 2) = v7;
    *((void *)v0 + 3) = v7;
    *((void *)v0 + 4) = v7 + 16;
    do
    {
      size_t v9 = (&v15)[v8];
      *(void *)&v7[v8 * 8] = v9;
      if ((v9 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *(void *)&v7[v8 * 8] &= 0xFFFFFFFFFFFFFFF8;
      }
      ++v8;
    }
    while (v8 != 2);
    *((void *)v0 + 3) = v7 + 16;
    for (uint64_t i = 1; i != -1; --i)
    {
      uint64_t v11 = (&v15)[i];
      if ((v11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    uint64_t v12 = 0;
    atomic_compare_exchange_strong(&qword_267B96C68, (unint64_t *)&v12, (unint64_t)v0);
    if (v12)
    {
      uint64_t v13 = (void **)(v0 + 16);
      sub_216889A04(&v13);
      if ((*v2 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*(void *)v0 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v0 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v0);
      return atomic_load((unint64_t *)&qword_267B96C68);
    }
  }
  return (unint64_t)v0;
}

void sub_2171B0BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  sub_216889A04(&a10);
  uint64_t v15 = 8;
  while (1)
  {
    uint64_t v16 = *(void *)(&a12 + v15);
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v15 -= 8;
    if (v15 == -8)
    {
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v12);
      _Unwind_Resume(a1);
    }
  }
}

pxrInternal__aapl__pxrReserved__::HdCoordSysSchemaTokens_StaticTokenType *sub_2171B0C7C(atomic_ullong *a1)
{
  double result = sub_2171B0CC4();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::HdCoordSysSchemaTokens_StaticTokenType::~HdCoordSysSchemaTokens_StaticTokenType(result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::HdCoordSysSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::HdCoordSysSchemaTokens_StaticTokenType *sub_2171B0CC4()
{
  v0 = (pxrInternal__aapl__pxrReserved__::HdCoordSysSchemaTokens_StaticTokenType *)operator new(0x28uLL);
  pxrInternal__aapl__pxrReserved__::HdCoordSysSchemaTokens_StaticTokenType::HdCoordSysSchemaTokens_StaticTokenType(v0);
  return v0;
}

void sub_2171B0CF4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdCoordSysSchemaTokens_StaticTokenType::~HdCoordSysSchemaTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::HdCoordSysSchemaTokens_StaticTokenType *this)
{
  uint64_t v3 = (void **)((char *)this + 16);
  sub_216889A04(&v3);
  uint64_t v2 = *((void *)this + 1);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

pxrInternal__aapl__pxrReserved__::HdCoordSysSchemaTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::HdCoordSysSchemaTokens_StaticTokenType::HdCoordSysSchemaTokens_StaticTokenType(atomic_uint **this)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v2 = (atomic_uint **)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "coordSys", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2, "name", 0);
  uint64_t v3 = *this;
  uint64_t v13 = v3;
  if ((v3 & 7) != 0)
  {
    unint64_t v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v13 = v4;
    }
  }
  uint64_t v5 = *v2;
  char v14 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      char v14 = v6;
    }
  }
  this[2] = 0;
  this[3] = 0;
  this[4] = 0;
  int v7 = (atomic_uint *)operator new(0x10uLL);
  unint64_t v8 = 0;
  this[2] = v7;
  this[3] = v7;
  this[4] = v7 + 4;
  do
  {
    size_t v9 = (&v13)[v8 / 2];
    *(void *)&v7[v8] = v9;
    if ((v9 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v7[v8] &= 0xFFFFFFFFFFFFFFF8;
    }
    v8 += 2;
  }
  while (v8 != 4);
  this[3] = v7 + 4;
  for (uint64_t i = 1; i != -1; --i)
  {
    uint64_t v11 = (&v13)[i];
    if ((v11 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return (pxrInternal__aapl__pxrReserved__::HdCoordSysSchemaTokens_StaticTokenType *)this;
}

void sub_2171B0EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  sub_216889A04(&a10);
  uint64_t v15 = 8;
  while (1)
  {
    uint64_t v16 = *(void *)(&a12 + v15);
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v15 -= 8;
    if (v15 == -8)
    {
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void pxrInternal__aapl__pxrReserved__::HdCoordSysSchema::GetName(pxrInternal__aapl__pxrReserved__::HdCoordSysSchema *this@<X0>, void *a2@<X8>)
{
  unint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdCoordSysSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCoordSysSchemaTokens);
  if (!v4) {
    unint64_t v4 = sub_2171B0C7C(&pxrInternal__aapl__pxrReserved__::HdCoordSysSchemaTokens);
  }
  uint64_t v5 = (atomic_uint *)*((void *)v4 + 1);
  int v7 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      int v7 = v6;
    }
  }
  sub_21719B418((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdCoordSysSchema::BuildRetained(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  v11[1] = *MEMORY[0x263EF8340];
  uint64_t v10 = 0;
  v11[0] = 0;
  uint64_t v9 = 0;
  if (*a1)
  {
    unint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdCoordSysSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCoordSysSchemaTokens);
    if (!v4) {
      unint64_t v4 = sub_2171B0C7C(&pxrInternal__aapl__pxrReserved__::HdCoordSysSchemaTokens);
    }
    sub_2168D2318(v11, (void *)v4 + 1);
    uint64_t v6 = *a1;
    uint64_t v5 = (std::__shared_weak_count *)a1[1];
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v6;
    uint64_t v10 = v5;
    unint64_t v7 = 1;
  }
  else
  {
    unint64_t v7 = 0;
  }
  pxrInternal__aapl__pxrReserved__::HdRetainedContainerDataSource::New(v7, v11, &v9, &v8);
  *a2 = v8;
  if (v10) {
    sub_216784EC4(v10);
  }
  if ((v11[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_2171B1114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13)
{
  if (a12) {
    sub_216784EC4(a12);
  }
  if ((a13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::HdCoordSysSchema::GetFromParent(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCoordSysSchemaTokens)) {
      sub_2171B0C7C(&pxrInternal__aapl__pxrReserved__::HdCoordSysSchemaTokens);
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v3 + 24))(&v8, v3);
    sub_2171997C0((uint64_t)&v8, &v10);
    uint64_t v6 = v10;
    uint64_t v5 = v11;
    if (v11)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_216784EC4(v5);
      unint64_t v7 = v11;
      *a2 = v6;
      a2[1] = v5;
      if (v7) {
        sub_216784EC4(v7);
      }
    }
    else
    {
      *a2 = v10;
      a2[1] = 0;
    }
    if (v9) {
      sub_216784EC4(v9);
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    *a2 = 0;
    a2[1] = 0;
  }
}

pxrInternal__aapl__pxrReserved__::HdCoordSysSchemaTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::HdCoordSysSchema::GetSchemaToken(pxrInternal__aapl__pxrReserved__::HdCoordSysSchema *this)
{
  double result = (pxrInternal__aapl__pxrReserved__::HdCoordSysSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCoordSysSchemaTokens);
  if (!result) {
    return sub_2171B0C7C(&pxrInternal__aapl__pxrReserved__::HdCoordSysSchemaTokens);
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::HdCoordSysSchema::GetDefaultLocator(pxrInternal__aapl__pxrReserved__::HdCoordSysSchema *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B96CA8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B96CA8))
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::HdCoordSysSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCoordSysSchemaTokens);
    if (!v2) {
      uint64_t v2 = sub_2171B0C7C(&pxrInternal__aapl__pxrReserved__::HdCoordSysSchemaTokens);
    }
    pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&unk_267B96C70, v2);
    __cxa_atexit((void (*)(void *))sub_217199930, &unk_267B96C70, &dword_216758000);
    __cxa_guard_release(&qword_267B96CA8);
  }
  return &unk_267B96C70;
}

void sub_2171B131C(_Unwind_Exception *a1)
{
}

void *pxrInternal__aapl__pxrReserved__::HdCoordSysSchema::Builder::SetName(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::HdCoordSysBindingSchemaTokens_StaticTokenType::~HdCoordSysBindingSchemaTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::HdCoordSysBindingSchemaTokens_StaticTokenType *this)
{
  uint64_t v2 = (void **)((char *)this + 8);
  sub_216889A04(&v2);
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

{
  void **v2;

  uint64_t v2 = (void **)((char *)this + 8);
  sub_216889A04(&v2);
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

pxrInternal__aapl__pxrReserved__::HdCoordSysBindingSchemaTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::HdCoordSysBindingSchemaTokens_StaticTokenType::HdCoordSysBindingSchemaTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::HdCoordSysBindingSchemaTokens_StaticTokenType *this)
{
  uint64_t v2 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "coordSysBinding", 0);
  uint64_t v3 = *v2;
  if ((*v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v3 &= 0xFFFFFFFFFFFFFFF8;
  }
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  uint64_t v4 = operator new(8uLL);
  *((void *)this + 1) = v4;
  *((void *)this + 2) = v4;
  void *v4 = v3;
  uint64_t v5 = v4 + 1;
  *((void *)this + 3) = v4 + 1;
  if ((v3 & 7) != 0)
  {
    if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
      *v4 &= 0xFFFFFFFFFFFFFFF8;
    }
    *((void *)this + 2) = v5;
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  else
  {
    *((void *)this + 2) = v5;
  }
  return this;
}

void sub_2171B14F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v11 = v10;
  sub_216889A04(&a9);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_2173242CC(v9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdCoordSysBindingSchema::GetCoordSysBindingNames@<X0>(pxrInternal__aapl__pxrReserved__::HdCoordSysBindingSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t result = *(void *)this;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

void pxrInternal__aapl__pxrReserved__::HdCoordSysBindingSchema::GetCoordSysBinding(pxrInternal__aapl__pxrReserved__::HdCoordSysBindingSchema *this@<X0>, atomic_uint **a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *a2;
  if (((unint64_t)*a2 & 7) != 0)
  {
    uint64_t v3 = (atomic_uint *)((unint64_t)*a2 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v3, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v4 = v3;
    }
  }
  sub_2171B15E0((uint64_t *)this, a3);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_2171B15E0(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (v3)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v3 + 24))(&v4);
    sub_2171B187C((uint64_t)&v4, a2);
    if (v5) {
      sub_216784EC4(v5);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

double pxrInternal__aapl__pxrReserved__::HdCoordSysBindingSchema::BuildRetained@<D0>(unint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, _OWORD *a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::HdRetainedContainerDataSource::New(a1, a2, a3, &v6);
  double result = *(double *)&v6;
  *a4 = v6;
  return result;
}

void pxrInternal__aapl__pxrReserved__::HdCoordSysBindingSchema::GetFromParent(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCoordSysBindingSchemaTokens)) {
      sub_2171B190C(&pxrInternal__aapl__pxrReserved__::HdCoordSysBindingSchemaTokens);
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v3 + 24))(&v8, v3);
    sub_2171997C0((uint64_t)&v8, &v10);
    uint64_t v6 = v10;
    uint64_t v5 = v11;
    if (v11)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_216784EC4(v5);
      unint64_t v7 = v11;
      *a2 = v6;
      a2[1] = v5;
      if (v7) {
        sub_216784EC4(v7);
      }
    }
    else
    {
      *a2 = v10;
      a2[1] = 0;
    }
    if (v9) {
      sub_216784EC4(v9);
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    *a2 = 0;
    a2[1] = 0;
  }
}

unint64_t pxrInternal__aapl__pxrReserved__::HdCoordSysBindingSchema::GetSchemaToken(pxrInternal__aapl__pxrReserved__::HdCoordSysBindingSchema *this)
{
  unint64_t result = atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCoordSysBindingSchemaTokens);
  if (!result) {
    return sub_2171B190C(&pxrInternal__aapl__pxrReserved__::HdCoordSysBindingSchemaTokens);
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::HdCoordSysBindingSchema::GetDefaultLocator(pxrInternal__aapl__pxrReserved__::HdCoordSysBindingSchema *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B96CE8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B96CE8))
  {
    uint64_t v2 = (const pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCoordSysBindingSchemaTokens);
    if (!v2) {
      uint64_t v2 = (const pxrInternal__aapl__pxrReserved__::TfToken *)sub_2171B190C(&pxrInternal__aapl__pxrReserved__::HdCoordSysBindingSchemaTokens);
    }
    pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&unk_267B96CB0, v2);
    __cxa_atexit((void (*)(void *))sub_217199930, &unk_267B96CB0, &dword_216758000);
    __cxa_guard_release(&qword_267B96CE8);
  }
  return &unk_267B96CB0;
}

void sub_2171B1864(_Unwind_Exception *a1)
{
}

void *sub_2171B187C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t result = *(void **)a1;
  if (result
    && (unint64_t result = __dynamic_cast(result, (const struct __class_type_info *)&unk_26C77BD10, (const struct __class_type_info *)&unk_26C77C5B0, 0)) != 0)
  {
    uint64_t v5 = *(void *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

unint64_t sub_2171B190C(atomic_ullong *a1)
{
  uint64_t v2 = sub_2171B198C();
  uint64_t v3 = v2;
  uint64_t v4 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v4, (unint64_t)v2);
  if (v4)
  {
    if (v2)
    {
      uint64_t v6 = (void **)((char *)v2 + 8);
      sub_216889A04(&v6);
      if ((*(void *)v3 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v3);
    }
    return atomic_load((unint64_t *)a1);
  }
  return (unint64_t)v3;
}

pxrInternal__aapl__pxrReserved__::HdCoordSysBindingSchemaTokens_StaticTokenType *sub_2171B198C()
{
  v0 = (pxrInternal__aapl__pxrReserved__::HdCoordSysBindingSchemaTokens_StaticTokenType *)operator new(0x20uLL);
  pxrInternal__aapl__pxrReserved__::HdCoordSysBindingSchemaTokens_StaticTokenType::HdCoordSysBindingSchemaTokens_StaticTokenType(v0);
  return v0;
}

void sub_2171B19BC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdCubeSchemaTokens_StaticTokenType::~HdCubeSchemaTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::HdCubeSchemaTokens_StaticTokenType *this)
{
  uint64_t v3 = (void **)((char *)this + 16);
  sub_216889A04(&v3);
  uint64_t v2 = *((void *)this + 1);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

pxrInternal__aapl__pxrReserved__::HdCubeSchemaTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::HdCubeSchemaTokens_StaticTokenType::HdCubeSchemaTokens_StaticTokenType(atomic_uint **this)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v2 = (atomic_uint **)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "cube", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2, "size", 0);
  uint64_t v3 = *this;
  uint64_t v13 = v3;
  if ((v3 & 7) != 0)
  {
    uint64_t v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v13 = v4;
    }
  }
  uint64_t v5 = *v2;
  char v14 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      char v14 = v6;
    }
  }
  this[2] = 0;
  this[3] = 0;
  this[4] = 0;
  unint64_t v7 = (atomic_uint *)operator new(0x10uLL);
  unint64_t v8 = 0;
  this[2] = v7;
  this[3] = v7;
  this[4] = v7 + 4;
  do
  {
    uint64_t v9 = (&v13)[v8 / 2];
    *(void *)&v7[v8] = v9;
    if ((v9 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v7[v8] &= 0xFFFFFFFFFFFFFFF8;
    }
    v8 += 2;
  }
  while (v8 != 4);
  this[3] = v7 + 4;
  for (uint64_t i = 1; i != -1; --i)
  {
    uint64_t v11 = (&v13)[i];
    if ((v11 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return (pxrInternal__aapl__pxrReserved__::HdCubeSchemaTokens_StaticTokenType *)this;
}

void sub_2171B1BAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  sub_216889A04(&a10);
  uint64_t v15 = 8;
  while (1)
  {
    uint64_t v16 = *(void *)(&a12 + v15);
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v15 -= 8;
    if (v15 == -8)
    {
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void pxrInternal__aapl__pxrReserved__::HdCubeSchema::GetSize(pxrInternal__aapl__pxrReserved__::HdCubeSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCubeSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171B2048(&pxrInternal__aapl__pxrReserved__::HdCubeSchemaTokens);
  }
  uint64_t v5 = v4[1];
  unint64_t v7 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      unint64_t v7 = v6;
    }
  }
  sub_2171A240C((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdCubeSchema::BuildRetained(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  v11[1] = *MEMORY[0x263EF8340];
  uint64_t v10 = 0;
  v11[0] = 0;
  uint64_t v9 = 0;
  if (*a1)
  {
    uint64_t v4 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCubeSchemaTokens);
    if (!v4) {
      uint64_t v4 = sub_2171B2048(&pxrInternal__aapl__pxrReserved__::HdCubeSchemaTokens);
    }
    sub_2168D2318(v11, v4 + 1);
    uint64_t v6 = *a1;
    uint64_t v5 = (std::__shared_weak_count *)a1[1];
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v6;
    uint64_t v10 = v5;
    unint64_t v7 = 1;
  }
  else
  {
    unint64_t v7 = 0;
  }
  pxrInternal__aapl__pxrReserved__::HdRetainedContainerDataSource::New(v7, v11, &v9, &v8);
  *a2 = v8;
  if (v10) {
    sub_216784EC4(v10);
  }
  if ((v11[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_2171B1DDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13)
{
  if (a12) {
    sub_216784EC4(a12);
  }
  if ((a13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::HdCubeSchema::GetFromParent(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCubeSchemaTokens)) {
      sub_2171B2048(&pxrInternal__aapl__pxrReserved__::HdCubeSchemaTokens);
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v3 + 24))(&v8, v3);
    sub_2171997C0((uint64_t)&v8, &v10);
    uint64_t v6 = v10;
    uint64_t v5 = v11;
    if (v11)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_216784EC4(v5);
      unint64_t v7 = v11;
      *a2 = v6;
      a2[1] = v5;
      if (v7) {
        sub_216784EC4(v7);
      }
    }
    else
    {
      *a2 = v10;
      a2[1] = 0;
    }
    if (v9) {
      sub_216784EC4(v9);
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    *a2 = 0;
    a2[1] = 0;
  }
}

atomic_uint **pxrInternal__aapl__pxrReserved__::HdCubeSchema::GetSchemaToken(pxrInternal__aapl__pxrReserved__::HdCubeSchema *this)
{
  unint64_t result = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCubeSchemaTokens);
  if (!result) {
    return sub_2171B2048(&pxrInternal__aapl__pxrReserved__::HdCubeSchemaTokens);
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::HdCubeSchema::GetDefaultLocator(pxrInternal__aapl__pxrReserved__::HdCubeSchema *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B96D28, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B96D28))
  {
    uint64_t v2 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCubeSchemaTokens);
    if (!v2) {
      uint64_t v2 = sub_2171B2048(&pxrInternal__aapl__pxrReserved__::HdCubeSchemaTokens);
    }
    pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&unk_267B96CF0, (const pxrInternal__aapl__pxrReserved__::TfToken *)v2);
    __cxa_atexit((void (*)(void *))sub_217199930, &unk_267B96CF0, &dword_216758000);
    __cxa_guard_release(&qword_267B96D28);
  }
  return &unk_267B96CF0;
}

void sub_2171B1FE4(_Unwind_Exception *a1)
{
}

void *pxrInternal__aapl__pxrReserved__::HdCubeSchema::Builder::SetSize(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

atomic_uint **sub_2171B2048(atomic_ullong *a1)
{
  unint64_t result = sub_2171B2090();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::HdCubeSchemaTokens_StaticTokenType::~HdCubeSchemaTokens_StaticTokenType((pxrInternal__aapl__pxrReserved__::HdCubeSchemaTokens_StaticTokenType *)result);
      operator delete(v4);
    }
    return (atomic_uint **)atomic_load((unint64_t *)a1);
  }
  return result;
}

atomic_uint **sub_2171B2090()
{
  v0 = (atomic_uint **)operator new(0x28uLL);
  pxrInternal__aapl__pxrReserved__::HdCubeSchemaTokens_StaticTokenType::HdCubeSchemaTokens_StaticTokenType(v0);
  return v0;
}

void sub_2171B20C0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens_StaticTokenType::~HdCylinderSchemaTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens_StaticTokenType *this)
{
  uint64_t v10 = (void **)((char *)this + 72);
  sub_216889A04(&v10);
  uint64_t v2 = *((void *)this + 8);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 7);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *((void *)this + 6);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *((void *)this + 5);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v6 = *((void *)this + 4);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v7 = *((void *)this + 3);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v8 = *((void *)this + 2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v9 = *((void *)this + 1);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens_StaticTokenType::HdCylinderSchemaTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens_StaticTokenType *this)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v2 = (uint64_t *)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "cylinder", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2, "height", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 16, "radius", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 24, "radiusTop", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 32, "radiusBottom", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 40, "axis", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 48, "X", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 56, "Y", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 64, "Z", 0);
  uint64_t v3 = *(void *)this;
  uint64_t v18 = v3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v18 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v4 = *v2;
  uint64_t v19 = v4;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v19 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v5 = *((void *)this + 2);
  uint64_t v20 = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v20 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v6 = *((void *)this + 3);
  uint64_t v21 = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v21 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = *((void *)this + 4);
  uint64_t v22 = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v22 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v8 = *((void *)this + 5);
  uint64_t v23 = v8;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v23 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v9 = *((void *)this + 6);
  uint64_t v24 = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v24 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v10 = *((void *)this + 7);
  uint64_t v25 = v10;
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v25 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v11 = *((void *)this + 8);
  uint64_t v26 = v11;
  if ((v11 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v26 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  uint64_t v12 = (char *)operator new(0x48uLL);
  uint64_t v13 = 0;
  *((void *)this + 9) = v12;
  *((void *)this + 10) = v12;
  *((void *)this + 11) = v12 + 72;
  do
  {
    uint64_t v14 = *(uint64_t *)((char *)&v18 + v13);
    *(void *)&v12[v13] = v14;
    if ((v14 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v12[v13] &= 0xFFFFFFFFFFFFFFF8;
    }
    v13 += 8;
  }
  while (v13 != 72);
  *((void *)this + 10) = v12 + 72;
  for (uint64_t i = 64; i != -8; i -= 8)
  {
    uint64_t v16 = *(uint64_t *)((char *)&v18 + i);
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return this;
}

void sub_2171B255C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  sub_216889A04(&a9);
  uint64_t v21 = 64;
  while (1)
  {
    uint64_t v22 = *(void *)(&a11 + v21);
    if ((v22 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v21 -= 8;
    if (v21 == -8)
    {
      if ((*v19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void pxrInternal__aapl__pxrReserved__::HdCylinderSchema::GetHeight(pxrInternal__aapl__pxrReserved__::HdCylinderSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171B3384(&pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens);
  }
  uint64_t v5 = (atomic_uint *)*((void *)v4 + 1);
  uint64_t v7 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v7 = v6;
    }
  }
  sub_2171A240C((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdCylinderSchema::GetRadius(pxrInternal__aapl__pxrReserved__::HdCylinderSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171B3384(&pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens);
  }
  uint64_t v5 = (atomic_uint *)*((void *)v4 + 2);
  uint64_t v7 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v7 = v6;
    }
  }
  sub_2171A240C((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdCylinderSchema::GetRadiusTop(pxrInternal__aapl__pxrReserved__::HdCylinderSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171B3384(&pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens);
  }
  uint64_t v5 = (atomic_uint *)*((void *)v4 + 3);
  uint64_t v7 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v7 = v6;
    }
  }
  sub_2171A240C((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdCylinderSchema::GetRadiusBottom(pxrInternal__aapl__pxrReserved__::HdCylinderSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171B3384(&pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens);
  }
  uint64_t v5 = (atomic_uint *)*((void *)v4 + 4);
  uint64_t v7 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v7 = v6;
    }
  }
  sub_2171A240C((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdCylinderSchema::GetAxis(pxrInternal__aapl__pxrReserved__::HdCylinderSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171B3384(&pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens);
  }
  uint64_t v5 = (atomic_uint *)*((void *)v4 + 5);
  uint64_t v7 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v7 = v6;
    }
  }
  sub_21719B418((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdCylinderSchema::BuildRetained(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, _OWORD *a6@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  uint64_t v48 = 0;
  memset(v47, 0, sizeof(v47));
  memset(v46, 0, sizeof(v46));
  if (*a1)
  {
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens);
    if (!v12) {
      uint64_t v12 = sub_2171B3384(&pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens);
    }
    sub_2168D2318(v47, (void *)v12 + 1);
    uint64_t v14 = *a1;
    uint64_t v13 = a1[1];
    if (v13) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v15 = (std::__shared_weak_count *)*((void *)&v46[0] + 1);
    *(void *)&v46[0] = v14;
    *((void *)&v46[0] + 1) = v13;
    if (v15) {
      sub_216784EC4(v15);
    }
    uint64_t v16 = 1;
  }
  else
  {
    uint64_t v16 = 0;
  }
  if (*a2)
  {
    uint64_t v17 = (pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens);
    if (!v17) {
      uint64_t v17 = sub_2171B3384(&pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens);
    }
    sub_2168D2318((void *)((unint64_t)v47 | (8 * v16)), (void *)v17 + 2);
    uint64_t v18 = v16 + 1;
    uint64_t v19 = &v46[v16];
    uint64_t v21 = *a2;
    uint64_t v20 = a2[1];
    if (v20) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v22 = (std::__shared_weak_count *)v19[1];
    *uint64_t v19 = v21;
    v19[1] = v20;
    if (v22) {
      sub_216784EC4(v22);
    }
  }
  else
  {
    uint64_t v18 = v16;
  }
  if (*a3)
  {
    uint64_t v23 = (pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens);
    if (!v23) {
      uint64_t v23 = sub_2171B3384(&pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens);
    }
    sub_2168D2318((void *)v47 + v18, (void *)v23 + 3);
    unint64_t v24 = v18 + 1;
    uint64_t v25 = &v46[v18];
    uint64_t v27 = *a3;
    uint64_t v26 = a3[1];
    if (v26) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v28 = (std::__shared_weak_count *)v25[1];
    *uint64_t v25 = v27;
    v25[1] = v26;
    if (v28) {
      sub_216784EC4(v28);
    }
  }
  else
  {
    unint64_t v24 = v18;
  }
  if (*a4)
  {
    long long v29 = (pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens);
    if (!v29) {
      long long v29 = sub_2171B3384(&pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens);
    }
    sub_2168D2318((void *)v47 + v24, (void *)v29 + 4);
    unint64_t v30 = v24 + 1;
    v31 = &v46[v24];
    uint64_t v33 = *a4;
    uint64_t v32 = a4[1];
    if (v32) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v32 + 8), 1uLL, memory_order_relaxed);
    }
    char v34 = (std::__shared_weak_count *)v31[1];
    void *v31 = v33;
    v31[1] = v32;
    if (v34) {
      sub_216784EC4(v34);
    }
  }
  else
  {
    unint64_t v30 = v24;
  }
  if (*a5)
  {
    uint64_t v35 = (pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens);
    if (!v35) {
      uint64_t v35 = sub_2171B3384(&pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens);
    }
    sub_2168D2318((void *)v47 + v30, (void *)v35 + 5);
    unint64_t v36 = v30 + 1;
    long long v37 = &v46[v30];
    uint64_t v39 = *a5;
    uint64_t v38 = a5[1];
    if (v38) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v38 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v40 = (std::__shared_weak_count *)v37[1];
    void *v37 = v39;
    v37[1] = v38;
    if (v40) {
      sub_216784EC4(v40);
    }
  }
  else
  {
    unint64_t v36 = v30;
  }
  pxrInternal__aapl__pxrReserved__::HdRetainedContainerDataSource::New(v36, (uint64_t *)v47, (uint64_t *)v46, &v45);
  *a6 = v45;
  for (uint64_t i = 72; i != -8; i -= 16)
  {
    unint64_t v42 = *(std::__shared_weak_count **)((char *)v46 + i);
    if (v42) {
      sub_216784EC4(v42);
    }
  }
  for (uint64_t j = 32; j != -8; j -= 8)
  {
    uint64_t v44 = *(void *)((char *)v47 + j);
    if ((v44 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v44 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
}

void sub_2171B2D40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v22 = 72;
  while (1)
  {
    uint64_t v23 = *(std::__shared_weak_count **)(&a11 + v22);
    if (v23) {
      sub_216784EC4(v23);
    }
    v22 -= 16;
    if (v22 == -8)
    {
      uint64_t v24 = 32;
      while (1)
      {
        uint64_t v25 = *(void *)(&a21 + v24);
        if ((v25 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        v24 -= 8;
        if (v24 == -8) {
          _Unwind_Resume(exception_object);
        }
      }
    }
  }
}

void pxrInternal__aapl__pxrReserved__::HdCylinderSchema::GetFromParent(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens)) {
      sub_2171B3384(&pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens);
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v3 + 24))(&v8, v3);
    sub_2171997C0((uint64_t)&v8, &v10);
    uint64_t v6 = v10;
    uint64_t v5 = v11;
    if (v11)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_216784EC4(v5);
      uint64_t v7 = v11;
      *a2 = v6;
      a2[1] = v5;
      if (v7) {
        sub_216784EC4(v7);
      }
    }
    else
    {
      *a2 = v10;
      a2[1] = 0;
    }
    if (v9) {
      sub_216784EC4(v9);
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    *a2 = 0;
    a2[1] = 0;
  }
}

pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::HdCylinderSchema::GetSchemaToken(pxrInternal__aapl__pxrReserved__::HdCylinderSchema *this)
{
  unint64_t result = (pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens);
  if (!result) {
    return sub_2171B3384(&pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens);
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::HdCylinderSchema::GetDefaultLocator(pxrInternal__aapl__pxrReserved__::HdCylinderSchema *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B96D68, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B96D68))
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens);
    if (!v2) {
      uint64_t v2 = sub_2171B3384(&pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens);
    }
    pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&unk_267B96D30, v2);
    __cxa_atexit((void (*)(void *))sub_217199930, &unk_267B96D30, &dword_216758000);
    __cxa_guard_release(&qword_267B96D68);
  }
  return &unk_267B96D30;
}

void sub_2171B2F70(_Unwind_Exception *a1)
{
}

void pxrInternal__aapl__pxrReserved__::HdCylinderSchema::BuildAxisDataSource(pxrInternal__aapl__pxrReserved__::HdCylinderSchema *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens);
  if (!v5) {
    uint64_t v5 = sub_2171B3384(&pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens);
  }
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) == (*((void *)v5 + 6) & 0xFFFFFFFFFFFFFFF8))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B96D80, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_267B96D80))
    {
      sub_2171A3CE4((uint64_t *)this, &qword_267B96D70);
      __cxa_atexit((void (*)(void *))sub_2171A3D6C, &qword_267B96D70, &dword_216758000);
      __cxa_guard_release(&qword_267B96D80);
    }
    uint64_t v8 = &qword_267B96D70;
  }
  else
  {
    uint64_t v6 = (pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens);
    if (!v6) {
      uint64_t v6 = sub_2171B3384(&pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens);
    }
    if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) == (*((void *)v6 + 7) & 0xFFFFFFFFFFFFFFF8))
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B96D98, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_267B96D98))
      {
        sub_2171A3CE4((uint64_t *)this, &qword_267B96D88);
        __cxa_atexit((void (*)(void *))sub_2171A3D6C, &qword_267B96D88, &dword_216758000);
        __cxa_guard_release(&qword_267B96D98);
      }
      uint64_t v8 = &qword_267B96D88;
    }
    else
    {
      uint64_t v7 = (pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens);
      if (!v7) {
        uint64_t v7 = sub_2171B3384(&pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens);
      }
      if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) != (*((void *)v7 + 8) & 0xFFFFFFFFFFFFFFF8))
      {
        sub_2171A3CE4((uint64_t *)this, &v11);
        *(_OWORD *)a2 = v11;
        return;
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B96DB0, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_267B96DB0))
      {
        sub_2171A3CE4((uint64_t *)this, &qword_267B96DA0);
        __cxa_atexit((void (*)(void *))sub_2171A3D6C, &qword_267B96DA0, &dword_216758000);
        __cxa_guard_release(&qword_267B96DB0);
      }
      uint64_t v8 = &qword_267B96DA0;
    }
  }
  uint64_t v10 = *v8;
  uint64_t v9 = v8[1];
  *(void *)a2 = v10;
  *(void *)(a2 + 8) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
}

void sub_2171B31D0(_Unwind_Exception *a1)
{
}

void *pxrInternal__aapl__pxrReserved__::HdCylinderSchema::Builder::SetHeight(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdCylinderSchema::Builder::SetRadius(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 24);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdCylinderSchema::Builder::SetRadiusTop(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 40);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdCylinderSchema::Builder::SetRadiusBottom(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 56);
  *(void *)(a1 + 48) = v4;
  *(void *)(a1 + 56) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdCylinderSchema::Builder::SetAxis(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = v4;
  *(void *)(a1 + 72) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::HdCylinderSchema::Builder::Build(pxrInternal__aapl__pxrReserved__::HdCylinderSchema::Builder *this@<X0>, _OWORD *a2@<X8>)
{
}

pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens_StaticTokenType *sub_2171B3384(atomic_ullong *a1)
{
  unint64_t result = sub_2171B33CC();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens_StaticTokenType::~HdCylinderSchemaTokens_StaticTokenType(result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens_StaticTokenType *sub_2171B33CC()
{
  v0 = (pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens_StaticTokenType *)operator new(0x60uLL);
  pxrInternal__aapl__pxrReserved__::HdCylinderSchemaTokens_StaticTokenType::HdCylinderSchemaTokens_StaticTokenType(v0);
  return v0;
}

void sub_2171B33FC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdContainerDataSource::Get(pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *this@<X1>, void *a2@<X0>, long long *a3@<X8>)
{
  uint64_t v3 = a3;
  if (!*a2)
  {
    *(void *)a3 = 0;
    *((void *)a3 + 1) = 0;
    return;
  }
  uint64_t ElementCount = pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::GetElementCount(this);
  if (!ElementCount)
  {
    uint64_t v17 = a2[1];
    *(void *)uint64_t v3 = *a2;
    *((void *)v3 + 1) = v17;
    if (v17) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
    }
    return;
  }
  uint64_t v7 = ElementCount;
  long long v20 = 0uLL;
  uint64_t v8 = *a2;
  uint64_t v9 = (std::__shared_weak_count *)a2[1];
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v10 = 0;
  unint64_t v11 = ElementCount - 1;
  while (1)
  {
    uint64_t Element = pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::GetElement(this, v10);
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(*(void *)v8 + 24))(&v19, v8, Element);
    long long v13 = v19;
    long long v19 = 0uLL;
    uint64_t v14 = (std::__shared_weak_count *)*((void *)&v20 + 1);
    long long v20 = v13;
    if (v14) {
      break;
    }
    uint64_t v15 = v13;
    if (!(void)v13) {
      goto LABEL_24;
    }
LABEL_12:
    if (v10 >= v11)
    {
      uint64_t v16 = v9;
    }
    else
    {
      sub_2171997C0((uint64_t)&v20, &v19);
      uint64_t v16 = (std::__shared_weak_count *)*((void *)&v19 + 1);
      uint64_t v8 = v19;
      long long v19 = 0uLL;
      if (v9)
      {
        sub_216784EC4(v9);
        if (*((void *)&v19 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v19 + 1));
        }
      }
      if (!v8) {
        goto LABEL_26;
      }
    }
    ++v10;
    uint64_t v9 = v16;
    if (v7 == v10)
    {
      uint64_t v15 = v20;
      goto LABEL_25;
    }
  }
  sub_216784EC4(v14);
  if (*((void *)&v19 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v19 + 1));
  }
  uint64_t v15 = v20;
  if ((void)v20) {
    goto LABEL_12;
  }
LABEL_24:
  uint64_t v16 = v9;
LABEL_25:
  uint64_t v18 = *((void *)&v20 + 1);
  *(void *)uint64_t v3 = v15;
  *((void *)v3 + 1) = v18;
  uint64_t v3 = &v20;
LABEL_26:
  *(void *)uint64_t v3 = 0;
  *((void *)v3 + 1) = 0;
  if (v16) {
    sub_216784EC4(v16);
  }
  if (*((void *)&v20 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v20 + 1));
  }
}

void sub_2171B35B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (v12) {
    sub_216784EC4(v12);
  }
  if (a12) {
    sub_216784EC4(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdGetMergedContributingSampleTimesForInterval(uint64_t a1, uint64_t *a2, uint64_t a3, float a4, float a5)
{
  if (a1)
  {
    uint64_t v9 = a1;
    char v10 = 0;
    while (1)
    {
      uint64_t v11 = *a2;
      if (!*a2) {
        goto LABEL_13;
      }
      std::string __p = 0;
      uint64_t v23 = 0;
      uint64_t v24 = 0;
      char v12 = (*(uint64_t (**)(uint64_t, void **, float, float))(*(void *)v11 + 24))(v11, &__p, a4, a5);
      long long v13 = (float *)__p;
      if ((v12 & 1) == 0) {
        goto LABEL_11;
      }
      uint64_t v14 = v23;
      if (__p == v23 || a3 == 0) {
        break;
      }
      uint64_t v16 = *(float **)a3;
      uint64_t v17 = *(float **)(a3 + 8);
      if (*(float **)a3 == v17)
      {
        if (v16)
        {
          *(void *)(a3 + 8) = v16;
          operator delete(v16);
          *(void *)a3 = 0;
          *(void *)(a3 + 8) = 0;
          *(void *)(a3 + 16) = 0;
          long long v13 = (float *)__p;
          uint64_t v14 = v23;
        }
        *(void *)a3 = v13;
        *(void *)(a3 + 8) = v14;
        *(void *)(a3 + 16) = v24;
        char v10 = 1;
        goto LABEL_13;
      }
      long long v20 = 0uLL;
      uint64_t v21 = 0;
      sub_2171B3E98(v16, v17, (float *)__p, v23, (uint64_t)&v20, &v25);
      uint64_t v18 = *(float **)a3;
      if (*(void *)a3)
      {
        *(void *)(a3 + 8) = v18;
        operator delete(v18);
        *(void *)a3 = 0;
        *(void *)(a3 + 8) = 0;
        *(void *)(a3 + 16) = 0;
      }
      *(_OWORD *)a3 = v20;
      long long v13 = (float *)__p;
      *(void *)(a3 + 16) = v21;
      char v10 = 1;
      if (v13)
      {
LABEL_12:
        uint64_t v23 = v13;
        operator delete(v13);
      }
LABEL_13:
      a2 += 2;
      if (!--v9) {
        return v10 & 1;
      }
    }
    v10 |= __p != v23;
LABEL_11:
    if (__p) {
      goto LABEL_12;
    }
    goto LABEL_13;
  }
  char v10 = 0;
  return v10 & 1;
}

void sub_2171B3738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::HdDebugPrintDataSource(void *a1, void *a2, int a3)
{
  _OWORD v47[2] = *MEMORY[0x263EF8340];
  sub_2171997C0((uint64_t)a2, &v45);
  if (v45)
  {
    (*(void (**)(void **__return_ptr))(*(void *)v45 + 16))(&__b);
    unint64_t v6 = 126 - 2 * __clz((v43 - (unsigned char *)__b) >> 3);
    if (v43 == __b) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = v6;
    }
    sub_2171B40CC((uint64_t)__b, (uint64_t *)v43, (uint64_t)&v40, v7, 1);
    uint64_t v8 = (char *)__b;
    uint64_t v9 = v43;
    if (__b != v43)
    {
      do
      {
        (*(void (**)(uint64_t *__return_ptr))(*(void *)v45 + 24))(&v40);
        if (v40)
        {
          sub_2167794AC(&__p, a3, 9);
          if ((v39 & 0x80u) == 0) {
            p_p = &__p;
          }
          else {
            p_p = __p;
          }
          if ((v39 & 0x80u) == 0) {
            uint64_t v11 = v39;
          }
          else {
            uint64_t v11 = (uint64_t)v38;
          }
          char v12 = sub_216779180(a1, (uint64_t)p_p, v11);
          long long v13 = sub_216779180(v12, (uint64_t)"[", 1);
          uint64_t v14 = pxrInternal__aapl__pxrReserved__::operator<<(v13, v8);
          sub_216779180(v14, (uint64_t)"]\n", 2);
          if ((char)v39 < 0) {
            operator delete(__p);
          }
          uint64_t v35 = v40;
          unint64_t v36 = v41;
          if (v41) {
            atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          pxrInternal__aapl__pxrReserved__::HdDebugPrintDataSource(a1, &v35, (a3 + 1));
          if (v36) {
            sub_216784EC4(v36);
          }
        }
        if (v41) {
          sub_216784EC4(v41);
        }
        v8 += 8;
      }
      while (v8 != v9);
    }
    std::string __p = &__b;
    sub_216889A04((void ***)&__p);
  }
  else
  {
    sub_2171B3D04((uint64_t)a2, &__p);
    if (__p)
    {
      uint64_t v15 = (*(uint64_t (**)(void *))(*(void *)__p + 16))(__p);
      if (v15)
      {
        uint64_t v16 = 0;
        size_t v17 = a3;
        uint64_t v18 = (a3 + 1);
        do
        {
          sub_2167794AC(&__b, v17, 9);
          if ((v44 & 0x80u) == 0) {
            p_b = &__b;
          }
          else {
            p_b = __b;
          }
          if ((v44 & 0x80u) == 0) {
            uint64_t v20 = v44;
          }
          else {
            uint64_t v20 = (uint64_t)v43;
          }
          uint64_t v21 = sub_216779180(a1, (uint64_t)p_b, v20);
          sub_216779180(v21, (uint64_t)"[", 1);
          uint64_t v22 = (void *)std::ostream::operator<<();
          sub_216779180(v22, (uint64_t)"]\n", 2);
          if ((char)v44 < 0) {
            operator delete(__b);
          }
          (*(void (**)(uint64_t *__return_ptr))(*(void *)__p + 24))(&v33);
          pxrInternal__aapl__pxrReserved__::HdDebugPrintDataSource(a1, &v33, v18);
          if (v34) {
            sub_216784EC4(v34);
          }
          ++v16;
        }
        while (v15 != v16);
      }
    }
    else
    {
      sub_2171B3D94((uint64_t)a2, &v40);
      if (v40)
      {
        sub_2167794AC(&__b, a3, 9);
        if ((v44 & 0x80u) == 0) {
          uint64_t v23 = &__b;
        }
        else {
          uint64_t v23 = __b;
        }
        if ((v44 & 0x80u) == 0) {
          uint64_t v24 = v44;
        }
        else {
          uint64_t v24 = (uint64_t)v43;
        }
        uint64_t v25 = sub_216779180(a1, (uint64_t)v23, v24);
        (*(void (**)(void *__return_ptr, double))(*(void *)v40 + 16))(v47, 0.0);
        uint64_t v26 = (void *)pxrInternal__aapl__pxrReserved__::operator<<((uint64_t)v25, (uint64_t)v47);
        sub_216779180(v26, (uint64_t)"\n", 1);
        sub_2168EE084((uint64_t)v47);
      }
      else if (*a2)
      {
        sub_2167794AC(&__b, a3, 9);
        if ((v44 & 0x80u) == 0) {
          uint64_t v27 = &__b;
        }
        else {
          uint64_t v27 = __b;
        }
        if ((v44 & 0x80u) == 0) {
          uint64_t v28 = v44;
        }
        else {
          uint64_t v28 = (uint64_t)v43;
        }
        long long v29 = sub_216779180(a1, (uint64_t)v27, v28);
        sub_216779180(v29, (uint64_t)"UNKNOWN\n", 8);
      }
      else
      {
        sub_2167794AC(&__b, a3, 9);
        if ((v44 & 0x80u) == 0) {
          unint64_t v30 = &__b;
        }
        else {
          unint64_t v30 = __b;
        }
        if ((v44 & 0x80u) == 0) {
          uint64_t v31 = v44;
        }
        else {
          uint64_t v31 = (uint64_t)v43;
        }
        uint64_t v32 = sub_216779180(a1, (uint64_t)v30, v31);
        sub_216779180(v32, (uint64_t)"NULL\n", 5);
      }
      if ((char)v44 < 0) {
        operator delete(__b);
      }
      if (v41) {
        sub_216784EC4(v41);
      }
    }
    if (v38) {
      sub_216784EC4(v38);
    }
  }
  if (v46) {
    sub_216784EC4(v46);
  }
}

void sub_2171B3BFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, std::__shared_weak_count *a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,std::__shared_weak_count *a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,std::__shared_weak_count *a29)
{
  if (a21) {
    sub_216784EC4(a21);
  }
  if (a15) {
    sub_216784EC4(a15);
  }
  if (a29) {
    sub_216784EC4(a29);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2171B3D04@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t result = *(void **)a1;
  if (result
    && (unint64_t result = __dynamic_cast(result, (const struct __class_type_info *)&unk_26C77BD10, (const struct __class_type_info *)&unk_26C77C5C8, 0)) != 0)
  {
    uint64_t v5 = *(void *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void *sub_2171B3D94@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  unint64_t result = *(void **)a1;
  if (result
    && (unint64_t result = __dynamic_cast(result, (const struct __class_type_info *)&unk_26C77BD10, (const struct __class_type_info *)&unk_26C77BD88, 0)) != 0)
  {
    uint64_t v5 = *(void *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::HdDebugPrintDataSource(uint64_t *a1, int a2)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[1];
  uint64_t v3 = *a1;
  uint64_t v4 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  pxrInternal__aapl__pxrReserved__::HdDebugPrintDataSource(MEMORY[0x263F8C100], &v3, a2);
  if (v4) {
    sub_216784EC4(v4);
  }
}

void sub_2171B3E80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  _Unwind_Resume(exception_object);
}

float *sub_2171B3E98@<X0>(float *a1@<X0>, float *a2@<X1>, float *a3@<X2>, float *a4@<X3>, uint64_t a5@<X4>, float **a6@<X8>)
{
  uint64_t v8 = a1;
  uint64_t v13 = a5;
  if (a1 == a2)
  {
LABEL_8:
    unint64_t result = (float *)sub_2171B4068(a3, a4, a5);
    a4 = result;
  }
  else
  {
    while (a3 != a4)
    {
      if (*a3 >= *v8)
      {
        a3 += *v8 >= *a3;
        sub_2171B3F78(&v13, v8++);
      }
      else
      {
        sub_2171B3F78(&v13, a3++);
      }
      if (v8 == a2)
      {
        a5 = v13;
        uint64_t v8 = a2;
        goto LABEL_8;
      }
    }
    unint64_t result = (float *)sub_2171B4068(v8, a2, v13);
    uint64_t v8 = result;
  }
  *a6 = v8;
  a6[1] = a4;
  a6[2] = v12;
  return result;
}

uint64_t *sub_2171B3F78(uint64_t *a1, _DWORD *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(_DWORD **)(*a1 + 8);
  unint64_t v6 = (void *)(*a1 + 16);
  if ((unint64_t)v5 >= *v6)
  {
    uint64_t v8 = *(_DWORD **)v4;
    uint64_t v9 = ((uint64_t)v5 - *(void *)v4) >> 2;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62) {
      sub_21677CB10();
    }
    uint64_t v11 = *v6 - (void)v8;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      uint64_t v13 = (char *)sub_21677EA28((uint64_t)v6, v12);
      uint64_t v8 = *(_DWORD **)v4;
      uint64_t v5 = *(_DWORD **)(v4 + 8);
    }
    else
    {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[4 * v9];
    uint64_t v15 = &v13[4 * v12];
    *(_DWORD *)uint64_t v14 = *a2;
    uint64_t v7 = v14 + 4;
    while (v5 != v8)
    {
      int v16 = *--v5;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(void *)uint64_t v4 = v14;
    *(void *)(v4 + 8) = v7;
    *(void *)(v4 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    _DWORD *v5 = *a2;
    uint64_t v7 = v5 + 1;
  }
  *(void *)(v4 + 8) = v7;
  return a1;
}

_DWORD *sub_2171B4068(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v6 = a3;
  if (a1 == a2) {
    return a1;
  }
  uint64_t v4 = a2;
  do
    sub_2171B3F78(&v6, v3++);
  while (v3 != v4);
  return v4;
}

uint64_t sub_2171B40CC(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v10 = (uint64_t *)result;
LABEL_2:
  uint64_t v11 = a2 - 1;
  unint64_t v12 = v10;
LABEL_3:
  uint64_t v13 = 1 - a4;
  while (1)
  {
    unint64_t v10 = v12;
    uint64_t v14 = v13;
    uint64_t v15 = (char *)a2 - (char *)v12;
    unint64_t v16 = a2 - v12;
    if (!(!v6 & v5))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          unint64_t result = sub_2168BE1F8(a3, a2 - 1, v12);
          if (result)
          {
            uint64_t v23 = *v12;
            uint64_t *v12 = *v11;
            *uint64_t v11 = v23;
          }
          break;
        case 3uLL:
          unint64_t result = sub_2169E14C0(v12, v12 + 1, a2 - 1, a3);
          break;
        case 4uLL:
          unint64_t result = sub_2169E1B20(v12, v12 + 1, v12 + 2, a2 - 1, a3);
          break;
        case 5uLL:
          unint64_t result = sub_2169E1BD4(v12, v12 + 1, v12 + 2, v12 + 3, a2 - 1, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v15 <= 191) {
      break;
    }
    if (v14 == 1)
    {
      if (v12 != a2)
      {
        return (uint64_t)sub_2171B4CF8(v12, a2, a2, a3);
      }
      return result;
    }
    unint64_t v17 = v16 >> 1;
    uint64_t v18 = &v12[v16 >> 1];
    if ((unint64_t)v15 >= 0x401)
    {
      sub_2169E14C0(v12, &v12[v16 >> 1], a2 - 1, a3);
      sub_2169E14C0(v12 + 1, v18 - 1, a2 - 2, a3);
      sub_2169E14C0(v12 + 2, &v12[v17 + 1], a2 - 3, a3);
      sub_2169E14C0(v18 - 1, v18, &v12[v17 + 1], a3);
      uint64_t v19 = *v12;
      uint64_t *v12 = *v18;
      *uint64_t v18 = v19;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      sub_2169E14C0(&v12[v16 >> 1], v12, a2 - 1, a3);
      if (a5) {
        goto LABEL_14;
      }
    }
    if ((sub_2168BE1F8(a3, v12 - 1, v12) & 1) == 0)
    {
      unint64_t result = (uint64_t)sub_2171B470C(v12, a2, a3);
      unint64_t v12 = (uint64_t *)result;
      goto LABEL_19;
    }
LABEL_14:
    uint64_t v20 = sub_2171B48C4(v12, a2, a3);
    if ((v21 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v22 = sub_2171B4A84(v12, v20, a3);
    unint64_t v12 = v20 + 1;
    unint64_t result = sub_2171B4A84(v20 + 1, a2, a3);
    if (result)
    {
      a4 = -v14;
      a2 = v20;
      if (v22) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v13 = v14 + 1;
    if (!v22)
    {
LABEL_17:
      unint64_t result = sub_2171B40CC(v10, v20, a3, -v14, a5 & 1);
      unint64_t v12 = v20 + 1;
LABEL_19:
      a5 = 0;
      a4 = -v14;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return sub_2171B4494((uint64_t)v12, a2, a3);
  }
  else
  {
    return sub_2171B45E8((uint64_t)v12, a2, a3);
  }
}

uint64_t sub_2171B4494(uint64_t result, uint64_t *a2, uint64_t a3)
{
  if ((uint64_t *)result != a2)
  {
    uint64_t v4 = (uint64_t *)result;
    char v5 = (uint64_t *)(result + 8);
    if ((uint64_t *)(result + 8) != a2)
    {
      uint64_t v7 = 0;
      uint64_t v8 = (uint64_t *)result;
      do
      {
        uint64_t v9 = v8;
        uint64_t v8 = v5;
        unint64_t result = sub_2168BE1F8(a3, v5, v9);
        if (result)
        {
          uint64_t v16 = *v8;
          *uint64_t v8 = 0;
          uint64_t v10 = v7;
          while (1)
          {
            uint64_t v11 = (uint64_t *)((char *)v4 + v10);
            uint64_t v12 = *(uint64_t *)((char *)v4 + v10 + 8);
            if ((v12 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            uint64_t v13 = *v11;
            *uint64_t v11 = 0;
            v11[1] = v13;
            if (!v10) {
              break;
            }
            unint64_t result = sub_2168BE1F8(a3, &v16, (uint64_t *)((char *)v4 + v10 - 8));
            v10 -= 8;
            if ((result & 1) == 0)
            {
              uint64_t v14 = (uint64_t *)((char *)v4 + v10 + 8);
              goto LABEL_12;
            }
          }
          uint64_t v14 = v4;
LABEL_12:
          if (&v16 == v14)
          {
            uint64_t v15 = v16;
          }
          else
          {
            if ((*v14 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(*v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            uint64_t v15 = 0;
            *uint64_t v14 = v16;
            uint64_t v16 = 0;
          }
          if ((v15 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
        }
        char v5 = v8 + 1;
        v7 += 8;
      }
      while (v8 + 1 != a2);
    }
  }
  return result;
}

uint64_t sub_2171B45E8(uint64_t result, uint64_t *a2, uint64_t a3)
{
  if ((uint64_t *)result != a2)
  {
    uint64_t v4 = (uint64_t *)result;
    for (uint64_t i = (uint64_t *)(result + 8); v4 + 1 != a2; uint64_t i = v4 + 1)
    {
      uint64_t v7 = v4;
      uint64_t v4 = i;
      unint64_t result = sub_2168BE1F8(a3, i, v7);
      if (result)
      {
        uint64_t v11 = *v4;
        uint64_t *v4 = 0;
        uint64_t v8 = v4;
        do
        {
          if ((*v8 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          uint64_t v9 = *(v8 - 1);
          *(v8 - 1) = 0;
          *uint64_t v8 = v9;
          unint64_t result = sub_2168BE1F8(a3, &v11, v8 - 2);
          --v8;
        }
        while ((result & 1) != 0);
        if (v8 == &v11)
        {
          uint64_t v10 = v11;
        }
        else
        {
          if ((*v8 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          uint64_t v10 = 0;
          *uint64_t v8 = v11;
          uint64_t v11 = 0;
        }
        if ((v10 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
    }
  }
  return result;
}

uint64_t *sub_2171B470C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t v12 = *a1;
  *a1 = 0;
  if (sub_2168BE1F8(a3, &v12, a2 - 1))
  {
    char v6 = a1;
    do
      ++v6;
    while ((sub_2168BE1F8(a3, &v12, v6) & 1) == 0);
  }
  else
  {
    uint64_t v7 = a1 + 1;
    do
    {
      char v6 = v7;
      if (v7 >= v4) {
        break;
      }
      int v8 = sub_2168BE1F8(a3, &v12, v7);
      uint64_t v7 = v6 + 1;
    }
    while (!v8);
  }
  if (v6 < v4)
  {
    do
      --v4;
    while ((sub_2168BE1F8(a3, &v12, v4) & 1) != 0);
  }
  while (v6 < v4)
  {
    uint64_t v9 = *v6;
    uint64_t *v6 = *v4;
    uint64_t *v4 = v9;
    do
      ++v6;
    while (!sub_2168BE1F8(a3, &v12, v6));
    do
      --v4;
    while ((sub_2168BE1F8(a3, &v12, v4) & 1) != 0);
  }
  uint64_t v10 = v6 - 1;
  if (v6 - 1 != a1)
  {
    if ((*a1 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*a1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    *a1 = *v10;
    uint64_t *v10 = 0;
  }
  if (&v12 == v10)
  {
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    if ((*v10 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t *v10 = v12;
  }
  return v6;
}

void sub_2171B4894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_2171B48C4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v13 = *a1;
  *a1 = 0;
  do
    char v7 = sub_2168BE1F8(a3, &a1[++v6], &v13);
  while ((v7 & 1) != 0);
  int v8 = &a1[v6];
  if (v6 == 1)
  {
    do
    {
      if (v8 >= a2) {
        break;
      }
      --a2;
    }
    while ((sub_2168BE1F8(a3, a2, &v13) & 1) == 0);
  }
  else
  {
    do
      --a2;
    while (!sub_2168BE1F8(a3, a2, &v13));
  }
  if (v8 >= a2)
  {
    unint64_t result = v8 - 1;
  }
  else
  {
    uint64_t v9 = &a1[v6];
    uint64_t v10 = a2;
    do
    {
      uint64_t v11 = *v9;
      uint64_t *v9 = *v10;
      uint64_t *v10 = v11;
      do
        ++v9;
      while ((sub_2168BE1F8(a3, v9, &v13) & 1) != 0);
      do
        --v10;
      while (!sub_2168BE1F8(a3, v10, &v13));
    }
    while (v9 < v10);
    unint64_t result = v9 - 1;
  }
  if (result != a1)
  {
    if ((*a1 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*a1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    *a1 = *result;
    uint64_t *result = 0;
  }
  if (&v13 == result)
  {
    if ((v13 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    if ((*result & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*result & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t *result = v13;
  }
  return result;
}

void sub_2171B4A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

BOOL sub_2171B4A84(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      int v8 = a2 - 1;
      if (sub_2168BE1F8(a3, a2 - 1, a1))
      {
        uint64_t v9 = *a1;
        *a1 = *v8;
        *int v8 = v9;
      }
      return 1;
    case 3:
      sub_2169E14C0(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_2169E1B20(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_2169E1BD4(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      uint64_t v10 = a1 + 2;
      sub_2169E14C0(a1, a1 + 1, a1 + 2, a3);
      uint64_t v11 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    if (sub_2168BE1F8(a3, v11, v10))
    {
      uint64_t v20 = *v11;
      *uint64_t v11 = 0;
      uint64_t v14 = v12;
      while (1)
      {
        uint64_t v15 = (uint64_t *)((char *)a1 + v14 + 24);
        uint64_t v16 = (uint64_t *)((char *)a1 + v14 + 16);
        if (v16 != v15)
        {
          if ((*v15 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          *uint64_t v15 = *v16;
          void *v16 = 0;
        }
        if (v14 == -16) {
          break;
        }
        char v17 = sub_2168BE1F8(a3, &v20, (uint64_t *)((char *)a1 + v14 + 8));
        v14 -= 8;
        if ((v17 & 1) == 0)
        {
          uint64_t v18 = (uint64_t *)((char *)a1 + v14 + 24);
          goto LABEL_16;
        }
      }
      uint64_t v18 = a1;
LABEL_16:
      if (&v20 == v18)
      {
        uint64_t v19 = v20;
      }
      else
      {
        if ((*v18 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        uint64_t v19 = 0;
        *uint64_t v18 = v20;
        uint64_t v20 = 0;
      }
      if ((v19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (++v13 == 8) {
        return v11 + 1 == a2;
      }
    }
    uint64_t v10 = v11;
    v12 += 8;
    if (++v11 == a2) {
      return 1;
    }
  }
}

uint64_t *sub_2171B4CF8(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = &a1[v10];
      do
      {
        sub_2171B4E90((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    int v13 = a2;
    if (a2 != a3)
    {
      uint64_t v14 = a2;
      do
      {
        if (sub_2168BE1F8(a4, v14, a1))
        {
          uint64_t v15 = *v14;
          *uint64_t v14 = *a1;
          *a1 = v15;
          sub_2171B4E90((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      int v13 = a3;
    }
    if (v8 >= 9)
    {
      uint64_t v16 = (unint64_t)v8 >> 3;
      char v17 = a2 - 1;
      do
      {
        uint64_t v18 = *a1;
        *a1 = 0;
        uint64_t v19 = sub_2169E1FE8(a1, a4, v16);
        uint64_t v20 = *v19;
        uint64_t v21 = *v19 & 7;
        if (v17 == v19)
        {
          if (v21) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          *uint64_t v19 = v18;
        }
        else
        {
          if (v21) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          *uint64_t v19 = *v17;
          *char v17 = v18;
          sub_2171B504C((uint64_t)a1, (uint64_t)(v19 + 1), a4, v19 + 1 - a1);
        }
        --v17;
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_2171B4E90(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    char v5 = a4;
    uint64_t v6 = result;
    uint64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 3)
    {
      uint64_t v10 = ((uint64_t)a4 - result) >> 2;
      uint64_t v11 = v10 + 1;
      uint64_t v12 = (uint64_t *)(result + 8 * (v10 + 1));
      uint64_t v13 = v10 + 2;
      if (v10 + 2 < a3 && sub_2168BE1F8(a2, (uint64_t *)(result + 8 * (v10 + 1)), v12 + 1))
      {
        ++v12;
        uint64_t v11 = v13;
      }
      BOOL result = sub_2168BE1F8(a2, v12, v5);
      if ((result & 1) == 0)
      {
        uint64_t v16 = *v5;
        uint64_t *v5 = 0;
        do
        {
          uint64_t v14 = v12;
          if (v12 != v5)
          {
            if ((*v5 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(*v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            uint64_t *v5 = *v12;
            uint64_t *v12 = 0;
          }
          if (v7 < v11) {
            break;
          }
          uint64_t v15 = (2 * v11) | 1;
          uint64_t v12 = (uint64_t *)(v6 + 8 * v15);
          uint64_t v11 = 2 * v11 + 2;
          if (v11 >= a3)
          {
            uint64_t v11 = v15;
          }
          else if (sub_2168BE1F8(a2, (uint64_t *)(v6 + 8 * v15), v12 + 1))
          {
            ++v12;
          }
          else
          {
            uint64_t v11 = v15;
          }
          BOOL result = sub_2168BE1F8(a2, v12, &v16);
          char v5 = v14;
        }
        while (!result);
        if (&v16 == v14)
        {
          if ((v16 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
        }
        else
        {
          if ((*v14 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          *uint64_t v14 = v16;
        }
      }
    }
  }
  return result;
}

uint64_t sub_2171B504C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v6 = result;
    unint64_t v7 = v4 >> 1;
    uint64_t v8 = (uint64_t *)(result + 8 * (v4 >> 1));
    uint64_t v9 = (uint64_t *)(a2 - 8);
    BOOL result = sub_2168BE1F8(a3, v8, (uint64_t *)(a2 - 8));
    if (result)
    {
      uint64_t v11 = *v9;
      uint64_t *v9 = 0;
      do
      {
        uint64_t v10 = v8;
        if (v8 != v9)
        {
          if ((*v9 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          uint64_t *v9 = *v8;
          *uint64_t v8 = 0;
        }
        if (!v7) {
          break;
        }
        unint64_t v7 = (v7 - 1) >> 1;
        uint64_t v8 = (uint64_t *)(v6 + 8 * v7);
        BOOL result = sub_2168BE1F8(a3, v8, &v11);
        uint64_t v9 = v10;
      }
      while ((result & 1) != 0);
      if (&v11 == v10)
      {
        if ((v11 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
      else
      {
        if ((*v10 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        uint64_t *v10 = v11;
      }
    }
  }
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::HdDataSourceHash(uint64_t a1, float a2, float a3)
{
  *(float *)unint64_t v4 = a2;
  *(float *)&v4[1] = a3;
  v5[0] = a1;
  v5[1] = (uint64_t)v4;
  uint64_t v6 = 0;
  char v7 = 0;
  sub_2171B51D8((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v6, v5);
  return bswap64(0x9E3779B97F4A7C55 * v6);
}

void sub_2171B51D8(pxrInternal__aapl__pxrReserved__::Tf_HashState *a1, uint64_t *a2)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a2;
  unint64_t v4 = (float *)a2[1];
  sub_2171B3D94(*a2, &p_p_p);
  if (p_p_p)
  {
    float v5 = *v4;
    if (*v4 == v4[1])
    {
      ((void (*)(void **__return_ptr, float))(*p_p_p)[2])(&__p, v5);
      sub_2168EEDCC((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::VtValue *)&__p);
      sub_2168EE084((uint64_t)&__p);
    }
    else
    {
      std::string __p = 0;
      char v34 = 0;
      unint64_t v35 = 0;
      ((void (*)(float))(*p_p_p)[3])(v5);
      uint64_t v6 = (char *)__p;
      if (__p == v34)
      {
        if ((unint64_t)__p >= v35)
        {
          unint64_t v8 = (uint64_t)(v35 - (void)__p) >> 1;
          if (v8 <= 1) {
            unint64_t v8 = 1;
          }
          if (v35 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v9 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v9 = v8;
          }
          uint64_t v10 = sub_21677EA28((uint64_t)&v35, v9);
          uint64_t v11 = (std::__shared_weak_count *)__p;
          uint64_t v12 = v34;
          uint64_t v14 = &v10[v13];
          _DWORD *v10 = *(_DWORD *)v4;
          char v7 = (uint64_t *)(v10 + 1);
          while (v12 != v11)
          {
            int shared_weak_owners_high = HIDWORD(v12[-1].__shared_weak_owners_);
            uint64_t v12 = (std::__shared_weak_count *)((char *)v12 - 4);
            *--uint64_t v10 = shared_weak_owners_high;
          }
          std::string __p = v10;
          char v34 = (std::__shared_weak_count *)v7;
          unint64_t v35 = (unint64_t)v14;
          if (v11) {
            operator delete(v11);
          }
        }
        else
        {
          *(float *)std::string __p = *v4;
          char v7 = (uint64_t *)(v6 + 4);
        }
        char v34 = (std::__shared_weak_count *)v7;
      }
      pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes(a1, (pxrInternal__aapl__pxrReserved__ *)"TSB", (char *)3);
      uint64_t v16 = (float *)__p;
      char v17 = v34;
      if (__p != v34)
      {
        do
        {
          float v18 = *v16;
          pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes(a1, (pxrInternal__aapl__pxrReserved__ *)"Time", (char *)4);
          if (v18 == 0.0) {
            float v19 = 0.0;
          }
          else {
            float v19 = v18;
          }
          unint64_t v20 = LODWORD(v19);
          if (*((unsigned char *)a1 + 8)) {
            unint64_t v20 = ((*(void *)a1
          }
                  + LODWORD(v19)
                  + (*(void *)a1 + LODWORD(v19)) * (*(void *)a1 + (unint64_t)LODWORD(v19))) >> 1)
                + LODWORD(v19);
          else {
            *((unsigned char *)a1 + 8) = 1;
          }
          *(void *)a1 = v20;
          pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes(a1, (pxrInternal__aapl__pxrReserved__ *)"Value", (char *)5);
          ((void (*)(void ***__return_ptr, float))(*p_p_p)[2])(&p_p, v18);
          sub_2168EEDCC((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::VtValue *)&p_p);
          sub_2168EE084((uint64_t)&p_p);
          ++v16;
        }
        while (v16 != (float *)v17);
      }
      pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes(a1, (pxrInternal__aapl__pxrReserved__ *)"TSE", (char *)3);
      if (__p)
      {
        char v34 = (std::__shared_weak_count *)__p;
        operator delete(__p);
      }
    }
  }
  if (v32) {
    sub_216784EC4(v32);
  }
  sub_2171B3D04(v3, &p_p_p);
  if (p_p_p)
  {
    uint64_t v21 = ((uint64_t (*)(void ***))(*p_p_p)[2])(p_p_p);
    pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes(a1, (pxrInternal__aapl__pxrReserved__ *)"VB", (char *)2);
    if (v21)
    {
      for (uint64_t i = 0; i != v21; ++i)
      {
        pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes(a1, (pxrInternal__aapl__pxrReserved__ *)"Element", (char *)7);
        ((void (*)(void **__return_ptr))(*p_p_p)[3])(&__p);
        if (__p)
        {
          p_p = &__p;
          long long v37 = (std::__shared_weak_count *)v4;
          sub_2171B51D8(a1, &p_p);
        }
        if (v34) {
          sub_216784EC4(v34);
        }
      }
    }
    pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes(a1, (pxrInternal__aapl__pxrReserved__ *)"VE", (char *)2);
  }
  if (v32) {
    sub_216784EC4(v32);
  }
  sub_2171997C0(v3, &v29);
  if (v29)
  {
    (*(void (**)(void **__return_ptr))(*(void *)v29 + 16))(&__p);
    unint64_t v23 = 126 - 2 * __clz(((char *)v34 - (unsigned char *)__p) >> 3);
    if (v34 == __p) {
      uint64_t v24 = 0;
    }
    else {
      uint64_t v24 = v23;
    }
    sub_2169E0EAC((uint64_t)__p, (uint64_t *)v34, (uint64_t)&p_p_p, v24, 1);
    uint64_t v25 = sub_216D5FD4C((uint64_t *)__p, (uint64_t *)v34);
    sub_216AD0DE4((uint64_t)&__p, v25, v34);
    pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes(a1, (pxrInternal__aapl__pxrReserved__ *)"CB", (char *)2);
    uint64_t v26 = (std::__shared_weak_count *)__p;
    uint64_t v27 = v34;
    if (__p != v34)
    {
      do
      {
        (*(void (**)(void ***__return_ptr))(*(void *)v29 + 24))(&p_p);
        if (p_p)
        {
          pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes(a1, (pxrInternal__aapl__pxrReserved__ *)"Key", (char *)3);
          unint64_t v28 = (unint64_t)v26->__vftable & 0xFFFFFFFFFFFFFFF8;
          if (*((unsigned char *)a1 + 8)) {
            v28 += (*(void *)a1 + v28 + (*(void *)a1 + v28) * (*(void *)a1 + v28)) >> 1;
          }
          else {
            *((unsigned char *)a1 + 8) = 1;
          }
          *(void *)a1 = v28;
          pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes(a1, (pxrInternal__aapl__pxrReserved__ *)"Value", (char *)5);
          p_p_p = &p_p;
          uint64_t v32 = (std::__shared_weak_count *)v4;
          sub_2171B51D8(a1, &p_p_p);
        }
        if (v37) {
          sub_216784EC4(v37);
        }
        uint64_t v26 = (std::__shared_weak_count *)((char *)v26 + 8);
      }
      while (v26 != v27);
    }
    pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes(a1, (pxrInternal__aapl__pxrReserved__ *)"CE", (char *)2);
    p_p = &__p;
    sub_216889A04(&p_p);
  }
  if (v30) {
    sub_216784EC4(v30);
  }
}

void sub_2171B570C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    sub_216784EC4(a12);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::HdLegacyPrimTypeTokens_StaticTokenType::~HdLegacyPrimTypeTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::HdLegacyPrimTypeTokens_StaticTokenType *this)
{
  uint64_t v3 = (void **)((char *)this + 16);
  sub_216889A04(&v3);
  uint64_t v2 = *((void *)this + 1);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

pxrInternal__aapl__pxrReserved__::HdLegacyPrimTypeTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::HdLegacyPrimTypeTokens_StaticTokenType::HdLegacyPrimTypeTokens_StaticTokenType(atomic_uint **this)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v2 = (atomic_uint **)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "openvdbAsset", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2, "field3dAsset", 0);
  uint64_t v3 = *this;
  uint64_t v13 = v3;
  if ((v3 & 7) != 0)
  {
    unint64_t v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v13 = v4;
    }
  }
  float v5 = *v2;
  uint64_t v14 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v14 = v6;
    }
  }
  this[2] = 0;
  this[3] = 0;
  this[4] = 0;
  char v7 = (atomic_uint *)operator new(0x10uLL);
  unint64_t v8 = 0;
  this[2] = v7;
  this[3] = v7;
  this[4] = v7 + 4;
  do
  {
    unint64_t v9 = (&v13)[v8 / 2];
    *(void *)&v7[v8] = v9;
    if ((v9 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v7[v8] &= 0xFFFFFFFFFFFFFFF8;
    }
    v8 += 2;
  }
  while (v8 != 4);
  this[3] = v7 + 4;
  for (uint64_t i = 1; i != -1; --i)
  {
    uint64_t v11 = (&v13)[i];
    if ((v11 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return (pxrInternal__aapl__pxrReserved__::HdLegacyPrimTypeTokens_StaticTokenType *)this;
}

void sub_2171B59C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  sub_216889A04(&a10);
  uint64_t v15 = 8;
  while (1)
  {
    uint64_t v16 = *(void *)(&a12 + v15);
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v15 -= 8;
    if (v15 == -8)
    {
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

BOOL pxrInternal__aapl__pxrReserved__::HdLegacyPrimTypeIsVolumeField(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v3 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLegacyPrimTypeTokens);
  if (!v3) {
    uint64_t v3 = sub_2171C0EA8(&pxrInternal__aapl__pxrReserved__::HdLegacyPrimTypeTokens);
  }
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) == ((unint64_t)*v3 & 0xFFFFFFFFFFFFFFF8)) {
    return 1;
  }
  unint64_t v4 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLegacyPrimTypeTokens);
  if (!v4) {
    unint64_t v4 = sub_2171C0EA8(&pxrInternal__aapl__pxrReserved__::HdLegacyPrimTypeTokens);
  }
  return (*(void *)this & 0xFFFFFFFFFFFFFFF8) == ((unint64_t)v4[1] & 0xFFFFFFFFFFFFFFF8);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdExtComputationCallbackDataSource::Invoke(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 16) + 368))(*(void *)(a1 + 16), a1 + 8, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim::HdDataSourceLegacyPrim(uint64_t a1, _DWORD *a2, uint64_t *a3, uint64_t a4)
{
  *(void *)a1 = &unk_26C77C5F0;
  unint64_t v8 = (_DWORD *)(a1 + 12);
  sub_216981010((_DWORD *)(a1 + 8), a2);
  sub_21698105C(v8, a2 + 1);
  uint64_t v9 = *a3;
  *(void *)(a1 + 16) = *a3;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 16) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(a1 + 24) = a4;
  *(unsigned char *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 33) &= ~1u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  if (!a4)
  {
    v11[0] = "hd/dataSourceLegacyPrim.cpp";
    v11[1] = "HdDataSourceLegacyPrim";
    uint64_t v11[2] = 2496;
    v11[3] = "pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim::HdDataSourceLegacyPrim(SdfPath, TfToken, HdSceneDelegate *)";
    char v12 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v11, "_sceneDelegate", 0);
  }
  return a1;
}

void sub_2171B5C20(_Unwind_Exception *a1)
{
  float v5 = (std::__shared_weak_count *)*((void *)v1 + 10);
  if (v5) {
    sub_216784EC4(v5);
  }
  sub_217325564((uint64_t)v1, v3);
  sub_21697B754(v2);
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2171B5C54(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    sub_216784EC4(v2);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim::PrimDirtied(pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim *this, const pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *a2)
{
  DefaultLocator = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdPrimvarsSchema::GetDefaultLocator(this);
  float v5 = (pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchema *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::Intersects(a2, DefaultLocator);
  if (v5)
  {
    atomic_store(0, (unsigned __int8 *)this + 32);
    *((unsigned char *)this + 33) &= ~1u;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    sub_2171B5D54((uint64_t *)this + 5, &v8);
    uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 8);
    *((void *)this + 7) = 0;
    *((void *)this + 8) = 0;
    if (v6) {
      sub_216784EC4(v6);
    }
    float v5 = (pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchema *)v9;
    if (v9) {
      sub_216784EC4(v9);
    }
  }
  char v7 = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchema::GetDefaultLocator(v5);
  if (pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::Intersects(a2, v7))
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    sub_2171B5D54((uint64_t *)this + 9, &v8);
    if (v9) {
      sub_216784EC4(v9);
    }
  }
}

void sub_2171B5D38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_2171B5D54(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = (std::__shared_weak_count *)a2[1];
  uint64_t v3 = *a2;
  unint64_t v4 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_2171BE460(a1, &v3);
  if (v4) {
    sub_216784EC4(v4);
  }
}

void sub_2171B5DA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  _Unwind_Resume(exception_object);
}

void *pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim::GetCachedLocators(pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim *this)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B96F80, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::HdPrimvarsSchema *)__cxa_guard_acquire(&qword_267B96F80);
    if (v2)
    {
      DefaultLocator = pxrInternal__aapl__pxrReserved__::HdPrimvarsSchema::GetDefaultLocator(v2);
      unint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchema *)sub_2171AA848(v8, (uint64_t)DefaultLocator);
      float v5 = pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchema::GetDefaultLocator(v4);
      sub_2171AA848(v9, (uint64_t)v5);
      v7[0] = v8;
      v7[1] = 2;
      pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::HdDataSourceLocatorSet(&unk_267B96DB8, v7);
      for (uint64_t i = 14; i != -14; i -= 14)
        sub_217199B64((uint64_t)&v8[i]);
      __cxa_atexit((void (*)(void *))sub_2171B5F14, &unk_267B96DB8, &dword_216758000);
      __cxa_guard_release(&qword_267B96F80);
    }
  }
  return &unk_267B96DB8;
}

void sub_2171B5EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  for (uint64_t i = 56; i != -56; i -= 56)
    sub_217199B64((uint64_t)(&a12 + i));
  __cxa_guard_abort(&qword_267B96F80);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim::_IsLight(pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v9[2] = *MEMORY[0x263EF8340];
  if (pxrInternal__aapl__pxrReserved__::HdPrimTypeIsLight((pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim *)((char *)this + 16), a2))
  {
    return 1;
  }
  uint64_t v4 = *((void *)this + 3);
  float v5 = (char *)this + 8;
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdTokens);
  if (!v6) {
    uint64_t v6 = sub_217198988(&pxrInternal__aapl__pxrReserved__::HdTokens);
  }
  (*(void (**)(void *__return_ptr, uint64_t, char *, uint64_t))(*(void *)v4 + 288))(v9, v4, v5, (uint64_t)v6 + 664);
  char v8 = 0;
  uint64_t v3 = sub_2169FB9EC((pxrInternal__aapl__pxrReserved__::VtValue *)v9, (pxrInternal__aapl__pxrReserved__::VtValue *)&v8);
  sub_2168EE084((uint64_t)v9);
  return v3;
}

void sub_2171B6004(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim::_IsInstanceable(pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v3 = (void *)((char *)this + 16);
  if (pxrInternal__aapl__pxrReserved__::HdPrimTypeIsGprim((pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim *)((char *)this + 16), a2)|| (pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim::_IsLight(this, v4) & 1) != 0)
  {
    return 1;
  }
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  if (!v6) {
    uint64_t v6 = sub_2171C0F34(&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  }
  return (*v3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v6 + 18) & 0xFFFFFFFFFFFFFFF8);
}

char *pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim::GetNames@<X0>(pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  if (!v4) {
    uint64_t v4 = sub_2171C0F34(&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  }
  float v5 = (void *)((char *)this + 16);
  if ((*((void *)this + 2) & 0xFFFFFFFFFFFFFFF8) == (*((void *)v4 + 6) & 0xFFFFFFFFFFFFFFF8))
  {
    uint64_t v6 = (uint64_t *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdMeshSchemaTokens);
    if (!v6) {
      uint64_t v6 = (uint64_t *)sub_2171C0FC0(&pxrInternal__aapl__pxrReserved__::HdMeshSchemaTokens);
    }
    char v7 = *(uint64_t **)(a2 + 8);
    if ((unint64_t)v7 >= *(void *)(a2 + 16))
    {
      uint64_t v9 = sub_216973984((char **)a2, v6);
    }
    else
    {
      uint64_t v8 = *v6;
      uint64_t *v7 = *v6;
      if ((v8 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *v7 &= 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v9 = (char *)(v7 + 1);
    }
    *(void *)(a2 + 8) = v9;
  }
  uint64_t v10 = (pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  if (!v10) {
    uint64_t v10 = sub_2171C0F34(&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  }
  if ((*v5 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v10 + 8) & 0xFFFFFFFFFFFFFFF8))
  {
    uint64_t v11 = (uint64_t *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchemaTokens);
    if (!v11) {
      uint64_t v11 = (uint64_t *)sub_217199BE0(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchemaTokens);
    }
    char v12 = *(uint64_t **)(a2 + 8);
    if ((unint64_t)v12 >= *(void *)(a2 + 16))
    {
      uint64_t v14 = sub_216973984((char **)a2, v11);
    }
    else
    {
      uint64_t v13 = *v11;
      uint64_t *v12 = *v11;
      if ((v13 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *v12 &= 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v14 = (char *)(v12 + 1);
    }
    *(void *)(a2 + 8) = v14;
  }
  uint64_t v15 = (uint64_t *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimvarsSchemaTokens);
  if (!v15) {
    uint64_t v15 = (uint64_t *)sub_2171C1E14(&pxrInternal__aapl__pxrReserved__::HdPrimvarsSchemaTokens);
  }
  uint64_t v16 = *(uint64_t **)(a2 + 8);
  if ((unint64_t)v16 >= *(void *)(a2 + 16))
  {
    float v18 = sub_216973984((char **)a2, v15);
  }
  else
  {
    uint64_t v17 = *v15;
    uint64_t *v16 = *v15;
    if ((v17 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *v16 &= 0xFFFFFFFFFFFFFFF8;
    }
    float v18 = (char *)(v16 + 1);
  }
  *(void *)(a2 + 8) = v18;
  if (pxrInternal__aapl__pxrReserved__::HdPrimTypeIsGprim((pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim *)((char *)this + 16), (const pxrInternal__aapl__pxrReserved__::TfToken *)v15))
  {
    unint64_t v20 = (uint64_t *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarsSchemaTokens);
    if (!v20) {
      unint64_t v20 = (uint64_t *)sub_2171C1EA0(&pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarsSchemaTokens);
    }
    uint64_t v21 = *(uint64_t **)(a2 + 8);
    if ((unint64_t)v21 >= *(void *)(a2 + 16))
    {
      unint64_t v23 = sub_216973984((char **)a2, v20);
    }
    else
    {
      uint64_t v22 = *v20;
      *uint64_t v21 = *v20;
      if ((v22 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *v21 &= 0xFFFFFFFFFFFFFFF8;
      }
      unint64_t v23 = (char *)(v21 + 1);
    }
    *(void *)(a2 + 8) = v23;
    SchemaToken = (uint64_t *)pxrInternal__aapl__pxrReserved__::HdMaterialBindingsSchema::GetSchemaToken((pxrInternal__aapl__pxrReserved__::HdMaterialBindingsSchema *)v23);
    uint64_t v25 = *(uint64_t **)(a2 + 8);
    if ((unint64_t)v25 >= *(void *)(a2 + 16))
    {
      uint64_t v27 = sub_216973984((char **)a2, SchemaToken);
    }
    else
    {
      uint64_t v26 = *SchemaToken;
      *uint64_t v25 = *SchemaToken;
      if ((v26 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *v25 &= 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v27 = (char *)(v25 + 1);
    }
    *(void *)(a2 + 8) = v27;
    unint64_t v28 = (uint64_t *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
    if (!v28) {
      unint64_t v28 = (uint64_t *)sub_2171C1B58(&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
    }
    uint64_t v29 = *(uint64_t **)(a2 + 8);
    if ((unint64_t)v29 >= *(void *)(a2 + 16))
    {
      uint64_t v31 = sub_216973984((char **)a2, v28);
    }
    else
    {
      uint64_t v30 = *v28;
      uint64_t *v29 = *v28;
      if ((v30 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *v29 &= 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v31 = (char *)(v29 + 1);
    }
    *(void *)(a2 + 8) = v31;
    uint64_t v32 = (uint64_t *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCoordSysBindingSchemaTokens);
    if (!v32) {
      uint64_t v32 = (uint64_t *)sub_2171B190C(&pxrInternal__aapl__pxrReserved__::HdCoordSysBindingSchemaTokens);
    }
    uint64_t v33 = *(uint64_t **)(a2 + 8);
    if ((unint64_t)v33 >= *(void *)(a2 + 16))
    {
      unint64_t v35 = sub_216973984((char **)a2, v32);
    }
    else
    {
      uint64_t v34 = *v32;
      uint64_t *v33 = *v32;
      if ((v34 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *v33 &= 0xFFFFFFFFFFFFFFF8;
      }
      unint64_t v35 = (char *)(v33 + 1);
    }
    *(void *)(a2 + 8) = v35;
    unint64_t v36 = (uint64_t *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPurposeSchemaTokens);
    if (!v36) {
      unint64_t v36 = (uint64_t *)sub_2171C1F2C(&pxrInternal__aapl__pxrReserved__::HdPurposeSchemaTokens);
    }
    long long v37 = *(uint64_t **)(a2 + 8);
    if ((unint64_t)v37 >= *(void *)(a2 + 16))
    {
      unsigned __int8 v39 = sub_216973984((char **)a2, v36);
    }
    else
    {
      uint64_t v38 = *v36;
      uint64_t *v37 = *v36;
      if ((v38 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v38 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *v37 &= 0xFFFFFFFFFFFFFFF8;
      }
      unsigned __int8 v39 = (char *)(v37 + 1);
    }
    *(void *)(a2 + 8) = v39;
    uint64_t v40 = (uint64_t *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdVisibilitySchemaTokens);
    if (!v40) {
      uint64_t v40 = (uint64_t *)sub_2171C134C(&pxrInternal__aapl__pxrReserved__::HdVisibilitySchemaTokens);
    }
    uint64_t v41 = *(uint64_t **)(a2 + 8);
    if ((unint64_t)v41 >= *(void *)(a2 + 16))
    {
      uint64_t v43 = sub_216973984((char **)a2, v40);
    }
    else
    {
      uint64_t v42 = *v40;
      *uint64_t v41 = *v40;
      if ((v42 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v42 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *v41 &= 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v43 = (char *)(v41 + 1);
    }
    *(void *)(a2 + 8) = v43;
    unsigned __int8 v44 = (uint64_t *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCategoriesSchemaTokens);
    if (!v44) {
      unsigned __int8 v44 = (uint64_t *)sub_2171A6550(&pxrInternal__aapl__pxrReserved__::HdCategoriesSchemaTokens);
    }
    uint64_t v45 = *(uint64_t **)(a2 + 8);
    if ((unint64_t)v45 >= *(void *)(a2 + 16))
    {
      uint64_t v47 = sub_216973984((char **)a2, v44);
    }
    else
    {
      uint64_t v46 = *v44;
      uint64_t *v45 = *v44;
      if ((v46 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v46 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *v45 &= 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v47 = (char *)(v45 + 1);
    }
    *(void *)(a2 + 8) = v47;
    uint64_t v48 = (uint64_t *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdXformSchemaTokens);
    if (!v48) {
      uint64_t v48 = (uint64_t *)sub_2171C1FB8(&pxrInternal__aapl__pxrReserved__::HdXformSchemaTokens);
    }
    uint64_t v49 = *(uint64_t **)(a2 + 8);
    if ((unint64_t)v49 >= *(void *)(a2 + 16))
    {
      long long v51 = sub_216973984((char **)a2, v48);
    }
    else
    {
      uint64_t v50 = *v48;
      uint64_t *v49 = *v48;
      if ((v50 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v50 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *v49 &= 0xFFFFFFFFFFFFFFF8;
      }
      long long v51 = (char *)(v49 + 1);
    }
    *(void *)(a2 + 8) = v51;
    float v19 = (uint64_t *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdExtentSchemaTokens);
    if (!v19) {
      float v19 = (uint64_t *)sub_2171C2044(&pxrInternal__aapl__pxrReserved__::HdExtentSchemaTokens);
    }
    uint64_t v52 = *(uint64_t **)(a2 + 8);
    if ((unint64_t)v52 >= *(void *)(a2 + 16))
    {
      v54 = sub_216973984((char **)a2, v19);
    }
    else
    {
      uint64_t v53 = *v19;
      *uint64_t v52 = *v19;
      if ((v53 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v53 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *v52 &= 0xFFFFFFFFFFFFFFF8;
      }
      v54 = (char *)(v52 + 1);
    }
    *(void *)(a2 + 8) = v54;
  }
  if (pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim::_IsLight(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)v19))goto LABEL_109; {
  unint64_t v56 = (pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  }
  if (!v56) {
    unint64_t v56 = sub_2171C0F34(&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  }
  if ((*v5 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v56 + 30) & 0xFFFFFFFFFFFFFFF8))
  {
LABEL_109:
    uint64_t v57 = (uint64_t *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdMaterialSchemaTokens);
    if (!v57) {
      uint64_t v57 = (uint64_t *)sub_2171C20D0(&pxrInternal__aapl__pxrReserved__::HdMaterialSchemaTokens);
    }
    unint64_t v58 = *(uint64_t **)(a2 + 8);
    if ((unint64_t)v58 >= *(void *)(a2 + 16))
    {
      v60 = sub_216973984((char **)a2, v57);
    }
    else
    {
      uint64_t v59 = *v57;
      *unint64_t v58 = *v57;
      if ((v59 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v59 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *v58 &= 0xFFFFFFFFFFFFFFF8;
      }
      v60 = (char *)(v58 + 1);
    }
    *(void *)(a2 + 8) = v60;
    uint64_t v61 = (uint64_t *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdXformSchemaTokens);
    if (!v61) {
      uint64_t v61 = (uint64_t *)sub_2171C1FB8(&pxrInternal__aapl__pxrReserved__::HdXformSchemaTokens);
    }
    unint64_t v62 = *(uint64_t **)(a2 + 8);
    if ((unint64_t)v62 >= *(void *)(a2 + 16))
    {
      long long v64 = sub_216973984((char **)a2, v61);
    }
    else
    {
      uint64_t v63 = *v61;
      *unint64_t v62 = *v61;
      if ((v63 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v63 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *v62 &= 0xFFFFFFFFFFFFFFF8;
      }
      long long v64 = (char *)(v62 + 1);
    }
    *(void *)(a2 + 8) = v64;
    uint64_t v55 = (uint64_t *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLightSchemaTokens);
    if (!v55) {
      uint64_t v55 = (uint64_t *)sub_2171C215C(&pxrInternal__aapl__pxrReserved__::HdLightSchemaTokens);
    }
    uint64_t v65 = *(uint64_t **)(a2 + 8);
    if ((unint64_t)v65 >= *(void *)(a2 + 16))
    {
      unint64_t v67 = sub_216973984((char **)a2, v55);
    }
    else
    {
      uint64_t v66 = *v55;
      *uint64_t v65 = *v55;
      if ((v66 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v66 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *v65 &= 0xFFFFFFFFFFFFFFF8;
      }
      unint64_t v67 = (char *)(v65 + 1);
    }
    *(void *)(a2 + 8) = v67;
  }
  unint64_t v68 = (pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  if (!v68) {
    unint64_t v68 = sub_2171C0F34(&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  }
  if ((*v5 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v68 + 16) & 0xFFFFFFFFFFFFFFF8))
  {
    uint64_t v55 = (uint64_t *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdMaterialSchemaTokens);
    if (!v55) {
      uint64_t v55 = (uint64_t *)sub_2171C20D0(&pxrInternal__aapl__pxrReserved__::HdMaterialSchemaTokens);
    }
    v69 = *(uint64_t **)(a2 + 8);
    if ((unint64_t)v69 >= *(void *)(a2 + 16))
    {
      long long v71 = sub_216973984((char **)a2, v55);
    }
    else
    {
      uint64_t v70 = *v55;
      uint64_t *v69 = *v55;
      if ((v70 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v70 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *v69 &= 0xFFFFFFFFFFFFFFF8;
      }
      long long v71 = (char *)(v69 + 1);
    }
    *(void *)(a2 + 8) = v71;
  }
  v72 = (pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  if (!v72) {
    v72 = sub_2171C0F34(&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  }
  if ((*v5 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v72 + 18) & 0xFFFFFFFFFFFFFFF8))
  {
    v73 = (uint64_t *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdXformSchemaTokens);
    if (!v73) {
      v73 = (uint64_t *)sub_2171C1FB8(&pxrInternal__aapl__pxrReserved__::HdXformSchemaTokens);
    }
    unint64_t v74 = *(uint64_t **)(a2 + 8);
    if ((unint64_t)v74 >= *(void *)(a2 + 16))
    {
      uint64_t v76 = sub_216973984((char **)a2, v73);
    }
    else
    {
      uint64_t v75 = *v73;
      *unint64_t v74 = *v73;
      if ((v75 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v75 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *v74 &= 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v76 = (char *)(v74 + 1);
    }
    *(void *)(a2 + 8) = v76;
    uint64_t v77 = (uint64_t *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchemaTokens);
    if (!v77) {
      uint64_t v77 = (uint64_t *)sub_2171C1520(&pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchemaTokens);
    }
    v78 = *(uint64_t **)(a2 + 8);
    if ((unint64_t)v78 >= *(void *)(a2 + 16))
    {
      unint64_t v80 = sub_216973984((char **)a2, v77);
    }
    else
    {
      uint64_t v79 = *v77;
      uint64_t *v78 = *v77;
      if ((v79 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v79 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *v78 &= 0xFFFFFFFFFFFFFFF8;
      }
      unint64_t v80 = (char *)(v78 + 1);
    }
    *(void *)(a2 + 8) = v80;
    uint64_t v55 = (uint64_t *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdInstanceCategoriesSchemaTokens);
    if (!v55) {
      uint64_t v55 = (uint64_t *)sub_2171C21E8(&pxrInternal__aapl__pxrReserved__::HdInstanceCategoriesSchemaTokens);
    }
    v81 = *(uint64_t **)(a2 + 8);
    if ((unint64_t)v81 >= *(void *)(a2 + 16))
    {
      uint64_t v83 = sub_216973984((char **)a2, v55);
    }
    else
    {
      uint64_t v82 = *v55;
      uint64_t *v81 = *v55;
      if ((v82 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v82 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *v81 &= 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v83 = (char *)(v81 + 1);
    }
    *(void *)(a2 + 8) = v83;
  }
  if (pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim::_IsInstanceable(this, (const pxrInternal__aapl__pxrReserved__::TfToken *)v55))
  {
    v84 = (uint64_t *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdInstancedBySchemaTokens);
    if (!v84) {
      v84 = (uint64_t *)sub_2171C2274(&pxrInternal__aapl__pxrReserved__::HdInstancedBySchemaTokens);
    }
    v85 = *(uint64_t **)(a2 + 8);
    if ((unint64_t)v85 >= *(void *)(a2 + 16))
    {
      v87 = sub_216973984((char **)a2, v84);
    }
    else
    {
      uint64_t v86 = *v84;
      uint64_t *v85 = *v84;
      if ((v86 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v86 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *v85 &= 0xFFFFFFFFFFFFFFF8;
      }
      v87 = (char *)(v85 + 1);
    }
    *(void *)(a2 + 8) = v87;
  }
  uint64_t v88 = (pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  if (!v88) {
    uint64_t v88 = sub_2171C0F34(&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  }
  if ((*v5 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v88 + 14) & 0xFFFFFFFFFFFFFFF8))
  {
    uint64_t v89 = (uint64_t *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    if (!v89) {
      uint64_t v89 = (uint64_t *)sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    }
    v90 = *(uint64_t **)(a2 + 8);
    if ((unint64_t)v90 >= *(void *)(a2 + 16))
    {
      unint64_t v92 = sub_216973984((char **)a2, v89);
    }
    else
    {
      uint64_t v91 = *v89;
      uint64_t *v90 = *v89;
      if ((v91 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v91 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *v90 &= 0xFFFFFFFFFFFFFFF8;
      }
      unint64_t v92 = (char *)(v90 + 1);
    }
    *(void *)(a2 + 8) = v92;
    v84 = (uint64_t *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdXformSchemaTokens);
    if (!v84) {
      v84 = (uint64_t *)sub_2171C1FB8(&pxrInternal__aapl__pxrReserved__::HdXformSchemaTokens);
    }
    v93 = *(uint64_t **)(a2 + 8);
    if ((unint64_t)v93 >= *(void *)(a2 + 16))
    {
      uint64_t v95 = sub_216973984((char **)a2, v84);
    }
    else
    {
      uint64_t v94 = *v84;
      uint64_t *v93 = *v84;
      if ((v94 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v94 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *v93 &= 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v95 = (char *)(v93 + 1);
    }
    *(void *)(a2 + 8) = v95;
  }
  v96 = (pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  if (!v96) {
    v96 = sub_2171C0F34(&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  }
  if ((*v5 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v96 + 36) & 0xFFFFFFFFFFFFFFF8))
  {
    v84 = (uint64_t *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdRenderBufferSchemaTokens);
    if (!v84) {
      v84 = (uint64_t *)sub_2171C1C70(&pxrInternal__aapl__pxrReserved__::HdRenderBufferSchemaTokens);
    }
    v97 = *(uint64_t **)(a2 + 8);
    if ((unint64_t)v97 >= *(void *)(a2 + 16))
    {
      v99 = sub_216973984((char **)a2, v84);
    }
    else
    {
      uint64_t v98 = *v84;
      uint64_t *v97 = *v84;
      if ((v98 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v98 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *v97 &= 0xFFFFFFFFFFFFFFF8;
      }
      v99 = (char *)(v97 + 1);
    }
    *(void *)(a2 + 8) = v99;
  }
  uint64_t v100 = (pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  if (!v100) {
    uint64_t v100 = sub_2171C0F34(&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  }
  if ((*v5 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v100 + 37) & 0xFFFFFFFFFFFFFFF8))
  {
    v84 = (uint64_t *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdRenderSettingsSchemaTokens);
    if (!v84) {
      v84 = (uint64_t *)sub_2171C1CFC(&pxrInternal__aapl__pxrReserved__::HdRenderSettingsSchemaTokens);
    }
    uint64_t v101 = *(uint64_t **)(a2 + 8);
    if ((unint64_t)v101 >= *(void *)(a2 + 16))
    {
      v103 = sub_216973984((char **)a2, v84);
    }
    else
    {
      uint64_t v102 = *v84;
      *uint64_t v101 = *v84;
      if ((v102 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v102 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *v101 &= 0xFFFFFFFFFFFFFFF8;
      }
      v103 = (char *)(v101 + 1);
    }
    *(void *)(a2 + 8) = v103;
  }
  unint64_t v104 = (pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  if (!v104) {
    unint64_t v104 = sub_2171C0F34(&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  }
  if ((*v5 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v104 + 20) & 0xFFFFFFFFFFFFFFF8))
  {
    v84 = (uint64_t *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdIntegratorSchemaTokens);
    if (!v84) {
      v84 = (uint64_t *)sub_2171C2300(&pxrInternal__aapl__pxrReserved__::HdIntegratorSchemaTokens);
    }
    v105 = *(uint64_t **)(a2 + 8);
    if ((unint64_t)v105 >= *(void *)(a2 + 16))
    {
      uint64_t v107 = sub_216973984((char **)a2, v84);
    }
    else
    {
      uint64_t v106 = *v84;
      uint64_t *v105 = *v84;
      if ((v106 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v106 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *v105 &= 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v107 = (char *)(v105 + 1);
    }
    *(void *)(a2 + 8) = v107;
  }
  v108 = (pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  if (!v108) {
    v108 = sub_2171C0F34(&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  }
  if ((*v5 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v108 + 21) & 0xFFFFFFFFFFFFFFF8))
  {
    v84 = (uint64_t *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdSampleFilterSchemaTokens);
    if (!v84) {
      v84 = (uint64_t *)sub_2171C238C(&pxrInternal__aapl__pxrReserved__::HdSampleFilterSchemaTokens);
    }
    v109 = *(uint64_t **)(a2 + 8);
    if ((unint64_t)v109 >= *(void *)(a2 + 16))
    {
      v111 = sub_216973984((char **)a2, v84);
    }
    else
    {
      uint64_t v110 = *v84;
      uint64_t *v109 = *v84;
      if ((v110 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v110 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *v109 &= 0xFFFFFFFFFFFFFFF8;
      }
      v111 = (char *)(v109 + 1);
    }
    *(void *)(a2 + 8) = v111;
  }
  uint64_t v112 = (pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  if (!v112) {
    uint64_t v112 = sub_2171C0F34(&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  }
  if ((*v5 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v112 + 22) & 0xFFFFFFFFFFFFFFF8))
  {
    v84 = (uint64_t *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdDisplayFilterSchemaTokens);
    if (!v84) {
      v84 = (uint64_t *)sub_2171C2418(&pxrInternal__aapl__pxrReserved__::HdDisplayFilterSchemaTokens);
    }
    uint64_t v113 = *(uint64_t **)(a2 + 8);
    if ((unint64_t)v113 >= *(void *)(a2 + 16))
    {
      v115 = sub_216973984((char **)a2, v84);
    }
    else
    {
      uint64_t v114 = *v84;
      *uint64_t v113 = *v84;
      if ((v114 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v114 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *v113 &= 0xFFFFFFFFFFFFFFF8;
      }
      v115 = (char *)(v113 + 1);
    }
    *(void *)(a2 + 8) = v115;
  }
  if (pxrInternal__aapl__pxrReserved__::HdLegacyPrimTypeIsVolumeField((pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim *)((char *)this + 16), (const pxrInternal__aapl__pxrReserved__::TfToken *)v84))
  {
    unint64_t v116 = (uint64_t *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdVolumeFieldSchemaTokens);
    if (!v116) {
      unint64_t v116 = (uint64_t *)sub_2171C13D8(&pxrInternal__aapl__pxrReserved__::HdVolumeFieldSchemaTokens);
    }
    v117 = *(uint64_t **)(a2 + 8);
    if ((unint64_t)v117 >= *(void *)(a2 + 16))
    {
      uint64_t v119 = sub_216973984((char **)a2, v116);
    }
    else
    {
      uint64_t v118 = *v116;
      uint64_t *v117 = *v116;
      if ((v118 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v118 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *v117 &= 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v119 = (char *)(v117 + 1);
    }
    *(void *)(a2 + 8) = v119;
  }
  v120 = (pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  if (!v120) {
    v120 = sub_2171C0F34(&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  }
  if ((*v5 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v120 + 12) & 0xFFFFFFFFFFFFFFF8))
  {
    v121 = (uint64_t *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdVolumeFieldBindingSchemaTokens);
    if (!v121) {
      v121 = (uint64_t *)sub_2171C24A4(&pxrInternal__aapl__pxrReserved__::HdVolumeFieldBindingSchemaTokens);
    }
    unint64_t v122 = *(uint64_t **)(a2 + 8);
    if ((unint64_t)v122 >= *(void *)(a2 + 16))
    {
      uint64_t v124 = sub_216973984((char **)a2, v121);
    }
    else
    {
      uint64_t v123 = *v121;
      *unint64_t v122 = *v121;
      if ((v123 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v123 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *v122 &= 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v124 = (char *)(v122 + 1);
    }
    *(void *)(a2 + 8) = v124;
  }
  uint64_t v125 = (pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  if (!v125) {
    uint64_t v125 = sub_2171C0F34(&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  }
  if ((*v5 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v125 + 35) & 0xFFFFFFFFFFFFFFF8))
  {
    v126 = (uint64_t *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
    if (!v126) {
      v126 = (uint64_t *)sub_2171C1BE4(&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
    }
    v127 = *(uint64_t **)(a2 + 8);
    if ((unint64_t)v127 >= *(void *)(a2 + 16))
    {
      v129 = sub_216973984((char **)a2, v126);
    }
    else
    {
      uint64_t v128 = *v126;
      uint64_t *v127 = *v126;
      if ((v128 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v128 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *v127 &= 0xFFFFFFFFFFFFFFF8;
      }
      v129 = (char *)(v127 + 1);
    }
    *(void *)(a2 + 8) = v129;
  }
  uint64_t v130 = (pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  if (!v130) {
    uint64_t v130 = sub_2171C0F34(&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  }
  if ((*v5 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v130 + 17) & 0xFFFFFFFFFFFFFFF8))
  {
    v131 = (uint64_t *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdXformSchemaTokens);
    if (!v131) {
      v131 = (uint64_t *)sub_2171C1FB8(&pxrInternal__aapl__pxrReserved__::HdXformSchemaTokens);
    }
    long long v132 = *(uint64_t **)(a2 + 8);
    if ((unint64_t)v132 >= *(void *)(a2 + 16))
    {
      v134 = sub_216973984((char **)a2, v131);
    }
    else
    {
      uint64_t v133 = *v131;
      *long long v132 = *v131;
      if ((v133 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v133 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *v132 &= 0xFFFFFFFFFFFFFFF8;
      }
      v134 = (char *)(v132 + 1);
    }
    *(void *)(a2 + 8) = v134;
  }
  uint64_t v135 = (pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  if (!v135) {
    uint64_t v135 = sub_2171C0F34(&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  }
  if ((*v5 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v135 + 15) & 0xFFFFFFFFFFFFFFF8))
  {
    uint64_t v136 = (pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
    if (!v136) {
      uint64_t v136 = sub_2171C0F34(&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
    }
    v137 = (uint64_t *)((char *)v136 + 120);
    v138 = *(uint64_t **)(a2 + 8);
    if ((unint64_t)v138 >= *(void *)(a2 + 16))
    {
      v140 = sub_216973984((char **)a2, v137);
    }
    else
    {
      uint64_t v139 = *v137;
      uint64_t *v138 = *v137;
      if ((v139 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v139 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *v138 &= 0xFFFFFFFFFFFFFFF8;
      }
      v140 = (char *)(v138 + 1);
    }
    *(void *)(a2 + 8) = v140;
  }
  v141 = (pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  if (!v141) {
    v141 = sub_2171C0F34(&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  }
  if ((*v5 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v141 + 23) & 0xFFFFFFFFFFFFFFF8))
  {
    v142 = (pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
    if (!v142) {
      v142 = sub_2171C0F34(&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
    }
    v143 = (uint64_t *)((char *)v142 + 184);
    v144 = *(uint64_t **)(a2 + 8);
    if ((unint64_t)v144 >= *(void *)(a2 + 16))
    {
      v146 = sub_216973984((char **)a2, v143);
    }
    else
    {
      uint64_t v145 = *v143;
      uint64_t *v144 = *v143;
      if ((v145 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v145 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *v144 &= 0xFFFFFFFFFFFFFFF8;
      }
      v146 = (char *)(v144 + 1);
    }
    *(void *)(a2 + 8) = v146;
  }
  v147 = (uint64_t *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdSceneIndexEmulationTokens);
  if (!v147) {
    v147 = (uint64_t *)sub_2171C2530(&pxrInternal__aapl__pxrReserved__::HdSceneIndexEmulationTokens);
  }
  v148 = *(uint64_t **)(a2 + 8);
  if ((unint64_t)v148 >= *(void *)(a2 + 16))
  {
    BOOL result = sub_216973984((char **)a2, v147);
  }
  else
  {
    uint64_t v149 = *v147;
    uint64_t *v148 = *v147;
    if ((v149 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v149 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *v148 &= 0xFFFFFFFFFFFFFFF8;
    }
    BOOL result = (char *)(v148 + 1);
  }
  *(void *)(a2 + 8) = result;
  return result;
}

void sub_2171B72A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim::_GetPrimvarsDataSource@<D0>(pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim *this@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2 = this;
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)this + 32);
  if (v4)
  {
    sub_2171BE4CC((void *)this + 5, &v69);
    double result = *(double *)&v69;
    *a2 = v69;
    return result;
  }
  v54 = a2;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  char v7 = 0;
  unint64_t v58 = (_DWORD *)((char *)this + 8);
  unint64_t v56 = (_DWORD *)((char *)this + 12);
  do
  {
    (*(void (**)(uint64_t *__return_ptr))(**((void **)v2 + 3) + 376))(&v67);
    uint64_t v55 = v5;
    sub_2171B7ABC(v5, (atomic_uint **)&v66);
    uint64_t v9 = v67;
    uint64_t v8 = v68;
    uint64_t v61 = v68;
    while (v9 != v8)
    {
      if (!v6)
      {
        uint64_t v6 = (char *)operator new(0x38uLL);
        uint64_t v10 = *((void *)this + 3);
        *(void *)uint64_t v6 = &unk_26C77CA08;
        *(_OWORD *)(v6 + 8) = 0u;
        *(_OWORD *)(v6 + 24) = 0u;
        sub_216981010((_DWORD *)v6 + 10, v58);
        sub_21698105C((_DWORD *)v6 + 11, v56);
        *((void *)v6 + 6) = v10;
        if (!v10)
        {
          *(void *)&long long v69 = "hd/dataSourceLegacyPrim.cpp";
          *((void *)&v69 + 1) = "Hd_DataSourceLegacyPrimvarsContainer";
          uint64_t v70 = 366;
          long long v71 = "pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Hd_DataSourceLegacyPrimvarsContainer::Hd_DataSo"
                "urceLegacyPrimvarsContainer(const SdfPath &, HdSceneDelegate *)";
          char v72 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v69, "_sceneDelegate", 0);
        }
        uint64_t v11 = (std::__shared_weak_count *)operator new(0x20uLL);
        v11->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C77CCF0;
        v11->__shared_owners_ = 0;
        v11->__shared_weak_owners_ = 0;
        v11[1].__vftable = (std::__shared_weak_count_vtbl *)v6;
        if (v7) {
          sub_216784EC4(v7);
        }
        char v7 = v11;
      }
      char v12 = *(unsigned char *)(v9 + 24);
      unint64_t v13 = v66;
      if ((v66 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v66 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v13 &= 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v14 = *(void *)(v9 + 16);
      if ((v14 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v14 &= 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v64 = v14;
      unint64_t v15 = *(void *)v9;
      if ((*(void *)v9 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v15 &= 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v17 = (uint64_t *)(v6 + 32);
      uint64_t v16 = *((void *)v6 + 4);
      if (v16)
      {
        uint64_t v19 = *((void *)v6 + 1);
        uint64_t v18 = *((void *)v6 + 2);
        unint64_t v65 = v15 & 7;
        if ((v15 & 7) != 0)
        {
          unint64_t v20 = v15 & 0xFFFFFFFFFFFFFFF8;
          if (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed)) {
            unint64_t v20 = v15;
          }
        }
        else
        {
          unint64_t v20 = v15;
        }
        *(void *)&long long v69 = v20;
        *((void *)&v69 + 1) = (v18 - v19) >> 5;
        unint64_t v23 = sub_2168CD6A4(v16, &v69, (uint64_t *)&v69);
        if ((v69 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v69 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        unint64_t v25 = v15;
        if (!v24)
        {
          uint64_t v21 = *((void *)v6 + 1) + 32 * v23[3];
          goto LABEL_36;
        }
      }
      else
      {
        uint64_t v21 = *((void *)v6 + 1);
        uint64_t v22 = *((void *)v6 + 2);
        if (v21 != v22)
        {
          while ((*(void *)v21 & 0xFFFFFFFFFFFFFFF8) != (v15 & 0xFFFFFFFFFFFFFFF8))
          {
            v21 += 32;
            if (v21 == v22) {
              goto LABEL_37;
            }
          }
        }
        if (v21 != v22)
        {
          unint64_t v65 = v15 & 7;
LABEL_36:
          unint64_t v63 = v15;
          goto LABEL_82;
        }
LABEL_37:
        unint64_t v25 = v15;
      }
      *(void *)&long long v69 = v25;
      unint64_t v26 = v25 & 7;
      char v62 = v12;
      unint64_t v63 = v25;
      if ((v25 & 7) != 0)
      {
        uint64_t v27 = (atomic_uint *)(v25 & 0xFFFFFFFFFFFFFFF8);
        if ((atomic_fetch_add_explicit(v27, 2u, memory_order_relaxed) & 1) == 0) {
          *(void *)&long long v69 = v27;
        }
      }
      LOBYTE(v71) = 0;
      *((void *)&v69 + 1) = 0;
      uint64_t v70 = 0;
      unint64_t v29 = *((void *)v6 + 2);
      unint64_t v28 = *((void *)v6 + 3);
      unint64_t v65 = v26;
      if (v29 >= v28)
      {
        uint64_t v31 = *((void *)v6 + 1);
        uint64_t v32 = (uint64_t)(v29 - v31) >> 5;
        if ((unint64_t)(v32 + 1) >> 59) {
          sub_21677CB10();
        }
        uint64_t v59 = v7;
        unint64_t v60 = v13;
        uint64_t v33 = v28 - v31;
        uint64_t v34 = v33 >> 4;
        if (v33 >> 4 <= (unint64_t)(v32 + 1)) {
          uint64_t v34 = v32 + 1;
        }
        if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v35 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v35 = v34;
        }
        if (v35)
        {
          if (v35 >> 59) {
            sub_21677CA1C();
          }
          unint64_t v36 = (char *)operator new(32 * v35);
        }
        else
        {
          unint64_t v36 = 0;
        }
        uint64_t v37 = (uint64_t)&v36[32 * v32];
        sub_2171BE5BC(v37, (uint64_t *)&v69);
        uint64_t v38 = (uint64_t *)*((void *)v6 + 1);
        unsigned __int8 v39 = (uint64_t *)*((void *)v6 + 2);
        if (v39 == v38)
        {
          uint64_t v30 = v37 + 32;
          *((void *)v6 + 1) = v37;
          *((void *)v6 + 2) = v37 + 32;
          *((void *)v6 + 3) = &v36[32 * v35];
        }
        else
        {
          uint64_t v40 = (uint64_t)&v36[32 * v32];
          do
          {
            v40 -= 32;
            v39 -= 4;
            sub_2171BE5BC(v40, v39);
          }
          while (v39 != v38);
          unsigned __int8 v39 = (uint64_t *)*((void *)v6 + 1);
          uint64_t v41 = (uint64_t *)*((void *)v6 + 2);
          uint64_t v30 = v37 + 32;
          *((void *)v6 + 1) = v40;
          *((void *)v6 + 2) = v37 + 32;
          *((void *)v6 + 3) = &v36[32 * v35];
          if (v41 != v39)
          {
            char v7 = v59;
            unint64_t v13 = v60;
            char v12 = v62;
            do
            {
              v41 -= 4;
              sub_2171BE64C(v41);
            }
            while (v41 != v39);
            if (!v39) {
              goto LABEL_61;
            }
LABEL_60:
            operator delete(v39);
            goto LABEL_61;
          }
        }
        char v7 = v59;
        unint64_t v13 = v60;
        char v12 = v62;
        if (!v39) {
          goto LABEL_61;
        }
        goto LABEL_60;
      }
      sub_2171BE5BC(v29, (uint64_t *)&v69);
      uint64_t v30 = v29 + 32;
      char v12 = v62;
LABEL_61:
      *((void *)v6 + 2) = v30;
      if ((v70 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v70 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((BYTE8(v69) & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v69 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((v69 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v69 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v42 = *((void *)v6 + 2);
      if ((unint64_t)(v42 - *((void *)v6 + 1)) >= 0x3E1 && !*v17)
      {
        uint64_t v43 = operator new(0x28uLL);
        unint64_t v44 = v13;
        _OWORD *v43 = 0u;
        v43[1] = 0u;
        *((_DWORD *)v43 + 8) = 1065353216;
        sub_21678A04C((uint64_t)v43, 0x20uLL);
        sub_2168CAE68((uint64_t *)v6 + 4, (uint64_t)v43);
        uint64_t v45 = *((void *)v6 + 1);
        uint64_t v42 = *((void *)v6 + 2);
        if (v42 != v45)
        {
          char v46 = v12;
          uint64_t v47 = 0;
          unint64_t v48 = 0;
          do
          {
            uint64_t v49 = *v17;
            uint64_t v50 = *(void *)(v45 + v47);
            if ((v50 & 7) != 0
              && (atomic_fetch_add_explicit((atomic_uint *volatile)(v50 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
            {
              v50 &= 0xFFFFFFFFFFFFFFF8;
            }
            *(void *)&long long v69 = v50;
            *((void *)&v69 + 1) = v48;
            sub_2168CD6A4(v49, &v69, (uint64_t *)&v69);
            if ((v69 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v69 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            ++v48;
            uint64_t v45 = *((void *)v6 + 1);
            uint64_t v42 = *((void *)v6 + 2);
            v47 += 32;
          }
          while (v48 < (v42 - v45) >> 5);
          unint64_t v13 = v44;
          char v12 = v46;
        }
      }
      uint64_t v21 = v42 - 32;
LABEL_82:
      if (v65) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v63 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v51 = *(void *)(v21 + 8);
      if ((v51 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v51 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      *(void *)(v21 + 8) = v13;
      uint64_t v52 = *(void *)(v21 + 16);
      if ((v52 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v52 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      *(void *)(v21 + 16) = v64;
      *(unsigned char *)(v21 + 24) = v12;
      v9 += 32;
      uint64_t v8 = v61;
    }
    uint64_t v2 = this;
    if ((v66 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v66 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    *(void *)&long long v69 = &v67;
    sub_2171C25BC((void ***)&v69);
    uint64_t v5 = v55 + 1;
  }
  while (v55 != 5);
  *(void *)&long long v69 = v6;
  *((void *)&v69 + 1) = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_2171B5D54((uint64_t *)this + 5, (uint64_t *)&v69);
  atomic_store(1u, (unsigned __int8 *)this + 32);
  void *v54 = v6;
  v54[1] = v7;
  if (*((void *)&v69 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v69 + 1));
  }
  return result;
}

void sub_2171B7930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v28);
  sub_2173255B0(v26, v24, v27);
  if ((a23 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  *(void *)(v29 - 128) = &a24;
  sub_2171C25BC((void ***)(v29 - 128));
  if (v25) {
    sub_216784EC4(v25);
  }
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::HdPrimvarSchemaTokens_StaticTokenType *sub_2171B7ABC@<X0>(int a1@<W0>, atomic_uint **a2@<X8>)
{
  switch(a1)
  {
    case 1:
      double result = (pxrInternal__aapl__pxrReserved__::HdPrimvarSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimvarSchemaTokens);
      if (!result) {
        double result = sub_2171BE530(&pxrInternal__aapl__pxrReserved__::HdPrimvarSchemaTokens);
      }
      unsigned __int8 v4 = (atomic_uint *)*((void *)result + 7);
      break;
    case 2:
      double result = (pxrInternal__aapl__pxrReserved__::HdPrimvarSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimvarSchemaTokens);
      if (!result) {
        double result = sub_2171BE530(&pxrInternal__aapl__pxrReserved__::HdPrimvarSchemaTokens);
      }
      unsigned __int8 v4 = (atomic_uint *)*((void *)result + 8);
      break;
    case 3:
      double result = (pxrInternal__aapl__pxrReserved__::HdPrimvarSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimvarSchemaTokens);
      if (!result) {
        double result = sub_2171BE530(&pxrInternal__aapl__pxrReserved__::HdPrimvarSchemaTokens);
      }
      unsigned __int8 v4 = (atomic_uint *)*((void *)result + 9);
      break;
    case 4:
      double result = (pxrInternal__aapl__pxrReserved__::HdPrimvarSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimvarSchemaTokens);
      if (!result) {
        double result = sub_2171BE530(&pxrInternal__aapl__pxrReserved__::HdPrimvarSchemaTokens);
      }
      unsigned __int8 v4 = (atomic_uint *)*((void *)result + 10);
      break;
    case 5:
      double result = (pxrInternal__aapl__pxrReserved__::HdPrimvarSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimvarSchemaTokens);
      if (!result) {
        double result = sub_2171BE530(&pxrInternal__aapl__pxrReserved__::HdPrimvarSchemaTokens);
      }
      unsigned __int8 v4 = (atomic_uint *)*((void *)result + 11);
      break;
    default:
      double result = (pxrInternal__aapl__pxrReserved__::HdPrimvarSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimvarSchemaTokens);
      if (!result) {
        double result = sub_2171BE530(&pxrInternal__aapl__pxrReserved__::HdPrimvarSchemaTokens);
      }
      unsigned __int8 v4 = (atomic_uint *)*((void *)result + 6);
      break;
  }
  *a2 = v4;
  if ((v4 & 7) != 0)
  {
    uint64_t v5 = (atomic_uint *)((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v5, 2u, memory_order_relaxed) & 1) == 0) {
      *a2 = v5;
    }
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim::_GetExtComputationPrimvarsDataSource(std::__shared_weak_count **this@<X0>, std::__shared_weak_count **a2@<X8>)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim *)this;
  if ((*((unsigned char *)this + 33) & 1) == 0)
  {
    uint64_t v3 = 0;
    unsigned __int8 v4 = 0;
    uint64_t v5 = 0;
    uint64_t v53 = this + 1;
    uint64_t v51 = (_DWORD *)this + 3;
    while (1)
    {
      (*(void (**)(uint64_t *__return_ptr))(**((void **)v2 + 3) + 336))(&v56);
      uint64_t v50 = v3;
      sub_2171B7ABC(v3, (atomic_uint **)&v55);
      uint64_t v7 = v56;
      uint64_t v6 = v57;
      uint64_t v52 = v57;
      if (v56 != v57) {
        break;
      }
LABEL_119:
      uint64_t v2 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim *)this;
      if ((v55 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v55 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      unint64_t v73 = (unint64_t)&v56;
      sub_2171C54E4((void ***)&v73);
      uint64_t v3 = v50 + 1;
      if (v50 == 5)
      {
        if (v5) {
          atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v45 = this[8];
        char v46 = v5;
        this[7] = v4;
        this[8] = v5;
        if (v45)
        {
          sub_216784EC4(v45);
          unsigned __int8 v4 = this[7];
          char v46 = this[8];
        }
        *((unsigned char *)this + 33) |= 1u;
        *a2 = v4;
        a2[1] = v46;
        if (v46) {
          atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v5) {
          sub_216784EC4(v5);
        }
        return;
      }
    }
    while (1)
    {
      if (!v4)
      {
        unsigned __int8 v4 = (std::__shared_weak_count *)operator new(0x30uLL);
        v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C77CD68;
        *(_OWORD *)&v4->__shared_owners_ = 0u;
        v4[1].std::__shared_count = 0u;
        sub_216981010(&v4[1].__shared_weak_owners_, v53);
        sub_21698105C((_DWORD *)&v4[1].__shared_weak_owners_ + 1, v51);
        uint64_t v8 = (std::__shared_weak_count *)operator new(0x20uLL);
        v8->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C77CF58;
        v8->__shared_owners_ = 0;
        v8->__shared_weak_owners_ = 0;
        v8[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
        if (v5) {
          sub_216784EC4(v5);
        }
        uint64_t v5 = v8;
      }
      unint64_t v58 = v55;
      if ((v55 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v55 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v58 &= 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v9 = *(void *)(v7 + 16);
      uint64_t v59 = v9;
      if ((v9 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v59 &= 0xFFFFFFFFFFFFFFF8;
      }
      sub_216981010(&v60, (_DWORD *)(v7 + 28));
      sub_21698105C(&v61, (_DWORD *)(v7 + 32));
      uint64_t v10 = *(void *)(v7 + 40);
      uint64_t v62 = v10;
      if ((v10 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v62 &= 0xFFFFFFFFFFFFFFF8;
      }
      long long v63 = *(_OWORD *)(v7 + 48);
      long long v65 = 0u;
      long long v66 = 0u;
      long long v64 = 0u;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v65);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v65 + 1);
      *((void *)&v65 + 1) = 0;
      unint64_t v67 = *(void *)v7;
      if ((v67 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v67 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v67 &= 0xFFFFFFFFFFFFFFF8;
      }
      long long v68 = v64;
      long long v64 = 0uLL;
      int v69 = v65;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(&v65);
      int v70 = DWORD1(v65);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)&v65 + 1);
      uint64_t v71 = *((void *)&v65 + 1);
      *((void *)&v65 + 1) = 0;
      long long v72 = v66;
      p_uint64_t shared_owners = &v4[1].__shared_owners_;
      uint64_t shared_owners = v4[1].__shared_owners_;
      if (!shared_owners) {
        break;
      }
      uint64_t v14 = v4->__shared_owners_;
      uint64_t shared_weak_owners = v4->__shared_weak_owners_;
      unint64_t v15 = v67;
      if ((v67 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v67 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v15 &= 0xFFFFFFFFFFFFFFF8;
      }
      unint64_t v73 = v15;
      uint64_t v74 = 0x6DB6DB6DB6DB6DB7 * ((shared_weak_owners - v14) >> 3);
      uint64_t v16 = sub_2168CD6A4(shared_owners, &v73, (uint64_t *)&v73);
      if ((v73 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v73 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (v17) {
        goto LABEL_33;
      }
      uint64_t v18 = v4->__shared_owners_ + 56 * v16[3];
LABEL_88:
      if ((v71 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v71 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v70);
      sub_21697C414(&v69);
      if ((BYTE8(v68) & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v68 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((v68 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v68 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((v67 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v67 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((BYTE8(v65) & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v65 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v65 + 1);
      sub_21697C414(&v65);
      if ((BYTE8(v64) & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v64 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((v64 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v64 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v41 = (unint64_t *)(v18 + 8);
      if (&v58 != (unint64_t *)(v18 + 8))
      {
        if ((*v41 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*v41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        *(void *)(v18 + 8) = v58;
        unint64_t v58 = 0;
        uint64_t v42 = *(void *)(v18 + 16);
        if ((v42 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v42 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        *(void *)(v18 + 16) = v59;
        uint64_t v59 = 0;
      }
      sub_21697DE94((int *)(v18 + 24), &v60);
      sub_21697DEEC((int *)(v18 + 28), &v61);
      if (&v58 == v41)
      {
        uint64_t v44 = v62;
        *(_OWORD *)(v18 + 40) = v63;
        if ((v44 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v44 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
      else
      {
        uint64_t v43 = *(void *)(v18 + 32);
        if ((v43 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v43 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        *(void *)(v18 + 32) = v62;
        uint64_t v62 = 0;
        *(_OWORD *)(v18 + 40) = v63;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v61);
      sub_21697C414(&v60);
      if ((v59 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v59 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((v58 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v58 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      v7 += 64;
      if (v7 == v6) {
        goto LABEL_119;
      }
    }
    uint64_t v18 = v4->__shared_owners_;
    uint64_t v19 = v4->__shared_weak_owners_;
    if (v18 != v19)
    {
      while ((*(void *)v18 & 0xFFFFFFFFFFFFFFF8) != (v67 & 0xFFFFFFFFFFFFFFF8))
      {
        v18 += 56;
        if (v18 == v19) {
          goto LABEL_33;
        }
      }
    }
    if (v18 != v19) {
      goto LABEL_88;
    }
LABEL_33:
    unint64_t v73 = v67;
    if ((v67 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v67 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v73 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v74 = v68;
    if ((v68 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v68 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v74 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v75 = *((void *)&v68 + 1);
    if ((BYTE8(v68) & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v68 + 1) & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v75 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_216981010(&v76, &v69);
    sub_21698105C(&v77, &v70);
    uint64_t v78 = v71;
    if ((v71 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v71 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v78 &= 0xFFFFFFFFFFFFFFF8;
    }
    long long v79 = v72;
    unint64_t v21 = v4->__shared_weak_owners_;
    unint64_t v20 = v4[1].__vftable;
    if (v21 < (unint64_t)v20)
    {
      sub_2171BE848(v4->__shared_weak_owners_, (uint64_t *)&v73);
      uint64_t v22 = v21 + 56;
LABEL_68:
      v4->__shared_weak_owners_ = v22;
      if ((v78 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v78 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v77);
      sub_21697C414(&v76);
      if ((v75 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v75 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((v74 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v74 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((v73 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v73 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v34 = v4->__shared_weak_owners_;
      if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v34 - v4->__shared_owners_) >> 3)) >= 0x20 && !*p_shared_owners)
      {
        unint64_t v35 = operator new(0x28uLL);
        *unint64_t v35 = 0u;
        v35[1] = 0u;
        *((_DWORD *)v35 + 8) = 1065353216;
        sub_21678A04C((uint64_t)v35, 0x20uLL);
        sub_2168CAE68(&v4[1].__shared_owners_, (uint64_t)v35);
        uint64_t v36 = v4->__shared_owners_;
        uint64_t v34 = v4->__shared_weak_owners_;
        if (v34 != v36)
        {
          uint64_t v37 = 0;
          unint64_t v38 = 0;
          do
          {
            uint64_t v39 = *p_shared_owners;
            unint64_t v40 = *(void *)(v36 + v37);
            if ((v40 & 7) != 0
              && (atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
            {
              v40 &= 0xFFFFFFFFFFFFFFF8;
            }
            unint64_t v73 = v40;
            uint64_t v74 = v38;
            sub_2168CD6A4(v39, &v73, (uint64_t *)&v73);
            if ((v73 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v73 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            ++v38;
            uint64_t v36 = v4->__shared_owners_;
            uint64_t v34 = v4->__shared_weak_owners_;
            v37 += 56;
          }
          while (v38 < 0x6DB6DB6DB6DB6DB7 * ((v34 - v36) >> 3));
          uint64_t v6 = v52;
        }
      }
      uint64_t v18 = v34 - 56;
      goto LABEL_88;
    }
    uint64_t v23 = v4->__shared_owners_;
    uint64_t v24 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v21 - v23) >> 3);
    unint64_t v25 = v24 + 1;
    if ((unint64_t)(v24 + 1) > 0x492492492492492) {
      sub_21677CB10();
    }
    unint64_t v26 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v20 - v23) >> 3);
    if (2 * v26 > v25) {
      unint64_t v25 = 2 * v26;
    }
    if (v26 >= 0x249249249249249) {
      unint64_t v27 = 0x492492492492492;
    }
    else {
      unint64_t v27 = v25;
    }
    v54 = v5;
    if (v27)
    {
      if (v27 > 0x492492492492492) {
        sub_21677CA1C();
      }
      unint64_t v28 = (char *)operator new(56 * v27);
    }
    else
    {
      unint64_t v28 = 0;
    }
    uint64_t v29 = (uint64_t)&v28[56 * v24];
    sub_2171BE848(v29, (uint64_t *)&v73);
    uint64_t v31 = (uint64_t *)v4->__shared_owners_;
    uint64_t v30 = (uint64_t *)v4->__shared_weak_owners_;
    if (v30 == v31)
    {
      uint64_t v22 = v29 + 56;
      v4->__shared_owners_ = v29;
      v4->__shared_weak_owners_ = v29 + 56;
      v4[1].__vftable = (std::__shared_weak_count_vtbl *)&v28[56 * v27];
    }
    else
    {
      uint64_t v32 = (uint64_t)&v28[56 * v24];
      do
      {
        v32 -= 56;
        v30 -= 7;
        sub_2171BE848(v32, v30);
      }
      while (v30 != v31);
      uint64_t v30 = (uint64_t *)v4->__shared_owners_;
      uint64_t v33 = v4->__shared_weak_owners_;
      uint64_t v22 = v29 + 56;
      v4->__shared_owners_ = v32;
      v4->__shared_weak_owners_ = v29 + 56;
      v4[1].__vftable = (std::__shared_weak_count_vtbl *)&v28[56 * v27];
      if ((uint64_t *)v33 != v30)
      {
        uint64_t v5 = v54;
        uint64_t v6 = v52;
        do
        {
          v33 -= 56;
          sub_2171BE93C(v33);
        }
        while ((uint64_t *)v33 != v30);
LABEL_66:
        if (v30) {
          operator delete(v30);
        }
        goto LABEL_68;
      }
    }
    uint64_t v5 = v54;
    uint64_t v6 = v52;
    goto LABEL_66;
  }
  uint64_t v47 = this[8];
  *a2 = this[7];
  a2[1] = v47;
  if (v47) {
    atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
  }
}

void sub_2171B865C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  if (v39) {
    sub_216784EC4(v39);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim::_GetMaterialBindingsDataSource@<X0>(pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr, void, char *))(**((void **)this + 3) + 264))(&v12, *((void *)this + 3), (char *)this + 8);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v12))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B96F90, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_267B96F90))
    {
      uint64_t v5 = (pxrInternal__aapl__pxrReserved__::HdMaterialBindingsSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdMaterialBindingsSchemaTokens);
      if (!v5) {
        uint64_t v5 = sub_2171C104C(&pxrInternal__aapl__pxrReserved__::HdMaterialBindingsSchemaTokens);
      }
      uint64_t v6 = *((void *)v5 + 1);
      qword_267B96F88 = v6;
      if ((v6 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        qword_267B96F88 &= 0xFFFFFFFFFFFFFFF8;
      }
      __cxa_atexit((void (*)(void *))sub_2171DB770, 0, &dword_216758000);
      __cxa_guard_release(&qword_267B96F90);
    }
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    sub_2171B89C4(&v12, &v7);
    long long v8 = v7;
    long long v7 = 0uLL;
    uint64_t v3 = (pxrInternal__aapl__pxrReserved__::HdMaterialBindingSchema::Builder *)pxrInternal__aapl__pxrReserved__::HdMaterialBindingSchema::Builder::SetPath(&v9, (uint64_t *)&v8);
    pxrInternal__aapl__pxrReserved__::HdMaterialBindingSchema::Builder::Build(v11, v3);
    long long v13 = *(_OWORD *)v11;
    *(_OWORD *)uint64_t v11 = 0uLL;
    if (*((void *)&v8 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v8 + 1));
    }
    if (*((void *)&v7 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v7 + 1));
    }
    if (v10) {
      sub_216784EC4(v10);
    }
    pxrInternal__aapl__pxrReserved__::HdMaterialBindingsSchema::BuildRetained(1uLL, &qword_267B96F88, (uint64_t *)&v13, v11);
    *(_OWORD *)a2 = *(_OWORD *)v11;
    if (*((void *)&v13 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v13 + 1));
    }
  }
  else
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v12 + 1);
  return sub_21697C414(&v12);
}

void sub_2171B8944(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_267B96F90);
  sub_21697B754((_DWORD *)(v1 - 56));
  _Unwind_Resume(a1);
}

void *sub_2171B89C4@<X0>(_DWORD *a1@<X0>, void *a2@<X8>)
{
  unsigned __int8 v4 = operator new(0x10uLL);
  *(void *)unsigned __int8 v4 = &unk_26C77C790;
  sub_216981010(v4 + 2, a1);
  sub_21698105C(v4 + 3, a1 + 1);

  return sub_2171C123C(a2, (uint64_t)v4);
}

double pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim::_GetXformDataSource@<D0>(pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim *this@<X0>, _OWORD *a2@<X8>)
{
  long long v16 = 0u;
  long long v17 = 0u;
  unsigned __int8 v4 = operator new(0xC8uLL);
  uint64_t v5 = (uint64_t)v4;
  uint64_t v6 = *((void *)this + 2);
  uint64_t v7 = *((void *)this + 3);
  void *v4 = &unk_26C77CFD0;
  v4[1] = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v4[1] &= 0xFFFFFFFFFFFFFFF8;
  }
  sub_216981010((_DWORD *)v4 + 4, (_DWORD *)this + 2);
  sub_21698105C((_DWORD *)(v5 + 20), (_DWORD *)this + 3);
  sub_2171C66E8(v5 + 24);
  *(void *)(v5 + 192) = v7;
  if (!v7)
  {
    *(void *)&long long v19 = "hd/dataSourceLegacyPrim.cpp";
    *((void *)&v19 + 1) = "Hd_DataSourceLegacyMatrixValue";
    uint64_t v20 = 455;
    unint64_t v21 = "pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Hd_DataSourceLegacyMatrixValue::Hd_DataSourceLegacyMa"
          "trixValue(const TfToken &, const SdfPath &, HdSceneDelegate *)";
    char v22 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v19, "_sceneDelegate", 0);
  }
  long long v8 = (std::__shared_weak_count *)operator new(0x20uLL);
  v8->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C77D060;
  v8->__shared_owners_ = 0;
  v8->__shared_weak_owners_ = 0;
  v8[1].__vftable = (std::__shared_weak_count_vtbl *)v5;
  uint64_t v14 = v5;
  unint64_t v15 = v8;
  uint64_t v9 = pxrInternal__aapl__pxrReserved__::HdXformSchema::Builder::SetMatrix(&v16, &v14);
  char v12 = 1;
  pxrInternal__aapl__pxrReserved__::HdRetainedTypedSampledDataSource<BOOL>::New(&v12, (uint64_t *)&v13);
  long long v19 = v13;
  long long v13 = 0uLL;
  uint64_t v10 = (pxrInternal__aapl__pxrReserved__::HdXformSchema::Builder *)pxrInternal__aapl__pxrReserved__::HdXformSchema::Builder::SetResetXformStack((uint64_t)v9, (uint64_t *)&v19);
  pxrInternal__aapl__pxrReserved__::HdXformSchema::Builder::Build(v10, &v18);
  if (*((void *)&v19 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v19 + 1));
  }
  if (*((void *)&v13 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v13 + 1));
  }
  if (v15) {
    sub_216784EC4(v15);
  }
  if (*((void *)&v17 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v17 + 1));
  }
  if (*((void *)&v16 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v16 + 1));
  }
  double result = *(double *)&v18;
  *a2 = v18;
  return result;
}

void sub_2171B8C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  *(void *)(v7 + 24) = &unk_26C77D038;
  if (*(_DWORD *)(v7 + 188) >= 2u) {
    free(*(void **)(v7 + 56));
  }
  if (*(_DWORD *)(v7 + 52) >= 2u) {
    free(*(void **)(v7 + 40));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v9);
  sub_21697C414(v8);
  uint64_t v11 = *(void *)(v7 + 8);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase((pxrInternal__aapl__pxrReserved__::HdDataSourceBase *)v7);
  operator delete(v12);
  sub_2171ACDE0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim::_GetMaterialDataSource@<X0>(pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v164 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr, void, char *))(**((void **)this + 3) + 272))(&v157, *((void *)this + 3), (char *)this + 8);
  if (sub_2171BA05C((pxrInternal__aapl__pxrReserved__::VtValue *)&v157))
  {
    if ((v158 & 4) != 0) {
      uint64_t v3 = (*(uint64_t (**)(uint64_t *))((v158 & 0xFFFFFFFFFFFFFFF8) + 168))(&v157);
    }
    else {
      uint64_t v3 = v157;
    }
    sub_2171BE9D0((uint64_t *)&v118, v3);
    memset(v120, 0, sizeof(v120));
    sub_216980EEC(v120, *(_DWORD **)(v3 + 24), *(_DWORD **)(v3 + 32), (uint64_t)(*(void *)(v3 + 32) - *(void *)(v3 + 24)) >> 3);
    v150 = 0;
    v151 = 0;
    unint64_t v152 = 0;
    v147 = 0;
    v148 = 0;
    unint64_t v149 = 0;
    v144 = 0;
    uint64_t v145 = 0;
    unint64_t v146 = 0;
    v141 = 0;
    v142 = 0;
    unint64_t v143 = 0;
    unsigned __int8 v4 = v118;
    if (v118 == v119)
    {
      v105 = 0;
      v103 = 0;
      unint64_t v104 = 0;
    }
    else
    {
      uint64_t v112 = a2;
      do
      {
        if (v4[8] != v4[9])
        {
          uint64_t v5 = (uint64_t *)(v4 + 4);
          uint64_t v6 = v151;
          if ((unint64_t)v151 >= v152)
          {
            long long v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216973984(&v150, v5);
          }
          else
          {
            uint64_t v7 = *v5;
            void *v151 = *v5;
            if ((v7 & 7) != 0
              && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
            {
              *v6 &= 0xFFFFFFFFFFFFFFF8;
            }
            long long v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)(v6 + 1);
          }
          v151 = v8;
          uint64_t v9 = v4[8];
          uint64_t v113 = v4[9];
          if (v9 != v113)
          {
            do
            {
              int64x2_t v139 = 0uLL;
              v140[0] = 0;
              int64x2_t v137 = 0uLL;
              v138[0] = 0;
              v136[0] = 0;
              v136[1] = 0;
              uint64_t v135 = (uint64_t *)v136;
              uint64_t v10 = (uint64_t *)v9[2];
              if (v10 != v9 + 3)
              {
                do
                {
                  if ((v10[4] & 0xFFFFFFFFFFFFFFF8) != 0) {
                    EmptyString = (const std::string *)((v10[4] & 0xFFFFFFFFFFFFFFF8) + 16);
                  }
                  else {
                    EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
                  }
                  char v12 = (pxrInternal__aapl__pxrReserved__::HdMaterialNodeParameterSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdMaterialNodeParameterSchemaTokens);
                  if (!v12) {
                    char v12 = sub_2171BFB1C(&pxrInternal__aapl__pxrReserved__::HdMaterialNodeParameterSchemaTokens);
                  }
                  if ((*((void *)v12 + 1) & 0xFFFFFFFFFFFFFFF8) != 0) {
                    long long v13 = (uint64_t *)((*((void *)v12 + 1) & 0xFFFFFFFFFFFFFFF8) + 16);
                  }
                  else {
                    long long v13 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
                  }
                  pxrInternal__aapl__pxrReserved__::SdfPath::StripPrefixNamespace(EmptyString, (uint64_t)v13, (std::string *)__p);
                  if (__p[24])
                  {
                    unint64_t v15 = (void *)sub_21695C470((pxrInternal__aapl__pxrReserved__::VtValue *)(v10 + 5));
                    long long v16 = sub_2171BF73C(&v135, (uint64_t)__p);
                    long long v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_2168D2318(v16 + 2, v15);
                  }
                  else
                  {
                    if ((v10[4] & 0xFFFFFFFFFFFFFFF8) != 0) {
                      long long v17 = (uint64_t *)((v10[4] & 0xFFFFFFFFFFFFFFF8) + 16);
                    }
                    else {
                      long long v17 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v14);
                    }
                    long long v18 = sub_2171BF73C(&v135, (uint64_t)v17);
                    long long v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_2168EC6DC(v18, v10 + 5);
                  }
                  if ((__p[23] & 0x80000000) != 0) {
                    operator delete(*(void **)__p);
                  }
                  long long v19 = (uint64_t *)v10[1];
                  if (v19)
                  {
                    do
                    {
                      uint64_t v20 = v19;
                      long long v19 = (uint64_t *)*v19;
                    }
                    while (v19);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v20 = (uint64_t *)v10[2];
                      BOOL v21 = *v20 == (void)v10;
                      uint64_t v10 = v20;
                    }
                    while (!v21);
                  }
                  uint64_t v10 = v20;
                }
                while (v20 != v9 + 3);
                char v22 = v135;
                if (v135 != (uint64_t *)v136)
                {
                  do
                  {
                    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v123);
                    uint64_t v23 = v139.i64[1];
                    if (v139.i64[1] >= v140[0])
                    {
                      uint64_t v26 = (v139.i64[1] - v139.i64[0]) >> 3;
                      if ((unint64_t)(v26 + 1) >> 61) {
                        sub_21677CB10();
                      }
                      unint64_t v27 = (v140[0] - v139.i64[0]) >> 2;
                      if (v27 <= v26 + 1) {
                        unint64_t v27 = v26 + 1;
                      }
                      if (v140[0] - v139.i64[0] >= 0x7FFFFFFFFFFFFFF8uLL) {
                        unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v28 = v27;
                      }
                      *(void *)&long long v160 = v140;
                      if (v28) {
                        uint64_t v29 = (char *)sub_21677CB28((uint64_t)v140, v28);
                      }
                      else {
                        uint64_t v29 = 0;
                      }
                      uint64_t v30 = &v29[8 * v26];
                      uint64_t v31 = &v29[8 * v28];
                      *(void *)&__p[24] = v31;
                      *(void *)uint64_t v30 = v123.n128_u64[0];
                      unint64_t v25 = v30 + 8;
                      v123.n128_u64[0] = 0;
                      *(void *)&__p[16] = v30 + 8;
                      uint64_t v32 = (void *)v139.i64[1];
                      uint64_t v33 = (void *)v139.i64[0];
                      if (v139.i64[1] == v139.i64[0])
                      {
                        int64x2_t v35 = vdupq_n_s64(v139.u64[1]);
                      }
                      else
                      {
                        do
                        {
                          uint64_t v34 = *--v32;
                          *((void *)v30 - 1) = v34;
                          v30 -= 8;
                          *uint64_t v32 = 0;
                        }
                        while (v32 != v33);
                        int64x2_t v35 = v139;
                        unint64_t v25 = *(void **)&__p[16];
                        uint64_t v31 = *(char **)&__p[24];
                      }
                      v139.i64[0] = (uint64_t)v30;
                      v139.i64[1] = (uint64_t)v25;
                      *(int64x2_t *)&__p[8] = v35;
                      uint64_t v36 = v140[0];
                      v140[0] = v31;
                      *(void *)&__p[24] = v36;
                      *(void *)std::string __p = v35.i64[0];
                      sub_2168BE9D8((uint64_t)__p);
                      unint64_t v24 = v123.n128_u64[0];
                    }
                    else
                    {
                      unint64_t v24 = 0;
                      *(void *)v139.i64[1] = v123.n128_u64[0];
                      unint64_t v25 = (void *)(v23 + 8);
                      v123.n128_u64[0] = 0;
                    }
                    v139.i64[1] = (uint64_t)v25;
                    if ((v24 & 7) != 0) {
                      atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                    }
                    __n128 v123 = 0u;
                    long long v124 = 0u;
                    sub_2171BF8A4(v22 + 7, &v131);
                    __n128 v153 = (__n128)v131;
                    long long v131 = 0uLL;
                    uint64_t v37 = pxrInternal__aapl__pxrReserved__::HdMaterialNodeParameterSchema::Builder::SetValue(&v123, (uint64_t *)&v153);
                    if (v22[9])
                    {
                      sub_2171A3CE4(v22 + 9, &v133);
                      long long v38 = v133;
                    }
                    else
                    {
                      long long v38 = 0uLL;
                    }
                    long long v134 = v38;
                    long long v133 = 0uLL;
                    uint64_t v39 = (pxrInternal__aapl__pxrReserved__::HdMaterialNodeParameterSchema::Builder *)pxrInternal__aapl__pxrReserved__::HdMaterialNodeParameterSchema::Builder::SetColorSpace((uint64_t)v37, (uint64_t *)&v134);
                    pxrInternal__aapl__pxrReserved__::HdMaterialNodeParameterSchema::Builder::Build(v39, v162);
                    long long v40 = v162[0];
                    v162[0] = 0uLL;
                    uint64_t v41 = v137.i64[1];
                    if (v137.i64[1] >= v138[0])
                    {
                      long long v114 = v40;
                      uint64_t v42 = (v137.i64[1] - v137.i64[0]) >> 4;
                      unint64_t v43 = v42 + 1;
                      if ((unint64_t)(v42 + 1) >> 60) {
                        sub_21677CB10();
                      }
                      uint64_t v44 = v138[0] - v137.i64[0];
                      if ((v138[0] - v137.i64[0]) >> 3 > v43) {
                        unint64_t v43 = v44 >> 3;
                      }
                      if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0) {
                        unint64_t v45 = 0xFFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v45 = v43;
                      }
                      *(void *)&long long v160 = v138;
                      char v46 = (char *)sub_216787EE0((uint64_t)v138, v45);
                      uint64_t v47 = &v46[16 * v42];
                      *(void *)std::string __p = v46;
                      *(void *)&__p[8] = v47;
                      *(void *)&__p[24] = &v46[16 * v48];
                      *(_OWORD *)uint64_t v47 = v114;
                      *(void *)&__p[16] = v47 + 16;
                      sub_2171A640C(v137.i64, __p);
                      uint64_t v49 = v137.i64[1];
                      sub_216788028((void **)__p);
                      v137.i64[1] = v49;
                      if (*((void *)&v162[0] + 1)) {
                        sub_216784EC4(*((std::__shared_weak_count **)&v162[0] + 1));
                      }
                    }
                    else
                    {
                      *(_OWORD *)v137.i64[1] = v40;
                      v137.i64[1] = v41 + 16;
                    }
                    if (*((void *)&v134 + 1)) {
                      sub_216784EC4(*((std::__shared_weak_count **)&v134 + 1));
                    }
                    if (*((void *)&v133 + 1)) {
                      sub_216784EC4(*((std::__shared_weak_count **)&v133 + 1));
                    }
                    if (v153.n128_u64[1]) {
                      sub_216784EC4((std::__shared_weak_count *)v153.n128_u64[1]);
                    }
                    if (*((void *)&v131 + 1)) {
                      sub_216784EC4(*((std::__shared_weak_count **)&v131 + 1));
                    }
                    if (*((void *)&v124 + 1)) {
                      sub_216784EC4(*((std::__shared_weak_count **)&v124 + 1));
                    }
                    if (v123.n128_u64[1]) {
                      sub_216784EC4((std::__shared_weak_count *)v123.n128_u64[1]);
                    }
                    uint64_t v50 = (uint64_t *)v22[1];
                    if (v50)
                    {
                      do
                      {
                        uint64_t v51 = v50;
                        uint64_t v50 = (uint64_t *)*v50;
                      }
                      while (v50);
                    }
                    else
                    {
                      do
                      {
                        uint64_t v51 = (uint64_t *)v22[2];
                        BOOL v21 = *v51 == (void)v22;
                        char v22 = v51;
                      }
                      while (!v21);
                    }
                    char v22 = v51;
                  }
                  while (v51 != (uint64_t *)v136);
                }
              }
              long long v131 = 0u;
              long long v132 = 0u;
              uint64_t v163 = 0x800000000;
              uint64_t v161 = 0x800000000;
              uint64_t v53 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v4[5];
              uint64_t v52 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v4[6];
              if (v53 == v52)
              {
                int v60 = 0;
                int v61 = 0;
                unsigned int v62 = 8;
              }
              else
              {
                do
                {
                  if (*((void *)v53 + 2) == *v9)
                  {
                    Token = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfPath::GetToken(v53);
                    uint64_t v55 = *(void *)Token;
                    *(void *)&long long v122 = v55;
                    if ((v55 & 7) != 0
                      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v55 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
                    {
                      *(void *)&long long v122 = v122 & 0xFFFFFFFFFFFFFFF8;
                    }
                    if ((*((void *)v53 + 1) & 0xFFFFFFFFFFFFFFF8) == 0) {
                      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Token);
                    }
                    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v121);
                    __n128 v123 = 0u;
                    long long v124 = 0u;
                    sub_2171A3CE4((uint64_t *)&v122, &v130);
                    long long v133 = v130;
                    long long v130 = 0uLL;
                    uint64_t v56 = pxrInternal__aapl__pxrReserved__::HdMaterialConnectionSchema::Builder::SetUpstreamNodePath(&v123, (uint64_t *)&v133);
                    sub_2171A3CE4((uint64_t *)&v121, &v128);
                    long long v129 = v128;
                    long long v128 = 0uLL;
                    uint64_t v57 = (pxrInternal__aapl__pxrReserved__::HdMaterialConnectionSchema::Builder *)pxrInternal__aapl__pxrReserved__::HdMaterialConnectionSchema::Builder::SetUpstreamNodeOutputName((uint64_t)v56, (uint64_t *)&v129);
                    pxrInternal__aapl__pxrReserved__::HdMaterialConnectionSchema::Builder::Build(v57, &v134);
                    __n128 v153 = (__n128)v134;
                    long long v134 = 0uLL;
                    if (*((void *)&v129 + 1)) {
                      sub_216784EC4(*((std::__shared_weak_count **)&v129 + 1));
                    }
                    if (*((void *)&v128 + 1)) {
                      sub_216784EC4(*((std::__shared_weak_count **)&v128 + 1));
                    }
                    if (*((void *)&v133 + 1)) {
                      sub_216784EC4(*((std::__shared_weak_count **)&v133 + 1));
                    }
                    if (*((void *)&v130 + 1)) {
                      sub_216784EC4(*((std::__shared_weak_count **)&v130 + 1));
                    }
                    if (*((void *)&v124 + 1)) {
                      sub_216784EC4(*((std::__shared_weak_count **)&v124 + 1));
                    }
                    unint64_t v58 = (pxrInternal__aapl__pxrReserved__::TfToken *)v123.n128_u64[1];
                    if (v123.n128_u64[1]) {
                      sub_216784EC4((std::__shared_weak_count *)v123.n128_u64[1]);
                    }
                    if ((*((void *)v53 + 3) & 0xFFFFFFFFFFFFFFF8) == 0) {
                      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v58);
                    }
                    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v123);
                    uint64_t v59 = sub_2171BF910((uint64_t *)&v131, (uint64_t *)&v123);
                    sub_2171C09A4((uint64_t)v59, (long long *)&v153);
                    if ((v123.n128_u8[0] & 7) != 0) {
                      atomic_fetch_add_explicit((atomic_uint *volatile)(v123.n128_u64[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                    }
                    if (v153.n128_u64[1]) {
                      sub_216784EC4((std::__shared_weak_count *)v153.n128_u64[1]);
                    }
                    if ((v121 & 7) != 0) {
                      atomic_fetch_add_explicit((atomic_uint *volatile)(v121 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                    }
                    if ((v122 & 7) != 0) {
                      atomic_fetch_add_explicit((atomic_uint *volatile)(v122 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
                    }
                  }
                  uint64_t v53 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v53 + 32);
                }
                while (v53 != v52);
                int v61 = (uint64_t *)*((void *)&v131 + 1);
                int v60 = (uint64_t *)v131;
                unsigned int v62 = HIDWORD(v163);
              }
              unsigned int v63 = 954437177 * ((unint64_t)((char *)v61 - (char *)v60) >> 4);
              if (v62 < v63)
              {
                sub_2171C0AB8((uint64_t)v162, v63);
                int v61 = (uint64_t *)*((void *)&v131 + 1);
                int v60 = (uint64_t *)v131;
                unsigned int v63 = 954437177 * ((*((void *)&v131 + 1) - (void)v131) >> 4);
              }
              if (HIDWORD(v161) < v63)
              {
                sub_2171C0A24((uint64_t)__p, v63);
                int v61 = (uint64_t *)*((void *)&v131 + 1);
                int v60 = (uint64_t *)v131;
              }
              if (v60 != v61)
              {
                long long v64 = v60 + 1;
                do
                {
                  long long v65 = v64 - 1;
                  sub_2171C0B80((uint64_t)v162, v64 - 1);
                  LODWORD(v133) = *((_DWORD *)v64 + 32);
                  long long v66 = v64;
                  if (*((_DWORD *)v64 + 33) >= 9u) {
                    long long v66 = (uint64_t *)*v64;
                  }
                  *(void *)&long long v134 = v66;
                  sub_2171BFA00((unsigned int *)&v133, &v134, &v153);
                  __n128 v123 = v153;
                  __n128 v153 = 0uLL;
                  sub_2171C0C10((uint64_t)__p, &v123);
                  if (v123.n128_u64[1]) {
                    sub_216784EC4((std::__shared_weak_count *)v123.n128_u64[1]);
                  }
                  if (v153.n128_u64[1]) {
                    sub_216784EC4((std::__shared_weak_count *)v153.n128_u64[1]);
                  }
                  v64 += 18;
                }
                while (v65 + 18 != v61);
              }
              unint64_t v67 = pxrInternal__aapl__pxrReserved__::SdfPath::GetToken((pxrInternal__aapl__pxrReserved__::SdfPath *)v9);
              long long v68 = v145;
              if ((unint64_t)v145 >= v146)
              {
                int v70 = sub_216973984(&v144, v67);
              }
              else
              {
                uint64_t v69 = *v67;
                *uint64_t v145 = *v67;
                if ((v69 & 7) != 0
                  && (atomic_fetch_add_explicit((atomic_uint *volatile)(v69 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
                {
                  *v68 &= 0xFFFFFFFFFFFFFFF8;
                }
                int v70 = (char *)(v68 + 1);
              }
              uint64_t v145 = v70;
              long long v126 = 0u;
              long long v127 = 0u;
              long long v124 = 0u;
              long long v125 = 0u;
              __n128 v123 = 0u;
              pxrInternal__aapl__pxrReserved__::HdRetainedContainerDataSource::New((v139.i64[1] - v139.i64[0]) >> 3, (uint64_t *)v139.i64[0], (uint64_t *)v137.i64[0], &v130);
              long long v133 = v130;
              long long v130 = 0uLL;
              uint64_t v71 = pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchema::Builder::SetParameters(&v123, (uint64_t *)&v133);
              if (HIDWORD(v163) >= 9) {
                long long v72 = *(uint64_t **)&v162[0];
              }
              else {
                long long v72 = (uint64_t *)v162;
              }
              if (HIDWORD(v161) >= 9) {
                unint64_t v73 = *(uint64_t **)__p;
              }
              else {
                unint64_t v73 = (uint64_t *)__p;
              }
              pxrInternal__aapl__pxrReserved__::HdRetainedContainerDataSource::New(v163, v72, v73, &v128);
              long long v129 = v128;
              long long v128 = 0uLL;
              uint64_t v74 = pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchema::Builder::SetInputConnections((uint64_t)v71, (uint64_t *)&v129);
              sub_2171A3CE4(v9 + 1, &v121);
              long long v122 = v121;
              long long v121 = 0uLL;
              uint64_t v75 = (pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchema::Builder *)pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchema::Builder::SetNodeIdentifier(v74, (uint64_t *)&v122);
              pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchema::Builder::Build(v75, &v134);
              long long v76 = v134;
              long long v134 = 0uLL;
              int v77 = v142;
              if ((unint64_t)v142 >= v143)
              {
                long long v115 = v76;
                uint64_t v78 = ((char *)v142 - (char *)v141) >> 4;
                unint64_t v79 = v78 + 1;
                if ((unint64_t)(v78 + 1) >> 60) {
                  sub_21677CB10();
                }
                uint64_t v80 = v143 - (void)v141;
                if ((uint64_t)(v143 - (void)v141) >> 3 > v79) {
                  unint64_t v79 = v80 >> 3;
                }
                if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v81 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v81 = v79;
                }
                v156 = &v143;
                uint64_t v82 = (char *)sub_216787EE0((uint64_t)&v143, v81);
                uint64_t v83 = &v82[16 * v78];
                v153.n128_u64[0] = (unint64_t)v82;
                v153.n128_u64[1] = (unint64_t)v83;
                v155 = &v82[16 * v84];
                *(_OWORD *)uint64_t v83 = v115;
                v154 = v83 + 16;
                sub_2171A640C((uint64_t *)&v141, &v153);
                v85 = v142;
                sub_216788028((void **)&v153);
                v142 = v85;
                if (*((void *)&v134 + 1)) {
                  sub_216784EC4(*((std::__shared_weak_count **)&v134 + 1));
                }
              }
              else
              {
                long long *v142 = v76;
                v142 = v77 + 1;
              }
              if (*((void *)&v122 + 1)) {
                sub_216784EC4(*((std::__shared_weak_count **)&v122 + 1));
              }
              if (*((void *)&v121 + 1)) {
                sub_216784EC4(*((std::__shared_weak_count **)&v121 + 1));
              }
              if (*((void *)&v129 + 1)) {
                sub_216784EC4(*((std::__shared_weak_count **)&v129 + 1));
              }
              if (*((void *)&v128 + 1)) {
                sub_216784EC4(*((std::__shared_weak_count **)&v128 + 1));
              }
              if (*((void *)&v133 + 1)) {
                sub_216784EC4(*((std::__shared_weak_count **)&v133 + 1));
              }
              if (*((void *)&v130 + 1)) {
                sub_216784EC4(*((std::__shared_weak_count **)&v130 + 1));
              }
              if (*((void *)&v127 + 1)) {
                sub_216784EC4(*((std::__shared_weak_count **)&v127 + 1));
              }
              if (*((void *)&v126 + 1)) {
                sub_216784EC4(*((std::__shared_weak_count **)&v126 + 1));
              }
              if (*((void *)&v125 + 1)) {
                sub_216784EC4(*((std::__shared_weak_count **)&v125 + 1));
              }
              if (*((void *)&v124 + 1)) {
                sub_216784EC4(*((std::__shared_weak_count **)&v124 + 1));
              }
              if (v123.n128_u64[1]) {
                sub_216784EC4((std::__shared_weak_count *)v123.n128_u64[1]);
              }
              sub_2171C0D90((uint64_t)__p);
              sub_2171C0DD0((uint64_t)v162);
              uint64_t v86 = *((void *)&v132 + 1);
              *((void *)&v132 + 1) = 0;
              if (v86)
              {
                v87 = (void *)sub_2168C08A0(v86);
                operator delete(v87);
              }
              *(void *)std::string __p = &v131;
              sub_2171BFE8C((void ***)__p);
              sub_2171C0E4C((uint64_t)&v135, v136[0]);
              *(void *)std::string __p = &v137;
              sub_216787968((void ***)__p);
              *(void *)std::string __p = &v139;
              sub_216889A04((void ***)__p);
              v9 += 5;
            }
            while (v9 != v113);
            uint64_t v9 = v4[9];
          }
          __n128 v123 = 0u;
          long long v124 = 0u;
          uint64_t v88 = pxrInternal__aapl__pxrReserved__::SdfPath::GetToken((pxrInternal__aapl__pxrReserved__::SdfPath *)(v9 - 5));
          sub_2171A3CE4(v88, &v131);
          __n128 v153 = (__n128)v131;
          long long v131 = 0uLL;
          uint64_t v89 = pxrInternal__aapl__pxrReserved__::HdMaterialConnectionSchema::Builder::SetUpstreamNodePath(&v123, (uint64_t *)&v153);
          sub_2171A3CE4(v151 - 1, &v137);
          int64x2_t v139 = v137;
          int64x2_t v137 = 0uLL;
          v90 = (pxrInternal__aapl__pxrReserved__::HdMaterialConnectionSchema::Builder *)pxrInternal__aapl__pxrReserved__::HdMaterialConnectionSchema::Builder::SetUpstreamNodeOutputName((uint64_t)v89, v139.i64);
          pxrInternal__aapl__pxrReserved__::HdMaterialConnectionSchema::Builder::Build(v90, v162);
          long long v91 = v162[0];
          v162[0] = 0uLL;
          unint64_t v92 = v148;
          if ((unint64_t)v148 >= v149)
          {
            long long v116 = v91;
            uint64_t v93 = (v148 - v147) >> 4;
            unint64_t v94 = v93 + 1;
            if ((unint64_t)(v93 + 1) >> 60) {
              sub_21677CB10();
            }
            uint64_t v95 = v149 - (void)v147;
            if ((uint64_t)(v149 - (void)v147) >> 3 > v94) {
              unint64_t v94 = v95 >> 3;
            }
            if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v96 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v96 = v94;
            }
            *(void *)&long long v160 = &v149;
            v97 = (char *)sub_216787EE0((uint64_t)&v149, v96);
            uint64_t v98 = &v97[16 * v93];
            *(void *)std::string __p = v97;
            *(void *)&__p[8] = v98;
            *(void *)&__p[24] = &v97[16 * v99];
            *(_OWORD *)uint64_t v98 = v116;
            *(void *)&__p[16] = v98 + 16;
            sub_2171A640C((uint64_t *)&v147, __p);
            uint64_t v100 = v148;
            sub_216788028((void **)__p);
            v148 = v100;
            if (*((void *)&v162[0] + 1)) {
              sub_216784EC4(*((std::__shared_weak_count **)&v162[0] + 1));
            }
          }
          else
          {
            *(_OWORD *)v148 = v91;
            v148 = v92 + 16;
          }
          if (v139.i64[1]) {
            sub_216784EC4((std::__shared_weak_count *)v139.i64[1]);
          }
          if (v137.i64[1]) {
            sub_216784EC4((std::__shared_weak_count *)v137.i64[1]);
          }
          if (v153.n128_u64[1]) {
            sub_216784EC4((std::__shared_weak_count *)v153.n128_u64[1]);
          }
          if (*((void *)&v131 + 1)) {
            sub_216784EC4(*((std::__shared_weak_count **)&v131 + 1));
          }
          if (*((void *)&v124 + 1)) {
            sub_216784EC4(*((std::__shared_weak_count **)&v124 + 1));
          }
          if (v123.n128_u64[1]) {
            sub_216784EC4((std::__shared_weak_count *)v123.n128_u64[1]);
          }
        }
        uint64_t v101 = v4[1];
        if (v101)
        {
          do
          {
            uint64_t v102 = (void **)v101;
            uint64_t v101 = (void *)*v101;
          }
          while (v101);
        }
        else
        {
          do
          {
            uint64_t v102 = (void **)v4[2];
            BOOL v21 = *v102 == v4;
            unsigned __int8 v4 = v102;
          }
          while (!v21);
        }
        unsigned __int8 v4 = v102;
      }
      while (v102 != v119);
      v103 = (uint64_t *)v144;
      unint64_t v104 = v145;
      v105 = v141;
      a2 = v112;
    }
    pxrInternal__aapl__pxrReserved__::HdRetainedContainerDataSource::New(v104 - v103, v103, v105, __p);
    __n128 v123 = *(__n128 *)__p;
    pxrInternal__aapl__pxrReserved__::HdRetainedContainerDataSource::New(((char *)v151 - v150) >> 3, (uint64_t *)v150, (uint64_t *)v147, __p);
    v162[0] = *(_OWORD *)__p;
    long long v160 = 0u;
    memset(__p, 0, sizeof(__p));
    uint64_t v106 = pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchema::Builder::SetNodes(__p, (uint64_t *)&v123);
    uint64_t v107 = (pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchema::Builder *)pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchema::Builder::SetTerminals((uint64_t)v106, (uint64_t *)v162);
    pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchema::Builder::Build(v107, &v131);
    __n128 v153 = (__n128)v131;
    long long v131 = 0uLL;
    if (*((void *)&v160 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v160 + 1));
    }
    if (*(void *)&__p[24]) {
      sub_216784EC4(*(std::__shared_weak_count **)&__p[24]);
    }
    if (*(void *)&__p[8]) {
      sub_216784EC4(*(std::__shared_weak_count **)&__p[8]);
    }
    v108 = (pxrInternal__aapl__pxrReserved__::HdMaterialSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdMaterialSchemaTokens);
    if (!v108) {
      v108 = sub_2171C20D0(&pxrInternal__aapl__pxrReserved__::HdMaterialSchemaTokens);
    }
    uint64_t v109 = *((void *)v108 + 1);
    *(void *)&long long v131 = v109;
    if ((v109 & 7) != 0)
    {
      uint64_t v110 = (atomic_uint *)(v109 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v110, 2u, memory_order_relaxed) & 1) == 0) {
        *(void *)&long long v131 = v110;
      }
    }
    pxrInternal__aapl__pxrReserved__::HdMaterialSchema::BuildRetained(1uLL, (uint64_t *)&v131, (uint64_t *)&v153, __p);
    long long v117 = *(_OWORD *)__p;
    if ((v131 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v131 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if (v153.n128_u64[1]) {
      sub_216784EC4((std::__shared_weak_count *)v153.n128_u64[1]);
    }
    if (*((void *)&v162[0] + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v162[0] + 1));
    }
    if (v123.n128_u64[1]) {
      sub_216784EC4((std::__shared_weak_count *)v123.n128_u64[1]);
    }
    *(void *)std::string __p = &v141;
    sub_216787968((void ***)__p);
    *(void *)std::string __p = &v144;
    sub_216889A04((void ***)__p);
    *(void *)std::string __p = &v147;
    sub_216787968((void ***)__p);
    *(void *)std::string __p = &v150;
    sub_216889A04((void ***)__p);
    *(_OWORD *)a2 = v117;
    *(void *)std::string __p = v120;
    sub_216981168((void ***)__p);
    sub_2171BF6E0((uint64_t)&v118, v119[0]);
  }
  else
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  return sub_2168EE084((uint64_t)&v157);
}

void sub_2171B9BF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  if (STACK[0x218]) {
    sub_216784EC4((std::__shared_weak_count *)STACK[0x218]);
  }
  uint64_t v74 = *(std::__shared_weak_count **)(v72 - 184);
  if (v74) {
    sub_216784EC4(v74);
  }
  if (a28) {
    sub_216784EC4((std::__shared_weak_count *)a28);
  }
  a27 = (uint64_t)&a63;
  sub_216787968((void ***)&a27);
  a27 = (uint64_t)&a66;
  sub_216889A04((void ***)&a27);
  a27 = (uint64_t)&a69;
  sub_216787968((void ***)&a27);
  a27 = (uint64_t)&a72;
  sub_216889A04((void ***)&a27);
  sub_2171BA0E8((uint64_t)&a17);
  sub_2168EE084((uint64_t)&STACK[0x240]);
  _Unwind_Resume(a1);
}

uint64_t sub_2171BA05C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000002174C64ACLL & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;

  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C77D0C8);
}

uint64_t sub_2171BA0E8(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 24);
  sub_216981168(&v3);
  sub_2171BF6E0(a1, *(void **)(a1 + 8));
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim::_GetIntegratorDataSource@<X0>(pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim *this@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)this + 3);
  unsigned __int8 v4 = (char *)this + 8;
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::HdIntegratorSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdIntegratorSchemaTokens);
  if (!v5) {
    uint64_t v5 = sub_2171C2300(&pxrInternal__aapl__pxrReserved__::HdIntegratorSchemaTokens);
  }
  (*(void (**)(uint64_t **__return_ptr, uint64_t, char *, uint64_t))(*(void *)v3 + 120))(&v61, v3, v4, (uint64_t)v5 + 8);
  int v6 = sub_2171C70B4((pxrInternal__aapl__pxrReserved__::VtValue *)&v61);
  long long v7 = 0uLL;
  if (v6)
  {
    if ((v62 & 4) != 0) {
      long long v8 = (uint64_t *)(*(uint64_t (**)(uint64_t **, __n128))((v62 & 0xFFFFFFFFFFFFFFF8) + 168))(&v61, (__n128)0);
    }
    else {
      long long v8 = v61;
    }
    uint64_t v57 = *v8;
    if ((v57 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v57 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v57 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_2171BF22C((uint64_t *)&v58, (uint64_t)(v8 + 1));
    sub_2171C7194(v60, (uint64_t)(v8 + 4));
    v54 = 0;
    uint64_t v55 = 0;
    unint64_t v56 = 0;
    uint64_t v51 = 0;
    uint64_t v52 = 0;
    unint64_t v53 = 0;
    uint64_t v9 = v58;
    if (v58 == v59)
    {
      uint64_t v30 = 0;
      unint64_t v28 = 0;
      uint64_t v29 = 0;
    }
    else
    {
      do
      {
        uint64_t v10 = (uint64_t *)(v9 + 4);
        uint64_t v11 = v55;
        if ((unint64_t)v55 >= v56)
        {
          long long v13 = sub_216973984(&v54, v10);
        }
        else
        {
          uint64_t v12 = *v10;
          void *v55 = *v10;
          if ((v12 & 7) != 0
            && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
          {
            *v11 &= 0xFFFFFFFFFFFFFFF8;
          }
          long long v13 = (char *)(v11 + 1);
        }
        uint64_t v55 = v13;
        long long v48 = 0u;
        long long v49 = 0u;
        sub_2171BF8A4(v9 + 5, &v46);
        long long v47 = v46;
        long long v46 = 0uLL;
        uint64_t v14 = (pxrInternal__aapl__pxrReserved__::HdMaterialNodeParameterSchema::Builder *)pxrInternal__aapl__pxrReserved__::HdMaterialNodeParameterSchema::Builder::SetValue(&v48, (uint64_t *)&v47);
        pxrInternal__aapl__pxrReserved__::HdMaterialNodeParameterSchema::Builder::Build(v14, &v50);
        long long v15 = v50;
        long long v50 = 0uLL;
        long long v16 = v52;
        if ((unint64_t)v52 >= v53)
        {
          long long v36 = v15;
          uint64_t v17 = ((char *)v52 - (char *)v51) >> 4;
          unint64_t v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 60) {
            sub_21677CB10();
          }
          uint64_t v19 = v53 - (void)v51;
          if ((uint64_t)(v53 - (void)v51) >> 3 > v18) {
            unint64_t v18 = v19 >> 3;
          }
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v20 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v20 = v18;
          }
          *(void *)&long long v43 = &v53;
          BOOL v21 = (char *)sub_216787EE0((uint64_t)&v53, v20);
          char v22 = &v21[16 * v17];
          *(void *)&long long v41 = v21;
          *((void *)&v41 + 1) = v22;
          *((void *)&v42 + 1) = &v21[16 * v23];
          *(_OWORD *)char v22 = v36;
          *(void *)&long long v42 = v22 + 16;
          sub_2171A640C((uint64_t *)&v51, &v41);
          unint64_t v24 = v52;
          sub_216788028((void **)&v41);
          uint64_t v52 = v24;
          if (*((void *)&v50 + 1)) {
            sub_216784EC4(*((std::__shared_weak_count **)&v50 + 1));
          }
        }
        else
        {
          *uint64_t v52 = v15;
          uint64_t v52 = v16 + 1;
        }
        if (*((void *)&v47 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v47 + 1));
        }
        if (*((void *)&v46 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v46 + 1));
        }
        if (*((void *)&v49 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v49 + 1));
        }
        if (*((void *)&v48 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v48 + 1));
        }
        unint64_t v25 = v9[1];
        if (v25)
        {
          do
          {
            uint64_t v26 = (void **)v25;
            unint64_t v25 = (void *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            uint64_t v26 = (void **)v9[2];
            BOOL v27 = *v26 == v9;
            uint64_t v9 = v26;
          }
          while (!v27);
        }
        uint64_t v9 = v26;
      }
      while (v26 != v59);
      unint64_t v28 = (uint64_t *)v54;
      uint64_t v29 = v55;
      uint64_t v30 = v51;
    }
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v41 = 0u;
    pxrInternal__aapl__pxrReserved__::HdRetainedContainerDataSource::New(v29 - v28, v28, v30, &v47);
    long long v50 = v47;
    long long v47 = 0uLL;
    uint64_t v31 = pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchema::Builder::SetParameters(&v41, (uint64_t *)&v50);
    pxrInternal__aapl__pxrReserved__::HdRetainedContainerDataSource::New(&v40);
    long long v46 = v40;
    long long v40 = 0uLL;
    uint64_t v32 = pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchema::Builder::SetInputConnections((uint64_t)v31, (uint64_t *)&v46);
    sub_2171A3CE4(&v57, &v38);
    long long v39 = v38;
    long long v38 = 0uLL;
    uint64_t v33 = (pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchema::Builder *)pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchema::Builder::SetNodeIdentifier(v32, (uint64_t *)&v39);
    pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchema::Builder::Build(v33, &v48);
    if (*((void *)&v39 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v39 + 1));
    }
    if (*((void *)&v38 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v38 + 1));
    }
    if (*((void *)&v46 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v46 + 1));
    }
    if (*((void *)&v40 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v40 + 1));
    }
    if (*((void *)&v50 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v50 + 1));
    }
    if (*((void *)&v47 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v47 + 1));
    }
    if (*((void *)&v45 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v45 + 1));
    }
    if (*((void *)&v44 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v44 + 1));
    }
    if (*((void *)&v43 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v43 + 1));
    }
    if (*((void *)&v42 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v42 + 1));
    }
    if (*((void *)&v41 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v41 + 1));
    }
    long long v41 = 0uLL;
    uint64_t v34 = (pxrInternal__aapl__pxrReserved__::HdIntegratorSchema::Builder *)pxrInternal__aapl__pxrReserved__::HdIntegratorSchema::Builder::SetResource(&v41, (uint64_t *)&v48);
    pxrInternal__aapl__pxrReserved__::HdIntegratorSchema::Builder::Build((uint64_t *)&v37, v34);
    if (*((void *)&v41 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v41 + 1));
    }
    if (*((void *)&v48 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v48 + 1));
    }
    *(void *)&long long v41 = &v51;
    sub_216787968((void ***)&v41);
    *(void *)&long long v41 = &v54;
    sub_216889A04((void ***)&v41);
    sub_2171C7774((uint64_t)v60, (char *)v60[1]);
    sub_216D61968((uint64_t)&v58, v59[0]);
    if ((v57 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v57 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    long long v7 = v37;
  }
  *a2 = v7;
  long long v37 = 0uLL;
  return sub_2168EE084((uint64_t)&v61);
}

void sub_2171BA610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,uint64_t a31,std::__shared_weak_count *a32,void **a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,std::__shared_weak_count *a38)
{
  if (a30) {
    sub_216784EC4(a30);
  }
  if (a18) {
    sub_216784EC4(a18);
  }
  if (a38) {
    sub_216784EC4(a38);
  }
  if (a32) {
    sub_216784EC4(a32);
  }
  sub_2171BFA74(&a19);
  a33 = (void **)(v38 - 216);
  sub_216787968(&a33);
  a33 = (void **)(v38 - 192);
  sub_216889A04(&a33);
  sub_2171C7140(v38 - 168);
  sub_2168EE084(v38 - 112);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim::_GetSampleFilterDataSource@<X0>(pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim *this@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)this + 3);
  unsigned __int8 v4 = (char *)this + 8;
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::HdSampleFilterSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdSampleFilterSchemaTokens);
  if (!v5) {
    uint64_t v5 = sub_2171C238C(&pxrInternal__aapl__pxrReserved__::HdSampleFilterSchemaTokens);
  }
  (*(void (**)(uint64_t **__return_ptr, uint64_t, char *, uint64_t))(*(void *)v3 + 120))(&v61, v3, v4, (uint64_t)v5 + 8);
  int v6 = sub_2171C70B4((pxrInternal__aapl__pxrReserved__::VtValue *)&v61);
  long long v7 = 0uLL;
  if (v6)
  {
    if ((v62 & 4) != 0) {
      long long v8 = (uint64_t *)(*(uint64_t (**)(uint64_t **, __n128))((v62 & 0xFFFFFFFFFFFFFFF8) + 168))(&v61, (__n128)0);
    }
    else {
      long long v8 = v61;
    }
    uint64_t v57 = *v8;
    if ((v57 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v57 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v57 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_2171BF22C((uint64_t *)&v58, (uint64_t)(v8 + 1));
    sub_2171C7194(v60, (uint64_t)(v8 + 4));
    v54 = 0;
    uint64_t v55 = 0;
    unint64_t v56 = 0;
    uint64_t v51 = 0;
    uint64_t v52 = 0;
    unint64_t v53 = 0;
    uint64_t v9 = v58;
    if (v58 == v59)
    {
      uint64_t v30 = 0;
      unint64_t v28 = 0;
      uint64_t v29 = 0;
    }
    else
    {
      do
      {
        uint64_t v10 = (uint64_t *)(v9 + 4);
        uint64_t v11 = v55;
        if ((unint64_t)v55 >= v56)
        {
          long long v13 = sub_216973984(&v54, v10);
        }
        else
        {
          uint64_t v12 = *v10;
          void *v55 = *v10;
          if ((v12 & 7) != 0
            && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
          {
            *v11 &= 0xFFFFFFFFFFFFFFF8;
          }
          long long v13 = (char *)(v11 + 1);
        }
        uint64_t v55 = v13;
        long long v48 = 0u;
        long long v49 = 0u;
        sub_2171BF8A4(v9 + 5, &v46);
        long long v47 = v46;
        long long v46 = 0uLL;
        uint64_t v14 = (pxrInternal__aapl__pxrReserved__::HdMaterialNodeParameterSchema::Builder *)pxrInternal__aapl__pxrReserved__::HdMaterialNodeParameterSchema::Builder::SetValue(&v48, (uint64_t *)&v47);
        pxrInternal__aapl__pxrReserved__::HdMaterialNodeParameterSchema::Builder::Build(v14, &v50);
        long long v15 = v50;
        long long v50 = 0uLL;
        long long v16 = v52;
        if ((unint64_t)v52 >= v53)
        {
          long long v36 = v15;
          uint64_t v17 = ((char *)v52 - (char *)v51) >> 4;
          unint64_t v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 60) {
            sub_21677CB10();
          }
          uint64_t v19 = v53 - (void)v51;
          if ((uint64_t)(v53 - (void)v51) >> 3 > v18) {
            unint64_t v18 = v19 >> 3;
          }
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v20 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v20 = v18;
          }
          *(void *)&long long v43 = &v53;
          BOOL v21 = (char *)sub_216787EE0((uint64_t)&v53, v20);
          char v22 = &v21[16 * v17];
          *(void *)&long long v41 = v21;
          *((void *)&v41 + 1) = v22;
          *((void *)&v42 + 1) = &v21[16 * v23];
          *(_OWORD *)char v22 = v36;
          *(void *)&long long v42 = v22 + 16;
          sub_2171A640C((uint64_t *)&v51, &v41);
          unint64_t v24 = v52;
          sub_216788028((void **)&v41);
          uint64_t v52 = v24;
          if (*((void *)&v50 + 1)) {
            sub_216784EC4(*((std::__shared_weak_count **)&v50 + 1));
          }
        }
        else
        {
          *uint64_t v52 = v15;
          uint64_t v52 = v16 + 1;
        }
        if (*((void *)&v47 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v47 + 1));
        }
        if (*((void *)&v46 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v46 + 1));
        }
        if (*((void *)&v49 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v49 + 1));
        }
        if (*((void *)&v48 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v48 + 1));
        }
        unint64_t v25 = v9[1];
        if (v25)
        {
          do
          {
            uint64_t v26 = (void **)v25;
            unint64_t v25 = (void *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            uint64_t v26 = (void **)v9[2];
            BOOL v27 = *v26 == v9;
            uint64_t v9 = v26;
          }
          while (!v27);
        }
        uint64_t v9 = v26;
      }
      while (v26 != v59);
      unint64_t v28 = (uint64_t *)v54;
      uint64_t v29 = v55;
      uint64_t v30 = v51;
    }
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v41 = 0u;
    pxrInternal__aapl__pxrReserved__::HdRetainedContainerDataSource::New(v29 - v28, v28, v30, &v47);
    long long v50 = v47;
    long long v47 = 0uLL;
    uint64_t v31 = pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchema::Builder::SetParameters(&v41, (uint64_t *)&v50);
    pxrInternal__aapl__pxrReserved__::HdRetainedContainerDataSource::New(&v40);
    long long v46 = v40;
    long long v40 = 0uLL;
    uint64_t v32 = pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchema::Builder::SetInputConnections((uint64_t)v31, (uint64_t *)&v46);
    sub_2171A3CE4(&v57, &v38);
    long long v39 = v38;
    long long v38 = 0uLL;
    uint64_t v33 = (pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchema::Builder *)pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchema::Builder::SetNodeIdentifier(v32, (uint64_t *)&v39);
    pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchema::Builder::Build(v33, &v48);
    if (*((void *)&v39 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v39 + 1));
    }
    if (*((void *)&v38 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v38 + 1));
    }
    if (*((void *)&v46 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v46 + 1));
    }
    if (*((void *)&v40 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v40 + 1));
    }
    if (*((void *)&v50 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v50 + 1));
    }
    if (*((void *)&v47 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v47 + 1));
    }
    if (*((void *)&v45 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v45 + 1));
    }
    if (*((void *)&v44 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v44 + 1));
    }
    if (*((void *)&v43 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v43 + 1));
    }
    if (*((void *)&v42 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v42 + 1));
    }
    if (*((void *)&v41 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v41 + 1));
    }
    long long v41 = 0uLL;
    uint64_t v34 = (pxrInternal__aapl__pxrReserved__::HdSampleFilterSchema::Builder *)pxrInternal__aapl__pxrReserved__::HdSampleFilterSchema::Builder::SetResource(&v41, (uint64_t *)&v48);
    pxrInternal__aapl__pxrReserved__::HdSampleFilterSchema::Builder::Build((uint64_t *)&v37, v34);
    if (*((void *)&v41 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v41 + 1));
    }
    if (*((void *)&v48 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v48 + 1));
    }
    *(void *)&long long v41 = &v51;
    sub_216787968((void ***)&v41);
    *(void *)&long long v41 = &v54;
    sub_216889A04((void ***)&v41);
    sub_2171C7774((uint64_t)v60, (char *)v60[1]);
    sub_216D61968((uint64_t)&v58, v59[0]);
    if ((v57 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v57 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    long long v7 = v37;
  }
  *a2 = v7;
  long long v37 = 0uLL;
  return sub_2168EE084((uint64_t)&v61);
}

void sub_2171BAC70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,uint64_t a31,std::__shared_weak_count *a32,void **a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,std::__shared_weak_count *a38)
{
  if (a30) {
    sub_216784EC4(a30);
  }
  if (a18) {
    sub_216784EC4(a18);
  }
  if (a38) {
    sub_216784EC4(a38);
  }
  if (a32) {
    sub_216784EC4(a32);
  }
  sub_2171BFA74(&a19);
  a33 = (void **)(v38 - 216);
  sub_216787968(&a33);
  a33 = (void **)(v38 - 192);
  sub_216889A04(&a33);
  sub_2171C7140(v38 - 168);
  sub_2168EE084(v38 - 112);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim::_GetDisplayFilterDataSource@<X0>(pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim *this@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  uint64_t v3 = *((void *)this + 3);
  unsigned __int8 v4 = (char *)this + 8;
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::HdDisplayFilterSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdDisplayFilterSchemaTokens);
  if (!v5) {
    uint64_t v5 = sub_2171C2418(&pxrInternal__aapl__pxrReserved__::HdDisplayFilterSchemaTokens);
  }
  (*(void (**)(uint64_t **__return_ptr, uint64_t, char *, uint64_t))(*(void *)v3 + 120))(&v61, v3, v4, (uint64_t)v5 + 8);
  int v6 = sub_2171C70B4((pxrInternal__aapl__pxrReserved__::VtValue *)&v61);
  long long v7 = 0uLL;
  if (v6)
  {
    if ((v62 & 4) != 0) {
      long long v8 = (uint64_t *)(*(uint64_t (**)(uint64_t **, __n128))((v62 & 0xFFFFFFFFFFFFFFF8) + 168))(&v61, (__n128)0);
    }
    else {
      long long v8 = v61;
    }
    uint64_t v57 = *v8;
    if ((v57 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v57 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v57 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_2171BF22C((uint64_t *)&v58, (uint64_t)(v8 + 1));
    sub_2171C7194(v60, (uint64_t)(v8 + 4));
    v54 = 0;
    uint64_t v55 = 0;
    unint64_t v56 = 0;
    uint64_t v51 = 0;
    uint64_t v52 = 0;
    unint64_t v53 = 0;
    uint64_t v9 = v58;
    if (v58 == v59)
    {
      uint64_t v30 = 0;
      unint64_t v28 = 0;
      uint64_t v29 = 0;
    }
    else
    {
      do
      {
        uint64_t v10 = (uint64_t *)(v9 + 4);
        uint64_t v11 = v55;
        if ((unint64_t)v55 >= v56)
        {
          long long v13 = sub_216973984(&v54, v10);
        }
        else
        {
          uint64_t v12 = *v10;
          void *v55 = *v10;
          if ((v12 & 7) != 0
            && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
          {
            *v11 &= 0xFFFFFFFFFFFFFFF8;
          }
          long long v13 = (char *)(v11 + 1);
        }
        uint64_t v55 = v13;
        long long v48 = 0u;
        long long v49 = 0u;
        sub_2171BF8A4(v9 + 5, &v46);
        long long v47 = v46;
        long long v46 = 0uLL;
        uint64_t v14 = (pxrInternal__aapl__pxrReserved__::HdMaterialNodeParameterSchema::Builder *)pxrInternal__aapl__pxrReserved__::HdMaterialNodeParameterSchema::Builder::SetValue(&v48, (uint64_t *)&v47);
        pxrInternal__aapl__pxrReserved__::HdMaterialNodeParameterSchema::Builder::Build(v14, &v50);
        long long v15 = v50;
        long long v50 = 0uLL;
        long long v16 = v52;
        if ((unint64_t)v52 >= v53)
        {
          long long v36 = v15;
          uint64_t v17 = ((char *)v52 - (char *)v51) >> 4;
          unint64_t v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 60) {
            sub_21677CB10();
          }
          uint64_t v19 = v53 - (void)v51;
          if ((uint64_t)(v53 - (void)v51) >> 3 > v18) {
            unint64_t v18 = v19 >> 3;
          }
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v20 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v20 = v18;
          }
          *(void *)&long long v43 = &v53;
          BOOL v21 = (char *)sub_216787EE0((uint64_t)&v53, v20);
          char v22 = &v21[16 * v17];
          *(void *)&long long v41 = v21;
          *((void *)&v41 + 1) = v22;
          *((void *)&v42 + 1) = &v21[16 * v23];
          *(_OWORD *)char v22 = v36;
          *(void *)&long long v42 = v22 + 16;
          sub_2171A640C((uint64_t *)&v51, &v41);
          unint64_t v24 = v52;
          sub_216788028((void **)&v41);
          uint64_t v52 = v24;
          if (*((void *)&v50 + 1)) {
            sub_216784EC4(*((std::__shared_weak_count **)&v50 + 1));
          }
        }
        else
        {
          *uint64_t v52 = v15;
          uint64_t v52 = v16 + 1;
        }
        if (*((void *)&v47 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v47 + 1));
        }
        if (*((void *)&v46 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v46 + 1));
        }
        if (*((void *)&v49 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v49 + 1));
        }
        if (*((void *)&v48 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v48 + 1));
        }
        unint64_t v25 = v9[1];
        if (v25)
        {
          do
          {
            uint64_t v26 = (void **)v25;
            unint64_t v25 = (void *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            uint64_t v26 = (void **)v9[2];
            BOOL v27 = *v26 == v9;
            uint64_t v9 = v26;
          }
          while (!v27);
        }
        uint64_t v9 = v26;
      }
      while (v26 != v59);
      unint64_t v28 = (uint64_t *)v54;
      uint64_t v29 = v55;
      uint64_t v30 = v51;
    }
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v41 = 0u;
    pxrInternal__aapl__pxrReserved__::HdRetainedContainerDataSource::New(v29 - v28, v28, v30, &v47);
    long long v50 = v47;
    long long v47 = 0uLL;
    uint64_t v31 = pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchema::Builder::SetParameters(&v41, (uint64_t *)&v50);
    pxrInternal__aapl__pxrReserved__::HdRetainedContainerDataSource::New(&v40);
    long long v46 = v40;
    long long v40 = 0uLL;
    uint64_t v32 = pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchema::Builder::SetInputConnections((uint64_t)v31, (uint64_t *)&v46);
    sub_2171A3CE4(&v57, &v38);
    long long v39 = v38;
    long long v38 = 0uLL;
    uint64_t v33 = (pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchema::Builder *)pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchema::Builder::SetNodeIdentifier(v32, (uint64_t *)&v39);
    pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchema::Builder::Build(v33, &v48);
    if (*((void *)&v39 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v39 + 1));
    }
    if (*((void *)&v38 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v38 + 1));
    }
    if (*((void *)&v46 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v46 + 1));
    }
    if (*((void *)&v40 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v40 + 1));
    }
    if (*((void *)&v50 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v50 + 1));
    }
    if (*((void *)&v47 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v47 + 1));
    }
    if (*((void *)&v45 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v45 + 1));
    }
    if (*((void *)&v44 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v44 + 1));
    }
    if (*((void *)&v43 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v43 + 1));
    }
    if (*((void *)&v42 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v42 + 1));
    }
    if (*((void *)&v41 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v41 + 1));
    }
    long long v41 = 0uLL;
    uint64_t v34 = (pxrInternal__aapl__pxrReserved__::HdDisplayFilterSchema::Builder *)pxrInternal__aapl__pxrReserved__::HdDisplayFilterSchema::Builder::SetResource(&v41, (uint64_t *)&v48);
    pxrInternal__aapl__pxrReserved__::HdDisplayFilterSchema::Builder::Build((uint64_t *)&v37, v34);
    if (*((void *)&v41 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v41 + 1));
    }
    if (*((void *)&v48 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v48 + 1));
    }
    *(void *)&long long v41 = &v51;
    sub_216787968((void ***)&v41);
    *(void *)&long long v41 = &v54;
    sub_216889A04((void ***)&v41);
    sub_2171C7774((uint64_t)v60, (char *)v60[1]);
    sub_216D61968((uint64_t)&v58, v59[0]);
    if ((v57 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v57 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    long long v7 = v37;
  }
  *a2 = v7;
  long long v37 = 0uLL;
  return sub_2168EE084((uint64_t)&v61);
}

void sub_2171BB2D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,uint64_t a31,std::__shared_weak_count *a32,void **a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,std::__shared_weak_count *a38)
{
  if (a30) {
    sub_216784EC4(a30);
  }
  if (a18) {
    sub_216784EC4(a18);
  }
  if (a38) {
    sub_216784EC4(a38);
  }
  if (a32) {
    sub_216784EC4(a32);
  }
  sub_2171BFA74(&a19);
  a33 = (void **)(v38 - 216);
  sub_216787968(&a33);
  a33 = (void **)(v38 - 192);
  sub_216889A04(&a33);
  sub_2171C7140(v38 - 168);
  sub_2168EE084(v38 - 112);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim::_GetDisplayStyleDataSource@<X0>(pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim *this@<X0>, void *a2@<X8>)
{
  unsigned __int8 v4 = (_DWORD *)((char *)this + 8);
  uint64_t v5 = operator new(0x28uLL);
  uint64_t v6 = *((void *)this + 3);
  void *v5 = &unk_26C77D0F8;
  v5[1] = v6;
  sub_216981010((_DWORD *)v5 + 4, v4);
  sub_21698105C((_DWORD *)v5 + 5, (_DWORD *)this + 3);
  *((_DWORD *)v5 + 6) = 0;
  *((_DWORD *)v5 + 7) = 256;
  *((unsigned char *)v5 + 32) = 0;
  *((unsigned char *)v5 + 36) = 0;
  if (!v5[1])
  {
    v8[0] = "hd/dataSourceLegacyPrim.cpp";
    v8[1] = "Hd_DisplayStyleDataSource";
    void v8[2] = 1677;
    v8[3] = "pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Hd_DisplayStyleDataSource::Hd_DisplayStyleDataSourc"
            "e(HdSceneDelegate *, const SdfPath &)";
    char v9 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v8, "_sceneDelegate", 0);
  }
  double result = operator new(0x20uLL);
  void *result = &unk_26C77D300;
  result[1] = 0;
  result[2] = 0;
  result[3] = v5;
  *a2 = v5;
  a2[1] = result;
  return result;
}

void sub_2171BB564(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v3);
  sub_21697C414(v2);
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim::_GetInstancedByDataSource@<X0>(pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  (*(void (**)(uint64_t *__return_ptr, void, char *))(**((void **)this + 3) + 232))(&v11, *((void *)this + 3), (char *)this + 8);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v11))
  {
    long long v8 = 0u;
    long long v9 = 0u;
    sub_216981010(&v12, &v11);
    sub_21698105C(&v13, (_DWORD *)&v11 + 1);
    sub_2171BB840((uint64_t)v5, (uint64_t)&v12, 1);
    sub_2171BB7B0((uint64_t)v5, &v6);
    long long v7 = v6;
    long long v6 = 0uLL;
    uint64_t v3 = (pxrInternal__aapl__pxrReserved__::HdInstancedBySchema::Builder *)pxrInternal__aapl__pxrReserved__::HdInstancedBySchema::Builder::SetPaths(&v8, (uint64_t *)&v7);
    pxrInternal__aapl__pxrReserved__::HdInstancedBySchema::Builder::Build(v3, &v10);
    *(_OWORD *)a2 = v10;
    long long v10 = 0uLL;
    if (*((void *)&v7 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v7 + 1));
    }
    if (*((void *)&v6 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v6 + 1));
    }
    sub_2171C1464(v5);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
    sub_21697C414(&v12);
    if (*((void *)&v9 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v9 + 1));
    }
    if (*((void *)&v8 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v8 + 1));
    }
  }
  else
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  return sub_21697C414(&v11);
}

void sub_2171BB734(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2171BB7B0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  unsigned __int8 v4 = (char *)operator new(0x30uLL);
  *(void *)unsigned __int8 v4 = &unk_26C77C858;
  long long v5 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v4 + 8) = *(_OWORD *)a1;
  *(_OWORD *)(v4 + 24) = v5;
  uint64_t v6 = *(void *)(a1 + 32);
  *((void *)v4 + 5) = v6;
  if (v6)
  {
    long long v7 = (atomic_ullong *)(v6 - 16);
    if (*((void *)v4 + 4)) {
      long long v7 = (atomic_ullong *)*((void *)v4 + 4);
    }
    atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
  }

  return sub_2171C1A48(a2, (uint64_t)v4);
}

uint64_t sub_2171BB840(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  sub_2171C8A18((unint64_t *)a1, a2, a2 + 8 * a3);
  return a1;
}

void sub_2171BB878(_Unwind_Exception *a1)
{
  sub_2171C1464(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim::_GetInstancerTopologyDataSource(pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim *this@<X0>, uint64_t *a2@<X8>)
{
  unsigned __int8 v4 = (uint64_t *)((char *)this + 72);
  sub_2171BE4CC((void *)this + 9, &v10);
  uint64_t v5 = v10;
  if (!v10)
  {
    uint64_t v6 = (char *)operator new(0x40uLL);
    uint64_t v7 = *((void *)this + 3);
    *(void *)uint64_t v6 = &unk_26C77D378;
    sub_216981010((_DWORD *)v6 + 2, (_DWORD *)this + 2);
    sub_21698105C((_DWORD *)v6 + 3, (_DWORD *)this + 3);
    *(_OWORD *)(v6 + 24) = 0u;
    *((void *)v6 + 2) = v7;
    *(_OWORD *)(v6 + 40) = 0u;
    *((void *)v6 + 7) = 0;
    if (!v7)
    {
      int v12 = "hd/dataSourceLegacyPrim.cpp";
      int v13 = "Hd_InstancerTopologyDataSource";
      uint64_t v14 = 1597;
      long long v15 = "pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Hd_InstancerTopologyDataSource::Hd_InstancerTopolog"
            "yDataSource(const SdfPath &, HdSceneDelegate *)";
      char v16 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v12, "_sceneDelegate", 0);
      uint64_t v7 = *((void *)v6 + 2);
    }
    (*(void (**)(char **__return_ptr, uint64_t, char *))(*(void *)v7 + 240))(&v12, v7, v6 + 8);
    sub_2171C8D38((unint64_t *)v6 + 3, (uint64_t)v12, (uint64_t)v13);
    uint64_t v17 = &v12;
    sub_216981168((void ***)&v17);
    long long v8 = (std::__shared_weak_count *)operator new(0x20uLL);
    v8->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C77D548;
    v8->__shared_owners_ = 0;
    v8->__shared_weak_owners_ = 0;
    v8[1].__vftable = (std::__shared_weak_count_vtbl *)v6;
    long long v9 = v11;
    uint64_t v10 = (uint64_t)v6;
    uint64_t v11 = v8;
    if (v9) {
      sub_216784EC4(v9);
    }
    sub_2171B5D54(v4, &v10);
    uint64_t v5 = v10;
  }
  *a2 = v5;
  a2[1] = (uint64_t)v11;
}

void sub_2171BBA3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  sub_2171C1464(v13);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v12);
  sub_21697C414(v11);
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(v10);
  operator delete(v15);
  if (a10) {
    sub_216784EC4(a10);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim::_GetVolumeFieldBindingDataSource(pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim *this@<X0>, void *a2@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr, void, char *))(**((void **)this + 3) + 304))(&v26, *((void *)this + 3), (char *)this + 8);
  uint64_t v3 = v26;
  uint64_t v4 = v27;
  if (v26 == v27)
  {
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    uint64_t v23 = 0;
    unint64_t v24 = 0;
    unint64_t v25 = 0;
    unint64_t v20 = 0;
    BOOL v21 = 0;
    unint64_t v22 = 0;
    do
    {
      uint64_t v5 = v24;
      if ((unint64_t)v24 >= v25)
      {
        uint64_t v7 = sub_216973984(&v23, (uint64_t *)v3);
      }
      else
      {
        uint64_t v6 = *(void *)v3;
        *(void *)unint64_t v24 = *(void *)v3;
        if ((v6 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          *(void *)v5 &= 0xFFFFFFFFFFFFFFF8;
        }
        uint64_t v7 = v5 + 8;
      }
      unint64_t v24 = v7;
      sub_2171B89C4((_DWORD *)(v3 + 16), &v19);
      long long v8 = v19;
      long long v19 = 0uLL;
      long long v9 = v21;
      if ((unint64_t)v21 >= v22)
      {
        long long v18 = v8;
        uint64_t v10 = (v21 - v20) >> 4;
        unint64_t v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 60) {
          sub_21677CB10();
        }
        uint64_t v12 = v22 - (void)v20;
        if ((uint64_t)(v22 - (void)v20) >> 3 > v11) {
          unint64_t v11 = v12 >> 3;
        }
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v11;
        }
        uint64_t v31 = &v22;
        uint64_t v14 = (char *)sub_216787EE0((uint64_t)&v22, v13);
        long long v15 = &v14[16 * v10];
        *(void *)&long long v28 = v14;
        *((void *)&v28 + 1) = v15;
        uint64_t v30 = &v14[16 * v16];
        *(_OWORD *)long long v15 = v18;
        uint64_t v29 = v15 + 16;
        sub_2171A640C((uint64_t *)&v20, &v28);
        uint64_t v17 = v21;
        sub_216788028((void **)&v28);
        BOOL v21 = v17;
        if (*((void *)&v19 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v19 + 1));
        }
      }
      else
      {
        *(_OWORD *)BOOL v21 = v8;
        BOOL v21 = v9 + 16;
      }
      v3 += 24;
    }
    while (v3 != v4);
    pxrInternal__aapl__pxrReserved__::HdVolumeFieldBindingSchema::BuildRetained((v24 - v23) >> 3, (uint64_t *)v23, (uint64_t *)v20, &v28);
    *(_OWORD *)a2 = v28;
    *(void *)&long long v28 = &v20;
    sub_216787968((void ***)&v28);
    *(void *)&long long v28 = &v23;
    sub_216889A04((void ***)&v28);
  }
  *(void *)&long long v28 = &v26;
  sub_2171C9938((void ***)&v28);
}

void sub_2171BBCF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void ****a11, uint64_t a12, uint64_t a13, void ***a14, uint64_t a15, uint64_t a16, void **a17, uint64_t a18, uint64_t a19, char a20)
{
  a11 = &a14;
  sub_216787968((void ***)&a11);
  a14 = &a17;
  sub_216889A04((void ***)&a14);
  a17 = (void **)&a20;
  sub_2171C9938(&a17);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim::_GetCoordSysBindingDataSource(pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim *this@<X0>, void *a2@<X8>)
{
  (*(void (**)(pxrInternal__aapl__pxrReserved__::SdfPath ***__return_ptr, void, char *))(**((void **)this + 3) + 168))(&v53, *((void *)this + 3), (char *)this + 8);
  if (!v53 || (uint64_t v3 = *v53, v4 = v53[1], *v53 == v4))
  {
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    int64x2_t v51 = 0uLL;
    v52[0] = 0;
    long long v48 = 0;
    long long v49 = 0;
    unint64_t v50 = 0;
    do
    {
      Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName(v3);
      uint64_t v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_2171BC278();
      if ((*(void *)v6 & 0xFFFFFFFFFFFFFFF8) != 0) {
        EmptyString = (uint64_t *)((*(void *)v6 & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
      }
      if (*((char *)EmptyString + 23) >= 0) {
        long long v8 = (const char *)EmptyString;
      }
      else {
        long long v8 = (const char *)*EmptyString;
      }
      int v9 = *((char *)Name + 23);
      unint64_t v10 = Name[1];
      if (v9 >= 0) {
        size_t v11 = *((unsigned __int8 *)Name + 23);
      }
      else {
        size_t v11 = Name[1];
      }
      size_t v12 = strlen(v8);
      if (v11 < v12) {
        goto LABEL_17;
      }
      unint64_t v13 = (const char *)*Name;
      if (v9 >= 0) {
        unint64_t v13 = (const char *)Name;
      }
      if (!strcmp(&v13[v11 - v12], v8))
      {
        long long v15 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
        if (!v15) {
          long long v15 = sub_216AFE274(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
        }
        unint64_t v16 = *((void *)v15 + 10) & 0xFFFFFFFFFFFFFFF8;
        if (v16)
        {
          uint64_t v17 = (const char *)(v16 + 16);
          if (*(char *)(v16 + 39) < 0) {
            uint64_t v17 = *(const char **)v17;
          }
        }
        else
        {
          uint64_t v17 = "";
        }
        pxrInternal__aapl__pxrReserved__::TfStringGetBeforeSuffix((uint64_t)Name, *v17, &__dst);
      }
      else
      {
LABEL_17:
        if (v9 < 0)
        {
          sub_216778F24(&__dst, (void *)*Name, v10);
        }
        else
        {
          long long v14 = *(_OWORD *)Name;
          __dst.__r_.__value_.__r.__words[2] = Name[2];
          *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v14;
        }
      }
      long long v18 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_2171BC278();
      if ((*((void *)v18 + 1) & 0xFFFFFFFFFFFFFFF8) != 0) {
        long long v19 = (uint64_t *)((*((void *)v18 + 1) & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        long long v19 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v18);
      }
      pxrInternal__aapl__pxrReserved__::SdfPath::StripPrefixNamespace(&__dst, (uint64_t)v19, &__p);
      pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v46);
      uint64_t v20 = v51.i64[1];
      if (v51.i64[1] >= v52[0])
      {
        uint64_t v23 = (v51.i64[1] - v51.i64[0]) >> 3;
        if ((unint64_t)(v23 + 1) >> 61) {
          sub_21677CB10();
        }
        unint64_t v24 = (v52[0] - v51.i64[0]) >> 2;
        if (v24 <= v23 + 1) {
          unint64_t v24 = v23 + 1;
        }
        if (v52[0] - v51.i64[0] >= 0x7FFFFFFFFFFFFFF8uLL) {
          unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v25 = v24;
        }
        uint64_t v57 = v52;
        if (v25) {
          uint64_t v26 = (char *)sub_21677CB28((uint64_t)v52, v25);
        }
        else {
          uint64_t v26 = 0;
        }
        uint64_t v27 = &v26[8 * v23];
        long long v28 = &v26[8 * v25];
        unint64_t v56 = v28;
        *(void *)uint64_t v27 = v46;
        unint64_t v22 = v27 + 8;
        uint64_t v46 = 0;
        *(void *)&v55[16] = v27 + 8;
        uint64_t v29 = (void *)v51.i64[1];
        uint64_t v30 = (void *)v51.i64[0];
        if (v51.i64[1] == v51.i64[0])
        {
          int64x2_t v32 = vdupq_n_s64(v51.u64[1]);
        }
        else
        {
          do
          {
            uint64_t v31 = *--v29;
            *((void *)v27 - 1) = v31;
            v27 -= 8;
            void *v29 = 0;
          }
          while (v29 != v30);
          int64x2_t v32 = v51;
          unint64_t v22 = *(void **)&v55[16];
          long long v28 = v56;
        }
        v51.i64[0] = (uint64_t)v27;
        v51.i64[1] = (uint64_t)v22;
        *(int64x2_t *)&v55[8] = v32;
        uint64_t v33 = (char *)v52[0];
        v52[0] = v28;
        unint64_t v56 = v33;
        *(void *)uint64_t v55 = v32.i64[0];
        sub_2168BE9D8((uint64_t)v55);
        uint64_t v21 = v46;
      }
      else
      {
        uint64_t v21 = 0;
        *(void *)v51.i64[1] = v46;
        unint64_t v22 = (void *)(v20 + 8);
        uint64_t v46 = 0;
      }
      v51.i64[1] = (uint64_t)v22;
      if ((v21 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      sub_2171B89C4(v3, &__p);
      long long v34 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
      int64x2_t v35 = v49;
      if ((unint64_t)v49 >= v50)
      {
        long long v44 = v34;
        uint64_t v36 = (v49 - v48) >> 4;
        unint64_t v37 = v36 + 1;
        if ((unint64_t)(v36 + 1) >> 60) {
          sub_21677CB10();
        }
        uint64_t v38 = v50 - (void)v48;
        if ((uint64_t)(v50 - (void)v48) >> 3 > v37) {
          unint64_t v37 = v38 >> 3;
        }
        if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v39 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v39 = v37;
        }
        uint64_t v57 = &v50;
        long long v40 = (char *)sub_216787EE0((uint64_t)&v50, v39);
        long long v41 = &v40[16 * v36];
        *(void *)uint64_t v55 = v40;
        *(void *)&v55[8] = v41;
        unint64_t v56 = &v40[16 * v42];
        *(_OWORD *)long long v41 = v44;
        *(void *)&v55[16] = v41 + 16;
        sub_2171A640C((uint64_t *)&v48, v55);
        long long v43 = v49;
        sub_216788028((void **)v55);
        long long v49 = v43;
        if (__p.__r_.__value_.__l.__size_) {
          sub_216784EC4((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
        }
      }
      else
      {
        *(_OWORD *)long long v49 = v34;
        long long v49 = v35 + 16;
      }
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      uint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v3 + 8);
    }
    while (v3 != v4);
    pxrInternal__aapl__pxrReserved__::HdCoordSysBindingSchema::BuildRetained((v51.i64[1] - v51.i64[0]) >> 3, (uint64_t *)v51.i64[0], (uint64_t *)v48, v55);
    *(_OWORD *)a2 = *(_OWORD *)v55;
    *(void *)uint64_t v55 = &v48;
    sub_216787968((void ***)v55);
    *(void *)uint64_t v55 = &v51;
    sub_216889A04((void ***)v55);
  }
  if (v54) {
    sub_216784EC4(v54);
  }
}

void sub_2171BC1A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11, char *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,uint64_t a29,char a30)
{
  std::string __p = &a27;
  sub_216787968((void ***)&__p);
  std::string __p = &a30;
  sub_216889A04((void ***)&__p);
  int64x2_t v32 = *(std::__shared_weak_count **)(v30 - 136);
  if (v32) {
    sub_216784EC4(v32);
  }
  _Unwind_Resume(a1);
}

unint64_t sub_2171BC278()
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  v0 = (char *)atomic_load((unint64_t *)&qword_267B96F98);
  if (!v0)
  {
    v0 = (char *)operator new(0x28uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0, "binding", 0);
    uint64_t v2 = v0 + 8;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 8, "coordSys", 0);
    uint64_t v3 = *(atomic_uint **)v0;
    long long v15 = v3;
    if ((v3 & 7) != 0)
    {
      uint64_t v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
        long long v15 = v4;
      }
    }
    uint64_t v5 = (atomic_uint *)*v2;
    unint64_t v16 = v5;
    if ((v5 & 7) != 0)
    {
      uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
        unint64_t v16 = v6;
      }
    }
    *((void *)v0 + 2) = 0;
    *((void *)v0 + 3) = 0;
    *((void *)v0 + 4) = 0;
    unint64_t v13 = (void **)(v0 + 16);
    char v14 = 0;
    uint64_t v7 = (char *)operator new(0x10uLL);
    uint64_t v8 = 0;
    *((void *)v0 + 2) = v7;
    *((void *)v0 + 3) = v7;
    *((void *)v0 + 4) = v7 + 16;
    do
    {
      int v9 = (&v15)[v8];
      *(void *)&v7[v8 * 8] = v9;
      if ((v9 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *(void *)&v7[v8 * 8] &= 0xFFFFFFFFFFFFFFF8;
      }
      ++v8;
    }
    while (v8 != 2);
    *((void *)v0 + 3) = v7 + 16;
    for (uint64_t i = 1; i != -1; --i)
    {
      size_t v11 = (&v15)[i];
      if ((v11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    uint64_t v12 = 0;
    atomic_compare_exchange_strong(&qword_267B96F98, (unint64_t *)&v12, (unint64_t)v0);
    if (v12)
    {
      unint64_t v13 = (void **)(v0 + 16);
      sub_216889A04(&v13);
      if ((*v2 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*(void *)v0 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v0 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v0);
      return atomic_load((unint64_t *)&qword_267B96F98);
    }
  }
  return (unint64_t)v0;
}

void sub_2171BC458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  sub_216889A04(&a10);
  uint64_t v15 = 8;
  while (1)
  {
    uint64_t v16 = *(void *)(&a12 + v15);
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v15 -= 8;
    if (v15 == -8)
    {
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v12);
      _Unwind_Resume(a1);
    }
  }
}

void pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim::_GetVisibilityDataSource(pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim *this@<X0>, uint64_t *a2@<X8>)
{
  if ((*(unsigned int (**)(void, char *))(**((void **)this + 3) + 80))(*((void *)this + 3), (char *)this + 8))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B96FB0, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_267B96FB0))
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      char v8 = 1;
      pxrInternal__aapl__pxrReserved__::HdRetainedTypedSampledDataSource<BOOL>::New(&v8, (uint64_t *)&v9);
      long long v10 = v9;
      long long v9 = 0uLL;
      uint64_t v6 = (pxrInternal__aapl__pxrReserved__::HdVisibilitySchema::Builder *)pxrInternal__aapl__pxrReserved__::HdVisibilitySchema::Builder::SetVisibility(&v11, (uint64_t *)&v10);
      pxrInternal__aapl__pxrReserved__::HdVisibilitySchema::Builder::Build(&qword_267B96FA0, v6);
      if (*((void *)&v10 + 1)) {
        sub_216784EC4(*((std::__shared_weak_count **)&v10 + 1));
      }
      if (*((void *)&v9 + 1)) {
        sub_216784EC4(*((std::__shared_weak_count **)&v9 + 1));
      }
      if (v12) {
        sub_216784EC4(v12);
      }
      __cxa_atexit((void (*)(void *))sub_2171B5C54, &qword_267B96FA0, &dword_216758000);
      __cxa_guard_release(&qword_267B96FB0);
    }
    uint64_t v3 = &qword_267B96FA0;
  }
  else
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B96FC8, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_267B96FC8))
    {
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      char v8 = 0;
      pxrInternal__aapl__pxrReserved__::HdRetainedTypedSampledDataSource<BOOL>::New(&v8, (uint64_t *)&v9);
      long long v10 = v9;
      long long v9 = 0uLL;
      uint64_t v7 = (pxrInternal__aapl__pxrReserved__::HdVisibilitySchema::Builder *)pxrInternal__aapl__pxrReserved__::HdVisibilitySchema::Builder::SetVisibility(&v11, (uint64_t *)&v10);
      pxrInternal__aapl__pxrReserved__::HdVisibilitySchema::Builder::Build(&qword_267B96FB8, v7);
      if (*((void *)&v10 + 1)) {
        sub_216784EC4(*((std::__shared_weak_count **)&v10 + 1));
      }
      if (*((void *)&v9 + 1)) {
        sub_216784EC4(*((std::__shared_weak_count **)&v9 + 1));
      }
      if (v12) {
        sub_216784EC4(v12);
      }
      __cxa_atexit((void (*)(void *))sub_2171B5C54, &qword_267B96FB8, &dword_216758000);
      __cxa_guard_release(&qword_267B96FC8);
    }
    uint64_t v3 = &qword_267B96FB8;
  }
  uint64_t v5 = *v3;
  uint64_t v4 = v3[1];
  *a2 = v5;
  a2[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
}

void sub_2171BC6CC(_Unwind_Exception *a1)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 - 24);
  if (v3) {
    sub_216784EC4(v3);
  }
  __cxa_guard_abort(&qword_267B96FC8);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim::_GetPurposeDataSource(pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim *this@<X0>, _OWORD *a2@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr, void, char *))(**((void **)this + 3) + 144))(&v9, *((void *)this + 3), (char *)this + 8);
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  sub_2171A3CE4(&v9, &v4);
  long long v5 = v4;
  long long v4 = 0uLL;
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::HdPurposeSchema::Builder *)pxrInternal__aapl__pxrReserved__::HdPurposeSchema::Builder::SetPurpose(&v6, (uint64_t *)&v5);
  pxrInternal__aapl__pxrReserved__::HdPurposeSchema::Builder::Build(v8, v3);
  *a2 = *(_OWORD *)v8;
  *(_OWORD *)char v8 = 0uLL;
  if (*((void *)&v5 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v5 + 1));
  }
  if (*((void *)&v4 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v4 + 1));
  }
  if (v7) {
    sub_216784EC4(v7);
  }
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_2171BC820(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_216784EC4(a14);
  }
  uint64_t v16 = *(void *)(v14 - 24);
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim::_GetExtentDataSource(pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim *this@<X0>, _OWORD *a2@<X8>)
{
  (*(void (**)(long long *__return_ptr, void, char *))(**((void **)this + 3) + 64))(&v14, *((void *)this + 3), (char *)this + 8);
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t v3 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v3 = &unk_26C77D5C0;
  *(_OWORD *)(v3 + 8) = v14;
  *((void *)v3 + 3) = v15;
  sub_2171C9AD4(&v9, (uint64_t)v3);
  long long v10 = v9;
  long long v9 = 0uLL;
  long long v4 = pxrInternal__aapl__pxrReserved__::HdExtentSchema::Builder::SetMin(&v11, (uint64_t *)&v10);
  long long v5 = (char *)operator new(0x20uLL);
  *(void *)long long v5 = &unk_26C77D5C0;
  *(_OWORD *)(v5 + 8) = v16;
  *((void *)v5 + 3) = v17;
  sub_2171C9AD4(&v7, (uint64_t)v5);
  long long v8 = v7;
  long long v7 = 0uLL;
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::HdExtentSchema::Builder *)pxrInternal__aapl__pxrReserved__::HdExtentSchema::Builder::SetMax((uint64_t)v4, (uint64_t *)&v8);
  pxrInternal__aapl__pxrReserved__::HdExtentSchema::Builder::Build(v6, &v13);
  *a2 = v13;
  long long v13 = 0uLL;
  if (*((void *)&v8 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v8 + 1));
  }
  if (*((void *)&v7 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v7 + 1));
  }
  if (*((void *)&v10 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v10 + 1));
  }
  if (*((void *)&v9 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v9 + 1));
  }
  if (*((void *)&v12 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v12 + 1));
  }
  if (*((void *)&v11 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v11 + 1));
  }
}

void sub_2171BC9E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, std::__shared_weak_count *a7, uint64_t a8, std::__shared_weak_count *a9, ...)
{
  va_start(va, a9);
  if (a9) {
    sub_216784EC4(a9);
  }
  if (a7) {
    sub_216784EC4(a7);
  }
  sub_2171ACDE0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim::_GetCategoriesDataSource(pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim *this@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(pxrInternal__aapl__pxrReserved__::HdCategoriesSchema **__return_ptr, void, char *))(**((void **)this + 3) + 152))(v4, *((void *)this + 3), (char *)this + 8);
  if (v4[0])
  {
    pxrInternal__aapl__pxrReserved__::HdCategoriesSchema::BuildRetained(v4[0], 0, (uint64_t *)v4[4], 0, &v3);
    *(_OWORD *)a2 = v3;
  }
  else
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  sub_2169B2E0C(v4);
}

void sub_2171BCACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_2169B2E0C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim::_GetInstanceCategoriesDataSource(pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim *this@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v10 = 0;
  long long v11 = 0;
  long long v4 = (std::__shared_weak_count_vtbl *)operator new(0x38uLL);
  long long v5 = (void (__cdecl *)(std::__shared_count *__hidden))*((void *)this + 3);
  v4->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&unk_26C77D6A0;
  sub_216981010(&v4->~__shared_weak_count_0, (_DWORD *)this + 2);
  sub_21698105C((_DWORD *)&v4->~__shared_weak_count_0 + 1, (_DWORD *)this + 3);
  v4->__on_zero_shared_weauint64_t k = 0;
  v4->__on_zero_shared = v5;
  LOBYTE(v4->__get_deleter) = 0;
  v4[1].~__shared_weak_count = 0;
  v4[1].~__shared_weak_count_0 = 0;
  if (!v5)
  {
    v13[0] = "hd/dataSourceLegacyPrim.cpp";
    v13[1] = "Hd_InstanceCategoriesVectorDataSource";
    v13[2] = 1533;
    v13[3] = "pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Hd_InstanceCategoriesVectorDataSource::Hd_Instance"
             "CategoriesVectorDataSource(const SdfPath &, HdSceneDelegate *)";
    char v14 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v13, "_sceneDelegate", 0);
  }
  uint64_t v6 = (std::__shared_weak_count *)operator new(0x20uLL);
  v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C77D6E8;
  v6->__shared_owners_ = 0;
  v6->__shared_weak_owners_ = 0;
  v6[1].__vftable = v4;
  long long v8 = v4;
  long long v9 = v6;
  long long v7 = (pxrInternal__aapl__pxrReserved__::HdInstanceCategoriesSchema::Builder *)pxrInternal__aapl__pxrReserved__::HdInstanceCategoriesSchema::Builder::SetCategoriesValues(&v10, (uint64_t *)&v8);
  pxrInternal__aapl__pxrReserved__::HdInstanceCategoriesSchema::Builder::Build((uint64_t *)&v12, v7);
  *a2 = v12;
  long long v12 = 0uLL;
  if (v9) {
    sub_216784EC4(v9);
  }
  if (v11) {
    sub_216784EC4(v11);
  }
}

void sub_2171BCC30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, std::__shared_weak_count *a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_216787968((void ***)va);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v10);
  sub_21697C414(v9);
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(v8);
  operator delete(v12);
  if (a5) {
    sub_216784EC4(a5);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim::Get(pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::HdMeshSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdMeshSchemaTokens);
  if (!v6) {
    uint64_t v6 = sub_2171C0FC0(&pxrInternal__aapl__pxrReserved__::HdMeshSchemaTokens);
  }
  if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) == (*(void *)v6 & 0xFFFFFFFFFFFFFFF8))
  {
    long long v34 = (pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
    if (!v34) {
      long long v34 = sub_2171C0F34(&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
    }
    if ((*((void *)this + 2) & 0xFFFFFFFFFFFFFFF8) != (*((void *)v34 + 6) & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_94;
    }
    int64x2_t v35 = operator new(0x28uLL);
    uint64_t v36 = *((void *)this + 3);
    *(void *)int64x2_t v35 = &unk_26C77D760;
    sub_216981010(v35 + 2, (_DWORD *)this + 2);
    sub_21698105C(v35 + 3, (_DWORD *)this + 3);
    *((void *)v35 + 3) = 0;
    *((void *)v35 + 4) = 0;
    *((void *)v35 + 2) = v36;
    unint64_t v37 = operator new(0x20uLL);
    uint64_t v38 = &unk_26C77DE70;
    goto LABEL_102;
  }
  long long v7 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchemaTokens);
  if (!v7) {
    long long v7 = sub_217199BE0(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchemaTokens);
  }
  if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) == ((unint64_t)*v7 & 0xFFFFFFFFFFFFFFF8))
  {
    unint64_t v39 = (pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
    if (!v39) {
      unint64_t v39 = sub_2171C0F34(&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
    }
    if ((*((void *)this + 2) & 0xFFFFFFFFFFFFFFF8) != (*((void *)v39 + 8) & 0xFFFFFFFFFFFFFFF8)) {
      goto LABEL_94;
    }
    int64x2_t v35 = operator new(0x28uLL);
    uint64_t v40 = *((void *)this + 3);
    *(void *)int64x2_t v35 = &unk_26C77DEE8;
    sub_216981010(v35 + 2, (_DWORD *)this + 2);
    sub_21698105C(v35 + 3, (_DWORD *)this + 3);
    *((void *)v35 + 3) = 0;
    *((void *)v35 + 4) = 0;
    *((void *)v35 + 2) = v40;
    unint64_t v37 = operator new(0x20uLL);
    uint64_t v38 = &unk_26C77E518;
LABEL_102:
    void *v37 = v38;
    v37[1] = 0;
    v37[2] = 0;
    v37[3] = v35;
    *(void *)a3 = v35;
    *(void *)(a3 + 8) = v37;
    return;
  }
  long long v8 = (pxrInternal__aapl__pxrReserved__::HdPrimvarsSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimvarsSchemaTokens);
  if (!v8) {
    long long v8 = sub_2171C1E14(&pxrInternal__aapl__pxrReserved__::HdPrimvarsSchemaTokens);
  }
  if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) == (*(void *)v8 & 0xFFFFFFFFFFFFFFF8))
  {
    pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim::_GetPrimvarsDataSource(this, (_OWORD *)a3);
  }
  else
  {
    long long v9 = (pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarsSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarsSchemaTokens);
    if (!v9) {
      long long v9 = sub_2171C1EA0(&pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarsSchemaTokens);
    }
    if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) == (*(void *)v9 & 0xFFFFFFFFFFFFFFF8))
    {
      pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim::_GetExtComputationPrimvarsDataSource((std::__shared_weak_count **)this, (std::__shared_weak_count **)a3);
    }
    else if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) == (*(void *)pxrInternal__aapl__pxrReserved__::HdMaterialBindingsSchema::GetSchemaToken(v9) & 0xFFFFFFFFFFFFFFF8))
    {
      pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim::_GetMaterialBindingsDataSource(this, a3);
    }
    else
    {
      uint64_t v10 = (pxrInternal__aapl__pxrReserved__::HdXformSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdXformSchemaTokens);
      if (!v10) {
        uint64_t v10 = sub_2171C1FB8(&pxrInternal__aapl__pxrReserved__::HdXformSchemaTokens);
      }
      if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) == (*(void *)v10 & 0xFFFFFFFFFFFFFFF8))
      {
        pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim::_GetXformDataSource(this, (_OWORD *)a3);
      }
      else
      {
        long long v11 = (pxrInternal__aapl__pxrReserved__::HdMaterialSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdMaterialSchemaTokens);
        if (!v11) {
          long long v11 = sub_2171C20D0(&pxrInternal__aapl__pxrReserved__::HdMaterialSchemaTokens);
        }
        if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) == (*(void *)v11 & 0xFFFFFFFFFFFFFFF8))
        {
          pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim::_GetMaterialDataSource(this, a3);
        }
        else
        {
          long long v12 = (pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
          if (!v12) {
            long long v12 = sub_2171C1B58(&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
          }
          if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) == (*(void *)v12 & 0xFFFFFFFFFFFFFFF8))
          {
            pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim::_GetDisplayStyleDataSource(this, (void *)a3);
          }
          else
          {
            long long v13 = (pxrInternal__aapl__pxrReserved__::HdSceneIndexEmulationTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdSceneIndexEmulationTokens);
            if (!v13) {
              long long v13 = sub_2171C2530(&pxrInternal__aapl__pxrReserved__::HdSceneIndexEmulationTokens);
            }
            if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) == (*(void *)v13 & 0xFFFFFFFFFFFFFFF8))
            {
              sub_2171BD8F4((uint64_t *)this + 3, &v41);
              goto LABEL_116;
            }
            char v14 = (pxrInternal__aapl__pxrReserved__::HdInstancedBySchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdInstancedBySchemaTokens);
            if (!v14) {
              char v14 = sub_2171C2274(&pxrInternal__aapl__pxrReserved__::HdInstancedBySchemaTokens);
            }
            if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) == (*(void *)v14 & 0xFFFFFFFFFFFFFFF8))
            {
              pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim::_GetInstancedByDataSource(this, a3);
            }
            else
            {
              uint64_t v15 = (pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchemaTokens);
              if (!v15) {
                uint64_t v15 = sub_2171C1520(&pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchemaTokens);
              }
              if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) == (*(void *)v15 & 0xFFFFFFFFFFFFFFF8))
              {
                pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim::_GetInstancerTopologyDataSource(this, (uint64_t *)a3);
              }
              else
              {
                long long v16 = (pxrInternal__aapl__pxrReserved__::HdVolumeFieldBindingSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdVolumeFieldBindingSchemaTokens);
                if (!v16) {
                  long long v16 = sub_2171C24A4(&pxrInternal__aapl__pxrReserved__::HdVolumeFieldBindingSchemaTokens);
                }
                if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) == (*(void *)v16 & 0xFFFFFFFFFFFFFFF8))
                {
                  pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim::_GetVolumeFieldBindingDataSource(this, (void *)a3);
                }
                else
                {
                  uint64_t v17 = (void *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCoordSysBindingSchemaTokens);
                  if (!v17) {
                    uint64_t v17 = (void *)sub_2171B190C(&pxrInternal__aapl__pxrReserved__::HdCoordSysBindingSchemaTokens);
                  }
                  if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) == (*v17 & 0xFFFFFFFFFFFFFFF8))
                  {
                    pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim::_GetCoordSysBindingDataSource(this, (void *)a3);
                  }
                  else
                  {
                    long long v18 = (pxrInternal__aapl__pxrReserved__::HdVisibilitySchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdVisibilitySchemaTokens);
                    if (!v18) {
                      long long v18 = sub_2171C134C(&pxrInternal__aapl__pxrReserved__::HdVisibilitySchemaTokens);
                    }
                    if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) == (*(void *)v18 & 0xFFFFFFFFFFFFFFF8))
                    {
                      pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim::_GetVisibilityDataSource(this, (uint64_t *)a3);
                    }
                    else
                    {
                      long long v19 = (pxrInternal__aapl__pxrReserved__::HdPurposeSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPurposeSchemaTokens);
                      if (!v19) {
                        long long v19 = sub_2171C1F2C(&pxrInternal__aapl__pxrReserved__::HdPurposeSchemaTokens);
                      }
                      if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) == (*(void *)v19 & 0xFFFFFFFFFFFFFFF8))
                      {
                        pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim::_GetPurposeDataSource(this, (_OWORD *)a3);
                      }
                      else
                      {
                        uint64_t v20 = (pxrInternal__aapl__pxrReserved__::HdExtentSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdExtentSchemaTokens);
                        if (!v20) {
                          uint64_t v20 = sub_2171C2044(&pxrInternal__aapl__pxrReserved__::HdExtentSchemaTokens);
                        }
                        if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) == (*(void *)v20 & 0xFFFFFFFFFFFFFFF8))
                        {
                          pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim::_GetExtentDataSource(this, (_OWORD *)a3);
                        }
                        else
                        {
                          uint64_t v21 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
                          if (!v21) {
                            uint64_t v21 = sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
                          }
                          if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) == (*(void *)v21 & 0xFFFFFFFFFFFFFFF8))
                          {
                            sub_2171BD958((_DWORD *)this + 2, (uint64_t *)this + 3, &v41);
                            goto LABEL_116;
                          }
                          unint64_t v22 = (pxrInternal__aapl__pxrReserved__::HdLightSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLightSchemaTokens);
                          if (!v22) {
                            unint64_t v22 = sub_2171C215C(&pxrInternal__aapl__pxrReserved__::HdLightSchemaTokens);
                          }
                          if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) == (*(void *)v22 & 0xFFFFFFFFFFFFFFF8))
                          {
                            sub_2171BDAB8((_DWORD *)this + 2, (uint64_t *)this + 3, &v41);
                            goto LABEL_116;
                          }
                          uint64_t v23 = (void *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCategoriesSchemaTokens);
                          if (!v23) {
                            uint64_t v23 = (void *)sub_2171A6550(&pxrInternal__aapl__pxrReserved__::HdCategoriesSchemaTokens);
                          }
                          if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) == (*v23 & 0xFFFFFFFFFFFFFFF8))
                          {
                            pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim::_GetCategoriesDataSource(this, a3);
                          }
                          else
                          {
                            unint64_t v24 = (pxrInternal__aapl__pxrReserved__::HdInstanceCategoriesSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdInstanceCategoriesSchemaTokens);
                            if (!v24) {
                              unint64_t v24 = sub_2171C21E8(&pxrInternal__aapl__pxrReserved__::HdInstanceCategoriesSchemaTokens);
                            }
                            if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) == (*(void *)v24 & 0xFFFFFFFFFFFFFFF8))
                            {
                              pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim::_GetInstanceCategoriesDataSource(this, (_OWORD *)a3);
                            }
                            else
                            {
                              unint64_t v25 = (pxrInternal__aapl__pxrReserved__::HdRenderBufferSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdRenderBufferSchemaTokens);
                              if (!v25) {
                                unint64_t v25 = sub_2171C1C70(&pxrInternal__aapl__pxrReserved__::HdRenderBufferSchemaTokens);
                              }
                              if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) == (*(void *)v25 & 0xFFFFFFFFFFFFFFF8))
                              {
                                sub_2171BDB90((uint64_t *)this + 3, (_DWORD *)this + 2, &v41);
                                goto LABEL_116;
                              }
                              uint64_t v26 = (pxrInternal__aapl__pxrReserved__::HdRenderSettingsSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdRenderSettingsSchemaTokens);
                              if (!v26) {
                                uint64_t v26 = sub_2171C1CFC(&pxrInternal__aapl__pxrReserved__::HdRenderSettingsSchemaTokens);
                              }
                              if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) == (*(void *)v26 & 0xFFFFFFFFFFFFFFF8))
                              {
                                sub_2171BDD50((uint64_t *)this + 3, (_DWORD *)this + 2, &v41);
                                goto LABEL_116;
                              }
                              uint64_t v27 = (pxrInternal__aapl__pxrReserved__::HdSampleFilterSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdSampleFilterSchemaTokens);
                              if (!v27) {
                                uint64_t v27 = sub_2171C238C(&pxrInternal__aapl__pxrReserved__::HdSampleFilterSchemaTokens);
                              }
                              if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) == (*(void *)v27 & 0xFFFFFFFFFFFFFFF8))
                              {
                                pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim::_GetSampleFilterDataSource(this, (_OWORD *)a3);
                              }
                              else
                              {
                                long long v28 = (pxrInternal__aapl__pxrReserved__::HdIntegratorSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdIntegratorSchemaTokens);
                                if (!v28) {
                                  long long v28 = sub_2171C2300(&pxrInternal__aapl__pxrReserved__::HdIntegratorSchemaTokens);
                                }
                                if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) == (*(void *)v28 & 0xFFFFFFFFFFFFFFF8))
                                {
                                  pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim::_GetIntegratorDataSource(this, (_OWORD *)a3);
                                }
                                else
                                {
                                  uint64_t v29 = (pxrInternal__aapl__pxrReserved__::HdDisplayFilterSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdDisplayFilterSchemaTokens);
                                  if (!v29) {
                                    uint64_t v29 = sub_2171C2418(&pxrInternal__aapl__pxrReserved__::HdDisplayFilterSchemaTokens);
                                  }
                                  if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) != (*(void *)v29 & 0xFFFFFFFFFFFFFFF8))
                                  {
                                    uint64_t v30 = (pxrInternal__aapl__pxrReserved__::HdVolumeFieldSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdVolumeFieldSchemaTokens);
                                    if (!v30) {
                                      uint64_t v30 = sub_2171C13D8(&pxrInternal__aapl__pxrReserved__::HdVolumeFieldSchemaTokens);
                                    }
                                    if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) == (*(void *)v30 & 0xFFFFFFFFFFFFFFF8))
                                    {
                                      sub_2171BDEB0((_DWORD *)this + 2, (uint64_t *)this + 3, &v41);
                                      goto LABEL_116;
                                    }
                                    uint64_t v31 = (pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
                                    if (!v31) {
                                      uint64_t v31 = sub_2171C0F34(&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
                                    }
                                    if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v31 + 15) & 0xFFFFFFFFFFFFFFF8))
                                    {
                                      sub_2171BE010((uint64_t *)this + 3, (_DWORD *)this + 2, &v41);
                                      goto LABEL_116;
                                    }
                                    int64x2_t v32 = (pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
                                    if (!v32) {
                                      int64x2_t v32 = sub_2171C1BE4(&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
                                    }
                                    if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) == (*(void *)v32 & 0xFFFFFFFFFFFFFFF8))
                                    {
                                      sub_2171BE0E4((_DWORD *)this + 2, (uint64_t *)this + 3, &v41);
                                      goto LABEL_116;
                                    }
                                    uint64_t v33 = (pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens);
                                    if (!v33) {
                                      uint64_t v33 = sub_2171C1D88(&pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens);
                                    }
                                    if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) == (*(void *)v33 & 0xFFFFFFFFFFFFFFF8))
                                    {
                                      sub_2171BE1BC((_DWORD *)this + 2, (uint64_t *)this + 3, &v41);
LABEL_116:
                                      *(_OWORD *)a3 = v41;
                                      return;
                                    }
LABEL_94:
                                    *(void *)a3 = 0;
                                    *(void *)(a3 + 8) = 0;
                                    return;
                                  }
                                  pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim::_GetDisplayFilterDataSource(this, (_OWORD *)a3);
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_2171BD8C4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void *sub_2171BD8F4@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  long long v4 = operator new(0x10uLL);
  uint64_t v5 = *a1;
  void *v4 = &unk_26C77E590;
  v4[1] = v5;

  return sub_2171D0118(a2, (uint64_t)v4);
}

void *sub_2171BD958@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x18uLL);
  uint64_t v7 = *a2;
  *(void *)uint64_t v6 = &unk_26C77E748;
  sub_216981010(v6 + 2, a1);
  sub_21698105C(v6 + 3, a1 + 1);
  *((void *)v6 + 2) = v7;
  if (!v7)
  {
    v9[0] = "hd/dataSourceLegacyPrim.cpp";
    v9[1] = "Hd_DataSourceCamera";
    uint64_t v9[2] = 1240;
    void v9[3] = "pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Hd_DataSourceCamera::Hd_DataSourceCamera(const SdfP"
            "ath &, HdSceneDelegate *)";
    char v10 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v9, "_sceneDelegate", 0);
  }
  *a3 = v6;
  double result = operator new(0x20uLL);
  void *result = &unk_26C77F028;
  result[1] = 0;
  result[2] = 0;
  result[3] = v6;
  a3[1] = result;
  return result;
}

void sub_2171BDA5C(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v3);
  sub_21697C414(v2);
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void *sub_2171BDAB8@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x18uLL);
  uint64_t v7 = *a2;
  *(void *)uint64_t v6 = &unk_26C77F0A0;
  sub_216981010(v6 + 2, a1);
  sub_21698105C(v6 + 3, a1 + 1);
  *((void *)v6 + 2) = v7;
  *a3 = v6;
  double result = operator new(0x20uLL);
  void *result = &unk_26C77F1A8;
  result[1] = 0;
  result[2] = 0;
  result[3] = v6;
  a3[1] = result;
  return result;
}

void sub_2171BDB5C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void *sub_2171BDB90@<X0>(uint64_t *a1@<X0>, _DWORD *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = (char *)operator new(0x30uLL);
  uint64_t v7 = *a1;
  *(void *)uint64_t v6 = &unk_26C77F220;
  *((void *)v6 + 1) = v7;
  sub_216981010((_DWORD *)v6 + 4, a2);
  sub_21698105C((_DWORD *)v6 + 5, a2 + 1);
  *(_OWORD *)(v6 + 24) = xmmword_2174C4A80;
  v6[40] = 0;
  uint64_t v8 = *((void *)v6 + 1);
  if (!v8)
  {
    *(void *)&long long v10 = "hd/dataSourceLegacyPrim.cpp";
    *((void *)&v10 + 1) = "Hd_DataSourceRenderBuffer";
    uint64_t v11 = 2153;
    long long v12 = "pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Hd_DataSourceRenderBuffer::Hd_DataSourceRenderBuffer("
          "HdSceneDelegate *, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v10, "_sceneDelegate", 0);
    uint64_t v8 = *((void *)v6 + 1);
  }
  (*(void (**)(long long *__return_ptr))(*(void *)v8 + 280))(&v10);
  *(_OWORD *)(v6 + 24) = v10;
  v6[40] = v11;
  *a3 = v6;
  double result = operator new(0x20uLL);
  void *result = &unk_26C77F5B0;
  result[1] = 0;
  result[2] = 0;
  result[3] = v6;
  a3[1] = result;
  return result;
}

void sub_2171BDCF0(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v3);
  sub_21697C414(v2);
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void *sub_2171BDD50@<X0>(uint64_t *a1@<X0>, _DWORD *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x18uLL);
  uint64_t v7 = *a1;
  void *v6 = &unk_26C77F628;
  v6[1] = v7;
  sub_216981010((_DWORD *)v6 + 4, a2);
  sub_21698105C((_DWORD *)v6 + 5, a2 + 1);
  if (!v6[1])
  {
    v9[0] = "hd/dataSourceLegacyPrim.cpp";
    v9[1] = "Hd_DataSourceRenderSettings";
    uint64_t v9[2] = 2299;
    void v9[3] = "pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Hd_DataSourceRenderSettings::Hd_DataSourceRenderSet"
            "tings(HdSceneDelegate *, const SdfPath &)";
    char v10 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v9, "_sceneDelegate", 0);
  }
  *a3 = v6;
  double result = operator new(0x20uLL);
  void *result = &unk_26C77F908;
  result[1] = 0;
  result[2] = 0;
  result[3] = v6;
  a3[1] = result;
  return result;
}

void sub_2171BDE54(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v3);
  sub_21697C414(v2);
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void *sub_2171BDEB0@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x18uLL);
  uint64_t v7 = *a2;
  *(void *)uint64_t v6 = &unk_26C77F980;
  sub_216981010(v6 + 2, a1);
  sub_21698105C(v6 + 3, a1 + 1);
  *((void *)v6 + 2) = v7;
  if (!v7)
  {
    v9[0] = "hd/dataSourceLegacyPrim.cpp";
    v9[1] = "Hd_DataSourceVolumeField";
    uint64_t v9[2] = 1495;
    void v9[3] = "pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Hd_DataSourceVolumeField::Hd_DataSourceVolumeField("
            "const SdfPath &, HdSceneDelegate *)";
    char v10 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v9, "_sceneDelegate", 0);
  }
  *a3 = v6;
  double result = operator new(0x20uLL);
  void *result = &unk_26C77F9C8;
  result[1] = 0;
  result[2] = 0;
  result[3] = v6;
  a3[1] = result;
  return result;
}

void sub_2171BDFB4(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v3);
  sub_21697C414(v2);
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void *sub_2171BE010@<X0>(uint64_t *a1@<X0>, _DWORD *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x18uLL);
  uint64_t v7 = *a1;
  void *v6 = &unk_26C77FA40;
  v6[1] = v7;
  sub_216981010((_DWORD *)v6 + 4, a2);
  sub_21698105C((_DWORD *)v6 + 5, a2 + 1);
  *a3 = v6;
  double result = operator new(0x20uLL);
  void *result = &unk_26C77FA88;
  result[1] = 0;
  result[2] = 0;
  result[3] = v6;
  a3[1] = result;
  return result;
}

void sub_2171BE0B0(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void *sub_2171BE0E4@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x18uLL);
  uint64_t v7 = *a2;
  *(void *)uint64_t v6 = &unk_26C77FB00;
  sub_216981010(v6 + 2, a1);
  sub_21698105C(v6 + 3, a1 + 1);
  *((void *)v6 + 2) = v7;
  *a3 = v6;
  double result = operator new(0x20uLL);
  void *result = &unk_26C77FF38;
  result[1] = 0;
  result[2] = 0;
  result[3] = v6;
  a3[1] = result;
  return result;
}

void sub_2171BE188(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void *sub_2171BE1BC@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x18uLL);
  uint64_t v7 = *a2;
  *(void *)uint64_t v6 = &unk_26C77FFB0;
  sub_216981010(v6 + 2, a1);
  sub_21698105C(v6 + 3, a1 + 1);
  *((void *)v6 + 2) = v7;
  if (!v7)
  {
    v9[0] = "hd/dataSourceLegacyPrim.cpp";
    v9[1] = "Hd_DataSourceImageShader";
    uint64_t v9[2] = 2382;
    void v9[3] = "pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Hd_DataSourceImageShader::Hd_DataSourceImageShader("
            "const SdfPath &, HdSceneDelegate *)";
    char v10 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v9, "_sceneDelegate", 0);
  }
  *a3 = v6;
  double result = operator new(0x20uLL);
  void *result = &unk_26C77FFF8;
  result[1] = 0;
  result[2] = 0;
  result[3] = v6;
  a3[1] = result;
  return result;
}

void sub_2171BE2C0(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v3);
  sub_21697C414(v2);
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

void sub_2171BE31C(uint64_t a1)
{
  *(void *)a1 = &unk_26C77C5F0;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2) {
    sub_216784EC4(v2);
  }
  long long v3 = *(std::__shared_weak_count **)(a1 + 64);
  if (v3) {
    sub_216784EC4(v3);
  }
  long long v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (v4) {
    sub_216784EC4(v4);
  }
  uint64_t v5 = *(void *)(a1 + 16);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 12));
  sub_21697C414((_DWORD *)(a1 + 8));

  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase((pxrInternal__aapl__pxrReserved__::HdDataSourceBase *)a1);
}

void sub_2171BE3BC(uint64_t a1)
{
  *(void *)a1 = &unk_26C77C5F0;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2) {
    sub_216784EC4(v2);
  }
  long long v3 = *(std::__shared_weak_count **)(a1 + 64);
  if (v3) {
    sub_216784EC4(v3);
  }
  long long v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (v4) {
    sub_216784EC4(v4);
  }
  uint64_t v5 = *(void *)(a1 + 16);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 12));
  sub_21697C414((_DWORD *)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase((pxrInternal__aapl__pxrReserved__::HdDataSourceBase *)a1);

  operator delete(v6);
}

void sub_2171BE460(uint64_t *a1, uint64_t *a2)
{
  sp_mut = std::__get_sp_mut(a1);
  std::__sp_mut::lock(sp_mut);
  uint64_t v5 = *a1;
  *a1 = *a2;
  *a2 = v5;
  uint64_t v6 = a1[1];
  a1[1] = a2[1];
  a2[1] = v6;

  std::__sp_mut::unlock(sp_mut);
}

void sub_2171BE4CC(void *a1@<X0>, void *a2@<X8>)
{
  sp_mut = std::__get_sp_mut(a1);
  std::__sp_mut::lock(sp_mut);
  uint64_t v5 = a1[1];
  *a2 = *a1;
  a2[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }

  std::__sp_mut::unlock(sp_mut);
}

pxrInternal__aapl__pxrReserved__::HdPrimvarSchemaTokens_StaticTokenType *sub_2171BE530(atomic_ullong *a1)
{
  double result = sub_2171BE578();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::HdPrimvarSchemaTokens_StaticTokenType::~HdPrimvarSchemaTokens_StaticTokenType(result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::HdPrimvarSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::HdPrimvarSchemaTokens_StaticTokenType *sub_2171BE578()
{
  v0 = (pxrInternal__aapl__pxrReserved__::HdPrimvarSchemaTokens_StaticTokenType *)operator new(0xB8uLL);
  pxrInternal__aapl__pxrReserved__::HdPrimvarSchemaTokens_StaticTokenType::HdPrimvarSchemaTokens_StaticTokenType(v0);
  return v0;
}

void sub_2171BE5A8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2171BE5BC(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(void *)double result = *a2;
  if ((v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)result &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v3 = a2[1];
  *(void *)(result + 8) = v3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(result + 8) &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v4 = a2[2];
  *(void *)(result + 16) = v4;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(result + 16) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(unsigned char *)(result + 24) = *((unsigned char *)a2 + 24);
  return result;
}

void *sub_2171BE64C(void *result)
{
  uint64_t v1 = result[2];
  if ((v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v2 = result[1];
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*result & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*result & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

uint64_t sub_2171BE698(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_21697C414((_DWORD *)(a1 + 16));
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)a1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)a1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

uint64_t sub_2171BE718(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_21697C414((_DWORD *)(a1 + 24));
  uint64_t v3 = *(void *)(a1 + 16);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)a1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)a1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

uint64_t sub_2171BE7B0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_21697C414((_DWORD *)(a1 + 24));
  uint64_t v3 = *(void *)(a1 + 16);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)a1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)a1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

__n128 sub_2171BE848(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v5 = a2[1];
  *(void *)(a1 + 8) = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 8) &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v6 = a2[2];
  *(void *)(a1 + 16) = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 16) &= 0xFFFFFFFFFFFFFFF8;
  }
  sub_216981010((_DWORD *)(a1 + 24), (_DWORD *)a2 + 6);
  sub_21698105C((_DWORD *)(a1 + 28), (_DWORD *)a2 + 7);
  uint64_t v7 = a2[4];
  *(void *)(a1 + 32) = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 32) &= 0xFFFFFFFFFFFFFFF8;
  }
  __n128 result = *(__n128 *)(a2 + 5);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

_DWORD *sub_2171BE93C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  __n128 result = sub_21697C414((_DWORD *)(a1 + 24));
  uint64_t v4 = *(void *)(a1 + 16);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *(void *)(a1 + 8);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)a1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)a1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

uint64_t *sub_2171BE9D0(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_2171BEA28(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_2171BEA10(_Unwind_Exception *a1)
{
  sub_2171BF6E0(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_2171BEA28(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      __n128 result = sub_2171BEAB4(v5, v6, v4 + 4, v4 + 4);
      uint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_2171BEAB4(uint64_t **a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6 = sub_216A5D0F4(a1, a2, &v12, &v11, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    sub_2171BEB4C((uint64_t)a1, a4, (uint64_t)v10);
    sub_21677B358(a1, v12, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    sub_2171BF618((uint64_t)v10, 0);
  }
  return v7;
}

uint64_t *sub_2171BEB4C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (uint64_t *)operator new(0x70uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  __n128 result = sub_2171BEBB8(v6 + 4, a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_2171BEBA0(_Unwind_Exception *a1)
{
  sub_2171BF618(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *sub_2171BEBB8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  sub_2171BECD0(a1 + 1, a2[1], a2[2], (a2[2] - a2[1]) >> 5);
  a1[4] = 0;
  a1[5] = 0;
  a1[6] = 0;
  sub_2171BF040(a1 + 4, a2[4], a2[5], 0xCCCCCCCCCCCCCCCDLL * ((a2[5] - a2[4]) >> 3));
  a1[7] = 0;
  a1[8] = 0;
  a1[9] = 0;
  sub_21698FA28(a1 + 7, (uint64_t *)a2[7], (uint64_t *)a2[8], (a2[8] - a2[7]) >> 3);
  return a1;
}

void sub_2171BEC84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2171BF580((void ***)va);
  sub_2171BEFA8((void ***)va);
  if ((*v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void *sub_2171BECD0(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_2168C5234(result, a4);
    __n128 result = (void *)sub_2171BED58((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_2171BED38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_2171BEFA8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2171BED58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  uint64_t v9[2] = &v12;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_2171BEDEC(a1, v4, v6);
      v6 += 32;
      uint64_t v4 = v12 + 32;
      v12 += 32;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  sub_2171BEE98((uint64_t)v9);
  return v4;
}

_DWORD *sub_2171BEDEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_216981010((_DWORD *)a2, (_DWORD *)a3);
  sub_21698105C((_DWORD *)(a2 + 4), (_DWORD *)(a3 + 4));
  uint64_t v5 = *(void *)(a3 + 8);
  *(void *)(a2 + 8) = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a2 + 8) &= 0xFFFFFFFFFFFFFFF8;
  }
  sub_216981010((_DWORD *)(a2 + 16), (_DWORD *)(a3 + 16));
  __n128 result = sub_21698105C((_DWORD *)(a2 + 20), (_DWORD *)(a3 + 20));
  uint64_t v7 = *(void *)(a3 + 24);
  *(void *)(a2 + 24) = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a2 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  return result;
}

uint64_t sub_2171BEE98(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_2171BEED0((uint64_t *)a1);
  }
  return a1;
}

uint64_t *sub_2171BEED0(uint64_t *result)
{
  uint64_t v2 = (uint64_t *)result[1];
  uint64_t v1 = (uint64_t *)result[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *result;
    do
    {
      v3 -= 32;
      __n128 result = (uint64_t *)sub_2171BEF24(v5, v3);
    }
    while (v3 != v4);
  }
  return result;
}

_DWORD *sub_2171BEF24(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 20));
  sub_21697C414((_DWORD *)(a2 + 16));
  uint64_t v4 = *(void *)(a2 + 8);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 4));

  return sub_21697C414((_DWORD *)a2);
}

void sub_2171BEFA8(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 32;
        sub_2171BEF24((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *sub_2171BF040(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_2168724E8(result, a4);
    __n128 result = (void *)sub_2171BF0C8((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_2171BF0A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_2171BF580(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2171BF0C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  uint64_t v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_2171BF174(a1, v4, v6);
      v6 += 40;
      uint64_t v4 = v12 + 40;
      v12 += 40;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  sub_2171BF490((uint64_t)v9);
  return v4;
}

void sub_2171BF160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_2171BF174(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_216981010((_DWORD *)a2, (_DWORD *)a3);
  sub_21698105C((_DWORD *)(a2 + 4), (_DWORD *)(a3 + 4));
  uint64_t v5 = *(void *)(a3 + 8);
  *(void *)(a2 + 8) = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a2 + 8) &= 0xFFFFFFFFFFFFFFF8;
  }
  return sub_2171BF22C((uint64_t *)(a2 + 16), a3 + 16);
}

void sub_2171BF1F4(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void *)(v1 + 8);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v2);
  sub_21697C414((_DWORD *)v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_2171BF22C(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_2171BF284(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_2171BF26C(_Unwind_Exception *a1)
{
  sub_216D61968(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_2171BF284(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      __n128 result = sub_2171BF310(v5, v6, v4 + 4, v4 + 4);
      uint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_2171BF310(uint64_t **a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6 = (uint64_t **)sub_216A5D0F4(a1, a2, &v10, &v9, a3);
  __n128 result = *v6;
  if (!*v6)
  {
    sub_2171BF394((uint64_t)a1, a4, (uint64_t)&v8);
    sub_21677B358(a1, v10, v6, v8);
    return v8;
  }
  return result;
}

uint64_t *sub_2171BF394@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (uint64_t *)operator new(0x38uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  __n128 result = sub_2171BF418(v6 + 4, a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_2171BF3FC(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_2170F7808(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_2171BF418(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  sub_2168EE4C4(a1 + 1, a2 + 1);
  return a1;
}

uint64_t sub_2171BF490(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_2171BF4C8((uint64_t *)a1);
  }
  return a1;
}

uint64_t *sub_2171BF4C8(uint64_t *result)
{
  uint64_t v2 = (uint64_t *)result[1];
  uint64_t v1 = (uint64_t *)result[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *result;
    do
    {
      v3 -= 40;
      __n128 result = (uint64_t *)sub_2171BF51C(v5, v3);
    }
    while (v3 != v4);
  }
  return result;
}

_DWORD *sub_2171BF51C(uint64_t a1, uint64_t a2)
{
  sub_216D61968(a2 + 16, *(void **)(a2 + 24));
  uint64_t v3 = *(void *)(a2 + 8);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 4));

  return sub_21697C414((_DWORD *)a2);
}

void sub_2171BF580(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 40;
        sub_2171BF51C((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_2171BF618(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_2171BF670((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void sub_2171BF670(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 8);
  uint64_t v3 = (void **)(a1 + 56);
  sub_216889A04(&v3);
  uint64_t v3 = (void **)(a1 + 32);
  sub_2171BF580(&v3);
  uint64_t v3 = v2;
  sub_2171BEFA8(&v3);
  if ((*(void *)a1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)a1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_2171BF6E0(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_2171BF6E0(a1, *a2);
    sub_2171BF6E0(a1, a2[1]);
    sub_2171BF670((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t *sub_2171BF73C(uint64_t **a1, uint64_t a2)
{
  uint64_t v5 = a1 + 1;
  uint64_t v4 = a1[1];
  uint64_t v6 = a1 + 1;
  uint64_t v7 = a1 + 1;
  if (!v4) {
    goto LABEL_10;
  }
  uint64_t v6 = a1 + 1;
  while (1)
  {
    while (1)
    {
      uint64_t v7 = (uint64_t **)v4;
      uint64_t v8 = (const void **)(v4 + 4);
      if (!sub_21677B108((uint64_t)(a1 + 2), (const void **)a2, (const void **)v4 + 4)) {
        break;
      }
      uint64_t v4 = *v7;
      uint64_t v6 = v7;
      if (!*v7) {
        goto LABEL_10;
      }
    }
    if (!sub_21677B108((uint64_t)(a1 + 2), v8, (const void **)a2)) {
      break;
    }
    uint64_t v6 = v7 + 1;
    uint64_t v4 = v7[1];
    if (!v4) {
      goto LABEL_10;
    }
  }
  uint64_t v9 = *v6;
  if (!*v6)
  {
LABEL_10:
    uint64_t v10 = operator new(0x50uLL);
    v15[0] = v10;
    v15[1] = v5;
    char v16 = 0;
    uint64_t v11 = v10 + 4;
    if (*(char *)(a2 + 23) < 0)
    {
      sub_216778F24(v11, *(void **)a2, *(void *)(a2 + 8));
      uint64_t v12 = (uint64_t *)v15[0];
    }
    else
    {
      *(_OWORD *)uint64_t v11 = *(_OWORD *)a2;
      v10[6] = *(void *)(a2 + 16);
      uint64_t v12 = v10;
    }
    v10[7] = 0;
    v10[8] = 0;
    v10[9] = 0;
    char v16 = 1;
    uint64_t *v12 = 0;
    v12[1] = 0;
    uint64_t v12[2] = (uint64_t)v7;
    uint64_t *v6 = v12;
    char v13 = (uint64_t *)**a1;
    if (v13)
    {
      *a1 = v13;
      uint64_t v12 = *v6;
    }
    sub_21677B3B0(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    uint64_t v9 = (uint64_t *)v15[0];
    v15[0] = 0;
    sub_2171BFBA8((uint64_t)v15);
  }
  return v9 + 7;
}

void sub_2171BF890(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2171BFBA8((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_2171BF8A4@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x18uLL);
  sub_2171BFC58(v4, a1);

  return sub_2171BFD7C(a2, (uint64_t)v4);
}

void sub_2171BF8FC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_2171BF910(uint64_t *a1, uint64_t *a2)
{
  v7[17] = *MEMORY[0x263EF8340];
  v5[16] = 0x800000000;
  sub_2171C0830(&v6, a2, (uint64_t)v5);
  uint64_t v3 = sub_2171BFF44(a1, &v6);
  sub_2171C0D90((uint64_t)v7);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_2171C0D90((uint64_t)v5);
  return v3 + 1;
}

void sub_2171BF9C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_2171C0D90(v26 + 8);
  if ((a26 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_2171C0D90((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void *sub_2171BFA00@<X0>(unsigned int *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x210uLL);
  pxrInternal__aapl__pxrReserved__::HdRetainedSmallVectorDataSource::HdRetainedSmallVectorDataSource(v6, *a1, *a2);

  return sub_2171C0C80(a3, (uint64_t)v6);
}

void sub_2171BFA60(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_2171BFA74(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[9];
  if (v2) {
    sub_216784EC4(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[7];
  if (v3) {
    sub_216784EC4(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[5];
  if (v4) {
    sub_216784EC4(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[3];
  if (v5) {
    sub_216784EC4(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)a1[1];
  if (v6) {
    sub_216784EC4(v6);
  }
  return a1;
}

void *sub_2171BFAD4(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    sub_216784EC4(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3) {
    sub_216784EC4(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4) {
    sub_216784EC4(v4);
  }
  return a1;
}

pxrInternal__aapl__pxrReserved__::HdMaterialNodeParameterSchemaTokens_StaticTokenType *sub_2171BFB1C(atomic_ullong *a1)
{
  __n128 result = sub_2171BFB64();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::HdMaterialNodeParameterSchemaTokens_StaticTokenType::~HdMaterialNodeParameterSchemaTokens_StaticTokenType(result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::HdMaterialNodeParameterSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::HdMaterialNodeParameterSchemaTokens_StaticTokenType *sub_2171BFB64()
{
  v0 = (pxrInternal__aapl__pxrReserved__::HdMaterialNodeParameterSchemaTokens_StaticTokenType *)operator new(0x28uLL);
  pxrInternal__aapl__pxrReserved__::HdMaterialNodeParameterSchemaTokens_StaticTokenType::HdMaterialNodeParameterSchemaTokens_StaticTokenType(v0);
  return v0;
}

void sub_2171BFB94(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2171BFBA8(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_2171BFBF0((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
  return a1;
}

void sub_2171BFBF0(uint64_t a1)
{
  uint64_t v2 = a1 + 24;
  uint64_t v3 = *(void *)(a1 + 40);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_2168EE084(v2);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v4 = *(void **)a1;
    operator delete(v4);
  }
}

void *sub_2171BFC58(void *a1, void *a2)
{
  *a1 = &unk_26C77C638;
  sub_2168EE4C4(a1 + 1, a2);
  return a1;
}

void sub_2171BFC9C(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(v1);
  _Unwind_Resume(a1);
}

void sub_2171BFCB0(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *a1)
{
  *(void *)a1 = &unk_26C77C638;
  sub_2168EE084((uint64_t)a1 + 8);

  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(a1);
}

void sub_2171BFD04(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *a1)
{
  *(void *)a1 = &unk_26C77C638;
  sub_2168EE084((uint64_t)a1 + 8);
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(a1);

  operator delete(v2);
}

void *sub_2171BFD5C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_2168EE4C4(a2, (void *)(a1 + 8));
}

uint64_t sub_2171BFD68()
{
  return 0;
}

void *sub_2171BFD70@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_2168EE4C4(a2, (void *)(a1 + 8));
}

void *sub_2171BFD7C(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  void *v4 = &unk_26C77C6A0;
  v4[1] = 0;
  _DWORD v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_2171BFDD4(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_2173254E8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_2171BFDF0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171BFE18(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2171BFE48(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77C6F0)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_2171BFE8C(void ***a1)
{
  uint64_t v2 = (uint64_t *)*a1;
  if (*v2)
  {
    sub_2171BFEE0((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

uint64_t sub_2171BFEE0(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  for (uint64_t i = *(void *)(result + 8); i != a2; i -= 144)
  {
    uint64_t result = sub_2171C0D90(i - 136);
    uint64_t v6 = *(void *)(i - 144);
    uint64_t v5 = v6;
    if ((v6 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  *(void *)(v3 + 8) = a2;
  return result;
}

void *sub_2171BFF44(uint64_t *a1, uint64_t *a2)
{
  v15[17] = *MEMORY[0x263EF8340];
  uint64_t v4 = a1[3];
  if (v4)
  {
    unint64_t v5 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 4);
    uint64_t v6 = *a2;
    if ((*a2 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v6 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v14 = v6;
    v15[0] = v5;
    uint64_t v7 = sub_2168CD6A4(v4, &v14, &v14);
    if ((v14 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if (!v8) {
      return (void *)(*a1 + 144 * v7[3]);
    }
    goto LABEL_14;
  }
  uint64_t result = (void *)*a1;
  uint64_t v10 = (void *)a1[1];
  if ((void *)*a1 != v10)
  {
    while ((*result & 0xFFFFFFFFFFFFFFF8) != (*a2 & 0xFFFFFFFFFFFFFFF8))
    {
      result += 18;
      if (result == v10) {
        goto LABEL_14;
      }
    }
  }
  if (result == v10)
  {
LABEL_14:
    sub_2171C0674((uint64_t)&v14, a2, (uint64_t)(a2 + 1));
    unint64_t v11 = a1[1];
    if (v11 >= a1[2])
    {
      uint64_t v12 = sub_2171C0164(a1, &v14);
    }
    else
    {
      sub_2171C0284(a1[1], &v14);
      uint64_t v12 = v11 + 144;
      a1[1] = v11 + 144;
    }
    a1[1] = v12;
    sub_2171C0D90((uint64_t)v15);
    if ((v14 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v13 = a1[1];
    if (0x8E38E38E38E38E39 * ((v13 - *a1) >> 4) >= 0x80)
    {
      sub_2171C06EC(a1);
      uint64_t v13 = a1[1];
    }
    return (void *)(v13 - 144);
  }
  return result;
}

void sub_2171C0114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_2171C0D90((uint64_t)va);
  if ((a3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2171C0164(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x1C71C71C71C71C7) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x8E38E38E38E38E39 * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0xE38E38E38E38E3) {
    unint64_t v9 = 0x1C71C71C71C71C7;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_2171C042C(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v13 = v10;
  uint64_t v14 = &v10[144 * v4];
  char v16 = &v10[144 * v9];
  sub_2171C0284((uint64_t)v14, a2);
  uint64_t v15 = v14 + 144;
  sub_2171C03B4(a1, &v13);
  uint64_t v11 = a1[1];
  sub_2171C05D0((uint64_t)&v13);
  return v11;
}

void sub_2171C0270(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2171C05D0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2171C0284(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  sub_2171C02FC((_DWORD *)(a1 + 8), (uint64_t)(a2 + 1));
  return a1;
}

_DWORD *sub_2171C02FC(_DWORD *a1, uint64_t a2)
{
  uint64_t v3 = a1;
  a1[33] = 8;
  uint64_t v4 = *(unsigned int *)(a2 + 128);
  if (v4 <= 8)
  {
    a1[32] = v4;
    unint64_t v5 = *(void **)a2;
    uint64_t v6 = *(unsigned int *)(a2 + 128);
    if (*(_DWORD *)(a2 + 132) < 9u) {
      unint64_t v5 = (void *)a2;
    }
    uint64_t v7 = &v5[2 * v6];
    if (!v6) {
      return v3;
    }
    do
    {
LABEL_9:
      uint64_t v9 = v5[1];
      *(void *)a1 = *v5;
      *((void *)a1 + 1) = v9;
      if (v9) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
      }
      v5 += 2;
      a1 += 4;
    }
    while (v5 != v7);
    return v3;
  }
  a1 = malloc(16 * v4);
  *(void *)uint64_t v3 = a1;
  v3[32] = v4;
  v3[33] = v4;
  unint64_t v5 = *(void **)a2;
  uint64_t v8 = *(unsigned int *)(a2 + 128);
  if (*(_DWORD *)(a2 + 132) < 9u) {
    unint64_t v5 = (void *)a2;
  }
  uint64_t v7 = &v5[2 * v8];
  if (v8) {
    goto LABEL_9;
  }
  return v3;
}

uint64_t sub_2171C03B4(uint64_t *a1, void *a2)
{
  uint64_t result = sub_2171C0478((uint64_t)(a1 + 2), a1[1], (uint64_t *)a1[1], *a1, (uint64_t *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_2171C042C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1C71C71C71C71C8) {
    sub_21677CA1C();
  }
  return operator new(144 * a2);
}

uint64_t sub_2171C0478(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  uint64_t v12[2] = &v15;
  char v13 = 0;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 18;
      sub_2171C0284(v7 - 144, v9);
      uint64_t v7 = *((void *)&v15 + 1) - 144;
      *((void *)&v15 + 1) -= 144;
    }
    while (v9 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_2171C0534((uint64_t)v12);
  return v10;
}

void sub_2171C0520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2171C0534(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_2171C056C(a1);
  }
  return a1;
}

uint64_t sub_2171C056C(uint64_t result)
{
  uint64_t v1 = *(void **)(*(void *)(result + 16) + 8);
  for (uint64_t i = *(void **)(*(void *)(result + 8) + 8); v1 != i; v1 += 18)
  {
    uint64_t result = sub_2171C0D90((uint64_t)(v1 + 1));
    if ((*v1 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return result;
}

uint64_t sub_2171C05D0(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_2171C0608(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2 != a2)
  {
    uint64_t v4 = result;
    do
    {
      *(void *)(v4 + 16) = v2 - 144;
      uint64_t result = sub_2171C0D90(v2 - 136);
      uint64_t v5 = *(void *)(v2 - 144);
      if ((v5 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v2 = *(void *)(v4 + 16);
    }
    while (v2 != a2);
  }
  return result;
}

uint64_t sub_2171C0674(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  sub_2171C02FC((_DWORD *)(a1 + 8), a3);
  return a1;
}

void sub_2171C06EC(uint64_t *a1)
{
  uint64_t v1 = a1 + 3;
  if (!a1[3])
  {
    uint64_t v3 = operator new(0x28uLL);
    *uint64_t v3 = 0u;
    v3[1] = 0u;
    *((_DWORD *)v3 + 8) = 1065353216;
    sub_21678A04C((uint64_t)v3, 0x80uLL);
    sub_2168CAE68(v1, (uint64_t)v3);
    uint64_t v4 = *a1;
    if (a1[1] != *a1)
    {
      uint64_t v5 = 0;
      unint64_t v6 = 0;
      do
      {
        uint64_t v7 = *v1;
        uint64_t v8 = *(void *)(v4 + v5);
        if ((v8 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          v8 &= 0xFFFFFFFFFFFFFFF8;
        }
        v9[0] = v8;
        v9[1] = v6;
        sub_2168CD6A4(v7, v9, v9);
        if ((v9[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v9[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        ++v6;
        uint64_t v4 = *a1;
        v5 += 144;
      }
      while (v6 < 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 4));
    }
  }
}

void sub_2171C07F8(_Unwind_Exception *a1)
{
  uint64_t v3 = (void *)sub_2168C08A0(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t *sub_2171C0830(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  sub_2171C08A8((uint64_t)(a1 + 1), a3);
  return a1;
}

uint64_t sub_2171C08A8(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 128) = 0x800000000;
  uint64_t v4 = *(unsigned int *)(a2 + 128);
  if (v4 < 9)
  {
    if (*(_DWORD *)(a2 + 132) >= 9u) {
      uint64_t v5 = *(void *)a2;
    }
    else {
      uint64_t v5 = a2;
    }
    if (v4)
    {
      uint64_t v6 = 16 * v4;
      uint64_t v7 = (_OWORD *)a1;
      do
      {
        *v7++ = *(_OWORD *)v5;
        *(void *)uint64_t v5 = 0;
        *(void *)(v5 + 8) = 0;
        v5 += 16;
        v6 -= 16;
      }
      while (v6);
    }
    sub_2171C094C((uint64_t *)a2);
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(_DWORD *)(a1 + 132) = *(_DWORD *)(a2 + 132);
    *(_DWORD *)(a2 + 132) = 8;
  }
  int v8 = *(_DWORD *)(a1 + 128);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a2 + 128) = v8;
  return a1;
}

void sub_2171C094C(uint64_t *a1)
{
  uint64_t v1 = a1;
  if (*((_DWORD *)a1 + 33) >= 9u) {
    uint64_t v1 = (uint64_t *)*a1;
  }
  uint64_t v2 = *((unsigned int *)a1 + 32);
  if (v2)
  {
    uint64_t v3 = 16 * v2;
    uint64_t v4 = (std::__shared_weak_count **)(v1 + 1);
    do
    {
      if (*v4) {
        sub_216784EC4(*v4);
      }
      v4 += 2;
      v3 -= 16;
    }
    while (v3);
  }
}

void sub_2171C09A4(uint64_t a1, long long *a2)
{
  unsigned int v5 = *(_DWORD *)(a1 + 128);
  unsigned int v4 = *(_DWORD *)(a1 + 132);
  if (v5 == v4)
  {
    sub_2171C0A24(a1, v5 + (v5 >> 1) + 1);
    unsigned int v4 = *(_DWORD *)(a1 + 132);
  }
  uint64_t v6 = a1;
  if (v4 >= 9) {
    uint64_t v6 = *(void *)a1;
  }
  uint64_t v7 = *(unsigned int *)(a1 + 128);
  long long v8 = *a2;
  *(_OWORD *)(v6 + 16 * v7) = *a2;
  if (*((void *)&v8 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v8 + 1) + 8), 1uLL, memory_order_relaxed);
    LODWORD(v7) = *(_DWORD *)(a1 + 128);
  }
  *(_DWORD *)(a1 + 128) = v7 + 1;
}

void sub_2171C0A24(uint64_t a1, unsigned int a2)
{
  unsigned int v4 = malloc(16 * a2);
  unsigned int v5 = v4;
  uint64_t v6 = a1;
  if (*(_DWORD *)(a1 + 132) >= 9u) {
    uint64_t v6 = *(void *)a1;
  }
  uint64_t v7 = *(unsigned int *)(a1 + 128);
  if (v7)
  {
    uint64_t v8 = 16 * v7;
    uint64_t v9 = v4;
    do
    {
      *v9++ = *(_OWORD *)v6;
      *(void *)uint64_t v6 = 0;
      *(void *)(v6 + 8) = 0;
      v6 += 16;
      v8 -= 16;
    }
    while (v8);
  }
  sub_2171C094C((uint64_t *)a1);
  if (*(_DWORD *)(a1 + 132) >= 9u) {
    free(*(void **)a1);
  }
  *(void *)a1 = v5;
  *(_DWORD *)(a1 + 132) = a2;
}

void sub_2171C0AB8(uint64_t a1, unsigned int a2)
{
  unsigned int v4 = malloc(8 * a2);
  unsigned int v5 = v4;
  unsigned int v6 = *(_DWORD *)(a1 + 68);
  uint64_t v7 = (void *)a1;
  if (v6 >= 9) {
    uint64_t v7 = *(void **)a1;
  }
  uint64_t v8 = *(unsigned int *)(a1 + 64);
  uint64_t v9 = 8 * v8;
  if (v8)
  {
    uint64_t v10 = 8 * v8;
    uint64_t v11 = v4;
    do
    {
      *v11++ = *v7;
      *v7++ = 0;
      v10 -= 8;
    }
    while (v10);
  }
  uint64_t v12 = (void *)a1;
  if (v6 >= 9) {
    uint64_t v12 = *(void **)a1;
  }
  if (v8)
  {
    do
    {
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      ++v12;
      v9 -= 8;
    }
    while (v9);
    unsigned int v6 = *(_DWORD *)(a1 + 68);
  }
  if (v6 >= 9) {
    free(*(void **)a1);
  }
  *(void *)a1 = v5;
  *(_DWORD *)(a1 + 68) = a2;
}

void sub_2171C0B80(uint64_t a1, uint64_t *a2)
{
  unsigned int v4 = *(_DWORD *)(a1 + 64);
  unsigned int v5 = *(_DWORD *)(a1 + 68);
  if (v4 == v5)
  {
    sub_2171C0AB8(a1, v4 + (v4 >> 1) + 1);
    unsigned int v5 = *(_DWORD *)(a1 + 68);
  }
  uint64_t v6 = a1;
  if (v5 >= 9) {
    uint64_t v6 = *(void *)a1;
  }
  uint64_t v7 = *(unsigned int *)(a1 + 64);
  uint64_t v8 = *a2;
  *(void *)(v6 + 8 * v7) = *a2;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(v6 + 8 * v7) &= 0xFFFFFFFFFFFFFFF8;
  }
  ++*(_DWORD *)(a1 + 64);
}

__n128 sub_2171C0C10(uint64_t a1, __n128 *a2)
{
  unsigned int v5 = *(_DWORD *)(a1 + 128);
  unsigned int v4 = *(_DWORD *)(a1 + 132);
  if (v5 == v4)
  {
    sub_2171C0A24(a1, v5 + (v5 >> 1) + 1);
    unsigned int v4 = *(_DWORD *)(a1 + 132);
  }
  uint64_t v6 = a1;
  if (v4 >= 9) {
    uint64_t v6 = *(void *)a1;
  }
  __n128 result = *a2;
  *(__n128 *)(v6 + 16 * *(unsigned int *)(a1 + 128)) = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  ++*(_DWORD *)(a1 + 128);
  return result;
}

void *sub_2171C0C80(void *a1, uint64_t a2)
{
  *a1 = a2;
  unsigned int v4 = operator new(0x20uLL);
  void *v4 = &unk_26C77C718;
  v4[1] = 0;
  _DWORD v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_2171C0CD8(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_2173254E8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_2171C0CF4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171C0D1C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2171C0D4C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77C768)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t sub_2171C0D90(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 132) >= 9u) {
    free(*(void **)a1);
  }
  return a1;
}

uint64_t sub_2171C0DD0(uint64_t a1)
{
  unsigned int v2 = *(_DWORD *)(a1 + 68);
  uint64_t v3 = (void *)a1;
  if (v2 >= 9) {
    uint64_t v3 = *(void **)a1;
  }
  uint64_t v4 = *(unsigned int *)(a1 + 64);
  if (v4)
  {
    uint64_t v5 = 8 * v4;
    do
    {
      if ((*v3 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      ++v3;
      v5 -= 8;
    }
    while (v5);
    unsigned int v2 = *(_DWORD *)(a1 + 68);
  }
  if (v2 >= 9) {
    free(*(void **)a1);
  }
  return a1;
}

void sub_2171C0E4C(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_2171C0E4C(a1, *a2);
    sub_2171C0E4C(a1, a2[1]);
    sub_2171BFBF0((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

atomic_uint **sub_2171C0EA8(atomic_ullong *a1)
{
  uint64_t result = sub_2171C0EF0();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::HdLegacyPrimTypeTokens_StaticTokenType::~HdLegacyPrimTypeTokens_StaticTokenType((pxrInternal__aapl__pxrReserved__::HdLegacyPrimTypeTokens_StaticTokenType *)result);
      operator delete(v4);
    }
    return (atomic_uint **)atomic_load((unint64_t *)a1);
  }
  return result;
}

atomic_uint **sub_2171C0EF0()
{
  v0 = (atomic_uint **)operator new(0x28uLL);
  pxrInternal__aapl__pxrReserved__::HdLegacyPrimTypeTokens_StaticTokenType::HdLegacyPrimTypeTokens_StaticTokenType(v0);
  return v0;
}

void sub_2171C0F20(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens_StaticTokenType *sub_2171C0F34(atomic_ullong *a1)
{
  uint64_t result = sub_2171C0F7C();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens_StaticTokenType::~HdPrimTypeTokens_StaticTokenType(result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens_StaticTokenType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens_StaticTokenType *sub_2171C0F7C()
{
  v0 = (pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens_StaticTokenType *)operator new(0x148uLL);
  pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens_StaticTokenType::HdPrimTypeTokens_StaticTokenType(v0);
  return v0;
}

void sub_2171C0FAC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::HdMeshSchemaTokens_StaticTokenType *sub_2171C0FC0(atomic_ullong *a1)
{
  uint64_t result = sub_2171C1008();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::HdMeshSchemaTokens_StaticTokenType::~HdMeshSchemaTokens_StaticTokenType(result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::HdMeshSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::HdMeshSchemaTokens_StaticTokenType *sub_2171C1008()
{
  v0 = (pxrInternal__aapl__pxrReserved__::HdMeshSchemaTokens_StaticTokenType *)operator new(0x48uLL);
  pxrInternal__aapl__pxrReserved__::HdMeshSchemaTokens_StaticTokenType::HdMeshSchemaTokens_StaticTokenType(v0);
  return v0;
}

void sub_2171C1038(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::HdMaterialBindingsSchemaTokens_StaticTokenType *sub_2171C104C(atomic_ullong *a1)
{
  uint64_t result = sub_2171C1094();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::HdMaterialBindingsSchemaTokens_StaticTokenType::~HdMaterialBindingsSchemaTokens_StaticTokenType(result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::HdMaterialBindingsSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::HdMaterialBindingsSchemaTokens_StaticTokenType *sub_2171C1094()
{
  v0 = (pxrInternal__aapl__pxrReserved__::HdMaterialBindingsSchemaTokens_StaticTokenType *)operator new(0x28uLL);
  pxrInternal__aapl__pxrReserved__::HdMaterialBindingsSchemaTokens_StaticTokenType::HdMaterialBindingsSchemaTokens_StaticTokenType(v0);
  return v0;
}

void sub_2171C10C4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2171C10D8(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *a1)
{
  *(void *)a1 = &unk_26C77C790;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)a1 + 3);
  sub_21697C414((_DWORD *)a1 + 2);

  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(a1);
}

void sub_2171C1138(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *a1)
{
  *(void *)a1 = &unk_26C77C790;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)a1 + 3);
  sub_21697C414((_DWORD *)a1 + 2);
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(a1);

  operator delete(v2);
}

_DWORD *sub_2171C119C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = (char *)&off_26C754FA0 + 1;
  uint64_t v3 = sub_216981010((_DWORD *)a2, (_DWORD *)(a1 + 8)) + 1;

  return sub_21698105C(v3, (_DWORD *)(a1 + 12));
}

uint64_t sub_2171C11F0()
{
  return 0;
}

_DWORD *sub_2171C11F8@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v3 = sub_216981010(a2, (_DWORD *)(a1 + 8)) + 1;

  return sub_21698105C(v3, (_DWORD *)(a1 + 12));
}

void *sub_2171C123C(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  void *v4 = &unk_26C77C7E0;
  v4[1] = 0;
  _DWORD v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_2171C1294(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_2173254E8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_2171C12B0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171C12D8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2171C1308(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77C830)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

pxrInternal__aapl__pxrReserved__::HdVisibilitySchemaTokens_StaticTokenType *sub_2171C134C(atomic_ullong *a1)
{
  uint64_t result = sub_2171C1394();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::HdVisibilitySchemaTokens_StaticTokenType::~HdVisibilitySchemaTokens_StaticTokenType(result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::HdVisibilitySchemaTokens_StaticTokenType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::HdVisibilitySchemaTokens_StaticTokenType *sub_2171C1394()
{
  v0 = (pxrInternal__aapl__pxrReserved__::HdVisibilitySchemaTokens_StaticTokenType *)operator new(0x20uLL);
  pxrInternal__aapl__pxrReserved__::HdVisibilitySchemaTokens_StaticTokenType::HdVisibilitySchemaTokens_StaticTokenType(v0);
  return v0;
}

void sub_2171C13C4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::HdVolumeFieldSchemaTokens_StaticTokenType *sub_2171C13D8(atomic_ullong *a1)
{
  uint64_t result = sub_2171C1420();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::HdVolumeFieldSchemaTokens_StaticTokenType::~HdVolumeFieldSchemaTokens_StaticTokenType(result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::HdVolumeFieldSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::HdVolumeFieldSchemaTokens_StaticTokenType *sub_2171C1420()
{
  v0 = (pxrInternal__aapl__pxrReserved__::HdVolumeFieldSchemaTokens_StaticTokenType *)operator new(0x48uLL);
  pxrInternal__aapl__pxrReserved__::HdVolumeFieldSchemaTokens_StaticTokenType::HdVolumeFieldSchemaTokens_StaticTokenType(v0);
  return v0;
}

void sub_2171C1450(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2171C1464(void *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    uint64_t v4 = a1 + 3;
    uint64_t v3 = (atomic_ullong *)a1[3];
    if (v3)
    {
      if (atomic_fetch_add_explicit(v3, 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
      {
        __dmb(9u);
        uint64_t v7 = *(void (**)(void))(*v4 + 8);
        if (v7) {
          v7();
        }
      }
    }
    else if (atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 - 16), 0xFFFFFFFFFFFFFFFFLL, memory_order_release) == 1)
    {
      __dmb(9u);
      uint64_t v5 = (_DWORD *)a1[4];
      if (*a1)
      {
        uint64_t v6 = 8 * *a1;
        do
        {
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v5 + 1);
          sub_21697C414(v5);
          v5 += 2;
          v6 -= 8;
        }
        while (v6);
        uint64_t v5 = (_DWORD *)a1[4];
      }
      operator delete(v5 - 4);
    }
    void *v4 = 0;
    v4[1] = 0;
  }
}

pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchemaTokens_StaticTokenType *sub_2171C1520(atomic_ullong *a1)
{
  uint64_t result = sub_2171C1568();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchemaTokens_StaticTokenType::~HdInstancerTopologySchemaTokens_StaticTokenType(result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchemaTokens_StaticTokenType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchemaTokens_StaticTokenType *sub_2171C1568()
{
  v0 = (pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchemaTokens_StaticTokenType *)operator new(0x40uLL);
  pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchemaTokens_StaticTokenType::HdInstancerTopologySchemaTokens_StaticTokenType(v0);
  return v0;
}

void sub_2171C1598(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2171C15AC(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *a1)
{
  *(void *)a1 = &unk_26C77C858;
  sub_2171C1464((void *)a1 + 1);

  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(a1);
}

void sub_2171C1604(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *a1)
{
  *(void *)a1 = &unk_26C77C858;
  sub_2171C1464((void *)a1 + 1);
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(a1);

  operator delete(v2);
}

void *sub_2171C1660@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  a2[1] = &off_26C77C8B0;
  return sub_2168F8DBC(a2, a1 + 8);
}

uint64_t sub_2171C1678()
{
  return 0;
}

uint64_t sub_2171C1680@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)(result + 24);
  *(_OWORD *)a2 = *(_OWORD *)(result + 8);
  *(_OWORD *)(a2 + 16) = v2;
  uint64_t v3 = *(void *)(result + 40);
  *(void *)(a2 + 32) = v3;
  if (v3)
  {
    uint64_t v4 = *(atomic_ullong **)(a2 + 24);
    uint64_t v5 = (atomic_ullong *)(v3 - 16);
    if (!v4) {
      uint64_t v4 = v5;
    }
    atomic_fetch_add_explicit(v4, 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t *sub_2171C16B4(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *sub_2171C16D4(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2171C184C(a1);
}

uint64_t sub_2171C16E4()
{
  return 1;
}

unint64_t sub_2171C16EC(unint64_t **a1)
{
  return sub_2171C18A4((uint64_t)&v2, *a1);
}

BOOL sub_2171C1714(void **a1, uint64_t *a2)
{
  return sub_2171C18F4(*a1, *a2);
}

BOOL sub_2171C1720(void **a1, uint64_t a2)
{
  return sub_2171C18F4(*a1, a2);
}

uint64_t sub_2171C172C()
{
  return 0;
}

void *sub_2171C1738(uint64_t **a1, void *a2)
{
  uint64_t v3 = *a1;
  uint64_t v5 = (*a1)[4];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(a2, v3, (uint64_t)&v5, (void (*)(uint64_t, void *))sub_2171C1A30);
  return a2;
}

void *sub_2171C178C()
{
  return &unk_26C77C968;
}

uint64_t sub_2171C1798()
{
  return 1;
}

void *sub_2171C17A0()
{
  return &unk_26C755058;
}

uint64_t sub_2171C17AC(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t sub_2171C17B4(uint64_t a1)
{
  return **(void **)a1;
}

BOOL sub_2171C17C0(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x80000002174C51A1 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2171C17FC(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_26C77C968, a2, a3);
}

void *sub_2171C1820()
{
  return &unk_26C77C968;
}

uint64_t sub_2171C182C(uint64_t a1)
{
  return *(void *)a1;
}

void *sub_2171C1834@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  a2[1] = &off_26C77C8B0;
  return sub_2168F8DBC(a2, v2);
}

uint64_t *sub_2171C184C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (*a1 && atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 40), 0xFFFFFFFF, memory_order_release) == 1)
  {
    __dmb(9u);
    sub_2171C1464((void *)v2);
    operator delete((void *)v2);
  }
  return a1;
}

unint64_t sub_2171C18A4(uint64_t a1, unint64_t *a2)
{
  unint64_t v2 = *a2;
  if (*a2)
  {
    uint64_t v3 = (unsigned int *)a2[4];
    unint64_t v4 = *a2;
    do
    {
      uint64_t v5 = *v3;
      uint64_t v6 = v3[1];
      v3 += 2;
      unint64_t v7 = v2 + v5 + (v2 + v5) * (v2 + v5);
      unint64_t v2 = v6 + ((v6 + v5 + (v7 >> 1) + (v6 + v5 + (v7 >> 1)) * (v6 + v5 + (v7 >> 1))) >> 1);
      --v4;
    }
    while (v4);
    v2 *= 0x9E3779B97F4A7C55;
  }
  return bswap64(v2);
}

BOOL sub_2171C18F4(void *a1, uint64_t a2)
{
  if (a1[4] == *(void *)(a2 + 32) && sub_2168F8C2C((uint64_t)a1, a2) && a1[3] == *(void *)(a2 + 24)) {
    return 1;
  }
  BOOL result = sub_2168F8C2C((uint64_t)a1, a2);
  if (!result) {
    return result;
  }
  if (!*a1) {
    return 1;
  }
  uint64_t v5 = (uint64_t *)a1[4];
  uint64_t v6 = *(uint64_t **)(a2 + 32);
  uint64_t v7 = 8 * *a1 - 8;
  do
  {
    uint64_t v9 = *v5++;
    uint64_t v8 = v9;
    uint64_t v10 = *v6++;
    BOOL result = v8 == v10;
    BOOL v11 = v8 != v10 || v7 == 0;
    v7 -= 8;
  }
  while (!v11);
  return result;
}

uint64_t sub_2171C1994(_OWORD **a1)
{
  unsigned int v2 = atomic_load((unsigned int *)*a1 + 10);
  if (v2 != 1)
  {
    uint64_t v3 = operator new(0x30uLL);
    unint64_t v4 = *a1;
    long long v5 = (*a1)[1];
    *(_OWORD *)uint64_t v3 = **a1;
    *((_OWORD *)v3 + 1) = v5;
    uint64_t v6 = *((void *)v4 + 4);
    *((void *)v3 + 4) = v6;
    if (v6)
    {
      uint64_t v7 = (atomic_ullong *)*((void *)v3 + 3);
      uint64_t v8 = (atomic_ullong *)(v6 - 16);
      if (!v7) {
        uint64_t v7 = v8;
      }
      atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
      unint64_t v4 = *a1;
    }
    atomic_store(0, (unsigned int *)v3 + 10);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 10, 1u, memory_order_relaxed);
    uint64_t v10 = v4;
    *a1 = v3;
    sub_2171C184C((uint64_t *)&v10);
  }
  return (uint64_t)*a1;
}

void *sub_2171C1A30(pxrInternal__aapl__pxrReserved__::SdfPath **a1, void *a2)
{
  uint64_t v3 = *a1;
  *a1 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)*a1 + 8);
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, v3);
}

void *sub_2171C1A48(void *a1, uint64_t a2)
{
  *a1 = a2;
  unint64_t v4 = operator new(0x20uLL);
  void *v4 = &unk_26C77C990;
  v4[1] = 0;
  _DWORD v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_2171C1AA0(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_2173254E8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_2171C1ABC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171C1AE4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2171C1B14(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77C9E0)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens_StaticTokenType *sub_2171C1B58(atomic_ullong *a1)
{
  uint64_t result = sub_2171C1BA0();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens_StaticTokenType::~HdLegacyDisplayStyleSchemaTokens_StaticTokenType(result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens_StaticTokenType *sub_2171C1BA0()
{
  v0 = (pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens_StaticTokenType *)operator new(0x68uLL);
  pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens_StaticTokenType::HdLegacyDisplayStyleSchemaTokens_StaticTokenType(v0);
  return v0;
}

void sub_2171C1BD0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens_StaticTokenType *sub_2171C1BE4(atomic_ullong *a1)
{
  uint64_t result = sub_2171C1C2C();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens_StaticTokenType::~HdExtComputationSchemaTokens_StaticTokenType(result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens_StaticTokenType *sub_2171C1C2C()
{
  v0 = (pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens_StaticTokenType *)operator new(0x58uLL);
  pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens_StaticTokenType::HdExtComputationSchemaTokens_StaticTokenType(v0);
  return v0;
}

void sub_2171C1C5C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::HdRenderBufferSchemaTokens_StaticTokenType *sub_2171C1C70(atomic_ullong *a1)
{
  uint64_t result = sub_2171C1CB8();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::HdRenderBufferSchemaTokens_StaticTokenType::~HdRenderBufferSchemaTokens_StaticTokenType(result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::HdRenderBufferSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::HdRenderBufferSchemaTokens_StaticTokenType *sub_2171C1CB8()
{
  v0 = (pxrInternal__aapl__pxrReserved__::HdRenderBufferSchemaTokens_StaticTokenType *)operator new(0x38uLL);
  pxrInternal__aapl__pxrReserved__::HdRenderBufferSchemaTokens_StaticTokenType::HdRenderBufferSchemaTokens_StaticTokenType(v0);
  return v0;
}

void sub_2171C1CE8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::HdRenderSettingsSchemaTokens_StaticTokenType *sub_2171C1CFC(atomic_ullong *a1)
{
  uint64_t result = sub_2171C1D44();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::HdRenderSettingsSchemaTokens_StaticTokenType::~HdRenderSettingsSchemaTokens_StaticTokenType(result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::HdRenderSettingsSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::HdRenderSettingsSchemaTokens_StaticTokenType *sub_2171C1D44()
{
  v0 = (pxrInternal__aapl__pxrReserved__::HdRenderSettingsSchemaTokens_StaticTokenType *)operator new(0x58uLL);
  pxrInternal__aapl__pxrReserved__::HdRenderSettingsSchemaTokens_StaticTokenType::HdRenderSettingsSchemaTokens_StaticTokenType(v0);
  return v0;
}

void sub_2171C1D74(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens_StaticTokenType *sub_2171C1D88(atomic_ullong *a1)
{
  uint64_t result = sub_2171C1DD0();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens_StaticTokenType::~HdImageShaderSchemaTokens_StaticTokenType(result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens_StaticTokenType *sub_2171C1DD0()
{
  v0 = (pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens_StaticTokenType *)operator new(0x40uLL);
  pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens_StaticTokenType::HdImageShaderSchemaTokens_StaticTokenType(v0);
  return v0;
}

void sub_2171C1E00(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::HdPrimvarsSchemaTokens_StaticTokenType *sub_2171C1E14(atomic_ullong *a1)
{
  uint64_t result = sub_2171C1E5C();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::HdPrimvarsSchemaTokens_StaticTokenType::~HdPrimvarsSchemaTokens_StaticTokenType(result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::HdPrimvarsSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::HdPrimvarsSchemaTokens_StaticTokenType *sub_2171C1E5C()
{
  v0 = (pxrInternal__aapl__pxrReserved__::HdPrimvarsSchemaTokens_StaticTokenType *)operator new(0x38uLL);
  pxrInternal__aapl__pxrReserved__::HdPrimvarsSchemaTokens_StaticTokenType::HdPrimvarsSchemaTokens_StaticTokenType(v0);
  return v0;
}

void sub_2171C1E8C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarsSchemaTokens_StaticTokenType *sub_2171C1EA0(atomic_ullong *a1)
{
  uint64_t result = sub_2171C1EE8();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarsSchemaTokens_StaticTokenType::~HdExtComputationPrimvarsSchemaTokens_StaticTokenType(result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarsSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarsSchemaTokens_StaticTokenType *sub_2171C1EE8()
{
  v0 = (pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarsSchemaTokens_StaticTokenType *)operator new(0x20uLL);
  pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarsSchemaTokens_StaticTokenType::HdExtComputationPrimvarsSchemaTokens_StaticTokenType(v0);
  return v0;
}

void sub_2171C1F18(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::HdPurposeSchemaTokens_StaticTokenType *sub_2171C1F2C(atomic_ullong *a1)
{
  uint64_t result = sub_2171C1F74();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::HdPurposeSchemaTokens_StaticTokenType::~HdPurposeSchemaTokens_StaticTokenType(result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::HdPurposeSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::HdPurposeSchemaTokens_StaticTokenType *sub_2171C1F74()
{
  v0 = (pxrInternal__aapl__pxrReserved__::HdPurposeSchemaTokens_StaticTokenType *)operator new(0x20uLL);
  pxrInternal__aapl__pxrReserved__::HdPurposeSchemaTokens_StaticTokenType::HdPurposeSchemaTokens_StaticTokenType(v0);
  return v0;
}

void sub_2171C1FA4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::HdXformSchemaTokens_StaticTokenType *sub_2171C1FB8(atomic_ullong *a1)
{
  uint64_t result = sub_2171C2000();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::HdXformSchemaTokens_StaticTokenType::~HdXformSchemaTokens_StaticTokenType(result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::HdXformSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::HdXformSchemaTokens_StaticTokenType *sub_2171C2000()
{
  v0 = (pxrInternal__aapl__pxrReserved__::HdXformSchemaTokens_StaticTokenType *)operator new(0x30uLL);
  pxrInternal__aapl__pxrReserved__::HdXformSchemaTokens_StaticTokenType::HdXformSchemaTokens_StaticTokenType(v0);
  return v0;
}

void sub_2171C2030(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::HdExtentSchemaTokens_StaticTokenType *sub_2171C2044(atomic_ullong *a1)
{
  uint64_t result = sub_2171C208C();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::HdExtentSchemaTokens_StaticTokenType::~HdExtentSchemaTokens_StaticTokenType(result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::HdExtentSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::HdExtentSchemaTokens_StaticTokenType *sub_2171C208C()
{
  v0 = (pxrInternal__aapl__pxrReserved__::HdExtentSchemaTokens_StaticTokenType *)operator new(0x30uLL);
  pxrInternal__aapl__pxrReserved__::HdExtentSchemaTokens_StaticTokenType::HdExtentSchemaTokens_StaticTokenType(v0);
  return v0;
}

void sub_2171C20BC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::HdMaterialSchemaTokens_StaticTokenType *sub_2171C20D0(atomic_ullong *a1)
{
  uint64_t result = sub_2171C2118();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::HdMaterialSchemaTokens_StaticTokenType::~HdMaterialSchemaTokens_StaticTokenType(result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::HdMaterialSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::HdMaterialSchemaTokens_StaticTokenType *sub_2171C2118()
{
  v0 = (pxrInternal__aapl__pxrReserved__::HdMaterialSchemaTokens_StaticTokenType *)operator new(0x28uLL);
  pxrInternal__aapl__pxrReserved__::HdMaterialSchemaTokens_StaticTokenType::HdMaterialSchemaTokens_StaticTokenType(v0);
  return v0;
}

void sub_2171C2148(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::HdLightSchemaTokens_StaticTokenType *sub_2171C215C(atomic_ullong *a1)
{
  uint64_t result = sub_2171C21A4();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::HdLightSchemaTokens_StaticTokenType::~HdLightSchemaTokens_StaticTokenType(result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::HdLightSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::HdLightSchemaTokens_StaticTokenType *sub_2171C21A4()
{
  v0 = (pxrInternal__aapl__pxrReserved__::HdLightSchemaTokens_StaticTokenType *)operator new(0x20uLL);
  pxrInternal__aapl__pxrReserved__::HdLightSchemaTokens_StaticTokenType::HdLightSchemaTokens_StaticTokenType(v0);
  return v0;
}

void sub_2171C21D4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::HdInstanceCategoriesSchemaTokens_StaticTokenType *sub_2171C21E8(atomic_ullong *a1)
{
  uint64_t result = sub_2171C2230();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::HdInstanceCategoriesSchemaTokens_StaticTokenType::~HdInstanceCategoriesSchemaTokens_StaticTokenType(result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::HdInstanceCategoriesSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::HdInstanceCategoriesSchemaTokens_StaticTokenType *sub_2171C2230()
{
  v0 = (pxrInternal__aapl__pxrReserved__::HdInstanceCategoriesSchemaTokens_StaticTokenType *)operator new(0x28uLL);
  pxrInternal__aapl__pxrReserved__::HdInstanceCategoriesSchemaTokens_StaticTokenType::HdInstanceCategoriesSchemaTokens_StaticTokenType(v0);
  return v0;
}

void sub_2171C2260(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::HdInstancedBySchemaTokens_StaticTokenType *sub_2171C2274(atomic_ullong *a1)
{
  uint64_t result = sub_2171C22BC();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::HdInstancedBySchemaTokens_StaticTokenType::~HdInstancedBySchemaTokens_StaticTokenType(result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::HdInstancedBySchemaTokens_StaticTokenType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::HdInstancedBySchemaTokens_StaticTokenType *sub_2171C22BC()
{
  v0 = (pxrInternal__aapl__pxrReserved__::HdInstancedBySchemaTokens_StaticTokenType *)operator new(0x30uLL);
  pxrInternal__aapl__pxrReserved__::HdInstancedBySchemaTokens_StaticTokenType::HdInstancedBySchemaTokens_StaticTokenType(v0);
  return v0;
}

void sub_2171C22EC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::HdIntegratorSchemaTokens_StaticTokenType *sub_2171C2300(atomic_ullong *a1)
{
  uint64_t result = sub_2171C2348();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::HdIntegratorSchemaTokens_StaticTokenType::~HdIntegratorSchemaTokens_StaticTokenType(result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::HdIntegratorSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::HdIntegratorSchemaTokens_StaticTokenType *sub_2171C2348()
{
  v0 = (pxrInternal__aapl__pxrReserved__::HdIntegratorSchemaTokens_StaticTokenType *)operator new(0x28uLL);
  pxrInternal__aapl__pxrReserved__::HdIntegratorSchemaTokens_StaticTokenType::HdIntegratorSchemaTokens_StaticTokenType(v0);
  return v0;
}

void sub_2171C2378(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::HdSampleFilterSchemaTokens_StaticTokenType *sub_2171C238C(atomic_ullong *a1)
{
  uint64_t result = sub_2171C23D4();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::HdSampleFilterSchemaTokens_StaticTokenType::~HdSampleFilterSchemaTokens_StaticTokenType(result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::HdSampleFilterSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::HdSampleFilterSchemaTokens_StaticTokenType *sub_2171C23D4()
{
  v0 = (pxrInternal__aapl__pxrReserved__::HdSampleFilterSchemaTokens_StaticTokenType *)operator new(0x28uLL);
  pxrInternal__aapl__pxrReserved__::HdSampleFilterSchemaTokens_StaticTokenType::HdSampleFilterSchemaTokens_StaticTokenType(v0);
  return v0;
}

void sub_2171C2404(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::HdDisplayFilterSchemaTokens_StaticTokenType *sub_2171C2418(atomic_ullong *a1)
{
  uint64_t result = sub_2171C2460();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::HdDisplayFilterSchemaTokens_StaticTokenType::~HdDisplayFilterSchemaTokens_StaticTokenType(result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::HdDisplayFilterSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::HdDisplayFilterSchemaTokens_StaticTokenType *sub_2171C2460()
{
  v0 = (pxrInternal__aapl__pxrReserved__::HdDisplayFilterSchemaTokens_StaticTokenType *)operator new(0x28uLL);
  pxrInternal__aapl__pxrReserved__::HdDisplayFilterSchemaTokens_StaticTokenType::HdDisplayFilterSchemaTokens_StaticTokenType(v0);
  return v0;
}

void sub_2171C2490(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::HdVolumeFieldBindingSchemaTokens_StaticTokenType *sub_2171C24A4(atomic_ullong *a1)
{
  uint64_t result = sub_2171C24EC();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::HdVolumeFieldBindingSchemaTokens_StaticTokenType::~HdVolumeFieldBindingSchemaTokens_StaticTokenType(result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::HdVolumeFieldBindingSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::HdVolumeFieldBindingSchemaTokens_StaticTokenType *sub_2171C24EC()
{
  v0 = (pxrInternal__aapl__pxrReserved__::HdVolumeFieldBindingSchemaTokens_StaticTokenType *)operator new(0x20uLL);
  pxrInternal__aapl__pxrReserved__::HdVolumeFieldBindingSchemaTokens_StaticTokenType::HdVolumeFieldBindingSchemaTokens_StaticTokenType(v0);
  return v0;
}

void sub_2171C251C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::HdSceneIndexEmulationTokens_StaticTokenType *sub_2171C2530(atomic_ullong *a1)
{
  uint64_t result = sub_2171C2578();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::HdSceneIndexEmulationTokens_StaticTokenType::~HdSceneIndexEmulationTokens_StaticTokenType(result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::HdSceneIndexEmulationTokens_StaticTokenType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::HdSceneIndexEmulationTokens_StaticTokenType *sub_2171C2578()
{
  v0 = (pxrInternal__aapl__pxrReserved__::HdSceneIndexEmulationTokens_StaticTokenType *)operator new(0x20uLL);
  pxrInternal__aapl__pxrReserved__::HdSceneIndexEmulationTokens_StaticTokenType::HdSceneIndexEmulationTokens_StaticTokenType(v0);
  return v0;
}

void sub_2171C25A8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2171C25BC(void ***a1)
{
  unsigned int v2 = (uint64_t *)*a1;
  if (*v2)
  {
    sub_2171C2610((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

uint64_t sub_2171C2610(uint64_t result, uint64_t a2)
{
  for (uint64_t i = *(void *)(result + 8); i != a2; i -= 32)
  {
    uint64_t v3 = *(void *)(i - 16);
    if ((v3 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    uint64_t v4 = *(void *)(i - 32);
    if ((v4 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  *(void *)(result + 8) = a2;
  return result;
}

void sub_2171C265C(uint64_t a1)
{
  *(void *)a1 = &unk_26C77CA08;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 44));
  sub_21697C414((_DWORD *)(a1 + 40));
  sub_2168CAE68((uint64_t *)(a1 + 32), 0);
  unsigned int v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void **)(a1 + 16);
    uint64_t v4 = *(void **)(a1 + 8);
    if (v3 != v2)
    {
      do
      {
        v3 -= 4;
        sub_2171BE64C(v3);
      }
      while (v3 != v2);
      uint64_t v4 = *(void **)(a1 + 8);
    }
    *(void *)(a1 + 16) = v2;
    operator delete(v4);
  }

  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase((pxrInternal__aapl__pxrReserved__::HdDataSourceBase *)a1);
}

void sub_2171C2708(uint64_t a1)
{
  *(void *)a1 = &unk_26C77CA08;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 44));
  sub_21697C414((_DWORD *)(a1 + 40));
  sub_2168CAE68((uint64_t *)(a1 + 32), 0);
  unsigned int v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void **)(a1 + 16);
    uint64_t v4 = *(void **)(a1 + 8);
    if (v3 != v2)
    {
      do
      {
        v3 -= 4;
        sub_2171BE64C(v3);
      }
      while (v3 != v2);
      uint64_t v4 = *(void **)(a1 + 8);
    }
    *(void *)(a1 + 16) = v2;
    operator delete(v4);
  }
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase((pxrInternal__aapl__pxrReserved__::HdDataSourceBase *)a1);

  operator delete(v5);
}

void *sub_2171C27B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t result = (void *)sub_216973388((char **)a2, (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 5);
  long long v5 = *(uint64_t **)(a1 + 8);
  uint64_t v6 = *(uint64_t **)(a1 + 16);
  if (v5 != v6)
  {
    uint64_t result = *(void **)(a2 + 8);
    do
    {
      if ((unint64_t)result >= *(void *)(a2 + 16))
      {
        uint64_t result = sub_216973984((char **)a2, v5);
      }
      else
      {
        uint64_t v7 = *v5;
        void *result = *v5;
        if ((v7 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          *result &= 0xFFFFFFFFFFFFFFF8;
        }
        ++result;
      }
      *(void *)(a2 + 8) = result;
      v5 += 4;
    }
    while (v5 != v6);
  }
  return result;
}

void sub_2171C2874(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

void sub_2171C2890(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = *(void **)(a1 + 32);
  if (v6)
  {
    uint64_t v7 = sub_2168CB1F4(v6, a2);
    if (!v7)
    {
LABEL_37:
      *a3 = 0;
      a3[1] = 0;
      return;
    }
    uint64_t v8 = *(void *)(a1 + 16);
    uint64_t v9 = *(void *)(a1 + 8) + 32 * v7[3];
  }
  else
  {
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v9 == v8) {
      goto LABEL_37;
    }
    while ((*(void *)v9 & 0xFFFFFFFFFFFFFFF8) != (*a2 & 0xFFFFFFFFFFFFFFF8))
    {
      v9 += 32;
      if (v9 == v8) {
        goto LABEL_37;
      }
    }
  }
  if (v9 == v8) {
    goto LABEL_37;
  }
  if (*(unsigned char *)(v9 + 24))
  {
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v34 = 0u;
    uint64_t v10 = operator new(0x88uLL);
    BOOL v11 = v10;
    uint64_t v12 = *(void *)(a1 + 48);
    uint64_t v13 = *a2;
    void *v10 = &unk_26C77CA50;
    v10[1] = v13;
    if ((v13 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v10[1] &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_216981010((_DWORD *)v10 + 4, (_DWORD *)(a1 + 40));
    sub_21698105C((_DWORD *)v11 + 5, (_DWORD *)(a1 + 44));
    sub_2171C32B4((uint64_t)(v11 + 3));
    v11[16] = v12;
    if (!v12)
    {
      *(void *)&long long v40 = "hd/dataSourceLegacyPrim.cpp";
      *((void *)&v40 + 1) = "Hd_DataSourceLegacyIndexedPrimvarValue";
      uint64_t v41 = 236;
      uint64_t v42 = "pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Hd_DataSourceLegacyIndexedPrimvarValue::Hd_DataSour"
            "ceLegacyIndexedPrimvarValue(const TfToken &, const SdfPath &, HdSceneDelegate *)";
      char v43 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v40, "_sceneDelegate", 0);
    }
    long long v14 = operator new(0x20uLL);
    *long long v14 = &unk_26C77CAF0;
    v14[1] = 0;
    v14[2] = 0;
    v14[3] = v11;
    *(void *)&long long v33 = v11;
    *((void *)&v33 + 1) = v14;
    uint64_t v15 = pxrInternal__aapl__pxrReserved__::HdPrimvarSchema::Builder::SetIndexedPrimvarValue((uint64_t)&v34, (uint64_t *)&v33);
    char v16 = operator new(0x88uLL);
    uint64_t v17 = (uint64_t)v16;
    uint64_t v18 = *(void *)(a1 + 48);
    uint64_t v19 = *a2;
    void *v16 = &unk_26C77CB68;
    v16[1] = v19;
    if ((v19 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v16[1] &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_216981010((_DWORD *)v16 + 4, (_DWORD *)(a1 + 40));
    sub_21698105C((_DWORD *)(v17 + 20), (_DWORD *)(a1 + 44));
    sub_2171C32B4(v17 + 24);
    *(void *)(v17 + 128) = v18;
    if (!v18)
    {
      *(void *)&long long v40 = "hd/dataSourceLegacyPrim.cpp";
      *((void *)&v40 + 1) = "Hd_DataSourceLegacyPrimvarIndices";
      uint64_t v41 = 300;
      uint64_t v42 = "pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Hd_DataSourceLegacyPrimvarIndices::Hd_DataSourceLeg"
            "acyPrimvarIndices(const TfToken &, const SdfPath &, HdSceneDelegate *)";
      char v43 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v40, "_sceneDelegate", 0);
    }
    uint64_t v20 = (std::__shared_weak_count *)operator new(0x20uLL);
    v20->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C77CBB8;
    v20->__shared_owners_ = 0;
    v20->__shared_weak_owners_ = 0;
    v20[1].__vftable = (std::__shared_weak_count_vtbl *)v17;
    uint64_t v31 = v17;
    int64x2_t v32 = v20;
    uint64_t v21 = pxrInternal__aapl__pxrReserved__::HdPrimvarSchema::Builder::SetIndices(v15, &v31);
    pxrInternal__aapl__pxrReserved__::HdPrimvarSchema::BuildInterpolationDataSource((pxrInternal__aapl__pxrReserved__::HdPrimvarSchema *)(v9 + 8), (uint64_t)&v40);
    uint64_t v22 = pxrInternal__aapl__pxrReserved__::HdPrimvarSchema::Builder::SetInterpolation(v21, (uint64_t *)&v40);
    pxrInternal__aapl__pxrReserved__::HdPrimvarSchema::BuildRoleDataSource((pxrInternal__aapl__pxrReserved__::HdPrimvarSchema *)(v9 + 16), (uint64_t)&v29);
    uint64_t v23 = (pxrInternal__aapl__pxrReserved__::HdPrimvarSchema::Builder *)pxrInternal__aapl__pxrReserved__::HdPrimvarSchema::Builder::SetRole(v22, &v29);
    pxrInternal__aapl__pxrReserved__::HdPrimvarSchema::Builder::Build(v23, &v39);
    *(_OWORD *)a3 = v39;
    long long v39 = 0uLL;
    if (v30) {
      sub_216784EC4(v30);
    }
    if (*((void *)&v40 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v40 + 1));
    }
    unint64_t v24 = v32;
    if (!v32) {
      goto LABEL_22;
    }
  }
  else
  {
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v34 = 0u;
    unint64_t v25 = operator new(0x58uLL);
    sub_2171C4B5C((uint64_t)v25, a2, (_DWORD *)(a1 + 40), *(void *)(a1 + 48));
    sub_2171C4CCC(&v33, (uint64_t)v25);
    long long v39 = v33;
    long long v33 = 0uLL;
    uint64_t v26 = pxrInternal__aapl__pxrReserved__::HdPrimvarSchema::Builder::SetPrimvarValue(&v34, (uint64_t *)&v39);
    pxrInternal__aapl__pxrReserved__::HdPrimvarSchema::BuildInterpolationDataSource((pxrInternal__aapl__pxrReserved__::HdPrimvarSchema *)(v9 + 8), (uint64_t)&v31);
    uint64_t v27 = pxrInternal__aapl__pxrReserved__::HdPrimvarSchema::Builder::SetInterpolation((uint64_t)v26, &v31);
    pxrInternal__aapl__pxrReserved__::HdPrimvarSchema::BuildRoleDataSource((pxrInternal__aapl__pxrReserved__::HdPrimvarSchema *)(v9 + 16), (uint64_t)&v29);
    long long v28 = (pxrInternal__aapl__pxrReserved__::HdPrimvarSchema::Builder *)pxrInternal__aapl__pxrReserved__::HdPrimvarSchema::Builder::SetRole(v27, &v29);
    pxrInternal__aapl__pxrReserved__::HdPrimvarSchema::Builder::Build(v28, &v40);
    *(_OWORD *)a3 = v40;
    long long v40 = 0uLL;
    if (v30) {
      sub_216784EC4(v30);
    }
    if (v32) {
      sub_216784EC4(v32);
    }
    unint64_t v24 = (std::__shared_weak_count *)*((void *)&v39 + 1);
    if (!*((void *)&v39 + 1)) {
      goto LABEL_22;
    }
  }
  sub_216784EC4(v24);
LABEL_22:
  if (*((void *)&v33 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v33 + 1));
  }
  if (*((void *)&v38 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v38 + 1));
  }
  if (*((void *)&v37 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v37 + 1));
  }
  if (*((void *)&v36 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v36 + 1));
  }
  if (*((void *)&v35 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v35 + 1));
  }
  if (*((void *)&v34 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v34 + 1));
  }
}

void sub_2171C2CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::__shared_weak_count *a9, ...)
{
  va_start(va, a9);
  *(void *)(v11 + 24) = &unk_26C77CA98;
  sub_2171C3D6C(v11 + 80);
  *(void *)(v11 + 24) = &unk_26C77CAD8;
  sub_2171C3ABC(v11 + 56);
  if (*(_DWORD *)(v11 + 52) >= 2u) {
    free(*(void **)(v11 + 40));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v10);
  sub_21697C414(v9);
  uint64_t v13 = *(void *)(v11 + 8);
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase((pxrInternal__aapl__pxrReserved__::HdDataSourceBase *)v11);
  operator delete(v14);
  if (a9) {
    sub_216784EC4(a9);
  }
  sub_2171BFA74(va);
  _Unwind_Resume(a1);
}

void sub_2171C2F44(uint64_t a1)
{
  *(void *)a1 = &unk_26C77CA50;
  *(void *)(a1 + 24) = &unk_26C77CA98;
  sub_2171C3D6C(a1 + 80);
  *(void *)(a1 + 24) = &unk_26C77CAD8;
  sub_2171C3ABC(a1 + 56);
  if (*(_DWORD *)(a1 + 52) >= 2u) {
    free(*(void **)(a1 + 40));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_21697C414((_DWORD *)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 8);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }

  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase((pxrInternal__aapl__pxrReserved__::HdDataSourceBase *)a1);
}

void sub_2171C3020(uint64_t a1)
{
  *(void *)a1 = &unk_26C77CA50;
  *(void *)(a1 + 24) = &unk_26C77CA98;
  sub_2171C3D6C(a1 + 80);
  *(void *)(a1 + 24) = &unk_26C77CAD8;
  sub_2171C3ABC(a1 + 56);
  if (*(_DWORD *)(a1 + 52) >= 2u) {
    free(*(void **)(a1 + 40));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_21697C414((_DWORD *)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 8);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase((pxrInternal__aapl__pxrReserved__::HdDataSourceBase *)a1);

  operator delete(v3);
}

void sub_2171C3100(uint64_t a1@<X0>, void *a2@<X8>, float a3@<S0>)
{
  v7[5] = *MEMORY[0x263EF8340];
  if (a3 == 0.0)
  {
    sub_216907954((uint64_t)v6, 0);
    (*(void (**)(void, uint64_t, uint64_t, void *))(**(void **)(a1 + 128) + 128))(*(void *)(a1 + 128), a1 + 16, a1 + 8, v6);
    sub_2168F83DC((uint64_t)v6);
  }
  else
  {
    if (!*(void *)(a1 + 32)) {
      sub_2171C3E34(*(void *)(a1 + 128), a1 + 16, a1 + 8, a1 + 24);
    }
    sub_2171C3DAC(a1 + 24, (uint64_t)v6, a3);
    sub_2168EE4C4(a2, v6);
    sub_2168F83DC((uint64_t)v7);
    sub_2168EE084((uint64_t)v6);
  }
}

void sub_2171C3208(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2171C324C(uint64_t a1, uint64_t a2, float a3, float a4)
{
  if (!*(void *)(a1 + 32)) {
    sub_2171C3E34(*(void *)(a1 + 128), a1 + 16, a1 + 8, a1 + 24);
  }
  sub_2171C429C(a1 + 24, a2, a3, a4);
  return 1;
}

uint64_t sub_2171C32B4(uint64_t a1)
{
  uint64_t v2 = (void *)sub_2171C3368(a1);
  void *v2 = &unk_26C77CA98;
  v2[12] = 0x100000000;
  uint64_t v5 = 0;
  memset(v4, 0, sizeof(v4));
  sub_2171C3468((uint64_t)(v2 + 7), 1u, (uint64_t)v4);
  sub_2168F83DC((uint64_t)v4);
  return a1;
}

void sub_2171C3340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2168F83DC((uint64_t)&a9);
  sub_2171C3D6C(v10);
  sub_2171C3574(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_2171C3368(uint64_t a1)
{
  _OWORD v4[2] = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_26C77CAD8;
  *(void *)(a1 + 24) = 0x100000000;
  uint64_t v2 = a1 + 32;
  *(void *)(a1 + 48) = 0x100000000;
  LODWORD(v4[0]) = 0;
  sub_2171C363C((int *)(a1 + 16), 1u, (int *)v4);
  v4[1] = 0;
  sub_2171C36D8(v2, 1u, v4);
  sub_2168EE084((uint64_t)v4);
  *(void *)(a1 + 8) = 0;
  return a1;
}

void sub_2171C3430(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  sub_2171C3ABC(v4);
  if (*(_DWORD *)(v2 + 28) >= 2u) {
    free(*v3);
  }
  _Unwind_Resume(a1);
}

void sub_2171C3468(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v5 = *(_DWORD *)(a1 + 40);
  if (v5 <= a2)
  {
    if (v5 < a2)
    {
      unsigned int v9 = *(_DWORD *)(a1 + 44);
      if (v9 < a2)
      {
        sub_2171C3C60(a1, a2);
        unsigned int v9 = *(_DWORD *)(a1 + 44);
      }
      uint64_t v10 = a1;
      if (v9 >= 2) {
        uint64_t v10 = *(void *)a1;
      }
      unsigned int v11 = *(_DWORD *)(a1 + 40);
      if (v11 != a2)
      {
        uint64_t v12 = v10 + 40 * a2;
        uint64_t v13 = v10 + 40 * v11;
        do
        {
          long long v14 = *(_OWORD *)(a3 + 16);
          *(_OWORD *)uint64_t v13 = *(_OWORD *)a3;
          *(_OWORD *)(v13 + 16) = v14;
          uint64_t v15 = *(void *)(a3 + 32);
          *(void *)(v13 + 32) = v15;
          if (v15)
          {
            char v16 = (atomic_ullong *)(v15 - 16);
            if (*(void *)(v13 + 24)) {
              char v16 = *(atomic_ullong **)(v13 + 24);
            }
            atomic_fetch_add_explicit(v16, 1uLL, memory_order_relaxed);
          }
          v13 += 40;
        }
        while (v13 != v12);
      }
      *(_DWORD *)(a1 + 40) = a2;
    }
  }
  else
  {
    uint64_t v6 = a1;
    if (*(_DWORD *)(a1 + 44) >= 2u) {
      uint64_t v6 = *(void *)a1;
    }
    uint64_t v7 = v6 + 40 * a2;
    sub_2171C3B20((uint64_t *)a1, v7, v6 + 40 * v5);
  }
}

uint64_t sub_2171C3574(uint64_t a1)
{
  *(void *)a1 = &unk_26C77CAD8;
  sub_2171C3ABC(a1 + 32);
  if (*(_DWORD *)(a1 + 28) >= 2u) {
    free(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_2171C35CC(uint64_t a1, unsigned int a2)
{
  sub_2171C3808(a1, a2);
  uint64_t v5 = 0;
  memset(v4, 0, sizeof(v4));
  sub_2171C3468(a1 + 56, a2, (uint64_t)v4);
  sub_2168F83DC((uint64_t)v4);
}

void sub_2171C3624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2171C363C(int *a1, unsigned int a2, int *a3)
{
  unsigned int v5 = a1[2];
  if (v5 <= a2)
  {
    if (v5 >= a2) {
      return;
    }
    unsigned int v7 = a1[3];
    if (v7 < a2)
    {
      sub_2171C38B0(a1, a2);
      unsigned int v7 = a1[3];
    }
    uint64_t v8 = a1;
    if (v7 >= 2) {
      uint64_t v8 = *(int **)a1;
    }
    uint64_t v9 = a1[2];
    if (v9 != a2)
    {
      uint64_t v10 = &v8[v9];
      uint64_t v11 = 4 * a2 - 4 * v9;
      do
      {
        *v10++ = *a3;
        v11 -= 4;
      }
      while (v11);
    }
  }
  a1[2] = a2;
}

void sub_2171C36D8(uint64_t a1, unsigned int a2, void *a3)
{
  uint64_t v5 = *(unsigned int *)(a1 + 16);
  if (v5 <= a2)
  {
    if (v5 < a2)
    {
      unsigned int v9 = *(_DWORD *)(a1 + 20);
      if (v9 < a2)
      {
        sub_2171C39F4(a1, a2);
        unsigned int v9 = *(_DWORD *)(a1 + 20);
      }
      uint64_t v10 = a1;
      if (v9 >= 2) {
        uint64_t v10 = *(void *)a1;
      }
      uint64_t v11 = *(unsigned int *)(a1 + 16);
      if (v11 != a2)
      {
        uint64_t v12 = 0;
        uint64_t v13 = v10 + 16 * v11;
        uint64_t v14 = 16 * a2 - 16 * v11;
        do
        {
          sub_2168EE4C4((void *)(v13 + v12), a3);
          v12 += 16;
        }
        while (v14 != v12);
      }
      *(_DWORD *)(a1 + 16) = a2;
    }
  }
  else
  {
    uint64_t v6 = a1;
    if (*(_DWORD *)(a1 + 20) >= 2u) {
      uint64_t v6 = *(void *)a1;
    }
    unsigned int v7 = (char *)(v6 + 16 * a2);
    sub_2171C3934((uint64_t *)a1, v7, (char *)(v6 + 16 * v5));
  }
}

void sub_2171C37D0(void *a1)
{
  __cxa_begin_catch(a1);
  for (; v2; v2 -= 16)
  {
    sub_2168EE084(v1);
    v1 += 16;
  }
  __cxa_rethrow();
}

void sub_2171C37F4(_Unwind_Exception *a1)
{
}

uint64_t sub_2171C3808(uint64_t a1, unsigned int a2)
{
  uint64_t v5[2] = *MEMORY[0x263EF8340];
  LODWORD(v5[0]) = 0;
  sub_2171C363C((int *)(a1 + 16), a2, (int *)v5);
  v5[1] = 0;
  sub_2171C36D8(a1 + 32, a2, v5);
  uint64_t result = sub_2168EE084((uint64_t)v5);
  *(void *)(a1 + 8) = a2;
  return result;
}

void sub_2171C3894(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2171C38B0(int *a1, unsigned int a2)
{
  uint64_t v4 = malloc(4 * a2);
  uint64_t v5 = v4;
  unsigned int v6 = a1[3];
  unsigned int v7 = a1;
  if (v6 >= 2) {
    unsigned int v7 = *(int **)a1;
  }
  uint64_t v8 = a1[2];
  if (v8)
  {
    uint64_t v9 = 4 * v8;
    uint64_t v10 = v4;
    do
    {
      int v11 = *v7++;
      *v10++ = v11;
      v9 -= 4;
    }
    while (v9);
  }
  if (v6 >= 2) {
    free(*(void **)a1);
  }
  *(void *)a1 = v5;
  a1[3] = a2;
}

char *sub_2171C3934(uint64_t *a1, char *a2, char *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a3;
    unint64_t v6 = a3 - a2;
    unsigned int v7 = a1;
    if (*((_DWORD *)a1 + 5) >= 2u) {
      unsigned int v7 = (uint64_t *)*a1;
    }
    uint64_t v8 = (char *)&v7[2 * *((unsigned int *)a1 + 4)];
    if (v8 != a3)
    {
      uint64_t v9 = a2;
      do
      {
        sub_2168ED33C(v9, v4);
        v4 += 16;
        v9 += 16;
      }
      while (v4 != v8);
    }
    if ((v6 >> 4))
    {
      uint64_t v10 = -16 * (v6 >> 4);
      do
      {
        sub_2168EE084((uint64_t)&v8[v10]);
        v10 += 16;
      }
      while (v10);
    }
    *((_DWORD *)a1 + 4) -= v6 >> 4;
  }
  return a2;
}

void sub_2171C39F4(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = malloc(16 * a2);
  uint64_t v5 = v4;
  unsigned int v6 = *(_DWORD *)(a1 + 20);
  unsigned int v7 = (void *)a1;
  if (v6 >= 2) {
    unsigned int v7 = *(void **)a1;
  }
  uint64_t v8 = *(unsigned int *)(a1 + 16);
  if (v8)
  {
    uint64_t v9 = 16 * v8;
    do
    {
      uint64_t v10 = sub_2168EDFA8(v4, v7);
      v7 += 2;
      uint64_t v4 = v10 + 2;
      v9 -= 16;
    }
    while (v9);
    unsigned int v6 = *(_DWORD *)(a1 + 20);
  }
  uint64_t v11 = a1;
  if (v6 >= 2) {
    uint64_t v11 = *(void *)a1;
  }
  uint64_t v12 = *(unsigned int *)(a1 + 16);
  if (v12)
  {
    uint64_t v13 = 16 * v12;
    do
    {
      uint64_t v11 = sub_2168EE084(v11) + 16;
      v13 -= 16;
    }
    while (v13);
    unsigned int v6 = *(_DWORD *)(a1 + 20);
  }
  if (v6 >= 2) {
    free(*(void **)a1);
  }
  *(void *)a1 = v5;
  *(_DWORD *)(a1 + 20) = a2;
}

uint64_t sub_2171C3ABC(uint64_t a1)
{
  uint64_t v1 = a1;
  unsigned int v2 = *(_DWORD *)(a1 + 20);
  if (v2 >= 2) {
    a1 = *(void *)a1;
  }
  uint64_t v3 = *(unsigned int *)(v1 + 16);
  if (v3)
  {
    uint64_t v4 = 16 * v3;
    do
    {
      a1 = sub_2168EE084(a1) + 16;
      v4 -= 16;
    }
    while (v4);
    unsigned int v2 = *(_DWORD *)(v1 + 20);
  }
  if (v2 >= 2) {
    free(*(void **)v1);
  }
  return v1;
}

uint64_t sub_2171C3B20(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * ((a3 - a2) >> 3);
    unsigned int v6 = a1;
    if (*((_DWORD *)a1 + 11) >= 2u) {
      unsigned int v6 = (uint64_t *)*a1;
    }
    uint64_t v7 = (uint64_t)&v6[5 * *((unsigned int *)a1 + 10)];
    sub_2171C3BE0((uint64_t)&v10, a3, v7, a2);
    if (v5)
    {
      uint64_t v8 = -40 * v5;
      do
      {
        sub_2168F83DC(v7 + v8);
        v8 += 40;
      }
      while (v8);
    }
    *((_DWORD *)a1 + 10) -= v5;
  }
  return a2;
}

uint64_t sub_2171C3BE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (v5 != a4)
      {
        sub_2168F83DC(a4);
        long long v7 = *(_OWORD *)(v5 + 16);
        *(_OWORD *)a4 = *(_OWORD *)v5;
        *(_OWORD *)(a4 + 16) = v7;
        *(_OWORD *)uint64_t v5 = 0u;
        *(_OWORD *)(v5 + 16) = 0u;
        *(void *)(a4 + 32) = *(void *)(v5 + 32);
        *(void *)(v5 + 32) = 0;
      }
      v5 += 40;
      a4 += 40;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void sub_2171C3C60(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = malloc(40 * a2);
  uint64_t v5 = v4;
  unsigned int v6 = (char *)a1;
  if (*(_DWORD *)(a1 + 44) >= 2u) {
    unsigned int v6 = *(char **)a1;
  }
  unsigned int v7 = *(_DWORD *)(a1 + 40);
  if (v7)
  {
    uint64_t v8 = &v6[40 * v7];
    uint64_t v9 = v4;
    do
    {
      long long v10 = *((_OWORD *)v6 + 1);
      _OWORD *v9 = *(_OWORD *)v6;
      v9[1] = v10;
      *(_OWORD *)unsigned int v6 = 0uLL;
      *((_OWORD *)v6 + 1) = 0uLL;
      *((void *)v9 + 4) = *((void *)v6 + 4);
      *((void *)v6 + 4) = 0;
      v6 += 40;
      uint64_t v9 = (_OWORD *)((char *)v9 + 40);
    }
    while (v6 != v8);
  }
  sub_2171C3D14(a1);
  if (*(_DWORD *)(a1 + 44) >= 2u) {
    free(*(void **)a1);
  }
  *(void *)a1 = v5;
  *(_DWORD *)(a1 + 44) = a2;
}

void sub_2171C3D14(uint64_t a1)
{
  uint64_t v1 = a1;
  if (*(_DWORD *)(a1 + 44) >= 2u) {
    uint64_t v1 = *(void *)a1;
  }
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = 40 * v2;
    do
    {
      sub_2168F83DC(v1);
      v1 += 40;
      v3 -= 40;
    }
    while (v3);
  }
}

uint64_t sub_2171C3D6C(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 44) >= 2u) {
    free(*(void **)a1);
  }
  return a1;
}

void *sub_2171C3DAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  uint64_t v3 = (void *)(a1 + 16);
  if (*(_DWORD *)(a1 + 28) >= 2u) {
    uint64_t v3 = (void *)*v3;
  }
  uint64_t v4 = (char *)(a1 + 32);
  if (*(_DWORD *)(a1 + 52) >= 2u) {
    uint64_t v4 = *(char **)v4;
  }
  uint64_t v5 = (void *)(a1 + 56);
  if (*(_DWORD *)(a1 + 100) >= 2u) {
    uint64_t v5 = (void *)*v5;
  }
  return sub_2171C3FF0(*(void *)(a1 + 8), (uint64_t)v3, v4, (uint64_t)v5, a2, a3);
}

uint64_t sub_2171C3DF4(uint64_t a1)
{
  sub_2168F83DC(a1 + 16);

  return sub_2168EE084(a1);
}

unint64_t sub_2171C3E34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)(a4 + 16);
  uint64_t v9 = (void *)(a4 + 16);
  if (*(_DWORD *)(a4 + 28) >= 2u) {
    uint64_t v9 = (void *)*v8;
  }
  long long v10 = (void *)(a4 + 32);
  uint64_t v11 = (void *)(a4 + 32);
  if (*(_DWORD *)(a4 + 52) >= 2u) {
    uint64_t v11 = (void *)*v10;
  }
  uint64_t v12 = (void *)(a4 + 56);
  uint64_t v13 = (void *)(a4 + 56);
  if (*(_DWORD *)(a4 + 100) >= 2u) {
    uint64_t v13 = (void *)*v12;
  }
  unint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void *, void *, void *))(*(void *)a1 + 208))(a1, a2, a3, 1, v9, v11, v13);
  unint64_t v15 = result;
  if (result >= 2)
  {
    (**(void (***)(uint64_t, unint64_t))a4)(a4, result);
    if (*(_DWORD *)(a4 + 28) >= 2u) {
      uint64_t v8 = (void *)*v8;
    }
    if (*(_DWORD *)(a4 + 52) >= 2u) {
      long long v10 = (void *)*v10;
    }
    if (*(_DWORD *)(a4 + 100) >= 2u) {
      uint64_t v12 = (void *)*v12;
    }
    unint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t, void *, void *, void *))(*(void *)a1 + 208))(a1, a2, a3, v15, v8, v10, v12);
    if (v15 != result)
    {
      v16[0] = "hd/sceneDelegate.h";
      v16[1] = "SampleIndexedPrimvar";
      v16[2] = 972;
      v16[3] = "void pxrInternal__aapl__pxrReserved__::HdSceneDelegate::SampleIndexedPrimvar(const SdfPath &, const TfTok"
               "en &, HdIndexedTimeSampleArray<VtValue, CAPACITY> *) [CAPACITY = 1U]";
      char v17 = 0;
      unint64_t result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v16, "authoredSamples == authoredSamplesSecondAttempt", 0);
    }
  }
  *(void *)(a4 + 8) = v15;
  return result;
}

void *sub_2171C3FF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, float a6@<S0>)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  if (a1)
  {
    uint64_t v7 = a4;
    uint64_t v9 = 0;
    long long v10 = (void *)(a4 + 32);
    uint64_t v11 = a3;
    do
    {
      float v12 = *(float *)(a2 + 4 * v9);
      if (v12 == a6)
      {
        unint64_t result = sub_2168EE4C4((void *)a5, v11);
        long long v18 = *((_OWORD *)v10 - 1);
        *(_OWORD *)(a5 + 16) = *((_OWORD *)v10 - 2);
        *(_OWORD *)(a5 + 32) = v18;
        uint64_t v19 = *v10;
        goto LABEL_17;
      }
      if (v12 > a6) {
        goto LABEL_7;
      }
      ++v9;
      v10 += 5;
      v11 += 16;
    }
    while (a1 != v9);
    uint64_t v9 = a1;
LABEL_7:
    if (!v9)
    {
      uint64_t v14 = (void *)a5;
      uint64_t v13 = a3;
LABEL_14:
      unint64_t result = sub_2168EE4C4(v14, v13);
      long long v20 = *(_OWORD *)(v7 + 16);
      *(_OWORD *)(a5 + 16) = *(_OWORD *)v7;
      *(_OWORD *)(a5 + 32) = v20;
      uint64_t v19 = *(void *)(v7 + 32);
LABEL_17:
      *(void *)(a5 + 48) = v19;
      if (v19)
      {
        uint64_t v26 = (atomic_ullong *)(v19 - 16);
        if (*(void *)(a5 + 40)) {
          uint64_t v26 = *(atomic_ullong **)(a5 + 40);
        }
        atomic_fetch_add_explicit(v26, 1uLL, memory_order_relaxed);
      }
      return result;
    }
    if (v9 == a1)
    {
      uint64_t v13 = &a3[16 * a1 - 16];
      uint64_t v7 = a4 + 40 * (a1 - 1);
      uint64_t v14 = (void *)a5;
      goto LABEL_14;
    }
    float v21 = *(float *)(a2 + 4 * v9);
    uint64_t v22 = v9 - 1;
    float v23 = *(float *)(a2 + 4 * (v9 - 1));
    if (v21 == v23)
    {
      *(void *)&long long v32 = "hd/timeSampleArray.h";
      *((void *)&v32 + 1) = "HdResampleRawTimeSamples";
      *(void *)&long long v33 = 154;
      *((void *)&v33 + 1) = "std::pair<T, VtIntArray> pxrInternal__aapl__pxrReserved__::HdResampleRawTimeSamples(float,"
                              " size_t, const float *, const T *, const VtIntArray *) [T = pxrInternal__aapl__pxrReserved__::VtValue]";
      LOBYTE(v34) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v32, (pxrInternal__aapl__pxrReserved__ *)"HdResampleRawTimeSamples: overlapping samples at %f; using first sample",
        a3,
        v21);
      unint64_t result = sub_2168EE4C4((void *)a5, &a3[16 * v22]);
      uint64_t v24 = v7 + 40 * v22;
      long long v25 = *(_OWORD *)(v24 + 16);
      *(_OWORD *)(a5 + 16) = *(_OWORD *)v24;
      *(_OWORD *)(a5 + 32) = v25;
      uint64_t v19 = *(void *)(v24 + 32);
      goto LABEL_17;
    }
    pxrInternal__aapl__pxrReserved__::HdResampleNeighbors((pxrInternal__aapl__pxrReserved__ *)&a3[16 * v22], (float)(v21 - a6) / (float)(v21 - v23), (std::type_info *)&a3[16 * v9], (const pxrInternal__aapl__pxrReserved__::VtValue *)a3, &v32);
    uint64_t v27 = v7 + 40 * v22;
    sub_2168EDFA8((void *)a5, &v32);
    long long v28 = *(_OWORD *)(v27 + 16);
    *(_OWORD *)(a5 + 16) = *(_OWORD *)v27;
    *(_OWORD *)(a5 + 32) = v28;
    uint64_t v29 = *(void *)(v27 + 32);
    *(void *)(a5 + 48) = v29;
    if (v29)
    {
      uint64_t v30 = (atomic_ullong *)(v29 - 16);
      if (*(void *)(a5 + 40)) {
        uint64_t v30 = *(atomic_ullong **)(a5 + 40);
      }
      atomic_fetch_add_explicit(v30, 1uLL, memory_order_relaxed);
    }
    char v16 = &v32;
  }
  else
  {
    *(void *)&long long v32 = "hd/timeSampleArray.h";
    *((void *)&v32 + 1) = "HdResampleRawTimeSamples";
    *(void *)&long long v33 = 130;
    *((void *)&v33 + 1) = "std::pair<T, VtIntArray> pxrInternal__aapl__pxrReserved__::HdResampleRawTimeSamples(float, s"
                            "ize_t, const float *, const T *, const VtIntArray *) [T = pxrInternal__aapl__pxrReserved__::VtValue]";
    LOBYTE(v34) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 1, (pxrInternal__aapl__pxrReserved__ *)"HdResampleRawTimeSamples: Zero samples provided");
    v31[1] = 0;
    sub_216907954((uint64_t)&v32, 0);
    sub_2168EDFA8((void *)a5, v31);
    long long v15 = v33;
    *(_OWORD *)(a5 + 16) = v32;
    *(_OWORD *)(a5 + 32) = v15;
    long long v32 = 0u;
    long long v33 = 0u;
    *(void *)(a5 + 48) = v34;
    uint64_t v34 = 0;
    sub_2168F83DC((uint64_t)&v32);
    char v16 = (long long *)v31;
  }
  return (void *)sub_2168EE084((uint64_t)v16);
}

void sub_2171C4270(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_2171C429C(uint64_t a1, uint64_t a2, float a3, float a4)
{
  if (!a2 || !*(void *)(a1 + 8)) {
    return;
  }
  unint64_t v8 = 0;
  uint64_t v9 = (float *)(a1 + 16);
  long long v10 = (void *)(a2 + 16);
  do
  {
    if (*(_DWORD *)(a1 + 28) > 1u)
    {
      uint64_t v15 = *(void *)v9;
      uint64_t v11 = v8;
      float v12 = *(float *)(*(void *)v9 + 4 * v8);
      uint64_t v14 = *(float **)a2;
      uint64_t v13 = *(float **)(a2 + 8);
      if (*(float **)a2 != v13) {
        goto LABEL_8;
      }
      if (v8 && v12 > a3) {
        goto LABEL_23;
      }
    }
    else
    {
      uint64_t v11 = v8;
      float v12 = v9[v8];
      uint64_t v14 = *(float **)a2;
      uint64_t v13 = *(float **)(a2 + 8);
      if (*(float **)a2 != v13)
      {
        uint64_t v15 = a1 + 16;
LABEL_8:
        if ((unint64_t)v13 >= *v10)
        {
          uint64_t v17 = v13 - v14;
          unint64_t v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 62) {
            goto LABEL_89;
          }
          uint64_t v19 = *v10 - (void)v14;
          if (v19 >> 1 > v18) {
            unint64_t v18 = v19 >> 1;
          }
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v20 = v18;
          }
          if (v20)
          {
            float v21 = (char *)sub_21677EA28((uint64_t)v10, v20);
            uint64_t v14 = *(float **)a2;
            uint64_t v13 = *(float **)(a2 + 8);
            float v22 = *(float *)(v15 + 4 * v11);
          }
          else
          {
            float v21 = 0;
            float v22 = v12;
          }
          uint64_t v24 = (float *)&v21[4 * v17];
          *uint64_t v24 = v22;
          char v16 = v24 + 1;
          while (v13 != v14)
          {
            int v25 = *((_DWORD *)v13-- - 1);
            *((_DWORD *)v24-- - 1) = v25;
          }
          *(void *)a2 = v24;
          *(void *)(a2 + 8) = v16;
          *(void *)(a2 + 16) = &v21[4 * v20];
          if (!v14) {
            goto LABEL_62;
          }
          uint64_t v26 = v14;
          goto LABEL_61;
        }
        *uint64_t v13 = v12;
        char v16 = v13 + 1;
        goto LABEL_62;
      }
      if (v8)
      {
        uint64_t v15 = a1 + 16;
        if (v12 > a3)
        {
LABEL_23:
          uint64_t v23 = (v8 - 1);
          if ((unint64_t)v14 >= *v10)
          {
            uint64_t v27 = *v10 - (void)v14;
            uint64_t v28 = v27 >> 1;
            if ((unint64_t)(v27 >> 1) <= 1) {
              uint64_t v28 = 1;
            }
            if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v29 = v28;
            }
            uint64_t v31 = sub_21677EA28((uint64_t)v10, v29);
            long long v32 = *(float **)a2;
            long long v33 = *(float **)(a2 + 8);
            _DWORD *v31 = *(_DWORD *)(v15 + 4 * v23);
            uint64_t v14 = (float *)(v31 + 1);
            uint64_t v34 = v31;
            while (v33 != v32)
            {
              int v35 = *((_DWORD *)v33-- - 1);
              *--uint64_t v34 = v35;
            }
            *(void *)a2 = v34;
            *(void *)(a2 + 8) = v14;
            *(void *)(a2 + 16) = &v31[v30];
            if (v32) {
              operator delete(v32);
            }
          }
          else
          {
            *v14++ = *(float *)(v15 + 4 * v23);
          }
          *(void *)(a2 + 8) = v14;
        }
      }
    }
    if (v12 < a3) {
      goto LABEL_63;
    }
    if (*(_DWORD *)(a1 + 28) >= 2u) {
      uint64_t v36 = *(void *)(a1 + 16);
    }
    else {
      uint64_t v36 = a1 + 16;
    }
    if ((unint64_t)v14 >= *v10)
    {
      uint64_t v26 = *(float **)a2;
      uint64_t v37 = ((uint64_t)v14 - *(void *)a2) >> 2;
      unint64_t v38 = v37 + 1;
      if ((unint64_t)(v37 + 1) >> 62) {
LABEL_89:
      }
        sub_21677CB10();
      uint64_t v39 = *v10 - (void)v26;
      if (v39 >> 1 > v38) {
        unint64_t v38 = v39 >> 1;
      }
      if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v40 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v40 = v38;
      }
      if (v40)
      {
        uint64_t v41 = (char *)sub_21677EA28((uint64_t)v10, v40);
        uint64_t v26 = *(float **)a2;
        uint64_t v14 = *(float **)(a2 + 8);
      }
      else
      {
        uint64_t v41 = 0;
      }
      uint64_t v42 = &v41[4 * v37];
      *(_DWORD *)uint64_t v42 = *(_DWORD *)(v36 + 4 * v11);
      char v16 = (float *)(v42 + 4);
      while (v14 != v26)
      {
        int v43 = *((_DWORD *)v14-- - 1);
        *((_DWORD *)v42 - 1) = v43;
        v42 -= 4;
      }
      *(void *)a2 = v42;
      *(void *)(a2 + 8) = v16;
      *(void *)(a2 + 16) = &v41[4 * v40];
      if (!v26) {
        goto LABEL_62;
      }
LABEL_61:
      operator delete(v26);
      goto LABEL_62;
    }
    *uint64_t v14 = *(float *)(v36 + 4 * v11);
    char v16 = v14 + 1;
LABEL_62:
    *(void *)(a2 + 8) = v16;
    uint64_t v14 = v16;
LABEL_63:
    unint64_t v44 = *(void *)(a1 + 8);
    ++v8;
  }
  while (v12 < a4 && v8 < v44);
  if (*(float **)a2 == v14 && v44 != 0)
  {
    if (*(_DWORD *)(a1 + 28) >= 2u) {
      long long v47 = *(_DWORD **)(a1 + 16);
    }
    else {
      long long v47 = (_DWORD *)(a1 + 16);
    }
    if ((unint64_t)v14 >= *v10)
    {
      uint64_t v49 = *v10 - (void)v14;
      uint64_t v50 = v49 >> 1;
      if ((unint64_t)(v49 >> 1) <= 1) {
        uint64_t v50 = 1;
      }
      if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v51 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v51 = v50;
      }
      uint64_t v52 = sub_21677EA28((uint64_t)v10, v51);
      unint64_t v53 = *(float **)a2;
      v54 = *(float **)(a2 + 8);
      unint64_t v56 = &v52[v55];
      *uint64_t v52 = *v47;
      long long v48 = v52 + 1;
      while (v54 != v53)
      {
        int v57 = *((_DWORD *)v54-- - 1);
        *--uint64_t v52 = v57;
      }
      *(void *)a2 = v52;
      *(void *)(a2 + 8) = v48;
      *(void *)(a2 + 16) = v56;
      if (v53) {
        operator delete(v53);
      }
    }
    else
    {
      *uint64_t v14 = *(float *)v47;
      long long v48 = v14 + 1;
    }
    *(void *)(a2 + 8) = v48;
  }
}

void sub_2171C461C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171C4644(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2171C4674(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77CB40)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_2171C46B8(uint64_t a1)
{
  *(void *)a1 = &unk_26C77CB68;
  *(void *)(a1 + 24) = &unk_26C77CA98;
  sub_2171C3D6C(a1 + 80);
  *(void *)(a1 + 24) = &unk_26C77CAD8;
  sub_2171C3ABC(a1 + 56);
  if (*(_DWORD *)(a1 + 52) >= 2u) {
    free(*(void **)(a1 + 40));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_21697C414((_DWORD *)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 8);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }

  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase((pxrInternal__aapl__pxrReserved__::HdDataSourceBase *)a1);
}

void sub_2171C4794(uint64_t a1)
{
  *(void *)a1 = &unk_26C77CB68;
  *(void *)(a1 + 24) = &unk_26C77CA98;
  sub_2171C3D6C(a1 + 80);
  *(void *)(a1 + 24) = &unk_26C77CAD8;
  sub_2171C3ABC(a1 + 56);
  if (*(_DWORD *)(a1 + 52) >= 2u) {
    free(*(void **)(a1 + 40));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_21697C414((_DWORD *)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 8);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase((pxrInternal__aapl__pxrReserved__::HdDataSourceBase *)a1);

  operator delete(v3);
}

void sub_2171C4874(uint64_t a1@<X0>, void *a2@<X8>)
{
  (*(void (**)(void *__return_ptr))(*(void *)a1 + 32))(v3);
  a2[1] = &off_26C74FA68;
  sub_2168F8DBC(a2, (uint64_t)v3);
  sub_2168F83DC((uint64_t)v3);
}

void sub_2171C48E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2171C4900(uint64_t a1, uint64_t a2, float a3, float a4)
{
  if (!*(void *)(a1 + 32)) {
    sub_2171C3E34(*(void *)(a1 + 128), a1 + 16, a1 + 8, a1 + 24);
  }
  sub_2171C429C(a1 + 24, a2, a3, a4);
  return 1;
}

uint64_t sub_2171C4968@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (a3 == 0.0)
  {
    sub_216907954(a2, 0);
    (*(void (**)(void *__return_ptr))(**(void **)(a1 + 128) + 128))(v10);
  }
  else
  {
    if (!*(void *)(a1 + 32)) {
      sub_2171C3E34(*(void *)(a1 + 128), a1 + 16, a1 + 8, a1 + 24);
    }
    sub_2171C3DAC(a1 + 24, (uint64_t)v10, a3);
    long long v6 = v11[1];
    *(_OWORD *)a2 = v11[0];
    *(_OWORD *)(a2 + 16) = v6;
    uint64_t v7 = v12;
    *(void *)(a2 + 32) = v12;
    if (v7)
    {
      unint64_t v8 = (atomic_ullong *)(v7 - 16);
      if (*(void *)(a2 + 24)) {
        unint64_t v8 = *(atomic_ullong **)(a2 + 24);
      }
      atomic_fetch_add_explicit(v8, 1uLL, memory_order_relaxed);
    }
    sub_2168F83DC((uint64_t)v11);
  }
  return sub_2168EE084((uint64_t)v10);
}

void sub_2171C4A88(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_21675DB74(exception_object);
}

void sub_2171C4AC0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171C4AE8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2171C4B18(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77CC08)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t sub_2171C4B5C(uint64_t a1, uint64_t *a2, _DWORD *a3, uint64_t a4)
{
  *(void *)a1 = &unk_26C77CC30;
  uint64_t v7 = *a2;
  *(void *)(a1 + 8) = *a2;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 8) &= 0xFFFFFFFFFFFFFFF8;
  }
  sub_216981010((_DWORD *)(a1 + 16), a3);
  sub_21698105C((_DWORD *)(a1 + 20), a3 + 1);
  sub_2171C3368(a1 + 24);
  *(void *)(a1 + 80) = a4;
  if (!a4)
  {
    v9[0] = "hd/dataSourceLegacyPrim.cpp";
    v9[1] = "Hd_DataSourceLegacyPrimvarValue";
    uint64_t v9[2] = 166;
    void v9[3] = "pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Hd_DataSourceLegacyPrimvarValue::Hd_DataSourceLegac"
            "yPrimvarValue(const TfToken &, const SdfPath &, HdSceneDelegate *)";
    char v10 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v9, "_sceneDelegate", 0);
  }
  return a1;
}

void sub_2171C4C60(_Unwind_Exception *a1)
{
  *(void *)(v1 + 24) = &unk_26C77CAD8;
  sub_2171C3ABC(v1 + 56);
  if (*(_DWORD *)(v1 + 52) >= 2u) {
    free(*(void **)(v1 + 40));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v4);
  sub_217325630(v3, v2);
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase((pxrInternal__aapl__pxrReserved__::HdDataSourceBase *)v1);
  _Unwind_Resume(a1);
}

void *sub_2171C4CCC(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  void *v4 = &unk_26C77CC78;
  v4[1] = 0;
  _OWORD v4[2] = 0;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_2171C4D24(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_2173254E8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_2171C4D3C(uint64_t a1)
{
  *(void *)a1 = &unk_26C77CC30;
  *(void *)(a1 + 24) = &unk_26C77CAD8;
  sub_2171C3ABC(a1 + 56);
  if (*(_DWORD *)(a1 + 52) >= 2u) {
    free(*(void **)(a1 + 40));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_21697C414((_DWORD *)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 8);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }

  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase((pxrInternal__aapl__pxrReserved__::HdDataSourceBase *)a1);
}

void sub_2171C4DF4(uint64_t a1)
{
  *(void *)a1 = &unk_26C77CC30;
  *(void *)(a1 + 24) = &unk_26C77CAD8;
  sub_2171C3ABC(a1 + 56);
  if (*(_DWORD *)(a1 + 52) >= 2u) {
    free(*(void **)(a1 + 40));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_21697C414((_DWORD *)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 8);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase((pxrInternal__aapl__pxrReserved__::HdDataSourceBase *)a1);

  operator delete(v3);
}

void sub_2171C4EB0(uint64_t a1@<X0>, void *a2@<X8>, float a3@<S0>)
{
  if (a3 == 0.0)
  {
    (*(void (**)(void *__return_ptr))(**(void **)(a1 + 80) + 120))(a2);
    if (!a2[1])
    {
      int v6 = 0;
      (*(void (**)(void, uint64_t, uint64_t, uint64_t, int *, void *))(**(void **)(a1 + 80) + 200))(*(void *)(a1 + 80), a1 + 16, a1 + 8, 1, &v6, a2);
    }
  }
  else
  {
    if (!*(void *)(a1 + 32)) {
      sub_2171C507C(*(void *)(a1 + 80), a1 + 16, a1 + 8, a1 + 24);
    }
    sub_2171C5048(a1 + 24, a2, a3);
  }
}

void sub_2171C4FCC(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2171C4FE0(uint64_t a1, uint64_t a2, float a3, float a4)
{
  if (!*(void *)(a1 + 32)) {
    sub_2171C507C(*(void *)(a1 + 80), a1 + 16, a1 + 8, a1 + 24);
  }
  sub_2171C429C(a1 + 24, a2, a3, a4);
  return 1;
}

void sub_2171C5048(uint64_t a1@<X0>, void *a2@<X8>, float a3@<S0>)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (void *)(a1 + 16);
  if (*(_DWORD *)(a1 + 28) >= 2u) {
    uint64_t v5 = (void *)*v5;
  }
  int v6 = (char *)(a1 + 32);
  if (*(_DWORD *)(a1 + 52) >= 2u) {
    int v6 = *(char **)v6;
  }
  sub_2171C520C(v4, (uint64_t)v5, v6, a2, a3);
}

unint64_t sub_2171C507C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = (void *)(a4 + 16);
  uint64_t v9 = (void *)(a4 + 16);
  if (*(_DWORD *)(a4 + 28) >= 2u) {
    uint64_t v9 = (void *)*v8;
  }
  char v10 = (void *)(a4 + 32);
  uint64_t v11 = (void *)(a4 + 32);
  if (*(_DWORD *)(a4 + 52) >= 2u) {
    uint64_t v11 = (void *)*v10;
  }
  unint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void *, void *))(*(void *)a1 + 200))(a1, a2, a3, 1, v9, v11);
  unint64_t v13 = result;
  if (result >= 2)
  {
    (**(void (***)(uint64_t, unint64_t))a4)(a4, result);
    if (*(_DWORD *)(a4 + 28) >= 2u) {
      unint64_t v8 = (void *)*v8;
    }
    if (*(_DWORD *)(a4 + 52) >= 2u) {
      char v10 = (void *)*v10;
    }
    unint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t, void *, void *))(*(void *)a1 + 200))(a1, a2, a3, v13, v8, v10);
    if (v13 != result)
    {
      v14[0] = "hd/sceneDelegate.h";
      v14[1] = "SamplePrimvar";
      v14[2] = 942;
      v14[3] = "void pxrInternal__aapl__pxrReserved__::HdSceneDelegate::SamplePrimvar(const SdfPath &, const TfToken &, H"
               "dTimeSampleArray<VtValue, CAPACITY> *) [CAPACITY = 1U]";
      char v15 = 0;
      unint64_t result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v14, "authoredSamples == authoredSamplesSecondAttempt", 0);
    }
  }
  *(void *)(a4 + 8) = v13;
  return result;
}

void sub_2171C520C(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, void *a4@<X8>, float a5@<S0>)
{
  if (a1)
  {
    uint64_t v7 = 0;
    unint64_t v8 = a3;
    do
    {
      float v9 = *(float *)(a2 + 4 * v7);
      if (v9 == a5)
      {
        uint64_t v11 = a4;
        char v10 = v8;
        goto LABEL_13;
      }
      if (v9 > a5) {
        goto LABEL_7;
      }
      ++v7;
      v8 += 16;
    }
    while (a1 != v7);
    uint64_t v7 = a1;
LABEL_7:
    if (!v7)
    {
      uint64_t v11 = a4;
      char v10 = a3;
      goto LABEL_13;
    }
    if (v7 == a1)
    {
      char v10 = &a3[16 * a1 - 16];
      uint64_t v11 = a4;
LABEL_13:
      sub_2168EE4C4(v11, v10);
      return;
    }
    float v12 = *(float *)(a2 + 4 * v7);
    uint64_t v13 = v7 - 1;
    float v14 = *(float *)(a2 + 4 * (v7 - 1));
    if (v12 == v14)
    {
      char v16 = "hd/timeSampleArray.h";
      uint64_t v17 = "HdResampleRawTimeSamples";
      uint64_t v18 = 108;
      uint64_t v19 = "T pxrInternal__aapl__pxrReserved__::HdResampleRawTimeSamples(float, size_t, const float *, const T *) [T = p"
            "xrInternal__aapl__pxrReserved__::VtValue]";
      char v20 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v16, (pxrInternal__aapl__pxrReserved__ *)"HdResampleRawTimeSamples: overlapping samples at %f; using first sample",
        a3,
        v12);
      sub_2168EE4C4(a4, &a3[16 * v13]);
    }
    else
    {
      float v15 = (float)(a5 - v14) / (float)(v12 - v14);
      pxrInternal__aapl__pxrReserved__::HdResampleNeighbors((pxrInternal__aapl__pxrReserved__ *)&a3[16 * v13], v15, (std::type_info *)&a3[16 * v7], (const pxrInternal__aapl__pxrReserved__::VtValue *)a3, a4);
    }
  }
  else
  {
    char v16 = "hd/timeSampleArray.h";
    uint64_t v17 = "HdResampleRawTimeSamples";
    uint64_t v18 = 84;
    uint64_t v19 = "T pxrInternal__aapl__pxrReserved__::HdResampleRawTimeSamples(float, size_t, const float *, const T *) [T = pxr"
          "Internal__aapl__pxrReserved__::VtValue]";
    char v20 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v16, 1, (pxrInternal__aapl__pxrReserved__ *)"HdResampleRawTimeSamples: Zero samples provided");
    a4[1] = 0;
  }
}

void sub_2171C53A8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171C53D0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2171C5400(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77CCC8)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_2171C5448(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171C5470(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2171C54A0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77CD40)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_2171C54E4(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 64;
        sub_2171C557C((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_DWORD *sub_2171C557C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 40);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 32));
  uint64_t result = sub_21697C414((_DWORD *)(a2 + 28));
  uint64_t v5 = *(void *)(a2 + 16);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void sub_2171C55F8(uint64_t a1)
{
  *(void *)a1 = &unk_26C77CD68;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 44));
  sub_21697C414((_DWORD *)(a1 + 40));
  sub_2168CAE68((uint64_t *)(a1 + 32), 0);
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 16);
    uint64_t v4 = *(void **)(a1 + 8);
    if (v3 != v2)
    {
      do
      {
        v3 -= 56;
        sub_2171BE93C(v3);
      }
      while (v3 != v2);
      uint64_t v4 = *(void **)(a1 + 8);
    }
    *(void *)(a1 + 16) = v2;
    operator delete(v4);
  }

  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase((pxrInternal__aapl__pxrReserved__::HdDataSourceBase *)a1);
}

void sub_2171C56A4(uint64_t a1)
{
  *(void *)a1 = &unk_26C77CD68;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 44));
  sub_21697C414((_DWORD *)(a1 + 40));
  sub_2168CAE68((uint64_t *)(a1 + 32), 0);
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 16);
    uint64_t v4 = *(void **)(a1 + 8);
    if (v3 != v2)
    {
      do
      {
        v3 -= 56;
        sub_2171BE93C(v3);
      }
      while (v3 != v2);
      uint64_t v4 = *(void **)(a1 + 8);
    }
    *(void *)(a1 + 16) = v2;
    operator delete(v4);
  }
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase((pxrInternal__aapl__pxrReserved__::HdDataSourceBase *)a1);

  operator delete(v5);
}

void *sub_2171C5754@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t result = (void *)sub_216973388((char **)a2, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3));
  uint64_t v5 = *(uint64_t **)(a1 + 8);
  int v6 = *(uint64_t **)(a1 + 16);
  if (v5 != v6)
  {
    uint64_t result = *(void **)(a2 + 8);
    do
    {
      if ((unint64_t)result >= *(void *)(a2 + 16))
      {
        uint64_t result = sub_216973984((char **)a2, v5);
      }
      else
      {
        uint64_t v7 = *v5;
        void *result = *v5;
        if ((v7 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          *result &= 0xFFFFFFFFFFFFFFF8;
        }
        ++result;
      }
      *(void *)(a2 + 8) = result;
      v5 += 7;
    }
    while (v5 != v6);
  }
  return result;
}

void sub_2171C5824(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

void sub_2171C5840(void *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = (void *)a1[4];
  if (v5)
  {
    int v6 = sub_2168CB1F4(v5, a2);
    if (!v6)
    {
LABEL_44:
      *a3 = 0;
      a3[1] = 0;
      return;
    }
    uint64_t v7 = a1[2];
    uint64_t v8 = a1[1] + 56 * v6[3];
  }
  else
  {
    uint64_t v8 = a1[1];
    uint64_t v7 = a1[2];
    if (v8 == v7) {
      goto LABEL_44;
    }
    while ((*(void *)v8 & 0xFFFFFFFFFFFFFFF8) != (*a2 & 0xFFFFFFFFFFFFFFF8))
    {
      v8 += 56;
      if (v8 == v7) {
        goto LABEL_44;
      }
    }
  }
  if (v8 == v7) {
    goto LABEL_44;
  }
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v29 = 0u;
  uint64_t v9 = *(void *)(v8 + 8);
  uint64_t v26 = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v26 &= 0xFFFFFFFFFFFFFFF8;
  }
  pxrInternal__aapl__pxrReserved__::HdPrimvarSchema::BuildInterpolationDataSource((pxrInternal__aapl__pxrReserved__::HdPrimvarSchema *)&v26, (uint64_t)&v27);
  char v10 = pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarSchema::Builder::SetInterpolation(&v29, &v27);
  uint64_t v11 = *(void *)(v8 + 16);
  uint64_t v23 = v11;
  if ((v11 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v23 &= 0xFFFFFFFFFFFFFFF8;
  }
  pxrInternal__aapl__pxrReserved__::HdPrimvarSchema::BuildRoleDataSource((pxrInternal__aapl__pxrReserved__::HdPrimvarSchema *)&v23, (uint64_t)&v24);
  uint64_t v12 = pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarSchema::Builder::SetRole((uint64_t)v10, &v24);
  sub_2171B89C4((_DWORD *)(v8 + 24), &v21);
  long long v22 = v21;
  long long v21 = 0uLL;
  uint64_t v13 = pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarSchema::Builder::SetSourceComputation(v12, (uint64_t *)&v22);
  sub_2171A3CE4((uint64_t *)(v8 + 32), &v19);
  long long v20 = v19;
  long long v19 = 0uLL;
  uint64_t v14 = pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarSchema::Builder::SetSourceComputationOutputName(v13, (uint64_t *)&v20);
  float v15 = (char *)operator new(0x18uLL);
  *(void *)float v15 = &unk_26C77CDB0;
  *(_OWORD *)(v15 + 8) = *(_OWORD *)(v8 + 40);
  sub_2171C5E68(&v17, (uint64_t)v15);
  long long v18 = v17;
  long long v17 = 0uLL;
  char v16 = (pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarSchema::Builder *)pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarSchema::Builder::SetValueType(v14, (uint64_t *)&v18);
  pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarSchema::Builder::Build(v16, &v34);
  *(_OWORD *)a3 = v34;
  long long v34 = 0uLL;
  if (*((void *)&v18 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v18 + 1));
  }
  if (*((void *)&v17 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v17 + 1));
  }
  if (*((void *)&v20 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v20 + 1));
  }
  if (*((void *)&v19 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v19 + 1));
  }
  if (*((void *)&v22 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v22 + 1));
  }
  if (*((void *)&v21 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v21 + 1));
  }
  if (v25) {
    sub_216784EC4(v25);
  }
  if ((v23 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v28) {
    sub_216784EC4(v28);
  }
  if ((v26 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (*((void *)&v33 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v33 + 1));
  }
  if (*((void *)&v32 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v32 + 1));
  }
  if (*((void *)&v31 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v31 + 1));
  }
  if (*((void *)&v30 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v30 + 1));
  }
  if (*((void *)&v29 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v29 + 1));
  }
}

void sub_2171C5AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  if (a16) {
    sub_216784EC4(a16);
  }
  if (a14) {
    sub_216784EC4(a14);
  }
  if (a20) {
    sub_216784EC4(a20);
  }
  if (a18) {
    sub_216784EC4(a18);
  }
  if (a23) {
    sub_216784EC4(a23);
  }
  if ((a21 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a26) {
    sub_216784EC4(a26);
  }
  if ((a24 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_2171BFA74((void *)(v26 - 128));
  _Unwind_Resume(a1);
}

void sub_2171C5BD8(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *a1)
{
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(a1);

  operator delete(v1);
}

unsigned int *sub_2171C5C00@<X0>(uint64_t a1@<X0>, unsigned int **a2@<X8>)
{
  a2[1] = (unsigned int *)((char *)&off_26C77CE08 + 2);
  uint64_t result = (unsigned int *)operator new(0x18uLL);
  *(_OWORD *)uint64_t result = *(_OWORD *)(a1 + 8);
  atomic_store(0, result + 4);
  *a2 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 4, 1u, memory_order_relaxed);
  return result;
}

uint64_t sub_2171C5C58()
{
  return 0;
}

uint64_t sub_2171C5C60(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t *sub_2171C5C6C(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 16), 1u, memory_order_relaxed);
  }
  return result;
}

void sub_2171C5C88(atomic_uint **a1)
{
  uint64_t v1 = *a1;
  if (v1)
  {
    if (atomic_fetch_add_explicit(v1 + 4, 0xFFFFFFFF, memory_order_release) == 1)
    {
      __dmb(9u);
      operator delete(v1);
    }
  }
}

void *sub_2171C5CB0(void *result, void *a2)
{
  *a2 = *result;
  unsigned int *result = 0;
  return result;
}

uint64_t sub_2171C5CC0()
{
  return 1;
}

unint64_t sub_2171C5CC8(int **a1)
{
  return bswap64(0x9E3779B97F4A7C55* (*((void *)*a1 + 1)+ ((unint64_t)(*((void *)*a1 + 1)+ **a1+ (*((void *)*a1 + 1) + **a1) * (*((void *)*a1 + 1) + **a1)) >> 1)));
}

BOOL sub_2171C5CFC(uint64_t a1, uint64_t a2)
{
  return **(_DWORD **)a1 == **(_DWORD **)a2 && *(void *)(*(void *)a1 + 8) == *(void *)(*(void *)a2 + 8);
}

BOOL sub_2171C5D24(uint64_t a1, uint64_t a2)
{
  return **(_DWORD **)a1 == *(_DWORD *)a2 && *(void *)(*(void *)a1 + 8) == *(void *)(a2 + 8);
}

uint64_t sub_2171C5D4C()
{
  return 0;
}

void *sub_2171C5D58(uint64_t *a1, void *a2)
{
  return pxrInternal__aapl__pxrReserved__::Vt_StreamOutGeneric((uint64_t)&unk_26C77CEC0, *a1, a2);
}

void *sub_2171C5D6C()
{
  return &unk_26C77CEC0;
}

uint64_t sub_2171C5D78()
{
  return 0;
}

uint64_t sub_2171C5D80()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_2171C5D8C()
{
  return 0;
}

uint64_t sub_2171C5D94()
{
  return 0;
}

BOOL sub_2171C5D9C(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x80000002174C5E00 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2171C5DD8(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_26C77CEC0, a2, a3);
}

void *sub_2171C5DFC()
{
  return &unk_26C77CEC0;
}

uint64_t sub_2171C5E08(uint64_t a1)
{
  return *(void *)a1;
}

unsigned int *sub_2171C5E10@<X0>(_OWORD **a1@<X0>, unsigned int **a2@<X8>)
{
  uint64_t v3 = *a1;
  a2[1] = (unsigned int *)((char *)&off_26C77CE08 + 2);
  uint64_t result = (unsigned int *)operator new(0x18uLL);
  *(_OWORD *)uint64_t result = *v3;
  atomic_store(0, result + 4);
  *a2 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 4, 1u, memory_order_relaxed);
  return result;
}

void *sub_2171C5E68(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  void *v4 = &unk_26C77CEE0;
  v4[1] = 0;
  _OWORD v4[2] = 0;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_2171C5EC0(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_2173254E8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_2171C5EDC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171C5F04(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2171C5F34(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77CF30)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_2171C5F7C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171C5FA4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2171C5FD4(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77CFA8)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_2171C6018(uint64_t a1)
{
  *(void *)a1 = &unk_26C77CFD0;
  *(void *)(a1 + 24) = &unk_26C77D038;
  if (*(_DWORD *)(a1 + 188) >= 2u) {
    free(*(void **)(a1 + 56));
  }
  if (*(_DWORD *)(a1 + 52) >= 2u) {
    free(*(void **)(a1 + 40));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_21697C414((_DWORD *)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 8);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }

  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase((pxrInternal__aapl__pxrReserved__::HdDataSourceBase *)a1);
}

void sub_2171C60DC(uint64_t a1)
{
  *(void *)a1 = &unk_26C77CFD0;
  *(void *)(a1 + 24) = &unk_26C77D038;
  if (*(_DWORD *)(a1 + 188) >= 2u) {
    free(*(void **)(a1 + 56));
  }
  if (*(_DWORD *)(a1 + 52) >= 2u) {
    free(*(void **)(a1 + 40));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_21697C414((_DWORD *)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 8);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase((pxrInternal__aapl__pxrReserved__::HdDataSourceBase *)a1);

  operator delete(v3);
}

void *sub_2171C61A4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  (*(void (**)(_OWORD *__return_ptr))(*(void *)a1 + 32))(v8);
  a2[1] = (char *)&off_26C74E928 + 2;
  uint64_t result = operator new(0x88uLL);
  long long v4 = v8[5];
  *((_OWORD *)result + 4) = v8[4];
  *((_OWORD *)result + 5) = v4;
  long long v5 = v8[7];
  *((_OWORD *)result + 6) = v8[6];
  *((_OWORD *)result + 7) = v5;
  long long v6 = v8[1];
  *(_OWORD *)uint64_t result = v8[0];
  *((_OWORD *)result + 1) = v6;
  long long v7 = v8[3];
  *((_OWORD *)result + 2) = v8[2];
  *((_OWORD *)result + 3) = v7;
  atomic_store(0, (unsigned int *)result + 32);
  *a2 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 32, 1u, memory_order_relaxed);
  return result;
}

uint64_t sub_2171C6240(unint64_t a1, uint64_t a2, float a3, float a4)
{
  sub_2171C6988(a1);
  if (!a2 || !*(void *)(a1 + 32)) {
    return 1;
  }
  unint64_t v8 = 0;
  uint64_t v9 = (float *)(a1 + 40);
  char v10 = (void *)(a2 + 16);
  do
  {
    if (*(_DWORD *)(a1 + 52) > 1u)
    {
      unint64_t v15 = *(void *)v9;
      uint64_t v11 = v8;
      float v12 = *(float *)(*(void *)v9 + 4 * v8);
      uint64_t v14 = *(float **)a2;
      uint64_t v13 = *(float **)(a2 + 8);
      if (*(float **)a2 != v13) {
        goto LABEL_8;
      }
      if (v8 && v12 > a3) {
        goto LABEL_23;
      }
    }
    else
    {
      uint64_t v11 = v8;
      float v12 = v9[v8];
      uint64_t v14 = *(float **)a2;
      uint64_t v13 = *(float **)(a2 + 8);
      if (*(float **)a2 != v13)
      {
        unint64_t v15 = a1 + 40;
LABEL_8:
        if ((unint64_t)v13 >= *v10)
        {
          uint64_t v17 = v13 - v14;
          unint64_t v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 62) {
            goto LABEL_89;
          }
          uint64_t v19 = *v10 - (void)v14;
          if (v19 >> 1 > v18) {
            unint64_t v18 = v19 >> 1;
          }
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v20 = v18;
          }
          if (v20)
          {
            long long v21 = (char *)sub_21677EA28(a2 + 16, v20);
            uint64_t v14 = *(float **)a2;
            uint64_t v13 = *(float **)(a2 + 8);
            float v22 = *(float *)(v15 + 4 * v11);
          }
          else
          {
            long long v21 = 0;
            float v22 = v12;
          }
          uint64_t v24 = (float *)&v21[4 * v17];
          *uint64_t v24 = v22;
          char v16 = v24 + 1;
          while (v13 != v14)
          {
            int v25 = *((_DWORD *)v13-- - 1);
            *((_DWORD *)v24-- - 1) = v25;
          }
          *(void *)a2 = v24;
          *(void *)(a2 + 8) = v16;
          *(void *)(a2 + 16) = &v21[4 * v20];
          if (!v14) {
            goto LABEL_62;
          }
          uint64_t v26 = v14;
          goto LABEL_61;
        }
        *uint64_t v13 = v12;
        char v16 = v13 + 1;
        goto LABEL_62;
      }
      if (v8)
      {
        unint64_t v15 = a1 + 40;
        if (v12 > a3)
        {
LABEL_23:
          uint64_t v23 = (v8 - 1);
          if ((unint64_t)v14 >= *v10)
          {
            uint64_t v27 = *v10 - (void)v14;
            uint64_t v28 = v27 >> 1;
            if ((unint64_t)(v27 >> 1) <= 1) {
              uint64_t v28 = 1;
            }
            if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v29 = v28;
            }
            long long v31 = sub_21677EA28(a2 + 16, v29);
            long long v32 = *(float **)a2;
            long long v33 = *(float **)(a2 + 8);
            _DWORD *v31 = *(_DWORD *)(v15 + 4 * v23);
            uint64_t v14 = (float *)(v31 + 1);
            long long v34 = v31;
            while (v33 != v32)
            {
              int v35 = *((_DWORD *)v33-- - 1);
              *--long long v34 = v35;
            }
            *(void *)a2 = v34;
            *(void *)(a2 + 8) = v14;
            *(void *)(a2 + 16) = &v31[v30];
            if (v32) {
              operator delete(v32);
            }
          }
          else
          {
            *v14++ = *(float *)(v15 + 4 * v23);
          }
          *(void *)(a2 + 8) = v14;
        }
      }
    }
    if (v12 < a3) {
      goto LABEL_63;
    }
    if (*(_DWORD *)(a1 + 52) >= 2u) {
      unint64_t v36 = *(void *)(a1 + 40);
    }
    else {
      unint64_t v36 = a1 + 40;
    }
    if ((unint64_t)v14 >= *v10)
    {
      uint64_t v26 = *(float **)a2;
      uint64_t v37 = ((uint64_t)v14 - *(void *)a2) >> 2;
      unint64_t v38 = v37 + 1;
      if ((unint64_t)(v37 + 1) >> 62) {
LABEL_89:
      }
        sub_21677CB10();
      uint64_t v39 = *v10 - (void)v26;
      if (v39 >> 1 > v38) {
        unint64_t v38 = v39 >> 1;
      }
      if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v40 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v40 = v38;
      }
      if (v40)
      {
        uint64_t v41 = (char *)sub_21677EA28(a2 + 16, v40);
        uint64_t v26 = *(float **)a2;
        uint64_t v14 = *(float **)(a2 + 8);
      }
      else
      {
        uint64_t v41 = 0;
      }
      uint64_t v42 = &v41[4 * v37];
      *(_DWORD *)uint64_t v42 = *(_DWORD *)(v36 + 4 * v11);
      char v16 = (float *)(v42 + 4);
      while (v14 != v26)
      {
        int v43 = *((_DWORD *)v14-- - 1);
        *((_DWORD *)v42 - 1) = v43;
        v42 -= 4;
      }
      *(void *)a2 = v42;
      *(void *)(a2 + 8) = v16;
      *(void *)(a2 + 16) = &v41[4 * v40];
      if (!v26) {
        goto LABEL_62;
      }
LABEL_61:
      operator delete(v26);
      goto LABEL_62;
    }
    *uint64_t v14 = *(float *)(v36 + 4 * v11);
    char v16 = v14 + 1;
LABEL_62:
    *(void *)(a2 + 8) = v16;
    uint64_t v14 = v16;
LABEL_63:
    unint64_t v44 = *(void *)(a1 + 32);
    ++v8;
  }
  while (v12 < a4 && v8 < v44);
  if (*(float **)a2 == v14 && v44 != 0)
  {
    if (*(_DWORD *)(a1 + 52) >= 2u) {
      long long v47 = *(_DWORD **)(a1 + 40);
    }
    else {
      long long v47 = (_DWORD *)(a1 + 40);
    }
    if ((unint64_t)v14 >= *v10)
    {
      uint64_t v49 = *v10 - (void)v14;
      uint64_t v50 = v49 >> 1;
      if ((unint64_t)(v49 >> 1) <= 1) {
        uint64_t v50 = 1;
      }
      if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v51 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v51 = v50;
      }
      uint64_t v52 = sub_21677EA28(a2 + 16, v51);
      unint64_t v53 = *(float **)a2;
      v54 = *(float **)(a2 + 8);
      unint64_t v56 = &v52[v55];
      *uint64_t v52 = *v47;
      long long v48 = v52 + 1;
      while (v54 != v53)
      {
        int v57 = *((_DWORD *)v54-- - 1);
        *--uint64_t v52 = v57;
      }
      *(void *)a2 = v52;
      *(void *)(a2 + 8) = v48;
      *(void *)(a2 + 16) = v56;
      if (v53) {
        operator delete(v53);
      }
    }
    else
    {
      *uint64_t v14 = *(float *)v47;
      long long v48 = v14 + 1;
    }
    *(void *)(a2 + 8) = v48;
  }
  return 1;
}

void sub_2171C65C4(unint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  if (a3 == 0.0)
  {
    long long v5 = (pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
    if (!v5) {
      long long v5 = sub_2171C0F34(&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
    }
    uint64_t v6 = **(void **)(a1 + 192);
    if ((*(void *)(a1 + 8) & 0xFFFFFFFFFFFFFFF8) == (*((void *)v5 + 18) & 0xFFFFFFFFFFFFFFF8))
    {
      long long v7 = *(void (**)(void))(v6 + 224);
    }
    else
    {
      long long v7 = *(void (**)(void))(v6 + 72);
    }
    v7();
  }
  else
  {
    sub_2171C6988(a1);
    sub_2171C6D28(a1 + 24, a2, a3);
  }
}

uint64_t sub_2171C66E8(uint64_t a1)
{
  *(void *)a1 = &unk_26C77D038;
  *(void *)(a1 + 24) = 0x100000000;
  uint64_t v2 = a1 + 32;
  *(void *)(a1 + 160) = 0x100000000;
  LODWORD(v4[0]) = 0;
  sub_2171C363C((int *)(a1 + 16), 1u, (int *)v4);
  memset(v4, 0, sizeof(v4));
  sub_2171C67C4(v2, 1u, v4);
  *(void *)(a1 + 8) = 0;
  return a1;
}

void sub_2171C678C(_Unwind_Exception *exception_object)
{
  if (*(_DWORD *)(v1 + 164) >= 2u) {
    free(*v3);
  }
  if (*(_DWORD *)(v1 + 28) >= 2u) {
    free(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_2171C67C4(uint64_t a1, unsigned int a2, long long *a3)
{
  unsigned int v5 = *(_DWORD *)(a1 + 128);
  if (v5 <= a2)
  {
    if (v5 >= a2) {
      return;
    }
    unsigned int v7 = *(_DWORD *)(a1 + 132);
    if (v7 < a2)
    {
      sub_2171C68E4(a1, a2);
      unsigned int v7 = *(_DWORD *)(a1 + 132);
    }
    uint64_t v8 = a1;
    if (v7 >= 2) {
      uint64_t v8 = *(void *)a1;
    }
    uint64_t v9 = *(unsigned int *)(a1 + 128);
    if (v9 != a2)
    {
      char v10 = (_OWORD *)(v8 + (v9 << 7));
      unint64_t v11 = ((unint64_t)a2 << 7) - (v9 << 7);
      do
      {
        long long v12 = *a3;
        long long v13 = a3[1];
        long long v14 = a3[3];
        void v10[2] = a3[2];
        v10[3] = v14;
        _OWORD *v10 = v12;
        v10[1] = v13;
        long long v15 = a3[4];
        long long v16 = a3[5];
        long long v17 = a3[7];
        v10[6] = a3[6];
        v10[7] = v17;
        v10[4] = v15;
        v10[5] = v16;
        v10 += 8;
        v11 -= 128;
      }
      while (v11);
    }
  }
  *(_DWORD *)(a1 + 128) = a2;
}

void sub_2171C687C(uint64_t a1, unsigned int a2)
{
  LODWORD(v4[0]) = 0;
  sub_2171C363C((int *)(a1 + 16), a2, (int *)v4);
  memset(v4, 0, sizeof(v4));
  sub_2171C67C4(a1 + 32, a2, v4);
  *(void *)(a1 + 8) = a2;
}

void sub_2171C68E4(uint64_t a1, unsigned int a2)
{
  long long v4 = malloc((unint64_t)a2 << 7);
  unsigned int v5 = v4;
  unsigned int v6 = *(_DWORD *)(a1 + 132);
  unsigned int v7 = (long long *)a1;
  if (v6 >= 2) {
    unsigned int v7 = *(long long **)a1;
  }
  uint64_t v8 = *(unsigned int *)(a1 + 128);
  if (v8)
  {
    uint64_t v9 = v8 << 7;
    char v10 = v4;
    do
    {
      long long v11 = *v7;
      long long v12 = v7[1];
      long long v13 = v7[3];
      void v10[2] = v7[2];
      v10[3] = v13;
      _OWORD *v10 = v11;
      v10[1] = v12;
      long long v14 = v7[4];
      long long v15 = v7[5];
      long long v16 = v7[7];
      v10[6] = v7[6];
      v10[7] = v16;
      v10[4] = v14;
      v10[5] = v15;
      v7 += 8;
      v10 += 8;
      v9 -= 128;
    }
    while (v9);
  }
  if (v6 >= 2) {
    free(*(void **)a1);
  }
  *(void *)a1 = v5;
  *(_DWORD *)(a1 + 132) = a2;
}

unint64_t sub_2171C6988(unint64_t result)
{
  if (!*(void *)(result + 32))
  {
    unint64_t v1 = result;
    uint64_t v2 = result + 24;
    uint64_t v3 = (pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
    if (!v3) {
      uint64_t v3 = sub_2171C0F34(&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
    }
    unint64_t v4 = *((void *)v3 + 18) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v5 = *(void *)(v1 + 192);
    uint64_t v6 = v1 + 16;
    if ((*(void *)(v1 + 8) & 0xFFFFFFFFFFFFFFF8) == v4)
    {
      return sub_2171C6A30(v5, v6, v2);
    }
    else
    {
      return sub_2171C6BAC(v5, v6, v2);
    }
  }
  return result;
}

unint64_t sub_2171C6A30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)(a3 + 16);
  unsigned int v7 = (void *)(a3 + 16);
  if (*(_DWORD *)(a3 + 28) >= 2u) {
    unsigned int v7 = (void *)*v6;
  }
  uint64_t v8 = (void *)(a3 + 32);
  uint64_t v9 = (void *)(a3 + 32);
  if (*(_DWORD *)(a3 + 164) >= 2u) {
    uint64_t v9 = (void *)*v8;
  }
  unint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *, void *))(*(void *)a1 + 192))(a1, a2, 1, v7, v9);
  unint64_t v11 = result;
  if (result >= 2)
  {
    (**(void (***)(uint64_t, unint64_t))a3)(a3, result);
    if (*(_DWORD *)(a3 + 28) >= 2u) {
      uint64_t v6 = (void *)*v6;
    }
    if (*(_DWORD *)(a3 + 164) >= 2u) {
      uint64_t v8 = (void *)*v8;
    }
    unint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, void *, void *))(*(void *)a1 + 192))(a1, a2, v11, v6, v8);
    if (v11 != result)
    {
      v12[0] = "hd/sceneDelegate.h";
      v12[1] = "SampleInstancerTransform";
      uint64_t v12[2] = 618;
      void v12[3] = "void pxrInternal__aapl__pxrReserved__::HdSceneDelegate::SampleInstancerTransform(const SdfPath &, HdTimeS"
               "ampleArray<GfMatrix4d, CAPACITY> *) [CAPACITY = 1U]";
      char v13 = 0;
      unint64_t result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v12, "authoredSamples == authoredSamplesSecondAttempt", 0);
    }
  }
  *(void *)(a3 + 8) = v11;
  return result;
}

unint64_t sub_2171C6BAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)(a3 + 16);
  unsigned int v7 = (void *)(a3 + 16);
  if (*(_DWORD *)(a3 + 28) >= 2u) {
    unsigned int v7 = (void *)*v6;
  }
  uint64_t v8 = (void *)(a3 + 32);
  uint64_t v9 = (void *)(a3 + 32);
  if (*(_DWORD *)(a3 + 164) >= 2u) {
    uint64_t v9 = (void *)*v8;
  }
  unint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *, void *))(*(void *)a1 + 184))(a1, a2, 1, v7, v9);
  unint64_t v11 = result;
  if (result >= 2)
  {
    (**(void (***)(uint64_t, unint64_t))a3)(a3, result);
    if (*(_DWORD *)(a3 + 28) >= 2u) {
      uint64_t v6 = (void *)*v6;
    }
    if (*(_DWORD *)(a3 + 164) >= 2u) {
      uint64_t v8 = (void *)*v8;
    }
    unint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, void *, void *))(*(void *)a1 + 184))(a1, a2, v11, v6, v8);
    if (v11 != result)
    {
      v12[0] = "hd/sceneDelegate.h";
      v12[1] = "SampleTransform";
      uint64_t v12[2] = 575;
      void v12[3] = "void pxrInternal__aapl__pxrReserved__::HdSceneDelegate::SampleTransform(const SdfPath &, HdTimeSampleArra"
               "y<GfMatrix4d, CAPACITY> *) [CAPACITY = 1U]";
      char v13 = 0;
      unint64_t result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v12, "authoredSamples == authoredSamplesSecondAttempt", 0);
    }
  }
  *(void *)(a3 + 8) = v11;
  return result;
}

void sub_2171C6D28(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = (void *)(a1 + 16);
  if (*(_DWORD *)(a1 + 28) >= 2u) {
    uint64_t v5 = (void *)*v5;
  }
  uint64_t v6 = (_OWORD *)(a1 + 32);
  if (*(_DWORD *)(a1 + 164) >= 2u) {
    uint64_t v6 = *(_OWORD **)v6;
  }
  sub_2171C6D5C(v4, (uint64_t)v5, v6, a2, a3);
}

void sub_2171C6D5C(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X8>, float a5@<S0>)
{
  uint64_t v73 = *MEMORY[0x263EF8340];
  if (a1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = a3;
    do
    {
      float v9 = *(float *)(a2 + 4 * v7);
      if (v9 == a5)
      {
        long long v16 = v8[5];
        *(_OWORD *)(a4 + 64) = v8[4];
        *(_OWORD *)(a4 + 80) = v16;
        long long v17 = v8[7];
        *(_OWORD *)(a4 + 96) = v8[6];
        *(_OWORD *)(a4 + 112) = v17;
        long long v18 = v8[1];
        *(_OWORD *)a4 = *v8;
        *(_OWORD *)(a4 + 16) = v18;
        long long v14 = v8[2];
        long long v15 = v8[3];
        goto LABEL_15;
      }
      if (v9 > a5) {
        goto LABEL_7;
      }
      ++v7;
      v8 += 8;
    }
    while (a1 != v7);
    uint64_t v7 = a1;
LABEL_7:
    if (!v7)
    {
      long long v19 = a3[5];
      *(_OWORD *)(a4 + 64) = a3[4];
      *(_OWORD *)(a4 + 80) = v19;
      long long v20 = a3[7];
      *(_OWORD *)(a4 + 96) = a3[6];
      *(_OWORD *)(a4 + 112) = v20;
      long long v21 = a3[1];
      *(_OWORD *)a4 = *a3;
      *(_OWORD *)(a4 + 16) = v21;
      long long v14 = a3[2];
      long long v15 = a3[3];
      goto LABEL_15;
    }
    if (v7 == a1)
    {
      char v10 = &a3[8 * a1];
      long long v11 = *(v10 - 3);
      *(_OWORD *)(a4 + 64) = *(v10 - 4);
      *(_OWORD *)(a4 + 80) = v11;
      long long v12 = *(v10 - 1);
      *(_OWORD *)(a4 + 96) = *(v10 - 2);
      *(_OWORD *)(a4 + 112) = v12;
      long long v13 = *(v10 - 7);
      *(_OWORD *)a4 = *(v10 - 8);
      *(_OWORD *)(a4 + 16) = v13;
      long long v14 = *(v10 - 6);
      long long v15 = *(v10 - 5);
LABEL_15:
      *(_OWORD *)(a4 + 32) = v14;
      *(_OWORD *)(a4 + 48) = v15;
      return;
    }
    float v22 = *(float *)(a2 + 4 * v7);
    uint64_t v23 = v7 - 1;
    float v24 = *(float *)(a2 + 4 * (v7 - 1));
    if (v22 == v24)
    {
      *(void *)&v57.f64[0] = "hd/timeSampleArray.h";
      *(void *)&v57.f64[1] = "HdResampleRawTimeSamples";
      *(void *)&v58.f64[0] = 108;
      *(void *)&v58.f64[1] = "T pxrInternal__aapl__pxrReserved__::HdResampleRawTimeSamples(float, size_t, const float *"
                               ", const T *) [T = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
      LOBYTE(v59.f64[0]) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v57, (pxrInternal__aapl__pxrReserved__ *)"HdResampleRawTimeSamples: overlapping samples at %f; using first sample",
        (char *)a3,
        v22);
      int v25 = &a3[8 * v23];
      long long v26 = v25[5];
      *(_OWORD *)(a4 + 64) = v25[4];
      *(_OWORD *)(a4 + 80) = v26;
      long long v27 = v25[7];
      *(_OWORD *)(a4 + 96) = v25[6];
      *(_OWORD *)(a4 + 112) = v27;
      long long v28 = v25[1];
      *(_OWORD *)a4 = *v25;
      *(_OWORD *)(a4 + 16) = v28;
      long long v14 = v25[2];
      long long v15 = v25[3];
      goto LABEL_15;
    }
    unint64_t v29 = (float64x2_t *)&a3[8 * v23];
    float64x2_t v30 = v29[5];
    long long v31 = (float64x2_t *)&a3[8 * v7];
    double v32 = (float)((float)(a5 - v24) / (float)(v22 - v24));
    float64x2_t v61 = v29[4];
    float64x2_t v62 = v30;
    float64x2_t v33 = v29[7];
    float64x2_t v63 = v29[6];
    float64x2_t v64 = v33;
    float64x2_t v34 = v29[1];
    float64x2_t v57 = *v29;
    float64x2_t v58 = v34;
    float64x2_t v35 = v29[3];
    float64x2_t v59 = v29[2];
    float64x2_t v60 = v35;
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(&v57, 1.0 - v32);
    long long v37 = v36[5];
    long long v69 = v36[4];
    long long v70 = v37;
    long long v38 = v36[7];
    long long v71 = v36[6];
    long long v72 = v38;
    long long v39 = v36[1];
    long long v65 = *v36;
    long long v66 = v39;
    long long v40 = v36[3];
    long long v67 = v36[2];
    long long v68 = v40;
    float64x2_t v41 = v31[5];
    float64x2_t v61 = v31[4];
    float64x2_t v62 = v41;
    float64x2_t v42 = v31[7];
    float64x2_t v63 = v31[6];
    float64x2_t v64 = v42;
    float64x2_t v43 = v31[1];
    float64x2_t v57 = *v31;
    float64x2_t v58 = v43;
    float64x2_t v44 = v31[3];
    float64x2_t v59 = v31[2];
    float64x2_t v60 = v44;
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(&v57, v32);
    long long v46 = v45[3];
    long long v48 = *v45;
    long long v47 = v45[1];
    v56[2] = v45[2];
    v56[3] = v46;
    v56[0] = v48;
    v56[1] = v47;
    long long v49 = v45[7];
    long long v51 = v45[4];
    long long v50 = v45[5];
    v56[6] = v45[6];
    v56[7] = v49;
    v56[4] = v51;
    v56[5] = v50;
    long long v52 = v70;
    *(_OWORD *)(a4 + 64) = v69;
    *(_OWORD *)(a4 + 80) = v52;
    long long v53 = v72;
    *(_OWORD *)(a4 + 96) = v71;
    *(_OWORD *)(a4 + 112) = v53;
    long long v54 = v66;
    *(_OWORD *)a4 = v65;
    *(_OWORD *)(a4 + 16) = v54;
    long long v55 = v68;
    *(_OWORD *)(a4 + 32) = v67;
    *(_OWORD *)(a4 + 48) = v55;
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator+=((double *)a4, (double *)v56);
  }
  else
  {
    *(void *)&v57.f64[0] = "hd/timeSampleArray.h";
    *(void *)&v57.f64[1] = "HdResampleRawTimeSamples";
    *(void *)&v58.f64[0] = 84;
    *(void *)&v58.f64[1] = "T pxrInternal__aapl__pxrReserved__::HdResampleRawTimeSamples(float, size_t, const float *, "
                             "const T *) [T = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
    LOBYTE(v59.f64[0]) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v57, 1, (pxrInternal__aapl__pxrReserved__ *)"HdResampleRawTimeSamples: Zero samples provided");
    *(_OWORD *)(a4 + 96) = 0u;
    *(_OWORD *)(a4 + 112) = 0u;
    *(_OWORD *)(a4 + 64) = 0u;
    *(_OWORD *)(a4 + 80) = 0u;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
}

void sub_2171C7018(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171C7040(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2171C7070(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77D0B0)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t sub_2171C70B4(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000002174C64E7 & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;

  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C77D0D8);
}

uint64_t sub_2171C7140(uint64_t a1)
{
  if ((*(void *)a1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)a1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

uint64_t *sub_2171C7194(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_2171C71EC(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_2171C71D4(_Unwind_Exception *a1)
{
  sub_2171C7774(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_2171C71EC(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      uint64_t result = sub_2171C7278(v5, v6, v4 + 4, v4 + 4);
      uint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_2171C7278(uint64_t **a1, void *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6 = (uint64_t **)sub_216A5D0F4(a1, a2, &v10, &v9, a3);
  uint64_t result = *v6;
  if (!*v6)
  {
    sub_2171C72FC((uint64_t)a1, a4, (uint64_t)&v8);
    sub_21677B358(a1, v10, v6, v8);
    return v8;
  }
  return result;
}

uint64_t *sub_2171C72FC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (uint64_t *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = sub_2171C7380(v6 + 4, a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_2171C7364(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_2171C770C(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_2171C7380(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  sub_2171C740C(a1 + 1, a2[1], a2[2], (a2[2] - a2[1]) >> 4);
  return a1;
}

void *sub_2171C740C(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_21682BF78(result, a4);
    uint64_t result = (void *)sub_2171C7494((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_2171C7474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_2171C7674(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2171C7494(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  uint64_t v9[2] = &v12;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_2171C7528(a1, v4, v6);
      v6 += 16;
      uint64_t v4 = v12 + 16;
      v12 += 16;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  sub_2171C7590((uint64_t)v9);
  return v4;
}

_DWORD *sub_2171C7528(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_216981010((_DWORD *)a2, (_DWORD *)a3);
  uint64_t result = sub_21698105C((_DWORD *)(a2 + 4), (_DWORD *)(a3 + 4));
  uint64_t v6 = *(void *)(a3 + 8);
  *(void *)(a2 + 8) = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a2 + 8) &= 0xFFFFFFFFFFFFFFF8;
  }
  return result;
}

uint64_t sub_2171C7590(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_2171C75C8((uint64_t *)a1);
  }
  return a1;
}

uint64_t *sub_2171C75C8(uint64_t *result)
{
  uint64_t v2 = (uint64_t *)result[1];
  uint64_t v1 = (uint64_t *)result[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *result;
    do
    {
      v3 -= 16;
      uint64_t result = (uint64_t *)sub_2171C761C(v5, v3);
    }
    while (v3 != v4);
  }
  return result;
}

_DWORD *sub_2171C761C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 4));

  return sub_21697C414((_DWORD *)a2);
}

void sub_2171C7674(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 16;
        sub_2171C761C((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_2171C770C(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v4 = (void **)(a2 + 40);
    sub_2171C7674(&v4);
    uint64_t v3 = *(void *)(a2 + 32);
    if ((v3 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else if (!a2)
  {
    return;
  }
  operator delete((void *)a2);
}

void sub_2171C7774(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_2171C7774(a1, *(void *)a2);
    sub_2171C7774(a1, *((void *)a2 + 1));
    uint64_t v5 = (void **)(a2 + 40);
    sub_2171C7674(&v5);
    uint64_t v4 = *((void *)a2 + 4);
    if ((v4 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    operator delete(a2);
  }
}

void sub_2171C77EC(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *a1)
{
  *(void *)a1 = &unk_26C77D0F8;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)a1 + 5);
  sub_21697C414((_DWORD *)a1 + 4);

  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(a1);
}

void sub_2171C784C(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *a1)
{
  *(void *)a1 = &unk_26C77D0F8;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)a1 + 5);
  sub_21697C414((_DWORD *)a1 + 4);
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(a1);

  operator delete(v2);
}

char *sub_2171C78B0@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
  if (!v2) {
    uint64_t v2 = sub_2171C1B58(&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
  }
  uint64_t v3 = (uint64_t *)((char *)v2 + 8);
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  if ((unint64_t)v4 >= *(void *)(a1 + 16))
  {
    uint64_t v6 = sub_216973984((char **)a1, v3);
  }
  else
  {
    uint64_t v5 = *v3;
    uint64_t *v4 = *v3;
    if ((v5 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *v4 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v6 = (char *)(v4 + 1);
  }
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
  if (!v7) {
    uint64_t v7 = sub_2171C1B58(&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
  }
  uint64_t v8 = (uint64_t *)((char *)v7 + 16);
  uint64_t v9 = *(uint64_t **)(a1 + 8);
  if ((unint64_t)v9 >= *(void *)(a1 + 16))
  {
    uint64_t v11 = sub_216973984((char **)a1, v8);
  }
  else
  {
    uint64_t v10 = *v8;
    uint64_t *v9 = *v8;
    if ((v10 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *v9 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v11 = (char *)(v9 + 1);
  }
  *(void *)(a1 + 8) = v11;
  uint64_t v12 = (pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
  if (!v12) {
    uint64_t v12 = sub_2171C1B58(&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
  }
  long long v13 = (uint64_t *)((char *)v12 + 24);
  long long v14 = *(uint64_t **)(a1 + 8);
  if ((unint64_t)v14 >= *(void *)(a1 + 16))
  {
    long long v16 = sub_216973984((char **)a1, v13);
  }
  else
  {
    uint64_t v15 = *v13;
    *long long v14 = *v13;
    if ((v15 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *v14 &= 0xFFFFFFFFFFFFFFF8;
    }
    long long v16 = (char *)(v14 + 1);
  }
  *(void *)(a1 + 8) = v16;
  long long v17 = (pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
  if (!v17) {
    long long v17 = sub_2171C1B58(&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
  }
  long long v18 = (uint64_t *)((char *)v17 + 32);
  long long v19 = *(uint64_t **)(a1 + 8);
  if ((unint64_t)v19 >= *(void *)(a1 + 16))
  {
    long long v21 = sub_216973984((char **)a1, v18);
  }
  else
  {
    uint64_t v20 = *v18;
    *long long v19 = *v18;
    if ((v20 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *v19 &= 0xFFFFFFFFFFFFFFF8;
    }
    long long v21 = (char *)(v19 + 1);
  }
  *(void *)(a1 + 8) = v21;
  float v22 = (pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
  if (!v22) {
    float v22 = sub_2171C1B58(&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
  }
  uint64_t v23 = (uint64_t *)((char *)v22 + 40);
  float v24 = *(uint64_t **)(a1 + 8);
  if ((unint64_t)v24 >= *(void *)(a1 + 16))
  {
    long long v26 = sub_216973984((char **)a1, v23);
  }
  else
  {
    uint64_t v25 = *v23;
    *float v24 = *v23;
    if ((v25 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *v24 &= 0xFFFFFFFFFFFFFFF8;
    }
    long long v26 = (char *)(v24 + 1);
  }
  *(void *)(a1 + 8) = v26;
  long long v27 = (pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
  if (!v27) {
    long long v27 = sub_2171C1B58(&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
  }
  long long v28 = (uint64_t *)((char *)v27 + 48);
  unint64_t v29 = *(uint64_t **)(a1 + 8);
  if ((unint64_t)v29 >= *(void *)(a1 + 16))
  {
    long long v31 = sub_216973984((char **)a1, v28);
  }
  else
  {
    uint64_t v30 = *v28;
    uint64_t *v29 = *v28;
    if ((v30 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *v29 &= 0xFFFFFFFFFFFFFFF8;
    }
    long long v31 = (char *)(v29 + 1);
  }
  *(void *)(a1 + 8) = v31;
  double v32 = (pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
  if (!v32) {
    double v32 = sub_2171C1B58(&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
  }
  float64x2_t v33 = (uint64_t *)((char *)v32 + 56);
  float64x2_t v34 = *(uint64_t **)(a1 + 8);
  if ((unint64_t)v34 >= *(void *)(a1 + 16))
  {
    unint64_t v36 = sub_216973984((char **)a1, v33);
  }
  else
  {
    uint64_t v35 = *v33;
    *float64x2_t v34 = *v33;
    if ((v35 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *v34 &= 0xFFFFFFFFFFFFFFF8;
    }
    unint64_t v36 = (char *)(v34 + 1);
  }
  *(void *)(a1 + 8) = v36;
  long long v37 = (pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
  if (!v37) {
    long long v37 = sub_2171C1B58(&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
  }
  long long v38 = (uint64_t *)((char *)v37 + 64);
  long long v39 = *(uint64_t **)(a1 + 8);
  if ((unint64_t)v39 >= *(void *)(a1 + 16))
  {
    float64x2_t v41 = sub_216973984((char **)a1, v38);
  }
  else
  {
    uint64_t v40 = *v38;
    uint64_t *v39 = *v38;
    if ((v40 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *v39 &= 0xFFFFFFFFFFFFFFF8;
    }
    float64x2_t v41 = (char *)(v39 + 1);
  }
  *(void *)(a1 + 8) = v41;
  float64x2_t v42 = (pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
  if (!v42) {
    float64x2_t v42 = sub_2171C1B58(&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
  }
  float64x2_t v43 = (uint64_t *)((char *)v42 + 72);
  float64x2_t v44 = *(uint64_t **)(a1 + 8);
  if ((unint64_t)v44 >= *(void *)(a1 + 16))
  {
    uint64_t result = sub_216973984((char **)a1, v43);
  }
  else
  {
    uint64_t v45 = *v43;
    *float64x2_t v44 = *v43;
    if ((v45 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v45 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *v44 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t result = (char *)(v44 + 1);
  }
  *(void *)(a1 + 8) = result;
  return result;
}

void sub_2171C7C90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

void sub_2171C7CA8(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
  if (!v6) {
    uint64_t v6 = sub_2171C1B58(&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
  }
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v6 + 1) & 0xFFFFFFFFFFFFFFF8))
  {
    if (*(unsigned char *)(a1 + 36))
    {
      int v18 = *(_DWORD *)(a1 + 24);
      if (v18)
      {
LABEL_35:
        long long v19 = operator new(0x10uLL);
        *(void *)long long v19 = &unk_26C77D140;
        v19[2] = v18;
        sub_2171C85C4(v44, (uint64_t)v19);
LABEL_53:
        long long v24 = *(_OWORD *)v44;
        goto LABEL_54;
      }
    }
    else
    {
      uint64_t v22 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 112))(*(void *)(a1 + 8), a1 + 16);
      int v18 = v22;
      *(void *)(a1 + 24) = v22;
      *(unsigned char *)(a1 + 32) = v23;
      *(unsigned char *)(a1 + 36) = 1;
      if (v22) {
        goto LABEL_35;
      }
    }
    long long v24 = 0uLL;
LABEL_54:
    *(_OWORD *)a3 = v24;
    return;
  }
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
  if (!v7) {
    uint64_t v7 = sub_2171C1B58(&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
  }
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v7 + 2) & 0xFFFFFFFFFFFFFFF8))
  {
    if (!*(unsigned char *)(a1 + 36))
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 112))(*(void *)(a1 + 8), a1 + 16);
      *(unsigned char *)(a1 + 32) = v20;
      *(unsigned char *)(a1 + 36) = 1;
    }
    pxrInternal__aapl__pxrReserved__::HdRetainedTypedSampledDataSource<BOOL>::New((unsigned char *)(a1 + 28), v44);
    goto LABEL_53;
  }
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
  if (!v8) {
    uint64_t v8 = sub_2171C1B58(&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
  }
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v8 + 3) & 0xFFFFFFFFFFFFFFF8))
  {
    if (!*(unsigned char *)(a1 + 36))
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 112))(*(void *)(a1 + 8), a1 + 16);
      *(unsigned char *)(a1 + 32) = v21;
      *(unsigned char *)(a1 + 36) = 1;
    }
    pxrInternal__aapl__pxrReserved__::HdRetainedTypedSampledDataSource<BOOL>::New((unsigned char *)(a1 + 29), v44);
    goto LABEL_53;
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
  if (!v9) {
    uint64_t v9 = sub_2171C1B58(&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
  }
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v9 + 4) & 0xFFFFFFFFFFFFFFF8))
  {
    if (!*(unsigned char *)(a1 + 36))
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 112))(*(void *)(a1 + 8), a1 + 16);
      *(unsigned char *)(a1 + 32) = v25;
      *(unsigned char *)(a1 + 36) = 1;
    }
    pxrInternal__aapl__pxrReserved__::HdRetainedTypedSampledDataSource<BOOL>::New((unsigned char *)(a1 + 30), v44);
    goto LABEL_53;
  }
  uint64_t v10 = (pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
  if (!v10) {
    uint64_t v10 = sub_2171C1B58(&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
  }
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v10 + 5) & 0xFFFFFFFFFFFFFFF8))
  {
    if (!*(unsigned char *)(a1 + 36))
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 112))(*(void *)(a1 + 8), a1 + 16);
      *(unsigned char *)(a1 + 32) = v26;
      *(unsigned char *)(a1 + 36) = 1;
    }
    pxrInternal__aapl__pxrReserved__::HdRetainedTypedSampledDataSource<BOOL>::New((unsigned char *)(a1 + 31), v44);
    goto LABEL_53;
  }
  uint64_t v11 = (pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
  if (!v11) {
    uint64_t v11 = sub_2171C1B58(&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
  }
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v11 + 6) & 0xFFFFFFFFFFFFFFF8))
  {
    if (!*(unsigned char *)(a1 + 36))
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 112))(*(void *)(a1 + 8), a1 + 16);
      *(unsigned char *)(a1 + 32) = v27;
      *(unsigned char *)(a1 + 36) = 1;
    }
    pxrInternal__aapl__pxrReserved__::HdRetainedTypedSampledDataSource<BOOL>::New((unsigned char *)(a1 + 32), v44);
    goto LABEL_53;
  }
  uint64_t v12 = (pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
  if (!v12) {
    uint64_t v12 = sub_2171C1B58(&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
  }
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != (*((void *)v12 + 7) & 0xFFFFFFFFFFFFFFF8))
  {
    long long v13 = (pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
    if (!v13) {
      long long v13 = sub_2171C1B58(&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
    }
    if ((*a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v13 + 8) & 0xFFFFFFFFFFFFFFF8))
    {
      (*(void (**)(unint64_t *__return_ptr))(**(void **)(a1 + 8) + 136))(&v41);
      uint64_t v28 = 0;
      while (!*(void *)pxrInternal__aapl__pxrReserved__::HdReprSelector::operator[]((uint64_t)&v41, v28))
      {
        if (++v28 == 3)
        {
          long long v29 = 0uLL;
          goto LABEL_68;
        }
      }
      sub_2169B28F8((uint64_t)v44, 3uLL);
      uint64_t v30 = 0;
      for (uint64_t i = 0; i != 3; ++i)
      {
        double v32 = (void *)pxrInternal__aapl__pxrReserved__::HdReprSelector::operator[]((uint64_t)&v41, i);
        sub_2169B3278((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v44, v33, v34);
        sub_2168D2318((void *)(v45 + v30), v32);
        v30 += 8;
      }
      sub_2171C84DC((uint64_t)v44, &v40);
      long long v39 = v40;
      sub_2169B2E0C(v44);
      long long v29 = v39;
LABEL_68:
      *(_OWORD *)a3 = v29;
      if ((v43 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v43 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((v42 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v42 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      goto LABEL_88;
    }
    long long v14 = (pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
    if (!v14) {
      long long v14 = sub_2171C1B58(&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
    }
    if ((*a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v14 + 9) & 0xFFFFFFFFFFFFFFF8))
    {
      int v15 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 96))(*(void *)(a1 + 8), a1 + 16);
      if (v15)
      {
        unint64_t v41 = 0;
        switch(v15)
        {
          case 1:
            long long v16 = (pxrInternal__aapl__pxrReserved__::HdCullStyleTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCullStyleTokens);
            if (!v16) {
              long long v16 = sub_2171C88EC(&pxrInternal__aapl__pxrReserved__::HdCullStyleTokens);
            }
            long long v17 = (pxrInternal__aapl__pxrReserved__::HdCullStyleTokens_StaticTokenType *)((char *)v16 + 8);
            break;
          case 2:
            long long v38 = (pxrInternal__aapl__pxrReserved__::HdCullStyleTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCullStyleTokens);
            if (!v38) {
              long long v38 = sub_2171C88EC(&pxrInternal__aapl__pxrReserved__::HdCullStyleTokens);
            }
            long long v17 = (pxrInternal__aapl__pxrReserved__::HdCullStyleTokens_StaticTokenType *)((char *)v38 + 16);
            break;
          case 3:
            unint64_t v36 = (pxrInternal__aapl__pxrReserved__::HdCullStyleTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCullStyleTokens);
            if (!v36) {
              unint64_t v36 = sub_2171C88EC(&pxrInternal__aapl__pxrReserved__::HdCullStyleTokens);
            }
            long long v17 = (pxrInternal__aapl__pxrReserved__::HdCullStyleTokens_StaticTokenType *)((char *)v36 + 24);
            break;
          case 4:
            long long v37 = (pxrInternal__aapl__pxrReserved__::HdCullStyleTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCullStyleTokens);
            if (!v37) {
              long long v37 = sub_2171C88EC(&pxrInternal__aapl__pxrReserved__::HdCullStyleTokens);
            }
            long long v17 = (pxrInternal__aapl__pxrReserved__::HdCullStyleTokens_StaticTokenType *)((char *)v37 + 32);
            break;
          case 5:
            uint64_t v35 = (pxrInternal__aapl__pxrReserved__::HdCullStyleTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCullStyleTokens);
            if (!v35) {
              uint64_t v35 = sub_2171C88EC(&pxrInternal__aapl__pxrReserved__::HdCullStyleTokens);
            }
            long long v17 = (pxrInternal__aapl__pxrReserved__::HdCullStyleTokens_StaticTokenType *)((char *)v35 + 40);
            break;
          default:
            long long v17 = (pxrInternal__aapl__pxrReserved__::HdCullStyleTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCullStyleTokens);
            if (!v17) {
              long long v17 = sub_2171C88EC(&pxrInternal__aapl__pxrReserved__::HdCullStyleTokens);
            }
            break;
        }
        sub_2168D2318(&v41, v17);
        sub_2171A3CE4((uint64_t *)&v41, v44);
        goto LABEL_87;
      }
    }
LABEL_60:
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    return;
  }
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 8) + 104))(v44);
  *(void *)&long long v40 = 0;
  sub_216BE6ED0((pxrInternal__aapl__pxrReserved__::VtValue *)v44, (atomic_uint **)&v40, (atomic_uint **)&v41);
  if ((v40 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_2168EE084((uint64_t)v44);
  if (!v41) {
    goto LABEL_60;
  }
  sub_2171A3CE4((uint64_t *)&v41, v44);
LABEL_87:
  *(_OWORD *)a3 = *(_OWORD *)v44;
LABEL_88:
  if ((v41 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_2171C8408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if ((a14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2171C84DC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v4 = &unk_26C77D220;
  long long v5 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v4 + 8) = *(_OWORD *)a1;
  *(_OWORD *)(v4 + 24) = v5;
  uint64_t v6 = *(void *)(a1 + 32);
  *((void *)v4 + 5) = v6;
  if (v6)
  {
    uint64_t v7 = (atomic_ullong *)(v6 - 16);
    if (*((void *)v4 + 4)) {
      uint64_t v7 = (atomic_ullong *)*((void *)v4 + 4);
    }
    atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
  }

  return sub_2171C87DC(a2, (uint64_t)v4);
}

void sub_2171C8570(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *a1)
{
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(a1);

  operator delete(v1);
}

uint64_t sub_2171C8598@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = &unk_26C750543;
  *(_DWORD *)a2 = *(_DWORD *)(result + 8);
  return result;
}

uint64_t sub_2171C85B4()
{
  return 0;
}

uint64_t sub_2171C85BC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

void *sub_2171C85C4(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  void *v4 = &unk_26C77D1A8;
  v4[1] = 0;
  _OWORD v4[2] = 0;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_2171C861C(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_2173254E8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_2171C8638(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171C8660(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2171C8690(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77D1F8)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_2171C86D4(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *a1)
{
  *(void *)a1 = &unk_26C77D220;
  sub_2169B2E0C((void *)a1 + 1);

  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(a1);
}

void sub_2171C872C(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *a1)
{
  *(void *)a1 = &unk_26C77D220;
  sub_2169B2E0C((void *)a1 + 1);
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(a1);

  operator delete(v2);
}

void *sub_2171C8788@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  a2[1] = off_26C755978;
  return sub_2168F8DBC(a2, a1 + 8);
}

uint64_t sub_2171C87A0()
{
  return 0;
}

uint64_t sub_2171C87A8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)(result + 24);
  *(_OWORD *)a2 = *(_OWORD *)(result + 8);
  *(_OWORD *)(a2 + 16) = v2;
  uint64_t v3 = *(void *)(result + 40);
  *(void *)(a2 + 32) = v3;
  if (v3)
  {
    uint64_t v4 = *(atomic_ullong **)(a2 + 24);
    long long v5 = (atomic_ullong *)(v3 - 16);
    if (!v4) {
      uint64_t v4 = v5;
    }
    atomic_fetch_add_explicit(v4, 1uLL, memory_order_relaxed);
  }
  return result;
}

void *sub_2171C87DC(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  void *v4 = &unk_26C77D288;
  v4[1] = 0;
  _OWORD v4[2] = 0;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_2171C8834(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_2173254E8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_2171C8850(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171C8878(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2171C88A8(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77D2D8)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

pxrInternal__aapl__pxrReserved__::HdCullStyleTokens_StaticTokenType *sub_2171C88EC(atomic_ullong *a1)
{
  uint64_t result = sub_2171C8934();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::HdCullStyleTokens_StaticTokenType::~HdCullStyleTokens_StaticTokenType(result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::HdCullStyleTokens_StaticTokenType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::HdCullStyleTokens_StaticTokenType *sub_2171C8934()
{
  v0 = (pxrInternal__aapl__pxrReserved__::HdCullStyleTokens_StaticTokenType *)operator new(0x48uLL);
  pxrInternal__aapl__pxrReserved__::HdCullStyleTokens_StaticTokenType::HdCullStyleTokens_StaticTokenType(v0);
  return v0;
}

void sub_2171C8964(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2171C897C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171C89A4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2171C89D4(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77D350)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_2171C8A18(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a3;
  uint64_t v8 = a2;
  sub_2171C8A78(a1);
  v6[0] = (_DWORD **)&v8;
  v6[1] = (_DWORD **)&v7;
  sub_2171C8B00(a1, (a3 - a2) >> 3, v6);
}

void sub_2171C8A78(void *a1)
{
  uint64_t v1 = a1[4];
  if (v1)
  {
    if (a1[3] || (unint64_t v3 = atomic_load((unint64_t *)(v1 - 16)), v3 != 1))
    {
      sub_2171C1464(a1);
    }
    else if (*a1)
    {
      uint64_t v4 = (_DWORD *)a1[4];
      uint64_t v5 = 8 * *a1;
      do
      {
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v4 + 1);
        sub_21697C414(v4);
        v4 += 2;
        v5 -= 8;
      }
      while (v5);
    }
    *a1 = 0;
  }
}

void sub_2171C8B00(unint64_t *a1, unint64_t a2, _DWORD ***a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    uint64_t v7 = (void *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 >= a2)
          {
            uint64_t v13 = 8 * v3;
            uint64_t v14 = 8 * a2;
            do
            {
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v7[(unint64_t)v14 / 8] + 1);
              sub_21697C414(&v7[(unint64_t)v14 / 8]);
              v14 += 8;
            }
            while (v13 != v14);
LABEL_23:
            if (v7 != (void *)a1[4])
            {
              sub_2171C1464(a1);
              a1[4] = (unint64_t)v7;
            }
            *a1 = a2;
            return;
          }
          uint64_t v9 = (_DWORD *)a1[4];
          if (*((void *)v9 - 1) < a2)
          {
            uint64_t v7 = sub_2171C8C98((uint64_t)a1, a2);
            sub_216FA0DA8(v9, &v9[2 * v3], v7);
          }
          goto LABEL_19;
        }
        uint64_t v7 = (void *)a1[4];
      }
      uint64_t v11 = v7;
      if (v3 >= a2) {
        unint64_t v12 = a2;
      }
      else {
        unint64_t v12 = *a1;
      }
      uint64_t v7 = sub_2171C8C98((uint64_t)a1, a2);
      sub_216FA0DA8(v11, &v11[2 * v12], v7);
      if (v3 >= a2) {
        goto LABEL_23;
      }
LABEL_19:
      uint64_t v10 = &v7[v3];
      goto LABEL_20;
    }
    if (8 * a2 / a2 == 8)
    {
      uint64_t v10 = sub_2171C8C98((uint64_t)a1, a2);
      uint64_t v7 = v10;
LABEL_20:
      sub_216FA0DA8(**a3, *a3[1], v10);
      goto LABEL_23;
    }
  }

  sub_2171C8A78(a1);
}

void *sub_2171C8C98(uint64_t a1, unint64_t a2)
{
  sub_216851EE4((uint64_t)&v7, "VtArray::_AllocateNew", "value_type *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfPath>::_AllocateNew(size_t) [ELEM = pxrInternal__aapl__pxrReserved__::SdfPath]");
  if (a2 > 0x1FFFFFFFFFFFFFFDLL) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 8 * a2 + 16;
  }
  uint64_t v4 = operator new(v3);
  void *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_2171C8D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_2171C8D38(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a3;
  uint64_t v8 = a2;
  sub_2171C8A78(a1);
  v6[0] = (_DWORD **)&v8;
  v6[1] = (_DWORD **)&v7;
  sub_2171C9220(a1, (a3 - a2) >> 3, v6);
}

void sub_2171C8D98(uint64_t a1)
{
  *(void *)a1 = &unk_26C77D378;
  sub_2171C1464((void *)(a1 + 24));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 12));
  sub_21697C414((_DWORD *)(a1 + 8));

  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase((pxrInternal__aapl__pxrReserved__::HdDataSourceBase *)a1);
}

void sub_2171C8E04(uint64_t a1)
{
  *(void *)a1 = &unk_26C77D378;
  sub_2171C1464((void *)(a1 + 24));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 12));
  sub_21697C414((_DWORD *)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase((pxrInternal__aapl__pxrReserved__::HdDataSourceBase *)a1);

  operator delete(v2);
}

char *sub_2171C8E74@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  long long v2 = (pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchemaTokens);
  if (!v2) {
    long long v2 = sub_2171C1520(&pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchemaTokens);
  }
  size_t v3 = (uint64_t *)((char *)v2 + 8);
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  if ((unint64_t)v4 >= *(void *)(a1 + 16))
  {
    uint64_t v6 = sub_216973984((char **)a1, v3);
  }
  else
  {
    uint64_t v5 = *v3;
    uint64_t *v4 = *v3;
    if ((v5 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *v4 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v6 = (char *)(v4 + 1);
  }
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchemaTokens);
  if (!v7) {
    uint64_t v7 = sub_2171C1520(&pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchemaTokens);
  }
  uint64_t v8 = (uint64_t *)((char *)v7 + 16);
  uint64_t v9 = *(uint64_t **)(a1 + 8);
  if ((unint64_t)v9 >= *(void *)(a1 + 16))
  {
    uint64_t result = sub_216973984((char **)a1, v8);
  }
  else
  {
    uint64_t v10 = *v8;
    uint64_t *v9 = *v8;
    if ((v10 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *v9 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t result = (char *)(v9 + 1);
  }
  *(void *)(a1 + 8) = result;
  return result;
}

void sub_2171C8F7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

void sub_2171C8F94(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchemaTokens);
  if (!v6) {
    uint64_t v6 = sub_2171C1520(&pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchemaTokens);
  }
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v6 + 1) & 0xFFFFFFFFFFFFFFF8))
  {
    sub_2171BB7B0(a1 + 24, &v20);
    *(_OWORD *)a3 = v20;
  }
  else
  {
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchemaTokens);
    if (!v7) {
      uint64_t v7 = sub_2171C1520(&pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchemaTokens);
    }
    if ((*a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v7 + 2) & 0xFFFFFFFFFFFFFFF8))
    {
      uint64_t v8 = operator new(0x40uLL);
      uint64_t v9 = v8;
      uint64_t v10 = *(void *)(a1 + 16);
      long long v11 = *(_OWORD *)(a1 + 40);
      long long v17 = *(_OWORD *)(a1 + 24);
      long long v18 = v11;
      uint64_t v12 = *(void *)(a1 + 56);
      uint64_t v19 = v12;
      if (v12)
      {
        uint64_t v13 = (atomic_ullong *)*((void *)&v18 + 1);
        if (!*((void *)&v18 + 1)) {
          uint64_t v13 = (atomic_ullong *)(v12 - 16);
        }
        atomic_fetch_add_explicit(v13, 1uLL, memory_order_relaxed);
      }
      *(void *)uint64_t v8 = &unk_26C77D3C0;
      sub_216981010(v8 + 2, (_DWORD *)(a1 + 8));
      sub_21698105C(v9 + 3, (_DWORD *)(a1 + 12));
      *((void *)v9 + 2) = v10;
      long long v14 = v18;
      *(_OWORD *)(v9 + 6) = v17;
      *(_OWORD *)(v9 + 10) = v14;
      *((void *)v9 + 7) = v12;
      if (v12)
      {
        int v15 = (atomic_ullong *)*((void *)v9 + 6);
        if (!v15) {
          int v15 = (atomic_ullong *)(v12 - 16);
        }
        atomic_fetch_add_explicit(v15, 1uLL, memory_order_relaxed);
        uint64_t v10 = *((void *)v9 + 2);
      }
      if (!v10)
      {
        *(void *)&long long v20 = "hd/dataSourceLegacyPrim.cpp";
        *((void *)&v20 + 1) = "Hd_InstanceIndicesDataSource";
        uint64_t v21 = 1634;
        uint64_t v22 = "pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Hd_InstancerTopologyDataSource::Hd_InstanceIndice"
              "sDataSource::Hd_InstanceIndicesDataSource(const SdfPath &, HdSceneDelegate *, const VtArray<SdfPath>)";
        char v23 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v20, "_sceneDelegate", 0);
      }
      long long v16 = operator new(0x20uLL);
      void *v16 = &unk_26C77D4D0;
      v16[1] = 0;
      v16[2] = 0;
      v16[3] = v9;
      sub_2171C1464(&v17);
      *(void *)a3 = v9;
      *(void *)(a3 + 8) = v16;
    }
    else
    {
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
    }
  }
}

void sub_2171C9198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2171C1464(v10);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v12);
  sub_21697C414(v11);
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(v9);
  sub_2171C1464(&a9);
  operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_2171C9220(unint64_t *a1, unint64_t a2, _DWORD ***a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    uint64_t v7 = (void *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 >= a2)
          {
            uint64_t v13 = 8 * v3;
            uint64_t v14 = 8 * a2;
            do
            {
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v7[(unint64_t)v14 / 8] + 1);
              sub_21697C414(&v7[(unint64_t)v14 / 8]);
              v14 += 8;
            }
            while (v13 != v14);
LABEL_23:
            if (v7 != (void *)a1[4])
            {
              sub_2171C1464(a1);
              a1[4] = (unint64_t)v7;
            }
            *a1 = a2;
            return;
          }
          uint64_t v9 = (_DWORD *)a1[4];
          if (*((void *)v9 - 1) < a2)
          {
            uint64_t v7 = sub_2171C8C98((uint64_t)a1, a2);
            sub_216FA0DA8(v9, &v9[2 * v3], v7);
          }
          goto LABEL_19;
        }
        uint64_t v7 = (void *)a1[4];
      }
      long long v11 = v7;
      if (v3 >= a2) {
        unint64_t v12 = a2;
      }
      else {
        unint64_t v12 = *a1;
      }
      uint64_t v7 = sub_2171C8C98((uint64_t)a1, a2);
      sub_216FA0DA8(v11, &v11[2 * v12], v7);
      if (v3 >= a2) {
        goto LABEL_23;
      }
LABEL_19:
      uint64_t v10 = &v7[v3];
      goto LABEL_20;
    }
    if (8 * a2 / a2 == 8)
    {
      uint64_t v10 = sub_2171C8C98((uint64_t)a1, a2);
      uint64_t v7 = v10;
LABEL_20:
      sub_216FA0DA8(**a3, *a3[1], v10);
      goto LABEL_23;
    }
  }

  sub_2171C8A78(a1);
}

void sub_2171C93B8(uint64_t a1)
{
  *(void *)a1 = &unk_26C77D3C0;
  sub_2171C1464((void *)(a1 + 24));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 12));
  sub_21697C414((_DWORD *)(a1 + 8));

  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase((pxrInternal__aapl__pxrReserved__::HdDataSourceBase *)a1);
}

void sub_2171C9424(uint64_t a1)
{
  *(void *)a1 = &unk_26C77D3C0;
  sub_2171C1464((void *)(a1 + 24));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 12));
  sub_21697C414((_DWORD *)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase((pxrInternal__aapl__pxrReserved__::HdDataSourceBase *)a1);

  operator delete(v2);
}

uint64_t sub_2171C9494(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

void sub_2171C949C(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  if (*(void *)(a1 + 24) <= a2)
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    (*(void (**)(void *__return_ptr, void, uint64_t, unint64_t))(**(void **)(a1 + 16) + 216))(v5, *(void *)(a1 + 16), a1 + 8, *(void *)(a1 + 56) + 8 * a2);
    sub_2171C9550((uint64_t)v5, &v4);
    *(_OWORD *)a3 = v4;
    sub_2168F83DC((uint64_t)v5);
  }
}

void sub_2171C9538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_2171C9550@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  long long v4 = (char *)operator new(0x30uLL);
  *(void *)long long v4 = &unk_26C77D408;
  long long v5 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v4 + 8) = *(_OWORD *)a1;
  *(_OWORD *)(v4 + 24) = v5;
  uint64_t v6 = *(void *)(a1 + 32);
  *((void *)v4 + 5) = v6;
  if (v6)
  {
    uint64_t v7 = (atomic_ullong *)(v6 - 16);
    if (*((void *)v4 + 4)) {
      uint64_t v7 = (atomic_ullong *)*((void *)v4 + 4);
    }
    atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
  }

  return sub_2171C96E8(a2, (uint64_t)v4);
}

void sub_2171C95E0(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *a1)
{
  *(void *)a1 = &unk_26C77D408;
  sub_2168F83DC((uint64_t)a1 + 8);

  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(a1);
}

void sub_2171C9638(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *a1)
{
  *(void *)a1 = &unk_26C77D408;
  sub_2168F83DC((uint64_t)a1 + 8);
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(a1);

  operator delete(v2);
}

void *sub_2171C9694@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  a2[1] = &off_26C74FA68;
  return sub_2168F8DBC(a2, a1 + 8);
}

uint64_t sub_2171C96AC()
{
  return 0;
}

uint64_t sub_2171C96B4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)(result + 24);
  *(_OWORD *)a2 = *(_OWORD *)(result + 8);
  *(_OWORD *)(a2 + 16) = v2;
  uint64_t v3 = *(void *)(result + 40);
  *(void *)(a2 + 32) = v3;
  if (v3)
  {
    long long v4 = *(atomic_ullong **)(a2 + 24);
    long long v5 = (atomic_ullong *)(v3 - 16);
    if (!v4) {
      long long v4 = v5;
    }
    atomic_fetch_add_explicit(v4, 1uLL, memory_order_relaxed);
  }
  return result;
}

void *sub_2171C96E8(void *a1, uint64_t a2)
{
  *a1 = a2;
  long long v4 = operator new(0x20uLL);
  void *v4 = &unk_26C77D458;
  v4[1] = 0;
  _OWORD v4[2] = 0;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_2171C9740(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_2173254E8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_2171C975C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171C9784(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2171C97B4(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77D4A8)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_2171C97FC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171C9824(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2171C9854(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77D520)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_2171C989C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171C98C4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2171C98F4(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77D598)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_2171C9938(void ***a1)
{
  uint64_t v1 = *a1;
  long long v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    long long v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 24;
        sub_2171C99D0((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_DWORD *sub_2171C99D0(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 20));
  uint64_t result = sub_21697C414((_DWORD *)(a2 + 16));
  uint64_t v4 = *(void *)(a2 + 8);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void sub_2171C9A38(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *a1)
{
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(a1);

  operator delete(v1);
}

void *sub_2171C9A60@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  a2[1] = (char *)&off_26C74E648 + 2;
  uint64_t result = operator new(0x20uLL);
  *(_OWORD *)uint64_t result = *(_OWORD *)(a1 + 8);
  *((void *)result + 2) = *(void *)(a1 + 24);
  atomic_store(0, (unsigned int *)result + 6);
  *a2 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 6, 1u, memory_order_relaxed);
  return result;
}

uint64_t sub_2171C9AC0()
{
  return 0;
}

double sub_2171C9AC8(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

void *sub_2171C9AD4(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  void *v4 = &unk_26C77D628;
  v4[1] = 0;
  _OWORD v4[2] = 0;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_2171C9B2C(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_2173254E8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_2171C9B48(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171C9B70(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2171C9BA0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77D678)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_2171C9BE4(uint64_t a1)
{
  *(void *)a1 = &unk_26C77D6A0;
  long long v2 = (_DWORD *)(a1 + 12);
  uint64_t v3 = (void **)(a1 + 32);
  sub_216787968(&v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v2);
  sub_21697C414((_DWORD *)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase((pxrInternal__aapl__pxrReserved__::HdDataSourceBase *)a1);
}

void sub_2171C9C58(uint64_t a1)
{
  *(void *)a1 = &unk_26C77D6A0;
  long long v2 = (_DWORD *)(a1 + 12);
  uint64_t v4 = (void **)(a1 + 32);
  sub_216787968(&v4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v2);
  sub_21697C414((_DWORD *)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase((pxrInternal__aapl__pxrReserved__::HdDataSourceBase *)a1);
  operator delete(v3);
}

uint64_t sub_2171C9CD0(uint64_t a1)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(a1 + 24));
  if ((v2 & 1) == 0) {
    sub_2171C9D88(a1);
  }
  return (uint64_t)(*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 4;
}

void sub_2171C9D10(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  unsigned __int8 v6 = atomic_load((unsigned __int8 *)(a1 + 24));
  if ((v6 & 1) == 0) {
    sub_2171C9D88(a1);
  }
  uint64_t v7 = *(void *)(a1 + 32);
  if (a2 >= (*(void *)(a1 + 40) - v7) >> 4)
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    long long v8 = *(_OWORD *)(v7 + 16 * a2);
    *(_OWORD *)a3 = v8;
    if (*((void *)&v8 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v8 + 1) + 8), 1uLL, memory_order_relaxed);
    }
  }
}

void sub_2171C9D88(uint64_t a1)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)(a1 + 24));
  if ((v1 & 1) == 0)
  {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 16) + 160))(&v20);
    if (v20 != v21)
    {
      uint64_t v3 = (void *)(a1 + 32);
      sub_2171A618C((uint64_t *)(a1 + 32), 0xCCCCCCCCCCCCCCCDLL * ((v21 - v20) >> 3));
      uint64_t v4 = v20;
      for (uint64_t i = v21; v4 != i; v4 += 40)
      {
        pxrInternal__aapl__pxrReserved__::HdCategoriesSchema::BuildRetained(*(pxrInternal__aapl__pxrReserved__::HdCategoriesSchema **)v4, 0, *(uint64_t **)(v4 + 32), 0, &v19);
        long long v6 = v19;
        long long v19 = 0uLL;
        long long v8 = *(_OWORD **)(a1 + 40);
        unint64_t v7 = *(void *)(a1 + 48);
        if ((unint64_t)v8 >= v7)
        {
          long long v18 = v6;
          uint64_t v9 = ((uint64_t)v8 - *v3) >> 4;
          unint64_t v10 = v9 + 1;
          if ((unint64_t)(v9 + 1) >> 60) {
            sub_21677CB10();
          }
          uint64_t v11 = v7 - *v3;
          if (v11 >> 3 > v10) {
            unint64_t v10 = v11 >> 3;
          }
          if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v12 = v10;
          }
          v22[4] = (void *)(a1 + 48);
          uint64_t v13 = (char *)sub_216787EE0(a1 + 48, v12);
          uint64_t v14 = &v13[16 * v9];
          v22[0] = v13;
          v22[1] = v14;
          v22[3] = &v13[16 * v15];
          *(_OWORD *)uint64_t v14 = v18;
          v22[2] = v14 + 16;
          sub_2171A640C((uint64_t *)(a1 + 32), v22);
          uint64_t v16 = *(void *)(a1 + 40);
          sub_216788028(v22);
          long long v17 = (std::__shared_weak_count *)*((void *)&v19 + 1);
          *(void *)(a1 + 40) = v16;
          if (v17) {
            sub_216784EC4(v17);
          }
        }
        else
        {
          *long long v8 = v6;
          *(void *)(a1 + 40) = v8 + 1;
        }
      }
    }
    atomic_store(1u, (unsigned __int8 *)(a1 + 24));
    v22[0] = &v20;
    sub_2171C9F98((void ***)v22);
  }
}

void sub_2171C9F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, char a13)
{
  a11 = (void **)&a13;
  sub_2171C9F98(&a11);
  _Unwind_Resume(a1);
}

void sub_2171C9F98(void ***a1)
{
  unsigned __int8 v2 = *a1;
  if (*v2)
  {
    sub_2171C9FEC((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_2171C9FEC(uint64_t a1, void *a2)
{
  for (uint64_t i = *(void **)(a1 + 8); i != a2; sub_2169B2E0C(i))
    i -= 5;
  *(void *)(a1 + 8) = a2;
}

void sub_2171CA040(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171CA068(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2171CA098(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77D738)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_2171CA0DC(uint64_t a1)
{
  *(void *)a1 = &unk_26C77D760;
  unsigned __int8 v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    sub_216784EC4(v2);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 12));
  sub_21697C414((_DWORD *)(a1 + 8));

  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase((pxrInternal__aapl__pxrReserved__::HdDataSourceBase *)a1);
}

void sub_2171CA14C(uint64_t a1)
{
  *(void *)a1 = &unk_26C77D760;
  unsigned __int8 v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    sub_216784EC4(v2);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 12));
  sub_21697C414((_DWORD *)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase((pxrInternal__aapl__pxrReserved__::HdDataSourceBase *)a1);

  operator delete(v3);
}

char *sub_2171CA1C0@<X0>(void *a1@<X8>)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  unsigned __int8 v2 = (pxrInternal__aapl__pxrReserved__::HdMeshSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdMeshSchemaTokens);
  if (!v2) {
    unsigned __int8 v2 = sub_2171C0FC0(&pxrInternal__aapl__pxrReserved__::HdMeshSchemaTokens);
  }
  uint64_t v3 = *((void *)v2 + 1);
  uint64_t v17 = v3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v17 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdMeshSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdMeshSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171C0FC0(&pxrInternal__aapl__pxrReserved__::HdMeshSchemaTokens);
  }
  uint64_t v5 = *((void *)v4 + 3);
  uint64_t v18 = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v18 &= 0xFFFFFFFFFFFFFFF8;
  }
  long long v6 = (pxrInternal__aapl__pxrReserved__::HdMeshSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdMeshSchemaTokens);
  if (!v6) {
    long long v6 = sub_2171C0FC0(&pxrInternal__aapl__pxrReserved__::HdMeshSchemaTokens);
  }
  uint64_t v7 = *((void *)v6 + 2);
  uint64_t v19 = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v19 &= 0xFFFFFFFFFFFFFFF8;
  }
  long long v8 = (pxrInternal__aapl__pxrReserved__::HdMeshSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdMeshSchemaTokens);
  if (!v8) {
    long long v8 = sub_2171C0FC0(&pxrInternal__aapl__pxrReserved__::HdMeshSchemaTokens);
  }
  uint64_t v9 = *((void *)v8 + 5);
  uint64_t v20 = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v20 &= 0xFFFFFFFFFFFFFFF8;
  }
  unint64_t v10 = (pxrInternal__aapl__pxrReserved__::HdMeshSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdMeshSchemaTokens);
  if (!v10) {
    unint64_t v10 = sub_2171C0FC0(&pxrInternal__aapl__pxrReserved__::HdMeshSchemaTokens);
  }
  uint64_t v11 = *((void *)v10 + 4);
  uint64_t v21 = v11;
  if ((v11 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v21 &= 0xFFFFFFFFFFFFFFF8;
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t result = (char *)operator new(0x28uLL);
  uint64_t v13 = 0;
  *a1 = result;
  a1[1] = result;
  a1[2] = result + 40;
  do
  {
    uint64_t v14 = *(uint64_t *)((char *)&v17 + v13);
    *(void *)&result[v13] = v14;
    if ((v14 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&result[v13] &= 0xFFFFFFFFFFFFFFF8;
    }
    v13 += 8;
  }
  while (v13 != 40);
  a1[1] = result + 40;
  for (uint64_t i = 32; i != -8; i -= 8)
  {
    uint64_t v16 = *(uint64_t *)((char *)&v17 + i);
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return result;
}

void sub_2171CA430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  while (1)
  {
    uint64_t v13 = *((void *)v11 - 1);
    v11 -= 8;
    uint64_t v12 = v13;
    if ((v13 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if (v11 == &a11) {
      _Unwind_Resume(exception_object);
    }
  }
}

void sub_2171CA49C(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v152 = *MEMORY[0x263EF8340];
  long long v6 = (pxrInternal__aapl__pxrReserved__::HdMeshSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdMeshSchemaTokens);
  if (!v6) {
    long long v6 = sub_2171C0FC0(&pxrInternal__aapl__pxrReserved__::HdMeshSchemaTokens);
  }
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v6 + 1) & 0xFFFFFFFFFFFFFFF8))
  {
    sub_2171CBD04(a1, v129);
    uint64_t v11 = (char *)operator new(0x18uLL);
    uint64_t v13 = (std::__shared_weak_count *)*((void *)&v129[0] + 1);
    unint64_t v12 = *(void *)&v129[0];
    *(void *)uint64_t v11 = &unk_26C77D7A8;
    *(_OWORD *)(v11 + 8) = __PAIR128__((unint64_t)v13, v12);
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v14 = operator new(0x20uLL);
    uint64_t v15 = &unk_26C77DC00;
LABEL_71:
    *uint64_t v14 = v15;
    v14[1] = 0;
    v14[2] = 0;
    v14[3] = v11;
    *a3 = v11;
    a3[1] = v14;
    if (v13) {
      sub_216784EC4(v13);
    }
    return;
  }
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::HdMeshSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdMeshSchemaTokens);
  if (!v7) {
    uint64_t v7 = sub_2171C0FC0(&pxrInternal__aapl__pxrReserved__::HdMeshSchemaTokens);
  }
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != (*((void *)v7 + 3) & 0xFFFFFFFFFFFFFFF8))
  {
    long long v8 = (pxrInternal__aapl__pxrReserved__::HdMeshSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdMeshSchemaTokens);
    if (!v8) {
      long long v8 = sub_2171C0FC0(&pxrInternal__aapl__pxrReserved__::HdMeshSchemaTokens);
    }
    if ((*a2 & 0xFFFFFFFFFFFFFFF8) != (*((void *)v8 + 2) & 0xFFFFFFFFFFFFFFF8))
    {
      uint64_t v9 = (pxrInternal__aapl__pxrReserved__::HdMeshSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdMeshSchemaTokens);
      if (!v9) {
        uint64_t v9 = sub_2171C0FC0(&pxrInternal__aapl__pxrReserved__::HdMeshSchemaTokens);
      }
      if ((*a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v9 + 5) & 0xFFFFFFFFFFFFFFF8))
      {
        LOBYTE(v121) = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 88))(*(void *)(a1 + 16), a1 + 8);
        pxrInternal__aapl__pxrReserved__::HdRetainedTypedSampledDataSource<BOOL>::New(&v121, (uint64_t *)v129);
        *(_OWORD *)a3 = v129[0];
      }
      else
      {
        unint64_t v10 = (pxrInternal__aapl__pxrReserved__::HdMeshSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdMeshSchemaTokens);
        if (!v10) {
          unint64_t v10 = sub_2171C0FC0(&pxrInternal__aapl__pxrReserved__::HdMeshSchemaTokens);
        }
        if ((*a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v10 + 4) & 0xFFFFFFFFFFFFFFF8))
        {
          int64x2_t v146 = 0uLL;
          v147[0] = 0;
          long long v144 = 0uLL;
          v145[0] = 0;
          sub_2171CBD04(a1, &v121);
          sub_2171CC7E8(v121, v129);
          uint64_t v29 = *(void *)&v129[0];
          if (*((void *)&v129[0] + 1)) {
            sub_216784EC4(*((std::__shared_weak_count **)&v129[0] + 1));
          }
          if (*((void *)&v121 + 1)) {
            sub_216784EC4(*((std::__shared_weak_count **)&v121 + 1));
          }
          uint64_t v30 = *(void *)(v29 + 384);
          for (uint64_t i = *(void *)(v29 + 392); v30 != i; v30 += 64)
          {
            if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B96FD8, memory_order_acquire) & 1) == 0
              && __cxa_guard_acquire(&qword_267B96FD8))
            {
              float64x2_t v63 = (pxrInternal__aapl__pxrReserved__::HdMaterialBindingsSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdMaterialBindingsSchemaTokens);
              if (!v63) {
                float64x2_t v63 = sub_2171C104C(&pxrInternal__aapl__pxrReserved__::HdMaterialBindingsSchemaTokens);
              }
              uint64_t v64 = *((void *)v63 + 1);
              qword_267B96FD0 = v64;
              if ((v64 & 7) != 0
                && (atomic_fetch_add_explicit((atomic_uint *volatile)(v64 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
              {
                qword_267B96FD0 &= 0xFFFFFFFFFFFFFFF8;
              }
              __cxa_atexit((void (*)(void *))sub_2171DB790, 0, &dword_216758000);
              __cxa_guard_release(&qword_267B96FD8);
            }
            long long v121 = 0uLL;
            sub_2171B89C4((_DWORD *)(v30 + 12), &v143);
            v148[0] = v143;
            long long v143 = 0uLL;
            double v32 = (pxrInternal__aapl__pxrReserved__::HdMaterialBindingSchema::Builder *)pxrInternal__aapl__pxrReserved__::HdMaterialBindingSchema::Builder::SetPath(&v121, (uint64_t *)v148);
            pxrInternal__aapl__pxrReserved__::HdMaterialBindingSchema::Builder::Build((uint64_t *)v129, v32);
            long long v149 = v129[0];
            v129[0] = 0uLL;
            if (*((void *)&v148[0] + 1)) {
              sub_216784EC4(*((std::__shared_weak_count **)&v148[0] + 1));
            }
            if (*((void *)&v143 + 1)) {
              sub_216784EC4(*((std::__shared_weak_count **)&v143 + 1));
            }
            if (*((void *)&v121 + 1)) {
              sub_216784EC4(*((std::__shared_weak_count **)&v121 + 1));
            }
            Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(v30 + 4));
            pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&v121, Text);
            uint64_t v34 = v146.i64[1];
            if (v146.i64[1] >= v147[0])
            {
              uint64_t v37 = (v146.i64[1] - v146.i64[0]) >> 3;
              if ((unint64_t)(v37 + 1) >> 61) {
                sub_21677CB10();
              }
              unint64_t v38 = (v147[0] - v146.i64[0]) >> 2;
              if (v38 <= v37 + 1) {
                unint64_t v38 = v37 + 1;
              }
              if (v147[0] - v146.i64[0] >= 0x7FFFFFFFFFFFFFF8uLL) {
                unint64_t v39 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v39 = v38;
              }
              long long v130 = v147;
              if (v39) {
                long long v40 = (char *)sub_21677CB28((uint64_t)v147, v39);
              }
              else {
                long long v40 = 0;
              }
              unint64_t v41 = &v40[8 * v37];
              uint64_t v42 = &v40[8 * v39];
              *((void *)&v129[1] + 1) = v42;
              *(void *)unint64_t v41 = v121;
              unint64_t v36 = v41 + 8;
              *(void *)&long long v121 = 0;
              *(void *)&v129[1] = v41 + 8;
              uint64_t v43 = (void *)v146.i64[1];
              float64x2_t v44 = (void *)v146.i64[0];
              if (v146.i64[1] == v146.i64[0])
              {
                int64x2_t v46 = vdupq_n_s64(v146.u64[1]);
              }
              else
              {
                do
                {
                  uint64_t v45 = *--v43;
                  *((void *)v41 - 1) = v45;
                  v41 -= 8;
                  void *v43 = 0;
                }
                while (v43 != v44);
                int64x2_t v46 = v146;
                uint64_t v42 = (char *)*((void *)&v129[1] + 1);
                unint64_t v36 = *(void **)&v129[1];
              }
              v146.i64[0] = (uint64_t)v41;
              v146.i64[1] = (uint64_t)v36;
              *(int64x2_t *)((char *)v129 + 8) = v46;
              uint64_t v47 = v147[0];
              v147[0] = v42;
              *((void *)&v129[1] + 1) = v47;
              *(void *)&v129[0] = v46.i64[0];
              sub_2168BE9D8((uint64_t)v129);
              uint64_t v35 = v121;
            }
            else
            {
              uint64_t v35 = 0;
              *(void *)v146.i64[1] = v121;
              unint64_t v36 = (void *)(v34 + 8);
              *(void *)&long long v121 = 0;
            }
            v146.i64[1] = (uint64_t)v36;
            if ((v35 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            long long v121 = 0u;
            long long v122 = 0u;
            long long v48 = (pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchemaTokens);
            if (!v48) {
              long long v48 = sub_2171CD7C0(&pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchemaTokens);
            }
            pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchema::BuildTypeDataSource((pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchemaTokens_StaticTokenType *)((char *)v48 + 16), (uint64_t)&v142);
            long long v49 = pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchema::Builder::SetType(&v121, (uint64_t *)&v142);
            sub_2171C9550(v30 + 24, &v140);
            long long v141 = v140;
            long long v140 = 0uLL;
            long long v50 = (pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchema::Builder *)pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchema::Builder::SetIndices((uint64_t)v49, (uint64_t *)&v141);
            pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchema::Builder::Build(v50, &v143);
            SchemaToken = (uint64_t *)pxrInternal__aapl__pxrReserved__::HdMaterialBindingsSchema::GetSchemaToken(v51);
            pxrInternal__aapl__pxrReserved__::HdMaterialBindingsSchema::BuildRetained(1uLL, &qword_267B96FD0, (uint64_t *)&v149, &v137);
            long long v138 = v137;
            long long v137 = 0uLL;
            pxrInternal__aapl__pxrReserved__::HdRetainedContainerDataSource::New(SchemaToken, (uint64_t *)&v138, &v139);
            sub_2171CD6AC((uint64_t)&v143, &v139, v148);
            long long v53 = v148[0];
            v148[0] = 0uLL;
            uint64_t v54 = *((void *)&v144 + 1);
            if (*((void *)&v144 + 1) >= v145[0])
            {
              long long v111 = v53;
              uint64_t v55 = (uint64_t)(*((void *)&v144 + 1) - v144) >> 4;
              unint64_t v56 = v55 + 1;
              if ((unint64_t)(v55 + 1) >> 60) {
                sub_21677CB10();
              }
              uint64_t v57 = v145[0] - v144;
              if ((uint64_t)(v145[0] - v144) >> 3 > v56) {
                unint64_t v56 = v57 >> 3;
              }
              if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v58 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v58 = v56;
              }
              long long v130 = v145;
              float64x2_t v59 = (char *)sub_216787EE0((uint64_t)v145, v58);
              float64x2_t v60 = &v59[16 * v55];
              *(void *)&v129[0] = v59;
              *((void *)&v129[0] + 1) = v60;
              *((void *)&v129[1] + 1) = &v59[16 * v61];
              *(_OWORD *)float64x2_t v60 = v111;
              *(void *)&v129[1] = v60 + 16;
              sub_2171A640C((uint64_t *)&v144, v129);
              uint64_t v62 = *((void *)&v144 + 1);
              sub_216788028((void **)v129);
              *((void *)&v144 + 1) = v62;
              if (*((void *)&v148[0] + 1)) {
                sub_216784EC4(*((std::__shared_weak_count **)&v148[0] + 1));
              }
            }
            else
            {
              **((_OWORD **)&v144 + 1) = v53;
              *((void *)&v144 + 1) = v54 + 16;
            }
            if (*((void *)&v139 + 1)) {
              sub_216784EC4(*((std::__shared_weak_count **)&v139 + 1));
            }
            if (*((void *)&v138 + 1)) {
              sub_216784EC4(*((std::__shared_weak_count **)&v138 + 1));
            }
            if (*((void *)&v137 + 1)) {
              sub_216784EC4(*((std::__shared_weak_count **)&v137 + 1));
            }
            if (*((void *)&v143 + 1)) {
              sub_216784EC4(*((std::__shared_weak_count **)&v143 + 1));
            }
            if (*((void *)&v141 + 1)) {
              sub_216784EC4(*((std::__shared_weak_count **)&v141 + 1));
            }
            if (*((void *)&v140 + 1)) {
              sub_216784EC4(*((std::__shared_weak_count **)&v140 + 1));
            }
            if (*((void *)&v142 + 1)) {
              sub_216784EC4(*((std::__shared_weak_count **)&v142 + 1));
            }
            if (*((void *)&v122 + 1)) {
              sub_216784EC4(*((std::__shared_weak_count **)&v122 + 1));
            }
            if (*((void *)&v121 + 1)) {
              sub_216784EC4(*((std::__shared_weak_count **)&v121 + 1));
            }
            if (*((void *)&v149 + 1)) {
              sub_216784EC4(*((std::__shared_weak_count **)&v149 + 1));
            }
          }
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B96FE8, memory_order_acquire) & 1) == 0
            && __cxa_guard_acquire(&qword_267B96FE8))
          {
            pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B96FE0, "__invisibleFaces");
            __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B96FE0, &dword_216758000);
            __cxa_guard_release(&qword_267B96FE8);
          }
          if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B96FF8, memory_order_acquire) & 1) == 0
            && __cxa_guard_acquire(&qword_267B96FF8))
          {
            pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B96FF0, "__invisiblePoints");
            __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B96FF0, &dword_216758000);
            __cxa_guard_release(&qword_267B96FF8);
          }
          sub_2171CBD04(a1, &v149);
          sub_2171CC7E8(v149, v129);
          long long v65 = *(_OWORD *)(*(void *)&v129[0] + 464);
          long long v121 = *(_OWORD *)(*(void *)&v129[0] + 448);
          long long v122 = v65;
          uint64_t v66 = *(void *)(*(void *)&v129[0] + 480);
          *(void *)&long long v123 = v66;
          if (v66)
          {
            long long v67 = (atomic_ullong *)(v66 - 16);
            if (*((void *)&v122 + 1)) {
              long long v67 = (atomic_ullong *)*((void *)&v122 + 1);
            }
            atomic_fetch_add_explicit(v67, 1uLL, memory_order_relaxed);
          }
          if (*((void *)&v129[0] + 1)) {
            sub_216784EC4(*((std::__shared_weak_count **)&v129[0] + 1));
          }
          if (*((void *)&v149 + 1)) {
            sub_216784EC4(*((std::__shared_weak_count **)&v149 + 1));
          }
          if ((void)v121)
          {
            memset(v129, 0, sizeof(v129));
            long long v68 = (pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchemaTokens);
            if (!v68) {
              long long v68 = sub_2171CD7C0(&pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchemaTokens);
            }
            pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchema::BuildTypeDataSource((pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchemaTokens_StaticTokenType *)((char *)v68 + 16), (uint64_t)v148);
            long long v69 = pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchema::Builder::SetType(v129, (uint64_t *)v148);
            sub_2171C9550((uint64_t)&v121, &v142);
            long long v143 = v142;
            long long v142 = 0uLL;
            long long v70 = (pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchema::Builder *)pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchema::Builder::SetIndices((uint64_t)v69, (uint64_t *)&v143);
            pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchema::Builder::Build(v70, &v149);
            long long v71 = (uint64_t *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdVisibilitySchemaTokens);
            if (!v71) {
              long long v71 = (uint64_t *)sub_2171C134C(&pxrInternal__aapl__pxrReserved__::HdVisibilitySchemaTokens);
            }
            long long v138 = 0uLL;
            LOBYTE(v135) = 0;
            pxrInternal__aapl__pxrReserved__::HdRetainedTypedSampledDataSource<BOOL>::New(&v135, (uint64_t *)&v136);
            long long v137 = v136;
            long long v136 = 0uLL;
            long long v72 = (pxrInternal__aapl__pxrReserved__::HdVisibilitySchema::Builder *)pxrInternal__aapl__pxrReserved__::HdVisibilitySchema::Builder::SetVisibility(&v138, (uint64_t *)&v137);
            pxrInternal__aapl__pxrReserved__::HdVisibilitySchema::Builder::Build((uint64_t *)&v139, v72);
            long long v140 = v139;
            long long v139 = 0uLL;
            pxrInternal__aapl__pxrReserved__::HdRetainedContainerDataSource::New(v71, (uint64_t *)&v140, &v141);
            long long v150 = v141;
            long long v141 = 0uLL;
            if (*((void *)&v140 + 1)) {
              sub_216784EC4(*((std::__shared_weak_count **)&v140 + 1));
            }
            if (*((void *)&v139 + 1)) {
              sub_216784EC4(*((std::__shared_weak_count **)&v139 + 1));
            }
            if (*((void *)&v137 + 1)) {
              sub_216784EC4(*((std::__shared_weak_count **)&v137 + 1));
            }
            if (*((void *)&v136 + 1)) {
              sub_216784EC4(*((std::__shared_weak_count **)&v136 + 1));
            }
            if (*((void *)&v138 + 1)) {
              sub_216784EC4(*((std::__shared_weak_count **)&v138 + 1));
            }
            if (*((void *)&v143 + 1)) {
              sub_216784EC4(*((std::__shared_weak_count **)&v143 + 1));
            }
            if (*((void *)&v142 + 1)) {
              sub_216784EC4(*((std::__shared_weak_count **)&v142 + 1));
            }
            if (*((void *)&v148[0] + 1)) {
              sub_216784EC4(*((std::__shared_weak_count **)&v148[0] + 1));
            }
            if (*((void *)&v129[1] + 1)) {
              sub_216784EC4(*((std::__shared_weak_count **)&v129[1] + 1));
            }
            if (*((void *)&v129[0] + 1)) {
              sub_216784EC4(*((std::__shared_weak_count **)&v129[0] + 1));
            }
            uint64_t v73 = (void *)v146.i64[1];
            if (v146.i64[1] >= v147[0])
            {
              uint64_t v75 = sub_216973984((char **)&v146, &qword_267B96FE0);
            }
            else
            {
              uint64_t v74 = qword_267B96FE0;
              *(void *)v146.i64[1] = qword_267B96FE0;
              if ((v74 & 7) != 0
                && (atomic_fetch_add_explicit((atomic_uint *volatile)(v74 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
              {
                *v73 &= 0xFFFFFFFFFFFFFFF8;
              }
              uint64_t v75 = (char *)(v73 + 1);
            }
            v146.i64[1] = (uint64_t)v75;
            *(void *)&long long v143 = 2;
            sub_2171CD74C(&v143, (uint64_t)&v149, v148);
            long long v76 = v148[0];
            v148[0] = 0uLL;
            uint64_t v77 = *((void *)&v144 + 1);
            if (*((void *)&v144 + 1) >= v145[0])
            {
              long long v112 = v76;
              uint64_t v78 = (uint64_t)(*((void *)&v144 + 1) - v144) >> 4;
              unint64_t v79 = v78 + 1;
              if ((unint64_t)(v78 + 1) >> 60) {
                sub_21677CB10();
              }
              uint64_t v80 = v145[0] - v144;
              if ((uint64_t)(v145[0] - v144) >> 3 > v79) {
                unint64_t v79 = v80 >> 3;
              }
              if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v81 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v81 = v79;
              }
              long long v130 = v145;
              uint64_t v82 = (char *)sub_216787EE0((uint64_t)v145, v81);
              uint64_t v83 = &v82[16 * v78];
              *(void *)&v129[0] = v82;
              *((void *)&v129[0] + 1) = v83;
              *((void *)&v129[1] + 1) = &v82[16 * v84];
              *(_OWORD *)uint64_t v83 = v112;
              *(void *)&v129[1] = v83 + 16;
              sub_2171A640C((uint64_t *)&v144, v129);
              uint64_t v85 = *((void *)&v144 + 1);
              sub_216788028((void **)v129);
              *((void *)&v144 + 1) = v85;
              if (*((void *)&v148[0] + 1)) {
                sub_216784EC4(*((std::__shared_weak_count **)&v148[0] + 1));
              }
            }
            else
            {
              **((_OWORD **)&v144 + 1) = v76;
              *((void *)&v144 + 1) = v77 + 16;
            }
            for (uint64_t j = 24; j != -8; j -= 16)
            {
              v87 = *(std::__shared_weak_count **)((char *)&v149 + j);
              if (v87) {
                sub_216784EC4(v87);
              }
            }
          }
          sub_2171CBD04(a1, v148);
          sub_2171CC7E8(*(uint64_t *)&v148[0], v129);
          long long v88 = *(_OWORD *)(*(void *)&v129[0] + 424);
          long long v149 = *(_OWORD *)(*(void *)&v129[0] + 408);
          long long v150 = v88;
          uint64_t v89 = *(void *)(*(void *)&v129[0] + 440);
          uint64_t v151 = v89;
          if (v89)
          {
            v90 = (atomic_ullong *)(v89 - 16);
            if (*((void *)&v150 + 1)) {
              v90 = (atomic_ullong *)*((void *)&v150 + 1);
            }
            atomic_fetch_add_explicit(v90, 1uLL, memory_order_relaxed);
          }
          if (*((void *)&v129[0] + 1)) {
            sub_216784EC4(*((std::__shared_weak_count **)&v129[0] + 1));
          }
          if (*((void *)&v148[0] + 1)) {
            sub_216784EC4(*((std::__shared_weak_count **)&v148[0] + 1));
          }
          if ((void)v149)
          {
            memset(v129, 0, sizeof(v129));
            long long v91 = (pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchemaTokens);
            if (!v91) {
              long long v91 = sub_2171CD7C0(&pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchemaTokens);
            }
            pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchema::BuildTypeDataSource((pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchemaTokens_StaticTokenType *)((char *)v91 + 24), (uint64_t)&v143);
            unint64_t v92 = pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchema::Builder::SetType(v129, (uint64_t *)&v143);
            sub_2171C9550((uint64_t)&v149, &v141);
            long long v142 = v141;
            long long v141 = 0uLL;
            uint64_t v93 = (pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchema::Builder *)pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchema::Builder::SetIndices((uint64_t)v92, (uint64_t *)&v142);
            pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchema::Builder::Build(v93, v148);
            unint64_t v94 = (uint64_t *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdVisibilitySchemaTokens);
            if (!v94) {
              unint64_t v94 = (uint64_t *)sub_2171C134C(&pxrInternal__aapl__pxrReserved__::HdVisibilitySchemaTokens);
            }
            long long v137 = 0uLL;
            LOBYTE(v117) = 0;
            pxrInternal__aapl__pxrReserved__::HdRetainedTypedSampledDataSource<BOOL>::New(&v117, (uint64_t *)&v135);
            long long v136 = v135;
            long long v135 = 0uLL;
            uint64_t v95 = (pxrInternal__aapl__pxrReserved__::HdVisibilitySchema::Builder *)pxrInternal__aapl__pxrReserved__::HdVisibilitySchema::Builder::SetVisibility(&v137, (uint64_t *)&v136);
            pxrInternal__aapl__pxrReserved__::HdVisibilitySchema::Builder::Build((uint64_t *)&v138, v95);
            long long v139 = v138;
            long long v138 = 0uLL;
            pxrInternal__aapl__pxrReserved__::HdRetainedContainerDataSource::New(v94, (uint64_t *)&v139, &v140);
            v148[1] = v140;
            long long v140 = 0uLL;
            if (*((void *)&v139 + 1)) {
              sub_216784EC4(*((std::__shared_weak_count **)&v139 + 1));
            }
            if (*((void *)&v138 + 1)) {
              sub_216784EC4(*((std::__shared_weak_count **)&v138 + 1));
            }
            if (*((void *)&v136 + 1)) {
              sub_216784EC4(*((std::__shared_weak_count **)&v136 + 1));
            }
            if (*((void *)&v135 + 1)) {
              sub_216784EC4(*((std::__shared_weak_count **)&v135 + 1));
            }
            if (*((void *)&v137 + 1)) {
              sub_216784EC4(*((std::__shared_weak_count **)&v137 + 1));
            }
            if (*((void *)&v142 + 1)) {
              sub_216784EC4(*((std::__shared_weak_count **)&v142 + 1));
            }
            if (*((void *)&v141 + 1)) {
              sub_216784EC4(*((std::__shared_weak_count **)&v141 + 1));
            }
            if (*((void *)&v143 + 1)) {
              sub_216784EC4(*((std::__shared_weak_count **)&v143 + 1));
            }
            if (*((void *)&v129[1] + 1)) {
              sub_216784EC4(*((std::__shared_weak_count **)&v129[1] + 1));
            }
            if (*((void *)&v129[0] + 1)) {
              sub_216784EC4(*((std::__shared_weak_count **)&v129[0] + 1));
            }
            unint64_t v96 = (void *)v146.i64[1];
            if (v146.i64[1] >= v147[0])
            {
              uint64_t v98 = sub_216973984((char **)&v146, &qword_267B96FF0);
            }
            else
            {
              uint64_t v97 = qword_267B96FF0;
              *(void *)v146.i64[1] = qword_267B96FF0;
              if ((v97 & 7) != 0
                && (atomic_fetch_add_explicit((atomic_uint *volatile)(v97 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
              {
                *v96 &= 0xFFFFFFFFFFFFFFF8;
              }
              uint64_t v98 = (char *)(v96 + 1);
            }
            v146.i64[1] = (uint64_t)v98;
            *(void *)&long long v142 = 2;
            sub_2171CD74C(&v142, (uint64_t)v148, &v143);
            long long v99 = v143;
            long long v143 = 0uLL;
            uint64_t v100 = *((void *)&v144 + 1);
            if (*((void *)&v144 + 1) >= v145[0])
            {
              long long v113 = v99;
              uint64_t v101 = (uint64_t)(*((void *)&v144 + 1) - v144) >> 4;
              unint64_t v102 = v101 + 1;
              if ((unint64_t)(v101 + 1) >> 60) {
                sub_21677CB10();
              }
              uint64_t v103 = v145[0] - v144;
              if ((uint64_t)(v145[0] - v144) >> 3 > v102) {
                unint64_t v102 = v103 >> 3;
              }
              if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v104 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v104 = v102;
              }
              long long v130 = v145;
              v105 = (char *)sub_216787EE0((uint64_t)v145, v104);
              uint64_t v106 = &v105[16 * v101];
              *(void *)&v129[0] = v105;
              *((void *)&v129[0] + 1) = v106;
              *((void *)&v129[1] + 1) = &v105[16 * v107];
              *(_OWORD *)uint64_t v106 = v113;
              *(void *)&v129[1] = v106 + 16;
              sub_2171A640C((uint64_t *)&v144, v129);
              uint64_t v108 = *((void *)&v144 + 1);
              sub_216788028((void **)v129);
              *((void *)&v144 + 1) = v108;
              if (*((void *)&v143 + 1)) {
                sub_216784EC4(*((std::__shared_weak_count **)&v143 + 1));
              }
            }
            else
            {
              **((_OWORD **)&v144 + 1) = v99;
              *((void *)&v144 + 1) = v100 + 16;
            }
            for (uint64_t k = 24; k != -8; k -= 16)
            {
              uint64_t v110 = *(std::__shared_weak_count **)((char *)v148 + k);
              if (v110) {
                sub_216784EC4(v110);
              }
            }
          }
          if (v146.i64[0] == v146.i64[1])
          {
            *a3 = 0;
            a3[1] = 0;
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::HdRetainedContainerDataSource::New((v146.i64[1] - v146.i64[0]) >> 3, (uint64_t *)v146.i64[0], (uint64_t *)v144, v129);
            *(_OWORD *)a3 = v129[0];
          }
          sub_2168F83DC((uint64_t)&v149);
          sub_2168F83DC((uint64_t)&v121);
          *(void *)&v129[0] = &v144;
          sub_216787968((void ***)v129);
          *(void *)&v129[0] = &v146;
          sub_216889A04((void ***)v129);
        }
        else
        {
          *a3 = 0;
          a3[1] = 0;
        }
      }
      return;
    }
    sub_2171CBD04(a1, v129);
    char v27 = (char *)operator new(0x18uLL);
    uint64_t v11 = v27;
    uint64_t v13 = (std::__shared_weak_count *)*((void *)&v129[0] + 1);
    unint64_t v28 = *(void *)&v129[0];
    *(void *)char v27 = &unk_26C77DB50;
    *(_OWORD *)(v27 + 8) = __PAIR128__((unint64_t)v13, v28);
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(void *)char v27 = &unk_26C77DDA8;
    uint64_t v14 = operator new(0x20uLL);
    uint64_t v15 = &unk_26C77DDF8;
    goto LABEL_71;
  }
  (*(void (**)(_OWORD *__return_ptr))(**(void **)(a1 + 16) + 56))(v129);
  long long v127 = 0u;
  long long v128 = 0u;
  long long v125 = 0u;
  long long v126 = 0u;
  long long v123 = 0u;
  long long v124 = 0u;
  long long v121 = 0u;
  long long v122 = 0u;
  unint64_t v120 = *((void *)&v129[0] + 1);
  if ((BYTE8(v129[0]) & 7) != 0)
  {
    unint64_t v16 = *((void *)&v129[0] + 1) & 0xFFFFFFFFFFFFFFF8;
    if ((atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v129[0] + 1) & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)unint64_t v120 = v16; {
  }
    }
  sub_2171A3CE4((uint64_t *)&v120, &v146);
  v148[0] = v146;
  int64x2_t v146 = 0uLL;
  uint64_t v17 = pxrInternal__aapl__pxrReserved__::HdSubdivisionTagsSchema::Builder::SetFaceVaryingLinearInterpolation(&v121, (uint64_t *)v148);
  unint64_t v119 = *(void *)&v129[0];
  if ((v129[0] & 7) != 0)
  {
    unint64_t v18 = *(void *)&v129[0] & 0xFFFFFFFFFFFFFFF8;
    if ((atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&v129[0] & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)unint64_t v119 = v18; {
  }
    }
  sub_2171A3CE4((uint64_t *)&v119, &v143);
  long long v144 = v143;
  long long v143 = 0uLL;
  uint64_t v19 = pxrInternal__aapl__pxrReserved__::HdSubdivisionTagsSchema::Builder::SetInterpolateBoundary((uint64_t)v17, (uint64_t *)&v144);
  unint64_t v118 = *((void *)&v129[1] + 1);
  if ((BYTE8(v129[1]) & 7) != 0)
  {
    unint64_t v20 = *((void *)&v129[1] + 1) & 0xFFFFFFFFFFFFFFF8;
    if ((atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v129[1] + 1) & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)unint64_t v118 = v20; {
  }
    }
  sub_2171A3CE4((uint64_t *)&v118, &v141);
  long long v142 = v141;
  long long v141 = 0uLL;
  uint64_t v21 = pxrInternal__aapl__pxrReserved__::HdSubdivisionTagsSchema::Builder::SetTriangleSubdivisionRule(v19, (uint64_t *)&v142);
  sub_2171C9550((uint64_t)&v133, &v139);
  long long v140 = v139;
  long long v139 = 0uLL;
  uint64_t v22 = pxrInternal__aapl__pxrReserved__::HdSubdivisionTagsSchema::Builder::SetCornerIndices(v21, (uint64_t *)&v140);
  sub_2171CBE68((uint64_t)&v134, &v137);
  long long v138 = v137;
  long long v137 = 0uLL;
  uint64_t v23 = pxrInternal__aapl__pxrReserved__::HdSubdivisionTagsSchema::Builder::SetCornerSharpnesses(v22, (uint64_t *)&v138);
  sub_2171C9550((uint64_t)&v130, &v135);
  long long v136 = v135;
  long long v135 = 0uLL;
  uint64_t v24 = pxrInternal__aapl__pxrReserved__::HdSubdivisionTagsSchema::Builder::SetCreaseIndices(v23, (uint64_t *)&v136);
  sub_2171C9550((uint64_t)&v131, &v116);
  long long v117 = v116;
  long long v116 = 0uLL;
  uint64_t v25 = pxrInternal__aapl__pxrReserved__::HdSubdivisionTagsSchema::Builder::SetCreaseLengths(v24, (uint64_t *)&v117);
  sub_2171CBE68((uint64_t)&v132, &v114);
  long long v115 = v114;
  long long v114 = 0uLL;
  char v26 = (pxrInternal__aapl__pxrReserved__::HdSubdivisionTagsSchema::Builder *)pxrInternal__aapl__pxrReserved__::HdSubdivisionTagsSchema::Builder::SetCreaseSharpnesses(v25, (uint64_t *)&v115);
  pxrInternal__aapl__pxrReserved__::HdSubdivisionTagsSchema::Builder::Build(v26, &v149);
  *(_OWORD *)a3 = v149;
  long long v149 = 0uLL;
  if (*((void *)&v115 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v115 + 1));
  }
  if (*((void *)&v114 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v114 + 1));
  }
  if (*((void *)&v117 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v117 + 1));
  }
  if (*((void *)&v116 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v116 + 1));
  }
  if (*((void *)&v136 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v136 + 1));
  }
  if (*((void *)&v135 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v135 + 1));
  }
  if (*((void *)&v138 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v138 + 1));
  }
  if (*((void *)&v137 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v137 + 1));
  }
  if (*((void *)&v140 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v140 + 1));
  }
  if (*((void *)&v139 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v139 + 1));
  }
  if (*((void *)&v142 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v142 + 1));
  }
  if (*((void *)&v141 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v141 + 1));
  }
  if ((v118 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v118 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (*((void *)&v144 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v144 + 1));
  }
  if (*((void *)&v143 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v143 + 1));
  }
  if ((v119 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v119 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (*((void *)&v148[0] + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v148[0] + 1));
  }
  if (v146.i64[1]) {
    sub_216784EC4((std::__shared_weak_count *)v146.i64[1]);
  }
  if ((v120 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v120 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_2171CD464(&v121);
  sub_2171961C0(v129);
}

void sub_2171CB6B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23)
{
  __cxa_guard_abort(&qword_267B96FF8);
  a23 = (void **)(v23 - 240);
  sub_216787968(&a23);
  a23 = (void **)(v23 - 208);
  sub_216889A04(&a23);
  _Unwind_Resume(a1);
}

void sub_2171CBCD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v25 = *(std::__shared_weak_count **)(v24 - 168);
  if (v25) {
    sub_216784EC4(v25);
  }
  char v26 = *(std::__shared_weak_count **)(v24 - 248);
  if (v26) {
    sub_216784EC4(v26);
  }
  if (!a24) {
    JUMPOUT(0x2171CBCACLL);
  }
  JUMPOUT(0x2171CBCA8);
}

void sub_2171CBD04(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (const void *)(a1 + 24);
  sp_mut = std::__get_sp_mut((const void *)(a1 + 24));
  std::__sp_mut::lock(sp_mut);
  uint64_t v7 = *(void *)(a1 + 24);
  long long v6 = *(std::__shared_weak_count **)(a1 + 32);
  *a2 = v7;
  a2[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::__sp_mut::unlock(sp_mut);
  if (!v7)
  {
    long long v8 = operator new(0x38uLL);
    v8[1] = 0;
    void v8[2] = 0;
    *long long v8 = &unk_26C77DC78;
    uint64_t v9 = *(void *)(a1 + 16);
    sub_216981010((_DWORD *)v8 + 6, (_DWORD *)(a1 + 8));
    sub_21698105C((_DWORD *)v8 + 7, (_DWORD *)(a1 + 12));
    v8[5] = 0;
    v8[6] = 0;
    void v8[4] = v9;
    *a2 = v8 + 3;
    a2[1] = v8;
    if (v6) {
      sub_216784EC4(v6);
    }
    atomic_fetch_add_explicit(v8 + 1, 1uLL, memory_order_relaxed);
    unint64_t v10 = std::__get_sp_mut(v4);
    std::__sp_mut::lock(v10);
    uint64_t v11 = *(std::__shared_weak_count **)(a1 + 32);
    *(void *)(a1 + 24) = v8 + 3;
    *(void *)(a1 + 32) = v8;
    std::__sp_mut::unlock(v10);
    if (v11)
    {
      sub_216784EC4(v11);
    }
  }
}

void sub_2171CBE3C(_Unwind_Exception *a1)
{
  sub_216784EC4(v1);
  sub_216784EC4(v1);
  _Unwind_Resume(a1);
}

void *sub_2171CBE68@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v4 = &unk_26C77DCC8;
  long long v5 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v4 + 8) = *(_OWORD *)a1;
  *(_OWORD *)(v4 + 24) = v5;
  uint64_t v6 = *(void *)(a1 + 32);
  *((void *)v4 + 5) = v6;
  if (v6)
  {
    uint64_t v7 = (atomic_ullong *)(v6 - 16);
    if (*((void *)v4 + 4)) {
      uint64_t v7 = (atomic_ullong *)*((void *)v4 + 4);
    }
    atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
  }

  return sub_2171CD354(a2, (uint64_t)v4);
}

void sub_2171CBEF8(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *this)
{
  *(void *)this = &unk_26C77D7A8;
  unsigned __int8 v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_216784EC4(v2);
  }

  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(this);
}

void sub_2171CBF54(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *this)
{
  *(void *)this = &unk_26C77D7A8;
  unsigned __int8 v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_216784EC4(v2);
  }
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(this);

  operator delete(v3);
}

char *sub_2171CBFB4@<X0>(void *a1@<X8>)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  unsigned __int8 v2 = (pxrInternal__aapl__pxrReserved__::HdMeshTopologySchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdMeshTopologySchemaTokens);
  if (!v2) {
    unsigned __int8 v2 = sub_2171CC590(&pxrInternal__aapl__pxrReserved__::HdMeshTopologySchemaTokens);
  }
  uint64_t v3 = *((void *)v2 + 1);
  uint64_t v15 = v3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v15 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdMeshTopologySchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdMeshTopologySchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171CC590(&pxrInternal__aapl__pxrReserved__::HdMeshTopologySchemaTokens);
  }
  uint64_t v5 = *((void *)v4 + 2);
  uint64_t v16 = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v16 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::HdMeshTopologySchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdMeshTopologySchemaTokens);
  if (!v6) {
    uint64_t v6 = sub_2171CC590(&pxrInternal__aapl__pxrReserved__::HdMeshTopologySchemaTokens);
  }
  uint64_t v7 = *((void *)v6 + 3);
  uint64_t v17 = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v17 &= 0xFFFFFFFFFFFFFFF8;
  }
  long long v8 = (pxrInternal__aapl__pxrReserved__::HdMeshTopologySchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdMeshTopologySchemaTokens);
  if (!v8) {
    long long v8 = sub_2171CC590(&pxrInternal__aapl__pxrReserved__::HdMeshTopologySchemaTokens);
  }
  uint64_t v9 = *((void *)v8 + 4);
  uint64_t v18 = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v18 &= 0xFFFFFFFFFFFFFFF8;
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t result = (char *)operator new(0x20uLL);
  uint64_t v11 = 0;
  *a1 = result;
  a1[1] = result;
  a1[2] = result + 32;
  do
  {
    uint64_t v12 = *(uint64_t *)((char *)&v15 + v11);
    *(void *)&result[v11] = v12;
    if ((v12 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&result[v11] &= 0xFFFFFFFFFFFFFFF8;
    }
    v11 += 8;
  }
  while (v11 != 32);
  a1[1] = result + 32;
  for (uint64_t i = 24; i != -8; i -= 8)
  {
    uint64_t v14 = *(uint64_t *)((char *)&v15 + i);
    if ((v14 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return result;
}

void sub_2171CC1D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  while (1)
  {
    uint64_t v14 = *((void *)v12 - 1);
    v12 -= 8;
    uint64_t v13 = v14;
    if ((v14 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if (v12 == &a12) {
      _Unwind_Resume(exception_object);
    }
  }
}

void *sub_2171CC244@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::HdMeshTopologySchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdMeshTopologySchemaTokens);
  if (!v6) {
    uint64_t v6 = sub_2171CC590(&pxrInternal__aapl__pxrReserved__::HdMeshTopologySchemaTokens);
  }
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v6 + 1) & 0xFFFFFFFFFFFFFFF8))
  {
    unint64_t v10 = operator new(0x18uLL);
    uint64_t v11 = v10;
    uint64_t v13 = *(void *)(a1 + 8);
    uint64_t v12 = *(void *)(a1 + 16);
    void *v10 = &unk_26C77D858;
    v10[1] = v13;
    void v10[2] = v12;
    if (v12) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
    }
    void *v10 = &unk_26C77D7F0;
    uint64_t result = operator new(0x20uLL);
    uint64_t v14 = &unk_26C77D8E0;
  }
  else
  {
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::HdMeshTopologySchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdMeshTopologySchemaTokens);
    if (!v7) {
      uint64_t v7 = sub_2171CC590(&pxrInternal__aapl__pxrReserved__::HdMeshTopologySchemaTokens);
    }
    if ((*a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v7 + 2) & 0xFFFFFFFFFFFFFFF8))
    {
      uint64_t v15 = operator new(0x18uLL);
      uint64_t v11 = v15;
      uint64_t v17 = *(void *)(a1 + 8);
      uint64_t v16 = *(void *)(a1 + 16);
      *uint64_t v15 = &unk_26C77D858;
      v15[1] = v17;
      void v15[2] = v16;
      if (v16) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
      }
      *uint64_t v15 = &unk_26C77D958;
      uint64_t result = operator new(0x20uLL);
      uint64_t v14 = &unk_26C77D9A8;
    }
    else
    {
      long long v8 = (pxrInternal__aapl__pxrReserved__::HdMeshTopologySchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdMeshTopologySchemaTokens);
      if (!v8) {
        long long v8 = sub_2171CC590(&pxrInternal__aapl__pxrReserved__::HdMeshTopologySchemaTokens);
      }
      if ((*a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v8 + 3) & 0xFFFFFFFFFFFFFFF8))
      {
        uint64_t v18 = operator new(0x18uLL);
        uint64_t v11 = v18;
        uint64_t v20 = *(void *)(a1 + 8);
        uint64_t v19 = *(void *)(a1 + 16);
        *uint64_t v18 = &unk_26C77D858;
        v18[1] = v20;
        v18[2] = v19;
        if (v19) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
        }
        *uint64_t v18 = &unk_26C77DA20;
        uint64_t result = operator new(0x20uLL);
        uint64_t v14 = &unk_26C77DA70;
      }
      else
      {
        uint64_t result = (void *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdMeshTopologySchemaTokens);
        if (!result) {
          uint64_t result = sub_2171CC590(&pxrInternal__aapl__pxrReserved__::HdMeshTopologySchemaTokens);
        }
        if ((*a2 & 0xFFFFFFFFFFFFFFF8) != (result[4] & 0xFFFFFFFFFFFFFFF8))
        {
          *a3 = 0;
          a3[1] = 0;
          return result;
        }
        uint64_t v21 = operator new(0x18uLL);
        uint64_t v11 = v21;
        uint64_t v23 = *(void *)(a1 + 8);
        uint64_t v22 = *(void *)(a1 + 16);
        *uint64_t v21 = &unk_26C77DB50;
        v21[1] = v23;
        v21[2] = v22;
        if (v22) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
        }
        *uint64_t v21 = &unk_26C77DAE8;
        uint64_t result = operator new(0x20uLL);
        uint64_t v14 = &unk_26C77DB88;
      }
    }
  }
  void *result = v14;
  result[1] = 0;
  result[2] = 0;
  result[3] = v11;
  *a3 = v11;
  a3[1] = result;
  return result;
}

void sub_2171CC54C(_Unwind_Exception *a1)
{
  sub_2171CCEE8(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::HdMeshTopologySchemaTokens_StaticTokenType *sub_2171CC590(atomic_ullong *a1)
{
  uint64_t result = sub_2171CC5D8();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::HdMeshTopologySchemaTokens_StaticTokenType::~HdMeshTopologySchemaTokens_StaticTokenType(result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::HdMeshTopologySchemaTokens_StaticTokenType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::HdMeshTopologySchemaTokens_StaticTokenType *sub_2171CC5D8()
{
  v0 = (pxrInternal__aapl__pxrReserved__::HdMeshTopologySchemaTokens_StaticTokenType *)operator new(0x50uLL);
  pxrInternal__aapl__pxrReserved__::HdMeshTopologySchemaTokens_StaticTokenType::HdMeshTopologySchemaTokens_StaticTokenType(v0);
  return v0;
}

void sub_2171CC608(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2171CC61C(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *this)
{
  *(void *)this = &unk_26C77D858;
  unsigned __int8 v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_216784EC4(v2);
  }

  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(this);
}

void sub_2171CC678(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *this)
{
  *(void *)this = &unk_26C77D858;
  unsigned __int8 v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_216784EC4(v2);
  }
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(this);

  operator delete(v3);
}

void sub_2171CC6D8(uint64_t a1@<X0>, void *a2@<X8>)
{
  (*(void (**)(void *__return_ptr))(*(void *)a1 + 32))(v3);
  a2[1] = &off_26C74FA68;
  sub_2168F8DBC(a2, (uint64_t)v3);
  sub_2168F83DC((uint64_t)v3);
}

void sub_2171CC74C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2171CC764()
{
  return 0;
}

void sub_2171CC76C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_2171CC7E8(*(void *)(a1 + 8), &v7);
  uint64_t v3 = v7;
  long long v4 = *(_OWORD *)(v7 + 40);
  *(_OWORD *)a2 = *(_OWORD *)(v7 + 24);
  *(_OWORD *)(a2 + 16) = v4;
  uint64_t v5 = *(void *)(v3 + 56);
  *(void *)(a2 + 32) = v5;
  if (v5)
  {
    uint64_t v6 = (atomic_ullong *)(v5 - 16);
    if (*(void *)(a2 + 24)) {
      uint64_t v6 = *(atomic_ullong **)(a2 + 24);
    }
    atomic_fetch_add_explicit(v6, 1uLL, memory_order_relaxed);
  }
  if (v8) {
    sub_216784EC4(v8);
  }
}

void sub_2171CC7E8(uint64_t a1@<X0>, void *a2@<X8>)
{
  long long v4 = (uint64_t *)(a1 + 16);
  sub_2171BE4CC((void *)(a1 + 16), a2);
  if (!*a2)
  {
    (*(void (**)(void *__return_ptr))(**(void **)(a1 + 8) + 40))(v10);
    sub_2171CC908((const pxrInternal__aapl__pxrReserved__::HdMeshTopology *)v10, &v11);
    long long v5 = v11;
    long long v11 = 0uLL;
    uint64_t v6 = (std::__shared_weak_count *)a2[1];
    *(_OWORD *)a2 = v5;
    if (v6)
    {
      sub_216784EC4(v6);
      if (*((void *)&v11 + 1)) {
        sub_216784EC4(*((std::__shared_weak_count **)&v11 + 1));
      }
    }
    pxrInternal__aapl__pxrReserved__::HdMeshTopology::~HdMeshTopology((pxrInternal__aapl__pxrReserved__::HdMeshTopology *)v10);
    uint64_t v7 = (std::__shared_weak_count *)a2[1];
    uint64_t v8 = *a2;
    uint64_t v9 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_2171BE460(v4, &v8);
    if (v9) {
      sub_216784EC4(v9);
    }
  }
}

void sub_2171CC8CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, char a11)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  uint64_t v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13) {
    sub_216784EC4(v13);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2171CC908@<X0>(const pxrInternal__aapl__pxrReserved__::HdMeshTopology *a1@<X1>, void *a2@<X8>)
{
  long long v4 = operator new(0x208uLL);
  uint64_t result = sub_2171CC964(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_2171CC950(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_2171CC964(void *a1, const pxrInternal__aapl__pxrReserved__::HdMeshTopology *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C77D890;
  pxrInternal__aapl__pxrReserved__::HdMeshTopology::HdMeshTopology((pxrInternal__aapl__pxrReserved__::HdMeshTopology *)(a1 + 3), a2, 0);
  return a1;
}

void sub_2171CC9B0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_2171CC9C4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C77D890;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2171CC9E4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C77D890;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171CCA28(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_2171CCA54(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171CCA7C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2171CCAAC(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77D930)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_2171CCAF0(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *this)
{
  *(void *)this = &unk_26C77D858;
  unsigned __int8 v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_216784EC4(v2);
  }

  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(this);
}

void sub_2171CCB4C(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *this)
{
  *(void *)this = &unk_26C77D858;
  unsigned __int8 v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_216784EC4(v2);
  }
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(this);

  operator delete(v3);
}

void sub_2171CCBAC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_2171CC7E8(*(void *)(a1 + 8), &v7);
  uint64_t v3 = v7;
  long long v4 = *(_OWORD *)(v7 + 80);
  *(_OWORD *)a2 = *(_OWORD *)(v7 + 64);
  *(_OWORD *)(a2 + 16) = v4;
  uint64_t v5 = *(void *)(v3 + 96);
  *(void *)(a2 + 32) = v5;
  if (v5)
  {
    uint64_t v6 = (atomic_ullong *)(v5 - 16);
    if (*(void *)(a2 + 24)) {
      uint64_t v6 = *(atomic_ullong **)(a2 + 24);
    }
    atomic_fetch_add_explicit(v6, 1uLL, memory_order_relaxed);
  }
  if (v8) {
    sub_216784EC4(v8);
  }
}

void sub_2171CCC20(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171CCC48(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2171CCC78(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77D9F8)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_2171CCCBC(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *this)
{
  *(void *)this = &unk_26C77D858;
  unsigned __int8 v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_216784EC4(v2);
  }

  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(this);
}

void sub_2171CCD18(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *this)
{
  *(void *)this = &unk_26C77D858;
  unsigned __int8 v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_216784EC4(v2);
  }
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(this);

  operator delete(v3);
}

void sub_2171CCD78(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_2171CC7E8(*(void *)(a1 + 8), &v7);
  uint64_t v3 = v7;
  long long v4 = *(_OWORD *)(v7 + 120);
  *(_OWORD *)a2 = *(_OWORD *)(v7 + 104);
  *(_OWORD *)(a2 + 16) = v4;
  uint64_t v5 = *(void *)(v3 + 136);
  *(void *)(a2 + 32) = v5;
  if (v5)
  {
    uint64_t v6 = (atomic_ullong *)(v5 - 16);
    if (*(void *)(a2 + 24)) {
      uint64_t v6 = *(atomic_ullong **)(a2 + 24);
    }
    atomic_fetch_add_explicit(v6, 1uLL, memory_order_relaxed);
  }
  if (v8) {
    sub_216784EC4(v8);
  }
}

void sub_2171CCDF0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171CCE18(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2171CCE48(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77DAC0)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_2171CCE8C(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *this)
{
  *(void *)this = &unk_26C77DB50;
  unsigned __int8 v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_216784EC4(v2);
  }

  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(this);
}

void sub_2171CCEE8(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *this)
{
  *(void *)this = &unk_26C77DB50;
  unsigned __int8 v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_216784EC4(v2);
  }
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(this);

  operator delete(v3);
}

void *sub_2171CCF48@<X0>(uint64_t a1@<X0>, atomic_uint **a2@<X8>)
{
  uint64_t result = (*(void *(**)(atomic_uint **__return_ptr))(*(void *)a1 + 32))(&v6);
  long long v4 = v6;
  *a2 = v6;
  a2[1] = (atomic_uint *)((char *)&off_26C750C70 + 1);
  if ((v4 & 7) != 0)
  {
    uint64_t v5 = (atomic_uint *)((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v5, 2u, memory_order_relaxed) & 1) == 0) {
      *a2 = v5;
    }
  }
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

uint64_t sub_2171CCFE0()
{
  return 0;
}

void sub_2171CCFE8(uint64_t a1@<X0>, atomic_uint **a2@<X8>)
{
  sub_2171CC7E8(*(void *)(a1 + 8), &v5);
  uint64_t v3 = *(atomic_uint **)(v5 + 16);
  *a2 = v3;
  if ((v3 & 7) != 0)
  {
    long long v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
      *a2 = v4;
    }
  }
  if (v6) {
    sub_216784EC4(v6);
  }
}

void sub_2171CD05C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171CD084(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2171CD0B4(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77DBD8)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_2171CD0FC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171CD124(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2171CD154(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77DC50)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_2171CD198(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C77DC78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2171CD1B8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C77DC78;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

_DWORD *sub_2171CD1FC(uint64_t a1)
{
  unsigned __int8 v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
    sub_216784EC4(v2);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));

  return sub_21697C414((_DWORD *)(a1 + 24));
}

void sub_2171CD24C(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *a1)
{
  *(void *)a1 = &unk_26C77DCC8;
  sub_2168F83DC((uint64_t)a1 + 8);

  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(a1);
}

void sub_2171CD2A4(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *a1)
{
  *(void *)a1 = &unk_26C77DCC8;
  sub_2168F83DC((uint64_t)a1 + 8);
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(a1);

  operator delete(v2);
}

void *sub_2171CD300@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  a2[1] = &off_26C74ECC0;
  return sub_2168F8DBC(a2, a1 + 8);
}

uint64_t sub_2171CD318()
{
  return 0;
}

uint64_t sub_2171CD320@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)(result + 24);
  *(_OWORD *)a2 = *(_OWORD *)(result + 8);
  *(_OWORD *)(a2 + 16) = v2;
  uint64_t v3 = *(void *)(result + 40);
  *(void *)(a2 + 32) = v3;
  if (v3)
  {
    long long v4 = *(atomic_ullong **)(a2 + 24);
    uint64_t v5 = (atomic_ullong *)(v3 - 16);
    if (!v4) {
      long long v4 = v5;
    }
    atomic_fetch_add_explicit(v4, 1uLL, memory_order_relaxed);
  }
  return result;
}

void *sub_2171CD354(void *a1, uint64_t a2)
{
  *a1 = a2;
  long long v4 = operator new(0x20uLL);
  void *v4 = &unk_26C77DD30;
  v4[1] = 0;
  _OWORD v4[2] = 0;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_2171CD3AC(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_2173254E8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_2171CD3C8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171CD3F0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2171CD420(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77DD80)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void *sub_2171CD464(void *a1)
{
  long long v2 = (std::__shared_weak_count *)a1[15];
  if (v2) {
    sub_216784EC4(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[13];
  if (v3) {
    sub_216784EC4(v3);
  }
  long long v4 = (std::__shared_weak_count *)a1[11];
  if (v4) {
    sub_216784EC4(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[9];
  if (v5) {
    sub_216784EC4(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)a1[7];
  if (v6) {
    sub_216784EC4(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)a1[5];
  if (v7) {
    sub_216784EC4(v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)a1[3];
  if (v8) {
    sub_216784EC4(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)a1[1];
  if (v9) {
    sub_216784EC4(v9);
  }
  return a1;
}

void sub_2171CD4E8(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *this)
{
  *(void *)this = &unk_26C77DB50;
  long long v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_216784EC4(v2);
  }

  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(this);
}

void sub_2171CD544(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *this)
{
  *(void *)this = &unk_26C77DB50;
  long long v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_216784EC4(v2);
  }
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(this);

  operator delete(v3);
}

void sub_2171CD5A4(uint64_t a1@<X0>, atomic_uint **a2@<X8>)
{
  sub_2171CC7E8(*(void *)(a1 + 8), &v5);
  uint64_t v3 = *(atomic_uint **)(v5 + 8);
  *a2 = v3;
  if ((v3 & 7) != 0)
  {
    long long v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
      *a2 = v4;
    }
  }
  if (v6) {
    sub_216784EC4(v6);
  }
}

void sub_2171CD610(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171CD638(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2171CD668(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77DE48)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_2171CD6AC(uint64_t a1@<X0>, long long *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x90uLL);
  long long v7 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  pxrInternal__aapl__pxrReserved__::HdOverlayContainerDataSource::HdOverlayContainerDataSource(v6, a1, &v7);
  sub_2171AE948(a3, (uint64_t)v6);
  if (*((void *)&v7 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v7 + 1));
  }
}

void sub_2171CD728(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  if (v11) {
    operator delete(v10);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2171CD74C@<X0>(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x90uLL);
  pxrInternal__aapl__pxrReserved__::HdOverlayContainerDataSource::HdOverlayContainerDataSource(v6, *a1, a2);

  return sub_2171AE948(a3, (uint64_t)v6);
}

void sub_2171CD7AC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchemaTokens_StaticTokenType *sub_2171CD7C0(atomic_ullong *a1)
{
  uint64_t result = sub_2171CD808();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchemaTokens_StaticTokenType::~HdGeomSubsetSchemaTokens_StaticTokenType(result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchemaTokens_StaticTokenType *sub_2171CD808()
{
  v0 = (pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchemaTokens_StaticTokenType *)operator new(0x40uLL);
  pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchemaTokens_StaticTokenType::HdGeomSubsetSchemaTokens_StaticTokenType(v0);
  return v0;
}

void sub_2171CD838(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2171CD850(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171CD878(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2171CD8A8(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77DEC0)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_2171CD8EC(uint64_t a1)
{
  *(void *)a1 = &unk_26C77DEE8;
  long long v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    sub_216784EC4(v2);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 12));
  sub_21697C414((_DWORD *)(a1 + 8));

  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase((pxrInternal__aapl__pxrReserved__::HdDataSourceBase *)a1);
}

void sub_2171CD95C(uint64_t a1)
{
  *(void *)a1 = &unk_26C77DEE8;
  long long v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    sub_216784EC4(v2);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 12));
  sub_21697C414((_DWORD *)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase((pxrInternal__aapl__pxrReserved__::HdDataSourceBase *)a1);

  operator delete(v3);
}

char *sub_2171CD9D0@<X0>(void *a1@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  long long v2 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchemaTokens);
  if (!v2) {
    long long v2 = sub_217199BE0(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchemaTokens);
  }
  uint64_t v3 = v2[1];
  uint64_t v13 = v3;
  if ((v3 & 7) != 0)
  {
    long long v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v13 = v4;
    }
  }
  uint64_t v5 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchemaTokens);
  if (!v5) {
    uint64_t v5 = sub_217199BE0(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchemaTokens);
  }
  uint64_t v6 = v5[2];
  uint64_t v14 = v6;
  if ((v6 & 7) != 0)
  {
    long long v7 = (atomic_uint *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v7, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v14 = v7;
    }
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t result = (char *)operator new(0x10uLL);
  uint64_t v9 = 0;
  *a1 = result;
  a1[1] = result;
  a1[2] = result + 16;
  do
  {
    unint64_t v10 = (&v13)[v9];
    *(void *)&result[v9 * 8] = v10;
    if ((v10 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&result[v9 * 8] &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v9;
  }
  while (v9 != 2);
  a1[1] = result + 16;
  for (uint64_t i = 1; i != -1; --i)
  {
    uint64_t v12 = (&v13)[i];
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return result;
}

void sub_2171CDB3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  if ((a12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

void sub_2171CDB9C(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v85 = *MEMORY[0x263EF8340];
  uint64_t v6 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchemaTokens);
  if (!v6) {
    uint64_t v6 = sub_217199BE0(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchemaTokens);
  }
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) == ((unint64_t)v6[1] & 0xFFFFFFFFFFFFFFF8))
  {
    sub_2171CE7F4(a1, &v78);
    uint64_t v8 = (char *)operator new(0x18uLL);
    long long v9 = v78;
    *(void *)uint64_t v8 = &unk_26C77DF30;
    *(_OWORD *)(v8 + 8) = v9;
    if (*((void *)&v9 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v9 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v10 = operator new(0x20uLL);
    void *v10 = &unk_26C77E450;
    v10[1] = 0;
    void v10[2] = 0;
    v10[3] = v8;
    *a3 = v8;
    a3[1] = v10;
    if (*((void *)&v9 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v9 + 1));
    }
  }
  else
  {
    long long v7 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchemaTokens);
    if (!v7) {
      long long v7 = sub_217199BE0(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchemaTokens);
    }
    if ((*a2 & 0xFFFFFFFFFFFFFFF8) == ((unint64_t)v7[2] & 0xFFFFFFFFFFFFFFF8))
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B97008, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_267B97008))
      {
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B97000, "__invisiblePoints");
        __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B97000, &dword_216758000);
        __cxa_guard_release(&qword_267B97008);
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B97018, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_267B97018))
      {
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B97010, "__invisibleCurves");
        __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B97010, &dword_216758000);
        __cxa_guard_release(&qword_267B97018);
      }
      long long v76 = 0;
      unint64_t v77 = 0;
      long long v72 = 0;
      uint64_t v73 = 0;
      unint64_t v74 = 0;
      uint64_t v75 = 0;
      sub_2171CE7F4(a1, &v82);
      sub_2171CF2C4(v82, &v78);
      long long v11 = *(_OWORD *)(v78 + 168);
      long long v69 = *(_OWORD *)(v78 + 152);
      long long v70 = v11;
      uint64_t v12 = *(void *)(v78 + 184);
      uint64_t v71 = v12;
      if (v12)
      {
        uint64_t v13 = (atomic_ullong *)(v12 - 16);
        if (*((void *)&v70 + 1)) {
          uint64_t v13 = (atomic_ullong *)*((void *)&v70 + 1);
        }
        atomic_fetch_add_explicit(v13, 1uLL, memory_order_relaxed);
      }
      if (*((void *)&v78 + 1)) {
        sub_216784EC4(*((std::__shared_weak_count **)&v78 + 1));
      }
      if (*((void *)&v82 + 1)) {
        sub_216784EC4(*((std::__shared_weak_count **)&v82 + 1));
      }
      if ((void)v69)
      {
        long long v78 = 0u;
        long long v79 = 0u;
        uint64_t v14 = (pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchemaTokens);
        if (!v14) {
          uint64_t v14 = sub_2171CD7C0(&pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchemaTokens);
        }
        pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchema::BuildTypeDataSource((pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchemaTokens_StaticTokenType *)((char *)v14 + 32), (uint64_t)v81);
        uint64_t v15 = pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchema::Builder::SetType(&v78, (uint64_t *)v81);
        sub_2171C9550((uint64_t)&v69, &v67);
        long long v68 = v67;
        long long v67 = 0uLL;
        uint64_t v16 = (pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchema::Builder *)pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchema::Builder::SetIndices((uint64_t)v15, (uint64_t *)&v68);
        pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchema::Builder::Build(v16, &v82);
        uint64_t v17 = (uint64_t *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdVisibilitySchemaTokens);
        if (!v17) {
          uint64_t v17 = (uint64_t *)sub_2171C134C(&pxrInternal__aapl__pxrReserved__::HdVisibilitySchemaTokens);
        }
        long long v63 = 0uLL;
        LOBYTE(v60) = 0;
        pxrInternal__aapl__pxrReserved__::HdRetainedTypedSampledDataSource<BOOL>::New(&v60, (uint64_t *)&v61);
        long long v62 = v61;
        long long v61 = 0uLL;
        uint64_t v18 = (pxrInternal__aapl__pxrReserved__::HdVisibilitySchema::Builder *)pxrInternal__aapl__pxrReserved__::HdVisibilitySchema::Builder::SetVisibility(&v63, (uint64_t *)&v62);
        pxrInternal__aapl__pxrReserved__::HdVisibilitySchema::Builder::Build((uint64_t *)&v64, v18);
        long long v65 = v64;
        long long v64 = 0uLL;
        pxrInternal__aapl__pxrReserved__::HdRetainedContainerDataSource::New(v17, (uint64_t *)&v65, &v66);
        long long v83 = v66;
        long long v66 = 0uLL;
        if (*((void *)&v65 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v65 + 1));
        }
        if (*((void *)&v64 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v64 + 1));
        }
        if (*((void *)&v62 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v62 + 1));
        }
        if (*((void *)&v61 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v61 + 1));
        }
        if (*((void *)&v63 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v63 + 1));
        }
        if (*((void *)&v68 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v68 + 1));
        }
        if (*((void *)&v67 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v67 + 1));
        }
        if (*((void *)&v81[0] + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v81[0] + 1));
        }
        if (*((void *)&v79 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v79 + 1));
        }
        if (*((void *)&v78 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v78 + 1));
        }
        uint64_t v19 = v76;
        if ((unint64_t)v76 >= v77)
        {
          uint64_t v21 = sub_216973984(&v75, &qword_267B97010);
        }
        else
        {
          uint64_t v20 = qword_267B97010;
          *(void *)long long v76 = qword_267B97010;
          if ((v20 & 7) != 0
            && (atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
          {
            *(void *)v19 &= 0xFFFFFFFFFFFFFFF8;
          }
          uint64_t v21 = v19 + 8;
        }
        long long v76 = v21;
        *(void *)&long long v68 = 2;
        sub_2171CD74C(&v68, (uint64_t)&v82, v81);
        long long v22 = v81[0];
        v81[0] = 0uLL;
        uint64_t v23 = v73;
        if ((unint64_t)v73 >= v74)
        {
          long long v57 = v22;
          uint64_t v24 = (v73 - v72) >> 4;
          unint64_t v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 60) {
            sub_21677CB10();
          }
          uint64_t v26 = v74 - (void)v72;
          if ((uint64_t)(v74 - (void)v72) >> 3 > v25) {
            unint64_t v25 = v26 >> 3;
          }
          if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v27 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v27 = v25;
          }
          uint64_t v80 = &v74;
          unint64_t v28 = (char *)sub_216787EE0((uint64_t)&v74, v27);
          uint64_t v29 = &v28[16 * v24];
          *(void *)&long long v78 = v28;
          *((void *)&v78 + 1) = v29;
          *((void *)&v79 + 1) = &v28[16 * v30];
          *(_OWORD *)uint64_t v29 = v57;
          *(void *)&long long v79 = v29 + 16;
          sub_2171A640C((uint64_t *)&v72, &v78);
          long long v31 = v73;
          sub_216788028((void **)&v78);
          uint64_t v73 = v31;
          if (*((void *)&v81[0] + 1)) {
            sub_216784EC4(*((std::__shared_weak_count **)&v81[0] + 1));
          }
        }
        else
        {
          *(_OWORD *)uint64_t v73 = v22;
          uint64_t v73 = v23 + 16;
        }
        for (uint64_t i = 24; i != -8; i -= 16)
        {
          uint64_t v33 = *(std::__shared_weak_count **)((char *)&v82 + i);
          if (v33) {
            sub_216784EC4(v33);
          }
        }
      }
      sub_2171CE7F4(a1, v81);
      sub_2171CF2C4(*(uint64_t *)&v81[0], &v78);
      long long v34 = *(_OWORD *)(v78 + 128);
      long long v82 = *(_OWORD *)(v78 + 112);
      long long v83 = v34;
      uint64_t v35 = *(void *)(v78 + 144);
      uint64_t v84 = v35;
      if (v35)
      {
        unint64_t v36 = (atomic_ullong *)(v35 - 16);
        if (*((void *)&v83 + 1)) {
          unint64_t v36 = (atomic_ullong *)*((void *)&v83 + 1);
        }
        atomic_fetch_add_explicit(v36, 1uLL, memory_order_relaxed);
      }
      if (*((void *)&v78 + 1)) {
        sub_216784EC4(*((std::__shared_weak_count **)&v78 + 1));
      }
      if (*((void *)&v81[0] + 1)) {
        sub_216784EC4(*((std::__shared_weak_count **)&v81[0] + 1));
      }
      if ((void)v82)
      {
        long long v78 = 0u;
        long long v79 = 0u;
        uint64_t v37 = (pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchemaTokens);
        if (!v37) {
          uint64_t v37 = sub_2171CD7C0(&pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchemaTokens);
        }
        pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchema::BuildTypeDataSource((pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchemaTokens_StaticTokenType *)((char *)v37 + 24), (uint64_t)&v68);
        unint64_t v38 = pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchema::Builder::SetType(&v78, (uint64_t *)&v68);
        sub_2171C9550((uint64_t)&v82, &v66);
        long long v67 = v66;
        long long v66 = 0uLL;
        unint64_t v39 = (pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchema::Builder *)pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchema::Builder::SetIndices((uint64_t)v38, (uint64_t *)&v67);
        pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchema::Builder::Build(v39, v81);
        long long v40 = (uint64_t *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdVisibilitySchemaTokens);
        if (!v40) {
          long long v40 = (uint64_t *)sub_2171C134C(&pxrInternal__aapl__pxrReserved__::HdVisibilitySchemaTokens);
        }
        long long v62 = 0uLL;
        char v59 = 0;
        pxrInternal__aapl__pxrReserved__::HdRetainedTypedSampledDataSource<BOOL>::New(&v59, (uint64_t *)&v60);
        long long v61 = v60;
        long long v60 = 0uLL;
        unint64_t v41 = (pxrInternal__aapl__pxrReserved__::HdVisibilitySchema::Builder *)pxrInternal__aapl__pxrReserved__::HdVisibilitySchema::Builder::SetVisibility(&v62, (uint64_t *)&v61);
        pxrInternal__aapl__pxrReserved__::HdVisibilitySchema::Builder::Build((uint64_t *)&v63, v41);
        long long v64 = v63;
        long long v63 = 0uLL;
        pxrInternal__aapl__pxrReserved__::HdRetainedContainerDataSource::New(v40, (uint64_t *)&v64, &v65);
        v81[1] = v65;
        long long v65 = 0uLL;
        if (*((void *)&v64 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v64 + 1));
        }
        if (*((void *)&v63 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v63 + 1));
        }
        if (*((void *)&v61 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v61 + 1));
        }
        if (*((void *)&v60 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v60 + 1));
        }
        if (*((void *)&v62 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v62 + 1));
        }
        if (*((void *)&v67 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v67 + 1));
        }
        if (*((void *)&v66 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v66 + 1));
        }
        if (*((void *)&v68 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v68 + 1));
        }
        if (*((void *)&v79 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v79 + 1));
        }
        if (*((void *)&v78 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v78 + 1));
        }
        uint64_t v42 = v76;
        if ((unint64_t)v76 >= v77)
        {
          float64x2_t v44 = sub_216973984(&v75, &qword_267B97000);
        }
        else
        {
          uint64_t v43 = qword_267B97000;
          *(void *)long long v76 = qword_267B97000;
          if ((v43 & 7) != 0
            && (atomic_fetch_add_explicit((atomic_uint *volatile)(v43 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
          {
            *(void *)v42 &= 0xFFFFFFFFFFFFFFF8;
          }
          float64x2_t v44 = v42 + 8;
        }
        long long v76 = v44;
        *(void *)&long long v67 = 2;
        sub_2171CD74C(&v67, (uint64_t)v81, &v68);
        long long v45 = v68;
        long long v68 = 0uLL;
        int64x2_t v46 = v73;
        if ((unint64_t)v73 >= v74)
        {
          long long v58 = v45;
          uint64_t v47 = (v73 - v72) >> 4;
          unint64_t v48 = v47 + 1;
          if ((unint64_t)(v47 + 1) >> 60) {
            sub_21677CB10();
          }
          uint64_t v49 = v74 - (void)v72;
          if ((uint64_t)(v74 - (void)v72) >> 3 > v48) {
            unint64_t v48 = v49 >> 3;
          }
          if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v50 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v50 = v48;
          }
          uint64_t v80 = &v74;
          long long v51 = (char *)sub_216787EE0((uint64_t)&v74, v50);
          long long v52 = &v51[16 * v47];
          *(void *)&long long v78 = v51;
          *((void *)&v78 + 1) = v52;
          *((void *)&v79 + 1) = &v51[16 * v53];
          *(_OWORD *)long long v52 = v58;
          *(void *)&long long v79 = v52 + 16;
          sub_2171A640C((uint64_t *)&v72, &v78);
          uint64_t v54 = v73;
          sub_216788028((void **)&v78);
          uint64_t v73 = v54;
          if (*((void *)&v68 + 1)) {
            sub_216784EC4(*((std::__shared_weak_count **)&v68 + 1));
          }
        }
        else
        {
          *(_OWORD *)uint64_t v73 = v45;
          uint64_t v73 = v46 + 16;
        }
        for (uint64_t j = 24; j != -8; j -= 16)
        {
          unint64_t v56 = *(std::__shared_weak_count **)((char *)v81 + j);
          if (v56) {
            sub_216784EC4(v56);
          }
        }
      }
      if (v75 == v76)
      {
        *a3 = 0;
        a3[1] = 0;
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::HdRetainedContainerDataSource::New((v76 - v75) >> 3, (uint64_t *)v75, (uint64_t *)v72, &v78);
        *(_OWORD *)a3 = v78;
      }
      sub_2168F83DC((uint64_t)&v82);
      sub_2168F83DC((uint64_t)&v69);
      *(void *)&long long v78 = &v72;
      sub_216787968((void ***)&v78);
      *(void *)&long long v78 = &v75;
      sub_216889A04((void ***)&v78);
    }
    else
    {
      *a3 = 0;
      a3[1] = 0;
    }
  }
}

void sub_2171CE474(_Unwind_Exception *a1)
{
}

void sub_2171CE7F4(uint64_t a1@<X0>, void *a2@<X8>)
{
  long long v4 = (const void *)(a1 + 24);
  sp_mut = std::__get_sp_mut((const void *)(a1 + 24));
  std::__sp_mut::lock(sp_mut);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 32);
  *a2 = v7;
  a2[1] = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::__sp_mut::unlock(sp_mut);
  if (!v7)
  {
    uint64_t v8 = operator new(0x38uLL);
    v8[1] = 0;
    void v8[2] = 0;
    *uint64_t v8 = &unk_26C77E4C8;
    uint64_t v9 = *(void *)(a1 + 16);
    sub_216981010((_DWORD *)v8 + 6, (_DWORD *)(a1 + 8));
    sub_21698105C((_DWORD *)v8 + 7, (_DWORD *)(a1 + 12));
    v8[5] = 0;
    v8[6] = 0;
    void v8[4] = v9;
    *a2 = v8 + 3;
    a2[1] = v8;
    if (v6) {
      sub_216784EC4(v6);
    }
    atomic_fetch_add_explicit(v8 + 1, 1uLL, memory_order_relaxed);
    unint64_t v10 = std::__get_sp_mut(v4);
    std::__sp_mut::lock(v10);
    long long v11 = *(std::__shared_weak_count **)(a1 + 32);
    *(void *)(a1 + 24) = v8 + 3;
    *(void *)(a1 + 32) = v8;
    std::__sp_mut::unlock(v10);
    if (v11)
    {
      sub_216784EC4(v11);
    }
  }
}

void sub_2171CE92C(_Unwind_Exception *a1)
{
  sub_216784EC4(v1);
  sub_216784EC4(v1);
  _Unwind_Resume(a1);
}

void sub_2171CE958(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *this)
{
  *(void *)this = &unk_26C77DF30;
  long long v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_216784EC4(v2);
  }

  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(this);
}

void sub_2171CE9B4(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *this)
{
  *(void *)this = &unk_26C77DF30;
  long long v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_216784EC4(v2);
  }
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(this);

  operator delete(v3);
}

char *sub_2171CEA14@<X0>(void *a1@<X8>)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  long long v2 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens);
  if (!v2) {
    long long v2 = sub_21719BCE8(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens);
  }
  unint64_t v3 = (unint64_t)v2[1];
  unint64_t v17 = v3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v17 &= 0xFFFFFFFFFFFFFFF8;
  }
  long long v4 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens);
  if (!v4) {
    long long v4 = sub_21719BCE8(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens);
  }
  unint64_t v5 = (unint64_t)v4[2];
  unint64_t v18 = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v18 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v6 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens);
  if (!v6) {
    uint64_t v6 = sub_21719BCE8(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens);
  }
  unint64_t v7 = (unint64_t)v6[3];
  unint64_t v19 = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v19 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v8 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens);
  if (!v8) {
    uint64_t v8 = sub_21719BCE8(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens);
  }
  unint64_t v9 = (unint64_t)v8[4];
  unint64_t v20 = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v20 &= 0xFFFFFFFFFFFFFFF8;
  }
  unint64_t v10 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens);
  if (!v10) {
    unint64_t v10 = sub_21719BCE8(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens);
  }
  unint64_t v11 = (unint64_t)v10[5];
  unint64_t v21 = v11;
  if ((v11 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v21 &= 0xFFFFFFFFFFFFFFF8;
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t result = (char *)operator new(0x28uLL);
  uint64_t v13 = 0;
  *a1 = result;
  a1[1] = result;
  a1[2] = result + 40;
  do
  {
    uint64_t v14 = *(unint64_t *)((char *)&v17 + v13);
    *(void *)&result[v13] = v14;
    if ((v14 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&result[v13] &= 0xFFFFFFFFFFFFFFF8;
    }
    v13 += 8;
  }
  while (v13 != 40);
  a1[1] = result + 40;
  for (uint64_t i = 32; i != -8; i -= 8)
  {
    uint64_t v16 = *(unint64_t *)((char *)&v17 + i);
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return result;
}

void sub_2171CEC84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  while (1)
  {
    uint64_t v13 = *((void *)v11 - 1);
    v11 -= 8;
    uint64_t v12 = v13;
    if ((v13 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if (v11 == &a11) {
      _Unwind_Resume(exception_object);
    }
  }
}

void *sub_2171CECF0@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens);
  if (!v6) {
    uint64_t v6 = sub_21719BCE8(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens);
  }
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) == ((unint64_t)v6[1] & 0xFFFFFFFFFFFFFFF8))
  {
    unint64_t v11 = operator new(0x18uLL);
    uint64_t v12 = v11;
    uint64_t v14 = *(void *)(a1 + 8);
    uint64_t v13 = *(void *)(a1 + 16);
    *unint64_t v11 = &unk_26C77DFE0;
    v11[1] = v14;
    _OWORD v11[2] = v13;
    if (v13) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
    }
    *unint64_t v11 = &unk_26C77DF78;
    uint64_t result = operator new(0x20uLL);
    uint64_t v15 = &unk_26C77E068;
  }
  else
  {
    unint64_t v7 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens);
    if (!v7) {
      unint64_t v7 = sub_21719BCE8(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens);
    }
    if ((*a2 & 0xFFFFFFFFFFFFFFF8) == ((unint64_t)v7[2] & 0xFFFFFFFFFFFFFFF8))
    {
      uint64_t v16 = operator new(0x18uLL);
      uint64_t v12 = v16;
      uint64_t v18 = *(void *)(a1 + 8);
      uint64_t v17 = *(void *)(a1 + 16);
      void *v16 = &unk_26C77DFE0;
      v16[1] = v18;
      v16[2] = v17;
      if (v17) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
      }
      void *v16 = &unk_26C77E0E0;
      uint64_t result = operator new(0x20uLL);
      uint64_t v15 = &unk_26C77E130;
    }
    else
    {
      uint64_t v8 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens);
      if (!v8) {
        uint64_t v8 = sub_21719BCE8(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens);
      }
      if ((*a2 & 0xFFFFFFFFFFFFFFF8) == ((unint64_t)v8[3] & 0xFFFFFFFFFFFFFFF8))
      {
        unint64_t v19 = operator new(0x18uLL);
        uint64_t v12 = v19;
        uint64_t v21 = *(void *)(a1 + 8);
        uint64_t v20 = *(void *)(a1 + 16);
        *unint64_t v19 = &unk_26C77E210;
        v19[1] = v21;
        v19[2] = v20;
        if (v20) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
        }
        *unint64_t v19 = &unk_26C77E1A8;
        uint64_t result = operator new(0x20uLL);
        uint64_t v15 = &unk_26C77E248;
      }
      else
      {
        unint64_t v9 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens);
        if (!v9) {
          unint64_t v9 = sub_21719BCE8(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens);
        }
        if ((*a2 & 0xFFFFFFFFFFFFFFF8) == ((unint64_t)v9[4] & 0xFFFFFFFFFFFFFFF8))
        {
          uint64_t v22 = operator new(0x18uLL);
          uint64_t v12 = v22;
          uint64_t v24 = *(void *)(a1 + 8);
          uint64_t v23 = *(void *)(a1 + 16);
          *uint64_t v22 = &unk_26C77E210;
          v22[1] = v24;
          v22[2] = v23;
          if (v23) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
          }
          *uint64_t v22 = &unk_26C77E2C0;
          uint64_t result = operator new(0x20uLL);
          uint64_t v15 = &unk_26C77E310;
        }
        else
        {
          uint64_t result = (void *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens);
          if (!result) {
            uint64_t result = sub_21719BCE8(&pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchemaTokens);
          }
          if ((*a2 & 0xFFFFFFFFFFFFFFF8) != (result[5] & 0xFFFFFFFFFFFFFFF8))
          {
            *a3 = 0;
            a3[1] = 0;
            return result;
          }
          unint64_t v25 = operator new(0x18uLL);
          uint64_t v12 = v25;
          uint64_t v27 = *(void *)(a1 + 8);
          uint64_t v26 = *(void *)(a1 + 16);
          *unint64_t v25 = &unk_26C77E210;
          v25[1] = v27;
          v25[2] = v26;
          if (v26) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
          }
          *unint64_t v25 = &unk_26C77E388;
          uint64_t result = operator new(0x20uLL);
          uint64_t v15 = &unk_26C77E3D8;
        }
      }
    }
  }
  void *result = v15;
  result[1] = 0;
  result[2] = 0;
  result[3] = v12;
  *a3 = v12;
  a3[1] = result;
  return result;
}

void sub_2171CF0A8(_Unwind_Exception *a1)
{
  sub_2171CFC24(v1);
  _Unwind_Resume(a1);
}

void sub_2171CF0FC(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *this)
{
  *(void *)this = &unk_26C77DFE0;
  long long v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_216784EC4(v2);
  }

  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(this);
}

void sub_2171CF158(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *this)
{
  *(void *)this = &unk_26C77DFE0;
  long long v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_216784EC4(v2);
  }
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(this);

  operator delete(v3);
}

void sub_2171CF1B8(uint64_t a1@<X0>, void *a2@<X8>)
{
  (*(void (**)(void *__return_ptr))(*(void *)a1 + 32))(v3);
  a2[1] = &off_26C74FA68;
  sub_2168F8DBC(a2, (uint64_t)v3);
  sub_2168F83DC((uint64_t)v3);
}

void sub_2171CF22C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2171CF244()
{
  return 0;
}

void sub_2171CF24C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_2171CF2C4(*(void *)(a1 + 8), &v7);
  uint64_t v3 = v7;
  long long v4 = *(_OWORD *)(v7 + 48);
  *(_OWORD *)a2 = *(_OWORD *)(v7 + 32);
  *(_OWORD *)(a2 + 16) = v4;
  uint64_t v5 = *(void *)(v3 + 64);
  *(void *)(a2 + 32) = v5;
  if (v5)
  {
    uint64_t v6 = (atomic_ullong *)(v5 - 16);
    if (*(void *)(a2 + 24)) {
      uint64_t v6 = *(atomic_ullong **)(a2 + 24);
    }
    atomic_fetch_add_explicit(v6, 1uLL, memory_order_relaxed);
  }
  if (v8) {
    sub_216784EC4(v8);
  }
}

void sub_2171CF2C4(uint64_t a1@<X0>, void *a2@<X8>)
{
  long long v4 = (uint64_t *)(a1 + 16);
  sub_2171BE4CC((void *)(a1 + 16), a2);
  if (!*a2)
  {
    (*(void (**)(void *__return_ptr))(**(void **)(a1 + 8) + 48))(v10);
    sub_2171CF3E4((const pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopology *)v10, &v11);
    long long v5 = v11;
    long long v11 = 0uLL;
    uint64_t v6 = (std::__shared_weak_count *)a2[1];
    *(_OWORD *)a2 = v5;
    if (v6)
    {
      sub_216784EC4(v6);
      if (*((void *)&v11 + 1)) {
        sub_216784EC4(*((std::__shared_weak_count **)&v11 + 1));
      }
    }
    pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopology::~HdBasisCurvesTopology((pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopology *)v10);
    uint64_t v7 = (std::__shared_weak_count *)a2[1];
    uint64_t v8 = *a2;
    unint64_t v9 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_2171BE460(v4, &v8);
    if (v9) {
      sub_216784EC4(v9);
    }
  }
}

void sub_2171CF3A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, char a12)
{
  if (a11) {
    sub_216784EC4(a11);
  }
  uint64_t v14 = *(std::__shared_weak_count **)(v12 + 8);
  if (v14) {
    sub_216784EC4(v14);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2171CF3E4@<X0>(const pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopology *a1@<X1>, void *a2@<X8>)
{
  long long v4 = operator new(0xE0uLL);
  uint64_t result = sub_2171CF440(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_2171CF42C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_2171CF440(void *a1, const pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopology *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C77E018;
  pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopology::HdBasisCurvesTopology((pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopology *)(a1 + 3), a2);
  return a1;
}

void sub_2171CF488(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_2171CF49C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C77E018;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2171CF4BC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C77E018;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171CF500(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_2171CF52C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171CF554(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2171CF584(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77E0B8)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_2171CF5C8(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *this)
{
  *(void *)this = &unk_26C77DFE0;
  long long v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_216784EC4(v2);
  }

  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(this);
}

void sub_2171CF624(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *this)
{
  *(void *)this = &unk_26C77DFE0;
  long long v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_216784EC4(v2);
  }
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(this);

  operator delete(v3);
}

void sub_2171CF684(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_2171CF2C4(*(void *)(a1 + 8), &v7);
  uint64_t v3 = v7;
  long long v4 = *(_OWORD *)(v7 + 88);
  *(_OWORD *)a2 = *(_OWORD *)(v7 + 72);
  *(_OWORD *)(a2 + 16) = v4;
  uint64_t v5 = *(void *)(v3 + 104);
  *(void *)(a2 + 32) = v5;
  if (v5)
  {
    uint64_t v6 = (atomic_ullong *)(v5 - 16);
    if (*(void *)(a2 + 24)) {
      uint64_t v6 = *(atomic_ullong **)(a2 + 24);
    }
    atomic_fetch_add_explicit(v6, 1uLL, memory_order_relaxed);
  }
  if (v8) {
    sub_216784EC4(v8);
  }
}

void sub_2171CF6FC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171CF724(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2171CF754(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77E180)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_2171CF798(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *this)
{
  *(void *)this = &unk_26C77E210;
  long long v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_216784EC4(v2);
  }

  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(this);
}

void sub_2171CF7F4(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *this)
{
  *(void *)this = &unk_26C77E210;
  long long v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_216784EC4(v2);
  }
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(this);

  operator delete(v3);
}

void *sub_2171CF854@<X0>(uint64_t a1@<X0>, atomic_uint **a2@<X8>)
{
  uint64_t result = (*(void *(**)(atomic_uint **__return_ptr))(*(void *)a1 + 32))(&v6);
  long long v4 = v6;
  *a2 = v6;
  a2[1] = (atomic_uint *)((char *)&off_26C750C70 + 1);
  if ((v4 & 7) != 0)
  {
    uint64_t v5 = (atomic_uint *)((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v5, 2u, memory_order_relaxed) & 1) == 0) {
      *a2 = v5;
    }
  }
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

uint64_t sub_2171CF8EC()
{
  return 0;
}

void sub_2171CF8F4(uint64_t a1@<X0>, atomic_uint **a2@<X8>)
{
  sub_2171CF2C4(*(void *)(a1 + 8), &v5);
  uint64_t v3 = *(atomic_uint **)(v5 + 16);
  *a2 = v3;
  if ((v3 & 7) != 0)
  {
    long long v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
      *a2 = v4;
    }
  }
  if (v6) {
    sub_216784EC4(v6);
  }
}

void sub_2171CF968(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171CF990(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2171CF9C0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77E298)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_2171CFA04(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *this)
{
  *(void *)this = &unk_26C77E210;
  long long v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_216784EC4(v2);
  }

  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(this);
}

void sub_2171CFA60(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *this)
{
  *(void *)this = &unk_26C77E210;
  long long v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_216784EC4(v2);
  }
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(this);

  operator delete(v3);
}

void sub_2171CFAC0(uint64_t a1@<X0>, atomic_uint **a2@<X8>)
{
  sub_2171CF2C4(*(void *)(a1 + 8), &v5);
  uint64_t v3 = *(atomic_uint **)(v5 + 8);
  *a2 = v3;
  if ((v3 & 7) != 0)
  {
    long long v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
      *a2 = v4;
    }
  }
  if (v6) {
    sub_216784EC4(v6);
  }
}

void sub_2171CFB2C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171CFB54(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2171CFB84(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77E360)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_2171CFBC8(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *this)
{
  *(void *)this = &unk_26C77E210;
  long long v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_216784EC4(v2);
  }

  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(this);
}

void sub_2171CFC24(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *this)
{
  *(void *)this = &unk_26C77E210;
  long long v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_216784EC4(v2);
  }
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(this);

  operator delete(v3);
}

void sub_2171CFC84(uint64_t a1@<X0>, atomic_uint **a2@<X8>)
{
  sub_2171CF2C4(*(void *)(a1 + 8), &v5);
  uint64_t v3 = *(atomic_uint **)(v5 + 24);
  *a2 = v3;
  if ((v3 & 7) != 0)
  {
    long long v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
      *a2 = v4;
    }
  }
  if (v6) {
    sub_216784EC4(v6);
  }
}

void sub_2171CFCF0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171CFD18(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2171CFD48(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77E428)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_2171CFD90(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171CFDB8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2171CFDE8(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77E4A0)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_2171CFE2C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C77E4C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2171CFE4C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C77E4C8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

_DWORD *sub_2171CFE90(uint64_t a1)
{
  long long v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
    sub_216784EC4(v2);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));

  return sub_21697C414((_DWORD *)(a1 + 24));
}

void sub_2171CFEE4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171CFF0C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2171CFF3C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77E568)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_2171CFF84(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *a1)
{
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(a1);

  operator delete(v1);
}

uint64_t sub_2171CFFAC@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(result + 8);
  a2[1] = (char *)&off_26C77E5E8 + 3;
  return result;
}

uint64_t sub_2171CFFC4()
{
  return 0;
}

uint64_t sub_2171CFFCC(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void *sub_2171CFFD4(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

void *sub_2171CFFE4(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_2171CFFF0()
{
  return 1;
}

unint64_t sub_2171CFFF8(void *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL sub_2171D0018(void *a1, void *a2)
{
  return *a1 == *a2;
}

BOOL sub_2171D002C(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_2171D0044()
{
  return 0;
}

uint64_t sub_2171D0050()
{
  return std::ostream::operator<<();
}

void *sub_2171D0060()
{
  return &unk_26C77E6A0;
}

uint64_t sub_2171D006C()
{
  return 0;
}

uint64_t sub_2171D0074()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_2171D0080()
{
  return 0;
}

uint64_t sub_2171D0088()
{
  return 0;
}

BOOL sub_2171D0090(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x80000002174C9D57 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2171D00CC(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_26C77E6A0, a2, a3);
}

void *sub_2171D00F0()
{
  return &unk_26C77E6A0;
}

void *sub_2171D0100@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  a2[1] = (char *)&off_26C77E5E8 + 3;
  return result;
}

void *sub_2171D0118(void *a1, uint64_t a2)
{
  *a1 = a2;
  long long v4 = operator new(0x20uLL);
  void *v4 = &unk_26C77E6D0;
  v4[1] = 0;
  _OWORD v4[2] = 0;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_2171D0170(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_2173254E8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_2171D018C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171D01B4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2171D01E4(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77E720)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_2171D0228(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *a1)
{
  *(void *)a1 = &unk_26C77E748;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)a1 + 3);
  sub_21697C414((_DWORD *)a1 + 2);

  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(a1);
}

void sub_2171D0288(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *a1)
{
  *(void *)a1 = &unk_26C77E748;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)a1 + 3);
  sub_21697C414((_DWORD *)a1 + 2);
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(a1);

  operator delete(v2);
}

char *sub_2171D02EC@<X0>(void *a1@<X8>)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  long long v2 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  if (!v2) {
    long long v2 = sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  }
  uint64_t v3 = *((void *)v2 + 1);
  uint64_t v41 = v3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v41 &= 0xFFFFFFFFFFFFFFF8;
  }
  long long v4 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  if (!v4) {
    long long v4 = sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  }
  uint64_t v5 = *((void *)v4 + 2);
  uint64_t v42 = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v42 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  if (!v6) {
    uint64_t v6 = sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  }
  uint64_t v7 = *((void *)v6 + 3);
  uint64_t v43 = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v43 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  if (!v8) {
    uint64_t v8 = sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  }
  uint64_t v9 = *((void *)v8 + 4);
  uint64_t v44 = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v44 &= 0xFFFFFFFFFFFFFFF8;
  }
  unint64_t v10 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  if (!v10) {
    unint64_t v10 = sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  }
  uint64_t v11 = *((void *)v10 + 5);
  uint64_t v45 = v11;
  if ((v11 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v45 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v12 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  if (!v12) {
    uint64_t v12 = sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  }
  uint64_t v13 = *((void *)v12 + 6);
  uint64_t v46 = v13;
  if ((v13 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v46 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v14 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  if (!v14) {
    uint64_t v14 = sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  }
  uint64_t v15 = *((void *)v14 + 7);
  uint64_t v47 = v15;
  if ((v15 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v47 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v16 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  if (!v16) {
    uint64_t v16 = sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  }
  uint64_t v17 = *((void *)v16 + 8);
  uint64_t v48 = v17;
  if ((v17 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v48 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v18 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  if (!v18) {
    uint64_t v18 = sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  }
  uint64_t v19 = *((void *)v18 + 9);
  uint64_t v49 = v19;
  if ((v19 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v49 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v20 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  if (!v20) {
    uint64_t v20 = sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  }
  uint64_t v21 = *((void *)v20 + 10);
  uint64_t v50 = v21;
  if ((v21 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v50 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v22 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  if (!v22) {
    uint64_t v22 = sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  }
  uint64_t v23 = *((void *)v22 + 11);
  uint64_t v51 = v23;
  if ((v23 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v51 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v24 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  if (!v24) {
    uint64_t v24 = sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  }
  uint64_t v25 = *((void *)v24 + 12);
  uint64_t v52 = v25;
  if ((v25 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v52 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v26 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  if (!v26) {
    uint64_t v26 = sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  }
  uint64_t v27 = *((void *)v26 + 13);
  uint64_t v53 = v27;
  if ((v27 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v53 &= 0xFFFFFFFFFFFFFFF8;
  }
  unint64_t v28 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  if (!v28) {
    unint64_t v28 = sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  }
  uint64_t v29 = *((void *)v28 + 14);
  uint64_t v54 = v29;
  if ((v29 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v54 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v30 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  if (!v30) {
    uint64_t v30 = sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  }
  uint64_t v31 = *((void *)v30 + 15);
  uint64_t v55 = v31;
  if ((v31 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v55 &= 0xFFFFFFFFFFFFFFF8;
  }
  double v32 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  if (!v32) {
    double v32 = sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  }
  uint64_t v33 = *((void *)v32 + 16);
  uint64_t v56 = v33;
  if ((v33 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v56 &= 0xFFFFFFFFFFFFFFF8;
  }
  long long v34 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  if (!v34) {
    long long v34 = sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  }
  uint64_t v35 = *((void *)v34 + 17);
  uint64_t v57 = v35;
  if ((v35 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v57 &= 0xFFFFFFFFFFFFFFF8;
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t result = (char *)operator new(0x88uLL);
  uint64_t v37 = 0;
  *a1 = result;
  a1[1] = result;
  a1[2] = result + 136;
  do
  {
    uint64_t v38 = *(uint64_t *)((char *)&v41 + v37);
    *(void *)&result[v37] = v38;
    if ((v38 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v38 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&result[v37] &= 0xFFFFFFFFFFFFFFF8;
    }
    v37 += 8;
  }
  while (v37 != 136);
  a1[1] = result + 136;
  for (uint64_t i = 128; i != -8; i -= 8)
  {
    uint64_t v40 = *(uint64_t *)((char *)&v41 + i);
    if ((v40 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return result;
}

void sub_2171D08EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  while (1)
  {
    uint64_t v13 = *((void *)v11 - 1);
    v11 -= 8;
    uint64_t v12 = v13;
    if ((v13 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if (v11 == &a11) {
      _Unwind_Resume(exception_object);
    }
  }
}

void *sub_2171D0958@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  if (!v6) {
    uint64_t v6 = sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  }
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v6 + 1) & 0xFFFFFFFFFFFFFFF8))
  {
    (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 16) + 296))(&v54);
    if (sub_2171A0BE8((pxrInternal__aapl__pxrReserved__::VtValue *)&v54)
      && ((BYTE8(v54) & 4) != 0
        ? (uint64_t v24 = (long long *)(*(uint64_t (**)(long long *))((*((void *)&v54 + 1) & 0xFFFFFFFFFFFFFFF8) + 168))(&v54))
        : (uint64_t v24 = &v54),
          *(_DWORD *)v24))
    {
      uint64_t v25 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
      if (!v25) {
        uint64_t v25 = sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
      }
      uint64_t v26 = (uint64_t *)((char *)v25 + 152);
    }
    else
    {
      uint64_t v27 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
      if (!v27) {
        uint64_t v27 = sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
      }
      uint64_t v26 = (uint64_t *)((char *)v27 + 144);
    }
    sub_2171A3CE4(v26, v50);
    goto LABEL_78;
  }
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  if (!v7) {
    uint64_t v7 = sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  }
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v7 + 7) & 0xFFFFFFFFFFFFFFF8))
  {
    (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 16) + 296))(&v54);
    if (sub_2171A0CC8((pxrInternal__aapl__pxrReserved__::VtValue *)&v54))
    {
      if ((BYTE8(v54) & 4) != 0) {
        unint64_t v28 = (unint64_t *)(*(uint64_t (**)(long long *))((*((void *)&v54 + 1) & 0xFFFFFFFFFFFFFFF8)
      }
                                                                        + 168))(&v54);
      else {
        unint64_t v28 = (unint64_t *)&v54;
      }
      unint64_t v29 = *v28;
    }
    else
    {
      unint64_t v29 = 0xFF7FFFFF7F7FFFFFLL;
    }
    double v32 = operator new(0x10uLL);
    *double v32 = &unk_26C77E790;
    v32[1] = v29;
    sub_2171D22A4(v50, (uint64_t)v32);
    goto LABEL_78;
  }
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
  if (!v8) {
    uint64_t v8 = sub_2171A0B5C(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
  }
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v8 + 23) & 0xFFFFFFFFFFFFFFF8))
  {
    (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 16) + 296))(&v54);
    if (sub_2171A0D5C((pxrInternal__aapl__pxrReserved__::VtValue *)&v54))
    {
      if ((BYTE8(v54) & 4) != 0) {
        uint64_t v30 = (int *)(*(uint64_t (**)(long long *))((*((void *)&v54 + 1) & 0xFFFFFFFFFFFFFFF8) + 168))(&v54);
      }
      else {
        uint64_t v30 = (int *)&v54;
      }
      int v31 = *v30;
    }
    else
    {
      int v31 = 4;
    }
    uint64_t v49 = operator new(0x10uLL);
    *(void *)uint64_t v49 = &unk_26C77E858;
    v49[2] = v31;
    sub_2171D25DC(v50, (uint64_t)v49);
LABEL_78:
    *(_OWORD *)a3 = v50[0];
    uint64_t v48 = (uint64_t *)&v54;
    return (void *)sub_2168EE084((uint64_t)v48);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  if (!v9) {
    uint64_t v9 = sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  }
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v9 + 8) & 0xFFFFFFFFFFFFFFF8))
  {
    uint64_t v36 = *(void *)(a1 + 16);
    uint64_t v37 = a1 + 8;
    uint64_t v38 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
    if (!v38) {
      uint64_t v38 = sub_2171A0B5C(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)v36 + 296))(&v52, v36, v37, (uint64_t)v38 + 56);
    uint64_t v56 = 0;
    long long v54 = 0u;
    long long v55 = 0u;
    if (sub_2171A0E3C((pxrInternal__aapl__pxrReserved__::VtValue *)&v52))
    {
      unint64_t v39 = (uint64_t *)((v53 & 4) != 0
                      ? (*(uint64_t (**)(uint64_t *))((v53 & 0xFFFFFFFFFFFFFFF8) + 168))(&v52)
                      : v52);
      unint64_t v40 = (v39[1] - *v39) >> 5;
      memset(v50, 0, sizeof(v50));
      uint64_t v51 = v50;
      sub_216901228((unint64_t *)&v54, v40, &v51);
      uint64_t v43 = *v39;
      if (v39[1] != *v39)
      {
        uint64_t v44 = 0;
        unint64_t v45 = 0;
        do
        {
          sub_2169014A0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v54, v41, v42);
          uint64_t v46 = (_OWORD *)(v56 + v44);
          long long v47 = *(_OWORD *)(v43 + v44 + 16);
          *uint64_t v46 = *(_OWORD *)(v43 + v44);
          v46[1] = v47;
          ++v45;
          uint64_t v43 = *v39;
          v44 += 32;
        }
        while (v45 < (v39[1] - *v39) >> 5);
      }
    }
    sub_2171D121C((uint64_t)&v54, v50);
    *(_OWORD *)a3 = v50[0];
    sub_2168F83DC((uint64_t)&v54);
    uint64_t v48 = &v52;
    return (void *)sub_2168EE084((uint64_t)v48);
  }
  unint64_t v10 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  if (!v10) {
    unint64_t v10 = sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  }
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v10 + 11) & 0xFFFFFFFFFFFFFFF8)) {
    goto LABEL_61;
  }
  uint64_t v11 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  if (!v11) {
    uint64_t v11 = sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
  }
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v11 + 12) & 0xFFFFFFFFFFFFFFF8))
  {
LABEL_61:
    uint64_t v33 = operator new(0x20uLL);
    uint64_t v34 = *(void *)(a1 + 16);
    *(void *)uint64_t v33 = &unk_26C77EAB8;
    sub_216981010(v33 + 2, (_DWORD *)(a1 + 8));
    sub_21698105C(v33 + 3, (_DWORD *)(a1 + 12));
    uint64_t v35 = *a2;
    *((void *)v33 + 2) = *a2;
    if ((v35 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *((void *)v33 + 2) &= 0xFFFFFFFFFFFFFFF8;
    }
    *((void *)v33 + 3) = v34;
    if (!v34)
    {
      *(void *)&long long v54 = "hd/dataSourceLegacyPrim.cpp";
      *((void *)&v54 + 1) = "Hd_TypedDataSourceLegacyCameraParamValue";
      *(void *)&long long v55 = 1142;
      *((void *)&v55 + 1) = "pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Hd_TypedDataSourceLegacyCameraPar"
                              "amValue<double>::Hd_TypedDataSourceLegacyCameraParamValue(const SdfPath &, const TfToken &"
                              ", HdSceneDelegate *) [T = double]";
      LOBYTE(v56) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v54, "_sceneDelegate", 0);
    }
    uint64_t result = operator new(0x20uLL);
    void *result = &unk_26C77EB08;
    result[1] = 0;
    result[2] = 0;
    result[3] = v33;
    *(void *)a3 = v33;
    *(void *)(a3 + 8) = result;
  }
  else
  {
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    if (!v12) {
      uint64_t v12 = sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    }
    if ((*a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v12 + 14) & 0xFFFFFFFFFFFFFFF8))
    {
      uint64_t result = sub_2171D12AC((_DWORD *)(a1 + 8), a2, (uint64_t *)(a1 + 16), &v54);
LABEL_81:
      *(_OWORD *)a3 = v54;
      return result;
    }
    uint64_t v13 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    if (!v13) {
      uint64_t v13 = sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    }
    if ((*a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v13 + 16) & 0xFFFFFFFFFFFFFFF8))
    {
      return sub_2171D145C(a1, (_OWORD *)a3);
    }
    else
    {
      uint64_t v14 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
      if (!v14) {
        uint64_t v14 = sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
      }
      if ((*a2 & 0xFFFFFFFFFFFFFFF8) != (*((void *)v14 + 17) & 0xFFFFFFFFFFFFFFF8))
      {
        uint64_t v15 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
        if (!v15) {
          uint64_t v15 = sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
        }
        uint64_t v16 = (void *)*((void *)v15 + 20);
        uint64_t v17 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
        if (!v17) {
          uint64_t v17 = sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
        }
        uint64_t v18 = (void *)*((void *)v17 + 21);
        if (v16 != v18)
        {
          while ((*v16 & 0xFFFFFFFFFFFFFFF8) != (*a2 & 0xFFFFFFFFFFFFFFF8))
          {
            if (++v16 == v18)
            {
              uint64_t v16 = (void *)*((void *)v17 + 21);
              break;
            }
          }
        }
        uint64_t v19 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
        if (!v19) {
          uint64_t v19 = sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
        }
        uint64_t v20 = (void *)*((void *)v19 + 21);
        uint64_t v21 = (_DWORD *)(a1 + 8);
        uint64_t v22 = (uint64_t *)(a1 + 16);
        if (v16 == v20) {
          uint64_t result = sub_2171D20A0(v21, a2, v22, &v54);
        }
        else {
          uint64_t result = sub_2171D201C(v21, a2, v22, &v54);
        }
        goto LABEL_81;
      }
      return sub_2171D1A3C(a1, (_OWORD *)a3);
    }
  }
  return result;
}

void sub_2171D1148(_Unwind_Exception *a1)
{
  uint64_t v5 = *((void *)v1 + 2);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v3);
  sub_21697C414(v2);
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(v1);
  operator delete(v6);
  _Unwind_Resume(a1);
}

void *sub_2171D121C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  long long v4 = (char *)operator new(0x30uLL);
  *(void *)long long v4 = &unk_26C77E9F0;
  long long v5 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v4 + 8) = *(_OWORD *)a1;
  *(_OWORD *)(v4 + 24) = v5;
  uint64_t v6 = *(void *)(a1 + 32);
  *((void *)v4 + 5) = v6;
  if (v6)
  {
    uint64_t v7 = (atomic_ullong *)(v6 - 16);
    if (*((void *)v4 + 4)) {
      uint64_t v7 = (atomic_ullong *)*((void *)v4 + 4);
    }
    atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
  }

  return sub_2171D27F4(a2, (uint64_t)v4);
}

void *sub_2171D12AC@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0x20uLL);
  uint64_t v9 = *a3;
  *(void *)uint64_t v8 = &unk_26C77EB80;
  sub_216981010(v8 + 2, a1);
  sub_21698105C(v8 + 3, a1 + 1);
  uint64_t v10 = *a2;
  *((void *)v8 + 2) = *a2;
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *((void *)v8 + 2) &= 0xFFFFFFFFFFFFFFF8;
  }
  *((void *)v8 + 3) = v9;
  if (!v9)
  {
    v12[0] = "hd/dataSourceLegacyPrim.cpp";
    v12[1] = "Hd_TypedDataSourceLegacyCameraParamValue";
    uint64_t v12[2] = 1142;
    void v12[3] = "pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Hd_TypedDataSourceLegacyCameraParamValue<BOOL>::Hd"
             "_TypedDataSourceLegacyCameraParamValue(const SdfPath &, const TfToken &, HdSceneDelegate *) [T = BOOL]";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v12, "_sceneDelegate", 0);
  }
  *a4 = v8;
  uint64_t result = operator new(0x20uLL);
  void *result = &unk_26C77EBD0;
  result[1] = 0;
  result[2] = 0;
  result[3] = v8;
  a4[1] = result;
  return result;
}

void sub_2171D13E8(_Unwind_Exception *a1)
{
  uint64_t v5 = *((void *)v1 + 2);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v3);
  sub_21697C414(v2);
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(v1);
  operator delete(v6);
  _Unwind_Resume(a1);
}

void *sub_2171D145C@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  memset(v42, 0, sizeof(v42));
  long long v4 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
  if (!v4) {
    long long v4 = sub_2171A0B5C(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
  }
  uint64_t v5 = (std::__shared_weak_count_vtbl *)operator new(0x20uLL);
  uint64_t v6 = (_DWORD *)(a1 + 8);
  uint64_t v7 = *(const void *(__cdecl **)(const std::__shared_weak_count *__hidden, const std::type_info *))(a1 + 16);
  v5->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&unk_26C77EC48;
  sub_216981010(&v5->~__shared_weak_count_0, (_DWORD *)(a1 + 8));
  sub_21698105C((_DWORD *)&v5->~__shared_weak_count_0 + 1, (_DWORD *)(a1 + 12));
  uint64_t v8 = (void (__cdecl *)(std::__shared_count *__hidden))*((void *)v4 + 12);
  v5->__on_zero_shared = v8;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v5->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))((unint64_t)v5->__on_zero_shared & 0xFFFFFFFFFFFFFFF8);
  }
  v5->__get_deleter = v7;
  if (!v7)
  {
    *(void *)&long long v44 = "hd/dataSourceLegacyPrim.cpp";
    *((void *)&v44 + 1) = "Hd_TypedDataSourceLegacyCameraParamValue";
    uint64_t v45 = 1142;
    uint64_t v46 = "pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Hd_TypedDataSourceLegacyCameraParamValue<int>::Hd_Typ"
          "edDataSourceLegacyCameraParamValue(const SdfPath &, const TfToken &, HdSceneDelegate *) [T = int]";
    char v47 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v44, "_sceneDelegate", 0);
  }
  uint64_t v9 = (std::__shared_weak_count *)operator new(0x20uLL);
  v9->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C77EC98;
  v9->__shared_owners_ = 0;
  v9->__shared_weak_owners_ = 0;
  v9[1].__vftable = v5;
  unint64_t v40 = v5;
  uint64_t v41 = v9;
  uint64_t v10 = pxrInternal__aapl__pxrReserved__::HdSplitDiopterSchema::Builder::SetCount(v42, (uint64_t *)&v40);
  uint64_t v11 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
  if (!v11) {
    uint64_t v11 = sub_2171A0B5C(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
  }
  uint64_t v12 = (uint64_t *)(a1 + 16);
  sub_2171D32C4(v6, (uint64_t *)v11 + 13, v12, &v39);
  long long v44 = v39;
  long long v39 = 0uLL;
  uint64_t v13 = pxrInternal__aapl__pxrReserved__::HdSplitDiopterSchema::Builder::SetAngle((uint64_t)v10, (uint64_t *)&v44);
  uint64_t v14 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
  if (!v14) {
    uint64_t v14 = sub_2171A0B5C(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
  }
  sub_2171D32C4(v6, (uint64_t *)v14 + 14, v12, &v37);
  long long v38 = v37;
  long long v37 = 0uLL;
  uint64_t v15 = pxrInternal__aapl__pxrReserved__::HdSplitDiopterSchema::Builder::SetOffset1(v13, (uint64_t *)&v38);
  uint64_t v16 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
  if (!v16) {
    uint64_t v16 = sub_2171A0B5C(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
  }
  sub_2171D32C4(v6, (uint64_t *)v16 + 15, v12, &v35);
  long long v36 = v35;
  long long v35 = 0uLL;
  uint64_t v17 = pxrInternal__aapl__pxrReserved__::HdSplitDiopterSchema::Builder::SetWidth1(v15, (uint64_t *)&v36);
  uint64_t v18 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
  if (!v18) {
    uint64_t v18 = sub_2171A0B5C(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
  }
  sub_2171D32C4(v6, (uint64_t *)v18 + 16, v12, &v33);
  long long v34 = v33;
  long long v33 = 0uLL;
  uint64_t v19 = pxrInternal__aapl__pxrReserved__::HdSplitDiopterSchema::Builder::SetFocusDistance1(v17, (uint64_t *)&v34);
  uint64_t v20 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
  if (!v20) {
    uint64_t v20 = sub_2171A0B5C(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
  }
  sub_2171D32C4(v6, (uint64_t *)v20 + 17, v12, &v31);
  long long v32 = v31;
  long long v31 = 0uLL;
  uint64_t v21 = pxrInternal__aapl__pxrReserved__::HdSplitDiopterSchema::Builder::SetOffset2(v19, (uint64_t *)&v32);
  uint64_t v22 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
  if (!v22) {
    uint64_t v22 = sub_2171A0B5C(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
  }
  sub_2171D32C4(v6, (uint64_t *)v22 + 18, v12, &v29);
  long long v30 = v29;
  long long v29 = 0uLL;
  uint64_t v23 = pxrInternal__aapl__pxrReserved__::HdSplitDiopterSchema::Builder::SetWidth2(v21, (uint64_t *)&v30);
  uint64_t v24 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
  if (!v24) {
    uint64_t v24 = sub_2171A0B5C(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
  }
  sub_2171D32C4(v6, (uint64_t *)v24 + 19, v12, &v27);
  long long v28 = v27;
  long long v27 = 0uLL;
  uint64_t v25 = (pxrInternal__aapl__pxrReserved__::HdSplitDiopterSchema::Builder *)pxrInternal__aapl__pxrReserved__::HdSplitDiopterSchema::Builder::SetFocusDistance2(v23, (uint64_t *)&v28);
  pxrInternal__aapl__pxrReserved__::HdSplitDiopterSchema::Builder::Build(v25, &v43);
  *a2 = v43;
  long long v43 = 0uLL;
  if (*((void *)&v28 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v28 + 1));
  }
  if (*((void *)&v27 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v27 + 1));
  }
  if (*((void *)&v30 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v30 + 1));
  }
  if (*((void *)&v29 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v29 + 1));
  }
  if (*((void *)&v32 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v32 + 1));
  }
  if (*((void *)&v31 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v31 + 1));
  }
  if (*((void *)&v34 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v34 + 1));
  }
  if (*((void *)&v33 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v33 + 1));
  }
  if (*((void *)&v36 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v36 + 1));
  }
  if (*((void *)&v35 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v35 + 1));
  }
  if (*((void *)&v38 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v38 + 1));
  }
  if (*((void *)&v37 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v37 + 1));
  }
  if (*((void *)&v44 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v44 + 1));
  }
  if (*((void *)&v39 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v39 + 1));
  }
  if (v41) {
    sub_216784EC4(v41);
  }
  return sub_2171CD464(v42);
}

void sub_2171D18A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  uint64_t v41 = *((void *)v37 + 2);
  if ((v41 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v39);
  sub_21697C414(v38);
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(v37);
  operator delete(v42);
  sub_2171CD464(&a37);
  _Unwind_Resume(a1);
}

void *sub_2171D1A3C@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  memset(v42, 0, sizeof(v42));
  long long v4 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
  if (!v4) {
    long long v4 = sub_2171A0B5C(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
  }
  uint64_t v5 = (std::__shared_weak_count_vtbl *)operator new(0x20uLL);
  uint64_t v6 = (_DWORD *)(a1 + 8);
  uint64_t v7 = *(const void *(__cdecl **)(const std::__shared_weak_count *__hidden, const std::type_info *))(a1 + 16);
  v5->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&unk_26C77EDD8;
  sub_216981010(&v5->~__shared_weak_count_0, (_DWORD *)(a1 + 8));
  sub_21698105C((_DWORD *)&v5->~__shared_weak_count_0 + 1, (_DWORD *)(a1 + 12));
  uint64_t v8 = (void (__cdecl *)(std::__shared_count *__hidden))*((void *)v4 + 26);
  v5->__on_zero_shared = v8;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v5->__on_zero_shared = (void (__cdecl *)(std::__shared_count *__hidden))((unint64_t)v5->__on_zero_shared & 0xFFFFFFFFFFFFFFF8);
  }
  v5->__get_deleter = v7;
  if (!v7)
  {
    *(void *)&long long v44 = "hd/dataSourceLegacyPrim.cpp";
    *((void *)&v44 + 1) = "Hd_TypedDataSourceLegacyCameraParamValue";
    uint64_t v45 = 1142;
    uint64_t v46 = "pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Hd_TypedDataSourceLegacyCameraParamValue<pxrInternal_"
          "_aapl__pxrReserved__::TfToken>::Hd_TypedDataSourceLegacyCameraParamValue(const SdfPath &, const TfToken &, HdS"
          "ceneDelegate *) [T = pxrInternal__aapl__pxrReserved__::TfToken]";
    char v47 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v44, "_sceneDelegate", 0);
  }
  uint64_t v9 = (std::__shared_weak_count *)operator new(0x20uLL);
  v9->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C77EE28;
  v9->__shared_owners_ = 0;
  v9->__shared_weak_owners_ = 0;
  v9[1].__vftable = v5;
  unint64_t v40 = v5;
  uint64_t v41 = v9;
  uint64_t v10 = pxrInternal__aapl__pxrReserved__::HdLensDistortionSchema::Builder::SetType(v42, (uint64_t *)&v40);
  uint64_t v11 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
  if (!v11) {
    uint64_t v11 = sub_2171A0B5C(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
  }
  uint64_t v12 = (uint64_t *)(a1 + 16);
  sub_2171D32C4(v6, (uint64_t *)v11 + 27, v12, &v39);
  long long v44 = v39;
  long long v39 = 0uLL;
  uint64_t v13 = pxrInternal__aapl__pxrReserved__::HdLensDistortionSchema::Builder::SetK1((uint64_t)v10, (uint64_t *)&v44);
  uint64_t v14 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
  if (!v14) {
    uint64_t v14 = sub_2171A0B5C(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
  }
  sub_2171D32C4(v6, (uint64_t *)v14 + 28, v12, &v37);
  long long v38 = v37;
  long long v37 = 0uLL;
  uint64_t v15 = pxrInternal__aapl__pxrReserved__::HdLensDistortionSchema::Builder::SetK2(v13, (uint64_t *)&v38);
  uint64_t v16 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
  if (!v16) {
    uint64_t v16 = sub_2171A0B5C(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
  }
  sub_2171D3E20(v6, (uint64_t *)v16 + 29, v12, &v35);
  long long v36 = v35;
  long long v35 = 0uLL;
  uint64_t v17 = pxrInternal__aapl__pxrReserved__::HdLensDistortionSchema::Builder::SetCenter(v15, (uint64_t *)&v36);
  uint64_t v18 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
  if (!v18) {
    uint64_t v18 = sub_2171A0B5C(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
  }
  sub_2171D32C4(v6, (uint64_t *)v18 + 30, v12, &v33);
  long long v34 = v33;
  long long v33 = 0uLL;
  uint64_t v19 = pxrInternal__aapl__pxrReserved__::HdLensDistortionSchema::Builder::SetAnaSq(v17, (uint64_t *)&v34);
  uint64_t v20 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
  if (!v20) {
    uint64_t v20 = sub_2171A0B5C(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
  }
  sub_2171D3E20(v6, (uint64_t *)v20 + 31, v12, &v31);
  long long v32 = v31;
  long long v31 = 0uLL;
  uint64_t v21 = pxrInternal__aapl__pxrReserved__::HdLensDistortionSchema::Builder::SetAsym(v19, (uint64_t *)&v32);
  uint64_t v22 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
  if (!v22) {
    uint64_t v22 = sub_2171A0B5C(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
  }
  sub_2171D32C4(v6, (uint64_t *)v22 + 32, v12, &v29);
  long long v30 = v29;
  long long v29 = 0uLL;
  uint64_t v23 = pxrInternal__aapl__pxrReserved__::HdLensDistortionSchema::Builder::SetScale(v21, (uint64_t *)&v30);
  uint64_t v24 = (pxrInternal__aapl__pxrReserved__::HdCameraTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
  if (!v24) {
    uint64_t v24 = sub_2171A0B5C(&pxrInternal__aapl__pxrReserved__::HdCameraTokens);
  }
  sub_2171D32C4(v6, (uint64_t *)v24 + 33, v12, &v27);
  long long v28 = v27;
  long long v27 = 0uLL;
  uint64_t v25 = (pxrInternal__aapl__pxrReserved__::HdLensDistortionSchema::Builder *)pxrInternal__aapl__pxrReserved__::HdLensDistortionSchema::Builder::SetIor(v23, (uint64_t *)&v28);
  pxrInternal__aapl__pxrReserved__::HdLensDistortionSchema::Builder::Build(v25, &v43);
  *a2 = v43;
  long long v43 = 0uLL;
  if (*((void *)&v28 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v28 + 1));
  }
  if (*((void *)&v27 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v27 + 1));
  }
  if (*((void *)&v30 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v30 + 1));
  }
  if (*((void *)&v29 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v29 + 1));
  }
  if (*((void *)&v32 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v32 + 1));
  }
  if (*((void *)&v31 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v31 + 1));
  }
  if (*((void *)&v34 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v34 + 1));
  }
  if (*((void *)&v33 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v33 + 1));
  }
  if (*((void *)&v36 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v36 + 1));
  }
  if (*((void *)&v35 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v35 + 1));
  }
  if (*((void *)&v38 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v38 + 1));
  }
  if (*((void *)&v37 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v37 + 1));
  }
  if (*((void *)&v44 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v44 + 1));
  }
  if (*((void *)&v39 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v39 + 1));
  }
  if (v41) {
    sub_216784EC4(v41);
  }
  return sub_2171CD464(v42);
}

void sub_2171D1E88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  uint64_t v41 = *((void *)v37 + 2);
  if ((v41 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v39);
  sub_21697C414(v38);
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(v37);
  operator delete(v42);
  sub_2171CD464(&a37);
  _Unwind_Resume(a1);
}

void *sub_2171D201C@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0x20uLL);
  sub_2171D37E4((uint64_t)v8, a1, a2, *a3);

  return sub_2171D3918(a4, (uint64_t)v8);
}

void sub_2171D208C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_2171D20A0@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0x20uLL);
  uint64_t v9 = *a3;
  *(void *)uint64_t v8 = &unk_26C77EF68;
  sub_216981010(v8 + 2, a1);
  sub_21698105C(v8 + 3, a1 + 1);
  uint64_t v10 = *a2;
  *((void *)v8 + 2) = *a2;
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *((void *)v8 + 2) &= 0xFFFFFFFFFFFFFFF8;
  }
  *((void *)v8 + 3) = v9;
  if (!v9)
  {
    v12[0] = "hd/dataSourceLegacyPrim.cpp";
    v12[1] = "Hd_DataSourceLegacyCameraParamValue";
    uint64_t v12[2] = 1201;
    void v12[3] = "pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Hd_DataSourceLegacyCameraParamValue::Hd_DataSource"
             "LegacyCameraParamValue(const SdfPath &, const TfToken &, HdSceneDelegate *)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v12, "_sceneDelegate", 0);
  }
  *a4 = v8;
  uint64_t result = operator new(0x20uLL);
  void *result = &unk_26C77EFB0;
  result[1] = 0;
  result[2] = 0;
  result[3] = v8;
  a4[1] = result;
  return result;
}

void sub_2171D21DC(_Unwind_Exception *a1)
{
  uint64_t v5 = *((void *)v1 + 2);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v3);
  sub_21697C414(v2);
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(v1);
  operator delete(v6);
  _Unwind_Resume(a1);
}

void sub_2171D2254(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *a1)
{
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(a1);

  operator delete(v1);
}

uint64_t sub_2171D227C@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(result + 8);
  a2[1] = (char *)&off_26C74E368 + 3;
  return result;
}

uint64_t sub_2171D2294()
{
  return 0;
}

float sub_2171D229C(uint64_t a1)
{
  return *(float *)(a1 + 8);
}

void *sub_2171D22A4(void *a1, uint64_t a2)
{
  *a1 = a2;
  long long v4 = operator new(0x20uLL);
  void *v4 = &unk_26C77E7E0;
  v4[1] = 0;
  _OWORD v4[2] = 0;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_2171D22FC(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_2173254E8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_2171D2318(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171D2340(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2171D2370(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77E830)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_2171D23B8(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *a1)
{
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(a1);

  operator delete(v1);
}

uint64_t sub_2171D23E0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = (char *)&off_26C77E8B0 + 3;
  *(_DWORD *)a2 = *(_DWORD *)(result + 8);
  return result;
}

uint64_t sub_2171D23FC()
{
  return 0;
}

uint64_t sub_2171D2404(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

_DWORD *sub_2171D240C(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

_DWORD *sub_2171D241C(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_2171D2428()
{
  return 1;
}

unint64_t sub_2171D2430(unsigned int *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL sub_2171D2450(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

BOOL sub_2171D2464(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_2171D247C()
{
  return 0;
}

void *sub_2171D248C()
{
  return &unk_26C77BC08;
}

uint64_t sub_2171D2498()
{
  return 0;
}

uint64_t sub_2171D24A0()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_2171D24AC()
{
  return 0;
}

uint64_t sub_2171D24B4()
{
  return 0;
}

BOOL sub_2171D24BC(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x80000002174C38CDLL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2171D24F8(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C77BC08, a2, a3);
}

void *sub_2171D251C()
{
  return &unk_26C77BC08;
}

_DWORD *sub_2171D252C@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = (char *)&off_26C77E8B0 + 3;
  *(_DWORD *)a2 = *result;
  return result;
}

void *sub_2171D2548(unsigned int *a1, void *a2)
{
  pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&stru_26C77BC08, *a1, (uint64_t)__p);
  if ((v8 & 0x80u) == 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)__p[0];
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v4 = v8;
  }
  else {
    uint64_t v4 = (uint64_t)__p[1];
  }
  uint64_t v5 = sub_216779180(a2, (uint64_t)v3, v4);
  if ((char)v8 < 0) {
    operator delete(__p[0]);
  }
  return v5;
}

void sub_2171D25C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2171D25DC(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  void *v4 = &unk_26C77E978;
  v4[1] = 0;
  _OWORD v4[2] = 0;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_2171D2634(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_2173254E8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_2171D2650(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171D2678(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2171D26A8(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77E9C8)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_2171D26EC(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *a1)
{
  *(void *)a1 = &unk_26C77E9F0;
  sub_2168F83DC((uint64_t)a1 + 8);

  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(a1);
}

void sub_2171D2744(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *a1)
{
  *(void *)a1 = &unk_26C77E9F0;
  sub_2168F83DC((uint64_t)a1 + 8);
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(a1);

  operator delete(v2);
}

void *sub_2171D27A0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  a2[1] = off_26C74F4A8;
  return sub_2168F8DBC(a2, a1 + 8);
}

uint64_t sub_2171D27B8()
{
  return 0;
}

uint64_t sub_2171D27C0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)(result + 24);
  *(_OWORD *)a2 = *(_OWORD *)(result + 8);
  *(_OWORD *)(a2 + 16) = v2;
  uint64_t v3 = *(void *)(result + 40);
  *(void *)(a2 + 32) = v3;
  if (v3)
  {
    uint64_t v4 = *(atomic_ullong **)(a2 + 24);
    uint64_t v5 = (atomic_ullong *)(v3 - 16);
    if (!v4) {
      uint64_t v4 = v5;
    }
    atomic_fetch_add_explicit(v4, 1uLL, memory_order_relaxed);
  }
  return result;
}

void *sub_2171D27F4(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  void *v4 = &unk_26C77EA40;
  v4[1] = 0;
  _OWORD v4[2] = 0;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_2171D284C(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_2173254E8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_2171D2868(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171D2890(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2171D28C0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77EA90)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_2171D2904(uint64_t a1)
{
  *(void *)a1 = &unk_26C77EAB8;
  uint64_t v2 = *(void *)(a1 + 16);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 12));
  sub_21697C414((_DWORD *)(a1 + 8));

  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase((pxrInternal__aapl__pxrReserved__::HdDataSourceBase *)a1);
}

void sub_2171D2980(uint64_t a1)
{
  *(void *)a1 = &unk_26C77EAB8;
  uint64_t v2 = *(void *)(a1 + 16);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 12));
  sub_21697C414((_DWORD *)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase((pxrInternal__aapl__pxrReserved__::HdDataSourceBase *)a1);

  operator delete(v3);
}

void sub_2171D2A00(void **a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  if (a3 == 0.0)
  {
    uint64_t v4 = a1 + 1;
    uint64_t v5 = a1 + 2;
    uint64_t v6 = *(void (**)(void *, void **, void **))(*a1[3] + 296);
    uint64_t v7 = a1[3];
    v6(v7, v4, v5);
  }
  else
  {
    double v8 = ((double (*)(void **))(*a1)[4])(a1);
    *(void *)(a2 + 8) = &unk_26C750B03;
    *(double *)a2 = v8;
  }
}

uint64_t sub_2171D2AB8(uint64_t a1, uint64_t a2, float a3, float a4)
{
  sub_2171D2CFC((uint64_t *)(a1 + 16), (_DWORD *)(a1 + 8), (uint64_t *)(a1 + 24), &v9);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, float, float))(*(void *)v9 + 24))(v9, a2, a3, a4);
  if (v10) {
    sub_216784EC4(v10);
  }
  return v7;
}

void sub_2171D2B50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  _Unwind_Resume(exception_object);
}

double sub_2171D2B68(uint64_t a1, float a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v11 = 0;
  uint64_t v2 = (_DWORD *)(a1 + 8);
  if (a2 == 0.0)
  {
    (*(void (**)(void *__return_ptr, void, _DWORD *, uint64_t))(**(void **)(a1 + 24) + 296))(v9, *(void *)(a1 + 24), v2, a1 + 16);
    sub_2168ED33C(&v10, v9);
    sub_2168EE084((uint64_t)v9);
  }
  else
  {
    sub_2171D2CFC((uint64_t *)(a1 + 16), v2, (uint64_t *)(a1 + 24), &v7);
    (*(void (**)(void *__return_ptr, float))(*(void *)v7 + 16))(v9, a2);
    sub_2168ED33C(&v10, v9);
    sub_2168EE084((uint64_t)v9);
    if (v8) {
      sub_216784EC4(v8);
    }
  }
  double v4 = 0.0;
  if (sub_21691CE68((pxrInternal__aapl__pxrReserved__::VtValue *)&v10))
  {
    if ((v11 & 4) != 0) {
      uint64_t v5 = (double *)(*(uint64_t (**)(uint64_t *))((v11 & 0xFFFFFFFFFFFFFFF8) + 168))(&v10);
    }
    else {
      uint64_t v5 = (double *)&v10;
    }
    double v4 = *v5;
  }
  sub_2168EE084((uint64_t)&v10);
  return v4;
}

void sub_2171D2CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  if (a4) {
    sub_216784EC4(a4);
  }
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_2171D2CFC@<X0>(uint64_t *a1@<X0>, _DWORD *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  double v8 = operator new(0x58uLL);
  sub_2171C4B5C((uint64_t)v8, a1, a2, *a3);

  return sub_2171C4CCC(a4, (uint64_t)v8);
}

void sub_2171D2D6C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2171D2D84(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171D2DAC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2171D2DDC(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77EB58)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_2171D2E20(uint64_t a1)
{
  *(void *)a1 = &unk_26C77EB80;
  uint64_t v2 = *(void *)(a1 + 16);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 12));
  sub_21697C414((_DWORD *)(a1 + 8));

  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase((pxrInternal__aapl__pxrReserved__::HdDataSourceBase *)a1);
}

void sub_2171D2E9C(uint64_t a1)
{
  *(void *)a1 = &unk_26C77EB80;
  uint64_t v2 = *(void *)(a1 + 16);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 12));
  sub_21697C414((_DWORD *)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase((pxrInternal__aapl__pxrReserved__::HdDataSourceBase *)a1);

  operator delete(v3);
}

uint64_t sub_2171D2F1C@<X0>(void **a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  if (a3 == 0.0)
  {
    double v4 = a1 + 1;
    uint64_t v5 = a1 + 2;
    uint64_t v6 = *(uint64_t (**)(void *, void **, void **))(*a1[3] + 296);
    uint64_t v7 = a1[3];
    return v6(v7, v4, v5);
  }
  else
  {
    uint64_t result = ((uint64_t (*)(void **))(*a1)[4])(a1);
    *(void *)(a2 + 8) = &unk_26C7501AB;
    *(unsigned char *)a2 = result;
  }
  return result;
}

uint64_t sub_2171D2FD4(uint64_t a1, uint64_t a2, float a3, float a4)
{
  sub_2171D2CFC((uint64_t *)(a1 + 16), (_DWORD *)(a1 + 8), (uint64_t *)(a1 + 24), &v9);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, float, float))(*(void *)v9 + 24))(v9, a2, a3, a4);
  if (v10) {
    sub_216784EC4(v10);
  }
  return v7;
}

void sub_2171D306C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_2171D3084(uint64_t a1, float a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v11 = 0;
  uint64_t v2 = (_DWORD *)(a1 + 8);
  if (a2 == 0.0)
  {
    (*(void (**)(void *__return_ptr, void, _DWORD *, uint64_t))(**(void **)(a1 + 24) + 296))(v9, *(void *)(a1 + 24), v2, a1 + 16);
    sub_2168ED33C(&v10, v9);
    sub_2168EE084((uint64_t)v9);
  }
  else
  {
    sub_2171D2CFC((uint64_t *)(a1 + 16), v2, (uint64_t *)(a1 + 24), &v7);
    (*(void (**)(void *__return_ptr, float))(*(void *)v7 + 16))(v9, a2);
    sub_2168ED33C(&v10, v9);
    sub_2168EE084((uint64_t)v9);
    if (v8) {
      sub_216784EC4(v8);
    }
  }
  if (sub_216959490((pxrInternal__aapl__pxrReserved__::VtValue *)&v10))
  {
    if ((v11 & 4) != 0) {
      double v4 = (uint64_t *)(*(uint64_t (**)(uint64_t *))((v11 & 0xFFFFFFFFFFFFFFF8) + 168))(&v10);
    }
    else {
      double v4 = &v10;
    }
    BOOL v5 = *(unsigned char *)v4 != 0;
  }
  else
  {
    BOOL v5 = 0;
  }
  sub_2168EE084((uint64_t)&v10);
  return v5;
}

void sub_2171D31F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  if (a4) {
    sub_216784EC4(a4);
  }
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2171D3228(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171D3250(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2171D3280(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77EC20)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void *sub_2171D32C4@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  double v8 = operator new(0x20uLL);
  sub_2171D37E4((uint64_t)v8, a1, a2, *a3);

  return sub_2171D3918(a4, (uint64_t)v8);
}

void sub_2171D3334(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2171D3348(uint64_t a1)
{
  *(void *)a1 = &unk_26C77EC48;
  uint64_t v2 = *(void *)(a1 + 16);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 12));
  sub_21697C414((_DWORD *)(a1 + 8));

  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase((pxrInternal__aapl__pxrReserved__::HdDataSourceBase *)a1);
}

void sub_2171D33C4(uint64_t a1)
{
  *(void *)a1 = &unk_26C77EC48;
  uint64_t v2 = *(void *)(a1 + 16);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 12));
  sub_21697C414((_DWORD *)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase((pxrInternal__aapl__pxrReserved__::HdDataSourceBase *)a1);

  operator delete(v3);
}

uint64_t sub_2171D3444@<X0>(void **a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  if (a3 == 0.0)
  {
    double v4 = a1 + 1;
    BOOL v5 = a1 + 2;
    uint64_t v6 = *(uint64_t (**)(void *, void **, void **))(*a1[3] + 296);
    uint64_t v7 = a1[3];
    return v6(v7, v4, v5);
  }
  else
  {
    uint64_t result = ((uint64_t (*)(void **))(*a1)[4])(a1);
    *(void *)(a2 + 8) = &unk_26C750543;
    *(_DWORD *)a2 = result;
  }
  return result;
}

uint64_t sub_2171D34FC(uint64_t a1, uint64_t a2, float a3, float a4)
{
  sub_2171D2CFC((uint64_t *)(a1 + 16), (_DWORD *)(a1 + 8), (uint64_t *)(a1 + 24), &v9);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, float, float))(*(void *)v9 + 24))(v9, a2, a3, a4);
  if (v10) {
    sub_216784EC4(v10);
  }
  return v7;
}

void sub_2171D3594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2171D35AC(uint64_t a1, float a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v11 = 0;
  uint64_t v2 = (_DWORD *)(a1 + 8);
  if (a2 == 0.0)
  {
    (*(void (**)(void *__return_ptr, void, _DWORD *, uint64_t))(**(void **)(a1 + 24) + 296))(v9, *(void *)(a1 + 24), v2, a1 + 16);
    sub_2168ED33C(&v10, v9);
    sub_2168EE084((uint64_t)v9);
  }
  else
  {
    sub_2171D2CFC((uint64_t *)(a1 + 16), v2, (uint64_t *)(a1 + 24), &v7);
    (*(void (**)(void *__return_ptr, float))(*(void *)v7 + 16))(v9, a2);
    sub_2168ED33C(&v10, v9);
    sub_2168EE084((uint64_t)v9);
    if (v8) {
      sub_216784EC4(v8);
    }
  }
  if (sub_21695A85C((pxrInternal__aapl__pxrReserved__::VtValue *)&v10))
  {
    if ((v11 & 4) != 0) {
      double v4 = (unsigned int *)(*(uint64_t (**)(uint64_t *))((v11 & 0xFFFFFFFFFFFFFFF8) + 168))(&v10);
    }
    else {
      double v4 = (unsigned int *)&v10;
    }
    uint64_t v5 = *v4;
  }
  else
  {
    uint64_t v5 = 0;
  }
  sub_2168EE084((uint64_t)&v10);
  return v5;
}

void sub_2171D3714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  if (a4) {
    sub_216784EC4(a4);
  }
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2171D3748(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171D3770(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2171D37A0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77ECE8)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t sub_2171D37E4(uint64_t a1, _DWORD *a2, uint64_t *a3, uint64_t a4)
{
  *(void *)a1 = &unk_26C77ED10;
  sub_216981010((_DWORD *)(a1 + 8), a2);
  sub_21698105C((_DWORD *)(a1 + 12), a2 + 1);
  uint64_t v8 = *a3;
  *(void *)(a1 + 16) = *a3;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 16) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(a1 + 24) = a4;
  if (!a4)
  {
    v10[0] = "hd/dataSourceLegacyPrim.cpp";
    v10[1] = "Hd_TypedDataSourceLegacyCameraParamValue";
    void v10[2] = 1142;
    v10[3] = "pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Hd_TypedDataSourceLegacyCameraParamValue<float>::H"
             "d_TypedDataSourceLegacyCameraParamValue(const SdfPath &, const TfToken &, HdSceneDelegate *) [T = float]";
    char v11 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v10, "_sceneDelegate", 0);
  }
  return a1;
}

void sub_2171D38D8(_Unwind_Exception *a1)
{
  uint64_t v5 = *((void *)v1 + 2);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v3);
  sub_21697C414(v2);
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(v1);
  _Unwind_Resume(a1);
}

void *sub_2171D3918(void *a1, uint64_t a2)
{
  *a1 = a2;
  double v4 = operator new(0x20uLL);
  void *v4 = &unk_26C77ED60;
  v4[1] = 0;
  _OWORD v4[2] = 0;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_2171D3970(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_2173254E8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_2171D3988(uint64_t a1)
{
  *(void *)a1 = &unk_26C77ED10;
  uint64_t v2 = *(void *)(a1 + 16);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 12));
  sub_21697C414((_DWORD *)(a1 + 8));

  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase((pxrInternal__aapl__pxrReserved__::HdDataSourceBase *)a1);
}

void sub_2171D3A04(uint64_t a1)
{
  *(void *)a1 = &unk_26C77ED10;
  uint64_t v2 = *(void *)(a1 + 16);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 12));
  sub_21697C414((_DWORD *)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase((pxrInternal__aapl__pxrReserved__::HdDataSourceBase *)a1);

  operator delete(v3);
}

void sub_2171D3A84(void **a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  if (a3 == 0.0)
  {
    double v4 = a1 + 1;
    uint64_t v5 = a1 + 2;
    uint64_t v6 = *(void (**)(void *, void **, void **))(*a1[3] + 296);
    uint64_t v7 = a1[3];
    v6(v7, v4, v5);
  }
  else
  {
    float v8 = ((float (*)(void **))(*a1)[4])(a1);
    *(void *)(a2 + 8) = &unk_26C750A4B;
    *(float *)a2 = v8;
  }
}

uint64_t sub_2171D3B3C(uint64_t a1, uint64_t a2, float a3, float a4)
{
  sub_2171D2CFC((uint64_t *)(a1 + 16), (_DWORD *)(a1 + 8), (uint64_t *)(a1 + 24), &v9);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, float, float))(*(void *)v9 + 24))(v9, a2, a3, a4);
  if (v10) {
    sub_216784EC4(v10);
  }
  return v7;
}

void sub_2171D3BD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  _Unwind_Resume(exception_object);
}

float sub_2171D3BEC(uint64_t a1, float a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v11 = 0;
  uint64_t v2 = (_DWORD *)(a1 + 8);
  if (a2 == 0.0)
  {
    (*(void (**)(void *__return_ptr, void, _DWORD *, uint64_t))(**(void **)(a1 + 24) + 296))(v9, *(void *)(a1 + 24), v2, a1 + 16);
    sub_2168ED33C(&v10, v9);
    sub_2168EE084((uint64_t)v9);
  }
  else
  {
    sub_2171D2CFC((uint64_t *)(a1 + 16), v2, (uint64_t *)(a1 + 24), &v7);
    (*(void (**)(void *__return_ptr, float))(*(void *)v7 + 16))(v9, a2);
    sub_2168ED33C(&v10, v9);
    sub_2168EE084((uint64_t)v9);
    if (v8) {
      sub_216784EC4(v8);
    }
  }
  float v4 = 0.0;
  if (sub_21691FA2C((pxrInternal__aapl__pxrReserved__::VtValue *)&v10))
  {
    if ((v11 & 4) != 0) {
      uint64_t v5 = (float *)(*(uint64_t (**)(uint64_t *))((v11 & 0xFFFFFFFFFFFFFFF8) + 168))(&v10);
    }
    else {
      uint64_t v5 = (float *)&v10;
    }
    float v4 = *v5;
  }
  sub_2168EE084((uint64_t)&v10);
  return v4;
}

void sub_2171D3D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  if (a4) {
    sub_216784EC4(a4);
  }
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2171D3D84(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171D3DAC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2171D3DDC(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77EDB0)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void *sub_2171D3E20@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  float v8 = operator new(0x20uLL);
  uint64_t v9 = *a3;
  *(void *)float v8 = &unk_26C77EEA0;
  sub_216981010(v8 + 2, a1);
  sub_21698105C(v8 + 3, a1 + 1);
  uint64_t v10 = *a2;
  *((void *)v8 + 2) = *a2;
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *((void *)v8 + 2) &= 0xFFFFFFFFFFFFFFF8;
  }
  *((void *)v8 + 3) = v9;
  if (!v9)
  {
    v12[0] = "hd/dataSourceLegacyPrim.cpp";
    v12[1] = "Hd_TypedDataSourceLegacyCameraParamValue";
    uint64_t v12[2] = 1142;
    void v12[3] = "pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Hd_TypedDataSourceLegacyCameraParamValue<pxrIntern"
             "al__aapl__pxrReserved__::GfVec2f>::Hd_TypedDataSourceLegacyCameraParamValue(const SdfPath &, const TfToken "
             "&, HdSceneDelegate *) [T = pxrInternal__aapl__pxrReserved__::GfVec2f]";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v12, "_sceneDelegate", 0);
  }
  *a4 = v8;
  uint64_t result = operator new(0x20uLL);
  void *result = &unk_26C77EEF0;
  result[1] = 0;
  result[2] = 0;
  result[3] = v8;
  a4[1] = result;
  return result;
}

void sub_2171D3F5C(_Unwind_Exception *a1)
{
  uint64_t v5 = *((void *)v1 + 2);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v3);
  sub_21697C414(v2);
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(v1);
  operator delete(v6);
  _Unwind_Resume(a1);
}

void sub_2171D3FD0(uint64_t a1)
{
  *(void *)a1 = &unk_26C77EDD8;
  uint64_t v2 = *(void *)(a1 + 16);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 12));
  sub_21697C414((_DWORD *)(a1 + 8));

  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase((pxrInternal__aapl__pxrReserved__::HdDataSourceBase *)a1);
}

void sub_2171D404C(uint64_t a1)
{
  *(void *)a1 = &unk_26C77EDD8;
  uint64_t v2 = *(void *)(a1 + 16);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 12));
  sub_21697C414((_DWORD *)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase((pxrInternal__aapl__pxrReserved__::HdDataSourceBase *)a1);

  operator delete(v3);
}

void *sub_2171D40CC@<X0>(void **a1@<X0>, atomic_uint **a2@<X8>, float a3@<S0>)
{
  if (a3 == 0.0)
  {
    float v4 = a1 + 1;
    uint64_t v5 = a1 + 2;
    uint64_t v6 = *(uint64_t (**)(void *, void **, void **))(*a1[3] + 296);
    uint64_t v7 = a1[3];
    return (void *)v6(v7, v4, v5);
  }
  else
  {
    uint64_t result = ((void *(*)(atomic_uint **__return_ptr))(*a1)[4])(&v11);
    uint64_t v9 = v11;
    *a2 = v11;
    a2[1] = (atomic_uint *)((char *)&off_26C750C70 + 1);
    if ((v9 & 7) != 0)
    {
      uint64_t v10 = (atomic_uint *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v10, 2u, memory_order_relaxed) & 1) == 0) {
        *a2 = v10;
      }
    }
    if ((v11 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return result;
}

uint64_t sub_2171D41C8(uint64_t a1, uint64_t a2, float a3, float a4)
{
  sub_2171D2CFC((uint64_t *)(a1 + 16), (_DWORD *)(a1 + 8), (uint64_t *)(a1 + 24), &v9);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, float, float))(*(void *)v9 + 24))(v9, a2, a3, a4);
  if (v10) {
    sub_216784EC4(v10);
  }
  return v7;
}

void sub_2171D4260(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2171D4278@<X0>(uint64_t a1@<X0>, atomic_uint **a2@<X8>, float a3@<S0>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v14 = 0;
  float v4 = (_DWORD *)(a1 + 8);
  if (a3 == 0.0)
  {
    (*(void (**)(void *__return_ptr, void, _DWORD *, uint64_t))(**(void **)(a1 + 24) + 296))(v12, *(void *)(a1 + 24), v4, a1 + 16);
    sub_2168ED33C(&v13, v12);
    sub_2168EE084((uint64_t)v12);
  }
  else
  {
    sub_2171D2CFC((uint64_t *)(a1 + 16), v4, (uint64_t *)(a1 + 24), &v10);
    (*(void (**)(void *__return_ptr, float))(*(void *)v10 + 16))(v12, a3);
    sub_2168ED33C(&v13, v12);
    sub_2168EE084((uint64_t)v12);
    if (v11) {
      sub_216784EC4(v11);
    }
  }
  if (!sub_21695DC44((pxrInternal__aapl__pxrReserved__::VtValue *)&v13))
  {
    float v8 = 0;
LABEL_12:
    *a2 = v8;
    return sub_2168EE084((uint64_t)&v13);
  }
  if ((v14 & 4) != 0) {
    uint64_t v6 = (atomic_uint **)(*(uint64_t (**)(uint64_t *))((v14 & 0xFFFFFFFFFFFFFFF8) + 168))(&v13);
  }
  else {
    uint64_t v6 = (atomic_uint **)&v13;
  }
  uint64_t v7 = *v6;
  *a2 = *v6;
  if ((v7 & 7) != 0)
  {
    float v8 = (atomic_uint *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
      goto LABEL_12;
    }
  }
  return sub_2168EE084((uint64_t)&v13);
}

void sub_2171D4400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  if (a4) {
    sub_216784EC4(a4);
  }
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2171D4434(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171D445C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2171D448C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77EE78)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_2171D44D0(uint64_t a1)
{
  *(void *)a1 = &unk_26C77EEA0;
  uint64_t v2 = *(void *)(a1 + 16);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 12));
  sub_21697C414((_DWORD *)(a1 + 8));

  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase((pxrInternal__aapl__pxrReserved__::HdDataSourceBase *)a1);
}

void sub_2171D454C(uint64_t a1)
{
  *(void *)a1 = &unk_26C77EEA0;
  uint64_t v2 = *(void *)(a1 + 16);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 12));
  sub_21697C414((_DWORD *)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase((pxrInternal__aapl__pxrReserved__::HdDataSourceBase *)a1);

  operator delete(v3);
}

void sub_2171D45CC(void **a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  if (a3 == 0.0)
  {
    float v4 = a1 + 1;
    uint64_t v5 = a1 + 2;
    uint64_t v6 = *(void (**)(void *, void **, void **))(*a1[3] + 296);
    uint64_t v7 = a1[3];
    v6(v7, v4, v5);
  }
  else
  {
    float v8 = ((float (*)(void **))(*a1)[4])(a1);
    *(void *)(a2 + 8) = (char *)&off_26C74E368 + 3;
    *(float *)a2 = v8;
    *(_DWORD *)(a2 + 4) = v9;
  }
}

uint64_t sub_2171D4684(uint64_t a1, uint64_t a2, float a3, float a4)
{
  sub_2171D2CFC((uint64_t *)(a1 + 16), (_DWORD *)(a1 + 8), (uint64_t *)(a1 + 24), &v9);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, float, float))(*(void *)v9 + 24))(v9, a2, a3, a4);
  if (v10) {
    sub_216784EC4(v10);
  }
  return v7;
}

void sub_2171D471C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  _Unwind_Resume(exception_object);
}

float sub_2171D4734(uint64_t a1, float a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v11 = 0;
  uint64_t v2 = (_DWORD *)(a1 + 8);
  if (a2 == 0.0)
  {
    (*(void (**)(void *__return_ptr, void, _DWORD *, uint64_t))(**(void **)(a1 + 24) + 296))(v9, *(void *)(a1 + 24), v2, a1 + 16);
    sub_2168ED33C(&v10, v9);
    sub_2168EE084((uint64_t)v9);
  }
  else
  {
    sub_2171D2CFC((uint64_t *)(a1 + 16), v2, (uint64_t *)(a1 + 24), &v7);
    (*(void (**)(void *__return_ptr, float))(*(void *)v7 + 16))(v9, a2);
    sub_2168ED33C(&v10, v9);
    sub_2168EE084((uint64_t)v9);
    if (v8) {
      sub_216784EC4(v8);
    }
  }
  float v4 = 0.0;
  if (sub_2169456CC((pxrInternal__aapl__pxrReserved__::VtValue *)&v10))
  {
    if ((v11 & 4) != 0) {
      uint64_t v5 = (float *)(*(uint64_t (**)(uint64_t *))((v11 & 0xFFFFFFFFFFFFFFF8) + 168))(&v10);
    }
    else {
      uint64_t v5 = (float *)&v10;
    }
    float v4 = *v5;
  }
  sub_2168EE084((uint64_t)&v10);
  return v4;
}

void sub_2171D48A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  if (a4) {
    sub_216784EC4(a4);
  }
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2171D48D4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171D48FC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2171D492C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77EF40)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_2171D4970(uint64_t a1)
{
  *(void *)a1 = &unk_26C77EF68;
  uint64_t v2 = *(void *)(a1 + 16);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 12));
  sub_21697C414((_DWORD *)(a1 + 8));

  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase((pxrInternal__aapl__pxrReserved__::HdDataSourceBase *)a1);
}

void sub_2171D49EC(uint64_t a1)
{
  *(void *)a1 = &unk_26C77EF68;
  uint64_t v2 = *(void *)(a1 + 16);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 12));
  sub_21697C414((_DWORD *)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase((pxrInternal__aapl__pxrReserved__::HdDataSourceBase *)a1);

  operator delete(v3);
}

void sub_2171D4A6C(uint64_t a1, float a2)
{
  uint64_t v2 = (_DWORD *)(a1 + 8);
  if (a2 == 0.0)
  {
    uint64_t v3 = a1 + 16;
    float v4 = *(void (**)(uint64_t, _DWORD *, uint64_t))(**(void **)(a1 + 24) + 296);
    uint64_t v5 = *(void *)(a1 + 24);
    v4(v5, v2, v3);
  }
  else
  {
    sub_2171D2CFC((uint64_t *)(a1 + 16), v2, (uint64_t *)(a1 + 24), &v7);
    (*(void (**)(uint64_t, float))(*(void *)v7 + 16))(v7, a2);
    if (v8) {
      sub_216784EC4(v8);
    }
  }
}

void sub_2171D4B58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2171D4B70(uint64_t a1, uint64_t a2, float a3, float a4)
{
  sub_2171D2CFC((uint64_t *)(a1 + 16), (_DWORD *)(a1 + 8), (uint64_t *)(a1 + 24), &v9);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, float, float))(*(void *)v9 + 24))(v9, a2, a3, a4);
  if (v10) {
    sub_216784EC4(v10);
  }
  return v7;
}

void sub_2171D4C08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_2171D4C24(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171D4C4C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2171D4C7C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77F000)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_2171D4CC4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171D4CEC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2171D4D1C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77F078)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_2171D4D60(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *a1)
{
  *(void *)a1 = &unk_26C77F0A0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)a1 + 3);
  sub_21697C414((_DWORD *)a1 + 2);

  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(a1);
}

void sub_2171D4DC0(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *a1)
{
  *(void *)a1 = &unk_26C77F0A0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)a1 + 3);
  sub_21697C414((_DWORD *)a1 + 2);
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(a1);

  operator delete(v2);
}

char *sub_2171D4E24@<X0>(void *a1@<X8>)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdTokens);
  if (!v2) {
    uint64_t v2 = sub_217198988(&pxrInternal__aapl__pxrReserved__::HdTokens);
  }
  uint64_t v3 = *((void *)v2 + 33);
  uint64_t v21 = v3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v21 &= 0xFFFFFFFFFFFFFFF8;
  }
  float v4 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdTokens);
  if (!v4) {
    float v4 = sub_217198988(&pxrInternal__aapl__pxrReserved__::HdTokens);
  }
  uint64_t v5 = *((void *)v4 + 44);
  uint64_t v22 = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v22 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdTokens);
  if (!v6) {
    uint64_t v6 = sub_217198988(&pxrInternal__aapl__pxrReserved__::HdTokens);
  }
  uint64_t v7 = *((void *)v6 + 71);
  uint64_t v23 = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v23 &= 0xFFFFFFFFFFFFFFF8;
  }
  float v8 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdTokens);
  if (!v8) {
    float v8 = sub_217198988(&pxrInternal__aapl__pxrReserved__::HdTokens);
  }
  uint64_t v9 = *((void *)v8 + 45);
  uint64_t v24 = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v24 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v10 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdTokens);
  if (!v10) {
    uint64_t v10 = sub_217198988(&pxrInternal__aapl__pxrReserved__::HdTokens);
  }
  uint64_t v11 = *((void *)v10 + 83);
  uint64_t v25 = v11;
  if ((v11 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v25 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v12 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdTokens);
  if (!v12) {
    uint64_t v12 = sub_217198988(&pxrInternal__aapl__pxrReserved__::HdTokens);
  }
  uint64_t v13 = *((void *)v12 + 49);
  uint64_t v26 = v13;
  if ((v13 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v26 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v14 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdTokens);
  if (!v14) {
    uint64_t v14 = sub_217198988(&pxrInternal__aapl__pxrReserved__::HdTokens);
  }
  uint64_t v15 = *((void *)v14 + 59);
  uint64_t v27 = v15;
  if ((v15 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v27 &= 0xFFFFFFFFFFFFFFF8;
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t result = (char *)operator new(0x38uLL);
  uint64_t v17 = 0;
  *a1 = result;
  a1[1] = result;
  a1[2] = result + 56;
  do
  {
    uint64_t v18 = *(uint64_t *)((char *)&v21 + v17);
    *(void *)&result[v17] = v18;
    if ((v18 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&result[v17] &= 0xFFFFFFFFFFFFFFF8;
    }
    v17 += 8;
  }
  while (v17 != 56);
  a1[1] = result + 56;
  for (uint64_t i = 48; i != -8; i -= 8)
  {
    uint64_t v20 = *(uint64_t *)((char *)&v21 + i);
    if ((v20 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return result;
}

void sub_2171D512C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  while (1)
  {
    uint64_t v13 = *((void *)v11 - 1);
    v11 -= 8;
    uint64_t v12 = v13;
    if ((v13 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if (v11 == &a11) {
      _Unwind_Resume(exception_object);
    }
  }
}

uint64_t sub_2171D5198@<X0>(uint64_t a1@<X0>, void *a2@<X1>, _OWORD *a3@<X8>)
{
  v14[2] = *MEMORY[0x263EF8340];
  v14[1] = 0;
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::HdLightTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLightTokens);
  if (!v6) {
    uint64_t v6 = sub_2171D54F4(&pxrInternal__aapl__pxrReserved__::HdLightTokens);
  }
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v6 + 30) & 0xFFFFFFFFFFFFFFF8)) {
    goto LABEL_11;
  }
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::HdLightTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLightTokens);
  if (!v7) {
    uint64_t v7 = sub_2171D54F4(&pxrInternal__aapl__pxrReserved__::HdLightTokens);
  }
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v7 + 32) & 0xFFFFFFFFFFFFFFF8)) {
    goto LABEL_11;
  }
  float v8 = (pxrInternal__aapl__pxrReserved__::HdLightTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLightTokens);
  if (!v8) {
    float v8 = sub_2171D54F4(&pxrInternal__aapl__pxrReserved__::HdLightTokens);
  }
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v8 + 31) & 0xFFFFFFFFFFFFFFF8)) {
LABEL_11:
  }
    (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 16) + 120))(&v13);
  else {
    (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 16) + 288))(&v13);
  }
  sub_2168ED33C(v14, &v13);
  sub_2168EE084((uint64_t)&v13);
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::HdLightTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLightTokens);
  if (!v9) {
    uint64_t v9 = sub_2171D54F4(&pxrInternal__aapl__pxrReserved__::HdLightTokens);
  }
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v9 + 30) & 0xFFFFFFFFFFFFFFF8)) {
    goto LABEL_22;
  }
  uint64_t v10 = (pxrInternal__aapl__pxrReserved__::HdLightTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLightTokens);
  if (!v10) {
    uint64_t v10 = sub_2171D54F4(&pxrInternal__aapl__pxrReserved__::HdLightTokens);
  }
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v10 + 32) & 0xFFFFFFFFFFFFFFF8)) {
    goto LABEL_22;
  }
  uint64_t v11 = (pxrInternal__aapl__pxrReserved__::HdLightTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLightTokens);
  if (!v11) {
    uint64_t v11 = sub_2171D54F4(&pxrInternal__aapl__pxrReserved__::HdLightTokens);
  }
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v11 + 31) & 0xFFFFFFFFFFFFFFF8)) {
LABEL_22:
  }
    sub_2171D5428(v14, &v13);
  else {
    pxrInternal__aapl__pxrReserved__::HdCreateTypedRetainedDataSource((pxrInternal__aapl__pxrReserved__ *)v14, &v13);
  }
  *a3 = v13;
  return sub_2168EE084((uint64_t)v14);
}

void sub_2171D53FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2171D5428@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  void v6[2] = *MEMORY[0x263EF8340];
  float v4 = operator new(0x18uLL);
  sub_2168EE4C4(v6, a1);
  sub_2171D5580(v4, v6);
  sub_2171D5698(a2, (uint64_t)v4);
  return sub_2168EE084((uint64_t)v6);
}

void sub_2171D54C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::HdLightTokens_StaticTokenType *sub_2171D54F4(atomic_ullong *a1)
{
  uint64_t result = sub_2171D553C();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::HdLightTokens_StaticTokenType::~HdLightTokens_StaticTokenType(result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::HdLightTokens_StaticTokenType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::HdLightTokens_StaticTokenType *sub_2171D553C()
{
  v0 = (pxrInternal__aapl__pxrReserved__::HdLightTokens_StaticTokenType *)operator new(0x120uLL);
  pxrInternal__aapl__pxrReserved__::HdLightTokens_StaticTokenType::HdLightTokens_StaticTokenType(v0);
  return v0;
}

void sub_2171D556C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_2171D5580(void *a1, void *a2)
{
  *a1 = &unk_26C77F0E8;
  sub_2168EE4C4(a1 + 1, a2);
  return a1;
}

void sub_2171D55C4(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(v1);
  _Unwind_Resume(a1);
}

void sub_2171D55D8(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *a1)
{
  *(void *)a1 = &unk_26C77F0E8;
  sub_2168EE084((uint64_t)a1 + 8);

  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(a1);
}

void sub_2171D562C(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *a1)
{
  *(void *)a1 = &unk_26C77F0E8;
  sub_2168EE084((uint64_t)a1 + 8);
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(a1);

  operator delete(v2);
}

void *sub_2171D5684@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_2168EE4C4(a2, (void *)(a1 + 8));
}

uint64_t sub_2171D5690()
{
  return 0;
}

void *sub_2171D5698(void *a1, uint64_t a2)
{
  *a1 = a2;
  float v4 = operator new(0x20uLL);
  void *v4 = &unk_26C77F130;
  v4[1] = 0;
  _OWORD v4[2] = 0;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_2171D56F0(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_2173254E8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_2171D570C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171D5734(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2171D5764(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77F180)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_2171D57AC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171D57D4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2171D5804(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77F1F8)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_2171D5848(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *a1)
{
  *(void *)a1 = &unk_26C77F220;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)a1 + 5);
  sub_21697C414((_DWORD *)a1 + 4);

  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(a1);
}

void sub_2171D58A8(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *a1)
{
  *(void *)a1 = &unk_26C77F220;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)a1 + 5);
  sub_21697C414((_DWORD *)a1 + 4);
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(a1);

  operator delete(v2);
}

char *sub_2171D590C@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::HdRenderBufferSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdRenderBufferSchemaTokens);
  if (!v2) {
    uint64_t v2 = sub_2171C1C70(&pxrInternal__aapl__pxrReserved__::HdRenderBufferSchemaTokens);
  }
  uint64_t v3 = (uint64_t *)((char *)v2 + 8);
  float v4 = *(uint64_t **)(a1 + 8);
  if ((unint64_t)v4 >= *(void *)(a1 + 16))
  {
    uint64_t v6 = sub_216973984((char **)a1, v3);
  }
  else
  {
    uint64_t v5 = *v3;
    uint64_t *v4 = *v3;
    if ((v5 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *v4 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v6 = (char *)(v4 + 1);
  }
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::HdRenderBufferSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdRenderBufferSchemaTokens);
  if (!v7) {
    uint64_t v7 = sub_2171C1C70(&pxrInternal__aapl__pxrReserved__::HdRenderBufferSchemaTokens);
  }
  float v8 = (uint64_t *)((char *)v7 + 16);
  uint64_t v9 = *(uint64_t **)(a1 + 8);
  if ((unint64_t)v9 >= *(void *)(a1 + 16))
  {
    uint64_t v11 = sub_216973984((char **)a1, v8);
  }
  else
  {
    uint64_t v10 = *v8;
    uint64_t *v9 = *v8;
    if ((v10 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *v9 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v11 = (char *)(v9 + 1);
  }
  *(void *)(a1 + 8) = v11;
  uint64_t v12 = (pxrInternal__aapl__pxrReserved__::HdRenderBufferSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdRenderBufferSchemaTokens);
  if (!v12) {
    uint64_t v12 = sub_2171C1C70(&pxrInternal__aapl__pxrReserved__::HdRenderBufferSchemaTokens);
  }
  long long v13 = (uint64_t *)((char *)v12 + 24);
  uint64_t v14 = *(uint64_t **)(a1 + 8);
  if ((unint64_t)v14 >= *(void *)(a1 + 16))
  {
    uint64_t result = sub_216973984((char **)a1, v13);
  }
  else
  {
    uint64_t v15 = *v13;
    *uint64_t v14 = *v13;
    if ((v15 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *v14 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t result = (char *)(v14 + 1);
  }
  *(void *)(a1 + 8) = result;
  return result;
}

void sub_2171D5A7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

double sub_2171D5A94@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::HdRenderBufferSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdRenderBufferSchemaTokens);
  if (!v6) {
    uint64_t v6 = sub_2171C1C70(&pxrInternal__aapl__pxrReserved__::HdRenderBufferSchemaTokens);
  }
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v6 + 1) & 0xFFFFFFFFFFFFFFF8))
  {
    uint64_t v9 = operator new(0x18uLL);
    uint64_t v10 = *(void *)(a1 + 24);
    void *v9 = &unk_26C77F268;
    v9[1] = v10;
    *((_DWORD *)v9 + 4) = *(_DWORD *)(a1 + 32);
    sub_2171D5DBC(&v13, (uint64_t)v9);
  }
  else
  {
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::HdRenderBufferSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdRenderBufferSchemaTokens);
    if (!v7) {
      uint64_t v7 = sub_2171C1C70(&pxrInternal__aapl__pxrReserved__::HdRenderBufferSchemaTokens);
    }
    if ((*a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v7 + 2) & 0xFFFFFFFFFFFFFFF8))
    {
      uint64_t v11 = operator new(0x10uLL);
      *(void *)uint64_t v11 = &unk_26C77F348;
      _OWORD v11[2] = *(_DWORD *)(a1 + 36);
      sub_2171D60F4(&v13, (uint64_t)v11);
    }
    else
    {
      float v8 = (pxrInternal__aapl__pxrReserved__::HdRenderBufferSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdRenderBufferSchemaTokens);
      if (!v8) {
        float v8 = sub_2171C1C70(&pxrInternal__aapl__pxrReserved__::HdRenderBufferSchemaTokens);
      }
      if ((*a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v8 + 3) & 0xFFFFFFFFFFFFFFF8)) {
        pxrInternal__aapl__pxrReserved__::HdRetainedTypedSampledDataSource<BOOL>::New((unsigned char *)(a1 + 40), (uint64_t *)&v13);
      }
      else {
        sub_2171D5C0C((uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16), a2, &v13);
      }
    }
  }
  double result = *(double *)&v13;
  *a3 = v13;
  return result;
}

void *sub_2171D5C0C@<X0>(uint64_t *a1@<X0>, _DWORD *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  float v8 = operator new(0x20uLL);
  uint64_t v9 = *a1;
  *float v8 = &unk_26C77F4F0;
  v8[1] = v9;
  sub_216981010((_DWORD *)v8 + 4, a2);
  sub_21698105C((_DWORD *)v8 + 5, a2 + 1);
  uint64_t v10 = *a3;
  uint64_t v8[3] = *a3;
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v8[3] &= 0xFFFFFFFFFFFFFFF8;
  }
  *a4 = v8;
  double result = operator new(0x20uLL);
  void *result = &unk_26C77F538;
  result[1] = 0;
  result[2] = 0;
  result[3] = v8;
  a4[1] = result;
  return result;
}

void sub_2171D5CE4(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_2171D5D1C(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *a1)
{
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(a1);

  operator delete(v1);
}

_DWORD *sub_2171D5D44@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  a2[1] = (char *)&off_26C755F50 + 2;
  double result = operator new(0x10uLL);
  *(void *)double result = *(void *)(a1 + 8);
  result[2] = *(_DWORD *)(a1 + 16);
  atomic_store(0, result + 3);
  *a2 = result;
  atomic_fetch_add_explicit(result + 3, 1u, memory_order_relaxed);
  return result;
}

uint64_t sub_2171D5DA4()
{
  return 0;
}

uint64_t sub_2171D5DAC(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void *sub_2171D5DBC(void *a1, uint64_t a2)
{
  *a1 = a2;
  float v4 = operator new(0x20uLL);
  void *v4 = &unk_26C77F2D0;
  v4[1] = 0;
  _OWORD v4[2] = 0;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_2171D5E14(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_2173254E8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_2171D5E30(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171D5E58(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2171D5E88(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77F320)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_2171D5ED0(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *a1)
{
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(a1);

  operator delete(v1);
}

uint64_t sub_2171D5EF8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = (char *)&off_26C77F3A0 + 3;
  *(_DWORD *)a2 = *(_DWORD *)(result + 8);
  return result;
}

uint64_t sub_2171D5F14()
{
  return 0;
}

uint64_t sub_2171D5F1C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

_DWORD *sub_2171D5F24(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

_DWORD *sub_2171D5F34(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_2171D5F40()
{
  return 1;
}

unint64_t sub_2171D5F48(int *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL sub_2171D5F68(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

BOOL sub_2171D5F7C(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_2171D5F94()
{
  return 0;
}

void *sub_2171D5FA4()
{
  return &unk_26C77F458;
}

uint64_t sub_2171D5FB0()
{
  return 0;
}

uint64_t sub_2171D5FB8()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_2171D5FC4()
{
  return 0;
}

uint64_t sub_2171D5FCC()
{
  return 0;
}

BOOL sub_2171D5FD4(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x80000002174E41F4 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2171D6010(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_26C77F458, a2, a3);
}

void *sub_2171D6034()
{
  return &unk_26C77F458;
}

_DWORD *sub_2171D6044@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = (char *)&off_26C77F3A0 + 3;
  *(_DWORD *)a2 = *result;
  return result;
}

void *sub_2171D6060(unsigned int *a1, void *a2)
{
  pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_26C77F458, *a1, (uint64_t)__p);
  if ((v8 & 0x80u) == 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)__p[0];
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v4 = v8;
  }
  else {
    uint64_t v4 = (uint64_t)__p[1];
  }
  uint64_t v5 = sub_216779180(a2, (uint64_t)v3, v4);
  if ((char)v8 < 0) {
    operator delete(__p[0]);
  }
  return v5;
}

void sub_2171D60D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2171D60F4(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  void *v4 = &unk_26C77F478;
  v4[1] = 0;
  _OWORD v4[2] = 0;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_2171D614C(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_2173254E8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_2171D6168(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171D6190(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2171D61C0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77F4C8)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_2171D6204(uint64_t a1)
{
  *(void *)a1 = &unk_26C77F4F0;
  uint64_t v2 = *(void *)(a1 + 24);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_21697C414((_DWORD *)(a1 + 16));

  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase((pxrInternal__aapl__pxrReserved__::HdDataSourceBase *)a1);
}

void sub_2171D6280(uint64_t a1)
{
  *(void *)a1 = &unk_26C77F4F0;
  uint64_t v2 = *(void *)(a1 + 24);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_21697C414((_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase((pxrInternal__aapl__pxrReserved__::HdDataSourceBase *)a1);

  operator delete(v3);
}

uint64_t sub_2171D6300(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 8) + 120))(*(void *)(a1 + 8), a1 + 16, a1 + 24);
}

uint64_t sub_2171D6334()
{
  return 0;
}

void sub_2171D6340(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171D6368(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2171D6398(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77F588)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_2171D63E0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171D6408(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2171D6438(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77F600)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_2171D647C(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *a1)
{
  *(void *)a1 = &unk_26C77F628;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)a1 + 5);
  sub_21697C414((_DWORD *)a1 + 4);

  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(a1);
}

void sub_2171D64DC(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *a1)
{
  *(void *)a1 = &unk_26C77F628;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)a1 + 5);
  sub_21697C414((_DWORD *)a1 + 4);
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(a1);

  operator delete(v2);
}

void *sub_2171D6540@<X0>(void *a1@<X8>)
{
  uint64_t v1 = a1;
  uint64_t v22 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B97038, memory_order_acquire) & 1) == 0)
  {
    int v4 = __cxa_guard_acquire(&qword_267B97038);
    uint64_t v1 = a1;
    if (v4)
    {
      uint64_t v5 = (pxrInternal__aapl__pxrReserved__::HdRenderSettingsSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdRenderSettingsSchemaTokens);
      if (!v5) {
        uint64_t v5 = sub_2171C1CFC(&pxrInternal__aapl__pxrReserved__::HdRenderSettingsSchemaTokens);
      }
      uint64_t v6 = *((void *)v5 + 1);
      uint64_t v17 = v6;
      if ((v6 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v17 &= 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v7 = (pxrInternal__aapl__pxrReserved__::HdRenderSettingsSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdRenderSettingsSchemaTokens);
      if (!v7) {
        uint64_t v7 = sub_2171C1CFC(&pxrInternal__aapl__pxrReserved__::HdRenderSettingsSchemaTokens);
      }
      uint64_t v8 = *((void *)v7 + 3);
      uint64_t v18 = v8;
      if ((v8 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v18 &= 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v9 = (pxrInternal__aapl__pxrReserved__::HdRenderSettingsSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdRenderSettingsSchemaTokens);
      if (!v9) {
        uint64_t v9 = sub_2171C1CFC(&pxrInternal__aapl__pxrReserved__::HdRenderSettingsSchemaTokens);
      }
      uint64_t v10 = *((void *)v9 + 4);
      uint64_t v19 = v10;
      if ((v10 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v19 &= 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v11 = (pxrInternal__aapl__pxrReserved__::HdRenderSettingsSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdRenderSettingsSchemaTokens);
      if (!v11) {
        uint64_t v11 = sub_2171C1CFC(&pxrInternal__aapl__pxrReserved__::HdRenderSettingsSchemaTokens);
      }
      uint64_t v12 = *((void *)v11 + 5);
      uint64_t v20 = v12;
      if ((v12 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v20 &= 0xFFFFFFFFFFFFFFF8;
      }
      long long v13 = (pxrInternal__aapl__pxrReserved__::HdRenderSettingsSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdRenderSettingsSchemaTokens);
      if (!v13) {
        long long v13 = sub_2171C1CFC(&pxrInternal__aapl__pxrReserved__::HdRenderSettingsSchemaTokens);
      }
      uint64_t v14 = *((void *)v13 + 6);
      uint64_t v21 = v14;
      if ((v14 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v21 &= 0xFFFFFFFFFFFFFFF8;
      }
      sub_216D30CFC(qword_267B97020, &v17, 5uLL);
      for (uint64_t i = 32; i != -8; i -= 8)
      {
        uint64_t v16 = *(uint64_t *)((char *)&v17 + i);
        if ((v16 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
      __cxa_atexit((void (*)(void *))sub_216B554D0, qword_267B97020, &dword_216758000);
      __cxa_guard_release(&qword_267B97038);
      uint64_t v1 = a1;
    }
  }
  void *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return sub_21698FA28(v1, (uint64_t *)qword_267B97020[0], unk_267B97028, (unk_267B97028 - qword_267B97020[0]) >> 3);
}

void sub_2171D67E0(_Unwind_Exception *a1)
{
}

double sub_2171D685C@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v133 = *MEMORY[0x263EF8340];
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::HdRenderSettingsSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdRenderSettingsSchemaTokens);
  if (!v6) {
    uint64_t v6 = sub_2171C1CFC(&pxrInternal__aapl__pxrReserved__::HdRenderSettingsSchemaTokens);
  }
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v6 + 1) & 0xFFFFFFFFFFFFFFF8))
  {
    uint64_t v7 = *(void *)(a1 + 8);
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::HdRenderSettingsPrimTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdRenderSettingsPrimTokens);
    if (!v8) {
      uint64_t v8 = sub_2171D7CA0(&pxrInternal__aapl__pxrReserved__::HdRenderSettingsPrimTokens);
    }
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)v7 + 120))(&v120, v7, a1 + 16, (uint64_t)v8 + 8);
    if (sub_2168EC434((pxrInternal__aapl__pxrReserved__::VtValue *)&v120))
    {
      if ((BYTE8(v120) & 4) != 0) {
        uint64_t v9 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(uint64_t (**)(long long *))((*((void *)&v120 + 1) & 0xFFFFFFFFFFFFFFF8) + 168))(&v120);
      }
      else {
        uint64_t v9 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)v120;
      }
      sub_2171D7884(v9, &v114);
      goto LABEL_154;
    }
    sub_2168EE084((uint64_t)&v120);
  }
  uint64_t v10 = (pxrInternal__aapl__pxrReserved__::HdRenderSettingsSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdRenderSettingsSchemaTokens);
  if (!v10) {
    uint64_t v10 = sub_2171C1CFC(&pxrInternal__aapl__pxrReserved__::HdRenderSettingsSchemaTokens);
  }
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v10 + 3) & 0xFFFFFFFFFFFFFFF8))
  {
    uint64_t v11 = *(void *)(a1 + 8);
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__::HdRenderSettingsPrimTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdRenderSettingsPrimTokens);
    if (!v12) {
      uint64_t v12 = sub_2171D7CA0(&pxrInternal__aapl__pxrReserved__::HdRenderSettingsPrimTokens);
    }
    (*(void (**)(uint64_t **__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)v11 + 120))(&v118, v11, a1 + 16, (uint64_t)v12 + 16);
    if (sub_2171D7C14((pxrInternal__aapl__pxrReserved__::VtValue *)&v118))
    {
      if ((v119 & 4) != 0) {
        long long v13 = (uint64_t *)(*(uint64_t (**)(uint64_t **))((v119 & 0xFFFFFFFFFFFFFFF8) + 168))(&v118);
      }
      else {
        long long v13 = v118;
      }
      uint64_t v75 = a3;
      long long v112 = 0;
      unint64_t v113 = 0;
      uint64_t v111 = 0;
      sub_2171A618C(&v111, 0xEEEEEEEEEEEEEEEFLL * ((v13[1] - *v13) >> 3));
      uint64_t v14 = *v13;
      uint64_t v15 = v13[1];
      if (*v13 != v15)
      {
        do
        {
          uint64_t v108 = 0;
          uint64_t v109 = 0;
          unint64_t v110 = 0;
          uint64_t v16 = *(_DWORD **)(v14 + 32);
          uint64_t v17 = *(_DWORD **)(v14 + 40);
          while (v16 != v17)
          {
            long long v123 = 0uLL;
            long long v124 = 0uLL;
            long long v121 = 0uLL;
            long long v122 = 0uLL;
            long long v120 = 0uLL;
            sub_2171B89C4(v16, &v105);
            long long v106 = v105;
            long long v105 = 0uLL;
            uint64_t v18 = pxrInternal__aapl__pxrReserved__::HdRenderVarSchema::Builder::SetPath(&v120, (uint64_t *)&v106);
            uint64_t v19 = (uint64_t *)(v16 + 2);
            sub_2171A3CE4(v19, &v103);
            long long v104 = v103;
            long long v103 = 0uLL;
            uint64_t v20 = pxrInternal__aapl__pxrReserved__::HdRenderVarSchema::Builder::SetDataType((uint64_t)v18, (uint64_t *)&v104);
            pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v97);
            sub_2171A3CE4((uint64_t *)&v97, &v101);
            long long v102 = v101;
            long long v101 = 0uLL;
            uint64_t v21 = pxrInternal__aapl__pxrReserved__::HdRenderVarSchema::Builder::SetSourceName(v20, (uint64_t *)&v102);
            v19 += 4;
            sub_2171A3CE4(v19, &v99);
            long long v100 = v99;
            long long v99 = 0uLL;
            uint64_t v22 = pxrInternal__aapl__pxrReserved__::HdRenderVarSchema::Builder::SetSourceType(v21, (uint64_t *)&v100);
            uint64_t v23 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)(v19 + 1);
            sub_2171D7884(v23, &v98);
            uint64_t v24 = (pxrInternal__aapl__pxrReserved__::HdRenderVarSchema::Builder *)pxrInternal__aapl__pxrReserved__::HdRenderVarSchema::Builder::SetNamespacedSettings(v22, (uint64_t *)&v98);
            pxrInternal__aapl__pxrReserved__::HdRenderVarSchema::Builder::Build(v24, &v107);
            long long v25 = v107;
            long long v107 = 0uLL;
            uint64_t v26 = v109;
            if ((unint64_t)v109 >= v110)
            {
              long long v76 = v25;
              uint64_t v27 = ((uint64_t)v109 - v108) >> 4;
              unint64_t v28 = v27 + 1;
              if ((unint64_t)(v27 + 1) >> 60) {
                sub_21677CB10();
              }
              uint64_t v29 = v110 - v108;
              if ((uint64_t)(v110 - v108) >> 3 > v28) {
                unint64_t v28 = v29 >> 3;
              }
              if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v30 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v30 = v28;
              }
              long long v117 = &v110;
              long long v31 = (char *)sub_216787EE0((uint64_t)&v110, v30);
              long long v32 = &v31[16 * v27];
              *(void *)&long long v114 = v31;
              *((void *)&v114 + 1) = v32;
              long long v116 = &v31[16 * v33];
              *(_OWORD *)long long v32 = v76;
              long long v115 = v32 + 16;
              sub_2171A640C(&v108, &v114);
              long long v34 = v109;
              sub_216788028((void **)&v114);
              uint64_t v109 = v34;
              if (*((void *)&v107 + 1)) {
                sub_216784EC4(*((std::__shared_weak_count **)&v107 + 1));
              }
            }
            else
            {
              _OWORD *v109 = v25;
              uint64_t v109 = v26 + 1;
            }
            if (*((void *)&v98 + 1)) {
              sub_216784EC4(*((std::__shared_weak_count **)&v98 + 1));
            }
            if (*((void *)&v100 + 1)) {
              sub_216784EC4(*((std::__shared_weak_count **)&v100 + 1));
            }
            if (*((void *)&v99 + 1)) {
              sub_216784EC4(*((std::__shared_weak_count **)&v99 + 1));
            }
            if (*((void *)&v102 + 1)) {
              sub_216784EC4(*((std::__shared_weak_count **)&v102 + 1));
            }
            if (*((void *)&v101 + 1)) {
              sub_216784EC4(*((std::__shared_weak_count **)&v101 + 1));
            }
            if ((v97 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v97 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            if (*((void *)&v104 + 1)) {
              sub_216784EC4(*((std::__shared_weak_count **)&v104 + 1));
            }
            if (*((void *)&v103 + 1)) {
              sub_216784EC4(*((std::__shared_weak_count **)&v103 + 1));
            }
            if (*((void *)&v106 + 1)) {
              sub_216784EC4(*((std::__shared_weak_count **)&v106 + 1));
            }
            if (*((void *)&v105 + 1)) {
              sub_216784EC4(*((std::__shared_weak_count **)&v105 + 1));
            }
            if (*((void *)&v124 + 1)) {
              sub_216784EC4(*((std::__shared_weak_count **)&v124 + 1));
            }
            if (*((void *)&v123 + 1)) {
              sub_216784EC4(*((std::__shared_weak_count **)&v123 + 1));
            }
            if (*((void *)&v122 + 1)) {
              sub_216784EC4(*((std::__shared_weak_count **)&v122 + 1));
            }
            if (*((void *)&v121 + 1)) {
              sub_216784EC4(*((std::__shared_weak_count **)&v121 + 1));
            }
            if (*((void *)&v120 + 1)) {
              sub_216784EC4(*((std::__shared_weak_count **)&v120 + 1));
            }
            uint64_t v16 = (_DWORD *)((char *)v23 + 8);
          }
          long long v131 = 0uLL;
          long long v132 = 0uLL;
          long long v129 = 0uLL;
          long long v130 = 0uLL;
          long long v127 = 0uLL;
          long long v128 = 0uLL;
          long long v125 = 0uLL;
          long long v126 = 0uLL;
          long long v123 = 0uLL;
          long long v124 = 0uLL;
          long long v121 = 0uLL;
          long long v122 = 0uLL;
          long long v120 = 0uLL;
          sub_2171B89C4((_DWORD *)v14, &v105);
          long long v106 = v105;
          long long v105 = 0uLL;
          long long v35 = pxrInternal__aapl__pxrReserved__::HdRenderProductSchema::Builder::SetPath(&v120, (uint64_t *)&v106);
          sub_2171A3CE4((uint64_t *)(v14 + 8), &v103);
          long long v104 = v103;
          long long v103 = 0uLL;
          uint64_t v36 = pxrInternal__aapl__pxrReserved__::HdRenderProductSchema::Builder::SetType((uint64_t)v35, (uint64_t *)&v104);
          sub_2171A3CE4((uint64_t *)(v14 + 16), &v101);
          long long v102 = v101;
          long long v101 = 0uLL;
          uint64_t v37 = pxrInternal__aapl__pxrReserved__::HdRenderProductSchema::Builder::SetName(v36, (uint64_t *)&v102);
          long long v38 = operator new(0x10uLL);
          *long long v38 = &unk_26C77F680;
          v38[1] = *(void *)(v14 + 24);
          sub_2171D7EC0(&v99, (uint64_t)v38);
          long long v100 = v99;
          long long v99 = 0uLL;
          uint64_t v39 = pxrInternal__aapl__pxrReserved__::HdRenderProductSchema::Builder::SetResolution(v37, (uint64_t *)&v100);
          uint64_t v95 = v108;
          uint64_t v96 = ((uint64_t)v109 - v108) >> 4;
          sub_2171D7DF8(&v96, &v95, &v97);
          long long v98 = v97;
          long long v97 = 0uLL;
          uint64_t v40 = pxrInternal__aapl__pxrReserved__::HdRenderProductSchema::Builder::SetRenderVars(v39, (uint64_t *)&v98);
          sub_2171B89C4((_DWORD *)(v14 + 56), &v93);
          long long v94 = v93;
          long long v93 = 0uLL;
          uint64_t v41 = pxrInternal__aapl__pxrReserved__::HdRenderProductSchema::Builder::SetCameraPrim(v40, (uint64_t *)&v94);
          uint64_t v42 = operator new(0x10uLL);
          *(void *)uint64_t v42 = &unk_26C77F760;
          v42[2] = *(_DWORD *)(v14 + 64);
          sub_2171D8028(&v91, (uint64_t)v42);
          long long v92 = v91;
          long long v91 = 0uLL;
          uint64_t v43 = pxrInternal__aapl__pxrReserved__::HdRenderProductSchema::Builder::SetPixelAspectRatio(v41, (uint64_t *)&v92);
          sub_2171A3CE4((uint64_t *)(v14 + 72), &v89);
          long long v90 = v89;
          long long v89 = 0uLL;
          uint64_t v44 = pxrInternal__aapl__pxrReserved__::HdRenderProductSchema::Builder::SetAspectRatioConformPolicy(v43, (uint64_t *)&v90);
          uint64_t v45 = operator new(0x10uLL);
          void *v45 = &unk_26C77E790;
          v45[1] = *(void *)(v14 + 80);
          sub_2171D22A4(&v87, (uint64_t)v45);
          long long v88 = v87;
          long long v87 = 0uLL;
          uint64_t v46 = pxrInternal__aapl__pxrReserved__::HdRenderProductSchema::Builder::SetApertureSize(v44, (uint64_t *)&v88);
          long long v77 = *(_OWORD *)(v14 + 88);
          char v47 = (char *)operator new(0x18uLL);
          *(void *)char v47 = &unk_26C77F828;
          *(_OWORD *)(v47 + 8) = v77;
          sub_2171D81D0(&v85, (uint64_t)v47);
          long long v86 = v85;
          long long v85 = 0uLL;
          uint64_t v48 = pxrInternal__aapl__pxrReserved__::HdRenderProductSchema::Builder::SetDataWindowNDC(v46, (uint64_t *)&v86);
          pxrInternal__aapl__pxrReserved__::HdRetainedTypedSampledDataSource<BOOL>::New((unsigned char *)(v14 + 104), (uint64_t *)&v83);
          long long v84 = v83;
          long long v83 = 0uLL;
          uint64_t v49 = pxrInternal__aapl__pxrReserved__::HdRenderProductSchema::Builder::SetDisableMotionBlur(v48, (uint64_t *)&v84);
          pxrInternal__aapl__pxrReserved__::HdRetainedTypedSampledDataSource<BOOL>::New((unsigned char *)(v14 + 105), (uint64_t *)&v81);
          long long v82 = v81;
          long long v81 = 0uLL;
          uint64_t v50 = pxrInternal__aapl__pxrReserved__::HdRenderProductSchema::Builder::SetDisableDepthOfField(v49, (uint64_t *)&v82);
          sub_2171D7884((pxrInternal__aapl__pxrReserved__::VtDictionary *)(v14 + 112), &v80);
          uint64_t v51 = (pxrInternal__aapl__pxrReserved__::HdRenderProductSchema::Builder *)pxrInternal__aapl__pxrReserved__::HdRenderProductSchema::Builder::SetNamespacedSettings(v50, (uint64_t *)&v80);
          pxrInternal__aapl__pxrReserved__::HdRenderProductSchema::Builder::Build(v51, &v107);
          long long v52 = v107;
          long long v107 = 0uLL;
          uint64_t v53 = v112;
          if ((unint64_t)v112 >= v113)
          {
            long long v78 = v52;
            uint64_t v54 = ((uint64_t)v112 - v111) >> 4;
            unint64_t v55 = v54 + 1;
            if ((unint64_t)(v54 + 1) >> 60) {
              sub_21677CB10();
            }
            uint64_t v56 = v113 - v111;
            if ((uint64_t)(v113 - v111) >> 3 > v55) {
              unint64_t v55 = v56 >> 3;
            }
            if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v57 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v57 = v55;
            }
            long long v117 = &v113;
            uint64_t v58 = (char *)sub_216787EE0((uint64_t)&v113, v57);
            char v59 = &v58[16 * v54];
            *(void *)&long long v114 = v58;
            *((void *)&v114 + 1) = v59;
            long long v116 = &v58[16 * v60];
            *(_OWORD *)char v59 = v78;
            long long v115 = v59 + 16;
            sub_2171A640C(&v111, &v114);
            long long v61 = v112;
            sub_216788028((void **)&v114);
            long long v112 = v61;
            if (*((void *)&v107 + 1)) {
              sub_216784EC4(*((std::__shared_weak_count **)&v107 + 1));
            }
          }
          else
          {
            *long long v112 = v52;
            long long v112 = v53 + 1;
          }
          if (*((void *)&v80 + 1)) {
            sub_216784EC4(*((std::__shared_weak_count **)&v80 + 1));
          }
          if (*((void *)&v82 + 1)) {
            sub_216784EC4(*((std::__shared_weak_count **)&v82 + 1));
          }
          if (*((void *)&v81 + 1)) {
            sub_216784EC4(*((std::__shared_weak_count **)&v81 + 1));
          }
          if (*((void *)&v84 + 1)) {
            sub_216784EC4(*((std::__shared_weak_count **)&v84 + 1));
          }
          if (*((void *)&v83 + 1)) {
            sub_216784EC4(*((std::__shared_weak_count **)&v83 + 1));
          }
          if (*((void *)&v86 + 1)) {
            sub_216784EC4(*((std::__shared_weak_count **)&v86 + 1));
          }
          if (*((void *)&v85 + 1)) {
            sub_216784EC4(*((std::__shared_weak_count **)&v85 + 1));
          }
          if (*((void *)&v88 + 1)) {
            sub_216784EC4(*((std::__shared_weak_count **)&v88 + 1));
          }
          if (*((void *)&v87 + 1)) {
            sub_216784EC4(*((std::__shared_weak_count **)&v87 + 1));
          }
          if (*((void *)&v90 + 1)) {
            sub_216784EC4(*((std::__shared_weak_count **)&v90 + 1));
          }
          if (*((void *)&v89 + 1)) {
            sub_216784EC4(*((std::__shared_weak_count **)&v89 + 1));
          }
          if (*((void *)&v92 + 1)) {
            sub_216784EC4(*((std::__shared_weak_count **)&v92 + 1));
          }
          if (*((void *)&v91 + 1)) {
            sub_216784EC4(*((std::__shared_weak_count **)&v91 + 1));
          }
          if (*((void *)&v94 + 1)) {
            sub_216784EC4(*((std::__shared_weak_count **)&v94 + 1));
          }
          if (*((void *)&v93 + 1)) {
            sub_216784EC4(*((std::__shared_weak_count **)&v93 + 1));
          }
          if (*((void *)&v98 + 1)) {
            sub_216784EC4(*((std::__shared_weak_count **)&v98 + 1));
          }
          if (*((void *)&v97 + 1)) {
            sub_216784EC4(*((std::__shared_weak_count **)&v97 + 1));
          }
          if (*((void *)&v100 + 1)) {
            sub_216784EC4(*((std::__shared_weak_count **)&v100 + 1));
          }
          if (*((void *)&v99 + 1)) {
            sub_216784EC4(*((std::__shared_weak_count **)&v99 + 1));
          }
          if (*((void *)&v102 + 1)) {
            sub_216784EC4(*((std::__shared_weak_count **)&v102 + 1));
          }
          if (*((void *)&v101 + 1)) {
            sub_216784EC4(*((std::__shared_weak_count **)&v101 + 1));
          }
          if (*((void *)&v104 + 1)) {
            sub_216784EC4(*((std::__shared_weak_count **)&v104 + 1));
          }
          if (*((void *)&v103 + 1)) {
            sub_216784EC4(*((std::__shared_weak_count **)&v103 + 1));
          }
          if (*((void *)&v106 + 1)) {
            sub_216784EC4(*((std::__shared_weak_count **)&v106 + 1));
          }
          if (*((void *)&v105 + 1)) {
            sub_216784EC4(*((std::__shared_weak_count **)&v105 + 1));
          }
          sub_2171D82E0(&v120);
          *(void *)&long long v120 = &v108;
          sub_216787968((void ***)&v120);
          v14 += 120;
        }
        while (v14 != v15);
      }
      *(void *)&long long v114 = ((uint64_t)v112 - v111) >> 4;
      uint64_t v108 = v111;
      sub_2171D7DF8(&v114, &v108, &v120);
      long long v79 = v120;
      *(void *)&long long v120 = &v111;
      sub_216787968((void ***)&v120);
      _OWORD *v75 = v79;
      long long v62 = (long long *)&v118;
      goto LABEL_155;
    }
    sub_2168EE084((uint64_t)&v118);
  }
  long long v63 = (pxrInternal__aapl__pxrReserved__::HdRenderSettingsSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdRenderSettingsSchemaTokens);
  if (!v63) {
    long long v63 = sub_2171C1CFC(&pxrInternal__aapl__pxrReserved__::HdRenderSettingsSchemaTokens);
  }
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v63 + 4) & 0xFFFFFFFFFFFFFFF8))
  {
    uint64_t v64 = *(void *)(a1 + 8);
    long long v65 = (pxrInternal__aapl__pxrReserved__::HdRenderSettingsPrimTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdRenderSettingsPrimTokens);
    if (!v65) {
      long long v65 = sub_2171D7CA0(&pxrInternal__aapl__pxrReserved__::HdRenderSettingsPrimTokens);
    }
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)v64 + 120))(&v120, v64, a1 + 16, (uint64_t)v65 + 24);
    if (sub_21699807C((pxrInternal__aapl__pxrReserved__::VtValue *)&v120))
    {
      if ((BYTE8(v120) & 4) == 0)
      {
        uint64_t v66 = v120;
LABEL_134:
        sub_2171C84DC(v66, &v114);
LABEL_154:
        *a3 = v114;
        long long v62 = &v120;
LABEL_155:
        sub_2168EE084((uint64_t)v62);
        return result;
      }
      goto LABEL_160;
    }
    sub_2168EE084((uint64_t)&v120);
  }
  long long v67 = (pxrInternal__aapl__pxrReserved__::HdRenderSettingsSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdRenderSettingsSchemaTokens);
  if (!v67) {
    long long v67 = sub_2171C1CFC(&pxrInternal__aapl__pxrReserved__::HdRenderSettingsSchemaTokens);
  }
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v67 + 5) & 0xFFFFFFFFFFFFFFF8))
  {
    uint64_t v68 = *(void *)(a1 + 8);
    long long v69 = (pxrInternal__aapl__pxrReserved__::HdRenderSettingsPrimTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdRenderSettingsPrimTokens);
    if (!v69) {
      long long v69 = sub_2171D7CA0(&pxrInternal__aapl__pxrReserved__::HdRenderSettingsPrimTokens);
    }
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)v68 + 120))(&v120, v68, a1 + 16, (uint64_t)v69 + 32);
    if (sub_21699807C((pxrInternal__aapl__pxrReserved__::VtValue *)&v120))
    {
      if ((BYTE8(v120) & 4) == 0)
      {
        uint64_t v66 = v120;
        goto LABEL_134;
      }
LABEL_160:
      uint64_t v66 = (*(uint64_t (**)(long long *))((*((void *)&v120 + 1) & 0xFFFFFFFFFFFFFFF8) + 168))(&v120);
      goto LABEL_134;
    }
    sub_2168EE084((uint64_t)&v120);
  }
  long long v70 = (pxrInternal__aapl__pxrReserved__::HdRenderSettingsSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdRenderSettingsSchemaTokens);
  if (!v70) {
    long long v70 = sub_2171C1CFC(&pxrInternal__aapl__pxrReserved__::HdRenderSettingsSchemaTokens);
  }
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v70 + 6) & 0xFFFFFFFFFFFFFFF8))
  {
    uint64_t v71 = *(void *)(a1 + 8);
    long long v72 = (pxrInternal__aapl__pxrReserved__::HdRenderSettingsPrimTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdRenderSettingsPrimTokens);
    if (!v72) {
      long long v72 = sub_2171D7CA0(&pxrInternal__aapl__pxrReserved__::HdRenderSettingsPrimTokens);
    }
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)v71 + 120))(&v120, v71, a1 + 16, (uint64_t)v72 + 40);
    if (sub_21695DC44((pxrInternal__aapl__pxrReserved__::VtValue *)&v120))
    {
      if ((BYTE8(v120) & 4) != 0) {
        uint64_t v73 = (uint64_t *)(*(uint64_t (**)(long long *))((*((void *)&v120 + 1) & 0xFFFFFFFFFFFFFFF8) + 168))(&v120);
      }
      else {
        uint64_t v73 = (uint64_t *)&v120;
      }
      sub_2171A3CE4(v73, &v114);
      goto LABEL_154;
    }
    sub_2168EE084((uint64_t)&v120);
  }
  sub_2171D5C0C((uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16), a2, &v120);
  double result = *(double *)&v120;
  *a3 = v120;
  return result;
}

void sub_2171D74F8(_Unwind_Exception *a1)
{
}

void sub_2171D7884(pxrInternal__aapl__pxrReserved__::VtDictionary *a1@<X0>, _OWORD *a2@<X8>)
{
  int64x2_t v47 = 0uLL;
  v48[0] = 0;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  unint64_t v46 = 0;
  unint64_t v4 = pxrInternal__aapl__pxrReserved__::VtDictionary::size(a1);
  sub_216973388((char **)&v47, v4);
  sub_2171A618C((uint64_t *)&v44, v4);
  uint64_t v39 = a2;
  uint64_t v42 = pxrInternal__aapl__pxrReserved__::VtDictionary::begin(a1);
  uint64_t v43 = v5;
  uint64_t v6 = pxrInternal__aapl__pxrReserved__::VtDictionary::end(a1);
  uint64_t v8 = v7;
  while (1)
  {
    uint64_t v9 = v42;
    BOOL v10 = !v8 || v42 == v6;
    BOOL v11 = v10;
    if (v43 == v8 && v11) {
      break;
    }
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v41);
    uint64_t v13 = v47.i64[1];
    if (v47.i64[1] >= v48[0])
    {
      uint64_t v16 = (v47.i64[1] - v47.i64[0]) >> 3;
      if ((unint64_t)(v16 + 1) >> 61) {
        sub_21677CB10();
      }
      unint64_t v17 = (v48[0] - v47.i64[0]) >> 2;
      if (v17 <= v16 + 1) {
        unint64_t v17 = v16 + 1;
      }
      if (v48[0] - v47.i64[0] >= 0x7FFFFFFFFFFFFFF8uLL) {
        unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v18 = v17;
      }
      uint64_t v51 = v48;
      if (v18) {
        uint64_t v19 = (char *)sub_21677CB28((uint64_t)v48, v18);
      }
      else {
        uint64_t v19 = 0;
      }
      uint64_t v20 = &v19[8 * v16];
      uint64_t v21 = &v19[8 * v18];
      uint64_t v50 = v21;
      *(void *)uint64_t v20 = v41;
      uint64_t v15 = v20 + 8;
      *(void *)&long long v41 = 0;
      *(void *)&v49[16] = v20 + 8;
      uint64_t v22 = (void *)v47.i64[1];
      uint64_t v23 = (void *)v47.i64[0];
      if (v47.i64[1] == v47.i64[0])
      {
        int64x2_t v25 = vdupq_n_s64(v47.u64[1]);
      }
      else
      {
        do
        {
          uint64_t v24 = *--v22;
          *((void *)v20 - 1) = v24;
          v20 -= 8;
          *uint64_t v22 = 0;
        }
        while (v22 != v23);
        int64x2_t v25 = v47;
        uint64_t v15 = *(void **)&v49[16];
        uint64_t v21 = v50;
      }
      v47.i64[0] = (uint64_t)v20;
      v47.i64[1] = (uint64_t)v15;
      *(int64x2_t *)&v49[8] = v25;
      uint64_t v26 = (char *)v48[0];
      v48[0] = v21;
      uint64_t v50 = v26;
      *(void *)uint64_t v49 = v25.i64[0];
      sub_2168BE9D8((uint64_t)v49);
      uint64_t v14 = v41;
    }
    else
    {
      uint64_t v14 = 0;
      *(void *)v47.i64[1] = v41;
      uint64_t v15 = (void *)(v13 + 8);
      *(void *)&long long v41 = 0;
    }
    v47.i64[1] = (uint64_t)v15;
    if ((v14 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    sub_2171D7D2C((void *)(v9 + 56), &v41);
    long long v29 = v41;
    long long v41 = 0uLL;
    unint64_t v30 = v45;
    if ((unint64_t)v45 >= v46)
    {
      long long v40 = v29;
      uint64_t v31 = (v45 - v44) >> 4;
      unint64_t v32 = v31 + 1;
      if ((unint64_t)(v31 + 1) >> 60) {
        sub_21677CB10();
      }
      uint64_t v33 = v46 - (void)v44;
      if ((uint64_t)(v46 - (void)v44) >> 3 > v32) {
        unint64_t v32 = v33 >> 3;
      }
      if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v34 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v34 = v32;
      }
      uint64_t v51 = &v46;
      long long v35 = (char *)sub_216787EE0((uint64_t)&v46, v34);
      uint64_t v36 = &v35[16 * v31];
      *(void *)uint64_t v49 = v35;
      *(void *)&v49[8] = v36;
      uint64_t v50 = &v35[16 * v37];
      *(_OWORD *)uint64_t v36 = v40;
      *(void *)&v49[16] = v36 + 16;
      sub_2171A640C((uint64_t *)&v44, v49);
      long long v38 = v45;
      sub_216788028((void **)v49);
      uint64_t v45 = v38;
      if (*((void *)&v41 + 1)) {
        sub_216784EC4(*((std::__shared_weak_count **)&v41 + 1));
      }
    }
    else
    {
      *(_OWORD *)uint64_t v45 = v29;
      uint64_t v45 = v30 + 16;
    }
    sub_2168EF104(&v42, v27, v28);
  }
  pxrInternal__aapl__pxrReserved__::HdRetainedContainerDataSource::New((v47.i64[1] - v47.i64[0]) >> 3, (uint64_t *)v47.i64[0], (uint64_t *)v44, v49);
  _OWORD *v39 = *(_OWORD *)v49;
  *(void *)uint64_t v49 = &v44;
  sub_216787968((void ***)v49);
  *(void *)uint64_t v49 = &v47;
  sub_216889A04((void ***)v49);
}

void sub_2171D7B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void ***a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  a16 = &a18;
  sub_216787968((void ***)&a16);
  a18 = (void **)&a21;
  sub_216889A04(&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_2171D7C14(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000002174CC587 & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;

  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_26C77F660);
}

pxrInternal__aapl__pxrReserved__::HdRenderSettingsPrimTokens_StaticTokenType *sub_2171D7CA0(atomic_ullong *a1)
{
  double result = sub_2171D7CE8();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::HdRenderSettingsPrimTokens_StaticTokenType::~HdRenderSettingsPrimTokens_StaticTokenType(result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::HdRenderSettingsPrimTokens_StaticTokenType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::HdRenderSettingsPrimTokens_StaticTokenType *sub_2171D7CE8()
{
  v0 = (pxrInternal__aapl__pxrReserved__::HdRenderSettingsPrimTokens_StaticTokenType *)operator new(0x50uLL);
  pxrInternal__aapl__pxrReserved__::HdRenderSettingsPrimTokens_StaticTokenType::HdRenderSettingsPrimTokens_StaticTokenType(v0);
  return v0;
}

void sub_2171D7D18(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2171D7D2C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  void v6[2] = *MEMORY[0x263EF8340];
  unint64_t v4 = operator new(0x18uLL);
  sub_2168EE4C4(v6, a1);
  sub_2171D5580(v4, v6);
  sub_2171D5698(a2, (uint64_t)v4);
  return sub_2168EE084((uint64_t)v6);
}

void sub_2171D7DC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_2171D7DF8@<X0>(void *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x210uLL);
  pxrInternal__aapl__pxrReserved__::HdRetainedSmallVectorDataSource::HdRetainedSmallVectorDataSource(v6, *a1, *a2);

  return sub_2171C0C80(a3, (uint64_t)v6);
}

void sub_2171D7E58(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2171D7E70(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *a1)
{
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(a1);

  operator delete(v1);
}

uint64_t sub_2171D7E98@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(result + 8);
  a2[1] = (char *)&off_26C755DE0 + 3;
  return result;
}

uint64_t sub_2171D7EB0()
{
  return 0;
}

uint64_t sub_2171D7EB8(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void *sub_2171D7EC0(void *a1, uint64_t a2)
{
  *a1 = a2;
  unint64_t v4 = operator new(0x20uLL);
  void *v4 = &unk_26C77F6E8;
  v4[1] = 0;
  _OWORD v4[2] = 0;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_2171D7F18(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_2173254E8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_2171D7F34(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171D7F5C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2171D7F8C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77F738)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_2171D7FD4(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *a1)
{
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(a1);

  operator delete(v1);
}

float sub_2171D7FFC@<S0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = &unk_26C750A4B;
  float result = *(float *)(a1 + 8);
  *(float *)a2 = result;
  return result;
}

uint64_t sub_2171D8018()
{
  return 0;
}

float sub_2171D8020(uint64_t a1)
{
  return *(float *)(a1 + 8);
}

void *sub_2171D8028(void *a1, uint64_t a2)
{
  *a1 = a2;
  unint64_t v4 = operator new(0x20uLL);
  void *v4 = &unk_26C77F7B0;
  v4[1] = 0;
  _OWORD v4[2] = 0;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_2171D8080(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_2173254E8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_2171D809C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171D80C4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2171D80F4(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77F800)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_2171D813C(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *a1)
{
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(a1);

  operator delete(v1);
}

unsigned int *sub_2171D8164@<X0>(uint64_t a1@<X0>, unsigned int **a2@<X8>)
{
  a2[1] = (unsigned int *)((char *)&off_26C74E7B8 + 2);
  uint64_t result = (unsigned int *)operator new(0x14uLL);
  *(_OWORD *)uint64_t result = *(_OWORD *)(a1 + 8);
  atomic_store(0, result + 4);
  *a2 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 4, 1u, memory_order_relaxed);
  return result;
}

uint64_t sub_2171D81BC()
{
  return 0;
}

float sub_2171D81C4(uint64_t a1)
{
  return *(float *)(a1 + 8);
}

void *sub_2171D81D0(void *a1, uint64_t a2)
{
  *a1 = a2;
  unint64_t v4 = operator new(0x20uLL);
  void *v4 = &unk_26C77F890;
  v4[1] = 0;
  _OWORD v4[2] = 0;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_2171D8228(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_2173254E8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_2171D8244(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171D826C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2171D829C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77F8E0)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void *sub_2171D82E0(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[25];
  if (v2) {
    sub_216784EC4(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[23];
  if (v3) {
    sub_216784EC4(v3);
  }
  unint64_t v4 = (std::__shared_weak_count *)a1[21];
  if (v4) {
    sub_216784EC4(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[19];
  if (v5) {
    sub_216784EC4(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)a1[17];
  if (v6) {
    sub_216784EC4(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)a1[15];
  if (v7) {
    sub_216784EC4(v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)a1[13];
  if (v8) {
    sub_216784EC4(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)a1[11];
  if (v9) {
    sub_216784EC4(v9);
  }
  BOOL v10 = (std::__shared_weak_count *)a1[9];
  if (v10) {
    sub_216784EC4(v10);
  }
  BOOL v11 = (std::__shared_weak_count *)a1[7];
  if (v11) {
    sub_216784EC4(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)a1[5];
  if (v12) {
    sub_216784EC4(v12);
  }
  uint64_t v13 = (std::__shared_weak_count *)a1[3];
  if (v13) {
    sub_216784EC4(v13);
  }
  uint64_t v14 = (std::__shared_weak_count *)a1[1];
  if (v14) {
    sub_216784EC4(v14);
  }
  return a1;
}

void sub_2171D83A4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171D83CC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2171D83FC(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77F958)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_2171D8440(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *a1)
{
  *(void *)a1 = &unk_26C77F980;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)a1 + 3);
  sub_21697C414((_DWORD *)a1 + 2);

  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(a1);
}

void sub_2171D84A0(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *a1)
{
  *(void *)a1 = &unk_26C77F980;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)a1 + 3);
  sub_21697C414((_DWORD *)a1 + 2);
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(a1);

  operator delete(v2);
}

char *sub_2171D8504@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::HdVolumeFieldSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdVolumeFieldSchemaTokens);
  if (!v2) {
    uint64_t v2 = sub_2171C13D8(&pxrInternal__aapl__pxrReserved__::HdVolumeFieldSchemaTokens);
  }
  uint64_t v3 = (uint64_t *)((char *)v2 + 8);
  unint64_t v4 = *(uint64_t **)(a1 + 8);
  if ((unint64_t)v4 >= *(void *)(a1 + 16))
  {
    uint64_t v6 = sub_216973984((char **)a1, v3);
  }
  else
  {
    uint64_t v5 = *v3;
    uint64_t *v4 = *v3;
    if ((v5 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *v4 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v6 = (char *)(v4 + 1);
  }
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::HdVolumeFieldSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdVolumeFieldSchemaTokens);
  if (!v7) {
    uint64_t v7 = sub_2171C13D8(&pxrInternal__aapl__pxrReserved__::HdVolumeFieldSchemaTokens);
  }
  uint64_t v8 = (uint64_t *)((char *)v7 + 16);
  uint64_t v9 = *(uint64_t **)(a1 + 8);
  if ((unint64_t)v9 >= *(void *)(a1 + 16))
  {
    BOOL v11 = sub_216973984((char **)a1, v8);
  }
  else
  {
    uint64_t v10 = *v8;
    uint64_t *v9 = *v8;
    if ((v10 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *v9 &= 0xFFFFFFFFFFFFFFF8;
    }
    BOOL v11 = (char *)(v9 + 1);
  }
  *(void *)(a1 + 8) = v11;
  uint64_t v12 = (pxrInternal__aapl__pxrReserved__::HdVolumeFieldSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdVolumeFieldSchemaTokens);
  if (!v12) {
    uint64_t v12 = sub_2171C13D8(&pxrInternal__aapl__pxrReserved__::HdVolumeFieldSchemaTokens);
  }
  uint64_t v13 = (uint64_t *)((char *)v12 + 24);
  uint64_t v14 = *(uint64_t **)(a1 + 8);
  if ((unint64_t)v14 >= *(void *)(a1 + 16))
  {
    uint64_t v16 = sub_216973984((char **)a1, v13);
  }
  else
  {
    uint64_t v15 = *v13;
    *uint64_t v14 = *v13;
    if ((v15 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *v14 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v16 = (char *)(v14 + 1);
  }
  *(void *)(a1 + 8) = v16;
  unint64_t v17 = (pxrInternal__aapl__pxrReserved__::HdVolumeFieldSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdVolumeFieldSchemaTokens);
  if (!v17) {
    unint64_t v17 = sub_2171C13D8(&pxrInternal__aapl__pxrReserved__::HdVolumeFieldSchemaTokens);
  }
  unint64_t v18 = (uint64_t *)((char *)v17 + 32);
  uint64_t v19 = *(uint64_t **)(a1 + 8);
  if ((unint64_t)v19 >= *(void *)(a1 + 16))
  {
    uint64_t v21 = sub_216973984((char **)a1, v18);
  }
  else
  {
    uint64_t v20 = *v18;
    *uint64_t v19 = *v18;
    if ((v20 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *v19 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v21 = (char *)(v19 + 1);
  }
  *(void *)(a1 + 8) = v21;
  uint64_t v22 = (pxrInternal__aapl__pxrReserved__::HdVolumeFieldSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdVolumeFieldSchemaTokens);
  if (!v22) {
    uint64_t v22 = sub_2171C13D8(&pxrInternal__aapl__pxrReserved__::HdVolumeFieldSchemaTokens);
  }
  uint64_t v23 = (uint64_t *)((char *)v22 + 40);
  uint64_t v24 = *(uint64_t **)(a1 + 8);
  if ((unint64_t)v24 >= *(void *)(a1 + 16))
  {
    uint64_t result = sub_216973984((char **)a1, v23);
  }
  else
  {
    uint64_t v25 = *v23;
    *uint64_t v24 = *v23;
    if ((v25 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *v24 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t result = (char *)(v24 + 1);
  }
  *(void *)(a1 + 8) = result;
  return result;
}

void sub_2171D8744(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2171D875C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  void v6[2] = *MEMORY[0x263EF8340];
  (*(void (**)(void *__return_ptr, void, uint64_t, uint64_t))(**(void **)(a1 + 16) + 120))(v6, *(void *)(a1 + 16), a1 + 8, a2);
  pxrInternal__aapl__pxrReserved__::HdCreateTypedRetainedDataSource((pxrInternal__aapl__pxrReserved__ *)v6, &v5);
  *a3 = v5;
  return sub_2168EE084((uint64_t)v6);
}

void sub_2171D8804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2171D8824(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171D884C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2171D887C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77FA18)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_2171D88C0(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *a1)
{
  *(void *)a1 = &unk_26C77FA40;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)a1 + 5);
  sub_21697C414((_DWORD *)a1 + 4);

  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(a1);
}

void sub_2171D8920(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *a1)
{
  *(void *)a1 = &unk_26C77FA40;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)a1 + 5);
  sub_21697C414((_DWORD *)a1 + 4);
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(a1);

  operator delete(v2);
}

void *sub_2171D8984@<X0>(void *a1@<X8>)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v2 = (uint64_t **)atomic_load((unint64_t *)&qword_267B97040);
  if (!v2)
  {
    uint64_t v2 = (uint64_t **)operator new(0x50uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2, "camera", 0);
    unint64_t v4 = v2 + 1;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2 + 1, "collection", 0);
    long long v5 = v2 + 2;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2 + 2, "drawTargetSet", 0);
    uint64_t v6 = v2 + 3;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2 + 3, "enable", 0);
    uint64_t v7 = v2 + 4;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2 + 4, "resolution", 0);
    uint64_t v8 = v2 + 5;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2 + 5, "aovBindings", 0);
    uint64_t v9 = v2 + 6;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2 + 6, "depthPriority", 0);
    uint64_t v10 = (void **)*v2;
    unint64_t v30 = v10;
    if ((v10 & 7) != 0)
    {
      BOOL v11 = (void **)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit((atomic_uint *volatile)v11, 2u, memory_order_relaxed) & 1) == 0) {
        unint64_t v30 = v11;
      }
    }
    uint64_t v12 = (atomic_uint *)*v4;
    uint64_t v31 = v12;
    if ((v12 & 7) != 0)
    {
      uint64_t v13 = (atomic_uint *)((unint64_t)v12 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v13, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v31 = v13;
      }
    }
    uint64_t v14 = (atomic_uint *)*v5;
    unint64_t v32 = v14;
    if ((v14 & 7) != 0)
    {
      uint64_t v15 = (atomic_uint *)((unint64_t)v14 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v15, 2u, memory_order_relaxed) & 1) == 0) {
        unint64_t v32 = v15;
      }
    }
    uint64_t v16 = (atomic_uint *)*v6;
    uint64_t v33 = v16;
    if ((v16 & 7) != 0)
    {
      unint64_t v17 = (atomic_uint *)((unint64_t)v16 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v17, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v33 = v17;
      }
    }
    unint64_t v18 = (atomic_uint *)*v7;
    unint64_t v34 = v18;
    if ((v18 & 7) != 0)
    {
      uint64_t v19 = (atomic_uint *)((unint64_t)v18 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v19, 2u, memory_order_relaxed) & 1) == 0) {
        unint64_t v34 = v19;
      }
    }
    uint64_t v20 = (atomic_uint *)*v8;
    long long v35 = v20;
    if ((v20 & 7) != 0)
    {
      uint64_t v21 = (atomic_uint *)((unint64_t)v20 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v21, 2u, memory_order_relaxed) & 1) == 0) {
        long long v35 = v21;
      }
    }
    uint64_t v22 = (atomic_uint *)*v9;
    uint64_t v36 = v22;
    if ((v22 & 7) != 0)
    {
      uint64_t v23 = (atomic_uint *)((unint64_t)v22 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v23, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v36 = v23;
      }
    }
    v2[7] = 0;
    v2[8] = 0;
    v2[9] = 0;
    uint64_t v24 = (uint64_t *)operator new(0x38uLL);
    uint64_t v25 = 0;
    v2[7] = v24;
    v2[8] = v24;
    v2[9] = v24 + 7;
    do
    {
      unint64_t v26 = (unint64_t)(&v30)[v25];
      v24[v25] = v26;
      if ((v26 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v24[v25] &= 0xFFFFFFFFFFFFFFF8;
      }
      ++v25;
    }
    while (v25 != 7);
    v2[8] = v24 + 7;
    for (uint64_t i = 6; i != -1; --i)
    {
      unint64_t v28 = (unint64_t)(&v30)[i];
      if ((v28 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    uint64_t v29 = 0;
    atomic_compare_exchange_strong(&qword_267B97040, (unint64_t *)&v29, (unint64_t)v2);
    if (v29)
    {
      unint64_t v30 = (void **)(v2 + 7);
      sub_216889A04(&v30);
      if ((*v9 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v8 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v7 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v6 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v5 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v4 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (((unint64_t)*v2 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)*v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v2);
      uint64_t v2 = (uint64_t **)atomic_load((unint64_t *)&qword_267B97040);
    }
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return sub_21698FA28(a1, v2[7], v2[8], v2[8] - v2[7]);
}

void sub_2171D8D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  sub_216889A04(&a9);
  uint64_t v19 = 48;
  while (1)
  {
    uint64_t v20 = *(void *)(&a11 + v19);
    if ((v20 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v19 -= 8;
    if (v19 == -8)
    {
      if ((*v17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v11);
      _Unwind_Resume(a1);
    }
  }
}

double sub_2171D8E6C@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  sub_2171D5C0C((uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16), a2, &v5);
  double result = *(double *)&v5;
  *a3 = v5;
  return result;
}

void sub_2171D8EB8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171D8EE0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2171D8F10(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77FAD8)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_2171D8F54(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *a1)
{
  *(void *)a1 = &unk_26C77FB00;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)a1 + 3);
  sub_21697C414((_DWORD *)a1 + 2);

  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(a1);
}

void sub_2171D8FB4(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *a1)
{
  *(void *)a1 = &unk_26C77FB00;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)a1 + 3);
  sub_21697C414((_DWORD *)a1 + 2);
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(a1);

  operator delete(v2);
}

char *sub_2171D9018@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
  if (!v2) {
    uint64_t v2 = sub_2171C1BE4(&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
  }
  uint64_t v3 = (uint64_t *)((char *)v2 + 8);
  unint64_t v4 = *(uint64_t **)(a1 + 8);
  if ((unint64_t)v4 >= *(void *)(a1 + 16))
  {
    uint64_t v6 = sub_216973984((char **)a1, v3);
  }
  else
  {
    uint64_t v5 = *v3;
    uint64_t *v4 = *v3;
    if ((v5 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *v4 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v6 = (char *)(v4 + 1);
  }
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
  if (!v7) {
    uint64_t v7 = sub_2171C1BE4(&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
  }
  uint64_t v8 = (uint64_t *)((char *)v7 + 16);
  uint64_t v9 = *(uint64_t **)(a1 + 8);
  if ((unint64_t)v9 >= *(void *)(a1 + 16))
  {
    BOOL v11 = sub_216973984((char **)a1, v8);
  }
  else
  {
    uint64_t v10 = *v8;
    uint64_t *v9 = *v8;
    if ((v10 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *v9 &= 0xFFFFFFFFFFFFFFF8;
    }
    BOOL v11 = (char *)(v9 + 1);
  }
  *(void *)(a1 + 8) = v11;
  uint64_t v12 = (pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
  if (!v12) {
    uint64_t v12 = sub_2171C1BE4(&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
  }
  uint64_t v13 = (uint64_t *)((char *)v12 + 24);
  uint64_t v14 = *(uint64_t **)(a1 + 8);
  if ((unint64_t)v14 >= *(void *)(a1 + 16))
  {
    uint64_t v16 = sub_216973984((char **)a1, v13);
  }
  else
  {
    uint64_t v15 = *v13;
    *uint64_t v14 = *v13;
    if ((v15 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *v14 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v16 = (char *)(v14 + 1);
  }
  *(void *)(a1 + 8) = v16;
  unint64_t v17 = (pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
  if (!v17) {
    unint64_t v17 = sub_2171C1BE4(&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
  }
  unint64_t v18 = (uint64_t *)((char *)v17 + 32);
  uint64_t v19 = *(uint64_t **)(a1 + 8);
  if ((unint64_t)v19 >= *(void *)(a1 + 16))
  {
    uint64_t v21 = sub_216973984((char **)a1, v18);
  }
  else
  {
    uint64_t v20 = *v18;
    *uint64_t v19 = *v18;
    if ((v20 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *v19 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v21 = (char *)(v19 + 1);
  }
  *(void *)(a1 + 8) = v21;
  uint64_t v22 = (pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
  if (!v22) {
    uint64_t v22 = sub_2171C1BE4(&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
  }
  uint64_t v23 = (uint64_t *)((char *)v22 + 40);
  uint64_t v24 = *(uint64_t **)(a1 + 8);
  if ((unint64_t)v24 >= *(void *)(a1 + 16))
  {
    uint64_t result = sub_216973984((char **)a1, v23);
  }
  else
  {
    uint64_t v25 = *v23;
    *uint64_t v24 = *v23;
    if ((v25 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *v24 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t result = (char *)(v24 + 1);
  }
  *(void *)(a1 + 8) = result;
  return result;
}

void sub_2171D9258(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

void sub_2171D9270(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v76 = *MEMORY[0x263EF8340];
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
  if (!v6) {
    uint64_t v6 = sub_2171C1BE4(&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
  }
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v6 + 1) & 0xFFFFFFFFFFFFFFF8))
  {
    uint64_t v13 = operator new(0x18uLL);
    uint64_t v14 = *(void *)(a1 + 16);
    *(void *)uint64_t v13 = &unk_26C77FB48;
    sub_216981010(v13 + 2, (_DWORD *)(a1 + 8));
    sub_21698105C(v13 + 3, (_DWORD *)(a1 + 12));
    *((void *)v13 + 2) = v14;
    uint64_t v15 = operator new(0x20uLL);
    *uint64_t v15 = &unk_26C77FC50;
    v15[1] = 0;
    void v15[2] = 0;
    void v15[3] = v13;
    *a3 = v13;
    a3[1] = v15;
  }
  else
  {
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
    if (!v7) {
      uint64_t v7 = sub_2171C1BE4(&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
    }
    if ((*a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v7 + 2) & 0xFFFFFFFFFFFFFFF8))
    {
      (*(void (**)(uint64_t **__return_ptr))(**(void **)(a1 + 16) + 320))(&v68);
      uint64_t v65 = 0;
      uint64_t v66 = 0;
      unint64_t v67 = 0;
      sub_2171A618C(&v65, 0xAAAAAAAAAAAAAAABLL * (v69 - v68));
      uint64_t v16 = v68;
      for (uint64_t i = v69; v16 != i; v16 = v21 + 1)
      {
        long long v74 = 0u;
        long long v75 = 0u;
        long long v73 = 0u;
        sub_2171A3CE4(v16, &v62);
        long long v63 = v62;
        long long v62 = 0uLL;
        unint64_t v18 = pxrInternal__aapl__pxrReserved__::HdExtComputationInputComputationSchema::Builder::SetName(&v73, (uint64_t *)&v63);
        uint64_t v19 = v16 + 1;
        sub_2171B89C4(v19, &v60);
        long long v61 = v60;
        long long v60 = 0uLL;
        uint64_t v20 = pxrInternal__aapl__pxrReserved__::HdExtComputationInputComputationSchema::Builder::SetSourceComputation((uint64_t)v18, (uint64_t *)&v61);
        uint64_t v21 = (uint64_t *)(v19 + 2);
        sub_2171A3CE4(v21, &v58);
        long long v59 = v58;
        long long v58 = 0uLL;
        uint64_t v22 = (pxrInternal__aapl__pxrReserved__::HdExtComputationInputComputationSchema::Builder *)pxrInternal__aapl__pxrReserved__::HdExtComputationInputComputationSchema::Builder::SetSourceComputationOutputName(v20, (uint64_t *)&v59);
        pxrInternal__aapl__pxrReserved__::HdExtComputationInputComputationSchema::Builder::Build(v22, &v64);
        long long v23 = v64;
        long long v64 = 0uLL;
        uint64_t v24 = v66;
        if ((unint64_t)v66 >= v67)
        {
          long long v56 = v23;
          uint64_t v25 = ((uint64_t)v66 - v65) >> 4;
          unint64_t v26 = v25 + 1;
          if ((unint64_t)(v25 + 1) >> 60) {
            sub_21677CB10();
          }
          uint64_t v27 = v67 - v65;
          if ((uint64_t)(v67 - v65) >> 3 > v26) {
            unint64_t v26 = v27 >> 3;
          }
          if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v28 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v28 = v26;
          }
          long long v72 = &v67;
          uint64_t v29 = (char *)sub_216787EE0((uint64_t)&v67, v28);
          unint64_t v30 = &v29[16 * v25];
          *(void *)&long long v70 = v29;
          *((void *)&v70 + 1) = v30;
          *((void *)&v71 + 1) = &v29[16 * v31];
          *(_OWORD *)unint64_t v30 = v56;
          *(void *)&long long v71 = v30 + 16;
          sub_2171A640C(&v65, &v70);
          unint64_t v32 = v66;
          sub_216788028((void **)&v70);
          uint64_t v66 = v32;
          if (*((void *)&v64 + 1)) {
            sub_216784EC4(*((std::__shared_weak_count **)&v64 + 1));
          }
        }
        else
        {
          _OWORD *v66 = v23;
          uint64_t v66 = v24 + 1;
        }
        if (*((void *)&v59 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v59 + 1));
        }
        if (*((void *)&v58 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v58 + 1));
        }
        if (*((void *)&v61 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v61 + 1));
        }
        if (*((void *)&v60 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v60 + 1));
        }
        if (*((void *)&v63 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v63 + 1));
        }
        if (*((void *)&v62 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v62 + 1));
        }
        if (*((void *)&v75 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v75 + 1));
        }
        if (*((void *)&v74 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v74 + 1));
        }
        if (*((void *)&v73 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v73 + 1));
        }
      }
      *(void *)&long long v70 = ((uint64_t)v66 - v65) >> 4;
      *(void *)&long long v64 = v65;
      sub_2171D7DF8(&v70, &v64, &v73);
      *(_OWORD *)a3 = v73;
      *(void *)&long long v73 = &v65;
      sub_216787968((void ***)&v73);
      *(void *)&long long v73 = &v68;
      sub_2171DA7C0((void ***)&v73);
    }
    else
    {
      uint64_t v8 = (pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
      if (!v8) {
        uint64_t v8 = sub_2171C1BE4(&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
      }
      if ((*a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v8 + 3) & 0xFFFFFFFFFFFFFFF8))
      {
        (*(void (**)(uint64_t **__return_ptr))(**(void **)(a1 + 16) + 328))(&v68);
        uint64_t v65 = 0;
        uint64_t v66 = 0;
        unint64_t v67 = 0;
        sub_2171A618C(&v65, 0xAAAAAAAAAAAAAAABLL * (v69 - v68));
        uint64_t v33 = (uint64_t)v68;
        for (uint64_t j = v69; (uint64_t *)v33 != j; v33 += 24)
        {
          long long v70 = 0u;
          long long v71 = 0u;
          sub_2171A3CE4((uint64_t *)v33, &v62);
          long long v63 = v62;
          long long v62 = 0uLL;
          long long v35 = pxrInternal__aapl__pxrReserved__::HdExtComputationOutputSchema::Builder::SetName(&v70, (uint64_t *)&v63);
          uint64_t v36 = (char *)operator new(0x18uLL);
          *(void *)uint64_t v36 = &unk_26C77CDB0;
          *(_OWORD *)(v36 + 8) = *(_OWORD *)(v33 + 8);
          sub_2171C5E68(&v60, (uint64_t)v36);
          long long v61 = v60;
          long long v60 = 0uLL;
          uint64_t v37 = (pxrInternal__aapl__pxrReserved__::HdExtComputationOutputSchema::Builder *)pxrInternal__aapl__pxrReserved__::HdExtComputationOutputSchema::Builder::SetValueType((uint64_t)v35, (uint64_t *)&v61);
          pxrInternal__aapl__pxrReserved__::HdExtComputationOutputSchema::Builder::Build(v37, &v64);
          long long v38 = v64;
          long long v64 = 0uLL;
          uint64_t v39 = v66;
          if ((unint64_t)v66 >= v67)
          {
            long long v57 = v38;
            uint64_t v40 = ((uint64_t)v66 - v65) >> 4;
            unint64_t v41 = v40 + 1;
            if ((unint64_t)(v40 + 1) >> 60) {
              sub_21677CB10();
            }
            uint64_t v42 = v67 - v65;
            if ((uint64_t)(v67 - v65) >> 3 > v41) {
              unint64_t v41 = v42 >> 3;
            }
            if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v43 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v43 = v41;
            }
            *(void *)&long long v75 = &v67;
            uint64_t v44 = (char *)sub_216787EE0((uint64_t)&v67, v43);
            uint64_t v45 = &v44[16 * v40];
            *(void *)&long long v73 = v44;
            *((void *)&v73 + 1) = v45;
            *((void *)&v74 + 1) = &v44[16 * v46];
            *(_OWORD *)uint64_t v45 = v57;
            *(void *)&long long v74 = v45 + 16;
            sub_2171A640C(&v65, &v73);
            int64x2_t v47 = v66;
            sub_216788028((void **)&v73);
            uint64_t v66 = v47;
            if (*((void *)&v64 + 1)) {
              sub_216784EC4(*((std::__shared_weak_count **)&v64 + 1));
            }
          }
          else
          {
            _OWORD *v66 = v38;
            uint64_t v66 = v39 + 1;
          }
          if (*((void *)&v61 + 1)) {
            sub_216784EC4(*((std::__shared_weak_count **)&v61 + 1));
          }
          if (*((void *)&v60 + 1)) {
            sub_216784EC4(*((std::__shared_weak_count **)&v60 + 1));
          }
          if (*((void *)&v63 + 1)) {
            sub_216784EC4(*((std::__shared_weak_count **)&v63 + 1));
          }
          if (*((void *)&v62 + 1)) {
            sub_216784EC4(*((std::__shared_weak_count **)&v62 + 1));
          }
          if (*((void *)&v71 + 1)) {
            sub_216784EC4(*((std::__shared_weak_count **)&v71 + 1));
          }
          if (*((void *)&v70 + 1)) {
            sub_216784EC4(*((std::__shared_weak_count **)&v70 + 1));
          }
        }
        *(void *)&long long v70 = ((uint64_t)v66 - v65) >> 4;
        *(void *)&long long v64 = v65;
        sub_2171D7DF8(&v70, &v64, &v73);
        *(_OWORD *)a3 = v73;
        *(void *)&long long v73 = &v65;
        sub_216787968((void ***)&v73);
        *(void *)&long long v73 = &v68;
        sub_21719DDBC((void ***)&v73);
      }
      else
      {
        uint64_t v9 = (pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
        if (!v9) {
          uint64_t v9 = sub_2171C1BE4(&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
        }
        if ((*a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v9 + 4) & 0xFFFFFFFFFFFFFFF8))
        {
          (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 16) + 360))(&v73);
          sub_2171D9D7C(&v73, &v70);
          *(_OWORD *)a3 = v70;
          if (SBYTE7(v74) < 0) {
            operator delete((void *)v73);
          }
        }
        else
        {
          uint64_t v10 = (pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
          if (!v10) {
            uint64_t v10 = sub_2171C1BE4(&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
          }
          if ((*a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v10 + 5) & 0xFFFFFFFFFFFFFFF8))
          {
            sub_2171D9DE8((_DWORD *)(a1 + 8), (uint64_t *)(a1 + 16), &v73);
            *(_OWORD *)a3 = v73;
          }
          else
          {
            BOOL v11 = (pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
            if (!v11) {
              BOOL v11 = sub_2171C1BE4(&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
            }
            if ((*a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v11 + 6) & 0xFFFFFFFFFFFFFFF8))
            {
              uint64_t v68 = 0;
              uint64_t v48 = *(void *)(a1 + 16);
              uint64_t v49 = a1 + 8;
              uint64_t v50 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdTokens);
              if (!v50) {
                uint64_t v50 = sub_217198988(&pxrInternal__aapl__pxrReserved__::HdTokens);
              }
              (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)v48 + 344))(&v73, v48, v49, (uint64_t)v50 + 136);
              if (sub_2171D9E74((pxrInternal__aapl__pxrReserved__::VtValue *)&v73))
              {
                if ((BYTE8(v73) & 4) != 0) {
                  uint64_t v51 = (uint64_t *)(*(uint64_t (**)(long long *))((*((void *)&v73 + 1) & 0xFFFFFFFFFFFFFFF8)
                }
                                                                         + 168))(&v73);
                else {
                  uint64_t v51 = (uint64_t *)&v73;
                }
                uint64_t v68 = (uint64_t *)*v51;
              }
            }
            else
            {
              uint64_t v12 = (pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
              if (!v12) {
                uint64_t v12 = sub_2171C1BE4(&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
              }
              if ((*a2 & 0xFFFFFFFFFFFFFFF8) != (*((void *)v12 + 7) & 0xFFFFFFFFFFFFFFF8))
              {
                *a3 = 0;
                a3[1] = 0;
                return;
              }
              uint64_t v68 = 0;
              uint64_t v52 = *(void *)(a1 + 16);
              uint64_t v53 = a1 + 8;
              uint64_t v54 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdTokens);
              if (!v54) {
                uint64_t v54 = sub_217198988(&pxrInternal__aapl__pxrReserved__::HdTokens);
              }
              (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)v52 + 344))(&v73, v52, v53, (uint64_t)v54 + 232);
              if (sub_2171D9E74((pxrInternal__aapl__pxrReserved__::VtValue *)&v73))
              {
                if ((BYTE8(v73) & 4) != 0) {
                  unint64_t v55 = (uint64_t *)(*(uint64_t (**)(long long *))((*((void *)&v73 + 1) & 0xFFFFFFFFFFFFFFF8)
                }
                                                                         + 168))(&v73);
                else {
                  unint64_t v55 = (uint64_t *)&v73;
                }
                uint64_t v68 = (uint64_t *)*v55;
              }
            }
            sub_2171D9EFC((uint64_t *)&v68, &v70);
            *(_OWORD *)a3 = v70;
            sub_2168EE084((uint64_t)&v73);
          }
        }
      }
    }
  }
}

void sub_2171D9B78(_Unwind_Exception *a1)
{
  sub_2168EE084(v1 - 128);
  _Unwind_Resume(a1);
}

void *sub_2171D9D7C@<X0>(long long *a1@<X0>, void *a2@<X8>)
{
  unint64_t v4 = operator new(0x20uLL);
  sub_2171DA8BC(v4, a1);

  return sub_2171DAA48(a2, (uint64_t)v4);
}

void sub_2171D9DD4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_2171D9DE8@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x18uLL);
  uint64_t v7 = *a2;
  *(void *)uint64_t v6 = &unk_26C77FDA8;
  sub_216981010(v6 + 2, a1);
  sub_21698105C(v6 + 3, a1 + 1);
  *((void *)v6 + 2) = v7;

  return sub_2171DAC1C(a3, (uint64_t)v6);
}

uint64_t sub_2171D9E74(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1 = *((void *)a1 + 1);
  if (!v1) {
    return 0;
  }
  if (!strcmp((const char *)(*(void *)(*(void *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(MEMORY[0x263F8C270] + 8) & 0x7FFFFFFFFFFFFFFFLL)))return 1; {
  if ((v1 & 4) == 0)
  }
    return 0;
  unint64_t v4 = (const std::type_info *)MEMORY[0x263F8C270];

  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, v4);
}

void *sub_2171D9EFC@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  unint64_t v4 = operator new(0x10uLL);
  uint64_t v5 = *a1;
  void *v4 = &unk_26C77FE58;
  v4[1] = v5;

  return sub_2171DAD80(a2, (uint64_t)v4);
}

void sub_2171D9F60(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *a1)
{
  *(void *)a1 = &unk_26C77FB48;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)a1 + 3);
  sub_21697C414((_DWORD *)a1 + 2);

  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(a1);
}

void sub_2171D9FC0(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *a1)
{
  *(void *)a1 = &unk_26C77FB48;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)a1 + 3);
  sub_21697C414((_DWORD *)a1 + 2);
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(a1);

  operator delete(v2);
}

uint64_t sub_2171DA024(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 16) + 312))(*(void *)(a1 + 16), a1 + 8);
}

void *sub_2171DA05C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = (_DWORD *)(a1 + 8);
  uint64_t v7 = operator new(0x58uLL);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(a1 + 16);
  void *v7 = &unk_26C77FB90;
  uint64_t v10 = *a2;
  v7[1] = *a2;
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v7[1] &= 0xFFFFFFFFFFFFFFF8;
  }
  sub_216981010((_DWORD *)v7 + 4, v6);
  sub_21698105C((_DWORD *)v8 + 5, (_DWORD *)(a1 + 12));
  sub_2171C3368((uint64_t)(v8 + 3));
  v8[10] = v9;
  if (!v9)
  {
    v12[0] = "hd/dataSourceLegacyPrim.cpp";
    v12[1] = "Hd_DataSourceLegacyExtComputationInput";
    void v12[2] = 1975;
    void v12[3] = "pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Hd_DataSourceLegacyExtComputationInput::Hd_DataSou"
             "rceLegacyExtComputationInput(const TfToken &, const SdfPath &, HdSceneDelegate *)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v12, "_sceneDelegate", 0);
  }
  uint64_t result = operator new(0x20uLL);
  void *result = &unk_26C77FBD8;
  result[1] = 0;
  result[2] = 0;
  result[3] = v8;
  *a3 = v8;
  a3[1] = result;
  return result;
}

void sub_2171DA1A4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 24) = &unk_26C77CAD8;
  sub_2171C3ABC(v1 + 56);
  if (*(_DWORD *)(v1 + 52) >= 2u) {
    free(*(void **)(v1 + 40));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v4);
  sub_217325664(v3, v2, (pxrInternal__aapl__pxrReserved__::HdDataSourceBase *)v1);
  _Unwind_Resume(a1);
}

void sub_2171DA23C(uint64_t a1)
{
  *(void *)a1 = &unk_26C77FB90;
  *(void *)(a1 + 24) = &unk_26C77CAD8;
  sub_2171C3ABC(a1 + 56);
  if (*(_DWORD *)(a1 + 52) >= 2u) {
    free(*(void **)(a1 + 40));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_21697C414((_DWORD *)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 8);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }

  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase((pxrInternal__aapl__pxrReserved__::HdDataSourceBase *)a1);
}

void sub_2171DA2F4(uint64_t a1)
{
  *(void *)a1 = &unk_26C77FB90;
  *(void *)(a1 + 24) = &unk_26C77CAD8;
  sub_2171C3ABC(a1 + 56);
  if (*(_DWORD *)(a1 + 52) >= 2u) {
    free(*(void **)(a1 + 40));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_21697C414((_DWORD *)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 8);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase((pxrInternal__aapl__pxrReserved__::HdDataSourceBase *)a1);

  operator delete(v3);
}

void sub_2171DA3B0(uint64_t a1@<X0>, void *a2@<X8>, float a3@<S0>)
{
  if (a3 == 0.0)
  {
    uint64_t v5 = *(void (**)(void))(**(void **)(a1 + 80) + 344);
    v5();
  }
  else
  {
    if (!*(void *)(a1 + 32)) {
      sub_2171DA4E0(*(void *)(a1 + 80), a1 + 16, a1 + 8, a1 + 24);
    }
    sub_2171C5048(a1 + 24, a2, a3);
  }
}

uint64_t sub_2171DA478(uint64_t a1, uint64_t a2, float a3, float a4)
{
  if (!*(void *)(a1 + 32)) {
    sub_2171DA4E0(*(void *)(a1 + 80), a1 + 16, a1 + 8, a1 + 24);
  }
  sub_2171C429C(a1 + 24, a2, a3, a4);
  return 1;
}

unint64_t sub_2171DA4E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)(a4 + 16);
  uint64_t v9 = (void *)(a4 + 16);
  if (*(_DWORD *)(a4 + 28) >= 2u) {
    uint64_t v9 = (void *)*v8;
  }
  uint64_t v10 = (void *)(a4 + 32);
  BOOL v11 = (void *)(a4 + 32);
  if (*(_DWORD *)(a4 + 52) >= 2u) {
    BOOL v11 = (void *)*v10;
  }
  unint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void *, void *))(*(void *)a1 + 352))(a1, a2, a3, 1, v9, v11);
  unint64_t v13 = result;
  if (result >= 2)
  {
    (**(void (***)(uint64_t, unint64_t))a4)(a4, result);
    if (*(_DWORD *)(a4 + 28) >= 2u) {
      uint64_t v8 = (void *)*v8;
    }
    if (*(_DWORD *)(a4 + 52) >= 2u) {
      uint64_t v10 = (void *)*v10;
    }
    unint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t, void *, void *))(*(void *)a1 + 352))(a1, a2, a3, v13, v8, v10);
    if (v13 != result)
    {
      v14[0] = "hd/sceneDelegate.h";
      v14[1] = "SampleExtComputationInput";
      v14[2] = 870;
      void v14[3] = "void pxrInternal__aapl__pxrReserved__::HdSceneDelegate::SampleExtComputationInput(const SdfPath &, const "
               "TfToken &, HdTimeSampleArray<VtValue, CAPACITY> *) [CAPACITY = 1U]";
      char v15 = 0;
      unint64_t result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v14, "authoredSamples == authoredSamplesSecondAttempt", 0);
    }
  }
  *(void *)(a4 + 8) = v13;
  return result;
}

void sub_2171DA684(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171DA6AC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2171DA6DC(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77FC28)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_2171DA724(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171DA74C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2171DA77C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77FCA0)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_2171DA7C0(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 24;
        sub_2171DA858((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_DWORD *sub_2171DA858(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 12));
  uint64_t result = sub_21697C414((_DWORD *)(a2 + 8));
  if ((*(void *)a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void *sub_2171DA8BC(void *a1, long long *a2)
{
  *a1 = &unk_26C77FCC8;
  uint64_t v3 = a1 + 1;
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(v3, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    v3[2] = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v3 = v4;
  }
  return a1;
}

void sub_2171DA924(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(v1);
  _Unwind_Resume(a1);
}

void sub_2171DA938(void **this)
{
  *this = &unk_26C77FCC8;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }

  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase((pxrInternal__aapl__pxrReserved__::HdDataSourceBase *)this);
}

void sub_2171DA998(void **this)
{
  *this = &unk_26C77FCC8;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase((pxrInternal__aapl__pxrReserved__::HdDataSourceBase *)this);

  operator delete(v2);
}

unsigned int *sub_2171DA9FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = &off_26C750BB8;
  return sub_21691B31C((unsigned int **)a2, a1 + 8);
}

uint64_t sub_2171DAA14()
{
  return 0;
}

char *sub_2171DAA1C@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[31] < 0) {
    return (char *)sub_216778F24((unsigned char *)a2, *((void **)result + 1), *((void *)result + 2));
  }
  *(_OWORD *)a2 = *(_OWORD *)(result + 8);
  *(void *)(a2 + 16) = *((void *)result + 3);
  return result;
}

void *sub_2171DAA48(void *a1, uint64_t a2)
{
  *a1 = a2;
  long long v4 = operator new(0x20uLL);
  void *v4 = &unk_26C77FD30;
  v4[1] = 0;
  _OWORD v4[2] = 0;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_2171DAAA0(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_2173254E8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_2171DAABC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171DAAE4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2171DAB14(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77FD80)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_2171DAB58(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *a1)
{
  *(void *)a1 = &unk_26C77FDA8;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)a1 + 3);
  sub_21697C414((_DWORD *)a1 + 2);

  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(a1);
}

void sub_2171DABB8(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *a1)
{
  *(void *)a1 = &unk_26C77FDA8;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)a1 + 3);
  sub_21697C414((_DWORD *)a1 + 2);
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(a1);

  operator delete(v2);
}

void *sub_2171DAC1C(void *a1, uint64_t a2)
{
  *a1 = a2;
  long long v4 = operator new(0x20uLL);
  void *v4 = &unk_26C77FDE0;
  v4[1] = 0;
  _OWORD v4[2] = 0;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_2171DAC74(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_2173254E8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_2171DAC90(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171DACB8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2171DACE8(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77FE30)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_2171DAD30(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *a1)
{
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(a1);

  operator delete(v1);
}

uint64_t sub_2171DAD58@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(result + 8);
  a2[1] = &unk_26C75076B;
  return result;
}

uint64_t sub_2171DAD70()
{
  return 0;
}

uint64_t sub_2171DAD78(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void *sub_2171DAD80(void *a1, uint64_t a2)
{
  *a1 = a2;
  long long v4 = operator new(0x20uLL);
  void *v4 = &unk_26C77FEC0;
  v4[1] = 0;
  _OWORD v4[2] = 0;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_2171DADD8(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_2173254E8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_2171DADF4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171DAE1C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2171DAE4C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77FF10)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_2171DAE94(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171DAEBC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2171DAEEC(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C77FF88)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_2171DAF30(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *a1)
{
  *(void *)a1 = &unk_26C77FFB0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)a1 + 3);
  sub_21697C414((_DWORD *)a1 + 2);

  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(a1);
}

void sub_2171DAF90(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *a1)
{
  *(void *)a1 = &unk_26C77FFB0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)a1 + 3);
  sub_21697C414((_DWORD *)a1 + 2);
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(a1);

  operator delete(v2);
}

void *sub_2171DAFF4@<X0>(void *a1@<X8>)
{
  uint64_t v1 = a1;
  uint64_t v19 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B97060, memory_order_acquire) & 1) == 0)
  {
    int v4 = __cxa_guard_acquire(&qword_267B97060);
    uint64_t v1 = a1;
    if (v4)
    {
      uint64_t v5 = (pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens);
      if (!v5) {
        uint64_t v5 = sub_2171C1D88(&pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens);
      }
      uint64_t v6 = *((void *)v5 + 1);
      uint64_t v15 = v6;
      if ((v6 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v15 &= 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v7 = (pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens);
      if (!v7) {
        uint64_t v7 = sub_2171C1D88(&pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens);
      }
      uint64_t v8 = *((void *)v7 + 2);
      uint64_t v16 = v8;
      if ((v8 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v16 &= 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v9 = (pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens);
      if (!v9) {
        uint64_t v9 = sub_2171C1D88(&pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens);
      }
      uint64_t v10 = *((void *)v9 + 3);
      uint64_t v17 = v10;
      if ((v10 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v17 &= 0xFFFFFFFFFFFFFFF8;
      }
      BOOL v11 = (pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens);
      if (!v11) {
        BOOL v11 = sub_2171C1D88(&pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens);
      }
      uint64_t v12 = *((void *)v11 + 4);
      uint64_t v18 = v12;
      if ((v12 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v18 &= 0xFFFFFFFFFFFFFFF8;
      }
      sub_216D30CFC(&qword_267B97048, &v15, 4uLL);
      for (uint64_t i = 24; i != -8; i -= 8)
      {
        uint64_t v14 = *(uint64_t *)((char *)&v15 + i);
        if ((v14 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
      __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B97048, &dword_216758000);
      __cxa_guard_release(&qword_267B97060);
      uint64_t v1 = a1;
    }
  }
  void *v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return sub_21698FA28(v1, (uint64_t *)qword_267B97048, *(uint64_t **)algn_267B97050, (*(void *)algn_267B97050 - qword_267B97048) >> 3);
}

void sub_2171DB248(_Unwind_Exception *a1)
{
}

void *sub_2171DB2C4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens);
  if (!v6) {
    uint64_t v6 = sub_2171C1D88(&pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens);
  }
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v6 + 1) & 0xFFFFFFFFFFFFFFF8))
  {
    uint64_t v11 = *(void *)(a1 + 16);
    uint64_t v12 = a1 + 8;
    unint64_t v13 = (pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens);
    if (!v13) {
      unint64_t v13 = sub_2171C1D88(&pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens);
    }
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)v11 + 120))(&v29, v11, v12, (uint64_t)v13 + 8);
    if (sub_216959490((pxrInternal__aapl__pxrReserved__::VtValue *)&v29))
    {
      if ((BYTE8(v29) & 4) != 0) {
        uint64_t v14 = (long long *)(*(uint64_t (**)(long long *))((*((void *)&v29 + 1) & 0xFFFFFFFFFFFFFFF8) + 168))(&v29);
      }
      else {
        uint64_t v14 = &v29;
      }
      pxrInternal__aapl__pxrReserved__::HdRetainedTypedSampledDataSource<BOOL>::New(v14, (uint64_t *)&v28);
      goto LABEL_38;
    }
    goto LABEL_39;
  }
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens);
  if (!v7) {
    uint64_t v7 = sub_2171C1D88(&pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens);
  }
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v7 + 2) & 0xFFFFFFFFFFFFFFF8))
  {
    uint64_t v15 = *(void *)(a1 + 16);
    uint64_t v16 = a1 + 8;
    uint64_t v17 = (pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens);
    if (!v17) {
      uint64_t v17 = sub_2171C1D88(&pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens);
    }
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)v15 + 120))(&v29, v15, v16, (uint64_t)v17 + 16);
    if (sub_21695A85C((pxrInternal__aapl__pxrReserved__::VtValue *)&v29))
    {
      if ((BYTE8(v29) & 4) != 0) {
        uint64_t v18 = (long long *)(*(uint64_t (**)(long long *))((*((void *)&v29 + 1) & 0xFFFFFFFFFFFFFFF8) + 168))(&v29);
      }
      else {
        uint64_t v18 = &v29;
      }
      uint64_t v19 = operator new(0x10uLL);
      *(void *)uint64_t v19 = &unk_26C77D140;
      v19[2] = *(_DWORD *)v18;
      sub_2171C85C4(&v28, (uint64_t)v19);
      goto LABEL_38;
    }
    goto LABEL_39;
  }
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens);
  if (!v8) {
    uint64_t v8 = sub_2171C1D88(&pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens);
  }
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v8 + 3) & 0xFFFFFFFFFFFFFFF8))
  {
    uint64_t v20 = *(void *)(a1 + 16);
    uint64_t v21 = a1 + 8;
    uint64_t v22 = (pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens);
    if (!v22) {
      uint64_t v22 = sub_2171C1D88(&pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens);
    }
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)v20 + 120))(&v29, v20, v21, (uint64_t)v22 + 24);
    if (sub_21695C360((pxrInternal__aapl__pxrReserved__::VtValue *)&v29))
    {
      if ((BYTE8(v29) & 4) != 0) {
        long long v23 = (long long *)(*(uint64_t (**)(long long *))((*((void *)&v29 + 1) & 0xFFFFFFFFFFFFFFF8) + 168))(&v29);
      }
      else {
        long long v23 = (long long *)v29;
      }
      sub_2171D9D7C(v23, &v28);
      goto LABEL_38;
    }
LABEL_39:
    *a3 = 0;
    a3[1] = 0;
    return (void *)sub_2168EE084((uint64_t)&v29);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens);
  if (!v9) {
    uint64_t v9 = sub_2171C1D88(&pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens);
  }
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != (*((void *)v9 + 4) & 0xFFFFFFFFFFFFFFF8))
  {
    uint64_t result = sub_2171D5C0C((uint64_t *)(a1 + 16), (_DWORD *)(a1 + 8), a2, &v29);
    *(_OWORD *)a3 = v29;
    return result;
  }
  uint64_t v24 = *(void *)(a1 + 16);
  uint64_t v25 = a1 + 8;
  unint64_t v26 = (pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens);
  if (!v26) {
    unint64_t v26 = sub_2171C1D88(&pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens);
  }
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)v24 + 120))(&v29, v24, v25, (uint64_t)v26 + 32);
  if (!sub_2168EC434((pxrInternal__aapl__pxrReserved__::VtValue *)&v29)) {
    goto LABEL_39;
  }
  if ((BYTE8(v29) & 4) != 0) {
    uint64_t v27 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(uint64_t (**)(long long *))((*((void *)&v29 + 1) & 0xFFFFFFFFFFFFFFF8)
  }
                                                                                                  + 168))(&v29);
  else {
    uint64_t v27 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)v29;
  }
  sub_2171D7884(v27, &v28);
LABEL_38:
  *(_OWORD *)a3 = v28;
  return (void *)sub_2168EE084((uint64_t)&v29);
}

void sub_2171DB688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2171DB6C4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171DB6EC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2171DB71C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C780048)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_2171DB760(uint64_t a1@<X8>)
{
}

void sub_2171DB770()
{
  if ((qword_267B96F88 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(qword_267B96F88 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_2171DB790()
{
  if ((qword_267B96FD0 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(qword_267B96FD0 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void *pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::EmptyLocator(pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B970A0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B970A0))
  {
    qword_267B97098 = 0x600000000;
    __cxa_atexit((void (*)(void *))sub_217199930, &unk_267B97068, &dword_216758000);
    __cxa_guard_release(&qword_267B970A0);
  }
  return &unk_267B97068;
}

double pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator(pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *this)
{
  *(void *)&double result = 0x600000000;
  *((void *)this + 6) = 0x600000000;
  return result;
}

{
  double result;

  *(void *)&double result = 0x600000000;
  *((void *)this + 6) = 0x600000000;
  return result;
}

pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator(pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  *((void *)this + 6) = 0x600000000;
  if (*(void *)a2) {
    sub_2171DE9D4((uint64_t)this, (uint64_t *)a2);
  }
  return this;
}

void sub_2171DB88C(_Unwind_Exception *a1)
{
  sub_217199B64(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator(uint64_t this, atomic_uint **a2, atomic_uint **a3)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a2;
  uint64_t v11 = v3;
  if ((v3 & 7) != 0)
  {
    int v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v11 = v4;
    }
  }
  uint64_t v5 = *a3;
  uint64_t v12 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v12 = v6;
    }
  }
  uint64_t v7 = 0;
  *(void *)(this + 48) = 0x600000002;
  do
  {
    uint64_t v8 = (&v11)[v7];
    *(void *)(this + v7 * 8) = v8;
    if ((v8 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)(this + v7 * 8) &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v7;
  }
  while (v7 != 2);
  for (uint64_t i = 1; i != -1; --i)
  {
    uint64_t v10 = (&v11)[i];
    if ((v10 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator(uint64_t this, atomic_uint **a2, atomic_uint **a3, atomic_uint **a4)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  int v4 = *a2;
  uint64_t v14 = v4;
  if ((v4 & 7) != 0)
  {
    uint64_t v5 = (atomic_uint *)((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v5, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v14 = v5;
    }
  }
  uint64_t v6 = *a3;
  uint64_t v15 = v6;
  if ((v6 & 7) != 0)
  {
    uint64_t v7 = (atomic_uint *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v7, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v15 = v7;
    }
  }
  uint64_t v8 = *a4;
  uint64_t v16 = v8;
  if ((v8 & 7) != 0)
  {
    uint64_t v9 = (atomic_uint *)((unint64_t)v8 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v9, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v16 = v9;
    }
  }
  uint64_t v10 = 0;
  *(void *)(this + 48) = 0x600000003;
  do
  {
    uint64_t v11 = (&v14)[v10];
    *(void *)(this + v10 * 8) = v11;
    if ((v11 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)(this + v10 * 8) &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v10;
  }
  while (v10 != 3);
  for (uint64_t i = 2; i != -1; --i)
  {
    uint64_t v13 = (&v14)[i];
    if ((v13 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator(uint64_t this, atomic_uint **a2, atomic_uint **a3, atomic_uint **a4, atomic_uint **a5)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v5 = *a2;
  uint64_t v17 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v17 = v6;
    }
  }
  uint64_t v7 = *a3;
  uint64_t v18 = v7;
  if ((v7 & 7) != 0)
  {
    uint64_t v8 = (atomic_uint *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v18 = v8;
    }
  }
  uint64_t v9 = *a4;
  uint64_t v19 = v9;
  if ((v9 & 7) != 0)
  {
    uint64_t v10 = (atomic_uint *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v10, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v19 = v10;
    }
  }
  uint64_t v11 = *a5;
  uint64_t v20 = v11;
  if ((v11 & 7) != 0)
  {
    uint64_t v12 = (atomic_uint *)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v12, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v20 = v12;
    }
  }
  uint64_t v13 = 0;
  *(void *)(this + 48) = 0x600000004;
  do
  {
    uint64_t v14 = (&v17)[v13];
    *(void *)(this + v13 * 8) = v14;
    if ((v14 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)(this + v13 * 8) &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v13;
  }
  while (v13 != 4);
  for (uint64_t i = 3; i != -1; --i)
  {
    uint64_t v16 = (&v17)[i];
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator(uint64_t this, atomic_uint **a2, atomic_uint **a3, atomic_uint **a4, atomic_uint **a5, atomic_uint **a6)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v6 = *a2;
  uint64_t v20 = v6;
  if ((v6 & 7) != 0)
  {
    uint64_t v7 = (atomic_uint *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v7, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v20 = v7;
    }
  }
  uint64_t v8 = *a3;
  uint64_t v21 = v8;
  if ((v8 & 7) != 0)
  {
    uint64_t v9 = (atomic_uint *)((unint64_t)v8 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v9, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v21 = v9;
    }
  }
  uint64_t v10 = *a4;
  uint64_t v22 = v10;
  if ((v10 & 7) != 0)
  {
    uint64_t v11 = (atomic_uint *)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v11, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v22 = v11;
    }
  }
  uint64_t v12 = *a5;
  long long v23 = v12;
  if ((v12 & 7) != 0)
  {
    uint64_t v13 = (atomic_uint *)((unint64_t)v12 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v13, 2u, memory_order_relaxed) & 1) == 0) {
      long long v23 = v13;
    }
  }
  uint64_t v14 = *a6;
  uint64_t v24 = v14;
  if ((v14 & 7) != 0)
  {
    uint64_t v15 = (atomic_uint *)((unint64_t)v14 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v15, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v24 = v15;
    }
  }
  uint64_t v16 = 0;
  *(void *)(this + 48) = 0x600000005;
  do
  {
    uint64_t v17 = (&v20)[v16];
    *(void *)(this + v16 * 8) = v17;
    if ((v17 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v17 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)(this + v16 * 8) &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v16;
  }
  while (v16 != 5);
  for (uint64_t i = 4; i != -1; --i)
  {
    uint64_t v19 = (&v20)[i];
    if ((v19 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator(uint64_t this, atomic_uint **a2, atomic_uint **a3, atomic_uint **a4, atomic_uint **a5, atomic_uint **a6, atomic_uint **a7)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v7 = *a2;
  long long v23 = v7;
  if ((v7 & 7) != 0)
  {
    uint64_t v8 = (atomic_uint *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
      long long v23 = v8;
    }
  }
  uint64_t v9 = *a3;
  uint64_t v24 = v9;
  if ((v9 & 7) != 0)
  {
    uint64_t v10 = (atomic_uint *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v10, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v24 = v10;
    }
  }
  uint64_t v11 = *a4;
  uint64_t v25 = v11;
  if ((v11 & 7) != 0)
  {
    uint64_t v12 = (atomic_uint *)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v12, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v25 = v12;
    }
  }
  uint64_t v13 = *a5;
  unint64_t v26 = v13;
  if ((v13 & 7) != 0)
  {
    uint64_t v14 = (atomic_uint *)((unint64_t)v13 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v14, 2u, memory_order_relaxed) & 1) == 0) {
      unint64_t v26 = v14;
    }
  }
  uint64_t v15 = *a6;
  uint64_t v27 = v15;
  if ((v15 & 7) != 0)
  {
    uint64_t v16 = (atomic_uint *)((unint64_t)v15 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v16, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v27 = v16;
    }
  }
  uint64_t v17 = *a7;
  long long v28 = v17;
  if ((v17 & 7) != 0)
  {
    uint64_t v18 = (atomic_uint *)((unint64_t)v17 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v18, 2u, memory_order_relaxed) & 1) == 0) {
      long long v28 = v18;
    }
  }
  uint64_t v19 = 0;
  *(void *)(this + 48) = 0x600000006;
  do
  {
    uint64_t v20 = (&v23)[v19];
    *(void *)(this + v19 * 8) = v20;
    if ((v20 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v20 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)(this + v19 * 8) &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v19;
  }
  while (v19 != 6);
  for (uint64_t i = 5; i != -1; --i)
  {
    uint64_t v22 = (&v23)[i];
    if ((v22 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return this;
}

pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator(pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *this, uint64_t a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  uint64_t v4 = a2;
  *((void *)this + 6) = 0x600000000;
  if (a2 < 7)
  {
    if (!a2) {
      return this;
    }
  }
  else
  {
    sub_2171AF9D8((uint64_t)this, a2);
  }
  do
  {
    sub_2171DE9D4((uint64_t)this, (uint64_t *)a3);
    a3 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)a3 + 8);
    --v4;
  }
  while (v4);
  return this;
}

void sub_2171DBFB8(_Unwind_Exception *a1)
{
  sub_217199B64(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::GetElementCount(pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *this)
{
  return *((unsigned int *)this + 12);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::GetElement(pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *this, unsigned int a2)
{
  if (*((_DWORD *)this + 13) >= 7u) {
    this = *(pxrInternal__aapl__pxrReserved__::HdDataSourceLocator **)this;
  }
  return (uint64_t)this + 8 * a2;
}

char *pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::GetLastElement(pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *this)
{
  uint64_t v1 = *((unsigned int *)this + 12);
  if (v1)
  {
    if (*((_DWORD *)this + 13) >= 7u) {
      this = *(pxrInternal__aapl__pxrReserved__::HdDataSourceLocator **)this;
    }
    return (char *)this + 8 * v1 - 8;
  }
  else if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B970B0, memory_order_acquire) & 1) != 0 {
         || !__cxa_guard_acquire(&qword_267B970B0))
  }
  {
    return (char *)&unk_267B970A8;
  }
  else
  {
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &unk_267B970A8, &dword_216758000);
    __cxa_guard_release(&qword_267B970B0);
    return (char *)&unk_267B970A8;
  }
}

_DWORD *pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::GetFirstElement(_DWORD *this)
{
  if (this[12])
  {
    if (this[13] >= 7u) {
      return *(_DWORD **)this;
    }
  }
  else if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B970C0, memory_order_acquire) & 1) != 0 {
         || !__cxa_guard_acquire(&qword_267B970C0))
  }
  {
    return &unk_267B970B8;
  }
  else
  {
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &unk_267B970B8, &dword_216758000);
    __cxa_guard_release(&qword_267B970C0);
    return &unk_267B970B8;
  }
  return this;
}

void *pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::ReplaceLastElement@<X0>(pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, _DWORD *a3@<X8>)
{
  int v4 = *((_DWORD *)this + 12);
  double result = sub_2171AA848(a3, (uint64_t)this);
  if (v4)
  {
    uint64_t v6 = (void *)*result;
    if (*((_DWORD *)result + 13) < 7u) {
      uint64_t v6 = result;
    }
    uint64_t v7 = &v6[*((unsigned int *)result + 12) - 1];
    return sub_2168D2318(v7, a2);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::RemoveLastElement@<X0>(pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *this@<X0>, pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *a2@<X8>)
{
  unsigned int v2 = *((_DWORD *)this + 12);
  if (v2 > 1)
  {
    uint64_t v3 = this;
    if (*((_DWORD *)this + 13) >= 7u) {
      uint64_t v3 = *(const pxrInternal__aapl__pxrReserved__::TfToken **)this;
    }
    return pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator(a2, v2 - 1, v3);
  }
  else
  {
    *((void *)a2 + 6) = 0x600000000;
  }
  return this;
}

pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::RemoveFirstElement@<X0>(pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *this@<X0>, pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *a2@<X8>)
{
  unsigned int v2 = *((_DWORD *)this + 12);
  if (v2 > 1)
  {
    if (*((_DWORD *)this + 13) >= 7u) {
      this = *(pxrInternal__aapl__pxrReserved__::HdDataSourceLocator **)this;
    }
    return pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator(a2, v2 - 1, (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)((char *)this + 8));
  }
  else
  {
    *((void *)a2 + 6) = 0x600000000;
  }
  return this;
}

void pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::Append(pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, _DWORD *a3@<X8>)
{
}

void sub_2171DC24C(_Unwind_Exception *a1)
{
  sub_217199B64(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::Append(pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *this@<X0>, atomic_uint ***a2@<X1>, _DWORD *a3@<X8>)
{
  sub_2171AA848(a3, (uint64_t)this);
  uint64_t v5 = *(_DWORD **)a3;
  if (a3[13] < 7u) {
    uint64_t v5 = a3;
  }
  if (*((_DWORD *)a2 + 13) >= 7u) {
    uint64_t v6 = *a2;
  }
  else {
    uint64_t v6 = (atomic_uint **)a2;
  }
  sub_2171DC2D4((uint64_t)a3, (char *)&v5[2 * a3[12]], v6, &v6[*((unsigned int *)a2 + 12)]);
}

void sub_2171DC2C0(_Unwind_Exception *a1)
{
  sub_217199B64(v1);
  _Unwind_Resume(a1);
}

void sub_2171DC2D4(uint64_t a1, char *a2, atomic_uint **a3, atomic_uint **a4)
{
  uint64_t v5 = a3;
  uint64_t v6 = a2;
  unsigned int v8 = *(_DWORD *)(a1 + 52);
  uint64_t v9 = (char *)a1;
  if (v8 >= 7) {
    uint64_t v9 = *(char **)a1;
  }
  uint64_t v10 = *(unsigned int *)(a1 + 48);
  uint64_t v11 = &v9[8 * v10];
  uint64_t v12 = a4 - a3;
  unsigned int v13 = v10 + v12;
  unsigned int v14 = v8 + (v8 >> 1);
  if (v14 + 1 > (int)v10 + (int)v12) {
    unsigned int v15 = v14 + 1;
  }
  else {
    unsigned int v15 = v10 + v12;
  }
  if (v11 == a2)
  {
    if (v13 > v8)
    {
      sub_2171AF9D8(a1, v15);
      unsigned int v8 = *(_DWORD *)(a1 + 52);
    }
    uint64_t v31 = (char *)a1;
    if (v8 >= 7) {
      uint64_t v31 = *(char **)a1;
    }
    if (v5 != a4)
    {
      unint64_t v32 = &v31[8 * *(unsigned int *)(a1 + 48)];
      do
      {
        uint64_t v33 = *v5;
        *(void *)unint64_t v32 = *v5;
        if ((v33 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v33 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          *(void *)v32 &= 0xFFFFFFFFFFFFFFF8;
        }
        ++v5;
        v32 += 8;
      }
      while (v5 != a4);
    }
  }
  else if (v13 <= v8)
  {
    if (v8 > 6)
    {
      uint64_t v37 = *(void **)a1;
      uint64_t v38 = (*(void *)a1 + 8 * v10 - (uint64_t)a2) >> 3;
      if (v38 >= v12) {
        uint64_t v35 = a4 - a3;
      }
      else {
        uint64_t v35 = (*(void *)a1 + 8 * v10 - (uint64_t)a2) >> 3;
      }
      uint64_t v36 = v38 - v35;
    }
    else
    {
      uint64_t v34 = (a1 + 8 * v10 - (uint64_t)a2) >> 3;
      if (v34 >= v12) {
        uint64_t v35 = a4 - a3;
      }
      else {
        uint64_t v35 = (a1 + 8 * v10 - (uint64_t)a2) >> 3;
      }
      uint64_t v36 = v34 - v35;
      uint64_t v37 = (void *)a1;
    }
    uint64_t v39 = (char *)&v37[v10];
    uint64_t v40 = &a2[8 * v36];
    if (v40 != v39)
    {
      unint64_t v41 = &v39[8 * (v12 - v35)];
      do
      {
        *(void *)unint64_t v41 = *(void *)v40;
        v41 += 8;
        *(void *)uint64_t v40 = 0;
        v40 += 8;
      }
      while (v40 != v39);
    }
    if (v36)
    {
      uint64_t v42 = 8 * v36;
      unint64_t v43 = (void *)((char *)v37 + 8 * v12 + 8 * v10 - 8 * v35 - 8);
      do
      {
        sub_2168D2318(v43--, &v6[v42 - 8]);
        v42 -= 8;
      }
      while (v42);
    }
    if (v35 >= 1)
    {
      do
      {
        sub_2168D2318(v6, v5++);
        v6 += 8;
        --v35;
      }
      while (v35);
    }
    uint64_t v44 = (char *)a1;
    if (*(_DWORD *)(a1 + 52) >= 7u) {
      uint64_t v44 = *(char **)a1;
    }
    if (v5 != a4)
    {
      uint64_t v45 = &v44[8 * *(unsigned int *)(a1 + 48)];
      do
      {
        uint64_t v46 = *v5;
        *(void *)uint64_t v45 = *v5;
        if ((v46 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v46 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          *(void *)v45 &= 0xFFFFFFFFFFFFFFF8;
        }
        ++v5;
        v45 += 8;
      }
      while (v5 != a4);
    }
  }
  else
  {
    uint64_t v16 = (char *)a1;
    if (v8 >= 7) {
      uint64_t v16 = *(char **)a1;
    }
    int64_t v17 = a2 - v16;
    uint64_t v18 = malloc(8 * v15);
    uint64_t v19 = v18;
    uint64_t v20 = (char *)a1;
    if (v8 >= 7) {
      uint64_t v20 = *(char **)a1;
    }
    if (v20 != v6)
    {
      uint64_t v21 = v18;
      do
      {
        *v21++ = *(void *)v20;
        *(void *)uint64_t v20 = 0;
        v20 += 8;
      }
      while (v20 != v6);
    }
    if (v5 != a4)
    {
      uint64_t v22 = (atomic_uint **)((char *)v18 + (v17 & 0x7FFFFFFF8));
      do
      {
        long long v23 = *v5;
        *uint64_t v22 = *v5;
        if ((v23 & 7) != 0)
        {
          uint64_t v24 = (atomic_uint *)((unint64_t)v23 & 0xFFFFFFFFFFFFFFF8);
          if ((atomic_fetch_add_explicit(v24, 2u, memory_order_relaxed) & 1) == 0) {
            *uint64_t v22 = v24;
          }
        }
        ++v5;
        ++v22;
      }
      while (v5 != a4);
      unsigned int v8 = *(_DWORD *)(a1 + 52);
    }
    uint64_t v25 = (char *)a1;
    if (v8 >= 7) {
      uint64_t v25 = *(char **)a1;
    }
    uint64_t v26 = *(unsigned int *)(a1 + 48);
    uint64_t v27 = &v25[8 * v26];
    if (v27 != v6)
    {
      long long v28 = (void *)((char *)&v18[v12] + (v17 & 0x7FFFFFFF8));
      do
      {
        *v28++ = *(void *)v6;
        *(void *)uint64_t v6 = 0;
        v6 += 8;
      }
      while (v6 != v27);
    }
    uint64_t v29 = (char *)a1;
    if (v8 >= 7) {
      uint64_t v29 = *(char **)a1;
    }
    if (v26)
    {
      uint64_t v30 = 8 * v26;
      do
      {
        if ((*(void *)v29 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        v29 += 8;
        v30 -= 8;
      }
      while (v30);
      unsigned int v8 = *(_DWORD *)(a1 + 52);
    }
    if (v8 >= 7) {
      free(*(void **)a1);
    }
    *(void *)a1 = v19;
    *(_DWORD *)(a1 + 52) = v15;
  }
  *(_DWORD *)(a1 + 48) += v12;
}

void pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::Prepend(atomic_uint **this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 48) = 0x600000000;
  sub_2171DE9D4(a3, (uint64_t *)a2);
  uint64_t v5 = *(void *)a3;
  if (*(_DWORD *)(a3 + 52) < 7u) {
    uint64_t v5 = a3;
  }
  uint64_t v6 = this;
  if (*((_DWORD *)this + 13) >= 7u) {
    uint64_t v6 = (atomic_uint **)*this;
  }
  sub_2171DC2D4(a3, (char *)(v5 + 8 * *(unsigned int *)(a3 + 48)), v6, &v6[*((unsigned int *)this + 12)]);
}

void sub_2171DC6B8(_Unwind_Exception *a1)
{
  sub_217199B64(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::Prepend(atomic_uint **this@<X0>, const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *a2@<X1>, _DWORD *a3@<X8>)
{
  sub_2171AA848(a3, (uint64_t)a2);
  uint64_t v5 = *(_DWORD **)a3;
  if (a3[13] < 7u) {
    uint64_t v5 = a3;
  }
  uint64_t v6 = this;
  if (*((_DWORD *)this + 13) >= 7u) {
    uint64_t v6 = (atomic_uint **)*this;
  }
  sub_2171DC2D4((uint64_t)a3, (char *)&v5[2 * a3[12]], v6, &v6[*((unsigned int *)this + 12)]);
}

void sub_2171DC730(_Unwind_Exception *a1)
{
  sub_217199B64(v1);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HasPrefix(pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *this, const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator **a2)
{
  unint64_t v2 = *((unsigned int *)a2 + 12);
  if (v2)
  {
    if (v2 <= *((_DWORD *)this + 12))
    {
      BOOL v3 = 0;
      uint64_t v4 = 0;
      if (*((_DWORD *)a2 + 13) >= 7u) {
        uint64_t v5 = *a2;
      }
      else {
        uint64_t v5 = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)a2;
      }
      do
      {
        uint64_t v6 = this;
        if (*((_DWORD *)this + 13) >= 7u) {
          uint64_t v6 = *(pxrInternal__aapl__pxrReserved__::HdDataSourceLocator **)this;
        }
        if ((*((void *)v6 + v4) & 0xFFFFFFFFFFFFFFF8) != (*((void *)v5 + v4) & 0xFFFFFFFFFFFFFFF8)) {
          break;
        }
        BOOL v3 = ++v4 >= v2;
      }
      while (v2 != v4);
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return 1;
  }
  return v3;
}

pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::GetCommonPrefix@<X0>(pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *this@<X0>, const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *a2@<X1>, pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *a3@<X8>)
{
  LODWORD(v5) = *((_DWORD *)a2 + 12);
  unsigned int v7 = *((_DWORD *)this + 12);
  unsigned int v6 = *((_DWORD *)this + 13);
  if (v5 >= v7) {
    uint64_t v5 = v7;
  }
  else {
    uint64_t v5 = v5;
  }
  if (v5)
  {
    unsigned int v8 = a2;
    uint64_t v9 = 0;
    if (*((_DWORD *)v8 + 13) >= 7u) {
      unsigned int v8 = *(const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator **)v8;
    }
    while (1)
    {
      uint64_t v10 = this;
      if (v6 >= 7) {
        uint64_t v10 = *(pxrInternal__aapl__pxrReserved__::HdDataSourceLocator **)this;
      }
      if ((*((void *)v10 + v9) & 0xFFFFFFFFFFFFFFF8) != (*((void *)v8 + v9) & 0xFFFFFFFFFFFFFFF8)) {
        break;
      }
      if (v5 == ++v9)
      {
        uint64_t v9 = v5;
        break;
      }
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  if (v6 >= 7) {
    this = *(pxrInternal__aapl__pxrReserved__::HdDataSourceLocator **)this;
  }
  return pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator(a3, v9, this);
}

BOOL pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::Intersects(pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *this, const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *a2)
{
  LODWORD(v2) = *((_DWORD *)a2 + 12);
  unsigned int v3 = *((_DWORD *)this + 12);
  if (v3 >= v2) {
    unint64_t v2 = v2;
  }
  else {
    unint64_t v2 = v3;
  }
  if (v2)
  {
    BOOL v4 = 0;
    uint64_t v5 = 0;
    if (*((_DWORD *)a2 + 13) >= 7u) {
      unsigned int v6 = *(const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator **)a2;
    }
    else {
      unsigned int v6 = a2;
    }
    do
    {
      unsigned int v7 = this;
      if (*((_DWORD *)this + 13) >= 7u) {
        unsigned int v7 = *(pxrInternal__aapl__pxrReserved__::HdDataSourceLocator **)this;
      }
      if ((*((void *)v6 + v5) & 0xFFFFFFFFFFFFFFF8) != (*((void *)v7 + v5) & 0xFFFFFFFFFFFFFFF8)) {
        break;
      }
      BOOL v4 = ++v5 >= v2;
    }
    while (v2 != v5);
  }
  else
  {
    return 1;
  }
  return v4;
}

void pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::ReplacePrefix(pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *this@<X0>, const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator **a2@<X1>, const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *a3@<X2>, _DWORD *a4@<X8>)
{
  if (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HasPrefix(this, a2))
  {
    sub_2171AA848(a4, (uint64_t)a3);
    unsigned int v8 = *(_DWORD **)a4;
    if (a4[13] < 7u) {
      unsigned int v8 = a4;
    }
    uint64_t v9 = (char *)&v8[2 * a4[12]];
    uint64_t v10 = this;
    if (*((_DWORD *)this + 13) >= 7u) {
      uint64_t v10 = *(pxrInternal__aapl__pxrReserved__::HdDataSourceLocator **)this;
    }
    sub_2171DC2D4((uint64_t)a4, v9, (atomic_uint **)v10 + *((unsigned int *)a2 + 12), (atomic_uint **)v10 + *((unsigned int *)this + 12));
  }
  else
  {
    sub_2171AA848(a4, (uint64_t)this);
  }
}

void sub_2171DC984(_Unwind_Exception *a1)
{
  sub_217199B64(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::GetString@<X0>(uint64_t this@<X0>, const char *a2@<X1>, void *a3@<X8>)
{
  if (*(_DWORD *)(this + 48))
  {
    uint64_t v4 = this;
    sub_21677B834((uint64_t)v17);
    if (*(_DWORD *)(v4 + 48) != 1)
    {
      uint64_t v5 = 0;
      uint64_t v6 = 8 * (*(_DWORD *)(v4 + 48) - 1);
      do
      {
        uint64_t v7 = v4;
        if (*(_DWORD *)(v4 + 52) >= 7u) {
          uint64_t v7 = *(void *)v4;
        }
        unint64_t v8 = *(void *)(v7 + v5) & 0xFFFFFFFFFFFFFFF8;
        if (v8)
        {
          uint64_t v9 = (const char *)(v8 + 16);
          if (*(char *)(v8 + 39) < 0) {
            uint64_t v9 = *(const char **)v9;
          }
        }
        else
        {
          uint64_t v9 = "";
        }
        size_t v10 = strlen(v9);
        uint64_t v11 = sub_216779180(v17, (uint64_t)v9, v10);
        size_t v12 = strlen(a2);
        sub_216779180(v11, (uint64_t)a2, v12);
        v5 += 8;
      }
      while (v6 != v5);
    }
    uint64_t v13 = v4;
    if (*(_DWORD *)(v4 + 52) >= 7u) {
      uint64_t v13 = *(void *)v4;
    }
    unint64_t v14 = *(void *)(v13 + 8 * *(unsigned int *)(v4 + 48) - 8) & 0xFFFFFFFFFFFFFFF8;
    if (v14)
    {
      unsigned int v15 = (const char *)(v14 + 16);
      if (*(char *)(v14 + 39) < 0) {
        unsigned int v15 = *(const char **)v15;
      }
    }
    else
    {
      unsigned int v15 = "";
    }
    size_t v16 = strlen(v15);
    sub_216779180(v17, (uint64_t)v15, v16);
    std::stringbuf::str();
    v17[0] = *MEMORY[0x263F8C2C8];
    *(void *)((char *)v17 + *(void *)(v17[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
    v17[1] = MEMORY[0x263F8C318] + 16;
    if (v18 < 0) {
      operator delete((void *)v17[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return MEMORY[0x21D447E60](&v19);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  return this;
}

void sub_2171DCBD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21677B9CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::operator<(uint64_t *a1, uint64_t *a2)
{
  LODWORD(v2) = *((_DWORD *)a1 + 12);
  unsigned int v3 = *((_DWORD *)a2 + 12);
  if (v3 >= v2) {
    unint64_t v4 = v2;
  }
  else {
    unint64_t v4 = v3;
  }
  if (!v4)
  {
    LOBYTE(v2) = v2 < v3;
    return v2 & 1;
  }
  unsigned int v53 = *((_DWORD *)a1 + 12);
  uint64_t v6 = 0;
  unsigned int v7 = *((_DWORD *)a1 + 13);
  if (*((_DWORD *)a2 + 13) >= 7u) {
    unint64_t v8 = (uint64_t *)*a2;
  }
  else {
    unint64_t v8 = a2;
  }
  BOOL v9 = 1;
  while (1)
  {
    size_t v10 = a1;
    if (v7 >= 7) {
      size_t v10 = (uint64_t *)*a1;
    }
    uint64_t v11 = v10[v6];
    uint64_t v12 = v8[v6];
    if (!v11 || v12 == 0)
    {
      if (v11) {
        BOOL v14 = 1;
      }
      else {
        BOOL v14 = v12 == 0;
      }
      if (!v14) {
        goto LABEL_73;
      }
    }
    else if (v11 != v12)
    {
      unint64_t v15 = v11 & 0xFFFFFFFFFFFFFFF8;
      unint64_t v16 = v12 & 0xFFFFFFFFFFFFFFF8;
      unint64_t v17 = *(void *)(v15 + 8);
      unint64_t v18 = *(void *)((v12 & 0xFFFFFFFFFFFFFFF8) + 8);
      if (v17 < v18) {
        goto LABEL_73;
      }
      if (v17 == v18)
      {
        uint64_t v21 = *(const void **)(v16 + 16);
        unint64_t v19 = v16 + 16;
        uint64_t v20 = v21;
        int v22 = *(char *)(v19 + 23);
        uint64_t v25 = *(const void **)(v15 + 16);
        unint64_t v23 = v15 + 16;
        uint64_t v24 = v25;
        int v26 = *(char *)(v23 + 23);
        if (v26 >= 0) {
          size_t v27 = *(unsigned __int8 *)(v23 + 23);
        }
        else {
          size_t v27 = *(void *)(v23 + 8);
        }
        if (v26 >= 0) {
          long long v28 = (const void *)v23;
        }
        else {
          long long v28 = v24;
        }
        if (v22 >= 0) {
          size_t v29 = *(unsigned __int8 *)(v19 + 23);
        }
        else {
          size_t v29 = *(void *)(v19 + 8);
        }
        if (v22 >= 0) {
          uint64_t v30 = (const void *)v19;
        }
        else {
          uint64_t v30 = v20;
        }
        if (v29 >= v27) {
          size_t v31 = v27;
        }
        else {
          size_t v31 = v29;
        }
        int v32 = memcmp(v28, v30, v31);
        BOOL v33 = v27 < v29;
        if (v32) {
          BOOL v33 = v32 < 0;
        }
        if (v33)
        {
LABEL_73:
          LOBYTE(v2) = 1;
          goto LABEL_75;
        }
      }
    }
    uint64_t v34 = a1;
    if (v7 >= 7) {
      uint64_t v34 = (uint64_t *)*a1;
    }
    uint64_t v2 = v34[v6];
    if (v12)
    {
      if (v2) {
        break;
      }
    }
    if (!v12 && v2) {
      goto LABEL_74;
    }
LABEL_70:
    BOOL v9 = ++v6 < v4;
    if (v4 == v6) {
      goto LABEL_75;
    }
  }
  if (v12 == v2) {
    goto LABEL_70;
  }
  unint64_t v35 = v12 & 0xFFFFFFFFFFFFFFF8;
  v2 &= 0xFFFFFFFFFFFFFFF8;
  unint64_t v36 = *(void *)((v12 & 0xFFFFFFFFFFFFFFF8) + 8);
  unint64_t v37 = *(void *)(v2 + 8);
  if (v36 >= v37)
  {
    if (v36 != v37) {
      goto LABEL_70;
    }
    uint64_t v40 = *(const void **)(v2 + 16);
    uint64_t v38 = v2 + 16;
    uint64_t v39 = v40;
    int v41 = *(char *)(v38 + 23);
    uint64_t v44 = *(const void **)(v35 + 16);
    unint64_t v42 = v35 + 16;
    unint64_t v43 = v44;
    int v45 = *(char *)(v42 + 23);
    if (v45 >= 0) {
      size_t v46 = *(unsigned __int8 *)(v42 + 23);
    }
    else {
      size_t v46 = *(void *)(v42 + 8);
    }
    if (v45 >= 0) {
      int64x2_t v47 = (const void *)v42;
    }
    else {
      int64x2_t v47 = v43;
    }
    if (v41 >= 0) {
      size_t v48 = *(unsigned __int8 *)(v38 + 23);
    }
    else {
      size_t v48 = *(void *)(v38 + 8);
    }
    if (v41 >= 0) {
      uint64_t v49 = (const void *)v38;
    }
    else {
      uint64_t v49 = v39;
    }
    if (v48 >= v46) {
      size_t v50 = v46;
    }
    else {
      size_t v50 = v48;
    }
    int v51 = memcmp(v47, v49, v50);
    LOBYTE(v2) = v46 < v48;
    if (v51) {
      LOBYTE(v2) = v51 < 0;
    }
    if ((v2 & 1) == 0) {
      goto LABEL_70;
    }
  }
LABEL_74:
  LOBYTE(v2) = 0;
LABEL_75:
  if (!v9) {
    LOBYTE(v2) = v53 < v3;
  }
  return v2 & 1;
}

void *pxrInternal__aapl__pxrReserved__::operator<<(void *a1, pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *this)
{
  pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::GetString((uint64_t)this, "/", __p);
  if ((v8 & 0x80u) == 0) {
    unsigned int v3 = __p;
  }
  else {
    unsigned int v3 = (void **)__p[0];
  }
  if ((v8 & 0x80u) == 0) {
    uint64_t v4 = v8;
  }
  else {
    uint64_t v4 = (uint64_t)__p[1];
  }
  uint64_t v5 = sub_216779180(a1, (uint64_t)v3, v4);
  if ((char)v8 < 0) {
    operator delete(__p[0]);
  }
  return v5;
}

void sub_2171DCE8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::_Normalize(uint64_t this)
{
  unint64_t v1 = *(unsigned int *)(this + 448);
  if (v1 >= 2)
  {
    uint64_t v2 = this;
    if (*(_DWORD *)(this + 452) >= 9u) {
      this = *(void *)this;
    }
    this = (uint64_t)sub_2171DEA64((uint64_t *)this, this + 56 * v1, (uint64_t)&v6, 126 - 2 * __clz(v1), 1);
    unint64_t v3 = *(unsigned int *)(v2 + 448);
    if (v3 >= 2)
    {
      unint64_t v4 = 1;
      do
      {
        if (*(_DWORD *)(v2 + 452) > 8u)
        {
          uint64_t v5 = *(void *)v2;
          this = pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::Intersects((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)(*(void *)v2 + 56 * v4), (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)(*(void *)v2+ 56 * (v4 - 1)));
          if (this)
          {
LABEL_10:
            this = sub_2171DD268((uint64_t *)v2, v5 + 56 * v4, v5 + 56 * v4 + 56);
            unint64_t v3 = *(unsigned int *)(v2 + 448);
            continue;
          }
        }
        else
        {
          this = pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::Intersects((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)(v2 + 56 * v4), (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)(v2 + 56 * (v4 - 1)));
          uint64_t v5 = v2;
          if (this) {
            goto LABEL_10;
          }
        }
        ++v4;
      }
      while (v4 < v3);
    }
  }
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::UniversalSet(pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *this)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B970D0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)__cxa_guard_acquire(&qword_267B970D0);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::EmptyLocator(v2);
      sub_2171AA848(v4, (uint64_t)&unk_267B97068);
      v3[0] = (uint64_t)v4;
      v3[1] = 1;
      pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::HdDataSourceLocatorSet(dword_267B970D8, v3);
      __cxa_atexit((void (*)(void *))sub_2171B5F14, dword_267B970D8, &dword_216758000);
      sub_217199B64((uint64_t)v4);
      qword_267B970C8 = (uint64_t)dword_267B970D8;
      __cxa_guard_release(&qword_267B970D0);
    }
  }
  return qword_267B970C8;
}

void sub_2171DD084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_217199B64((uint64_t)va);
  __cxa_guard_abort(&qword_267B970D0);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::HdDataSourceLocatorSet(pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *this, const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *a2)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  sub_2171AA848(v4, (uint64_t)a2);
  *((void *)this + 56) = 0x800000001;
  sub_2171AA7B0((uint64_t)v4, (uint64_t)&v5, (uint64_t)this);
  sub_217199B64((uint64_t)v4);
  return this;
}

void sub_2171DD138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

_DWORD *pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::HdDataSourceLocatorSet(_DWORD *a1, uint64_t *a2)
{
  unint64_t v3 = sub_2171DFE94(a1, *a2, *a2 + 56 * a2[1]);
  pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::_Normalize((uint64_t)v3);
  return a1;
}

void sub_2171DD194(_Unwind_Exception *a1)
{
  sub_2171AA914(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::_InsertAndDeleteSuffixes(pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *this, pxrInternal__aapl__pxrReserved__::HdDataSourceLocator **a2, const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *a3)
{
  uint64_t result = sub_2171DFF24((uint64_t)this, (char *)*a2, (uint64_t)a3);
  char v6 = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator **)result;
  uint64_t v7 = 0;
  *a2 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)result;
  uint64_t v8 = result + 56;
  unsigned int v9 = *((_DWORD *)this + 113);
  unsigned int v10 = *((_DWORD *)this + 112);
  for (uint64_t i = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)(result + 56);
        ;
        uint64_t i = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)((char *)i + 56))
  {
    uint64_t v12 = this;
    if (v9 >= 9) {
      uint64_t v12 = *(pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet **)this;
    }
    if (i == (pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *)((char *)v12 + 56 * v10)) {
      break;
    }
    uint64_t result = pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HasPrefix(i, v6);
    if (!result) {
      break;
    }
    --v7;
  }
  if (v7)
  {
    uint64_t result = sub_2171DD268((uint64_t *)this, v8, (uint64_t)i);
    *a2 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)(result - 56);
  }
  return result;
}

uint64_t sub_2171DD268(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    uint64_t v5 = 0x6DB6DB6DB6DB6DB7 * ((a3 - a2) >> 3);
    char v6 = a1;
    if (*((_DWORD *)a1 + 113) >= 9u) {
      char v6 = (uint64_t *)*a1;
    }
    uint64_t v7 = (uint64_t)&v6[7 * *((unsigned int *)a1 + 112)];
    sub_2171E0138((uint64_t)&v10, a3, v7, a2);
    if (v5)
    {
      uint64_t v8 = -56 * v5;
      do
      {
        sub_217199B64(v7 + v8);
        v8 += 56;
      }
      while (v8);
    }
    *((_DWORD *)a1 + 112) -= v5;
  }
  return a2;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::insert(pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *this, const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *a2)
{
  unsigned int v4 = *((_DWORD *)this + 112);
  if (v4)
  {
    unsigned int v5 = *((_DWORD *)this + 113);
    char v6 = this;
    if (v5 >= 9) {
      char v6 = *(pxrInternal__aapl__pxrReserved__::HdDataSourceLocator **)this;
    }
    unint64_t v7 = *((unsigned int *)this + 112);
    do
    {
      uint64_t v8 = (uint64_t *)((char *)v6 + 56 * (v7 >> 1));
      int v9 = sub_2171DD44C(v8, (uint64_t *)a2);
      if (v9) {
        v7 += ~(v7 >> 1);
      }
      else {
        v7 >>= 1;
      }
      if (v9) {
        char v6 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)(v8 + 7);
      }
    }
    while (v7);
    uint64_t v12 = v6;
    char v10 = this;
    if (v5 >= 9) {
      char v10 = *(pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet **)this;
    }
    if (v6 == (pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *)((char *)v10 + 56 * v4)) {
      return pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::_InsertAndDeleteSuffixes(this, &v12, a2);
    }
    uint64_t result = pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HasPrefix(a2, (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator **)v6);
    if ((result & 1) == 0) {
      return pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::_InsertAndDeleteSuffixes(this, &v12, a2);
    }
  }
  else
  {
    return (uint64_t)sub_2171E01B0((uint64_t)this, (uint64_t)a2);
  }
  return result;
}

unint64_t sub_2171DD44C(uint64_t *a1, uint64_t *a2)
{
  LODWORD(v2) = *((_DWORD *)a1 + 12);
  if (!v2) {
    return v2 & 1;
  }
  unsigned int v3 = *((_DWORD *)a2 + 12);
  if (v3 >= v2) {
    unint64_t v4 = v2;
  }
  else {
    unint64_t v4 = v3;
  }
  if (!v4)
  {
    LOBYTE(v2) = 0;
    return v2 & 1;
  }
  uint64_t v5 = 0;
  if (*((_DWORD *)a1 + 13) >= 7u) {
    char v6 = (uint64_t *)*a1;
  }
  else {
    char v6 = a1;
  }
  LODWORD(v2) = *((_DWORD *)a2 + 13);
  if (v2 >= 7) {
    unint64_t v7 = (uint64_t *)*a2;
  }
  else {
    unint64_t v7 = a2;
  }
  BOOL v8 = 1;
  while (1)
  {
    uint64_t v9 = v6[v5];
    uint64_t v10 = v7[v5];
    if (!v9 || v10 == 0)
    {
      if (v9) {
        BOOL v12 = 1;
      }
      else {
        BOOL v12 = v10 == 0;
      }
      if (!v12) {
        goto LABEL_79;
      }
    }
    else if (v9 != v10)
    {
      unint64_t v13 = v9 & 0xFFFFFFFFFFFFFFF8;
      unint64_t v2 = v10 & 0xFFFFFFFFFFFFFFF8;
      unint64_t v14 = *(void *)((v9 & 0xFFFFFFFFFFFFFFF8) + 8);
      unint64_t v15 = *(void *)((v10 & 0xFFFFFFFFFFFFFFF8) + 8);
      if (v14 < v15) {
        goto LABEL_79;
      }
      if (v14 == v15)
      {
        unint64_t v18 = *(const void **)(v2 + 16);
        unint64_t v16 = v2 + 16;
        unint64_t v17 = v18;
        int v19 = *(char *)(v16 + 23);
        int v22 = *(const void **)(v13 + 16);
        unint64_t v20 = v13 + 16;
        uint64_t v21 = v22;
        int v23 = *(char *)(v20 + 23);
        if (v23 >= 0) {
          size_t v24 = *(unsigned __int8 *)(v20 + 23);
        }
        else {
          size_t v24 = *(void *)(v20 + 8);
        }
        if (v23 >= 0) {
          uint64_t v25 = (const void *)v20;
        }
        else {
          uint64_t v25 = v21;
        }
        if (v19 >= 0) {
          size_t v26 = *(unsigned __int8 *)(v16 + 23);
        }
        else {
          size_t v26 = *(void *)(v16 + 8);
        }
        if (v19 >= 0) {
          size_t v27 = (const void *)v16;
        }
        else {
          size_t v27 = v17;
        }
        if (v26 >= v24) {
          size_t v28 = v24;
        }
        else {
          size_t v28 = v26;
        }
        int v29 = memcmp(v25, v27, v28);
        LOBYTE(v2) = v24 < v26;
        if (v29) {
          LOBYTE(v2) = v29 < 0;
        }
        if (v2)
        {
LABEL_79:
          LOBYTE(v2) = 1;
          goto LABEL_81;
        }
      }
    }
    if (!v10 || v9 == 0) {
      break;
    }
    if (v10 != v9)
    {
      unint64_t v32 = v10 & 0xFFFFFFFFFFFFFFF8;
      unint64_t v2 = v9 & 0xFFFFFFFFFFFFFFF8;
      unint64_t v33 = *(void *)((v10 & 0xFFFFFFFFFFFFFFF8) + 8);
      unint64_t v34 = *(void *)((v9 & 0xFFFFFFFFFFFFFFF8) + 8);
      if (v33 < v34) {
        goto LABEL_80;
      }
      if (v33 == v34)
      {
        unint64_t v37 = *(void *)(v2 + 16);
        unint64_t v35 = v2 + 16;
        unint64_t v36 = v37;
        int v38 = *(char *)(v35 + 23);
        unint64_t v41 = *(void *)(v32 + 16);
        unint64_t v39 = v32 + 16;
        unint64_t v40 = v41;
        int v42 = *(char *)(v39 + 23);
        unint64_t v43 = v42 >= 0 ? *(unsigned __int8 *)(v39 + 23) : *(void *)(v39 + 8);
        uint64_t v44 = (const void *)(v42 >= 0 ? v39 : v40);
        unint64_t v45 = v38 >= 0 ? *(unsigned __int8 *)(v35 + 23) : *(void *)(v35 + 8);
        size_t v46 = (const void *)(v38 >= 0 ? v35 : v36);
        size_t v47 = v45 >= v43 ? v43 : v45;
        int v48 = memcmp(v44, v46, v47);
        LOBYTE(v2) = v43 < v45;
        if (v48) {
          LOBYTE(v2) = v48 < 0;
        }
        if (v2) {
          goto LABEL_80;
        }
      }
    }
LABEL_76:
    BOOL v8 = ++v5 < v4;
    if (v4 == v5) {
      goto LABEL_81;
    }
  }
  if (v9) {
    BOOL v31 = v10 == 0;
  }
  else {
    BOOL v31 = 0;
  }
  if (!v31) {
    goto LABEL_76;
  }
LABEL_80:
  LOBYTE(v2) = 0;
LABEL_81:
  LOBYTE(v2) = v8 & v2;
  return v2 & 1;
}

void pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::insert(pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *this, const pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *a2)
{
  uint64_t v16 = *((unsigned int *)a2 + 112);
  if (v16)
  {
    unint64_t v2 = a2;
    if (*((_DWORD *)this + 112))
    {
      unint64_t v4 = this;
      if (*((_DWORD *)this + 113) >= 9u) {
        unint64_t v4 = *(pxrInternal__aapl__pxrReserved__::HdDataSourceLocator **)this;
      }
      unint64_t v17 = v4;
      unsigned int v5 = *((_DWORD *)a2 + 113);
      BOOL v6 = v5 < 9;
      unint64_t v7 = *(const pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet **)a2;
      if (v5 >= 9) {
        BOOL v8 = *(uint64_t **)a2;
      }
      else {
        BOOL v8 = (uint64_t *)a2;
      }
      while (1)
      {
        unsigned int v9 = *((_DWORD *)this + 113);
        unsigned int v10 = *((_DWORD *)this + 112);
        for (uint64_t i = (uint64_t *)v17; ; i += 7)
        {
          BOOL v12 = this;
          if (v9 >= 9) {
            BOOL v12 = *(pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet **)this;
          }
          if (i == (uint64_t *)((char *)v12 + 56 * v10) || !sub_2171DD44C(i, v8)) {
            break;
          }
        }
        unint64_t v17 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)i;
        unint64_t v13 = this;
        if (v9 >= 9) {
          unint64_t v13 = *(pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet **)this;
        }
        if (i == (uint64_t *)((char *)v13 + 56 * v10)) {
          break;
        }
        if (!pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HasPrefix((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)v8, (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator **)i))
        {
          pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::_InsertAndDeleteSuffixes(this, &v17, (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)v8);
          unsigned int v5 = *((_DWORD *)v2 + 113);
          unint64_t v7 = *(const pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet **)v2;
          uint64_t v16 = *((unsigned int *)v2 + 112);
        }
        v8 += 7;
        BOOL v6 = v5 < 9;
        if (v5 >= 9) {
          unint64_t v14 = v7;
        }
        else {
          unint64_t v14 = v2;
        }
        if (v8 == (uint64_t *)((char *)v14 + 56 * v16)) {
          return;
        }
      }
      if (v6) {
        unint64_t v15 = v2;
      }
      else {
        unint64_t v15 = v7;
      }
      sub_2171DD7FC((uint64_t)this, (char *)i, (uint64_t)v8, (uint64_t)v15 + 56 * v16);
    }
    else if (this != a2)
    {
      if (*((_DWORD *)a2 + 113) >= 9u) {
        a2 = *(const pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet **)a2;
      }
      sub_2171E02B0((uint64_t)this, (uint64_t)a2, (uint64_t)a2 + 56 * v16);
    }
  }
}

void sub_2171DD7FC(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3;
  BOOL v6 = a2;
  unsigned int v8 = *(_DWORD *)(a1 + 452);
  unsigned int v9 = (char *)a1;
  if (v8 >= 9) {
    unsigned int v9 = *(char **)a1;
  }
  int v10 = *(_DWORD *)(a1 + 448);
  uint64_t v11 = &v9[56 * v10];
  uint64_t v12 = 0x6DB6DB6DB6DB6DB7 * ((a4 - a3) >> 3);
  unsigned int v13 = v10 - 1227133513 * ((a4 - a3) >> 3);
  unsigned int v14 = v8 + (v8 >> 1);
  if (v14 + 1 > v13) {
    unsigned int v15 = v14 + 1;
  }
  else {
    unsigned int v15 = v10 - 1227133513 * ((a4 - a3) >> 3);
  }
  if (v11 == a2)
  {
    if (v13 > v8)
    {
      sub_2171E0228(a1, v15);
      unsigned int v8 = *(_DWORD *)(a1 + 452);
    }
    int v22 = (char *)a1;
    if (v8 < 9) {
      goto LABEL_21;
    }
LABEL_20:
    int v22 = *(char **)a1;
LABEL_21:
    sub_2171AA7B0(v5, a4, (uint64_t)&v22[56 * *(unsigned int *)(a1 + 448)]);
    goto LABEL_22;
  }
  if (v13 <= v8)
  {
    int v23 = (char *)a1;
    if (v8 >= 9) {
      int v23 = *(char **)a1;
    }
    uint64_t v24 = 0x6DB6DB6DB6DB6DB7 * ((&v23[56 * v10] - a2) >> 3);
    if (v24 >= v12) {
      uint64_t v25 = 0x6DB6DB6DB6DB6DB7 * ((a4 - a3) >> 3);
    }
    else {
      uint64_t v25 = v24;
    }
    size_t v26 = &a2[56 * (v24 - v25)];
    size_t v27 = (char *)a1;
    if (v8 >= 9) {
      size_t v27 = *(char **)a1;
    }
    uint64_t v28 = (uint64_t)&v27[56 * v10];
    int v29 = (char *)(v28 + 56 * (v12 - v25));
    sub_2171AE7A0((uint64_t)v26, v28, (uint64_t)v29);
    sub_2171E0338((uint64_t)&v32, v6, v26, v29);
    if (v25 >= 1)
    {
      do
      {
        if ((char *)v5 != v6)
        {
          if (*(_DWORD *)(v5 + 52) >= 7u) {
            uint64_t v30 = *(char **)v5;
          }
          else {
            uint64_t v30 = (char *)v5;
          }
          sub_2171AF8E4((uint64_t)v6, v30, &v30[8 * *(unsigned int *)(v5 + 48)]);
        }
        v5 += 56;
        v6 += 56;
        --v25;
      }
      while (v25);
    }
    int v22 = (char *)a1;
    if (*(_DWORD *)(a1 + 452) < 9u) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  uint64_t v16 = (char *)a1;
  if (v8 >= 9) {
    uint64_t v16 = *(char **)a1;
  }
  unsigned int v17 = -1227133513 * ((unint64_t)(a2 - v16) >> 3);
  unint64_t v18 = malloc(56 * v15);
  uint64_t v19 = (uint64_t)v18 + 56 * v17;
  uint64_t v20 = a1;
  if (v8 >= 9) {
    uint64_t v20 = *(void *)a1;
  }
  sub_2171AE7A0(v20, (uint64_t)v6, (uint64_t)v18);
  sub_2171AA7B0(v5, a4, v19);
  uint64_t v21 = a1;
  if (*(_DWORD *)(a1 + 452) >= 9u) {
    uint64_t v21 = *(void *)a1;
  }
  sub_2171AE7A0((uint64_t)v6, v21 + 56 * *(unsigned int *)(a1 + 448), v19 + 56 * v12);
  sub_2171AA954(a1);
  if (*(_DWORD *)(a1 + 452) >= 9u) {
    free(*(void **)a1);
  }
  *(void *)a1 = v18;
  *(_DWORD *)(a1 + 452) = v15;
LABEL_22:
  *(_DWORD *)(a1 + 448) += v12;
}

void pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::insert(pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *this, pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *a2)
{
  uint64_t v4 = *((unsigned int *)this + 112);
  if (v4)
  {
    if (v4 + 5 < (unint64_t)*((unsigned int *)a2 + 112)) {
      sub_2171DDB28((uint64_t)this, (uint64_t)a2);
    }
    pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::insert(this, a2);
  }
  else if (this != a2)
  {
    sub_2171DDB28((uint64_t)this, (uint64_t)a2);
  }
}

uint64_t sub_2171DDB28(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  unsigned int v3 = *(_DWORD *)(a2 + 452);
  if (*(_DWORD *)(result + 452) > 8u)
  {
    if (v3 >= 9)
    {
      uint64_t v24 = *(void *)result;
      *(void *)uint64_t result = *(void *)a2;
      *(void *)a2 = v24;
      LODWORD(v24) = *(_DWORD *)(result + 448);
      *(_DWORD *)(result + 448) = *(_DWORD *)(a2 + 448);
      *(_DWORD *)(a2 + 448) = v24;
      LODWORD(v24) = *(_DWORD *)(result + 452);
      *(_DWORD *)(result + 452) = *(_DWORD *)(a2 + 452);
      *(_DWORD *)(a2 + 452) = v24;
      return result;
    }
    uint64_t v15 = a2;
  }
  else
  {
    if (v3 <= 8)
    {
      unsigned int v4 = *(_DWORD *)(result + 448);
      unsigned int v5 = *(_DWORD *)(a2 + 448);
      if (v4 >= v5) {
        uint64_t v6 = a2;
      }
      else {
        uint64_t v6 = result;
      }
      if (v4 < v5) {
        uint64_t v2 = a2;
      }
      uint64_t v7 = v6;
      if (*(_DWORD *)(v6 + 452) >= 9u) {
        uint64_t v7 = *(void *)v6;
      }
      uint64_t v8 = v2;
      if (*(_DWORD *)(v2 + 452) >= 9u) {
        uint64_t v8 = *(void *)v2;
      }
      uint64_t result = sub_2171E03BC(v7, v7 + 56 * *(unsigned int *)(v6 + 448), v8);
      unint64_t v9 = *(unsigned int *)(v6 + 448);
      LODWORD(v10) = *(_DWORD *)(v2 + 448);
      if (v9 < v10)
      {
        uint64_t v11 = 56 * v9;
        do
        {
          uint64_t v12 = v6;
          if (*(_DWORD *)(v6 + 452) >= 9u) {
            uint64_t v12 = *(void *)v6;
          }
          uint64_t v13 = v2;
          if (*(_DWORD *)(v2 + 452) >= 9u) {
            uint64_t v13 = *(void *)v2;
          }
          sub_2171AA848((_DWORD *)(v12 + v11), v13 + v11);
          uint64_t v14 = v2;
          if (*(_DWORD *)(v2 + 452) >= 9u) {
            uint64_t v14 = *(void *)v2;
          }
          uint64_t result = sub_217199B64(v14 + v11);
          ++v9;
          unint64_t v10 = *(unsigned int *)(v2 + 448);
          v11 += 56;
        }
        while (v9 < v10);
        LODWORD(v9) = *(_DWORD *)(v6 + 448);
      }
      *(_DWORD *)(v6 + 448) = v10;
      *(_DWORD *)(v2 + 448) = v9;
      return result;
    }
    uint64_t v15 = result;
    uint64_t v2 = a2;
  }
  uint64_t v16 = *(void *)v2;
  LODWORD(v17) = *(_DWORD *)(v15 + 448);
  if (v17)
  {
    uint64_t v18 = 0;
    unint64_t v19 = 0;
    do
    {
      uint64_t v20 = v15;
      if (*(_DWORD *)(v15 + 452) >= 9u) {
        uint64_t v20 = *(void *)v15;
      }
      sub_2171AA848((_DWORD *)(v2 + v18), v20 + v18);
      uint64_t v21 = v15;
      if (*(_DWORD *)(v15 + 452) >= 9u) {
        uint64_t v21 = *(void *)v15;
      }
      uint64_t result = sub_217199B64(v21 + v18);
      ++v19;
      unint64_t v17 = *(unsigned int *)(v15 + 448);
      v18 += 56;
    }
    while (v19 < v17);
  }
  *(void *)uint64_t v15 = v16;
  int v22 = *(_DWORD *)(v2 + 448);
  *(_DWORD *)(v2 + 448) = v17;
  *(_DWORD *)(v15 + 448) = v22;
  int v23 = *(_DWORD *)(v2 + 452);
  *(_DWORD *)(v2 + 452) = *(_DWORD *)(v15 + 452);
  *(_DWORD *)(v15 + 452) = v23;
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::append(pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *this, const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *a2)
{
  unsigned int v4 = *((_DWORD *)this + 112);
  if (!v4) {
    goto LABEL_5;
  }
  unsigned int v5 = this;
  if (*((_DWORD *)this + 113) >= 9u) {
    unsigned int v5 = *(pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet **)this;
  }
  if (!sub_2171DD44C((uint64_t *)v5 + 7 * v4 - 7, (uint64_t *)a2))
  {
    return (_DWORD *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::insert(this, a2);
  }
  else
  {
LABEL_5:
    return sub_2171E01B0((uint64_t)this, (uint64_t)a2);
  }
}

_DWORD *pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::begin(_DWORD *this)
{
  if (this[113] >= 9u) {
    return *(_DWORD **)this;
  }
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::end(pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *this)
{
  uint64_t v1 = this;
  if (*((_DWORD *)this + 113) >= 9u) {
    uint64_t v1 = *(pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet **)this;
  }
  return (uint64_t)v1 + 56 * *((unsigned int *)this + 112);
}

pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::_FirstIntersection(pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *this, const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *a2)
{
  unsigned int v3 = this;
  unsigned int v4 = *((_DWORD *)this + 112);
  unsigned int v5 = *((_DWORD *)this + 113);
  uint64_t v6 = this;
  if (v4 <= 4)
  {
    if (v5 >= 9) {
      uint64_t v6 = *(pxrInternal__aapl__pxrReserved__::HdDataSourceLocator **)this;
    }
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *)((char *)this + 56 * v4);
    while (1)
    {
      if (v5 > 8)
      {
        if (v6 == (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)(*(void *)v3 + 56 * v4))
        {
          unsigned int v3 = *(pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet **)v3;
          return (pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *)((char *)v3 + 56 * v4);
        }
      }
      else if (v6 == v7)
      {
        return (pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *)((char *)v3 + 56 * v4);
      }
      if (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::Intersects(v6, a2)) {
        return v6;
      }
      uint64_t v6 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)((char *)v6 + 56);
    }
  }
  if (v5 >= 9) {
    uint64_t v6 = *(pxrInternal__aapl__pxrReserved__::HdDataSourceLocator **)this;
  }
  unint64_t v8 = *((unsigned int *)this + 112);
  do
  {
    unint64_t v9 = (uint64_t *)((char *)v6 + 56 * (v8 >> 1));
    int v10 = sub_2171DD44C(v9, (uint64_t *)a2);
    if (v10) {
      v8 += ~(v8 >> 1);
    }
    else {
      v8 >>= 1;
    }
    if (v10) {
      uint64_t v6 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)(v9 + 7);
    }
  }
  while (v8);
  uint64_t v11 = v3;
  if (v5 >= 9) {
    uint64_t v11 = *(pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet **)v3;
  }
  if (v6 == (pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *)((char *)v11 + 56 * v4)
    || !pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HasPrefix(a2, (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator **)v6)&& !pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HasPrefix(v6, (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator **)a2))
  {
    if (v5 >= 9) {
      unsigned int v3 = *(pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet **)v3;
    }
    return (pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *)((char *)v3 + 56 * v4);
  }
  return v6;
}

BOOL pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::Intersects(pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *this, const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *a2)
{
  Intersection = pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::_FirstIntersection(this, a2);
  unsigned int v4 = this;
  if (*((_DWORD *)this + 113) >= 9u) {
    unsigned int v4 = *(pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet **)this;
  }
  return Intersection != (pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *)((char *)v4
                                                                                    + 56 * *((unsigned int *)this + 112));
}

uint64_t pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::Intersects(pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *this, const pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet **a2)
{
  uint64_t v2 = this;
  unsigned int v3 = *((_DWORD *)this + 112);
  uint64_t v4 = *((unsigned int *)a2 + 112);
  unsigned int v5 = *((_DWORD *)this + 113);
  if (v4 * v3 <= 8)
  {
    if (v5 >= 9) {
      uint64_t v2 = *(pxrInternal__aapl__pxrReserved__::HdDataSourceLocator **)this;
    }
    if (v3)
    {
      uint64_t v6 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)((char *)v2 + 56 * v3);
      if (*((_DWORD *)a2 + 113) >= 9u) {
        uint64_t v7 = *a2;
      }
      else {
        uint64_t v7 = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *)a2;
      }
      while (1)
      {
        uint64_t v8 = 56 * v4;
        unint64_t v9 = v7;
        if (v4) {
          break;
        }
LABEL_11:
        uint64_t result = 0;
        uint64_t v2 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)((char *)v2 + 56);
        if (v2 == v6) {
          return result;
        }
      }
      while (!pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::Intersects(v2, v9))
      {
        unint64_t v9 = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)((char *)v9 + 56);
        v8 -= 56;
        if (!v8) {
          goto LABEL_11;
        }
      }
      return 1;
    }
    return 0;
  }
  uint64_t v11 = (uint64_t *)this;
  if (v5 >= 9) {
    uint64_t v11 = *(uint64_t **)this;
  }
  if (*((_DWORD *)a2 + 113) >= 9u) {
    uint64_t v12 = (uint64_t *)*a2;
  }
  else {
    uint64_t v12 = (uint64_t *)a2;
  }
  if (!v4) {
    return 0;
  }
  uint64_t v13 = &v12[7 * v4];
  while (1)
  {
    while (1)
    {
      uint64_t v14 = v2;
      if (v5 >= 9) {
        uint64_t v14 = *(pxrInternal__aapl__pxrReserved__::HdDataSourceLocator **)v2;
      }
      if (v11 == (uint64_t *)((char *)v14 + 56 * v3) || !sub_2171DD44C(v11, v12)) {
        break;
      }
      v11 += 7;
    }
    uint64_t v15 = v2;
    if (v5 >= 9) {
      uint64_t v15 = *(pxrInternal__aapl__pxrReserved__::HdDataSourceLocator **)v2;
    }
    if (v11 == (uint64_t *)((char *)v15 + 56 * v3)) {
      break;
    }
    if (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HasPrefix((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)v12, (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator **)v11)|| pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HasPrefix((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)v11, (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator **)v12))
    {
      int v17 = 1;
      int v16 = 1;
      return v17 & v16;
    }
    v12 += 7;
    if (v12 == v13)
    {
      int v17 = 0;
      return v17 & v16;
    }
  }
  int v16 = 0;
  int v17 = 1;
  return v17 & v16;
}

BOOL pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::Contains(pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *this, const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *a2)
{
  unsigned int v3 = this;
  unsigned int v4 = *((_DWORD *)this + 112);
  unsigned int v5 = *((_DWORD *)this + 113);
  if (v4 <= 4)
  {
    if (v5 >= 9) {
      unsigned int v3 = *(pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet **)this;
    }
    if (v4)
    {
      uint64_t v6 = 56 * v4 - 56;
      do
      {
        BOOL result = pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HasPrefix(a2, (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator **)v3);
        if (result) {
          break;
        }
        unsigned int v3 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *)((char *)v3 + 56);
        uint64_t v8 = v6;
        v6 -= 56;
      }
      while (v8);
      return result;
    }
    return 0;
  }
  unint64_t v9 = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator **)this;
  if (v5 >= 9) {
    unint64_t v9 = *(const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator ***)this;
  }
  unint64_t v10 = *((unsigned int *)this + 112);
  do
  {
    uint64_t v11 = (uint64_t *)&v9[7 * (v10 >> 1)];
    int v12 = sub_2171DD44C(v11, (uint64_t *)a2);
    if (v12) {
      v10 += ~(v10 >> 1);
    }
    else {
      v10 >>= 1;
    }
    if (v12) {
      unint64_t v9 = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator **)(v11 + 7);
    }
  }
  while (v10);
  if (v5 >= 9) {
    unsigned int v3 = *(pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet **)v3;
  }
  if (v9 == (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator **)((char *)v3 + 56 * v4)) {
    return 0;
  }

  return pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HasPrefix(a2, v9);
}

BOOL pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::IsEmpty(pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *this)
{
  return *((_DWORD *)this + 112) == 0;
}

_DWORD *pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::ReplacePrefix@<X0>(pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *this@<X0>, const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator **a2@<X1>, const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *a3@<X2>, pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *a4@<X8>)
{
  unsigned int v4 = this;
  uint64_t v33 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)this + 112) && (sub_2171DE8DC((uint64_t *)a2, (uint64_t)a3) & 1) == 0)
  {
    unsigned int v8 = *((_DWORD *)v4 + 112);
    if (v8 <= 4)
    {
      sub_2171AA72C(a4, (uint64_t)v4);
      if (*((_DWORD *)a4 + 113) >= 9u) {
        unint64_t v9 = *(pxrInternal__aapl__pxrReserved__::HdDataSourceLocator **)a4;
      }
      else {
        unint64_t v9 = a4;
      }
      uint64_t v10 = *((unsigned int *)a4 + 112);
      if (v10)
      {
        uint64_t v11 = 56 * v10;
        do
        {
          pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::ReplacePrefix(v9, a2, a3, v30);
          if (v9 != (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)v30)
          {
            if (v32 >= 7) {
              int v12 = (char *)v30[0];
            }
            else {
              int v12 = (char *)v30;
            }
            sub_2171AF8E4((uint64_t)v9, v12, &v12[8 * v31]);
          }
          sub_217199B64((uint64_t)v30);
          unint64_t v9 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)((char *)v9 + 56);
          v11 -= 56;
        }
        while (v11);
      }
      return (_DWORD *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::_Normalize((uint64_t)a4);
    }
    uint64_t v13 = v4;
    unsigned int v29 = *((_DWORD *)v4 + 113);
    if (v29 >= 9) {
      uint64_t v13 = *(pxrInternal__aapl__pxrReserved__::HdDataSourceLocator **)v4;
    }
    unint64_t v14 = *((unsigned int *)v4 + 112);
    do
    {
      uint64_t v15 = (uint64_t *)((char *)v13 + 56 * (v14 >> 1));
      int v16 = pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::operator<(v15, (uint64_t *)a2);
      if (v16) {
        v14 += ~(v14 >> 1);
      }
      else {
        v14 >>= 1;
      }
      if (v16) {
        uint64_t v13 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)(v15 + 7);
      }
    }
    while (v14);
    int v17 = v4;
    if (v29 >= 9) {
      int v17 = *(pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet **)v4;
    }
    if (v13 != (pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *)((char *)v17 + 56 * v8)
      && pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HasPrefix(v13, a2))
    {
      sub_2171AA72C(a4, (uint64_t)v4);
      if (*((_DWORD *)a4 + 113) >= 9u) {
        uint64_t v18 = *(pxrInternal__aapl__pxrReserved__::HdDataSourceLocator **)a4;
      }
      else {
        uint64_t v18 = a4;
      }
      if (*((_DWORD *)v4 + 113) >= 9u) {
        unsigned int v4 = *(pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet **)v4;
      }
      unint64_t v19 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)((char *)v18 + v13 - v4);
      if (sub_2171DE8DC((uint64_t *)v19, (uint64_t)a2))
      {
        if (v19 != a3)
        {
          if (*((_DWORD *)a3 + 13) >= 7u) {
            uint64_t v20 = *(char **)a3;
          }
          else {
            uint64_t v20 = (char *)a3;
          }
          sub_2171AF8E4((uint64_t)v19, v20, &v20[8 * *((unsigned int *)a3 + 12)]);
        }
      }
      else
      {
        int v22 = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)((char *)v19 + 56);
        if (*((_DWORD *)a4 + 113) >= 9u) {
          int v23 = *(pxrInternal__aapl__pxrReserved__::HdDataSourceLocator **)a4;
        }
        else {
          int v23 = a4;
        }
        uint64_t v24 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)((char *)v23 + 56 * *((unsigned int *)a4 + 112))
            - v22;
        if (!v24) {
          goto LABEL_64;
        }
        unint64_t v25 = 0x6DB6DB6DB6DB6DB7 * (v24 >> 3);
        do
        {
          size_t v26 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)((char *)v22 + 56 * (v25 >> 1));
          BOOL HasPrefix = pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HasPrefix(v26, a2);
          if (HasPrefix) {
            v25 += ~(v25 >> 1);
          }
          else {
            v25 >>= 1;
          }
          if (HasPrefix) {
            int v22 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)((char *)v26 + 56);
          }
        }
        while (v25);
        if (v19 < v22)
        {
LABEL_64:
          do
          {
            pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::ReplacePrefix(v19, a2, a3, v30);
            if (v19 != (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)v30)
            {
              if (v32 >= 7) {
                uint64_t v28 = (char *)v30[0];
              }
              else {
                uint64_t v28 = (char *)v30;
              }
              sub_2171AF8E4((uint64_t)v19, v28, &v28[8 * v31]);
            }
            sub_217199B64((uint64_t)v30);
            unint64_t v19 = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)((char *)v19 + 56);
          }
          while (v19 < v22);
        }
      }
      return (_DWORD *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::_Normalize((uint64_t)a4);
    }
  }

  return sub_2171AA72C(a4, (uint64_t)v4);
}

void sub_2171DE5AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator **pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::IntersectionIterator::operator*(uint64_t a1)
{
  if (!*(unsigned char *)a1) {
    return *(const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator ***)(a1 + 8);
  }
  uint64_t v1 = a1 + 24;
  uint64_t v2 = *(const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator ***)(a1 + 8);
  if (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HasPrefix((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)(a1 + 24), v2))
  {
    return (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator **)v1;
  }
  return v2;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::IntersectionIterator::operator++(uint64_t a1)
{
  *(unsigned char *)a1 = 0;
  uint64_t v2 = *(pxrInternal__aapl__pxrReserved__::HdDataSourceLocator **)(a1 + 16);
  unsigned int v3 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)(*(void *)(a1 + 8) + 56);
  *(void *)(a1 + 8) = v3;
  if (v3 != v2
    && !pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HasPrefix(v3, (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator **)(a1 + 24)))
  {
    *(void *)(a1 + 8) = v2;
  }
  return a1;
}

pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::IntersectionIterator::operator++@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(void *)(a2 + 16) = *(void *)(a1 + 16);
  sub_2171AA848((_DWORD *)(a2 + 24), a1 + 24);
  *(unsigned char *)a1 = 0;
  unsigned int v3 = *(pxrInternal__aapl__pxrReserved__::HdDataSourceLocator **)(a1 + 16);
  BOOL result = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)(*(void *)(a1 + 8) + 56);
  *(void *)(a1 + 8) = result;
  if (result != v3)
  {
    BOOL result = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HasPrefix(result, (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator **)(a1 + 24));
    if ((result & 1) == 0) {
      *(void *)(a1 + 8) = v3;
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::Intersection@<X0>(pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *this@<X0>, const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v4 = this;
  uint64_t v17 = *MEMORY[0x263EF8340];
  Intersection = pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::_FirstIntersection(this, a2);
  uint64_t v7 = v4;
  if (*((_DWORD *)v4 + 113) >= 9u) {
    uint64_t v7 = *(pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet **)v4;
  }
  unsigned int v8 = (char *)v7 + 56 * *((unsigned int *)v4 + 112);
  LOBYTE(v14) = 1;
  *((void *)&v14 + 1) = Intersection;
  uint64_t v15 = v8;
  sub_2171AA848(v16, (uint64_t)a2);
  unsigned int v9 = *((_DWORD *)v4 + 112);
  if (*((_DWORD *)v4 + 113) > 8u) {
    unsigned int v4 = *(pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet **)v4;
  }
  LOBYTE(v11) = 0;
  *((void *)&v11 + 1) = (char *)v4 + 56 * v9;
  uint64_t v12 = *((void *)&v11 + 1);
  sub_2171AA848(v13, (uint64_t)a2);
  sub_2171DE954(a3, &v14, &v11);
  sub_217199B64((uint64_t)v13);
  return sub_217199B64((uint64_t)v16);
}

void sub_2171DE800(_Unwind_Exception *a1)
{
  sub_217199B64(v2);
  sub_217199B64(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2171DE8DC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *((unsigned int *)a1 + 12);
  if (v2 != *(_DWORD *)(a2 + 48)) {
    return 0;
  }
  if (*((_DWORD *)a1 + 13) >= 7u) {
    a1 = (uint64_t *)*a1;
  }
  if (!v2) {
    return 1;
  }
  if (*(_DWORD *)(a2 + 52) >= 7u) {
    unsigned int v3 = *(uint64_t **)a2;
  }
  else {
    unsigned int v3 = (uint64_t *)a2;
  }
  uint64_t v4 = 8 * v2 - 8;
  do
  {
    uint64_t v5 = *a1++;
    unint64_t v6 = v5 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v7 = *v3++;
    BOOL v9 = v6 == (v7 & 0xFFFFFFFFFFFFFFF8);
    BOOL v8 = v9;
    BOOL v9 = !v9 || v4 == 0;
    v4 -= 8;
  }
  while (!v9);
  return v8;
}

uint64_t sub_2171DE954(uint64_t a1, long long *a2, long long *a3)
{
  long long v5 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v5;
  sub_2171AA848((_DWORD *)(a1 + 24), (uint64_t)a2 + 24);
  long long v6 = *a3;
  *(void *)(a1 + 96) = *((void *)a3 + 2);
  *(_OWORD *)(a1 + 80) = v6;
  sub_2171AA848((_DWORD *)(a1 + 104), (uint64_t)a3 + 24);
  return a1;
}

void sub_2171DE9C0(_Unwind_Exception *a1)
{
  sub_217199B64(v1);
  _Unwind_Resume(a1);
}

void sub_2171DE9D4(uint64_t a1, uint64_t *a2)
{
  unsigned int v4 = *(_DWORD *)(a1 + 48);
  unsigned int v5 = *(_DWORD *)(a1 + 52);
  if (v4 == v5)
  {
    sub_2171AF9D8(a1, v4 + (v4 >> 1) + 1);
    unsigned int v5 = *(_DWORD *)(a1 + 52);
  }
  uint64_t v6 = a1;
  if (v5 >= 7) {
    uint64_t v6 = *(void *)a1;
  }
  uint64_t v7 = *(unsigned int *)(a1 + 48);
  uint64_t v8 = *a2;
  *(void *)(v6 + 8 * v7) = *a2;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(v6 + 8 * v7) &= 0xFFFFFFFFFFFFFFF8;
  }
  ++*(_DWORD *)(a1 + 48);
}

uint64_t *sub_2171DEA64(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  BOOL v9 = (uint64_t *)a2;
  uint64_t v10 = result;
  unint64_t v25 = (uint64_t *)a2;
  size_t v26 = result;
LABEL_2:
  for (uint64_t i = 1 - a4; ; ++i)
  {
    uint64_t v12 = (char *)v9 - (char *)v10;
    unint64_t v13 = 0x6DB6DB6DB6DB6DB7 * (v9 - v10);
    if (!(!v6 & v5))
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          unint64_t v25 = v9 - 7;
          BOOL result = (uint64_t *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::operator<(v9 - 7, v10);
          if (result) {
            BOOL result = (uint64_t *)sub_2171AED6C((uint64_t *)&v26, (uint64_t *)&v25);
          }
          break;
        case 3uLL:
          unint64_t v25 = v9 - 7;
          BOOL result = (uint64_t *)sub_2171DEFE8(v10, v10 + 7, v9 - 7);
          break;
        case 4uLL:
          unint64_t v25 = v9 - 7;
          BOOL result = (uint64_t *)sub_2171DF684(v10, v10 + 7, v10 + 14, v9 - 7);
          break;
        case 5uLL:
          unint64_t v25 = v9 - 7;
          BOOL result = (uint64_t *)sub_2171DF724(v10, v10 + 7, v10 + 14, v10 + 21, v9 - 7);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v12 <= 1343)
    {
      if (a5) {
        return (uint64_t *)sub_2171DED74((uint64_t)v10, (uint64_t)v9);
      }
      else {
        return (uint64_t *)sub_2171DEEC0((uint64_t)v10, (uint64_t)v9);
      }
    }
    if (i == 1) {
      break;
    }
    unint64_t v14 = v13 >> 1;
    uint64_t v15 = v9 - 7;
    if ((unint64_t)v12 >= 0x1C01)
    {
      sub_2171DEFE8(v10, &v10[7 * (v13 >> 1)], v15);
      uint64_t v16 = 7 * v14;
      uint64_t v17 = 56 * v14 - 56;
      uint64_t v18 = (uint64_t)v25;
      sub_2171DEFE8(v26 + 7, (uint64_t *)((char *)v26 + v17), v25 - 14);
      sub_2171DEFE8(v26 + 14, &v26[v16 + 7], (uint64_t *)(v18 - 168));
      sub_2171DEFE8((uint64_t *)((char *)v26 + v17), &v26[v16], &v26[v16 + 7]);
      uint64_t v24 = &v26[v16];
      sub_2171AF1BC((uint64_t *)&v26, (uint64_t *)&v24);
    }
    else
    {
      sub_2171DEFE8(&v10[7 * (v13 >> 1)], v10, v15);
    }
    unint64_t v19 = v26;
    if (a5)
    {
      BOOL v9 = v25;
    }
    else
    {
      char v20 = pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::operator<(v26 - 7, v26);
      BOOL v9 = v25;
      if ((v20 & 1) == 0)
      {
        BOOL result = (uint64_t *)sub_2171DF0B0((uint64_t)v19, (uint64_t)v25);
        uint64_t v10 = result;
        goto LABEL_22;
      }
    }
    uint64_t v21 = sub_2171DF268((uint64_t)v19, (uint64_t)v9);
    if ((v22 & 1) == 0) {
      goto LABEL_20;
    }
    int v23 = sub_2171DF424(v26, (uint64_t)v21);
    uint64_t v10 = v21 + 7;
    BOOL result = (uint64_t *)sub_2171DF424(v21 + 7, (uint64_t)v9);
    if (result)
    {
      if (v23) {
        return result;
      }
      unint64_t v25 = v21;
      uint64_t v10 = v26;
      BOOL v9 = v21;
    }
    else
    {
      if (!v23)
      {
LABEL_20:
        BOOL result = (uint64_t *)sub_2171DEA64(v26, v21, a3, -i, a5 & 1);
        uint64_t v10 = v21 + 7;
LABEL_22:
        a5 = 0;
        size_t v26 = v10;
        a4 = -i;
        goto LABEL_2;
      }
      size_t v26 = v21 + 7;
    }
  }
  if (v10 != v9) {
    return (uint64_t *)sub_2171DF7F0(v10, v9, v9, a3);
  }
  return result;
}

uint64_t sub_2171DED74(uint64_t result, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if (result != a2)
  {
    unsigned int v3 = (uint64_t *)result;
    unsigned int v4 = (uint64_t *)(result + 56);
    if (result + 56 != a2)
    {
      uint64_t v5 = 0;
      uint64_t v6 = result;
      do
      {
        uint64_t v7 = (uint64_t *)v6;
        uint64_t v6 = (uint64_t)v4;
        BOOL result = pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::operator<(v4, v7);
        if (result)
        {
          sub_2171AA848(v12, v6);
          uint64_t v8 = v5;
          while (1)
          {
            BOOL v9 = *(_DWORD *)((char *)v3 + v8 + 52) >= 7u ? *(char **)((char *)v3 + v8) : (char *)v3 + v8;
            sub_2171AF8E4((uint64_t)v3 + v8 + 56, v9, &v9[8 * *(unsigned int *)((char *)v3 + v8 + 48)]);
            if (!v8) {
              break;
            }
            v8 -= 56;
            if ((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::operator<(v12, (uint64_t *)((char *)v3 + v8)) & 1) == 0)
            {
              uint64_t v10 = (uint64_t *)((char *)v3 + v8 + 56);
              goto LABEL_13;
            }
          }
          uint64_t v10 = v3;
LABEL_13:
          if (v10 != v12)
          {
            if (v14 >= 7) {
              long long v11 = (char *)v12[0];
            }
            else {
              long long v11 = (char *)v12;
            }
            sub_2171AF8E4((uint64_t)v10, v11, &v11[8 * v13]);
          }
          BOOL result = sub_217199B64((uint64_t)v12);
        }
        unsigned int v4 = (uint64_t *)(v6 + 56);
        v5 += 56;
      }
      while (v6 + 56 != a2);
    }
  }
  return result;
}

void sub_2171DEEA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2171DEEC0(uint64_t result, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (result != a2)
  {
    uint64_t v3 = result;
    for (uint64_t i = (uint64_t *)(result + 56); v3 + 56 != a2; uint64_t i = (uint64_t *)(v3 + 56))
    {
      uint64_t v5 = (uint64_t *)v3;
      uint64_t v3 = (uint64_t)i;
      BOOL result = pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::operator<(i, v5);
      if (result)
      {
        sub_2171AA848(v10, v3);
        uint64_t v6 = (uint64_t *)v3;
        do
        {
          if (*((_DWORD *)v6 - 1) >= 7u) {
            uint64_t v7 = (char *)*(v6 - 7);
          }
          else {
            uint64_t v7 = (char *)(v6 - 7);
          }
          sub_2171AF8E4((uint64_t)v6, v7, &v7[8 * *((unsigned int *)v6 - 2)]);
          char v8 = pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::operator<(v10, v6 - 14);
          v6 -= 7;
        }
        while ((v8 & 1) != 0);
        if (v6 != v10)
        {
          if (v12 >= 7) {
            BOOL v9 = (char *)v10[0];
          }
          else {
            BOOL v9 = (char *)v10;
          }
          sub_2171AF8E4((uint64_t)v6, v9, &v9[8 * v11]);
        }
        BOOL result = sub_217199B64((uint64_t)v10);
      }
    }
  }
  return result;
}

void sub_2171DEFC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2171DEFE8(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v10 = a2;
  int v11 = a1;
  BOOL v9 = a3;
  char v5 = pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::operator<(a2, a1);
  uint64_t result = pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::operator<(a3, a2);
  if ((v5 & 1) == 0)
  {
    if (!result) {
      return result;
    }
    sub_2171AED6C((uint64_t *)&v10, (uint64_t *)&v9);
    if (!pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::operator<(v10, v11)) {
      return 1;
    }
    uint64_t v7 = &v11;
    char v8 = &v10;
    goto LABEL_9;
  }
  if (!result)
  {
    sub_2171AED6C((uint64_t *)&v11, (uint64_t *)&v10);
    if (!pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::operator<(v9, v10)) {
      return 1;
    }
    uint64_t v7 = &v10;
    char v8 = &v9;
LABEL_9:
    sub_2171AED6C((uint64_t *)v7, (uint64_t *)v8);
    return 2;
  }
  sub_2171AED6C((uint64_t *)&v11, (uint64_t *)&v9);
  return 1;
}

uint64_t sub_2171DF0B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t *)a2;
  uint64_t v16 = *MEMORY[0x263EF8340];
  int v11 = (uint64_t *)a2;
  sub_2171AA848(v13, a1);
  if (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::operator<(v13, v2 - 7))
  {
    unsigned int v4 = (uint64_t *)a1;
    do
    {
      v4 += 7;
      unsigned int v12 = v4;
    }
    while ((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::operator<(v13, v4) & 1) == 0);
  }
  else
  {
    char v5 = (uint64_t *)(a1 + 56);
    do
    {
      unsigned int v4 = v5;
      unsigned int v12 = v5;
      if (v5 >= v2) {
        break;
      }
      int v6 = pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::operator<(v13, v5);
      char v5 = v4 + 7;
    }
    while (!v6);
  }
  if (v4 < v2)
  {
    do
    {
      v2 -= 7;
      int v11 = v2;
    }
    while ((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::operator<(v13, v2) & 1) != 0);
  }
  while (v4 < v2)
  {
    sub_2171AED6C((uint64_t *)&v12, (uint64_t *)&v11);
    unsigned int v4 = v12;
    do
    {
      v4 += 7;
      unsigned int v12 = v4;
    }
    while (!pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::operator<(v13, v4));
    uint64_t v2 = v11;
    do
    {
      v2 -= 7;
      int v11 = v2;
    }
    while ((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::operator<(v13, v2) & 1) != 0);
  }
  if (v4 - 7 != (uint64_t *)a1)
  {
    if (*((_DWORD *)v4 - 1) >= 7u) {
      uint64_t v7 = (char *)*(v4 - 7);
    }
    else {
      uint64_t v7 = (char *)(v4 - 7);
    }
    sub_2171AF8E4(a1, v7, &v7[8 * *((unsigned int *)v4 - 2)]);
  }
  if (v4 - 7 != v13)
  {
    if (v15 >= 7) {
      char v8 = (char *)v13[0];
    }
    else {
      char v8 = (char *)v13;
    }
    sub_2171AF8E4((uint64_t)(v4 - 7), v8, &v8[8 * v14]);
  }
  uint64_t v9 = (uint64_t)v12;
  sub_217199B64((uint64_t)v13);
  return v9;
}

void sub_2171DF248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t *sub_2171DF268(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t *)a2;
  uint64_t v16 = *MEMORY[0x263EF8340];
  int v11 = (uint64_t *)a2;
  sub_2171AA848(v13, a1);
  uint64_t v4 = 0;
  do
  {
    v4 += 56;
    unsigned int v12 = (uint64_t *)(v4 + a1);
  }
  while ((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::operator<((uint64_t *)(v4 + a1), v13) & 1) != 0);
  unint64_t v5 = a1 + v4;
  if (v4 == 56)
  {
    do
    {
      if (v5 >= (unint64_t)v2) {
        break;
      }
      v2 -= 7;
      int v11 = v2;
    }
    while ((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::operator<(v2, v13) & 1) == 0);
  }
  else
  {
    do
    {
      v2 -= 7;
      int v11 = v2;
    }
    while (!pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::operator<(v2, v13));
  }
  int v6 = (uint64_t *)(a1 + v4);
  if (v5 < (unint64_t)v2)
  {
    do
    {
      sub_2171AED6C((uint64_t *)&v12, (uint64_t *)&v11);
      int v6 = v12;
      do
      {
        v6 += 7;
        unsigned int v12 = v6;
      }
      while ((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::operator<(v6, v13) & 1) != 0);
      uint64_t v7 = v11;
      do
      {
        v7 -= 7;
        int v11 = v7;
      }
      while (!pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::operator<(v7, v13));
    }
    while (v6 < v7);
  }
  if (v6 - 7 != (uint64_t *)a1)
  {
    if (*((_DWORD *)v6 - 1) >= 7u) {
      char v8 = (char *)*(v6 - 7);
    }
    else {
      char v8 = (char *)(v6 - 7);
    }
    sub_2171AF8E4(a1, v8, &v8[8 * *((unsigned int *)v6 - 2)]);
  }
  if (v6 - 7 != v13)
  {
    if (v15 >= 7) {
      uint64_t v9 = (char *)v13[0];
    }
    else {
      uint64_t v9 = (char *)v13;
    }
    sub_2171AF8E4((uint64_t)(v6 - 7), v9, &v9[8 * v14]);
  }
  sub_217199B64((uint64_t)v13);
  return v6 - 7;
}

void sub_2171DF404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t sub_2171DF424(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v17 = *MEMORY[0x263EF8340];
  unsigned int v12 = (uint64_t *)a2;
  uint64_t v13 = a1;
  BOOL v4 = 1;
  switch(0x6DB6DB6DB6DB6DB7 * ((a2 - (uint64_t)a1) >> 3))
  {
    case 0:
    case 1:
      return v4;
    case 2:
      unsigned int v12 = (uint64_t *)(a2 - 56);
      if (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::operator<((uint64_t *)(a2 - 56), a1)) {
        sub_2171AED6C((uint64_t *)&v13, (uint64_t *)&v12);
      }
      return v4;
    case 3:
      sub_2171DEFE8(a1, a1 + 7, (uint64_t *)(a2 - 56));
      return v4;
    case 4:
      sub_2171DF684(a1, a1 + 7, a1 + 14, (uint64_t *)(a2 - 56));
      return v4;
    case 5:
      sub_2171DF724(a1, a1 + 7, a1 + 14, a1 + 21, (uint64_t *)(a2 - 56));
      return v4;
    default:
      unint64_t v5 = a1 + 14;
      sub_2171DEFE8(a1, a1 + 7, a1 + 14);
      int v6 = a1 + 21;
      if (a1 + 21 == (uint64_t *)v2) {
        return 1;
      }
      int v7 = 0;
      break;
  }
  while (!pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::operator<(v6, v5))
  {
LABEL_20:
    unint64_t v5 = v6;
    v6 += 7;
    if (v6 == (uint64_t *)v2) {
      return 1;
    }
  }
  sub_2171AA848(v14, (uint64_t)v6);
  do
  {
    char v8 = v5;
    if (*((_DWORD *)v5 + 13) >= 7u) {
      uint64_t v9 = (char *)*v5;
    }
    else {
      uint64_t v9 = (char *)v5;
    }
    sub_2171AF8E4((uint64_t)(v5 + 7), v9, &v9[8 * *((unsigned int *)v5 + 12)]);
    if (v5 == v13) {
      break;
    }
    v5 -= 7;
  }
  while ((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::operator<(v14, v8 - 7) & 1) != 0);
  if (v8 != v14)
  {
    if (v16 >= 7) {
      uint64_t v10 = (char *)v14[0];
    }
    else {
      uint64_t v10 = (char *)v14;
    }
    sub_2171AF8E4((uint64_t)v8, v10, &v10[8 * v15]);
  }
  if (++v7 != 8)
  {
    sub_217199B64((uint64_t)v14);
    uint64_t v2 = (uint64_t)v12;
    goto LABEL_20;
  }
  BOOL v4 = v6 + 7 == v12;
  sub_217199B64((uint64_t)v14);
  return v4;
}

void sub_2171DF64C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_217199B64((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2171DF684(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  int v11 = a2;
  unsigned int v12 = a1;
  uint64_t v9 = a4;
  uint64_t v10 = a3;
  sub_2171DEFE8(a1, a2, a3);
  uint64_t result = pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::operator<(a4, a3);
  if (result)
  {
    sub_2171AED6C((uint64_t *)&v10, (uint64_t *)&v9);
    uint64_t result = pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::operator<(v10, a2);
    if (result)
    {
      sub_2171AED6C((uint64_t *)&v11, (uint64_t *)&v10);
      uint64_t result = pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::operator<(v11, a1);
      if (result) {
        return sub_2171AED6C((uint64_t *)&v12, (uint64_t *)&v11);
      }
    }
  }
  return result;
}

uint64_t sub_2171DF724(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  int v14 = a2;
  int v15 = a1;
  unsigned int v12 = a4;
  uint64_t v13 = a3;
  int v11 = a5;
  sub_2171DF684(a1, a2, a3, a4);
  uint64_t result = pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::operator<(a5, a4);
  if (result)
  {
    sub_2171AED6C((uint64_t *)&v12, (uint64_t *)&v11);
    uint64_t result = pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::operator<(v12, a3);
    if (result)
    {
      sub_2171AED6C((uint64_t *)&v13, (uint64_t *)&v12);
      uint64_t result = pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::operator<(v13, a2);
      if (result)
      {
        sub_2171AED6C((uint64_t *)&v14, (uint64_t *)&v13);
        uint64_t result = pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::operator<(v14, a1);
        if (result) {
          return sub_2171AED6C((uint64_t *)&v15, (uint64_t *)&v14);
        }
      }
    }
  }
  return result;
}

uint64_t sub_2171DF7F0(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v18 = a1;
  if (a1 != a2)
  {
    uint64_t v6 = (uint64_t)a2;
    int v7 = a1;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) / 56;
    if ((char *)a2 - (char *)a1 >= 57)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      unsigned int v12 = &a1[7 * v10];
      do
      {
        sub_2171DF958((uint64_t)v7, a4, v9, v12);
        v12 -= 7;
        --v11;
      }
      while (v11);
    }
    uint64_t v17 = (uint64_t *)v6;
    if ((uint64_t *)v6 == a3)
    {
      a3 = (uint64_t *)v6;
    }
    else
    {
      uint64_t v13 = (uint64_t *)v6;
      do
      {
        if (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::operator<(v13, v18))
        {
          sub_2171AED6C((uint64_t *)&v17, (uint64_t *)&v18);
          sub_2171DF958((uint64_t)v18, a4, v9, v18);
          uint64_t v13 = v17;
        }
        v13 += 7;
        uint64_t v17 = v13;
      }
      while (v13 != a3);
      int v7 = v18;
      uint64_t v8 = v6 - (void)v18;
    }
    if (v8 >= 57)
    {
      unint64_t v14 = v8 / 0x38uLL;
      do
      {
        sub_2171DFB30((uint64_t)v7, v6, a4, v14);
        v6 -= 56;
      }
      while (v14-- > 2);
      return (uint64_t)v17;
    }
  }
  return (uint64_t)a3;
}

uint64_t sub_2171DF958(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    unint64_t v5 = a4;
    uint64_t v6 = result;
    int64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= 0x6DB6DB6DB6DB6DB7 * (((uint64_t)a4 - result) >> 3))
    {
      int64_t v9 = (0xDB6DB6DB6DB6DB6ELL * (((uint64_t)a4 - result) >> 3)) | 1;
      uint64_t v10 = result + 56 * v9;
      int64_t v11 = 0xDB6DB6DB6DB6DB6ELL * (((uint64_t)a4 - result) >> 3) + 2;
      if (v11 < a3
        && pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::operator<((uint64_t *)(result + 56 * v9), (uint64_t *)(v10 + 56)))
      {
        v10 += 56;
        int64_t v9 = v11;
      }
      uint64_t result = pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::operator<((uint64_t *)v10, v5);
      if ((result & 1) == 0)
      {
        sub_2171AA848(v17, (uint64_t)v5);
        do
        {
          unsigned int v12 = (uint64_t *)v10;
          if (v5 != (uint64_t *)v10)
          {
            if (*(_DWORD *)(v10 + 52) >= 7u) {
              uint64_t v13 = *(char **)v10;
            }
            else {
              uint64_t v13 = (char *)v10;
            }
            sub_2171AF8E4((uint64_t)v5, v13, &v13[8 * *(unsigned int *)(v10 + 48)]);
          }
          if (v7 < v9) {
            break;
          }
          uint64_t v14 = (2 * v9) | 1;
          uint64_t v10 = v6 + 56 * v14;
          uint64_t v15 = 2 * v9 + 2;
          if (v15 < a3
            && pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::operator<((uint64_t *)(v6 + 56 * v14), (uint64_t *)(v10 + 56)))
          {
            v10 += 56;
            uint64_t v14 = v15;
          }
          unint64_t v5 = v12;
          int64_t v9 = v14;
        }
        while (!pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::operator<((uint64_t *)v10, v17));
        if (v12 != v17)
        {
          if (v19 >= 7) {
            unsigned int v16 = (char *)v17[0];
          }
          else {
            unsigned int v16 = (char *)v17;
          }
          sub_2171AF8E4((uint64_t)v12, v16, &v16[8 * v18]);
        }
        return sub_217199B64((uint64_t)v17);
      }
    }
  }
  return result;
}

void sub_2171DFB10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2171DFB30(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (a4 >= 2)
  {
    uint64_t v7 = result;
    sub_2171AA848(v13, result);
    uint64_t v8 = (void *)sub_2171DFC94(v7, a3, a4);
    int64_t v9 = v8;
    if (v8 == (void *)(a2 - 56))
    {
      if (v8 != v13)
      {
        if (v15 >= 7) {
          unsigned int v12 = (char *)v13[0];
        }
        else {
          unsigned int v12 = (char *)v13;
        }
        sub_2171AF8E4((uint64_t)v8, v12, &v12[8 * v14]);
      }
    }
    else
    {
      if (*(_DWORD *)(a2 - 4) >= 7u) {
        uint64_t v10 = *(char **)(a2 - 56);
      }
      else {
        uint64_t v10 = (char *)(a2 - 56);
      }
      sub_2171AF8E4((uint64_t)v8, v10, &v10[8 * *(unsigned int *)(a2 - 8)]);
      if ((void *)(a2 - 56) != v13)
      {
        if (v15 >= 7) {
          int64_t v11 = (char *)v13[0];
        }
        else {
          int64_t v11 = (char *)v13;
        }
        sub_2171AF8E4(a2 - 56, v11, &v11[8 * v14]);
      }
      sub_2171DFD5C(v7, (uint64_t)(v9 + 7), a3, 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v9 - v7 + 56) >> 3));
    }
    return sub_217199B64((uint64_t)v13);
  }
  return result;
}

void sub_2171DFC78(_Unwind_Exception *exception_object)
{
}

uint64_t sub_2171DFC94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = a3 - 2;
  if (a3 < 2) {
    uint64_t v6 = a3 - 1;
  }
  uint64_t v7 = v6 >> 1;
  do
  {
    uint64_t v8 = a1 + 56 * v5 + 56;
    uint64_t v9 = 2 * v5;
    uint64_t v5 = (2 * v5) | 1;
    uint64_t v10 = v9 + 2;
    if (v9 + 2 < a3
      && pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::operator<((uint64_t *)v8, (uint64_t *)(v8 + 56)))
    {
      v8 += 56;
      uint64_t v5 = v10;
    }
    if (a1 != v8)
    {
      if (*(_DWORD *)(v8 + 52) >= 7u) {
        int64_t v11 = *(char **)v8;
      }
      else {
        int64_t v11 = (char *)v8;
      }
      sub_2171AF8E4(a1, v11, &v11[8 * *(unsigned int *)(v8 + 48)]);
    }
    a1 = v8;
  }
  while (v5 <= v7);
  return v8;
}

uint64_t sub_2171DFD5C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (a4 >= 2)
  {
    uint64_t v4 = result;
    unint64_t v5 = (unint64_t)(a4 - 2) >> 1;
    unint64_t v6 = result + 56 * v5;
    uint64_t v7 = a2 - 56;
    uint64_t result = pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::operator<((uint64_t *)v6, (uint64_t *)(a2 - 56));
    if (result)
    {
      sub_2171AA848(v11, v7);
      do
      {
        uint64_t v8 = (uint64_t *)v6;
        if (v7 != v6)
        {
          if (*(_DWORD *)(v6 + 52) >= 7u) {
            uint64_t v9 = *(char **)v6;
          }
          else {
            uint64_t v9 = (char *)v6;
          }
          sub_2171AF8E4(v7, v9, &v9[8 * *(unsigned int *)(v6 + 48)]);
        }
        if (!v5) {
          break;
        }
        unint64_t v5 = (v5 - 1) >> 1;
        unint64_t v6 = v4 + 56 * v5;
        uint64_t v7 = (uint64_t)v8;
      }
      while ((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::operator<((uint64_t *)v6, v11) & 1) != 0);
      if (v8 != v11)
      {
        if (v13 >= 7) {
          uint64_t v10 = (char *)v11[0];
        }
        else {
          uint64_t v10 = (char *)v11;
        }
        sub_2171AF8E4((uint64_t)v8, v10, &v10[8 * v12]);
      }
      return sub_217199B64((uint64_t)v11);
    }
  }
  return result;
}

void sub_2171DFE74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

_DWORD *sub_2171DFE94(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  a1[113] = 8;
  unsigned int v6 = -1227133513 * ((a3 - a2) >> 3);
  uint64_t v7 = a1;
  if (v6 >= 9)
  {
    uint64_t v7 = malloc(56 * v6);
    *(void *)a1 = v7;
    a1[113] = v6;
  }
  a1[112] = v6;
  sub_2171AA7B0(a2, a3, (uint64_t)v7);
  return a1;
}

uint64_t sub_2171DFF24(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v4 = a2;
  unsigned int v6 = *(_DWORD *)(a1 + 452);
  uint64_t v7 = (char *)a1;
  if (v6 >= 9) {
    uint64_t v7 = *(char **)a1;
  }
  int v8 = *(_DWORD *)(a1 + 448);
  if (&v7[56 * v8] == a2)
  {
    sub_2171E01B0(a1, a3);
    uint64_t v14 = (char *)a1;
    if (*(_DWORD *)(a1 + 452) >= 9u) {
      uint64_t v14 = *(char **)a1;
    }
    return (uint64_t)&v14[56 * *(unsigned int *)(a1 + 448) - 56];
  }
  else
  {
    if (v8 == v6)
    {
      unsigned int v9 = v6 + (v6 >> 1) + 1;
      uint64_t v10 = malloc(56 * v9);
      uint64_t v11 = a1;
      if (v6 >= 9) {
        uint64_t v11 = *(void *)a1;
      }
      int v12 = (char *)sub_2171AE7A0(v11, (uint64_t)v4, (uint64_t)v10);
      unsigned int v13 = sub_2171AA848(v12, a3);
      sub_2171AE7A0((uint64_t)v4, v11 + 56 * *(unsigned int *)(a1 + 448), (uint64_t)(v13 + 14));
      sub_2171AA954(a1);
      if (*(_DWORD *)(a1 + 452) >= 9u) {
        free(*(void **)a1);
      }
      *(void *)a1 = v10;
      *(_DWORD *)(a1 + 452) = v9;
      uint64_t v4 = v12;
    }
    else
    {
      unsigned int v15 = (char *)a1;
      if (v6 >= 9) {
        unsigned int v15 = *(char **)a1;
      }
      uint64_t v16 = &v15[56 * v8];
      sub_2171AA848(v16, (uint64_t)(v16 - 56));
      sub_2171E00B4((uint64_t)&v19, v4, v16 - 56, v16);
      uint64_t v17 = (_DWORD *)sub_217199B64((uint64_t)v4);
      sub_2171AA848(v17, a3);
    }
    ++*(_DWORD *)(a1 + 448);
  }
  return (uint64_t)v4;
}

char *sub_2171E00B4(uint64_t a1, char *a2, char *a3, char *a4)
{
  if (a3 != a2)
  {
    unsigned int v6 = a3;
    do
    {
      uint64_t v7 = v6 - 56;
      int v8 = a4 - 56;
      if (v6 != a4)
      {
        unsigned int v9 = (char *)*((void *)v6 - 7);
        uint64_t v11 = v6 - 8;
        uint64_t v10 = *((unsigned int *)v6 - 2);
        if (*((_DWORD *)v11 + 1) >= 7u) {
          int v12 = v9;
        }
        else {
          int v12 = v7;
        }
        sub_2171AF8E4((uint64_t)(a4 - 56), v12, &v12[8 * v10]);
      }
      a4 = v8;
      unsigned int v6 = v7;
    }
    while (v7 != a2);
  }
  return a3;
}

uint64_t sub_2171E0138(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (v5 != a4)
      {
        if (*(_DWORD *)(v5 + 52) >= 7u) {
          uint64_t v7 = *(char **)v5;
        }
        else {
          uint64_t v7 = (char *)v5;
        }
        sub_2171AF8E4(a4, v7, &v7[8 * *(unsigned int *)(v5 + 48)]);
      }
      v5 += 56;
      a4 += 56;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

_DWORD *sub_2171E01B0(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(_DWORD *)(a1 + 448);
  unsigned int v5 = *(_DWORD *)(a1 + 452);
  if (v4 == v5)
  {
    sub_2171E0228(a1, v4 + (v4 >> 1) + 1);
    unsigned int v5 = *(_DWORD *)(a1 + 452);
  }
  uint64_t v6 = a1;
  if (v5 >= 9) {
    uint64_t v6 = *(void *)a1;
  }
  uint64_t result = sub_2171AA848((_DWORD *)(v6 + 56 * *(unsigned int *)(a1 + 448)), a2);
  ++*(_DWORD *)(a1 + 448);
  return result;
}

void sub_2171E0228(uint64_t a1, unsigned int a2)
{
  unsigned int v4 = malloc(56 * a2);
  unsigned int v5 = (void *)a1;
  if (*(_DWORD *)(a1 + 452) >= 9u) {
    unsigned int v5 = *(void **)a1;
  }
  sub_2171AE7A0((uint64_t)v5, (uint64_t)v5 + 56 * *(unsigned int *)(a1 + 448), (uint64_t)v4);
  sub_2171AA954(a1);
  if (*(_DWORD *)(a1 + 452) >= 9u) {
    free(*(void **)a1);
  }
  *(void *)a1 = v4;
  *(_DWORD *)(a1 + 452) = a2;
}

uint64_t sub_2171E02B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_2171AA954(a1);
  *(_DWORD *)(a1 + 448) = 0;
  unsigned int v6 = -1227133513 * ((unint64_t)(a3 - a2) >> 3);
  unsigned int v7 = *(_DWORD *)(a1 + 452);
  if (v7 < v6)
  {
    sub_2171E0228(a1, -1227133513 * ((unint64_t)(a3 - a2) >> 3));
    unsigned int v7 = *(_DWORD *)(a1 + 452);
  }
  uint64_t v8 = a1;
  if (v7 >= 9) {
    uint64_t v8 = *(void *)a1;
  }
  uint64_t result = sub_2171AA7B0(a2, a3, v8);
  *(_DWORD *)(a1 + 448) = v6;
  return result;
}

char *sub_2171E0338(uint64_t a1, char *a2, char *a3, char *a4)
{
  if (a3 != a2)
  {
    unsigned int v6 = a3;
    do
    {
      unsigned int v7 = v6 - 56;
      uint64_t v8 = a4 - 56;
      if (a4 != v6)
      {
        unsigned int v9 = (char *)*((void *)v6 - 7);
        uint64_t v11 = v6 - 8;
        uint64_t v10 = *((unsigned int *)v6 - 2);
        if (*((_DWORD *)v11 + 1) >= 7u) {
          int v12 = v9;
        }
        else {
          int v12 = v7;
        }
        sub_2171AF8E4((uint64_t)(a4 - 56), v12, &v12[8 * v10]);
      }
      unsigned int v6 = v7;
      a4 = v8;
    }
    while (v7 != a2);
  }
  return a3;
}

uint64_t sub_2171E03BC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a3;
  uint64_t v5 = result;
  if (result != a2)
  {
    do
    {
      sub_2171AED6C(&v5, &v4);
      v4 += 56;
      v5 += 56;
    }
    while (v5 != a2);
    return a2;
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface::GetModelAssetName(pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface *this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)this + 37);
  if (!v3)
  {
LABEL_17:
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    return;
  }
  unint64_t v4 = sub_2171E0588();
  (*(void (**)(uint64_t *__return_ptr, uint64_t, unint64_t))(*(void *)v3 + 24))(&v10, v3, v4);
  sub_2171997C0((uint64_t)&v10, &v12);
  if (v11) {
    sub_216784EC4(v11);
  }
  uint64_t v5 = v12;
  if (!v12) {
    goto LABEL_13;
  }
  unint64_t v6 = sub_2171E0588();
  (*(void (**)(uint64_t *__return_ptr, uint64_t, unint64_t))(*(void *)v5 + 24))(&v8, v5, v6 + 8);
  sub_2171E07F0((uint64_t)&v8, &v10);
  if (v9) {
    sub_216784EC4(v9);
  }
  if (!v10)
  {
    if (v11) {
      sub_216784EC4(v11);
    }
LABEL_13:
    int v7 = 1;
    goto LABEL_14;
  }
  (*(void (**)(uint64_t, double))(*(void *)v10 + 32))(v10, 0.0);
  if (v11) {
    sub_216784EC4(v11);
  }
  int v7 = 0;
LABEL_14:
  if (v13) {
    sub_216784EC4(v13);
  }
  if (v7) {
    goto LABEL_17;
  }
}

void sub_2171E055C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a12) {
    sub_216784EC4(a12);
  }
  if (a14) {
    sub_216784EC4(a14);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_2171E0588()
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  v0 = (char *)atomic_load((unint64_t *)&qword_267B972A0);
  if (!v0)
  {
    v0 = (char *)operator new(0x28uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0, "model", 0);
    uint64_t v2 = v0 + 8;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 8, "assetName", 0);
    uint64_t v3 = *(atomic_uint **)v0;
    unsigned int v15 = v3;
    if ((v3 & 7) != 0)
    {
      unint64_t v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
        unsigned int v15 = v4;
      }
    }
    uint64_t v5 = (atomic_uint *)*v2;
    uint64_t v16 = v5;
    if ((v5 & 7) != 0)
    {
      unint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v16 = v6;
      }
    }
    *((void *)v0 + 2) = 0;
    *((void *)v0 + 3) = 0;
    *((void *)v0 + 4) = 0;
    unsigned int v13 = (void **)(v0 + 16);
    char v14 = 0;
    int v7 = (char *)operator new(0x10uLL);
    uint64_t v8 = 0;
    *((void *)v0 + 2) = v7;
    *((void *)v0 + 3) = v7;
    *((void *)v0 + 4) = v7 + 16;
    do
    {
      unsigned int v9 = (&v15)[v8];
      *(void *)&v7[v8 * 8] = v9;
      if ((v9 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *(void *)&v7[v8 * 8] &= 0xFFFFFFFFFFFFFFF8;
      }
      ++v8;
    }
    while (v8 != 2);
    *((void *)v0 + 3) = v7 + 16;
    for (uint64_t i = 1; i != -1; --i)
    {
      uint64_t v11 = (&v15)[i];
      if ((v11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    uint64_t v12 = 0;
    atomic_compare_exchange_strong(&qword_267B972A0, (unint64_t *)&v12, (unint64_t)v0);
    if (v12)
    {
      unsigned int v13 = (void **)(v0 + 16);
      sub_216889A04(&v13);
      if ((*v2 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*(void *)v0 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v0 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v0);
      return atomic_load((unint64_t *)&qword_267B972A0);
    }
  }
  return (unint64_t)v0;
}

void sub_2171E0768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  sub_216889A04(&a10);
  uint64_t v15 = 8;
  while (1)
  {
    uint64_t v16 = *(void *)(&a12 + v15);
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v15 -= 8;
    if (v15 == -8)
    {
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v12);
      _Unwind_Resume(a1);
    }
  }
}

void *sub_2171E07F0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = *(void **)a1;
  if (result
    && (uint64_t result = __dynamic_cast(result, (const struct __class_type_info *)&unk_26C77BD10, (const struct __class_type_info *)&unk_26C77FCF0, 0)) != 0)
  {
    uint64_t v5 = *(void *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface::_ResetIfNecessaryAndGetNode(pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, void *a3@<X8>)
{
  if (sub_2168CB120((void *)this + 49, a2))
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) != (*((void *)this + 57) & 0xFFFFFFFFFFFFFFF8))
    {
      if (!pxrInternal__aapl__pxrReserved__::HdSchema::IsDefined((pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface *)((char *)this + 440)))
      {
        pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchema::GetNodes((pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface *)((char *)this + 16), &v19);
        long long v6 = v19;
        long long v19 = 0uLL;
        int v7 = (std::__shared_weak_count *)*((void *)this + 56);
        *(_OWORD *)((char *)this + 440) = v6;
        if (v7)
        {
          sub_216784EC4(v7);
          if (*((void *)&v19 + 1)) {
            sub_216784EC4(*((std::__shared_weak_count **)&v19 + 1));
          }
        }
      }
      sub_2168D2318((void *)this + 57, a2);
      sub_2171E0A20((uint64_t *)this + 55, a2, &v19);
      long long v8 = v19;
      long long v19 = 0uLL;
      unsigned int v9 = (std::__shared_weak_count *)*((void *)this + 59);
      *((_OWORD *)this + 29) = v8;
      if (v9)
      {
        sub_216784EC4(v9);
        if (*((void *)&v19 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v19 + 1));
        }
      }
      uint64_t v17 = 0;
      int v18 = 0;
      sub_2171E3D6C(&v19, &v17);
      long long v10 = v19;
      long long v19 = 0uLL;
      uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 61);
      *((_OWORD *)this + 30) = v10;
      if (v11)
      {
        sub_216784EC4(v11);
        if (*((void *)&v19 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v19 + 1));
        }
      }
      if (v18) {
        sub_216784EC4(v18);
      }
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      sub_2171E3D6C(&v19, &v15);
      long long v12 = v19;
      long long v19 = 0uLL;
      unsigned int v13 = (std::__shared_weak_count *)*((void *)this + 63);
      *((_OWORD *)this + 31) = v12;
      if (v13)
      {
        sub_216784EC4(v13);
        if (*((void *)&v19 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v19 + 1));
        }
      }
      if (v16) {
        sub_216784EC4(v16);
      }
    }
    uint64_t v14 = *((void *)this + 59);
    *a3 = *((void *)this + 58);
    a3[1] = v14;
    if (v14) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
    }
  }
}

void sub_2171E0A08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_216784EC4(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_2171E0A20(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  long long v8 = (atomic_uint *)*a2;
  if ((*a2 & 7) != 0)
  {
    unint64_t v4 = (atomic_uint *)(*a2 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
      long long v8 = v4;
    }
  }
  sub_217199340(a1, &v9);
  uint64_t v6 = v9;
  uint64_t v5 = v10;
  if (v10)
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    sub_216784EC4(v5);
    int v7 = v10;
    *a3 = v6;
    a3[1] = v5;
    if (v7) {
      sub_216784EC4(v7);
    }
  }
  else
  {
    *a3 = v9;
    a3[1] = 0;
  }
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface::_GetNodeParameters(std::__shared_weak_count **this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, std::__shared_weak_count **a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface::_ResetIfNecessaryAndGetNode((pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface *)this, a2, &v11);
  if (pxrInternal__aapl__pxrReserved__::HdSchema::IsDefined((pxrInternal__aapl__pxrReserved__::HdSchema *)(this + 60)))
  {
    uint64_t v6 = this[60];
    uint64_t v5 = this[61];
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchema::GetParameters((pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchema *)&v11, &v9);
    int v7 = v9;
    uint64_t v5 = v10;
    uint64_t v9 = 0;
    long long v10 = 0;
    long long v8 = this[61];
    this[60] = v7;
    this[61] = v5;
    if (v8)
    {
      sub_216784EC4(v8);
      if (v10) {
        sub_216784EC4(v10);
      }
      uint64_t v5 = this[61];
    }
    uint64_t v6 = this[60];
  }
  *a3 = v6;
  a3[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v12) {
    sub_216784EC4(v12);
  }
}

void sub_2171E0B98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_216784EC4(a12);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface::_GetNodeConnections(std::__shared_weak_count **this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, std::__shared_weak_count **a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface::_ResetIfNecessaryAndGetNode((pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface *)this, a2, &v11);
  if (pxrInternal__aapl__pxrReserved__::HdSchema::IsDefined((pxrInternal__aapl__pxrReserved__::HdSchema *)(this + 62)))
  {
    uint64_t v6 = this[62];
    uint64_t v5 = this[63];
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchema::GetInputConnections((pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchema *)&v11, &v9);
    int v7 = v9;
    uint64_t v5 = v10;
    uint64_t v9 = 0;
    long long v10 = 0;
    long long v8 = this[63];
    this[62] = v7;
    this[63] = v5;
    if (v8)
    {
      sub_216784EC4(v8);
      if (v10) {
        sub_216784EC4(v10);
      }
      uint64_t v5 = this[63];
    }
    uint64_t v6 = this[62];
  }
  *a3 = v6;
  a3[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v12) {
    sub_216784EC4(v12);
  }
}

void sub_2171E0C60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_216784EC4(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface::_SetOverride(uint64_t a1, pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *a2, uint64_t *a3)
{
  pxrInternal__aapl__pxrReserved__::HdContainerDataSourceEditor::Set((pxrInternal__aapl__pxrReserved__::HdContainerDataSourceEditor *)(a1 + 32), a2, a3);
  uint64_t v15 = a2;
  uint64_t v6 = sub_2171E3DC8(a1 + 312, (uint64_t)a2, (uint64_t)&unk_2174BFD90, (uint64_t *)&v15);
  uint64_t v8 = *a3;
  uint64_t v7 = a3[1];
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = (std::__shared_weak_count *)v6[10];
  v6[9] = v8;
  v6[10] = v7;
  if (v9) {
    sub_216784EC4(v9);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B972E0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B972E0))
  {
    unsigned int v13 = (pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchemaTokens);
    if (!v13) {
      unsigned int v13 = sub_2171E41A0(&pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchemaTokens);
    }
    pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&unk_267B972A8, v13);
    __cxa_atexit((void (*)(void *))sub_217199930, &unk_267B972A8, &dword_216758000);
    __cxa_guard_release(&qword_267B972E0);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B97320, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B97320))
  {
    uint64_t v14 = (pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchemaTokens);
    if (!v14) {
      uint64_t v14 = sub_2171E41A0(&pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchemaTokens);
    }
    pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&unk_267B972E8, (pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchemaTokens_StaticTokenType *)((char *)v14 + 8));
    __cxa_atexit((void (*)(void *))sub_217199930, &unk_267B972E8, &dword_216758000);
    __cxa_guard_release(&qword_267B97320);
  }
  if (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::Intersects(a2, (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&unk_267B972A8)&& (unint64_t)pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::GetElementCount(a2) >= 2)
  {
    uint64_t Element = (uint64_t *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::GetElement(a2, 1u);
    sub_2168D4AAC(a1 + 352, Element, Element);
    uint64_t v11 = (void *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::GetElement(a2, 1u);
    return sub_2171E422C((void *)(a1 + 392), v11);
  }
  else
  {
    uint64_t result = (uint64_t *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::Intersects(a2, (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&unk_267B972E8);
    if (result) {
      *(unsigned char *)(a1 + 432) = 1;
    }
  }
  return result;
}

void sub_2171E0E8C(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface::GetNodeNames@<X0>(pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface *this@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface *)((char *)this + 440);
  if (!pxrInternal__aapl__pxrReserved__::HdSchema::IsDefined((pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface *)((char *)this + 440)))
  {
    pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchema::GetNodes((pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface *)((char *)this + 16), &v17);
    long long v5 = v17;
    long long v17 = 0uLL;
    uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 56);
    *(_OWORD *)unint64_t v4 = v5;
    if (v6)
    {
      sub_216784EC4(v6);
      if (*((void *)&v17 + 1)) {
        sub_216784EC4(*((std::__shared_weak_count **)&v17 + 1));
      }
    }
  }
  uint64_t result = pxrInternal__aapl__pxrReserved__::HdContainerSchema::GetNames(v4, a2);
  if (*((void *)this + 52))
  {
    long long v17 = 0u;
    long long v18 = 0u;
    int v19 = 1065353216;
    uint64_t v8 = (uint64_t *)*a2;
    uint64_t v9 = (uint64_t *)a2[1];
    while (v8 != v9)
    {
      sub_2168D4AAC((uint64_t)&v17, v8, v8);
      ++v8;
    }
    for (uint64_t i = (void *)((char *)this + 408); ; sub_2171E422C(&v17, i + 2))
    {
      uint64_t i = (void *)*i;
      if (!i) {
        break;
      }
    }
    uint64_t v11 = (uint64_t *)*a2;
    long long v12 = (uint64_t *)a2[1];
    if (v12 != (uint64_t *)*a2)
    {
      do
      {
        uint64_t v14 = *--v12;
        uint64_t v13 = v14;
        if ((v14 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
      while (v12 != v11);
    }
    a2[1] = (uint64_t)v11;
    if ((void)v18)
    {
      uint64_t v15 = 0;
      uint64_t v16 = (void *)v18;
      do
      {
        ++v15;
        uint64_t v16 = (void *)*v16;
      }
      while (v16);
    }
    else
    {
      uint64_t v15 = 0;
    }
    sub_2171E4264(a2, v11, (void *)v18, 0, v15);
    return sub_2168C08A0((uint64_t)&v17);
  }
  return result;
}

void sub_2171E0FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface::GetNodeType@<X0>(pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, void *a3@<X8>)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchemaTokens);
  if (!v6) {
    uint64_t v6 = sub_2171E41A0(&pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchemaTokens);
  }
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchemaTokens);
  if (!v7) {
    uint64_t v7 = sub_2171E44BC(&pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchemaTokens);
  }
  pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)v14, v6, a2, (pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchemaTokens_StaticTokenType *)((char *)v7 + 16));
  uint64_t v8 = sub_2171E4548((void *)this + 39, (uint64_t)v14);
  if (v8)
  {
    sub_21719BE04((uint64_t)(v8 + 9), &v12);
    if (v12) {
      (*(void (**)(uint64_t, double))(*(void *)v12 + 32))(v12, 0.0);
    }
    else {
      *a3 = 0;
    }
LABEL_13:
    if (v13) {
      sub_216784EC4(v13);
    }
    return sub_217199B64((uint64_t)v14);
  }
  pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface::_ResetIfNecessaryAndGetNode(this, a2, &v10);
  pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchema::GetNodeIdentifier((pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchema *)&v10, &v12);
  if (v11) {
    sub_216784EC4(v11);
  }
  if (v12)
  {
    (*(void (**)(uint64_t, double))(*(void *)v12 + 32))(v12, 0.0);
    goto LABEL_13;
  }
  if (v13) {
    sub_216784EC4(v13);
  }
  *a3 = 0;
  return sub_217199B64((uint64_t)v14);
}

void sub_2171E11B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, std::__shared_weak_count *a5, ...)
{
  va_start(va, a5);
  if (a5) {
    sub_216784EC4(a5);
  }
  sub_217199B64((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface::_GetNodeTypeInfo(pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, void *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface::_ResetIfNecessaryAndGetNode(this, a2, &v4);
  pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchema::GetNodeTypeInfo((pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchema *)&v4, a3);
  if (v5) {
    sub_216784EC4(v5);
  }
}

void sub_2171E1248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface::GetNodeTypeInfoKeys(pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, void *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface::_GetNodeTypeInfo(this, a2, &v4);
  if (v4)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  if (v5) {
    sub_216784EC4(v5);
  }
}

void sub_2171E12D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface::GetNodeTypeInfoValue(pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface::_GetNodeTypeInfo(this, a2, &v9);
  if (v9)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v9 + 24))(&v5);
    sub_2171B3D94((uint64_t)&v5, &v7);
    if (v6) {
      sub_216784EC4(v6);
    }
    if (v7) {
      (*(void (**)(uint64_t, double))(*(void *)v7 + 16))(v7, 0.0);
    }
    else {
      *(void *)(a3 + 8) = 0;
    }
    if (v8) {
      sub_216784EC4(v8);
    }
  }
  else
  {
    *(void *)(a3 + 8) = 0;
  }
  if (v10) {
    sub_216784EC4(v10);
  }
}

void sub_2171E13CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a12) {
    sub_216784EC4(a12);
  }
  if (a14) {
    sub_216784EC4(a14);
  }
  _Unwind_Resume(exception_object);
}

void *pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface::GetAuthoredNodeParameterNames@<X0>(std::__shared_weak_count **this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface::_GetNodeParameters(this, a2, &v23);
  pxrInternal__aapl__pxrReserved__::HdContainerSchema::GetNames((pxrInternal__aapl__pxrReserved__::HdContainerSchema *)&v23, a3);
  if (v24) {
    sub_216784EC4(v24);
  }
  uint64_t result = sub_2168CB120(this + 44, a2);
  if (result)
  {
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchemaTokens);
    if (!v7) {
      uint64_t v7 = sub_2171E41A0(&pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchemaTokens);
    }
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchemaTokens);
    if (!v8) {
      uint64_t v8 = sub_2171E44BC(&pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchemaTokens);
    }
    pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&v23, v7, a2, v8);
    long long v20 = 0u;
    long long v21 = 0u;
    int v22 = 1065353216;
    uint64_t v9 = (uint64_t *)*a3;
    uint64_t v10 = (uint64_t *)a3[1];
    while (v9 != v10)
    {
      sub_2168D4AAC((uint64_t)&v20, v9, v9);
      ++v9;
    }
    for (uint64_t i = this[41]; i; uint64_t i = (std::__shared_weak_count *)i->__vftable)
    {
      if (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HasPrefix((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&i->__shared_weak_owners_, (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator **)&v23))
      {
        if (i[3].__vftable)
        {
          uint64_t Element = (uint64_t *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::GetElement((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&i->__shared_weak_owners_, 3u);
          sub_2168D4AAC((uint64_t)&v20, Element, Element);
        }
        else
        {
          uint64_t v13 = (void *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::GetElement((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&i->__shared_weak_owners_, 3u);
          sub_2171E422C(&v20, v13);
        }
      }
    }
    uint64_t v14 = (uint64_t *)*a3;
    uint64_t v15 = (uint64_t *)a3[1];
    if (v15 != (uint64_t *)*a3)
    {
      do
      {
        uint64_t v17 = *--v15;
        uint64_t v16 = v17;
        if ((v17 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
      while (v15 != v14);
    }
    a3[1] = (uint64_t)v14;
    if ((void)v21)
    {
      uint64_t v18 = 0;
      int v19 = (void *)v21;
      do
      {
        ++v18;
        int v19 = (void *)*v19;
      }
      while (v19);
    }
    else
    {
      uint64_t v18 = 0;
    }
    sub_2171E4264(a3, v14, (void *)v21, 0, v18);
    sub_2168C08A0((uint64_t)&v20);
    return (void *)sub_217199B64((uint64_t)&v23);
  }
  return result;
}

void sub_2171E15EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface::GetNodeParameterValue@<X0>(pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, const pxrInternal__aapl__pxrReserved__::TfToken *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchemaTokens);
  if (!v8) {
    uint64_t v8 = sub_2171E41A0(&pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchemaTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchemaTokens);
  if (!v9) {
    uint64_t v9 = sub_2171E44BC(&pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchemaTokens);
  }
  pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)v20, v8, a2, v9, a3);
  uint64_t v10 = sub_2171E4548((void *)this + 39, (uint64_t)v20);
  if (v10)
  {
    sub_2171997C0((uint64_t)(v10 + 9), &v18);
    uint64_t v11 = v18;
    uint64_t v12 = v19;
    if (v19)
    {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v16 = v11;
      uint64_t v17 = v12;
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_216784EC4(v12);
      sub_216784EC4(v12);
    }
    else
    {
      uint64_t v16 = v18;
      uint64_t v17 = 0;
    }
    if (pxrInternal__aapl__pxrReserved__::HdSchema::IsDefined((pxrInternal__aapl__pxrReserved__::HdSchema *)&v16))
    {
      pxrInternal__aapl__pxrReserved__::HdMaterialNodeParameterSchema::GetValue((pxrInternal__aapl__pxrReserved__::HdMaterialNodeParameterSchema *)&v16, &v14);
      if (v14)
      {
        ((void (*)(std::__shared_weak_count *, double))v14->__on_zero_shared)(v14, 0.0);
        if (v15) {
          sub_216784EC4(v15);
        }
        goto LABEL_25;
      }
      if (v15) {
        sub_216784EC4(v15);
      }
    }
    *(void *)(a4 + 8) = 0;
LABEL_25:
    if (v17) {
      sub_216784EC4(v17);
    }
    goto LABEL_27;
  }
  pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface::_GetNodeParameters((std::__shared_weak_count **)this, a2, &v14);
  sub_2171E1904((uint64_t *)&v14, a3, &v16);
  pxrInternal__aapl__pxrReserved__::HdMaterialNodeParameterSchema::GetValue((pxrInternal__aapl__pxrReserved__::HdMaterialNodeParameterSchema *)&v16, &v18);
  if (v17) {
    sub_216784EC4(v17);
  }
  if (v15) {
    sub_216784EC4(v15);
  }
  if (v18)
  {
    (*(void (**)(uint64_t, double))(*(void *)v18 + 16))(v18, 0.0);
LABEL_27:
    if (v19) {
      sub_216784EC4(v19);
    }
    return sub_217199B64((uint64_t)v20);
  }
  if (v19) {
    sub_216784EC4(v19);
  }
  *(void *)(a4 + 8) = 0;
  return sub_217199B64((uint64_t)v20);
}

void sub_2171E1880(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, std::__shared_weak_count *a5, uint64_t a6, std::__shared_weak_count *a7, ...)
{
  va_start(va, a7);
  if (a3) {
    sub_216784EC4(a3);
  }
  if (a5) {
    sub_216784EC4(a5);
  }
  if (a7) {
    sub_216784EC4(a7);
  }
  sub_217199B64((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2171E1904(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v8 = (atomic_uint *)*a2;
  if ((*a2 & 7) != 0)
  {
    uint64_t v4 = (atomic_uint *)(*a2 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v8 = v4;
    }
  }
  sub_217199340(a1, &v9);
  uint64_t v6 = v9;
  uint64_t v5 = v10;
  if (v10)
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    sub_216784EC4(v5);
    uint64_t v7 = v10;
    *a3 = v6;
    a3[1] = v5;
    if (v7) {
      sub_216784EC4(v7);
    }
  }
  else
  {
    *a3 = v9;
    a3[1] = 0;
  }
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface::GetNodeParameterData@<X0>(pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, const pxrInternal__aapl__pxrReserved__::TfToken *a3@<X2>, void *a4@<X8>)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchemaTokens);
  if (!v8) {
    uint64_t v8 = sub_2171E41A0(&pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchemaTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchemaTokens);
  if (!v9) {
    uint64_t v9 = sub_2171E44BC(&pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchemaTokens);
  }
  pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)v25, v8, a2, v9, a3);
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v10 = sub_2171E4548((void *)this + 39, (uint64_t)v25);
  if (v10)
  {
    sub_2171997C0((uint64_t)(v10 + 9), &v19);
    uint64_t v11 = v19;
    uint64_t v12 = v20;
    if (v20)
    {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v17 = v11;
      uint64_t v18 = v12;
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_216784EC4(v12);
      sub_216784EC4(v12);
    }
    else
    {
      uint64_t v17 = v19;
      uint64_t v18 = 0;
    }
    if (pxrInternal__aapl__pxrReserved__::HdSchema::IsDefined((pxrInternal__aapl__pxrReserved__::HdSchema *)&v17))
    {
      pxrInternal__aapl__pxrReserved__::HdMaterialNodeParameterSchema::GetValue((pxrInternal__aapl__pxrReserved__::HdMaterialNodeParameterSchema *)&v17, &v23);
      if (v23)
      {
        (*(void (**)(uint64_t *__return_ptr, double))(*(void *)v23 + 16))(&v21, 0.0);
        sub_2168ED33C(a4, &v21);
        sub_2168EE084((uint64_t)&v21);
      }
      pxrInternal__aapl__pxrReserved__::HdMaterialNodeParameterSchema::GetColorSpace((pxrInternal__aapl__pxrReserved__::HdMaterialNodeParameterSchema *)&v17, &v21);
      if (v21)
      {
        (*(void (**)(uint64_t *__return_ptr, double))(*(void *)v21 + 32))(&v16, 0.0);
        uint64_t v14 = a4 + 2;
        if (&v16 == a4 + 2)
        {
          if ((v16 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
        }
        else
        {
          if ((*v14 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          *uint64_t v14 = v16;
        }
      }
      if (v22) {
        sub_216784EC4(v22);
      }
      if (v24) {
        sub_216784EC4(v24);
      }
    }
LABEL_35:
    if (v18) {
      sub_216784EC4(v18);
    }
    goto LABEL_37;
  }
  pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface::_GetNodeParameters((std::__shared_weak_count **)this, a2, &v17);
  sub_2171E1904((uint64_t *)&v17, a3, &v19);
  if (v18) {
    sub_216784EC4(v18);
  }
  if (pxrInternal__aapl__pxrReserved__::HdSchema::IsDefined((pxrInternal__aapl__pxrReserved__::HdSchema *)&v19))
  {
    pxrInternal__aapl__pxrReserved__::HdMaterialNodeParameterSchema::GetValue((pxrInternal__aapl__pxrReserved__::HdMaterialNodeParameterSchema *)&v19, &v17);
    if (v17)
    {
      ((void (*)(uint64_t *__return_ptr, double))v17->__on_zero_shared)(&v23, 0.0);
      sub_2168ED33C(a4, &v23);
      sub_2168EE084((uint64_t)&v23);
    }
    if (v18) {
      sub_216784EC4(v18);
    }
    pxrInternal__aapl__pxrReserved__::HdMaterialNodeParameterSchema::GetColorSpace((pxrInternal__aapl__pxrReserved__::HdMaterialNodeParameterSchema *)&v19, &v17);
    if (v17)
    {
      ((void (*)(uint64_t *__return_ptr, double))v17->__on_zero_shared_weak)(&v23, 0.0);
      uint64_t v13 = a4 + 2;
      if (&v23 == a4 + 2)
      {
        if ((v23 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
      else
      {
        if ((*v13 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        *uint64_t v13 = v23;
      }
    }
    goto LABEL_35;
  }
LABEL_37:
  if (v20) {
    sub_216784EC4(v20);
  }
  return sub_217199B64((uint64_t)v25);
}

void sub_2171E1D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, std::__shared_weak_count *a5, uint64_t a6, std::__shared_weak_count *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  if (a5) {
    sub_216784EC4(a5);
  }
  if (a7) {
    sub_216784EC4(a7);
  }
  uint64_t v13 = *(void *)(v11 + 16);
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_2168EE084(v11);
  sub_217199B64((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2171E1DF0()
{
}

void *pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface::GetNodeInputConnectionNames@<X0>(std::__shared_weak_count **this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface::_GetNodeConnections(this, a2, &v23);
  pxrInternal__aapl__pxrReserved__::HdContainerSchema::GetNames((pxrInternal__aapl__pxrReserved__::HdContainerSchema *)&v23, a3);
  if (v24) {
    sub_216784EC4(v24);
  }
  uint64_t result = sub_2168CB120(this + 44, a2);
  if (result)
  {
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchemaTokens);
    if (!v7) {
      uint64_t v7 = sub_2171E41A0(&pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchemaTokens);
    }
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchemaTokens);
    if (!v8) {
      uint64_t v8 = sub_2171E44BC(&pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchemaTokens);
    }
    pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&v23, v7, a2, (pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchemaTokens_StaticTokenType *)((char *)v8 + 8));
    long long v20 = 0u;
    long long v21 = 0u;
    int v22 = 1065353216;
    uint64_t v9 = (uint64_t *)*a3;
    uint64_t v10 = (uint64_t *)a3[1];
    while (v9 != v10)
    {
      sub_2168D4AAC((uint64_t)&v20, v9, v9);
      ++v9;
    }
    for (uint64_t i = this[41]; i; uint64_t i = (std::__shared_weak_count *)i->__vftable)
    {
      if (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HasPrefix((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&i->__shared_weak_owners_, (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator **)&v23))
      {
        if (i[3].__vftable)
        {
          uint64_t Element = (uint64_t *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::GetElement((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&i->__shared_weak_owners_, 3u);
          sub_2168D4AAC((uint64_t)&v20, Element, Element);
        }
        else
        {
          uint64_t v13 = (void *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::GetElement((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&i->__shared_weak_owners_, 3u);
          sub_2171E422C(&v20, v13);
        }
      }
    }
    uint64_t v14 = (uint64_t *)*a3;
    uint64_t v15 = (uint64_t *)a3[1];
    if (v15 != (uint64_t *)*a3)
    {
      do
      {
        uint64_t v17 = *--v15;
        uint64_t v16 = v17;
        if ((v17 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
      while (v15 != v14);
    }
    a3[1] = (uint64_t)v14;
    if ((void)v21)
    {
      uint64_t v18 = 0;
      int v19 = (void *)v21;
      do
      {
        ++v18;
        int v19 = (void *)*v19;
      }
      while (v19);
    }
    else
    {
      uint64_t v18 = 0;
    }
    sub_2171E4264(a3, v14, (void *)v21, 0, v18);
    sub_2168C08A0((uint64_t)&v20);
    return (void *)sub_217199B64((uint64_t)&v23);
  }
  return result;
}

void sub_2171E1FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface::GetNodeInputConnection@<X0>(pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, const pxrInternal__aapl__pxrReserved__::TfToken *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchemaTokens);
  if (!v8) {
    uint64_t v8 = sub_2171E41A0(&pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchemaTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchemaTokens);
  if (!v9) {
    uint64_t v9 = sub_2171E44BC(&pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchemaTokens);
  }
  pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)v27, v8, a2, (pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchemaTokens_StaticTokenType *)((char *)v9 + 8), a3);
  uint64_t v10 = sub_2171E4548((void *)this + 39, (uint64_t)v27);
  if (!v10)
  {
    pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface::_GetNodeConnections((std::__shared_weak_count **)this, a2, &v23);
    sub_2171E2400((uint64_t *)&v23, a3, &v25);
    if (v24) {
      sub_216784EC4(v24);
    }
    uint64_t v12 = 0;
LABEL_18:
    uint64_t NumElements = pxrInternal__aapl__pxrReserved__::HdVectorSchema::GetNumElements((pxrInternal__aapl__pxrReserved__::HdVectorSchema *)&v25);
    uint64_t v14 = NumElements;
    *(void *)(a4 + 64) = 0x400000000;
    if (NumElements < 5)
    {
      if (!NumElements)
      {
LABEL_36:
        if (v26) {
          sub_216784EC4(v26);
        }
        goto LABEL_38;
      }
    }
    else
    {
      sub_2171E4784(a4, NumElements);
    }
    uint64_t v15 = 0;
    do
    {
      sub_2171E24B0(&v25, &v23);
      if (pxrInternal__aapl__pxrReserved__::HdSchema::IsDefined((pxrInternal__aapl__pxrReserved__::HdSchema *)&v23))
      {
        pxrInternal__aapl__pxrReserved__::HdMaterialConnectionSchema::GetUpstreamNodePath((pxrInternal__aapl__pxrReserved__::HdMaterialConnectionSchema *)&v23, &v21);
        pxrInternal__aapl__pxrReserved__::HdMaterialConnectionSchema::GetUpstreamNodeOutputName((pxrInternal__aapl__pxrReserved__::HdMaterialConnectionSchema *)&v23, &v19);
        if (v21 && v19)
        {
          (*(void (**)(uint64_t *__return_ptr, double))(*(void *)v21 + 32))(&v17, 0.0);
          (*(void (**)(uint64_t *__return_ptr, double))(*(void *)v19 + 32))(&v18, 0.0);
          sub_2171E48A4(a4, &v17);
          if ((v18 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          if ((v17 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
        }
        if (v20) {
          sub_216784EC4(v20);
        }
        if (v22) {
          sub_216784EC4(v22);
        }
      }
      if (v24) {
        sub_216784EC4(v24);
      }
      ++v15;
    }
    while (v14 != v15);
    goto LABEL_36;
  }
  sub_2171B3D04((uint64_t)(v10 + 9), &v25);
  uint64_t v11 = v25;
  if (v25)
  {
    uint64_t v12 = v26;
    if (v26) {
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v12 = 0;
    *(void *)(a4 + 64) = 0x400000000;
  }
  if (v26) {
    sub_216784EC4(v26);
  }
  if (v11)
  {
    uint64_t v25 = v11;
    uint64_t v26 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    goto LABEL_18;
  }
LABEL_38:
  if (v12) {
    sub_216784EC4(v12);
  }
  return sub_217199B64((uint64_t)v27);
}

void sub_2171E231C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, ...)
{
  va_start(va, a11);
  sub_2171E46E4(v11);
  if (a11) {
    sub_216784EC4(a11);
  }
  if (v12) {
    sub_216784EC4(v12);
  }
  sub_217199B64((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2171E2400(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = (atomic_uint *)*a2;
  if ((*a2 & 7) != 0)
  {
    uint64_t v4 = (atomic_uint *)(*a2 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v6 = v4;
    }
  }
  sub_2171E466C(a1, &v7);
  uint64_t v5 = v8;
  *a3 = v7;
  a3[1] = v5;
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    if (v8) {
      sub_216784EC4(v8);
    }
  }
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_2171E24B0(uint64_t *a1@<X0>, void *a2@<X8>)
{
  sub_2171E482C(a1, &v6);
  uint64_t v4 = v6;
  uint64_t v3 = v7;
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    sub_216784EC4(v3);
    uint64_t v5 = v7;
    *a2 = v4;
    a2[1] = v3;
    if (v5) {
      sub_216784EC4(v5);
    }
  }
  else
  {
    *a2 = v6;
    a2[1] = 0;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface::DeleteNode(pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171E41A0(&pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchemaTokens);
  }
  pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)v8, v4, a2);
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::HdContainerDataSourceEditor::Set((pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface *)((char *)this + 32), (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)v8, &v6);
  if (v7) {
    sub_216784EC4(v7);
  }
  sub_2168D4AAC((uint64_t)this + 392, a2, (uint64_t *)a2);
  return sub_217199B64((uint64_t)v8);
}

void sub_2171E25E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_217199B64((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface::SetNodeType(pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchemaTokens);
  if (!v6) {
    uint64_t v6 = sub_2171E41A0(&pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchemaTokens);
  }
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchemaTokens);
  if (!v7) {
    uint64_t v7 = sub_2171E44BC(&pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchemaTokens);
  }
  pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)v11, v6, a2, (pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchemaTokens_StaticTokenType *)((char *)v7 + 16));
  sub_2171A3CE4((uint64_t *)a3, &v9);
  long long v10 = v9;
  pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface::_SetOverride((uint64_t)this, (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)v11, (uint64_t *)&v10);
  if (*((void *)&v10 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v10 + 1));
  }
  return sub_217199B64((uint64_t)v11);
}

void sub_2171E2704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, std::__shared_weak_count *a5, ...)
{
  va_start(va, a5);
  if (a5) {
    sub_216784EC4(a5);
  }
  sub_217199B64((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface::SetNodeParameterValue(pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchemaTokens);
  if (!v8) {
    uint64_t v8 = sub_2171E41A0(&pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchemaTokens);
  }
  long long v9 = (pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchemaTokens);
  if (!v9) {
    long long v9 = sub_2171E44BC(&pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchemaTokens);
  }
  pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)v18, v8, a2, v9, a3);
  long long v14 = 0u;
  long long v15 = 0u;
  sub_2171BF8A4(a4, &v12);
  long long v13 = v12;
  long long v12 = 0uLL;
  long long v10 = (pxrInternal__aapl__pxrReserved__::HdMaterialNodeParameterSchema::Builder *)pxrInternal__aapl__pxrReserved__::HdMaterialNodeParameterSchema::Builder::SetValue(&v14, (uint64_t *)&v13);
  pxrInternal__aapl__pxrReserved__::HdMaterialNodeParameterSchema::Builder::Build(v10, &v16);
  long long v17 = v16;
  long long v16 = 0uLL;
  if (*((void *)&v13 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v13 + 1));
  }
  if (*((void *)&v12 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v12 + 1));
  }
  if (*((void *)&v15 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v15 + 1));
  }
  if (*((void *)&v14 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v14 + 1));
  }
  pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface::_SetOverride((uint64_t)this, (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)v18, (uint64_t *)&v17);
  if (*((void *)&v17 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v17 + 1));
  }
  return sub_217199B64((uint64_t)v18);
}

void sub_2171E2894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, ...)
{
  va_start(va, a13);
  if (a13) {
    sub_216784EC4(a13);
  }
  sub_217199B64((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface::SetNodeParameterData(uint64_t a1, pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::TfToken *a3, void *a4)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchemaTokens);
  if (!v8) {
    uint64_t v8 = sub_2171E41A0(&pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchemaTokens);
  }
  long long v9 = (pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchemaTokens);
  if (!v9) {
    long long v9 = sub_2171E44BC(&pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchemaTokens);
  }
  pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)v24, v8, a2, v9, a3);
  long long v20 = 0u;
  long long v21 = 0u;
  sub_2171BF8A4(a4, &v18);
  long long v19 = v18;
  long long v18 = 0uLL;
  long long v10 = pxrInternal__aapl__pxrReserved__::HdMaterialNodeParameterSchema::Builder::SetValue(&v20, (uint64_t *)&v19);
  uint64_t v12 = a4[2];
  uint64_t v11 = a4 + 2;
  if (v12)
  {
    sub_2171A3CE4(v11, &v16);
    long long v13 = v16;
  }
  else
  {
    long long v13 = 0uLL;
  }
  long long v17 = v13;
  long long v16 = 0uLL;
  long long v14 = (pxrInternal__aapl__pxrReserved__::HdMaterialNodeParameterSchema::Builder *)pxrInternal__aapl__pxrReserved__::HdMaterialNodeParameterSchema::Builder::SetColorSpace((uint64_t)v10, (uint64_t *)&v17);
  pxrInternal__aapl__pxrReserved__::HdMaterialNodeParameterSchema::Builder::Build(v14, &v22);
  long long v23 = v22;
  long long v22 = 0uLL;
  if (*((void *)&v17 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v17 + 1));
  }
  if (*((void *)&v16 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v16 + 1));
  }
  if (*((void *)&v19 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v19 + 1));
  }
  if (*((void *)&v18 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v18 + 1));
  }
  if (*((void *)&v21 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v21 + 1));
  }
  if (*((void *)&v20 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v20 + 1));
  }
  pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface::_SetOverride(a1, (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)v24, (uint64_t *)&v23);
  if (*((void *)&v23 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v23 + 1));
  }
  return sub_217199B64((uint64_t)v24);
}

void sub_2171E2A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, std::__shared_weak_count *a7, uint64_t a8, std::__shared_weak_count *a9, ...)
{
  va_start(va, a9);
  if (a9) {
    sub_216784EC4(a9);
  }
  if (a7) {
    sub_216784EC4(a7);
  }
  sub_2171ACDE0((uint64_t)va);
  sub_217199B64(v9 - 112);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface::DeleteNodeParameter(pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchemaTokens);
  if (!v6) {
    uint64_t v6 = sub_2171E41A0(&pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchemaTokens);
  }
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchemaTokens);
  if (!v7) {
    uint64_t v7 = sub_2171E44BC(&pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchemaTokens);
  }
  pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)v11, v6, a2, v7, a3);
  uint64_t v9 = 0;
  long long v10 = 0;
  pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface::_SetOverride((uint64_t)this, (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)v11, &v9);
  if (v10) {
    sub_216784EC4(v10);
  }
  return sub_217199B64((uint64_t)v11);
}

void sub_2171E2C00(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, ...)
{
  va_start(va, a3);
  if (a3) {
    sub_216784EC4(a3);
  }
  sub_217199B64((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface::SetNodeInputConnection(uint64_t a1, pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t a4)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchemaTokens);
  if (!v8) {
    uint64_t v8 = sub_2171E41A0(&pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchemaTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchemaTokens);
  if (!v9) {
    uint64_t v9 = sub_2171E44BC(&pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchemaTokens);
  }
  pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)v42, v8, a2, (pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchemaTokens_StaticTokenType *)((char *)v9 + 8), a3);
  uint64_t v35 = 0;
  unint64_t v36 = 0;
  unint64_t v37 = 0;
  sub_2171A618C(&v35, *(unsigned int *)(a4 + 64));
  uint64_t v10 = *(unsigned int *)(a4 + 64);
  if (*(_DWORD *)(a4 + 68) >= 5u) {
    uint64_t v11 = *(uint64_t **)a4;
  }
  else {
    uint64_t v11 = (uint64_t *)a4;
  }
  if (v10)
  {
    uint64_t v12 = &v11[2 * v10];
    do
    {
      long long v32 = 0u;
      long long v33 = 0u;
      sub_2171A3CE4(v11, &v30);
      long long v31 = v30;
      long long v30 = 0uLL;
      long long v13 = pxrInternal__aapl__pxrReserved__::HdMaterialConnectionSchema::Builder::SetUpstreamNodePath(&v32, (uint64_t *)&v31);
      long long v14 = v11 + 1;
      sub_2171A3CE4(v14, &v28);
      long long v29 = v28;
      long long v28 = 0uLL;
      long long v15 = (pxrInternal__aapl__pxrReserved__::HdMaterialConnectionSchema::Builder *)pxrInternal__aapl__pxrReserved__::HdMaterialConnectionSchema::Builder::SetUpstreamNodeOutputName((uint64_t)v13, (uint64_t *)&v29);
      pxrInternal__aapl__pxrReserved__::HdMaterialConnectionSchema::Builder::Build(v15, &v34);
      long long v16 = v34;
      long long v34 = 0uLL;
      long long v17 = v36;
      if ((unint64_t)v36 >= v37)
      {
        long long v27 = v16;
        uint64_t v18 = ((uint64_t)v36 - v35) >> 4;
        unint64_t v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 60) {
          sub_21677CB10();
        }
        uint64_t v20 = v37 - v35;
        if ((uint64_t)(v37 - v35) >> 3 > v19) {
          unint64_t v19 = v20 >> 3;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v21 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v21 = v19;
        }
        unint64_t v41 = &v37;
        long long v22 = (char *)sub_216787EE0((uint64_t)&v37, v21);
        long long v23 = &v22[16 * v18];
        *(void *)&long long v38 = v22;
        *((void *)&v38 + 1) = v23;
        unint64_t v40 = &v22[16 * v24];
        *(_OWORD *)long long v23 = v27;
        unint64_t v39 = v23 + 16;
        sub_2171A640C(&v35, &v38);
        uint64_t v25 = v36;
        sub_216788028((void **)&v38);
        unint64_t v36 = v25;
        if (*((void *)&v34 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v34 + 1));
        }
      }
      else
      {
        _OWORD *v36 = v16;
        unint64_t v36 = v17 + 1;
      }
      if (*((void *)&v29 + 1)) {
        sub_216784EC4(*((std::__shared_weak_count **)&v29 + 1));
      }
      if (*((void *)&v28 + 1)) {
        sub_216784EC4(*((std::__shared_weak_count **)&v28 + 1));
      }
      if (*((void *)&v31 + 1)) {
        sub_216784EC4(*((std::__shared_weak_count **)&v31 + 1));
      }
      if (*((void *)&v30 + 1)) {
        sub_216784EC4(*((std::__shared_weak_count **)&v30 + 1));
      }
      if (*((void *)&v33 + 1)) {
        sub_216784EC4(*((std::__shared_weak_count **)&v33 + 1));
      }
      if (*((void *)&v32 + 1)) {
        sub_216784EC4(*((std::__shared_weak_count **)&v32 + 1));
      }
      uint64_t v11 = v14 + 1;
    }
    while (v11 != v12);
  }
  *(void *)&long long v34 = ((uint64_t)v36 - v35) >> 4;
  *(void *)&long long v31 = v35;
  sub_2171D7DF8(&v34, &v31, &v32);
  long long v38 = v32;
  pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface::_SetOverride(a1, (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)v42, (uint64_t *)&v38);
  if (*((void *)&v38 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v38 + 1));
  }
  *(void *)&long long v38 = &v35;
  sub_216787968((void ***)&v38);
  return sub_217199B64((uint64_t)v42);
}

void sub_2171E2EFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30)
{
  if (a30) {
    sub_216784EC4(a30);
  }
  a19 = (void **)&a26;
  sub_216787968(&a19);
  sub_217199B64(v30 - 128);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface::DeleteNodeInputConnection(pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchemaTokens);
  if (!v6) {
    uint64_t v6 = sub_2171E41A0(&pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchemaTokens);
  }
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchemaTokens);
  if (!v7) {
    uint64_t v7 = sub_2171E44BC(&pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchemaTokens);
  }
  pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)v11, v6, a2, (pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchemaTokens_StaticTokenType *)((char *)v7 + 8), a3);
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface::_SetOverride((uint64_t)this, (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)v11, &v9);
  if (v10) {
    sub_216784EC4(v10);
  }
  return sub_217199B64((uint64_t)v11);
}

void sub_2171E30B4(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, ...)
{
  va_start(va, a3);
  if (a3) {
    sub_216784EC4(a3);
  }
  sub_217199B64((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface::GetTerminalNames(pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface *this@<X0>, uint64_t *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchema::GetTerminals((pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface *)((char *)this + 16), &v16);
  pxrInternal__aapl__pxrReserved__::HdContainerSchema::GetNames((pxrInternal__aapl__pxrReserved__::HdContainerSchema *)&v16, a2);
  if (*((void *)&v16 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v16 + 1));
  }
  if (*((unsigned char *)this + 432))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B97360, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_267B97360))
    {
      long long v15 = (pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchemaTokens);
      if (!v15) {
        long long v15 = sub_2171E41A0(&pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchemaTokens);
      }
      pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&unk_267B97328, (pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchemaTokens_StaticTokenType *)((char *)v15 + 8));
      __cxa_atexit((void (*)(void *))sub_217199930, &unk_267B97328, &dword_216758000);
      __cxa_guard_release(&qword_267B97360);
    }
    long long v16 = 0u;
    long long v17 = 0u;
    int v18 = 1065353216;
    uint64_t v4 = (uint64_t *)*a2;
    uint64_t v5 = (uint64_t *)a2[1];
    while (v4 != v5)
    {
      sub_2168D4AAC((uint64_t)&v16, v4, v4);
      ++v4;
    }
    for (uint64_t i = (void *)*((void *)this + 41); i; uint64_t i = (void *)*i)
    {
      if (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HasPrefix((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)(i + 2), (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator **)&unk_267B97328))
      {
        if (i[9])
        {
          uint64_t Element = (uint64_t *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::GetElement((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)(i + 2), 1u);
          sub_2168D4AAC((uint64_t)&v16, Element, Element);
        }
        else
        {
          uint64_t v8 = (void *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::GetElement((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)(i + 2), 1u);
          sub_2171E422C(&v16, v8);
        }
      }
    }
    uint64_t v9 = (uint64_t *)*a2;
    uint64_t v10 = (uint64_t *)a2[1];
    if (v10 != (uint64_t *)*a2)
    {
      do
      {
        uint64_t v12 = *--v10;
        uint64_t v11 = v12;
        if ((v12 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
      while (v10 != v9);
    }
    a2[1] = (uint64_t)v9;
    if ((void)v17)
    {
      uint64_t v13 = 0;
      long long v14 = (void *)v17;
      do
      {
        ++v13;
        long long v14 = (void *)*v14;
      }
      while (v14);
    }
    else
    {
      uint64_t v13 = 0;
    }
    sub_2171E4264(a2, v9, (void *)v17, 0, v13);
    sub_2168C08A0((uint64_t)&v16);
  }
}

void sub_2171E32C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface::GetTerminalConnection@<X0>(pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchemaTokens);
  if (!v6) {
    uint64_t v6 = sub_2171E41A0(&pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchemaTokens);
  }
  pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)v19, (pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchemaTokens_StaticTokenType *)((char *)v6 + 8), a2);
  uint64_t v7 = sub_2171E4548((void *)this + 39, (uint64_t)v19);
  if (!v7)
  {
    pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchema::GetTerminals((pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface *)((char *)this + 16), &v15);
    sub_2171E3728(&v15, a2, &v17);
    if (v16) {
      sub_216784EC4(v16);
    }
    uint64_t v9 = 0;
    goto LABEL_15;
  }
  sub_2171997C0((uint64_t)(v7 + 9), &v17);
  uint64_t v8 = v17;
  uint64_t v9 = v18;
  if (v17)
  {
    if (v18)
    {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v17 = v8;
      int v18 = v9;
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_216784EC4(v9);
      sub_216784EC4(v9);
    }
    else
    {
      int v18 = 0;
    }
LABEL_15:
    if (pxrInternal__aapl__pxrReserved__::HdSchema::IsDefined((pxrInternal__aapl__pxrReserved__::HdSchema *)&v17))
    {
      LOBYTE(v14) = 1;
      uint64_t v15 = 0;
      long long v16 = 0;
      sub_2171E3B5C(a3, &v14, &v15);
      if ((v16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((v15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::HdMaterialConnectionSchema::GetUpstreamNodePath((pxrInternal__aapl__pxrReserved__::HdMaterialConnectionSchema *)&v17, &v15);
      if (v15)
      {
        (*(void (**)(uint64_t *__return_ptr, double))(*(void *)v15 + 32))(&v14, 0.0);
        uint64_t v10 = (void *)(a3 + 8);
        if (&v14 == (uint64_t *)(a3 + 8))
        {
          uint64_t v11 = v14;
        }
        else
        {
          if ((*v10 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          uint64_t v11 = 0;
          void *v10 = v14;
          uint64_t v14 = 0;
        }
        if ((v11 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
      else
      {
        *(unsigned char *)a3 = 0;
      }
      if (v16) {
        sub_216784EC4(v16);
      }
      pxrInternal__aapl__pxrReserved__::HdMaterialConnectionSchema::GetUpstreamNodeOutputName((pxrInternal__aapl__pxrReserved__::HdMaterialConnectionSchema *)&v17, &v15);
      if (v15)
      {
        (*(void (**)(uint64_t *__return_ptr, double))(*(void *)v15 + 32))(&v14, 0.0);
        uint64_t v12 = (void *)(a3 + 16);
        if (&v14 == (uint64_t *)(a3 + 16))
        {
          if ((v14 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
        }
        else
        {
          if ((*v12 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          void *v12 = v14;
        }
      }
      if (v16) {
        sub_216784EC4(v16);
      }
    }
    else
    {
      LOBYTE(v14) = 0;
      uint64_t v15 = 0;
      long long v16 = 0;
      sub_2171E3B5C(a3, &v14, &v15);
      if ((v16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((v15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    if (v18) {
      sub_216784EC4(v18);
    }
    goto LABEL_46;
  }
  LOBYTE(v15) = 0;
  uint64_t v17 = 0;
  int v18 = 0;
  sub_2171E3B5C(a3, &v15, &v17);
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
LABEL_46:
  if (v9) {
    sub_216784EC4(v9);
  }
  return sub_217199B64((uint64_t)v19);
}

void sub_2171E3684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, std::__shared_weak_count *a5, uint64_t a6, std::__shared_weak_count *a7, ...)
{
  va_start(va, a7);
  if (a5) {
    sub_216784EC4(a5);
  }
  uint64_t v10 = *(void *)(v8 + 16);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v11 = *(void *)(v8 + 8);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a7) {
    sub_216784EC4(a7);
  }
  if (v7) {
    sub_216784EC4(v7);
  }
  sub_217199B64((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2171E3728(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v8 = (atomic_uint *)*a2;
  if ((*a2 & 7) != 0)
  {
    uint64_t v4 = (atomic_uint *)(*a2 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v8 = v4;
    }
  }
  sub_217199340(a1, &v9);
  uint64_t v6 = v9;
  uint64_t v5 = v10;
  if (v10)
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    sub_216784EC4(v5);
    uint64_t v7 = v10;
    *a3 = v6;
    a3[1] = v5;
    if (v7) {
      sub_216784EC4(v7);
    }
  }
  else
  {
    *a3 = v9;
    a3[1] = 0;
  }
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface::DeleteTerminal(pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171E41A0(&pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchemaTokens);
  }
  pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)v8, (pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchemaTokens_StaticTokenType *)((char *)v4 + 8), a2);
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface::_SetOverride((uint64_t)this, (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)v8, &v6);
  if (v7) {
    sub_216784EC4(v7);
  }
  return sub_217199B64((uint64_t)v8);
}

void sub_2171E38A4(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, ...)
{
  va_start(va, a3);
  if (a3) {
    sub_216784EC4(a3);
  }
  sub_217199B64((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface::SetTerminalConnection(uint64_t a1, pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t *a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchemaTokens);
  if (!v6) {
    uint64_t v6 = sub_2171E41A0(&pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchemaTokens);
  }
  pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)v17, (pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchemaTokens_StaticTokenType *)((char *)v6 + 8), a2);
  long long v14 = 0u;
  long long v15 = 0u;
  sub_2171A3CE4(a3, &v12);
  long long v13 = v12;
  long long v12 = 0uLL;
  uint64_t v7 = pxrInternal__aapl__pxrReserved__::HdMaterialConnectionSchema::Builder::SetUpstreamNodePath(&v14, (uint64_t *)&v13);
  sub_2171A3CE4(a3 + 1, &v10);
  long long v11 = v10;
  long long v10 = 0uLL;
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::HdMaterialConnectionSchema::Builder *)pxrInternal__aapl__pxrReserved__::HdMaterialConnectionSchema::Builder::SetUpstreamNodeOutputName((uint64_t)v7, (uint64_t *)&v11);
  pxrInternal__aapl__pxrReserved__::HdMaterialConnectionSchema::Builder::Build(v8, &v16);
  if (*((void *)&v11 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v11 + 1));
  }
  if (*((void *)&v10 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v10 + 1));
  }
  if (*((void *)&v13 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v13 + 1));
  }
  if (*((void *)&v12 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v12 + 1));
  }
  if (*((void *)&v15 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v15 + 1));
  }
  if (*((void *)&v14 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v14 + 1));
  }
  long long v14 = v16;
  if (*((void *)&v16 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v16 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface::_SetOverride(a1, (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)v17, (uint64_t *)&v14);
  if (*((void *)&v14 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v14 + 1));
  }
  if (*((void *)&v16 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v16 + 1));
  }
  return sub_217199B64((uint64_t)v17);
}

void sub_2171E3A4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a18) {
    sub_216784EC4(a18);
  }
  if (a22) {
    sub_216784EC4(a22);
  }
  sub_217199B64(v22 - 96);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface::Finish(pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface *this@<X0>, _OWORD *a2@<X8>)
{
  if (*((void *)this + 42)) {
    pxrInternal__aapl__pxrReserved__::HdContainerDataSourceEditor::Finish((pxrInternal__aapl__pxrReserved__::HdDataSourceMaterialNetworkInterface *)((char *)this + 32), a2);
  }
  else {
    pxrInternal__aapl__pxrReserved__::HdSchema::GetContainer((void *)this + 2, a2);
  }
}

void sub_2171E3AF0(uint64_t a1)
{
  uint64_t v1 = (void *)sub_2171E3BC0(a1);

  operator delete(v1);
}

_DWORD *sub_2171E3B18@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v3 = sub_216981010(a2, (_DWORD *)(a1 + 8)) + 1;

  return sub_21698105C(v3, (_DWORD *)(a1 + 12));
}

uint64_t sub_2171E3B5C(uint64_t result, unsigned char *a2, uint64_t *a3)
{
  *(unsigned char *)uint64_t result = *a2;
  uint64_t v3 = *a3;
  *(void *)(result + 8) = *a3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(result + 8) &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v4 = a3[1];
  *(void *)(result + 16) = v4;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(result + 16) &= 0xFFFFFFFFFFFFFFF8;
  }
  return result;
}

uint64_t sub_2171E3BC0(uint64_t a1)
{
  *(void *)a1 = &unk_26C780070;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 504);
  if (v2) {
    sub_216784EC4(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 488);
  if (v3) {
    sub_216784EC4(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 472);
  if (v4) {
    sub_216784EC4(v4);
  }
  uint64_t v5 = *(void *)(a1 + 456);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 448);
  if (v6) {
    sub_216784EC4(v6);
  }
  sub_2168C08A0(a1 + 392);
  sub_2168C08A0(a1 + 352);
  sub_2171E3CAC(a1 + 312);
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 304);
  if (v7) {
    sub_216784EC4(v7);
  }
  sub_2171ADC9C(a1 + 64);
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 56);
  if (v8) {
    sub_216784EC4(v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 40);
  if (v9) {
    sub_216784EC4(v9);
  }
  long long v10 = *(std::__shared_weak_count **)(a1 + 24);
  if (v10) {
    sub_216784EC4(v10);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 12));
  sub_21697C414((_DWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_2171E3CAC(uint64_t a1)
{
  sub_2171E3CE8(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_2171E3CE8(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_2171E3D2C((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_2171E3D2C(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2) {
    sub_216784EC4(v2);
  }

  return sub_217199B64(a1);
}

void *sub_2171E3D6C(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    *a1 = v3;
    a1[1] = v4;
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    sub_216784EC4(v4);
    sub_216784EC4(v4);
  }
  else
  {
    *a1 = v3;
    a1[1] = 0;
  }
  return a1;
}

void *sub_2171E3DC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v24 = 0;
  char v25 = 0;
  sub_2171E40F0((uint64_t)&v24, a2);
  unint64_t v8 = bswap64(0x9E3779B97F4A7C55 * (void)v24);
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
    long long v12 = *(void **)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      long long v13 = (void *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v8)
          {
            if (sub_2171DE8DC(v13 + 2, a2)) {
              return v13;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9) {
                v14 %= v9;
              }
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v4) {
              break;
            }
          }
          long long v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
  sub_2171E4070(a1, v8, a4, (uint64_t)&v24);
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_21678A04C(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v4 = v8 % v9;
      }
      else {
        unint64_t v4 = v8;
      }
    }
    else
    {
      unint64_t v4 = (v9 - 1) & v8;
    }
  }
  unint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *uint64_t v24 = *v21;
    *unint64_t v21 = v24;
  }
  else
  {
    *uint64_t v24 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*v24)
    {
      unint64_t v22 = *(void *)(*v24 + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v22 >= v9) {
          v22 %= v9;
        }
      }
      else
      {
        v22 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v22) = v24;
    }
  }
  long long v13 = v24;
  uint64_t v24 = 0;
  ++*(void *)(a1 + 24);
  sub_2171E4148((uint64_t)&v24, 0);
  return v13;
}

void sub_2171E4058(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2171E4148((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_DWORD *sub_2171E4070@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x58uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  uint64_t result = sub_2171AA848((_DWORD *)v8 + 4, *a3);
  v8[9] = 0;
  v8[10] = 0;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_2171E40D8(_Unwind_Exception *a1)
{
  sub_2171E4148(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_2171E40F0(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 48);
  if (v2)
  {
    if (*(_DWORD *)(a2 + 52) >= 7u) {
      uint64_t v3 = *(uint64_t **)a2;
    }
    else {
      uint64_t v3 = (uint64_t *)a2;
    }
    int v4 = *(unsigned __int8 *)(result + 8);
    unint64_t v5 = *(void *)result;
    do
    {
      uint64_t v6 = *v3++;
      unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFF8;
      if (v4)
      {
        unint64_t v5 = v7 + ((v7 + v5 + (v7 + v5) * (v7 + v5)) >> 1);
      }
      else
      {
        int v4 = 1;
        *(unsigned char *)(result + 8) = 1;
        unint64_t v5 = v7;
      }
      *(void *)uint64_t result = v5;
      --v2;
    }
    while (v2);
  }
  return result;
}

void sub_2171E4148(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_2171E3D2C((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchemaTokens_StaticTokenType *sub_2171E41A0(atomic_ullong *a1)
{
  uint64_t result = sub_2171E41E8();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchemaTokens_StaticTokenType::~HdMaterialNetworkSchemaTokens_StaticTokenType(result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchemaTokens_StaticTokenType *sub_2171E41E8()
{
  v0 = (pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchemaTokens_StaticTokenType *)operator new(0x30uLL);
  pxrInternal__aapl__pxrReserved__::HdMaterialNetworkSchemaTokens_StaticTokenType::HdMaterialNetworkSchemaTokens_StaticTokenType(v0);
  return v0;
}

void sub_2171E4218(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_2171E422C(void *a1, void *a2)
{
  uint64_t result = sub_2168CB1F4(a1, a2);
  if (result)
  {
    sub_216BBEC7C(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

void *sub_2171E4264(uint64_t *a1, void *a2, void *a3, void *a4, uint64_t a5)
{
  unint64_t v5 = a2;
  if (a5 >= 1)
  {
    unint64_t v7 = a3;
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if (a5 <= (uint64_t)(v11 - v12) >> 3)
    {
      unint64_t v19 = a5 + 1;
      size_t v20 = a3;
      do
      {
        size_t v20 = (void *)*v20;
        --v19;
      }
      while (v19 > 1);
      uint64_t v21 = (uint64_t)(v12 - (void)a2) >> 3;
      uint64_t v22 = a5;
      if (v21 < a5)
      {
        if ((uint64_t)(v12 - (void)a2) < 1)
        {
          size_t v20 = a3;
        }
        else
        {
          unint64_t v23 = v21 + 1;
          size_t v20 = a3;
          do
          {
            size_t v20 = (void *)*v20;
            --v23;
          }
          while (v23 > 1);
        }
        a1[1] = (uint64_t)sub_2171E4470(v9, v20, a4, *(void **)(v9 - 8));
        uint64_t v22 = (uint64_t)(v12 - (void)v5) >> 3;
      }
      if (v22 >= 1)
      {
        sub_216A8E328((uint64_t)a1, (uint64_t)v5, v12, (uint64_t)&v5[a5]);
        if (v20 != v7)
        {
          long long v28 = v5;
          do
          {
            sub_2168D2318(v28, v7 + 2);
            unint64_t v7 = (void *)*v7;
            ++v28;
          }
          while (v7 != v20);
        }
      }
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 + ((uint64_t)(v12 - *a1) >> 3);
      if (v14 >> 61) {
        sub_21677CB10();
      }
      uint64_t v15 = ((uint64_t)a2 - v13) >> 3;
      uint64_t v16 = v10 - v13;
      if (v16 >> 2 > v14) {
        unint64_t v14 = v16 >> 2;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v14;
      }
      v30[4] = v9;
      if (v17) {
        unint64_t v18 = (char *)sub_21677CB28(v9, v17);
      }
      else {
        unint64_t v18 = 0;
      }
      uint64_t v24 = &v18[8 * v15];
      v30[0] = v18;
      v30[1] = v24;
      _OWORD v30[3] = &v18[8 * v17];
      uint64_t v25 = 8 * a5;
      uint64_t v26 = &v24[8 * a5];
      do
      {
        uint64_t v27 = v7[2];
        *(void *)uint64_t v24 = v27;
        if ((v27 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          *(void *)v24 &= 0xFFFFFFFFFFFFFFF8;
        }
        v24 += 8;
        unint64_t v7 = (void *)*v7;
        v25 -= 8;
      }
      while (v25);
      v30[2] = v26;
      unint64_t v5 = (void *)sub_216A8E370(a1, v30, v5);
      sub_2168BE9D8((uint64_t)v30);
    }
  }
  return v5;
}

void sub_2171E4450(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void *sub_2171E4470(uint64_t a1, void *a2, void *a3, void *a4)
{
  for (uint64_t result = a4; a2 != a3; ++result)
  {
    uint64_t v5 = a2[2];
    void *result = v5;
    if ((v5 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *result &= 0xFFFFFFFFFFFFFFF8;
    }
    a2 = (void *)*a2;
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchemaTokens_StaticTokenType *sub_2171E44BC(atomic_ullong *a1)
{
  uint64_t result = sub_2171E4504();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchemaTokens_StaticTokenType::~HdMaterialNodeSchemaTokens_StaticTokenType(result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchemaTokens_StaticTokenType *sub_2171E4504()
{
  v0 = (pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchemaTokens_StaticTokenType *)operator new(0x40uLL);
  pxrInternal__aapl__pxrReserved__::HdMaterialNodeSchemaTokens_StaticTokenType::HdMaterialNodeSchemaTokens_StaticTokenType(v0);
  return v0;
}

void sub_2171E4534(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_2171E4548(void *a1, uint64_t a2)
{
  uint64_t v13 = 0;
  char v14 = 0;
  sub_2171E40F0((uint64_t)&v13, a2);
  int8x8_t v4 = (int8x8_t)a1[1];
  if (!*(void *)&v4) {
    return 0;
  }
  unint64_t v5 = bswap64(0x9E3779B97F4A7C55 * v13);
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4);
  v6.i16[0] = vaddlv_u8(v6);
  unint64_t v7 = v6.u32[0];
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v8 = v5;
    if (v5 >= *(void *)&v4) {
      unint64_t v8 = v5 % *(void *)&v4;
    }
  }
  else
  {
    unint64_t v8 = (*(void *)&v4 - 1) & v5;
  }
  uint64_t v9 = *(void **)(*a1 + 8 * v8);
  if (!v9) {
    return 0;
  }
  uint64_t v10 = (void *)*v9;
  if (*v9)
  {
    do
    {
      unint64_t v11 = v10[1];
      if (v5 == v11)
      {
        if (sub_2171DE8DC(v10 + 2, a2)) {
          return v10;
        }
      }
      else
      {
        if (v7 > 1)
        {
          if (v11 >= *(void *)&v4) {
            v11 %= *(void *)&v4;
          }
        }
        else
        {
          v11 &= *(void *)&v4 - 1;
        }
        if (v11 != v8) {
          return 0;
        }
      }
      uint64_t v10 = (void *)*v10;
    }
    while (v10);
  }
  return v10;
}

void sub_2171E466C(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (v3)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v3 + 24))(&v4);
    sub_2171B3D04((uint64_t)&v4, a2);
    if (v5) {
      sub_216784EC4(v5);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

uint64_t sub_2171E46E4(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 68) >= 5u) {
    free(*(void **)a1);
  }
  return a1;
}

uint64_t *sub_2171E4724(uint64_t *result)
{
  uint64_t v1 = result;
  if (*((_DWORD *)result + 17) >= 5u) {
    uint64_t v1 = (uint64_t *)*result;
  }
  uint64_t v2 = *((unsigned int *)result + 16);
  if (v2)
  {
    uint64_t v3 = 16 * v2;
    uint64_t v4 = v1 + 1;
    do
    {
      if ((*v4 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v5 = *(v4 - 1);
      if ((v5 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      v4 += 2;
      v3 -= 16;
    }
    while (v3);
  }
  return result;
}

void sub_2171E4784(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = malloc(16 * a2);
  uint64_t v5 = v4;
  uint8x8_t v6 = (void *)a1;
  if (*(_DWORD *)(a1 + 68) >= 5u) {
    uint8x8_t v6 = *(void **)a1;
  }
  uint64_t v7 = *(unsigned int *)(a1 + 64);
  if (v7)
  {
    unint64_t v8 = &v6[2 * v7];
    uint64_t v9 = v4;
    do
    {
      void *v9 = *v6;
      void *v6 = 0;
      v9[1] = v6[1];
      v6[1] = 0;
      v6 += 2;
      v9 += 2;
    }
    while (v6 != v8);
  }
  sub_2171E4724((uint64_t *)a1);
  if (*(_DWORD *)(a1 + 68) >= 5u) {
    free(*(void **)a1);
  }
  *(void *)a1 = v5;
  *(_DWORD *)(a1 + 68) = a2;
}

void sub_2171E482C(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (v3)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v3 + 24))(&v4);
    sub_2171997C0((uint64_t)&v4, a2);
    if (v5) {
      sub_216784EC4(v5);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

void sub_2171E48A4(uint64_t a1, void *a2)
{
  unsigned int v5 = *(_DWORD *)(a1 + 64);
  unsigned int v4 = *(_DWORD *)(a1 + 68);
  if (v5 == v4)
  {
    sub_2171E4784(a1, v5 + (v5 >> 1) + 1);
    unsigned int v4 = *(_DWORD *)(a1 + 68);
  }
  uint64_t v6 = a1;
  if (v4 >= 5) {
    uint64_t v6 = *(void *)a1;
  }
  uint64_t v7 = *(unsigned int *)(a1 + 64);
  unint64_t v8 = (void *)(v6 + 16 * v7);
  *unint64_t v8 = *a2;
  *a2 = 0;
  v8[1] = a2[1];
  a2[1] = 0;
  *(_DWORD *)(a1 + 64) = v7 + 1;
}

void sub_2171E4920()
{
  sub_216779094(v38, "HD_BPRIM_ADDED");
  std::string __p = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C780158, 0, (uint64_t)v38, (uint64_t)&__p);
  if (SHIBYTE(v37) < 0) {
    operator delete(__p);
  }
  if (v39 < 0) {
    operator delete(v38[0]);
  }
  uint64_t v0 = sub_2171AAB44();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v0, "HD_BPRIM_ADDED", "Report when bprims are added");
  sub_216779094(v38, "HD_BPRIM_REMOVED");
  std::string __p = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C780158, 1, (uint64_t)v38, (uint64_t)&__p);
  if (SHIBYTE(v37) < 0) {
    operator delete(__p);
  }
  if (v39 < 0) {
    operator delete(v38[0]);
  }
  uint64_t v1 = sub_2171AAB44();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v1 + 4, "HD_BPRIM_REMOVED", "Report when bprims are removed");
  sub_216779094(v38, "HD_BUFFER_ARRAY_INFO");
  std::string __p = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C780158, 2, (uint64_t)v38, (uint64_t)&__p);
  if (SHIBYTE(v37) < 0) {
    operator delete(__p);
  }
  if (v39 < 0) {
    operator delete(v38[0]);
  }
  uint64_t v2 = sub_2171AAB44();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v2 + 8, "HD_BUFFER_ARRAY_INFO", "Report detail info of HdBufferArrays");
  sub_216779094(v38, "HD_BUFFER_ARRAY_RANGE_CLEANED");
  std::string __p = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C780158, 3, (uint64_t)v38, (uint64_t)&__p);
  if (SHIBYTE(v37) < 0) {
    operator delete(__p);
  }
  if (v39 < 0) {
    operator delete(v38[0]);
  }
  uint64_t v3 = sub_2171AAB44();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v3 + 12, "HD_BUFFER_ARRAY_RANGE_CLEANED", "Report when bufferArrayRange is cleaned");
  sub_216779094(v38, "HD_CACHE_HITS");
  std::string __p = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C780158, 4, (uint64_t)v38, (uint64_t)&__p);
  if (SHIBYTE(v37) < 0) {
    operator delete(__p);
  }
  if (v39 < 0) {
    operator delete(v38[0]);
  }
  uint64_t v4 = sub_2171AAB44();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v4 + 16, "HD_CACHE_HITS", "Report every cache hit");
  sub_216779094(v38, "HD_CACHE_MISSES");
  std::string __p = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C780158, 5, (uint64_t)v38, (uint64_t)&__p);
  if (SHIBYTE(v37) < 0) {
    operator delete(__p);
  }
  if (v39 < 0) {
    operator delete(v38[0]);
  }
  uint64_t v5 = sub_2171AAB44();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v5 + 20, "HD_CACHE_MISSES", "Report every cache miss");
  sub_216779094(v38, "HD_COUNTER_CHANGED");
  std::string __p = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C780158, 6, (uint64_t)v38, (uint64_t)&__p);
  if (SHIBYTE(v37) < 0) {
    operator delete(__p);
  }
  if (v39 < 0) {
    operator delete(v38[0]);
  }
  uint64_t v6 = sub_2171AAB44();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v6 + 24, "HD_COUNTER_CHANGED", "Report values when counters change");
  sub_216779094(v38, "HD_DIRTY_ALL_COLLECTIONS");
  std::string __p = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C780158, 7, (uint64_t)v38, (uint64_t)&__p);
  if (SHIBYTE(v37) < 0) {
    operator delete(__p);
  }
  if (v39 < 0) {
    operator delete(v38[0]);
  }
  uint64_t v7 = sub_2171AAB44();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v7 + 28, "HD_DIRTY_ALL_COLLECTIONS", "Reports diagnostics when all collections are marked dirty");
  sub_216779094(v38, "HD_DIRTY_LIST");
  std::string __p = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C780158, 8, (uint64_t)v38, (uint64_t)&__p);
  if (SHIBYTE(v37) < 0) {
    operator delete(__p);
  }
  if (v39 < 0) {
    operator delete(v38[0]);
  }
  uint64_t v8 = sub_2171AAB44();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v8 + 32, "HD_DIRTY_LIST", "Reports dirty list state changes");
  sub_216779094(v38, "HD_DISABLE_MULTITHREADED_RPRIM_SYNC");
  std::string __p = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C780158, 9, (uint64_t)v38, (uint64_t)&__p);
  if (SHIBYTE(v37) < 0) {
    operator delete(__p);
  }
  if (v39 < 0) {
    operator delete(v38[0]);
  }
  uint64_t v9 = sub_2171AAB44();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v9 + 36, "HD_DISABLE_MULTITHREADED_RPRIM_SYNC", "Run RPrim sync on a single thread");
  sub_216779094(v38, "HD_DRAWITEMS_CULLED");
  std::string __p = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C780158, 10, (uint64_t)v38, (uint64_t)&__p);
  if (SHIBYTE(v37) < 0) {
    operator delete(__p);
  }
  if (v39 < 0) {
    operator delete(v38[0]);
  }
  uint64_t v10 = sub_2171AAB44();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v10 + 40, "HD_DRAWITEMS_CULLED", "Report the number of draw items culled in each render pass");
  sub_216779094(v38, "HD_ENGINE_PHASE_INFO");
  std::string __p = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C780158, 11, (uint64_t)v38, (uint64_t)&__p);
  if (SHIBYTE(v37) < 0) {
    operator delete(__p);
  }
  if (v39 < 0) {
    operator delete(v38[0]);
  }
  uint64_t v11 = sub_2171AAB44();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v11 + 44, "HD_ENGINE_PHASE_INFO", "Report the execution phase of the Hydra engine");
  sub_216779094(v38, "HD_EXT_COMPUTATION_ADDED");
  std::string __p = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C780158, 12, (uint64_t)v38, (uint64_t)&__p);
  if (SHIBYTE(v37) < 0) {
    operator delete(__p);
  }
  if (v39 < 0) {
    operator delete(v38[0]);
  }
  uint64_t v12 = sub_2171AAB44();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v12 + 48, "HD_EXT_COMPUTATION_ADDED", "Report when ExtComputations are added");
  sub_216779094(v38, "HD_EXT_COMPUTATION_REMOVED");
  std::string __p = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C780158, 13, (uint64_t)v38, (uint64_t)&__p);
  if (SHIBYTE(v37) < 0) {
    operator delete(__p);
  }
  if (v39 < 0) {
    operator delete(v38[0]);
  }
  uint64_t v13 = sub_2171AAB44();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v13 + 52, "HD_EXT_COMPUTATION_REMOVED", "Report when ExtComputations are removed");
  sub_216779094(v38, "HD_EXT_COMPUTATION_UPDATED");
  std::string __p = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C780158, 14, (uint64_t)v38, (uint64_t)&__p);
  if (SHIBYTE(v37) < 0) {
    operator delete(__p);
  }
  if (v39 < 0) {
    operator delete(v38[0]);
  }
  uint64_t v14 = sub_2171AAB44();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v14 + 56, "HD_EXT_COMPUTATION_UPDATED", "Report when ExtComputations are updated");
  sub_216779094(v38, "HD_EXT_COMPUTATION_EXECUTION");
  std::string __p = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C780158, 15, (uint64_t)v38, (uint64_t)&__p);
  if (SHIBYTE(v37) < 0) {
    operator delete(__p);
  }
  if (v39 < 0) {
    operator delete(v38[0]);
  }
  uint64_t v15 = sub_2171AAB44();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v15 + 60, "HD_EXT_COMPUTATION_EXECUTION", "Report when ExtComputations are executed");
  sub_216779094(v38, "HD_FREEZE_CULL_FRUSTUM");
  std::string __p = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C780158, 16, (uint64_t)v38, (uint64_t)&__p);
  if (SHIBYTE(v37) < 0) {
    operator delete(__p);
  }
  if (v39 < 0) {
    operator delete(v38[0]);
  }
  uint64_t v16 = sub_2171AAB44();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v16 + 64, "HD_FREEZE_CULL_FRUSTUM", "Freeze the frustum used for culling at it's current value");
  sub_216779094(v38, "HD_INSTANCER_ADDED");
  std::string __p = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C780158, 17, (uint64_t)v38, (uint64_t)&__p);
  if (SHIBYTE(v37) < 0) {
    operator delete(__p);
  }
  if (v39 < 0) {
    operator delete(v38[0]);
  }
  uint64_t v17 = sub_2171AAB44();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v17 + 68, "HD_INSTANCER_ADDED", "Report when instancers are added");
  sub_216779094(v38, "HD_INSTANCER_CLEANED");
  std::string __p = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C780158, 18, (uint64_t)v38, (uint64_t)&__p);
  if (SHIBYTE(v37) < 0) {
    operator delete(__p);
  }
  if (v39 < 0) {
    operator delete(v38[0]);
  }
  uint64_t v18 = sub_2171AAB44();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v18 + 72, "HD_INSTANCER_CLEANED", "Report when instancers are fully cleaned");
  sub_216779094(v38, "HD_INSTANCER_REMOVED");
  std::string __p = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C780158, 19, (uint64_t)v38, (uint64_t)&__p);
  if (SHIBYTE(v37) < 0) {
    operator delete(__p);
  }
  if (v39 < 0) {
    operator delete(v38[0]);
  }
  uint64_t v19 = sub_2171AAB44();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v19 + 76, "HD_INSTANCER_REMOVED", "Report when instancers are removed");
  sub_216779094(v38, "HD_INSTANCER_UPDATED");
  std::string __p = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C780158, 20, (uint64_t)v38, (uint64_t)&__p);
  if (SHIBYTE(v37) < 0) {
    operator delete(__p);
  }
  if (v39 < 0) {
    operator delete(v38[0]);
  }
  uint64_t v20 = sub_2171AAB44();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v20 + 80, "HD_INSTANCER_UPDATED", "Report when instancers are updated");
  sub_216779094(v38, "HD_RENDER_SETTINGS");
  std::string __p = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C780158, 21, (uint64_t)v38, (uint64_t)&__p);
  if (SHIBYTE(v37) < 0) {
    operator delete(__p);
  }
  if (v39 < 0) {
    operator delete(v38[0]);
  }
  uint64_t v21 = sub_2171AAB44();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v21 + 84, "HD_RENDER_SETTINGS", "Report render settings changes");
  sub_216779094(v38, "HD_RPRIM_ADDED");
  std::string __p = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C780158, 22, (uint64_t)v38, (uint64_t)&__p);
  if (SHIBYTE(v37) < 0) {
    operator delete(__p);
  }
  if (v39 < 0) {
    operator delete(v38[0]);
  }
  uint64_t v22 = sub_2171AAB44();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v22 + 88, "HD_RPRIM_ADDED", "Report when rprims are added");
  sub_216779094(v38, "HD_RPRIM_CLEANED");
  std::string __p = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C780158, 23, (uint64_t)v38, (uint64_t)&__p);
  if (SHIBYTE(v37) < 0) {
    operator delete(__p);
  }
  if (v39 < 0) {
    operator delete(v38[0]);
  }
  uint64_t v23 = sub_2171AAB44();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v23 + 92, "HD_RPRIM_CLEANED", "Report when rprims are fully cleaned");
  sub_216779094(v38, "HD_RPRIM_REMOVED");
  std::string __p = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C780158, 24, (uint64_t)v38, (uint64_t)&__p);
  if (SHIBYTE(v37) < 0) {
    operator delete(__p);
  }
  if (v39 < 0) {
    operator delete(v38[0]);
  }
  uint64_t v24 = sub_2171AAB44();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v24 + 96, "HD_RPRIM_REMOVED", "Report when rprims are removed");
  sub_216779094(v38, "HD_RPRIM_UPDATED");
  std::string __p = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C780158, 25, (uint64_t)v38, (uint64_t)&__p);
  if (SHIBYTE(v37) < 0) {
    operator delete(__p);
  }
  if (v39 < 0) {
    operator delete(v38[0]);
  }
  uint64_t v25 = sub_2171AAB44();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v25 + 100, "HD_RPRIM_UPDATED", "Report when rprims are updated");
  sub_216779094(v38, "HD_SAFE_MODE");
  std::string __p = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C780158, 26, (uint64_t)v38, (uint64_t)&__p);
  if (SHIBYTE(v37) < 0) {
    operator delete(__p);
  }
  if (v39 < 0) {
    operator delete(v38[0]);
  }
  uint64_t v26 = sub_2171AAB44();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v26 + 104, "HD_SAFE_MODE", "Enable additional security checks");
  sub_216779094(v38, "HD_SELECTION_UPDATE");
  std::string __p = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C780158, 27, (uint64_t)v38, (uint64_t)&__p);
  if (SHIBYTE(v37) < 0) {
    operator delete(__p);
  }
  if (v39 < 0) {
    operator delete(v38[0]);
  }
  uint64_t v27 = sub_2171AAB44();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v27 + 108, "HD_SELECTION_UPDATE", "Report when selection is updated");
  sub_216779094(v38, "HD_SHARED_EXT_COMPUTATION_DATA");
  std::string __p = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C780158, 28, (uint64_t)v38, (uint64_t)&__p);
  if (SHIBYTE(v37) < 0) {
    operator delete(__p);
  }
  if (v39 < 0) {
    operator delete(v38[0]);
  }
  uint64_t v28 = sub_2171AAB44();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v28 + 112, "HD_SHARED_EXT_COMPUTATION_DATA", "Report info related to deduplication of ext computation data buffers");
  sub_216779094(v38, "HD_SPRIM_ADDED");
  std::string __p = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C780158, 29, (uint64_t)v38, (uint64_t)&__p);
  if (SHIBYTE(v37) < 0) {
    operator delete(__p);
  }
  if (v39 < 0) {
    operator delete(v38[0]);
  }
  uint64_t v29 = sub_2171AAB44();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v29 + 116, "HD_SPRIM_ADDED", "Report when sprims are added");
  sub_216779094(v38, "HD_SPRIM_REMOVED");
  std::string __p = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C780158, 30, (uint64_t)v38, (uint64_t)&__p);
  if (SHIBYTE(v37) < 0) {
    operator delete(__p);
  }
  if (v39 < 0) {
    operator delete(v38[0]);
  }
  uint64_t v30 = sub_2171AAB44();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v30 + 120, "HD_SPRIM_REMOVED", "Report when sprims are removed");
  sub_216779094(v38, "HD_SYNC_ALL");
  std::string __p = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C780158, 31, (uint64_t)v38, (uint64_t)&__p);
  if (SHIBYTE(v37) < 0) {
    operator delete(__p);
  }
  if (v39 < 0) {
    operator delete(v38[0]);
  }
  uint64_t v31 = sub_2171AAB44();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v31 + 124, "HD_SYNC_ALL", "Report debugging info for the sync all algorithm.");
  sub_216779094(v38, "HD_TASK_ADDED");
  std::string __p = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C780158, 32, (uint64_t)v38, (uint64_t)&__p);
  if (SHIBYTE(v37) < 0) {
    operator delete(__p);
  }
  if (v39 < 0) {
    operator delete(v38[0]);
  }
  uint64_t v32 = sub_2171AAB44();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v32 + 128, "HD_TASK_ADDED", "Report when tasks are added");
  sub_216779094(v38, "HD_TASK_REMOVED");
  std::string __p = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C780158, 33, (uint64_t)v38, (uint64_t)&__p);
  if (SHIBYTE(v37) < 0) {
    operator delete(__p);
  }
  if (v39 < 0) {
    operator delete(v38[0]);
  }
  uint64_t v33 = sub_2171AAB44();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v33 + 132, "HD_TASK_REMOVED", "Report when tasks are removed");
  sub_216779094(v38, "HD_VARYING_STATE");
  std::string __p = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C780158, 34, (uint64_t)v38, (uint64_t)&__p);
  if (SHIBYTE(v37) < 0) {
    operator delete(__p);
  }
  if (v39 < 0) {
    operator delete(v38[0]);
  }
  uint64_t v34 = sub_2171AAB44();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v34 + 136, "HD_VARYING_STATE", "Reports state tracking of varying state");
}

void sub_2171E5804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::HdDependenciesSchemaTokens_StaticTokenType::~HdDependenciesSchemaTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::HdDependenciesSchemaTokens_StaticTokenType *this)
{
  uint64_t v2 = (void **)((char *)this + 8);
  sub_216889A04(&v2);
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

{
  void **v2;

  uint64_t v2 = (void **)((char *)this + 8);
  sub_216889A04(&v2);
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

pxrInternal__aapl__pxrReserved__::HdDependenciesSchemaTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::HdDependenciesSchemaTokens_StaticTokenType::HdDependenciesSchemaTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::HdDependenciesSchemaTokens_StaticTokenType *this)
{
  uint64_t v2 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "__dependencies", 0);
  uint64_t v3 = *v2;
  if ((*v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v3 &= 0xFFFFFFFFFFFFFFF8;
  }
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  uint64_t v4 = operator new(8uLL);
  *((void *)this + 1) = v4;
  *((void *)this + 2) = v4;
  void *v4 = v3;
  uint64_t v5 = v4 + 1;
  *((void *)this + 3) = v4 + 1;
  if ((v3 & 7) != 0)
  {
    if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
      *v4 &= 0xFFFFFFFFFFFFFFF8;
    }
    *((void *)this + 2) = v5;
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  else
  {
    *((void *)this + 2) = v5;
  }
  return this;
}

void sub_2171E5A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v11 = v10;
  sub_216889A04(&a9);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_2173242CC(v9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdDependenciesSchema::GetEntries(pxrInternal__aapl__pxrReserved__::HdDependenciesSchema *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 192) = 0x800000000;
  uint64_t v4 = *(void *)this;
  if (v4)
  {
    (*(void (**)(void ****__return_ptr))(*(void *)v4 + 16))(&v15);
    uint64_t v5 = v15;
    for (uint64_t i = v16; v5 != i; ++v5)
    {
      (*(void (**)(unint64_t *__return_ptr))(**(void **)this + 24))(&v10);
      sub_2171997C0((uint64_t)&v10, &v13);
      if (v11) {
        sub_216784EC4(v11);
      }
      uint64_t v7 = v13;
      if (v13)
      {
        uint64_t v8 = v14;
        if (v14)
        {
          atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
          atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          sub_216784EC4(v8);
        }
        unint64_t v9 = (unint64_t)*v5;
        unint64_t v10 = v9;
        if ((v9 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          v10 &= 0xFFFFFFFFFFFFFFF8;
        }
        uint64_t v11 = v7;
        uint64_t v12 = v8;
        sub_2171E5F50(a2, (uint64_t)&v10);
        if (v12) {
          sub_216784EC4(v12);
        }
        if ((v10 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if (v8) {
          sub_216784EC4(v8);
        }
      }
      if (v14) {
        sub_216784EC4(v14);
      }
    }
    unint64_t v10 = (unint64_t)&v15;
    sub_216889A04((void ***)&v10);
  }
}

void sub_2171E5C00(_Unwind_Exception *a1)
{
  sub_2171E5E94(v1);
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::HdDependenciesSchema::BuildRetained@<D0>(unint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, _OWORD *a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::HdRetainedContainerDataSource::New(a1, a2, a3, &v6);
  double result = *(double *)&v6;
  *a4 = v6;
  return result;
}

void pxrInternal__aapl__pxrReserved__::HdDependenciesSchema::GetFromParent(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdDependenciesSchemaTokens)) {
      sub_2171E6084(&pxrInternal__aapl__pxrReserved__::HdDependenciesSchemaTokens);
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v3 + 24))(&v8, v3);
    sub_2171997C0((uint64_t)&v8, &v10);
    uint64_t v6 = v10;
    uint64_t v5 = v11;
    if (v11)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_216784EC4(v5);
      uint64_t v7 = v11;
      *a2 = v6;
      a2[1] = v5;
      if (v7) {
        sub_216784EC4(v7);
      }
    }
    else
    {
      *a2 = v10;
      a2[1] = 0;
    }
    if (v9) {
      sub_216784EC4(v9);
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    *a2 = 0;
    a2[1] = 0;
  }
}

unint64_t pxrInternal__aapl__pxrReserved__::HdDependenciesSchema::GetSchemaToken(pxrInternal__aapl__pxrReserved__::HdDependenciesSchema *this)
{
  unint64_t result = atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdDependenciesSchemaTokens);
  if (!result) {
    return sub_2171E6084(&pxrInternal__aapl__pxrReserved__::HdDependenciesSchemaTokens);
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::HdDependenciesSchema::GetDefaultLocator(pxrInternal__aapl__pxrReserved__::HdDependenciesSchema *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B973A0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B973A0))
  {
    uint64_t v2 = (const pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdDependenciesSchemaTokens);
    if (!v2) {
      uint64_t v2 = (const pxrInternal__aapl__pxrReserved__::TfToken *)sub_2171E6084(&pxrInternal__aapl__pxrReserved__::HdDependenciesSchemaTokens);
    }
    pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&unk_267B97368, v2);
    __cxa_atexit((void (*)(void *))sub_217199930, &unk_267B97368, &dword_216758000);
    __cxa_guard_release(&qword_267B973A0);
  }
  return &unk_267B97368;
}

void sub_2171E5E7C(_Unwind_Exception *a1)
{
}

uint64_t sub_2171E5E94(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 196) >= 9u) {
    free(*(void **)a1);
  }
  return a1;
}

void sub_2171E5ED4(uint64_t *a1)
{
  uint64_t v1 = a1;
  if (*((_DWORD *)a1 + 49) >= 9u) {
    uint64_t v1 = (uint64_t *)*a1;
  }
  uint64_t v2 = *((unsigned int *)a1 + 48);
  if (v2)
  {
    uint64_t v3 = 24 * v2;
    uint64_t v4 = (std::__shared_weak_count **)(v1 + 2);
    do
    {
      if (*v4) {
        sub_216784EC4(*v4);
      }
      uint64_t v5 = (uint64_t)*(v4 - 2);
      if ((v5 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      v4 += 3;
      v3 -= 24;
    }
    while (v3);
  }
}

__n128 sub_2171E5F50(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(_DWORD *)(a1 + 192);
  unsigned int v5 = *(_DWORD *)(a1 + 196);
  if (v4 == v5)
  {
    sub_2171E5FD4(a1, v4 + (v4 >> 1) + 1);
    unsigned int v5 = *(_DWORD *)(a1 + 196);
  }
  uint64_t v6 = a1;
  if (v5 >= 9) {
    uint64_t v6 = *(void *)a1;
  }
  uint64_t v7 = v6 + 24 * *(unsigned int *)(a1 + 192);
  *(void *)uint64_t v7 = *(void *)a2;
  *(void *)a2 = 0;
  __n128 result = *(__n128 *)(a2 + 8);
  *(__n128 *)(v7 + 8) = result;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  ++*(_DWORD *)(a1 + 192);
  return result;
}

void sub_2171E5FD4(uint64_t a1, unsigned int a2)
{
  unsigned int v4 = (char *)malloc(24 * a2);
  unsigned int v5 = v4;
  uint64_t v6 = a1;
  if (*(_DWORD *)(a1 + 196) >= 9u) {
    uint64_t v6 = *(void *)a1;
  }
  unsigned int v7 = *(_DWORD *)(a1 + 192);
  if (v7)
  {
    uint64_t v8 = v6 + 24 * v7;
    unint64_t v9 = v4;
    do
    {
      *(void *)unint64_t v9 = *(void *)v6;
      *(void *)uint64_t v6 = 0;
      *(_OWORD *)(v9 + 8) = *(_OWORD *)(v6 + 8);
      *(void *)(v6 + 8) = 0;
      *(void *)(v6 + 16) = 0;
      v6 += 24;
      v9 += 24;
    }
    while (v6 != v8);
  }
  sub_2171E5ED4((uint64_t *)a1);
  if (*(_DWORD *)(a1 + 196) >= 9u) {
    free(*(void **)a1);
  }
  *(void *)a1 = v5;
  *(_DWORD *)(a1 + 196) = a2;
}

unint64_t sub_2171E6084(atomic_ullong *a1)
{
  uint64_t v2 = sub_2171E6104();
  uint64_t v3 = v2;
  uint64_t v4 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v4, (unint64_t)v2);
  if (v4)
  {
    if (v2)
    {
      uint64_t v6 = (void **)((char *)v2 + 8);
      sub_216889A04(&v6);
      if ((*(void *)v3 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v3);
    }
    return atomic_load((unint64_t *)a1);
  }
  return (unint64_t)v3;
}

pxrInternal__aapl__pxrReserved__::HdDependenciesSchemaTokens_StaticTokenType *sub_2171E6104()
{
  uint64_t v0 = (pxrInternal__aapl__pxrReserved__::HdDependenciesSchemaTokens_StaticTokenType *)operator new(0x20uLL);
  pxrInternal__aapl__pxrReserved__::HdDependenciesSchemaTokens_StaticTokenType::HdDependenciesSchemaTokens_StaticTokenType(v0);
  return v0;
}

void sub_2171E6134(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::HdSceneIndexBase *pxrInternal__aapl__pxrReserved__::HdDependencyForwardingSceneIndex::HdDependencyForwardingSceneIndex(pxrInternal__aapl__pxrReserved__::HdSceneIndexBase *a1, uint64_t *a2)
{
  uint64_t v3 = pxrInternal__aapl__pxrReserved__::HdSingleInputFilteringSceneIndexBase::HdSingleInputFilteringSceneIndexBase(a1, a2);
  *(void *)uint64_t v3 = &unk_26C780178;
  sub_2171E8E88((uint64_t)v3 + 144, 8uLL, &v5);
  sub_2171E8FE0((uint64_t)a1 + 704, 8uLL, &v6);
  sub_2171E9138((uint64_t)a1 + 1264, 8uLL, &v7);
  sub_2171E9138((uint64_t)a1 + 1824, 8uLL, &v8);
  return a1;
}

void sub_2171E61F8(_Unwind_Exception *a1, void *a2)
{
  uint64_t v6 = v5;
  sub_2171E84B0(v6, a2);
  sub_2171E85EC(v4, v8);
  sub_2171E8778(v3, v9);
  sub_2171E6240(v2, v10);
  _Unwind_Resume(a1);
}

void sub_2171E6240(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1, const void *a2)
{
  *a1 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)&unk_26C780580;
  uint64_t v3 = a1 + 14;
  pxrInternal__aapl__pxrReserved__::HdSceneIndexObserver::~HdSceneIndexObserver((pxrInternal__aapl__pxrReserved__::HdSceneIndexObserver *)(a1 + 15), a2);
  sub_2171E8C28(v3);

  pxrInternal__aapl__pxrReserved__::HdSceneIndexBase::~HdSceneIndexBase((pxrInternal__aapl__pxrReserved__::HdSceneIndexBase *)a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::HdDependencyForwardingSceneIndex::GetPrim@<X0>(uint64_t *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = this + 14;
  if (this[14])
  {
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::HdDependencyForwardingSceneIndex *)this;
    sub_2171E9290((uint64_t)(this + 88), (unsigned int *)a2, v8);
    if (v8[0]) {
      BOOL v6 = 0;
    }
    else {
      BOOL v6 = v8[1] == (void)v5 + 720;
    }
    if (v6) {
      pxrInternal__aapl__pxrReserved__::HdDependencyForwardingSceneIndex::_UpdateDependencies(v5, a2);
    }
    uint64_t v7 = sub_2171E6834(v3);
    return (uint64_t *)(*(uint64_t (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *))(*(void *)v7 + 16))(v7, a2);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  return this;
}

void pxrInternal__aapl__pxrReserved__::HdDependencyForwardingSceneIndex::_UpdateDependencies(pxrInternal__aapl__pxrReserved__::HdDependencyForwardingSceneIndex *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)this + 14);
  uint64_t v3 = (uint64_t *)((char *)this + 112);
  if (v4)
  {
    uint64_t v6 = sub_2171E6834(v3);
    (*(void (**)(uint64_t **__return_ptr))(*(void *)v6 + 16))(&v37);
    uint64_t v7 = v38;
    long long v26 = v38;
    long long v38 = 0uLL;
    if ((v37 & 7) != 0)
    {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      if (!(void)v26)
      {
LABEL_47:
        if (*((void *)&v26 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v26 + 1));
        }
        return;
      }
    }
    else if (!v7)
    {
      goto LABEL_47;
    }
    pxrInternal__aapl__pxrReserved__::HdDependenciesSchema::GetFromParent((uint64_t *)&v26, &v24);
    if (pxrInternal__aapl__pxrReserved__::HdSchema::IsDefined((pxrInternal__aapl__pxrReserved__::HdSchema *)&v24))
    {
      uint64_t v8 = sub_2171E7808((uint64_t)this + 704, (unsigned int *)a2);
      *(unsigned char *)(v8 + 560) = 0;
      unint64_t v9 = (uint64_t *)&v37;
      pxrInternal__aapl__pxrReserved__::HdDependenciesSchema::GetEntries((pxrInternal__aapl__pxrReserved__::HdDependenciesSchema *)&v24, (uint64_t)&v37);
      if (v40 >= 9) {
        unint64_t v9 = v37;
      }
      if (v39)
      {
        uint64_t v10 = (char *)this + 144;
        uint64_t v11 = 24 * v39;
        do
        {
          if (pxrInternal__aapl__pxrReserved__::HdSchema::IsDefined((pxrInternal__aapl__pxrReserved__::HdSchema *)(v9 + 1)))
          {
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v22);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v23);
            pxrInternal__aapl__pxrReserved__::HdDependencySchema::GetDependedOnPrimPath((pxrInternal__aapl__pxrReserved__::HdDependencySchema *)(v9 + 1), &v33);
            if (v33)
            {
              (*(void (**)(int *__return_ptr, double))(*(void *)v33 + 32))(v30, 0.0);
              sub_21697DE94(&v22, v30);
              sub_21697DEEC(&v23, &v30[1]);
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v30[1]);
              sub_21697C414(v30);
            }
            if (v34) {
              sub_216784EC4(v34);
            }
            pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&v33);
            pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)v30);
            pxrInternal__aapl__pxrReserved__::HdDependencySchema::GetDependedOnDataSourceLocator((pxrInternal__aapl__pxrReserved__::HdDependencySchema *)(v9 + 1), &v20);
            if (v20)
            {
              (*(void (**)(void *__return_ptr, double))(*(void *)v20 + 32))(v27, 0.0);
              if (v29 >= 7) {
                uint64_t v12 = (char *)v27[0];
              }
              else {
                uint64_t v12 = (char *)v27;
              }
              sub_2171AF8E4((uint64_t)&v33, v12, &v12[8 * v28]);
              sub_217199B64((uint64_t)v27);
            }
            if (v21) {
              sub_216784EC4(v21);
            }
            pxrInternal__aapl__pxrReserved__::HdDependencySchema::GetAffectedDataSourceLocator((pxrInternal__aapl__pxrReserved__::HdDependencySchema *)(v9 + 1), &v20);
            if (v20)
            {
              (*(void (**)(void *__return_ptr, double))(*(void *)v20 + 32))(v27, 0.0);
              if (v29 >= 7) {
                uint64_t v13 = (char *)v27[0];
              }
              else {
                uint64_t v13 = (char *)v27;
              }
              sub_2171AF8E4((uint64_t)v30, v13, &v13[8 * v28]);
              sub_217199B64((uint64_t)v27);
            }
            if (v21) {
              sub_216784EC4(v21);
            }
            if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v22))
            {
              sub_2169C487C(&v22, a2);
              sub_2169C48D4(&v23, (_DWORD *)a2 + 1);
            }
            sub_2171E98F8(v8, (unsigned int *)&v22, 0, (uint64_t)v27);
            uint64_t v14 = sub_2171E793C((uint64_t)v10, (unsigned int *)&v22);
            uint64_t v15 = sub_2171E7A60(v14, (unsigned int *)a2);
            uint64_t v16 = (char **)sub_2171E7B94(v15, v9);
            uint64_t v17 = v16;
            if (v16 != &v33)
            {
              if (v36 >= 7) {
                uint64_t v18 = v33;
              }
              else {
                uint64_t v18 = (char *)&v33;
              }
              sub_2171AF8E4((uint64_t)v16, v18, &v18[8 * v35]);
            }
            if (v17 + 7 != (char **)v30)
            {
              if (v32 >= 7) {
                uint64_t v19 = *(char **)v30;
              }
              else {
                uint64_t v19 = (char *)v30;
              }
              sub_2171AF8E4((uint64_t)(v17 + 7), v19, &v19[8 * v31]);
            }
            *(unsigned char *)(v15 + 560) = 0;
            sub_217199B64((uint64_t)v30);
            sub_217199B64((uint64_t)&v33);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v23);
            sub_21697C414(&v22);
          }
          v9 += 3;
          v11 -= 24;
        }
        while (v11);
      }
      sub_2171E5E94((uint64_t)&v37);
    }
    if (v25) {
      sub_216784EC4(v25);
    }
    goto LABEL_47;
  }
}

void sub_2171E6748(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  if (a14) {
    sub_216784EC4(a14);
  }
  if (a16) {
    sub_216784EC4(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2171E6834(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v2 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/refPtr.h", 47);
    v3[0] = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/refPtr.h", (uint64_t)v2, 0x2Fu);
    v3[1] = "operator->";
    uint64_t v3[2] = 953;
    v3[3] = "T *pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::HdSceneIndexBase>::operator-"
            ">() const [U = pxrInternal__aapl__pxrReserved__::HdSceneIndexBase]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError((uint64_t)v3, (pxrInternal__aapl__pxrReserved__ *)(0x80000002174CE3B4 & 0x7FFFFFFFFFFFFFFFLL));
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::HdDependencyForwardingSceneIndex::GetChildPrimPaths@<X0>(pxrInternal__aapl__pxrReserved__::HdDependencyForwardingSceneIndex *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *((void *)this + 14);
  uint64_t result = (uint64_t *)((char *)this + 112);
  if (v4)
  {
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)sub_2171E6834(result) + 24);
    return (uint64_t *)v5();
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::HdDependencyForwardingSceneIndex::_PrimsAdded(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return pxrInternal__aapl__pxrReserved__::HdSceneIndexBase::_SendPrimsAdded(a1, a3);
}

void pxrInternal__aapl__pxrReserved__::HdDependencyForwardingSceneIndex::_PrimsRemoved(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = MEMORY[0x270FA5388](a1, a2, a3);
  uint64_t v5 = v4;
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::HdDependencyForwardingSceneIndex *)v3;
  uint64_t v23 = *MEMORY[0x263EF8340];
  long long v19 = 0u;
  long long v20 = 0u;
  uint64_t v22 = 0x1000000000;
  uint64_t v7 = *(unsigned int *)(v4 + 128);
  if (*(_DWORD *)(v4 + 132) >= 0x11u) {
    uint64_t v8 = *(const pxrInternal__aapl__pxrReserved__::SdfPath **)v4;
  }
  else {
    uint64_t v8 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)v4;
  }
  if (v7)
  {
    uint64_t v9 = v3 + 160;
    uint64_t v10 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v8 + 8 * v7);
    do
    {
      pxrInternal__aapl__pxrReserved__::HdDependencyForwardingSceneIndex::_ClearDependencies(v6, v8);
      sub_2171E95C4((uint64_t)v6 + 144, (unsigned int *)v8, v18);
      if (v18[0]) {
        BOOL v11 = 0;
      }
      else {
        BOOL v11 = v18[1] == v9;
      }
      if (!v11)
      {
        sub_2171E98F8((uint64_t)v6 + 1264, (unsigned int *)v8, 0, (uint64_t)v17);
        uint64_t v12 = *(uint64_t **)(v18[0] + 48);
        if (v12)
        {
          while ((v12[73] & 1) == 0)
          {
            uint64_t v12 = (uint64_t *)*v12;
            if (!v12) {
              goto LABEL_13;
            }
          }
LABEL_15:
          uint64_t v13 = v12[1];
          *((unsigned char *)v12 + 576) = 1;
          if (v13 != *(void *)v8)
          {
            uint64_t v14 = (uint64_t **)v12[6];
            if (v14)
            {
              while (((_BYTE)v14[16] & 1) == 0)
              {
                uint64_t v14 = (uint64_t **)*v14;
                if (!v14) {
                  goto LABEL_19;
                }
              }
              while (1)
              {
                pxrInternal__aapl__pxrReserved__::HdDependencyForwardingSceneIndex::_PrimDirtied(v6, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v12 + 1), (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)(v14 + 9), (uint64_t *)&v19, v21);
                do
                {
                  uint64_t v14 = (uint64_t **)*v14;
                  if (!v14) {
                    goto LABEL_19;
                  }
                }
                while (((_BYTE)v14[16] & 1) == 0);
              }
            }
          }
LABEL_19:
          while (1)
          {
            uint64_t v12 = (uint64_t *)*v12;
            if (!v12) {
              break;
            }
            if (v12[73]) {
              goto LABEL_15;
            }
          }
        }
      }
LABEL_13:
      uint64_t v8 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v8 + 8);
    }
    while (v8 != v10);
  }
  pxrInternal__aapl__pxrReserved__::HdSceneIndexBase::_SendPrimsRemoved((uint64_t *)v6, v5);
  if (v22) {
    pxrInternal__aapl__pxrReserved__::HdSceneIndexBase::_SendPrimsDirtied((uint64_t *)v6, (uint64_t)v21);
  }
  sub_2171AB018(v21);
  uint64_t v15 = *((void *)&v20 + 1);
  *((void *)&v20 + 1) = 0;
  if (v15)
  {
    uint64_t v16 = (void *)sub_2171E8C98(v15);
    operator delete(v16);
  }
  v21[0] = &v19;
  sub_2171E8DA8((void ***)v21);
}

void sub_2171E6B3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  sub_2171AB018((void **)va1);
  sub_2171E6FC0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdDependencyForwardingSceneIndex::_ClearDependencies(pxrInternal__aapl__pxrReserved__::HdDependencyForwardingSceneIndex *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  sub_2171E9290((uint64_t)this + 704, (unsigned int *)a2, v15);
  uint64_t v4 = v15[0];
  if (v15[0]) {
    BOOL v5 = 0;
  }
  else {
    BOOL v5 = v15[1] == (void)this + 720;
  }
  if (!v5)
  {
    *(unsigned char *)(v15[0] + 576) = 1;
    if (!*(void *)(v4 + 40)) {
      sub_2171E98F8((uint64_t)this + 1824, (unsigned int *)a2, 0, (uint64_t)v15);
    }
    uint64_t v6 = *(unsigned int **)(v4 + 48);
    if (v6)
    {
      while ((v6[4] & 1) == 0)
      {
        uint64_t v6 = *(unsigned int **)v6;
        if (!v6) {
          return;
        }
      }
      uint64_t v7 = (char *)this + 144;
      uint64_t v8 = (char *)this + 160;
      uint64_t v9 = (char *)this + 1264;
LABEL_12:
      sub_2171E95C4((uint64_t)v7, v6 + 2, v14);
      uint64_t v10 = v14[0];
      if (v14[0]) {
        BOOL v11 = 0;
      }
      else {
        BOOL v11 = v14[1] == (void)v8;
      }
      if (!v11)
      {
        sub_2171EAF3C(v14[0] + 16, (unsigned int *)a2, v13);
        if (v13[0]) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = v13[1] == v10 + 32;
        }
        if (!v12)
        {
          *(unsigned char *)(v13[0] + 576) = 1;
          sub_2171E98F8((uint64_t)v9, v6 + 2, 0, (uint64_t)v15);
        }
      }
      while (1)
      {
        uint64_t v6 = *(unsigned int **)v6;
        if (!v6) {
          break;
        }
        if (v6[4]) {
          goto LABEL_12;
        }
      }
    }
  }
}

void pxrInternal__aapl__pxrReserved__::HdDependencyForwardingSceneIndex::_PrimDirtied(pxrInternal__aapl__pxrReserved__::HdDependencyForwardingSceneIndex *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *a3, uint64_t *a4, _DWORD *a5)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (!a4)
  {
    uint64_t v16 = "hd/dependencyForwardingSceneIndex.cpp";
    uint64_t v17 = "_PrimDirtied";
    uint64_t v18 = 162;
    long long v19 = "void pxrInternal__aapl__pxrReserved__::HdDependencyForwardingSceneIndex::_PrimDirtied(const SdfPath &, const H"
          "dDataSourceLocator &, _VisitedNodeSet *, HdSceneIndexObserver::DirtiedPrimEntries *)";
    char v20 = 0;
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v16, "visited", 0) & 1) == 0) {
      goto LABEL_33;
    }
  }
  sub_216981010(&v16, a2);
  sub_21698105C((_DWORD *)&v16 + 1, (_DWORD *)a2 + 1);
  sub_2171AA848(&v17, (uint64_t)a3);
  uint64_t v10 = sub_2171E7470(a4, (unsigned int *)&v16);
  BOOL v11 = (void *)a4[1];
  if (v11 == v10) {
    sub_2171E74F8(a4, (unsigned int *)&v16);
  }
  sub_217199B64((uint64_t)&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v16 + 1);
  sub_21697C414(&v16);
  if (v11 == v10)
  {
LABEL_33:
    BOOL v12 = (pxrInternal__aapl__pxrReserved__::HdDependenciesSchema *)sub_2171E7714(a5, a2, a3);
    DefaultLocator = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdDependenciesSchema::GetDefaultLocator(v12);
    if (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::Intersects(a3, DefaultLocator))
    {
      if (a4
        || (uint64_t v16 = "hd/dependencyForwardingSceneIndex.cpp",
            uint64_t v17 = "_PrimDirtied",
            uint64_t v18 = 178,
            long long v19 = "void pxrInternal__aapl__pxrReserved__::HdDependencyForwardingSceneIndex::_PrimDirtied(const SdfPath &,"
                  " const HdDataSourceLocator &, _VisitedNodeSet *, HdSceneIndexObserver::DirtiedPrimEntries *)",
            char v20 = 0,
            (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v16, "visited", 0) & 1) != 0))
      {
        sub_216981010(&v16, a2);
        sub_21698105C((_DWORD *)&v16 + 1, (_DWORD *)a2 + 1);
        sub_2171AA848(&v17, (uint64_t)DefaultLocator);
        if ((void *)a4[1] == sub_2171E7470(a4, (unsigned int *)&v16))
        {
          sub_2171E74F8(a4, (unsigned int *)&v16);
          pxrInternal__aapl__pxrReserved__::HdDependencyForwardingSceneIndex::_ClearDependencies(a1, a2);
          pxrInternal__aapl__pxrReserved__::HdDependencyForwardingSceneIndex::_UpdateDependencies(a1, a2);
        }
        sub_217199B64((uint64_t)&v17);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v16 + 1);
        sub_21697C414(&v16);
      }
    }
    sub_2171E95C4((uint64_t)a1 + 144, (unsigned int *)a2, &v16);
    if (v16 || v17 != (char *)a1 + 160)
    {
      uint64_t v14 = (uint64_t *)*((void *)v16 + 6);
      if (v14)
      {
        while ((v14[73] & 1) == 0)
        {
          uint64_t v14 = (uint64_t *)*v14;
          if (!v14) {
            return;
          }
        }
LABEL_16:
        uint64_t v15 = (uint64_t *)v14[6];
        if (!v15) {
          goto LABEL_19;
        }
        while ((v15[16] & 1) == 0)
        {
          uint64_t v15 = (uint64_t *)*v15;
          if (!v15) {
            goto LABEL_19;
          }
        }
LABEL_22:
        if (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::Intersects((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)(v15 + 2), a3))
        {
          pxrInternal__aapl__pxrReserved__::HdDependencyForwardingSceneIndex::_PrimDirtied(a1, v14 + 1, v15 + 9, a4, a5);
        }
        while (1)
        {
          uint64_t v15 = (uint64_t *)*v15;
          if (!v15) {
            break;
          }
          if (v15[16]) {
            goto LABEL_22;
          }
        }
LABEL_19:
        while (1)
        {
          uint64_t v14 = (uint64_t *)*v14;
          if (!v14) {
            break;
          }
          if (v14[73]) {
            goto LABEL_16;
          }
        }
      }
    }
  }
}

void sub_2171E6F70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2171E6FC0(uint64_t a1)
{
  sub_2171E8C58((uint64_t *)(a1 + 24), 0);
  uint64_t v3 = (void **)a1;
  sub_2171E8DA8(&v3);
  return a1;
}

void pxrInternal__aapl__pxrReserved__::HdDependencyForwardingSceneIndex::_PrimsDirtied(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = MEMORY[0x270FA5388](a1, a2, a3);
  BOOL v5 = (void **)v4;
  uint64_t v6 = (pxrInternal__aapl__pxrReserved__::HdDependencyForwardingSceneIndex *)v3;
  uint64_t v20 = *MEMORY[0x263EF8340];
  long long v16 = 0u;
  long long v17 = 0u;
  uint64_t v19 = 0x1000000000;
  if (*(_DWORD *)(v4 + 7428) >= 0x11u) {
    uint64_t v7 = *(_DWORD **)v4;
  }
  else {
    uint64_t v7 = (_DWORD *)v4;
  }
  int v8 = *(_DWORD *)(v4 + 7424);
  if (v8)
  {
    uint64_t v9 = &v7[116 * v8];
    do
    {
      uint64_t v10 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::begin(v7 + 2);
      uint64_t v11 = pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::end((pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *)(v7 + 2));
      while (v10 != (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)v11)
      {
        pxrInternal__aapl__pxrReserved__::HdDependencyForwardingSceneIndex::_PrimDirtied(v6, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v7, v10, (uint64_t *)&v16, v18);
        uint64_t v10 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)((char *)v10 + 56);
      }
      v7 += 116;
    }
    while (v7 != v9);
    if (v19)
    {
      if (HIDWORD(v19) >= 0x11) {
        BOOL v12 = (int *)v18[0];
      }
      else {
        BOOL v12 = (int *)v18;
      }
      if (*((_DWORD *)v5 + 1857) >= 0x11u) {
        uint64_t v13 = (uint64_t)*v5;
      }
      else {
        uint64_t v13 = (uint64_t)v5;
      }
      sub_2171E71B8(v18, v12, v13, v13 + 464 * *((unsigned int *)v5 + 1856));
      BOOL v5 = v18;
    }
  }
  pxrInternal__aapl__pxrReserved__::HdSceneIndexBase::_SendPrimsDirtied((uint64_t *)v6, (uint64_t)v5);
  sub_2171AB018(v18);
  uint64_t v14 = *((void *)&v17 + 1);
  *((void *)&v17 + 1) = 0;
  if (v14)
  {
    uint64_t v15 = (void *)sub_2171E8C98(v14);
    operator delete(v15);
  }
  v18[0] = &v16;
  sub_2171E8DA8((void ***)v18);
}

void sub_2171E7190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
}

void sub_2171E71B8(_DWORD *a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3;
  uint64_t v6 = a2;
  unsigned int v8 = a1[1857];
  uint64_t v9 = a1;
  if (v8 >= 0x11) {
    uint64_t v9 = *(_DWORD **)a1;
  }
  int v10 = a1[1856];
  uint64_t v11 = &v9[116 * v10];
  uint64_t v12 = 0x34F72C234F72C235 * ((a4 - a3) >> 4);
  unsigned int v13 = v10 + v12;
  unsigned int v14 = v8 + (v8 >> 1);
  if (v14 + 1 > v10 + (int)v12) {
    unsigned int v15 = v14 + 1;
  }
  else {
    unsigned int v15 = v10 + v12;
  }
  if (v11 == a2)
  {
    if (v13 > v8)
    {
      sub_2171E9D98(a1, v15);
      unsigned int v8 = a1[1857];
    }
    uint64_t v22 = a1;
    if (v8 < 0x11) {
      goto LABEL_21;
    }
LABEL_20:
    uint64_t v22 = *(_DWORD **)a1;
LABEL_21:
    sub_2171AAEEC(v5, a4, (uint64_t)&v22[116 * a1[1856]]);
    goto LABEL_22;
  }
  if (v13 <= v8)
  {
    uint64_t v23 = a1;
    if (v8 >= 0x11) {
      uint64_t v23 = *(_DWORD **)a1;
    }
    uint64_t v24 = 0x34F72C234F72C235 * (((char *)&v23[116 * v10] - (char *)a2) >> 4);
    if (v24 >= v12) {
      uint64_t v25 = 0x34F72C234F72C235 * ((a4 - a3) >> 4);
    }
    else {
      uint64_t v25 = v24;
    }
    uint64_t v26 = (uint64_t)&a2[116 * (v24 - v25)];
    uint64_t v27 = a1;
    if (v8 >= 0x11) {
      uint64_t v27 = *(_DWORD **)a1;
    }
    uint64_t v28 = (uint64_t)&v27[116 * v10];
    uint64_t v29 = v28 + 464 * (v12 - v25);
    sub_2171E9E20(v26, v28, v29);
    sub_2171E9F98((uint64_t)&v32, (uint64_t)v6, v26, v29);
    if (v25 >= 1)
    {
      do
      {
        sub_2169C487C(v6, (_DWORD *)v5);
        sub_2169C48D4(v6 + 1, (_DWORD *)(v5 + 4));
        if (v6 != (int *)v5)
        {
          if (*(_DWORD *)(v5 + 460) >= 9u) {
            uint64_t v30 = *(void *)(v5 + 8);
          }
          else {
            uint64_t v30 = v5 + 8;
          }
          sub_2171E02B0((uint64_t)(v6 + 2), v30, v30 + 56 * *(unsigned int *)(v5 + 456));
        }
        v5 += 464;
        v6 += 116;
        --v25;
      }
      while (v25);
    }
    uint64_t v22 = a1;
    if (a1[1857] < 0x11u) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  long long v16 = (char *)a1;
  if (v8 >= 0x11) {
    long long v16 = *(char **)a1;
  }
  unsigned int v17 = 1332920885 * ((unint64_t)((char *)a2 - v16) >> 4);
  uint64_t v18 = malloc(464 * v15);
  uint64_t v19 = (uint64_t)v18 + 464 * v17;
  uint64_t v20 = (uint64_t)a1;
  if (v8 >= 0x11) {
    uint64_t v20 = *(void *)a1;
  }
  sub_2171E9E20(v20, (uint64_t)v6, (uint64_t)v18);
  sub_2171AAEEC(v5, a4, v19);
  uint64_t v21 = a1;
  if (a1[1857] >= 0x11u) {
    uint64_t v21 = *(_DWORD **)a1;
  }
  sub_2171E9E20((uint64_t)v6, (uint64_t)&v21[116 * a1[1856]], v19 + 464 * v12);
  sub_2171AB058(a1);
  if (a1[1857] >= 0x11u) {
    free(*(void **)a1);
  }
  *(void *)a1 = v18;
  a1[1857] = v15;
LABEL_22:
  a1[1856] += v12;
}

void *sub_2171E7470(void *a1, unsigned int *a2)
{
  uint64_t v4 = (void *)a1[3];
  if (v4)
  {
    uint64_t v5 = sub_2171EA088(v4, a2);
    if (v5) {
      return (void *)(*a1 + (v5[10] << 6));
    }
    else {
      return (void *)a1[1];
    }
  }
  else
  {
    uint64_t v7 = (void *)*a1;
    uint64_t v6 = (void *)a1[1];
    while (v7 != v6)
    {
      if (sub_2171EA04C((uint64_t)a1, v7, a2)) {
        return v7;
      }
      v7 += 8;
    }
  }
  return v6;
}

uint64_t sub_2171E74F8(uint64_t *a1, unsigned int *a2)
{
  v17[8] = *MEMORY[0x263EF8340];
  uint64_t v4 = a1[3];
  if (v4)
  {
    uint64_t v11 = (a1[1] - *a1) >> 6;
    sub_2171EA6F0((uint64_t)&v12, a2, &v11);
    sub_2171EA76C((uint64_t)&v15, (uint64_t)&v12);
    uint64_t v5 = sub_2171EA2FC(v4, &v15, (uint64_t)&v15);
    char v7 = v6;
    sub_217199B64((uint64_t)v17);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
    sub_21697C414(&v15);
    sub_217199B64((uint64_t)&v14);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
    sub_21697C414(&v12);
    if (!v7) {
      return *a1 + (v5[10] << 6);
    }
    unsigned int v8 = (void *)a1[1];
  }
  else
  {
    unsigned int v8 = sub_2171E7470(a1, a2);
    if ((void *)a1[1] != v8) {
      return (uint64_t)v8;
    }
  }
  if ((unint64_t)v8 >= a1[2])
  {
    uint64_t v9 = sub_2171EA7E4(a1, a2);
  }
  else
  {
    sub_2171EA8D4((uint64_t)(a1 + 2), v8, a2);
    uint64_t v9 = (uint64_t)(v8 + 8);
    a1[1] = (uint64_t)(v8 + 8);
  }
  a1[1] = v9;
  sub_2171EA210(a1);
  return a1[1] - 64;
}

void sub_2171E7680(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  *(void *)(v19 + 8) = v20;
  _Unwind_Resume(exception_object);
}

_DWORD *sub_2171E76CC(_DWORD *a1)
{
  sub_217199B64((uint64_t)(a1 + 2));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);

  return sub_21697C414(a1);
}

uint64_t sub_2171E7714(_DWORD *a1, _DWORD *a2, pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *a3)
{
  v11[57] = *MEMORY[0x263EF8340];
  unsigned int v6 = a1[1856];
  unsigned int v7 = a1[1857];
  if (v6 == v7)
  {
    sub_2171E9D98(a1, v6 + (v6 >> 1) + 1);
    unsigned int v7 = a1[1857];
  }
  unsigned int v8 = a1;
  if (v7 >= 0x11) {
    unsigned int v8 = *(_DWORD **)a1;
  }
  int v9 = a1[1856];
  pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::HdDataSourceLocatorSet((pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *)v11, a3);
  sub_2171AA6C8(&v8[116 * v9], a2, (uint64_t)v11);
  uint64_t result = sub_2171AA914((uint64_t)v11);
  ++a1[1856];
  return result;
}

void sub_2171E77EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2171E7808(uint64_t a1, unsigned int *a2)
{
  sub_2171E9290(a1, a2, &v18);
  uint64_t v4 = v18;
  if ((void)v18) {
    BOOL v5 = 0;
  }
  else {
    BOOL v5 = *((void *)&v18 + 1) == a1 + 16;
  }
  if (v5)
  {
    bzero(v10, 0x238uLL);
    sub_2171E9138((uint64_t)v10, 8uLL, &v19);
    v10[560] = 0;
    sub_2171EB6FC((uint64_t)&v11, a2, (uint64_t)v10);
    sub_2171EB768((uint64_t)&v14, (uint64_t)&v11);
    sub_2171EB2B8(a1, &v14, 0, (uint64_t)&v17);
    long long v18 = v17;
    sub_2171E84B0((uint64_t)&v16, v6);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
    sub_21697C414(&v14);
    sub_2171E84B0((uint64_t)&v13, v7);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
    sub_21697C414(&v11);
    sub_2171E84B0((uint64_t)v10, v8);
    uint64_t v4 = v18;
  }
  return v4 + 16;
}

void sub_2171E7908(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_2171E8730(&STACK[0x480], a2);
  sub_2171EB270(&STACK[0x240], v4);
  sub_2171E84B0((uint64_t)va, v5);
  _Unwind_Resume(a1);
}

uint64_t sub_2171E793C(uint64_t a1, unsigned int *a2)
{
  sub_2171E95C4(a1, a2, &v18);
  uint64_t v4 = v18;
  if ((void)v18) {
    BOOL v5 = 0;
  }
  else {
    BOOL v5 = *((void *)&v18 + 1) == a1 + 16;
  }
  if (v5)
  {
    sub_2171EBBB4((uint64_t)v10, 8uLL, &v19);
    sub_2171EBD0C(&v11, a2, v10);
    sub_2171EBD70(&v14, (uint64_t)&v11);
    sub_2171EB810(a1, &v14, 0, (uint64_t)&v17);
    long long v18 = v17;
    sub_2171E8904((uint64_t)&v16, v6);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
    sub_21697C414(&v14);
    sub_2171E8904((uint64_t)&v13, v7);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
    sub_21697C414(&v11);
    sub_2171E8904((uint64_t)v10, v8);
    uint64_t v4 = v18;
  }
  return v4 + 16;
}

void sub_2171E7A2C(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_2171E88BC(&STACK[0x478], a2);
  sub_2171EB7C8(&STACK[0x240], v5);
  sub_2171E8904((uint64_t)va, v6);
  _Unwind_Resume(a1);
}

uint64_t sub_2171E7A60(uint64_t a1, unsigned int *a2)
{
  sub_2171EAF3C(a1, a2, &v18);
  uint64_t v4 = v18;
  if ((void)v18) {
    BOOL v5 = 0;
  }
  else {
    BOOL v5 = *((void *)&v18 + 1) == a1 + 16;
  }
  if (v5)
  {
    bzero(v10, 0x238uLL);
    sub_2171EC1BC((uint64_t)v10, 8uLL, &v19);
    v10[560] = 0;
    sub_2171EC314((uint64_t)&v11, a2, (uint64_t)v10);
    sub_2171EC380((uint64_t)&v14, (uint64_t)&v11);
    sub_2171EBE10(a1, &v14, 0, (uint64_t)&v17);
    long long v18 = v17;
    sub_2171E8A90((uint64_t)&v16, v6);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
    sub_21697C414(&v14);
    sub_2171E8A90((uint64_t)&v13, v7);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
    sub_21697C414(&v11);
    sub_2171E8A90((uint64_t)v10, v8);
    uint64_t v4 = v18;
  }
  return v4 + 16;
}

void sub_2171E7B60(_Unwind_Exception *a1, void *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_2171E8A48(&STACK[0x480], a2);
  sub_2171EBDC8(&STACK[0x240], v4);
  sub_2171E8A90((uint64_t)va, v5);
  _Unwind_Resume(a1);
}

uint64_t sub_2171E7B94(uint64_t a1, uint64_t *a2)
{
  v15[7] = *MEMORY[0x263EF8340];
  sub_2171EC3E0(a1, a2, &v8);
  uint64_t v4 = v8;
  if ((void)v8) {
    BOOL v5 = 0;
  }
  else {
    BOOL v5 = *((void *)&v8 + 1) == a1 + 16;
  }
  if (v5)
  {
    memset(v9, 0, sizeof(v9));
    pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)v9);
    pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)((char *)&v9[3] + 8));
    sub_2171ECA2C((uint64_t)&v10, a2, (uint64_t)v9);
    sub_2171ECAD8((uint64_t)&v13, &v10);
    sub_2171EC714(a1, &v13, 0, (uint64_t)&v7);
    long long v8 = v7;
    sub_217199B64((uint64_t)v15);
    sub_217199B64((uint64_t)&v14);
    if ((v13 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    sub_217199B64((uint64_t)&v12);
    sub_217199B64((uint64_t)&v11);
    if ((v10 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    sub_217199B64((uint64_t)&v9[3] + 8);
    sub_217199B64((uint64_t)v9);
    uint64_t v4 = v8;
  }
  return v4 + 16;
}

void sub_2171E7CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  sub_2171E8BD8((void *)(v31 - 160));
  sub_2171E8BD8(&a30);
  sub_217199B64(v30);
  sub_217199B64((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdDependencyForwardingSceneIndex::RemoveDeletedEntries(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  long long v38 = 0;
  unsigned int v39 = 0;
  unint64_t v40 = 0;
  BOOL v5 = *(unsigned int **)(a1 + 1296);
  if (v5)
  {
    while ((v5[4] & 1) == 0)
    {
      BOOL v5 = *(unsigned int **)v5;
      if (!v5) {
        goto LABEL_4;
      }
    }
    uint64_t v8 = a1 + 144;
    uint64_t v32 = a1 + 704;
    uint64_t v33 = a1 + 160;
    uint64_t v31 = a1 + 720;
LABEL_9:
    sub_2171E95C4(v8, v5 + 2, &v36);
    int v9 = v36;
    if (v36) {
      BOOL v10 = 0;
    }
    else {
      BOOL v10 = v37 == v33;
    }
    if (v10) {
      goto LABEL_50;
    }
    uint64_t v12 = v38;
    for (uint64_t i = v39; i != v12; sub_216981128((uint64_t)&v40, i))
      i -= 2;
    unsigned int v39 = v12;
    uint64_t v13 = (char *)v9[6];
    if (v13)
    {
      while ((v13[584] & 1) == 0)
      {
        uint64_t v13 = *(char **)v13;
        if (!v13) {
          goto LABEL_41;
        }
      }
      uint64_t v29 = a2;
LABEL_21:
      if (v13[576])
      {
        uint64_t v14 = v39;
        uint64_t v30 = (unsigned int *)(v13 + 8);
        if ((unint64_t)v39 >= v40)
        {
          uint64_t v16 = (unsigned int *)sub_216981B30((uint64_t *)&v38, (_DWORD *)v13 + 2);
          int v15 = (unsigned int *)(v13 + 8);
        }
        else
        {
          sub_216981010(v39, v30);
          sub_21698105C(v14 + 1, (_DWORD *)v13 + 3);
          int v15 = (unsigned int *)(v13 + 8);
          uint64_t v16 = v14 + 2;
        }
        uint64_t v17 = v8;
        unsigned int v39 = v16;
        sub_2171E9290(v32, v15, v35);
        uint64_t v18 = v35[0];
        if (v35[0] || v35[1] != v31)
        {
          sub_2171ECB60(v35[0] + 16, v5 + 2, v34);
          if (v34[0] || v34[1] != v18 + 32)
          {
            if (*(void *)(v18 + 40) == 1)
            {
              sub_2171E8114(v32, v30);
              if (v29)
              {
                unint64_t v19 = v29[1];
                if (v19 >= v29[2])
                {
                  uint64_t v20 = sub_216981B30(v29, v30);
                }
                else
                {
                  sub_216981010((_DWORD *)v29[1], v30);
                  sub_21698105C((_DWORD *)(v19 + 4), (_DWORD *)v13 + 3);
                  uint64_t v20 = v19 + 8;
                }
                v29[1] = v20;
              }
            }
            else
            {
              sub_2171E8190(v18 + 16, v5 + 2);
            }
          }
        }
        uint64_t v8 = v17;
        a2 = v29;
      }
      while (1)
      {
        uint64_t v13 = *(char **)v13;
        if (!v13) {
          break;
        }
        if (v13[584]) {
          goto LABEL_21;
        }
      }
      uint64_t v12 = v39;
    }
LABEL_41:
    uint64_t v21 = v38;
    if (v9[5] == (void *)(((char *)v12 - (char *)v38) >> 3))
    {
      sub_2171E820C(v8, v5 + 2);
      if (a3)
      {
        unint64_t v22 = a3[1];
        if (v22 >= a3[2])
        {
          uint64_t v23 = sub_216981B30(a3, v5 + 2);
        }
        else
        {
          sub_216981010((_DWORD *)a3[1], v5 + 2);
          sub_21698105C((_DWORD *)(v22 + 4), v5 + 3);
          uint64_t v23 = v22 + 8;
        }
        a3[1] = v23;
      }
    }
    else if (v38 != v12)
    {
      do
      {
        sub_2171E8288((uint64_t)(v9 + 2), v21);
        v21 += 2;
      }
      while (v21 != v12);
    }
LABEL_50:
    while (1)
    {
      BOOL v5 = *(unsigned int **)v5;
      if (!v5) {
        break;
      }
      if (v5[4]) {
        goto LABEL_9;
      }
    }
  }
LABEL_4:
  long long v7 = *(unsigned int **)(a1 + 1856);
  if (v7)
  {
    while ((v7[4] & 1) == 0)
    {
      long long v7 = *(unsigned int **)v7;
      if (!v7) {
        goto LABEL_7;
      }
    }
LABEL_53:
    sub_2171E9290(a1 + 704, v7 + 2, &v36);
    uint64_t v24 = v36;
    uint64_t v25 = v37;
    if (v36) {
      BOOL v26 = 0;
    }
    else {
      BOOL v26 = v37 == a1 + 720;
    }
    if (!v26 && *((unsigned char *)v36 + 576))
    {
      if (a2)
      {
        unint64_t v27 = a2[1];
        if (v27 >= a2[2])
        {
          uint64_t v28 = sub_216981B30(a2, v7 + 2);
        }
        else
        {
          sub_216981010((_DWORD *)a2[1], v7 + 2);
          sub_21698105C((_DWORD *)(v27 + 4), v7 + 3);
          uint64_t v28 = v27 + 8;
        }
        a2[1] = v28;
        uint64_t v24 = v36;
        uint64_t v25 = v37;
      }
      sub_2171ED5FC(a1 + 704, (uint64_t)v24, v25, (uint64_t)v35);
    }
    while (1)
    {
      long long v7 = *(unsigned int **)v7;
      if (!v7) {
        break;
      }
      if (v7[4]) {
        goto LABEL_53;
      }
    }
  }
LABEL_7:
  sub_2171E8304(a1 + 1264);
  sub_2171E8304(a1 + 1824);
  unsigned int v36 = (void **)&v38;
  sub_216981168(&v36);
}

void sub_2171E80D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, char a20)
{
  a18 = (void **)&a20;
  sub_216981168(&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_2171E8114(uint64_t a1, unsigned int *a2)
{
  sub_2171ECCD8(a1, a2, &v9);
  uint64_t v3 = 0;
  if (v9 != v11 || v10 != v12)
  {
    uint64_t v5 = v9;
    do
    {
      ++v3;
      do
        uint64_t v5 = *(void *)v5;
      while (v5 && (*(unsigned char *)(v5 + 584) & 1) == 0);
    }
    while (v5 != v11 || v10 != v12);
  }
  sub_2171ECC44(a1, v9, v10, v11, v12, &v8);
  return v3;
}

uint64_t sub_2171E8190(uint64_t a1, unsigned int *a2)
{
  sub_2171ECE74(a1, a2, &v9);
  uint64_t v3 = 0;
  if (v9 != v11 || v10 != v12)
  {
    uint64_t v5 = v9;
    do
    {
      ++v3;
      do
        uint64_t v5 = *(void *)v5;
      while (v5 && (*(unsigned char *)(v5 + 16) & 1) == 0);
    }
    while (v5 != v11 || v10 != v12);
  }
  sub_2171ECDE0(a1, v9, v10, v11, v12, &v8);
  return v3;
}

uint64_t sub_2171E820C(uint64_t a1, unsigned int *a2)
{
  sub_2171ED128(a1, a2, &v9);
  uint64_t v3 = 0;
  if (v9 != v11 || v10 != v12)
  {
    uint64_t v5 = v9;
    do
    {
      ++v3;
      do
        uint64_t v5 = *(void *)v5;
      while (v5 && (*(unsigned char *)(v5 + 576) & 1) == 0);
    }
    while (v5 != v11 || v10 != v12);
  }
  sub_2171ED094(a1, v9, v10, v11, v12, &v8);
  return v3;
}

uint64_t sub_2171E8288(uint64_t a1, unsigned int *a2)
{
  sub_2171ED3DC(a1, a2, &v9);
  uint64_t v3 = 0;
  if (v9 != v11 || v10 != v12)
  {
    uint64_t v5 = v9;
    do
    {
      ++v3;
      do
        uint64_t v5 = *(void *)v5;
      while (v5 && (*(unsigned char *)(v5 + 584) & 1) == 0);
    }
    while (v5 != v11 || v10 != v12);
  }
  sub_2171ED348(a1, v9, v10, v11, v12, &v8);
  return v3;
}

void sub_2171E8304(uint64_t a1)
{
  sub_2171E8520(a1 + 16);
  sub_21691B58C(a1, v2);
  uint64_t v3 = *(void *)(a1 + 32);
  sub_216912714(a1, 0, &v3);
}

void sub_2171E8354(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1, void *a2)
{
  *a1 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)&unk_26C780178;
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::HdSceneIndexObserver *)(a1 + 15);
  sub_2171E84B0((uint64_t)(a1 + 228), a2);
  sub_2171E84B0((uint64_t)(a1 + 158), v4);
  sub_2171E85EC((uint64_t)(a1 + 88), v5);
  sub_2171E8778((uint64_t)(a1 + 18), v6);
  *a1 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)&unk_26C780580;
  pxrInternal__aapl__pxrReserved__::HdSceneIndexObserver::~HdSceneIndexObserver(v3, v7);
  sub_2171E8C28(a1 + 14);

  pxrInternal__aapl__pxrReserved__::HdSceneIndexBase::~HdSceneIndexBase((pxrInternal__aapl__pxrReserved__::HdSceneIndexBase *)a1);
}

void sub_2171E8400(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1, void *a2)
{
  *a1 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)&unk_26C780178;
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::HdSceneIndexObserver *)(a1 + 15);
  sub_2171E84B0((uint64_t)(a1 + 228), a2);
  sub_2171E84B0((uint64_t)(a1 + 158), v4);
  sub_2171E85EC((uint64_t)(a1 + 88), v5);
  sub_2171E8778((uint64_t)(a1 + 18), v6);
  *a1 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)&unk_26C780580;
  pxrInternal__aapl__pxrReserved__::HdSceneIndexObserver::~HdSceneIndexObserver(v3, v7);
  sub_2171E8C28(a1 + 14);
  pxrInternal__aapl__pxrReserved__::HdSceneIndexBase::~HdSceneIndexBase((pxrInternal__aapl__pxrReserved__::HdSceneIndexBase *)a1);

  operator delete(v8);
}

uint64_t sub_2171E84B0(uint64_t a1, void *a2)
{
  return a1;
}

uint64_t sub_2171E84E4(uint64_t a1)
{
  sub_2171E8520(a1);
  uint64_t v2 = *(tbb::internal **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  sub_2171E8568(a1, v2);
  return a1;
}

uint64_t sub_2171E8520(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(tbb::internal ***)(result + 16);
  uint64_t v3 = *v2;
  tbb::internal *v2 = 0;
  if (v3)
  {
    do
    {
      uint64_t v4 = *(tbb::internal **)v3;
      uint64_t result = sub_2171E8568(v1, v3);
      uint64_t v3 = v4;
    }
    while (v4);
  }
  *(void *)(v1 + 8) = 0;
  return result;
}

uint64_t sub_2171E8568(uint64_t a1, tbb::internal *this)
{
  if (*((unsigned char *)this + 16)) {
    sub_2171E85AC(a1, (uint64_t)this);
  }

  return tbb::internal::deallocate_via_handler_v3((uint64_t)this, this);
}

_DWORD *sub_2171E85AC(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 12));

  return sub_21697C414((_DWORD *)(a2 + 8));
}

uint64_t sub_2171E85EC(uint64_t a1, void *a2)
{
  return a1;
}

uint64_t sub_2171E8620(uint64_t a1)
{
  sub_2171E865C(a1);
  uint64_t v2 = *(tbb::internal **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  sub_2171E86A4(a1, v2);
  return a1;
}

uint64_t sub_2171E865C(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(tbb::internal ***)(result + 16);
  uint64_t v3 = *v2;
  tbb::internal *v2 = 0;
  if (v3)
  {
    do
    {
      uint64_t v4 = *(tbb::internal **)v3;
      uint64_t result = sub_2171E86A4(v1, v3);
      uint64_t v3 = v4;
    }
    while (v4);
  }
  *(void *)(v1 + 8) = 0;
  return result;
}

uint64_t sub_2171E86A4(uint64_t a1, tbb::internal *this)
{
  if (*((unsigned char *)this + 584)) {
    sub_2171E86E8(a1, this);
  }

  return tbb::internal::deallocate_via_handler_v3((uint64_t)this, this);
}

_DWORD *sub_2171E86E8(uint64_t a1, _DWORD *a2)
{
  sub_2171E84B0((uint64_t)(a2 + 4), a2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a2 + 3);

  return sub_21697C414(a2 + 2);
}

_DWORD *sub_2171E8730(_DWORD *a1, void *a2)
{
  sub_2171E84B0((uint64_t)(a1 + 2), a2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);

  return sub_21697C414(a1);
}

uint64_t sub_2171E8778(uint64_t a1, void *a2)
{
  return a1;
}

uint64_t sub_2171E87AC(uint64_t a1)
{
  sub_2171E87E8(a1);
  uint64_t v2 = *(tbb::internal **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  sub_2171E8830(a1, v2);
  return a1;
}

uint64_t sub_2171E87E8(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(tbb::internal ***)(result + 16);
  uint64_t v3 = *v2;
  tbb::internal *v2 = 0;
  if (v3)
  {
    do
    {
      uint64_t v4 = *(tbb::internal **)v3;
      uint64_t result = sub_2171E8830(v1, v3);
      uint64_t v3 = v4;
    }
    while (v4);
  }
  *(void *)(v1 + 8) = 0;
  return result;
}

uint64_t sub_2171E8830(uint64_t a1, tbb::internal *this)
{
  if (*((unsigned char *)this + 576)) {
    sub_2171E8874(a1, this);
  }

  return tbb::internal::deallocate_via_handler_v3((uint64_t)this, this);
}

_DWORD *sub_2171E8874(uint64_t a1, _DWORD *a2)
{
  sub_2171E8904((uint64_t)(a2 + 4), a2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a2 + 3);

  return sub_21697C414(a2 + 2);
}

_DWORD *sub_2171E88BC(_DWORD *a1, void *a2)
{
  sub_2171E8904((uint64_t)(a1 + 2), a2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);

  return sub_21697C414(a1);
}

uint64_t sub_2171E8904(uint64_t a1, void *a2)
{
  return a1;
}

uint64_t sub_2171E8938(uint64_t a1)
{
  sub_2171E8974(a1);
  uint64_t v2 = *(tbb::internal **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  sub_2171E89BC(a1, v2);
  return a1;
}

uint64_t sub_2171E8974(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(tbb::internal ***)(result + 16);
  uint64_t v3 = *v2;
  tbb::internal *v2 = 0;
  if (v3)
  {
    do
    {
      uint64_t v4 = *(tbb::internal **)v3;
      uint64_t result = sub_2171E89BC(v1, v3);
      uint64_t v3 = v4;
    }
    while (v4);
  }
  *(void *)(v1 + 8) = 0;
  return result;
}

uint64_t sub_2171E89BC(uint64_t a1, tbb::internal *this)
{
  if (*((unsigned char *)this + 584)) {
    sub_2171E8A00(a1, this);
  }

  return tbb::internal::deallocate_via_handler_v3((uint64_t)this, this);
}

_DWORD *sub_2171E8A00(uint64_t a1, _DWORD *a2)
{
  sub_2171E8A90((uint64_t)(a2 + 4), a2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a2 + 3);

  return sub_21697C414(a2 + 2);
}

_DWORD *sub_2171E8A48(_DWORD *a1, void *a2)
{
  sub_2171E8A90((uint64_t)(a1 + 2), a2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);

  return sub_21697C414(a1);
}

uint64_t sub_2171E8A90(uint64_t a1, void *a2)
{
  return a1;
}

uint64_t sub_2171E8AC4(uint64_t a1)
{
  sub_2171E8B00(a1);
  uint64_t v2 = *(tbb::internal **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  sub_2171E8B48(a1, v2);
  return a1;
}

uint64_t sub_2171E8B00(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(tbb::internal ***)(result + 16);
  uint64_t v3 = *v2;
  tbb::internal *v2 = 0;
  if (v3)
  {
    do
    {
      uint64_t v4 = *(tbb::internal **)v3;
      uint64_t result = sub_2171E8B48(v1, v3);
      uint64_t v3 = v4;
    }
    while (v4);
  }
  *(void *)(v1 + 8) = 0;
  return result;
}

uint64_t sub_2171E8B48(uint64_t a1, tbb::internal *this)
{
  if (*((unsigned char *)this + 128)) {
    sub_2171E8B8C(a1, (uint64_t)this);
  }

  return tbb::internal::deallocate_via_handler_v3((uint64_t)this, this);
}

uint64_t sub_2171E8B8C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  sub_217199B64(a2 + 72);
  uint64_t result = sub_217199B64(v3);
  uint64_t v5 = *(void *)(a2 + 8);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void *sub_2171E8BD8(void *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 1);
  sub_217199B64((uint64_t)(a1 + 8));
  sub_217199B64(v2);
  if ((*a1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*a1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_2171E8C28(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  return a1;
}

void sub_2171E8C58(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)sub_2171E8C98(v3);
    operator delete(v4);
  }
}

uint64_t sub_2171E8C98(uint64_t a1)
{
  sub_2171E8CD4(a1, *(_DWORD **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_2171E8CD4(uint64_t a1, _DWORD *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = *(_DWORD **)v2;
      sub_2171E8D18(v2 + 4);
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

_DWORD *sub_2171E8D18(_DWORD *a1)
{
  sub_217199B64((uint64_t)(a1 + 2));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);

  return sub_21697C414(a1);
}

_DWORD *sub_2171E8D60(_DWORD *a1)
{
  sub_217199B64((uint64_t)(a1 + 2));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);

  return sub_21697C414(a1);
}

void sub_2171E8DA8(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 16;
        sub_2171E8E40((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_DWORD *sub_2171E8E40(uint64_t a1, _DWORD *a2)
{
  sub_217199B64((uint64_t)(a2 + 2));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a2 + 1);

  return sub_21697C414(a2);
}

uint64_t sub_2171E8E88(uint64_t a1, unint64_t a2, _WORD *a3)
{
  *(_WORD *)a1 = *a3;
  *(void *)(a1 + 24) = 0;
  uint64_t v5 = (void *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x248);
  v5[72] = 0;
  void *v5 = 0;
  *(void *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 44) = 1082130432;
  if (a2 <= 1) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = a2;
  }
  unint64_t v7 = 2 * v6 - 1;
  BOOL v8 = HIDWORD(v7) != 0;
  __dmb(0xBu);
  if (HIDWORD(v7)) {
    v7 >>= 32;
  }
  char v9 = 32 * v8;
  if (v7 >= 0x10000)
  {
    v7 >>= 16;
    char v9 = (32 * v8) | 0x10;
  }
  if (v7 >= 0x100)
  {
    v7 >>= 8;
    v9 |= 8u;
  }
  if (v7 >= 0x10)
  {
    v7 >>= 4;
    v9 |= 4u;
  }
  if (v7 >= 4)
  {
    v7 >>= 2;
    v9 += 2;
  }
  *(void *)(a1 + 8) = 1 << (((v7 & 2) != 0) + v9);
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  uint64_t v11 = *(void *)(a1 + 32);
  sub_216912714(a1, 0, &v11);
  return a1;
}

void sub_2171E8FCC(_Unwind_Exception *a1)
{
  sub_2171E87AC(v1 + 16);
  _Unwind_Resume(a1);
}

uint64_t sub_2171E8FE0(uint64_t a1, unint64_t a2, _WORD *a3)
{
  *(_WORD *)a1 = *a3;
  *(void *)(a1 + 24) = 0;
  uint64_t v5 = (void *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x250);
  v5[73] = 0;
  void *v5 = 0;
  *(void *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 44) = 1082130432;
  if (a2 <= 1) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = a2;
  }
  unint64_t v7 = 2 * v6 - 1;
  BOOL v8 = HIDWORD(v7) != 0;
  __dmb(0xBu);
  if (HIDWORD(v7)) {
    v7 >>= 32;
  }
  char v9 = 32 * v8;
  if (v7 >= 0x10000)
  {
    v7 >>= 16;
    char v9 = (32 * v8) | 0x10;
  }
  if (v7 >= 0x100)
  {
    v7 >>= 8;
    v9 |= 8u;
  }
  if (v7 >= 0x10)
  {
    v7 >>= 4;
    v9 |= 4u;
  }
  if (v7 >= 4)
  {
    v7 >>= 2;
    v9 += 2;
  }
  *(void *)(a1 + 8) = 1 << (((v7 & 2) != 0) + v9);
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  uint64_t v11 = *(void *)(a1 + 32);
  sub_216912714(a1, 0, &v11);
  return a1;
}

void sub_2171E9124(_Unwind_Exception *a1)
{
  sub_2171E8620(v1 + 16);
  _Unwind_Resume(a1);
}

uint64_t sub_2171E9138(uint64_t a1, unint64_t a2, _WORD *a3)
{
  *(_WORD *)a1 = *a3;
  *(void *)(a1 + 24) = 0;
  uint64_t v5 = (void *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x18);
  uint64_t v5[2] = 0;
  void *v5 = 0;
  *(void *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 44) = 1082130432;
  if (a2 <= 1) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = a2;
  }
  unint64_t v7 = 2 * v6 - 1;
  BOOL v8 = HIDWORD(v7) != 0;
  __dmb(0xBu);
  if (HIDWORD(v7)) {
    v7 >>= 32;
  }
  char v9 = 32 * v8;
  if (v7 >= 0x10000)
  {
    v7 >>= 16;
    char v9 = (32 * v8) | 0x10;
  }
  if (v7 >= 0x100)
  {
    v7 >>= 8;
    v9 |= 8u;
  }
  if (v7 >= 0x10)
  {
    v7 >>= 4;
    v9 |= 4u;
  }
  if (v7 >= 4)
  {
    v7 >>= 2;
    v9 += 2;
  }
  *(void *)(a1 + 8) = 1 << (((v7 & 2) != 0) + v9);
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  uint64_t v11 = *(void *)(a1 + 32);
  sub_216912714(a1, 0, &v11);
  return a1;
}

void sub_2171E927C(_Unwind_Exception *a1)
{
  sub_2171E84E4(v1 + 16);
  _Unwind_Resume(a1);
}

void sub_2171E9290(uint64_t a1@<X0>, unsigned int *a2@<X1>, void *a3@<X8>)
{
  unint64_t v5 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  uint64_t v14 = 0;
  int v15 = (void *)v5;
  uint64_t v6 = (unsigned __int8 *)&v15;
  for (uint64_t i = 7; i != -1; --i)
  {
    int v8 = *v6++;
    *((unsigned char *)&v14 + i) = byte_217457512[v8];
  }
  uint64_t v9 = v14;
  uint64_t v10 = a1 + 16;
  sub_2171E9374(a1, v5, &v15);
  uint64_t v11 = v15;
  if (v15)
  {
    unint64_t v12 = v9 | 1;
    while (1)
    {
      unint64_t v13 = v11[73];
      if (v13 > v12) {
        break;
      }
      if (v13 == v12 && v11[1] == *(void *)a2) {
        goto LABEL_11;
      }
      uint64_t v11 = (void *)*v11;
      if (!v11) {
        goto LABEL_9;
      }
    }
    uint64_t v11 = 0;
LABEL_11:
    *a3 = v11;
  }
  else
  {
LABEL_9:
    *a3 = 0;
  }
  a3[1] = v10;
}

void sub_2171E9374(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v5 = *(void *)(a1 + 8);
  __dmb(0xBu);
  unint64_t v6 = a2 % v5;
  unint64_t v7 = sub_216851020(a2 % v5);
  unint64_t v8 = v6 - ((1 << v7) & 0xFFFFFFFFFFFFFFFELL);
  unint64_t v9 = a1 + 8 * v7;
  uint64_t v11 = *(void *)(v9 + 48);
  uint64_t v10 = (uint64_t *)(v9 + 48);
  __dmb(0xBu);
  if (!v11 || (uint64_t v12 = *v10, __dmb(0xBu), !*(void *)(v12 + 8 * v8))) {
    sub_2171E940C(a1, (atomic_ullong *)v6);
  }
  uint64_t v13 = *v10;
  __dmb(0xBu);
  *a3 = *(void *)(v13 + 8 * v8);
}

void sub_2171E940C(uint64_t a1, atomic_ullong *a2)
{
  unint64_t v4 = sub_21691BC60(a1, (unint64_t)a2);
  if (!sub_21691BCEC(a1, v4)) {
    sub_2171E940C(a1, v4);
  }
  unint64_t v5 = sub_216851020(v4);
  uint64_t v6 = *(void *)(a1 + 8 * v5 + 48);
  __dmb(0xBu);
  uint64_t v11 = *(atomic_ullong **)(v6 + 8 * (v4 - ((1 << v5) & 0x1FFFFFFFFFFFFFFELL)));
  uint64_t v12 = 0;
  uint64_t v13 = a2;
  unint64_t v7 = &v13;
  for (uint64_t i = 7; i != -1; --i)
  {
    int v9 = *(unsigned __int8 *)v7;
    unint64_t v7 = (atomic_ullong **)((char *)v7 + 1);
    *((unsigned char *)&v12 + i) = byte_217457512[v9];
  }
  sub_2171E94F0(a1 + 16, &v11, v12 & 0xFFFFFFFFFFFFFFFELL, &v13);
  uint64_t v10 = v13;
  sub_216912714(a1, (unint64_t)a2, &v10);
}

tbb::internal *sub_2171E94F0@<X0>(uint64_t a1@<X0>, atomic_ullong **a2@<X1>, unint64_t a3@<X2>, atomic_ullong **a4@<X8>)
{
  uint64_t i = (atomic_ullong *)**a2;
  uint64_t result = (tbb::internal *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x250);
  *((void *)result + 73) = a3;
  *(void *)uint64_t result = 0;
  if (i) {
    goto LABEL_2;
  }
LABEL_3:
  while (1)
  {
    uint64_t v11 = *a2;
    *(void *)uint64_t result = i;
    while (1)
    {
      uint64_t v12 = i;
      atomic_compare_exchange_strong(v11, (unint64_t *)&v12, (unint64_t)result);
      if (v12 == i) {
        break;
      }
      unint64_t add_explicit = atomic_fetch_add_explicit(v11, 0, memory_order_relaxed);
      if ((atomic_ullong *)add_explicit != i) {
        goto LABEL_8;
      }
    }
    unint64_t add_explicit = (unint64_t)i;
LABEL_8:
    if (i == (atomic_ullong *)add_explicit || result == (tbb::internal *)add_explicit) {
      break;
    }
    for (uint64_t i = *a2; ; *a2 = i)
    {
      uint64_t i = (atomic_ullong *)*i;
      if (!i) {
        break;
      }
LABEL_2:
      unint64_t v10 = i[73];
      if (v10 > a3) {
        goto LABEL_3;
      }
      if (v10 == a3)
      {
        uint64_t result = (tbb::internal *)sub_2171E86A4(a1, result);
        goto LABEL_17;
      }
    }
  }
  uint64_t i = (atomic_ullong *)result;
LABEL_17:
  *a4 = i;
  return result;
}

void sub_2171E95C4(uint64_t a1@<X0>, unsigned int *a2@<X1>, void *a3@<X8>)
{
  unint64_t v5 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  uint64_t v14 = 0;
  int v15 = (void *)v5;
  uint64_t v6 = (unsigned __int8 *)&v15;
  for (uint64_t i = 7; i != -1; --i)
  {
    int v8 = *v6++;
    *((unsigned char *)&v14 + i) = byte_217457512[v8];
  }
  uint64_t v9 = v14;
  uint64_t v10 = a1 + 16;
  sub_2171E96A8(a1, v5, &v15);
  uint64_t v11 = v15;
  if (v15)
  {
    unint64_t v12 = v9 | 1;
    while (1)
    {
      unint64_t v13 = v11[72];
      if (v13 > v12) {
        break;
      }
      if (v13 == v12 && v11[1] == *(void *)a2) {
        goto LABEL_11;
      }
      uint64_t v11 = (void *)*v11;
      if (!v11) {
        goto LABEL_9;
      }
    }
    uint64_t v11 = 0;
LABEL_11:
    *a3 = v11;
  }
  else
  {
LABEL_9:
    *a3 = 0;
  }
  a3[1] = v10;
}

void sub_2171E96A8(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v5 = *(void *)(a1 + 8);
  __dmb(0xBu);
  unint64_t v6 = a2 % v5;
  unint64_t v7 = sub_216851020(a2 % v5);
  unint64_t v8 = v6 - ((1 << v7) & 0xFFFFFFFFFFFFFFFELL);
  unint64_t v9 = a1 + 8 * v7;
  uint64_t v11 = *(void *)(v9 + 48);
  uint64_t v10 = (uint64_t *)(v9 + 48);
  __dmb(0xBu);
  if (!v11 || (uint64_t v12 = *v10, __dmb(0xBu), !*(void *)(v12 + 8 * v8))) {
    sub_2171E9740(a1, (atomic_ullong *)v6);
  }
  uint64_t v13 = *v10;
  __dmb(0xBu);
  *a3 = *(void *)(v13 + 8 * v8);
}

void sub_2171E9740(uint64_t a1, atomic_ullong *a2)
{
  unint64_t v4 = sub_21691BC60(a1, (unint64_t)a2);
  if (!sub_21691BCEC(a1, v4)) {
    sub_2171E9740(a1, v4);
  }
  unint64_t v5 = sub_216851020(v4);
  uint64_t v6 = *(void *)(a1 + 8 * v5 + 48);
  __dmb(0xBu);
  uint64_t v11 = *(atomic_ullong **)(v6 + 8 * (v4 - ((1 << v5) & 0x1FFFFFFFFFFFFFFELL)));
  uint64_t v12 = 0;
  uint64_t v13 = a2;
  unint64_t v7 = &v13;
  for (uint64_t i = 7; i != -1; --i)
  {
    int v9 = *(unsigned __int8 *)v7;
    unint64_t v7 = (atomic_ullong **)((char *)v7 + 1);
    *((unsigned char *)&v12 + i) = byte_217457512[v9];
  }
  sub_2171E9824(a1 + 16, &v11, v12 & 0xFFFFFFFFFFFFFFFELL, &v13);
  uint64_t v10 = v13;
  sub_216912714(a1, (unint64_t)a2, &v10);
}

tbb::internal *sub_2171E9824@<X0>(uint64_t a1@<X0>, atomic_ullong **a2@<X1>, unint64_t a3@<X2>, atomic_ullong **a4@<X8>)
{
  uint64_t i = (atomic_ullong *)**a2;
  uint64_t result = (tbb::internal *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x248);
  *((void *)result + 72) = a3;
  *(void *)uint64_t result = 0;
  if (i) {
    goto LABEL_2;
  }
LABEL_3:
  while (1)
  {
    uint64_t v11 = *a2;
    *(void *)uint64_t result = i;
    while (1)
    {
      uint64_t v12 = i;
      atomic_compare_exchange_strong(v11, (unint64_t *)&v12, (unint64_t)result);
      if (v12 == i) {
        break;
      }
      unint64_t add_explicit = atomic_fetch_add_explicit(v11, 0, memory_order_relaxed);
      if ((atomic_ullong *)add_explicit != i) {
        goto LABEL_8;
      }
    }
    unint64_t add_explicit = (unint64_t)i;
LABEL_8:
    if (i == (atomic_ullong *)add_explicit || result == (tbb::internal *)add_explicit) {
      break;
    }
    for (uint64_t i = *a2; ; *a2 = i)
    {
      uint64_t i = (atomic_ullong *)*i;
      if (!i) {
        break;
      }
LABEL_2:
      unint64_t v10 = i[72];
      if (v10 > a3) {
        goto LABEL_3;
      }
      if (v10 == a3)
      {
        uint64_t result = (tbb::internal *)sub_2171E8830(a1, result);
        goto LABEL_17;
      }
    }
  }
  uint64_t i = (atomic_ullong *)result;
LABEL_17:
  *a4 = i;
  return result;
}

void sub_2171E98F8(uint64_t a1@<X0>, unsigned int *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v8 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  uint64_t v24 = 0;
  uint64_t v25 = (atomic_ullong *)v8;
  int v9 = &v25;
  for (uint64_t i = 7; i != -1; --i)
  {
    int v11 = *(unsigned __int8 *)v9;
    int v9 = (atomic_ullong **)((char *)v9 + 1);
    *((unsigned char *)&v24 + i) = byte_217457512[v11];
  }
  unint64_t v12 = v24 | 1;
  sub_2171E9AEC(a1, v8, &v25);
  uint64_t v13 = a1 + 16;
  if (a3)
  {
    a3[2] = v12;
    *a3 = 0;
  }
  uint64_t v14 = a2;
  while (1)
  {
    int v15 = v25;
    uint64_t v16 = (atomic_ullong *)*v25;
    if (*v25)
    {
      unint64_t v17 = v16[2];
      while (1)
      {
        uint64_t v18 = v16;
        if (v17 > v12) {
          break;
        }
        if (v17 == v12 && v16[1] == *v14)
        {
          if (a3) {
            sub_2171E8568(a1 + 16, (tbb::internal *)a3);
          }
          *(void *)a4 = v16;
          *(void *)(a4 + 8) = v13;
          *(unsigned char *)(a4 + 16) = 0;
          return;
        }
        uint64_t v25 = v16;
        uint64_t v16 = (atomic_ullong *)*v16;
        if (!*v18)
        {
          int v15 = v18;
          break;
        }
        unint64_t v17 = v16[2];
        int v15 = v18;
      }
    }
    if (!a3)
    {
      a3 = (void *)sub_2171E9B84(a1 + 16, v12, a2);
      uint64_t v14 = a3 + 1;
      int v15 = v25;
    }
    *a3 = v16;
    while (1)
    {
      unint64_t v19 = v16;
      atomic_compare_exchange_strong(v15, (unint64_t *)&v19, (unint64_t)a3);
      if (v19 == v16) {
        break;
      }
      unint64_t add_explicit = atomic_fetch_add_explicit(v15, 0, memory_order_relaxed);
      if ((atomic_ullong *)add_explicit != v16) {
        goto LABEL_21;
      }
    }
    unint64_t add_explicit = (unint64_t)v16;
LABEL_21:
    if (v16 == (atomic_ullong *)add_explicit || a3 == (void *)add_explicit) {
      break;
    }
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = v13;
    *(unsigned char *)(a4 + 16) = 0;
  }
  unint64_t add = atomic_fetch_add((atomic_ullong *volatile)(a1 + 24), 1uLL);
  *(void *)a4 = a3;
  *(void *)(a4 + 8) = v13;
  *(unsigned char *)(a4 + 16) = 1;
  unint64_t v22 = *(void *)(a1 + 8);
  __dmb(0xBu);
  if ((float)((float)add / (float)v22) > *(float *)(a1 + 44))
  {
    do
    {
      unint64_t v23 = v22;
      atomic_compare_exchange_strong((atomic_ullong *volatile)(a1 + 8), &v23, 2 * v22);
    }
    while (v23 != v22 && atomic_fetch_add_explicit((atomic_ullong *volatile)(a1 + 8), 0, memory_order_relaxed) == v22);
  }
}

void sub_2171E9AEC(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v5 = *(void *)(a1 + 8);
  __dmb(0xBu);
  unint64_t v6 = a2 % v5;
  unint64_t v7 = sub_216851020(a2 % v5);
  unint64_t v8 = v6 - ((1 << v7) & 0xFFFFFFFFFFFFFFFELL);
  unint64_t v9 = a1 + 8 * v7;
  uint64_t v11 = *(void *)(v9 + 48);
  unint64_t v10 = (uint64_t *)(v9 + 48);
  __dmb(0xBu);
  if (!v11 || (uint64_t v12 = *v10, __dmb(0xBu), !*(void *)(v12 + 8 * v8))) {
    sub_2171E9BE0(a1, (atomic_ullong *)v6);
  }
  uint64_t v13 = *v10;
  __dmb(0xBu);
  *a3 = *(void *)(v13 + 8 * v8);
}

uint64_t sub_2171E9B84(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v5 = tbb::internal::allocate_via_handler_v3((tbb::internal *)0x18);
  sub_216981010((_DWORD *)(v5 + 8), a3);
  sub_21698105C((_DWORD *)(v5 + 12), a3 + 1);
  *(void *)(v5 + 16) = a2;
  *(void *)uint64_t v5 = 0;
  return v5;
}

void sub_2171E9BE0(uint64_t a1, atomic_ullong *a2)
{
  unint64_t v4 = sub_21691BC60(a1, (unint64_t)a2);
  if (!sub_21691BCEC(a1, v4)) {
    sub_2171E9BE0(a1, v4);
  }
  unint64_t v5 = sub_216851020(v4);
  uint64_t v6 = *(void *)(a1 + 8 * v5 + 48);
  __dmb(0xBu);
  uint64_t v11 = *(atomic_ullong **)(v6 + 8 * (v4 - ((1 << v5) & 0x1FFFFFFFFFFFFFFELL)));
  uint64_t v12 = 0;
  uint64_t v13 = a2;
  unint64_t v7 = &v13;
  for (uint64_t i = 7; i != -1; --i)
  {
    int v9 = *(unsigned __int8 *)v7;
    unint64_t v7 = (atomic_ullong **)((char *)v7 + 1);
    *((unsigned char *)&v12 + i) = byte_217457512[v9];
  }
  sub_2171E9CC4(a1 + 16, &v11, v12 & 0xFFFFFFFFFFFFFFFELL, &v13);
  unint64_t v10 = v13;
  sub_216912714(a1, (unint64_t)a2, &v10);
}

tbb::internal *sub_2171E9CC4@<X0>(uint64_t a1@<X0>, atomic_ullong **a2@<X1>, unint64_t a3@<X2>, atomic_ullong **a4@<X8>)
{
  uint64_t i = (atomic_ullong *)**a2;
  uint64_t result = (tbb::internal *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x18);
  *((void *)result + 2) = a3;
  *(void *)uint64_t result = 0;
  if (i) {
    goto LABEL_2;
  }
LABEL_3:
  while (1)
  {
    uint64_t v11 = *a2;
    *(void *)uint64_t result = i;
    while (1)
    {
      uint64_t v12 = i;
      atomic_compare_exchange_strong(v11, (unint64_t *)&v12, (unint64_t)result);
      if (v12 == i) {
        break;
      }
      unint64_t add_explicit = atomic_fetch_add_explicit(v11, 0, memory_order_relaxed);
      if ((atomic_ullong *)add_explicit != i) {
        goto LABEL_8;
      }
    }
    unint64_t add_explicit = (unint64_t)i;
LABEL_8:
    if (i == (atomic_ullong *)add_explicit || result == (tbb::internal *)add_explicit) {
      break;
    }
    for (uint64_t i = *a2; ; *a2 = i)
    {
      uint64_t i = (atomic_ullong *)*i;
      if (!i) {
        break;
      }
LABEL_2:
      unint64_t v10 = i[2];
      if (v10 > a3) {
        goto LABEL_3;
      }
      if (v10 == a3)
      {
        uint64_t result = (tbb::internal *)sub_2171E8568(a1, result);
        goto LABEL_17;
      }
    }
  }
  uint64_t i = (atomic_ullong *)result;
LABEL_17:
  *a4 = i;
  return result;
}

void sub_2171E9D98(_DWORD *a1, unsigned int a2)
{
  unint64_t v4 = malloc(464 * a2);
  uint64_t v5 = (uint64_t)a1;
  if (a1[1857] >= 0x11u) {
    uint64_t v5 = *(void *)a1;
  }
  sub_2171E9E20(v5, v5 + 464 * a1[1856], (uint64_t)v4);
  sub_2171AB058(a1);
  if (a1[1857] >= 0x11u) {
    free(*(void **)a1);
  }
  *(void *)a1 = v4;
  a1[1857] = a2;
}

uint64_t sub_2171E9E20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 == a2) {
    return a1;
  }
  uint64_t v5 = a2;
  uint64_t v6 = 0;
  do
  {
    sub_21697D878((_DWORD *)(a3 + v6), (_DWORD *)(a1 + v6));
    sub_21697D8B4((_DWORD *)(a3 + v6 + 4), (_DWORD *)(a1 + v6 + 4));
    sub_2171E9F04(a3 + v6 + 8, a1 + v6 + 8);
    v6 += 464;
  }
  while (a1 + v6 != v5);
  return v5;
}

void sub_2171E9EC0(void *a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v4);
  sub_21732550C(v3, a1, a2, v2);
  __cxa_rethrow();
}

void sub_2171E9EF0(_Unwind_Exception *a1)
{
}

uint64_t sub_2171E9F04(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 448) = 0x800000000;
  unsigned int v4 = *(_DWORD *)(a2 + 448);
  if (v4 < 9)
  {
    if (*(_DWORD *)(a2 + 452) >= 9u) {
      uint64_t v5 = *(void *)a2;
    }
    else {
      uint64_t v5 = a2;
    }
    sub_2171AE7A0(v5, v5 + 56 * v4, a1);
    sub_2171AA954(a2);
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(_DWORD *)(a1 + 452) = *(_DWORD *)(a2 + 452);
    *(_DWORD *)(a2 + 452) = 8;
  }
  int v6 = *(_DWORD *)(a1 + 448);
  *(_DWORD *)(a1 + 448) = *(_DWORD *)(a2 + 448);
  *(_DWORD *)(a2 + 448) = v6;
  return a1;
}

uint64_t sub_2171E9F98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a3 + v7;
      sub_2169C487C((int *)(a4 + v7 - 464), (_DWORD *)(a3 + v7 - 464));
      sub_2169C48D4((int *)(a4 + v7 - 460), (_DWORD *)(a3 + v7 - 460));
      if (a4 != a3)
      {
        if (*(_DWORD *)(v8 - 4) >= 9u) {
          uint64_t v9 = *(void *)(v8 - 456);
        }
        else {
          uint64_t v9 = v8 - 456;
        }
        sub_2171E02B0(a4 + v7 - 456, v9, v9 + 56 * *(unsigned int *)(v8 - 8));
      }
      v7 -= 464;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

uint64_t sub_2171EA04C(uint64_t a1, void *a2, void *a3)
{
  if (*a2 == *a3) {
    return sub_2171DE8DC(a2 + 1, (uint64_t)(a3 + 1));
  }
  else {
    return 0;
  }
}

void *sub_2171EA088(void *a1, unsigned int *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  char v17 = 1;
  uint64_t v16 = v5 + ((unint64_t)(v5 + v4 + (v5 + v4) * (v5 + v4)) >> 1);
  sub_2171E40F0((uint64_t)&v16, (uint64_t)(a2 + 2));
  int8x8_t v6 = (int8x8_t)a1[1];
  if (!*(void *)&v6) {
    return 0;
  }
  unint64_t v7 = bswap64(0x9E3779B97F4A7C55 * v16);
  uint8x8_t v8 = (uint8x8_t)vcnt_s8(v6);
  v8.i16[0] = vaddlv_u8(v8);
  unint64_t v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    unint64_t v10 = v7;
    if (v7 >= *(void *)&v6) {
      unint64_t v10 = v7 % *(void *)&v6;
    }
  }
  else
  {
    unint64_t v10 = (*(void *)&v6 - 1) & v7;
  }
  uint64_t v11 = *(void **)(*a1 + 8 * v10);
  if (!v11) {
    return 0;
  }
  uint64_t v12 = (void *)*v11;
  if (*v11)
  {
    uint64_t v13 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v14 = v12[1];
      if (v14 == v7)
      {
        if (sub_2171EA04C(v13, v12 + 2, a2)) {
          return v12;
        }
      }
      else
      {
        if (v9 > 1)
        {
          if (v14 >= *(void *)&v6) {
            v14 %= *(void *)&v6;
          }
        }
        else
        {
          v14 &= *(void *)&v6 - 1;
        }
        if (v14 != v10) {
          return 0;
        }
      }
      uint64_t v12 = (void *)*v12;
    }
    while (v12);
  }
  return v12;
}

_DWORD *sub_2171EA1C8(_DWORD *a1)
{
  sub_217199B64((uint64_t)(a1 + 2));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);

  return sub_21697C414(a1);
}

void sub_2171EA210(uint64_t *a1)
{
  if ((unint64_t)(a1[1] - *a1) >= 0x1FC1)
  {
    uint64_t v2 = a1 + 3;
    if (!a1[3])
    {
      uint64_t v3 = operator new(0x28uLL);
      *uint64_t v3 = 0u;
      v3[1] = 0u;
      *((_DWORD *)v3 + 8) = 1065353216;
      sub_21678A04C((uint64_t)v3, 0x80uLL);
      sub_2171E8C58(v2, (uint64_t)v3);
      uint64_t v4 = *a1;
      if (a1[1] != *a1)
      {
        uint64_t v5 = 0;
        unint64_t v6 = 0;
        do
        {
          uint64_t v7 = a1[3];
          uint8x8_t v8 = (_DWORD *)(v4 + v5);
          sub_2171EAB94(v7, (unsigned int *)(v4 + v5), (uint64_t)&unk_2174BFD90, &v8)[10] = v6++;
          uint64_t v4 = *a1;
          v5 += 64;
        }
        while (v6 < (a1[1] - *a1) >> 6);
      }
    }
  }
}

void sub_2171EA2E4(_Unwind_Exception *a1)
{
  uint64_t v3 = (void *)sub_2171E8C98(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void *sub_2171EA2FC(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  char v26 = 1;
  uint64_t v25 = (void *)(v8 + ((unint64_t)(v8 + v7 + (v8 + v7) * (v8 + v7)) >> 1));
  sub_2171E40F0((uint64_t)&v25, (uint64_t)(a2 + 2));
  unint64_t v9 = bswap64(0x9E3779B97F4A7C55 * (void)v25);
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
    uint64_t v13 = *(void **)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      unint64_t v14 = (void *)*v13;
      if (*v13)
      {
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v9)
          {
            if (sub_2171EA04C(a1 + 32, v14 + 2, a2)) {
              return v14;
            }
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10) {
                v15 %= v10;
              }
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v3) {
              break;
            }
          }
          unint64_t v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
  sub_2171EA5A8(a1, v9, a3, (uint64_t)&v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_21678A04C(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  unint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *uint64_t v25 = *v22;
    *unint64_t v22 = v25;
  }
  else
  {
    *uint64_t v25 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25;
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*v25)
    {
      unint64_t v23 = *(void *)(*v25 + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25;
    }
  }
  unint64_t v14 = v25;
  uint64_t v25 = 0;
  ++*(void *)(a1 + 24);
  sub_2171EA698((uint64_t)&v25, 0);
  return v14;
}

void sub_2171EA590(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2171EA698((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_2171EA5A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = operator new(0x58uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *uint64_t v8 = 0;
  v8[1] = a2;
  uint64_t result = sub_2171EA620((uint64_t)(v8 + 2), a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_2171EA608(_Unwind_Exception *a1)
{
  sub_2171EA698(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_2171EA620(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_216981010((_DWORD *)a1, (_DWORD *)a2);
  sub_21698105C(v4 + 1, (_DWORD *)(a2 + 4));
  sub_2171AA848((_DWORD *)(a1 + 8), a2 + 8);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  return a1;
}

void sub_2171EA678(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v2);
  sub_21697C414(v1);
  _Unwind_Resume(a1);
}

void sub_2171EA698(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(_DWORD **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_2171E8D18(v2 + 4);
    }
    operator delete(v2);
  }
}

uint64_t sub_2171EA6F0(uint64_t a1, _DWORD *a2, void *a3)
{
  unint64_t v6 = sub_216981010((_DWORD *)a1, a2);
  sub_21698105C(v6 + 1, a2 + 1);
  sub_2171AA848((_DWORD *)(a1 + 8), (uint64_t)(a2 + 2));
  *(void *)(a1 + 64) = *a3;
  return a1;
}

void sub_2171EA74C(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v2);
  sub_21697C414(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2171EA76C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_21697D878((_DWORD *)a1, (_DWORD *)a2);
  sub_21697D8B4(v4 + 1, (_DWORD *)(a2 + 4));
  sub_2171AA848((_DWORD *)(a1 + 8), a2 + 8);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  return a1;
}

void sub_2171EA7C4(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v2);
  sub_21697C414(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2171EA7E4(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3 = (a1[1] - *a1) >> 6;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 58) {
    sub_21677CB10();
  }
  uint64_t v6 = a1[2] - *a1;
  if (v6 >> 5 > v4) {
    unint64_t v4 = v6 >> 5;
  }
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFC0) {
    unint64_t v7 = 0x3FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v7 = v4;
  }
  unint64_t v15 = a1 + 2;
  if (v7) {
    uint64_t v8 = (char *)sub_2169B761C((uint64_t)(a1 + 2), v7);
  }
  else {
    uint64_t v8 = 0;
  }
  uint8x8_t v11 = v8;
  unint64_t v12 = &v8[64 * v3];
  unint64_t v14 = &v8[64 * v7];
  sub_2171EA8D4((uint64_t)(a1 + 2), v12, a2);
  uint64_t v13 = v12 + 64;
  sub_2171EA948(a1, &v11);
  uint64_t v9 = a1[1];
  sub_2171EAB18(&v11);
  return v9;
}

void sub_2171EA8C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2171EAB18((void **)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_2171EA8D4(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  return sub_2171AA848(a2 + 2, (uint64_t)(a3 + 2));
}

void sub_2171EA928(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v2);
  sub_21697C414(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2171EA948(uint64_t *a1, void *a2)
{
  uint64_t result = sub_2171EA9C0((uint64_t)(a1 + 2), a1[1], (_DWORD *)a1[1], *a1, (_DWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_2171EA9C0(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, _DWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  void v13[2] = &v16;
  char v14 = 0;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v9 = a3;
    do
    {
      v9 -= 16;
      sub_2171EA8D4(a1, (_DWORD *)(v7 - 64), v9);
      uint64_t v7 = *((void *)&v16 + 1) - 64;
      *((void *)&v16 + 1) -= 64;
    }
    while (v9 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  sub_2171EAA8C((uint64_t)v13);
  return v11;
}

void sub_2171EAA78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2171EAA8C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_2171EAAC4((uint64_t *)a1);
  }
  return a1;
}

uint64_t *sub_2171EAAC4(uint64_t *result)
{
  uint64_t v1 = *(_DWORD **)(result[2] + 8);
  uint64_t v2 = *(_DWORD **)(result[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *result;
    do
    {
      uint64_t result = (uint64_t *)sub_2171E8E40(v3, v1);
      v1 += 16;
    }
    while (v1 != v2);
  }
  return result;
}

void **sub_2171EAB18(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

_DWORD *sub_2171EAB4C(_DWORD *result)
{
  uint64_t v2 = *((void *)result + 1);
  uint64_t v1 = *((void *)result + 2);
  if (v1 != v2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = *((void *)v3 + 4);
      *((void *)v3 + 2) = v1 - 64;
      uint64_t result = sub_2171E8E40(v4, (_DWORD *)(v1 - 64));
      uint64_t v1 = *((void *)v3 + 2);
    }
    while (v1 != v2);
  }
  return result;
}

void *sub_2171EAB94(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  char v27 = 1;
  char v26 = (void *)(v9 + ((unint64_t)(v9 + v8 + (v9 + v8) * (v9 + v8)) >> 1));
  sub_2171E40F0((uint64_t)&v26, (uint64_t)(a2 + 2));
  unint64_t v10 = bswap64(0x9E3779B97F4A7C55 * (void)v26);
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
    char v14 = *(void **)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      long long v15 = (void *)*v14;
      if (*v14)
      {
        do
        {
          unint64_t v16 = v15[1];
          if (v16 == v10)
          {
            if (sub_2171EA04C(a1 + 32, v15 + 2, a2)) {
              return v15;
            }
          }
          else
          {
            if (v13 > 1)
            {
              if (v16 >= v11) {
                v16 %= v11;
              }
            }
            else
            {
              v16 &= v11 - 1;
            }
            if (v16 != v4) {
              break;
            }
          }
          long long v15 = (void *)*v15;
        }
        while (v15);
      }
    }
  }
  sub_2171EAE58(a1, v10, a4, (uint64_t)&v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    sub_21678A04C(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  unint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    void *v26 = *v23;
    *unint64_t v23 = v26;
  }
  else
  {
    void *v26 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*v26)
    {
      unint64_t v24 = *(void *)(*v26 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26;
    }
  }
  long long v15 = v26;
  char v26 = 0;
  ++*(void *)(a1 + 24);
  sub_2171EA698((uint64_t)&v26, 0);
  return v15;
}

void sub_2171EAE40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_2171EA698((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_2171EAE58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = operator new(0x58uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *uint64_t v8 = 0;
  v8[1] = a2;
  uint64_t result = sub_2171EAEC8((uint64_t)(v8 + 2), *a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_2171EAEB0(_Unwind_Exception *a1)
{
  sub_2171EA698(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_2171EAEC8(uint64_t a1, _DWORD *a2)
{
  unint64_t v4 = sub_216981010((_DWORD *)a1, a2);
  sub_21698105C(v4 + 1, a2 + 1);
  sub_2171AA848((_DWORD *)(a1 + 8), (uint64_t)(a2 + 2));
  *(void *)(a1 + 64) = 0;
  return a1;
}

void sub_2171EAF1C(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v2);
  sub_21697C414(v1);
  _Unwind_Resume(a1);
}

void sub_2171EAF3C(uint64_t a1@<X0>, unsigned int *a2@<X1>, void *a3@<X8>)
{
  unint64_t v5 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  uint64_t v14 = 0;
  long long v15 = (void *)v5;
  uint64_t v6 = (unsigned __int8 *)&v15;
  for (uint64_t i = 7; i != -1; --i)
  {
    int v8 = *v6++;
    *((unsigned char *)&v14 + i) = byte_217457512[v8];
  }
  uint64_t v9 = v14;
  uint64_t v10 = a1 + 16;
  sub_2171EB020(a1, v5, &v15);
  unint64_t v11 = v15;
  if (v15)
  {
    unint64_t v12 = v9 | 1;
    while (1)
    {
      unint64_t v13 = v11[73];
      if (v13 > v12) {
        break;
      }
      if (v13 == v12 && v11[1] == *(void *)a2) {
        goto LABEL_11;
      }
      unint64_t v11 = (void *)*v11;
      if (!v11) {
        goto LABEL_9;
      }
    }
    unint64_t v11 = 0;
LABEL_11:
    *a3 = v11;
  }
  else
  {
LABEL_9:
    *a3 = 0;
  }
  a3[1] = v10;
}

void sub_2171EB020(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v5 = *(void *)(a1 + 8);
  __dmb(0xBu);
  unint64_t v6 = a2 % v5;
  unint64_t v7 = sub_216851020(a2 % v5);
  unint64_t v8 = v6 - ((1 << v7) & 0xFFFFFFFFFFFFFFFELL);
  unint64_t v9 = a1 + 8 * v7;
  uint64_t v11 = *(void *)(v9 + 48);
  uint64_t v10 = (uint64_t *)(v9 + 48);
  __dmb(0xBu);
  if (!v11 || (uint64_t v12 = *v10, __dmb(0xBu), !*(void *)(v12 + 8 * v8))) {
    sub_2171EB0B8(a1, (atomic_ullong *)v6);
  }
  uint64_t v13 = *v10;
  __dmb(0xBu);
  *a3 = *(void *)(v13 + 8 * v8);
}

void sub_2171EB0B8(uint64_t a1, atomic_ullong *a2)
{
  unint64_t v4 = sub_21691BC60(a1, (unint64_t)a2);
  if (!sub_21691BCEC(a1, v4)) {
    sub_2171EB0B8(a1, v4);
  }
  unint64_t v5 = sub_216851020(v4);
  uint64_t v6 = *(void *)(a1 + 8 * v5 + 48);
  __dmb(0xBu);
  uint64_t v11 = *(atomic_ullong **)(v6 + 8 * (v4 - ((1 << v5) & 0x1FFFFFFFFFFFFFFELL)));
  uint64_t v12 = 0;
  uint64_t v13 = a2;
  unint64_t v7 = &v13;
  for (uint64_t i = 7; i != -1; --i)
  {
    int v9 = *(unsigned __int8 *)v7;
    unint64_t v7 = (atomic_ullong **)((char *)v7 + 1);
    *((unsigned char *)&v12 + i) = byte_217457512[v9];
  }
  sub_2171EB19C(a1 + 16, &v11, v12 & 0xFFFFFFFFFFFFFFFELL, &v13);
  uint64_t v10 = v13;
  sub_216912714(a1, (unint64_t)a2, &v10);
}

tbb::internal *sub_2171EB19C@<X0>(uint64_t a1@<X0>, atomic_ullong **a2@<X1>, unint64_t a3@<X2>, atomic_ullong **a4@<X8>)
{
  uint64_t i = (atomic_ullong *)**a2;
  uint64_t result = (tbb::internal *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x250);
  *((void *)result + 73) = a3;
  *(void *)uint64_t result = 0;
  if (i) {
    goto LABEL_2;
  }
LABEL_3:
  while (1)
  {
    uint64_t v11 = *a2;
    *(void *)uint64_t result = i;
    while (1)
    {
      uint64_t v12 = i;
      atomic_compare_exchange_strong(v11, (unint64_t *)&v12, (unint64_t)result);
      if (v12 == i) {
        break;
      }
      unint64_t add_explicit = atomic_fetch_add_explicit(v11, 0, memory_order_relaxed);
      if ((atomic_ullong *)add_explicit != i) {
        goto LABEL_8;
      }
    }
    unint64_t add_explicit = (unint64_t)i;
LABEL_8:
    if (i == (atomic_ullong *)add_explicit || result == (tbb::internal *)add_explicit) {
      break;
    }
    for (uint64_t i = *a2; ; *a2 = i)
    {
      uint64_t i = (atomic_ullong *)*i;
      if (!i) {
        break;
      }
LABEL_2:
      unint64_t v10 = i[73];
      if (v10 > a3) {
        goto LABEL_3;
      }
      if (v10 == a3)
      {
        uint64_t result = (tbb::internal *)sub_2171E89BC(a1, result);
        goto LABEL_17;
      }
    }
  }
  uint64_t i = (atomic_ullong *)result;
LABEL_17:
  *a4 = i;
  return result;
}

_DWORD *sub_2171EB270(_DWORD *a1, void *a2)
{
  sub_2171E84B0((uint64_t)(a1 + 2), a2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);

  return sub_21697C414(a1);
}

void sub_2171EB2B8(uint64_t a1@<X0>, unsigned int *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v8 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  uint64_t v24 = 0;
  uint64_t v25 = (atomic_ullong *)v8;
  int v9 = &v25;
  for (uint64_t i = 7; i != -1; --i)
  {
    int v11 = *(unsigned __int8 *)v9;
    int v9 = (atomic_ullong **)((char *)v9 + 1);
    *((unsigned char *)&v24 + i) = byte_217457512[v11];
  }
  unint64_t v12 = v24 | 1;
  sub_2171E9374(a1, v8, &v25);
  uint64_t v13 = a1 + 16;
  if (a3)
  {
    a3[73] = v12;
    *a3 = 0;
  }
  uint64_t v14 = a2;
  while (1)
  {
    long long v15 = v25;
    unint64_t v16 = (atomic_ullong *)*v25;
    if (*v25)
    {
      unint64_t v17 = v16[73];
      while (1)
      {
        float v18 = v16;
        if (v17 > v12) {
          break;
        }
        if (v17 == v12 && v16[1] == *v14)
        {
          if (a3) {
            sub_2171E86A4(a1 + 16, (tbb::internal *)a3);
          }
          *(void *)a4 = v16;
          *(void *)(a4 + 8) = v13;
          *(unsigned char *)(a4 + 16) = 0;
          return;
        }
        uint64_t v25 = v16;
        unint64_t v16 = (atomic_ullong *)*v16;
        if (!*v18)
        {
          long long v15 = v18;
          break;
        }
        unint64_t v17 = v16[73];
        long long v15 = v18;
      }
    }
    if (!a3)
    {
      a3 = sub_2171EB4AC(a1 + 16, v12, (uint64_t)a2);
      uint64_t v14 = a3 + 1;
      long long v15 = v25;
    }
    *a3 = v16;
    while (1)
    {
      BOOL v19 = v16;
      atomic_compare_exchange_strong(v15, (unint64_t *)&v19, (unint64_t)a3);
      if (v19 == v16) {
        break;
      }
      unint64_t add_explicit = atomic_fetch_add_explicit(v15, 0, memory_order_relaxed);
      if ((atomic_ullong *)add_explicit != v16) {
        goto LABEL_21;
      }
    }
    unint64_t add_explicit = (unint64_t)v16;
LABEL_21:
    if (v16 == (atomic_ullong *)add_explicit || a3 == (void *)add_explicit) {
      break;
    }
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = v13;
    *(unsigned char *)(a4 + 16) = 0;
  }
  unint64_t add = atomic_fetch_add((atomic_ullong *volatile)(a1 + 24), 1uLL);
  *(void *)a4 = a3;
  *(void *)(a4 + 8) = v13;
  *(unsigned char *)(a4 + 16) = 1;
  unint64_t v22 = *(void *)(a1 + 8);
  __dmb(0xBu);
  if ((float)((float)add / (float)v22) > *(float *)(a1 + 44))
  {
    do
    {
      unint64_t v23 = v22;
      atomic_compare_exchange_strong((atomic_ullong *volatile)(a1 + 8), &v23, 2 * v22);
    }
    while (v23 != v22 && atomic_fetch_add_explicit((atomic_ullong *volatile)(a1 + 8), 0, memory_order_relaxed) == v22);
  }
}

void *sub_2171EB4AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = (void *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x250);
  sub_2171EB524((uint64_t)(v5 + 1), a3);
  v5[73] = a2;
  void *v5 = 0;
  return v5;
}

void sub_2171EB4FC(void *a1)
{
  __cxa_begin_catch(a1);
  tbb::internal::deallocate_via_handler_v3(v1, v2);
  __cxa_rethrow();
}

void sub_2171EB510(_Unwind_Exception *a1)
{
}

uint64_t sub_2171EB524(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_216981010((_DWORD *)a1, (_DWORD *)a2);
  sub_21698105C(v4 + 1, (_DWORD *)(a2 + 4));
  sub_2171EB584(a1 + 8, (__int16 *)(a2 + 8));
  *(unsigned char *)(a1 + 568) = *(unsigned char *)(a2 + 568);
  return a1;
}

void sub_2171EB570(_Unwind_Exception *a1)
{
  sub_21697B754(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2171EB584(uint64_t a1, __int16 *a2)
{
  *(_WORD *)a1 = *a2;
  *(void *)(a1 + 24) = 0;
  unint64_t v4 = (void *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x18);
  _OWORD v4[2] = 0;
  void *v4 = 0;
  *(void *)(a1 + 32) = v4;
  *(_DWORD *)(a1 + 44) = 1082130432;
  __dmb(0xBu);
  *(void *)(a1 + 8) = 8;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  uint64_t v6 = *(void *)(a1 + 32);
  sub_216912714(a1, 0, &v6);
  sub_2171EB664((__int16 *)a1, a2);
  return a1;
}

void sub_2171EB650(_Unwind_Exception *a1)
{
  sub_2171E84E4(v1 + 16);
  _Unwind_Resume(a1);
}

float sub_2171EB664(__int16 *a1, __int16 *a2)
{
  if (a1 != a2)
  {
    uint64_t v2 = 0;
    __int16 v3 = *a1;
    *a1 = *a2;
    *a2 = v3;
    uint64_t v4 = *((void *)a1 + 3);
    uint64_t v5 = *((void *)a1 + 4);
    uint64_t v6 = *((void *)a2 + 4);
    *((void *)a1 + 3) = *((void *)a2 + 3);
    *((void *)a1 + 4) = v6;
    *((void *)a2 + 3) = v4;
    *((void *)a2 + 4) = v5;
    unint64_t v7 = a2 + 24;
    unint64_t v8 = a1 + 24;
    do
    {
      uint64_t v9 = *(void *)&v8[v2];
      __dmb(0xBu);
      uint64_t v10 = *(void *)&v7[v2];
      __dmb(0xBu);
      *(void *)&v8[v2] = v10;
      __dmb(0xBu);
      *(void *)&v7[v2] = v9;
      v2 += 4;
    }
    while (v2 != 256);
    uint64_t v14 = *((void *)a1 + 1);
    uint64_t v11 = *((void *)a2 + 1);
    __dmb(0xBu);
    *((void *)a1 + 1) = v11;
    uint64_t v12 = v14;
    __dmb(0xBu);
    *((void *)a2 + 1) = v12;
    float result = *((float *)a1 + 11);
    *((_DWORD *)a1 + 11) = *((_DWORD *)a2 + 11);
    *((float *)a2 + 11) = result;
  }
  return result;
}

uint64_t sub_2171EB6FC(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v6 = sub_216981010((_DWORD *)a1, a2);
  sub_21698105C(v6 + 1, a2 + 1);
  sub_2171EB584(a1 + 8, (__int16 *)a3);
  *(unsigned char *)(a1 + 568) = *(unsigned char *)(a3 + 560);
  return a1;
}

void sub_2171EB754(_Unwind_Exception *a1)
{
  sub_21697B754(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2171EB768(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_21697D878((_DWORD *)a1, (_DWORD *)a2);
  sub_21697D8B4(v4 + 1, (_DWORD *)(a2 + 4));
  sub_2171EB584(a1 + 8, (__int16 *)(a2 + 8));
  *(unsigned char *)(a1 + 568) = *(unsigned char *)(a2 + 568);
  return a1;
}

void sub_2171EB7B4(_Unwind_Exception *a1)
{
  sub_21697B754(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_2171EB7C8(_DWORD *a1, void *a2)
{
  sub_2171E8904((uint64_t)(a1 + 2), a2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);

  return sub_21697C414(a1);
}

void sub_2171EB810(uint64_t a1@<X0>, unsigned int *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v8 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  uint64_t v24 = 0;
  uint64_t v25 = (atomic_ullong *)v8;
  uint64_t v9 = &v25;
  for (uint64_t i = 7; i != -1; --i)
  {
    int v11 = *(unsigned __int8 *)v9;
    uint64_t v9 = (atomic_ullong **)((char *)v9 + 1);
    *((unsigned char *)&v24 + i) = byte_217457512[v11];
  }
  unint64_t v12 = v24 | 1;
  sub_2171E96A8(a1, v8, &v25);
  uint64_t v13 = a1 + 16;
  if (a3)
  {
    a3[72] = v12;
    *a3 = 0;
  }
  uint64_t v14 = a2;
  while (1)
  {
    long long v15 = v25;
    unint64_t v16 = (atomic_ullong *)*v25;
    if (*v25)
    {
      unint64_t v17 = v16[72];
      while (1)
      {
        float v18 = v16;
        if (v17 > v12) {
          break;
        }
        if (v17 == v12 && v16[1] == *v14)
        {
          if (a3) {
            sub_2171E8830(a1 + 16, (tbb::internal *)a3);
          }
          *(void *)a4 = v16;
          *(void *)(a4 + 8) = v13;
          *(unsigned char *)(a4 + 16) = 0;
          return;
        }
        uint64_t v25 = v16;
        unint64_t v16 = (atomic_ullong *)*v16;
        if (!*v18)
        {
          long long v15 = v18;
          break;
        }
        unint64_t v17 = v16[72];
        long long v15 = v18;
      }
    }
    if (!a3)
    {
      a3 = (void *)sub_2171EBA04(a1 + 16, v12, (uint64_t)a2);
      uint64_t v14 = a3 + 1;
      long long v15 = v25;
    }
    *a3 = v16;
    while (1)
    {
      BOOL v19 = v16;
      atomic_compare_exchange_strong(v15, (unint64_t *)&v19, (unint64_t)a3);
      if (v19 == v16) {
        break;
      }
      unint64_t add_explicit = atomic_fetch_add_explicit(v15, 0, memory_order_relaxed);
      if ((atomic_ullong *)add_explicit != v16) {
        goto LABEL_21;
      }
    }
    unint64_t add_explicit = (unint64_t)v16;
LABEL_21:
    if (v16 == (atomic_ullong *)add_explicit || a3 == (void *)add_explicit) {
      break;
    }
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = v13;
    *(unsigned char *)(a4 + 16) = 0;
  }
  unint64_t add = atomic_fetch_add((atomic_ullong *volatile)(a1 + 24), 1uLL);
  *(void *)a4 = a3;
  *(void *)(a4 + 8) = v13;
  *(unsigned char *)(a4 + 16) = 1;
  unint64_t v22 = *(void *)(a1 + 8);
  __dmb(0xBu);
  if ((float)((float)add / (float)v22) > *(float *)(a1 + 44))
  {
    do
    {
      unint64_t v23 = v22;
      atomic_compare_exchange_strong((atomic_ullong *volatile)(a1 + 8), &v23, 2 * v22);
    }
    while (v23 != v22 && atomic_fetch_add_explicit((atomic_ullong *volatile)(a1 + 8), 0, memory_order_relaxed) == v22);
  }
}

uint64_t sub_2171EBA04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = tbb::internal::allocate_via_handler_v3((tbb::internal *)0x248);
  sub_2171EBA7C((_DWORD *)(v5 + 8), a3);
  *(void *)(v5 + 576) = a2;
  *(void *)uint64_t v5 = 0;
  return v5;
}

void sub_2171EBA54(void *a1)
{
  __cxa_begin_catch(a1);
  tbb::internal::deallocate_via_handler_v3(v1, v2);
  __cxa_rethrow();
}

void sub_2171EBA68(_Unwind_Exception *a1)
{
}

_DWORD *sub_2171EBA7C(_DWORD *a1, uint64_t a2)
{
  uint64_t v4 = sub_216981010(a1, (_DWORD *)a2);
  sub_21698105C(v4 + 1, (_DWORD *)(a2 + 4));
  sub_2171EBAD4((uint64_t)(a1 + 2), (__int16 *)(a2 + 8));
  return a1;
}

void sub_2171EBAC0(_Unwind_Exception *a1)
{
  sub_21697B754(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2171EBAD4(uint64_t a1, __int16 *a2)
{
  *(_WORD *)a1 = *a2;
  *(void *)(a1 + 24) = 0;
  uint64_t v4 = (void *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x250);
  v4[73] = 0;
  void *v4 = 0;
  *(void *)(a1 + 32) = v4;
  *(_DWORD *)(a1 + 44) = 1082130432;
  __dmb(0xBu);
  *(void *)(a1 + 8) = 8;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  uint64_t v6 = *(void *)(a1 + 32);
  sub_216912714(a1, 0, &v6);
  sub_2171EB664((__int16 *)a1, a2);
  return a1;
}

void sub_2171EBBA0(_Unwind_Exception *a1)
{
  sub_2171E8938(v1 + 16);
  _Unwind_Resume(a1);
}

uint64_t sub_2171EBBB4(uint64_t a1, unint64_t a2, _WORD *a3)
{
  *(_WORD *)a1 = *a3;
  *(void *)(a1 + 24) = 0;
  uint64_t v5 = (void *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x250);
  v5[73] = 0;
  void *v5 = 0;
  *(void *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 44) = 1082130432;
  if (a2 <= 1) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = a2;
  }
  unint64_t v7 = 2 * v6 - 1;
  BOOL v8 = HIDWORD(v7) != 0;
  __dmb(0xBu);
  if (HIDWORD(v7)) {
    v7 >>= 32;
  }
  char v9 = 32 * v8;
  if (v7 >= 0x10000)
  {
    v7 >>= 16;
    char v9 = (32 * v8) | 0x10;
  }
  if (v7 >= 0x100)
  {
    v7 >>= 8;
    v9 |= 8u;
  }
  if (v7 >= 0x10)
  {
    v7 >>= 4;
    v9 |= 4u;
  }
  if (v7 >= 4)
  {
    v7 >>= 2;
    v9 += 2;
  }
  *(void *)(a1 + 8) = 1 << (((v7 & 2) != 0) + v9);
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  uint64_t v11 = *(void *)(a1 + 32);
  sub_216912714(a1, 0, &v11);
  return a1;
}

void sub_2171EBCF8(_Unwind_Exception *a1)
{
  sub_2171E8938(v1 + 16);
  _Unwind_Resume(a1);
}

_DWORD *sub_2171EBD0C(_DWORD *a1, _DWORD *a2, __int16 *a3)
{
  uint64_t v6 = sub_216981010(a1, a2);
  sub_21698105C(v6 + 1, a2 + 1);
  sub_2171EBAD4((uint64_t)(a1 + 2), a3);
  return a1;
}

void sub_2171EBD5C(_Unwind_Exception *a1)
{
  sub_21697B754(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_2171EBD70(_DWORD *a1, uint64_t a2)
{
  uint64_t v4 = sub_21697D878(a1, (_DWORD *)a2);
  sub_21697D8B4(v4 + 1, (_DWORD *)(a2 + 4));
  sub_2171EBAD4((uint64_t)(a1 + 2), (__int16 *)(a2 + 8));
  return a1;
}

void sub_2171EBDB4(_Unwind_Exception *a1)
{
  sub_21697B754(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_2171EBDC8(_DWORD *a1, void *a2)
{
  sub_2171E8A90((uint64_t)(a1 + 2), a2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);

  return sub_21697C414(a1);
}

void sub_2171EBE10(uint64_t a1@<X0>, unsigned int *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v8 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  uint64_t v24 = 0;
  uint64_t v25 = (atomic_ullong *)v8;
  char v9 = &v25;
  for (uint64_t i = 7; i != -1; --i)
  {
    int v11 = *(unsigned __int8 *)v9;
    char v9 = (atomic_ullong **)((char *)v9 + 1);
    *((unsigned char *)&v24 + i) = byte_217457512[v11];
  }
  unint64_t v12 = v24 | 1;
  sub_2171EB020(a1, v8, &v25);
  uint64_t v13 = a1 + 16;
  if (a3)
  {
    a3[73] = v12;
    *a3 = 0;
  }
  uint64_t v14 = a2;
  while (1)
  {
    long long v15 = v25;
    unint64_t v16 = (atomic_ullong *)*v25;
    if (*v25)
    {
      unint64_t v17 = v16[73];
      while (1)
      {
        float v18 = v16;
        if (v17 > v12) {
          break;
        }
        if (v17 == v12 && v16[1] == *v14)
        {
          if (a3) {
            sub_2171E89BC(a1 + 16, (tbb::internal *)a3);
          }
          *(void *)a4 = v16;
          *(void *)(a4 + 8) = v13;
          *(unsigned char *)(a4 + 16) = 0;
          return;
        }
        uint64_t v25 = v16;
        unint64_t v16 = (atomic_ullong *)*v16;
        if (!*v18)
        {
          long long v15 = v18;
          break;
        }
        unint64_t v17 = v16[73];
        long long v15 = v18;
      }
    }
    if (!a3)
    {
      a3 = sub_2171EC004(a1 + 16, v12, (uint64_t)a2);
      uint64_t v14 = a3 + 1;
      long long v15 = v25;
    }
    *a3 = v16;
    while (1)
    {
      BOOL v19 = v16;
      atomic_compare_exchange_strong(v15, (unint64_t *)&v19, (unint64_t)a3);
      if (v19 == v16) {
        break;
      }
      unint64_t add_explicit = atomic_fetch_add_explicit(v15, 0, memory_order_relaxed);
      if ((atomic_ullong *)add_explicit != v16) {
        goto LABEL_21;
      }
    }
    unint64_t add_explicit = (unint64_t)v16;
LABEL_21:
    if (v16 == (atomic_ullong *)add_explicit || a3 == (void *)add_explicit) {
      break;
    }
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = v13;
    *(unsigned char *)(a4 + 16) = 0;
  }
  unint64_t add = atomic_fetch_add((atomic_ullong *volatile)(a1 + 24), 1uLL);
  *(void *)a4 = a3;
  *(void *)(a4 + 8) = v13;
  *(unsigned char *)(a4 + 16) = 1;
  unint64_t v22 = *(void *)(a1 + 8);
  __dmb(0xBu);
  if ((float)((float)add / (float)v22) > *(float *)(a1 + 44))
  {
    do
    {
      unint64_t v23 = v22;
      atomic_compare_exchange_strong((atomic_ullong *volatile)(a1 + 8), &v23, 2 * v22);
    }
    while (v23 != v22 && atomic_fetch_add_explicit((atomic_ullong *volatile)(a1 + 8), 0, memory_order_relaxed) == v22);
  }
}

void *sub_2171EC004(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x250);
  sub_2171EC07C((uint64_t)(v5 + 1), a3);
  v5[73] = a2;
  void *v5 = 0;
  return v5;
}

void sub_2171EC054(void *a1)
{
  __cxa_begin_catch(a1);
  tbb::internal::deallocate_via_handler_v3(v1, v2);
  __cxa_rethrow();
}

void sub_2171EC068(_Unwind_Exception *a1)
{
}

uint64_t sub_2171EC07C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_216981010((_DWORD *)a1, (_DWORD *)a2);
  sub_21698105C(v4 + 1, (_DWORD *)(a2 + 4));
  sub_2171EC0DC(a1 + 8, (__int16 *)(a2 + 8));
  *(unsigned char *)(a1 + 568) = *(unsigned char *)(a2 + 568);
  return a1;
}

void sub_2171EC0C8(_Unwind_Exception *a1)
{
  sub_21697B754(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2171EC0DC(uint64_t a1, __int16 *a2)
{
  *(_WORD *)a1 = *a2;
  *(void *)(a1 + 24) = 0;
  uint64_t v4 = (void *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x88);
  v4[16] = 0;
  void *v4 = 0;
  *(void *)(a1 + 32) = v4;
  *(_DWORD *)(a1 + 44) = 1082130432;
  __dmb(0xBu);
  *(void *)(a1 + 8) = 8;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  uint64_t v6 = *(void *)(a1 + 32);
  sub_216912714(a1, 0, &v6);
  sub_2171EB664((__int16 *)a1, a2);
  return a1;
}

void sub_2171EC1A8(_Unwind_Exception *a1)
{
  sub_2171E8AC4(v1 + 16);
  _Unwind_Resume(a1);
}

uint64_t sub_2171EC1BC(uint64_t a1, unint64_t a2, _WORD *a3)
{
  *(_WORD *)a1 = *a3;
  *(void *)(a1 + 24) = 0;
  uint64_t v5 = (void *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x88);
  v5[16] = 0;
  void *v5 = 0;
  *(void *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 44) = 1082130432;
  if (a2 <= 1) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = a2;
  }
  unint64_t v7 = 2 * v6 - 1;
  BOOL v8 = HIDWORD(v7) != 0;
  __dmb(0xBu);
  if (HIDWORD(v7)) {
    v7 >>= 32;
  }
  char v9 = 32 * v8;
  if (v7 >= 0x10000)
  {
    v7 >>= 16;
    char v9 = (32 * v8) | 0x10;
  }
  if (v7 >= 0x100)
  {
    v7 >>= 8;
    v9 |= 8u;
  }
  if (v7 >= 0x10)
  {
    v7 >>= 4;
    v9 |= 4u;
  }
  if (v7 >= 4)
  {
    v7 >>= 2;
    v9 += 2;
  }
  *(void *)(a1 + 8) = 1 << (((v7 & 2) != 0) + v9);
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  uint64_t v11 = *(void *)(a1 + 32);
  sub_216912714(a1, 0, &v11);
  return a1;
}

void sub_2171EC300(_Unwind_Exception *a1)
{
  sub_2171E8AC4(v1 + 16);
  _Unwind_Resume(a1);
}

uint64_t sub_2171EC314(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v6 = sub_216981010((_DWORD *)a1, a2);
  sub_21698105C(v6 + 1, a2 + 1);
  sub_2171EC0DC(a1 + 8, (__int16 *)a3);
  *(unsigned char *)(a1 + 568) = *(unsigned char *)(a3 + 560);
  return a1;
}

void sub_2171EC36C(_Unwind_Exception *a1)
{
  sub_21697B754(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2171EC380(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_21697D878((_DWORD *)a1, (_DWORD *)a2);
  sub_21697D8B4(v4 + 1, (_DWORD *)(a2 + 4));
  sub_2171EC0DC(a1 + 8, (__int16 *)(a2 + 8));
  *(unsigned char *)(a1 + 568) = *(unsigned char *)(a2 + 568);
  return a1;
}

void sub_2171EC3CC(_Unwind_Exception *a1)
{
  sub_21697B754(v1);
  _Unwind_Resume(a1);
}

void sub_2171EC3E0(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  unint64_t v5 = bswap64(0x9E3779B97F4A7C55 * (*a2 & 0xFFFFFFFFFFFFFFF8));
  uint64_t v14 = 0;
  long long v15 = (void *)v5;
  uint64_t v6 = (unsigned __int8 *)&v15;
  for (uint64_t i = 7; i != -1; --i)
  {
    int v8 = *v6++;
    *((unsigned char *)&v14 + i) = byte_217457512[v8];
  }
  uint64_t v9 = v14;
  uint64_t v10 = a1 + 16;
  sub_2171EC4C4(a1, v5, &v15);
  uint64_t v11 = v15;
  if (v15)
  {
    unint64_t v12 = v9 | 1;
    while (1)
    {
      unint64_t v13 = v11[16];
      if (v13 > v12) {
        break;
      }
      if (v13 == v12 && (v11[1] & 0xFFFFFFFFFFFFFFF8) == (*a2 & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_11;
      }
      uint64_t v11 = (void *)*v11;
      if (!v11) {
        goto LABEL_9;
      }
    }
    uint64_t v11 = 0;
LABEL_11:
    *a3 = v11;
  }
  else
  {
LABEL_9:
    *a3 = 0;
  }
  a3[1] = v10;
}

void sub_2171EC4C4(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v5 = *(void *)(a1 + 8);
  __dmb(0xBu);
  unint64_t v6 = a2 % v5;
  unint64_t v7 = sub_216851020(a2 % v5);
  unint64_t v8 = v6 - ((1 << v7) & 0xFFFFFFFFFFFFFFFELL);
  unint64_t v9 = a1 + 8 * v7;
  uint64_t v11 = *(void *)(v9 + 48);
  uint64_t v10 = (uint64_t *)(v9 + 48);
  __dmb(0xBu);
  if (!v11 || (uint64_t v12 = *v10, __dmb(0xBu), !*(void *)(v12 + 8 * v8))) {
    sub_2171EC55C(a1, (atomic_ullong *)v6);
  }
  uint64_t v13 = *v10;
  __dmb(0xBu);
  *a3 = *(void *)(v13 + 8 * v8);
}

void sub_2171EC55C(uint64_t a1, atomic_ullong *a2)
{
  unint64_t v4 = sub_21691BC60(a1, (unint64_t)a2);
  if (!sub_21691BCEC(a1, v4)) {
    sub_2171EC55C(a1, v4);
  }
  unint64_t v5 = sub_216851020(v4);
  uint64_t v6 = *(void *)(a1 + 8 * v5 + 48);
  __dmb(0xBu);
  uint64_t v11 = *(atomic_ullong **)(v6 + 8 * (v4 - ((1 << v5) & 0x1FFFFFFFFFFFFFFELL)));
  uint64_t v12 = 0;
  uint64_t v13 = a2;
  unint64_t v7 = &v13;
  for (uint64_t i = 7; i != -1; --i)
  {
    int v9 = *(unsigned __int8 *)v7;
    unint64_t v7 = (atomic_ullong **)((char *)v7 + 1);
    *((unsigned char *)&v12 + i) = byte_217457512[v9];
  }
  sub_2171EC640(a1 + 16, &v11, v12 & 0xFFFFFFFFFFFFFFFELL, &v13);
  uint64_t v10 = v13;
  sub_216912714(a1, (unint64_t)a2, &v10);
}

tbb::internal *sub_2171EC640@<X0>(uint64_t a1@<X0>, atomic_ullong **a2@<X1>, unint64_t a3@<X2>, atomic_ullong **a4@<X8>)
{
  uint64_t i = (atomic_ullong *)**a2;
  float result = (tbb::internal *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x88);
  *((void *)result + 16) = a3;
  *(void *)float result = 0;
  if (i) {
    goto LABEL_2;
  }
LABEL_3:
  while (1)
  {
    uint64_t v11 = *a2;
    *(void *)float result = i;
    while (1)
    {
      uint64_t v12 = i;
      atomic_compare_exchange_strong(v11, (unint64_t *)&v12, (unint64_t)result);
      if (v12 == i) {
        break;
      }
      unint64_t add_explicit = atomic_fetch_add_explicit(v11, 0, memory_order_relaxed);
      if ((atomic_ullong *)add_explicit != i) {
        goto LABEL_8;
      }
    }
    unint64_t add_explicit = (unint64_t)i;
LABEL_8:
    if (i == (atomic_ullong *)add_explicit || result == (tbb::internal *)add_explicit) {
      break;
    }
    for (uint64_t i = *a2; ; *a2 = i)
    {
      uint64_t i = (atomic_ullong *)*i;
      if (!i) {
        break;
      }
LABEL_2:
      unint64_t v10 = i[16];
      if (v10 > a3) {
        goto LABEL_3;
      }
      if (v10 == a3)
      {
        float result = (tbb::internal *)sub_2171E8B48(a1, result);
        goto LABEL_17;
      }
    }
  }
  uint64_t i = (atomic_ullong *)result;
LABEL_17:
  *a4 = i;
  return result;
}

void sub_2171EC714(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v8 = bswap64(0x9E3779B97F4A7C55 * (*a2 & 0xFFFFFFFFFFFFFFF8));
  uint64_t v24 = 0;
  uint64_t v25 = (atomic_ullong *)v8;
  int v9 = &v25;
  for (uint64_t i = 7; i != -1; --i)
  {
    int v11 = *(unsigned __int8 *)v9;
    int v9 = (atomic_ullong **)((char *)v9 + 1);
    *((unsigned char *)&v24 + i) = byte_217457512[v11];
  }
  unint64_t v12 = v24 | 1;
  sub_2171EC4C4(a1, v8, &v25);
  uint64_t v13 = a1 + 16;
  if (a3)
  {
    a3[16] = v12;
    *a3 = 0;
  }
  uint64_t v14 = a2;
  while (1)
  {
    long long v15 = v25;
    unint64_t v16 = (atomic_ullong *)*v25;
    if (*v25)
    {
      unint64_t v17 = v16[16];
      while (1)
      {
        float v18 = v16;
        if (v17 > v12) {
          break;
        }
        if (v17 == v12 && (v16[1] & 0xFFFFFFFFFFFFFFF8) == (*v14 & 0xFFFFFFFFFFFFFFF8))
        {
          if (a3) {
            sub_2171E8B48(a1 + 16, (tbb::internal *)a3);
          }
          *(void *)a4 = v16;
          *(void *)(a4 + 8) = v13;
          *(unsigned char *)(a4 + 16) = 0;
          return;
        }
        uint64_t v25 = v16;
        unint64_t v16 = (atomic_ullong *)*v16;
        if (!*v18)
        {
          long long v15 = v18;
          break;
        }
        unint64_t v17 = v16[16];
        long long v15 = v18;
      }
    }
    if (!a3)
    {
      a3 = sub_2171EC908(a1 + 16, v12, a2);
      uint64_t v14 = a3 + 1;
      long long v15 = v25;
    }
    *a3 = (uint64_t)v16;
    while (1)
    {
      BOOL v19 = v16;
      atomic_compare_exchange_strong(v15, (unint64_t *)&v19, (unint64_t)a3);
      if (v19 == v16) {
        break;
      }
      unint64_t add_explicit = atomic_fetch_add_explicit(v15, 0, memory_order_relaxed);
      if ((atomic_ullong *)add_explicit != v16) {
        goto LABEL_21;
      }
    }
    unint64_t add_explicit = (unint64_t)v16;
LABEL_21:
    if (v16 == (atomic_ullong *)add_explicit || a3 == (uint64_t *)add_explicit) {
      break;
    }
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = v13;
    *(unsigned char *)(a4 + 16) = 0;
  }
  unint64_t add = atomic_fetch_add((atomic_ullong *volatile)(a1 + 24), 1uLL);
  *(void *)a4 = a3;
  *(void *)(a4 + 8) = v13;
  *(unsigned char *)(a4 + 16) = 1;
  unint64_t v22 = *(void *)(a1 + 8);
  __dmb(0xBu);
  if ((float)((float)add / (float)v22) > *(float *)(a1 + 44))
  {
    do
    {
      unint64_t v23 = v22;
      atomic_compare_exchange_strong((atomic_ullong *volatile)(a1 + 8), &v23, 2 * v22);
    }
    while (v23 != v22 && atomic_fetch_add_explicit((atomic_ullong *volatile)(a1 + 8), 0, memory_order_relaxed) == v22);
  }
}

void *sub_2171EC908(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v5 = (void *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x88);
  sub_2171EC980((uint64_t)(v5 + 1), a3);
  v5[16] = a2;
  void *v5 = 0;
  return v5;
}

void sub_2171EC958(void *a1)
{
  __cxa_begin_catch(a1);
  tbb::internal::deallocate_via_handler_v3(v1, v2);
  __cxa_rethrow();
}

void sub_2171EC96C(_Unwind_Exception *a1)
{
}

uint64_t sub_2171EC980(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  sub_2171AA848((_DWORD *)(a1 + 8), (uint64_t)(a2 + 1));
  sub_2171AA848((_DWORD *)(a1 + 64), (uint64_t)(a2 + 8));
  return a1;
}

void sub_2171EC9F8(_Unwind_Exception *a1)
{
  sub_217199B64(v2);
  if ((*v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2171ECA2C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  sub_2171AA848((_DWORD *)(a1 + 8), a3);
  sub_2171AA848((_DWORD *)(a1 + 64), a3 + 56);
  return a1;
}

void sub_2171ECAA4(_Unwind_Exception *a1)
{
  sub_217199B64(v2);
  if ((*v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2171ECAD8(uint64_t a1, void *a2)
{
  *(void *)a1 = *a2;
  *a2 = 0;
  sub_2171AA848((_DWORD *)(a1 + 8), (uint64_t)(a2 + 1));
  sub_2171AA848((_DWORD *)(a1 + 64), (uint64_t)(a2 + 8));
  return a1;
}

void sub_2171ECB2C(_Unwind_Exception *a1)
{
  sub_217199B64(v2);
  if ((*v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void sub_2171ECB60(uint64_t a1@<X0>, unsigned int *a2@<X1>, void *a3@<X8>)
{
  unint64_t v5 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  uint64_t v14 = 0;
  long long v15 = (void *)v5;
  uint64_t v6 = (unsigned __int8 *)&v15;
  for (uint64_t i = 7; i != -1; --i)
  {
    int v8 = *v6++;
    *((unsigned char *)&v14 + i) = byte_217457512[v8];
  }
  uint64_t v9 = v14;
  uint64_t v10 = a1 + 16;
  sub_2171E9AEC(a1, v5, &v15);
  int v11 = v15;
  if (v15)
  {
    unint64_t v12 = v9 | 1;
    while (1)
    {
      unint64_t v13 = v11[2];
      if (v13 > v12) {
        break;
      }
      if (v13 == v12 && v11[1] == *(void *)a2) {
        goto LABEL_11;
      }
      int v11 = (void *)*v11;
      if (!v11) {
        goto LABEL_9;
      }
    }
    int v11 = 0;
LABEL_11:
    *a3 = v11;
  }
  else
  {
LABEL_9:
    *a3 = 0;
  }
  a3[1] = v10;
}

uint64_t sub_2171ECC44@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v9 = a2;
  uint64_t v10 = result;
  if (a2 != a4 || a3 != a5)
  {
    do
    {
      uint64_t v12 = v9;
      do
        uint64_t v9 = *(void *)v9;
      while (v9 && (*(unsigned char *)(v9 + 584) & 1) == 0);
      float result = sub_2171ED5FC(v10, v12, a3, (uint64_t)&v14);
    }
    while (v9 != a4 || a3 != a5);
    uint64_t v9 = a4;
  }
  *a6 = v9;
  a6[1] = a3;
  return result;
}

void sub_2171ECCD8(uint64_t a1@<X0>, unsigned int *a2@<X1>, void *a3@<X8>)
{
  unint64_t v5 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  uint64_t v15 = 0;
  unint64_t v16 = (void *)v5;
  uint64_t v6 = (unsigned __int8 *)&v16;
  for (uint64_t i = 7; i != -1; --i)
  {
    int v8 = *v6++;
    *((unsigned char *)&v15 + i) = byte_217457512[v8];
  }
  uint64_t v9 = v15;
  uint64_t v10 = a1 + 16;
  sub_2171E9374(a1, v5, &v16);
  int v11 = v16;
  if (v16)
  {
    unint64_t v12 = v9 | 1;
    while (1)
    {
      unint64_t v13 = v11[73];
      if (v13 > v12)
      {
        int v11 = 0;
        uint64_t v14 = 0;
        goto LABEL_11;
      }
      if (v13 == v12 && v11[1] == *(void *)a2) {
        break;
      }
      int v11 = (void *)*v11;
      if (!v11) {
        goto LABEL_9;
      }
    }
    uint64_t v14 = v11;
    do
      uint64_t v14 = (void *)*v14;
    while (v14 && (v14[73] & 1) == 0);
LABEL_11:
    *a3 = v11;
    a3[1] = v10;
    a3[2] = v14;
  }
  else
  {
LABEL_9:
    *a3 = 0;
    a3[1] = v10;
    a3[2] = 0;
  }
  a3[3] = v10;
}

uint64_t sub_2171ECDE0@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v9 = a2;
  uint64_t v10 = result;
  if (a2 != a4 || a3 != a5)
  {
    do
    {
      uint64_t v12 = v9;
      do
        uint64_t v9 = *(void *)v9;
      while (v9 && (*(unsigned char *)(v9 + 16) & 1) == 0);
      float result = sub_2171ECF7C(v10, v12, a3, (uint64_t)&v14);
    }
    while (v9 != a4 || a3 != a5);
    uint64_t v9 = a4;
  }
  *a6 = v9;
  a6[1] = a3;
  return result;
}

void sub_2171ECE74(uint64_t a1@<X0>, unsigned int *a2@<X1>, void *a3@<X8>)
{
  unint64_t v5 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  uint64_t v15 = 0;
  unint64_t v16 = (void *)v5;
  uint64_t v6 = (unsigned __int8 *)&v16;
  for (uint64_t i = 7; i != -1; --i)
  {
    int v8 = *v6++;
    *((unsigned char *)&v15 + i) = byte_217457512[v8];
  }
  uint64_t v9 = v15;
  uint64_t v10 = a1 + 16;
  sub_2171E9AEC(a1, v5, &v16);
  int v11 = v16;
  if (v16)
  {
    unint64_t v12 = v9 | 1;
    while (1)
    {
      unint64_t v13 = v11[2];
      if (v13 > v12)
      {
        int v11 = 0;
        uint64_t v14 = 0;
        goto LABEL_11;
      }
      if (v13 == v12 && v11[1] == *(void *)a2) {
        break;
      }
      int v11 = (void *)*v11;
      if (!v11) {
        goto LABEL_9;
      }
    }
    uint64_t v14 = v11;
    do
      uint64_t v14 = (void *)*v14;
    while (v14 && (v14[2] & 1) == 0);
LABEL_11:
    *a3 = v11;
    a3[1] = v10;
    a3[2] = v14;
  }
  else
  {
LABEL_9:
    *a3 = 0;
    a3[1] = v10;
    a3[2] = 0;
  }
  a3[3] = v10;
}

uint64_t sub_2171ECF7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_2171E9AEC(a1, bswap64(0x9E3779B97F4A7C55* (*(unsigned int *)(a2 + 12)+ ((*(unsigned int *)(a2 + 12)+ (unint64_t)*(unsigned int *)(a2 + 8)+ (*(unsigned int *)(a2 + 12) + (unint64_t)*(unsigned int *)(a2 + 8))* (*(unsigned int *)(a2 + 12) + (unint64_t)*(unsigned int *)(a2 + 8))) >> 1))), &v12);
  uint64_t result = a1 + 16;
  uint64_t v9 = (uint64_t ***)v12;
  if (v12)
  {
    while (1)
    {
      uint64_t v10 = *v9;
      if (*v9 == (uint64_t **)a2 && result == a3) {
        break;
      }
      unint64_t v12 = *v9;
      uint64_t v9 = (uint64_t ***)v10;
      if (!v10) {
        goto LABEL_7;
      }
    }
    unint64_t v13 = v9;
    return sub_2171ED030((uint64_t ***)a2, result, &v13, (uint64_t ***)a4);
  }
  else
  {
LABEL_7:
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = result;
  }
  return result;
}

uint64_t sub_2171ED030@<X0>(uint64_t ***this@<X2>, uint64_t a2@<X0>, uint64_t ****a3@<X1>, uint64_t ***a4@<X8>)
{
  uint64_t v6 = *this;
  **a3 = *this;
  uint64_t result = sub_2171E8568(a2, (tbb::internal *)this);
  --*(void *)(a2 + 8);
  for (; v6; uint64_t v6 = (uint64_t **)*v6)
  {
    if ((_BYTE)v6[2]) {
      break;
    }
  }
  *a4 = v6;
  a4[1] = (uint64_t **)a2;
  return result;
}

uint64_t sub_2171ED094@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v9 = a2;
  uint64_t v10 = result;
  if (a2 != a4 || a3 != a5)
  {
    do
    {
      uint64_t v12 = v9;
      do
        uint64_t v9 = *(void *)v9;
      while (v9 && (*(unsigned char *)(v9 + 576) & 1) == 0);
      uint64_t result = sub_2171ED230(v10, v12, a3, (uint64_t)&v14);
    }
    while (v9 != a4 || a3 != a5);
    uint64_t v9 = a4;
  }
  *a6 = v9;
  a6[1] = a3;
  return result;
}

void sub_2171ED128(uint64_t a1@<X0>, unsigned int *a2@<X1>, void *a3@<X8>)
{
  unint64_t v5 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  uint64_t v15 = 0;
  unint64_t v16 = (void *)v5;
  uint64_t v6 = (unsigned __int8 *)&v16;
  for (uint64_t i = 7; i != -1; --i)
  {
    int v8 = *v6++;
    *((unsigned char *)&v15 + i) = byte_217457512[v8];
  }
  uint64_t v9 = v15;
  uint64_t v10 = a1 + 16;
  sub_2171E96A8(a1, v5, &v16);
  int v11 = v16;
  if (v16)
  {
    unint64_t v12 = v9 | 1;
    while (1)
    {
      unint64_t v13 = v11[72];
      if (v13 > v12)
      {
        int v11 = 0;
        uint64_t v14 = 0;
        goto LABEL_11;
      }
      if (v13 == v12 && v11[1] == *(void *)a2) {
        break;
      }
      int v11 = (void *)*v11;
      if (!v11) {
        goto LABEL_9;
      }
    }
    uint64_t v14 = v11;
    do
      uint64_t v14 = (void *)*v14;
    while (v14 && (v14[72] & 1) == 0);
LABEL_11:
    *a3 = v11;
    a3[1] = v10;
    a3[2] = v14;
  }
  else
  {
LABEL_9:
    *a3 = 0;
    a3[1] = v10;
    a3[2] = 0;
  }
  a3[3] = v10;
}

uint64_t sub_2171ED230@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_2171E96A8(a1, bswap64(0x9E3779B97F4A7C55* (*(unsigned int *)(a2 + 12)+ ((*(unsigned int *)(a2 + 12)+ (unint64_t)*(unsigned int *)(a2 + 8)+ (*(unsigned int *)(a2 + 12) + (unint64_t)*(unsigned int *)(a2 + 8))* (*(unsigned int *)(a2 + 12) + (unint64_t)*(unsigned int *)(a2 + 8))) >> 1))), &v12);
  uint64_t result = a1 + 16;
  uint64_t v9 = (uint64_t ***)v12;
  if (v12)
  {
    while (1)
    {
      uint64_t v10 = *v9;
      if (*v9 == (uint64_t **)a2 && result == a3) {
        break;
      }
      unint64_t v12 = *v9;
      uint64_t v9 = (uint64_t ***)v10;
      if (!v10) {
        goto LABEL_7;
      }
    }
    unint64_t v13 = v9;
    return sub_2171ED2E4((uint64_t ***)a2, result, &v13, (uint64_t ***)a4);
  }
  else
  {
LABEL_7:
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = result;
  }
  return result;
}

uint64_t sub_2171ED2E4@<X0>(uint64_t ***this@<X2>, uint64_t a2@<X0>, uint64_t ****a3@<X1>, uint64_t ***a4@<X8>)
{
  uint64_t v6 = *this;
  **a3 = *this;
  uint64_t result = sub_2171E8830(a2, (tbb::internal *)this);
  --*(void *)(a2 + 8);
  for (; v6; uint64_t v6 = (uint64_t **)*v6)
  {
    if ((_BYTE)v6[72]) {
      break;
    }
  }
  *a4 = v6;
  a4[1] = (uint64_t **)a2;
  return result;
}

uint64_t sub_2171ED348@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v9 = a2;
  uint64_t v10 = result;
  if (a2 != a4 || a3 != a5)
  {
    do
    {
      uint64_t v12 = v9;
      do
        uint64_t v9 = *(void *)v9;
      while (v9 && (*(unsigned char *)(v9 + 584) & 1) == 0);
      uint64_t result = sub_2171ED4E4(v10, v12, a3, (uint64_t)&v14);
    }
    while (v9 != a4 || a3 != a5);
    uint64_t v9 = a4;
  }
  *a6 = v9;
  a6[1] = a3;
  return result;
}

void sub_2171ED3DC(uint64_t a1@<X0>, unsigned int *a2@<X1>, void *a3@<X8>)
{
  unint64_t v5 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  uint64_t v15 = 0;
  unint64_t v16 = (void *)v5;
  uint64_t v6 = (unsigned __int8 *)&v16;
  for (uint64_t i = 7; i != -1; --i)
  {
    int v8 = *v6++;
    *((unsigned char *)&v15 + i) = byte_217457512[v8];
  }
  uint64_t v9 = v15;
  uint64_t v10 = a1 + 16;
  sub_2171EB020(a1, v5, &v16);
  int v11 = v16;
  if (v16)
  {
    unint64_t v12 = v9 | 1;
    while (1)
    {
      unint64_t v13 = v11[73];
      if (v13 > v12)
      {
        int v11 = 0;
        uint64_t v14 = 0;
        goto LABEL_11;
      }
      if (v13 == v12 && v11[1] == *(void *)a2) {
        break;
      }
      int v11 = (void *)*v11;
      if (!v11) {
        goto LABEL_9;
      }
    }
    uint64_t v14 = v11;
    do
      uint64_t v14 = (void *)*v14;
    while (v14 && (v14[73] & 1) == 0);
LABEL_11:
    *a3 = v11;
    a3[1] = v10;
    a3[2] = v14;
  }
  else
  {
LABEL_9:
    *a3 = 0;
    a3[1] = v10;
    a3[2] = 0;
  }
  a3[3] = v10;
}

uint64_t sub_2171ED4E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_2171EB020(a1, bswap64(0x9E3779B97F4A7C55* (*(unsigned int *)(a2 + 12)+ ((*(unsigned int *)(a2 + 12)+ (unint64_t)*(unsigned int *)(a2 + 8)+ (*(unsigned int *)(a2 + 12) + (unint64_t)*(unsigned int *)(a2 + 8))* (*(unsigned int *)(a2 + 12) + (unint64_t)*(unsigned int *)(a2 + 8))) >> 1))), &v12);
  uint64_t result = a1 + 16;
  uint64_t v9 = (uint64_t ***)v12;
  if (v12)
  {
    while (1)
    {
      uint64_t v10 = *v9;
      if (*v9 == (uint64_t **)a2 && result == a3) {
        break;
      }
      unint64_t v12 = *v9;
      uint64_t v9 = (uint64_t ***)v10;
      if (!v10) {
        goto LABEL_7;
      }
    }
    unint64_t v13 = v9;
    return sub_2171ED598((uint64_t ***)a2, result, &v13, (uint64_t ***)a4);
  }
  else
  {
LABEL_7:
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = result;
  }
  return result;
}

uint64_t sub_2171ED598@<X0>(uint64_t ***this@<X2>, uint64_t a2@<X0>, uint64_t ****a3@<X1>, uint64_t ***a4@<X8>)
{
  uint64_t v6 = *this;
  **a3 = *this;
  uint64_t result = sub_2171E89BC(a2, (tbb::internal *)this);
  --*(void *)(a2 + 8);
  for (; v6; uint64_t v6 = (uint64_t **)*v6)
  {
    if ((_BYTE)v6[73]) {
      break;
    }
  }
  *a4 = v6;
  a4[1] = (uint64_t **)a2;
  return result;
}

uint64_t sub_2171ED5FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  sub_2171E9374(a1, bswap64(0x9E3779B97F4A7C55* (*(unsigned int *)(a2 + 12)+ ((*(unsigned int *)(a2 + 12)+ (unint64_t)*(unsigned int *)(a2 + 8)+ (*(unsigned int *)(a2 + 12) + (unint64_t)*(unsigned int *)(a2 + 8))* (*(unsigned int *)(a2 + 12) + (unint64_t)*(unsigned int *)(a2 + 8))) >> 1))), &v12);
  uint64_t result = a1 + 16;
  uint64_t v9 = (uint64_t ***)v12;
  if (v12)
  {
    while (1)
    {
      uint64_t v10 = *v9;
      if (*v9 == (uint64_t **)a2 && result == a3) {
        break;
      }
      unint64_t v12 = *v9;
      uint64_t v9 = (uint64_t ***)v10;
      if (!v10) {
        goto LABEL_7;
      }
    }
    unint64_t v13 = v9;
    return sub_2171ED6B0((uint64_t ***)a2, result, &v13, (uint64_t ***)a4);
  }
  else
  {
LABEL_7:
    *(void *)a4 = 0;
    *(void *)(a4 + 8) = result;
  }
  return result;
}

uint64_t sub_2171ED6B0@<X0>(uint64_t ***this@<X2>, uint64_t a2@<X0>, uint64_t ****a3@<X1>, uint64_t ***a4@<X8>)
{
  uint64_t v6 = *this;
  **a3 = *this;
  uint64_t result = sub_2171E86A4(a2, (tbb::internal *)this);
  --*(void *)(a2 + 8);
  for (; v6; uint64_t v6 = (uint64_t **)*v6)
  {
    if ((_BYTE)v6[73]) {
      break;
    }
  }
  *a4 = v6;
  a4[1] = (uint64_t **)a2;
  return result;
}

void pxrInternal__aapl__pxrReserved__::HdDependencySchemaTokens_StaticTokenType::~HdDependencySchemaTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::HdDependencySchemaTokens_StaticTokenType *this)
{
  uint64_t v4 = (void **)((char *)this + 24);
  sub_216889A04(&v4);
  uint64_t v2 = *((void *)this + 2);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 1);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

pxrInternal__aapl__pxrReserved__::HdDependencySchemaTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::HdDependencySchemaTokens_StaticTokenType::HdDependencySchemaTokens_StaticTokenType(atomic_uint **this)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v2 = (atomic_uint **)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "dependedOnPrimPath", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2, "dependedOnDataSourceLocator", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 2, "affectedDataSourceLocator", 0);
  uint64_t v3 = *this;
  uint64_t v15 = v3;
  if ((v3 & 7) != 0)
  {
    uint64_t v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v15 = v4;
    }
  }
  unint64_t v5 = *v2;
  unint64_t v16 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      unint64_t v16 = v6;
    }
  }
  unint64_t v7 = this[2];
  unint64_t v17 = v7;
  if ((v7 & 7) != 0)
  {
    int v8 = (atomic_uint *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
      unint64_t v17 = v8;
    }
  }
  this[3] = 0;
  this[4] = 0;
  this[5] = 0;
  uint64_t v9 = (atomic_uint *)operator new(0x18uLL);
  unint64_t v10 = 0;
  this[3] = v9;
  this[4] = v9;
  this[5] = v9 + 6;
  do
  {
    int v11 = (&v15)[v10 / 2];
    *(void *)&v9[v10] = v11;
    if ((v11 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v9[v10] &= 0xFFFFFFFFFFFFFFF8;
    }
    v10 += 2;
  }
  while (v10 != 6);
  this[4] = v9 + 6;
  for (uint64_t i = 2; i != -1; --i)
  {
    unint64_t v13 = (&v15)[i];
    if ((v13 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return (pxrInternal__aapl__pxrReserved__::HdDependencySchemaTokens_StaticTokenType *)this;
}

void sub_2171ED944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  sub_216889A04(&a9);
  uint64_t v15 = 16;
  while (1)
  {
    uint64_t v16 = *(void *)(&a11 + v15);
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v15 -= 8;
    if (v15 == -8)
    {
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void pxrInternal__aapl__pxrReserved__::HdDependencySchema::GetDependedOnPrimPath(pxrInternal__aapl__pxrReserved__::HdDependencySchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdDependencySchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171EDFD4(&pxrInternal__aapl__pxrReserved__::HdDependencySchemaTokens);
  }
  uint64_t v6 = *v4;
  if (((unint64_t)*v4 & 7) != 0)
  {
    unint64_t v5 = (atomic_uint *)((unint64_t)*v4 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v5, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v6 = v5;
    }
  }
  sub_2171B15E0((uint64_t *)this, a2);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdDependencySchema::GetDependedOnDataSourceLocator(pxrInternal__aapl__pxrReserved__::HdDependencySchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdDependencySchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171EDFD4(&pxrInternal__aapl__pxrReserved__::HdDependencySchemaTokens);
  }
  unint64_t v5 = v4[1];
  unint64_t v7 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      unint64_t v7 = v6;
    }
  }
  sub_2171EDB48((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_2171EDB48(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (v3)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v3 + 24))(&v4);
    sub_2171EE060((uint64_t)&v4, a2);
    if (v5) {
      sub_216784EC4(v5);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

void pxrInternal__aapl__pxrReserved__::HdDependencySchema::GetAffectedDataSourceLocator(pxrInternal__aapl__pxrReserved__::HdDependencySchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdDependencySchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171EDFD4(&pxrInternal__aapl__pxrReserved__::HdDependencySchemaTokens);
  }
  unint64_t v5 = v4[2];
  unint64_t v7 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      unint64_t v7 = v6;
    }
  }
  sub_2171EDB48((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdDependencySchema::BuildRetained(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, _OWORD *a4@<X8>)
{
  v31[3] = *MEMORY[0x263EF8340];
  memset(v31, 0, 24);
  memset(v30, 0, sizeof(v30));
  if (*a1)
  {
    int v8 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdDependencySchemaTokens);
    if (!v8) {
      int v8 = sub_2171EDFD4(&pxrInternal__aapl__pxrReserved__::HdDependencySchemaTokens);
    }
    sub_2168D2318(v31, v8);
    uint64_t v10 = *a1;
    uint64_t v9 = a1[1];
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
    int v11 = (std::__shared_weak_count *)*((void *)&v30[0] + 1);
    *(void *)&v30[0] = v10;
    *((void *)&v30[0] + 1) = v9;
    if (v11) {
      sub_216784EC4(v11);
    }
    uint64_t v12 = 1;
  }
  else
  {
    uint64_t v12 = 0;
  }
  if (*a2)
  {
    unint64_t v13 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdDependencySchemaTokens);
    if (!v13) {
      unint64_t v13 = sub_2171EDFD4(&pxrInternal__aapl__pxrReserved__::HdDependencySchemaTokens);
    }
    sub_2168D2318(&v31[v12], v13 + 1);
    unint64_t v14 = v12 + 1;
    uint64_t v15 = &v30[v12];
    uint64_t v17 = *a2;
    uint64_t v16 = a2[1];
    if (v16) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v18 = (std::__shared_weak_count *)v15[1];
    *uint64_t v15 = v17;
    v15[1] = v16;
    if (v18) {
      sub_216784EC4(v18);
    }
  }
  else
  {
    unint64_t v14 = v12;
  }
  if (*a3)
  {
    BOOL v19 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdDependencySchemaTokens);
    if (!v19) {
      BOOL v19 = sub_2171EDFD4(&pxrInternal__aapl__pxrReserved__::HdDependencySchemaTokens);
    }
    sub_2168D2318(&v31[v14], v19 + 2);
    unint64_t v20 = v14 + 1;
    unint64_t v21 = &v30[v14];
    uint64_t v23 = *a3;
    uint64_t v22 = a3[1];
    if (v22) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v24 = (std::__shared_weak_count *)v21[1];
    *unint64_t v21 = v23;
    v21[1] = v22;
    if (v24) {
      sub_216784EC4(v24);
    }
  }
  else
  {
    unint64_t v20 = v14;
  }
  pxrInternal__aapl__pxrReserved__::HdRetainedContainerDataSource::New(v20, v31, (uint64_t *)v30, &v29);
  *a4 = v29;
  for (uint64_t i = 40; i != -8; i -= 16)
  {
    char v26 = *(std::__shared_weak_count **)((char *)v30 + i);
    if (v26) {
      sub_216784EC4(v26);
    }
  }
  for (uint64_t j = 2; j != -1; --j)
  {
    uint64_t v28 = v31[j];
    if ((v28 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
}

void sub_2171EDE94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v18 = 40;
  while (1)
  {
    BOOL v19 = *(std::__shared_weak_count **)(&a11 + v18);
    if (v19) {
      sub_216784EC4(v19);
    }
    v18 -= 16;
    if (v18 == -8)
    {
      uint64_t v20 = 16;
      while (1)
      {
        uint64_t v21 = *(void *)(&a17 + v20);
        if ((v21 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        v20 -= 8;
        if (v20 == -8) {
          _Unwind_Resume(exception_object);
        }
      }
    }
  }
}

void *pxrInternal__aapl__pxrReserved__::HdDependencySchema::Builder::SetDependedOnPrimPath(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v5 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdDependencySchema::Builder::SetDependedOnDataSourceLocator(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v5 = *(std::__shared_weak_count **)(a1 + 24);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdDependencySchema::Builder::SetAffectedDataSourceLocator(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v5 = *(std::__shared_weak_count **)(a1 + 40);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::HdDependencySchema::Builder::Build(pxrInternal__aapl__pxrReserved__::HdDependencySchema::Builder *this@<X0>, _OWORD *a2@<X8>)
{
}

atomic_uint **sub_2171EDFD4(atomic_ullong *a1)
{
  uint64_t result = sub_2171EE01C();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::HdDependencySchemaTokens_StaticTokenType::~HdDependencySchemaTokens_StaticTokenType((pxrInternal__aapl__pxrReserved__::HdDependencySchemaTokens_StaticTokenType *)result);
      operator delete(v4);
    }
    return (atomic_uint **)atomic_load((unint64_t *)a1);
  }
  return result;
}

atomic_uint **sub_2171EE01C()
{
  uint64_t v0 = (atomic_uint **)operator new(0x30uLL);
  pxrInternal__aapl__pxrReserved__::HdDependencySchemaTokens_StaticTokenType::HdDependencySchemaTokens_StaticTokenType(v0);
  return v0;
}

void sub_2171EE04C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_2171EE060@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = *(void **)a1;
  if (result
    && (uint64_t result = __dynamic_cast(result, (const struct __class_type_info *)&unk_26C77BD10, (const struct __class_type_info *)&unk_26C7801E0, 0)) != 0)
  {
    uint64_t v5 = *(void *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::HdDirtyBitsTranslator::RprimDirtyBitsToLocatorSet(void *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *a3, pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *a4)
{
  if (!a3) {
    return this;
  }
  int v5 = (int)a2;
  if (a2 != -3)
  {
    unint64_t v7 = this;
    int v8 = (pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
    if (v8)
    {
      if (((unsigned __int16)a2 & 0x100) == 0) {
        goto LABEL_8;
      }
    }
    else
    {
      int v8 = sub_2171C0F34(&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
      if ((v5 & 0x100) == 0) {
        goto LABEL_8;
      }
    }
    if ((*v7 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v8 + 8) & 0xFFFFFFFFFFFFFFF8))
    {
      DefaultLocator = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchema::GetDefaultLocator(v8);
      pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::append(a3, DefaultLocator);
    }
LABEL_8:
    uint64_t v10 = (pxrInternal__aapl__pxrReserved__::HdCapsuleSchema *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
    if (v10)
    {
      if ((v5 & 0x40) == 0) {
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v10 = sub_2171C0F34(&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
      if ((v5 & 0x40) == 0) {
        goto LABEL_12;
      }
    }
    if ((*v7 & 0xFFFFFFFFFFFFFFF8) == (*(void *)v10 & 0xFFFFFFFFFFFFFFF8))
    {
      int v11 = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdCapsuleSchema::GetDefaultLocator(v10);
      uint64_t v10 = (pxrInternal__aapl__pxrReserved__::HdCapsuleSchema *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::append(a3, v11);
    }
LABEL_12:
    if ((v5 & 0x200000) != 0)
    {
      uint64_t v12 = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdCategoriesSchema::GetDefaultLocator(v10);
      pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::append(a3, v12);
    }
    unint64_t v13 = (pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
    if (v13)
    {
      if ((v5 & 0x40) == 0) {
        goto LABEL_18;
      }
    }
    else
    {
      unint64_t v13 = sub_2171C0F34(&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
      if ((v5 & 0x40) == 0) {
        goto LABEL_18;
      }
    }
    if ((*v7 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v13 + 2) & 0xFFFFFFFFFFFFFFF8))
    {
      unint64_t v14 = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdConeSchema::GetDefaultLocator(v13);
      pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::append(a3, v14);
    }
LABEL_18:
    uint64_t v15 = (pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
    if (v15)
    {
      if ((v5 & 0x40) == 0) {
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v15 = sub_2171C0F34(&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
      if ((v5 & 0x40) == 0) {
        goto LABEL_22;
      }
    }
    if ((*v7 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v15 + 3) & 0xFFFFFFFFFFFFFFF8))
    {
      uint64_t v16 = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdCubeSchema::GetDefaultLocator(v15);
      pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::append(a3, v16);
    }
LABEL_22:
    uint64_t v17 = (pxrInternal__aapl__pxrReserved__::HdCylinderSchema *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
    if (v17)
    {
      if ((v5 & 0x40) == 0) {
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v17 = sub_2171C0F34(&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
      if ((v5 & 0x40) == 0) {
        goto LABEL_26;
      }
    }
    if ((*v7 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v17 + 4) & 0xFFFFFFFFFFFFFFF8))
    {
      uint64_t v18 = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdCylinderSchema::GetDefaultLocator(v17);
      uint64_t v17 = (pxrInternal__aapl__pxrReserved__::HdCylinderSchema *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::append(a3, v18);
    }
LABEL_26:
    if ((v5 & 0x10) != 0)
    {
      ReprSelectorLocator = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchema::GetDefaultLocator(v17);
    }
    else
    {
      if ((v5 & 0x2000) != 0)
      {
        CullStyleLocator = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchema::GetCullStyleLocator(v17);
        uint64_t v17 = (pxrInternal__aapl__pxrReserved__::HdCylinderSchema *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::append(a3, CullStyleLocator);
        if ((v5 & 0x40000) == 0)
        {
LABEL_29:
          if ((v5 & 8) == 0) {
            goto LABEL_30;
          }
          goto LABEL_68;
        }
      }
      else if ((v5 & 0x40000) == 0)
      {
        goto LABEL_29;
      }
      ReprSelectorLocator = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchema::GetReprSelectorLocator(v17);
    }
    uint64_t v17 = (pxrInternal__aapl__pxrReserved__::HdCylinderSchema *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::append(a3, ReprSelectorLocator);
    if ((v5 & 8) == 0)
    {
LABEL_30:
      if ((v5 & 0x40) == 0) {
        goto LABEL_31;
      }
      goto LABEL_69;
    }
LABEL_68:
    long long v29 = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdExtentSchema::GetDefaultLocator(v17);
    uint64_t v17 = (pxrInternal__aapl__pxrReserved__::HdCylinderSchema *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::append(a3, v29);
    if ((v5 & 0x40) == 0)
    {
LABEL_31:
      if ((v5 & 0x10000) == 0) {
        goto LABEL_32;
      }
      goto LABEL_70;
    }
LABEL_69:
    uint64_t v30 = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarsSchema::GetDefaultLocator(v17);
    uint64_t v17 = (pxrInternal__aapl__pxrReserved__::HdCylinderSchema *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::append(a3, v30);
    if ((v5 & 0x10000) == 0)
    {
LABEL_32:
      if ((v5 & 0x20000) == 0) {
        goto LABEL_33;
      }
      goto LABEL_71;
    }
LABEL_70:
    uint64_t v31 = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdInstancedBySchema::GetDefaultLocator(v17);
    uint64_t v17 = (pxrInternal__aapl__pxrReserved__::HdCylinderSchema *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::append(a3, v31);
    if ((v5 & 0x20000) == 0)
    {
LABEL_33:
      if ((v5 & 0x80) == 0) {
        goto LABEL_35;
      }
      goto LABEL_34;
    }
LABEL_71:
    uint64_t v32 = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchema::GetDefaultLocator(v17);
    uint64_t v17 = (pxrInternal__aapl__pxrReserved__::HdCylinderSchema *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::append(a3, v32);
    if ((v5 & 0x80) == 0)
    {
LABEL_35:
      uint64_t v20 = (pxrInternal__aapl__pxrReserved__::HdMeshSchema *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
      if (!v20) {
        uint64_t v20 = sub_2171C0F34(&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
      }
      if ((*v7 & 0xFFFFFFFFFFFFFFF8) != (*((void *)v20 + 6) & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_43;
      }
      if ((v5 & 0x1000) != 0)
      {
        DoubleSidedLocator = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdMeshSchema::GetDoubleSidedLocator(v20);
        uint64_t v20 = (pxrInternal__aapl__pxrReserved__::HdMeshSchema *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::append(a3, DoubleSidedLocator);
        if ((v5 & 0x100) == 0)
        {
LABEL_40:
          if ((v5 & 0x4000) == 0) {
            goto LABEL_41;
          }
LABEL_80:
          unsigned int v39 = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdSubdivisionTagsSchema::GetDefaultLocator(v20);
          uint64_t v20 = (pxrInternal__aapl__pxrReserved__::HdMeshSchema *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::append(a3, v39);
          if ((v5 & 0x100) != 0)
          {
LABEL_42:
            uint64_t v21 = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdMeshTopologySchema::GetDefaultLocator(v20);
            uint64_t v20 = (pxrInternal__aapl__pxrReserved__::HdMeshSchema *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::append(a3, v21);
          }
LABEL_43:
          if ((v5 & 0x40) != 0)
          {
            WidthsLocator = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdPrimvarsSchema::GetDefaultLocator(v20);
            goto LABEL_76;
          }
          if ((v5 & 0x800) != 0)
          {
            NormalsLocator = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdPrimvarsSchema::GetNormalsLocator(v20);
            uint64_t v20 = (pxrInternal__aapl__pxrReserved__::HdMeshSchema *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::append(a3, NormalsLocator);
            if ((v5 & 0x20) == 0)
            {
LABEL_46:
              if ((v5 & 0x8000) == 0) {
                goto LABEL_47;
              }
LABEL_75:
              WidthsLocator = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdPrimvarsSchema::GetWidthsLocator(v20);
LABEL_76:
              uint64_t v20 = (pxrInternal__aapl__pxrReserved__::HdMeshSchema *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::append(a3, WidthsLocator);
              if ((v5 & 0x80000) == 0)
              {
LABEL_49:
                this = (void *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
                if (this)
                {
                  if ((v5 & 0x40) == 0) {
                    goto LABEL_53;
                  }
                }
                else
                {
                  this = sub_2171C0F34(&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
                  if ((v5 & 0x40) == 0) {
                    goto LABEL_53;
                  }
                }
                if ((*v7 & 0xFFFFFFFFFFFFFFF8) == (this[11] & 0xFFFFFFFFFFFFFFF8))
                {
                  uint64_t v23 = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdSphereSchema::GetDefaultLocator((pxrInternal__aapl__pxrReserved__::HdSphereSchema *)this);
                  this = pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::append(a3, v23);
                }
LABEL_53:
                if ((v5 & 0x400) != 0)
                {
                  char v26 = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdVisibilitySchema::GetDefaultLocator((pxrInternal__aapl__pxrReserved__::HdVisibilitySchema *)this);
                  this = pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::append(a3, v26);
                  if ((v5 & 0x400000) == 0)
                  {
LABEL_55:
                    if ((v5 & 0x200) == 0) {
                      return this;
                    }
LABEL_61:
                    uint64_t v6 = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdXformSchema::GetDefaultLocator((pxrInternal__aapl__pxrReserved__::HdXformSchema *)this);
                    goto LABEL_62;
                  }
                }
                else if ((v5 & 0x400000) == 0)
                {
                  goto LABEL_55;
                }
                char v27 = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdVolumeFieldBindingSchema::GetDefaultLocator((pxrInternal__aapl__pxrReserved__::HdVolumeFieldBindingSchema *)this);
                this = pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::append(a3, v27);
                if ((v5 & 0x200) == 0) {
                  return this;
                }
                goto LABEL_61;
              }
LABEL_48:
              uint64_t v22 = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdPurposeSchema::GetDefaultLocator(v20);
              pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::append(a3, v22);
              goto LABEL_49;
            }
          }
          else if ((v5 & 0x20) == 0)
          {
            goto LABEL_46;
          }
          PointsLocator = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdPrimvarsSchema::GetPointsLocator(v20);
          uint64_t v20 = (pxrInternal__aapl__pxrReserved__::HdMeshSchema *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::append(a3, PointsLocator);
          if ((v5 & 0x8000) == 0)
          {
LABEL_47:
            if ((v5 & 0x80000) == 0) {
              goto LABEL_49;
            }
            goto LABEL_48;
          }
          goto LABEL_75;
        }
      }
      else if ((v5 & 0x100) == 0)
      {
        goto LABEL_40;
      }
      GeomSubsetsLocator = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdMeshSchema::GetGeomSubsetsLocator(v20);
      uint64_t v37 = (pxrInternal__aapl__pxrReserved__::HdMeshSchema *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::append(a3, GeomSubsetsLocator);
      SubdivisionSchemeLocator = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdMeshSchema::GetSubdivisionSchemeLocator(v37);
      uint64_t v20 = (pxrInternal__aapl__pxrReserved__::HdMeshSchema *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::append(a3, SubdivisionSchemeLocator);
      if ((v5 & 0x4000) == 0)
      {
LABEL_41:
        if ((v5 & 0x100) == 0) {
          goto LABEL_43;
        }
        goto LABEL_42;
      }
      goto LABEL_80;
    }
LABEL_34:
    BOOL v19 = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdMaterialBindingsSchema::GetDefaultLocator(v17);
    pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::append(a3, v19);
    goto LABEL_35;
  }
  uint64_t v6 = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::EmptyLocator((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)this);
LABEL_62:

  return pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::append(a3, v6);
}

void pxrInternal__aapl__pxrReserved__::HdDirtyBitsTranslator::SprimDirtyBitsToLocatorSet(pxrInternal__aapl__pxrReserved__::HdDirtyBitsTranslator *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *a3, pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *a4)
{
  v42[7] = *MEMORY[0x263EF8340];
  if (!a3) {
    return;
  }
  int v5 = (int)a2;
  unint64_t v7 = (pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  if (!v7) {
    unint64_t v7 = sub_2171C0F34(&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  }
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) == (*((void *)v7 + 16) & 0xFFFFFFFFFFFFFFF8))
  {
    if ((v5 & 0xC) == 0) {
      return;
    }
    DefaultLocator = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdMaterialSchema::GetDefaultLocator(v7);
    goto LABEL_66;
  }
  int v8 = (pxrInternal__aapl__pxrReserved__::HdCameraSchema *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  if (!v8) {
    int v8 = sub_2171C0F34(&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  }
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) == (*((void *)v8 + 17) & 0xFFFFFFFFFFFFFFF8))
  {
    if (v5)
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B973E0, memory_order_acquire) & 1) == 0)
      {
        long long v38 = (pxrInternal__aapl__pxrReserved__::HdCoordSysSchema *)__cxa_guard_acquire(&qword_267B973E0);
        if (v38)
        {
          unsigned int v39 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdCoordSysSchema::GetDefaultLocator(v38);
          unint64_t v40 = (pxrInternal__aapl__pxrReserved__::HdCoordSysSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCoordSysSchemaTokens);
          if (!v40) {
            unint64_t v40 = sub_2171B0C7C(&pxrInternal__aapl__pxrReserved__::HdCoordSysSchemaTokens);
          }
          pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::Append(v39, (pxrInternal__aapl__pxrReserved__::HdCoordSysSchemaTokens_StaticTokenType *)((char *)v40 + 8), dword_267B973A8);
          __cxa_atexit((void (*)(void *))sub_217199930, dword_267B973A8, &dword_216758000);
          __cxa_guard_release(&qword_267B973E0);
        }
      }
      int v8 = (pxrInternal__aapl__pxrReserved__::HdCameraSchema *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::append(a3, (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)dword_267B973A8);
    }
    if ((v5 & 2) == 0) {
      return;
    }
    goto LABEL_57;
  }
  int v8 = (pxrInternal__aapl__pxrReserved__::HdCameraSchema *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  if (!v8) {
    int v8 = sub_2171C0F34(&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  }
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) == (*((void *)v8 + 14) & 0xFFFFFFFFFFFFFFF8))
  {
    if ((v5 & 0xE) != 0)
    {
      uint64_t v21 = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdCameraSchema::GetDefaultLocator(v8);
      int v8 = (pxrInternal__aapl__pxrReserved__::HdCameraSchema *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::append(a3, v21);
    }
    if ((v5 & 1) == 0) {
      return;
    }
LABEL_57:
    DefaultLocator = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdXformSchema::GetDefaultLocator(v8);
LABEL_66:
    char v27 = DefaultLocator;
    goto LABEL_67;
  }
  unint64_t IsLight = pxrInternal__aapl__pxrReserved__::HdPrimTypeIsLight(this, a2);
  if (IsLight) {
    goto LABEL_47;
  }
  unint64_t IsLight = atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  if (!IsLight) {
    unint64_t IsLight = (unint64_t)sub_2171C0F34(&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  }
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) == (*(void *)(IsLight + 48) & 0xFFFFFFFFFFFFFFF8))
  {
LABEL_47:
    if ((v5 & 0xE) != 0)
    {
      uint64_t v20 = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdLightSchema::GetDefaultLocator((pxrInternal__aapl__pxrReserved__::HdLightSchema *)IsLight);
      unint64_t IsLight = (unint64_t)pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::append(a3, v20);
    }
    if ((v5 & 0x10) != 0)
    {
      uint64_t v22 = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdMaterialSchema::GetDefaultLocator((pxrInternal__aapl__pxrReserved__::HdMaterialSchema *)IsLight);
      unint64_t IsLight = (unint64_t)pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::append(a3, v22);
      if ((v5 & 2) == 0)
      {
LABEL_51:
        if ((v5 & 1) == 0) {
          goto LABEL_52;
        }
        goto LABEL_64;
      }
    }
    else if ((v5 & 2) == 0)
    {
      goto LABEL_51;
    }
    uint64_t v23 = (pxrInternal__aapl__pxrReserved__::HdPrimvarsSchema *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
    if (!v23) {
      uint64_t v23 = sub_2171C0F34(&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
    }
    if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) != (*((void *)v23 + 6) & 0xFFFFFFFFFFFFFFF8))
    {
      uint64_t v24 = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdPrimvarsSchema::GetDefaultLocator(v23);
      uint64_t v23 = (pxrInternal__aapl__pxrReserved__::HdPrimvarsSchema *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::append(a3, v24);
    }
    uint64_t v25 = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdVisibilitySchema::GetDefaultLocator(v23);
    unint64_t IsLight = (unint64_t)pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::append(a3, v25);
    if ((v5 & 1) == 0)
    {
LABEL_52:
      if ((v5 & 0x10000) == 0) {
        return;
      }
LABEL_65:
      DefaultLocator = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdInstancedBySchema::GetDefaultLocator((pxrInternal__aapl__pxrReserved__::HdInstancedBySchema *)IsLight);
      goto LABEL_66;
    }
LABEL_64:
    char v26 = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdXformSchema::GetDefaultLocator((pxrInternal__aapl__pxrReserved__::HdXformSchema *)IsLight);
    unint64_t IsLight = (unint64_t)pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::append(a3, v26);
    if ((v5 & 0x10000) == 0) {
      return;
    }
    goto LABEL_65;
  }
  uint64_t v10 = (pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  if (!v10) {
    uint64_t v10 = sub_2171C0F34(&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  }
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) == (*((void *)v10 + 15) & 0xFFFFFFFFFFFFFFF8))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B97420, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_267B97420))
    {
      uint64_t v41 = (pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
      if (!v41) {
        uint64_t v41 = sub_2171C0F34(&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
      }
      pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&unk_267B973E8, (pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens_StaticTokenType *)((char *)v41 + 120));
      __cxa_atexit((void (*)(void *))sub_217199930, &unk_267B973E8, &dword_216758000);
      __cxa_guard_release(&qword_267B97420);
    }
    if (!v5) {
      return;
    }
    char v27 = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&unk_267B973E8;
LABEL_67:
    pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::append(a3, v27);
    return;
  }
  int v11 = (pxrInternal__aapl__pxrReserved__::HdExtComputationSchema *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  if (!v11) {
    int v11 = sub_2171C0F34(&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  }
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) == (*((void *)v11 + 35) & 0xFFFFFFFFFFFFFFF8))
  {
    if ((v5 & 0x40) != 0)
    {
      DispatchCountLocator = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdExtComputationSchema::GetDispatchCountLocator(v11);
      int v11 = (pxrInternal__aapl__pxrReserved__::HdExtComputationSchema *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::append(a3, DispatchCountLocator);
      if ((v5 & 4) == 0)
      {
LABEL_75:
        if ((v5 & 0x20) == 0)
        {
LABEL_77:
          if ((v5 & 9) != 0)
          {
            InputComputationsLocator = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdExtComputationSchema::GetInputComputationsLocator(v11);
            uint64_t v30 = (pxrInternal__aapl__pxrReserved__::HdExtComputationSchema *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::append(a3, InputComputationsLocator);
            InputValuesLocator = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdExtComputationSchema::GetInputValuesLocator(v30);
            int v11 = (pxrInternal__aapl__pxrReserved__::HdExtComputationSchema *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::append(a3, InputValuesLocator);
          }
          if ((v5 & 2) == 0) {
            return;
          }
          DefaultLocator = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdExtComputationSchema::GetOutputsLocator(v11);
          goto LABEL_66;
        }
LABEL_76:
        GlslKernelLocator = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdExtComputationSchema::GetGlslKernelLocator(v11);
        int v11 = (pxrInternal__aapl__pxrReserved__::HdExtComputationSchema *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::append(a3, GlslKernelLocator);
        goto LABEL_77;
      }
    }
    else if ((v5 & 4) == 0)
    {
      goto LABEL_75;
    }
    ElementCountLocator = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdExtComputationSchema::GetElementCountLocator(v11);
    int v11 = (pxrInternal__aapl__pxrReserved__::HdExtComputationSchema *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::append(a3, ElementCountLocator);
    if ((v5 & 0x20) == 0) {
      goto LABEL_77;
    }
    goto LABEL_76;
  }
  uint64_t v12 = (pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  if (!v12) {
    uint64_t v12 = sub_2171C0F34(&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  }
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) == (*((void *)v12 + 20) & 0xFFFFFFFFFFFFFFF8))
  {
    if ((v5 & 4) == 0) {
      return;
    }
    DefaultLocator = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdIntegratorSchema::GetDefaultLocator(v12);
    goto LABEL_66;
  }
  unint64_t v13 = (pxrInternal__aapl__pxrReserved__::HdSampleFilterSchema *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  if (!v13) {
    unint64_t v13 = sub_2171C0F34(&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  }
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) == (*((void *)v13 + 21) & 0xFFFFFFFFFFFFFFF8))
  {
    if ((v5 & 4) != 0)
    {
      uint64_t v34 = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdSampleFilterSchema::GetDefaultLocator(v13);
LABEL_90:
      unint64_t v13 = (pxrInternal__aapl__pxrReserved__::HdSampleFilterSchema *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::append(a3, v34);
    }
LABEL_91:
    if ((v5 & 0x400) == 0) {
      return;
    }
    DefaultLocator = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdVisibilitySchema::GetDefaultLocator(v13);
    goto LABEL_66;
  }
  unint64_t v13 = (pxrInternal__aapl__pxrReserved__::HdSampleFilterSchema *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  if (!v13) {
    unint64_t v13 = sub_2171C0F34(&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  }
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) == (*((void *)v13 + 22) & 0xFFFFFFFFFFFFFFF8))
  {
    if ((v5 & 4) != 0)
    {
      uint64_t v34 = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdDisplayFilterSchema::GetDefaultLocator(v13);
      goto LABEL_90;
    }
    goto LABEL_91;
  }
  unint64_t v14 = (pxrInternal__aapl__pxrReserved__::HdImageShaderSchema *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  if (!v14) {
    unint64_t v14 = sub_2171C0F34(&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  }
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) == (*((void *)v14 + 23) & 0xFFFFFFFFFFFFFFF8))
  {
    if (v5)
    {
      EnabledLocator = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdImageShaderSchema::GetEnabledLocator(v14);
      unint64_t v14 = (pxrInternal__aapl__pxrReserved__::HdImageShaderSchema *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::append(a3, EnabledLocator);
      if ((v5 & 2) == 0)
      {
LABEL_96:
        if ((v5 & 4) == 0) {
          goto LABEL_97;
        }
        goto LABEL_101;
      }
    }
    else if ((v5 & 2) == 0)
    {
      goto LABEL_96;
    }
    PriorityLocator = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdImageShaderSchema::GetPriorityLocator(v14);
    unint64_t v14 = (pxrInternal__aapl__pxrReserved__::HdImageShaderSchema *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::append(a3, PriorityLocator);
    if ((v5 & 4) == 0)
    {
LABEL_97:
      if ((v5 & 8) == 0) {
        return;
      }
LABEL_102:
      DefaultLocator = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdImageShaderSchema::GetConstantsLocator(v14);
      goto LABEL_66;
    }
LABEL_101:
    FilePathLocator = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdImageShaderSchema::GetFilePathLocator(v14);
    unint64_t v14 = (pxrInternal__aapl__pxrReserved__::HdImageShaderSchema *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::append(a3, FilePathLocator);
    if ((v5 & 8) == 0) {
      return;
    }
    goto LABEL_102;
  }
  uint64_t v15 = (void *)atomic_load((unint64_t *)&qword_267B97428);
  if (!v15) {
    uint64_t v15 = sub_2171F0578(&qword_267B97428);
  }
  uint64_t v16 = sub_2168CB1F4(v15, this);
  uint64_t v17 = v16;
  if (atomic_load((unint64_t *)&qword_267B97428))
  {
    if (v16)
    {
LABEL_37:
      sub_2171EEBF4((uint64_t)(v17 + 3), v5, (uint64_t)a3);
      return;
    }
  }
  else
  {
    sub_2171F0578(&qword_267B97428);
    if (v17) {
      goto LABEL_37;
    }
  }
  if (v5)
  {
    pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)v42);
    pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::append(a3, (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)v42);
    sub_217199B64((uint64_t)v42);
  }
}

void sub_2171EEBB4(_Unwind_Exception *a1)
{
}

uint64_t sub_2171EEBF4(uint64_t a1, int a2, uint64_t a3)
{
  int v6 = a2;
  uint64_t v5 = a3;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    sub_21683A7CC();
  }
  return (*(uint64_t (**)(uint64_t, int *, uint64_t *))(*(void *)v3 + 48))(v3, &v6, &v5);
}

pxrInternal__aapl__pxrReserved__::HdInstancedBySchema *pxrInternal__aapl__pxrReserved__::HdDirtyBitsTranslator::InstancerDirtyBitsToLocatorSet(pxrInternal__aapl__pxrReserved__::HdInstancedBySchema *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *a3, pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *a4)
{
  if (!a3) {
    return this;
  }
  int v5 = (int)a2;
  if (a2 != -3)
  {
    if ((a2 & 0x10000) != 0)
    {
      DefaultLocator = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdInstancedBySchema::GetDefaultLocator(this);
      this = (pxrInternal__aapl__pxrReserved__::HdInstancedBySchema *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::append(a3, DefaultLocator);
      if ((v5 & 0x20000) == 0)
      {
LABEL_6:
        if ((v5 & 0x40) == 0) {
          goto LABEL_7;
        }
        goto LABEL_11;
      }
    }
    else if ((a2 & 0x20000) == 0)
    {
      goto LABEL_6;
    }
    int v8 = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchema::GetDefaultLocator(this);
    this = (pxrInternal__aapl__pxrReserved__::HdInstancedBySchema *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::append(a3, v8);
    if ((v5 & 0x40) == 0)
    {
LABEL_7:
      if ((v5 & 0x200) == 0) {
        return this;
      }
LABEL_12:
      int v6 = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdXformSchema::GetDefaultLocator(this);
      goto LABEL_13;
    }
LABEL_11:
    uint64_t v9 = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdPrimvarsSchema::GetDefaultLocator(this);
    this = (pxrInternal__aapl__pxrReserved__::HdInstancedBySchema *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::append(a3, v9);
    if ((v5 & 0x200) == 0) {
      return this;
    }
    goto LABEL_12;
  }
  int v6 = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::EmptyLocator(this);
LABEL_13:

  return (pxrInternal__aapl__pxrReserved__::HdInstancedBySchema *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::append(a3, v6);
}

unint64_t pxrInternal__aapl__pxrReserved__::HdDirtyBitsTranslator::BprimDirtyBitsToLocatorSet(unint64_t this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *a3, pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *a4)
{
  if (!a3) {
    return this;
  }
  char v5 = (char)a2;
  int v6 = (pxrInternal__aapl__pxrReserved__ *)this;
  this = atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  if (!this) {
    this = (unint64_t)sub_2171C0F34(&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  }
  if ((*(void *)v6 & 0xFFFFFFFFFFFFFFF8) == (*(void *)(this + 288) & 0xFFFFFFFFFFFFFFF8))
  {
    if ((v5 & 1) == 0) {
      return this;
    }
    DefaultLocator = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdRenderBufferSchema::GetDefaultLocator((pxrInternal__aapl__pxrReserved__::HdRenderBufferSchema *)this);
    goto LABEL_28;
  }
  this = atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  if (!this) {
    this = (unint64_t)sub_2171C0F34(&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  }
  if ((*(void *)v6 & 0xFFFFFFFFFFFFFFF8) != (*(void *)(this + 296) & 0xFFFFFFFFFFFFFFF8))
  {
    this = pxrInternal__aapl__pxrReserved__::HdLegacyPrimTypeIsVolumeField(v6, a2);
    if ((v5 & 2) == 0 || !this) {
      return this;
    }
    DefaultLocator = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdVolumeFieldSchema::GetDefaultLocator((pxrInternal__aapl__pxrReserved__::HdVolumeFieldSchema *)this);
    goto LABEL_28;
  }
  if ((v5 & 2) != 0)
  {
    ActiveLocator = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdRenderSettingsSchema::GetActiveLocator((pxrInternal__aapl__pxrReserved__::HdRenderSettingsSchema *)this);
    this = (unint64_t)pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::append(a3, ActiveLocator);
    if ((v5 & 4) == 0)
    {
LABEL_15:
      if ((v5 & 8) == 0) {
        goto LABEL_16;
      }
      goto LABEL_23;
    }
  }
  else if ((v5 & 4) == 0)
  {
    goto LABEL_15;
  }
  NamespacedSettingsLocator = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdRenderSettingsSchema::GetNamespacedSettingsLocator((pxrInternal__aapl__pxrReserved__::HdRenderSettingsSchema *)this);
  this = (unint64_t)pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::append(a3, NamespacedSettingsLocator);
  if ((v5 & 8) == 0)
  {
LABEL_16:
    if ((v5 & 0x10) == 0) {
      goto LABEL_17;
    }
    goto LABEL_24;
  }
LABEL_23:
  RenderProductsLocator = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdRenderSettingsSchema::GetRenderProductsLocator((pxrInternal__aapl__pxrReserved__::HdRenderSettingsSchema *)this);
  this = (unint64_t)pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::append(a3, RenderProductsLocator);
  if ((v5 & 0x10) == 0)
  {
LABEL_17:
    if ((v5 & 0x20) == 0) {
      goto LABEL_18;
    }
    goto LABEL_25;
  }
LABEL_24:
  IncludedPurposesLocator = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdRenderSettingsSchema::GetIncludedPurposesLocator((pxrInternal__aapl__pxrReserved__::HdRenderSettingsSchema *)this);
  this = (unint64_t)pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::append(a3, IncludedPurposesLocator);
  if ((v5 & 0x20) == 0)
  {
LABEL_18:
    if ((v5 & 0x40) == 0) {
      goto LABEL_19;
    }
LABEL_26:
    RenderingColorSpaceLocator = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdRenderSettingsSchema::GetRenderingColorSpaceLocator((pxrInternal__aapl__pxrReserved__::HdRenderSettingsSchema *)this);
    this = (unint64_t)pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::append(a3, RenderingColorSpaceLocator);
    if ((v5 & 0x80) == 0) {
      return this;
    }
    goto LABEL_27;
  }
LABEL_25:
  MaterialBindingPurposesLocator = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdRenderSettingsSchema::GetMaterialBindingPurposesLocator((pxrInternal__aapl__pxrReserved__::HdRenderSettingsSchema *)this);
  this = (unint64_t)pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::append(a3, MaterialBindingPurposesLocator);
  if ((v5 & 0x40) != 0) {
    goto LABEL_26;
  }
LABEL_19:
  if ((v5 & 0x80) == 0) {
    return this;
  }
LABEL_27:
  DefaultLocator = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdRenderSettingsSchema::GetShutterIntervalLocator((pxrInternal__aapl__pxrReserved__::HdRenderSettingsSchema *)this);
LABEL_28:

  return (unint64_t)pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::append(a3, DefaultLocator);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdDirtyBitsTranslator::RprimLocatorSetToDirtyBits(pxrInternal__aapl__pxrReserved__::HdDirtyBitsTranslator *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *a3)
{
  char v5 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::begin(a2);
  long long v78 = v5;
  int v6 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::end(a2);
  if (v5 == v6) {
    return 0;
  }
  unint64_t v7 = pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::EmptyLocator(v6);
  if (sub_2171DE8DC((uint64_t *)v5, (uint64_t)v7)) {
    return 4294967293;
  }
  long long v77 = (uint64_t *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::end(a2);
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  if (!v9) {
    uint64_t v9 = sub_2171C0F34(&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  }
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) == (*((void *)v9 + 8) & 0xFFFFFFFFFFFFFFF8))
  {
    GeomSubsetsLocator = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdBasisCurvesSchema::GetGeomSubsetsLocator(v9);
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchema *)sub_2171EF498(GeomSubsetsLocator, &v77, (uint64_t **)&v78, 1);
    int v13 = (int)v12;
    DefaultLocator = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdBasisCurvesTopologySchema::GetDefaultLocator(v12);
    if (sub_2171EF498(DefaultLocator, &v77, (uint64_t **)&v78, 1) | v13) {
      int v10 = 256;
    }
    else {
      int v10 = 0;
    }
  }
  else
  {
    int v10 = 0;
  }
  uint64_t v15 = (pxrInternal__aapl__pxrReserved__::HdCapsuleSchema *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  if (!v15) {
    uint64_t v15 = sub_2171C0F34(&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  }
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) == (*(void *)v15 & 0xFFFFFFFFFFFFFFF8))
  {
    uint64_t v16 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdCapsuleSchema::GetDefaultLocator(v15);
    uint64_t v15 = (pxrInternal__aapl__pxrReserved__::HdCapsuleSchema *)sub_2171EF498(v16, &v77, (uint64_t **)&v78, 1);
    if (v15) {
      v10 |= 0x40u;
    }
  }
  uint64_t v17 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdCategoriesSchema::GetDefaultLocator(v15);
  if (sub_2171EF498(v17, &v77, (uint64_t **)&v78, 1)) {
    int v18 = v10 | 0x200000;
  }
  else {
    int v18 = v10;
  }
  BOOL v19 = (pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  if (!v19) {
    BOOL v19 = sub_2171C0F34(&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  }
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) == (*((void *)v19 + 2) & 0xFFFFFFFFFFFFFFF8))
  {
    uint64_t v20 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdConeSchema::GetDefaultLocator(v19);
    if (sub_2171EF498(v20, &v77, (uint64_t **)&v78, 1)) {
      v18 |= 0x40u;
    }
  }
  uint64_t v21 = (pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  if (!v21) {
    uint64_t v21 = sub_2171C0F34(&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  }
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) == (*((void *)v21 + 3) & 0xFFFFFFFFFFFFFFF8))
  {
    uint64_t v22 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdCubeSchema::GetDefaultLocator(v21);
    if (sub_2171EF498(v22, &v77, (uint64_t **)&v78, 1)) {
      v18 |= 0x40u;
    }
  }
  uint64_t v23 = (pxrInternal__aapl__pxrReserved__::HdCylinderSchema *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  if (!v23) {
    uint64_t v23 = sub_2171C0F34(&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  }
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) == (*((void *)v23 + 4) & 0xFFFFFFFFFFFFFFF8))
  {
    uint64_t v24 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdCylinderSchema::GetDefaultLocator(v23);
    uint64_t v23 = (pxrInternal__aapl__pxrReserved__::HdCylinderSchema *)sub_2171EF498(v24, &v77, (uint64_t **)&v78, 1);
    if (v23) {
      v18 |= 0x40u;
    }
  }
  uint64_t v25 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchema::GetDefaultLocator(v23);
  uint64_t HasPrefix = sub_2171EF498(v25, &v77, (uint64_t **)&v78, 0);
  if (HasPrefix)
  {
    char v27 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchema::GetDefaultLocator((pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchema *)HasPrefix);
    uint64_t v28 = v78;
    uint64_t HasPrefix = pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HasPrefix(v27, (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator **)v78);
    if (HasPrefix)
    {
      v18 |= 0x42010u;
    }
    else
    {
      long long v29 = v77;
      while (1)
      {
        CullStyleLocator = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator **)pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchema::GetCullStyleLocator((pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchema *)HasPrefix);
        uint64_t HasPrefix = pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HasPrefix(v28, CullStyleLocator);
        if (HasPrefix)
        {
          int v31 = 0x2000;
        }
        else
        {
          ReprSelectorLocator = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator **)pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchema::GetReprSelectorLocator((pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchema *)HasPrefix);
          uint64_t HasPrefix = pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HasPrefix(v28, ReprSelectorLocator);
          int v31 = HasPrefix ? 0x40000 : 16;
        }
        v18 |= v31;
        uint64_t v28 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)((char *)v28 + 56);
        if (v28 == (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)v29) {
          break;
        }
        uint64_t v33 = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchema::GetDefaultLocator((pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchema *)HasPrefix);
        uint64_t HasPrefix = pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::Intersects(v28, v33);
        if ((HasPrefix & 1) == 0) {
          goto LABEL_48;
        }
      }
      uint64_t v28 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)v29;
LABEL_48:
      long long v78 = v28;
    }
  }
  uint64_t v34 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdExtentSchema::GetDefaultLocator((pxrInternal__aapl__pxrReserved__::HdExtentSchema *)HasPrefix);
  int v35 = (pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarsSchema *)sub_2171EF498(v34, &v77, (uint64_t **)&v78, 1);
  if (v35) {
    int v36 = v18 | 8;
  }
  else {
    int v36 = v18;
  }
  uint64_t v37 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarsSchema::GetDefaultLocator(v35);
  long long v38 = (pxrInternal__aapl__pxrReserved__::HdInstancedBySchema *)sub_2171EF498(v37, &v77, (uint64_t **)&v78, 1);
  if (v38) {
    v36 |= 0x40u;
  }
  unsigned int v39 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdInstancedBySchema::GetDefaultLocator(v38);
  unint64_t v40 = (pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchema *)sub_2171EF498(v39, &v77, (uint64_t **)&v78, 1);
  if (v40) {
    v36 |= 0x10000u;
  }
  uint64_t v41 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchema::GetDefaultLocator(v40);
  int v42 = (pxrInternal__aapl__pxrReserved__::HdMaterialBindingsSchema *)sub_2171EF498(v41, &v77, (uint64_t **)&v78, 1);
  if (v42) {
    v36 |= 0x20000u;
  }
  uint64_t v43 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdMaterialBindingsSchema::GetDefaultLocator(v42);
  if (sub_2171EF498(v43, &v77, (uint64_t **)&v78, 1)) {
    int v44 = v36 | 0x80;
  }
  else {
    int v44 = v36;
  }
  unint64_t v45 = (pxrInternal__aapl__pxrReserved__::HdMeshSchema *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  if (!v45) {
    unint64_t v45 = sub_2171C0F34(&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  }
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) == (*((void *)v45 + 6) & 0xFFFFFFFFFFFFFFF8))
  {
    DoubleSidedLocator = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdMeshSchema::GetDoubleSidedLocator(v45);
    size_t v47 = (pxrInternal__aapl__pxrReserved__::HdMeshSchema *)sub_2171EF498(DoubleSidedLocator, &v77, (uint64_t **)&v78, 1);
    if (v47) {
      v44 |= 0x1000u;
    }
    int v48 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdMeshSchema::GetGeomSubsetsLocator(v47);
    uint64_t v49 = (pxrInternal__aapl__pxrReserved__::HdMeshSchema *)sub_2171EF498(v48, &v77, (uint64_t **)&v78, 1);
    int v50 = (int)v49;
    SubdivisionSchemeLocator = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdMeshSchema::GetSubdivisionSchemeLocator(v49);
    uint64_t v52 = (pxrInternal__aapl__pxrReserved__::HdMeshSchema *)sub_2171EF498(SubdivisionSchemeLocator, &v77, (uint64_t **)&v78, 1);
    if (v52 | v50) {
      int v53 = v44 | 0x100;
    }
    else {
      int v53 = v44;
    }
    SubdivisionTagsLocator = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdMeshSchema::GetSubdivisionTagsLocator(v52);
    unint64_t v55 = (pxrInternal__aapl__pxrReserved__::HdMeshTopologySchema *)sub_2171EF498(SubdivisionTagsLocator, &v77, (uint64_t **)&v78, 1);
    if (v55) {
      v53 |= 0x4000u;
    }
    long long v56 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdMeshTopologySchema::GetDefaultLocator(v55);
    unint64_t v45 = (pxrInternal__aapl__pxrReserved__::HdMeshSchema *)sub_2171EF498(v56, &v77, (uint64_t **)&v78, 1);
    if (v45) {
      int v44 = v53 | 0x100;
    }
    else {
      int v44 = v53;
    }
  }
  long long v57 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdPrimvarsSchema::GetDefaultLocator(v45);
  uint64_t v58 = sub_2171EF498(v57, &v77, (uint64_t **)&v78, 0);
  if (v58)
  {
    long long v59 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdPrimvarsSchema::GetDefaultLocator((pxrInternal__aapl__pxrReserved__::HdPrimvarsSchema *)v58);
    long long v60 = v78;
    uint64_t v58 = pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HasPrefix(v59, (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator **)v78);
    if (v58)
    {
      v44 |= 0x8860u;
    }
    else
    {
      long long v61 = v77;
      while (1)
      {
        NormalsLocator = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator **)pxrInternal__aapl__pxrReserved__::HdPrimvarsSchema::GetNormalsLocator((pxrInternal__aapl__pxrReserved__::HdPrimvarsSchema *)v58);
        uint64_t v58 = pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HasPrefix(v60, NormalsLocator);
        if (v58)
        {
          int v63 = 2048;
        }
        else
        {
          PointsLocator = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator **)pxrInternal__aapl__pxrReserved__::HdPrimvarsSchema::GetPointsLocator((pxrInternal__aapl__pxrReserved__::HdPrimvarsSchema *)v58);
          uint64_t v58 = pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HasPrefix(v60, PointsLocator);
          if (v58)
          {
            int v63 = 32;
          }
          else
          {
            WidthsLocator = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator **)pxrInternal__aapl__pxrReserved__::HdPrimvarsSchema::GetWidthsLocator((pxrInternal__aapl__pxrReserved__::HdPrimvarsSchema *)v58);
            uint64_t v58 = pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HasPrefix(v60, WidthsLocator);
            int v63 = v58 ? 0x8000 : 64;
          }
        }
        v44 |= v63;
        long long v60 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)((char *)v60 + 56);
        if (v60 == (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)v61) {
          break;
        }
        uint64_t v66 = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdPrimvarsSchema::GetDefaultLocator((pxrInternal__aapl__pxrReserved__::HdPrimvarsSchema *)v58);
        uint64_t v58 = pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::Intersects(v60, v66);
        if ((v58 & 1) == 0) {
          goto LABEL_89;
        }
      }
      long long v60 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)v61;
LABEL_89:
      long long v78 = v60;
    }
  }
  unint64_t v67 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdPurposeSchema::GetDefaultLocator((pxrInternal__aapl__pxrReserved__::HdPurposeSchema *)v58);
  if (sub_2171EF498(v67, &v77, (uint64_t **)&v78, 1)) {
    int v68 = v44 | 0x80000;
  }
  else {
    int v68 = v44;
  }
  long long v69 = (pxrInternal__aapl__pxrReserved__::HdSphereSchema *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  if (!v69) {
    long long v69 = sub_2171C0F34(&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  }
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) == (*((void *)v69 + 11) & 0xFFFFFFFFFFFFFFF8))
  {
    long long v70 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdSphereSchema::GetDefaultLocator(v69);
    long long v69 = (pxrInternal__aapl__pxrReserved__::HdSphereSchema *)sub_2171EF498(v70, &v77, (uint64_t **)&v78, 1);
    if (v69) {
      v68 |= 0x40u;
    }
  }
  long long v71 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdVisibilitySchema::GetDefaultLocator(v69);
  long long v72 = (pxrInternal__aapl__pxrReserved__::HdVolumeFieldBindingSchema *)sub_2171EF498(v71, &v77, (uint64_t **)&v78, 1);
  if (v72) {
    unsigned int v73 = v68 | 0x400;
  }
  else {
    unsigned int v73 = v68;
  }
  long long v74 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdVolumeFieldBindingSchema::GetDefaultLocator(v72);
  long long v75 = (pxrInternal__aapl__pxrReserved__::HdXformSchema *)sub_2171EF498(v74, &v77, (uint64_t **)&v78, 1);
  if (v75) {
    v73 |= 0x400000u;
  }
  uint64_t v76 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdXformSchema::GetDefaultLocator(v75);
  if (sub_2171EF498(v76, &v77, (uint64_t **)&v78, 1)) {
    return v73 | 0x200;
  }
  else {
    return v73;
  }
}

uint64_t sub_2171EF498(pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *a1, uint64_t **a2, uint64_t **a3, char a4)
{
  char v5 = *a3;
  if (*a3 == *a2)
  {
    char v9 = 0;
  }
  else
  {
    char v9 = 0;
    do
    {
      if (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::Intersects((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)v5, a1))
      {
        char v9 = 1;
        if ((a4 & 1) == 0) {
          return v9 & 1;
        }
      }
      else if (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::operator<((uint64_t *)a1, *a3))
      {
        return v9 & 1;
      }
      char v5 = *a3 + 7;
      *a3 = v5;
    }
    while (v5 != *a2);
  }
  return v9 & 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdDirtyBitsTranslator::SprimLocatorSetToDirtyBits(pxrInternal__aapl__pxrReserved__::HdDirtyBitsTranslator *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *a3)
{
  uint64_t v86 = *MEMORY[0x263EF8340];
  long long v84 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::begin(a2);
  if (v84 == (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::end(a2)) {
    return 0;
  }
  long long v83 = (uint64_t *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::end(a2);
  unsigned int v82 = 0;
  int v6 = (pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  if (!v6) {
    int v6 = sub_2171C0F34(&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  }
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) != (*((void *)v6 + 16) & 0xFFFFFFFFFFFFFFF8))
  {
    unint64_t v7 = (pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
    if (!v7) {
      unint64_t v7 = sub_2171C0F34(&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
    }
    if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) == (*((void *)v7 + 17) & 0xFFFFFFFFFFFFFFF8))
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B97468, memory_order_acquire) & 1) == 0)
      {
        long long v78 = (pxrInternal__aapl__pxrReserved__::HdCoordSysSchema *)__cxa_guard_acquire(&qword_267B97468);
        if (v78)
        {
          DefaultLocator = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdCoordSysSchema::GetDefaultLocator(v78);
          long long v80 = (pxrInternal__aapl__pxrReserved__::HdCoordSysSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCoordSysSchemaTokens);
          if (!v80) {
            long long v80 = sub_2171B0C7C(&pxrInternal__aapl__pxrReserved__::HdCoordSysSchemaTokens);
          }
          pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::Append(DefaultLocator, (pxrInternal__aapl__pxrReserved__::HdCoordSysSchemaTokens_StaticTokenType *)((char *)v80 + 8), dword_267B97430);
          __cxa_atexit((void (*)(void *))sub_217199930, dword_267B97430, &dword_216758000);
          __cxa_guard_release(&qword_267B97468);
        }
      }
      uint64_t v23 = (pxrInternal__aapl__pxrReserved__::HdXformSchema *)sub_2171EF498((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)dword_267B97430, &v83, (uint64_t **)&v84, 1);
      if (v23) {
        v82 |= 1u;
      }
      uint64_t v24 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdXformSchema::GetDefaultLocator(v23);
      if (!sub_2171EF498(v24, &v83, (uint64_t **)&v84, 1)) {
        return v82;
      }
      return v82 | 2;
    }
    int v8 = (pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
    if (!v8) {
      int v8 = sub_2171C0F34(&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
    }
    if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) == (*((void *)v8 + 14) & 0xFFFFFFFFFFFFFFF8))
    {
      uint64_t v25 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdCameraSchema::GetDefaultLocator(v8);
      BOOL v19 = (pxrInternal__aapl__pxrReserved__::HdXformSchema *)sub_2171EF498(v25, &v83, (uint64_t **)&v84, 1);
      if (v19) {
        v82 |= 0xEu;
      }
LABEL_33:
      char v26 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdXformSchema::GetDefaultLocator(v19);
      if (sub_2171EF498(v26, &v83, (uint64_t **)&v84, 1)) {
        return v82 | 1;
      }
      return v82;
    }
    BOOL IsLight = pxrInternal__aapl__pxrReserved__::HdPrimTypeIsLight(this, v5);
    if (IsLight)
    {
      int v10 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdInstancedBySchema::GetDefaultLocator((pxrInternal__aapl__pxrReserved__::HdInstancedBySchema *)IsLight);
      int v11 = (pxrInternal__aapl__pxrReserved__::HdLightSchema *)sub_2171EF498(v10, &v83, (uint64_t **)&v84, 1);
      if (v11) {
        v82 |= 0x10000u;
      }
      uint64_t v12 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdLightSchema::GetDefaultLocator(v11);
      int v13 = (pxrInternal__aapl__pxrReserved__::HdMaterialSchema *)sub_2171EF498(v12, &v83, (uint64_t **)&v84, 1);
      if (v13) {
        v82 |= 0xEu;
      }
      unint64_t v14 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdMaterialSchema::GetDefaultLocator(v13);
      uint64_t v15 = (pxrInternal__aapl__pxrReserved__::HdPrimvarsSchema *)sub_2171EF498(v14, &v83, (uint64_t **)&v84, 1);
      if (v15) {
        v82 |= 0x10u;
      }
      uint64_t v16 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdPrimvarsSchema::GetDefaultLocator(v15);
      uint64_t v17 = (pxrInternal__aapl__pxrReserved__::HdVisibilitySchema *)sub_2171EF498(v16, &v83, (uint64_t **)&v84, 1);
      if (v17) {
        v82 |= 2u;
      }
      int v18 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdVisibilitySchema::GetDefaultLocator(v17);
      BOOL v19 = (pxrInternal__aapl__pxrReserved__::HdXformSchema *)sub_2171EF498(v18, &v83, (uint64_t **)&v84, 1);
      if (v19) {
        v82 |= 2u;
      }
      goto LABEL_33;
    }
    char v27 = (pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
    if (!v27) {
      char v27 = sub_2171C0F34(&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
    }
    if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) != (*((void *)v27 + 15) & 0xFFFFFFFFFFFFFFF8))
    {
      uint64_t v28 = (pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
      if (!v28) {
        uint64_t v28 = sub_2171C0F34(&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
      }
      if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) == (*((void *)v28 + 35) & 0xFFFFFFFFFFFFFFF8))
      {
        uint64_t v37 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdExtComputationSchema::GetDefaultLocator(v28);
        long long v38 = (pxrInternal__aapl__pxrReserved__::HdExtComputationSchema *)sub_2171EF498(v37, &v83, (uint64_t **)&v84, 0);
        if (!v38) {
          return v82;
        }
        unsigned int v39 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdExtComputationSchema::GetDefaultLocator(v38);
        unint64_t v40 = v84;
        BOOL HasPrefix = pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HasPrefix(v39, (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator **)v84);
        unsigned int v42 = v82;
        if (!HasPrefix)
        {
          size_t v46 = v83;
          do
          {
            DispatchCountLocator = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator **)pxrInternal__aapl__pxrReserved__::HdExtComputationSchema::GetDispatchCountLocator((pxrInternal__aapl__pxrReserved__::HdExtComputationSchema *)HasPrefix);
            BOOL v48 = pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HasPrefix(v40, DispatchCountLocator);
            if (v48) {
              v42 |= 0x40u;
            }
            ElementCountLocator = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator **)pxrInternal__aapl__pxrReserved__::HdExtComputationSchema::GetElementCountLocator((pxrInternal__aapl__pxrReserved__::HdExtComputationSchema *)v48);
            BOOL v50 = pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HasPrefix(v40, ElementCountLocator);
            if (v50) {
              v42 |= 4u;
            }
            GlslKernelLocator = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator **)pxrInternal__aapl__pxrReserved__::HdExtComputationSchema::GetGlslKernelLocator((pxrInternal__aapl__pxrReserved__::HdExtComputationSchema *)v50);
            BOOL v52 = pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HasPrefix(v40, GlslKernelLocator);
            if (v52) {
              v42 |= 0x20u;
            }
            InputValuesLocator = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator **)pxrInternal__aapl__pxrReserved__::HdExtComputationSchema::GetInputValuesLocator((pxrInternal__aapl__pxrReserved__::HdExtComputationSchema *)v52);
            BOOL v54 = pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HasPrefix(v40, InputValuesLocator);
            if (v54
              || (InputComputationsLocator = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator **)pxrInternal__aapl__pxrReserved__::HdExtComputationSchema::GetInputComputationsLocator((pxrInternal__aapl__pxrReserved__::HdExtComputationSchema *)v54),
                  BOOL v54 = pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HasPrefix(v40, InputComputationsLocator)))
            {
              v42 |= 9u;
            }
            OutputsLocator = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator **)pxrInternal__aapl__pxrReserved__::HdExtComputationSchema::GetOutputsLocator((pxrInternal__aapl__pxrReserved__::HdExtComputationSchema *)v54);
            BOOL v57 = pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HasPrefix(v40, OutputsLocator);
            if (v57) {
              v42 |= 2u;
            }
            unint64_t v40 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)((char *)v40 + 56);
            if (v40 == (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)v46) {
              break;
            }
            uint64_t v58 = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdExtComputationSchema::GetDefaultLocator((pxrInternal__aapl__pxrReserved__::HdExtComputationSchema *)v57);
            BOOL HasPrefix = pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::Intersects(v40, v58);
          }
          while (HasPrefix);
          return v42;
        }
        return v82 | 0x6F;
      }
      long long v29 = (pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
      if (!v29) {
        long long v29 = sub_2171C0F34(&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
      }
      if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) == (*((void *)v29 + 20) & 0xFFFFFFFFFFFFFFF8))
      {
        uint64_t v43 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdIntegratorSchema::GetDefaultLocator(v29);
        if (!sub_2171EF498(v43, &v83, (uint64_t **)&v84, 1)) {
          return v82;
        }
        return v82 | 4;
      }
      uint64_t v30 = (pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
      if (!v30) {
        uint64_t v30 = sub_2171C0F34(&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
      }
      if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) == (*((void *)v30 + 21) & 0xFFFFFFFFFFFFFFF8))
      {
        int v44 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdSampleFilterSchema::GetDefaultLocator(v30);
        unint64_t v45 = (pxrInternal__aapl__pxrReserved__::HdVisibilitySchema *)sub_2171EF498(v44, &v83, (uint64_t **)&v84, 1);
        if (v45) {
          v82 |= 4u;
        }
      }
      else
      {
        int v31 = (pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
        if (!v31) {
          int v31 = sub_2171C0F34(&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
        }
        if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) != (*((void *)v31 + 22) & 0xFFFFFFFFFFFFFFF8))
        {
          uint64_t v32 = (pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
          if (!v32) {
            uint64_t v32 = sub_2171C0F34(&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
          }
          if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) == (*((void *)v32 + 23) & 0xFFFFFFFFFFFFFFF8))
          {
            long long v61 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdImageShaderSchema::GetDefaultLocator(v32);
            long long v62 = (pxrInternal__aapl__pxrReserved__::HdImageShaderSchema *)sub_2171EF498(v61, &v83, (uint64_t **)&v84, 0);
            if (!v62) {
              return v82;
            }
            int v63 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdImageShaderSchema::GetDefaultLocator(v62);
            long long v64 = v84;
            BOOL v65 = pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HasPrefix(v63, (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator **)v84);
            unsigned int v66 = v82;
            if (!v65)
            {
              unint64_t v67 = v83;
              do
              {
                EnabledLocator = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator **)pxrInternal__aapl__pxrReserved__::HdImageShaderSchema::GetEnabledLocator((pxrInternal__aapl__pxrReserved__::HdImageShaderSchema *)v65);
                BOOL v69 = pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HasPrefix(v64, EnabledLocator);
                v66 |= v69;
                PriorityLocator = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator **)pxrInternal__aapl__pxrReserved__::HdImageShaderSchema::GetPriorityLocator((pxrInternal__aapl__pxrReserved__::HdImageShaderSchema *)v69);
                BOOL v71 = pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HasPrefix(v64, PriorityLocator);
                if (v71) {
                  v66 |= 2u;
                }
                FilePathLocator = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator **)pxrInternal__aapl__pxrReserved__::HdImageShaderSchema::GetFilePathLocator((pxrInternal__aapl__pxrReserved__::HdImageShaderSchema *)v71);
                BOOL v73 = pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HasPrefix(v64, FilePathLocator);
                if (v73) {
                  v66 |= 4u;
                }
                ConstantsLocator = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator **)pxrInternal__aapl__pxrReserved__::HdImageShaderSchema::GetConstantsLocator((pxrInternal__aapl__pxrReserved__::HdImageShaderSchema *)v73);
                BOOL v75 = pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HasPrefix(v64, ConstantsLocator);
                if (v75) {
                  v66 |= 8u;
                }
                long long v64 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)((char *)v64 + 56);
                if (v64 == (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)v67) {
                  break;
                }
                uint64_t v76 = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdImageShaderSchema::GetDefaultLocator((pxrInternal__aapl__pxrReserved__::HdImageShaderSchema *)v75);
                BOOL v65 = pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::Intersects(v64, v76);
              }
              while (v65);
              return v66;
            }
            return v82 | 0xF;
          }
          uint64_t v33 = (void *)atomic_load((unint64_t *)&qword_267B974B0);
          if (!v33) {
            uint64_t v33 = sub_2171F0670(&qword_267B974B0);
          }
          uint64_t v34 = sub_2168CB1F4(v33, this);
          int v35 = v34;
          if (atomic_load((unint64_t *)&qword_267B974B0))
          {
            if (v34)
            {
LABEL_59:
              sub_2171EFD94((uint64_t)(v35 + 3), (uint64_t)a2, (uint64_t)&v82);
              return v82;
            }
          }
          else
          {
            sub_2171F0670(&qword_267B974B0);
            if (v35) {
              goto LABEL_59;
            }
          }
          pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)v85);
          int v77 = sub_2171EF498((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)v85, &v83, (uint64_t **)&v84, 1);
          sub_217199B64((uint64_t)v85);
          if (!v77) {
            return v82;
          }
          return v82 | 0xFFFFFFFD;
        }
        long long v59 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdDisplayFilterSchema::GetDefaultLocator(v31);
        unint64_t v45 = (pxrInternal__aapl__pxrReserved__::HdVisibilitySchema *)sub_2171EF498(v59, &v83, (uint64_t **)&v84, 1);
        if (v45) {
          v82 |= 4u;
        }
      }
      long long v60 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdVisibilitySchema::GetDefaultLocator(v45);
      if (!sub_2171EF498(v60, &v83, (uint64_t **)&v84, 1)) {
        return v82;
      }
      return v82 | 0x400;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B974A8, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_267B974A8))
    {
      long long v81 = (pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
      if (!v81) {
        long long v81 = sub_2171C0F34(&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
      }
      pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&unk_267B97470, (pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens_StaticTokenType *)((char *)v81 + 120));
      __cxa_atexit((void (*)(void *))sub_217199930, &unk_267B97470, &dword_216758000);
      __cxa_guard_release(&qword_267B974A8);
    }
    if (!sub_2171EF498((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&unk_267B97470, &v83, (uint64_t **)&v84, 1))return v82; {
    return v82 | 0xFFFFFFFD;
    }
  }
  uint64_t v21 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdMaterialSchema::GetDefaultLocator(v6);
  if (sub_2171EF498(v21, &v83, (uint64_t **)&v84, 1)) {
    return v82 | 0xC;
  }
  return v82;
}

void sub_2171EFD54(_Unwind_Exception *a1)
{
}

uint64_t sub_2171EFD94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    sub_21683A7CC();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v3 + 48))(v3, a2, &v5);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdDirtyBitsTranslator::InstancerLocatorSetToDirtyBits(pxrInternal__aapl__pxrReserved__::HdDirtyBitsTranslator *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *a3)
{
  uint64_t v4 = (uint64_t *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::begin(a2);
  uint64_t v17 = v4;
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::end(a2);
  if (v4 == (uint64_t *)v5) {
    return 0;
  }
  int v6 = pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::EmptyLocator(v5);
  if (sub_2171DE8DC(v4, (uint64_t)v6)) {
    return 4294967293;
  }
  uint64_t v16 = (pxrInternal__aapl__pxrReserved__::HdInstancedBySchema *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::end(a2);
  DefaultLocator = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdInstancedBySchema::GetDefaultLocator(v16);
  char v9 = (pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchema *)sub_2171EF498(DefaultLocator, (uint64_t **)&v16, &v17, 1);
  if (v9) {
    unsigned int v10 = 0x10000;
  }
  else {
    unsigned int v10 = 0;
  }
  int v11 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchema::GetDefaultLocator(v9);
  uint64_t v12 = (pxrInternal__aapl__pxrReserved__::HdPrimvarsSchema *)sub_2171EF498(v11, (uint64_t **)&v16, &v17, 1);
  if (v12) {
    v10 |= 0x20000u;
  }
  int v13 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdPrimvarsSchema::GetDefaultLocator(v12);
  unint64_t v14 = (pxrInternal__aapl__pxrReserved__::HdXformSchema *)sub_2171EF498(v13, (uint64_t **)&v16, &v17, 1);
  if (v14) {
    v10 |= 0x40u;
  }
  uint64_t v15 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdXformSchema::GetDefaultLocator(v14);
  if (sub_2171EF498(v15, (uint64_t **)&v16, &v17, 1)) {
    return v10 | 0x200;
  }
  else {
    return v10;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::HdDirtyBitsTranslator::BprimLocatorSetToDirtyBits(pxrInternal__aapl__pxrReserved__::HdDirtyBitsTranslator *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *a3)
{
  char v26 = (uint64_t *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::begin(a2);
  if (v26 == (uint64_t *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::end(a2)) {
    return 0;
  }
  uint64_t v25 = (uint64_t *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::end(a2);
  int v6 = (pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  if (!v6) {
    int v6 = sub_2171C0F34(&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
  }
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) == (*((void *)v6 + 36) & 0xFFFFFFFFFFFFFFF8))
  {
    DefaultLocator = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdRenderBufferSchema::GetDefaultLocator(v6);
    return sub_2171EF498(DefaultLocator, &v25, &v26, 1);
  }
  else
  {
    unint64_t v7 = (pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
    if (!v7) {
      unint64_t v7 = sub_2171C0F34(&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
    }
    if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) == (*((void *)v7 + 37) & 0xFFFFFFFFFFFFFFF8))
    {
      ActiveLocator = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdRenderSettingsSchema::GetActiveLocator(v7);
      uint64_t v12 = (pxrInternal__aapl__pxrReserved__::HdRenderSettingsSchema *)sub_2171EF498(ActiveLocator, &v25, &v26, 1);
      if (v12) {
        unsigned int v13 = 2;
      }
      else {
        unsigned int v13 = 0;
      }
      NamespacedSettingsLocator = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdRenderSettingsSchema::GetNamespacedSettingsLocator(v12);
      uint64_t v15 = (pxrInternal__aapl__pxrReserved__::HdRenderSettingsSchema *)sub_2171EF498(NamespacedSettingsLocator, &v25, &v26, 1);
      if (v15) {
        v13 |= 4u;
      }
      RenderProductsLocator = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdRenderSettingsSchema::GetRenderProductsLocator(v15);
      uint64_t v17 = (pxrInternal__aapl__pxrReserved__::HdRenderSettingsSchema *)sub_2171EF498(RenderProductsLocator, &v25, &v26, 1);
      if (v17) {
        v13 |= 8u;
      }
      IncludedPurposesLocator = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdRenderSettingsSchema::GetIncludedPurposesLocator(v17);
      BOOL v19 = (pxrInternal__aapl__pxrReserved__::HdRenderSettingsSchema *)sub_2171EF498(IncludedPurposesLocator, &v25, &v26, 1);
      if (v19) {
        v13 |= 0x10u;
      }
      MaterialBindingPurposesLocator = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdRenderSettingsSchema::GetMaterialBindingPurposesLocator(v19);
      uint64_t v21 = (pxrInternal__aapl__pxrReserved__::HdRenderSettingsSchema *)sub_2171EF498(MaterialBindingPurposesLocator, &v25, &v26, 1);
      if (v21) {
        v13 |= 0x20u;
      }
      RenderingColorSpaceLocator = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdRenderSettingsSchema::GetRenderingColorSpaceLocator(v21);
      uint64_t v23 = (pxrInternal__aapl__pxrReserved__::HdRenderSettingsSchema *)sub_2171EF498(RenderingColorSpaceLocator, &v25, &v26, 1);
      if (v23) {
        v13 |= 0x40u;
      }
      ShutterIntervalLocator = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdRenderSettingsSchema::GetShutterIntervalLocator(v23);
      if (sub_2171EF498(ShutterIntervalLocator, &v25, &v26, 1)) {
        return v13 | 0x80;
      }
      else {
        return v13;
      }
    }
    else
    {
      uint64_t result = pxrInternal__aapl__pxrReserved__::HdLegacyPrimTypeIsVolumeField(this, v5);
      if (result)
      {
        char v9 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdVolumeFieldSchema::GetDefaultLocator((pxrInternal__aapl__pxrReserved__::HdVolumeFieldSchema *)result);
        if (sub_2171EF498(v9, &v25, &v26, 1)) {
          return 2;
        }
        else {
          return 0;
        }
      }
    }
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::HdDirtyBitsTranslator::RegisterTranslatorsForCustomSprimType(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  void v10[4] = *MEMORY[0x263EF8340];
  int v6 = (_OWORD *)atomic_load((unint64_t *)&qword_267B974B0);
  if (!v6) {
    int v6 = sub_2171F0670(&qword_267B974B0);
  }
  sub_2171F0250(&v9, a1, a2);
  sub_2171F0768((uint64_t)v6, &v9, &v9);
  sub_2171F0360(v10);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  unint64_t v7 = (_OWORD *)atomic_load((unint64_t *)&qword_267B97428);
  if (!v7) {
    unint64_t v7 = sub_2171F0578(&qword_267B97428);
  }
  sub_2171F03E4(&v9, a1, a3);
  sub_2171F0B1C((uint64_t)v7, &v9, &v9);
  uint64_t result = sub_2171F04F4(v10);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void sub_2171F020C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_2171F04F4((void *)(v9 + 8));
  if ((a9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_2171F0250(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  sub_2171F02C8((uint64_t)(a1 + 1), a3);
  return a1;
}

uint64_t sub_2171F02C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_2171F0360(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *sub_2171F03E4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  sub_2171F045C((uint64_t)(a1 + 1), a3);
  return a1;
}

uint64_t sub_2171F045C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_2171F04F4(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

_OWORD *sub_2171F0578(atomic_ullong *a1)
{
  uint64_t result = operator new(0x28uLL);
  uint64_t v3 = 0;
  _OWORD *result = 0u;
  result[1] = 0u;
  *((_DWORD *)result + 8) = 1065353216;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    uint64_t v4 = (void *)sub_2171F05D0((uint64_t)result);
    operator delete(v4);
    return (_OWORD *)atomic_load((unint64_t *)a1);
  }
  return result;
}

uint64_t sub_2171F05D0(uint64_t a1)
{
  sub_2171F060C(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_2171F060C(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_2171F04F4(v2 + 3);
      uint64_t v4 = v2[2];
      if ((v4 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

_OWORD *sub_2171F0670(atomic_ullong *a1)
{
  uint64_t result = operator new(0x28uLL);
  uint64_t v3 = 0;
  _OWORD *result = 0u;
  result[1] = 0u;
  *((_DWORD *)result + 8) = 1065353216;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    uint64_t v4 = (void *)sub_2171F06C8((uint64_t)result);
    operator delete(v4);
    return (_OWORD *)atomic_load((unint64_t *)a1);
  }
  return result;
}

uint64_t sub_2171F06C8(uint64_t a1)
{
  sub_2171F0704(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_2171F0704(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_2171F0360(v2 + 3);
      uint64_t v4 = v2[2];
      if ((v4 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t *sub_2171F0768(uint64_t a1, void *a2, uint64_t *a3)
{
  unint64_t v6 = *a2 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = bswap64(0x9E3779B97F4A7C55 * v6);
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
    }
    else
    {
      unint64_t v3 = v7 & (v8 - 1);
    }
    unsigned int v10 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if ((i[2] & 0xFFFFFFFFFFFFFFF8) == v6) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v3) {
            break;
          }
        }
      }
    }
  }
  unsigned int v13 = (uint64_t *)(a1 + 16);
  uint64_t i = (uint64_t *)operator new(0x38uLL);
  *uint64_t i = 0;
  i[1] = v7;
  sub_2171F09D0(i + 2, a3);
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_21678A04C(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
      else {
        unint64_t v3 = v7;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  uint64_t v21 = *(uint64_t **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    *uint64_t i = *v21;
LABEL_38:
    *uint64_t v21 = (uint64_t)i;
    goto LABEL_39;
  }
  *uint64_t i = *v13;
  *unsigned int v13 = (uint64_t)i;
  *(void *)(v20 + 8 * v3) = v13;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    uint64_t v21 = (uint64_t *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_2171F09B4(_Unwind_Exception *a1)
{
  sub_2171F0AAC(v2, v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_2171F09D0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  sub_2171F0A2C((uint64_t)(a1 + 1), (uint64_t)(a2 + 1));
  return a1;
}

uint64_t sub_2171F0A2C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void sub_2171F0AAC(uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    sub_2171F0360(a2 + 3);
    uint64_t v3 = a2[2];
    if ((v3 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else if (!a2)
  {
    return;
  }

  operator delete(a2);
}

uint64_t *sub_2171F0B1C(uint64_t a1, void *a2, uint64_t *a3)
{
  unint64_t v6 = *a2 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = bswap64(0x9E3779B97F4A7C55 * v6);
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
    }
    else
    {
      unint64_t v3 = v7 & (v8 - 1);
    }
    unsigned int v10 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if ((i[2] & 0xFFFFFFFFFFFFFFF8) == v6) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v3) {
            break;
          }
        }
      }
    }
  }
  unsigned int v13 = (uint64_t *)(a1 + 16);
  uint64_t i = (uint64_t *)operator new(0x38uLL);
  *uint64_t i = 0;
  i[1] = v7;
  sub_2171F0D84(i + 2, a3);
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_21678A04C(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
      else {
        unint64_t v3 = v7;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  uint64_t v21 = *(uint64_t **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    *uint64_t i = *v21;
LABEL_38:
    *uint64_t v21 = (uint64_t)i;
    goto LABEL_39;
  }
  *uint64_t i = *v13;
  *unsigned int v13 = (uint64_t)i;
  *(void *)(v20 + 8 * v3) = v13;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    uint64_t v21 = (uint64_t *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_2171F0D68(_Unwind_Exception *a1)
{
  sub_2171F0E60(v2, v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_2171F0D84(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  sub_2171F0DE0((uint64_t)(a1 + 1), (uint64_t)(a2 + 1));
  return a1;
}

uint64_t sub_2171F0DE0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void sub_2171F0E60(uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    sub_2171F04F4(a2 + 3);
    uint64_t v3 = a2[2];
    if ((v3 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else if (!a2)
  {
    return;
  }

  operator delete(a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdDirtyList::HdDirtyList(uint64_t a1, _DWORD *a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = a2;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = a2[911] - 1;
  *(_DWORD *)(a1 + 84) = a2[907] - 1;
  *(_DWORD *)(a1 + 88) = pxrInternal__aapl__pxrReserved__::HdChangeTracker::GetRenderTagVersion((pxrInternal__aapl__pxrReserved__::HdChangeTracker *)(a2 + 104))
                       - 1;
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(*(void *)a1 + 3624) - 1;
  *(_WORD *)(a1 + 96) = 0;
  return a1;
}

void sub_2171F0F60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  unint64_t v12 = v11;
  a10 = (void **)(v10 + 56);
  sub_216981168(&a10);
  a10 = (void **)(v10 + 32);
  sub_2171F22C4(&a10);
  a10 = v12;
  sub_216889A04(&a10);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdDirtyList::_GetChangeTracker(pxrInternal__aapl__pxrReserved__::HdDirtyList *this)
{
  return *(void *)this + 416;
}

uint64_t *pxrInternal__aapl__pxrReserved__::HdDirtyList::GetDirtyRprims(pxrInternal__aapl__pxrReserved__::HdDirtyList *this)
{
  sub_216851EE4((uint64_t)&v8, "hd", "const SdfPathVector &pxrInternal__aapl__pxrReserved__::HdDirtyList::GetDirtyRprims()");
  int v2 = *(_DWORD *)(*(void *)this + 3644);
  if (*((_DWORD *)this + 20) != v2 || *((unsigned char *)this + 97) || *((unsigned char *)this + 96))
  {
    *((_DWORD *)this + 20) = v2;
    pxrInternal__aapl__pxrReserved__::HdDirtyList::_UpdateDirtyIdsIfNeeded(this);
    uint64_t v3 = (uint64_t *)((char *)this + 56);
  }
  else
  {
    if (sub_2171A6C8C(8)) {
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"DirtyList: Scene (%d) state version and filters unchanged.\n", v6, v7, *((unsigned int *)this + 20));
    }
    if (atomic_load_explicit((atomic_uchar *volatile)&qword_267B974D0, memory_order_acquire))
    {
      uint64_t v3 = &qword_267B974B8;
    }
    else
    {
      uint64_t v3 = &qword_267B974B8;
      if (__cxa_guard_acquire(&qword_267B974D0))
      {
        qword_267B974B8 = 0;
        unk_267B974C0 = 0;
        qword_267B974C8 = 0;
        __cxa_atexit((void (*)(void *))sub_216BBD2B4, &qword_267B974B8, &dword_216758000);
        __cxa_guard_release(&qword_267B974D0);
      }
    }
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v3;
}

void sub_2171F10CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_21684E6B8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdDirtyList::_UpdateDirtyIdsIfNeeded(pxrInternal__aapl__pxrReserved__::HdDirtyList *this)
{
  uint64_t v48 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(unsigned int *)(*(void *)this + 3628);
  uint64_t RenderTagVersion = pxrInternal__aapl__pxrReserved__::HdChangeTracker::GetRenderTagVersion((pxrInternal__aapl__pxrReserved__::HdChangeTracker *)(*(void *)this + 416));
  uint64_t v4 = RenderTagVersion;
  BOOL v5 = *((unsigned char *)this + 96) || *((_DWORD *)this + 21) != v2 || *((_DWORD *)this + 22) != RenderTagVersion;
  uint64_t v6 = *(unsigned int *)(*(void *)this + 3624);
  if (*((unsigned char *)this + 97))
  {
    BOOL v7 = 1;
LABEL_11:
    uint64_t v10 = (pxrInternal__aapl__pxrReserved__::HdPerfLog *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::HdPerfLog>::_instance);
    if (!v10) {
      pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::HdPerfLog>::_CreateInstance();
    }
    int v11 = (pxrInternal__aapl__pxrReserved__::HdPerfTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPerfTokens);
    if (!v11) {
      int v11 = sub_21719ACC0(&pxrInternal__aapl__pxrReserved__::HdPerfTokens);
    }
    pxrInternal__aapl__pxrReserved__::HdPerfLog::IncrementCounter(v10, (pxrInternal__aapl__pxrReserved__::HdPerfTokens_StaticTokenType *)((char *)v11 + 72));
    if (v5)
    {
      if (sub_2171A6C8C(8)) {
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"DirtyList: Filter Changed:\n  (Rprim Index Version %d -> %d)\n  (Render Tag Version %d -> %d)\n  (Tracked Render Tags or Reprs changed %d)\n", v13, v14, *((unsigned int *)this + 21), v2, *((unsigned int *)this + 22), v4, *((unsigned __int8 *)this + 96));
      }
      int v15 = 0;
      *((_DWORD *)this + 21) = v2;
      *((_DWORD *)this + 22) = v4;
      *((_DWORD *)this + 23) = v6;
      *((_WORD *)this + 48) = 256;
    }
    else if (v7)
    {
      if (sub_2171A6C8C(8)) {
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"DirtyList: varying state version (%d -> %d)\n", v16, v17, *((unsigned int *)this + 23), v6);
      }
      *((_DWORD *)this + 23) = v6;
      *((unsigned char *)this + 97) = 0;
      int v15 = 2;
    }
    else
    {
      v46[0] = (uint64_t)"hd/dirtyList.cpp";
      v46[1] = (uint64_t)"_UpdateDirtyIdsIfNeeded";
      v46[2] = 289;
      v46[3] = (uint64_t)"void pxrInternal__aapl__pxrReserved__::HdDirtyList::_UpdateDirtyIdsIfNeeded()";
      char v47 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v46, (pxrInternal__aapl__pxrReserved__ *)"Unhandled scenario in dirty list update logic.\n", v12);
      int v15 = 0x7FFFFF;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B974F0, memory_order_acquire) & 1) == 0)
    {
      unint64_t v40 = (pxrInternal__aapl__pxrReserved__::SdfPath *)__cxa_guard_acquire(&qword_267B974F0);
      if (v40)
      {
        uint64_t v41 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v40);
        sub_216981010(v46, v41);
        sub_21698105C((_DWORD *)v46 + 1, v41 + 1);
        sub_2171F1BC4(qword_267B974D8, v46, 1uLL);
        sub_21697B754(v46);
        __cxa_atexit((void (*)(void *))sub_216BBD2B4, qword_267B974D8, &dword_216758000);
        __cxa_guard_release(&qword_267B974F0);
      }
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B97510, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_267B97510))
    {
      qword_267B974F8 = 0;
      unk_267B97500 = 0;
      qword_267B97508 = 0;
      __cxa_atexit((void (*)(void *))sub_216BBD2B4, &qword_267B974F8, &dword_216758000);
      __cxa_guard_release(&qword_267B97510);
    }
    Ids = (uint64_t *)pxrInternal__aapl__pxrReserved__::Hd_SortedIds::GetIds((pxrInternal__aapl__pxrReserved__::Hd_SortedIds *)(*(void *)this + 88));
    uint64_t v42 = *(void *)this;
    uint64_t v43 = (char *)this + 8;
    int v44 = v15;
    size_t v19 = (_DWORD *)*((void *)this + 7);
    for (uint64_t i = (_DWORD *)*((void *)this + 8); i != v19; sub_216981128((uint64_t)this + 72, i))
      i -= 2;
    *((void *)this + 8) = v19;
    sub_2171F1D4C((uint64_t)v46);
    pxrInternal__aapl__pxrReserved__::HdPrimGather::PredicatedFilter(v46, Ids, qword_267B974D8, &qword_267B974F8, (unsigned int (*)(unint64_t, uint64_t))sub_2171F1C60, (uint64_t)&v42, (uint64_t)this + 56);
    if (sub_2171A6C8C(8))
    {
      sub_216779180(MEMORY[0x263F8C100], (uint64_t)"Dirty list filter predicate:\n", 29);
      sub_216779180(MEMORY[0x263F8C100], (uint64_t)"  Render tags [", 15);
      uint64_t v21 = *(void **)v43;
      unint64_t v22 = (void *)*((void *)v43 + 1);
      if (*(void **)v43 != v22)
      {
        uint64_t v23 = (void *)MEMORY[0x263F8C100];
        do
        {
          uint64_t v24 = pxrInternal__aapl__pxrReserved__::operator<<(v23, v21);
          sub_216779180(v24, (uint64_t)", ", 2);
          ++v21;
        }
        while (v21 != v22);
      }
      uint64_t v25 = sub_216779180(MEMORY[0x263F8C100], (uint64_t)"]", 1);
      std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(void *)(*v25 - 24)));
      char v26 = std::locale::use_facet(&v45, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10);
      std::locale::~locale(&v45);
      std::ostream::put();
      std::ostream::flush();
      sub_216779180(MEMORY[0x263F8C100], (uint64_t)"  Mask : ", 9);
      char v27 = (void *)std::ostream::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)v27 + *(void *)(*v27 - 24)));
      uint64_t v28 = std::locale::use_facet(&v45, MEMORY[0x263F8C108]);
      ((void (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 10);
      std::locale::~locale(&v45);
      std::ostream::put();
      std::ostream::flush();
    }
    if (v5)
    {
      long long v29 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)*((void *)this + 7);
      uint64_t v30 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)*((void *)this + 8);
      while (v29 != v30)
      {
        pxrInternal__aapl__pxrReserved__::HdChangeTracker::MarkRprimDirty((pxrInternal__aapl__pxrReserved__::HdChangeTracker *)(*(void *)this + 416), v29, 1);
        long long v29 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v29 + 8);
      }
    }
    if (sub_2171A6C8C(8))
    {
      if (sub_2171A6C8C(8)) {
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"  dirtyRprimIds:\n", v31, v32);
      }
      uint64_t v33 = (pxrInternal__aapl__pxrReserved__::SdfPath *)*((void *)this + 7);
      for (uint64_t j = (pxrInternal__aapl__pxrReserved__::SdfPath *)*((void *)this + 8);
            v33 != j;
            uint64_t v33 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v33 + 8))
      {
        if (sub_2171A6C8C(8))
        {
          Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v33);
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"    %s\n", v36, v37, Text);
        }
      }
    }
    sub_2171F2274((uint64_t)v46);
    return;
  }
  int v8 = *((_DWORD *)this + 23);
  BOOL v7 = v8 != v6;
  char v9 = v8 != v6 || v5;
  if (v9) {
    goto LABEL_11;
  }
  if (sub_2171A6C8C(8))
  {
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"DirtyList: reusing cached dirtyIds\n", v38, v39);
  }
}

void sub_2171F16E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::locale a17, int a18)
{
}

void pxrInternal__aapl__pxrReserved__::HdDirtyList::UpdateRenderTagsAndReprSelectors(uint64_t a1, uint64_t **a2, uint64_t **a3)
{
  uint64_t v30 = 0;
  int v31 = 0;
  uint64_t v32 = 0;
  sub_2171F23A8(*(uint64_t **)(a1 + 8), *(uint64_t **)(a1 + 16), *a2, a2[1], &v30, (uint64_t)v33, v26);
  uint64_t v6 = *(char **)(a1 + 8);
  BOOL v5 = *(char **)(a1 + 16);
  BOOL v7 = v31;
  if (v5 - v6 != v31 - v30)
  {
LABEL_7:
    *(void *)(a1 + 8) = v30;
    *(void *)(a1 + 16) = v7;
    uint64_t v30 = v6;
    int v31 = v5;
    uint64_t v11 = *(void *)(a1 + 24);
    *(void *)(a1 + 24) = v32;
    uint64_t v32 = v11;
    char v10 = 1;
    goto LABEL_8;
  }
  if (v6 != v5)
  {
    int v8 = v30;
    char v9 = *(char **)(a1 + 8);
    while ((*(void *)v9 & 0xFFFFFFFFFFFFFFF8) == (*(void *)v8 & 0xFFFFFFFFFFFFFFF8))
    {
      v9 += 8;
      v8 += 8;
      if (v9 == v5) {
        goto LABEL_6;
      }
    }
    goto LABEL_7;
  }
LABEL_6:
  char v10 = 0;
LABEL_8:
  v26[0] = (uint64_t *)&v30;
  sub_216889A04((void ***)v26);
  int v12 = *(_DWORD *)(*(void *)a1 + 3628);
  int RenderTagVersion = pxrInternal__aapl__pxrReserved__::HdChangeTracker::GetRenderTagVersion((pxrInternal__aapl__pxrReserved__::HdChangeTracker *)(*(void *)a1 + 416));
  if ((v10 & 1) == 0 && *(_DWORD *)(a1 + 84) == v12 && *(_DWORD *)(a1 + 88) == RenderTagVersion)
  {
    uint64_t v30 = 0;
    int v31 = 0;
    uint64_t v32 = 0;
    sub_2171F2918(*(uint64_t **)(a1 + 32), *(uint64_t **)(a1 + 40), *a3, a3[1], (uint64_t *)&v30, v26);
    float v14 = *(char **)(a1 + 32);
    int v15 = *(char **)(a1 + 40);
    unint64_t v17 = v30;
    BOOL v16 = v31;
    if (v15 - v14 == v31 - v30)
    {
      if (v14 == v15) {
        goto LABEL_18;
      }
      do
      {
        BOOL v18 = pxrInternal__aapl__pxrReserved__::HdReprSelector::operator==(v14, v17);
        v14 += 24;
        v17 += 24;
      }
      while (v14 != v15 && v18);
      if (v18)
      {
LABEL_18:
        v26[0] = (uint64_t *)&v30;
        sub_2171F22C4((void ***)v26);
        return;
      }
      float v14 = *(char **)(a1 + 32);
      int v15 = *(char **)(a1 + 40);
      unint64_t v17 = v30;
      BOOL v16 = v31;
    }
    *(void *)(a1 + 32) = v17;
    *(void *)(a1 + 40) = v16;
    uint64_t v30 = v14;
    int v31 = v15;
    uint64_t v25 = *(void *)(a1 + 48);
    *(void *)(a1 + 48) = v32;
    uint64_t v32 = v25;
    v26[0] = (uint64_t *)&v30;
    sub_2171F22C4((void ***)v26);
  }
  else
  {
    if (sub_2171A6C8C(8))
    {
      sub_216778A5C((uint64_t)v26);
      uint64_t v20 = sub_216779180(v27, (uint64_t)"Resetting tracked reprs in dirty list from ", 43);
      uint64_t v21 = sub_2171F1B38(v20, a1 + 32);
      unint64_t v22 = sub_216779180(v21, (uint64_t)" to ", 4);
      uint64_t v23 = sub_2171F1B38(v22, (uint64_t)a3);
      sub_216779180(v23, (uint64_t)"\n", 1);
      std::stringbuf::str();
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((uint64_t)&v30);
      if (SHIBYTE(v32) < 0) {
        operator delete(v30);
      }
      v26[0] = *(uint64_t **)MEMORY[0x263F8C2B8];
      uint64_t v24 = *(void *)(MEMORY[0x263F8C2B8] + 72);
      *(uint64_t **)((char *)v26 + *(v26[0] - 3)) = *(uint64_t **)(MEMORY[0x263F8C2B8] + 64);
      v27[0] = v24;
      v27[1] = MEMORY[0x263F8C318] + 16;
      if (v28 < 0) {
        operator delete((void *)v27[9]);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x21D447E60](&v29);
    }
    if ((uint64_t **)(a1 + 32) != a3) {
      sub_2171F2500(a1 + 32, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (a3[1] - *a3));
    }
  }
  *(unsigned char *)(a1 + 96) = 1;
}

void sub_2171F1AD8(_Unwind_Exception *a1)
{
  *(void *)(v1 - 72) = v1 - 104;
  sub_2171F22C4((void ***)(v1 - 72));
  _Unwind_Resume(a1);
}

void *sub_2171F1B38(void *a1, uint64_t a2)
{
  sub_216779180(a1, (uint64_t)"[", 1);
  uint64_t v4 = *(void **)a2;
  BOOL v5 = *(void **)(a2 + 8);
  if (*(void **)a2 != v5)
  {
    do
    {
      uint64_t v6 = pxrInternal__aapl__pxrReserved__::operator<<(a1, v4);
      sub_216779180(v6, (uint64_t)", ", 2);
      v4 += 3;
    }
    while (v4 != v5);
  }
  sub_216779180(a1, (uint64_t)"]", 1);
  return a1;
}

void *sub_2171F1BC4(void *a1, _DWORD *a2, unint64_t a3)
{
  a1[2] = 0;
  uint64_t v4 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  if (a3)
  {
    sub_21677CACC(a1, a3);
    a1[1] = sub_216980F74(v4, a2, &a2[2 * a3], (_DWORD *)a1[1]);
  }
  return a1;
}

void sub_2171F1C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_216981168(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2171F1C60(pxrInternal__aapl__pxrReserved__::SdfPath *a1, uint64_t a2)
{
  uint64_t v4 = *(pxrInternal__aapl__pxrReserved__::HdRenderIndex **)a2;
  int v5 = *(_DWORD *)(a2 + 16);
  int RprimDirtyBits = pxrInternal__aapl__pxrReserved__::HdChangeTracker::GetRprimDirtyBits((pxrInternal__aapl__pxrReserved__::HdChangeTracker *)(*(void *)a2 + 416), a1);
  if (v5) {
    BOOL v7 = (RprimDirtyBits & v5) == 0;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7) {
    return 0;
  }
  if (**(void **)(a2 + 8) != *(void *)(*(void *)(a2 + 8) + 8))
  {
    pxrInternal__aapl__pxrReserved__::HdRenderIndex::UpdateRenderTag(v4, a1, RprimDirtyBits, (atomic_uint **)&v14);
    uint64_t v8 = *(void *)(a2 + 8);
    uint64_t v9 = *(void **)v8;
    uint64_t v10 = *(void *)(v8 + 8) - *(void *)v8;
    if (v10)
    {
      unint64_t v11 = v10 >> 3;
      int v12 = (atomic_uint *)(v14 & 0xFFFFFFFFFFFFFFF8);
      if (v11 <= 1) {
        unint64_t v11 = 1;
      }
      while ((atomic_uint *)(*v9 & 0xFFFFFFFFFFFFFFF8) != v12)
      {
        ++v9;
        if (!--v11) {
          goto LABEL_11;
        }
      }
      if ((v14 & 7) != 0) {
        atomic_fetch_add_explicit(v12, 0xFFFFFFFE, memory_order_release);
      }
      return 1;
    }
LABEL_11:
    if ((v14 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    return 0;
  }
  return 1;
}

uint64_t sub_2171F1D4C(uint64_t a1)
{
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  sub_2171F1DB4((void *)(a1 + 48));
  return a1;
}

void sub_2171F1D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  int v12 = *(void **)(v10 + 24);
  if (v12)
  {
    *(void *)(v10 + 32) = v12;
    operator delete(v12);
  }
  a10 = (void **)v10;
  sub_2171F219C(&a10);
  _Unwind_Resume(a1);
}

void *sub_2171F1DB4(void *a1)
{
  *a1 = &unk_26C74B518;
  __dmb(0xBu);
  a1[1] = 0;
  __dmb(0xBu);
  a1[2] = 0;
  *a1 = &unk_26C780208;
  uint64_t v2 = (void *)tbb::internal::allocate_via_handler_v3((tbb::internal *)8);
  void *v2 = &unk_26C780268;
  a1[3] = v2;
  for (uint64_t i = 9; i != 12; ++i)
    a1[i] = 0;
  a1[7] = 0;
  a1[6] = 0;
  a1[8] = a1 + 9;
  a1[5] = sub_2171F201C;
  return a1;
}

void sub_2171F1E80(_Unwind_Exception *a1)
{
  void *v1 = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_2171F1E88(uint64_t a1)
{
  uint64_t v2 = tbb::internal::concurrent_vector_base_v3::internal_grow_by((atomic_ullong *)(a1 + 40), 1uLL, (void *)0x80, (void (*)(void *, const void *, unint64_t))tbb::concurrent_vector<tbb::internal::padded<tbb::interface6::internal::ets_element<std::vector<pxrInternal__aapl__pxrReserved__::HdPrimGather::_Range>>,128ul>,tbb::cache_aligned_allocator<tbb::internal::padded<tbb::interface6::internal::ets_element<std::vector<pxrInternal__aapl__pxrReserved__::HdPrimGather::_Range>>,128ul>>>::initialize_array, 0);
  unint64_t v3 = sub_216851020((unint64_t)v2);
  uint64_t v4 = *(void *)(a1 + 64);
  __dmb(0xBu);
  uint64_t v5 = *(void *)(v4 + 8 * v3) + (((void)v2 - ((1 << v3) & 0x1FFFFFFFFFFFFFELL)) << 7);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 24) + 32))(*(void *)(a1 + 24), v5);
  *(unsigned char *)(v5 + 24) = 1;
  return v5;
}

uint64_t sub_2171F1F30(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return tbb::internal::NFS_Allocate((unint64_t)(a2 + 7) >> 3, 8, 0, a4);
}

uint64_t sub_2171F1F44(int a1, tbb::internal *this)
{
  return tbb::internal::NFS_Free(this, this);
}

void sub_2171F1F50(void *a1)
{
  uint64_t v1 = sub_2171F203C(a1);

  operator delete(v1);
}

void *sub_2171F1F78()
{
  uint64_t result = (void *)tbb::internal::allocate_via_handler_v3((tbb::internal *)8);
  void *result = &unk_26C780268;
  return result;
}

uint64_t sub_2171F1FB0(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);

  return tbb::internal::deallocate_via_handler_v3(a1, v2);
}

void sub_2171F2010(uint64_t a1, void *a2)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

uint64_t sub_2171F201C(int a1, tbb::internal *this, uint64_t a3, void *a4)
{
  return tbb::internal::NFS_Allocate((unint64_t)this, 128, 0, a4);
}

void tbb::concurrent_vector<tbb::internal::padded<tbb::interface6::internal::ets_element<std::vector<pxrInternal__aapl__pxrReserved__::HdPrimGather::_Range>>,128ul>,tbb::cache_aligned_allocator<tbb::internal::padded<tbb::interface6::internal::ets_element<std::vector<pxrInternal__aapl__pxrReserved__::HdPrimGather::_Range>>,128ul>>>::initialize_array(void *a1, uint64_t a2, uint64_t a3)
{
  if (a3) {
    bzero(a1, a3 << 7);
  }
}

void *sub_2171F203C(void *a1)
{
  *a1 = &unk_26C780208;
  uint64_t v2 = a1[3];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  sub_216850D6C((uint64_t)a1);
  sub_2171F20D8(a1 + 4);
  *a1 = &unk_26C74B518;
  return a1;
}

unint64_t *sub_2171F20D8(unint64_t *a1)
{
  uint64_t v2 = (tbb::internal::concurrent_vector_base_v3 *)(a1 + 1);
  unint64_t v3 = (void *)a1[4];
  unint64_t v4 = tbb::internal::concurrent_vector_base_v3::internal_clear((tbb::internal::concurrent_vector_base_v3 *)(a1 + 1), (void (*)(void *, unint64_t))tbb::concurrent_vector<tbb::internal::padded<tbb::interface6::internal::ets_element<std::vector<pxrInternal__aapl__pxrReserved__::HdPrimGather::_Range>>,128ul>,tbb::cache_aligned_allocator<tbb::internal::padded<tbb::interface6::internal::ets_element<std::vector<pxrInternal__aapl__pxrReserved__::HdPrimGather::_Range>>,128ul>>>::destroy_array);
  sub_216850F48((uint64_t)a1, v3, v4, a1[2]);
  tbb::internal::concurrent_vector_base_v3::~concurrent_vector_base_v3(v2, v5);
  return a1;
}

void tbb::concurrent_vector<tbb::internal::padded<tbb::interface6::internal::ets_element<std::vector<pxrInternal__aapl__pxrReserved__::HdPrimGather::_Range>>,128ul>,tbb::cache_aligned_allocator<tbb::internal::padded<tbb::interface6::internal::ets_element<std::vector<pxrInternal__aapl__pxrReserved__::HdPrimGather::_Range>>,128ul>>>::destroy_array(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    uint64_t v3 = a1 + (a2 << 7) - 128;
    do
    {
      if (*(unsigned char *)(v3 + 24))
      {
        unint64_t v4 = *(void **)v3;
        if (*(void *)v3)
        {
          *(void *)(v3 + 8) = v4;
          operator delete(v4);
        }
        *(unsigned char *)(v3 + 24) = 0;
      }
      v3 -= 128;
      --v2;
    }
    while (v2);
  }
}

void sub_2171F219C(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    unint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        sub_2171F2234((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_DWORD *sub_2171F2234(uint64_t a1, _DWORD *a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a2 + 1);

  return sub_21697C414(a2);
}

uint64_t sub_2171F2274(uint64_t a1)
{
  sub_2171F203C((void *)(a1 + 48));
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  unint64_t v4 = (void **)a1;
  sub_2171F219C(&v4);
  return a1;
}

void sub_2171F22C4(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    unint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        sub_2171F235C((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_2171F235C(uint64_t a1, void *a2)
{
  uint64_t v2 = a2[2];
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = a2[1];
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

uint64_t *sub_2171F23A8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, char **a5@<X4>, uint64_t a6@<X5>, uint64_t **a7@<X8>)
{
  uint64_t v9 = a1;
  int v15 = a5;
  if (a1 == a2)
  {
LABEL_8:
    uint64_t result = sub_2171F249C(a3, a4, a5);
    a4 = result;
  }
  else
  {
    while (a3 != a4)
    {
      if (sub_2168BE1F8(a6, a3, v9))
      {
        sub_216D5FCD8(&v15, a3++);
      }
      else
      {
        a3 += sub_2168BE1F8(a6, v9, a3) ^ 1;
        sub_216D5FCD8(&v15, v9++);
      }
      if (v9 == a2)
      {
        a5 = v15;
        uint64_t v9 = a2;
        goto LABEL_8;
      }
    }
    uint64_t result = sub_2171F249C(v9, a2, v15);
    uint64_t v9 = result;
  }
  *a7 = v9;
  a7[1] = a4;
  a7[2] = v14;
  return result;
}

uint64_t *sub_2171F249C(uint64_t *a1, uint64_t *a2, char **a3)
{
  uint64_t v3 = a1;
  uint64_t v6 = a3;
  if (a1 == a2) {
    return a1;
  }
  unint64_t v4 = a2;
  do
    sub_216D5FCD8(&v6, v3++);
  while (v3 != v4);
  return v4;
}

void sub_2171F2500(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(void **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    sub_2171F2684((void *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      sub_21677CB10();
    }
    unint64_t v10 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_216782E84((void *)a1, v11);
    int v12 = sub_2171F26F4(v8, a2, a3, *(uint64_t **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    unsigned int v13 = &a2[(uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3];
    sub_2171F289C((uint64_t)&v17, a2, v13, v9);
    int v12 = sub_2171F26F4(v8, v13, a3, *(uint64_t **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  sub_2171F289C((uint64_t)&v18, a2, a3, v9);
  int v15 = v14;
  BOOL v16 = *(void **)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 3;
      sub_2171F235C(v8, v16);
    }
    while (v16 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_2171F2674(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_2171F267C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_2171F2684(void *a1)
{
  uint64_t v1 = (void *)*a1;
  if (*a1)
  {
    uint64_t v3 = (void *)a1[1];
    unint64_t v4 = (void *)*a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 3;
        sub_2171F235C((uint64_t)(a1 + 2), v3);
      }
      while (v3 != v1);
      unint64_t v4 = (void *)*a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t *sub_2171F26F4(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  unint64_t v4 = a4;
  unint64_t v11 = a4;
  int v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  void v9[2] = &v12;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_2171F2788(a1, v4, v6);
      v6 += 3;
      unint64_t v4 = v12 + 3;
      v12 += 3;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  sub_2171F2810((uint64_t)v9);
  return v4;
}

void sub_2171F2788(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  *a2 = *a3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *a2 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v4 = a3[1];
  a2[1] = v4;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    a2[1] &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v5 = a3[2];
  a2[2] = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    a2[2] &= 0xFFFFFFFFFFFFFFF8;
  }
}

uint64_t sub_2171F2810(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_2171F2848((uint64_t *)a1);
  }
  return a1;
}

void sub_2171F2848(uint64_t *a1)
{
  uint64_t v2 = (void *)a1[1];
  uint64_t v1 = (void **)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = (void *)*v2;
  if (*v1 != (void *)*v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 3;
      sub_2171F235C(v5, v3);
    }
    while (v3 != v4);
  }
}

void *sub_2171F289C(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    sub_2168D2318(a4, v5);
    sub_2168D2318(a4 + 1, v5 + 1);
    sub_2168D2318(a4 + 2, v5 + 2);
    a4 += 3;
    v5 += 3;
  }
  while (v5 != v6);
  return v6;
}

uint64_t *sub_2171F2918@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t **a6@<X8>)
{
  uint64_t v8 = a1;
  unsigned int v13 = a5;
  if (a1 == a2)
  {
LABEL_8:
    uint64_t result = sub_2171F2A6C(a3, a4, a5);
    a4 = result;
  }
  else
  {
    while (a3 != a4)
    {
      if (pxrInternal__aapl__pxrReserved__::HdReprSelector::operator<(a3, v8))
      {
        sub_2171F2A04(&v13, a3);
        a3 += 3;
      }
      else
      {
        a3 += 3 * (pxrInternal__aapl__pxrReserved__::HdReprSelector::operator<(v8, a3) ^ 1);
        sub_2171F2A04(&v13, v8);
        v8 += 3;
      }
      if (v8 == a2)
      {
        a5 = v13;
        uint64_t v8 = a2;
        goto LABEL_8;
      }
    }
    uint64_t result = sub_2171F2A6C(v8, a2, v13);
    uint64_t v8 = result;
  }
  *a6 = v8;
  a6[1] = a4;
  a6[2] = v12;
  return result;
}

uint64_t **sub_2171F2A04(uint64_t **a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (uint64_t *)(*a1)[1];
  uint64_t v5 = *a1;
  unint64_t v7 = v5[2];
  uint64_t v6 = (uint64_t)(v5 + 2);
  if ((unint64_t)v4 >= v7)
  {
    uint64_t v8 = sub_2171F2AD0(v3, a2);
  }
  else
  {
    sub_2171F2788(v6, v4, a2);
    uint64_t v8 = (uint64_t)(v4 + 3);
  }
  v3[1] = v8;
  return a1;
}

uint64_t *sub_2171F2A6C(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = a1;
  uint64_t v6 = a3;
  if (a1 == a2) {
    return a1;
  }
  uint64_t v4 = a2;
  do
  {
    sub_2171F2A04(&v6, v3);
    v3 += 3;
  }
  while (v3 != v4);
  return v4;
}

uint64_t sub_2171F2AD0(uint64_t *a1, uint64_t *a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_21677CB10();
  }
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  unint64_t v14 = a1 + 2;
  if (v6) {
    unint64_t v7 = (char *)sub_216782ED8((uint64_t)(a1 + 2), v6);
  }
  else {
    unint64_t v7 = 0;
  }
  char v10 = v7;
  unint64_t v11 = (uint64_t *)&v7[24 * v3];
  unsigned int v13 = &v7[24 * v6];
  sub_2171F2788((uint64_t)(a1 + 2), v11, a2);
  int v12 = v11 + 3;
  sub_2171F2BDC(a1, &v10);
  uint64_t v8 = a1[1];
  sub_2171F2D88(&v10);
  return v8;
}

void sub_2171F2BC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2171F2D88((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2171F2BDC(uint64_t *a1, void *a2)
{
  uint64_t result = sub_2171F2C54((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_2171F2C54(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  _OWORD v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      uint64_t v8 = *(a3 - 3);
      a3 -= 3;
      *(void *)(v7 - 24) = v8;
      *a3 = 0;
      *(void *)(v7 - 16) = a3[1];
      a3[1] = 0;
      *(void *)(v7 - 8) = a3[2];
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  sub_2171F2CFC((uint64_t)v11);
  return v9;
}

uint64_t sub_2171F2CFC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_2171F2D34((uint64_t *)a1);
  }
  return a1;
}

void sub_2171F2D34(uint64_t *a1)
{
  uint64_t v1 = *(void **)(a1[2] + 8);
  uint64_t v2 = *(void **)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      sub_2171F235C(v3, v1);
      v1 += 3;
    }
    while (v1 != v2);
  }
}

void **sub_2171F2D88(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_2171F2DBC(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 24;
    sub_2171F235C(v4, (void *)(i - 24));
  }
}

void pxrInternal__aapl__pxrReserved__::HdDisplayFilterSchemaTokens_StaticTokenType::~HdDisplayFilterSchemaTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::HdDisplayFilterSchemaTokens_StaticTokenType *this)
{
  uint64_t v3 = (void **)((char *)this + 16);
  sub_216889A04(&v3);
  uint64_t v2 = *((void *)this + 1);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

pxrInternal__aapl__pxrReserved__::HdDisplayFilterSchemaTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::HdDisplayFilterSchemaTokens_StaticTokenType::HdDisplayFilterSchemaTokens_StaticTokenType(atomic_uint **this)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v2 = (atomic_uint **)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "displayFilter", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2, "resource", 0);
  uint64_t v3 = *this;
  long long v13 = v3;
  if ((v3 & 7) != 0)
  {
    uint64_t v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
      long long v13 = v4;
    }
  }
  uint64_t v5 = *v2;
  long long v14 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      long long v14 = v6;
    }
  }
  this[2] = 0;
  this[3] = 0;
  this[4] = 0;
  uint64_t v7 = (atomic_uint *)operator new(0x10uLL);
  unint64_t v8 = 0;
  this[2] = v7;
  this[3] = v7;
  this[4] = v7 + 4;
  do
  {
    uint64_t v9 = (&v13)[v8 / 2];
    *(void *)&v7[v8] = v9;
    if ((v9 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v7[v8] &= 0xFFFFFFFFFFFFFFF8;
    }
    v8 += 2;
  }
  while (v8 != 4);
  this[3] = v7 + 4;
  for (uint64_t i = 1; i != -1; --i)
  {
    unint64_t v11 = (&v13)[i];
    if ((v11 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return (pxrInternal__aapl__pxrReserved__::HdDisplayFilterSchemaTokens_StaticTokenType *)this;
}

void sub_2171F2FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  sub_216889A04(&a10);
  uint64_t v15 = 8;
  while (1)
  {
    uint64_t v16 = *(void *)(&a12 + v15);
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v15 -= 8;
    if (v15 == -8)
    {
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void pxrInternal__aapl__pxrReserved__::HdDisplayFilterSchema::GetResource(pxrInternal__aapl__pxrReserved__::HdDisplayFilterSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdDisplayFilterSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdDisplayFilterSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171C2418(&pxrInternal__aapl__pxrReserved__::HdDisplayFilterSchemaTokens);
  }
  uint64_t v5 = (atomic_uint *)*((void *)v4 + 1);
  char v10 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      char v10 = v6;
    }
  }
  sub_217199340((uint64_t *)this, &v11);
  uint64_t v8 = v11;
  uint64_t v7 = v12;
  if (v12)
  {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    sub_216784EC4(v7);
    uint64_t v9 = v12;
    *a2 = v8;
    a2[1] = v7;
    if (v9) {
      sub_216784EC4(v9);
    }
  }
  else
  {
    *a2 = v11;
    a2[1] = 0;
  }
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdDisplayFilterSchema::BuildRetained(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  v11[1] = *MEMORY[0x263EF8340];
  char v10 = 0;
  v11[0] = 0;
  uint64_t v9 = 0;
  if (*a1)
  {
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdDisplayFilterSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdDisplayFilterSchemaTokens);
    if (!v4) {
      uint64_t v4 = sub_2171C2418(&pxrInternal__aapl__pxrReserved__::HdDisplayFilterSchemaTokens);
    }
    sub_2168D2318(v11, (void *)v4 + 1);
    uint64_t v6 = *a1;
    uint64_t v5 = (std::__shared_weak_count *)a1[1];
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v6;
    char v10 = v5;
    unint64_t v7 = 1;
  }
  else
  {
    unint64_t v7 = 0;
  }
  pxrInternal__aapl__pxrReserved__::HdRetainedContainerDataSource::New(v7, v11, &v9, &v8);
  *a2 = v8;
  if (v10) {
    sub_216784EC4(v10);
  }
  if ((v11[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_2171F3250(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13)
{
  if (a12) {
    sub_216784EC4(a12);
  }
  if ((a13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::HdDisplayFilterSchema::GetFromParent(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdDisplayFilterSchemaTokens)) {
      sub_2171C2418(&pxrInternal__aapl__pxrReserved__::HdDisplayFilterSchemaTokens);
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v3 + 24))(&v8, v3);
    sub_2171997C0((uint64_t)&v8, &v10);
    uint64_t v6 = v10;
    uint64_t v5 = v11;
    if (v11)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_216784EC4(v5);
      unint64_t v7 = v11;
      *a2 = v6;
      a2[1] = v5;
      if (v7) {
        sub_216784EC4(v7);
      }
    }
    else
    {
      *a2 = v10;
      a2[1] = 0;
    }
    if (v9) {
      sub_216784EC4(v9);
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    *a2 = 0;
    a2[1] = 0;
  }
}

pxrInternal__aapl__pxrReserved__::HdDisplayFilterSchemaTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::HdDisplayFilterSchema::GetSchemaToken(pxrInternal__aapl__pxrReserved__::HdDisplayFilterSchema *this)
{
  uint64_t result = (pxrInternal__aapl__pxrReserved__::HdDisplayFilterSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdDisplayFilterSchemaTokens);
  if (!result) {
    return sub_2171C2418(&pxrInternal__aapl__pxrReserved__::HdDisplayFilterSchemaTokens);
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::HdDisplayFilterSchema::GetDefaultLocator(pxrInternal__aapl__pxrReserved__::HdDisplayFilterSchema *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B97550, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B97550))
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::HdDisplayFilterSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdDisplayFilterSchemaTokens);
    if (!v2) {
      uint64_t v2 = sub_2171C2418(&pxrInternal__aapl__pxrReserved__::HdDisplayFilterSchemaTokens);
    }
    pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&unk_267B97518, v2);
    __cxa_atexit((void (*)(void *))sub_217199930, &unk_267B97518, &dword_216758000);
    __cxa_guard_release(&qword_267B97550);
  }
  return &unk_267B97518;
}

void sub_2171F3458(_Unwind_Exception *a1)
{
}

void *pxrInternal__aapl__pxrReserved__::HdDisplayFilterSchema::GetResourceLocator(pxrInternal__aapl__pxrReserved__::HdDisplayFilterSchema *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B97590, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B97590))
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::HdDisplayFilterSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdDisplayFilterSchemaTokens);
    if (!v2) {
      uint64_t v2 = sub_2171C2418(&pxrInternal__aapl__pxrReserved__::HdDisplayFilterSchemaTokens);
    }
    uint64_t v3 = (pxrInternal__aapl__pxrReserved__::HdDisplayFilterSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdDisplayFilterSchemaTokens);
    if (!v3) {
      uint64_t v3 = sub_2171C2418(&pxrInternal__aapl__pxrReserved__::HdDisplayFilterSchemaTokens);
    }
    pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&unk_267B97558, v2, (pxrInternal__aapl__pxrReserved__::HdDisplayFilterSchemaTokens_StaticTokenType *)((char *)v3 + 8));
    __cxa_atexit((void (*)(void *))sub_217199930, &unk_267B97558, &dword_216758000);
    __cxa_guard_release(&qword_267B97590);
  }
  return &unk_267B97558;
}

void sub_2171F3538(_Unwind_Exception *a1)
{
}

void *pxrInternal__aapl__pxrReserved__::HdDisplayFilterSchema::Builder::SetResource(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdDrawItem::HdDrawItem(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_26C780300;
  *(_DWORD *)(a1 + 8) = -65534;
  *(_DWORD *)(a1 + 12) = 67305728;
  *(_WORD *)(a1 + 16) = 1541;
  *(unsigned char *)(a1 + 18) = 7;
  *(void *)(a1 + 24) = a2;
  *(void *)(a1 + 32) = 0;
  sub_216851EE4((uint64_t)&v5, "hd", "pxrInternal__aapl__pxrReserved__::HdDrawItem::HdDrawItem(const HdRprimSharedData *)");
  while (v6--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v5);
  return a1;
}

void pxrInternal__aapl__pxrReserved__::HdDrawItem::~HdDrawItem(pxrInternal__aapl__pxrReserved__::HdDrawItem *this)
{
  *(void *)this = &unk_26C780300;
  uint64_t v1 = *((void *)this + 4);
  if ((v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

{
  uint64_t v1;

  *(void *)this = &unk_26C780300;
  uint64_t v1 = *((void *)this + 4);
  if ((v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdDrawItem::~HdDrawItem(void *this)
{
  *(void *)this = &unk_26C780300;
  uint64_t v1 = *((void *)this + 4);
  if ((v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  free(this);
}

double pxrInternal__aapl__pxrReserved__::HdEngine::HdEngine(pxrInternal__aapl__pxrReserved__::HdEngine *this)
{
  *(void *)this = &unk_26C780330;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 1065353216;
  return result;
}

{
  double result;

  *(void *)this = &unk_26C780330;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 1065353216;
  return result;
}

void pxrInternal__aapl__pxrReserved__::HdEngine::~HdEngine(pxrInternal__aapl__pxrReserved__::HdEngine *this)
{
  *(void *)this = &unk_26C780330;
  sub_2171F3C08((uint64_t)this + 8);
}

{
  *(void *)this = &unk_26C780330;
  sub_2171F3C08((uint64_t)this + 8);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26C780330;
  sub_2171F3C08((uint64_t)this + 8);

  operator delete(this);
}

void *pxrInternal__aapl__pxrReserved__::HdEngine::SetTaskContextData(pxrInternal__aapl__pxrReserved__::HdEngine *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  double result = sub_2171F3CA8((uint64_t)this + 8, a2, (uint64_t *)a2, a3);
  if (!v5)
  {
    int v6 = result + 3;
    return sub_2168EC6DC(v6, a3);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdEngine::GetTaskContextData(pxrInternal__aapl__pxrReserved__::HdEngine *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  if (a3
    || (v8[0] = "hd/engine.cpp",
        v8[1] = "GetTaskContextData",
        void v8[2] = 68,
        uint64_t v8[3] = "BOOL pxrInternal__aapl__pxrReserved__::HdEngine::GetTaskContextData(const TfToken &, VtValue *) const",
        char v9 = 0,
        char v7 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v8, "data", 0),
        uint64_t result = 0,
        (v7 & 1) != 0))
  {
    uint64_t result = (uint64_t)sub_2168CB120((void *)this + 1, a2);
    if (result)
    {
      sub_2168EC6DC(a3, (void *)(result + 24));
      return 1;
    }
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::HdEngine::RemoveTaskContextData(pxrInternal__aapl__pxrReserved__::HdEngine *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  return sub_2171F4084((void *)this + 1, a2);
}

void pxrInternal__aapl__pxrReserved__::HdEngine::ClearTaskContextData(pxrInternal__aapl__pxrReserved__::HdEngine *this)
{
}

void pxrInternal__aapl__pxrReserved__::HdEngine::Execute(uint64_t a1, pxrInternal__aapl__pxrReserved__::HdRenderIndex *this, uint64_t a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (this && a3)
  {
    uint64_t Drivers = pxrInternal__aapl__pxrReserved__::HdRenderIndex::GetDrivers(this);
    char v12 = (const char *)&off_26C780350;
    sub_2171F4704((unsigned int **)&v11, Drivers);
    int v6 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdTokens);
    if (!v6) {
      int v6 = sub_217198988(&pxrInternal__aapl__pxrReserved__::HdTokens);
    }
    uint64_t v10 = (uint64_t *)((char *)v6 + 216);
    char v7 = sub_2171F4160(a1 + 8, (void *)v6 + 27, (uint64_t)&unk_2174BFD90, &v10);
    sub_2168ED33C(v7 + 3, &v11);
    sub_2168EE084((uint64_t)&v11);
    if (sub_2171A6C8C(11)) {
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"\n==============================================================\n      HdEngine [Data Discovery Phase](RenderIndex::SyncAll)   \n--------------------------------------------------------------\n", v8, v9);
    }
    pxrInternal__aapl__pxrReserved__::HdRenderIndex::SyncAll((uint64_t)this);
  }
  uint64_t v11 = "hd/engine.cpp";
  char v12 = "Execute";
  uint64_t v13 = 99;
  long long v14 = "void pxrInternal__aapl__pxrReserved__::HdEngine::Execute(HdRenderIndex *, HdTaskSharedPtrVector *)";
  char v15 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v11, 1, (pxrInternal__aapl__pxrReserved__ *)"Passed nullptr to HdEngine::Execute()");
}

void sub_2171F3BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_2168EE084((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2171F3C08(uint64_t a1)
{
  sub_2171F3C44(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_2171F3C44(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_2168EE084((uint64_t)(v2 + 3));
      uint64_t v4 = v2[2];
      if ((v4 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void *sub_2171F3CA8(uint64_t a1, void *a2, uint64_t *a3, void *a4)
{
  unint64_t v6 = *a2 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = bswap64(0x9E3779B97F4A7C55 * v6);
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = v7;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = v7 & (v8 - 1);
    }
    uint64_t v10 = *(void **)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t result = (void *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = result[1];
          if (v12 == v7)
          {
            if ((result[2] & 0xFFFFFFFFFFFFFFF8) == v6) {
              return result;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t result = (void *)*result;
        }
        while (result);
      }
    }
  }
  sub_2171F3F00(a1, v7, a3, a4, (uint64_t)&v21);
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_21678A04C(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  size_t v19 = *(void **)(*(void *)a1 + 8 * v4);
  if (v19)
  {
    *uint64_t v21 = *v19;
    *size_t v19 = v21;
  }
  else
  {
    *uint64_t v21 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v21;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*v21)
    {
      unint64_t v20 = *(void *)(*v21 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v20 >= v8) {
          v20 %= v8;
        }
      }
      else
      {
        v20 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v20) = v21;
    }
  }
  uint64_t result = v21;
  ++*(void *)(a1 + 24);
  return result;
}

void sub_2171F3EDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11)
{
  if (a10) {
    sub_2171F4014((uint64_t)&a11, a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_2171F3F00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  uint64_t v10 = operator new(0x28uLL);
  *(void *)a5 = v10;
  *(void *)(a5 + sub_2171F4108((uint64_t)this + 8) = v9;
  *(unsigned char *)(a5 + 16) = 0;
  void *v10 = 0;
  v10[1] = a2;
  uint64_t result = sub_2171F3F9C(v10 + 2, a3, a4);
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

void sub_2171F3F80(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_2171F4014(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_2171F3F9C(uint64_t *a1, uint64_t *a2, void *a3)
{
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  sub_2168EE4C4(a1 + 1, a3);
  return a1;
}

void sub_2171F4014(uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    sub_2168EE084((uint64_t)(a2 + 3));
    uint64_t v3 = a2[2];
    if ((v3 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else if (!a2)
  {
    return;
  }

  operator delete(a2);
}

uint64_t *sub_2171F4084(void *a1, void *a2)
{
  uint64_t result = sub_2168CB1F4(a1, a2);
  if (result)
  {
    sub_2171F40BC(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t sub_2171F40BC(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  sub_216851DB0(a1, a2, (uint64_t)&v5);
  uint64_t v3 = v5;
  char v5 = 0;
  if (v3) {
    sub_2171F4014((uint64_t)&v6, v3);
  }
  return v2;
}

void sub_2171F4108(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    sub_2171F3C44(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void *sub_2171F4160(uint64_t a1, void *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v6 = *a2 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = bswap64(0x9E3779B97F4A7C55 * v6);
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = v7;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = v7 & (v8 - 1);
    }
    uint64_t v10 = *(void **)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t result = (void *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = result[1];
          if (v12 == v7)
          {
            if ((result[2] & 0xFFFFFFFFFFFFFFF8) == v6) {
              return result;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t result = (void *)*result;
        }
        while (result);
      }
    }
  }
  sub_2171F43B8(a1, v7, a4, (uint64_t)&v21);
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_21678A04C(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  size_t v19 = *(void **)(*(void *)a1 + 8 * v4);
  if (v19)
  {
    *uint64_t v21 = *v19;
    *size_t v19 = v21;
  }
  else
  {
    *uint64_t v21 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v21;
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*v21)
    {
      unint64_t v20 = *(void *)(*v21 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v20 >= v8) {
          v20 %= v8;
        }
      }
      else
      {
        v20 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v20) = v21;
    }
  }
  uint64_t result = v21;
  ++*(void *)(a1 + 24);
  return result;
}

void sub_2171F4394(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11)
{
  if (a10) {
    sub_2171F4014((uint64_t)&a11, a10);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2171F43B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t result = operator new(0x28uLL);
  *(void *)a4 = result;
  *(void *)(a4 + sub_2171F4108((uint64_t)this + 8) = v7;
  void *result = 0;
  result[1] = a2;
  uint64_t v9 = **a3;
  result[2] = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    result[2] &= 0xFFFFFFFFFFFFFFF8;
  }
  result[4] = 0;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

uint64_t *sub_2171F4438(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 24), 1u, memory_order_relaxed);
  }
  return result;
}

atomic_uint **sub_2171F4458(atomic_uint **a1, atomic_uint **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_2169CB1D8(a1);
}

uint64_t sub_2171F4468()
{
  return 1;
}

unint64_t sub_2171F4470(uint64_t *a1)
{
  return sub_2171F458C((uint64_t)&v2, *a1);
}

BOOL sub_2171F4498(uint64_t *a1, uint64_t *a2)
{
  return sub_216AC3B04(*a1, *a2);
}

BOOL sub_2171F44A4(uint64_t *a1, uint64_t a2)
{
  return sub_216AC3B04(*a1, a2);
}

uint64_t sub_2171F44B0()
{
  return 0;
}

void *sub_2171F44BC(uint64_t *a1, void *a2)
{
  return pxrInternal__aapl__pxrReserved__::Vt_StreamOutGeneric((uint64_t)&unk_26C780408, *a1, a2);
}

void *sub_2171F44D0()
{
  return &unk_26C780408;
}

uint64_t sub_2171F44DC()
{
  return 0;
}

uint64_t sub_2171F44E4()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_2171F44F0()
{
  return 0;
}

uint64_t sub_2171F44F8()
{
  return 0;
}

BOOL sub_2171F4500(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x80000002174CE74FLL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2171F453C(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_26C780408, a2, a3);
}

void *sub_2171F4560()
{
  return &unk_26C780408;
}

uint64_t sub_2171F456C(uint64_t a1)
{
  return *(void *)a1;
}

void *sub_2171F4574@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  *(void *)(a2 + sub_2171F4108((uint64_t)this + 8) = &off_26C780350;
  return sub_2171F4704((unsigned int **)a2, v2);
}

unint64_t sub_2171F458C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)a2;
  uint64_t v3 = 0;
  uint64_t v4 = *(void *)(a2 + 8) - *(void *)a2;
  if (v4)
  {
    int v5 = 0;
    uint64_t v6 = v4 >> 3;
    do
    {
      uint64_t v8 = *v2++;
      uint64_t v7 = v8;
      if (v5)
      {
        uint64_t v3 = v7 + ((unint64_t)(v3 + v7 + (v3 + v7) * (v3 + v7)) >> 1);
      }
      else
      {
        int v5 = 1;
        uint64_t v3 = v7;
      }
      --v6;
    }
    while (v6);
  }
  return bswap64(0x9E3779B97F4A7C55 * v3);
}

unsigned int *sub_2171F45E8(unsigned int **a1)
{
  unsigned int v2 = atomic_load(*a1 + 6);
  if (v2 != 1)
  {
    uint64_t v3 = (unsigned int *)operator new(0x20uLL);
    uint64_t v4 = *a1;
    *((void *)v3 + 1) = 0;
    *((void *)v3 + 2) = 0;
    *(void *)uint64_t v3 = 0;
    sub_2171F4688(v3, *(const void **)v4, *((void *)v4 + 1), (uint64_t)(*((void *)v4 + 1) - *(void *)v4) >> 3);
    atomic_store(0, v3 + 6);
    atomic_fetch_add_explicit((atomic_uint *volatile)v3 + 6, 1u, memory_order_relaxed);
    uint64_t v6 = (atomic_uint *)*a1;
    *a1 = v3;
    sub_2169CB1D8(&v6);
  }
  return *a1;
}

void sub_2171F4674(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_2171F4688(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_21677CACC(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2171F46E8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + sub_2171F4108((uint64_t)this + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2171F4704(unsigned int **a1, uint64_t a2)
{
  uint64_t v4 = (unsigned int *)operator new(0x20uLL);
  *((void *)v4 + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)uint64_t v4 = 0;
  uint64_t result = sub_2171F4688(v4, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  atomic_store(0, v4 + 6);
  *a1 = v4;
  atomic_fetch_add_explicit((atomic_uint *volatile)v4 + 6, 1u, memory_order_relaxed);
  return result;
}

void sub_2171F4768(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_2171F477C()
{
  sub_216779094(v2, "HdInterpolationConstant");
  sub_216779094(__p, "constant");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C780418, 0, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "HdInterpolationUniform");
  sub_216779094(__p, "uniform");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C780418, 1, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "HdInterpolationVarying");
  sub_216779094(__p, "varying");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C780418, 2, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "HdInterpolationVertex");
  sub_216779094(__p, "vertex");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C780418, 3, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "HdInterpolationFaceVarying");
  sub_216779094(__p, "faceVarying");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C780418, 4, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
  sub_216779094(v2, "HdInterpolationInstance");
  sub_216779094(__p, "instance");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((uint64_t)&unk_26C780418, 5, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
}

void sub_2171F49B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdInvertCullStyle(uint64_t result)
{
  if (result <= 5) {
    return dword_2174CE7DC[(int)result];
  }
  return result;
}

void sub_2171F4A24()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::HD_ENABLE_SHARED_EXT_COMPUTATION_DATA)) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<int>();
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::HdExtComputation::_IsEnabledSharedExtComputationData(pxrInternal__aapl__pxrReserved__::HdExtComputation *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B975A0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B975A0))
  {
    unsigned int v2 = (_DWORD *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::HD_ENABLE_SHARED_EXT_COMPUTATION_DATA);
    if (!v2) {
      pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<int>();
    }
    byte_267B97598 = *v2 == 1;
    __cxa_guard_release(&qword_267B975A0);
  }
  return byte_267B97598;
}

void sub_2171F4AF8(_Unwind_Exception *a1)
{
}

double pxrInternal__aapl__pxrReserved__::HdExtComputation::HdExtComputation(pxrInternal__aapl__pxrReserved__::HdExtComputation *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  unsigned int v2 = pxrInternal__aapl__pxrReserved__::HdSprim::HdSprim(this, a2);
  *(void *)unsigned int v2 = &unk_26C780438;
  double result = 0.0;
  *((_OWORD *)v2 + 1) = 0u;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_OWORD *)v2 + 6) = 0u;
  *((_OWORD *)v2 + 7) = 0u;
  return result;
}

{
  pxrInternal__aapl__pxrReserved__::HdSprim *v2;
  double result;

  unsigned int v2 = pxrInternal__aapl__pxrReserved__::HdSprim::HdSprim(this, a2);
  *(void *)unsigned int v2 = &unk_26C780438;
  double result = 0.0;
  *((_OWORD *)v2 + 1) = 0u;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_OWORD *)v2 + 6) = 0u;
  *((_OWORD *)v2 + 7) = 0u;
  return result;
}

void pxrInternal__aapl__pxrReserved__::HdExtComputation::~HdExtComputation(void **this)
{
  *this = &unk_26C780438;
  if (*((char *)this + 127) < 0) {
    operator delete(this[13]);
  }
  unsigned int v2 = this + 10;
  sub_21719DDBC(&v2);
  unsigned int v2 = this + 7;
  sub_2171DA7C0(&v2);
  unsigned int v2 = this + 4;
  sub_216889A04(&v2);
  pxrInternal__aapl__pxrReserved__::HdSprim::~HdSprim((pxrInternal__aapl__pxrReserved__::HdSprim *)this);
}

{
  void *v1;
  uint64_t vars8;

  pxrInternal__aapl__pxrReserved__::HdExtComputation::~HdExtComputation(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::HdExtComputation::_Sync(void **this, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *a2, pxrInternal__aapl__pxrReserved__::HdRenderParam *a3, unsigned int *a4)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  sub_216851EE4((uint64_t)&v21, "hd", "void pxrInternal__aapl__pxrReserved__::HdExtComputation::_Sync(HdSceneDelegate *, HdRenderParam *, HdDirtyBits *)");
  if (a2
    || (*(void *)&long long v24 = "hd/extComputation.cpp",
        *((void *)&v24 + 1) = "_Sync",
        uint64_t v25 = 72,
        char v26 = "void pxrInternal__aapl__pxrReserved__::HdExtComputation::_Sync(HdSceneDelegate *, HdRenderParam *, HdDirtyBits *)",
        char v27 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v24, "sceneDelegate != nullptr", 0) & 1) != 0))
  {
    if (sub_2171A6C8C(14))
    {
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(this + 1));
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"HdExtComputation::Sync for %s (dirty bits = 0x%x)\n", v8, v9, Text, *a4);
    }
    int v10 = *a4;
    if (*a4)
    {
      if (sub_2171A6C8C(14)) {
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"    dirty inputs\n", v11, v12);
      }
      (*(void (**)(long long *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *))(*(void *)a2 + 312))(&v24, a2, (char *)this + 8);
      sub_216A698A4(this + 4);
      *((_OWORD *)this + 2) = v24;
      this[6] = (void *)v25;
      uint64_t v25 = 0;
      uint64_t v23 = (void **)&v24;
      long long v24 = 0uLL;
      sub_216889A04(&v23);
      (*(void (**)(long long *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *))(*(void *)a2 + 320))(&v24, a2, (char *)this + 8);
      sub_2171F5278(this + 7);
      *(_OWORD *)(this + 7) = v24;
      this[9] = (void *)v25;
      uint64_t v25 = 0;
      uint64_t v23 = (void **)&v24;
      long long v24 = 0uLL;
      sub_2171DA7C0(&v23);
    }
    if ((v10 & 2) != 0)
    {
      (*(void (**)(long long *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *))(*(void *)a2 + 328))(&v24, a2, (char *)this + 8);
      sub_2171F52E8(this + 10);
      *((_OWORD *)this + 5) = v24;
      this[12] = (void *)v25;
      uint64_t v25 = 0;
      uint64_t v23 = (void **)&v24;
      long long v24 = 0uLL;
      sub_21719DDBC(&v23);
    }
    if ((v10 & 0x40) != 0)
    {
      float v13 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdTokens);
      if (!v13) {
        float v13 = sub_217198988(&pxrInternal__aapl__pxrReserved__::HdTokens);
      }
      (*(void (**)(long long *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *, uint64_t))(*(void *)a2 + 344))(&v24, a2, (char *)this + 8, (uint64_t)v13 + 136);
      float v14 = (void *)*((void *)&v24 + 1);
      if (*((void *)&v24 + 1)) {
        float v14 = *(void **)sub_2171F50D0((pxrInternal__aapl__pxrReserved__::VtValue *)&v24);
      }
      this[2] = v14;
      sub_2168EE084((uint64_t)&v24);
    }
    if ((v10 & 4) != 0)
    {
      BOOL v15 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdTokens);
      if (!v15) {
        BOOL v15 = sub_217198988(&pxrInternal__aapl__pxrReserved__::HdTokens);
      }
      (*(void (**)(long long *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *, uint64_t))(*(void *)a2 + 344))(&v24, a2, (char *)this + 8, (uint64_t)v15 + 232);
      unint64_t v16 = (void *)*((void *)&v24 + 1);
      if (*((void *)&v24 + 1)) {
        unint64_t v16 = *(void **)sub_2171F50D0((pxrInternal__aapl__pxrReserved__::VtValue *)&v24);
      }
      this[3] = v16;
      sub_2168EE084((uint64_t)&v24);
    }
    if ((v10 & 0x20) != 0)
    {
      (*(void (**)(long long *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *))(*(void *)a2 + 360))(&v24, a2, (char *)this + 8);
      unint64_t v17 = this + 13;
      if (*((char *)this + 127) < 0) {
        operator delete(*v17);
      }
      *(_OWORD *)unint64_t v17 = v24;
      this[15] = (void *)v25;
      if (sub_2171A6C8C(14))
      {
        if (*((char *)this + 127) < 0) {
          unint64_t v17 = (void **)*v17;
        }
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"    GpuKernelSource = '%s'\n", v18, v19, v17);
      }
    }
    *a4 &= 0xFFFFFF88;
  }
  while (v22--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v21);
}

void sub_2171F5060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_21684E6B8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2171F50D0(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (sub_2171D9E74(a1))
  {
    uint64_t v2 = *((void *)a1 + 1);
    if ((v2 & 4) != 0)
    {
      int v5 = *(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168);
      return v5(a1);
    }
    else
    {
      return (uint64_t)a1;
    }
  }
  else
  {
    uint64_t v4 = MEMORY[0x263F8C270];
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_2171F5354, v4);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::HdExtComputation::GetInitialDirtyBitsMask(pxrInternal__aapl__pxrReserved__::HdExtComputation *this)
{
  return 127;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdExtComputation::GetDispatchCount(pxrInternal__aapl__pxrReserved__::HdExtComputation *this)
{
  uint64_t result = *((void *)this + 2);
  if (!result) {
    return *((void *)this + 3);
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::HdExtComputation::GetOutputNames@<X0>(pxrInternal__aapl__pxrReserved__::HdExtComputation *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + sub_2171F4108((uint64_t)this + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t result = (void *)sub_216973388((char **)a2, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 11) - *((void *)this + 10)) >> 3));
  int v5 = (uint64_t *)*((void *)this + 10);
  uint64_t v6 = (uint64_t *)*((void *)this + 11);
  if (v5 != v6)
  {
    uint64_t result = *(void **)(a2 + 8);
    do
    {
      if ((unint64_t)result >= *(void *)(a2 + 16))
      {
        uint64_t result = sub_216973984((char **)a2, v5);
      }
      else
      {
        uint64_t v7 = *v5;
        void *result = *v5;
        if ((v7 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          *result &= 0xFFFFFFFFFFFFFFF8;
        }
        ++result;
      }
      *(void *)(a2 + sub_2171F4108((uint64_t)this + 8) = result;
      v5 += 3;
    }
    while (v5 != v6);
  }
  return result;
}

void sub_2171F524C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::HdExtComputation::IsInputAggregation(pxrInternal__aapl__pxrReserved__::HdExtComputation *this)
{
  return *((void *)this + 10) == *((void *)this + 11);
}

void sub_2171F5278(void **a1)
{
  char v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 24;
        sub_2171DA858((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_2171F52E8(void **a1)
{
  char v1 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        uint64_t v6 = *((void *)v3 - 3);
        v3 -= 24;
        uint64_t v5 = v6;
        if ((v6 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
      while (v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void *sub_2171F5354@<X0>(void *a1@<X8>)
{
  uint64_t result = operator new(8uLL);
  void *result = 0;
  *a1 = result;
  uint64_t v3 = MEMORY[0x263F8C270];
  a1[1] = sub_2171F539C;
  a1[2] = v3;
  return result;
}

void sub_2171F539C(void *__p)
{
  if (__p) {
    operator delete(__p);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::HdExtComputationContextInternal::HdExtComputationContextInternal(uint64_t this)
{
  *(void *)(this + 16) = 0;
  *(void *)this = &unk_26C7804D8;
  *(void *)(this + sub_2171F4108((uint64_t)this + 8) = this + 16;
  *(void *)(this + 4sub_2171F4108((uint64_t)this + 8) = 0;
  *(void *)(this + 40) = 0;
  *(void *)(this + 24) = 0;
  *(void *)(this + 32) = this + 40;
  *(unsigned char *)(this + 56) = 0;
  return this;
}

{
  *(void *)(this + 16) = 0;
  *(void *)this = &unk_26C7804D8;
  *(void *)(this + sub_2171F4108((uint64_t)this + 8) = this + 16;
  *(void *)(this + 4sub_2171F4108((uint64_t)this + 8) = 0;
  *(void *)(this + 40) = 0;
  *(void *)(this + 24) = 0;
  *(void *)(this + 32) = this + 40;
  *(unsigned char *)(this + 56) = 0;
  return this;
}

void pxrInternal__aapl__pxrReserved__::HdExtComputationContextInternal::~HdExtComputationContextInternal(pxrInternal__aapl__pxrReserved__::HdExtComputationContextInternal *this)
{
  sub_216D61968((uint64_t)this + 32, *((void **)this + 5));
  sub_216D61968((uint64_t)this + 8, *((void **)this + 2));

  pxrInternal__aapl__pxrReserved__::HdExtComputationContext::~HdExtComputationContext(this);
}

{
  void *v1;
  uint64_t vars8;

  pxrInternal__aapl__pxrReserved__::HdExtComputationContextInternal::~HdExtComputationContextInternal(this);

  operator delete(v1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::HdExtComputationContextInternal::SetInputValue(uint64_t **this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  return sub_2171F5700(this + 1, (uint64_t *)a2, (uint64_t *)a2, a3);
}

BOOL pxrInternal__aapl__pxrReserved__::HdExtComputationContextInternal::GetOutputValue(pxrInternal__aapl__pxrReserved__::HdExtComputationContextInternal *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v6 = (char *)sub_216A8E1C4((uint64_t)this + 32, (uint64_t *)a2);
  uint64_t v7 = v6;
  size_t v8 = (char *)this + 40;
  if (v8 == v6)
  {
    v12[0] = "hd/extComputationContextInternal.cpp";
    v12[1] = "GetOutputValue";
    void v12[2] = 55;
    void v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::HdExtComputationContextInternal::GetOutputValue(const TfToken &, VtValue *) const";
    char v13 = 0;
    int v14 = 6;
    unint64_t v9 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
    if (v9)
    {
      int v10 = (const char *)(v9 + 16);
      if (*(char *)(v9 + 39) < 0) {
        int v10 = *(const char **)v10;
      }
    }
    else
    {
      int v10 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueWarning((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v12, (pxrInternal__aapl__pxrReserved__ *)"output not specified: %s", v10);
  }
  else
  {
    sub_2168EC6DC(a3, (void *)v6 + 5);
  }
  return v8 != v7;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdExtComputationContextInternal::HasComputationError(pxrInternal__aapl__pxrReserved__::HdExtComputationContextInternal *this)
{
  return *((unsigned __int8 *)this + 56);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdExtComputationContextInternal::RaiseComputationError(uint64_t this)
{
  *(unsigned char *)(this + 56) = 1;
  return this;
}

char *pxrInternal__aapl__pxrReserved__::HdExtComputationContextInternal::GetInputValue(pxrInternal__aapl__pxrReserved__::HdExtComputationContextInternal *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdExtComputationContextInternal *)sub_216A8E1C4((uint64_t)this + 8, (uint64_t *)a2);
  if ((pxrInternal__aapl__pxrReserved__::HdExtComputationContextInternal *)((char *)this + 16) != v4) {
    return (char *)v4 + 40;
  }
  v8[0] = "hd/extComputationContextInternal.cpp";
  v8[1] = "GetInputValue";
  void v8[2] = 84;
  uint64_t v8[3] = "virtual const VtValue &pxrInternal__aapl__pxrReserved__::HdExtComputationContextInternal::GetInputValue(const "
          "TfToken &) const";
  char v9 = 0;
  int v10 = 1;
  unint64_t v6 = *(void *)a2 & 0xFFFFFFFFFFFFFFF8;
  if (v6)
  {
    uint64_t v7 = (const char *)(v6 + 16);
    if (*(char *)(v6 + 39) < 0) {
      uint64_t v7 = *(const char **)v7;
    }
  }
  else
  {
    uint64_t v7 = "";
  }
  pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v8, (pxrInternal__aapl__pxrReserved__ *)"Asking for invalid input %s", v7);
  if (atomic_load_explicit((atomic_uchar *volatile)&qword_267B975B8, memory_order_acquire)) {
    return (char *)&unk_267B975A8;
  }
  if (__cxa_guard_acquire(&qword_267B975B8))
  {
    qword_267B975B0 = 0;
    __cxa_atexit((void (*)(void *))sub_216B64E50, &unk_267B975A8, &dword_216758000);
    __cxa_guard_release(&qword_267B975B8);
  }
  return (char *)&unk_267B975A8;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdExtComputationContextInternal::GetOptionalInputValuePtr(pxrInternal__aapl__pxrReserved__::HdExtComputationContextInternal *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::HdExtComputationContextInternal *)sub_216A8E1C4((uint64_t)this + 8, (uint64_t *)a2);
  if ((pxrInternal__aapl__pxrReserved__::HdExtComputationContextInternal *)((char *)this + 16) == v3) {
    return 0;
  }
  else {
    return (uint64_t)v3 + 40;
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::HdExtComputationContextInternal::SetOutputValue(uint64_t **this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, const pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  return sub_2171F5700(this + 4, (uint64_t *)a2, (uint64_t *)a2, a3);
}

uint64_t *sub_2171F5700(uint64_t **a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  uint64_t v7 = (uint64_t **)sub_2168BE158((uint64_t)a1, &v10, a2);
  uint64_t result = *v7;
  if (!*v7)
  {
    sub_2171F5788((uint64_t)a1, a3, a4, (uint64_t)&v9);
    sub_21677B358(a1, v10, v7, v9);
    return v9;
  }
  return result;
}

uint64_t *sub_2171F5788@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  size_t v8 = (uint64_t *)operator new(0x38uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + sub_2171F4108((uint64_t)this + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  uint64_t result = sub_2171F3F9C(v8 + 4, a2, a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_2171F57F8(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_2170F7808(v3, v2);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdExtComputationInputComputationSchemaTokens_StaticTokenType::~HdExtComputationInputComputationSchemaTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::HdExtComputationInputComputationSchemaTokens_StaticTokenType *this)
{
  uint64_t v4 = (void **)((char *)this + 24);
  sub_216889A04(&v4);
  uint64_t v2 = *((void *)this + 2);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 1);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

pxrInternal__aapl__pxrReserved__::HdExtComputationInputComputationSchemaTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::HdExtComputationInputComputationSchemaTokens_StaticTokenType::HdExtComputationInputComputationSchemaTokens_StaticTokenType(atomic_uint **this)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v2 = (atomic_uint **)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "name", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2, "sourceComputation", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 2, "sourceComputationOutputName", 0);
  uint64_t v3 = *this;
  BOOL v15 = v3;
  if ((v3 & 7) != 0)
  {
    uint64_t v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
      BOOL v15 = v4;
    }
  }
  uint64_t v5 = *v2;
  unint64_t v16 = v5;
  if ((v5 & 7) != 0)
  {
    unint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      unint64_t v16 = v6;
    }
  }
  uint64_t v7 = this[2];
  unint64_t v17 = v7;
  if ((v7 & 7) != 0)
  {
    size_t v8 = (atomic_uint *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
      unint64_t v17 = v8;
    }
  }
  this[3] = 0;
  this[4] = 0;
  this[5] = 0;
  char v9 = (atomic_uint *)operator new(0x18uLL);
  unint64_t v10 = 0;
  this[3] = v9;
  this[4] = v9;
  this[5] = v9 + 6;
  do
  {
    uint64_t v11 = (&v15)[v10 / 2];
    *(void *)&v9[v10] = v11;
    if ((v11 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v9[v10] &= 0xFFFFFFFFFFFFFFF8;
    }
    v10 += 2;
  }
  while (v10 != 6);
  this[4] = v9 + 6;
  for (uint64_t i = 2; i != -1; --i)
  {
    char v13 = (&v15)[i];
    if ((v13 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return (pxrInternal__aapl__pxrReserved__::HdExtComputationInputComputationSchemaTokens_StaticTokenType *)this;
}

void sub_2171F5A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  sub_216889A04(&a9);
  uint64_t v15 = 16;
  while (1)
  {
    uint64_t v16 = *(void *)(&a11 + v15);
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v15 -= 8;
    if (v15 == -8)
    {
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void pxrInternal__aapl__pxrReserved__::HdExtComputationInputComputationSchema::GetName(pxrInternal__aapl__pxrReserved__::HdExtComputationInputComputationSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdExtComputationInputComputationSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171F605C(&pxrInternal__aapl__pxrReserved__::HdExtComputationInputComputationSchemaTokens);
  }
  unint64_t v6 = *v4;
  if (((unint64_t)*v4 & 7) != 0)
  {
    uint64_t v5 = (atomic_uint *)((unint64_t)*v4 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v5, 2u, memory_order_relaxed) & 1) == 0) {
      unint64_t v6 = v5;
    }
  }
  sub_21719B418((uint64_t *)this, a2);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdExtComputationInputComputationSchema::GetSourceComputation(pxrInternal__aapl__pxrReserved__::HdExtComputationInputComputationSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdExtComputationInputComputationSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171F605C(&pxrInternal__aapl__pxrReserved__::HdExtComputationInputComputationSchemaTokens);
  }
  uint64_t v5 = v4[1];
  uint64_t v7 = v5;
  if ((v5 & 7) != 0)
  {
    unint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v7 = v6;
    }
  }
  sub_2171B15E0((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdExtComputationInputComputationSchema::GetSourceComputationOutputName(pxrInternal__aapl__pxrReserved__::HdExtComputationInputComputationSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdExtComputationInputComputationSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171F605C(&pxrInternal__aapl__pxrReserved__::HdExtComputationInputComputationSchemaTokens);
  }
  uint64_t v5 = v4[2];
  uint64_t v7 = v5;
  if ((v5 & 7) != 0)
  {
    unint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v7 = v6;
    }
  }
  sub_21719B418((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdExtComputationInputComputationSchema::BuildRetained(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, _OWORD *a4@<X8>)
{
  v31[3] = *MEMORY[0x263EF8340];
  memset(v31, 0, 24);
  memset(v30, 0, sizeof(v30));
  if (*a1)
  {
    size_t v8 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdExtComputationInputComputationSchemaTokens);
    if (!v8) {
      size_t v8 = sub_2171F605C(&pxrInternal__aapl__pxrReserved__::HdExtComputationInputComputationSchemaTokens);
    }
    sub_2168D2318(v31, v8);
    uint64_t v10 = *a1;
    uint64_t v9 = a1[1];
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v11 = (std::__shared_weak_count *)*((void *)&v30[0] + 1);
    *(void *)&v30[0] = v10;
    *((void *)&v30[0] + 1) = v9;
    if (v11) {
      sub_216784EC4(v11);
    }
    uint64_t v12 = 1;
  }
  else
  {
    uint64_t v12 = 0;
  }
  if (*a2)
  {
    char v13 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdExtComputationInputComputationSchemaTokens);
    if (!v13) {
      char v13 = sub_2171F605C(&pxrInternal__aapl__pxrReserved__::HdExtComputationInputComputationSchemaTokens);
    }
    sub_2168D2318(&v31[v12], v13 + 1);
    unint64_t v14 = v12 + 1;
    uint64_t v15 = &v30[v12];
    uint64_t v17 = *a2;
    uint64_t v16 = a2[1];
    if (v16) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v18 = (std::__shared_weak_count *)v15[1];
    *uint64_t v15 = v17;
    v15[1] = v16;
    if (v18) {
      sub_216784EC4(v18);
    }
  }
  else
  {
    unint64_t v14 = v12;
  }
  if (*a3)
  {
    size_t v19 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdExtComputationInputComputationSchemaTokens);
    if (!v19) {
      size_t v19 = sub_2171F605C(&pxrInternal__aapl__pxrReserved__::HdExtComputationInputComputationSchemaTokens);
    }
    sub_2168D2318(&v31[v14], v19 + 2);
    unint64_t v20 = v14 + 1;
    uint64_t v21 = &v30[v14];
    uint64_t v23 = *a3;
    uint64_t v22 = a3[1];
    if (v22) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
    }
    long long v24 = (std::__shared_weak_count *)v21[1];
    *uint64_t v21 = v23;
    v21[1] = v22;
    if (v24) {
      sub_216784EC4(v24);
    }
  }
  else
  {
    unint64_t v20 = v14;
  }
  pxrInternal__aapl__pxrReserved__::HdRetainedContainerDataSource::New(v20, v31, (uint64_t *)v30, &v29);
  *a4 = v29;
  for (uint64_t i = 40; i != -8; i -= 16)
  {
    char v26 = *(std::__shared_weak_count **)((char *)v30 + i);
    if (v26) {
      sub_216784EC4(v26);
    }
  }
  for (uint64_t j = 2; j != -1; --j)
  {
    uint64_t v28 = v31[j];
    if ((v28 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
}

void sub_2171F5F1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v18 = 40;
  while (1)
  {
    size_t v19 = *(std::__shared_weak_count **)(&a11 + v18);
    if (v19) {
      sub_216784EC4(v19);
    }
    v18 -= 16;
    if (v18 == -8)
    {
      uint64_t v20 = 16;
      while (1)
      {
        uint64_t v21 = *(void *)(&a17 + v20);
        if ((v21 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        v20 -= 8;
        if (v20 == -8) {
          _Unwind_Resume(exception_object);
        }
      }
    }
  }
}

void *pxrInternal__aapl__pxrReserved__::HdExtComputationInputComputationSchema::Builder::SetName(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdExtComputationInputComputationSchema::Builder::SetSourceComputation(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 24);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdExtComputationInputComputationSchema::Builder::SetSourceComputationOutputName(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 40);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::HdExtComputationInputComputationSchema::Builder::Build(pxrInternal__aapl__pxrReserved__::HdExtComputationInputComputationSchema::Builder *this@<X0>, _OWORD *a2@<X8>)
{
}

atomic_uint **sub_2171F605C(atomic_ullong *a1)
{
  uint64_t result = sub_2171F60A4();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::HdExtComputationInputComputationSchemaTokens_StaticTokenType::~HdExtComputationInputComputationSchemaTokens_StaticTokenType((pxrInternal__aapl__pxrReserved__::HdExtComputationInputComputationSchemaTokens_StaticTokenType *)result);
      operator delete(v4);
    }
    return (atomic_uint **)atomic_load((unint64_t *)a1);
  }
  return result;
}

atomic_uint **sub_2171F60A4()
{
  uint64_t v0 = (atomic_uint **)operator new(0x30uLL);
  pxrInternal__aapl__pxrReserved__::HdExtComputationInputComputationSchemaTokens_StaticTokenType::HdExtComputationInputComputationSchemaTokens_StaticTokenType(v0);
  return v0;
}

void sub_2171F60D4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdExtComputationOutputSchemaTokens_StaticTokenType::~HdExtComputationOutputSchemaTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::HdExtComputationOutputSchemaTokens_StaticTokenType *this)
{
  uint64_t v3 = (void **)((char *)this + 16);
  sub_216889A04(&v3);
  uint64_t v2 = *((void *)this + 1);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

pxrInternal__aapl__pxrReserved__::HdExtComputationOutputSchemaTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::HdExtComputationOutputSchemaTokens_StaticTokenType::HdExtComputationOutputSchemaTokens_StaticTokenType(atomic_uint **this)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v2 = (atomic_uint **)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "name", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2, "valueType", 0);
  uint64_t v3 = *this;
  char v13 = v3;
  if ((v3 & 7) != 0)
  {
    uint64_t v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
      char v13 = v4;
    }
  }
  uint64_t v5 = *v2;
  unint64_t v14 = v5;
  if ((v5 & 7) != 0)
  {
    unint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      unint64_t v14 = v6;
    }
  }
  this[2] = 0;
  this[3] = 0;
  this[4] = 0;
  uint64_t v7 = (atomic_uint *)operator new(0x10uLL);
  unint64_t v8 = 0;
  this[2] = v7;
  this[3] = v7;
  this[4] = v7 + 4;
  do
  {
    uint64_t v9 = (&v13)[v8 / 2];
    *(void *)&v7[v8] = v9;
    if ((v9 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v7[v8] &= 0xFFFFFFFFFFFFFFF8;
    }
    v8 += 2;
  }
  while (v8 != 4);
  this[3] = v7 + 4;
  for (uint64_t i = 1; i != -1; --i)
  {
    uint64_t v11 = (&v13)[i];
    if ((v11 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return (pxrInternal__aapl__pxrReserved__::HdExtComputationOutputSchemaTokens_StaticTokenType *)this;
}

void sub_2171F62C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  sub_216889A04(&a10);
  uint64_t v15 = 8;
  while (1)
  {
    uint64_t v16 = *(void *)(&a12 + v15);
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v15 -= 8;
    if (v15 == -8)
    {
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void pxrInternal__aapl__pxrReserved__::HdExtComputationOutputSchema::GetName(pxrInternal__aapl__pxrReserved__::HdExtComputationOutputSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdExtComputationOutputSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171F67C0(&pxrInternal__aapl__pxrReserved__::HdExtComputationOutputSchemaTokens);
  }
  unint64_t v6 = *v4;
  if (((unint64_t)*v4 & 7) != 0)
  {
    uint64_t v5 = (atomic_uint *)((unint64_t)*v4 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v5, 2u, memory_order_relaxed) & 1) == 0) {
      unint64_t v6 = v5;
    }
  }
  sub_21719B418((uint64_t *)this, a2);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdExtComputationOutputSchema::GetValueType(pxrInternal__aapl__pxrReserved__::HdExtComputationOutputSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdExtComputationOutputSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171F67C0(&pxrInternal__aapl__pxrReserved__::HdExtComputationOutputSchemaTokens);
  }
  uint64_t v5 = v4[1];
  uint64_t v7 = v5;
  if ((v5 & 7) != 0)
  {
    unint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v7 = v6;
    }
  }
  sub_2171F64A8((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_2171F64A8(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (v3)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v3 + 24))(&v4);
    sub_2171F684C((uint64_t)&v4, a2);
    if (v5) {
      sub_216784EC4(v5);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

void pxrInternal__aapl__pxrReserved__::HdExtComputationOutputSchema::BuildRetained(uint64_t *a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  v23[2] = *MEMORY[0x263EF8340];
  v23[0] = 0;
  v23[1] = 0;
  memset(v22, 0, sizeof(v22));
  if (*a1)
  {
    unint64_t v6 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdExtComputationOutputSchemaTokens);
    if (!v6) {
      unint64_t v6 = sub_2171F67C0(&pxrInternal__aapl__pxrReserved__::HdExtComputationOutputSchemaTokens);
    }
    sub_2168D2318(v23, v6);
    uint64_t v8 = *a1;
    uint64_t v7 = a1[1];
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = (std::__shared_weak_count *)*((void *)&v22[0] + 1);
    *(void *)&v22[0] = v8;
    *((void *)&v22[0] + 1) = v7;
    if (v9) {
      sub_216784EC4(v9);
    }
    uint64_t v10 = 1;
  }
  else
  {
    uint64_t v10 = 0;
  }
  if (*a2)
  {
    uint64_t v11 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdExtComputationOutputSchemaTokens);
    if (!v11) {
      uint64_t v11 = sub_2171F67C0(&pxrInternal__aapl__pxrReserved__::HdExtComputationOutputSchemaTokens);
    }
    sub_2168D2318(&v23[v10], v11 + 1);
    unint64_t v12 = v10 + 1;
    char v13 = &v22[v10];
    uint64_t v15 = *a2;
    uint64_t v14 = a2[1];
    if (v14) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v16 = (std::__shared_weak_count *)v13[1];
    *char v13 = v15;
    v13[1] = v14;
    if (v16) {
      sub_216784EC4(v16);
    }
  }
  else
  {
    unint64_t v12 = v10;
  }
  pxrInternal__aapl__pxrReserved__::HdRetainedContainerDataSource::New(v12, v23, (uint64_t *)v22, &v21);
  *a3 = v21;
  for (uint64_t i = 24; i != -8; i -= 16)
  {
    uint64_t v18 = *(std::__shared_weak_count **)((char *)v22 + i);
    if (v18) {
      sub_216784EC4(v18);
    }
  }
  for (uint64_t j = 1; j != -1; --j)
  {
    uint64_t v20 = v23[j];
    if ((v20 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
}

void sub_2171F66CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  uint64_t v17 = 24;
  while (1)
  {
    uint64_t v18 = *(std::__shared_weak_count **)(&a11 + v17);
    if (v18) {
      sub_216784EC4(v18);
    }
    v17 -= 16;
    if (v17 == -8)
    {
      uint64_t v19 = 8;
      while (1)
      {
        uint64_t v20 = *(void *)(&a16 + v19);
        if ((v20 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        v19 -= 8;
        if (v19 == -8) {
          _Unwind_Resume(exception_object);
        }
      }
    }
  }
}

void *pxrInternal__aapl__pxrReserved__::HdExtComputationOutputSchema::Builder::SetName(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdExtComputationOutputSchema::Builder::SetValueType(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 24);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::HdExtComputationOutputSchema::Builder::Build(pxrInternal__aapl__pxrReserved__::HdExtComputationOutputSchema::Builder *this@<X0>, _OWORD *a2@<X8>)
{
}

atomic_uint **sub_2171F67C0(atomic_ullong *a1)
{
  uint64_t result = sub_2171F6808();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::HdExtComputationOutputSchemaTokens_StaticTokenType::~HdExtComputationOutputSchemaTokens_StaticTokenType((pxrInternal__aapl__pxrReserved__::HdExtComputationOutputSchemaTokens_StaticTokenType *)result);
      operator delete(v4);
    }
    return (atomic_uint **)atomic_load((unint64_t *)a1);
  }
  return result;
}

atomic_uint **sub_2171F6808()
{
  uint64_t v0 = (atomic_uint **)operator new(0x28uLL);
  pxrInternal__aapl__pxrReserved__::HdExtComputationOutputSchemaTokens_StaticTokenType::HdExtComputationOutputSchemaTokens_StaticTokenType(v0);
  return v0;
}

void sub_2171F6838(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_2171F684C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = *(void **)a1;
  if (result
    && (uint64_t result = __dynamic_cast(result, (const struct __class_type_info *)&unk_26C77BD10, (const struct __class_type_info *)&unk_26C77CDD8, 0)) != 0)
  {
    uint64_t v5 = *(void *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarSchemaTokens_StaticTokenType::~HdExtComputationPrimvarSchemaTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarSchemaTokens_StaticTokenType *this)
{
  unint64_t v6 = (void **)((char *)this + 40);
  sub_216889A04(&v6);
  uint64_t v2 = *((void *)this + 4);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 3);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *((void *)this + 2);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *((void *)this + 1);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarSchemaTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarSchemaTokens_StaticTokenType::HdExtComputationPrimvarSchemaTokens_StaticTokenType(atomic_uint **this)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v2 = (atomic_uint **)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "interpolation", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2, "role", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 2, "sourceComputation", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 3, "sourceComputationOutputName", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 4, "valueType", 0);
  uint64_t v3 = *this;
  uint64_t v19 = v3;
  if ((v3 & 7) != 0)
  {
    uint64_t v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v19 = v4;
    }
  }
  uint64_t v5 = *v2;
  uint64_t v20 = v5;
  if ((v5 & 7) != 0)
  {
    unint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v20 = v6;
    }
  }
  uint64_t v7 = this[2];
  long long v21 = v7;
  if ((v7 & 7) != 0)
  {
    uint64_t v8 = (atomic_uint *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
      long long v21 = v8;
    }
  }
  uint64_t v9 = this[3];
  uint64_t v22 = v9;
  if ((v9 & 7) != 0)
  {
    uint64_t v10 = (atomic_uint *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v10, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v22 = v10;
    }
  }
  uint64_t v11 = this[4];
  uint64_t v23 = v11;
  if ((v11 & 7) != 0)
  {
    unint64_t v12 = (atomic_uint *)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v12, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v23 = v12;
    }
  }
  this[5] = 0;
  this[6] = 0;
  this[7] = 0;
  char v13 = (atomic_uint *)operator new(0x28uLL);
  unint64_t v14 = 0;
  this[5] = v13;
  this[6] = v13;
  this[7] = v13 + 10;
  do
  {
    uint64_t v15 = (&v19)[v14 / 2];
    *(void *)&v13[v14] = v15;
    if ((v15 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v13[v14] &= 0xFFFFFFFFFFFFFFF8;
    }
    v14 += 2;
  }
  while (v14 != 10);
  this[6] = v13 + 10;
  for (uint64_t i = 4; i != -1; --i)
  {
    uint64_t v17 = (&v19)[i];
    if ((v17 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return (pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarSchemaTokens_StaticTokenType *)this;
}

void sub_2171F6BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  sub_216889A04(&a9);
  uint64_t v17 = 32;
  while (1)
  {
    uint64_t v18 = *(void *)(&a11 + v17);
    if ((v18 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v17 -= 8;
    if (v17 == -8)
    {
      if ((*v15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarSchema::GetInterpolation(pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171F74F8(&pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarSchemaTokens);
  }
  unint64_t v6 = *v4;
  if (((unint64_t)*v4 & 7) != 0)
  {
    uint64_t v5 = (atomic_uint *)((unint64_t)*v4 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v5, 2u, memory_order_relaxed) & 1) == 0) {
      unint64_t v6 = v5;
    }
  }
  sub_21719B418((uint64_t *)this, a2);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarSchema::GetRole(pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171F74F8(&pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarSchemaTokens);
  }
  uint64_t v5 = v4[1];
  uint64_t v7 = v5;
  if ((v5 & 7) != 0)
  {
    unint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v7 = v6;
    }
  }
  sub_21719B418((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarSchema::GetSourceComputation(pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171F74F8(&pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarSchemaTokens);
  }
  uint64_t v5 = v4[2];
  uint64_t v7 = v5;
  if ((v5 & 7) != 0)
  {
    unint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v7 = v6;
    }
  }
  sub_2171B15E0((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarSchema::GetSourceComputationOutputName(pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171F74F8(&pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarSchemaTokens);
  }
  uint64_t v5 = v4[3];
  uint64_t v7 = v5;
  if ((v5 & 7) != 0)
  {
    unint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v7 = v6;
    }
  }
  sub_21719B418((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarSchema::GetValueType(pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171F74F8(&pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarSchemaTokens);
  }
  uint64_t v5 = v4[4];
  uint64_t v7 = v5;
  if ((v5 & 7) != 0)
  {
    unint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v7 = v6;
    }
  }
  sub_2171F64A8((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarSchema::BuildRetained(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, _OWORD *a6@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  uint64_t v48 = 0;
  memset(v47, 0, sizeof(v47));
  memset(v46, 0, sizeof(v46));
  if (*a1)
  {
    unint64_t v12 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarSchemaTokens);
    if (!v12) {
      unint64_t v12 = sub_2171F74F8(&pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarSchemaTokens);
    }
    sub_2168D2318(v47, v12);
    uint64_t v14 = *a1;
    uint64_t v13 = a1[1];
    if (v13) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v15 = (std::__shared_weak_count *)*((void *)&v46[0] + 1);
    *(void *)&v46[0] = v14;
    *((void *)&v46[0] + 1) = v13;
    if (v15) {
      sub_216784EC4(v15);
    }
    uint64_t v16 = 1;
  }
  else
  {
    uint64_t v16 = 0;
  }
  if (*a2)
  {
    uint64_t v17 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarSchemaTokens);
    if (!v17) {
      uint64_t v17 = sub_2171F74F8(&pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarSchemaTokens);
    }
    sub_2168D2318((void *)((unint64_t)v47 | (8 * v16)), v17 + 1);
    uint64_t v18 = v16 + 1;
    uint64_t v19 = &v46[v16];
    uint64_t v21 = *a2;
    uint64_t v20 = a2[1];
    if (v20) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v22 = (std::__shared_weak_count *)v19[1];
    *uint64_t v19 = v21;
    v19[1] = v20;
    if (v22) {
      sub_216784EC4(v22);
    }
  }
  else
  {
    uint64_t v18 = v16;
  }
  if (*a3)
  {
    uint64_t v23 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarSchemaTokens);
    if (!v23) {
      uint64_t v23 = sub_2171F74F8(&pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarSchemaTokens);
    }
    sub_2168D2318((void *)v47 + v18, v23 + 2);
    unint64_t v24 = v18 + 1;
    uint64_t v25 = &v46[v18];
    uint64_t v27 = *a3;
    uint64_t v26 = a3[1];
    if (v26) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v28 = (std::__shared_weak_count *)v25[1];
    *uint64_t v25 = v27;
    v25[1] = v26;
    if (v28) {
      sub_216784EC4(v28);
    }
  }
  else
  {
    unint64_t v24 = v18;
  }
  if (*a4)
  {
    long long v29 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarSchemaTokens);
    if (!v29) {
      long long v29 = sub_2171F74F8(&pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarSchemaTokens);
    }
    sub_2168D2318((void *)v47 + v24, v29 + 3);
    unint64_t v30 = v24 + 1;
    int v31 = &v46[v24];
    uint64_t v33 = *a4;
    uint64_t v32 = a4[1];
    if (v32) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v32 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v34 = (std::__shared_weak_count *)v31[1];
    void *v31 = v33;
    v31[1] = v32;
    if (v34) {
      sub_216784EC4(v34);
    }
  }
  else
  {
    unint64_t v30 = v24;
  }
  if (*a5)
  {
    int v35 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarSchemaTokens);
    if (!v35) {
      int v35 = sub_2171F74F8(&pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarSchemaTokens);
    }
    sub_2168D2318((void *)v47 + v30, v35 + 4);
    unint64_t v36 = v30 + 1;
    uint64_t v37 = &v46[v30];
    uint64_t v39 = *a5;
    uint64_t v38 = a5[1];
    if (v38) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v38 + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v40 = (std::__shared_weak_count *)v37[1];
    void *v37 = v39;
    v37[1] = v38;
    if (v40) {
      sub_216784EC4(v40);
    }
  }
  else
  {
    unint64_t v36 = v30;
  }
  pxrInternal__aapl__pxrReserved__::HdRetainedContainerDataSource::New(v36, (uint64_t *)v47, (uint64_t *)v46, &v45);
  *a6 = v45;
  for (uint64_t i = 72; i != -8; i -= 16)
  {
    uint64_t v42 = *(std::__shared_weak_count **)((char *)v46 + i);
    if (v42) {
      sub_216784EC4(v42);
    }
  }
  for (uint64_t j = 32; j != -8; j -= 8)
  {
    uint64_t v44 = *(void *)((char *)v47 + j);
    if ((v44 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v44 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
}

void sub_2171F7320(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  uint64_t v22 = 72;
  while (1)
  {
    uint64_t v23 = *(std::__shared_weak_count **)(&a11 + v22);
    if (v23) {
      sub_216784EC4(v23);
    }
    v22 -= 16;
    if (v22 == -8)
    {
      uint64_t v24 = 32;
      while (1)
      {
        uint64_t v25 = *(void *)(&a21 + v24);
        if ((v25 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        v24 -= 8;
        if (v24 == -8) {
          _Unwind_Resume(exception_object);
        }
      }
    }
  }
}

void *pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarSchema::Builder::SetInterpolation(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarSchema::Builder::SetRole(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 24);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarSchema::Builder::SetSourceComputation(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 40);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarSchema::Builder::SetSourceComputationOutputName(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 56);
  *(void *)(a1 + 4sub_2171F4108((uint64_t)this + 8) = v4;
  *(void *)(a1 + 56) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarSchema::Builder::SetValueType(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = v4;
  *(void *)(a1 + 72) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarSchema::Builder::Build(pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarSchema::Builder *this@<X0>, _OWORD *a2@<X8>)
{
}

atomic_uint **sub_2171F74F8(atomic_ullong *a1)
{
  uint64_t result = sub_2171F7540();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarSchemaTokens_StaticTokenType::~HdExtComputationPrimvarSchemaTokens_StaticTokenType((pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarSchemaTokens_StaticTokenType *)result);
      operator delete(v4);
    }
    return (atomic_uint **)atomic_load((unint64_t *)a1);
  }
  return result;
}

atomic_uint **sub_2171F7540()
{
  uint64_t v0 = (atomic_uint **)operator new(0x40uLL);
  pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarSchemaTokens_StaticTokenType::HdExtComputationPrimvarSchemaTokens_StaticTokenType(v0);
  return v0;
}

void sub_2171F7570(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarsSchemaTokens_StaticTokenType::~HdExtComputationPrimvarsSchemaTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarsSchemaTokens_StaticTokenType *this)
{
  uint64_t v2 = (void **)((char *)this + 8);
  sub_216889A04(&v2);
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

{
  void **v2;

  uint64_t v2 = (void **)((char *)this + 8);
  sub_216889A04(&v2);
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarsSchemaTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarsSchemaTokens_StaticTokenType::HdExtComputationPrimvarsSchemaTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarsSchemaTokens_StaticTokenType *this)
{
  uint64_t v2 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "extComputationPrimvars", 0);
  uint64_t v3 = *v2;
  if ((*v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v3 &= 0xFFFFFFFFFFFFFFF8;
  }
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  uint64_t v4 = operator new(8uLL);
  *((void *)this + 1) = v4;
  *((void *)this + 2) = v4;
  void *v4 = v3;
  uint64_t v5 = v4 + 1;
  *((void *)this + 3) = v4 + 1;
  if ((v3 & 7) != 0)
  {
    if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
      *v4 &= 0xFFFFFFFFFFFFFFF8;
    }
    *((void *)this + 2) = v5;
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  else
  {
    *((void *)this + 2) = v5;
  }
  return this;
}

void sub_2171F76F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v11 = v10;
  sub_216889A04(&a9);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_2173242CC(v9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarsSchema::GetExtComputationPrimvarNames@<X0>(pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarsSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t result = *(void *)this;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

void pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarsSchema::GetPrimvar(pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarsSchema *this@<X0>, atomic_uint **a2@<X1>, void *a3@<X8>)
{
  uint64_t v8 = *a2;
  if (((unint64_t)*a2 & 7) != 0)
  {
    uint64_t v4 = (atomic_uint *)((unint64_t)*a2 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v8 = v4;
    }
  }
  sub_217199340((uint64_t *)this, &v9);
  uint64_t v6 = v9;
  uint64_t v5 = v10;
  if (v10)
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    sub_216784EC4(v5);
    uint64_t v7 = v10;
    *a3 = v6;
    a3[1] = v5;
    if (v7) {
      sub_216784EC4(v7);
    }
  }
  else
  {
    *a3 = v9;
    a3[1] = 0;
  }
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarsSchema::GetFromParent(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarsSchemaTokens)) {
      sub_2171C1EA0(&pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarsSchemaTokens);
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v3 + 24))(&v8, v3);
    sub_2171997C0((uint64_t)&v8, &v10);
    uint64_t v6 = v10;
    uint64_t v5 = v11;
    if (v11)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_216784EC4(v5);
      uint64_t v7 = v11;
      *a2 = v6;
      a2[1] = v5;
      if (v7) {
        sub_216784EC4(v7);
      }
    }
    else
    {
      *a2 = v10;
      a2[1] = 0;
    }
    if (v9) {
      sub_216784EC4(v9);
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    *a2 = 0;
    a2[1] = 0;
  }
}

pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarsSchemaTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarsSchema::GetSchemaToken(pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarsSchema *this)
{
  uint64_t result = (pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarsSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarsSchemaTokens);
  if (!result) {
    return sub_2171C1EA0(&pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarsSchemaTokens);
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarsSchema::GetDefaultLocator(pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarsSchema *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B975F8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B975F8))
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarsSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarsSchemaTokens);
    if (!v2) {
      uint64_t v2 = sub_2171C1EA0(&pxrInternal__aapl__pxrReserved__::HdExtComputationPrimvarsSchemaTokens);
    }
    pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&unk_267B975C0, v2);
    __cxa_atexit((void (*)(void *))sub_217199930, &unk_267B975C0, &dword_216758000);
    __cxa_guard_release(&qword_267B975F8);
  }
  return &unk_267B975C0;
}

void sub_2171F7A08(_Unwind_Exception *a1)
{
}

void pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens_StaticTokenType::~HdExtComputationSchemaTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens_StaticTokenType *this)
{
  uint64_t v9 = (void **)((char *)this + 64);
  sub_216889A04(&v9);
  uint64_t v2 = *((void *)this + 7);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 6);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *((void *)this + 5);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *((void *)this + 4);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v6 = *((void *)this + 3);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v7 = *((void *)this + 2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v8 = *((void *)this + 1);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens_StaticTokenType::HdExtComputationSchemaTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens_StaticTokenType *this)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v2 = (uint64_t *)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "extComputation", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2, "inputValues", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 16, "inputComputations", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 24, "outputs", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 32, "glslKernel", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 40, "cpuCallback", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 48, "dispatchCount", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 56, "elementCount", 0);
  uint64_t v3 = *(void *)this;
  uint64_t v17 = v3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v17 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v4 = *v2;
  uint64_t v18 = v4;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v18 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v5 = *((void *)this + 2);
  uint64_t v19 = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v19 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v6 = *((void *)this + 3);
  uint64_t v20 = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v20 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = *((void *)this + 4);
  uint64_t v21 = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v21 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v8 = *((void *)this + 5);
  uint64_t v22 = v8;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v22 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v9 = *((void *)this + 6);
  uint64_t v23 = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v23 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v10 = *((void *)this + 7);
  uint64_t v24 = v10;
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v24 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((void *)this + sub_2171F4108((uint64_t)this + 8) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  uint64_t v11 = (char *)operator new(0x40uLL);
  uint64_t v12 = 0;
  *((void *)this + sub_2171F4108((uint64_t)this + 8) = v11;
  *((void *)this + 9) = v11;
  *((void *)this + 10) = v11 + 64;
  do
  {
    uint64_t v13 = *(uint64_t *)((char *)&v17 + v12);
    *(void *)&v11[v12] = v13;
    if ((v13 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v11[v12] &= 0xFFFFFFFFFFFFFFF8;
    }
    v12 += 8;
  }
  while (v12 != 64);
  *((void *)this + 9) = v11 + 64;
  for (uint64_t i = 56; i != -8; i -= 8)
  {
    uint64_t v15 = *(uint64_t *)((char *)&v17 + i);
    if ((v15 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return this;
}

void sub_2171F7E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  sub_216889A04(&a10);
  uint64_t v21 = 56;
  while (1)
  {
    uint64_t v22 = *(void *)(&a12 + v21);
    if ((v22 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v21 -= 8;
    if (v21 == -8)
    {
      if ((*v19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void pxrInternal__aapl__pxrReserved__::HdExtComputationSchema::GetInputValues(pxrInternal__aapl__pxrReserved__::HdExtComputationSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171C1BE4(&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
  }
  uint64_t v5 = (atomic_uint *)*((void *)v4 + 1);
  uint64_t v7 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v7 = v6;
    }
  }
  sub_217199340((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdExtComputationSchema::GetInputComputations(pxrInternal__aapl__pxrReserved__::HdExtComputationSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171C1BE4(&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
  }
  uint64_t v5 = (atomic_uint *)*((void *)v4 + 2);
  uint64_t v7 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v7 = v6;
    }
  }
  sub_2171E466C((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdExtComputationSchema::GetOutputs(pxrInternal__aapl__pxrReserved__::HdExtComputationSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171C1BE4(&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
  }
  uint64_t v5 = (atomic_uint *)*((void *)v4 + 3);
  uint64_t v7 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v7 = v6;
    }
  }
  sub_2171E466C((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdExtComputationSchema::GetGlslKernel(pxrInternal__aapl__pxrReserved__::HdExtComputationSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171C1BE4(&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
  }
  uint64_t v5 = (atomic_uint *)*((void *)v4 + 4);
  uint64_t v7 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v7 = v6;
    }
  }
  sub_2171F8258((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_2171F8258(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (v3)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v3 + 24))(&v4);
    sub_2171E07F0((uint64_t)&v4, a2);
    if (v5) {
      sub_216784EC4(v5);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

void pxrInternal__aapl__pxrReserved__::HdExtComputationSchema::GetCpuCallback(pxrInternal__aapl__pxrReserved__::HdExtComputationSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171C1BE4(&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
  }
  uint64_t v5 = (atomic_uint *)*((void *)v4 + 5);
  uint64_t v7 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v7 = v6;
    }
  }
  sub_2171F8384((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_2171F8384(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (v3)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v3 + 24))(&v5);
    if (v5)
    {
      uint64_t v4 = v6;
      *a2 = v5;
      a2[1] = v4;
      if (v4) {
        atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
    }
    if (v6) {
      sub_216784EC4(v6);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

void pxrInternal__aapl__pxrReserved__::HdExtComputationSchema::GetDispatchCount(pxrInternal__aapl__pxrReserved__::HdExtComputationSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171C1BE4(&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
  }
  uint64_t v5 = (atomic_uint *)*((void *)v4 + 6);
  uint64_t v7 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v7 = v6;
    }
  }
  sub_2171F84CC((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_2171F84CC(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (v3)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v3 + 24))(&v4);
    sub_2171F93D0((uint64_t)&v4, a2);
    if (v5) {
      sub_216784EC4(v5);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

void pxrInternal__aapl__pxrReserved__::HdExtComputationSchema::GetElementCount(pxrInternal__aapl__pxrReserved__::HdExtComputationSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171C1BE4(&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
  }
  uint64_t v5 = (atomic_uint *)*((void *)v4 + 7);
  uint64_t v7 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v7 = v6;
    }
  }
  sub_2171F84CC((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdExtComputationSchema::BuildRetained(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, uint64_t *a7@<X6>, _OWORD *a8@<X8>)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  uint64_t v64 = 0;
  memset(v63, 0, sizeof(v63));
  memset(v62, 0, sizeof(v62));
  if (*a1)
  {
    uint64_t v16 = (pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
    if (!v16) {
      uint64_t v16 = sub_2171C1BE4(&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
    }
    sub_2168D2318(v63, (void *)v16 + 1);
    uint64_t v18 = *a1;
    uint64_t v17 = a1[1];
    if (v17) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v19 = (std::__shared_weak_count *)*((void *)&v62[0] + 1);
    *(void *)&v62[0] = v18;
    *((void *)&v62[0] + 1) = v17;
    if (v19) {
      sub_216784EC4(v19);
    }
    uint64_t v20 = 1;
  }
  else
  {
    uint64_t v20 = 0;
  }
  if (*a2)
  {
    uint64_t v21 = (pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
    if (!v21) {
      uint64_t v21 = sub_2171C1BE4(&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
    }
    sub_2168D2318((void *)((unint64_t)v63 | (8 * v20)), (void *)v21 + 2);
    uint64_t v22 = v20 + 1;
    uint64_t v23 = &v62[v20];
    uint64_t v25 = *a2;
    uint64_t v24 = a2[1];
    if (v24) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v26 = (std::__shared_weak_count *)v23[1];
    *uint64_t v23 = v25;
    v23[1] = v24;
    if (v26) {
      sub_216784EC4(v26);
    }
  }
  else
  {
    uint64_t v22 = v20;
  }
  if (*a3)
  {
    uint64_t v27 = (pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
    if (!v27) {
      uint64_t v27 = sub_2171C1BE4(&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
    }
    sub_2168D2318((void *)v63 + v22, (void *)v27 + 3);
    uint64_t v28 = v22 + 1;
    long long v29 = &v62[v22];
    uint64_t v31 = *a3;
    uint64_t v30 = a3[1];
    if (v30) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v30 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v32 = (std::__shared_weak_count *)v29[1];
    void *v29 = v31;
    v29[1] = v30;
    if (v32) {
      sub_216784EC4(v32);
    }
  }
  else
  {
    uint64_t v28 = v22;
  }
  if (*a4)
  {
    uint64_t v33 = (pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
    if (!v33) {
      uint64_t v33 = sub_2171C1BE4(&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
    }
    sub_2168D2318((void *)v63 + v28, (void *)v33 + 4);
    unint64_t v34 = v28 + 1;
    int v35 = &v62[v28];
    uint64_t v37 = *a4;
    uint64_t v36 = a4[1];
    if (v36) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v36 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v38 = (std::__shared_weak_count *)v35[1];
    *int v35 = v37;
    v35[1] = v36;
    if (v38) {
      sub_216784EC4(v38);
    }
  }
  else
  {
    unint64_t v34 = v28;
  }
  if (*a5)
  {
    uint64_t v39 = (pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
    if (!v39) {
      uint64_t v39 = sub_2171C1BE4(&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
    }
    sub_2168D2318((void *)v63 + v34, (void *)v39 + 5);
    unint64_t v40 = v34 + 1;
    uint64_t v41 = &v62[v34];
    uint64_t v43 = *a5;
    uint64_t v42 = a5[1];
    if (v42) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v42 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v44 = (std::__shared_weak_count *)v41[1];
    *uint64_t v41 = v43;
    v41[1] = v42;
    if (v44) {
      sub_216784EC4(v44);
    }
  }
  else
  {
    unint64_t v40 = v34;
  }
  if (*a6)
  {
    long long v45 = (pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
    if (!v45) {
      long long v45 = sub_2171C1BE4(&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
    }
    sub_2168D2318((void *)v63 + v40, (void *)v45 + 6);
    unint64_t v46 = v40 + 1;
    char v47 = &v62[v40];
    uint64_t v49 = *a6;
    uint64_t v48 = a6[1];
    if (v48) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v48 + 8), 1uLL, memory_order_relaxed);
    }
    BOOL v50 = (std::__shared_weak_count *)v47[1];
    *char v47 = v49;
    v47[1] = v48;
    if (v50) {
      sub_216784EC4(v50);
    }
  }
  else
  {
    unint64_t v46 = v40;
  }
  if (*a7)
  {
    int v51 = (pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
    if (!v51) {
      int v51 = sub_2171C1BE4(&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
    }
    sub_2168D2318((void *)v63 + v46, (void *)v51 + 7);
    unint64_t v52 = v46 + 1;
    int v53 = &v62[v46];
    uint64_t v55 = *a7;
    uint64_t v54 = a7[1];
    if (v54) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v54 + 8), 1uLL, memory_order_relaxed);
    }
    long long v56 = (std::__shared_weak_count *)v53[1];
    *int v53 = v55;
    v53[1] = v54;
    if (v56) {
      sub_216784EC4(v56);
    }
  }
  else
  {
    unint64_t v52 = v46;
  }
  pxrInternal__aapl__pxrReserved__::HdRetainedContainerDataSource::New(v52, (uint64_t *)v63, (uint64_t *)v62, &v61);
  *a8 = v61;
  for (uint64_t i = 104; i != -8; i -= 16)
  {
    uint64_t v58 = *(std::__shared_weak_count **)((char *)v62 + i);
    if (v58) {
      sub_216784EC4(v58);
    }
  }
  for (uint64_t j = 48; j != -8; j -= 8)
  {
    uint64_t v60 = *(void *)((char *)v63 + j);
    if ((v60 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v60 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
}

void sub_2171F89E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v26 = 104;
  while (1)
  {
    uint64_t v27 = *(std::__shared_weak_count **)(&a11 + v26);
    if (v27) {
      sub_216784EC4(v27);
    }
    v26 -= 16;
    if (v26 == -8)
    {
      uint64_t v28 = 48;
      while (1)
      {
        uint64_t v29 = *(void *)(&a25 + v28);
        if ((v29 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        v28 -= 8;
        if (v28 == -8) {
          _Unwind_Resume(exception_object);
        }
      }
    }
  }
}

void pxrInternal__aapl__pxrReserved__::HdExtComputationSchema::GetFromParent(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens)) {
      sub_2171C1BE4(&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v3 + 24))(&v8, v3);
    sub_2171997C0((uint64_t)&v8, &v10);
    uint64_t v6 = v10;
    uint64_t v5 = v11;
    if (v11)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_216784EC4(v5);
      uint64_t v7 = v11;
      *a2 = v6;
      a2[1] = v5;
      if (v7) {
        sub_216784EC4(v7);
      }
    }
    else
    {
      *a2 = v10;
      a2[1] = 0;
    }
    if (v9) {
      sub_216784EC4(v9);
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    *a2 = 0;
    a2[1] = 0;
  }
}

pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::HdExtComputationSchema::GetSchemaToken(pxrInternal__aapl__pxrReserved__::HdExtComputationSchema *this)
{
  uint64_t result = (pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
  if (!result) {
    return sub_2171C1BE4(&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::HdExtComputationSchema::GetDefaultLocator(pxrInternal__aapl__pxrReserved__::HdExtComputationSchema *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B97638, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B97638))
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
    if (!v2) {
      uint64_t v2 = sub_2171C1BE4(&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
    }
    pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&unk_267B97600, v2);
    __cxa_atexit((void (*)(void *))sub_217199930, &unk_267B97600, &dword_216758000);
    __cxa_guard_release(&qword_267B97638);
  }
  return &unk_267B97600;
}

void sub_2171F8C10(_Unwind_Exception *a1)
{
}

_DWORD *pxrInternal__aapl__pxrReserved__::HdExtComputationSchema::GetInputValuesLocator(pxrInternal__aapl__pxrReserved__::HdExtComputationSchema *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B97678, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::HdExtComputationSchema *)__cxa_guard_acquire(&qword_267B97678);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::HdExtComputationSchema::GetDefaultLocator(v2);
      uint64_t v3 = (pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
      if (!v3) {
        uint64_t v3 = sub_2171C1BE4(&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
      }
      pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::Append((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&unk_267B97600, (pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens_StaticTokenType *)((char *)v3 + 8), dword_267B97640);
      __cxa_atexit((void (*)(void *))sub_217199930, dword_267B97640, &dword_216758000);
      __cxa_guard_release(&qword_267B97678);
    }
  }
  return dword_267B97640;
}

void sub_2171F8CDC(_Unwind_Exception *a1)
{
}

_DWORD *pxrInternal__aapl__pxrReserved__::HdExtComputationSchema::GetInputComputationsLocator(pxrInternal__aapl__pxrReserved__::HdExtComputationSchema *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B976B8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::HdExtComputationSchema *)__cxa_guard_acquire(&qword_267B976B8);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::HdExtComputationSchema::GetDefaultLocator(v2);
      uint64_t v3 = (pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
      if (!v3) {
        uint64_t v3 = sub_2171C1BE4(&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
      }
      pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::Append((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&unk_267B97600, (pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens_StaticTokenType *)((char *)v3 + 16), dword_267B97680);
      __cxa_atexit((void (*)(void *))sub_217199930, dword_267B97680, &dword_216758000);
      __cxa_guard_release(&qword_267B976B8);
    }
  }
  return dword_267B97680;
}

void sub_2171F8DA8(_Unwind_Exception *a1)
{
}

_DWORD *pxrInternal__aapl__pxrReserved__::HdExtComputationSchema::GetOutputsLocator(pxrInternal__aapl__pxrReserved__::HdExtComputationSchema *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B976F8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::HdExtComputationSchema *)__cxa_guard_acquire(&qword_267B976F8);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::HdExtComputationSchema::GetDefaultLocator(v2);
      uint64_t v3 = (pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
      if (!v3) {
        uint64_t v3 = sub_2171C1BE4(&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
      }
      pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::Append((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&unk_267B97600, (pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens_StaticTokenType *)((char *)v3 + 24), dword_267B976C0);
      __cxa_atexit((void (*)(void *))sub_217199930, dword_267B976C0, &dword_216758000);
      __cxa_guard_release(&qword_267B976F8);
    }
  }
  return dword_267B976C0;
}

void sub_2171F8E74(_Unwind_Exception *a1)
{
}

_DWORD *pxrInternal__aapl__pxrReserved__::HdExtComputationSchema::GetGlslKernelLocator(pxrInternal__aapl__pxrReserved__::HdExtComputationSchema *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B97738, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::HdExtComputationSchema *)__cxa_guard_acquire(&qword_267B97738);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::HdExtComputationSchema::GetDefaultLocator(v2);
      uint64_t v3 = (pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
      if (!v3) {
        uint64_t v3 = sub_2171C1BE4(&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
      }
      pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::Append((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&unk_267B97600, (pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens_StaticTokenType *)((char *)v3 + 32), dword_267B97700);
      __cxa_atexit((void (*)(void *))sub_217199930, dword_267B97700, &dword_216758000);
      __cxa_guard_release(&qword_267B97738);
    }
  }
  return dword_267B97700;
}

void sub_2171F8F40(_Unwind_Exception *a1)
{
}

_DWORD *pxrInternal__aapl__pxrReserved__::HdExtComputationSchema::GetCpuCallbackLocator(pxrInternal__aapl__pxrReserved__::HdExtComputationSchema *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B97778, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::HdExtComputationSchema *)__cxa_guard_acquire(&qword_267B97778);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::HdExtComputationSchema::GetDefaultLocator(v2);
      uint64_t v3 = (pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
      if (!v3) {
        uint64_t v3 = sub_2171C1BE4(&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
      }
      pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::Append((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&unk_267B97600, (pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens_StaticTokenType *)((char *)v3 + 40), dword_267B97740);
      __cxa_atexit((void (*)(void *))sub_217199930, dword_267B97740, &dword_216758000);
      __cxa_guard_release(&qword_267B97778);
    }
  }
  return dword_267B97740;
}

void sub_2171F900C(_Unwind_Exception *a1)
{
}

_DWORD *pxrInternal__aapl__pxrReserved__::HdExtComputationSchema::GetDispatchCountLocator(pxrInternal__aapl__pxrReserved__::HdExtComputationSchema *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B977B8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::HdExtComputationSchema *)__cxa_guard_acquire(&qword_267B977B8);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::HdExtComputationSchema::GetDefaultLocator(v2);
      uint64_t v3 = (pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
      if (!v3) {
        uint64_t v3 = sub_2171C1BE4(&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
      }
      pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::Append((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&unk_267B97600, (pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens_StaticTokenType *)((char *)v3 + 48), dword_267B97780);
      __cxa_atexit((void (*)(void *))sub_217199930, dword_267B97780, &dword_216758000);
      __cxa_guard_release(&qword_267B977B8);
    }
  }
  return dword_267B97780;
}

void sub_2171F90D8(_Unwind_Exception *a1)
{
}

_DWORD *pxrInternal__aapl__pxrReserved__::HdExtComputationSchema::GetElementCountLocator(pxrInternal__aapl__pxrReserved__::HdExtComputationSchema *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B977F8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::HdExtComputationSchema *)__cxa_guard_acquire(&qword_267B977F8);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::HdExtComputationSchema::GetDefaultLocator(v2);
      uint64_t v3 = (pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
      if (!v3) {
        uint64_t v3 = sub_2171C1BE4(&pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens);
      }
      pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::Append((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&unk_267B97600, (pxrInternal__aapl__pxrReserved__::HdExtComputationSchemaTokens_StaticTokenType *)((char *)v3 + 56), dword_267B977C0);
      __cxa_atexit((void (*)(void *))sub_217199930, dword_267B977C0, &dword_216758000);
      __cxa_guard_release(&qword_267B977F8);
    }
  }
  return dword_267B977C0;
}

void sub_2171F91A4(_Unwind_Exception *a1)
{
}

void *pxrInternal__aapl__pxrReserved__::HdExtComputationSchema::Builder::SetInputValues(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdExtComputationSchema::Builder::SetInputComputations(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 24);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdExtComputationSchema::Builder::SetOutputs(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 40);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdExtComputationSchema::Builder::SetGlslKernel(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 56);
  *(void *)(a1 + 4sub_2171F4108((uint64_t)this + 8) = v4;
  *(void *)(a1 + 56) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdExtComputationSchema::Builder::SetCpuCallback(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = v4;
  *(void *)(a1 + 72) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdExtComputationSchema::Builder::SetDispatchCount(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 88);
  *(void *)(a1 + 80) = v4;
  *(void *)(a1 + 8sub_2171F4108((uint64_t)this + 8) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdExtComputationSchema::Builder::SetElementCount(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 104);
  *(void *)(a1 + 96) = v4;
  *(void *)(a1 + 104) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::HdExtComputationSchema::Builder::Build(pxrInternal__aapl__pxrReserved__::HdExtComputationSchema::Builder *this@<X0>, _OWORD *a2@<X8>)
{
}

void *sub_2171F93D0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = *(void **)a1;
  if (result
    && (uint64_t result = __dynamic_cast(result, (const struct __class_type_info *)&unk_26C77BD10, (const struct __class_type_info *)&unk_26C77FE80, 0)) != 0)
  {
    uint64_t v5 = *(void *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdExtComputationUtils::_GenerateDependencyMap@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *(pxrInternal__aapl__pxrReserved__::HdRenderIndex **)(a2 + 8);
  memset(v7, 0, sizeof(v7));
  uint64_t v4 = *a1;
  if (*a1 != a1[1])
  {
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
    if (!v5) {
      uint64_t v5 = sub_2171C0F34(&pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens);
    }
    pxrInternal__aapl__pxrReserved__::HdRenderIndex::GetSprim(v3, (pxrInternal__aapl__pxrReserved__::HdPrimTypeTokens_StaticTokenType *)((char *)v5 + 280), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v4 + 28));
  }
  *(_OWORD *)a3 = 0uLL;
  *(_OWORD *)(a3 + 16) = 0uLL;
  *(_DWORD *)(a3 + 32) = 1065353216;
  return sub_2171FA678(v7);
}

void sub_2171F9730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_216862C74(v9);
  sub_2171FA678((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2171F9770(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[4];
  uint64_t v8 = a1[5];
  unint64_t v9 = v8 + v7;
  if (v6 == v8 + v7)
  {
    sub_2171FA720(a1);
    uint64_t v7 = a1[4];
    uint64_t v8 = a1[5];
    uint64_t v5 = a1[1];
    unint64_t v9 = v7 + v8;
  }
  *(void *)(*(void *)(v5 + ((v9 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v9 & 0x1FF)) = *a2;
  a1[5] = v8 + 1;
  unint64_t v10 = v7 + v8 + 1;
  uint64_t v11 = a1[1];
  uint64_t v12 = (void *)(v11 + 8 * (v10 >> 9));
  uint64_t v13 = *v12 + 8 * (v10 & 0x1FF);
  if (a1[2] == v11) {
    uint64_t v13 = 0;
  }
  if (v13 == *v12) {
    uint64_t v13 = *(v12 - 1) + 4096;
  }
  return v13 - 8;
}

void pxrInternal__aapl__pxrReserved__::HdExtComputationUtils::_LimitTimeSamples(unint64_t a1, double **a2)
{
  std::__sort<std::__less<double,double> &,double *>();
  uint64_t v4 = sub_216C4287C(*a2, a2[1]);
  uint64_t v5 = *a2;
  if (a2[1] != v4) {
    a2[1] = v4;
  }
  unint64_t v6 = v4 - v5;
  if (v6 >= a1) {
    unint64_t v7 = a1;
  }
  else {
    unint64_t v7 = v6;
  }
  sub_21677C0AC((uint64_t)a2, v7);
}

BOOL pxrInternal__aapl__pxrReserved__::HdExtComputationUtils::_InvokeComputation(uint64_t a1, void *a2, const pxrInternal__aapl__pxrReserved__::VtValue *a3, uint64_t a4, const pxrInternal__aapl__pxrReserved__::VtValue *a5, uint64_t a6, pxrInternal__aapl__pxrReserved__::VtValue *a7, unint64_t a8)
{
  pxrInternal__aapl__pxrReserved__::HdExtComputationContextInternal::HdExtComputationContextInternal((uint64_t)v34);
  if (a4)
  {
    uint64_t v16 = 0;
    do
    {
      pxrInternal__aapl__pxrReserved__::HdExtComputationContextInternal::SetInputValue(v34, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2[4] + v16), a3);
      v16 += 8;
      a3 = (const pxrInternal__aapl__pxrReserved__::VtValue *)((char *)a3 + 16);
      --a4;
    }
    while (a4);
  }
  if (a6)
  {
    uint64_t v17 = 0;
    do
    {
      pxrInternal__aapl__pxrReserved__::HdExtComputationContextInternal::SetInputValue(v34, (const pxrInternal__aapl__pxrReserved__::TfToken *)(a2[7] + v17), a5);
      v17 += 24;
      a5 = (const pxrInternal__aapl__pxrReserved__::VtValue *)((char *)a5 + 16);
      --a6;
    }
    while (a6);
  }
  (*(void (**)(uint64_t, void *, uint64_t **))(*(void *)a1 + 368))(a1, a2 + 1, v34);
  if (pxrInternal__aapl__pxrReserved__::HdExtComputationContextInternal::HasComputationError((pxrInternal__aapl__pxrReserved__::HdExtComputationContextInternal *)v34))
  {
    uint64_t v29 = "hd/extComputationUtils.cpp";
    uint64_t v30 = "_InvokeComputation";
    uint64_t v31 = 146;
    uint64_t v32 = "static BOOL pxrInternal__aapl__pxrReserved__::HdExtComputationUtils::_InvokeComputation(HdSceneDelegate &, con"
          "st HdExtComputation &, TfSpan<const VtValue>, TfSpan<const VtValue>, TfSpan<VtValue>)";
    char v33 = 0;
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 1));
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v29, (pxrInternal__aapl__pxrReserved__ *)"Error invoking computation %s.\n", v19, Text);
    BOOL v20 = 0;
  }
  else if (a8)
  {
    uint64_t v21 = 0;
    BOOL v20 = 0;
    uint64_t v22 = 0;
    while (1)
    {
      uint64_t v23 = a2[10];
      if (!pxrInternal__aapl__pxrReserved__::HdExtComputationContextInternal::GetOutputValue((pxrInternal__aapl__pxrReserved__::HdExtComputationContextInternal *)v34, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v23 + v21), a7))break; {
      BOOL v20 = ++v22 >= a8;
      }
      v21 += 24;
      a7 = (pxrInternal__aapl__pxrReserved__::VtValue *)((char *)a7 + 16);
      if (a8 == v22) {
        goto LABEL_20;
      }
    }
    uint64_t v29 = "hd/extComputationUtils.cpp";
    uint64_t v30 = "_InvokeComputation";
    uint64_t v31 = 156;
    uint64_t v32 = "static BOOL pxrInternal__aapl__pxrReserved__::HdExtComputationUtils::_InvokeComputation(HdSceneDelegate &, con"
          "st HdExtComputation &, TfSpan<const VtValue>, TfSpan<const VtValue>, TfSpan<VtValue>)";
    char v33 = 0;
    unint64_t v24 = *(void *)(v23 + v21) & 0xFFFFFFFFFFFFFFF8;
    if (v24)
    {
      uint64_t v25 = (const char *)(v24 + 16);
      if (*(char *)(v24 + 39) < 0) {
        uint64_t v25 = *(const char **)v25;
      }
    }
    else
    {
      uint64_t v25 = "";
    }
    uint64_t v26 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 1));
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v29, (pxrInternal__aapl__pxrReserved__ *)"Error getting out %s for computation %s.\n", v27, v25, v26);
  }
  else
  {
    BOOL v20 = 1;
  }
LABEL_20:
  pxrInternal__aapl__pxrReserved__::HdExtComputationContextInternal::~HdExtComputationContextInternal((pxrInternal__aapl__pxrReserved__::HdExtComputationContextInternal *)v34);
  return v20;
}

void sub_2171F9AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  pxrInternal__aapl__pxrReserved__::HdExtComputationContextInternal::~HdExtComputationContextInternal((pxrInternal__aapl__pxrReserved__::HdExtComputationContextInternal *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdExtComputationUtils::GetComputedPrimvarValues@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v54[8] = *(uint64_t **)MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::HdExtComputationUtils::_GenerateDependencyMap(a1, a2, (uint64_t)v45);
  std::string __p = 0;
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  sub_2171FADAC((uint64_t)v41, (uint64_t)v45);
  BOOL v7 = pxrInternal__aapl__pxrReserved__::HdExtComputationUtils::DependencySort(v41, &__p, v6);
  sub_216862C74((uint64_t)v41);
  if (v7)
  {
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    uint64_t v36 = 0;
    sub_2171FB134(&v36, __p, (uint64_t)v43, (v43 - (unsigned char *)__p) >> 3);
    memset(v39, 0, sizeof(v39));
    int v40 = 1065353216;
    uint64_t v8 = v36;
    int v35 = v37;
    if (v36 != v37)
    {
      do
      {
        unint64_t v9 = *v8;
        unint64_t v10 = (pxrInternal__aapl__pxrReserved__::HdExtComputation *)((char *)*v8 + 8);
        uint64_t v11 = (uint64_t *)*((void *)*v8 + 4);
        uint64_t v12 = (uint64_t *)*((void *)*v8 + 5);
        if (v11 != v12)
        {
          do
          {
            (*(void (**)(uint64_t **__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t *))(*(void *)a2 + 344))(v54, a2, v10, v11);
            char v47 = (char *)v11;
            uint64_t v13 = sub_2171F4160((uint64_t)v39, v11, (uint64_t)&unk_2174BFD90, (uint64_t **)&v47);
            sub_2168ED33C(v13 + 3, v54);
            sub_2168EE084((uint64_t)v54);
            ++v11;
          }
          while (v11 != v12);
          unint64_t v9 = *v8;
        }
        if (!pxrInternal__aapl__pxrReserved__::HdExtComputation::IsInputAggregation(v9))
        {
          pxrInternal__aapl__pxrReserved__::HdExtComputationContextInternal::HdExtComputationContextInternal((uint64_t)v54);
          uint64_t v14 = *v8;
          uint64_t v15 = (const pxrInternal__aapl__pxrReserved__::TfToken *)*((void *)*v8 + 4);
          uint64_t v16 = (const pxrInternal__aapl__pxrReserved__::TfToken *)*((void *)*v8 + 5);
          if (v15 != v16)
          {
            do
            {
              uint64_t v17 = sub_2168CB1F4(v39, v15);
              if (v17) {
                pxrInternal__aapl__pxrReserved__::HdExtComputationContextInternal::SetInputValue(v54, v15, (const pxrInternal__aapl__pxrReserved__::VtValue *)(v17 + 3));
              }
              uint64_t v15 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v15 + 8);
            }
            while (v15 != v16);
            uint64_t v14 = *v8;
          }
          uint64_t v18 = (const pxrInternal__aapl__pxrReserved__::TfToken *)*((void *)v14 + 7);
          uint64_t v19 = (const pxrInternal__aapl__pxrReserved__::TfToken *)*((void *)v14 + 8);
          while (v18 != v19)
          {
            BOOL v20 = sub_2168CB1F4(v39, (void *)v18 + 2);
            if (v20) {
              pxrInternal__aapl__pxrReserved__::HdExtComputationContextInternal::SetInputValue(v54, v18, (const pxrInternal__aapl__pxrReserved__::VtValue *)(v20 + 3));
            }
            uint64_t v18 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v18 + 24);
          }
          (*(void (**)(uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t **))(*(void *)a2 + 368))(a2, v10, v54);
          if (pxrInternal__aapl__pxrReserved__::HdExtComputationContextInternal::HasComputationError((pxrInternal__aapl__pxrReserved__::HdExtComputationContextInternal *)v54))
          {
            char v47 = "hd/extComputationUtils.cpp";
            uint64_t v48 = "_ExecuteComputations";
            uint64_t v49 = 215;
            BOOL v50 = "HdExtComputationUtils::ValueStore pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ExecuteCom"
                  "putations(HdExtComputationConstPtrVector, HdSceneDelegate *)";
            char v51 = 0;
            Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v10);
            pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v47, (pxrInternal__aapl__pxrReserved__ *)"Error invoking computation %s.\n", v22, Text);
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::HdExtComputation::GetOutputNames(*v8, (uint64_t)v46);
            uint64_t v23 = (uint64_t *)v46[0];
            unint64_t v24 = (uint64_t *)v46[1];
            while (v23 != v24)
            {
              v53[1] = 0;
              if (pxrInternal__aapl__pxrReserved__::HdExtComputationContextInternal::GetOutputValue((pxrInternal__aapl__pxrReserved__::HdExtComputationContextInternal *)v54, (const pxrInternal__aapl__pxrReserved__::TfToken *)v23, (pxrInternal__aapl__pxrReserved__::VtValue *)v53))
              {
                unint64_t v52 = v23;
                uint64_t v25 = sub_2171F4160((uint64_t)v39, v23, (uint64_t)&unk_2174BFD90, &v52);
                sub_2168EC6DC(v25 + 3, v53);
              }
              else
              {
                char v47 = "hd/extComputationUtils.cpp";
                uint64_t v48 = "_ExecuteComputations";
                uint64_t v49 = 224;
                BOOL v50 = "HdExtComputationUtils::ValueStore pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_Execut"
                      "eComputations(HdExtComputationConstPtrVector, HdSceneDelegate *)";
                char v51 = 0;
                unint64_t v26 = *v23 & 0xFFFFFFFFFFFFFFF8;
                if (v26)
                {
                  uint64_t v27 = (const char *)(v26 + 16);
                  if (*(char *)(v26 + 39) < 0) {
                    uint64_t v27 = *(const char **)v27;
                  }
                }
                else
                {
                  uint64_t v27 = "";
                }
                uint64_t v28 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v10);
                pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v47, (pxrInternal__aapl__pxrReserved__ *)"Error getting out %s for computation %s.\n", v29, v27, v28);
              }
              sub_2168EE084((uint64_t)v53);
              ++v23;
            }
            char v47 = (char *)v46;
            sub_216889A04((void ***)&v47);
          }
          pxrInternal__aapl__pxrReserved__::HdExtComputationContextInternal::~HdExtComputationContextInternal((pxrInternal__aapl__pxrReserved__::HdExtComputationContextInternal *)v54);
        }
        ++v8;
      }
      while (v8 != v35);
      uint64_t v8 = v36;
    }
    if (v8)
    {
      uint64_t v37 = v8;
      operator delete(v8);
    }
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_DWORD *)(a3 + 32) = 1065353216;
    uint64_t v31 = (uint64_t *)*a1;
    for (uint64_t i = (uint64_t *)a1[1]; v31 != i; v31 += 8)
    {
      v54[0] = v31 + 5;
      uint64_t v32 = sub_2171F4160((uint64_t)v39, v31 + 5, (uint64_t)&unk_2174BFD90, v54);
      v54[0] = v31;
      char v33 = sub_2171F4160(a3, v31, (uint64_t)&unk_2174BFD90, v54);
      sub_2168EC6DC(v33 + 3, v32 + 3);
    }
    sub_2171F3C08((uint64_t)v39);
  }
  else
  {
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_DWORD *)(a3 + 32) = 1065353216;
  }
  if (__p)
  {
    uint64_t v43 = __p;
    operator delete(__p);
  }
  return sub_216862C74((uint64_t)v45);
}

void sub_2171F9F58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  if (__p) {
    operator delete(__p);
  }
  sub_216862C74((uint64_t)&a30);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::HdExtComputationUtils::DependencySort(void *a1, void **a2, char *a3)
{
  if (a2)
  {
    long long v32 = 0u;
    long long v33 = 0u;
    long long v31 = 0u;
    uint64_t v5 = (uint64_t *)a1[2];
    if (v5)
    {
      do
      {
        uint64_t v6 = v5[3];
        v29[0] = v5[2];
        if (v6 == v5[4])
        {
          sub_2171F9770(&v31, v29);
          uint64_t v5 = (uint64_t *)sub_216877B98(a1, v5);
        }
        else
        {
          uint64_t v5 = (uint64_t *)*v5;
        }
      }
      while (v5);
      for (uint64_t i = *((void *)&v33 + 1); *((void *)&v33 + 1); uint64_t i = *((void *)&v33 + 1))
      {
        uint64_t v8 = *(void *)(*(void *)(*((void *)&v31 + 1)
                                   + (((unint64_t)(i + v33 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((i + v33 - 1) & 0x1FF));
        unint64_t v10 = a2[1];
        unint64_t v9 = (unint64_t)a2[2];
        if ((unint64_t)v10 >= v9)
        {
          uint64_t v12 = ((char *)v10 - (unsigned char *)*a2) >> 3;
          if ((unint64_t)(v12 + 1) >> 61) {
            sub_21677CB10();
          }
          uint64_t v13 = v9 - (void)*a2;
          uint64_t v14 = v13 >> 2;
          if (v13 >> 2 <= (unint64_t)(v12 + 1)) {
            uint64_t v14 = v12 + 1;
          }
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v15 = v14;
          }
          if (v15) {
            uint64_t v16 = (char *)sub_21677CB28((uint64_t)(a2 + 2), v15);
          }
          else {
            uint64_t v16 = 0;
          }
          uint64_t v17 = &v16[8 * v12];
          *(void *)uint64_t v17 = v8;
          uint64_t v11 = v17 + 8;
          uint64_t v19 = (char *)*a2;
          uint64_t v18 = (char *)a2[1];
          if (v18 != *a2)
          {
            do
            {
              uint64_t v20 = *((void *)v18 - 1);
              v18 -= 8;
              *((void *)v17 - 1) = v20;
              v17 -= 8;
            }
            while (v18 != v19);
            uint64_t v18 = (char *)*a2;
          }
          *a2 = v17;
          a2[1] = v11;
          a2[2] = &v16[8 * v15];
          if (v18) {
            operator delete(v18);
          }
        }
        else
        {
          void *v10 = v8;
          uint64_t v11 = v10 + 1;
        }
        a2[1] = v11;
        --*((void *)&v33 + 1);
        sub_217039C04(&v31, 1);
        uint64_t v21 = (uint64_t *)a1[2];
        while (v21)
        {
          uint64_t v22 = (char *)v21[3];
          v29[0] = v21[2];
          uint64_t v23 = (char *)v21[4];
          unint64_t v24 = v22;
          if (v22 != v23)
          {
            while (*(void *)v24 != v8)
            {
              v24 += 8;
              if (v24 == v23)
              {
                unint64_t v24 = (char *)v21[4];
                break;
              }
            }
          }
          if (v24 != v23)
          {
            int64_t v25 = v23 - (v24 + 8);
            if (v23 != v24 + 8)
            {
              memmove(v24, v24 + 8, v23 - (v24 + 8));
              uint64_t v22 = (char *)v21[3];
            }
            uint64_t v23 = &v24[v25];
            v21[4] = (uint64_t)&v24[v25];
          }
          if (v22 == v23)
          {
            sub_2171FA34C((uint64_t)&v31, v29);
            uint64_t v21 = (uint64_t *)sub_216877B98(a1, v21);
          }
          else
          {
            uint64_t v21 = (uint64_t *)*v21;
          }
        }
      }
    }
    uint64_t v26 = a1[3];
    BOOL v27 = v26 == 0;
    if (v26)
    {
      v29[0] = "hd/extComputationUtils.cpp";
      v29[1] = "DependencySort";
      v29[2] = 339;
      v29[3] = "static BOOL pxrInternal__aapl__pxrReserved__::HdExtComputationUtils::DependencySort(HdExtComputationUtils"
               "::ComputationDependencyMap, HdExtComputationConstPtrVector *)";
      char v30 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v29, (pxrInternal__aapl__pxrReserved__ *)"Cycle detected in ExtComputation dependency graph. Unresolved dependencies:\n", a3);
      if (sub_2171A6C8C(15)) {
        pxrInternal__aapl__pxrReserved__::HdExtComputationUtils::PrintDependencyMap((uint64_t)a1);
      }
      a2[1] = *a2;
    }
    sub_2171FA678(&v31);
  }
  else
  {
    *(void *)&long long v31 = "hd/extComputationUtils.cpp";
    *((void *)&v31 + 1) = "DependencySort";
    *(void *)&long long v32 = 279;
    *((void *)&v32 + 1) = "static BOOL pxrInternal__aapl__pxrReserved__::HdExtComputationUtils::DependencySort(HdExtCom"
                            "putationUtils::ComputationDependencyMap, HdExtComputationConstPtrVector *)";
    LOBYTE(v33) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v31, 1, (pxrInternal__aapl__pxrReserved__ *)"Received nullptr for sortedComps.");
    return 0;
  }
  return v27;
}

void sub_2171FA31C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2171FA678((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2171FA34C(uint64_t a1, void *a2)
{
  unint64_t v4 = *(void *)(a1 + 32);
  if (!v4)
  {
    sub_2171FB1B0((void **)a1);
    unint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = (void *)(v5 + 8 * (v4 >> 9));
  if (*(void *)(a1 + 16) == v5) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = *v6 + 8 * (v4 & 0x1FF);
  }
  if (v7 == *v6) {
    uint64_t v7 = *(v6 - 1) + 4096;
  }
  *(void *)(v7 - sub_2171F4108((uint64_t)this + 8) = *a2;
  unint64_t v8 = v4 - 1;
  uint64_t v9 = *(void *)(a1 + 40) + 1;
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  uint64_t v10 = *(void *)(a1 + 8);
  if (*(void *)(a1 + 16) == v10) {
    return 0;
  }
  else {
    return *(void *)(v10 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::HdExtComputationUtils::PrintDependencyMap(uint64_t a1)
{
  uint64_t v2 = (void *)MEMORY[0x263F8C100];
  uint64_t v3 = sub_216779180(MEMORY[0x263F8C100], (uint64_t)"Computations dep map", 20);
  std::ios_base::getloc((const std::ios_base *)((char *)v3 + *(void *)(*v3 - 24)));
  unint64_t v4 = std::locale::use_facet(&v17, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
  std::locale::~locale(&v17);
  std::ostream::put();
  std::ostream::flush();
  uint64_t v5 = *(void **)(a1 + 16);
  if (v5)
  {
    uint64_t v6 = (void *)MEMORY[0x263F8C100];
    uint64_t v7 = (std::locale::id *)MEMORY[0x263F8C108];
    do
    {
      unint64_t v8 = pxrInternal__aapl__pxrReserved__::operator<<(v6, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v5[2] + 8));
      sub_216779180(v8, (uint64_t)" -> [ ", 6);
      uint64_t v9 = (uint64_t *)v5[3];
      uint64_t v10 = (uint64_t *)v5[4];
      while (v9 != v10)
      {
        uint64_t v11 = *v9++;
        uint64_t v12 = pxrInternal__aapl__pxrReserved__::operator<<(v6, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v11 + 8));
        sub_216779180(v12, (uint64_t)", ", 2);
      }
      uint64_t v13 = sub_216779180(v6, (uint64_t)" ]", 2);
      std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(void *)(*v13 - 24)));
      uint64_t v14 = std::locale::use_facet(&v17, v7);
      ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
      std::locale::~locale(&v17);
      std::ostream::put();
      std::ostream::flush();
      uint64_t v5 = (void *)*v5;
    }
    while (v5);
  }
  std::ios_base::getloc((const std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)));
  unint64_t v15 = std::locale::use_facet(&v17, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
  std::locale::~locale(&v17);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_2171FA65C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t sub_2171FA678(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 256;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 512;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }

  return sub_21683347C((uint64_t)a1);
}

void sub_2171FA720(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)sub_21677CB28(v5, v33);
      int v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_216832B24(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_216832C3C((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)sub_21677CB28((uint64_t)(a1 + 3), v46);
      int v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        char v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)char v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      uint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  long long v56 = a1 + 3;
  *(void *)&long long v54 = sub_21677CB28((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  int v53 = operator new(0x1000uLL);
  sub_216832D5C(&v54, &v53);
  BOOL v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_216832E74((uint64_t)&v54, v27);
  }
  uint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_2171FA9EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *sub_2171FAA38(void *a1, void *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v4 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  unint64_t v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 - 1);
  }
  unint64_t v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  uint64_t result = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == *a2) {
          return result;
        }
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(void *)&v2) {
            v10 %= *(void *)&v2;
          }
        }
        else
        {
          v10 &= *(void *)&v2 - 1;
        }
        if (v10 != v7) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void *sub_2171FAB24(uint64_t a1, void *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  unint64_t v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = v9 & (v10 - 1);
    }
    uint64_t v12 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = (void *)*i)
      {
        unint64_t v14 = i[1];
        if (v14 == v9)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
          }
          else
          {
            v14 &= v10 - 1;
          }
          if (v14 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v15 = (void *)(a1 + 16);
  uint64_t i = operator new(0x30uLL);
  *uint64_t i = 0;
  i[1] = v9;
  i[2] = **a4;
  i[3] = 0;
  i[4] = 0;
  i[5] = 0;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_21678A04C(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v22 = *(void *)a1;
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *uint64_t i = *v23;
LABEL_38:
    *uint64_t v23 = i;
    goto LABEL_39;
  }
  *uint64_t i = *v15;
  *uint64_t v15 = i;
  *(void *)(v22 + 8 * v4) = v15;
  if (*i)
  {
    unint64_t v24 = *(void *)(*i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v24 >= v10) {
        v24 %= v10;
      }
    }
    else
    {
      v24 &= v10 - 1;
    }
    uint64_t v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_2171FAD90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  sub_21686350C(v11, v10);
  _Unwind_Resume(a1);
}

uint64_t sub_2171FADAC(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_21678A04C(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    sub_2171FAE24(a1, i + 2, i + 2);
  return a1;
}

void sub_2171FAE0C(_Unwind_Exception *a1)
{
  sub_216862C74(v1);
  _Unwind_Resume(a1);
}

void *sub_2171FAE24(uint64_t a1, void *a2, void *a3)
{
  unint64_t v5 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v6 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v5 >> 47) ^ v5);
  unint64_t v7 = 0x9DDFEA08EB382D69 * (v6 ^ (v6 >> 47));
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v6 ^ (v6 >> 47));
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
    }
    else
    {
      unint64_t v3 = v7 & (v8 - 1);
    }
    unint64_t v10 = *(void **)(*(void *)a1 + 8 * v3);
    if (v10)
    {
      uint64_t result = (void *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = result[1];
          if (v12 == v7)
          {
            if (result[2] == *a2) {
              return result;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v3) {
              break;
            }
          }
          uint64_t result = (void *)*result;
        }
        while (result);
      }
    }
  }
  sub_2171FB094(a1, v7, a3, (uint64_t)&v21);
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_21678A04C(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v3 = v7 % v8;
      }
      else {
        unint64_t v3 = v7;
      }
    }
    else
    {
      unint64_t v3 = (v8 - 1) & v7;
    }
  }
  unint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *size_t v21 = *v19;
    *unint64_t v19 = v21;
  }
  else
  {
    *size_t v21 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v21;
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*v21)
    {
      unint64_t v20 = *(void *)(*v21 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v20 >= v8) {
          v20 %= v8;
        }
      }
      else
      {
        v20 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v20) = v21;
    }
  }
  uint64_t result = v21;
  ++*(void *)(a1 + 24);
  return result;
}

void sub_2171FB070(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    sub_21686350C((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2171FB094@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x30uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + sub_2171F4108((uint64_t)this + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  uint8x8_t v9 = (const void *)a3[1];
  void v8[2] = *a3;
  void v8[4] = 0;
  v8[5] = 0;
  uint64_t v8[3] = 0;
  uint64_t result = sub_2171FB134(v8 + 3, v9, a3[2], (uint64_t)(a3[2] - (void)v9) >> 3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_2171FB118(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_21686350C(v3, v2);
  _Unwind_Resume(a1);
}

void *sub_2171FB134(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = sub_21677CACC(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2171FB194(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + sub_2171F4108((uint64_t)this + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_2171FB1B0(void **a1)
{
  int8x8_t v2 = a1[1];
  uint64_t v3 = a1[2];
  unint64_t v4 = v3 - v2;
  if (v3 == v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = ((v3 - v2) << 6) - 1;
  }
  unint64_t v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(void)a1[5]] < 0x200)
  {
    uint64_t v7 = (uint64_t)(a1 + 3);
    size_t v8 = a1[3];
    uint8x8_t v9 = *a1;
    uint64_t v10 = v8 - (unsigned char *)*a1;
    if (v4 >= v10)
    {
      if (v8 == v9) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = v10 >> 2;
      }
      unint64_t v46 = a1 + 3;
      std::string __p = sub_21677CB28(v7, v11);
      uint64_t v43 = (char *)__p;
      uint64_t v44 = (char *)__p;
      uint64_t v45 = (char *)__p + 8 * v12;
      uint64_t v41 = operator new(0x1000uLL);
      sub_216832D5C(&__p, &v41);
      float v13 = (char *)a1[1];
      float v14 = v44;
      if (v13 == a1[2])
      {
        unint64_t v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            int64_t v15 = v43 - (unsigned char *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p) {
                unint64_t v23 = 1;
              }
              else {
                unint64_t v23 = (v14 - (unsigned char *)__p) >> 2;
              }
              unint64_t v24 = (char *)sub_21677CB28((uint64_t)v46, v23);
              uint64_t v26 = v43;
              float v14 = &v24[8 * (v23 >> 2)];
              uint64_t v27 = v44 - v43;
              if (v44 != v43)
              {
                float v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v28 = 8 * (v27 >> 3);
                uint64_t v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  uint64_t v30 = *(void *)v26;
                  v26 += 8;
                  *(void *)uint64_t v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              long long v31 = __p;
              std::string __p = v24;
              uint64_t v43 = &v24[8 * (v23 >> 2)];
              uint64_t v44 = v14;
              uint64_t v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                float v14 = v44;
              }
            }
            else
            {
              uint64_t v16 = v15 >> 3;
              BOOL v17 = v15 >> 3 < -1;
              uint64_t v18 = (v15 >> 3) + 2;
              if (v17) {
                uint64_t v19 = v18;
              }
              else {
                uint64_t v19 = v16 + 1;
              }
              unint64_t v20 = &v43[-8 * (v19 >> 1)];
              int64_t v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                float v14 = v43;
              }
              uint64_t v22 = &v14[-8 * (v19 >> 1)];
              float v14 = &v20[v21];
              uint64_t v43 = v22;
              uint64_t v44 = &v20[v21];
            }
          }
          uint64_t v32 = *(void *)v13;
          v13 += 8;
          *(void *)float v14 = v32;
          float v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        unint64_t v33 = (char *)a1[1];
      }
      uint64_t v36 = *a1;
      uint64_t v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      std::string __p = v36;
      uint64_t v43 = v33;
      uint64_t v38 = (char *)a1[3];
      uint64_t v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      uint64_t v44 = v13;
      uint64_t v45 = v38;
      if (v14 - v37 == 8) {
        uint64_t v40 = 256;
      }
      else {
        uint64_t v40 = (uint64_t)a1[4] + 512;
      }
      a1[4] = (void *)v40;
      if (v13 != v33) {
        uint64_t v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      }
      if (v36) {
        operator delete(v36);
      }
    }
    else
    {
      if (v2 == v9)
      {
        std::string __p = operator new(0x1000uLL);
        sub_216832B24(a1, &__p);
        unint64_t v34 = a1[2];
        std::string __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        std::string __p = operator new(0x1000uLL);
      }
      sub_216832C3C((uint64_t)a1, &__p);
      if ((unsigned char *)a1[2] - (unsigned char *)a1[1] == 8) {
        uint64_t v35 = 256;
      }
      else {
        uint64_t v35 = (uint64_t)a1[4] + 512;
      }
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 512;
    std::string __p = (void *)*((void *)v3 - 1);
    a1[2] = v3 - 8;
    sub_216832C3C((uint64_t)a1, &__p);
  }
}

void sub_2171FB478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  operator delete(v12);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdExtentSchemaTokens_StaticTokenType::~HdExtentSchemaTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::HdExtentSchemaTokens_StaticTokenType *this)
{
  unint64_t v4 = (void **)((char *)this + 24);
  sub_216889A04(&v4);
  uint64_t v2 = *((void *)this + 2);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 1);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

pxrInternal__aapl__pxrReserved__::HdExtentSchemaTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::HdExtentSchemaTokens_StaticTokenType::HdExtentSchemaTokens_StaticTokenType(atomic_uint **this)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v2 = (atomic_uint **)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "extent", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2, "min", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 2, "max", 0);
  uint64_t v3 = *this;
  int64_t v15 = v3;
  if ((v3 & 7) != 0)
  {
    unint64_t v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
      int64_t v15 = v4;
    }
  }
  uint64_t v5 = *v2;
  uint64_t v16 = v5;
  if ((v5 & 7) != 0)
  {
    unint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v16 = v6;
    }
  }
  uint64_t v7 = this[2];
  BOOL v17 = v7;
  if ((v7 & 7) != 0)
  {
    size_t v8 = (atomic_uint *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
      BOOL v17 = v8;
    }
  }
  this[3] = 0;
  this[4] = 0;
  this[5] = 0;
  uint8x8_t v9 = (atomic_uint *)operator new(0x18uLL);
  unint64_t v10 = 0;
  this[3] = v9;
  this[4] = v9;
  this[5] = v9 + 6;
  do
  {
    unint64_t v11 = (&v15)[v10 / 2];
    *(void *)&v9[v10] = v11;
    if ((v11 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v9[v10] &= 0xFFFFFFFFFFFFFFF8;
    }
    v10 += 2;
  }
  while (v10 != 6);
  this[4] = v9 + 6;
  for (uint64_t i = 2; i != -1; --i)
  {
    float v13 = (&v15)[i];
    if ((v13 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return (pxrInternal__aapl__pxrReserved__::HdExtentSchemaTokens_StaticTokenType *)this;
}

void sub_2171FB6F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  sub_216889A04(&a9);
  uint64_t v15 = 16;
  while (1)
  {
    uint64_t v16 = *(void *)(&a11 + v15);
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v15 -= 8;
    if (v15 == -8)
    {
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void pxrInternal__aapl__pxrReserved__::HdExtentSchema::GetMin(pxrInternal__aapl__pxrReserved__::HdExtentSchema *this@<X0>, void *a2@<X8>)
{
  unint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdExtentSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdExtentSchemaTokens);
  if (!v4) {
    unint64_t v4 = sub_2171C2044(&pxrInternal__aapl__pxrReserved__::HdExtentSchemaTokens);
  }
  uint64_t v5 = (atomic_uint *)*((void *)v4 + 1);
  uint64_t v7 = v5;
  if ((v5 & 7) != 0)
  {
    unint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v7 = v6;
    }
  }
  sub_2171FB844((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_2171FB844(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (v3)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v3 + 24))(&v4);
    sub_2171FBDFC((uint64_t)&v4, a2);
    if (v5) {
      sub_216784EC4(v5);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

void pxrInternal__aapl__pxrReserved__::HdExtentSchema::GetMax(pxrInternal__aapl__pxrReserved__::HdExtentSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdExtentSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdExtentSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171C2044(&pxrInternal__aapl__pxrReserved__::HdExtentSchemaTokens);
  }
  uint64_t v5 = (atomic_uint *)*((void *)v4 + 2);
  uint64_t v7 = v5;
  if ((v5 & 7) != 0)
  {
    unint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v7 = v6;
    }
  }
  sub_2171FB844((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdExtentSchema::BuildRetained(uint64_t *a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  v23[2] = *MEMORY[0x263EF8340];
  v23[0] = 0;
  v23[1] = 0;
  memset(v22, 0, sizeof(v22));
  if (*a1)
  {
    unint64_t v6 = (pxrInternal__aapl__pxrReserved__::HdExtentSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdExtentSchemaTokens);
    if (!v6) {
      unint64_t v6 = sub_2171C2044(&pxrInternal__aapl__pxrReserved__::HdExtentSchemaTokens);
    }
    sub_2168D2318(v23, (void *)v6 + 1);
    uint64_t v8 = *a1;
    uint64_t v7 = a1[1];
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    uint8x8_t v9 = (std::__shared_weak_count *)*((void *)&v22[0] + 1);
    *(void *)&v22[0] = v8;
    *((void *)&v22[0] + 1) = v7;
    if (v9) {
      sub_216784EC4(v9);
    }
    uint64_t v10 = 1;
  }
  else
  {
    uint64_t v10 = 0;
  }
  if (*a2)
  {
    unint64_t v11 = (pxrInternal__aapl__pxrReserved__::HdExtentSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdExtentSchemaTokens);
    if (!v11) {
      unint64_t v11 = sub_2171C2044(&pxrInternal__aapl__pxrReserved__::HdExtentSchemaTokens);
    }
    sub_2168D2318(&v23[v10], (void *)v11 + 2);
    unint64_t v12 = v10 + 1;
    float v13 = &v22[v10];
    uint64_t v15 = *a2;
    uint64_t v14 = a2[1];
    if (v14) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v16 = (std::__shared_weak_count *)v13[1];
    *float v13 = v15;
    v13[1] = v14;
    if (v16) {
      sub_216784EC4(v16);
    }
  }
  else
  {
    unint64_t v12 = v10;
  }
  pxrInternal__aapl__pxrReserved__::HdRetainedContainerDataSource::New(v12, v23, (uint64_t *)v22, &v21);
  *a3 = v21;
  for (uint64_t i = 24; i != -8; i -= 16)
  {
    uint64_t v18 = *(std::__shared_weak_count **)((char *)v22 + i);
    if (v18) {
      sub_216784EC4(v18);
    }
  }
  for (uint64_t j = 1; j != -1; --j)
  {
    uint64_t v20 = v23[j];
    if ((v20 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
}

void sub_2171FBB1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  uint64_t v17 = 24;
  while (1)
  {
    uint64_t v18 = *(std::__shared_weak_count **)(&a11 + v17);
    if (v18) {
      sub_216784EC4(v18);
    }
    v17 -= 16;
    if (v17 == -8)
    {
      uint64_t v19 = 8;
      while (1)
      {
        uint64_t v20 = *(void *)(&a16 + v19);
        if ((v20 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        v19 -= 8;
        if (v19 == -8) {
          _Unwind_Resume(exception_object);
        }
      }
    }
  }
}

void pxrInternal__aapl__pxrReserved__::HdExtentSchema::GetFromParent(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdExtentSchemaTokens)) {
      sub_2171C2044(&pxrInternal__aapl__pxrReserved__::HdExtentSchemaTokens);
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v3 + 24))(&v8, v3);
    sub_2171997C0((uint64_t)&v8, &v10);
    uint64_t v6 = v10;
    uint64_t v5 = v11;
    if (v11)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_216784EC4(v5);
      uint64_t v7 = v11;
      *a2 = v6;
      a2[1] = v5;
      if (v7) {
        sub_216784EC4(v7);
      }
    }
    else
    {
      *a2 = v10;
      a2[1] = 0;
    }
    if (v9) {
      sub_216784EC4(v9);
    }
  }
  else
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    *a2 = 0;
    a2[1] = 0;
  }
}

pxrInternal__aapl__pxrReserved__::HdExtentSchemaTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::HdExtentSchema::GetSchemaToken(pxrInternal__aapl__pxrReserved__::HdExtentSchema *this)
{
  uint64_t result = (pxrInternal__aapl__pxrReserved__::HdExtentSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdExtentSchemaTokens);
  if (!result) {
    return sub_2171C2044(&pxrInternal__aapl__pxrReserved__::HdExtentSchemaTokens);
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::HdExtentSchema::GetDefaultLocator(pxrInternal__aapl__pxrReserved__::HdExtentSchema *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B97838, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B97838))
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::HdExtentSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdExtentSchemaTokens);
    if (!v2) {
      uint64_t v2 = sub_2171C2044(&pxrInternal__aapl__pxrReserved__::HdExtentSchemaTokens);
    }
    pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&unk_267B97800, v2);
    __cxa_atexit((void (*)(void *))sub_217199930, &unk_267B97800, &dword_216758000);
    __cxa_guard_release(&qword_267B97838);
  }
  return &unk_267B97800;
}

void sub_2171FBD4C(_Unwind_Exception *a1)
{
}

void *pxrInternal__aapl__pxrReserved__::HdExtentSchema::Builder::SetMin(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdExtentSchema::Builder::SetMax(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 24);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::HdExtentSchema::Builder::Build(pxrInternal__aapl__pxrReserved__::HdExtentSchema::Builder *this@<X0>, _OWORD *a2@<X8>)
{
}

void *sub_2171FBDFC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = *(void **)a1;
  if (result
    && (uint64_t result = __dynamic_cast(result, (const struct __class_type_info *)&unk_26C77BD10, (const struct __class_type_info *)&unk_26C77D5E8, 0)) != 0)
  {
    uint64_t v5 = *(void *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::HdFieldTokens_StaticTokenType::~HdFieldTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::HdFieldTokens_StaticTokenType *this)
{
  uint64_t v3 = (void **)((char *)this + 16);
  sub_216889A04(&v3);
  uint64_t v2 = *((void *)this + 1);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

pxrInternal__aapl__pxrReserved__::HdFieldTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::HdFieldTokens_StaticTokenType::HdFieldTokens_StaticTokenType(atomic_uint **this)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v2 = (atomic_uint **)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "filePath", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2, "fieldName", 0);
  uint64_t v3 = *this;
  float v13 = v3;
  if ((v3 & 7) != 0)
  {
    uint64_t v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
      float v13 = v4;
    }
  }
  uint64_t v5 = *v2;
  uint64_t v14 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v14 = v6;
    }
  }
  this[2] = 0;
  this[3] = 0;
  this[4] = 0;
  uint64_t v7 = (atomic_uint *)operator new(0x10uLL);
  unint64_t v8 = 0;
  this[2] = v7;
  this[3] = v7;
  this[4] = v7 + 4;
  do
  {
    uint8x8_t v9 = (&v13)[v8 / 2];
    *(void *)&v7[v8] = v9;
    if ((v9 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v7[v8] &= 0xFFFFFFFFFFFFFFF8;
    }
    v8 += 2;
  }
  while (v8 != 4);
  this[3] = v7 + 4;
  for (uint64_t i = 1; i != -1; --i)
  {
    unint64_t v11 = (&v13)[i];
    if ((v11 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return (pxrInternal__aapl__pxrReserved__::HdFieldTokens_StaticTokenType *)this;
}

void sub_2171FC068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  sub_216889A04(&a10);
  uint64_t v15 = 8;
  while (1)
  {
    uint64_t v16 = *(void *)(&a12 + v15);
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v15 -= 8;
    if (v15 == -8)
    {
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

pxrInternal__aapl__pxrReserved__::HdBprim *pxrInternal__aapl__pxrReserved__::HdField::HdField(pxrInternal__aapl__pxrReserved__::HdField *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::HdBprim::HdBprim(this, a2);
  *(void *)uint64_t result = &unk_26C780530;
  return result;
}

pxrInternal__aapl__pxrReserved__::HdSceneIndexBase *pxrInternal__aapl__pxrReserved__::HdSingleInputFilteringSceneIndexBase::HdSingleInputFilteringSceneIndexBase(pxrInternal__aapl__pxrReserved__::HdSceneIndexBase *a1, uint64_t *a2)
{
  pxrInternal__aapl__pxrReserved__::HdSceneIndexBase::HdSceneIndexBase(a1);
  void *v4 = &unk_26C780580;
  _DWORD v4[14] = *a2;
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(v4 + 14);
  sub_2168BD80C(v4 + 14);
  *((void *)a1 + 15) = &unk_26C7805E0;
  *((void *)a1 + 16) = 0;
  *((void *)a1 + 17) = a1;
  if (*a2)
  {
    uint64_t v6 = sub_2171E6834(a2);
    sub_2171FC6E0(&v10, (uint64_t)a1 + 120);
    pxrInternal__aapl__pxrReserved__::HdSceneIndexBase::AddObserver(v6, &v10);
    uint64_t v7 = *((void *)&v10 + 1);
    if (*((void *)&v10 + 1)
      && atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v10 + 1) + 8), 0xFFFFFFFF, memory_order_release) == 1)
    {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
  }
  else
  {
    *(void *)&long long v10 = "hd/filteringSceneIndex.cpp";
    *((void *)&v10 + 1) = "HdSingleInputFilteringSceneIndexBase";
    uint64_t v11 = 61;
    unint64_t v12 = "pxrInternal__aapl__pxrReserved__::HdSingleInputFilteringSceneIndexBase::HdSingleInputFilteringSceneIndexBase(c"
          "onst HdSceneIndexBaseRefPtr &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid input sceneIndex.");
    sub_2171FC31C((pxrInternal__aapl__pxrReserved__::HdSceneIndexBase **)&v10);
    unint64_t v8 = *v5;
    atomic_uint *v5 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)v10;
    *(void *)&long long v10 = 0;
    sub_2168BD378((int)v5, v8);
    sub_2171E8C28((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v10);
  }
  return a1;
}

void sub_2171FC28C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2171E8C28((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  pxrInternal__aapl__pxrReserved__::HdSceneIndexObserver::~HdSceneIndexObserver(v4, v6);
  sub_2171E8C28(v3);
  pxrInternal__aapl__pxrReserved__::HdSceneIndexBase::~HdSceneIndexBase(v2);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_2171FC31C@<X0>(pxrInternal__aapl__pxrReserved__::HdSceneIndexBase **a1@<X8>)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::HdSceneIndexBase *)operator new(0x70uLL);
  *(_OWORD *)uint64_t v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_OWORD *)v2 + 6) = 0u;
  pxrInternal__aapl__pxrReserved__::HdSceneIndexBase::HdSceneIndexBase(v2);
  *(void *)uint64_t v2 = &unk_26C780668;
  *a1 = v2;
  uint64_t v4 = 0;
  return sub_2171FC6B0(&v4);
}

void sub_2171FC394(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **pxrInternal__aapl__pxrReserved__::HdSingleInputFilteringSceneIndexBase::GetInputScenes@<X0>(pxrInternal__aapl__pxrReserved__::HdSingleInputFilteringSceneIndexBase *this@<X0>, void *a2@<X8>)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*((void *)this + 14);
  sub_2168BD80C((uint64_t *)&v5);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = (char *)operator new(8uLL);
  *a2 = v3;
  a2[1] = v3;
  a2[2] = v3 + 8;
  a2[1] = sub_2171FC7C4((uint64_t)(a2 + 2), (uint64_t)&v5, (uint64_t)&v6, (uint64_t)v3);
  return sub_2171E8C28(&v5);
}

void sub_2171FC45C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a11)
{
  uint64_t v13 = v12;
  *(void *)(v11 + sub_2171F4108((uint64_t)this + 8) = v13;
  sub_2171FC84C(&a9);
  sub_2171E8C28(&a11);
  _Unwind_Resume(a1);
}

void **pxrInternal__aapl__pxrReserved__::HdSingleInputFilteringSceneIndexBase::_PrimsRenamed(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  v7[17] = *(void **)MEMORY[0x263EF8340];
  v7[16] = (void *)0x1000000000;
  v6[32] = (void *)0x1000000000;
  pxrInternal__aapl__pxrReserved__::HdSceneIndexObserver::ConvertPrimsRenamedToRemovedAndAdded(a2, a3, v7, v6);
  (*(void (**)(uint64_t, uint64_t, void **))(*(void *)a1 + 56))(a1, a2, v7);
  (*(void (**)(uint64_t, uint64_t, void **))(*(void *)a1 + 48))(a1, a2, v6);
  sub_2171FC96C(v6);
  return sub_2171FC8D0(v7);
}

void sub_2171FC588(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2171FC96C((void **)va);
  sub_2171FC8D0((void **)(v2 - 176));
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdSingleInputFilteringSceneIndexBase::_Observer::PrimsAdded(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 48))();
}

uint64_t pxrInternal__aapl__pxrReserved__::HdSingleInputFilteringSceneIndexBase::_Observer::PrimsRemoved(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 56))();
}

uint64_t pxrInternal__aapl__pxrReserved__::HdSingleInputFilteringSceneIndexBase::_Observer::PrimsDirtied(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 64))();
}

uint64_t pxrInternal__aapl__pxrReserved__::HdSingleInputFilteringSceneIndexBase::_Observer::PrimsRenamed(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 72))();
}

void sub_2171FC644(pxrInternal__aapl__pxrReserved__::HdSceneIndexObserver *a1, const void *a2)
{
  pxrInternal__aapl__pxrReserved__::HdSceneIndexObserver::~HdSceneIndexObserver(a1, a2);

  operator delete(v2);
}

void sub_2171FC670(pxrInternal__aapl__pxrReserved__::HdSceneIndexBase *a1)
{
  pxrInternal__aapl__pxrReserved__::HdSceneIndexBase::~HdSceneIndexBase(a1);

  operator delete(v1);
}

void sub_2171FC698(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void sub_2171FC6A4(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_2171FC6B0(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  return a1;
}

void *sub_2171FC6E0(void *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0;
  if (a2)
  {
    sub_21685203C((unint64_t *)(a2 + 8), &v6);
    uint64_t v3 = (atomic_uint *)a1[1];
    a1[1] = v6;
    uint64_t v6 = 0;
    if (v3)
    {
      if (atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
      }
      uint64_t v4 = v6;
      if (v6 && atomic_fetch_add_explicit((atomic_uint *volatile)(v6 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      }
    }
  }
  return a1;
}

void sub_2171FC7AC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(atomic_uint **)(v1 + 8);
  if (v3) {
    sub_217323F90(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2171FC7C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      *(void *)(a4 + v7) = *(void *)(a2 + v7);
      sub_2168BD80C((uint64_t *)(a4 + v7));
      v7 += 8;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_2171FC828(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 8;
    do
    {
      sub_2171E8C28((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(v4 + v2));
      v2 -= 8;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_2171FC84C(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)**a1;
  if (v2)
  {
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        uint64_t v4 = sub_2171E8C28(v4 - 1);
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void **sub_2171FC8D0(void **a1)
{
  if (*((_DWORD *)a1 + 33) >= 0x11u) {
    free(*a1);
  }
  return a1;
}

_DWORD *sub_2171FC910(_DWORD *result)
{
  uint64_t v1 = result;
  if (result[33] >= 0x11u) {
    uint64_t v1 = *(_DWORD **)result;
  }
  uint64_t v2 = result[32];
  if (v2)
  {
    uint64_t v3 = 8 * v2;
    do
    {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v1 + 1);
      uint64_t result = sub_21697C414(v1);
      v1 += 2;
      v3 -= 8;
    }
    while (v3);
  }
  return result;
}

void **sub_2171FC96C(void **a1)
{
  if (*((_DWORD *)a1 + 65) >= 0x11u) {
    free(*a1);
  }
  return a1;
}

_DWORD *sub_2171FC9AC(_DWORD *result)
{
  uint64_t v1 = result;
  if (result[65] >= 0x11u) {
    uint64_t v1 = *(_DWORD **)result;
  }
  uint64_t v2 = result[64];
  if (v2)
  {
    uint64_t v3 = 16 * v2;
    uint64_t v4 = v1 + 1;
    do
    {
      uint64_t v5 = *(void *)(v4 + 1);
      if ((v5 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v4);
      uint64_t result = sub_21697C414(v4 - 1);
      v4 += 4;
      v3 -= 16;
    }
    while (v3);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::HdFlattenedDataSourceProvider::Context::GetInputDataSource(uint64_t **this@<X0>, void *a2@<X8>)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::HdFlattenedDataSourceProvider::Context::GetFlattenedDataSourceFromParentPrim@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath **this@<X0>, void *a2@<X8>)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootPath(this[1]);
  if (result)
  {
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    uint64_t v5 = *this;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(this[1], &v6);
    (*(void (**)(uint64_t *__return_ptr, pxrInternal__aapl__pxrReserved__::SdfPath *, int *))(*(void *)v5 + 16))(&v8, v5, &v6);
    sub_217199340(&v9, a2);
    if (v10) {
      sub_216784EC4(v10);
    }
    if ((v8 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
    return (uint64_t)sub_21697C414(&v6);
  }
  return result;
}

void sub_2171FCB0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_216784EC4(a12);
  }
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_21697B754(&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdFlattenedDataSourceProviders(void *a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B97850, memory_order_acquire) & 1) == 0)
  {
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdCoordSysBindingSchema *)__cxa_guard_acquire(&qword_267B97850);
    if (v4)
    {
      SchemaToken = (uint64_t *)pxrInternal__aapl__pxrReserved__::HdCoordSysBindingSchema::GetSchemaToken(v4);
      sub_2171FCE10(&v22);
      long long v23 = v22;
      long long v22 = 0uLL;
      int v7 = (uint64_t *)pxrInternal__aapl__pxrReserved__::HdPrimvarsSchema::GetSchemaToken(v6);
      sub_2171FCEC0(&v20);
      long long v21 = v20;
      long long v20 = 0uLL;
      uint64_t v9 = (uint64_t *)pxrInternal__aapl__pxrReserved__::HdPurposeSchema::GetSchemaToken(v8);
      sub_2171FCF70(&v18);
      long long v19 = v18;
      long long v18 = 0uLL;
      uint64_t v11 = (uint64_t *)pxrInternal__aapl__pxrReserved__::HdVisibilitySchema::GetSchemaToken(v10);
      sub_2171FD020(&v16);
      long long v17 = v16;
      long long v16 = 0uLL;
      uint64_t v13 = (atomic_uint **)pxrInternal__aapl__pxrReserved__::HdXformSchema::GetSchemaToken(v12);
      sub_2171FD0D0(&v14);
      long long v15 = v14;
      long long v14 = 0uLL;
      pxrInternal__aapl__pxrReserved__::HdRetainedContainerDataSource::New(SchemaToken, (uint64_t *)&v23, v7, (uint64_t *)&v21, v9, (uint64_t *)&v19, v11, (uint64_t *)&v17, &v24, v13, (uint64_t *)&v15);
      xmmword_267B97840 = v24;
      long long v24 = 0uLL;
      if (*((void *)&v15 + 1)) {
        sub_216784EC4(*((std::__shared_weak_count **)&v15 + 1));
      }
      if (*((void *)&v14 + 1)) {
        sub_216784EC4(*((std::__shared_weak_count **)&v14 + 1));
      }
      if (*((void *)&v17 + 1)) {
        sub_216784EC4(*((std::__shared_weak_count **)&v17 + 1));
      }
      if (*((void *)&v16 + 1)) {
        sub_216784EC4(*((std::__shared_weak_count **)&v16 + 1));
      }
      if (*((void *)&v19 + 1)) {
        sub_216784EC4(*((std::__shared_weak_count **)&v19 + 1));
      }
      if (*((void *)&v18 + 1)) {
        sub_216784EC4(*((std::__shared_weak_count **)&v18 + 1));
      }
      if (*((void *)&v21 + 1)) {
        sub_216784EC4(*((std::__shared_weak_count **)&v21 + 1));
      }
      if (*((void *)&v20 + 1)) {
        sub_216784EC4(*((std::__shared_weak_count **)&v20 + 1));
      }
      if (*((void *)&v23 + 1)) {
        sub_216784EC4(*((std::__shared_weak_count **)&v23 + 1));
      }
      if (*((void *)&v22 + 1)) {
        sub_216784EC4(*((std::__shared_weak_count **)&v22 + 1));
      }
      __cxa_atexit((void (*)(void *))sub_2171B5C54, &xmmword_267B97840, &dword_216758000);
      __cxa_guard_release(&qword_267B97850);
    }
  }
  uint64_t v3 = *((void *)&xmmword_267B97840 + 1);
  *a1 = xmmword_267B97840;
  a1[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
}

void sub_2171FCD44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,std::__shared_weak_count *a24,uint64_t a25,std::__shared_weak_count *a26)
{
  if (a14) {
    sub_216784EC4(a14);
  }
  if (a12) {
    sub_216784EC4(a12);
  }
  if (a18) {
    sub_216784EC4(a18);
  }
  if (a16) {
    sub_216784EC4(a16);
  }
  if (a22) {
    sub_216784EC4(a22);
  }
  if (a20) {
    sub_216784EC4(a20);
  }
  if (a26) {
    sub_216784EC4(a26);
  }
  if (a24) {
    sub_216784EC4(a24);
  }
  uint64_t v28 = *(std::__shared_weak_count **)(v26 - 88);
  if (v28) {
    sub_216784EC4(v28);
  }
  uint64_t v29 = *(std::__shared_weak_count **)(v26 - 104);
  if (v29) {
    sub_216784EC4(v29);
  }
  __cxa_guard_abort(&qword_267B97850);
  _Unwind_Resume(a1);
}

void sub_2171FCE10(_OWORD *a1@<X8>)
{
  uint64_t v2 = (std::__shared_weak_count *)operator new(0x20uLL);
  v2->__shared_owners_ = 0;
  v2->__shared_weak_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C780860;
  v2[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_26C7809F0;
  uint64_t v3 = v2 + 1;
  uint64_t v4 = v2;
  sub_2171FD180((uint64_t *)&v3, &v5);
  *a1 = v5;
  long long v5 = 0uLL;
  if (v4) {
    sub_216784EC4(v4);
  }
}

void sub_2171FCEA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_2171FCEC0(_OWORD *a1@<X8>)
{
  uint64_t v2 = (std::__shared_weak_count *)operator new(0x20uLL);
  v2->__shared_owners_ = 0;
  v2->__shared_weak_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C7808B0;
  v2[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_26C780A38;
  uint64_t v3 = v2 + 1;
  uint64_t v4 = v2;
  sub_2171FD180((uint64_t *)&v3, &v5);
  *a1 = v5;
  long long v5 = 0uLL;
  if (v4) {
    sub_216784EC4(v4);
  }
}

void sub_2171FCF58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_2171FCF70(_OWORD *a1@<X8>)
{
  uint64_t v2 = (std::__shared_weak_count *)operator new(0x20uLL);
  v2->__shared_owners_ = 0;
  v2->__shared_weak_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C780900;
  v2[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_26C780BA0;
  uint64_t v3 = v2 + 1;
  uint64_t v4 = v2;
  sub_2171FD180((uint64_t *)&v3, &v5);
  *a1 = v5;
  long long v5 = 0uLL;
  if (v4) {
    sub_216784EC4(v4);
  }
}

void sub_2171FD008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_2171FD020(_OWORD *a1@<X8>)
{
  uint64_t v2 = (std::__shared_weak_count *)operator new(0x20uLL);
  v2->__shared_owners_ = 0;
  v2->__shared_weak_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C780950;
  v2[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_26C780BD8;
  uint64_t v3 = v2 + 1;
  uint64_t v4 = v2;
  sub_2171FD180((uint64_t *)&v3, &v5);
  *a1 = v5;
  long long v5 = 0uLL;
  if (v4) {
    sub_216784EC4(v4);
  }
}

void sub_2171FD0B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_2171FD0D0(_OWORD *a1@<X8>)
{
  uint64_t v2 = (std::__shared_weak_count *)operator new(0x20uLL);
  v2->__shared_owners_ = 0;
  v2->__shared_weak_owners_ = 0;
  v2->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C7809A0;
  v2[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_26C780C10;
  uint64_t v3 = v2 + 1;
  uint64_t v4 = v2;
  sub_2171FD180((uint64_t *)&v3, &v5);
  *a1 = v5;
  long long v5 = 0uLL;
  if (v4) {
    sub_216784EC4(v4);
  }
}

void sub_2171FD168(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2171FD180@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x18uLL);
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  void *v4 = &unk_26C7806B8;
  v4[1] = v6;
  _OWORD v4[2] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }

  return sub_2171FD4B4(a2, (uint64_t)v4);
}

void sub_2171FD1F8(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *this)
{
  *(void *)this = &unk_26C7806B8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_216784EC4(v2);
  }

  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(this);
}

void sub_2171FD254(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *this)
{
  *(void *)this = &unk_26C7806B8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_216784EC4(v2);
  }
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(this);

  operator delete(v3);
}

void *sub_2171FD2B4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  a2[1] = 0;
  return sub_2171FD2E8(a2, (void *)(a1 + 8));
}

uint64_t sub_2171FD2C4()
{
  return 0;
}

uint64_t sub_2171FD2CC@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 16);
  *a2 = *(void *)(result + 8);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *sub_2171FD2E8(void *a1, void *a2)
{
  a1[1] = &off_26C780710;
  uint64_t result = operator new(0x18uLL);
  uint64_t v5 = a2[1];
  *(void *)uint64_t result = *a2;
  *((void *)result + 1) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  atomic_store(0, (unsigned int *)result + 4);
  *a1 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 4, 1u, memory_order_relaxed);
  return result;
}

uint64_t *sub_2171FD34C(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *a2 = *result;
  if (v2) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 + 16), 1u, memory_order_relaxed);
  }
  return result;
}

uint64_t *sub_2171FD36C(uint64_t *a1, uint64_t *a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_21696D11C(a1);
}

uint64_t sub_2171FD37C()
{
  return 0;
}

uint64_t sub_2171FD384(uint64_t a1, const std::type_info *a2)
{
  return 0;
}

BOOL sub_2171FD3A8(void **a1, void **a2)
{
  return **a1 == **a2;
}

BOOL sub_2171FD3C4(void **a1, void *a2)
{
  return **a1 == *a2;
}

uint64_t sub_2171FD3E0()
{
  return 0;
}

uint64_t sub_2171FD3EC()
{
  return std::ostream::operator<<();
}

void *sub_2171FD400()
{
  return &unk_26C7807C8;
}

uint64_t sub_2171FD40C()
{
  return 0;
}

uint64_t sub_2171FD414()
{
  return MEMORY[0x263F8C288];
}

uint64_t sub_2171FD420()
{
  return 0;
}

uint64_t sub_2171FD428()
{
  return 0;
}

BOOL sub_2171FD430(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x80000002174CEAEELL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_2171FD46C(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(void *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_26C7807C8, a2, a3);
}

void *sub_2171FD490()
{
  return &unk_26C7807C8;
}

uint64_t sub_2171FD49C(uint64_t a1)
{
  return *(void *)a1;
}

void *sub_2171FD4A4@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  a2[1] = 0;
  return sub_2171FD2E8(a2, v2);
}

void *sub_2171FD4B4(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  void *v4 = &unk_26C7807E8;
  v4[1] = 0;
  _OWORD v4[2] = 0;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_2171FD50C(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_2173254E8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_2171FD528(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171FD550(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2171FD580(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C780838)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_2171FD5C4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C780860;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2171FD5E4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C780860;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void sub_2171FD630(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C7808B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2171FD650(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C7808B0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void sub_2171FD69C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C780900;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2171FD6BC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C780900;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void sub_2171FD708(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C780950;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2171FD728(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C780950;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void sub_2171FD774(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C7809A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2171FD794(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C7809A0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::HdFlattenedOverlayDataSourceProvider::GetFlattenedDataSource(uint64_t **a1@<X1>, void *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::HdFlattenedDataSourceProvider::Context::GetInputDataSource(a1, &v7);
  pxrInternal__aapl__pxrReserved__::HdFlattenedDataSourceProvider::Context::GetFlattenedDataSourceFromParentPrim((pxrInternal__aapl__pxrReserved__::SdfPath **)a1, &v5);
  pxrInternal__aapl__pxrReserved__::HdOverlayContainerDataSource::OverlayedContainerDataSources(&v7, &v5, a2);
  if (v6) {
    sub_216784EC4(v6);
  }
  if (v8) {
    sub_216784EC4(v8);
  }
}

void sub_2171FD84C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  if (a12) {
    sub_216784EC4(a12);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::HdFlattenedPrimvarsDataSourceProvider::GetFlattenedDataSource(uint64_t **a1@<X1>, void *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::HdFlattenedDataSourceProvider::Context::GetInputDataSource(a1, &v18);
  pxrInternal__aapl__pxrReserved__::HdFlattenedDataSourceProvider::Context::GetFlattenedDataSourceFromParentPrim((pxrInternal__aapl__pxrReserved__::SdfPath **)a1, &v16);
  uint64_t v5 = v16;
  uint64_t v6 = v17;
  long long v16 = 0;
  long long v17 = 0;
  if (v5)
  {
    uint64_t v7 = __dynamic_cast(v5, (const struct __class_type_info *)&unk_26C77BD10, (const struct __class_type_info *)&unk_26C780A78, 0);
    if (v7 && v6)
    {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v8 = v6;
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = 0;
LABEL_7:
  uint64_t v9 = (char *)operator new(0x280uLL);
  long long v10 = v9;
  uint64_t v12 = v18;
  uint64_t v11 = v19;
  *(void *)uint64_t v9 = &unk_26C780AA0;
  *((void *)v9 + 1) = v12;
  *((void *)v9 + 2) = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)v9 + 3) = v7;
  *((void *)v9 + 4) = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = v9 + 568;
  for (uint64_t i = 576; i != 624; i += 24)
    *(void *)&v9[i] = 0;
  *((_OWORD *)v9 + 33) = 0u;
  *((_OWORD *)v9 + 34) = 0u;
  *((_OWORD *)v9 + 31) = 0u;
  *((_OWORD *)v9 + 32) = 0u;
  *((_OWORD *)v9 + 29) = 0u;
  *((_OWORD *)v9 + 30) = 0u;
  *((_OWORD *)v9 + 27) = 0u;
  *((_OWORD *)v9 + 2sub_2171F4108((uint64_t)this + 8) = 0u;
  *((_OWORD *)v9 + 25) = 0u;
  *((_OWORD *)v9 + 26) = 0u;
  *((_OWORD *)v9 + 23) = 0u;
  *((_OWORD *)v9 + 24) = 0u;
  *((_OWORD *)v9 + 21) = 0u;
  *((_OWORD *)v9 + 22) = 0u;
  *((_OWORD *)v9 + 19) = 0u;
  *((_OWORD *)v9 + 20) = 0u;
  *((_OWORD *)v9 + 17) = 0u;
  *((_OWORD *)v9 + 1sub_2171F4108((uint64_t)this + 8) = 0u;
  *((_OWORD *)v9 + 15) = 0u;
  *((_OWORD *)v9 + 16) = 0u;
  *((_OWORD *)v9 + 13) = 0u;
  *((_OWORD *)v9 + 14) = 0u;
  *((_OWORD *)v9 + 11) = 0u;
  *((_OWORD *)v9 + 12) = 0u;
  *((_OWORD *)v9 + 9) = 0u;
  *((_OWORD *)v9 + 10) = 0u;
  *((_OWORD *)v9 + 7) = 0u;
  *((_OWORD *)v9 + sub_2171F4108((uint64_t)this + 8) = 0u;
  *((_OWORD *)v9 + 5) = 0u;
  *((_OWORD *)v9 + 6) = 0u;
  *((_OWORD *)v9 + 3) = 0u;
  *((_OWORD *)v9 + 4) = 0u;
  __dmb(0xBu);
  *((void *)v9 + 5) = 0;
  __dmb(0xBu);
  *((void *)v9 + 70) = 0;
  *uint64_t v13 = 0u;
  *(_OWORD *)(v9 + 584) = 0u;
  *(_OWORD *)(v9 + 600) = 0u;
  *((void *)v9 + 6) = v13;
  __dmb(0xBu);
  *((void *)v9 + 5) = 1;
  *((_OWORD *)v9 + 39) = 0u;
  long long v15 = operator new(0x20uLL);
  *long long v15 = &unk_26C780B28;
  v15[1] = 0;
  void v15[2] = 0;
  void v15[3] = v10;
  *a2 = v10;
  a2[1] = v15;
  if (v8) {
    sub_216784EC4(v8);
  }
  if (v6) {
    sub_216784EC4(v6);
  }
  if (v17) {
    sub_216784EC4(v17);
  }
  if (v19) {
    sub_216784EC4(v19);
  }
}

void sub_2171FDA7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  if (v13) {
    sub_216784EC4(v13);
  }
  if (v12) {
    sub_216784EC4(v12);
  }
  if (a10) {
    sub_216784EC4(a10);
  }
  if (a12) {
    sub_216784EC4(a12);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdFlattenedPrimvarsDataSourceProvider::ComputeDirtyLocatorsForDescendants(pxrInternal__aapl__pxrReserved__::HdFlattenedPrimvarsDataSourceProvider *this, pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *a2)
{
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::begin(a2);
  uint64_t result = pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::end(a2);
  if (v3 != (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)result)
  {
    uint64_t v5 = result;
    while (1)
    {
      uint64_t result = sub_2171FDBA0(v3);
      if (result) {
        break;
      }
      uint64_t v3 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)((char *)v3 + 56);
      if (v3 == (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)v5) {
        return result;
      }
    }
    uint64_t result = pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::UniversalSet((pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *)result);
    if ((pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *)result != a2)
    {
      if (*(_DWORD *)(result + 452) >= 9u) {
        uint64_t v6 = *(void *)result;
      }
      else {
        uint64_t v6 = result;
      }
      uint64_t v7 = v6 + 56 * *(unsigned int *)(result + 448);
      return sub_2171E02B0((uint64_t)a2, v6, v7);
    }
  }
  return result;
}

BOOL sub_2171FDBA0(pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *a1)
{
  if ((unint64_t)pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::GetElementCount(a1) < 2) {
    return 1;
  }
  uint64_t Element = (void *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::GetElement(a1, 1u);
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdPrimvarSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimvarSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171BE530(&pxrInternal__aapl__pxrReserved__::HdPrimvarSchemaTokens);
  }
  return (*Element & 0xFFFFFFFFFFFFFFF8) == (*((void *)v4 + 3) & 0xFFFFFFFFFFFFFFF8);
}

void sub_2171FDC1C(unint64_t *a1)
{
  *a1 = (unint64_t)&unk_26C780AA0;
  uint64_t v2 = (std::__shared_weak_count *)a1[79];
  if (v2) {
    sub_216784EC4(v2);
  }
  sub_2171FE68C(a1 + 5);
  uint64_t v3 = (std::__shared_weak_count *)a1[4];
  if (v3) {
    sub_216784EC4(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4) {
    sub_216784EC4(v4);
  }

  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase((pxrInternal__aapl__pxrReserved__::HdDataSourceBase *)a1);
}

void sub_2171FDC9C(unint64_t *a1)
{
  *a1 = (unint64_t)&unk_26C780AA0;
  uint64_t v2 = (std::__shared_weak_count *)a1[79];
  if (v2) {
    sub_216784EC4(v2);
  }
  sub_2171FE68C(a1 + 5);
  uint64_t v3 = (std::__shared_weak_count *)a1[4];
  if (v3) {
    sub_216784EC4(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4) {
    sub_216784EC4(v4);
  }
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase((pxrInternal__aapl__pxrReserved__::HdDataSourceBase *)a1);

  operator delete(v5);
}

void sub_2171FDD20(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + sub_2171F4108((uint64_t)this + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)v4 + 16))(&v10);
    sub_216A698A4((void **)a2);
    *(_OWORD *)a2 = v10;
    *(void *)(a2 + 16) = v11;
    uint64_t v11 = 0;
    long long v10 = 0uLL;
    uint64_t v8 = (void **)&v10;
    sub_216889A04(&v8);
  }
  uint64_t v5 = *(void **)(a1 + 24);
  if (v5)
  {
    sub_2171FE7C8(v5, &v8);
    sub_2171FEE78((uint64_t *)&v10, (uint64_t)v8);
    if (v9) {
      sub_216784EC4(v9);
    }
    if (v11)
    {
      uint64_t v6 = *(uint64_t **)a2;
      uint64_t v7 = *(uint64_t **)(a2 + 8);
      if (*(uint64_t **)a2 != v7)
      {
        do
          sub_21711F6D0((uint64_t **)&v10, v6++);
        while (v6 != v7);
        uint64_t v6 = *(uint64_t **)(a2 + 8);
      }
      sub_216C302D8((uint64_t *)a2, v6, (void *)v10, (void *)&v10 + 1);
    }
    sub_2168CB05C((uint64_t)&v10, *((void **)&v10 + 1));
  }
}

void sub_2171FDE38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, void *a12)
{
}

void *sub_2171FDE80@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = 0;
  unint64_t v6 = 0;
  uint64_t v49 = 0;
  char v50 = 0;
  char v51 = 0;
  uint64_t v7 = a1 + 5;
  uint64_t v8 = a1[5];
  uint64_t v9 = bswap64(0x9E3779B97F4A7C55 * (*a2 & 0xFFFFFFFFFFFFFFF8));
  __dmb(0xBu);
  while (1)
  {
    uint64_t v10 = sub_2171FF028((uint64_t)v53, (uint64_t)v7, v8 & v9);
    uint64_t v11 = (tbb::internal *)(v54 + 16);
    while (1)
    {
      uint64_t v11 = *(tbb::internal **)v11;
      if ((unint64_t)v11 < 0x40) {
        break;
      }
      if ((*a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v11 + 2) & 0xFFFFFFFFFFFFFFF8)) {
        goto LABEL_7;
      }
    }
    if (v11)
    {
LABEL_7:
      uint64_t v12 = v5;
      goto LABEL_8;
    }
    if (!v5) {
      uint64_t v5 = (tbb::internal *)sub_2171FEFC4(v10, a2);
    }
    if (!LOBYTE(v53[1]))
    {
      LOBYTE(v53[1]) = 1;
      if ((tbb::spin_rw_mutex_v3::internal_upgrade((atomic_ullong *)v53[0]) & 1) == 0)
      {
        uint64_t v11 = (tbb::internal *)(v54 + 16);
        while (1)
        {
          uint64_t v11 = *(tbb::internal **)v11;
          if ((unint64_t)v11 < 0x40) {
            break;
          }
          if ((*a2 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v11 + 2) & 0xFFFFFFFFFFFFFFF8))
          {
            if (LOBYTE(v53[1]))
            {
              atomic_fetch_add((atomic_ullong *volatile)v53[0], 3uLL);
              LOBYTE(v53[1]) = 0;
            }
            goto LABEL_7;
          }
        }
      }
    }
    unint64_t v19 = *v7;
    __dmb(0xBu);
    if (v8 == v19) {
      break;
    }
    if (!sub_21686CF40((uint64_t)v7, v9, v8, v19)) {
      goto LABEL_27;
    }
LABEL_25:
    sub_21685C048(v53);
    uint64_t v8 = v19;
  }
  unint64_t v19 = v8;
LABEL_27:
  unint64_t v6 = sub_21686C9CC((uint64_t)v7, v54, v5, v19);
  uint64_t v12 = 0;
  uint64_t v11 = v5;
LABEL_8:
  char v50 = 1;
  if (!tbb::spin_rw_mutex_v3::internal_try_acquire_writer((atomic_ullong *)v11 + 1))
  {
    sched_yield();
    int v13 = 2;
    while (1)
    {
      char v50 = 1;
      if (tbb::spin_rw_mutex_v3::internal_try_acquire_writer((atomic_ullong *)v11 + 1)) {
        break;
      }
      sched_yield();
      BOOL v14 = v13 < 16;
      v13 *= 2;
      if (!v14)
      {
        long long v15 = (atomic_ullong *)v53[0];
        v53[0] = 0;
        if (LOBYTE(v53[1]))
        {
LABEL_13:
          atomic_ullong v16 = *v15;
          unint64_t v17 = *v15 & 0xFFFFFFFFFFFFFFFCLL;
          while (1)
          {
            atomic_ullong v18 = v16;
            atomic_compare_exchange_strong(v15, (unint64_t *)&v18, v17);
            if (v18 == v16) {
              break;
            }
            if (atomic_fetch_add_explicit(v15, 0, memory_order_relaxed) != v16)
            {
              sched_yield();
              goto LABEL_13;
            }
          }
        }
        else
        {
          atomic_fetch_add(v15, 0xFFFFFFFFFFFFFFFCLL);
        }
        sched_yield();
        unint64_t v19 = *v7;
        __dmb(0xBu);
        uint64_t v5 = v12;
        goto LABEL_25;
      }
    }
  }
  uint64_t v49 = (void *)((char *)v11 + 8);
  sub_21685C048(v53);
  char v51 = v11;
  uint64_t v52 = v9;
  if (v6)
  {
    if (v6 < 8)
    {
      uint64_t v25 = tbb::internal::allocate_via_handler_v3((tbb::internal *)0x17D0);
      unint64_t v26 = -6096;
      do
      {
        unint64_t v27 = v25 + v26;
        *(void *)(v27 + 6104) = 0;
        *(void *)(v27 + 6112) = 3;
        v26 += 24;
      }
      while (v26);
      int64x2_t v28 = (int64x2_t)xmmword_217411D20;
      uint64_t v29 = v25 - 48;
      uint64x2_t v30 = (uint64x2_t)vdupq_n_s64(7uLL);
      uint64x2_t v31 = (uint64x2_t)vdupq_n_s64(1uLL);
      int8x16_t v32 = (int8x16_t)vdupq_n_s64(0x7FFFFFFFFFFFFFFEuLL);
      int64x2_t v33 = vdupq_n_s64(2uLL);
      uint64_t v24 = 255;
      do
      {
        uint64x2_t v34 = (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v26), (int8x16_t)xmmword_217411D30);
        int8x16_t v35 = vandq_s8((int8x16_t)vshlq_u64(v31, (uint64x2_t)v28), v32);
        if (vmovn_s64((int64x2_t)vcgtq_u64(v30, v34)).u8[0]) {
          a1[v26 + 7] = v29 + 24 * v35.i64[0];
        }
        if (vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(7uLL), v34)).i32[1]) {
          a1[v26 + 8] = v29 + 24 * v35.i64[1];
        }
        v26 += 2;
        int64x2_t v28 = vaddq_s64(v28, v33);
      }
      while (v26 != 8);
    }
    else
    {
      uint64_t v21 = tbb::internal::allocate_via_handler_v3((tbb::internal *)(24 << v6));
      uint64_t v22 = 1 << v6;
      long long v23 = (void *)(v21 + 16);
      do
      {
        *(v23 - 1) = 0;
        *long long v23 = 3;
        v23 += 3;
        --v22;
      }
      while (v22);
      v7[v6 + 1] = v21;
      uint64_t v24 = (2 << v6) - 1;
    }
    __dmb(0xBu);
    unint64_t *v7 = v24;
  }
  if (v12) {
    sub_2171FE778(v12, v20);
  }
  sub_2171BE4CC((void *)v51 + 3, v53);
  if (v53[0])
  {
    sub_2171997C0((uint64_t)v53, &v48);
    *(_OWORD *)a3 = v48;
    uint64_t v36 = (std::__shared_weak_count *)v53[1];
    if (!v53[1]) {
      goto LABEL_72;
    }
    goto LABEL_71;
  }
  if (v53[1]) {
    sub_216784EC4((std::__shared_weak_count *)v53[1]);
  }
  uint64_t v37 = a1[1];
  if (!v37)
  {
LABEL_60:
    uint64_t v39 = a1[3];
    if (v39)
    {
      (*(void (**)(tbb::spin_rw_mutex_v3 **__return_ptr))(*(void *)v39 + 24))(v53);
      sub_2171997C0((uint64_t)v53, &v48);
      if (v53[1]) {
        sub_216784EC4((std::__shared_weak_count *)v53[1]);
      }
      if (sub_2171FEB2C((uint64_t *)&v48))
      {
        uint64_t v38 = (tbb::spin_rw_mutex_v3 *)v48;
        if ((void)v48) {
          goto LABEL_65;
        }
LABEL_76:
        uint64_t v44 = v51;
        char v46 = 0;
        pxrInternal__aapl__pxrReserved__::HdRetainedTypedSampledDataSource<BOOL>::New(&v46, (uint64_t *)&v47);
        *(_OWORD *)int v53 = v47;
        long long v47 = 0uLL;
        sub_2171FEF5C((uint64_t *)v44 + 3, (uint64_t *)v53);
        if (v53[1]) {
          sub_216784EC4((std::__shared_weak_count *)v53[1]);
        }
        uint64_t v41 = (std::__shared_weak_count *)*((void *)&v47 + 1);
        if (*((void *)&v47 + 1)) {
          goto LABEL_68;
        }
        goto LABEL_69;
      }
      if (*((void *)&v48 + 1)) {
        sub_216784EC4(*((std::__shared_weak_count **)&v48 + 1));
      }
    }
    long long v48 = 0uLL;
    goto LABEL_76;
  }
  (*(void (**)(tbb::spin_rw_mutex_v3 **__return_ptr))(*(void *)v37 + 24))(v53);
  sub_2171997C0((uint64_t)v53, &v48);
  if (v53[1]) {
    sub_216784EC4((std::__shared_weak_count *)v53[1]);
  }
  uint64_t v38 = (tbb::spin_rw_mutex_v3 *)v48;
  if (!(void)v48)
  {
    if (*((void *)&v48 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v48 + 1));
    }
    goto LABEL_60;
  }
LABEL_65:
  uint64_t v40 = (uint64_t *)((char *)v51 + 24);
  v53[0] = v38;
  v53[1] = *((tbb::spin_rw_mutex_v3 **)&v48 + 1);
  if (*((void *)&v48 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v48 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  sub_2171FEF5C(v40, (uint64_t *)v53);
  uint64_t v41 = (std::__shared_weak_count *)v53[1];
  if (v53[1]) {
LABEL_68:
  }
    sub_216784EC4(v41);
LABEL_69:
  uint64_t v42 = *((void *)&v48 + 1);
  *(void *)a3 = v48;
  *(void *)(a3 + sub_2171F4108((uint64_t)this + 8) = v42;
  if (v42)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v42 + 8), 1uLL, memory_order_relaxed);
    uint64_t v36 = (std::__shared_weak_count *)*((void *)&v48 + 1);
    if (*((void *)&v48 + 1)) {
LABEL_71:
    }
      sub_216784EC4(v36);
  }
LABEL_72:
  char v51 = 0;
  return sub_21685C048(&v49);
}

void sub_2171FE3C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a14) {
    sub_216784EC4(a14);
  }
  a17 = 0;
  sub_21685C048(&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_2171FE458(uint64_t a1, pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *this)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::begin(this);
  uint64_t v5 = pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::end(this);
  if (v4 == (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)v5)
  {
    char v7 = 0;
  }
  else
  {
    unint64_t v6 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)v5;
    char v7 = 0;
    uint64_t v19 = a1;
    uint64_t v8 = (unint64_t *)(a1 + 40);
    while (!sub_2171FDBA0(v4))
    {
      Firstuint64_t Element = pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::GetFirstElement(v4);
      uint64_t v10 = bswap64(0x9E3779B97F4A7C55 * (*(void *)FirstElement & 0xFFFFFFFFFFFFFFF8));
      uint64_t v11 = *v8;
      __dmb(0xBu);
      while (2)
      {
        sub_2171FF028((uint64_t)&v20, (uint64_t)v8, v11 & v10);
        while (1)
        {
          uint64_t v12 = (void *)(v22 + 16);
          while (1)
          {
            int v13 = v12;
            uint64_t v12 = (void *)*v12;
            if ((unint64_t)v12 < 0x40) {
              break;
            }
            if ((*(void *)FirstElement & 0xFFFFFFFFFFFFFFF8) == (v12[2] & 0xFFFFFFFFFFFFFFF8)) {
              goto LABEL_11;
            }
          }
          if (!v12) {
            break;
          }
LABEL_11:
          if (v21 || (char v21 = 1, (tbb::spin_rw_mutex_v3::internal_upgrade((atomic_ullong *)v20) & 1) != 0))
          {
            *int v13 = *v12;
            atomic_fetch_add((atomic_ullong *volatile)(v19 + 560), 0xFFFFFFFFFFFFFFFFLL);
            sub_21685C048(&v20);
            char v7 = 1;
            char v21 = 1;
            long long v20 = (tbb::spin_rw_mutex_v3 *)(v12 + 1);
            tbb::spin_rw_mutex_v3::internal_acquire_writer(v12 + 1);
            sub_21685C048(&v20);
            sub_2171FE778((tbb::internal *)v12, v16);
            goto LABEL_20;
          }
          uint64_t v14 = *v8;
          __dmb(0xBu);
          if (v11 != v14)
          {
            BOOL v15 = sub_21686CF40((uint64_t)v8, v10, v11, v14);
            uint64_t v11 = v14;
            if (v15) {
              goto LABEL_18;
            }
          }
        }
        uint64_t v14 = *v8;
        __dmb(0xBu);
        if (v11 != v14 && sub_21686CF40((uint64_t)v8, v10, v11, v14))
        {
LABEL_18:
          sub_21685C048(&v20);
          uint64_t v11 = v14;
          continue;
        }
        break;
      }
      sub_21685C048(&v20);
LABEL_20:
      uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)((char *)v4 + 56);
      if (v4 == v6) {
        return v7 & 1;
      }
    }
    sub_2171FE68C(v8);
    unint64_t v17 = *(std::__shared_weak_count **)(v19 + 632);
    *(_OWORD *)(v19 + 624) = 0u;
    if (v17) {
      sub_216784EC4(v17);
    }
    char v7 = 1;
  }
  return v7 & 1;
}

void sub_2171FE670(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21685C048((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2171FE68C(unint64_t *a1)
{
  unint64_t v2 = *a1;
  __dmb(0xBu);
  __dmb(0xBu);
  a1[65] = 0;
  for (unint64_t i = sub_216851020(v2); ; --i)
  {
    unint64_t v5 = 0;
    unint64_t v6 = &a1[i];
    unint64_t v9 = v6[1];
    char v7 = (uint64_t *)(v6 + 1);
    unint64_t v8 = v9;
    char v10 = i <= 1 ? 1 : i;
    do
    {
      unint64_t v11 = v8 + 24 * v5;
      unint64_t v14 = *(void *)(v11 + 16);
      int v13 = (tbb::internal **)(v11 + 16);
      uint64_t v12 = (tbb::internal *)v14;
      if (v14 >= 0x40)
      {
        do
        {
          *int v13 = *(tbb::internal **)v12;
          sub_2171FE778(v12, v3);
          uint64_t v12 = *v13;
        }
        while ((unint64_t)*v13 > 0x3F);
      }
      ++v5;
    }
    while (!(v5 >> v10));
    uint64_t result = *v7;
    if (i < 8 && i != 1) {
      break;
    }
    tbb::internal::deallocate_via_handler_v3(result, v3);
LABEL_13:
    uint64_t *v7 = 0;
  }
  if (i) {
    goto LABEL_13;
  }
  __dmb(0xBu);
  *a1 = 1;
  return result;
}

uint64_t sub_2171FE778(tbb::internal *this, void *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v3) {
    sub_216784EC4(v3);
  }
  uint64_t v4 = *((void *)this + 2);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return tbb::internal::deallocate_via_handler_v3((uint64_t)this, a2);
}

void sub_2171FE7C8(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = a1 + 78;
  sub_2171BE4CC(a1 + 78, a2);
  if (!*a2)
  {
    v15[0] = 0;
    v15[1] = 0;
    unint64_t v14 = (uint64_t *)v15;
    if (a1[3])
    {
      sub_2171FE7C8(&v21);
      if (&v14 != v21) {
        sub_2171FEC84(&v14, *v21, v21 + 1);
      }
      if (v22) {
        sub_216784EC4(v22);
      }
    }
    uint64_t v5 = a1[1];
    if (v5)
    {
      (*(void (**)(uint64_t ***__return_ptr))(*(void *)v5 + 16))(&v21);
      unint64_t v6 = (uint64_t *)v21;
      char v7 = v22;
      while (v6 != (uint64_t *)v7)
      {
        (*(void (**)(uint64_t *__return_ptr))(*(void *)a1[1] + 24))(&v17);
        sub_2171997C0((uint64_t)&v17, &v19);
        BOOL v8 = sub_2171FEB2C((uint64_t *)&v19);
        if (v20) {
          sub_216784EC4(v20);
        }
        if (v18) {
          sub_216784EC4(v18);
        }
        if (v8) {
          sub_216A8E144(&v14, v6, v6);
        }
        ++v6;
      }
      uint64_t v19 = &v21;
      sub_216889A04((void ***)&v19);
    }
    sub_2171FEA28(&v14, &v16);
    long long v9 = v16;
    long long v16 = 0uLL;
    char v10 = (std::__shared_weak_count *)a2[1];
    *(_OWORD *)a2 = v9;
    if (v10)
    {
      sub_216784EC4(v10);
      if (*((void *)&v16 + 1)) {
        sub_216784EC4(*((std::__shared_weak_count **)&v16 + 1));
      }
    }
    sub_2168CB05C((uint64_t)&v14, v15[0]);
    unint64_t v11 = (std::__shared_weak_count *)a2[1];
    uint64_t v12 = *a2;
    int v13 = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_2171BE460(v4, &v12);
    if (v13) {
      sub_216784EC4(v13);
    }
  }
}

void sub_2171FE998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *a13)
{
  long long v16 = *(std::__shared_weak_count **)(v14 - 64);
  if (v16) {
    sub_216784EC4(v16);
  }
  sub_2168CB05C((uint64_t)&a12, a13);
  uint64_t v17 = *(std::__shared_weak_count **)(v13 + 8);
  if (v17) {
    sub_216784EC4(v17);
  }
  _Unwind_Resume(a1);
}

void *sub_2171FEA28@<X0>(void *a1@<X1>, void *a2@<X8>)
{
  uint64_t result = operator new(0x30uLL);
  result[3] = *a1;
  uint64_t v5 = result + 3;
  result[1] = 0;
  result[2] = 0;
  unint64_t v6 = a1 + 1;
  uint64_t v7 = a1[1];
  void *result = &unk_26C780AD8;
  result[4] = v7;
  BOOL v8 = result + 4;
  uint64_t v9 = a1[2];
  result[5] = v9;
  if (v9)
  {
    *(void *)(v7 + 16) = v8;
    *a1 = v6;
    void *v6 = 0;
    a1[2] = 0;
  }
  else
  {
    void *v5 = v8;
  }
  *a2 = v5;
  a2[1] = result;
  return result;
}

void sub_2171FEAB4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C780AD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_2171FEAD4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C780AD8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void sub_2171FEB18(uint64_t a1)
{
}

BOOL sub_2171FEB2C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = (std::__shared_weak_count *)a1[1];
  if (v1)
  {
    atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed);
    char v10 = v1;
    atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed);
    sub_216784EC4(v1);
    sub_216784EC4(v1);
  }
  else
  {
    char v10 = 0;
  }
  uint64_t v9 = v2;
  pxrInternal__aapl__pxrReserved__::HdPrimvarSchema::GetInterpolation((pxrInternal__aapl__pxrReserved__::HdPrimvarSchema *)&v9, &v7);
  if (v7)
  {
    (*(void (**)(uint64_t *__return_ptr, double))(*(void *)v7 + 32))(&v6, 0.0);
    uint64_t v3 = (pxrInternal__aapl__pxrReserved__::HdPrimvarSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdPrimvarSchemaTokens);
    if (!v3) {
      uint64_t v3 = sub_2171BE530(&pxrInternal__aapl__pxrReserved__::HdPrimvarSchemaTokens);
    }
    BOOL v4 = (v6 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v3 + 6) & 0xFFFFFFFFFFFFFFF8);
    if ((v6 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    BOOL v4 = 0;
  }
  if (v8) {
    sub_216784EC4(v8);
  }
  if (v10) {
    sub_216784EC4(v10);
  }
  return v4;
}

void sub_2171FEC38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a12) {
    sub_216784EC4(a12);
  }
  if (a14) {
    sub_216784EC4(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **sub_2171FEC84(uint64_t **result, void *a2, void *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    uint64_t v7 = result[1];
    void *result = (uint64_t *)(result + 1);
    void v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      BOOL v8 = (uint64_t *)v6[1];
    }
    else {
      BOOL v8 = v6;
    }
    BOOL v15 = result;
    long long v16 = v8;
    uint64_t v17 = v8;
    if (v8)
    {
      long long v16 = sub_216799E28((uint64_t)v8);
      if (a2 != a3)
      {
        uint64_t v9 = a2;
        do
        {
          sub_2168D2318(v8 + 4, v9 + 4);
          char v10 = (uint64_t **)sub_2168D3844((uint64_t)v5, &v18, v17 + 4);
          sub_21677B358(v5, v18, v10, v17);
          uint64_t v17 = v16;
          if (v16) {
            long long v16 = sub_216799E28((uint64_t)v16);
          }
          unint64_t v11 = (void *)v9[1];
          if (v11)
          {
            do
            {
              a2 = v11;
              unint64_t v11 = (void *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v12 = *a2 == (void)v9;
              uint64_t v9 = a2;
            }
            while (!v12);
          }
          BOOL v8 = v17;
          if (v17) {
            BOOL v12 = a2 == a3;
          }
          else {
            BOOL v12 = 1;
          }
          uint64_t v9 = a2;
        }
        while (!v12);
      }
    }
    uint64_t result = (uint64_t **)sub_216F01F28((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)sub_2171FEE08(v5, a2 + 4);
      uint64_t v13 = (void *)a2[1];
      if (v13)
      {
        do
        {
          uint64_t v14 = v13;
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          uint64_t v14 = (void *)a2[2];
          BOOL v12 = *v14 == (void)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_2171FEDF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *sub_2171FEE08(uint64_t **a1, uint64_t *a2)
{
  sub_21697C3A4((uint64_t)a1, a2, (uint64_t)&v6);
  uint64_t v3 = (uint64_t **)sub_2168D3844((uint64_t)a1, &v5, v6 + 4);
  sub_21677B358(a1, v5, v3, v6);
  return v6;
}

void sub_2171FEE60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216F0208C((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t *sub_2171FEE78(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_2171FEED0(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_2171FEEB8(_Unwind_Exception *a1)
{
  sub_2168CB05C(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_2171FEED0(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    BOOL v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      uint64_t result = sub_216A5D070(v5, v6, v4 + 4, v4 + 4);
      uint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          BOOL v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          BOOL v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          BOOL v4 = v8;
        }
        while (!v9);
      }
      BOOL v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

void sub_2171FEF5C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = (std::__shared_weak_count *)a2[1];
  uint64_t v3 = *a2;
  BOOL v4 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_2171BE460(a1, &v3);
  if (v4) {
    sub_216784EC4(v4);
  }
}

void sub_2171FEFAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2171FEFC4(uint64_t a1, uint64_t *a2)
{
  uint64_t result = tbb::internal::allocate_via_handler_v3((tbb::internal *)0x28);
  *(_OWORD *)uint64_t result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  *(void *)(result + 32) = 0;
  uint64_t v4 = *a2;
  *(void *)(result + 16) = *a2;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(result + 16) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  return result;
}

uint64_t sub_2171FF028(uint64_t a1, uint64_t a2, unint64_t a3)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + sub_2171F4108((uint64_t)this + 8) = 0;
  unint64_t v6 = sub_21686CD68(a2, a3);
  *(void *)(a1 + 16) = v6;
  uint64_t v7 = *(void *)(v6 + 16);
  __dmb(0xBu);
  if (v7 == 3 {
    && (BOOL v8 = (atomic_ullong *)(*(void *)(a1 + 16) + 8),
  }
        *(unsigned char *)(a1 + sub_2171F4108((uint64_t)this + 8) = 1,
        tbb::spin_rw_mutex_v3::internal_try_acquire_writer(v8)))
  {
    *(void *)a1 = v8;
    uint64_t v9 = *(void *)(a1 + 16);
    if (*(void *)(v9 + 16) == 3)
    {
      __dmb(0xBu);
      *(void *)(v9 + 16) = 0;
      if (a3)
      {
        unint64_t v10 = HIDWORD(a3);
        if (!HIDWORD(a3)) {
          unint64_t v10 = a3;
        }
        char v11 = 32 * (HIDWORD(a3) != 0);
        if (v10 >= 0x10000)
        {
          v10 >>= 16;
          char v11 = (32 * (HIDWORD(a3) != 0)) | 0x10;
        }
        if (v10 >= 0x100)
        {
          v10 >>= 8;
          v11 |= 8u;
        }
        if (v10 >= 0x10)
        {
          v10 >>= 4;
          v11 |= 4u;
        }
        BOOL v12 = v10 >= 4;
        if (v10 >= 4) {
          LODWORD(v10) = v10 >> 2;
        }
        unsigned int v13 = (v10 >> 1) & 1;
        if (v12) {
          v11 += 2;
        }
        char v14 = v13 + v11;
      }
      else
      {
        char v14 = -1;
      }
      uint64_t v17 = ~(-1 << v14);
      sub_2171FF028(&v21, a2, v17 & a3);
      uint64_t v18 = (void *)(v23 + 16);
      uint64_t v19 = *(void **)(v23 + 16);
      __dmb(0xBu);
      if ((unint64_t)v19 >= 0x40)
      {
        uint64_t v20 = (2 * v17) | 1;
        while ((bswap64(0x9E3779B97F4A7C55 * (v19[2] & 0xFFFFFFFFFFFFFFF8)) & v20) == a3)
        {
          if (v22 || (char v22 = 1, (tbb::spin_rw_mutex_v3::internal_upgrade((atomic_ullong *)v21) & 1) != 0))
          {
            *uint64_t v18 = *v19;
            *uint64_t v19 = *(void *)(v9 + 16);
            *(void *)(v9 + 16) = v19;
LABEL_29:
            uint64_t v19 = (void *)*v18;
            if (*v18 <= 0x3FuLL) {
              goto LABEL_32;
            }
          }
          else
          {
            uint64_t v18 = (void *)(v23 + 16);
            uint64_t v19 = *(void **)(v23 + 16);
            __dmb(0xBu);
            if ((unint64_t)v19 < 0x40) {
              goto LABEL_32;
            }
          }
        }
        uint64_t v18 = v19;
        goto LABEL_29;
      }
LABEL_32:
      sub_21685C048(&v21);
    }
  }
  else
  {
    BOOL v15 = (atomic_ullong *)(*(void *)(a1 + 16) + 8);
    *(unsigned char *)(a1 + sub_2171F4108((uint64_t)this + 8) = 0;
    *(void *)a1 = v15;
    tbb::spin_rw_mutex_v3::internal_acquire_reader(v15);
  }
  return a1;
}

void sub_2171FF22C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21685C048((uint64_t *)va);
  sub_21685C048(v2);
  _Unwind_Resume(a1);
}

void sub_2171FF254(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2171FF27C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_2171FF2AC(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C780B78)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void pxrInternal__aapl__pxrReserved__::HdFlattenedPurposeDataSourceProvider::GetFlattenedDataSource(uint64_t **a1@<X1>, void *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::HdFlattenedDataSourceProvider::Context::GetInputDataSource(a1, &v22);
  uint64_t v6 = v22;
  uint64_t v5 = v23;
  if (v23)
  {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v24 = v6;
    uint64_t v25 = v5;
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    sub_216784EC4(v5);
    if (v23) {
      sub_216784EC4(v23);
    }
  }
  else
  {
    uint64_t v24 = v22;
    uint64_t v25 = 0;
  }
  pxrInternal__aapl__pxrReserved__::HdPurposeSchema::GetPurpose((pxrInternal__aapl__pxrReserved__::HdPurposeSchema *)&v24, &v20);
  uint64_t v7 = v20;
  if (v21) {
    sub_216784EC4(v21);
  }
  if (v7)
  {
    pxrInternal__aapl__pxrReserved__::HdSchema::GetContainer(&v24, a2);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::HdFlattenedDataSourceProvider::Context::GetFlattenedDataSourceFromParentPrim((pxrInternal__aapl__pxrReserved__::SdfPath **)a1, &v18);
    uint64_t v9 = v18;
    BOOL v8 = v19;
    if (v19)
    {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v20 = v9;
      char v21 = v8;
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_216784EC4(v8);
      if (v19) {
        sub_216784EC4(v19);
      }
    }
    else
    {
      uint64_t v20 = v18;
      char v21 = 0;
    }
    pxrInternal__aapl__pxrReserved__::HdPurposeSchema::GetPurpose((pxrInternal__aapl__pxrReserved__::HdPurposeSchema *)&v20, &v16);
    uint64_t v10 = v16;
    if (v17) {
      sub_216784EC4(v17);
    }
    if (v10)
    {
      pxrInternal__aapl__pxrReserved__::HdSchema::GetContainer(&v20, a2);
    }
    else
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B97868, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_267B97868))
      {
        uint64_t v16 = 0;
        uint64_t v17 = 0;
        BOOL v12 = (uint64_t *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdRenderTagTokens);
        if (!v12) {
          BOOL v12 = (uint64_t *)sub_2171FF5DC(&pxrInternal__aapl__pxrReserved__::HdRenderTagTokens);
        }
        sub_2171A3CE4(v12, &v14);
        long long v15 = v14;
        long long v14 = 0uLL;
        unsigned int v13 = (pxrInternal__aapl__pxrReserved__::HdPurposeSchema::Builder *)pxrInternal__aapl__pxrReserved__::HdPurposeSchema::Builder::SetPurpose(&v16, (uint64_t *)&v15);
        pxrInternal__aapl__pxrReserved__::HdPurposeSchema::Builder::Build(&qword_267B97858, v13);
        if (*((void *)&v15 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v15 + 1));
        }
        if (*((void *)&v14 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v14 + 1));
        }
        if (v17) {
          sub_216784EC4(v17);
        }
        __cxa_atexit((void (*)(void *))sub_2171B5C54, &qword_267B97858, &dword_216758000);
        __cxa_guard_release(&qword_267B97868);
      }
      uint64_t v11 = unk_267B97860;
      *a2 = qword_267B97858;
      a2[1] = v11;
      if (v11) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
      }
    }
    if (v21) {
      sub_216784EC4(v21);
    }
  }
  if (v25) {
    sub_216784EC4(v25);
  }
}

void sub_2171FF4FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a14) {
    sub_216784EC4(a14);
  }
  __cxa_guard_abort(&qword_267B97868);
  if (a18) {
    sub_216784EC4(a18);
  }
  uint64_t v20 = *(std::__shared_weak_count **)(v18 - 40);
  if (v20) {
    sub_216784EC4(v20);
  }
  _Unwind_Resume(a1);
}

unsigned int *pxrInternal__aapl__pxrReserved__::HdFlattenedPurposeDataSourceProvider::ComputeDirtyLocatorsForDescendants(pxrInternal__aapl__pxrReserved__::HdFlattenedPurposeDataSourceProvider *this, pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *a2)
{
  uint64_t result = (unsigned int *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::UniversalSet(this);
  if (result != (unsigned int *)a2)
  {
    if (result[113] >= 9) {
      uint64_t v4 = *(void *)result;
    }
    else {
      uint64_t v4 = (uint64_t)result;
    }
    uint64_t v5 = v4 + 56 * result[112];
    return (unsigned int *)sub_2171E02B0((uint64_t)a2, v4, v5);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::HdRenderTagTokens_StaticTokenType *sub_2171FF5DC(atomic_ullong *a1)
{
  uint64_t result = sub_2171FF624();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::HdRenderTagTokens_StaticTokenType::~HdRenderTagTokens_StaticTokenType(result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::HdRenderTagTokens_StaticTokenType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::HdRenderTagTokens_StaticTokenType *sub_2171FF624()
{
  uint64_t v0 = (pxrInternal__aapl__pxrReserved__::HdRenderTagTokens_StaticTokenType *)operator new(0x48uLL);
  pxrInternal__aapl__pxrReserved__::HdRenderTagTokens_StaticTokenType::HdRenderTagTokens_StaticTokenType(v0);
  return v0;
}

void sub_2171FF654(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdFlattenedVisibilityDataSourceProvider::GetFlattenedDataSource(uint64_t **a1@<X1>, void *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::HdFlattenedDataSourceProvider::Context::GetInputDataSource(a1, &v22);
  uint64_t v6 = v22;
  uint64_t v5 = v23;
  if (v23)
  {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v24 = v6;
    uint64_t v25 = v5;
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    sub_216784EC4(v5);
    if (v23) {
      sub_216784EC4(v23);
    }
  }
  else
  {
    uint64_t v24 = v22;
    uint64_t v25 = 0;
  }
  pxrInternal__aapl__pxrReserved__::HdVisibilitySchema::GetVisibility((pxrInternal__aapl__pxrReserved__::HdVisibilitySchema *)&v24, &v20);
  uint64_t v7 = v20;
  if (v21) {
    sub_216784EC4(v21);
  }
  if (v7)
  {
    pxrInternal__aapl__pxrReserved__::HdSchema::GetContainer(&v24, a2);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::HdFlattenedDataSourceProvider::Context::GetFlattenedDataSourceFromParentPrim((pxrInternal__aapl__pxrReserved__::SdfPath **)a1, &v18);
    uint64_t v9 = v18;
    BOOL v8 = v19;
    if (v19)
    {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v20 = v9;
      char v21 = v8;
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_216784EC4(v8);
      if (v19) {
        sub_216784EC4(v19);
      }
    }
    else
    {
      uint64_t v20 = v18;
      char v21 = 0;
    }
    pxrInternal__aapl__pxrReserved__::HdVisibilitySchema::GetVisibility((pxrInternal__aapl__pxrReserved__::HdVisibilitySchema *)&v20, &v16);
    uint64_t v10 = v16;
    if (v17) {
      sub_216784EC4(v17);
    }
    if (v10)
    {
      pxrInternal__aapl__pxrReserved__::HdSchema::GetContainer(&v20, a2);
    }
    else
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B97880, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_267B97880))
      {
        uint64_t v16 = 0;
        uint64_t v17 = 0;
        char v13 = 1;
        pxrInternal__aapl__pxrReserved__::HdRetainedTypedSampledDataSource<BOOL>::New(&v13, (uint64_t *)&v14);
        long long v15 = v14;
        long long v14 = 0uLL;
        BOOL v12 = (pxrInternal__aapl__pxrReserved__::HdVisibilitySchema::Builder *)pxrInternal__aapl__pxrReserved__::HdVisibilitySchema::Builder::SetVisibility(&v16, (uint64_t *)&v15);
        pxrInternal__aapl__pxrReserved__::HdVisibilitySchema::Builder::Build(&qword_267B97870, v12);
        if (*((void *)&v15 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v15 + 1));
        }
        if (*((void *)&v14 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v14 + 1));
        }
        if (v17) {
          sub_216784EC4(v17);
        }
        __cxa_atexit((void (*)(void *))sub_2171B5C54, &qword_267B97870, &dword_216758000);
        __cxa_guard_release(&qword_267B97880);
      }
      uint64_t v11 = *(void *)algn_267B97878;
      *a2 = qword_267B97870;
      a2[1] = v11;
      if (v11) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
      }
    }
    if (v21) {
      sub_216784EC4(v21);
    }
  }
  if (v25) {
    sub_216784EC4(v25);
  }
}

void sub_2171FF860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a16) {
    sub_216784EC4(a16);
  }
  __cxa_guard_abort(&qword_267B97880);
  if (a20) {
    sub_216784EC4(a20);
  }
  uint64_t v22 = *(std::__shared_weak_count **)(v20 - 40);
  if (v22) {
    sub_216784EC4(v22);
  }
  _Unwind_Resume(a1);
}

unsigned int *pxrInternal__aapl__pxrReserved__::HdFlattenedVisibilityDataSourceProvider::ComputeDirtyLocatorsForDescendants(pxrInternal__aapl__pxrReserved__::HdFlattenedVisibilityDataSourceProvider *this, pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *a2)
{
  uint64_t result = (unsigned int *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::UniversalSet(this);
  if (result != (unsigned int *)a2)
  {
    if (result[113] >= 9) {
      uint64_t v4 = *(void *)result;
    }
    else {
      uint64_t v4 = (uint64_t)result;
    }
    uint64_t v5 = v4 + 56 * result[112];
    return (unsigned int *)sub_2171E02B0((uint64_t)a2, v4, v5);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::HdFlattenedXformDataSourceProvider::GetFlattenedDataSource(uint64_t **a1@<X1>, void *a2@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B97898, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B97898))
  {
    long long v47 = 0u;
    long long v48 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    uint64_t v29 = (_OWORD *)pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)&v55, 1.0);
    sub_217200098(v29, &v34);
    v46[0] = v34;
    long long v34 = 0uLL;
    uint64x2_t v30 = pxrInternal__aapl__pxrReserved__::HdXformSchema::Builder::SetMatrix(&v47, (uint64_t *)v46);
    LOBYTE(v40) = 1;
    pxrInternal__aapl__pxrReserved__::HdRetainedTypedSampledDataSource<BOOL>::New(&v40, (uint64_t *)&v44);
    long long v45 = v44;
    long long v44 = 0uLL;
    uint64x2_t v31 = (pxrInternal__aapl__pxrReserved__::HdXformSchema::Builder *)pxrInternal__aapl__pxrReserved__::HdXformSchema::Builder::SetResetXformStack((uint64_t)v30, (uint64_t *)&v45);
    pxrInternal__aapl__pxrReserved__::HdXformSchema::Builder::Build(v31, &qword_267B97888);
    if (*((void *)&v45 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v45 + 1));
    }
    if (*((void *)&v44 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v44 + 1));
    }
    if (*((void *)&v46[0] + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v46[0] + 1));
    }
    if (*((void *)&v34 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v34 + 1));
    }
    sub_2171ACDE0((uint64_t)&v47);
    __cxa_atexit((void (*)(void *))sub_2171B5C54, &qword_267B97888, &dword_216758000);
    __cxa_guard_release(&qword_267B97898);
  }
  pxrInternal__aapl__pxrReserved__::HdFlattenedDataSourceProvider::Context::GetInputDataSource(a1, &v42);
  unint64_t v6 = v42;
  uint64_t v5 = v43;
  if (v43)
  {
    atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)&long long v45 = v6;
    *((void *)&v45 + 1) = v5;
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    sub_216784EC4(v5);
    if (v43) {
      sub_216784EC4(v43);
    }
  }
  else
  {
    long long v45 = v42;
  }
  pxrInternal__aapl__pxrReserved__::HdXformSchema::GetResetXformStack((pxrInternal__aapl__pxrReserved__::HdXformSchema *)&v45, &v55);
  if ((void)v55 && (*(unsigned int (**)(void, double))(*(void *)v55 + 32))(v55, 0.0))
  {
    pxrInternal__aapl__pxrReserved__::HdXformSchema::GetMatrix((pxrInternal__aapl__pxrReserved__::HdXformSchema *)&v45, &v47);
    uint64_t v7 = v47;
    if (*((void *)&v47 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v47 + 1));
    }
    if (v7)
    {
      pxrInternal__aapl__pxrReserved__::HdSchema::GetContainer(&v45, a2);
    }
    else
    {
      uint64_t v27 = unk_267B97890;
      *a2 = qword_267B97888;
      a2[1] = v27;
      if (v27) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
      }
    }
    unint64_t v26 = (std::__shared_weak_count *)*((void *)&v55 + 1);
    if (!*((void *)&v55 + 1)) {
      goto LABEL_58;
    }
LABEL_57:
    sub_216784EC4(v26);
    goto LABEL_58;
  }
  if (*((void *)&v55 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v55 + 1));
  }
  pxrInternal__aapl__pxrReserved__::HdXformSchema::GetMatrix((pxrInternal__aapl__pxrReserved__::HdXformSchema *)&v45, &v44);
  pxrInternal__aapl__pxrReserved__::HdFlattenedDataSourceProvider::Context::GetFlattenedDataSourceFromParentPrim((pxrInternal__aapl__pxrReserved__::SdfPath **)a1, &v38);
  uint64_t v9 = v38;
  BOOL v8 = v39;
  if (v39)
  {
    atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v40 = v9;
    uint64_t v41 = v8;
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    sub_216784EC4(v8);
    if (v39) {
      sub_216784EC4(v39);
    }
  }
  else
  {
    uint64_t v40 = v38;
    uint64_t v41 = 0;
  }
  pxrInternal__aapl__pxrReserved__::HdXformSchema::GetMatrix((pxrInternal__aapl__pxrReserved__::HdXformSchema *)&v40, &v36);
  uint64_t v10 = v44;
  uint64_t v11 = v36;
  if ((void)v44)
  {
    if (v36)
    {
      long long v34 = 0uLL;
      long long v35 = 0uLL;
      BOOL v12 = operator new(0xA8uLL);
      uint64_t v13 = (uint64_t)v12;
      long long v14 = v37;
      if (v37) {
        atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v15 = (std::__shared_weak_count *)*((void *)&v44 + 1);
      if (*((void *)&v44 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v44 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      void *v12 = &unk_26C780D10;
      v12[1] = v11;
      void v12[2] = v14;
      if (v14) {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      void v12[3] = v10;
      void v12[4] = v15;
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(long long *__return_ptr, uint64_t, double))(*(void *)v10 + 32))(&v47, v10, 0.0);
      (*(void (**)(_OWORD *__return_ptr, double))(**(void **)(v13 + 8) + 32))(v46, 0.0);
      long long v59 = v51;
      long long v60 = v52;
      long long v61 = v53;
      long long v62 = v54;
      long long v55 = v47;
      long long v56 = v48;
      long long v57 = v49;
      long long v58 = v50;
      pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=((double *)&v55, (double *)v46);
      long long v16 = v60;
      *(_OWORD *)(v13 + 104) = v59;
      *(_OWORD *)(v13 + 120) = v16;
      long long v17 = v62;
      *(_OWORD *)(v13 + 136) = v61;
      *(_OWORD *)(v13 + 152) = v17;
      long long v18 = v56;
      *(_OWORD *)(v13 + 40) = v55;
      *(_OWORD *)(v13 + 56) = v18;
      long long v19 = v58;
      *(_OWORD *)(v13 + 72) = v57;
      *(_OWORD *)(v13 + 8sub_2171F4108((uint64_t)this + 8) = v19;
      uint64_t v20 = (std::__shared_weak_count *)operator new(0x20uLL);
      v20->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C780D60;
      v20->__shared_owners_ = 0;
      v20->__shared_weak_owners_ = 0;
      v20[1].__vftable = (std::__shared_weak_count_vtbl *)v13;
      if (v15) {
        sub_216784EC4(v15);
      }
      if (v14) {
        sub_216784EC4(v14);
      }
      uint64_t v32 = v13;
      int64x2_t v33 = v20;
      char v21 = pxrInternal__aapl__pxrReserved__::HdXformSchema::Builder::SetMatrix(&v34, &v32);
      LOBYTE(v46[0]) = 1;
      pxrInternal__aapl__pxrReserved__::HdRetainedTypedSampledDataSource<BOOL>::New(v46, (uint64_t *)&v47);
      long long v55 = v47;
      long long v47 = 0uLL;
      uint64_t v22 = (pxrInternal__aapl__pxrReserved__::HdXformSchema::Builder *)pxrInternal__aapl__pxrReserved__::HdXformSchema::Builder::SetResetXformStack((uint64_t)v21, (uint64_t *)&v55);
      pxrInternal__aapl__pxrReserved__::HdXformSchema::Builder::Build(v22, a2);
      if (*((void *)&v55 + 1)) {
        sub_216784EC4(*((std::__shared_weak_count **)&v55 + 1));
      }
      if (*((void *)&v47 + 1)) {
        sub_216784EC4(*((std::__shared_weak_count **)&v47 + 1));
      }
      if (v33) {
        sub_216784EC4(v33);
      }
      if (*((void *)&v35 + 1)) {
        sub_216784EC4(*((std::__shared_weak_count **)&v35 + 1));
      }
      uint64_t v23 = (std::__shared_weak_count *)*((void *)&v34 + 1);
      if (!*((void *)&v34 + 1)) {
        goto LABEL_52;
      }
LABEL_51:
      sub_216784EC4(v23);
      goto LABEL_52;
    }
    long long v55 = 0uLL;
    long long v56 = 0uLL;
    uint64_t v24 = pxrInternal__aapl__pxrReserved__::HdXformSchema::Builder::SetMatrix(&v55, (uint64_t *)&v44);
    LOBYTE(v34) = 1;
    pxrInternal__aapl__pxrReserved__::HdRetainedTypedSampledDataSource<BOOL>::New(&v34, (uint64_t *)v46);
    long long v47 = v46[0];
    v46[0] = 0uLL;
    uint64_t v25 = (pxrInternal__aapl__pxrReserved__::HdXformSchema::Builder *)pxrInternal__aapl__pxrReserved__::HdXformSchema::Builder::SetResetXformStack((uint64_t)v24, (uint64_t *)&v47);
    pxrInternal__aapl__pxrReserved__::HdXformSchema::Builder::Build(v25, a2);
    if (*((void *)&v47 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v47 + 1));
    }
    if (*((void *)&v46[0] + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v46[0] + 1));
    }
    if (*((void *)&v56 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v56 + 1));
    }
    uint64_t v23 = (std::__shared_weak_count *)*((void *)&v55 + 1);
    if (*((void *)&v55 + 1)) {
      goto LABEL_51;
    }
  }
  else if (v36)
  {
    pxrInternal__aapl__pxrReserved__::HdSchema::GetContainer(&v40, a2);
  }
  else
  {
    uint64_t v28 = unk_267B97890;
    *a2 = qword_267B97888;
    a2[1] = v28;
    if (v28) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v28 + 8), 1uLL, memory_order_relaxed);
    }
  }
LABEL_52:
  if (v37) {
    sub_216784EC4(v37);
  }
  if (v41) {
    sub_216784EC4(v41);
  }
  unint64_t v26 = (std::__shared_weak_count *)*((void *)&v44 + 1);
  if (*((void *)&v44 + 1)) {
    goto LABEL_57;
  }
LABEL_58:
  if (*((void *)&v45 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v45 + 1));
  }
}

void sub_2171FFEC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  if (a28) {
    sub_216784EC4(a28);
  }
  if (a12) {
    sub_216784EC4(a12);
  }
  sub_2171ACDE0((uint64_t)&a43);
  __cxa_guard_abort(&qword_267B97898);
  _Unwind_Resume(a1);
}

void *sub_217200098@<X0>(_OWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (char *)operator new(0x88uLL);
  long long v5 = a1[5];
  *(_OWORD *)(v4 + 72) = a1[4];
  *(_OWORD *)(v4 + 8sub_2171F4108((uint64_t)this + 8) = v5;
  long long v6 = a1[7];
  *(_OWORD *)(v4 + 104) = a1[6];
  *(_OWORD *)(v4 + 120) = v6;
  long long v7 = a1[1];
  *(_OWORD *)(v4 + sub_2171F4108((uint64_t)this + 8) = *a1;
  *(_OWORD *)(v4 + 24) = v7;
  long long v8 = a1[3];
  *(_OWORD *)(v4 + 40) = a1[2];
  *(void *)uint64_t v4 = &unk_26C780C48;
  *(_OWORD *)(v4 + 56) = v8;

  return sub_217200278(a2, (uint64_t)v4);
}

unsigned int *pxrInternal__aapl__pxrReserved__::HdFlattenedXformDataSourceProvider::ComputeDirtyLocatorsForDescendants(pxrInternal__aapl__pxrReserved__::HdFlattenedXformDataSourceProvider *this, pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *a2)
{
  uint64_t result = (unsigned int *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::UniversalSet(this);
  if (result != (unsigned int *)a2)
  {
    if (result[113] >= 9) {
      uint64_t v4 = *(void *)result;
    }
    else {
      uint64_t v4 = (uint64_t)result;
    }
    uint64_t v5 = v4 + 56 * result[112];
    return (unsigned int *)sub_2171E02B0((uint64_t)a2, v4, v5);
  }
  return result;
}

void sub_217200194(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *a1)
{
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(a1);

  operator delete(v1);
}

void *sub_2172001BC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  a2[1] = (char *)&off_26C74E928 + 2;
  uint64_t result = operator new(0x88uLL);
  long long v5 = *(_OWORD *)(a1 + 88);
  *((_OWORD *)result + 4) = *(_OWORD *)(a1 + 72);
  *((_OWORD *)result + 5) = v5;
  long long v6 = *(_OWORD *)(a1 + 120);
  *((_OWORD *)result + 6) = *(_OWORD *)(a1 + 104);
  *((_OWORD *)result + 7) = v6;
  long long v7 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)uint64_t result = *(_OWORD *)(a1 + 8);
  *((_OWORD *)result + 1) = v7;
  long long v8 = *(_OWORD *)(a1 + 56);
  *((_OWORD *)result + 2) = *(_OWORD *)(a1 + 40);
  *((_OWORD *)result + 3) = v8;
  atomic_store(0, (unsigned int *)result + 32);
  *a2 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 32, 1u, memory_order_relaxed);
  return result;
}

uint64_t sub_21720023C()
{
  return 0;
}

__n128 sub_217200244@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 80) = v2;
  long long v3 = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(a2 + 112) = v3;
  long long v4 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 16) = v4;
  __n128 result = *(__n128 *)(a1 + 40);
  long long v6 = *(_OWORD *)(a1 + 56);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 4sub_2171F4108((uint64_t)this + 8) = v6;
  return result;
}

void *sub_217200278(void *a1, uint64_t a2)
{
  *a1 = a2;
  long long v4 = operator new(0x20uLL);
  void *v4 = &unk_26C780C98;
  v4[1] = 0;
  _OWORD v4[2] = 0;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_2172002D0(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_2173254E8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_2172002EC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_217200314(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_217200344(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C780CE8)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_217200388(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *this)
{
  *(void *)this = &unk_26C780D10;
  long long v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    sub_216784EC4(v2);
  }
  long long v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    sub_216784EC4(v3);
  }

  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(this);
}

void sub_2172003F0(pxrInternal__aapl__pxrReserved__::HdDataSourceBase *this)
{
  *(void *)this = &unk_26C780D10;
  long long v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    sub_216784EC4(v2);
  }
  long long v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    sub_216784EC4(v3);
  }
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(this);

  operator delete(v4);
}

void *sub_21720045C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  (*(void (**)(_OWORD *__return_ptr))(*(void *)a1 + 32))(v8);
  a2[1] = (char *)&off_26C74E928 + 2;
  uint64_t result = operator new(0x88uLL);
  long long v4 = v8[5];
  *((_OWORD *)result + 4) = v8[4];
  *((_OWORD *)result + 5) = v4;
  long long v5 = v8[7];
  *((_OWORD *)result + 6) = v8[6];
  *((_OWORD *)result + 7) = v5;
  long long v6 = v8[1];
  *(_OWORD *)uint64_t result = v8[0];
  *((_OWORD *)result + 1) = v6;
  long long v7 = v8[3];
  *((_OWORD *)result + 2) = v8[2];
  *((_OWORD *)result + 3) = v7;
  atomic_store(0, (unsigned int *)result + 32);
  *a2 = result;
  atomic_fetch_add_explicit((atomic_uint *volatile)result + 32, 1u, memory_order_relaxed);
  return result;
}

uint64_t sub_2172004F8(uint64_t a1, void **a2, float a3, float a4)
{
  v16[0] = 0;
  v16[1] = 0;
  long long v17 = 0;
  int v8 = (*(uint64_t (**)(void, void **))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8), v16);
  __p[0] = 0;
  __p[1] = 0;
  long long v15 = 0;
  unsigned int v9 = (*(uint64_t (**)(void, void **, float, float))(**(void **)(a1 + 24) + 24))(*(void *)(a1 + 24), __p, a3, a4);
  unsigned int v10 = v9;
  if (!a2) {
    goto LABEL_12;
  }
  if ((v8 & v9) == 1)
  {
    sub_2171B3E98((float *)v16[0], (float *)v16[1], (float *)__p[0], (float *)__p[1], (uint64_t)a2, &v18);
    goto LABEL_12;
  }
  if (v8)
  {
    uint64_t v11 = *a2;
    if (*a2)
    {
      a2[1] = v11;
      operator delete(v11);
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
    }
    *(_OWORD *)a2 = *(_OWORD *)v16;
    a2[2] = v17;
    v16[1] = 0;
    long long v17 = 0;
    v16[0] = 0;
    goto LABEL_12;
  }
  if (!v9)
  {
LABEL_12:
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    goto LABEL_14;
  }
  BOOL v12 = *a2;
  if (*a2)
  {
    a2[1] = v12;
    operator delete(v12);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  *(_OWORD *)a2 = *(_OWORD *)__p;
  a2[2] = v15;
LABEL_14:
  if (v16[0])
  {
    v16[1] = v16[0];
    operator delete(v16[0]);
  }
  return v8 | v10;
}

void sub_21720066C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2172006A0(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  if (a3 == 0.0)
  {
    long long v5 = *(_OWORD *)(a1 + 120);
    *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 104);
    *(_OWORD *)(a2 + 80) = v5;
    long long v6 = *(_OWORD *)(a1 + 152);
    *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 136);
    *(_OWORD *)(a2 + 112) = v6;
    long long v7 = *(_OWORD *)(a1 + 56);
    *(_OWORD *)a2 = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a2 + 16) = v7;
    long long v8 = *(_OWORD *)(a1 + 88);
    *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 72);
    *(_OWORD *)(a2 + 4sub_2171F4108((uint64_t)this + 8) = v8;
  }
  else
  {
    (*(void (**)(_OWORD *__return_ptr))(**(void **)(a1 + 24) + 32))(v15);
    (*(void (**)(double *__return_ptr, float))(**(void **)(a1 + 8) + 32))(v14, a3);
    long long v10 = v15[5];
    *(_OWORD *)(a2 + 64) = v15[4];
    *(_OWORD *)(a2 + 80) = v10;
    long long v11 = v15[7];
    *(_OWORD *)(a2 + 96) = v15[6];
    *(_OWORD *)(a2 + 112) = v11;
    long long v12 = v15[1];
    *(_OWORD *)a2 = v15[0];
    *(_OWORD *)(a2 + 16) = v12;
    long long v13 = v15[3];
    *(_OWORD *)(a2 + 32) = v15[2];
    *(_OWORD *)(a2 + 4sub_2171F4108((uint64_t)this + 8) = v13;
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=((double *)a2, v14);
  }
}

void sub_2172007A8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2172007D0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_217200800(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C780DB0)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::HdFlatteningSceneIndex_Impl::_PrimLevelWrappingDataSource::PrimDirtied(uint64_t a1, uint64_t *a2)
{
  if (*((_DWORD *)a2 + 912))
  {
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    int v6 = 0;
    unint64_t v7 = 0;
    long long v8 = (void *)(a1 + 40);
    do
    {
      if (*((_DWORD *)a2 + 913) >= 9u) {
        unsigned int v9 = (uint64_t *)*a2;
      }
      else {
        unsigned int v9 = a2;
      }
      if (!pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::IsEmpty((pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *)&v9[v5]))
      {
        long long v10 = v8;
        if (*(_DWORD *)(a1 + 172) >= 9u) {
          long long v10 = (void *)*v8;
        }
        long long v11 = &v10[v4];
        sub_2171BE4CC(&v10[v4], &v22);
        if (v22)
        {
          unsigned int v13 = *((_DWORD *)a2 + 913);
          long long v14 = (uint64_t *)*a2;
          long long v15 = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::EmptyLocator(v12);
          uint64_t v16 = (uint64_t)(v13 >= 9 ? v14 : a2);
          if (pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::Contains((pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *)(v16 + v5 * 8), v15))
          {
            goto LABEL_22;
          }
          sub_2172009FC((uint64_t)&v22, &v20);
          uint64_t v17 = v20;
          if (v20)
          {
            if (*((_DWORD *)a2 + 913) >= 9u) {
              long long v18 = (uint64_t *)*a2;
            }
            else {
              long long v18 = a2;
            }
            v6 |= (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v20 + 32))(v20, &v18[v5]);
          }
          if (v21) {
            sub_216784EC4(v21);
          }
          if (!v17)
          {
LABEL_22:
            uint64_t v20 = 0;
            char v21 = 0;
            sub_2171FEF5C(v11, &v20);
            if (v21) {
              sub_216784EC4(v21);
            }
            int v6 = 1;
          }
        }
        if (v23) {
          sub_216784EC4(v23);
        }
      }
      ++v7;
      v5 += 57;
      v4 += 2;
    }
    while (v7 < *((unsigned int *)a2 + 912));
  }
  else
  {
    LOBYTE(v6) = 0;
  }
  return v6 & 1;
}

void sub_2172009CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  if (a12) {
    sub_216784EC4(a12);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2172009FC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = *(void **)a1;
  if (result
    && (uint64_t result = __dynamic_cast(result, (const struct __class_type_info *)&unk_26C77BD10, (const struct __class_type_info *)&unk_26C780A60, 0)) != 0)
  {
    uint64_t v5 = *(void *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

char *pxrInternal__aapl__pxrReserved__::HdFlatteningSceneIndex_Impl::_Insert(uint64_t **a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = (char *)v5 - (char *)*a1;
  if ((unint64_t)v6 < 0xF9)
  {
    unsigned int v9 = ~(-1 << ((unint64_t)v6 >> 3));
    long long v11 = *(char **)a2;
    uint64_t result = *(char **)(a2 + 8);
    if (*(char **)a2 == result)
    {
LABEL_16:
      if (v5 != v4)
      {
        uint64_t v15 = 0;
        unint64_t v16 = 0;
        do
        {
          if ((v9 >> v16))
          {
            if ((unint64_t)result >= *(void *)(a2 + 16))
            {
              uint64_t result = sub_216973984((char **)a2, &v4[v15]);
            }
            else
            {
              uint64_t v17 = v4[v16];
              *(void *)uint64_t result = v17;
              if ((v17 & 7) != 0
                && (atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
              {
                *(void *)result &= 0xFFFFFFFFFFFFFFF8;
              }
              result += 8;
            }
            *(void *)(a2 + sub_2171F4108((uint64_t)this + 8) = result;
            uint64_t v4 = *a1;
            uint64_t v5 = a1[1];
          }
          ++v16;
          ++v15;
        }
        while (v16 < v5 - v4);
      }
    }
    else
    {
      unint64_t v12 = v6 >> 3;
      if (v12 <= 1) {
        unint64_t v12 = 1;
      }
      while (1)
      {
        if (v5 != v4)
        {
          for (uint64_t i = 0; i != v12; ++i)
          {
            if ((v4[i] & 0xFFFFFFFFFFFFFFF8) == (*(void *)v11 & 0xFFFFFFFFFFFFFFF8)) {
              int v14 = ~(1 << i);
            }
            else {
              int v14 = -1;
            }
            v9 &= v14;
          }
        }
        if (!v9) {
          break;
        }
        v11 += 8;
        if (v11 == result) {
          goto LABEL_16;
        }
      }
    }
  }
  else
  {
    sub_217202DA0((uint64_t)v23, v4, v5);
    unint64_t v7 = *(char **)a2;
    long long v8 = *(char **)(a2 + 8);
    while (v7 != v8)
    {
      sub_2171E422C(v23, v7);
      v7 += 8;
    }
    long long v19 = *a1;
    for (uint64_t j = a1[1]; v19 != j; ++v19)
    {
      if (sub_2168CB1F4(v23, v19))
      {
        uint64_t v20 = *(uint64_t **)(a2 + 8);
        if ((unint64_t)v20 >= *(void *)(a2 + 16))
        {
          uint64_t v22 = sub_216973984((char **)a2, v19);
        }
        else
        {
          uint64_t v21 = *v19;
          *uint64_t v20 = *v19;
          if ((v21 & 7) != 0
            && (atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
          {
            *v20 &= 0xFFFFFFFFFFFFFFF8;
          }
          uint64_t v22 = (char *)(v20 + 1);
        }
        *(void *)(a2 + sub_2171F4108((uint64_t)this + 8) = v22;
      }
    }
    return (char *)sub_2168C08A0((uint64_t)v23);
  }
  return result;
}

void sub_217200C78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168C08A0((uint64_t)va);
  _Unwind_Resume(a1);
}

char *pxrInternal__aapl__pxrReserved__::HdFlatteningSceneIndex_Impl::_PrimLevelWrappingDataSource::GetNames@<X0>(pxrInternal__aapl__pxrReserved__::HdFlatteningSceneIndex_Impl::_PrimLevelWrappingDataSource *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *((void *)this + 3);
  if (v4)
  {
    (*(void (**)(void *__return_ptr))(*(void *)v4 + 16))(a2);
    return pxrInternal__aapl__pxrReserved__::HdFlatteningSceneIndex_Impl::_Insert((uint64_t **)(*((void *)this + 1) + 144), (uint64_t)a2);
  }
  else
  {
    uint64_t v6 = *((void *)this + 1);
    a2[1] = 0;
    a2[2] = 0;
    *a2 = 0;
    unint64_t v7 = *(uint64_t **)(v6 + 144);
    long long v8 = *(uint64_t **)(v6 + 152);
    return (char *)sub_21698FA28(a2, v7, v8, v8 - v7);
  }
}

void sub_217200D3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdFlatteningSceneIndex_Impl::_PrimLevelWrappingDataSource::Get(pxrInternal__aapl__pxrReserved__::HdFlatteningSceneIndex_Impl::_PrimLevelWrappingDataSource *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = (void *)*((void *)this + 1);
  uint64_t v8 = v6[18];
  uint64_t v7 = v6[19];
  uint64_t v9 = v7 - v8;
  if (v7 == v8)
  {
LABEL_6:
    uint64_t v13 = *((void *)this + 3);
    if (v13)
    {
      int v14 = *(void (**)(void))(*(void *)v13 + 24);
      v14();
    }
    else
    {
      *a3 = 0;
      a3[1] = 0;
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = v9 >> 3;
    if ((unint64_t)(v9 >> 3) <= 1) {
      uint64_t v12 = 1;
    }
    while ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) != (*(void *)(v8 + 8 * v11) & 0xFFFFFFFFFFFFFFF8))
    {
      ++v11;
      v10 += 16;
      if (v12 == v11) {
        goto LABEL_6;
      }
    }
    uint64_t v15 = (void *)((char *)this + 40);
    if (*((_DWORD *)this + 43) >= 9u) {
      uint64_t v15 = (void *)*v15;
    }
    unint64_t v16 = &v15[2 * v11];
    sub_2171BE4CC(v16, &v23);
    if (v23)
    {
      sub_2171997C0((uint64_t)&v23, &v27);
      *(_OWORD *)a3 = v27;
      uint64_t v17 = v24;
      if (!v24) {
        return;
      }
      goto LABEL_25;
    }
    if (v24) {
      sub_216784EC4(v24);
    }
    uint64_t v23 = *((void *)this + 1);
    uint64_t v24 = (std::__shared_weak_count *)((char *)this + 16);
    uint64_t v25 = a2;
    unint64_t v26 = (char *)this + 24;
    (***(void (****)(long long *__return_ptr))(v6[21] + v10))(&v22);
    long long v18 = (std::__shared_weak_count *)*((void *)&v22 + 1);
    long long v27 = v22;
    if (!(void)v22)
    {
      LOBYTE(v21) = 0;
      pxrInternal__aapl__pxrReserved__::HdRetainedTypedSampledDataSource<BOOL>::New(&v21, (uint64_t *)&v22);
      long long v20 = v22;
      long long v22 = 0uLL;
      long long v27 = v20;
      if (v18)
      {
        sub_216784EC4(v18);
        if (*((void *)&v22 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v22 + 1));
        }
      }
    }
    long long v22 = 0uLL;
    if (sub_217200FB4(v16, &v22, (uint64_t *)&v27)) {
      long long v19 = &v27;
    }
    else {
      long long v19 = &v22;
    }
    sub_2171997C0((uint64_t)v19, &v21);
    *(_OWORD *)a3 = v21;
    if (*((void *)&v22 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v22 + 1));
    }
    uint64_t v17 = (std::__shared_weak_count *)*((void *)&v27 + 1);
    if (*((void *)&v27 + 1)) {
LABEL_25:
    }
      sub_216784EC4(v17);
  }
}

void sub_217200F84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (v18) {
    sub_216784EC4(v18);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_217200FB4(uint64_t *a1, void *a2, uint64_t *a3)
{
  long long v3 = (std::__shared_weak_count *)a3[1];
  uint64_t v6 = *a3;
  uint64_t v7 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL v4 = sub_217202BEC(a1, a2, &v6);
  if (v7) {
    sub_216784EC4(v7);
  }
  return v4;
}

void sub_21720100C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdFlatteningSceneIndex::HdFlatteningSceneIndex(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v5 = pxrInternal__aapl__pxrReserved__::HdSingleInputFilteringSceneIndexBase::HdSingleInputFilteringSceneIndexBase((pxrInternal__aapl__pxrReserved__::HdSceneIndexBase *)a1, a2);
  *(void *)uint64_t v5 = &unk_26C780DD8;
  *((_OWORD *)v5 + 9) = 0u;
  uint64_t v6 = (char **)((char *)v5 + 144);
  uint64_t v7 = (uint64_t *)((char *)v5 + 168);
  *((_OWORD *)v5 + 10) = 0u;
  *((_OWORD *)v5 + 11) = 0u;
  *((void *)v5 + 80) = 0x800000000;
  *((void *)v5 + 537) = 0x800000000;
  *((_OWORD *)v5 + 269) = 0u;
  *((_OWORD *)v5 + 270) = 0u;
  *((void *)v5 + 542) = 0;
  uint64_t v8 = (_OWORD *)((char *)v5 + 4872);
  uint64_t v9 = -48;
  do
  {
    *(void *)(a1 + v9 + 492sub_2171F4108((uint64_t)this + 8) = 0;
    v9 += 24;
  }
  while (v9);
  *(_OWORD *)(a1 + 484sub_2171F4108((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 4832) = 0u;
  *(_OWORD *)(a1 + 4816) = 0u;
  *(_OWORD *)(a1 + 4800) = 0u;
  *(_OWORD *)(a1 + 4784) = 0u;
  *(_OWORD *)(a1 + 476sub_2171F4108((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 4752) = 0u;
  *(_OWORD *)(a1 + 4736) = 0u;
  *(_OWORD *)(a1 + 4720) = 0u;
  *(_OWORD *)(a1 + 4704) = 0u;
  *(_OWORD *)(a1 + 468sub_2171F4108((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 4672) = 0u;
  *(_OWORD *)(a1 + 4656) = 0u;
  *(_OWORD *)(a1 + 4640) = 0u;
  *(_OWORD *)(a1 + 4624) = 0u;
  *(_OWORD *)(a1 + 460sub_2171F4108((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 4592) = 0u;
  *(_OWORD *)(a1 + 4576) = 0u;
  *(_OWORD *)(a1 + 4560) = 0u;
  *(_OWORD *)(a1 + 4544) = 0u;
  *(_OWORD *)(a1 + 452sub_2171F4108((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 4512) = 0u;
  *(_OWORD *)(a1 + 4496) = 0u;
  *(_OWORD *)(a1 + 4480) = 0u;
  *(_OWORD *)(a1 + 4464) = 0u;
  *(_OWORD *)(a1 + 444sub_2171F4108((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 4432) = 0u;
  *(_OWORD *)(a1 + 4416) = 0u;
  *(_OWORD *)(a1 + 4400) = 0u;
  *(_OWORD *)(a1 + 4384) = 0u;
  *(_OWORD *)(a1 + 436sub_2171F4108((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 4352) = 0u;
  __dmb(0xBu);
  *(void *)(a1 + 4344) = 0;
  __dmb(0xBu);
  *(void *)(a1 + 4864) = 0;
  *uint64_t v8 = 0u;
  *(_OWORD *)((char *)v5 + 488sub_2171F4108((uint64_t)this + 8) = 0u;
  *(_OWORD *)((char *)v5 + 4904) = 0u;
  *(void *)(a1 + 4352) = v8;
  __dmb(0xBu);
  *(void *)(a1 + 4344) = 1;
  if (*(void *)a3)
  {
    (*(void (**)(uint64_t **__return_ptr))(**(void **)a3 + 16))(&v21);
    uint64_t v10 = v21;
    for (uint64_t i = v22; v10 != i; ++v10)
    {
      (*(void (**)(void ***__return_ptr))(**(void **)a3 + 24))(&v23);
      sub_217201400((uint64_t)&v23, &v19);
      if (v24) {
        sub_216784EC4(v24);
      }
      if (v19)
      {
        (*(void (**)(long long *__return_ptr, double))(*(void *)v19 + 32))(&v18, 0.0);
        if ((void)v18)
        {
          uint64_t v12 = *(uint64_t **)(a1 + 152);
          if ((unint64_t)v12 >= *(void *)(a1 + 160))
          {
            int v14 = sub_216973984(v6, v10);
          }
          else
          {
            uint64_t v13 = *v10;
            uint64_t *v12 = *v10;
            if ((v13 & 7) != 0
              && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
            {
              *v12 &= 0xFFFFFFFFFFFFFFF8;
            }
            int v14 = (char *)(v12 + 1);
          }
          *(void *)(a1 + 152) = v14;
          sub_217201490(v7, &v18);
          pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&v23, (const pxrInternal__aapl__pxrReserved__::TfToken *)v10);
          pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::insert((pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *)(a1 + 192), (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&v23);
          uint64_t v15 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *)sub_217199B64((uint64_t)&v23);
          uint64_t v16 = pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::UniversalSet(v15);
          sub_2172030D4(a1 + 648, v16);
        }
        if (*((void *)&v18 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v18 + 1));
        }
      }
      if (v20) {
        sub_216784EC4(v20);
      }
    }
    uint64_t v23 = (void **)&v21;
    sub_216889A04(&v23);
  }
  return a1;
}

void sub_217201348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_217202918((unint64_t *)(v9 + 4344));
  sub_217202EAC(v10);
  sub_217202E1C(v12);
  sub_2171AA914(v11);
  sub_216787968((void ***)va);
  sub_216889A04((void ***)va);
  sub_2171E6240((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v9, v14);
  _Unwind_Resume(a1);
}

void *sub_217201400@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = *(void **)a1;
  if (result
    && (uint64_t result = __dynamic_cast(result, (const struct __class_type_info *)&unk_26C77BD10, (const struct __class_type_info *)&unk_26C7806E0, 0)) != 0)
  {
    uint64_t v5 = *(void *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void **sub_217201490(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      sub_21677CB10();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    int v14 = (char *)sub_216787EE0((uint64_t)result, v13);
    uint64_t v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)uint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    void v18[2] = v15 + 16;
    sub_217202F90(a1, v18);
    uint64_t v9 = (void *)a1[1];
    uint64_t result = sub_216788028(v18);
  }
  else
  {
    void *v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_217201598(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216788028((void **)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdFlatteningSceneIndex::~HdFlatteningSceneIndex(pxrInternal__aapl__pxrReserved__::HdFlatteningSceneIndex *this)
{
  *(void *)this = &unk_26C780DD8;
  sub_217202918((unint64_t *)this + 543);
  sub_217202EAC((uint64_t *)this + 538);
  sub_217202E1C((uint64_t)this + 648);
  sub_2171AA914((uint64_t)this + 192);
  long long v3 = (void **)((char *)this + 168);
  sub_216787968(&v3);
  long long v3 = (void **)((char *)this + 144);
  sub_216889A04(&v3);
  *(void *)this = &unk_26C780580;
  pxrInternal__aapl__pxrReserved__::HdSceneIndexObserver::~HdSceneIndexObserver((pxrInternal__aapl__pxrReserved__::HdFlatteningSceneIndex *)((char *)this + 120), v2);
  sub_2171E8C28((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)this + 14);
  pxrInternal__aapl__pxrReserved__::HdSceneIndexBase::~HdSceneIndexBase(this);
}

{
  void *v1;
  uint64_t vars8;

  pxrInternal__aapl__pxrReserved__::HdFlatteningSceneIndex::~HdFlatteningSceneIndex(this);

  operator delete(v1);
}

void *pxrInternal__aapl__pxrReserved__::HdFlatteningSceneIndex::GetPrim@<X0>(pxrInternal__aapl__pxrReserved__::HdFlatteningSceneIndex *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = sub_216BBE8E8((void *)this + 538, (unsigned int *)a2);
  uint64_t v7 = result;
  if (result && result[2])
  {
    uint64_t v8 = result[1];
    *a3 = v8;
    if ((v8 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *a3 &= 0xFFFFFFFFFFFFFFF8;
    }
    a3[1] = result[2];
    uint64_t v9 = result[3];
    a3[2] = v9;
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
    return result;
  }
  *(void *)&long long v23 = 0;
  BYTE8(v23) = 0;
  uint64_t v24 = 0;
  uint64_t v10 = (uint64_t *)((char *)this + 4344);
  if (sub_217201A28((uint64_t *)this + 543, (uint64_t)&v23, (unsigned int *)a2))
  {
    uint64_t v11 = v24;
    uint64_t v12 = *(void *)(v24 + 24);
    *a3 = v12;
    if ((v12 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *a3 &= 0xFFFFFFFFFFFFFFF8;
    }
    a3[1] = *(void *)(v11 + 32);
    uint64_t v13 = *(void *)(v11 + 40);
    a3[2] = v13;
    if (v13) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v24 = 0;
    int v14 = (uint64_t *)&v23;
    return sub_21685C048(v14);
  }
  uint64_t v24 = 0;
  sub_21685C048(&v23);
  uint64_t v15 = sub_2171E6834((uint64_t *)this + 14);
  uint64_t result = (void *)(*(uint64_t (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *))(*(void *)v15 + 16))(v15, a2);
  if (v7 || a3[1])
  {
    sub_217201AA8((uint64_t)this, a2, a3 + 1, &v23);
    long long v16 = v23;
    long long v23 = 0uLL;
    long long v17 = (std::__shared_weak_count *)a3[2];
    *(_OWORD *)(a3 + 1) = v16;
    if (v17)
    {
      sub_216784EC4(v17);
      if (*((void *)&v23 + 1)) {
        sub_216784EC4(*((std::__shared_weak_count **)&v23 + 1));
      }
    }
    sub_217202CC8((uint64_t)&v27, a2, a3);
    sub_217202D50((uint64_t)&v23, (uint64_t)&v27);
    char v18 = sub_21720326C(v10, 1, (unsigned int *)&v23, (uint64_t)&v23 + 8, 0, 0, (uint64_t (*)(uint64_t, unsigned int *, uint64_t))sub_217203C7C, 0);
    if (v25) {
      sub_216784EC4(v25);
    }
    if ((BYTE8(v23) & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v23 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v23 + 1);
    sub_21697C414(&v23);
    if (v30) {
      sub_216784EC4(v30);
    }
    if ((v28 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v27 + 1);
    uint64_t result = sub_21697C414(&v27);
    if ((v18 & 1) == 0)
    {
      uint64_t v27 = 0;
      LOBYTE(v2sub_2171F4108((uint64_t)this + 8) = 0;
      uint64_t v29 = 0;
      if ((sub_217201BF4(v10, (uint64_t)&v27, (unsigned int *)a2) & 1) != 0
        || (*(void *)&long long v23 = "hd/flatteningSceneIndex.cpp",
            *((void *)&v23 + 1) = "GetPrim",
            uint64_t v24 = 306,
            uint64_t v25 = (std::__shared_weak_count *)"virtual HdSceneIndexPrim pxrInternal__aapl__pxrReserved__::HdFlatteningSce"
                                              "neIndex::GetPrim(const SdfPath &) const",
            char v26 = 0,
            (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v23, "_recentPrims.find(accessor, primPath)", 0) & 1) != 0))
      {
        uint64_t v19 = v29;
        sub_2168D2318(a3, (void *)(v29 + 24));
        uint64_t v21 = *(void *)(v19 + 32);
        uint64_t v20 = *(void *)(v19 + 40);
        if (v20) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
        }
        long long v22 = (std::__shared_weak_count *)a3[2];
        a3[1] = v21;
        a3[2] = v20;
        if (v22) {
          sub_216784EC4(v22);
        }
      }
      uint64_t v29 = 0;
      int v14 = &v27;
      return sub_21685C048(v14);
    }
  }
  return result;
}

void sub_2172019C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  a17 = 0;
  sub_21685C048(&a15);
  sub_217201C74(v17);
  _Unwind_Resume(a1);
}

uint64_t sub_217201A28(uint64_t *a1, uint64_t a2, unsigned int *a3)
{
  if (*(void *)(a2 + 16))
  {
    sub_21685C080(a2);
    *(void *)(a2 + 16) = 0;
  }

  return sub_21720326C(a1, 0, a3, 0, a2, 0, (uint64_t (*)(uint64_t, unsigned int *, uint64_t))sub_217203584, 0);
}

void *sub_217201AA8@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = operator new(0xB0uLL);
  sub_217203A44((uint64_t)v8, a1, a2, a3);

  return sub_217203B6C(a4, (uint64_t)v8);
}

void sub_217201B18(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_217201B2C(uint64_t a1)
{
  long long v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    sub_216784EC4(v2);
  }
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));

  return sub_21697C414((_DWORD *)a1);
}

_DWORD *sub_217201B90(uint64_t a1)
{
  long long v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    sub_216784EC4(v2);
  }
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));

  return sub_21697C414((_DWORD *)a1);
}

uint64_t sub_217201BF4(uint64_t *a1, uint64_t a2, unsigned int *a3)
{
  if (*(void *)(a2 + 16))
  {
    sub_21685C080(a2);
    *(void *)(a2 + 16) = 0;
  }

  return sub_21720326C(a1, 0, a3, 0, a2, 1, (uint64_t (*)(uint64_t, unsigned int *, uint64_t))sub_217203584, 0);
}

void *sub_217201C74(void *a1)
{
  long long v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_216784EC4(v2);
  }
  if ((*a1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*a1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdFlatteningSceneIndex::GetChildPrimPaths(pxrInternal__aapl__pxrReserved__::HdFlatteningSceneIndex *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  long long v2 = *(uint64_t (**)(void))(*(void *)sub_2171E6834((uint64_t *)this + 14) + 24);

  return v2();
}

void **pxrInternal__aapl__pxrReserved__::HdFlatteningSceneIndex::_PrimsAdded(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::HdFlatteningSceneIndex *)MEMORY[0x270FA5388](a1, a2, a3);
  uint64_t v5 = v4;
  unint64_t v6 = (uint64_t *)v3;
  uint64_t v17 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::HdFlatteningSceneIndex::_ConsolidateRecentPrims(v3);
  uint64_t v16 = 0x1000000000;
  if (*(_DWORD *)(v5 + 260) >= 0x11u) {
    uint64_t v7 = *(unsigned int **)v5;
  }
  else {
    uint64_t v7 = (unsigned int *)v5;
  }
  uint64_t v8 = *(unsigned int *)(v5 + 256);
  if (v8)
  {
    uint64_t v9 = 16 * v8;
    do
    {
      pxrInternal__aapl__pxrReserved__::HdFlatteningSceneIndex::_DirtyHierarchy((uint64_t)v6, v7, v6 + 81, (uint64_t)(v6 + 24), v15);
      v7 += 4;
      v9 -= 16;
    }
    while (v9);
    uint64_t v10 = *(unsigned int *)(v5 + 256);
    uint64_t v11 = *(_DWORD *)(v5 + 260) >= 0x11u ? *(unsigned int **)v5 : (unsigned int *)v5;
    if (v10)
    {
      uint64_t v12 = 16 * v10;
      do
      {
        uint64_t v13 = sub_216BBE8E8(v6 + 538, v11);
        if (v13) {
          sub_217202118((pxrInternal__aapl__pxrReserved__ *)(v13 + 2));
        }
        v11 += 4;
        v12 -= 16;
      }
      while (v12);
    }
  }
  pxrInternal__aapl__pxrReserved__::HdSceneIndexBase::_SendPrimsAdded(v6, v5);
  if (v16) {
    pxrInternal__aapl__pxrReserved__::HdSceneIndexBase::_SendPrimsDirtied(v6, (uint64_t)v15);
  }
  return sub_2171AB018(v15);
}

void sub_217201E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::HdFlatteningSceneIndex::_ConsolidateRecentPrims(pxrInternal__aapl__pxrReserved__::HdFlatteningSceneIndex *this)
{
  long long v2 = (unint64_t *)((char *)this + 4344);
  unint64_t v3 = *((void *)this + 611);
  v16[0] = (char *)this + 4344;
  v16[1] = 0;
  v16[2] = (char *)this + 4872;
  uint64_t v17 = (unint64_t *)v3;
  uint64_t v4 = (unint64_t *)((char *)this + 4344);
  if (v3 <= 0x3F)
  {
    sub_216870B44((unint64_t)v16);
    unint64_t v3 = (unint64_t)v17;
    uint64_t v4 = (unint64_t *)v16[0];
  }
  if (v3) {
    BOOL v5 = 0;
  }
  else {
    BOOL v5 = v4 == v2;
  }
  if (!v5)
  {
    unint64_t v6 = (char *)this + 4304;
    while (1)
    {
      uint64_t v7 = sub_21720285C((uint64_t)v6, (_DWORD *)(v3 + 16));
      uint64_t v8 = (void *)(v3 + 24);
      uint64_t v9 = *(void *)v7;
      long long v10 = *(_OWORD *)(v7 + 8);
      *(void *)uint64_t v7 = 0;
      *((void *)v7 + 1) = 0;
      *((void *)v7 + 2) = 0;
      if ((char *)(v3 + 24) != v7)
      {
        *(void *)uint64_t v7 = *v8;
        *uint64_t v8 = 0;
      }
      long long v11 = *(_OWORD *)(v3 + 32);
      *(void *)(v3 + 32) = 0;
      *(void *)(v3 + 40) = 0;
      uint64_t v12 = (std::__shared_weak_count *)*((void *)v7 + 2);
      *(_OWORD *)(v7 + sub_2171F4108((uint64_t)this + 8) = v11;
      if (v12)
      {
        long long v15 = v10;
        sub_216784EC4(v12);
        long long v10 = v15;
      }
      if ((*v8 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      *(void *)(v3 + 24) = v9;
      uint64_t v13 = *(std::__shared_weak_count **)(v3 + 40);
      *(_OWORD *)(v3 + 32) = v10;
      if (v13) {
        sub_216784EC4(v13);
      }
      unint64_t v3 = *v17;
      uint64_t v17 = (unint64_t *)v3;
      if (!v3)
      {
        sub_216870B44((unint64_t)v16);
        unint64_t v3 = (unint64_t)v17;
        if (!v17 && (unint64_t *)v16[0] == v2) {
          break;
        }
      }
    }
  }
  return sub_217202918(v2);
}

void *pxrInternal__aapl__pxrReserved__::HdFlatteningSceneIndex::_DirtyHierarchy(uint64_t a1, unsigned int *a2, uint64_t *a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v16 = 0;
  long long v15 = sub_216BBE8E8((void *)(a1 + 4304), a2);
  unint64_t v9 = sub_216BBE950((uint64_t)&v15);
  uint64_t result = v15;
  int v14 = v15;
  while (result != (void *)v9)
  {
    long long v11 = (std::__shared_weak_count *)result[3];
    uint64_t v12 = result[2];
    uint64_t v13 = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_2172029E8((uint64_t)&v12, &v15);
    if (v13) {
      sub_216784EC4(v13);
    }
    if (v15)
    {
      if (!pxrInternal__aapl__pxrReserved__::HdFlatteningSceneIndex_Impl::_PrimLevelWrappingDataSource::PrimDirtied((uint64_t)v15, a3))
      {
        uint64_t result = (void *)sub_216BBE950((uint64_t)&v14);
        int v14 = result;
        if (v16)
        {
          sub_216784EC4(v16);
          uint64_t result = v14;
        }
        continue;
      }
      if (*(void *)v14 != *(void *)a2) {
        sub_217202A78(a5, v14, a4);
      }
    }
    if (v16) {
      sub_216784EC4(v16);
    }
    uint64_t result = (void *)*((void *)v14 + 5);
    if (!result) {
      uint64_t result = (void *)sub_216BBE950((uint64_t)&v14);
    }
    int v14 = result;
  }
  return result;
}

void sub_2172020FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_216784EC4(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_217202118(pxrInternal__aapl__pxrReserved__ *a1)
{
  uint64_t v1 = (std::__shared_weak_count *)*((void *)a1 + 1);
  uint64_t v2 = *(void *)a1;
  unint64_t v3 = v1;
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  if ((pxrInternal__aapl__pxrReserved__::Work_ShouldSynchronizeAsyncDestroyCalls(a1) & 1) == 0)
  {
    sub_217203D84((pxrInternal__aapl__pxrReserved__ *)&v2);
    uint64_t v1 = v3;
  }
  if (v1) {
    sub_216784EC4(v1);
  }
}

void sub_217202168(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *pxrInternal__aapl__pxrReserved__::HdFlatteningSceneIndex::_PrimsRemoved(uint64_t a1, uint64_t a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::HdFlatteningSceneIndex::_ConsolidateRecentPrims((pxrInternal__aapl__pxrReserved__::HdFlatteningSceneIndex *)a1);
  uint64_t v5 = *(unsigned int *)(a3 + 128);
  if (*(_DWORD *)(a3 + 132) >= 0x11u) {
    unint64_t v6 = *(unsigned int **)a3;
  }
  else {
    unint64_t v6 = (unsigned int *)a3;
  }
  if (v5)
  {
    uint64_t v7 = &v6[2 * v5];
    do
    {
      if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v6))
      {
        pxrInternal__aapl__pxrReserved__::Sdf_VisitPathTableInParallel(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 4304), (uint64_t)(*(void *)(a1 + 4312) - *(void *)(a1 + 4304)) >> 3, (uint64_t)&v13, (void (*)(uint64_t))sub_217204074);
        long long v13 = *(_OWORD *)(a1 + 4304);
        *(_OWORD *)(a1 + 4304) = 0u;
        uint64_t v8 = *(void *)(a1 + 4320);
        *(void *)(a1 + 4320) = 0;
        uint64_t v14 = v8;
        uint64_t v15 = 0;
        uint64_t v16 = *(void *)(a1 + 4336);
        *(_OWORD *)(a1 + 432sub_2171F4108((uint64_t)this + 8) = 0u;
        sub_217202EAC((uint64_t *)&v13);
      }
      else
      {
        *((void *)&v13 + 1) = 0;
        *(void *)&long long v13 = sub_216BBE8E8((void *)(a1 + 4304), v6);
        unint64_t v9 = sub_216BBE950((uint64_t)&v13);
        unint64_t v10 = v13;
        *((void *)&v13 + 1) = v9;
        unint64_t v12 = v13;
        if (v9 != (void)v13)
        {
          do
          {
            sub_217202118((pxrInternal__aapl__pxrReserved__ *)(v10 + 16));
            unint64_t v10 = *(void *)(v12 + 40);
            if (!v10) {
              unint64_t v10 = sub_216BBE950((uint64_t)&v12);
            }
            unint64_t v12 = v10;
          }
          while (*((void *)&v13 + 1) != v10);
          if ((void)v13 != v10) {
            sub_2172022EC((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 4304), (uint64_t *)&v13);
          }
        }
      }
      v6 += 2;
    }
    while (v6 != v7);
  }
  return pxrInternal__aapl__pxrReserved__::HdSceneIndexBase::_SendPrimsRemoved((uint64_t *)a1, a3);
}

void sub_2172022EC(pxrInternal__aapl__pxrReserved__::SdfPath *a1, uint64_t *a2)
{
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::SdfPath *)*a2;
  sub_2172040EC(a1, *a2);
  sub_217204140(a1, v3);

  sub_2172041DC(a1, (unsigned int *)v3);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdFlatteningSceneIndex::_PrimDirtied(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = MEMORY[0x270FA5388](a1, a2, a3);
  uint64_t v29 = v5;
  uint64x2_t v30 = v4;
  unint64_t v6 = (void *)v3;
  uint64_t v48 = *MEMORY[0x263EF8340];
  uint64_t v7 = (void *)(v3 + 152);
  uint64_t v8 = (uint64_t *)(v3 + 144);
  sub_217204324((char *)v46, (*(void *)(v3 + 152) - *(void *)(v3 + 144)) >> 3);
  uint64_t v45 = 0x800000000;
  uint64_t v9 = *v8;
  if (*v7 != *v8)
  {
    unint64_t v10 = 0;
    long long v11 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *)(v30 + 2);
    do
    {
      pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)v43, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v9 + 8 * v10));
      if (pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::Intersects(v11, (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)v43))
      {
        if (v47 >= 9) {
          unint64_t v12 = (uint64_t *)v46[0];
        }
        else {
          unint64_t v12 = v46;
        }
        BOOL v13 = pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::Contains(v11, (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)v43);
        uint64_t v14 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *)&v12[57 * v10];
        if (v13)
        {
          uint64_t v15 = pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::UniversalSet((pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *)v13);
          if (v14 != (pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *)v15)
          {
            if (*(_DWORD *)(v15 + 452) >= 9u) {
              uint64_t v16 = *(void *)v15;
            }
            else {
              uint64_t v16 = v15;
            }
            sub_2171E02B0((uint64_t)v14, v16, v16 + 56 * *(unsigned int *)(v15 + 448));
          }
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::Intersection(v11, (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)v43, (uint64_t)&v38);
          long long v35 = v38;
          uint64_t v36 = v39;
          sub_2171AA848(v37, (uint64_t)v40);
          long long v32 = *(_OWORD *)&v40[56];
          uint64_t v33 = v41;
          sub_2171AA848(v34, (uint64_t)v42);
          while (*((void *)&v35 + 1) != *((void *)&v32 + 1))
          {
            uint64_t v17 = pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::IntersectionIterator::operator*((uint64_t)&v35);
            pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::RemoveFirstElement((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)v17, (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)v31);
            pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::insert(v14, (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)v31);
            sub_217199B64((uint64_t)v31);
            pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::IntersectionIterator::operator++((uint64_t)&v35);
          }
          sub_217199B64((uint64_t)v34);
          sub_217199B64((uint64_t)v37);
          sub_217199B64((uint64_t)v42);
          sub_217199B64((uint64_t)v40);
          uint64_t v18 = *(void *)(v6[21] + 16 * v10);
          uint64_t v19 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)(*(uint64_t (**)(uint64_t, pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *))(*(void *)v18 + 8))(v18, v14);
          uint64_t v20 = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::EmptyLocator(v19);
          if (!pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::Contains(v14, v20))
          {
            uint64_t v21 = (atomic_uint ***)pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::begin(v14);
            uint64_t v22 = pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::end(v14);
            while (v21 != (atomic_uint ***)v22)
            {
              pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::Append((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)v43, v21, &v38);
              pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::insert((pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *)v44, (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&v38);
              sub_217199B64((uint64_t)&v38);
              v21 += 7;
            }
            goto LABEL_19;
          }
        }
        pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::insert((pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *)v44, (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)v43);
      }
LABEL_19:
      sub_217199B64((uint64_t)v43);
      ++v10;
      uint64_t v9 = v6[18];
    }
    while (v10 < (v6[19] - v9) >> 3);
  }
  IsEmpty = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::IsEmpty((pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *)v44);
  if ((IsEmpty & 1) == 0) {
    IsEmpty = (pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdFlatteningSceneIndex::_DirtyHierarchy((uint64_t)v6, v30, v46, (uint64_t)v44, v29);
  }
  uint64_t v24 = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::EmptyLocator(IsEmpty);
  if (pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::Contains((pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *)(v30 + 2), v24))
  {
    uint64_t v25 = sub_216BBE8E8(v6 + 538, v30);
    if (v25)
    {
      uint64_t v27 = v25[2];
      char v26 = (pxrInternal__aapl__pxrReserved__ *)(v25 + 2);
      if (v27) {
        sub_217202118(v26);
      }
    }
  }
  sub_2171AA914((uint64_t)v44);
  return sub_217202E1C((uint64_t)v46);
}

void sub_21720269C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_2171AA914((uint64_t)&a66);
  sub_217202E1C((uint64_t)&STACK[0x390]);
  _Unwind_Resume(a1);
}

void **pxrInternal__aapl__pxrReserved__::HdFlatteningSceneIndex::_PrimsDirtied(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::HdFlatteningSceneIndex *)MEMORY[0x270FA5388](a1, a2, a3);
  uint64_t v5 = v4;
  unint64_t v6 = (uint64_t *)v3;
  uint64_t v13 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::HdFlatteningSceneIndex::_ConsolidateRecentPrims(v3);
  uint64_t v12 = 0x1000000000;
  if (*(_DWORD *)(v5 + 7428) >= 0x11u) {
    uint64_t v7 = *(void *)v5;
  }
  else {
    uint64_t v7 = v5;
  }
  unsigned int v8 = *(_DWORD *)(v5 + 7424);
  if (v8)
  {
    uint64_t v9 = 464 * v8;
    do
    {
      pxrInternal__aapl__pxrReserved__::HdFlatteningSceneIndex::_PrimDirtied((uint64_t)v6, v7, (uint64_t)v11);
      v7 += 464;
      v9 -= 464;
    }
    while (v9);
  }
  pxrInternal__aapl__pxrReserved__::HdSceneIndexBase::_SendPrimsDirtied(v6, v5);
  if (v12) {
    pxrInternal__aapl__pxrReserved__::HdSceneIndexBase::_SendPrimsDirtied(v6, (uint64_t)v11);
  }
  return sub_2171AB018(v11);
}

void sub_217202844(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

char *sub_21720285C(uint64_t a1, _DWORD *a2)
{
  sub_216981010(&v6, a2);
  sub_21698105C(&v7, a2 + 1);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  unint64_t v10 = 0;
  uint64_t v4 = sub_2172043A4(a1, &v6);
  if (v10) {
    sub_216784EC4(v10);
  }
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  return (char *)v4 + 8;
}

void sub_217202904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_217202918(unint64_t *a1)
{
  unint64_t v2 = *a1;
  __dmb(0xBu);
  __dmb(0xBu);
  a1[65] = 0;
  unint64_t v3 = sub_216851020(v2);
  do
  {
    unint64_t v4 = 0;
    unint64_t v5 = v3;
    unint64_t v6 = a1[v3 + 1];
    if (v3-- > 1) {
      char v8 = v5;
    }
    else {
      char v8 = 1;
    }
    do
    {
      unint64_t v9 = v6 + 24 * v4;
      unint64_t v12 = *(void *)(v9 + 16);
      long long v11 = (void *)(v9 + 16);
      unint64_t v10 = (void *)v12;
      if (v12 >= 0x40)
      {
        do
        {
          *long long v11 = *v10;
          sub_217203724((uint64_t)a1, (uint64_t)v10);
          unint64_t v10 = (void *)*v11;
        }
        while (*v11 > 0x3FuLL);
      }
      ++v4;
    }
    while (!(v4 >> v8));
    uint64_t result = sub_2172048D0((uint64_t)a1, v5);
  }
  while (v5);
  __dmb(0xBu);
  *a1 = 1;
  return result;
}

void *sub_2172029E8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = *(void **)a1;
  if (result
  {
    uint64_t v5 = *(void *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

_DWORD *sub_217202A78(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  unsigned int v6 = a1[1856];
  unsigned int v7 = a1[1857];
  if (v6 == v7)
  {
    sub_2171E9D98(a1, v6 + (v6 >> 1) + 1);
    unsigned int v7 = a1[1857];
  }
  char v8 = a1;
  if (v7 >= 0x11) {
    char v8 = *(_DWORD **)a1;
  }
  return sub_2171AA6C8(&v8[116 * a1[1856]++], a2, a3);
}

void sub_217202B00(uint64_t a1)
{
  *(void *)a1 = &unk_26C780E38;
  sub_2171C0D90(a1 + 40);
  unint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    sub_216784EC4(v2);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_21697C414((_DWORD *)(a1 + 16));

  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase((pxrInternal__aapl__pxrReserved__::HdDataSourceBase *)a1);
}

void sub_217202B74(uint64_t a1)
{
  *(void *)a1 = &unk_26C780E38;
  sub_2171C0D90(a1 + 40);
  unint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    sub_216784EC4(v2);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_21697C414((_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase((pxrInternal__aapl__pxrReserved__::HdDataSourceBase *)a1);

  operator delete(v3);
}

BOOL sub_217202BEC(uint64_t *a1, void *a2, uint64_t *a3)
{
  sp_mut = std::__get_sp_mut(a1);
  std::__sp_mut::lock(sp_mut);
  unsigned int v7 = (std::__shared_weak_count *)a1[1];
  char v8 = (std::__shared_weak_count *)a2[1];
  if (v7 == v8)
  {
    *a1 = 0;
    a1[1] = 0;
    uint64_t v12 = *a3;
    uint64_t v13 = a3[1];
    if (v13)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
      uint64_t v14 = (std::__shared_weak_count *)a1[1];
      *a1 = v12;
      a1[1] = v13;
      if (v14) {
        sub_216784EC4(v14);
      }
    }
    else
    {
      *a1 = v12;
      a1[1] = 0;
    }
    uint64_t v15 = v7;
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    uint64_t v9 = *a1;
    uint64_t v10 = a1[1];
    if (v10)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
      long long v11 = (std::__shared_weak_count *)a2[1];
      *a2 = v9;
      a2[1] = v10;
      if (v11) {
        sub_216784EC4(v11);
      }
    }
    else
    {
      *a2 = v9;
      a2[1] = 0;
    }
    uint64_t v15 = v8;
  }
  std::__sp_mut::unlock(sp_mut);
  if (v15) {
    sub_216784EC4(v15);
  }
  return v7 == v8;
}

uint64_t sub_217202CC8(uint64_t a1, _DWORD *a2, uint64_t *a3)
{
  unsigned int v6 = sub_216981010((_DWORD *)a1, a2);
  sub_21698105C(v6 + 1, a2 + 1);
  uint64_t v7 = *a3;
  *(void *)(a1 + sub_2171F4108((uint64_t)this + 8) = *a3;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 8) &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v8 = a3[2];
  *(void *)(a1 + 16) = a3[1];
  *(void *)(a1 + 24) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

uint64_t sub_217202D50(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_21697D878((_DWORD *)a1, (_DWORD *)a2);
  sub_21697D8B4(v4 + 1, (_DWORD *)(a2 + 4));
  *(void *)(a1 + sub_2171F4108((uint64_t)this + 8) = *(void *)(a2 + 8);
  *(void *)(a2 + sub_2171F4108((uint64_t)this + 8) = 0;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  return a1;
}

uint64_t sub_217202DA0(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    uint64_t v5 = a2;
    do
    {
      sub_2168D4AAC(a1, v5, v5);
      ++v5;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_217202E08(_Unwind_Exception *a1)
{
  sub_2168C08A0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_217202E1C(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 3652) >= 9u) {
    free(*(void **)a1);
  }
  return a1;
}

uint64_t sub_217202E5C(uint64_t result)
{
  uint64_t v1 = result;
  if (*(_DWORD *)(result + 3652) >= 9u) {
    uint64_t result = *(void *)result;
  }
  unsigned int v2 = *(_DWORD *)(v1 + 3648);
  if (v2)
  {
    uint64_t v3 = 456 * v2;
    do
    {
      uint64_t result = sub_2171AA914(result) + 456;
      v3 -= 456;
    }
    while (v3);
  }
  return result;
}

uint64_t *sub_217202EAC(uint64_t *a1)
{
  sub_217202EE4(a1);
  unsigned int v2 = (void *)*a1;
  if (*a1)
  {
    a1[1] = (uint64_t)v2;
    operator delete(v2);
  }
  return a1;
}

void sub_217202EE4(uint64_t *a1)
{
  uint64_t v2 = a1[1] - *a1;
  if (v2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = v2 >> 3;
    do
    {
      uint64_t v5 = *a1;
      uint64_t v6 = *(void *)(*a1 + 8 * v3);
      if (v6)
      {
        do
        {
          uint64_t v7 = *(std::__shared_weak_count **)(v6 + 24);
          uint64_t v8 = *(void *)(v6 + 32);
          if (v7) {
            sub_216784EC4(v7);
          }
          uint64_t v9 = *(void *)(v6 + 8);
          if ((v9 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v6 + 4));
          uint64_t v10 = sub_21697C414((_DWORD *)v6);
          operator delete(v10);
          uint64_t v6 = v8;
        }
        while (v8);
        uint64_t v5 = *a1;
      }
      *(void *)(v5 + 8 * v3++) = 0;
    }
    while (v3 != v4);
  }
  a1[3] = 0;
}

uint64_t sub_217202F90(uint64_t *a1, void *a2)
{
  uint64_t result = sub_217203008((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_217203008(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  sub_21720309C((uint64_t)v12);
  return v10;
}

uint64_t sub_21720309C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_216787FE4(a1);
  }
  return a1;
}

_DWORD *sub_2172030D4(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(_DWORD *)(a1 + 3648);
  unsigned int v5 = *(_DWORD *)(a1 + 3652);
  if (v4 == v5)
  {
    sub_21720314C(a1, v4 + (v4 >> 1) + 1);
    unsigned int v5 = *(_DWORD *)(a1 + 3652);
  }
  uint64_t v6 = a1;
  if (v5 >= 9) {
    uint64_t v6 = *(void *)a1;
  }
  uint64_t result = sub_2171AA72C((_DWORD *)(v6 + 456 * *(unsigned int *)(a1 + 3648)), a2);
  ++*(_DWORD *)(a1 + 3648);
  return result;
}

void sub_21720314C(uint64_t a1, unsigned int a2)
{
  unsigned int v4 = malloc(456 * a2);
  unsigned int v5 = (void *)a1;
  if (*(_DWORD *)(a1 + 3652) >= 9u) {
    unsigned int v5 = *(void **)a1;
  }
  sub_2172031D4((uint64_t)v5, (uint64_t)v5 + 456 * *(unsigned int *)(a1 + 3648), (uint64_t)v4);
  sub_217202E5C(a1);
  if (*(_DWORD *)(a1 + 3652) >= 9u) {
    free(*(void **)a1);
  }
  *(void *)a1 = v4;
  *(_DWORD *)(a1 + 3652) = a2;
}

uint64_t sub_2172031D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = 0;
    do
    {
      sub_2171E9F04(a3 + v6, a1 + v6);
      v6 += 456;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

void sub_217203234(void *a1)
{
  __cxa_begin_catch(a1);
  for (; v2; v2 -= 456)
  {
    sub_2171AA914(v1);
    v1 += 456;
  }
  __cxa_rethrow();
}

void sub_217203258(_Unwind_Exception *a1)
{
}

uint64_t sub_21720326C(uint64_t *a1, int a2, unsigned int *a3, uint64_t a4, uint64_t a5, int a6, uint64_t (*a7)(uint64_t, unsigned int *, uint64_t), void *a8)
{
  unint64_t v29 = 0;
  uint64_t v13 = bswap64(0x9E3779B97F4A7C55* (a3[1]+ ((a3[1] + (unint64_t)*a3 + (a3[1] + (unint64_t)*a3) * (a3[1] + (unint64_t)*a3)) >> 1)));
  uint64_t v14 = *a1;
  __dmb(0xBu);
  uint64_t v28 = (uint64_t)(a1 + 72);
  while (1)
  {
    sub_217203758((uint64_t)&v31, (uint64_t)a1, v14 & v13, 0);
    long long v15 = (void *)(v33 + 16);
    do
      long long v15 = (void *)*v15;
    while ((unint64_t)v15 >= 0x40 && *(void *)a3 != v15[2]);
    if (a2) {
      break;
    }
    if (v15)
    {
      uint64_t v16 = 1;
LABEL_10:
      uint64_t v17 = (uint64_t)a8;
      if (!a5) {
        goto LABEL_46;
      }
      goto LABEL_11;
    }
    unint64_t v24 = *a1;
    __dmb(0xBu);
    if (v14 == v24 || !sub_21686CF40((uint64_t)a1, v13, v14, v24))
    {
      sub_21685C048(&v31);
      return 0;
    }
LABEL_31:
    sub_21685C048(&v31);
    uint64_t v14 = v24;
  }
  if (v15)
  {
LABEL_7:
    uint64_t v16 = 0;
    goto LABEL_10;
  }
  if (!a8) {
    a8 = (void *)a7(v28, a3, a4);
  }
  if (!v32)
  {
    char v32 = 1;
    if ((tbb::spin_rw_mutex_v3::internal_upgrade((atomic_ullong *)v31) & 1) == 0)
    {
      long long v15 = (void *)(v33 + 16);
      while (1)
      {
        long long v15 = (void *)*v15;
        if ((unint64_t)v15 < 0x40) {
          break;
        }
        if (*(void *)a3 == v15[2])
        {
          if (!v32) {
            goto LABEL_7;
          }
          uint64_t v16 = 0;
          atomic_fetch_add((atomic_ullong *volatile)v31, 3uLL);
          char v32 = 0;
          goto LABEL_10;
        }
      }
    }
  }
  unint64_t v24 = *a1;
  __dmb(0xBu);
  if (v14 != v24)
  {
    if (!sub_21686CF40((uint64_t)a1, v13, v14, v24)) {
      goto LABEL_33;
    }
    goto LABEL_31;
  }
  unint64_t v24 = v14;
LABEL_33:
  unint64_t v29 = sub_21686C9CC((uint64_t)a1, v33, a8, v24);
  uint64_t v17 = 0;
  uint64_t v16 = 1;
  long long v15 = a8;
  if (!a5)
  {
LABEL_46:
    sub_21685C048(&v31);
    goto LABEL_41;
  }
LABEL_11:
  if ((sub_21686CAA4(a5, v15 + 1, a6) & 1) == 0)
  {
    sched_yield();
    int v18 = 2;
    while ((sub_21686CAA4(a5, v15 + 1, a6) & 1) == 0)
    {
      sched_yield();
      BOOL v19 = v18 < 16;
      v18 *= 2;
      if (!v19)
      {
        uint64_t v20 = (atomic_ullong *)v31;
        uint64x2_t v31 = 0;
        if (v32)
        {
LABEL_16:
          atomic_ullong v21 = *v20;
          unint64_t v22 = *v20 & 0xFFFFFFFFFFFFFFFCLL;
          while (1)
          {
            atomic_ullong v23 = v21;
            atomic_compare_exchange_strong(v20, (unint64_t *)&v23, v22);
            if (v23 == v21) {
              break;
            }
            if (atomic_fetch_add_explicit(v20, 0, memory_order_relaxed) != v21)
            {
              sched_yield();
              goto LABEL_16;
            }
          }
        }
        else
        {
          atomic_fetch_add(v20, 0xFFFFFFFFFFFFFFFCLL);
        }
        sched_yield();
        unint64_t v24 = *a1;
        __dmb(0xBu);
        a8 = (void *)v17;
        goto LABEL_31;
      }
    }
  }
  sub_21685C048(&v31);
  *(void *)(a5 + 16) = v15;
  *(void *)(a5 + 24) = v13;
LABEL_41:
  if (v29) {
    sub_21720358C(a1, v29, v28, 0);
  }
  if (v17) {
    sub_217203724((uint64_t)a1, v17);
  }
  return v16;
}

void sub_217203564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_21685C048((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_217203584()
{
  return 0;
}

void sub_21720358C(uint64_t *a1, unint64_t a2, uint64_t a3, char a4)
{
  if (a2 < 8)
  {
    long long v9 = (char *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x17D0);
    uint64_t v10 = v9;
    if (a4)
    {
      bzero(v9, 0x17D0uLL);
    }
    else
    {
      uint64_t v14 = -6096;
      do
      {
        long long v15 = &v9[v14];
        *((void *)v15 + 763) = 0;
        *((void *)v15 + 764) = 3;
        v14 += 24;
      }
      while (v14);
    }
    unint64_t v16 = 0;
    int64x2_t v17 = (int64x2_t)xmmword_217411D20;
    int v18 = v10 - 48;
    uint64x2_t v19 = (uint64x2_t)vdupq_n_s64(7uLL);
    uint64x2_t v20 = (uint64x2_t)vdupq_n_s64(1uLL);
    int8x16_t v21 = (int8x16_t)vdupq_n_s64(0x7FFFFFFFFFFFFFFEuLL);
    int64x2_t v22 = vdupq_n_s64(2uLL);
    uint64_t v13 = 255;
    do
    {
      uint64x2_t v23 = (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v16), (int8x16_t)xmmword_217411D30);
      int8x16_t v24 = vandq_s8((int8x16_t)vshlq_u64(v20, (uint64x2_t)v17), v21);
      if (vmovn_s64((int64x2_t)vcgtq_u64(v19, v23)).u8[0]) {
        a1[v16 + 2] = (uint64_t)&v18[24 * v24.i64[0]];
      }
      if (vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(7uLL), v23)).i32[1]) {
        a1[v16 + 3] = (uint64_t)&v18[24 * v24.i64[1]];
      }
      v16 += 2;
      int64x2_t v17 = vaddq_s64(v17, v22);
    }
    while (v16 != 8);
  }
  else
  {
    uint64_t v7 = (void *)tbb::internal::allocate_via_handler_v3((tbb::internal *)(24 << a2));
    uint64_t v8 = v7;
    if (a4)
    {
      bzero(v7, 24 << a2);
    }
    else
    {
      uint64_t v11 = 1 << a2;
      uint64_t v12 = v7 + 2;
      do
      {
        *(v12 - 1) = 0;
        void *v12 = 3;
        v12 += 3;
        --v11;
      }
      while (v11);
    }
    a1[a2 + 1] = (uint64_t)v8;
    uint64_t v13 = (2 << a2) - 1;
  }
  __dmb(0xBu);
  *a1 = v13;
}

void sub_217203714(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8 * v2 + sub_2171F4108((uint64_t)this + 8) = 0;
  _Unwind_Resume(a1);
}

uint64_t sub_217203724(uint64_t a1, uint64_t a2)
{
  sub_2172039E0(a2 + 16);
  return tbb::internal::deallocate_via_handler_v3(a2, v3);
}

uint64_t sub_217203758(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + sub_2171F4108((uint64_t)this + 8) = 0;
  unint64_t v8 = sub_21686CD68(a2, a3);
  *(void *)(a1 + 16) = v8;
  uint64_t v9 = *(void *)(v8 + 16);
  __dmb(0xBu);
  if (v9 == 3 {
    && (uint64_t v10 = (atomic_ullong *)(*(void *)(a1 + 16) + 8),
  }
        *(unsigned char *)(a1 + sub_2171F4108((uint64_t)this + 8) = 1,
        tbb::spin_rw_mutex_v3::internal_try_acquire_writer(v10)))
  {
    *(void *)a1 = v10;
    uint64_t v11 = *(void *)(a1 + 16);
    if (*(void *)(v11 + 16) == 3) {
      sub_217203834(a2, v11, a3);
    }
  }
  else
  {
    uint64_t v12 = (atomic_ullong *)(*(void *)(a1 + 16) + 8);
    *(unsigned char *)(a1 + sub_2171F4108((uint64_t)this + 8) = a4;
    *(void *)a1 = v12;
    if (a4) {
      tbb::spin_rw_mutex_v3::internal_acquire_writer(v12);
    }
    else {
      tbb::spin_rw_mutex_v3::internal_acquire_reader(v12);
    }
  }
  return a1;
}

void sub_217203820(_Unwind_Exception *a1)
{
  sub_21685C048(v1);
  _Unwind_Resume(a1);
}

void *sub_217203834(uint64_t a1, uint64_t a2, unint64_t a3)
{
  __dmb(0xBu);
  *(void *)(a2 + 16) = 0;
  if (a3)
  {
    unint64_t v5 = HIDWORD(a3);
    if (!HIDWORD(a3)) {
      unint64_t v5 = a3;
    }
    char v6 = 32 * (HIDWORD(a3) != 0);
    if (v5 >= 0x10000)
    {
      v5 >>= 16;
      char v6 = (32 * (HIDWORD(a3) != 0)) | 0x10;
    }
    if (v5 >= 0x100)
    {
      v5 >>= 8;
      v6 |= 8u;
    }
    if (v5 >= 0x10)
    {
      v5 >>= 4;
      v6 |= 4u;
    }
    BOOL v7 = v5 >= 4;
    if (v5 >= 4) {
      LODWORD(v5) = v5 >> 2;
    }
    unsigned int v8 = (v5 >> 1) & 1;
    if (v7) {
      v6 += 2;
    }
    char v9 = v8 + v6;
  }
  else
  {
    char v9 = -1;
  }
  uint64_t v10 = ~(-1 << v9);
  sub_217203758(&v15, a1, v10 & a3, 0);
  uint64_t v11 = (unint64_t *)(v17 + 16);
  unint64_t v12 = *(void *)(v17 + 16);
  __dmb(0xBu);
  if (v12 >= 0x40)
  {
    uint64_t v13 = (2 * v10) | 1;
    while ((bswap64(0x9E3779B97F4A7C55* (*(unsigned int *)(v12 + 20)+ ((*(unsigned int *)(v12 + 20)+ (unint64_t)*(unsigned int *)(v12 + 16)+ (*(unsigned int *)(v12 + 20) + (unint64_t)*(unsigned int *)(v12 + 16))* (*(unsigned int *)(v12 + 20) + (unint64_t)*(unsigned int *)(v12 + 16))) >> 1))) & v13) == a3)
    {
      if (v16 || (char v16 = 1, (tbb::spin_rw_mutex_v3::internal_upgrade((atomic_ullong *)v15) & 1) != 0))
      {
        *uint64_t v11 = *(void *)v12;
        *(void *)unint64_t v12 = *(void *)(a2 + 16);
        *(void *)(a2 + 16) = v12;
LABEL_24:
        unint64_t v12 = *v11;
        if (*v11 <= 0x3F) {
          return sub_21685C048(&v15);
        }
      }
      else
      {
        uint64_t v11 = (unint64_t *)(v17 + 16);
        unint64_t v12 = *(void *)(v17 + 16);
        __dmb(0xBu);
        if (v12 < 0x40) {
          return sub_21685C048(&v15);
        }
      }
    }
    uint64_t v11 = (unint64_t *)v12;
    goto LABEL_24;
  }
  return sub_21685C048(&v15);
}

void sub_2172039CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21685C048((uint64_t *)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_2172039E0(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    sub_216784EC4(v2);
  }
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));

  return sub_21697C414((_DWORD *)a1);
}

uint64_t sub_217203A44(uint64_t a1, uint64_t a2, _DWORD *a3, void *a4)
{
  *(void *)a1 = &unk_26C780E38;
  *(void *)(a1 + sub_2171F4108((uint64_t)this + 8) = a2;
  sub_216981010((_DWORD *)(a1 + 16), a3);
  sub_21698105C((_DWORD *)(a1 + 20), a3 + 1);
  uint64_t v7 = a4[1];
  *(void *)(a1 + 24) = *a4;
  *(void *)(a1 + 32) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  sub_217203B08((_DWORD *)(a1 + 40), (*(void *)(*(void *)(a1 + 8) + 152) - *(void *)(*(void *)(a1 + 8) + 144)) >> 3);
  return a1;
}

void sub_217203AE0(_Unwind_Exception *a1)
{
  unsigned int v4 = (std::__shared_weak_count *)*((void *)v1 + 4);
  if (v4) {
    sub_216784EC4(v4);
  }
  sub_21697B754(v2);
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_217203B08(_DWORD *a1, unsigned int a2)
{
  uint64_t v3 = a1;
  a1[33] = 8;
  if (a2 >= 9)
  {
    a1 = malloc(16 * a2);
    *(void *)uint64_t v3 = a1;
    v3[32] = a2;
    v3[33] = a2;
LABEL_4:
    bzero(a1, 16 * a2);
    return v3;
  }
  a1[32] = a2;
  if (a2) {
    goto LABEL_4;
  }
  return v3;
}

void *sub_217203B6C(void *a1, uint64_t a2)
{
  *a1 = a2;
  unsigned int v4 = operator new(0x20uLL);
  void *v4 = &unk_26C780E98;
  v4[1] = 0;
  _OWORD v4[2] = 0;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_217203BC4(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_2173254E8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_217203BE0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_217203C08(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_217203C38(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C780EE8)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

_OWORD *sub_217203C80(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  char v6 = (_OWORD *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x30);
  v9[1] = a1;
  void v6[2] = 0u;
  _OWORD *v6 = 0u;
  v6[1] = 0u;
  sub_217203CF4((uint64_t)(v6 + 1), a2, a3);
  v9[0] = 0;
  sub_217203D50(v9, v7);
  return v6;
}

uint64_t sub_217203CF4(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  char v6 = sub_216981010((_DWORD *)a1, a2);
  sub_21698105C(v6 + 1, a2 + 1);
  *(void *)(a1 + sub_2171F4108((uint64_t)this + 8) = *(void *)a3;
  *(void *)a3 = 0;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a3 + 8);
  *(void *)(a3 + sub_2171F4108((uint64_t)this + 8) = 0;
  *(void *)(a3 + 16) = 0;
  return a1;
}

uint64_t *sub_217203D50(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  if (v3) {
    tbb::internal::deallocate_via_handler_v3(v3, a2);
  }
  return a1;
}

void sub_217203D84(pxrInternal__aapl__pxrReserved__ *a1)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)a1 + 1);
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  BOOL HasConcurrency = pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(a1);
  if (HasConcurrency)
  {
    uint64_t DetachedDispatcher = pxrInternal__aapl__pxrReserved__::Work_GetDetachedDispatcher((pxrInternal__aapl__pxrReserved__ *)HasConcurrency);
    uint64_t v5 = *(void *)(DetachedDispatcher + 256);
    v8[0] = 0;
    v8[1] = v5;
    char v6 = (void *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v8, 0x20uLL);
    *((unsigned char *)v6 - 11) = 1;
    void *v6 = &unk_26C780F10;
    v6[1] = v2;
    void v6[2] = v1;
    void v6[3] = DetachedDispatcher + 264;
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__ *)(**(uint64_t (***)(void, void *))*(v6 - 5))(*(v6 - 5), v6);
    pxrInternal__aapl__pxrReserved__::Work_EnsureDetachedTaskProgress(v7);
  }
  else
  {
    sub_217203E88();
    if (v1) {
      sub_216784EC4(v1);
    }
  }
}

void sub_217203E70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_217203E88()
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v3);
  uint64_t v0 = (atomic_ullong *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v0) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  uint64_t v1 = sub_216862604(&v3, 0);
  char v4 = 0;
  uint64_t v2 = (void *)sub_2168520EC(v0 + 19, &v4);
  if (v2 != v1) {
    pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(v0, v1, v2);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v3);
}

void sub_217203F14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_217203F28(void *a1)
{
  *a1 = &unk_26C780F10;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_216784EC4(v2);
  }
  return a1;
}

void sub_217203F74(void *__p)
{
  *std::string __p = &unk_26C780F10;
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    sub_216784EC4(v2);
  }

  operator delete(__p);
}

uint64_t sub_217203FD0(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  sub_217203E88();
  unint64_t v2 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v2) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance();
  }
  unint64_t v3 = v6;
  unint64_t v4 = atomic_load((unint64_t *)(v2 + 144));
  if (v3 < v4
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6, (atomic_ullong *)v2))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v6, *(void *)(a1 + 24));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  return 0;
}

void sub_217204060(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

void sub_217204074(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    do
    {
      unint64_t v4 = *(std::__shared_weak_count **)(v3 + 24);
      uint64_t v5 = *(void *)(v3 + 32);
      if (v4) {
        sub_216784EC4(v4);
      }
      uint64_t v6 = *(void *)(v3 + 8);
      if ((v6 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v3 + 4));
      uint64_t v7 = sub_21697C414((_DWORD *)v3);
      operator delete(v7);
      uint64_t v3 = v5;
    }
    while (v5);
  }
  *a2 = 0;
}

void sub_2172040EC(void *a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned int **)(a2 + 40);
  if (v2)
  {
    sub_2172042AC(a1, *(void *)(a2 + 40));
    sub_2172041DC(a1, v2);
  }
}

void *sub_217204140(pxrInternal__aapl__pxrReserved__::SdfPath *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t result = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(a1);
  if (*(void *)a2 != *result)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2, &v6);
    uint64_t v5 = sub_216BBE8E8(a1, &v6);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
    sub_21697C414(&v6);
    return (void *)sub_216BBEBAC((uint64_t)v5, (uint64_t)a2);
  }
  return result;
}

void sub_2172041C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

void sub_2172041DC(void *a1, unsigned int *a2)
{
  uint64_t v3 = a2 + 1;
  unint64_t v4 = (void *)(*a1
                + 8
                * (bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2)* (a2[1] + (unint64_t)*a2)) >> 1))) & a1[4]));
  do
  {
    uint64_t v5 = v4;
    unsigned int v6 = (unsigned int *)*v4;
    unint64_t v4 = (void *)(*v4 + 32);
  }
  while (v6 != a2);
  --a1[3];
  void *v5 = *((void *)a2 + 4);
  int v7 = (std::__shared_weak_count *)*((void *)a2 + 3);
  if (v7) {
    sub_216784EC4(v7);
  }
  uint64_t v8 = *((void *)a2 + 1);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v3);
  char v9 = sub_21697C414(a2);

  operator delete(v9);
}

void sub_2172042AC(void *a1, uint64_t a2)
{
  ((void (*)(void))sub_2172040EC)();
  uint64_t v4 = *(void *)(a2 + 48);
  unint64_t v5 = v4 & 0xFFFFFFFFFFFFFFF8;
  if ((v4 & 7) != 0 && v5 != 0)
  {
    do
    {
      uint64_t v7 = *(void *)(v5 + 48);
      if ((v7 & 7) != 0) {
        unint64_t v8 = v7 & 0xFFFFFFFFFFFFFFF8;
      }
      else {
        unint64_t v8 = 0;
      }
      sub_2172040EC(a1, v5);
      sub_2172041DC(a1, (unsigned int *)v5);
      unint64_t v5 = v8;
    }
    while (v8);
  }
}

char *sub_217204324(char *a1, unsigned int a2)
{
  uint64_t v3 = a1;
  *((_DWORD *)a1 + 913) = 8;
  if (a2 < 9)
  {
    *((_DWORD *)a1 + 912) = a2;
    if (!a2) {
      return v3;
    }
  }
  else
  {
    a1 = (char *)malloc(456 * a2);
    *(void *)uint64_t v3 = a1;
    *((_DWORD *)v3 + 913) = a2;
    *((_DWORD *)v3 + 912) = a2;
  }
  uint64_t v4 = a2;
  unint64_t v5 = a1 + 448;
  do
  {
    void *v5 = 0x800000000;
    v5 += 57;
    --v4;
  }
  while (v4);
  return v3;
}

pxrInternal__aapl__pxrReserved__::SdfPath *sub_2172043A4(uint64_t a1, unsigned int *a2)
{
  unsigned int v6 = a2;
  uint64_t result = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_217204504(a1, a2, (uint64_t *)&v6);
  v5[0] = result;
  v5[1] = v4;
  if ((_BYTE)v4)
  {
    sub_2172043F4(a1, v5);
    return v5[0];
  }
  return result;
}

_DWORD *sub_2172043F4(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath **a2)
{
  uint64_t v3 = *a2;
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(*a2, &v13);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v13))
  {
    sub_216981010(&v8, &v13);
    sub_21698105C(&v9, &v14);
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    uint64_t v4 = sub_2172043A4(a1, &v8);
    if (v12) {
      sub_216784EC4(v12);
    }
    if ((v10 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
    sub_21697C414(&v8);
    uint64_t v5 = *(void *)(v4 + 40);
    if (v5) {
      uint64_t v6 = v5 | 1;
    }
    else {
      uint64_t v6 = v4;
    }
    *((void *)v3 + 6) = v6;
    *(void *)(v4 + 40) = v3;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
  return sub_21697C414(&v13);
}

void sub_2172044E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_217201B90((uint64_t)va);
  sub_21697B754((int *)va1);
  _Unwind_Resume(a1);
}

void *sub_217204504(uint64_t a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v6 = *(void *)(a1 + 32);
  if (!v6)
  {
    sub_217204624((void **)a1);
    uint64_t v6 = *(void *)(a1 + 32);
  }
  uint64_t v7 = (void *)(*(void *)a1
                + 8
                * (bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2)* (a2[1] + (unint64_t)*a2)) >> 1))) & v6));
  int v8 = (void *)*v7;
  if (*v7)
  {
    uint64_t result = (void *)*v7;
    while (*result != *(void *)a2)
    {
      uint64_t result = (void *)result[4];
      if (!result) {
        goto LABEL_7;
      }
    }
  }
  else
  {
LABEL_7:
    if (*(void *)(a1 + 24) > (unint64_t)((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3))
    {
      sub_217204624((void **)a1);
      uint64_t v7 = (void *)(*(void *)a1
                    + 8
                    * (bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1]+ (unint64_t)*a2+ (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1))) & *(void *)(a1 + 32)));
      int v8 = (void *)*v7;
    }
    uint64_t v10 = operator new(0x38uLL);
    uint64_t result = (void *)sub_217204854((uint64_t)v10, *a3);
    result[5] = 0;
    result[6] = 0;
    result[4] = v8;
    void *v7 = result;
    ++*(void *)(a1 + 24);
  }
  return result;
}

void sub_217204624(void **a1)
{
  sub_216851EE4((uint64_t)&v21, "Sdf", "SdfPathTable::_Grow");
  unsigned __int8 v3 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if (v3)
  {
    uint64_t v4 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("void pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::HdSceneIndexPrim>::_Grow() [MappedType = pxrInternal__aapl__pxrReserved__::HdSceneIndexPrim]", 0, v2);
    BOOL v5 = v4 != 0;
  }
  else
  {
    uint64_t v4 = 0;
    BOOL v5 = 0;
  }
  uint64x2_t v19 = v4;
  unsigned int v20 = v5;
  unint64_t v6 = (2 * (void)a1[4]) | 1;
  if (v6 <= 7) {
    unint64_t v6 = 7;
  }
  a1[4] = (void *)v6;
  sub_2172047DC(&v17, v6 + 1);
  uint64_t v7 = a1[1];
  if (v7 != *a1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = (v7 - (unsigned char *)*a1) >> 3;
    do
    {
      uint64_t v10 = (unsigned int *)*((void *)*a1 + v8);
      if (v10)
      {
        unint64_t v11 = (unint64_t)a1[4];
        do
        {
          unint64_t v12 = (unsigned int *)*((void *)v10 + 4);
          unint64_t v13 = bswap64(0x9E3779B97F4A7C55* (v10[1]+ ((v10[1]+ (unint64_t)*v10+ (v10[1] + (unint64_t)*v10) * (v10[1] + (unint64_t)*v10)) >> 1))) & v11;
          uint64_t v14 = v17;
          *((void *)v10 + 4) = *(void *)(v17 + 8 * v13);
          *(void *)(v14 + 8 * v13) = v10;
          uint64_t v10 = v12;
        }
        while (v12);
      }
      ++v8;
    }
    while (v8 != v9);
    uint64_t v7 = *a1;
  }
  *(_OWORD *)a1 = v17;
  long long v15 = a1[2];
  a1[2] = v18;
  *(void *)&long long v17 = v7;
  int v18 = v15;
  if (v7)
  {
    *((void *)&v17 + 1) = v7;
    operator delete(v7);
  }
  unsigned int v20 = v5 - 1;
  if (v5)
  {
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End((uint64_t)v4);
    unsigned int v20 = v5 | 0xFFFFFFFE;
  }
  while (v22--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v21);
}

void sub_2172047B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_21684E6B8((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_2172047DC(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_21677CACC(a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_217204838(_Unwind_Exception *exception_object)
{
  unsigned __int8 v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + sub_2171F4108((uint64_t)this + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_217204854(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_216981010((_DWORD *)a1, (_DWORD *)a2);
  sub_21698105C(v4 + 1, (_DWORD *)(a2 + 4));
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)(a1 + sub_2171F4108((uint64_t)this + 8) = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a1 + 8) &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

uint64_t sub_2172048D0(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = a1 + 8 * a2;
  uint64_t v5 = *(void *)(v2 + 8);
  uint64_t v4 = (void *)(v2 + 8);
  uint64_t result = v5;
  if (a2 < 8)
  {
    if (!a2) {
      return result;
    }
    if (a2 == 1) {
      uint64_t result = tbb::internal::deallocate_via_handler_v3(result, (void *)1);
    }
  }
  else
  {
    uint64_t result = tbb::internal::deallocate_via_handler_v3(result, (void *)a2);
  }
  void *v4 = 0;
  return result;
}

void sub_217204924(uint64_t a1@<X0>, uint64_t a2@<X1>, pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a3@<X8>)
{
  uint64_t v6 = a1 + 24;
  uint64_t v7 = *(unsigned int *)(a1 + 24);
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__ *)(int)v7;
  sub_2168FD0E8((uint64_t)a3, (int)v7);
  sub_216907954((uint64_t)v23, (int)v7);
  if ((int)v7 >= 1)
  {
    uint64_t v11 = 0;
    int v12 = 0;
    uint64_t v13 = 4 * v7;
    do
    {
      sub_216907C74((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v23, v9, v10);
      *(_DWORD *)(v24 + v11) = v12;
      v12 += *(_DWORD *)(*(void *)(a1 + 56) + v11);
      v11 += 4;
    }
    while (v13 != v11);
  }
  uint64_t v14 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdTokens);
  if (!v14) {
    uint64_t v14 = sub_217198988(&pxrInternal__aapl__pxrReserved__::HdTokens);
  }
  uint64_t v15 = *(void *)(a1 + 16);
  uint64_t v16 = *((void *)v14 + 69);
  sub_2168FD54C(a3, v9, v10);
  uint64_t v17 = *((void *)a3 + 4);
  v19[0] = v23;
  v19[1] = v6;
  v19[2] = a1 + 64;
  BOOL v20 = (v15 & 0xFFFFFFFFFFFFFFF8) != (v16 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v21 = a2;
  uint64_t v22 = v17;
  v18[0] = sub_217204F00;
  v18[1] = 0;
  void v18[2] = v19;
  sub_217205074(v8, (uint64_t)v18, 1);
  sub_2168F83DC((uint64_t)v23);
}

void sub_217204A5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_2168F83DC((uint64_t)va);
  sub_2168F83DC(v10);
  _Unwind_Resume(a1);
}

void sub_217204A9C(uint64_t a1@<X0>, uint64_t a2@<X1>, pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a3@<X8>)
{
  uint64_t v6 = a1 + 24;
  uint64_t v7 = *(unsigned int *)(a1 + 24);
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__ *)(int)v7;
  sub_2168FE9F8((uint64_t)a3, (int)v7);
  sub_216907954((uint64_t)v23, (int)v7);
  if ((int)v7 >= 1)
  {
    uint64_t v11 = 0;
    int v12 = 0;
    uint64_t v13 = 4 * v7;
    do
    {
      sub_216907C74((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v23, v9, v10);
      *(_DWORD *)(v24 + v11) = v12;
      v12 += *(_DWORD *)(*(void *)(a1 + 56) + v11);
      v11 += 4;
    }
    while (v13 != v11);
  }
  uint64_t v14 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdTokens);
  if (!v14) {
    uint64_t v14 = sub_217198988(&pxrInternal__aapl__pxrReserved__::HdTokens);
  }
  uint64_t v15 = *(void *)(a1 + 16);
  uint64_t v16 = *((void *)v14 + 69);
  sub_2168FED88(a3, v9, v10);
  uint64_t v17 = *((void *)a3 + 4);
  v19[0] = v23;
  v19[1] = v6;
  v19[2] = a1 + 64;
  BOOL v20 = (v15 & 0xFFFFFFFFFFFFFFF8) != (v16 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v21 = a2;
  uint64_t v22 = v17;
  v18[0] = sub_217205858;
  v18[1] = 0;
  void v18[2] = v19;
  sub_2172059A4(v8, (uint64_t)v18, 1);
  sub_2168F83DC((uint64_t)v23);
}

void sub_217204BD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_2168F83DC((uint64_t)va);
  sub_2168F83DC(v10);
  _Unwind_Resume(a1);
}

void sub_217204C14(uint64_t a1@<X0>, uint64_t a2@<X1>, pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a3@<X8>)
{
  uint64_t v6 = a1 + 24;
  uint64_t v7 = *(unsigned int *)(a1 + 24);
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__ *)(int)v7;
  sub_217206188((uint64_t)a3, (int)v7);
  sub_216907954((uint64_t)v23, (int)v7);
  if ((int)v7 >= 1)
  {
    uint64_t v11 = 0;
    int v12 = 0;
    uint64_t v13 = 4 * v7;
    do
    {
      sub_216907C74((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v23, v9, v10);
      *(_DWORD *)(v24 + v11) = v12;
      v12 += *(_DWORD *)(*(void *)(a1 + 56) + v11);
      v11 += 4;
    }
    while (v13 != v11);
  }
  uint64_t v14 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdTokens);
  if (!v14) {
    uint64_t v14 = sub_217198988(&pxrInternal__aapl__pxrReserved__::HdTokens);
  }
  uint64_t v15 = *(void *)(a1 + 16);
  uint64_t v16 = *((void *)v14 + 69);
  sub_217206640(a3, v9, v10);
  uint64_t v17 = *((void *)a3 + 4);
  v19[0] = v23;
  v19[1] = v6;
  v19[2] = a1 + 64;
  BOOL v20 = (v15 & 0xFFFFFFFFFFFFFFF8) != (v16 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v21 = a2;
  uint64_t v22 = v17;
  v18[0] = sub_2172061F8;
  v18[1] = 0;
  void v18[2] = v19;
  sub_2172066D8(v8, (uint64_t)v18, 1);
  sub_2168F83DC((uint64_t)v23);
}

void sub_217204D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_2168F83DC((uint64_t)va);
  sub_2168F83DC(v10);
  _Unwind_Resume(a1);
}

void sub_217204D8C(uint64_t a1@<X0>, uint64_t a2@<X1>, pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *a3@<X8>)
{
  uint64_t v6 = a1 + 24;
  uint64_t v7 = *(unsigned int *)(a1 + 24);
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__ *)(int)v7;
  sub_217206188((uint64_t)a3, (int)v7);
  sub_216907954((uint64_t)v23, (int)v7);
  if ((int)v7 >= 1)
  {
    uint64_t v11 = 0;
    int v12 = 0;
    uint64_t v13 = 4 * v7;
    do
    {
      sub_216907C74((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v23, v9, v10);
      *(_DWORD *)(v24 + v11) = v12;
      v12 += *(_DWORD *)(*(void *)(a1 + 56) + v11);
      v11 += 4;
    }
    while (v13 != v11);
  }
  uint64_t v14 = (pxrInternal__aapl__pxrReserved__::HdTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdTokens);
  if (!v14) {
    uint64_t v14 = sub_217198988(&pxrInternal__aapl__pxrReserved__::HdTokens);
  }
  uint64_t v15 = *(void *)(a1 + 16);
  uint64_t v16 = *((void *)v14 + 69);
  sub_217206640(a3, v9, v10);
  uint64_t v17 = *((void *)a3 + 4);
  v19[0] = v23;
  v19[1] = v6;
  v19[2] = a1 + 64;
  BOOL v20 = (v15 & 0xFFFFFFFFFFFFFFF8) != (v16 & 0xFFFFFFFFFFFFFFF8);
  uint64_t v21 = a2;
  uint64_t v22 = v17;
  v18[0] = sub_217206F48;
  v18[1] = 0;
  void v18[2] = v19;
  sub_217207100(v8, (uint64_t)v18, 1);
  sub_2168F83DC((uint64_t)v23);
}

void sub_217204EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_2168F83DC((uint64_t)va);
  sub_2168F83DC(v10);
  _Unwind_Resume(a1);
}

double sub_217204F00(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a2 < a3)
  {
    double result = -1.0;
    do
    {
      uint64_t v4 = *(unsigned int *)(*(void *)(*(void *)(a1 + 8) + 32) + 4 * a2);
      float v5 = 0.0;
      float v6 = 0.0;
      float v7 = 0.0;
      if ((int)v4 >= 3)
      {
        uint64_t v8 = (int *)(*(void *)(*(void *)(a1 + 16) + 32)
                   + 4 * *(int *)(*(void *)(*(void *)a1 + 32) + 4 * a2));
        int v10 = *v8;
        uint64_t v9 = v8 + 2;
        uint64_t v11 = *(void *)(a1 + 32);
        int v12 = (float *)(v11 + 12 * v10);
        float v13 = *v12;
        float v14 = v12[1];
        float v15 = v12[2];
        if (*(unsigned char *)(a1 + 24)) {
          double v16 = -1.0;
        }
        else {
          double v16 = 1.0;
        }
        uint64_t v17 = v4 - 2;
        do
        {
          int v18 = (float *)(v11 + 12 * *(v9 - 1));
          uint64x2_t v19 = (float *)(v11 + 12 * *v9);
          float v20 = *v18 - v13;
          float v21 = v18[1] - v14;
          float v22 = v18[2] - v15;
          float v23 = *v19 - v13;
          float v24 = v19[1] - v14;
          float v25 = v19[2] - v15;
          float v26 = v21 * v25;
          float v27 = v20 * v25;
          float v28 = (float)(v20 * v24) - (float)(v21 * v23);
          float v29 = v16 * (float)(v26 - (float)(v22 * v24));
          float v30 = v16 * (float)((float)(v22 * v23) - v27);
          float v31 = v16 * v28;
          float v7 = v7 + v29;
          float v6 = v6 + v30;
          float v5 = v5 + v31;
          ++v9;
          --v17;
        }
        while (v17);
      }
      double v32 = 1.0 / fmaxf(sqrtf((float)(v5 * v5) + (float)((float)(v6 * v6) + (float)(v7 * v7))), 1.0e-10);
      float v33 = v32 * v7;
      float v34 = v32 * v6;
      float v35 = v32 * v5;
      uint64_t v36 = (float *)(*(void *)(a1 + 40) + 12 * a2);
      float *v36 = v33;
      v36[1] = v34;
      v36[2] = v35;
      ++a2;
    }
    while (a2 != a3);
  }
  return result;
}

void sub_217205074(pxrInternal__aapl__pxrReserved__ *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (a1)
  {
    if (pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(a1))
    {
      v15[0] = 0;
      uint64_t v16 = 65539;
      int v17 = 55;
      tbb::task_group_context::init((uint64_t)v15, v6, v7, v8);
      v13[0] = a1;
      v13[1] = 0;
      void v13[2] = a3;
      uint64_t v12 = a2;
      sub_2172051B0(v13, &v12, (uint64_t)&v14, (tbb::task_group_context *)v15);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)v15);
    }
    else
    {
      uint64_t v9 = *(void *)(a2 + 8);
      int v10 = *(void (**)(void *, void, pxrInternal__aapl__pxrReserved__ *))a2;
      uint64_t v11 = (void *)(*(void *)(a2 + 16) + (v9 >> 1));
      if (v9) {
        int v10 = *(void (**)(void *, void, pxrInternal__aapl__pxrReserved__ *))(*v11 + v10);
      }
      v10(v11, 0, a1);
    }
  }
}

void sub_217205194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)va);
  _Unwind_Resume(a1);
}

void *sub_2172051B0(void *result, void *a2, uint64_t a3, tbb::task_group_context *a4)
{
  if (result[1] < *result)
  {
    float v5 = result;
    uint64_t v9 = a4;
    uint64_t v6 = tbb::internal::allocate_root_with_context_proxy::allocate(&v9, 0x38uLL);
    *(unsigned char *)(v6 - 11) = 1;
    *(void *)uint64_t v6 = &unk_26C780F58;
    uint64_t v7 = v5[2];
    *(_OWORD *)(v6 + sub_2171F4108((uint64_t)this + 8) = *(_OWORD *)v5;
    *(void *)(v6 + 24) = v7;
    *(void *)(v6 + 32) = *a2;
    unint64_t initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v6);
    *(_DWORD *)(v6 + 4sub_2171F4108((uint64_t)this + 8) = 0;
    *(unsigned char *)(v6 + 52) = 5;
    *(void *)(v6 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
    return (void *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v6 - 40) + 16))(*(void *)(v6 - 40), v6, v6 - 8);
  }
  return result;
}

void sub_21720528C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a10, v10);
  _Unwind_Resume(a1);
}

uint64_t sub_2172052B0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v2 = a1 + 40;
  if (!v3)
  {
    *(void *)(a1 + 40) = 1;
    if (*(char *)(a1 - 11) < 0)
    {
      uint64_t v4 = *(void *)(a1 - 32);
      if (*(int *)(v4 - 24) >= 2)
      {
        __dmb(0xBu);
        *(unsigned char *)(v4 + sub_2171F4108((uint64_t)this + 8) = 1;
        unsigned int v5 = *(unsigned __int8 *)(a1 + 52);
        if (v5 <= 1) {
          LOBYTE(v5) = 1;
        }
        *(unsigned char *)(a1 + 52) = v5 + 1;
      }
    }
  }
  sub_217205320(v2, (tbb::internal::allocate_continuation_proxy *)a1, a1 + 8);
  return 0;
}

void sub_217205320(uint64_t a1, tbb::internal::allocate_continuation_proxy *a2, uint64_t a3)
{
  if (*(void *)(a3 + 16) < *(void *)a3 - *(void *)(a3 + 8))
  {
    if (*(void *)a1 > 1uLL) {
      goto LABEL_6;
    }
    if (*(void *)a1)
    {
LABEL_4:
      if (*(unsigned char *)(a1 + 12))
      {
        --*(unsigned char *)(a1 + 12);
        *(void *)a1 = 0;
LABEL_6:
        while (1)
        {
          sub_2172053D4(a2);
          if (*(void *)(a3 + 16) >= *(void *)a3 - *(void *)(a3 + 8)) {
            break;
          }
          if (*(void *)a1 <= 1uLL)
          {
            if (*(void *)a1) {
              goto LABEL_4;
            }
            break;
          }
        }
      }
    }
  }
  sub_2172054A8(a1, (uint64_t)a2, (long long *)a3);
}

uint64_t sub_2172053D4(tbb::internal::allocate_continuation_proxy *a1)
{
  uint64_t v2 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(a1, 0x10uLL);
  *(v2 - 11) = 1;
  *(void *)uint64_t v2 = &unk_26C751420;
  __dmb(0xBu);
  v2[8] = 0;
  *((void *)a1 - 4) = v2;
  *((void *)v2 - 3) = 2;
  uint64_t v3 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v2, 0x38uLL);
  __n128 v4 = sub_2172056D0(v3, (uint64_t)a1);
  uint64_t v6 = ***(uint64_t (****)(__n128))(v5 - 40);

  return v6(v4);
}

void sub_2172054A8(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  if (*((void *)a3 + 2) < *(void *)a3 - *((void *)a3 + 1) && *(unsigned char *)(a1 + 12))
  {
    *(_DWORD *)float v20 = 0x10000;
    long long v21 = *a3;
    uint64_t v22 = *((void *)a3 + 2);
    while (1)
    {
      __n128 v5 = sub_216B17510(v20, *(unsigned __int8 *)(a1 + 12));
      char v6 = *(unsigned char *)(*(void *)(a2 - 32) + 8);
      __dmb(0xBu);
      if ((v6 & 1) == 0) {
        break;
      }
      unsigned __int8 v13 = *(unsigned char *)(a1 + 12) + 1;
      *(unsigned char *)(a1 + 12) = v13;
      unsigned __int8 v14 = v20[2];
      if (v20[2] < 2u)
      {
        unsigned int v7 = v20[0];
        if (v20[v20[0] + 3] >= v13
          || *((void *)&v21 + 3 * v20[0] + 2) >= *((void *)&v21 + 3 * v20[0]) - *((void *)&v21 + 3 * v20[0] + 1))
        {
          goto LABEL_6;
        }
      }
      else
      {
        sub_217205738(a2, (long long *)((char *)&v21 + 24 * v20[1]), v20[v20[1] + 3]);
        unsigned __int8 v14 = --v20[2];
        v20[1] = (v20[1] + 1) & 7;
      }
LABEL_12:
      if (!v14 || tbb::task_group_context::is_group_execution_cancelled(*(tbb::task_group_context **)(a2 - 56))) {
        return;
      }
    }
    unsigned int v7 = v20[0];
LABEL_6:
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v9 = *(void (**)(void *, void, void, __n128))v8;
    uint64_t v11 = v8 + 8;
    uint64_t v10 = *(void *)(v8 + 8);
    uint64_t v12 = (void *)(*(void *)(v11 + 8) + (v10 >> 1));
    if (v10) {
      uint64_t v9 = *(void (**)(void *, void, void, __n128))(*v12 + v9);
    }
    v9(v12, *((void *)&v21 + 3 * v7 + 1), *((void *)&v21 + 3 * v7), v5);
    unsigned __int8 v14 = --v20[2];
    v20[0] = (v20[0] - 1) & 7;
    goto LABEL_12;
  }
  uint64_t v15 = *(void *)(a2 + 32);
  uint64_t v16 = *(void (**)(void *))v15;
  uint64_t v18 = v15 + 8;
  uint64_t v17 = *(void *)(v15 + 8);
  uint64x2_t v19 = (void *)(*(void *)(v18 + 8) + (v17 >> 1));
  if (v17) {
    uint64_t v16 = *(void (**)(void *))(*v19 + v16);
  }

  v16(v19);
}

__n128 sub_2172056D0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 - 11) = 1;
  uint64_t v2 = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)a1 = &unk_26C780F58;
  *(void *)(a1 + sub_2171F4108((uint64_t)this + 8) = v2;
  uint64_t v4 = v3 + ((unint64_t)(*(void *)(a2 + 8) - v3) >> 1);
  *(void *)(a2 + sub_2171F4108((uint64_t)this + 8) = v4;
  *(void *)(a1 + 16) = v4;
  __n128 result = *(__n128 *)(a2 + 24);
  *(__n128 *)(a1 + 24) = result;
  uint64_t v6 = *(void *)(a2 + 40) >> 1;
  *(void *)(a2 + 40) = v6;
  *(void *)(a1 + 40) = v6;
  *(_DWORD *)(a1 + 4sub_2171F4108((uint64_t)this + 8) = 2;
  *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 52);
  return result;
}

uint64_t sub_217205738(uint64_t a1, long long *a2, char a3)
{
  uint64_t v6 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate((tbb::internal::allocate_continuation_proxy *)a1, 0x10uLL);
  *(v6 - 11) = 1;
  *(void *)uint64_t v6 = &unk_26C751420;
  __dmb(0xBu);
  v6[8] = 0;
  *(void *)(a1 - 32) = v6;
  *((void *)v6 - 3) = 2;
  uint64_t v7 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v6, 0x38uLL);
  *(unsigned char *)(v7 - 11) = 1;
  *(void *)uint64_t v7 = &unk_26C780F58;
  long long v8 = *a2;
  *(void *)(v7 + 24) = *((void *)a2 + 2);
  *(_OWORD *)(v7 + sub_2171F4108((uint64_t)this + 8) = v8;
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40) >> 1;
  *(void *)(a1 + 40) = v10;
  *(void *)(v7 + 32) = v9;
  *(void *)(v7 + 40) = v10;
  *(_DWORD *)(v7 + 4sub_2171F4108((uint64_t)this + 8) = 2;
  *(unsigned char *)(v7 + 52) = *(unsigned char *)(a1 + 52) - a3;
  uint64_t v11 = ***(uint64_t (****)(void))(v7 - 40);

  return v11();
}

uint64_t sub_217205858(uint64_t result, unint64_t a2, unint64_t a3)
{
  if (a2 < a3)
  {
    do
    {
      uint64_t v3 = *(unsigned int *)(*(void *)(*(void *)(result + 8) + 32) + 4 * a2);
      double v4 = 0.0;
      double v5 = 0.0;
      double v6 = 0.0;
      if ((int)v3 >= 3)
      {
        uint64_t v7 = (int *)(*(void *)(*(void *)(result + 16) + 32)
                   + 4 * *(int *)(*(void *)(*(void *)result + 32) + 4 * a2));
        int v9 = *v7;
        long long v8 = v7 + 2;
        uint64_t v10 = *(void *)(result + 32);
        uint64_t v11 = (double *)(v10 + 24 * v9);
        double v12 = *v11;
        double v13 = v11[1];
        double v14 = v11[2];
        if (*(unsigned char *)(result + 24)) {
          double v15 = -1.0;
        }
        else {
          double v15 = 1.0;
        }
        uint64_t v16 = v3 - 2;
        do
        {
          uint64_t v17 = (double *)(v10 + 24 * *(v8 - 1));
          uint64_t v18 = (double *)(v10 + 24 * *v8);
          double v19 = *v17 - v12;
          double v20 = v17[1] - v13;
          double v21 = v17[2] - v14;
          double v22 = *v18 - v12;
          double v23 = v18[1] - v13;
          double v24 = v18[2] - v14;
          double v6 = v6 + (v20 * v24 - v21 * v23) * v15;
          double v5 = v5 + (v21 * v22 - v19 * v24) * v15;
          double v4 = v4 + (v19 * v23 - v20 * v22) * v15;
          ++v8;
          --v16;
        }
        while (v16);
      }
      double v25 = sqrt(v4 * v4 + v5 * v5 + v6 * v6);
      if (v25 <= 1.0e-10) {
        double v26 = 1.0e10;
      }
      else {
        double v26 = 1.0 / v25;
      }
      float v27 = (double *)(*(void *)(result + 40) + 24 * a2);
      *float v27 = v6 * v26;
      v27[1] = v5 * v26;
      v27[2] = v4 * v26;
      ++a2;
    }
    while (a2 != a3);
  }
  return result;
}

void sub_2172059A4(pxrInternal__aapl__pxrReserved__ *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (a1)
  {
    if (pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(a1))
    {
      v15[0] = 0;
      uint64_t v16 = 65539;
      int v17 = 55;
      tbb::task_group_context::init((uint64_t)v15, v6, v7, v8);
      v13[0] = a1;
      v13[1] = 0;
      void v13[2] = a3;
      uint64_t v12 = a2;
      sub_217205AE0(v13, &v12, (uint64_t)&v14, (tbb::task_group_context *)v15);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)v15);
    }
    else
    {
      uint64_t v9 = *(void *)(a2 + 8);
      uint64_t v10 = *(void (**)(void *, void, pxrInternal__aapl__pxrReserved__ *))a2;
      uint64_t v11 = (void *)(*(void *)(a2 + 16) + (v9 >> 1));
      if (v9) {
        uint64_t v10 = *(void (**)(void *, void, pxrInternal__aapl__pxrReserved__ *))(*v11 + v10);
      }
      v10(v11, 0, a1);
    }
  }
}

void sub_217205AC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)va);
  _Unwind_Resume(a1);
}

void *sub_217205AE0(void *result, void *a2, uint64_t a3, tbb::task_group_context *a4)
{
  if (result[1] < *result)
  {
    double v5 = result;
    uint64_t v9 = a4;
    uint64_t v6 = tbb::internal::allocate_root_with_context_proxy::allocate(&v9, 0x38uLL);
    *(unsigned char *)(v6 - 11) = 1;
    *(void *)uint64_t v6 = &unk_26C780FA0;
    uint64_t v7 = v5[2];
    *(_OWORD *)(v6 + sub_2171F4108((uint64_t)this + 8) = *(_OWORD *)v5;
    *(void *)(v6 + 24) = v7;
    *(void *)(v6 + 32) = *a2;
    unint64_t initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v6);
    *(_DWORD *)(v6 + 4sub_2171F4108((uint64_t)this + 8) = 0;
    *(unsigned char *)(v6 + 52) = 5;
    *(void *)(v6 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
    return (void *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v6 - 40) + 16))(*(void *)(v6 - 40), v6, v6 - 8);
  }
  return result;
}

void sub_217205BBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a10, v10);
  _Unwind_Resume(a1);
}

uint64_t sub_217205BE0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v2 = a1 + 40;
  if (!v3)
  {
    *(void *)(a1 + 40) = 1;
    if (*(char *)(a1 - 11) < 0)
    {
      uint64_t v4 = *(void *)(a1 - 32);
      if (*(int *)(v4 - 24) >= 2)
      {
        __dmb(0xBu);
        *(unsigned char *)(v4 + sub_2171F4108((uint64_t)this + 8) = 1;
        unsigned int v5 = *(unsigned __int8 *)(a1 + 52);
        if (v5 <= 1) {
          LOBYTE(v5) = 1;
        }
        *(unsigned char *)(a1 + 52) = v5 + 1;
      }
    }
  }
  sub_217205C50(v2, (tbb::internal::allocate_continuation_proxy *)a1, a1 + 8);
  return 0;
}

void sub_217205C50(uint64_t a1, tbb::internal::allocate_continuation_proxy *a2, uint64_t a3)
{
  if (*(void *)(a3 + 16) < *(void *)a3 - *(void *)(a3 + 8))
  {
    if (*(void *)a1 > 1uLL) {
      goto LABEL_6;
    }
    if (*(void *)a1)
    {
LABEL_4:
      if (*(unsigned char *)(a1 + 12))
      {
        --*(unsigned char *)(a1 + 12);
        *(void *)a1 = 0;
LABEL_6:
        while (1)
        {
          sub_217205D04(a2);
          if (*(void *)(a3 + 16) >= *(void *)a3 - *(void *)(a3 + 8)) {
            break;
          }
          if (*(void *)a1 <= 1uLL)
          {
            if (*(void *)a1) {
              goto LABEL_4;
            }
            break;
          }
        }
      }
    }
  }
  sub_217205DD8(a1, (uint64_t)a2, (long long *)a3);
}

uint64_t sub_217205D04(tbb::internal::allocate_continuation_proxy *a1)
{
  uint64_t v2 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(a1, 0x10uLL);
  *(v2 - 11) = 1;
  *(void *)uint64_t v2 = &unk_26C751420;
  __dmb(0xBu);
  v2[8] = 0;
  *((void *)a1 - 4) = v2;
  *((void *)v2 - 3) = 2;
  uint64_t v3 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v2, 0x38uLL);
  __n128 v4 = sub_217206000(v3, (uint64_t)a1);
  uint64_t v6 = ***(uint64_t (****)(__n128))(v5 - 40);

  return v6(v4);
}

void sub_217205DD8(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  if (*((void *)a3 + 2) < *(void *)a3 - *((void *)a3 + 1) && *(unsigned char *)(a1 + 12))
  {
    *(_DWORD *)double v20 = 0x10000;
    long long v21 = *a3;
    uint64_t v22 = *((void *)a3 + 2);
    while (1)
    {
      __n128 v5 = sub_216B17510(v20, *(unsigned __int8 *)(a1 + 12));
      char v6 = *(unsigned char *)(*(void *)(a2 - 32) + 8);
      __dmb(0xBu);
      if ((v6 & 1) == 0) {
        break;
      }
      unsigned __int8 v13 = *(unsigned char *)(a1 + 12) + 1;
      *(unsigned char *)(a1 + 12) = v13;
      unsigned __int8 v14 = v20[2];
      if (v20[2] < 2u)
      {
        unsigned int v7 = v20[0];
        if (v20[v20[0] + 3] >= v13
          || *((void *)&v21 + 3 * v20[0] + 2) >= *((void *)&v21 + 3 * v20[0]) - *((void *)&v21 + 3 * v20[0] + 1))
        {
          goto LABEL_6;
        }
      }
      else
      {
        sub_217206068(a2, (long long *)((char *)&v21 + 24 * v20[1]), v20[v20[1] + 3]);
        unsigned __int8 v14 = --v20[2];
        v20[1] = (v20[1] + 1) & 7;
      }
LABEL_12:
      if (!v14 || tbb::task_group_context::is_group_execution_cancelled(*(tbb::task_group_context **)(a2 - 56))) {
        return;
      }
    }
    unsigned int v7 = v20[0];
LABEL_6:
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v9 = *(void (**)(void *, void, void, __n128))v8;
    uint64_t v11 = v8 + 8;
    uint64_t v10 = *(void *)(v8 + 8);
    uint64_t v12 = (void *)(*(void *)(v11 + 8) + (v10 >> 1));
    if (v10) {
      uint64_t v9 = *(void (**)(void *, void, void, __n128))(*v12 + v9);
    }
    v9(v12, *((void *)&v21 + 3 * v7 + 1), *((void *)&v21 + 3 * v7), v5);
    unsigned __int8 v14 = --v20[2];
    v20[0] = (v20[0] - 1) & 7;
    goto LABEL_12;
  }
  uint64_t v15 = *(void *)(a2 + 32);
  uint64_t v16 = *(void (**)(void *))v15;
  uint64_t v18 = v15 + 8;
  uint64_t v17 = *(void *)(v15 + 8);
  double v19 = (void *)(*(void *)(v18 + 8) + (v17 >> 1));
  if (v17) {
    uint64_t v16 = *(void (**)(void *))(*v19 + v16);
  }

  v16(v19);
}

__n128 sub_217206000(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 - 11) = 1;
  uint64_t v2 = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)a1 = &unk_26C780FA0;
  *(void *)(a1 + sub_2171F4108((uint64_t)this + 8) = v2;
  uint64_t v4 = v3 + ((unint64_t)(*(void *)(a2 + 8) - v3) >> 1);
  *(void *)(a2 + sub_2171F4108((uint64_t)this + 8) = v4;
  *(void *)(a1 + 16) = v4;
  __n128 result = *(__n128 *)(a2 + 24);
  *(__n128 *)(a1 + 24) = result;
  uint64_t v6 = *(void *)(a2 + 40) >> 1;
  *(void *)(a2 + 40) = v6;
  *(void *)(a1 + 40) = v6;
  *(_DWORD *)(a1 + 4sub_2171F4108((uint64_t)this + 8) = 2;
  *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 52);
  return result;
}

uint64_t sub_217206068(uint64_t a1, long long *a2, char a3)
{
  uint64_t v6 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate((tbb::internal::allocate_continuation_proxy *)a1, 0x10uLL);
  *(v6 - 11) = 1;
  *(void *)uint64_t v6 = &unk_26C751420;
  __dmb(0xBu);
  v6[8] = 0;
  *(void *)(a1 - 32) = v6;
  *((void *)v6 - 3) = 2;
  uint64_t v7 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v6, 0x38uLL);
  *(unsigned char *)(v7 - 11) = 1;
  *(void *)uint64_t v7 = &unk_26C780FA0;
  long long v8 = *a2;
  *(void *)(v7 + 24) = *((void *)a2 + 2);
  *(_OWORD *)(v7 + sub_2171F4108((uint64_t)this + 8) = v8;
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40) >> 1;
  *(void *)(a1 + 40) = v10;
  *(void *)(v7 + 32) = v9;
  *(void *)(v7 + 40) = v10;
  *(_DWORD *)(v7 + 4sub_2171F4108((uint64_t)this + 8) = 2;
  *(unsigned char *)(v7 + 52) = *(unsigned char *)(a1 + 52) - a3;
  uint64_t v11 = ***(uint64_t (****)(void))(v7 - 40);

  return v11();
}

uint64_t sub_217206188(uint64_t a1, unint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  sub_2168F845C((void *)a1);
  uint64_t v6 = &v5;
  sub_2172063D8((unint64_t *)a1, a2, (_DWORD **)&v6);
  return a1;
}

void sub_2172061E0(_Unwind_Exception *a1)
{
  sub_2168F83DC(v1);
  _Unwind_Resume(a1);
}

unsigned int *sub_2172061F8(unsigned int *result, unint64_t a2, unint64_t a3)
{
  if (a2 < a3)
  {
    uint64_t v46 = v8;
    uint64_t v47 = v7;
    uint64_t v48 = v6;
    uint64_t v49 = v5;
    uint64_t v50 = v3;
    uint64_t v51 = v4;
    unint64_t v10 = a2;
    uint64_t v11 = result;
    do
    {
      float v45 = 0.0;
      unint64_t v44 = 0;
      uint64_t v12 = *(unsigned int *)(*(void *)(*((void *)v11 + 1) + 32) + 4 * v10);
      float v13 = 0.0;
      float v14 = 0.0;
      float v15 = 0.0;
      if ((int)v12 >= 3)
      {
        uint64_t v16 = *(int *)(*(void *)(*(void *)v11 + 32) + 4 * v10);
        uint64_t v17 = *((void *)v11 + 4);
        uint64_t v18 = *(void *)(*((void *)v11 + 2) + 32);
        double v19 = (float *)(v17 + 12 * *(int *)(v18 + 4 * v16));
        if (*((unsigned char *)v11 + 24)) {
          double v20 = -1.0;
        }
        else {
          double v20 = 1.0;
        }
        long long v21 = (int *)(v18 + 4 * v16 + 8);
        uint64_t v22 = v12 - 2;
        do
        {
          uint64_t v23 = (float *)(v17 + 12 * *(v21 - 1));
          double v24 = (float *)(v17 + 12 * *v21);
          float v25 = v19[1];
          float v26 = *v23 - *v19;
          float v27 = v23[1] - v25;
          float v28 = v19[2];
          float v29 = v23[2] - v28;
          float v30 = *v24 - *v19;
          float v31 = v24[1] - v25;
          float v32 = v24[2] - v28;
          float v33 = (float)(v27 * v32) - (float)(v29 * v31);
          float v34 = v26 * v32;
          float v35 = (float)(v26 * v31) - (float)(v27 * v30);
          float v36 = v20 * v33;
          float v37 = v20 * (float)((float)(v29 * v30) - v34);
          float v38 = v20 * v35;
          float v15 = v15 + v36;
          float v14 = v14 + v37;
          unint64_t v44 = __PAIR64__(LODWORD(v14), LODWORD(v15));
          float v13 = v13 + v38;
          float v45 = v13;
          ++v21;
          --v22;
        }
        while (v22);
      }
      double v39 = 1.0 / fmaxf(sqrtf((float)((float)(v15 * v15) + (float)(v14 * v14)) + (float)(v13 * v13)), 1.0e-10);
      *(float *)&unsigned int v40 = v39 * v15;
      *(float *)&unsigned int v41 = v39 * v14;
      unint64_t v44 = __PAIR64__(v41, v40);
      float v42 = v39 * v13;
      float v45 = v42;
      __n128 result = sub_217206EBC(&v43, (float *)&v44);
      *(_DWORD *)(*((void *)v11 + 5) + 4 * v10++) = v43;
    }
    while (v10 != a3);
  }
  return result;
}

void sub_2172063D8(unint64_t *a1, unint64_t a2, _DWORD **a3)
{
  unint64_t v3 = *a1;
  if (*a1 == a2) {
    return;
  }
  if (a2)
  {
    uint64_t v7 = (unint64_t *)a1[4];
    if (v7)
    {
      if (!a1[3])
      {
        unint64_t v8 = atomic_load(v7 - 2);
        if (v8 == 1)
        {
          if (v3 < a2)
          {
            unint64_t v9 = a1[4];
            if (*(void *)(v9 - 8) < a2)
            {
              unint64_t v10 = sub_2172065A0((uint64_t)a1, a2);
              uint64_t v7 = v10;
              if (v3)
              {
                uint64_t v11 = 0;
                do
                {
                  *(_DWORD *)((char *)v10 + v11) = *(_DWORD *)(v9 + v11);
                  v11 += 4;
                }
                while (4 * v3 != v11);
              }
            }
            uint64_t v12 = *a3;
            uint64_t v13 = 4 * v3;
            do
            {
              *(_DWORD *)((char *)v7 + v13) = *v12;
              v13 += 4;
            }
            while (4 * a2 != v13);
          }
          float v14 = v7;
          goto LABEL_31;
        }
        uint64_t v7 = (unint64_t *)a1[4];
      }
      if (v3 >= a2) {
        unint64_t v19 = a2;
      }
      else {
        unint64_t v19 = *a1;
      }
      double v20 = sub_2172065A0((uint64_t)a1, a2);
      float v14 = v20;
      if (v19)
      {
        uint64_t v21 = 4 * v19;
        uint64_t v22 = v20;
        do
        {
          int v23 = *(_DWORD *)v7;
          uint64_t v7 = (unint64_t *)((char *)v7 + 4);
          *(_DWORD *)uint64_t v22 = v23;
          uint64_t v22 = (unint64_t *)((char *)v22 + 4);
          v21 -= 4;
        }
        while (v21);
      }
      if (v3 < a2)
      {
        double v24 = *a3;
        uint64_t v25 = 4 * v3;
        do
        {
          *(_DWORD *)((char *)v20 + v25) = *v24;
          v25 += 4;
        }
        while (4 * a2 != v25);
      }
      goto LABEL_31;
    }
    uint64_t v15 = 4 * a2;
    if (4 * a2 / a2 == 4)
    {
      uint64_t v16 = sub_2172065A0((uint64_t)a1, a2);
      float v14 = v16;
      uint64_t v17 = 0;
      uint64_t v18 = *a3;
      do
      {
        *(_DWORD *)((char *)v16 + v17) = *v18;
        v17 += 4;
      }
      while (v15 != v17);
LABEL_31:
      if (v14 != (unint64_t *)a1[4])
      {
        sub_2168F83DC((uint64_t)a1);
        a1[4] = (unint64_t)v14;
      }
      *a1 = a2;
      return;
    }
  }

  sub_2168F845C(a1);
}

void *sub_2172065A0(uint64_t a1, unint64_t a2)
{
  sub_216851EE4((uint64_t)&v7, "VtArray::_AllocateNew", "value_type *pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::HdVec4f_2_10_10_10_REV>::_AllocateNew(size_t) [T = pxrInternal__aapl__pxrReserved__::HdVec4f_2_10_10_10_REV]");
  if (a2 > 0x3FFFFFFFFFFFFFFBLL) {
    size_t v3 = -1;
  }
  else {
    size_t v3 = 4 * a2 + 16;
  }
  uint64_t v4 = operator new(v3);
  void *v4 = 1;
  v4[1] = a2;
  while (v8--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v7);
  return v4 + 2;
}

void sub_217206628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_217206640(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *this, uint64_t a2, char *a3)
{
  uint64_t v3 = *((void *)this + 4);
  if (v3)
  {
    if (*((void *)this + 3) || (unint64_t v5 = atomic_load((unint64_t *)(v3 - 16)), v5 != 1))
    {
      pxrInternal__aapl__pxrReserved__::Vt_ArrayBase::_DetachCopyHook(this, "void pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::HdVec4f_2_10_10_10_REV>::_DetachIfNotUnique() [T = pxrInternal__aapl__pxrReserved__::HdVec4f_2_10_10_10_REV]", a3);
      uint64_t v6 = (int *)*((void *)this + 4);
      uint64_t v7 = *(void *)this;
      int v8 = sub_2172065A0((uint64_t)this, *(void *)this);
      unint64_t v9 = v8;
      if (v7)
      {
        uint64_t v10 = 4 * v7;
        uint64_t v11 = v8;
        do
        {
          int v12 = *v6++;
          *v11++ = v12;
          v10 -= 4;
        }
        while (v10);
      }
      sub_2168F83DC((uint64_t)this);
      *((void *)this + 4) = v9;
    }
  }
}

void sub_2172066D8(pxrInternal__aapl__pxrReserved__ *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (a1)
  {
    if (pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(a1))
    {
      v15[0] = 0;
      uint64_t v16 = 65539;
      int v17 = 55;
      tbb::task_group_context::init((uint64_t)v15, v6, v7, v8);
      v13[0] = a1;
      v13[1] = 0;
      void v13[2] = a3;
      uint64_t v12 = a2;
      sub_217206814(v13, &v12, (uint64_t)&v14, (tbb::task_group_context *)v15);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)v15);
    }
    else
    {
      uint64_t v9 = *(void *)(a2 + 8);
      uint64_t v10 = *(void (**)(void *, void, pxrInternal__aapl__pxrReserved__ *))a2;
      uint64_t v11 = (void *)(*(void *)(a2 + 16) + (v9 >> 1));
      if (v9) {
        uint64_t v10 = *(void (**)(void *, void, pxrInternal__aapl__pxrReserved__ *))(*v11 + v10);
      }
      v10(v11, 0, a1);
    }
  }
}

void sub_2172067F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)va);
  _Unwind_Resume(a1);
}

void *sub_217206814(void *result, void *a2, uint64_t a3, tbb::task_group_context *a4)
{
  if (result[1] < *result)
  {
    unint64_t v5 = result;
    uint64_t v9 = a4;
    uint64_t v6 = tbb::internal::allocate_root_with_context_proxy::allocate(&v9, 0x38uLL);
    *(unsigned char *)(v6 - 11) = 1;
    *(void *)uint64_t v6 = &unk_26C780FE8;
    uint64_t v7 = v5[2];
    *(_OWORD *)(v6 + sub_2171F4108((uint64_t)this + 8) = *(_OWORD *)v5;
    *(void *)(v6 + 24) = v7;
    *(void *)(v6 + 32) = *a2;
    unint64_t initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v6);
    *(_DWORD *)(v6 + 4sub_2171F4108((uint64_t)this + 8) = 0;
    *(unsigned char *)(v6 + 52) = 5;
    *(void *)(v6 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
    return (void *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v6 - 40) + 16))(*(void *)(v6 - 40), v6, v6 - 8);
  }
  return result;
}

void sub_2172068F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a10, v10);
  _Unwind_Resume(a1);
}

uint64_t sub_217206914(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v2 = a1 + 40;
  if (!v3)
  {
    *(void *)(a1 + 40) = 1;
    if (*(char *)(a1 - 11) < 0)
    {
      uint64_t v4 = *(void *)(a1 - 32);
      if (*(int *)(v4 - 24) >= 2)
      {
        __dmb(0xBu);
        *(unsigned char *)(v4 + sub_2171F4108((uint64_t)this + 8) = 1;
        unsigned int v5 = *(unsigned __int8 *)(a1 + 52);
        if (v5 <= 1) {
          LOBYTE(v5) = 1;
        }
        *(unsigned char *)(a1 + 52) = v5 + 1;
      }
    }
  }
  sub_217206984(v2, (tbb::internal::allocate_continuation_proxy *)a1, a1 + 8);
  return 0;
}

void sub_217206984(uint64_t a1, tbb::internal::allocate_continuation_proxy *a2, uint64_t a3)
{
  if (*(void *)(a3 + 16) < *(void *)a3 - *(void *)(a3 + 8))
  {
    if (*(void *)a1 > 1uLL) {
      goto LABEL_6;
    }
    if (*(void *)a1)
    {
LABEL_4:
      if (*(unsigned char *)(a1 + 12))
      {
        --*(unsigned char *)(a1 + 12);
        *(void *)a1 = 0;
LABEL_6:
        while (1)
        {
          sub_217206A38(a2);
          if (*(void *)(a3 + 16) >= *(void *)a3 - *(void *)(a3 + 8)) {
            break;
          }
          if (*(void *)a1 <= 1uLL)
          {
            if (*(void *)a1) {
              goto LABEL_4;
            }
            break;
          }
        }
      }
    }
  }
  sub_217206B0C(a1, (uint64_t)a2, (long long *)a3);
}

uint64_t sub_217206A38(tbb::internal::allocate_continuation_proxy *a1)
{
  uint64_t v2 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(a1, 0x10uLL);
  *(v2 - 11) = 1;
  *(void *)uint64_t v2 = &unk_26C751420;
  __dmb(0xBu);
  v2[8] = 0;
  *((void *)a1 - 4) = v2;
  *((void *)v2 - 3) = 2;
  uint64_t v3 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v2, 0x38uLL);
  __n128 v4 = sub_217206D34(v3, (uint64_t)a1);
  uint64_t v6 = ***(uint64_t (****)(__n128))(v5 - 40);

  return v6(v4);
}

void sub_217206B0C(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  if (*((void *)a3 + 2) < *(void *)a3 - *((void *)a3 + 1) && *(unsigned char *)(a1 + 12))
  {
    *(_DWORD *)double v20 = 0x10000;
    long long v21 = *a3;
    uint64_t v22 = *((void *)a3 + 2);
    while (1)
    {
      __n128 v5 = sub_216B17510(v20, *(unsigned __int8 *)(a1 + 12));
      char v6 = *(unsigned char *)(*(void *)(a2 - 32) + 8);
      __dmb(0xBu);
      if ((v6 & 1) == 0) {
        break;
      }
      unsigned __int8 v13 = *(unsigned char *)(a1 + 12) + 1;
      *(unsigned char *)(a1 + 12) = v13;
      unsigned __int8 v14 = v20[2];
      if (v20[2] < 2u)
      {
        unsigned int v7 = v20[0];
        if (v20[v20[0] + 3] >= v13
          || *((void *)&v21 + 3 * v20[0] + 2) >= *((void *)&v21 + 3 * v20[0]) - *((void *)&v21 + 3 * v20[0] + 1))
        {
          goto LABEL_6;
        }
      }
      else
      {
        sub_217206D9C(a2, (long long *)((char *)&v21 + 24 * v20[1]), v20[v20[1] + 3]);
        unsigned __int8 v14 = --v20[2];
        v20[1] = (v20[1] + 1) & 7;
      }
LABEL_12:
      if (!v14 || tbb::task_group_context::is_group_execution_cancelled(*(tbb::task_group_context **)(a2 - 56))) {
        return;
      }
    }
    unsigned int v7 = v20[0];
LABEL_6:
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v9 = *(void (**)(void *, void, void, __n128))v8;
    uint64_t v11 = v8 + 8;
    uint64_t v10 = *(void *)(v8 + 8);
    uint64_t v12 = (void *)(*(void *)(v11 + 8) + (v10 >> 1));
    if (v10) {
      uint64_t v9 = *(void (**)(void *, void, void, __n128))(*v12 + v9);
    }
    v9(v12, *((void *)&v21 + 3 * v7 + 1), *((void *)&v21 + 3 * v7), v5);
    unsigned __int8 v14 = --v20[2];
    v20[0] = (v20[0] - 1) & 7;
    goto LABEL_12;
  }
  uint64_t v15 = *(void *)(a2 + 32);
  uint64_t v16 = *(void (**)(void *))v15;
  uint64_t v18 = v15 + 8;
  uint64_t v17 = *(void *)(v15 + 8);
  unint64_t v19 = (void *)(*(void *)(v18 + 8) + (v17 >> 1));
  if (v17) {
    uint64_t v16 = *(void (**)(void *))(*v19 + v16);
  }

  v16(v19);
}

__n128 sub_217206D34(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 - 11) = 1;
  uint64_t v2 = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)a1 = &unk_26C780FE8;
  *(void *)(a1 + sub_2171F4108((uint64_t)this + 8) = v2;
  uint64_t v4 = v3 + ((unint64_t)(*(void *)(a2 + 8) - v3) >> 1);
  *(void *)(a2 + sub_2171F4108((uint64_t)this + 8) = v4;
  *(void *)(a1 + 16) = v4;
  __n128 result = *(__n128 *)(a2 + 24);
  *(__n128 *)(a1 + 24) = result;
  uint64_t v6 = *(void *)(a2 + 40) >> 1;
  *(void *)(a2 + 40) = v6;
  *(void *)(a1 + 40) = v6;
  *(_DWORD *)(a1 + 4sub_2171F4108((uint64_t)this + 8) = 2;
  *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 52);
  return result;
}

uint64_t sub_217206D9C(uint64_t a1, long long *a2, char a3)
{
  uint64_t v6 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate((tbb::internal::allocate_continuation_proxy *)a1, 0x10uLL);
  *(v6 - 11) = 1;
  *(void *)uint64_t v6 = &unk_26C751420;
  __dmb(0xBu);
  v6[8] = 0;
  *(void *)(a1 - 32) = v6;
  *((void *)v6 - 3) = 2;
  uint64_t v7 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v6, 0x38uLL);
  *(unsigned char *)(v7 - 11) = 1;
  *(void *)uint64_t v7 = &unk_26C780FE8;
  long long v8 = *a2;
  *(void *)(v7 + 24) = *((void *)a2 + 2);
  *(_OWORD *)(v7 + sub_2171F4108((uint64_t)this + 8) = v8;
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40) >> 1;
  *(void *)(a1 + 40) = v10;
  *(void *)(v7 + 32) = v9;
  *(void *)(v7 + 40) = v10;
  *(_DWORD *)(v7 + 4sub_2171F4108((uint64_t)this + 8) = 2;
  *(unsigned char *)(v7 + 52) = *(unsigned char *)(a1 + 52) - a3;
  uint64_t v11 = ***(uint64_t (****)(void))(v7 - 40);

  return v11();
}

unsigned int *sub_217206EBC(unsigned int *result, float *a2)
{
  float v2 = *a2;
  if (*a2 < -1.0) {
    float v2 = -1.0;
  }
  if (v2 <= 1.0) {
    float v3 = v2 * 511.0;
  }
  else {
    float v3 = 511.0;
  }
  unsigned int v4 = llroundf(v3) & 0x3FF;
  unsigned int v5 = *result & 0xFFFFFC00 | v4;
  void *result = v5;
  float v6 = a2[1];
  if (v6 < -1.0) {
    float v6 = -1.0;
  }
  if (v6 <= 1.0) {
    float v7 = v6 * 511.0;
  }
  else {
    float v7 = 511.0;
  }
  __int16 v8 = llroundf(v7);
  void *result = v5 & 0xFFF003FF | ((v8 & 0x3FF) << 10);
  float v9 = a2[2];
  if (v9 < -1.0) {
    float v9 = -1.0;
  }
  if (v9 <= 1.0) {
    float v10 = v9 * 511.0;
  }
  else {
    float v10 = 511.0;
  }
  void *result = v4 & 0xC00003FF | ((llroundf(v10) & 0x3FF) << 20) | ((v8 & 0x3FF) << 10);
  return result;
}

unsigned int *sub_217206F48(unsigned int *result, unint64_t a2, unint64_t a3)
{
  if (a2 < a3)
  {
    uint64_t v39 = v8;
    uint64_t v40 = v7;
    uint64_t v41 = v6;
    uint64_t v42 = v5;
    uint64_t v43 = v3;
    uint64_t v44 = v4;
    unint64_t v10 = a2;
    uint64_t v11 = result;
    do
    {
      double v36 = 0.0;
      double v37 = 0.0;
      double v38 = 0.0;
      uint64_t v12 = *(unsigned int *)(*(void *)(*((void *)v11 + 1) + 32) + 4 * v10);
      double v13 = 0.0;
      double v14 = 0.0;
      double v15 = 0.0;
      if ((int)v12 >= 3)
      {
        uint64_t v16 = *(int *)(*(void *)(*(void *)v11 + 32) + 4 * v10);
        uint64_t v17 = *((void *)v11 + 4);
        uint64_t v18 = *(void *)(*((void *)v11 + 2) + 32);
        unint64_t v19 = (double *)(v17 + 24 * *(int *)(v18 + 4 * v16));
        if (*((unsigned char *)v11 + 24)) {
          double v20 = -1.0;
        }
        else {
          double v20 = 1.0;
        }
        long long v21 = (int *)(v18 + 4 * v16 + 8);
        uint64_t v22 = v12 - 2;
        do
        {
          uint64_t v23 = (double *)(v17 + 24 * *(v21 - 1));
          double v24 = (double *)(v17 + 24 * *v21);
          double v25 = v19[1];
          double v26 = *v23 - *v19;
          double v27 = v23[1] - v25;
          double v28 = v19[2];
          double v29 = v23[2] - v28;
          double v30 = *v24 - *v19;
          double v31 = v24[1] - v25;
          double v32 = v24[2] - v28;
          double v15 = v15 + (v27 * v32 - v29 * v31) * v20;
          double v14 = (v29 * v30 - v26 * v32) * v20 + v14;
          double v36 = v15;
          double v37 = v14;
          double v13 = (v26 * v31 - v27 * v30) * v20 + v13;
          double v38 = v13;
          ++v21;
          --v22;
        }
        while (v22);
      }
      double v33 = sqrt(v15 * v15 + v14 * v14 + v13 * v13);
      if (v33 <= 1.0e-10) {
        double v34 = 1.0e10;
      }
      else {
        double v34 = 1.0 / v33;
      }
      double v36 = v15 * v34;
      double v37 = v14 * v34;
      double v38 = v13 * v34;
      __n128 result = sub_2172078E4(&v35, &v36);
      *(_DWORD *)(*((void *)v11 + 5) + 4 * v10++) = v35;
    }
    while (v10 != a3);
  }
  return result;
}

void sub_217207100(pxrInternal__aapl__pxrReserved__ *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (a1)
  {
    if (pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(a1))
    {
      v15[0] = 0;
      uint64_t v16 = 65539;
      int v17 = 55;
      tbb::task_group_context::init((uint64_t)v15, v6, v7, v8);
      v13[0] = a1;
      v13[1] = 0;
      void v13[2] = a3;
      uint64_t v12 = a2;
      sub_21720723C(v13, &v12, (uint64_t)&v14, (tbb::task_group_context *)v15);
      tbb::task_group_context::~task_group_context((tbb::task_group_context *)v15);
    }
    else
    {
      uint64_t v9 = *(void *)(a2 + 8);
      unint64_t v10 = *(void (**)(void *, void, pxrInternal__aapl__pxrReserved__ *))a2;
      uint64_t v11 = (void *)(*(void *)(a2 + 16) + (v9 >> 1));
      if (v9) {
        unint64_t v10 = *(void (**)(void *, void, pxrInternal__aapl__pxrReserved__ *))(*v11 + v10);
      }
      v10(v11, 0, a1);
    }
  }
}

void sub_217207220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  tbb::task_group_context::~task_group_context((tbb::task_group_context *)va);
  _Unwind_Resume(a1);
}

void *sub_21720723C(void *result, void *a2, uint64_t a3, tbb::task_group_context *a4)
{
  if (result[1] < *result)
  {
    uint64_t v5 = result;
    uint64_t v9 = a4;
    uint64_t v6 = tbb::internal::allocate_root_with_context_proxy::allocate(&v9, 0x38uLL);
    *(unsigned char *)(v6 - 11) = 1;
    *(void *)uint64_t v6 = &unk_26C781030;
    uint64_t v7 = v5[2];
    *(_OWORD *)(v6 + sub_2171F4108((uint64_t)this + 8) = *(_OWORD *)v5;
    *(void *)(v6 + 24) = v7;
    *(void *)(v6 + 32) = *a2;
    unint64_t initial_auto_partitioner_divisor = tbb::internal::get_initial_auto_partitioner_divisor((tbb::internal *)v6);
    *(_DWORD *)(v6 + 4sub_2171F4108((uint64_t)this + 8) = 0;
    *(unsigned char *)(v6 + 52) = 5;
    *(void *)(v6 + 40) = (initial_auto_partitioner_divisor >> 1) & 0x7FFFFFFFFFFFFFFELL;
    return (void *)(*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v6 - 40) + 16))(*(void *)(v6 - 40), v6, v6 - 8);
  }
  return result;
}

void sub_217207318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  tbb::internal::allocate_root_with_context_proxy::free((tbb::internal::allocate_root_with_context_proxy *)&a10, v10);
  _Unwind_Resume(a1);
}

uint64_t sub_21720733C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v2 = a1 + 40;
  if (!v3)
  {
    *(void *)(a1 + 40) = 1;
    if (*(char *)(a1 - 11) < 0)
    {
      uint64_t v4 = *(void *)(a1 - 32);
      if (*(int *)(v4 - 24) >= 2)
      {
        __dmb(0xBu);
        *(unsigned char *)(v4 + sub_2171F4108((uint64_t)this + 8) = 1;
        unsigned int v5 = *(unsigned __int8 *)(a1 + 52);
        if (v5 <= 1) {
          LOBYTE(v5) = 1;
        }
        *(unsigned char *)(a1 + 52) = v5 + 1;
      }
    }
  }
  sub_2172073AC(v2, (tbb::internal::allocate_continuation_proxy *)a1, a1 + 8);
  return 0;
}

void sub_2172073AC(uint64_t a1, tbb::internal::allocate_continuation_proxy *a2, uint64_t a3)
{
  if (*(void *)(a3 + 16) < *(void *)a3 - *(void *)(a3 + 8))
  {
    if (*(void *)a1 > 1uLL) {
      goto LABEL_6;
    }
    if (*(void *)a1)
    {
LABEL_4:
      if (*(unsigned char *)(a1 + 12))
      {
        --*(unsigned char *)(a1 + 12);
        *(void *)a1 = 0;
LABEL_6:
        while (1)
        {
          sub_217207460(a2);
          if (*(void *)(a3 + 16) >= *(void *)a3 - *(void *)(a3 + 8)) {
            break;
          }
          if (*(void *)a1 <= 1uLL)
          {
            if (*(void *)a1) {
              goto LABEL_4;
            }
            break;
          }
        }
      }
    }
  }
  sub_217207534(a1, (uint64_t)a2, (long long *)a3);
}

uint64_t sub_217207460(tbb::internal::allocate_continuation_proxy *a1)
{
  uint64_t v2 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate(a1, 0x10uLL);
  *(v2 - 11) = 1;
  *(void *)uint64_t v2 = &unk_26C751420;
  __dmb(0xBu);
  v2[8] = 0;
  *((void *)a1 - 4) = v2;
  *((void *)v2 - 3) = 2;
  uint64_t v3 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v2, 0x38uLL);
  __n128 v4 = sub_21720775C(v3, (uint64_t)a1);
  uint64_t v6 = ***(uint64_t (****)(__n128))(v5 - 40);

  return v6(v4);
}

void sub_217207534(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  if (*((void *)a3 + 2) < *(void *)a3 - *((void *)a3 + 1) && *(unsigned char *)(a1 + 12))
  {
    *(_DWORD *)double v20 = 0x10000;
    long long v21 = *a3;
    uint64_t v22 = *((void *)a3 + 2);
    while (1)
    {
      __n128 v5 = sub_216B17510(v20, *(unsigned __int8 *)(a1 + 12));
      char v6 = *(unsigned char *)(*(void *)(a2 - 32) + 8);
      __dmb(0xBu);
      if ((v6 & 1) == 0) {
        break;
      }
      unsigned __int8 v13 = *(unsigned char *)(a1 + 12) + 1;
      *(unsigned char *)(a1 + 12) = v13;
      unsigned __int8 v14 = v20[2];
      if (v20[2] < 2u)
      {
        unsigned int v7 = v20[0];
        if (v20[v20[0] + 3] >= v13
          || *((void *)&v21 + 3 * v20[0] + 2) >= *((void *)&v21 + 3 * v20[0]) - *((void *)&v21 + 3 * v20[0] + 1))
        {
          goto LABEL_6;
        }
      }
      else
      {
        sub_2172077C4(a2, (long long *)((char *)&v21 + 24 * v20[1]), v20[v20[1] + 3]);
        unsigned __int8 v14 = --v20[2];
        v20[1] = (v20[1] + 1) & 7;
      }
LABEL_12:
      if (!v14 || tbb::task_group_context::is_group_execution_cancelled(*(tbb::task_group_context **)(a2 - 56))) {
        return;
      }
    }
    unsigned int v7 = v20[0];
LABEL_6:
    uint64_t v8 = *(void *)(a2 + 32);
    uint64_t v9 = *(void (**)(void *, void, void, __n128))v8;
    uint64_t v11 = v8 + 8;
    uint64_t v10 = *(void *)(v8 + 8);
    uint64_t v12 = (void *)(*(void *)(v11 + 8) + (v10 >> 1));
    if (v10) {
      uint64_t v9 = *(void (**)(void *, void, void, __n128))(*v12 + v9);
    }
    v9(v12, *((void *)&v21 + 3 * v7 + 1), *((void *)&v21 + 3 * v7), v5);
    unsigned __int8 v14 = --v20[2];
    v20[0] = (v20[0] - 1) & 7;
    goto LABEL_12;
  }
  uint64_t v15 = *(void *)(a2 + 32);
  uint64_t v16 = *(void (**)(void *))v15;
  uint64_t v18 = v15 + 8;
  uint64_t v17 = *(void *)(v15 + 8);
  unint64_t v19 = (void *)(*(void *)(v18 + 8) + (v17 >> 1));
  if (v17) {
    uint64_t v16 = *(void (**)(void *))(*v19 + v16);
  }

  v16(v19);
}

__n128 sub_21720775C(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 - 11) = 1;
  uint64_t v2 = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)a1 = &unk_26C781030;
  *(void *)(a1 + sub_2171F4108((uint64_t)this + 8) = v2;
  uint64_t v4 = v3 + ((unint64_t)(*(void *)(a2 + 8) - v3) >> 1);
  *(void *)(a2 + sub_2171F4108((uint64_t)this + 8) = v4;
  *(void *)(a1 + 16) = v4;
  __n128 result = *(__n128 *)(a2 + 24);
  *(__n128 *)(a1 + 24) = result;
  uint64_t v6 = *(void *)(a2 + 40) >> 1;
  *(void *)(a2 + 40) = v6;
  *(void *)(a1 + 40) = v6;
  *(_DWORD *)(a1 + 4sub_2171F4108((uint64_t)this + 8) = 2;
  *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 52);
  return result;
}

uint64_t sub_2172077C4(uint64_t a1, long long *a2, char a3)
{
  uint64_t v6 = (unsigned char *)tbb::internal::allocate_continuation_proxy::allocate((tbb::internal::allocate_continuation_proxy *)a1, 0x10uLL);
  *(v6 - 11) = 1;
  *(void *)uint64_t v6 = &unk_26C751420;
  __dmb(0xBu);
  v6[8] = 0;
  *(void *)(a1 - 32) = v6;
  *((void *)v6 - 3) = 2;
  uint64_t v7 = tbb::internal::allocate_child_proxy::allocate((tbb::internal::allocate_child_proxy *)v6, 0x38uLL);
  *(unsigned char *)(v7 - 11) = 1;
  *(void *)uint64_t v7 = &unk_26C781030;
  long long v8 = *a2;
  *(void *)(v7 + 24) = *((void *)a2 + 2);
  *(_OWORD *)(v7 + sub_2171F4108((uint64_t)this + 8) = v8;
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40) >> 1;
  *(void *)(a1 + 40) = v10;
  *(void *)(v7 + 32) = v9;
  *(void *)(v7 + 40) = v10;
  *(_DWORD *)(v7 + 4sub_2171F4108((uint64_t)this + 8) = 2;
  *(unsigned char *)(v7 + 52) = *(unsigned char *)(a1 + 52) - a3;
  uint64_t v11 = ***(uint64_t (****)(void))(v7 - 40);

  return v11();
}

unsigned int *sub_2172078E4(unsigned int *result, double *a2)
{
  float v2 = *a2;
  if (v2 < -1.0) {
    float v2 = -1.0;
  }
  if (v2 <= 1.0) {
    float v3 = v2 * 511.0;
  }
  else {
    float v3 = 511.0;
  }
  unsigned int v4 = llroundf(v3) & 0x3FF;
  unsigned int v5 = *result & 0xFFFFFC00 | v4;
  void *result = v5;
  float v6 = a2[1];
  if (v6 < -1.0) {
    float v6 = -1.0;
  }
  if (v6 <= 1.0) {
    float v7 = v6 * 511.0;
  }
  else {
    float v7 = 511.0;
  }
  __int16 v8 = llroundf(v7);
  void *result = v5 & 0xFFF003FF | ((v8 & 0x3FF) << 10);
  float v9 = a2[2];
  if (v9 < -1.0) {
    float v9 = -1.0;
  }
  if (v9 <= 1.0) {
    float v10 = v9 * 511.0;
  }
  else {
    float v10 = 511.0;
  }
  void *result = v4 & 0xC00003FF | ((llroundf(v10) & 0x3FF) << 20) | ((v8 & 0x3FF) << 10);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::operator==(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 == *(_DWORD *)a2
    && *(void *)(a1 + 4) == *(void *)(a2 + 4)
    && *(void *)(a1 + 12) == *(void *)(a2 + 12))
  {
    return pxrInternal__aapl__pxrReserved__::UsdSkelTopology::operator==(a1 + 24, a2 + 24);
  }
  else
  {
    return 0;
  }
}

{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  const void **v9;
  unsigned __int8 *v10;
  uint64_t vars8;

  if (*(void *)a1 != *(void *)a2
    || (*(void *)(a1 + 8) & 0xFFFFFFFFFFFFFFF8) != (*(void *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8))
  {
    return 0;
  }
  unsigned int v4 = *(unsigned __int8 *)(a1 + 39);
  unsigned int v5 = *(char **)(a1 + 24);
  if ((v4 & 0x80u) == 0) {
    float v6 = *(unsigned __int8 *)(a1 + 39);
  }
  else {
    float v6 = *(void *)(a1 + 24);
  }
  float v7 = *(unsigned __int8 *)(a2 + 39);
  __int16 v8 = (char)v7;
  if ((v7 & 0x80u) != 0) {
    float v7 = *(void *)(a2 + 24);
  }
  if (v6 != v7) {
    return 0;
  }
  float v9 = (const void **)(a1 + 16);
  if (v8 >= 0) {
    float v10 = (unsigned __int8 *)(a2 + 16);
  }
  else {
    float v10 = *(unsigned __int8 **)(a2 + 16);
  }
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*v9, v10, (size_t)v5)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a1 + 39))
  {
    while (*(unsigned __int8 *)v9 == *v10)
    {
      float v9 = (const void **)((char *)v9 + 1);
      ++v10;
      if (!--v4) {
        goto LABEL_18;
      }
    }
    return 0;
  }
LABEL_18:
  if ((*(void *)(a1 + 40) & 0xFFFFFFFFFFFFFFF8) != (*(void *)(a2 + 40) & 0xFFFFFFFFFFFFFFF8)) {
    return 0;
  }

  return pxrInternal__aapl__pxrReserved__::operator==((void **)(a1 + 48), (uint64_t *)(a2 + 48), v5);
}

void pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchemaTokens_StaticTokenType::~HdGeomSubsetSchemaTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchemaTokens_StaticTokenType *this)
{
  float v6 = (void **)((char *)this + 40);
  sub_216889A04(&v6);
  uint64_t v2 = *((void *)this + 4);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 3);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *((void *)this + 2);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *((void *)this + 1);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchemaTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchemaTokens_StaticTokenType::HdGeomSubsetSchemaTokens_StaticTokenType(atomic_uint **this)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v2 = (atomic_uint **)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "type", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2, "indices", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 2, "typeFaceSet", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 3, "typePointSet", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 4, "typeCurveSet", 0);
  uint64_t v3 = *this;
  unint64_t v19 = v3;
  if ((v3 & 7) != 0)
  {
    uint64_t v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
      unint64_t v19 = v4;
    }
  }
  uint64_t v5 = *v2;
  double v20 = v5;
  if ((v5 & 7) != 0)
  {
    float v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      double v20 = v6;
    }
  }
  float v7 = this[2];
  long long v21 = v7;
  if ((v7 & 7) != 0)
  {
    __int16 v8 = (atomic_uint *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
      long long v21 = v8;
    }
  }
  float v9 = this[3];
  uint64_t v22 = v9;
  if ((v9 & 7) != 0)
  {
    float v10 = (atomic_uint *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v10, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v22 = v10;
    }
  }
  uint64_t v11 = this[4];
  uint64_t v23 = v11;
  if ((v11 & 7) != 0)
  {
    uint64_t v12 = (atomic_uint *)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v12, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v23 = v12;
    }
  }
  this[5] = 0;
  this[6] = 0;
  this[7] = 0;
  unsigned __int8 v13 = (atomic_uint *)operator new(0x28uLL);
  unint64_t v14 = 0;
  this[5] = v13;
  this[6] = v13;
  this[7] = v13 + 10;
  do
  {
    uint64_t v15 = (&v19)[v14 / 2];
    *(void *)&v13[v14] = v15;
    if ((v15 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v13[v14] &= 0xFFFFFFFFFFFFFFF8;
    }
    v14 += 2;
  }
  while (v14 != 10);
  this[6] = v13 + 10;
  for (uint64_t i = 4; i != -1; --i)
  {
    uint64_t v17 = (&v19)[i];
    if ((v17 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return (pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchemaTokens_StaticTokenType *)this;
}

void sub_217207CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  sub_216889A04(&a9);
  uint64_t v17 = 32;
  while (1)
  {
    uint64_t v18 = *(void *)(&a11 + v17);
    if ((v18 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v17 -= 8;
    if (v17 == -8)
    {
      if ((*v15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchema::GetType(pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171CD7C0(&pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchemaTokens);
  }
  float v6 = *(atomic_uint **)v4;
  if ((*(void *)v4 & 7) != 0)
  {
    uint64_t v5 = (atomic_uint *)(*(void *)v4 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v5, 2u, memory_order_relaxed) & 1) == 0) {
      float v6 = v5;
    }
  }
  sub_21719B418((uint64_t *)this, a2);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchema::GetIndices(pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171CD7C0(&pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchemaTokens);
  }
  uint64_t v5 = (atomic_uint *)*((void *)v4 + 1);
  float v7 = v5;
  if ((v5 & 7) != 0)
  {
    float v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      float v7 = v6;
    }
  }
  sub_21719B238((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchema::BuildRetained(uint64_t *a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  v23[2] = *MEMORY[0x263EF8340];
  v23[0] = 0;
  v23[1] = 0;
  memset(v22, 0, sizeof(v22));
  if (*a1)
  {
    float v6 = (pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchemaTokens);
    if (!v6) {
      float v6 = sub_2171CD7C0(&pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchemaTokens);
    }
    sub_2168D2318(v23, v6);
    uint64_t v8 = *a1;
    uint64_t v7 = a1[1];
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    float v9 = (std::__shared_weak_count *)*((void *)&v22[0] + 1);
    *(void *)&v22[0] = v8;
    *((void *)&v22[0] + 1) = v7;
    if (v9) {
      sub_216784EC4(v9);
    }
    uint64_t v10 = 1;
  }
  else
  {
    uint64_t v10 = 0;
  }
  if (*a2)
  {
    uint64_t v11 = (pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchemaTokens);
    if (!v11) {
      uint64_t v11 = sub_2171CD7C0(&pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchemaTokens);
    }
    sub_2168D2318(&v23[v10], (void *)v11 + 1);
    unint64_t v12 = v10 + 1;
    unsigned __int8 v13 = &v22[v10];
    uint64_t v15 = *a2;
    uint64_t v14 = a2[1];
    if (v14) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v16 = (std::__shared_weak_count *)v13[1];
    *unsigned __int8 v13 = v15;
    v13[1] = v14;
    if (v16) {
      sub_216784EC4(v16);
    }
  }
  else
  {
    unint64_t v12 = v10;
  }
  pxrInternal__aapl__pxrReserved__::HdRetainedContainerDataSource::New(v12, v23, (uint64_t *)v22, &v21);
  *a3 = v21;
  for (uint64_t i = 24; i != -8; i -= 16)
  {
    uint64_t v18 = *(std::__shared_weak_count **)((char *)v22 + i);
    if (v18) {
      sub_216784EC4(v18);
    }
  }
  for (uint64_t j = 1; j != -1; --j)
  {
    uint64_t v20 = v23[j];
    if ((v20 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
}

void sub_217208090(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  uint64_t v17 = 24;
  while (1)
  {
    uint64_t v18 = *(std::__shared_weak_count **)(&a11 + v17);
    if (v18) {
      sub_216784EC4(v18);
    }
    v17 -= 16;
    if (v17 == -8)
    {
      uint64_t v19 = 8;
      while (1)
      {
        uint64_t v20 = *(void *)(&a16 + v19);
        if ((v20 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        v19 -= 8;
        if (v19 == -8) {
          _Unwind_Resume(exception_object);
        }
      }
    }
  }
}

void pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchema::BuildTypeDataSource(pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchema *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchemaTokens);
  if (!v5) {
    uint64_t v5 = sub_2171CD7C0(&pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchemaTokens);
  }
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) == (*((void *)v5 + 2) & 0xFFFFFFFFFFFFFFF8))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B978B0, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_267B978B0))
    {
      sub_2171A3CE4((uint64_t *)this, &qword_267B978A0);
      __cxa_atexit((void (*)(void *))sub_2171A3D6C, &qword_267B978A0, &dword_216758000);
      __cxa_guard_release(&qword_267B978B0);
    }
    uint64_t v8 = &qword_267B978A0;
  }
  else
  {
    float v6 = (pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchemaTokens);
    if (!v6) {
      float v6 = sub_2171CD7C0(&pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchemaTokens);
    }
    if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) == (*((void *)v6 + 3) & 0xFFFFFFFFFFFFFFF8))
    {
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B978C8, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_267B978C8))
      {
        sub_2171A3CE4((uint64_t *)this, &qword_267B978B8);
        __cxa_atexit((void (*)(void *))sub_2171A3D6C, &qword_267B978B8, &dword_216758000);
        __cxa_guard_release(&qword_267B978C8);
      }
      uint64_t v8 = &qword_267B978B8;
    }
    else
    {
      uint64_t v7 = (pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchemaTokens);
      if (!v7) {
        uint64_t v7 = sub_2171CD7C0(&pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchemaTokens);
      }
      if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) != (*((void *)v7 + 4) & 0xFFFFFFFFFFFFFFF8))
      {
        sub_2171A3CE4((uint64_t *)this, &v11);
        *(_OWORD *)a2 = v11;
        return;
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B978E0, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_267B978E0))
      {
        sub_2171A3CE4((uint64_t *)this, &qword_267B978D0);
        __cxa_atexit((void (*)(void *))sub_2171A3D6C, &qword_267B978D0, &dword_216758000);
        __cxa_guard_release(&qword_267B978E0);
      }
      uint64_t v8 = &qword_267B978D0;
    }
  }
  uint64_t v10 = *v8;
  uint64_t v9 = v8[1];
  *(void *)a2 = v10;
  *(void *)(a2 + sub_2171F4108((uint64_t)this + 8) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
}

void sub_217208334(_Unwind_Exception *a1)
{
}

void *pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchema::Builder::SetType(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchema::Builder::SetIndices(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 24);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchema::Builder::Build(pxrInternal__aapl__pxrReserved__::HdGeomSubsetSchema::Builder *this@<X0>, _OWORD *a2@<X8>)
{
}

void pxrInternal__aapl__pxrReserved__::HdGeomSubsetsSchemaTokens_StaticTokenType::~HdGeomSubsetsSchemaTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::HdGeomSubsetsSchemaTokens_StaticTokenType *this)
{
  uint64_t v2 = (void **)((char *)this + 8);
  sub_216889A04(&v2);
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

{
  void **v2;

  uint64_t v2 = (void **)((char *)this + 8);
  sub_216889A04(&v2);
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

pxrInternal__aapl__pxrReserved__::HdGeomSubsetsSchemaTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::HdGeomSubsetsSchemaTokens_StaticTokenType::HdGeomSubsetsSchemaTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::HdGeomSubsetsSchemaTokens_StaticTokenType *this)
{
  uint64_t v2 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "geomSubsets", 0);
  uint64_t v3 = *v2;
  if ((*v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v3 &= 0xFFFFFFFFFFFFFFF8;
  }
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  uint64_t v4 = operator new(8uLL);
  *((void *)this + 1) = v4;
  *((void *)this + 2) = v4;
  void *v4 = v3;
  uint64_t v5 = v4 + 1;
  *((void *)this + 3) = v4 + 1;
  if ((v3 & 7) != 0)
  {
    if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
      *v4 &= 0xFFFFFFFFFFFFFFF8;
    }
    *((void *)this + 2) = v5;
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  else
  {
    *((void *)this + 2) = v5;
  }
  return this;
}

void sub_217208574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v11 = v10;
  sub_216889A04(&a9);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_2173242CC(v9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdGeomSubsetsSchema::GetGeomSubsetNames@<X0>(pxrInternal__aapl__pxrReserved__::HdGeomSubsetsSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t result = *(void *)this;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

void pxrInternal__aapl__pxrReserved__::HdGeomSubsetsSchema::GetGeomSubset(pxrInternal__aapl__pxrReserved__::HdGeomSubsetsSchema *this@<X0>, atomic_uint **a2@<X1>, void *a3@<X8>)
{
  uint64_t v8 = *a2;
  if (((unint64_t)*a2 & 7) != 0)
  {
    uint64_t v4 = (atomic_uint *)((unint64_t)*a2 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v8 = v4;
    }
  }
  sub_217199340((uint64_t *)this, &v9);
  uint64_t v6 = v9;
  uint64_t v5 = v10;
  if (v10)
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    sub_216784EC4(v5);
    uint64_t v7 = v10;
    *a3 = v6;
    a3[1] = v5;
    if (v7) {
      sub_216784EC4(v7);
    }
  }
  else
  {
    *a3 = v9;
    a3[1] = 0;
  }
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

double pxrInternal__aapl__pxrReserved__::HdGeomSubsetsSchema::BuildRetained@<D0>(unint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, _OWORD *a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::HdRetainedContainerDataSource::New(a1, a2, a3, &v6);
  double result = *(double *)&v6;
  *a4 = v6;
  return result;
}

void pxrInternal__aapl__pxrReserved__::HdGeomSubsetsSchema::GetFromParent(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdGeomSubsetsSchemaTokens)) {
      sub_217208818(&pxrInternal__aapl__pxrReserved__::HdGeomSubsetsSchemaTokens);
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v3 + 24))(&v8, v3);
    sub_2171997C0((uint64_t)&v8, &v10);
    uint64_t v6 = v10;
    uint64_t v5 = v11;
    if (v11)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_216784EC4(v5);
      uint64_t v7 = v11;
      *a2 = v6;
      a2[1] = v5;
      if (v7) {
        sub_216784EC4(v7);
      }
    }
    else
    {
      *a2 = v10;
      a2[1] = 0;
    }
    if (v9) {
      sub_216784EC4(v9);
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    *a2 = 0;
    a2[1] = 0;
  }
}

unint64_t pxrInternal__aapl__pxrReserved__::HdGeomSubsetsSchema::GetSchemaToken(pxrInternal__aapl__pxrReserved__::HdGeomSubsetsSchema *this)
{
  unint64_t result = atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdGeomSubsetsSchemaTokens);
  if (!result) {
    return sub_217208818(&pxrInternal__aapl__pxrReserved__::HdGeomSubsetsSchemaTokens);
  }
  return result;
}

unint64_t sub_217208818(atomic_ullong *a1)
{
  uint64_t v2 = sub_217208898();
  uint64_t v3 = v2;
  uint64_t v4 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v4, (unint64_t)v2);
  if (v4)
  {
    if (v2)
    {
      uint64_t v6 = (void **)((char *)v2 + 8);
      sub_216889A04(&v6);
      if ((*(void *)v3 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v3);
    }
    return atomic_load((unint64_t *)a1);
  }
  return (unint64_t)v3;
}

pxrInternal__aapl__pxrReserved__::HdGeomSubsetsSchemaTokens_StaticTokenType *sub_217208898()
{
  uint64_t v0 = (pxrInternal__aapl__pxrReserved__::HdGeomSubsetsSchemaTokens_StaticTokenType *)operator new(0x20uLL);
  pxrInternal__aapl__pxrReserved__::HdGeomSubsetsSchemaTokens_StaticTokenType::HdGeomSubsetsSchemaTokens_StaticTokenType(v0);
  return v0;
}

void sub_2172088C8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdImageShaderTokens_StaticTokenType::~HdImageShaderTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::HdImageShaderTokens_StaticTokenType *this)
{
  uint64_t v5 = (void **)((char *)this + 32);
  sub_216889A04(&v5);
  uint64_t v2 = *((void *)this + 3);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 2);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *((void *)this + 1);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

pxrInternal__aapl__pxrReserved__::HdImageShaderTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::HdImageShaderTokens_StaticTokenType::HdImageShaderTokens_StaticTokenType(atomic_uint **this)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v2 = (atomic_uint **)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "enabled", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2, "priority", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 2, "filePath", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 3, "constants", 0);
  uint64_t v3 = *this;
  uint64_t v17 = v3;
  if ((v3 & 7) != 0)
  {
    uint64_t v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v17 = v4;
    }
  }
  uint64_t v5 = *v2;
  uint64_t v18 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v18 = v6;
    }
  }
  uint64_t v7 = this[2];
  uint64_t v19 = v7;
  if ((v7 & 7) != 0)
  {
    uint64_t v8 = (atomic_uint *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v19 = v8;
    }
  }
  uint64_t v9 = this[3];
  uint64_t v20 = v9;
  if ((v9 & 7) != 0)
  {
    uint64_t v10 = (atomic_uint *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v10, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v20 = v10;
    }
  }
  this[4] = 0;
  this[5] = 0;
  this[6] = 0;
  uint64_t v11 = (atomic_uint *)operator new(0x20uLL);
  unint64_t v12 = 0;
  this[4] = v11;
  this[5] = v11;
  this[6] = v11 + 8;
  do
  {
    unsigned __int8 v13 = (&v17)[v12 / 2];
    *(void *)&v11[v12] = v13;
    if ((v13 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v11[v12] &= 0xFFFFFFFFFFFFFFF8;
    }
    v12 += 2;
  }
  while (v12 != 8);
  this[5] = v11 + 8;
  for (uint64_t i = 3; i != -1; --i)
  {
    uint64_t v15 = (&v17)[i];
    if ((v15 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return (pxrInternal__aapl__pxrReserved__::HdImageShaderTokens_StaticTokenType *)this;
}

void sub_217208B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  sub_216889A04(&a10);
  uint64_t v17 = 24;
  while (1)
  {
    uint64_t v18 = *(void *)(&a12 + v17);
    if ((v18 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v17 -= 8;
    if (v17 == -8)
    {
      if ((*v15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

double pxrInternal__aapl__pxrReserved__::HdImageShader::HdImageShader(pxrInternal__aapl__pxrReserved__::HdImageShader *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v2 = pxrInternal__aapl__pxrReserved__::HdSprim::HdSprim(this, a2);
  *(void *)uint64_t v2 = &unk_26C781078;
  *((unsigned char *)v2 + 16) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)v2 + 20) = 0u;
  *(_OWORD *)((char *)v2 + 36) = 0u;
  *((_DWORD *)v2 + 13) = 0;
  return result;
}

{
  pxrInternal__aapl__pxrReserved__::HdSprim *v2;
  double result;

  uint64_t v2 = pxrInternal__aapl__pxrReserved__::HdSprim::HdSprim(this, a2);
  *(void *)uint64_t v2 = &unk_26C781078;
  *((unsigned char *)v2 + 16) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)v2 + 20) = 0u;
  *(_OWORD *)((char *)v2 + 36) = 0u;
  *((_DWORD *)v2 + 13) = 0;
  return result;
}

void pxrInternal__aapl__pxrReserved__::HdImageShader::~HdImageShader(pxrInternal__aapl__pxrReserved__::HdImageShader *this)
{
  *(void *)this = &unk_26C781078;
  sub_2168EBBB8((void ***)this + 6, 0);
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }

  pxrInternal__aapl__pxrReserved__::HdSprim::~HdSprim(this);
}

{
  void *v1;
  uint64_t vars8;

  pxrInternal__aapl__pxrReserved__::HdImageShader::~HdImageShader(this);

  operator delete(v1);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdImageShader::Sync(pxrInternal__aapl__pxrReserved__::HdImageShader *this, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *a2, pxrInternal__aapl__pxrReserved__::HdRenderParam *a3, unsigned int *a4)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t result = sub_216851EE4((uint64_t)&v16, "hd", "virtual void pxrInternal__aapl__pxrReserved__::HdImageShader::Sync(HdSceneDelegate *, HdRenderParam *, HdDirtyBits *)");
  if (a2
    || (uint64_t v18 = "hd/imageShader.cpp",
        uint64_t v19 = "Sync",
        uint64_t v20 = 54,
        uint64_t v21 = "virtual void pxrInternal__aapl__pxrReserved__::HdImageShader::Sync(HdSceneDelegate *, HdRenderParam *, HdDirtyBits *)",
        char v22 = 0,
        uint64_t result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v18, "sceneDelegate != nullptr", 0),
        (result & 1) != 0))
  {
    int v8 = *a4;
    if (*a4)
    {
      if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdImageShaderTokens)) {
        sub_2172090A4(&pxrInternal__aapl__pxrReserved__::HdImageShaderTokens);
      }
      (*(void (**)(char **__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *))(*(void *)a2 + 120))(&v18, a2, (char *)this + 8);
      if (v19) {
        *((unsigned char *)this + 16) = *(unsigned char *)sub_216958184((pxrInternal__aapl__pxrReserved__::VtValue *)&v18);
      }
      uint64_t result = sub_2168EE084((uint64_t)&v18);
    }
    if ((v8 & 2) != 0)
    {
      uint64_t v10 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdImageShaderTokens);
      if (!v10) {
        uint64_t v10 = sub_2172090A4(&pxrInternal__aapl__pxrReserved__::HdImageShaderTokens);
      }
      (*(void (**)(char **__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *, atomic_uint **))(*(void *)a2 + 120))(&v18, a2, (char *)this + 8, v10 + 1);
      if (v19) {
        *((_DWORD *)this + 5) = *(_DWORD *)sub_216959558((pxrInternal__aapl__pxrReserved__::VtValue *)&v18);
      }
      uint64_t result = sub_2168EE084((uint64_t)&v18);
    }
    if ((v8 & 4) != 0)
    {
      uint64_t v11 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdImageShaderTokens);
      if (!v11) {
        uint64_t v11 = sub_2172090A4(&pxrInternal__aapl__pxrReserved__::HdImageShaderTokens);
      }
      (*(void (**)(char **__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *, atomic_uint **))(*(void *)a2 + 120))(&v18, a2, (char *)this + 8, v11 + 2);
      if (v19)
      {
        unint64_t v12 = (const std::string *)sub_21695A928((pxrInternal__aapl__pxrReserved__::VtValue *)&v18);
        std::string::operator=((std::string *)this + 1, v12);
      }
      uint64_t result = sub_2168EE084((uint64_t)&v18);
    }
    if ((v8 & 8) != 0)
    {
      unsigned __int8 v13 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdImageShaderTokens);
      if (!v13) {
        unsigned __int8 v13 = sub_2172090A4(&pxrInternal__aapl__pxrReserved__::HdImageShaderTokens);
      }
      (*(void (**)(char **__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *, atomic_uint **))(*(void *)a2 + 120))(&v18, a2, (char *)this + 8, v13 + 3);
      if (v19)
      {
        uint64_t v14 = (const void ****)sub_2168EF25C((pxrInternal__aapl__pxrReserved__::VtValue *)&v18);
        pxrInternal__aapl__pxrReserved__::VtDictionary::operator=((const void ****)this + 6, v14);
      }
      uint64_t result = sub_2168EE084((uint64_t)&v18);
    }
    *a4 = 0;
  }
  while (v17--)
    uint64_t result = pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v16);
  return result;
}

void sub_217209020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::HdImageShader::GetInitialDirtyBitsMask(pxrInternal__aapl__pxrReserved__::HdImageShader *this)
{
  return 15;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdImageShader::GetEnabled(pxrInternal__aapl__pxrReserved__::HdImageShader *this)
{
  return *((unsigned __int8 *)this + 16);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdImageShader::GetPriority(pxrInternal__aapl__pxrReserved__::HdImageShader *this)
{
  return *((unsigned int *)this + 5);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdImageShader::GetFilePath(pxrInternal__aapl__pxrReserved__::HdImageShader *this)
{
  return (uint64_t)this + 24;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdImageShader::GetConstants(pxrInternal__aapl__pxrReserved__::HdImageShader *this)
{
  return (uint64_t)this + 48;
}

atomic_uint **sub_2172090A4(atomic_ullong *a1)
{
  uint64_t result = sub_2172090EC();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::HdImageShaderTokens_StaticTokenType::~HdImageShaderTokens_StaticTokenType((pxrInternal__aapl__pxrReserved__::HdImageShaderTokens_StaticTokenType *)result);
      operator delete(v4);
    }
    return (atomic_uint **)atomic_load((unint64_t *)a1);
  }
  return result;
}

atomic_uint **sub_2172090EC()
{
  uint64_t v0 = (atomic_uint **)operator new(0x38uLL);
  pxrInternal__aapl__pxrReserved__::HdImageShaderTokens_StaticTokenType::HdImageShaderTokens_StaticTokenType(v0);
  return v0;
}

void sub_21720911C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens_StaticTokenType::~HdImageShaderSchemaTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens_StaticTokenType *this)
{
  uint64_t v6 = (void **)((char *)this + 40);
  sub_216889A04(&v6);
  uint64_t v2 = *((void *)this + 4);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 3);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *((void *)this + 2);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *((void *)this + 1);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens_StaticTokenType::HdImageShaderSchemaTokens_StaticTokenType(atomic_uint **this)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v2 = (atomic_uint **)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "imageShader", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2, "enabled", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 2, "priority", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 3, "filePath", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 4, "constants", 0);
  uint64_t v3 = *this;
  uint64_t v19 = v3;
  if ((v3 & 7) != 0)
  {
    uint64_t v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v19 = v4;
    }
  }
  uint64_t v5 = *v2;
  uint64_t v20 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v20 = v6;
    }
  }
  uint64_t v7 = this[2];
  uint64_t v21 = v7;
  if ((v7 & 7) != 0)
  {
    int v8 = (atomic_uint *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v21 = v8;
    }
  }
  uint64_t v9 = this[3];
  char v22 = v9;
  if ((v9 & 7) != 0)
  {
    uint64_t v10 = (atomic_uint *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v10, 2u, memory_order_relaxed) & 1) == 0) {
      char v22 = v10;
    }
  }
  uint64_t v11 = this[4];
  uint64_t v23 = v11;
  if ((v11 & 7) != 0)
  {
    unint64_t v12 = (atomic_uint *)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v12, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v23 = v12;
    }
  }
  this[5] = 0;
  this[6] = 0;
  this[7] = 0;
  unsigned __int8 v13 = (atomic_uint *)operator new(0x28uLL);
  unint64_t v14 = 0;
  this[5] = v13;
  this[6] = v13;
  this[7] = v13 + 10;
  do
  {
    uint64_t v15 = (&v19)[v14 / 2];
    *(void *)&v13[v14] = v15;
    if ((v15 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v13[v14] &= 0xFFFFFFFFFFFFFFF8;
    }
    v14 += 2;
  }
  while (v14 != 10);
  this[6] = v13 + 10;
  for (uint64_t i = 4; i != -1; --i)
  {
    int v17 = (&v19)[i];
    if ((v17 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return (pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens_StaticTokenType *)this;
}

void sub_217209410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  sub_216889A04(&a9);
  uint64_t v17 = 32;
  while (1)
  {
    uint64_t v18 = *(void *)(&a11 + v17);
    if ((v18 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v17 -= 8;
    if (v17 == -8)
    {
      if ((*v15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void pxrInternal__aapl__pxrReserved__::HdImageShaderSchema::GetEnabled(pxrInternal__aapl__pxrReserved__::HdImageShaderSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171C1D88(&pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens);
  }
  uint64_t v5 = (atomic_uint *)*((void *)v4 + 1);
  uint64_t v7 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v7 = v6;
    }
  }
  sub_2171A26A0((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdImageShaderSchema::GetPriority(pxrInternal__aapl__pxrReserved__::HdImageShaderSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171C1D88(&pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens);
  }
  uint64_t v5 = (atomic_uint *)*((void *)v4 + 2);
  uint64_t v7 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v7 = v6;
    }
  }
  sub_217209654((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_217209654(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (v3)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v3 + 24))(&v4);
    sub_21720A1A0((uint64_t)&v4, a2);
    if (v5) {
      sub_216784EC4(v5);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

void pxrInternal__aapl__pxrReserved__::HdImageShaderSchema::GetFilePath(pxrInternal__aapl__pxrReserved__::HdImageShaderSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171C1D88(&pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens);
  }
  uint64_t v5 = (atomic_uint *)*((void *)v4 + 3);
  uint64_t v7 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v7 = v6;
    }
  }
  sub_2171F8258((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdImageShaderSchema::GetConstants(pxrInternal__aapl__pxrReserved__::HdImageShaderSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171C1D88(&pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens);
  }
  uint64_t v5 = (atomic_uint *)*((void *)v4 + 4);
  uint64_t v7 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v7 = v6;
    }
  }
  sub_217199340((uint64_t *)this, &v8);
  sub_2171E3D6C(a2, &v8);
  if (v9) {
    sub_216784EC4(v9);
  }
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_217209830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_216784EC4(a12);
  }
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::HdImageShaderSchema::BuildRetained(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  memset(v39, 0, sizeof(v39));
  memset(v38, 0, sizeof(v38));
  if (*a1)
  {
    uint64_t v10 = (pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens);
    if (!v10) {
      uint64_t v10 = sub_2171C1D88(&pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens);
    }
    sub_2168D2318(v39, (void *)v10 + 1);
    uint64_t v12 = *a1;
    uint64_t v11 = a1[1];
    if (v11) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    }
    unsigned __int8 v13 = (std::__shared_weak_count *)*((void *)&v38[0] + 1);
    *(void *)&v38[0] = v12;
    *((void *)&v38[0] + 1) = v11;
    if (v13) {
      sub_216784EC4(v13);
    }
    uint64_t v14 = 1;
  }
  else
  {
    uint64_t v14 = 0;
  }
  if (*a2)
  {
    uint64_t v15 = (pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens);
    if (!v15) {
      uint64_t v15 = sub_2171C1D88(&pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens);
    }
    sub_2168D2318((void *)((unint64_t)v39 | (8 * v14)), (void *)v15 + 2);
    uint64_t v16 = v14 + 1;
    uint64_t v17 = &v38[v14];
    uint64_t v19 = *a2;
    uint64_t v18 = a2[1];
    if (v18) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v20 = (std::__shared_weak_count *)v17[1];
    *uint64_t v17 = v19;
    v17[1] = v18;
    if (v20) {
      sub_216784EC4(v20);
    }
  }
  else
  {
    uint64_t v16 = v14;
  }
  if (*a3)
  {
    uint64_t v21 = (pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens);
    if (!v21) {
      uint64_t v21 = sub_2171C1D88(&pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens);
    }
    sub_2168D2318((void *)v39 + v16, (void *)v21 + 3);
    unint64_t v22 = v16 + 1;
    uint64_t v23 = &v38[v16];
    uint64_t v25 = *a3;
    uint64_t v24 = a3[1];
    if (v24) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
    }
    double v26 = (std::__shared_weak_count *)v23[1];
    *uint64_t v23 = v25;
    v23[1] = v24;
    if (v26) {
      sub_216784EC4(v26);
    }
  }
  else
  {
    unint64_t v22 = v16;
  }
  if (*a4)
  {
    double v27 = (pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens);
    if (!v27) {
      double v27 = sub_2171C1D88(&pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens);
    }
    sub_2168D2318((void *)v39 + v22, (void *)v27 + 4);
    unint64_t v28 = v22 + 1;
    double v29 = &v38[v22];
    uint64_t v31 = *a4;
    uint64_t v30 = a4[1];
    if (v30) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v30 + 8), 1uLL, memory_order_relaxed);
    }
    double v32 = (std::__shared_weak_count *)v29[1];
    void *v29 = v31;
    v29[1] = v30;
    if (v32) {
      sub_216784EC4(v32);
    }
  }
  else
  {
    unint64_t v28 = v22;
  }
  pxrInternal__aapl__pxrReserved__::HdRetainedContainerDataSource::New(v28, (uint64_t *)v39, (uint64_t *)v38, &v37);
  *a5 = v37;
  for (uint64_t i = 56; i != -8; i -= 16)
  {
    double v34 = *(std::__shared_weak_count **)((char *)v38 + i);
    if (v34) {
      sub_216784EC4(v34);
    }
  }
  for (uint64_t j = 24; j != -8; j -= 8)
  {
    uint64_t v36 = *(void *)((char *)v39 + j);
    if ((v36 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
}

void sub_217209AF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v20 = 56;
  while (1)
  {
    uint64_t v21 = *(std::__shared_weak_count **)(&a11 + v20);
    if (v21) {
      sub_216784EC4(v21);
    }
    v20 -= 16;
    if (v20 == -8)
    {
      uint64_t v22 = 24;
      while (1)
      {
        uint64_t v23 = *(void *)(&a19 + v22);
        if ((v23 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        v22 -= 8;
        if (v22 == -8) {
          _Unwind_Resume(exception_object);
        }
      }
    }
  }
}

void *pxrInternal__aapl__pxrReserved__::HdImageShaderSchema::Builder::SetEnabled(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdImageShaderSchema::Builder::SetPriority(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 24);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdImageShaderSchema::Builder::SetFilePath(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 40);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdImageShaderSchema::Builder::SetConstants(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 56);
  *(void *)(a1 + 4sub_2171F4108((uint64_t)this + 8) = v4;
  *(void *)(a1 + 56) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::HdImageShaderSchema::Builder::Build(pxrInternal__aapl__pxrReserved__::HdImageShaderSchema::Builder *this@<X0>, _OWORD *a2@<X8>)
{
}

void pxrInternal__aapl__pxrReserved__::HdImageShaderSchema::GetFromParent(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens)) {
      sub_2171C1D88(&pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens);
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v3 + 24))(&v8, v3);
    sub_2171997C0((uint64_t)&v8, &v10);
    uint64_t v6 = v10;
    uint64_t v5 = v11;
    if (v11)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_216784EC4(v5);
      uint64_t v7 = v11;
      *a2 = v6;
      a2[1] = v5;
      if (v7) {
        sub_216784EC4(v7);
      }
    }
    else
    {
      *a2 = v10;
      a2[1] = 0;
    }
    if (v9) {
      sub_216784EC4(v9);
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    *a2 = 0;
    a2[1] = 0;
  }
}

pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::HdImageShaderSchema::GetSchemaToken(pxrInternal__aapl__pxrReserved__::HdImageShaderSchema *this)
{
  uint64_t result = (pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens);
  if (!result) {
    return sub_2171C1D88(&pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens);
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::HdImageShaderSchema::GetDefaultLocator(pxrInternal__aapl__pxrReserved__::HdImageShaderSchema *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B97920, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B97920))
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens);
    if (!v2) {
      uint64_t v2 = sub_2171C1D88(&pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens);
    }
    pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&unk_267B978E8, v2);
    __cxa_atexit((void (*)(void *))sub_217199930, &unk_267B978E8, &dword_216758000);
    __cxa_guard_release(&qword_267B97920);
  }
  return &unk_267B978E8;
}

void sub_217209E58(_Unwind_Exception *a1)
{
}

_DWORD *pxrInternal__aapl__pxrReserved__::HdImageShaderSchema::GetEnabledLocator(pxrInternal__aapl__pxrReserved__::HdImageShaderSchema *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B97960, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::HdImageShaderSchema *)__cxa_guard_acquire(&qword_267B97960);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::HdImageShaderSchema::GetDefaultLocator(v2);
      uint64_t v3 = (pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens);
      if (!v3) {
        uint64_t v3 = sub_2171C1D88(&pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens);
      }
      pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::Append((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&unk_267B978E8, (pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens_StaticTokenType *)((char *)v3 + 8), dword_267B97928);
      __cxa_atexit((void (*)(void *))sub_217199930, dword_267B97928, &dword_216758000);
      __cxa_guard_release(&qword_267B97960);
    }
  }
  return dword_267B97928;
}

void sub_217209F24(_Unwind_Exception *a1)
{
}

_DWORD *pxrInternal__aapl__pxrReserved__::HdImageShaderSchema::GetPriorityLocator(pxrInternal__aapl__pxrReserved__::HdImageShaderSchema *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B979A0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::HdImageShaderSchema *)__cxa_guard_acquire(&qword_267B979A0);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::HdImageShaderSchema::GetDefaultLocator(v2);
      uint64_t v3 = (pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens);
      if (!v3) {
        uint64_t v3 = sub_2171C1D88(&pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens);
      }
      pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::Append((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&unk_267B978E8, (pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens_StaticTokenType *)((char *)v3 + 16), dword_267B97968);
      __cxa_atexit((void (*)(void *))sub_217199930, dword_267B97968, &dword_216758000);
      __cxa_guard_release(&qword_267B979A0);
    }
  }
  return dword_267B97968;
}

void sub_217209FF0(_Unwind_Exception *a1)
{
}

_DWORD *pxrInternal__aapl__pxrReserved__::HdImageShaderSchema::GetFilePathLocator(pxrInternal__aapl__pxrReserved__::HdImageShaderSchema *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B979E0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::HdImageShaderSchema *)__cxa_guard_acquire(&qword_267B979E0);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::HdImageShaderSchema::GetDefaultLocator(v2);
      uint64_t v3 = (pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens);
      if (!v3) {
        uint64_t v3 = sub_2171C1D88(&pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens);
      }
      pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::Append((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&unk_267B978E8, (pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens_StaticTokenType *)((char *)v3 + 24), dword_267B979A8);
      __cxa_atexit((void (*)(void *))sub_217199930, dword_267B979A8, &dword_216758000);
      __cxa_guard_release(&qword_267B979E0);
    }
  }
  return dword_267B979A8;
}

void sub_21720A0BC(_Unwind_Exception *a1)
{
}

_DWORD *pxrInternal__aapl__pxrReserved__::HdImageShaderSchema::GetConstantsLocator(pxrInternal__aapl__pxrReserved__::HdImageShaderSchema *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B97A20, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::HdImageShaderSchema *)__cxa_guard_acquire(&qword_267B97A20);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::HdImageShaderSchema::GetDefaultLocator(v2);
      uint64_t v3 = (pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens);
      if (!v3) {
        uint64_t v3 = sub_2171C1D88(&pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens);
      }
      pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::Append((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&unk_267B978E8, (pxrInternal__aapl__pxrReserved__::HdImageShaderSchemaTokens_StaticTokenType *)((char *)v3 + 32), dword_267B979E8);
      __cxa_atexit((void (*)(void *))sub_217199930, dword_267B979E8, &dword_216758000);
      __cxa_guard_release(&qword_267B97A20);
    }
  }
  return dword_267B979E8;
}

void sub_21720A188(_Unwind_Exception *a1)
{
}

void *sub_21720A1A0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = *(void **)a1;
  if (result
    && (uint64_t result = __dynamic_cast(result, (const struct __class_type_info *)&unk_26C77BD10, (const struct __class_type_info *)&unk_26C77D168, 0)) != 0)
  {
    uint64_t v5 = *(void *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::HdInstanceCategoriesSchemaTokens_StaticTokenType::~HdInstanceCategoriesSchemaTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::HdInstanceCategoriesSchemaTokens_StaticTokenType *this)
{
  uint64_t v3 = (void **)((char *)this + 16);
  sub_216889A04(&v3);
  uint64_t v2 = *((void *)this + 1);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

pxrInternal__aapl__pxrReserved__::HdInstanceCategoriesSchemaTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::HdInstanceCategoriesSchemaTokens_StaticTokenType::HdInstanceCategoriesSchemaTokens_StaticTokenType(atomic_uint **this)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v2 = (atomic_uint **)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "instanceCategories", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2, "categoriesValues", 0);
  uint64_t v3 = *this;
  unsigned __int8 v13 = v3;
  if ((v3 & 7) != 0)
  {
    uint64_t v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
      unsigned __int8 v13 = v4;
    }
  }
  uint64_t v5 = *v2;
  uint64_t v14 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v14 = v6;
    }
  }
  this[2] = 0;
  this[3] = 0;
  this[4] = 0;
  uint64_t v7 = (atomic_uint *)operator new(0x10uLL);
  unint64_t v8 = 0;
  this[2] = v7;
  this[3] = v7;
  this[4] = v7 + 4;
  do
  {
    uint64_t v9 = (&v13)[v8 / 2];
    *(void *)&v7[v8] = v9;
    if ((v9 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v7[v8] &= 0xFFFFFFFFFFFFFFF8;
    }
    v8 += 2;
  }
  while (v8 != 4);
  this[3] = v7 + 4;
  for (uint64_t i = 1; i != -1; --i)
  {
    uint64_t v11 = (&v13)[i];
    if ((v11 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return (pxrInternal__aapl__pxrReserved__::HdInstanceCategoriesSchemaTokens_StaticTokenType *)this;
}

void sub_21720A40C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  sub_216889A04(&a10);
  uint64_t v15 = 8;
  while (1)
  {
    uint64_t v16 = *(void *)(&a12 + v15);
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v15 -= 8;
    if (v15 == -8)
    {
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void pxrInternal__aapl__pxrReserved__::HdInstanceCategoriesSchema::GetCategoriesValues(pxrInternal__aapl__pxrReserved__::HdInstanceCategoriesSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdInstanceCategoriesSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdInstanceCategoriesSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171C21E8(&pxrInternal__aapl__pxrReserved__::HdInstanceCategoriesSchemaTokens);
  }
  uint64_t v5 = (atomic_uint *)*((void *)v4 + 1);
  uint64_t v7 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v7 = v6;
    }
  }
  sub_2171E466C((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdInstanceCategoriesSchema::BuildRetained(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  v11[1] = *MEMORY[0x263EF8340];
  uint64_t v10 = 0;
  v11[0] = 0;
  uint64_t v9 = 0;
  if (*a1)
  {
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdInstanceCategoriesSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdInstanceCategoriesSchemaTokens);
    if (!v4) {
      uint64_t v4 = sub_2171C21E8(&pxrInternal__aapl__pxrReserved__::HdInstanceCategoriesSchemaTokens);
    }
    sub_2168D2318(v11, (void *)v4 + 1);
    uint64_t v6 = *a1;
    uint64_t v5 = (std::__shared_weak_count *)a1[1];
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v6;
    uint64_t v10 = v5;
    unint64_t v7 = 1;
  }
  else
  {
    unint64_t v7 = 0;
  }
  pxrInternal__aapl__pxrReserved__::HdRetainedContainerDataSource::New(v7, v11, &v9, &v8);
  *a2 = v8;
  if (v10) {
    sub_216784EC4(v10);
  }
  if ((v11[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_21720A63C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13)
{
  if (a12) {
    sub_216784EC4(a12);
  }
  if ((a13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::HdInstanceCategoriesSchema::GetFromParent(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdInstanceCategoriesSchemaTokens)) {
      sub_2171C21E8(&pxrInternal__aapl__pxrReserved__::HdInstanceCategoriesSchemaTokens);
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v3 + 24))(&v8, v3);
    sub_2171997C0((uint64_t)&v8, &v10);
    uint64_t v6 = v10;
    uint64_t v5 = v11;
    if (v11)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_216784EC4(v5);
      unint64_t v7 = v11;
      *a2 = v6;
      a2[1] = v5;
      if (v7) {
        sub_216784EC4(v7);
      }
    }
    else
    {
      *a2 = v10;
      a2[1] = 0;
    }
    if (v9) {
      sub_216784EC4(v9);
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    *a2 = 0;
    a2[1] = 0;
  }
}

pxrInternal__aapl__pxrReserved__::HdInstanceCategoriesSchemaTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::HdInstanceCategoriesSchema::GetSchemaToken(pxrInternal__aapl__pxrReserved__::HdInstanceCategoriesSchema *this)
{
  uint64_t result = (pxrInternal__aapl__pxrReserved__::HdInstanceCategoriesSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdInstanceCategoriesSchemaTokens);
  if (!result) {
    return sub_2171C21E8(&pxrInternal__aapl__pxrReserved__::HdInstanceCategoriesSchemaTokens);
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::HdInstanceCategoriesSchema::GetDefaultLocator(pxrInternal__aapl__pxrReserved__::HdInstanceCategoriesSchema *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B97A60, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B97A60))
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::HdInstanceCategoriesSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdInstanceCategoriesSchemaTokens);
    if (!v2) {
      uint64_t v2 = sub_2171C21E8(&pxrInternal__aapl__pxrReserved__::HdInstanceCategoriesSchemaTokens);
    }
    pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&unk_267B97A28, v2);
    __cxa_atexit((void (*)(void *))sub_217199930, &unk_267B97A28, &dword_216758000);
    __cxa_guard_release(&qword_267B97A60);
  }
  return &unk_267B97A28;
}

void sub_21720A844(_Unwind_Exception *a1)
{
}

void *pxrInternal__aapl__pxrReserved__::HdInstanceCategoriesSchema::Builder::SetCategoriesValues(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::HdInstancedBySchemaTokens_StaticTokenType::~HdInstancedBySchemaTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::HdInstancedBySchemaTokens_StaticTokenType *this)
{
  uint64_t v4 = (void **)((char *)this + 24);
  sub_216889A04(&v4);
  uint64_t v2 = *((void *)this + 2);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 1);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

pxrInternal__aapl__pxrReserved__::HdInstancedBySchemaTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::HdInstancedBySchemaTokens_StaticTokenType::HdInstancedBySchemaTokens_StaticTokenType(atomic_uint **this)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v2 = (atomic_uint **)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "instancedBy", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2, "paths", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 2, "prototypeRoots", 0);
  uint64_t v3 = *this;
  uint64_t v15 = v3;
  if ((v3 & 7) != 0)
  {
    uint64_t v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v15 = v4;
    }
  }
  uint64_t v5 = *v2;
  uint64_t v16 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v16 = v6;
    }
  }
  unint64_t v7 = this[2];
  uint64_t v17 = v7;
  if ((v7 & 7) != 0)
  {
    uint64_t v8 = (atomic_uint *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v17 = v8;
    }
  }
  this[3] = 0;
  this[4] = 0;
  this[5] = 0;
  uint64_t v9 = (atomic_uint *)operator new(0x18uLL);
  unint64_t v10 = 0;
  this[3] = v9;
  this[4] = v9;
  this[5] = v9 + 6;
  do
  {
    uint64_t v11 = (&v15)[v10 / 2];
    *(void *)&v9[v10] = v11;
    if ((v11 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v9[v10] &= 0xFFFFFFFFFFFFFFF8;
    }
    v10 += 2;
  }
  while (v10 != 6);
  this[4] = v9 + 6;
  for (uint64_t i = 2; i != -1; --i)
  {
    unsigned __int8 v13 = (&v15)[i];
    if ((v13 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return (pxrInternal__aapl__pxrReserved__::HdInstancedBySchemaTokens_StaticTokenType *)this;
}

void sub_21720AAD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  sub_216889A04(&a9);
  uint64_t v15 = 16;
  while (1)
  {
    uint64_t v16 = *(void *)(&a11 + v15);
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v15 -= 8;
    if (v15 == -8)
    {
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void pxrInternal__aapl__pxrReserved__::HdInstancedBySchema::GetPaths(pxrInternal__aapl__pxrReserved__::HdInstancedBySchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdInstancedBySchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdInstancedBySchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171C2274(&pxrInternal__aapl__pxrReserved__::HdInstancedBySchemaTokens);
  }
  uint64_t v5 = (atomic_uint *)*((void *)v4 + 1);
  unint64_t v7 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      unint64_t v7 = v6;
    }
  }
  sub_21720AC28((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_21720AC28(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (v3)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v3 + 24))(&v4);
    sub_21720B1E0((uint64_t)&v4, a2);
    if (v5) {
      sub_216784EC4(v5);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

void pxrInternal__aapl__pxrReserved__::HdInstancedBySchema::GetPrototypeRoots(pxrInternal__aapl__pxrReserved__::HdInstancedBySchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdInstancedBySchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdInstancedBySchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171C2274(&pxrInternal__aapl__pxrReserved__::HdInstancedBySchemaTokens);
  }
  uint64_t v5 = (atomic_uint *)*((void *)v4 + 2);
  unint64_t v7 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      unint64_t v7 = v6;
    }
  }
  sub_21720AC28((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdInstancedBySchema::BuildRetained(uint64_t *a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  v23[2] = *MEMORY[0x263EF8340];
  v23[0] = 0;
  v23[1] = 0;
  memset(v22, 0, sizeof(v22));
  if (*a1)
  {
    uint64_t v6 = (pxrInternal__aapl__pxrReserved__::HdInstancedBySchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdInstancedBySchemaTokens);
    if (!v6) {
      uint64_t v6 = sub_2171C2274(&pxrInternal__aapl__pxrReserved__::HdInstancedBySchemaTokens);
    }
    sub_2168D2318(v23, (void *)v6 + 1);
    uint64_t v8 = *a1;
    uint64_t v7 = a1[1];
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = (std::__shared_weak_count *)*((void *)&v22[0] + 1);
    *(void *)&v22[0] = v8;
    *((void *)&v22[0] + 1) = v7;
    if (v9) {
      sub_216784EC4(v9);
    }
    uint64_t v10 = 1;
  }
  else
  {
    uint64_t v10 = 0;
  }
  if (*a2)
  {
    uint64_t v11 = (pxrInternal__aapl__pxrReserved__::HdInstancedBySchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdInstancedBySchemaTokens);
    if (!v11) {
      uint64_t v11 = sub_2171C2274(&pxrInternal__aapl__pxrReserved__::HdInstancedBySchemaTokens);
    }
    sub_2168D2318(&v23[v10], (void *)v11 + 2);
    unint64_t v12 = v10 + 1;
    unsigned __int8 v13 = &v22[v10];
    uint64_t v15 = *a2;
    uint64_t v14 = a2[1];
    if (v14) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v16 = (std::__shared_weak_count *)v13[1];
    *unsigned __int8 v13 = v15;
    v13[1] = v14;
    if (v16) {
      sub_216784EC4(v16);
    }
  }
  else
  {
    unint64_t v12 = v10;
  }
  pxrInternal__aapl__pxrReserved__::HdRetainedContainerDataSource::New(v12, v23, (uint64_t *)v22, &v21);
  *a3 = v21;
  for (uint64_t i = 24; i != -8; i -= 16)
  {
    uint64_t v18 = *(std::__shared_weak_count **)((char *)v22 + i);
    if (v18) {
      sub_216784EC4(v18);
    }
  }
  for (uint64_t j = 1; j != -1; --j)
  {
    uint64_t v20 = v23[j];
    if ((v20 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
}

void sub_21720AF00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  uint64_t v17 = 24;
  while (1)
  {
    uint64_t v18 = *(std::__shared_weak_count **)(&a11 + v17);
    if (v18) {
      sub_216784EC4(v18);
    }
    v17 -= 16;
    if (v17 == -8)
    {
      uint64_t v19 = 8;
      while (1)
      {
        uint64_t v20 = *(void *)(&a16 + v19);
        if ((v20 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        v19 -= 8;
        if (v19 == -8) {
          _Unwind_Resume(exception_object);
        }
      }
    }
  }
}

void pxrInternal__aapl__pxrReserved__::HdInstancedBySchema::GetFromParent(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdInstancedBySchemaTokens)) {
      sub_2171C2274(&pxrInternal__aapl__pxrReserved__::HdInstancedBySchemaTokens);
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v3 + 24))(&v8, v3);
    sub_2171997C0((uint64_t)&v8, &v10);
    uint64_t v6 = v10;
    uint64_t v5 = v11;
    if (v11)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_216784EC4(v5);
      uint64_t v7 = v11;
      *a2 = v6;
      a2[1] = v5;
      if (v7) {
        sub_216784EC4(v7);
      }
    }
    else
    {
      *a2 = v10;
      a2[1] = 0;
    }
    if (v9) {
      sub_216784EC4(v9);
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    *a2 = 0;
    a2[1] = 0;
  }
}

pxrInternal__aapl__pxrReserved__::HdInstancedBySchemaTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::HdInstancedBySchema::GetSchemaToken(pxrInternal__aapl__pxrReserved__::HdInstancedBySchema *this)
{
  uint64_t result = (pxrInternal__aapl__pxrReserved__::HdInstancedBySchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdInstancedBySchemaTokens);
  if (!result) {
    return sub_2171C2274(&pxrInternal__aapl__pxrReserved__::HdInstancedBySchemaTokens);
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::HdInstancedBySchema::GetDefaultLocator(pxrInternal__aapl__pxrReserved__::HdInstancedBySchema *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B97AA0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B97AA0))
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::HdInstancedBySchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdInstancedBySchemaTokens);
    if (!v2) {
      uint64_t v2 = sub_2171C2274(&pxrInternal__aapl__pxrReserved__::HdInstancedBySchemaTokens);
    }
    pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&unk_267B97A68, v2);
    __cxa_atexit((void (*)(void *))sub_217199930, &unk_267B97A68, &dword_216758000);
    __cxa_guard_release(&qword_267B97AA0);
  }
  return &unk_267B97A68;
}

void sub_21720B130(_Unwind_Exception *a1)
{
}

void *pxrInternal__aapl__pxrReserved__::HdInstancedBySchema::Builder::SetPaths(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdInstancedBySchema::Builder::SetPrototypeRoots(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 24);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::HdInstancedBySchema::Builder::Build(pxrInternal__aapl__pxrReserved__::HdInstancedBySchema::Builder *this@<X0>, _OWORD *a2@<X8>)
{
}

void *sub_21720B1E0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = *(void **)a1;
  if (result
    && (uint64_t result = __dynamic_cast(result, (const struct __class_type_info *)&unk_26C77BD10, (const struct __class_type_info *)&unk_26C77C880, 0)) != 0)
  {
    uint64_t v5 = *(void *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::HdInstanceIndicesSchemaTokens_StaticTokenType::~HdInstanceIndicesSchemaTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::HdInstanceIndicesSchemaTokens_StaticTokenType *this)
{
  uint64_t v4 = (void **)((char *)this + 24);
  sub_216889A04(&v4);
  uint64_t v2 = *((void *)this + 2);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 1);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

pxrInternal__aapl__pxrReserved__::HdInstanceIndicesSchemaTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::HdInstanceIndicesSchemaTokens_StaticTokenType::HdInstanceIndicesSchemaTokens_StaticTokenType(atomic_uint **this)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v2 = (atomic_uint **)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "instancer", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2, "prototypeIndex", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 2, "instanceIndices", 0);
  uint64_t v3 = *this;
  uint64_t v15 = v3;
  if ((v3 & 7) != 0)
  {
    uint64_t v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v15 = v4;
    }
  }
  uint64_t v5 = *v2;
  uint64_t v16 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v16 = v6;
    }
  }
  uint64_t v7 = this[2];
  uint64_t v17 = v7;
  if ((v7 & 7) != 0)
  {
    uint64_t v8 = (atomic_uint *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v17 = v8;
    }
  }
  this[3] = 0;
  this[4] = 0;
  this[5] = 0;
  uint64_t v9 = (atomic_uint *)operator new(0x18uLL);
  unint64_t v10 = 0;
  this[3] = v9;
  this[4] = v9;
  this[5] = v9 + 6;
  do
  {
    uint64_t v11 = (&v15)[v10 / 2];
    *(void *)&v9[v10] = v11;
    if ((v11 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v9[v10] &= 0xFFFFFFFFFFFFFFF8;
    }
    v10 += 2;
  }
  while (v10 != 6);
  this[4] = v9 + 6;
  for (uint64_t i = 2; i != -1; --i)
  {
    unsigned __int8 v13 = (&v15)[i];
    if ((v13 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return (pxrInternal__aapl__pxrReserved__::HdInstanceIndicesSchemaTokens_StaticTokenType *)this;
}

void sub_21720B4A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  sub_216889A04(&a9);
  uint64_t v15 = 16;
  while (1)
  {
    uint64_t v16 = *(void *)(&a11 + v15);
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v15 -= 8;
    if (v15 == -8)
    {
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void pxrInternal__aapl__pxrReserved__::HdInstanceIndicesSchema::GetInstancer(pxrInternal__aapl__pxrReserved__::HdInstanceIndicesSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdInstanceIndicesSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_21720BAB8(&pxrInternal__aapl__pxrReserved__::HdInstanceIndicesSchemaTokens);
  }
  uint64_t v6 = *v4;
  if (((unint64_t)*v4 & 7) != 0)
  {
    uint64_t v5 = (atomic_uint *)((unint64_t)*v4 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v5, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v6 = v5;
    }
  }
  sub_2171B15E0((uint64_t *)this, a2);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdInstanceIndicesSchema::GetPrototypeIndex(pxrInternal__aapl__pxrReserved__::HdInstanceIndicesSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdInstanceIndicesSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_21720BAB8(&pxrInternal__aapl__pxrReserved__::HdInstanceIndicesSchemaTokens);
  }
  uint64_t v5 = v4[1];
  uint64_t v7 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v7 = v6;
    }
  }
  sub_217209654((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdInstanceIndicesSchema::GetInstanceIndices(pxrInternal__aapl__pxrReserved__::HdInstanceIndicesSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdInstanceIndicesSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_21720BAB8(&pxrInternal__aapl__pxrReserved__::HdInstanceIndicesSchemaTokens);
  }
  uint64_t v5 = v4[2];
  uint64_t v7 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v7 = v6;
    }
  }
  sub_21719B238((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdInstanceIndicesSchema::BuildRetained(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, _OWORD *a4@<X8>)
{
  v31[3] = *MEMORY[0x263EF8340];
  memset(v31, 0, 24);
  memset(v30, 0, sizeof(v30));
  if (*a1)
  {
    uint64_t v8 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdInstanceIndicesSchemaTokens);
    if (!v8) {
      uint64_t v8 = sub_21720BAB8(&pxrInternal__aapl__pxrReserved__::HdInstanceIndicesSchemaTokens);
    }
    sub_2168D2318(v31, v8);
    uint64_t v10 = *a1;
    uint64_t v9 = a1[1];
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v11 = (std::__shared_weak_count *)*((void *)&v30[0] + 1);
    *(void *)&v30[0] = v10;
    *((void *)&v30[0] + 1) = v9;
    if (v11) {
      sub_216784EC4(v11);
    }
    uint64_t v12 = 1;
  }
  else
  {
    uint64_t v12 = 0;
  }
  if (*a2)
  {
    unsigned __int8 v13 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdInstanceIndicesSchemaTokens);
    if (!v13) {
      unsigned __int8 v13 = sub_21720BAB8(&pxrInternal__aapl__pxrReserved__::HdInstanceIndicesSchemaTokens);
    }
    sub_2168D2318(&v31[v12], v13 + 1);
    unint64_t v14 = v12 + 1;
    uint64_t v15 = &v30[v12];
    uint64_t v17 = *a2;
    uint64_t v16 = a2[1];
    if (v16) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v18 = (std::__shared_weak_count *)v15[1];
    *uint64_t v15 = v17;
    v15[1] = v16;
    if (v18) {
      sub_216784EC4(v18);
    }
  }
  else
  {
    unint64_t v14 = v12;
  }
  if (*a3)
  {
    uint64_t v19 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdInstanceIndicesSchemaTokens);
    if (!v19) {
      uint64_t v19 = sub_21720BAB8(&pxrInternal__aapl__pxrReserved__::HdInstanceIndicesSchemaTokens);
    }
    sub_2168D2318(&v31[v14], v19 + 2);
    unint64_t v20 = v14 + 1;
    long long v21 = &v30[v14];
    uint64_t v23 = *a3;
    uint64_t v22 = a3[1];
    if (v22) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v24 = (std::__shared_weak_count *)v21[1];
    *long long v21 = v23;
    v21[1] = v22;
    if (v24) {
      sub_216784EC4(v24);
    }
  }
  else
  {
    unint64_t v20 = v14;
  }
  pxrInternal__aapl__pxrReserved__::HdRetainedContainerDataSource::New(v20, v31, (uint64_t *)v30, &v29);
  *a4 = v29;
  for (uint64_t i = 40; i != -8; i -= 16)
  {
    double v26 = *(std::__shared_weak_count **)((char *)v30 + i);
    if (v26) {
      sub_216784EC4(v26);
    }
  }
  for (uint64_t j = 2; j != -1; --j)
  {
    uint64_t v28 = v31[j];
    if ((v28 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
}

void sub_21720B978(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v18 = 40;
  while (1)
  {
    uint64_t v19 = *(std::__shared_weak_count **)(&a11 + v18);
    if (v19) {
      sub_216784EC4(v19);
    }
    v18 -= 16;
    if (v18 == -8)
    {
      uint64_t v20 = 16;
      while (1)
      {
        uint64_t v21 = *(void *)(&a17 + v20);
        if ((v21 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        v20 -= 8;
        if (v20 == -8) {
          _Unwind_Resume(exception_object);
        }
      }
    }
  }
}

void *pxrInternal__aapl__pxrReserved__::HdInstanceIndicesSchema::Builder::SetInstancer(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdInstanceIndicesSchema::Builder::SetPrototypeIndex(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 24);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdInstanceIndicesSchema::Builder::SetInstanceIndices(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 40);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::HdInstanceIndicesSchema::Builder::Build(pxrInternal__aapl__pxrReserved__::HdInstanceIndicesSchema::Builder *this@<X0>, _OWORD *a2@<X8>)
{
}

atomic_uint **sub_21720BAB8(atomic_ullong *a1)
{
  uint64_t result = sub_21720BB00();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::HdInstanceIndicesSchemaTokens_StaticTokenType::~HdInstanceIndicesSchemaTokens_StaticTokenType((pxrInternal__aapl__pxrReserved__::HdInstanceIndicesSchemaTokens_StaticTokenType *)result);
      operator delete(v4);
    }
    return (atomic_uint **)atomic_load((unint64_t *)a1);
  }
  return result;
}

atomic_uint **sub_21720BB00()
{
  uint64_t v0 = (atomic_uint **)operator new(0x30uLL);
  pxrInternal__aapl__pxrReserved__::HdInstanceIndicesSchemaTokens_StaticTokenType::HdInstanceIndicesSchemaTokens_StaticTokenType(v0);
  return v0;
}

void sub_21720BB30(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::HdInstancer *pxrInternal__aapl__pxrReserved__::HdInstancer::HdInstancer(pxrInternal__aapl__pxrReserved__::HdInstancer *this, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  *(void *)this = &unk_26C7810C8;
  *((void *)this + 1) = a2;
  sub_216981010((_DWORD *)this + 4, a3);
  sub_21698105C((_DWORD *)this + 5, (_DWORD *)a3 + 1);
  *((void *)this + 3) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 6);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 7);
  *((void *)this + 4) = 850045863;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((void *)this + 11) = 0;
  return this;
}

void pxrInternal__aapl__pxrReserved__::HdInstancer::~HdInstancer(pxrInternal__aapl__pxrReserved__::HdInstancer *this)
{
  *(void *)this = &unk_26C7810C8;
  uint64_t v2 = (_DWORD *)((char *)this + 28);
  std::mutex::~mutex((std::mutex *)((char *)this + 32));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v2);
  sub_21697C414((_DWORD *)this + 6);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 5);
  sub_21697C414((_DWORD *)this + 4);
}

{
  void *v1;
  uint64_t vars8;

  pxrInternal__aapl__pxrReserved__::HdInstancer::~HdInstancer(this);

  operator delete(v1);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdInstancer::GetInstancerNumLevels(pxrInternal__aapl__pxrReserved__::HdInstancer *this, pxrInternal__aapl__pxrReserved__::HdRenderIndex *a2, const pxrInternal__aapl__pxrReserved__::HdRprim *a3)
{
  sub_216981010(&v12, (_DWORD *)a2 + 2);
  sub_21698105C(&v13, (_DWORD *)a2 + 3);
  uint64_t v5 = 0;
  while (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v12))
  {
    uint64_t Instancer = pxrInternal__aapl__pxrReserved__::HdRenderIndex::GetInstancer(this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v12);
    if (Instancer)
    {
      uint64_t v7 = (uint64_t *)(Instancer + 24);
    }
    else
    {
      v10[0] = "hd/instancer.cpp";
      v10[1] = "GetInstancerNumLevels";
      void v10[2] = 56;
      v10[3] = "static int pxrInternal__aapl__pxrReserved__::HdInstancer::GetInstancerNumLevels(HdRenderIndex &, const HdRprim &)";
      char v11 = 0;
      uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v10, "instancer", 0);
      uint64_t v7 = pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath(v8);
    }
    sub_2169C487C(&v12, v7);
    sub_2169C48D4(&v13, (_DWORD *)v7 + 1);
    uint64_t v5 = (v5 + 1);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  sub_21697C414(&v12);
  return v5;
}

void sub_21720BD8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::HdInstancer::GetBuiltinPrimvarNames(pxrInternal__aapl__pxrReserved__::HdInstancer *this)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v1 = (unsigned char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::HD_USE_DEPRECATED_INSTANCER_PRIMVAR_NAMES);
  if (!v1) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
  }
  if (*v1)
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B97AC0, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_267B97AC0))
    {
      uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdInstancerTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdInstancerTokens);
      if (!v4) {
        uint64_t v4 = sub_2171ABA44(&pxrInternal__aapl__pxrReserved__::HdInstancerTokens);
      }
      uint64_t v5 = *((void *)v4 + 10);
      uint64_t v25 = v5;
      if ((v5 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v25 &= 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v6 = (pxrInternal__aapl__pxrReserved__::HdInstancerTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdInstancerTokens);
      if (!v6) {
        uint64_t v6 = sub_2171ABA44(&pxrInternal__aapl__pxrReserved__::HdInstancerTokens);
      }
      uint64_t v7 = *((void *)v6 + 11);
      uint64_t v26 = v7;
      if ((v7 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v26 &= 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v8 = (pxrInternal__aapl__pxrReserved__::HdInstancerTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdInstancerTokens);
      if (!v8) {
        uint64_t v8 = sub_2171ABA44(&pxrInternal__aapl__pxrReserved__::HdInstancerTokens);
      }
      uint64_t v9 = *((void *)v8 + 12);
      uint64_t v27 = v9;
      if ((v9 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v27 &= 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v10 = (pxrInternal__aapl__pxrReserved__::HdInstancerTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdInstancerTokens);
      if (!v10) {
        uint64_t v10 = sub_2171ABA44(&pxrInternal__aapl__pxrReserved__::HdInstancerTokens);
      }
      uint64_t v11 = *((void *)v10 + 13);
      uint64_t v28 = v11;
      if ((v11 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v28 &= 0xFFFFFFFFFFFFFFF8;
      }
      sub_216D30CFC(qword_267B97AA8, &v25, 4uLL);
      for (uint64_t i = 24; i != -8; i -= 8)
      {
        uint64_t v13 = *(uint64_t *)((char *)&v25 + i);
        if ((v13 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
      unint64_t v14 = &qword_267B97AC0;
      uint64_t v2 = qword_267B97AA8;
LABEL_61:
      __cxa_atexit((void (*)(void *))sub_216B554D0, v2, &dword_216758000);
      __cxa_guard_release(v14);
      return v2;
    }
    return qword_267B97AA8;
  }
  else
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B97AE0, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_267B97AE0))
    {
      uint64_t v15 = (pxrInternal__aapl__pxrReserved__::HdInstancerTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdInstancerTokens);
      if (!v15) {
        uint64_t v15 = sub_2171ABA44(&pxrInternal__aapl__pxrReserved__::HdInstancerTokens);
      }
      uint64_t v16 = *((void *)v15 + 6);
      uint64_t v25 = v16;
      if ((v16 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v25 &= 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v17 = (pxrInternal__aapl__pxrReserved__::HdInstancerTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdInstancerTokens);
      if (!v17) {
        uint64_t v17 = sub_2171ABA44(&pxrInternal__aapl__pxrReserved__::HdInstancerTokens);
      }
      uint64_t v18 = *((void *)v17 + 7);
      uint64_t v26 = v18;
      if ((v18 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v26 &= 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v19 = (pxrInternal__aapl__pxrReserved__::HdInstancerTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdInstancerTokens);
      if (!v19) {
        uint64_t v19 = sub_2171ABA44(&pxrInternal__aapl__pxrReserved__::HdInstancerTokens);
      }
      uint64_t v20 = *((void *)v19 + 8);
      uint64_t v27 = v20;
      if ((v20 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v27 &= 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v21 = (pxrInternal__aapl__pxrReserved__::HdInstancerTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdInstancerTokens);
      if (!v21) {
        uint64_t v21 = sub_2171ABA44(&pxrInternal__aapl__pxrReserved__::HdInstancerTokens);
      }
      uint64_t v22 = *((void *)v21 + 9);
      uint64_t v28 = v22;
      if ((v22 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v28 &= 0xFFFFFFFFFFFFFFF8;
      }
      sub_216D30CFC(qword_267B97AC8, &v25, 4uLL);
      for (uint64_t j = 24; j != -8; j -= 8)
      {
        uint64_t v24 = *(uint64_t *)((char *)&v25 + j);
        if ((v24 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
      unint64_t v14 = &qword_267B97AE0;
      uint64_t v2 = qword_267B97AC8;
      goto LABEL_61;
    }
    return qword_267B97AC8;
  }
}

void sub_21720C1B4(_Unwind_Exception *a1)
{
}

_DWORD *pxrInternal__aapl__pxrReserved__::HdInstancer::_SyncInstancerAndParents(pxrInternal__aapl__pxrReserved__::HdInstancer *this, pxrInternal__aapl__pxrReserved__::HdRenderIndex *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  uint64_t RenderDelegate = pxrInternal__aapl__pxrReserved__::HdRenderIndex::GetRenderDelegate(this);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)RenderDelegate + 48))(RenderDelegate);
  sub_216981010(&v11, a2);
  sub_21698105C(&v12, (_DWORD *)a2 + 1);
  while (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v11))
  {
    uint64_t Instancer = pxrInternal__aapl__pxrReserved__::HdRenderIndex::GetInstancer(this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v11);
    if (!Instancer)
    {
      v9[0] = "hd/instancer.cpp";
      v9[1] = "_SyncInstancerAndParents";
      uint64_t v9[2] = 107;
      void v9[3] = "static void pxrInternal__aapl__pxrReserved__::HdInstancer::_SyncInstancerAndParents(HdRenderIndex &, const SdfPath &)";
      char v10 = 0;
      if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v9, "instancer", 0) & 1) == 0) {
        break;
      }
    }
    std::mutex::lock((std::mutex *)(Instancer + 32));
    LODWORD(v9[0]) = 0;
    LODWORD(v9[0]) = pxrInternal__aapl__pxrReserved__::HdChangeTracker::GetInstancerDirtyBits((pxrInternal__aapl__pxrReserved__::HdInstancer *)((char *)this + 416), (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v11);
    if (LODWORD(v9[0]))
    {
      (*(void (**)(uint64_t, void, uint64_t, void *))(*(void *)Instancer + 16))(Instancer, *(void *)(Instancer + 8), v6, v9);
      pxrInternal__aapl__pxrReserved__::HdChangeTracker::MarkInstancerClean((pxrInternal__aapl__pxrReserved__::HdInstancer *)((char *)this + 416), (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, 0);
    }
    sub_2169C487C(&v11, (_DWORD *)(Instancer + 24));
    sub_2169C48D4(&v12, (_DWORD *)(Instancer + 28));
    std::mutex::unlock((std::mutex *)(Instancer + 32));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  return sub_21697C414(&v11);
}

void sub_21720C434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::HdInstancer::_UpdateInstancer(pxrInternal__aapl__pxrReserved__::HdInstancer *this, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  uint64_t result = (_DWORD *)pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsInstancerDirty((pxrInternal__aapl__pxrReserved__::HdChangeTracker *)*(unsigned int *)a3, (pxrInternal__aapl__pxrReserved__::HdInstancer *)((char *)this + 16), a3);
  if (result)
  {
    (*(void (**)(uint64_t *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *))(*(void *)a2 + 232))(&v7, a2, (char *)this + 16);
    if (v7 != *((void *)this + 3))
    {
      uint64_t v6 = (pxrInternal__aapl__pxrReserved__::HdChangeTracker *)(*((void *)a2 + 1) + 416);
      if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 6)) {
        pxrInternal__aapl__pxrReserved__::HdChangeTracker::RemoveInstancerInstancerDependency(v6, (pxrInternal__aapl__pxrReserved__::HdInstancer *)((char *)this + 24), (pxrInternal__aapl__pxrReserved__::HdInstancer *)((char *)this + 16));
      }
      if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v7)) {
        pxrInternal__aapl__pxrReserved__::HdChangeTracker::AddInstancerInstancerDependency(v6, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v7, (pxrInternal__aapl__pxrReserved__::HdInstancer *)((char *)this + 16));
      }
      sub_2169C487C((int *)this + 6, &v7);
      sub_2169C48D4((int *)this + 7, (_DWORD *)&v7 + 1);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v7 + 1);
    return sub_21697C414(&v7);
  }
  return result;
}

void sub_21720C56C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdInstancer::GetInitialDirtyBitsMask(pxrInternal__aapl__pxrReserved__::HdInstancer *this)
{
  return 197184;
}

void pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchemaTokens_StaticTokenType::~HdInstancerTopologySchemaTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchemaTokens_StaticTokenType *this)
{
  uint64_t v6 = (void **)((char *)this + 40);
  sub_216889A04(&v6);
  uint64_t v2 = *((void *)this + 4);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 3);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *((void *)this + 2);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *((void *)this + 1);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchemaTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchemaTokens_StaticTokenType::HdInstancerTopologySchemaTokens_StaticTokenType(atomic_uint **this)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v2 = (atomic_uint **)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "instancerTopology", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2, "prototypes", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 2, "instanceIndices", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 3, "mask", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 4, "instanceLocations", 0);
  uint64_t v3 = *this;
  uint64_t v19 = v3;
  if ((v3 & 7) != 0)
  {
    uint64_t v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v19 = v4;
    }
  }
  uint64_t v5 = *v2;
  uint64_t v20 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v20 = v6;
    }
  }
  uint64_t v7 = this[2];
  uint64_t v21 = v7;
  if ((v7 & 7) != 0)
  {
    uint64_t v8 = (atomic_uint *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v21 = v8;
    }
  }
  uint64_t v9 = this[3];
  uint64_t v22 = v9;
  if ((v9 & 7) != 0)
  {
    char v10 = (atomic_uint *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v10, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v22 = v10;
    }
  }
  int v11 = this[4];
  uint64_t v23 = v11;
  if ((v11 & 7) != 0)
  {
    int v12 = (atomic_uint *)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v12, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v23 = v12;
    }
  }
  this[5] = 0;
  this[6] = 0;
  this[7] = 0;
  uint64_t v13 = (atomic_uint *)operator new(0x28uLL);
  unint64_t v14 = 0;
  this[5] = v13;
  this[6] = v13;
  this[7] = v13 + 10;
  do
  {
    uint64_t v15 = (&v19)[v14 / 2];
    *(void *)&v13[v14] = v15;
    if ((v15 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v13[v14] &= 0xFFFFFFFFFFFFFFF8;
    }
    v14 += 2;
  }
  while (v14 != 10);
  this[6] = v13 + 10;
  for (uint64_t i = 4; i != -1; --i)
  {
    uint64_t v17 = (&v19)[i];
    if ((v17 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return (pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchemaTokens_StaticTokenType *)this;
}

void sub_21720C878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  sub_216889A04(&a9);
  uint64_t v17 = 32;
  while (1)
  {
    uint64_t v18 = *(void *)(&a11 + v17);
    if ((v18 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v17 -= 8;
    if (v17 == -8)
    {
      if ((*v15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchema::ComputeInstanceIndicesForProto(pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchema *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 32) = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  uint64_t v49 = 0;
  memset(v48, 0, sizeof(v48));
  pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchema::GetInstanceIndices(this, &v46);
  if (pxrInternal__aapl__pxrReserved__::HdVectorSchema::IsDefined((pxrInternal__aapl__pxrReserved__::HdVectorSchema *)&v46))
  {
    float v45 = 0;
    long long v43 = 0u;
    long long v44 = 0u;
    pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchema::GetPrototypes(this, &v37);
    if ((void)v37)
    {
      (*(void (**)(long long *__return_ptr, double))(*(void *)v37 + 32))(&v40, 0.0);
      sub_2171C1464(&v43);
      long long v43 = v40;
      long long v44 = v41;
      long long v40 = 0u;
      long long v41 = 0u;
      float v45 = v42;
      uint64_t v42 = 0;
      sub_2171C1464(&v40);
    }
    if (*((void *)&v37 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v37 + 1));
    }
    if ((void)v43)
    {
      uint64_t v6 = 0;
      unint64_t v7 = 0;
      do
      {
        if (pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v45[v6]))
        {
          LODWORD(v40) = v7;
          sub_216F51340((uint64_t)v48, &v40);
        }
        ++v7;
        v6 += 2;
      }
      while (v7 < (unint64_t)v43);
    }
    uint64_t v42 = 0;
    long long v40 = 0u;
    long long v41 = 0u;
    pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchema::GetMask(this, &v32);
    if ((void)v32)
    {
      (*(void (**)(long long *__return_ptr, double))(*(void *)v32 + 32))(&v37, 0.0);
      sub_2168F83DC((uint64_t)&v40);
      long long v40 = v37;
      long long v41 = v38;
      long long v37 = 0u;
      long long v38 = 0u;
      uint64_t v42 = v39;
      uint64_t v39 = 0;
      sub_2168F83DC((uint64_t)&v37);
    }
    if (*((void *)&v32 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v32 + 1));
    }
    sub_216907C74((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v48, v8, v9);
    uint64_t v10 = v49;
    sub_216907C74((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v48, v11, v12);
    for (uint64_t i = v49 + 4 * *(void *)&v48[0]; v10 != i; v10 += 4)
    {
      uint64_t v39 = 0;
      long long v37 = 0u;
      long long v38 = 0u;
      sub_21720D794(&v46, &v35);
      if (v35)
      {
        (*(void (**)(long long *__return_ptr, double))(*(void *)v35 + 32))(&v32, 0.0);
        sub_2168F83DC((uint64_t)&v37);
        long long v37 = v32;
        long long v38 = v33;
        long long v32 = 0u;
        long long v33 = 0u;
        uint64_t v39 = v34;
        double v34 = 0;
        sub_2168F83DC((uint64_t)&v32);
      }
      if (v36) {
        sub_216784EC4(v36);
      }
      if ((void)v40)
      {
        sub_216907C74((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v37, v14, v15);
        uint64_t v16 = v39;
        sub_216907C74((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v37, v17, v18);
        uint64_t v21 = &v39[v37];
        while (v16 != v21)
        {
          LODWORD(v32) = 0;
          uint64_t v22 = *v16;
          LODWORD(v32) = v22;
          if ((int)v22 >= (int)v40
            || (sub_2169AAF5C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v40, v19, v20), *((unsigned char *)v42 + v22)))
          {
            sub_216F51A4C(a3, &v32);
          }
          ++v16;
        }
      }
      else
      {
        uint64_t v23 = *(void *)a3;
        if (*(void *)a3)
        {
          uint64_t v24 = v37;
          sub_216907C74((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v14, v15);
          LODWORD(v35) = 0;
          *(void *)&long long v32 = &v35;
          sub_216907A0C((unint64_t *)a3, v24 + v23, (_DWORD **)&v32);
          if (v24)
          {
            uint64_t v27 = 0;
            uint64_t v28 = 4 * v23;
            do
            {
              sub_216907C74((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v37, v25, v26);
              int v29 = v39[v27];
              sub_216907C74((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a3, v30, v31);
              *(_DWORD *)(*(void *)(a3 + 32) + v28 + 4 * v27++) = v29;
            }
            while (v24 != v27);
          }
        }
        else
        {
          sub_2169DCE38(a3, &v37);
        }
      }
      sub_2168F83DC((uint64_t)&v37);
    }
    sub_2168F83DC((uint64_t)&v40);
    sub_2171C1464(&v43);
  }
  if (v47) {
    sub_216784EC4(v47);
  }
  sub_2168F83DC((uint64_t)v48);
}

void sub_21720CCF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  sub_2168F83DC((uint64_t)&a17);
  if (a10) {
    sub_216784EC4(a10);
  }
  sub_2168F83DC((uint64_t)&a23);
  sub_2171C1464(&a29);
  long long v32 = *(std::__shared_weak_count **)(v30 - 136);
  if (v32) {
    sub_216784EC4(v32);
  }
  sub_2168F83DC(v30 - 128);
  sub_2168F83DC(v29);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchema::GetInstanceIndices(pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171C1520(&pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchemaTokens);
  }
  uint64_t v5 = (atomic_uint *)*((void *)v4 + 2);
  uint64_t v8 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v8 = v6;
    }
  }
  sub_2171E466C((uint64_t *)this, &v9);
  unint64_t v7 = v10;
  *a2 = v9;
  a2[1] = v7;
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    if (v10) {
      sub_216784EC4(v10);
    }
  }
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchema::GetPrototypes(pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171C1520(&pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchemaTokens);
  }
  uint64_t v5 = (atomic_uint *)*((void *)v4 + 1);
  unint64_t v7 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      unint64_t v7 = v6;
    }
  }
  sub_21720AC28((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchema::GetMask(pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171C1520(&pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchemaTokens);
  }
  uint64_t v5 = (atomic_uint *)*((void *)v4 + 3);
  unint64_t v7 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      unint64_t v7 = v6;
    }
  }
  sub_21720D060((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_21720D060(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (v3)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v3 + 24))(&v4);
    sub_21720D80C((uint64_t)&v4, a2);
    if (v5) {
      sub_216784EC4(v5);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

void pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchema::GetInstanceLocations(pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171C1520(&pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchemaTokens);
  }
  uint64_t v5 = (atomic_uint *)*((void *)v4 + 4);
  unint64_t v7 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      unint64_t v7 = v6;
    }
  }
  sub_21720AC28((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchema::BuildRetained(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  memset(v39, 0, sizeof(v39));
  memset(v38, 0, sizeof(v38));
  if (*a1)
  {
    uint64_t v10 = (pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchemaTokens);
    if (!v10) {
      uint64_t v10 = sub_2171C1520(&pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchemaTokens);
    }
    sub_2168D2318(v39, (void *)v10 + 1);
    uint64_t v12 = *a1;
    uint64_t v11 = a1[1];
    if (v11) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = (std::__shared_weak_count *)*((void *)&v38[0] + 1);
    *(void *)&v38[0] = v12;
    *((void *)&v38[0] + 1) = v11;
    if (v13) {
      sub_216784EC4(v13);
    }
    uint64_t v14 = 1;
  }
  else
  {
    uint64_t v14 = 0;
  }
  if (*a2)
  {
    uint64_t v15 = (pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchemaTokens);
    if (!v15) {
      uint64_t v15 = sub_2171C1520(&pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchemaTokens);
    }
    sub_2168D2318((void *)((unint64_t)v39 | (8 * v14)), (void *)v15 + 2);
    uint64_t v16 = v14 + 1;
    uint64_t v17 = &v38[v14];
    uint64_t v19 = *a2;
    uint64_t v18 = a2[1];
    if (v18) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v20 = (std::__shared_weak_count *)v17[1];
    *uint64_t v17 = v19;
    v17[1] = v18;
    if (v20) {
      sub_216784EC4(v20);
    }
  }
  else
  {
    uint64_t v16 = v14;
  }
  if (*a3)
  {
    uint64_t v21 = (pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchemaTokens);
    if (!v21) {
      uint64_t v21 = sub_2171C1520(&pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchemaTokens);
    }
    sub_2168D2318((void *)v39 + v16, (void *)v21 + 3);
    unint64_t v22 = v16 + 1;
    uint64_t v23 = &v38[v16];
    uint64_t v25 = *a3;
    uint64_t v24 = a3[1];
    if (v24) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v26 = (std::__shared_weak_count *)v23[1];
    *uint64_t v23 = v25;
    v23[1] = v24;
    if (v26) {
      sub_216784EC4(v26);
    }
  }
  else
  {
    unint64_t v22 = v16;
  }
  if (*a4)
  {
    uint64_t v27 = (pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchemaTokens);
    if (!v27) {
      uint64_t v27 = sub_2171C1520(&pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchemaTokens);
    }
    sub_2168D2318((void *)v39 + v22, (void *)v27 + 4);
    unint64_t v28 = v22 + 1;
    uint64_t v29 = &v38[v22];
    uint64_t v31 = *a4;
    uint64_t v30 = a4[1];
    if (v30) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v30 + 8), 1uLL, memory_order_relaxed);
    }
    long long v32 = (std::__shared_weak_count *)v29[1];
    void *v29 = v31;
    v29[1] = v30;
    if (v32) {
      sub_216784EC4(v32);
    }
  }
  else
  {
    unint64_t v28 = v22;
  }
  pxrInternal__aapl__pxrReserved__::HdRetainedContainerDataSource::New(v28, (uint64_t *)v39, (uint64_t *)v38, &v37);
  *a5 = v37;
  for (uint64_t i = 56; i != -8; i -= 16)
  {
    double v34 = *(std::__shared_weak_count **)((char *)v38 + i);
    if (v34) {
      sub_216784EC4(v34);
    }
  }
  for (uint64_t j = 24; j != -8; j -= 8)
  {
    uint64_t v36 = *(void *)((char *)v39 + j);
    if ((v36 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
}

void sub_21720D41C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v20 = 56;
  while (1)
  {
    uint64_t v21 = *(std::__shared_weak_count **)(&a11 + v20);
    if (v21) {
      sub_216784EC4(v21);
    }
    v20 -= 16;
    if (v20 == -8)
    {
      uint64_t v22 = 24;
      while (1)
      {
        uint64_t v23 = *(void *)(&a19 + v22);
        if ((v23 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        v22 -= 8;
        if (v22 == -8) {
          _Unwind_Resume(exception_object);
        }
      }
    }
  }
}

void pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchema::GetFromParent(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchemaTokens)) {
      sub_2171C1520(&pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchemaTokens);
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v3 + 24))(&v8, v3);
    sub_2171997C0((uint64_t)&v8, &v10);
    uint64_t v6 = v10;
    uint64_t v5 = v11;
    if (v11)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_216784EC4(v5);
      unint64_t v7 = v11;
      *a2 = v6;
      a2[1] = v5;
      if (v7) {
        sub_216784EC4(v7);
      }
    }
    else
    {
      *a2 = v10;
      a2[1] = 0;
    }
    if (v9) {
      sub_216784EC4(v9);
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    *a2 = 0;
    a2[1] = 0;
  }
}

pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchemaTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchema::GetSchemaToken(pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchema *this)
{
  uint64_t result = (pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchemaTokens);
  if (!result) {
    return sub_2171C1520(&pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchemaTokens);
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchema::GetDefaultLocator(pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchema *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B97B20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B97B20))
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchemaTokens);
    if (!v2) {
      uint64_t v2 = sub_2171C1520(&pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchemaTokens);
    }
    pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&unk_267B97AE8, v2);
    __cxa_atexit((void (*)(void *))sub_217199930, &unk_267B97AE8, &dword_216758000);
    __cxa_guard_release(&qword_267B97B20);
  }
  return &unk_267B97AE8;
}

void sub_21720D64C(_Unwind_Exception *a1)
{
}

void *pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchema::Builder::SetPrototypes(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchema::Builder::SetInstanceIndices(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 24);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchema::Builder::SetMask(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 40);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchema::Builder::SetInstanceLocations(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 56);
  *(void *)(a1 + 4sub_2171F4108((uint64_t)this + 8) = v4;
  *(void *)(a1 + 56) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchema::Builder::Build(pxrInternal__aapl__pxrReserved__::HdInstancerTopologySchema::Builder *this@<X0>, _OWORD *a2@<X8>)
{
}

void sub_21720D794(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (v3)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v3 + 24))(&v4);
    sub_21719BD74((uint64_t)&v4, a2);
    if (v5) {
      sub_216784EC4(v5);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

void *sub_21720D80C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = *(void **)a1;
  if (result
    && (uint64_t result = __dynamic_cast(result, (const struct __class_type_info *)&unk_26C77BD10, (const struct __class_type_info *)&unk_26C781100, 0)) != 0)
  {
    uint64_t v5 = *(void *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::HdInstanceSchemaTokens_StaticTokenType::~HdInstanceSchemaTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::HdInstanceSchemaTokens_StaticTokenType *this)
{
  uint64_t v5 = (void **)((char *)this + 32);
  sub_216889A04(&v5);
  uint64_t v2 = *((void *)this + 3);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 2);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *((void *)this + 1);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

pxrInternal__aapl__pxrReserved__::HdInstanceSchemaTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::HdInstanceSchemaTokens_StaticTokenType::HdInstanceSchemaTokens_StaticTokenType(atomic_uint **this)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v2 = (atomic_uint **)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "instance", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2, "instancer", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 2, "prototypeIndex", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 3, "instanceIndex", 0);
  uint64_t v3 = *this;
  uint64_t v17 = v3;
  if ((v3 & 7) != 0)
  {
    uint64_t v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v17 = v4;
    }
  }
  uint64_t v5 = *v2;
  uint64_t v18 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v18 = v6;
    }
  }
  unint64_t v7 = this[2];
  uint64_t v19 = v7;
  if ((v7 & 7) != 0)
  {
    uint64_t v8 = (atomic_uint *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v19 = v8;
    }
  }
  uint64_t v9 = this[3];
  uint64_t v20 = v9;
  if ((v9 & 7) != 0)
  {
    uint64_t v10 = (atomic_uint *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v10, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v20 = v10;
    }
  }
  this[4] = 0;
  this[5] = 0;
  this[6] = 0;
  uint64_t v11 = (atomic_uint *)operator new(0x20uLL);
  unint64_t v12 = 0;
  this[4] = v11;
  this[5] = v11;
  this[6] = v11 + 8;
  do
  {
    uint64_t v13 = (&v17)[v12 / 2];
    *(void *)&v11[v12] = v13;
    if ((v13 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v11[v12] &= 0xFFFFFFFFFFFFFFF8;
    }
    v12 += 2;
  }
  while (v12 != 8);
  this[5] = v11 + 8;
  for (uint64_t i = 3; i != -1; --i)
  {
    uint64_t v15 = (&v17)[i];
    if ((v15 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return (pxrInternal__aapl__pxrReserved__::HdInstanceSchemaTokens_StaticTokenType *)this;
}

void sub_21720DB28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  sub_216889A04(&a10);
  uint64_t v17 = 24;
  while (1)
  {
    uint64_t v18 = *(void *)(&a12 + v17);
    if ((v18 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v17 -= 8;
    if (v17 == -8)
    {
      if ((*v15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void pxrInternal__aapl__pxrReserved__::HdInstanceSchema::GetInstancer(pxrInternal__aapl__pxrReserved__::HdInstanceSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdInstanceSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_21720E34C(&pxrInternal__aapl__pxrReserved__::HdInstanceSchemaTokens);
  }
  uint64_t v5 = v4[1];
  unint64_t v7 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      unint64_t v7 = v6;
    }
  }
  sub_2171B15E0((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdInstanceSchema::GetPrototypeIndex(pxrInternal__aapl__pxrReserved__::HdInstanceSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdInstanceSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_21720E34C(&pxrInternal__aapl__pxrReserved__::HdInstanceSchemaTokens);
  }
  uint64_t v5 = v4[2];
  unint64_t v7 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      unint64_t v7 = v6;
    }
  }
  sub_217209654((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdInstanceSchema::GetInstanceIndex(pxrInternal__aapl__pxrReserved__::HdInstanceSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdInstanceSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_21720E34C(&pxrInternal__aapl__pxrReserved__::HdInstanceSchemaTokens);
  }
  uint64_t v5 = v4[3];
  unint64_t v7 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      unint64_t v7 = v6;
    }
  }
  sub_217209654((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdInstanceSchema::BuildRetained(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, _OWORD *a4@<X8>)
{
  v31[3] = *MEMORY[0x263EF8340];
  memset(v31, 0, 24);
  memset(v30, 0, sizeof(v30));
  if (*a1)
  {
    uint64_t v8 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdInstanceSchemaTokens);
    if (!v8) {
      uint64_t v8 = sub_21720E34C(&pxrInternal__aapl__pxrReserved__::HdInstanceSchemaTokens);
    }
    sub_2168D2318(v31, v8 + 1);
    uint64_t v10 = *a1;
    uint64_t v9 = a1[1];
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v11 = (std::__shared_weak_count *)*((void *)&v30[0] + 1);
    *(void *)&v30[0] = v10;
    *((void *)&v30[0] + 1) = v9;
    if (v11) {
      sub_216784EC4(v11);
    }
    uint64_t v12 = 1;
  }
  else
  {
    uint64_t v12 = 0;
  }
  if (*a2)
  {
    uint64_t v13 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdInstanceSchemaTokens);
    if (!v13) {
      uint64_t v13 = sub_21720E34C(&pxrInternal__aapl__pxrReserved__::HdInstanceSchemaTokens);
    }
    sub_2168D2318(&v31[v12], v13 + 2);
    unint64_t v14 = v12 + 1;
    uint64_t v15 = &v30[v12];
    uint64_t v17 = *a2;
    uint64_t v16 = a2[1];
    if (v16) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v18 = (std::__shared_weak_count *)v15[1];
    *uint64_t v15 = v17;
    v15[1] = v16;
    if (v18) {
      sub_216784EC4(v18);
    }
  }
  else
  {
    unint64_t v14 = v12;
  }
  if (*a3)
  {
    uint64_t v19 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdInstanceSchemaTokens);
    if (!v19) {
      uint64_t v19 = sub_21720E34C(&pxrInternal__aapl__pxrReserved__::HdInstanceSchemaTokens);
    }
    sub_2168D2318(&v31[v14], v19 + 3);
    unint64_t v20 = v14 + 1;
    uint64_t v21 = &v30[v14];
    uint64_t v23 = *a3;
    uint64_t v22 = a3[1];
    if (v22) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v24 = (std::__shared_weak_count *)v21[1];
    *uint64_t v21 = v23;
    v21[1] = v22;
    if (v24) {
      sub_216784EC4(v24);
    }
  }
  else
  {
    unint64_t v20 = v14;
  }
  pxrInternal__aapl__pxrReserved__::HdRetainedContainerDataSource::New(v20, v31, (uint64_t *)v30, &v29);
  *a4 = v29;
  for (uint64_t i = 40; i != -8; i -= 16)
  {
    uint64_t v26 = *(std::__shared_weak_count **)((char *)v30 + i);
    if (v26) {
      sub_216784EC4(v26);
    }
  }
  for (uint64_t j = 2; j != -1; --j)
  {
    uint64_t v28 = v31[j];
    if ((v28 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
}

void sub_21720E020(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v18 = 40;
  while (1)
  {
    uint64_t v19 = *(std::__shared_weak_count **)(&a11 + v18);
    if (v19) {
      sub_216784EC4(v19);
    }
    v18 -= 16;
    if (v18 == -8)
    {
      uint64_t v20 = 16;
      while (1)
      {
        uint64_t v21 = *(void *)(&a17 + v20);
        if ((v21 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        v20 -= 8;
        if (v20 == -8) {
          _Unwind_Resume(exception_object);
        }
      }
    }
  }
}

void pxrInternal__aapl__pxrReserved__::HdInstanceSchema::GetFromParent(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdInstanceSchemaTokens)) {
      sub_21720E34C(&pxrInternal__aapl__pxrReserved__::HdInstanceSchemaTokens);
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v3 + 24))(&v8, v3);
    sub_2171997C0((uint64_t)&v8, &v10);
    uint64_t v6 = v10;
    uint64_t v5 = v11;
    if (v11)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_216784EC4(v5);
      unint64_t v7 = v11;
      *a2 = v6;
      a2[1] = v5;
      if (v7) {
        sub_216784EC4(v7);
      }
    }
    else
    {
      *a2 = v10;
      a2[1] = 0;
    }
    if (v9) {
      sub_216784EC4(v9);
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    *a2 = 0;
    a2[1] = 0;
  }
}

atomic_uint **pxrInternal__aapl__pxrReserved__::HdInstanceSchema::GetSchemaToken(pxrInternal__aapl__pxrReserved__::HdInstanceSchema *this)
{
  uint64_t result = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdInstanceSchemaTokens);
  if (!result) {
    return sub_21720E34C(&pxrInternal__aapl__pxrReserved__::HdInstanceSchemaTokens);
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::HdInstanceSchema::GetDefaultLocator(pxrInternal__aapl__pxrReserved__::HdInstanceSchema *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B97B60, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B97B60))
  {
    uint64_t v2 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdInstanceSchemaTokens);
    if (!v2) {
      uint64_t v2 = sub_21720E34C(&pxrInternal__aapl__pxrReserved__::HdInstanceSchemaTokens);
    }
    pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&unk_267B97B28, (const pxrInternal__aapl__pxrReserved__::TfToken *)v2);
    __cxa_atexit((void (*)(void *))sub_217199930, &unk_267B97B28, &dword_216758000);
    __cxa_guard_release(&qword_267B97B60);
  }
  return &unk_267B97B28;
}

void sub_21720E250(_Unwind_Exception *a1)
{
}

void *pxrInternal__aapl__pxrReserved__::HdInstanceSchema::Builder::SetInstancer(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdInstanceSchema::Builder::SetPrototypeIndex(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 24);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdInstanceSchema::Builder::SetInstanceIndex(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 40);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::HdInstanceSchema::Builder::Build(pxrInternal__aapl__pxrReserved__::HdInstanceSchema::Builder *this@<X0>, _OWORD *a2@<X8>)
{
}

atomic_uint **sub_21720E34C(atomic_ullong *a1)
{
  uint64_t result = sub_21720E394();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::HdInstanceSchemaTokens_StaticTokenType::~HdInstanceSchemaTokens_StaticTokenType((pxrInternal__aapl__pxrReserved__::HdInstanceSchemaTokens_StaticTokenType *)result);
      operator delete(v4);
    }
    return (atomic_uint **)atomic_load((unint64_t *)a1);
  }
  return result;
}

atomic_uint **sub_21720E394()
{
  uint64_t v0 = (atomic_uint **)operator new(0x38uLL);
  pxrInternal__aapl__pxrReserved__::HdInstanceSchemaTokens_StaticTokenType::HdInstanceSchemaTokens_StaticTokenType(v0);
  return v0;
}

void sub_21720E3C4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdIntegratorSchemaTokens_StaticTokenType::~HdIntegratorSchemaTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::HdIntegratorSchemaTokens_StaticTokenType *this)
{
  uint64_t v3 = (void **)((char *)this + 16);
  sub_216889A04(&v3);
  uint64_t v2 = *((void *)this + 1);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

pxrInternal__aapl__pxrReserved__::HdIntegratorSchemaTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::HdIntegratorSchemaTokens_StaticTokenType::HdIntegratorSchemaTokens_StaticTokenType(atomic_uint **this)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v2 = (atomic_uint **)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "integrator", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2, "resource", 0);
  uint64_t v3 = *this;
  uint64_t v13 = v3;
  if ((v3 & 7) != 0)
  {
    uint64_t v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v13 = v4;
    }
  }
  uint64_t v5 = *v2;
  unint64_t v14 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      unint64_t v14 = v6;
    }
  }
  this[2] = 0;
  this[3] = 0;
  this[4] = 0;
  unint64_t v7 = (atomic_uint *)operator new(0x10uLL);
  unint64_t v8 = 0;
  this[2] = v7;
  this[3] = v7;
  this[4] = v7 + 4;
  do
  {
    uint64_t v9 = (&v13)[v8 / 2];
    *(void *)&v7[v8] = v9;
    if ((v9 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v7[v8] &= 0xFFFFFFFFFFFFFFF8;
    }
    v8 += 2;
  }
  while (v8 != 4);
  this[3] = v7 + 4;
  for (uint64_t i = 1; i != -1; --i)
  {
    uint64_t v11 = (&v13)[i];
    if ((v11 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return (pxrInternal__aapl__pxrReserved__::HdIntegratorSchemaTokens_StaticTokenType *)this;
}

void sub_21720E5B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  sub_216889A04(&a10);
  uint64_t v15 = 8;
  while (1)
  {
    uint64_t v16 = *(void *)(&a12 + v15);
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v15 -= 8;
    if (v15 == -8)
    {
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void pxrInternal__aapl__pxrReserved__::HdIntegratorSchema::GetResource(pxrInternal__aapl__pxrReserved__::HdIntegratorSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdIntegratorSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdIntegratorSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171C2300(&pxrInternal__aapl__pxrReserved__::HdIntegratorSchemaTokens);
  }
  uint64_t v5 = (atomic_uint *)*((void *)v4 + 1);
  uint64_t v10 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v10 = v6;
    }
  }
  sub_217199340((uint64_t *)this, &v11);
  uint64_t v8 = v11;
  unint64_t v7 = v12;
  if (v12)
  {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    sub_216784EC4(v7);
    uint64_t v9 = v12;
    *a2 = v8;
    a2[1] = v7;
    if (v9) {
      sub_216784EC4(v9);
    }
  }
  else
  {
    *a2 = v11;
    a2[1] = 0;
  }
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdIntegratorSchema::BuildRetained(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  v11[1] = *MEMORY[0x263EF8340];
  uint64_t v10 = 0;
  v11[0] = 0;
  uint64_t v9 = 0;
  if (*a1)
  {
    uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdIntegratorSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdIntegratorSchemaTokens);
    if (!v4) {
      uint64_t v4 = sub_2171C2300(&pxrInternal__aapl__pxrReserved__::HdIntegratorSchemaTokens);
    }
    sub_2168D2318(v11, (void *)v4 + 1);
    uint64_t v6 = *a1;
    uint64_t v5 = (std::__shared_weak_count *)a1[1];
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v6;
    uint64_t v10 = v5;
    unint64_t v7 = 1;
  }
  else
  {
    unint64_t v7 = 0;
  }
  pxrInternal__aapl__pxrReserved__::HdRetainedContainerDataSource::New(v7, v11, &v9, &v8);
  *a2 = v8;
  if (v10) {
    sub_216784EC4(v10);
  }
  if ((v11[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_21720E824(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13)
{
  if (a12) {
    sub_216784EC4(a12);
  }
  if ((a13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::HdIntegratorSchema::GetFromParent(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdIntegratorSchemaTokens)) {
      sub_2171C2300(&pxrInternal__aapl__pxrReserved__::HdIntegratorSchemaTokens);
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v3 + 24))(&v8, v3);
    sub_2171997C0((uint64_t)&v8, &v10);
    uint64_t v6 = v10;
    uint64_t v5 = v11;
    if (v11)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_216784EC4(v5);
      unint64_t v7 = v11;
      *a2 = v6;
      a2[1] = v5;
      if (v7) {
        sub_216784EC4(v7);
      }
    }
    else
    {
      *a2 = v10;
      a2[1] = 0;
    }
    if (v9) {
      sub_216784EC4(v9);
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    *a2 = 0;
    a2[1] = 0;
  }
}

pxrInternal__aapl__pxrReserved__::HdIntegratorSchemaTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::HdIntegratorSchema::GetSchemaToken(pxrInternal__aapl__pxrReserved__::HdIntegratorSchema *this)
{
  uint64_t result = (pxrInternal__aapl__pxrReserved__::HdIntegratorSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdIntegratorSchemaTokens);
  if (!result) {
    return sub_2171C2300(&pxrInternal__aapl__pxrReserved__::HdIntegratorSchemaTokens);
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::HdIntegratorSchema::GetDefaultLocator(pxrInternal__aapl__pxrReserved__::HdIntegratorSchema *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B97BA0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B97BA0))
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::HdIntegratorSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdIntegratorSchemaTokens);
    if (!v2) {
      uint64_t v2 = sub_2171C2300(&pxrInternal__aapl__pxrReserved__::HdIntegratorSchemaTokens);
    }
    pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&unk_267B97B68, v2);
    __cxa_atexit((void (*)(void *))sub_217199930, &unk_267B97B68, &dword_216758000);
    __cxa_guard_release(&qword_267B97BA0);
  }
  return &unk_267B97B68;
}

void sub_21720EA2C(_Unwind_Exception *a1)
{
}

_DWORD *pxrInternal__aapl__pxrReserved__::HdIntegratorSchema::GetResourceLocator(pxrInternal__aapl__pxrReserved__::HdIntegratorSchema *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B97BE0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::HdIntegratorSchema *)__cxa_guard_acquire(&qword_267B97BE0);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::HdIntegratorSchema::GetDefaultLocator(v2);
      uint64_t v3 = (pxrInternal__aapl__pxrReserved__::HdIntegratorSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdIntegratorSchemaTokens);
      if (!v3) {
        uint64_t v3 = sub_2171C2300(&pxrInternal__aapl__pxrReserved__::HdIntegratorSchemaTokens);
      }
      pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::Append((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&unk_267B97B68, (pxrInternal__aapl__pxrReserved__::HdIntegratorSchemaTokens_StaticTokenType *)((char *)v3 + 8), dword_267B97BA8);
      __cxa_atexit((void (*)(void *))sub_217199930, dword_267B97BA8, &dword_216758000);
      __cxa_guard_release(&qword_267B97BE0);
    }
  }
  return dword_267B97BA8;
}

void sub_21720EAF8(_Unwind_Exception *a1)
{
}

void *pxrInternal__aapl__pxrReserved__::HdIntegratorSchema::Builder::SetResource(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

void *pxrInternal__aapl__pxrReserved__::HdLazyContainerDataSource::HdLazyContainerDataSource(void *a1, uint64_t a2)
{
  *a1 = &unk_26C781128;
  sub_21720EE24((uint64_t)(a1 + 1), a2);
  a1[5] = 0;
  a1[6] = 0;
  return a1;
}

void sub_21720EBA4(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdLazyContainerDataSource::~HdLazyContainerDataSource(pxrInternal__aapl__pxrReserved__::HdLazyContainerDataSource *this)
{
  *(void *)this = &unk_26C781128;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v2) {
    sub_216784EC4(v2);
  }
  sub_21720EEBC((void *)this + 1);

  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(this);
}

{
  void *v1;
  uint64_t vars8;

  pxrInternal__aapl__pxrReserved__::HdLazyContainerDataSource::~HdLazyContainerDataSource(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::HdLazyContainerDataSource::GetNames(pxrInternal__aapl__pxrReserved__::HdLazyContainerDataSource *this@<X0>, void *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::HdLazyContainerDataSource::_GetSrc(this, &v4);
  uint64_t v3 = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
  }
  if (v5) {
    sub_216784EC4(v5);
  }
  if (!v3)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
}

void sub_21720ECC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::HdLazyContainerDataSource::_GetSrc(pxrInternal__aapl__pxrReserved__::HdLazyContainerDataSource *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = (uint64_t *)((char *)this + 40);
  sub_2171BE4CC((void *)this + 5, a2);
  if (!*a2)
  {
    uint64_t v5 = (std::__shared_weak_count *)a2[1];
    if (v5) {
      sub_216784EC4(v5);
    }
    uint64_t v6 = *((void *)this + 4);
    if (!v6) {
      sub_21683A7CC();
    }
    (*(void (**)(uint64_t))(*(void *)v6 + 48))(v6);
    sub_2171B5D54(v4, a2);
  }
}

void sub_21720ED6C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    sub_216784EC4(v3);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::HdLazyContainerDataSource::Get(pxrInternal__aapl__pxrReserved__::HdLazyContainerDataSource *this@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, void *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::HdLazyContainerDataSource::_GetSrc(this, &v6);
  uint64_t v5 = v6;
  if (v6) {
    (*(void (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::TfToken *))(*(void *)v6 + 24))(v6, a2);
  }
  if (v7) {
    sub_216784EC4(v7);
  }
  if (!v5)
  {
    *a3 = 0;
    a3[1] = 0;
  }
}

void sub_21720EE0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21720EE24(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_21720EEBC(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens_StaticTokenType::~HdLegacyDisplayStyleSchemaTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens_StaticTokenType *this)
{
  uint64_t v11 = (void **)((char *)this + 80);
  sub_216889A04(&v11);
  uint64_t v2 = *((void *)this + 9);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 8);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *((void *)this + 7);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *((void *)this + 6);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v6 = *((void *)this + 5);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v7 = *((void *)this + 4);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v8 = *((void *)this + 3);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v9 = *((void *)this + 2);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v10 = *((void *)this + 1);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens_StaticTokenType::HdLegacyDisplayStyleSchemaTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens_StaticTokenType *this)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v2 = (uint64_t *)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "displayStyle", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2, "refineLevel", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 16, "flatShadingEnabled", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 24, "displacementEnabled", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 32, "occludedSelectionShowsThrough", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 40, "pointsShadingEnabled", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 48, "materialIsFinal", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 56, "shadingStyle", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 64, "reprSelector", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 72, "cullStyle", 0);
  uint64_t v3 = *(void *)this;
  uint64_t v19 = v3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v19 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v4 = *v2;
  uint64_t v20 = v4;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v20 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v5 = *((void *)this + 2);
  uint64_t v21 = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v21 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v6 = *((void *)this + 3);
  uint64_t v22 = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v22 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = *((void *)this + 4);
  uint64_t v23 = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v23 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v8 = *((void *)this + 5);
  uint64_t v24 = v8;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v24 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v9 = *((void *)this + 6);
  uint64_t v25 = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v25 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v10 = *((void *)this + 7);
  uint64_t v26 = v10;
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v26 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v11 = *((void *)this + 8);
  uint64_t v27 = v11;
  if ((v11 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v27 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v12 = *((void *)this + 9);
  uint64_t v28 = v12;
  if ((v12 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v28 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  uint64_t v13 = (char *)operator new(0x50uLL);
  uint64_t v14 = 0;
  *((void *)this + 10) = v13;
  *((void *)this + 11) = v13;
  *((void *)this + 12) = v13 + 80;
  do
  {
    uint64_t v15 = *(uint64_t *)((char *)&v19 + v14);
    *(void *)&v13[v14] = v15;
    if ((v15 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v13[v14] &= 0xFFFFFFFFFFFFFFF8;
    }
    v14 += 8;
  }
  while (v14 != 80);
  *((void *)this + 11) = v13 + 80;
  for (uint64_t i = 72; i != -8; i -= 8)
  {
    uint64_t v17 = *(uint64_t *)((char *)&v19 + i);
    if ((v17 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return this;
}

void sub_21720F424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void **a10, uint64_t a11, char a12)
{
  sub_216889A04(&a10);
  uint64_t v22 = 72;
  while (1)
  {
    uint64_t v23 = *(void *)(&a12 + v22);
    if ((v23 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v22 -= 8;
    if (v22 == -8)
    {
      if ((*v21 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v20 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_21720F594()
{
}

void pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchema::GetRefineLevel(pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171C1B58(&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
  }
  uint64_t v5 = (atomic_uint *)*((void *)v4 + 1);
  uint64_t v7 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v7 = v6;
    }
  }
  sub_217209654((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchema::GetFlatShadingEnabled(pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171C1B58(&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
  }
  uint64_t v5 = (atomic_uint *)*((void *)v4 + 2);
  uint64_t v7 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v7 = v6;
    }
  }
  sub_2171A26A0((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchema::GetDisplacementEnabled(pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171C1B58(&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
  }
  uint64_t v5 = (atomic_uint *)*((void *)v4 + 3);
  uint64_t v7 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v7 = v6;
    }
  }
  sub_2171A26A0((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchema::GetOccludedSelectionShowsThrough(pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171C1B58(&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
  }
  uint64_t v5 = (atomic_uint *)*((void *)v4 + 4);
  uint64_t v7 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v7 = v6;
    }
  }
  sub_2171A26A0((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchema::GetPointsShadingEnabled(pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171C1B58(&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
  }
  uint64_t v5 = (atomic_uint *)*((void *)v4 + 5);
  uint64_t v7 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v7 = v6;
    }
  }
  sub_2171A26A0((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchema::GetMaterialIsFinal(pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171C1B58(&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
  }
  uint64_t v5 = (atomic_uint *)*((void *)v4 + 6);
  uint64_t v7 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v7 = v6;
    }
  }
  sub_2171A26A0((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchema::GetShadingStyle(pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171C1B58(&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
  }
  uint64_t v5 = (atomic_uint *)*((void *)v4 + 7);
  uint64_t v7 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v7 = v6;
    }
  }
  sub_21719B418((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchema::GetReprSelector(pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171C1B58(&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
  }
  uint64_t v5 = (atomic_uint *)*((void *)v4 + 8);
  uint64_t v7 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v7 = v6;
    }
  }
  sub_21720FB40((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_21720FB40(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (v3)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v3 + 24))(&v4);
    sub_2172107E4((uint64_t)&v4, a2);
    if (v5) {
      sub_216784EC4(v5);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

void pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchema::GetCullStyle(pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_2171C1B58(&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
  }
  uint64_t v5 = (atomic_uint *)*((void *)v4 + 9);
  uint64_t v7 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v7 = v6;
    }
  }
  sub_21719B418((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchema::BuildRetained(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, uint64_t *a7@<X6>, uint64_t *a8@<X7>, _OWORD *a9@<X8>, uint64_t *a10)
{
  uint64_t v80 = *MEMORY[0x263EF8340];
  uint64_t v79 = 0;
  memset(v78, 0, sizeof(v78));
  memset(v77, 0, sizeof(v77));
  if (*a1)
  {
    uint64_t v18 = (pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
    if (!v18) {
      uint64_t v18 = sub_2171C1B58(&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
    }
    sub_2168D2318(v78, (void *)v18 + 1);
    uint64_t v20 = *a1;
    uint64_t v19 = a1[1];
    if (v19) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v21 = (std::__shared_weak_count *)*((void *)&v77[0] + 1);
    *(void *)&v77[0] = v20;
    *((void *)&v77[0] + 1) = v19;
    if (v21) {
      sub_216784EC4(v21);
    }
    uint64_t v22 = 1;
  }
  else
  {
    uint64_t v22 = 0;
  }
  if (*a2)
  {
    uint64_t v23 = (pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
    if (!v23) {
      uint64_t v23 = sub_2171C1B58(&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
    }
    sub_2168D2318((void *)((unint64_t)v78 | (8 * v22)), (void *)v23 + 2);
    uint64_t v24 = v22 + 1;
    uint64_t v25 = &v77[v22];
    uint64_t v27 = *a2;
    uint64_t v26 = a2[1];
    if (v26) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v28 = (std::__shared_weak_count *)v25[1];
    *uint64_t v25 = v27;
    v25[1] = v26;
    if (v28) {
      sub_216784EC4(v28);
    }
  }
  else
  {
    uint64_t v24 = v22;
  }
  if (*a3)
  {
    uint64_t v29 = (pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
    if (!v29) {
      uint64_t v29 = sub_2171C1B58(&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
    }
    sub_2168D2318((void *)v78 + v24, (void *)v29 + 3);
    uint64_t v30 = v24 + 1;
    uint64_t v31 = &v77[v24];
    uint64_t v33 = *a3;
    uint64_t v32 = a3[1];
    if (v32) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v32 + 8), 1uLL, memory_order_relaxed);
    }
    double v34 = (std::__shared_weak_count *)v31[1];
    void *v31 = v33;
    v31[1] = v32;
    if (v34) {
      sub_216784EC4(v34);
    }
  }
  else
  {
    uint64_t v30 = v24;
  }
  if (*a4)
  {
    uint64_t v35 = (pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
    if (!v35) {
      uint64_t v35 = sub_2171C1B58(&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
    }
    sub_2168D2318((void *)v78 + v30, (void *)v35 + 4);
    uint64_t v36 = v30 + 1;
    long long v37 = &v77[v30];
    uint64_t v39 = *a4;
    uint64_t v38 = a4[1];
    if (v38) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v38 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v40 = (std::__shared_weak_count *)v37[1];
    void *v37 = v39;
    v37[1] = v38;
    if (v40) {
      sub_216784EC4(v40);
    }
  }
  else
  {
    uint64_t v36 = v30;
  }
  if (*a5)
  {
    long long v41 = (pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
    if (!v41) {
      long long v41 = sub_2171C1B58(&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
    }
    sub_2168D2318((void *)v78 + v36, (void *)v41 + 5);
    unint64_t v42 = v36 + 1;
    long long v43 = &v77[v36];
    uint64_t v45 = *a5;
    uint64_t v44 = a5[1];
    if (v44) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v44 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v46 = (std::__shared_weak_count *)v43[1];
    void *v43 = v45;
    v43[1] = v44;
    if (v46) {
      sub_216784EC4(v46);
    }
  }
  else
  {
    unint64_t v42 = v36;
  }
  if (*a6)
  {
    uint64_t v47 = (pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
    if (!v47) {
      uint64_t v47 = sub_2171C1B58(&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
    }
    sub_2168D2318((void *)v78 + v42, (void *)v47 + 6);
    unint64_t v48 = v42 + 1;
    uint64_t v49 = &v77[v42];
    uint64_t v51 = *a6;
    uint64_t v50 = a6[1];
    if (v50) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v50 + 8), 1uLL, memory_order_relaxed);
    }
    long long v52 = (std::__shared_weak_count *)v49[1];
    void *v49 = v51;
    v49[1] = v50;
    if (v52) {
      sub_216784EC4(v52);
    }
  }
  else
  {
    unint64_t v48 = v42;
  }
  if (*a7)
  {
    long long v53 = (pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
    if (!v53) {
      long long v53 = sub_2171C1B58(&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
    }
    sub_2168D2318((void *)v78 + v48, (void *)v53 + 7);
    unint64_t v54 = v48 + 1;
    long long v55 = &v77[v48];
    uint64_t v57 = *a7;
    uint64_t v56 = a7[1];
    if (v56) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v56 + 8), 1uLL, memory_order_relaxed);
    }
    long long v58 = (std::__shared_weak_count *)v55[1];
    void *v55 = v57;
    v55[1] = v56;
    if (v58) {
      sub_216784EC4(v58);
    }
  }
  else
  {
    unint64_t v54 = v48;
  }
  if (*a8)
  {
    long long v59 = (pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
    if (!v59) {
      long long v59 = sub_2171C1B58(&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
    }
    sub_2168D2318((void *)v78 + v54, (void *)v59 + 8);
    unint64_t v60 = v54 + 1;
    long long v61 = &v77[v54];
    uint64_t v63 = *a8;
    uint64_t v62 = a8[1];
    if (v62) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v62 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v64 = (std::__shared_weak_count *)v61[1];
    void *v61 = v63;
    v61[1] = v62;
    if (v64) {
      sub_216784EC4(v64);
    }
  }
  else
  {
    unint64_t v60 = v54;
  }
  if (*a10)
  {
    uint64_t v65 = (pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
    if (!v65) {
      uint64_t v65 = sub_2171C1B58(&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
    }
    sub_2168D2318((void *)v78 + v60, (void *)v65 + 9);
    unint64_t v66 = v60 + 1;
    unint64_t v67 = &v77[v60];
    uint64_t v69 = *a10;
    uint64_t v68 = a10[1];
    if (v68) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v68 + 8), 1uLL, memory_order_relaxed);
    }
    long long v70 = (std::__shared_weak_count *)v67[1];
    void *v67 = v69;
    v67[1] = v68;
    if (v70) {
      sub_216784EC4(v70);
    }
  }
  else
  {
    unint64_t v66 = v60;
  }
  pxrInternal__aapl__pxrReserved__::HdRetainedContainerDataSource::New(v66, (uint64_t *)v78, (uint64_t *)v77, &v76);
  *a9 = v76;
  for (uint64_t i = 136; i != -8; i -= 16)
  {
    long long v72 = *(std::__shared_weak_count **)((char *)v77 + i);
    if (v72) {
      sub_216784EC4(v72);
    }
  }
  for (uint64_t j = 64; j != -8; j -= 8)
  {
    uint64_t v74 = *(void *)((char *)v78 + j);
    if ((v74 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v74 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
}

void sub_217210138(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v32 = 136;
  while (1)
  {
    uint64_t v33 = *(std::__shared_weak_count **)(&a13 + v32);
    if (v33) {
      sub_216784EC4(v33);
    }
    v32 -= 16;
    if (v32 == -8)
    {
      uint64_t v34 = 64;
      while (1)
      {
        uint64_t v35 = *(void *)(&a31 + v34);
        if ((v35 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        v34 -= 8;
        if (v34 == -8) {
          _Unwind_Resume(exception_object);
        }
      }
    }
  }
}

void pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchema::GetFromParent(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens)) {
      sub_2171C1B58(&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v3 + 24))(&v8, v3);
    sub_2171997C0((uint64_t)&v8, &v10);
    uint64_t v6 = v10;
    uint64_t v5 = v11;
    if (v11)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_216784EC4(v5);
      uint64_t v7 = v11;
      *a2 = v6;
      a2[1] = v5;
      if (v7) {
        sub_216784EC4(v7);
      }
    }
    else
    {
      *a2 = v10;
      a2[1] = 0;
    }
    if (v9) {
      sub_216784EC4(v9);
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    *a2 = 0;
    a2[1] = 0;
  }
}

pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchema::GetSchemaToken(pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchema *this)
{
  uint64_t result = (pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
  if (!result) {
    return sub_2171C1B58(&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchema::GetDefaultLocator(pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchema *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B97C20, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B97C20))
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
    if (!v2) {
      uint64_t v2 = sub_2171C1B58(&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
    }
    pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&unk_267B97BE8, v2);
    __cxa_atexit((void (*)(void *))sub_217199930, &unk_267B97BE8, &dword_216758000);
    __cxa_guard_release(&qword_267B97C20);
  }
  return &unk_267B97BE8;
}

void sub_217210368(_Unwind_Exception *a1)
{
}

_DWORD *pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchema::GetReprSelectorLocator(pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchema *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B97C60, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchema *)__cxa_guard_acquire(&qword_267B97C60);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchema::GetDefaultLocator(v2);
      uint64_t v3 = (pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
      if (!v3) {
        uint64_t v3 = sub_2171C1B58(&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
      }
      pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::Append((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&unk_267B97BE8, (pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens_StaticTokenType *)((char *)v3 + 64), dword_267B97C28);
      __cxa_atexit((void (*)(void *))sub_217199930, dword_267B97C28, &dword_216758000);
      __cxa_guard_release(&qword_267B97C60);
    }
  }
  return dword_267B97C28;
}

void sub_217210434(_Unwind_Exception *a1)
{
}

_DWORD *pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchema::GetCullStyleLocator(pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchema *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B97CA0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchema *)__cxa_guard_acquire(&qword_267B97CA0);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchema::GetDefaultLocator(v2);
      uint64_t v3 = (pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
      if (!v3) {
        uint64_t v3 = sub_2171C1B58(&pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens);
      }
      pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::Append((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&unk_267B97BE8, (pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchemaTokens_StaticTokenType *)((char *)v3 + 72), dword_267B97C68);
      __cxa_atexit((void (*)(void *))sub_217199930, dword_267B97C68, &dword_216758000);
      __cxa_guard_release(&qword_267B97CA0);
    }
  }
  return dword_267B97C68;
}

void sub_217210500(_Unwind_Exception *a1)
{
}

void *pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchema::Builder::SetRefineLevel(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchema::Builder::SetFlatShadingEnabled(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 24);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchema::Builder::SetDisplacementEnabled(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 40);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchema::Builder::SetOccludedSelectionShowsThrough(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 56);
  *(void *)(a1 + 4sub_2171F4108((uint64_t)this + 8) = v4;
  *(void *)(a1 + 56) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchema::Builder::SetPointsShadingEnabled(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = v4;
  *(void *)(a1 + 72) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchema::Builder::SetMaterialIsFinal(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 88);
  *(void *)(a1 + 80) = v4;
  *(void *)(a1 + 8sub_2171F4108((uint64_t)this + 8) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchema::Builder::SetShadingStyle(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 104);
  *(void *)(a1 + 96) = v4;
  *(void *)(a1 + 104) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchema::Builder::SetReprSelector(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 120);
  *(void *)(a1 + 112) = v4;
  *(void *)(a1 + 120) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchema::Builder::SetCullStyle(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 136);
  *(void *)(a1 + 12sub_2171F4108((uint64_t)this + 8) = v4;
  *(void *)(a1 + 136) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchema::Builder::Build(pxrInternal__aapl__pxrReserved__::HdLegacyDisplayStyleSchema::Builder *this@<X0>, _OWORD *a2@<X8>)
{
}

void *sub_2172107E4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = *(void **)a1;
  if (result
    && (uint64_t result = __dynamic_cast(result, (const struct __class_type_info *)&unk_26C77BD10, (const struct __class_type_info *)&unk_26C77D248, 0)) != 0)
  {
    uint64_t v5 = *(void *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::HdLegacyPrimSceneIndex::AddLegacyPrim(pxrInternal__aapl__pxrReserved__::HdLegacyPrimSceneIndex *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, atomic_uint **a3, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *a4)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v12 = a4;
  sub_216981010(&v15, a2);
  sub_21698105C(&v16, (_DWORD *)a2 + 1);
  unint64_t v7 = (unint64_t)*a3;
  unint64_t v17 = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v17 &= 0xFFFFFFFFFFFFFFF8;
  }
  sub_217210A80(a2, a3, &v12, &v8);
  long long v18 = v8;
  long long v8 = 0uLL;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v9 = 0;
  uint64_t v13 = &v9;
  char v14 = 0;
  uint64_t v9 = (char *)operator new(0x20uLL);
  uint64_t v10 = (uint64_t)v9;
  uint64_t v11 = v9 + 32;
  uint64_t v10 = sub_217211348((uint64_t)&v11, (uint64_t)&v15, (uint64_t)&v19, (uint64_t)v9);
  (*(void (**)(pxrInternal__aapl__pxrReserved__::HdLegacyPrimSceneIndex *, char **))(*(void *)this + 40))(this, &v9);
  uint64_t v13 = &v9;
  sub_21721154C((void ***)&v13);
  if (*((void *)&v18 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v18 + 1));
  }
  if ((v17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
  sub_21697C414(&v15);
  if (*((void *)&v8 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v8 + 1));
  }
}

void sub_217210A08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *sub_217210A80@<X0>(_DWORD *a1@<X0>, atomic_uint **a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  long long v8 = operator new(0x58uLL);
  sub_216981010(&v13, a1);
  sub_21698105C(&v14, a1 + 1);
  uint64_t v9 = *a2;
  uint64_t v12 = v9;
  if ((v9 & 7) != 0)
  {
    uint64_t v10 = (atomic_uint *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v10, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v12 = v10;
    }
  }
  pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim::HdDataSourceLegacyPrim(v8, &v13, &v12, *a3);
  sub_217211238(a4, (uint64_t)v8);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
  return sub_21697C414(&v13);
}

void sub_217210B68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if ((a2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_21697B754((int *)va);
  if (v3) {
    operator delete(v2);
  }
  _Unwind_Resume(a1);
}

_DWORD *sub_217210BA0(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    sub_216784EC4(v2);
  }
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));

  return sub_21697C414((_DWORD *)a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::HdLegacyPrimSceneIndex::RemovePrim(pxrInternal__aapl__pxrReserved__::HdLegacyPrimSceneIndex *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  v17[1] = *MEMORY[0x263EF8340];
  (*(void (**)(void **__return_ptr))(*(void *)this + 24))(&v10);
  uint64_t v4 = v10;
  uint64_t v5 = (void *)v11;
  int v15 = &v10;
  sub_216981168(&v15);
  if (v4 == v5)
  {
    sub_216981010(&v15, a2);
    sub_21698105C((_DWORD *)&v15 + 1, (_DWORD *)a2 + 1);
    v14[12] = 0x1000000001;
    sub_216981010(&v10, &v15);
    sub_21698105C((_DWORD *)&v10 + 1, (_DWORD *)&v15 + 1);
    (*(void (**)(pxrInternal__aapl__pxrReserved__::HdLegacyPrimSceneIndex *, void **))(*(void *)this + 48))(this, &v10);
    sub_2171FC8D0(&v10);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
    uint64_t v6 = (void **)&v15;
  }
  else
  {
    sub_216981010(&v10, a2);
    sub_21698105C((_DWORD *)&v10 + 1, (_DWORD *)a2 + 1);
    unint64_t v11 = 0;
    uint64_t v12 = 0;
    int v13 = 0;
    int v16 = 0;
    v17[0] = 0;
    int v15 = 0;
    long long v8 = &v15;
    char v9 = 0;
    int v15 = (void **)operator new(0x20uLL);
    int v16 = v15;
    v17[0] = v15 + 4;
    int v16 = (void **)sub_217211348((uint64_t)v17, (uint64_t)&v10, (uint64_t)v14, (uint64_t)v15);
    (*(void (**)(pxrInternal__aapl__pxrReserved__::HdLegacyPrimSceneIndex *, void ***))(*(void *)this + 40))(this, &v15);
    long long v8 = &v15;
    sub_21721154C((void ***)&v8);
    if (v13) {
      sub_216784EC4(v13);
    }
    if ((v11 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v10 + 1);
    uint64_t v6 = &v10;
  }
  return sub_21697C414(v6);
}

void sub_217210E28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *sub_217210E90(_DWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);

  return sub_21697C414(a1);
}

void **pxrInternal__aapl__pxrReserved__::HdLegacyPrimSceneIndex::DirtyPrims(pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t)a1;
  if (*(_DWORD *)(a2 + 7428) >= 0x11u) {
    uint64_t v5 = *(void *)a2;
  }
  else {
    uint64_t v5 = a2;
  }
  unsigned int v6 = *(_DWORD *)(a2 + 7424);
  if (v6)
  {
    uint64_t v7 = 464 * v6;
    do
    {
      CachedLocators = (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet **)pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim::GetCachedLocators(a1);
      a1 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim *)pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet::Intersects((pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *)(v5 + 8), CachedLocators);
      if (a1)
      {
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v4 + 16))(&v10, v4, v5);
        long long v12 = v11;
        long long v11 = 0uLL;
        sub_217211018((uint64_t)&v12, &v13);
        if (*((void *)&v12 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v12 + 1));
        }
        if (*((void *)&v11 + 1)) {
          sub_216784EC4(*((std::__shared_weak_count **)&v11 + 1));
        }
        if ((v10 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if (v13) {
          pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim::PrimDirtied(v13, (const pxrInternal__aapl__pxrReserved__::HdDataSourceLocatorSet *)(v5 + 8));
        }
        a1 = (pxrInternal__aapl__pxrReserved__::HdDataSourceLegacyPrim *)v14;
        if (v14) {
          sub_216784EC4(v14);
        }
      }
      v5 += 464;
      v7 -= 464;
    }
    while (v7);
  }
  return pxrInternal__aapl__pxrReserved__::HdRetainedSceneIndex::DirtyPrims(v4, a2, a3);
}

void sub_217211000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_216784EC4(a16);
  }
  _Unwind_Resume(exception_object);
}

void *sub_217211018@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = *(void **)a1;
  if (result
  {
    uint64_t v5 = *(void *)(a1 + 8);
    *a2 = result;
    a2[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void sub_2172110A8(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_26C7895E8;
  sub_217211154(a1 + 14);

  pxrInternal__aapl__pxrReserved__::HdSceneIndexBase::~HdSceneIndexBase((pxrInternal__aapl__pxrReserved__::HdSceneIndexBase *)a1);
}

void sub_2172110FC(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_26C7895E8;
  sub_217211154(a1 + 14);
  pxrInternal__aapl__pxrReserved__::HdSceneIndexBase::~HdSceneIndexBase((pxrInternal__aapl__pxrReserved__::HdSceneIndexBase *)a1);

  operator delete(v2);
}

uint64_t *sub_217211154(uint64_t *a1)
{
  sub_21721118C(a1);
  uint64_t v2 = (void *)*a1;
  if (*a1)
  {
    a1[1] = (uint64_t)v2;
    operator delete(v2);
  }
  return a1;
}

void sub_21721118C(uint64_t *a1)
{
  uint64_t v2 = a1[1] - *a1;
  if (v2)
  {
    uint64_t v3 = 0;
    uint64_t v4 = v2 >> 3;
    do
    {
      uint64_t v5 = *a1;
      uint64_t v6 = *(void *)(*a1 + 8 * v3);
      if (v6)
      {
        do
        {
          uint64_t v7 = *(std::__shared_weak_count **)(v6 + 24);
          uint64_t v8 = *(void *)(v6 + 32);
          if (v7) {
            sub_216784EC4(v7);
          }
          uint64_t v9 = *(void *)(v6 + 8);
          if ((v9 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v6 + 4));
          uint64_t v10 = sub_21697C414((_DWORD *)v6);
          operator delete(v10);
          uint64_t v6 = v8;
        }
        while (v8);
        uint64_t v5 = *a1;
      }
      *(void *)(v5 + 8 * v3++) = 0;
    }
    while (v3 != v4);
  }
  a1[3] = 0;
}

void *sub_217211238(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v4 = operator new(0x20uLL);
  void *v4 = &unk_26C7811D8;
  v4[1] = 0;
  _OWORD v4[2] = 0;
  void v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_217211290(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_2173254E8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_2172112AC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_2172112D4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_217211304(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C781228)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t sub_217211348(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  uint64_t v9[2] = &v12;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_2172113DC(a1, v4, v6);
      v6 += 32;
      uint64_t v4 = v12 + 32;
      v12 += 32;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  sub_21721145C((uint64_t)v9);
  return v4;
}

_DWORD *sub_2172113DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_216981010((_DWORD *)a2, (_DWORD *)a3);
  uint64_t result = sub_21698105C((_DWORD *)(a2 + 4), (_DWORD *)(a3 + 4));
  uint64_t v6 = *(void *)(a3 + 8);
  *(void *)(a2 + sub_2171F4108((uint64_t)this + 8) = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *(void *)(a2 + 8) &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = *(void *)(a3 + 24);
  *(void *)(a2 + 16) = *(void *)(a3 + 16);
  *(void *)(a2 + 24) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_21721145C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_217211494((uint64_t *)a1);
  }
  return a1;
}

uint64_t *sub_217211494(uint64_t *result)
{
  uint64_t v2 = (uint64_t *)result[1];
  uint64_t v1 = (uint64_t *)result[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *result;
    do
    {
      v3 -= 32;
      uint64_t result = (uint64_t *)sub_2172114E8(v5, v3);
    }
    while (v3 != v4);
  }
  return result;
}

_DWORD *sub_2172114E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a2 + 24);
  if (v3) {
    sub_216784EC4(v3);
  }
  uint64_t v4 = *(void *)(a2 + 8);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 4));

  return sub_21697C414((_DWORD *)a2);
}

void sub_21721154C(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 32;
        sub_2172114E8((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens_StaticTokenType::~HdLensDistortionSchemaTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens_StaticTokenType *this)
{
  uint64_t v12 = (void **)((char *)this + 88);
  sub_216889A04(&v12);
  uint64_t v2 = *((void *)this + 10);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 9);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *((void *)this + 8);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *((void *)this + 7);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v6 = *((void *)this + 6);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v7 = *((void *)this + 5);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v8 = *((void *)this + 4);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v9 = *((void *)this + 3);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v10 = *((void *)this + 2);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v11 = *((void *)this + 1);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens_StaticTokenType::HdLensDistortionSchemaTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens_StaticTokenType *this)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v19 = (uint64_t *)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "lensDistortion", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v19, "type", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 16, "k1", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 24, "k2", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 32, "center", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 40, "anaSq", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 48, "asym", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 56, "scale", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 64, "ior", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 72, "standard", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 80, "fisheye", 0);
  uint64_t v2 = *(void *)this;
  uint64_t v20 = v2;
  if ((v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v20 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v3 = *v19;
  uint64_t v21 = v3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v21 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v4 = *((void *)this + 2);
  uint64_t v22 = v4;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v22 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v5 = *((void *)this + 3);
  uint64_t v23 = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v23 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v6 = *((void *)this + 4);
  uint64_t v24 = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v24 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = *((void *)this + 5);
  uint64_t v25 = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v25 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v8 = *((void *)this + 6);
  uint64_t v26 = v8;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v26 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v9 = *((void *)this + 7);
  uint64_t v27 = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v27 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v10 = *((void *)this + 8);
  uint64_t v28 = v10;
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v28 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v11 = *((void *)this + 9);
  uint64_t v29 = v11;
  if ((v11 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v29 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v12 = *((void *)this + 10);
  uint64_t v30 = v12;
  if ((v12 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v30 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  int v13 = (char *)operator new(0x58uLL);
  uint64_t v14 = 0;
  *((void *)this + 11) = v13;
  *((void *)this + 12) = v13;
  *((void *)this + 13) = v13 + 88;
  do
  {
    uint64_t v15 = *(uint64_t *)((char *)&v20 + v14);
    *(void *)&v13[v14] = v15;
    if ((v15 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v13[v14] &= 0xFFFFFFFFFFFFFFF8;
    }
    v14 += 8;
  }
  while (v14 != 88);
  *((void *)this + 12) = v13 + 88;
  for (uint64_t i = 80; i != -8; i -= 8)
  {
    uint64_t v17 = *(uint64_t *)((char *)&v20 + i);
    if ((v17 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return this;
}

void sub_217211B28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void *a10, void **a11, uint64_t a12, char a13)
{
  sub_216889A04(&a11);
  uint64_t v23 = 80;
  while (1)
  {
    uint64_t v24 = *(void *)(&a13 + v23);
    if ((v24 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v23 -= 8;
    if (v23 == -8)
    {
      if ((*v14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v22 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v21 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v20 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a10 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_217211CB4()
{
}

void sub_217211CBC()
{
}

void pxrInternal__aapl__pxrReserved__::HdLensDistortionSchema::GetType(pxrInternal__aapl__pxrReserved__::HdLensDistortionSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_217212D60(&pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens);
  }
  uint64_t v5 = (atomic_uint *)*((void *)v4 + 1);
  uint64_t v7 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v7 = v6;
    }
  }
  sub_21719B418((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdLensDistortionSchema::GetK1(pxrInternal__aapl__pxrReserved__::HdLensDistortionSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_217212D60(&pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens);
  }
  uint64_t v5 = (atomic_uint *)*((void *)v4 + 2);
  uint64_t v7 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v7 = v6;
    }
  }
  sub_2171A1C50((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdLensDistortionSchema::GetK2(pxrInternal__aapl__pxrReserved__::HdLensDistortionSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_217212D60(&pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens);
  }
  uint64_t v5 = (atomic_uint *)*((void *)v4 + 3);
  uint64_t v7 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v7 = v6;
    }
  }
  sub_2171A1C50((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdLensDistortionSchema::GetCenter(pxrInternal__aapl__pxrReserved__::HdLensDistortionSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_217212D60(&pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens);
  }
  uint64_t v5 = (atomic_uint *)*((void *)v4 + 4);
  uint64_t v7 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v7 = v6;
    }
  }
  sub_2171A204C((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdLensDistortionSchema::GetAnaSq(pxrInternal__aapl__pxrReserved__::HdLensDistortionSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_217212D60(&pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens);
  }
  uint64_t v5 = (atomic_uint *)*((void *)v4 + 5);
  uint64_t v7 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v7 = v6;
    }
  }
  sub_2171A1C50((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdLensDistortionSchema::GetAsym(pxrInternal__aapl__pxrReserved__::HdLensDistortionSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_217212D60(&pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens);
  }
  uint64_t v5 = (atomic_uint *)*((void *)v4 + 6);
  uint64_t v7 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v7 = v6;
    }
  }
  sub_2171A204C((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdLensDistortionSchema::GetScale(pxrInternal__aapl__pxrReserved__::HdLensDistortionSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_217212D60(&pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens);
  }
  uint64_t v5 = (atomic_uint *)*((void *)v4 + 7);
  uint64_t v7 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v7 = v6;
    }
  }
  sub_2171A1C50((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdLensDistortionSchema::GetIor(pxrInternal__aapl__pxrReserved__::HdLensDistortionSchema *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens);
  if (!v4) {
    uint64_t v4 = sub_217212D60(&pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens);
  }
  uint64_t v5 = (atomic_uint *)*((void *)v4 + 8);
  uint64_t v7 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v7 = v6;
    }
  }
  sub_2171A1C50((uint64_t *)this, a2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void pxrInternal__aapl__pxrReserved__::HdLensDistortionSchema::BuildRetained(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, uint64_t *a7@<X6>, uint64_t *a8@<X7>, _OWORD *a9@<X8>)
{
  uint64_t v72 = *MEMORY[0x263EF8340];
  memset(v71, 0, sizeof(v71));
  memset(v70, 0, sizeof(v70));
  if (*a1)
  {
    uint64_t v17 = (pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens);
    if (!v17) {
      uint64_t v17 = sub_217212D60(&pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens);
    }
    sub_2168D2318(v71, (void *)v17 + 1);
    uint64_t v19 = *a1;
    uint64_t v18 = a1[1];
    if (v18) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v20 = (std::__shared_weak_count *)*((void *)&v70[0] + 1);
    *(void *)&v70[0] = v19;
    *((void *)&v70[0] + 1) = v18;
    if (v20) {
      sub_216784EC4(v20);
    }
    uint64_t v21 = 1;
  }
  else
  {
    uint64_t v21 = 0;
  }
  if (*a2)
  {
    uint64_t v22 = (pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens);
    if (!v22) {
      uint64_t v22 = sub_217212D60(&pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens);
    }
    sub_2168D2318((void *)((unint64_t)v71 | (8 * v21)), (void *)v22 + 2);
    uint64_t v23 = v21 + 1;
    uint64_t v24 = &v70[v21];
    uint64_t v26 = *a2;
    uint64_t v25 = a2[1];
    if (v25) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v27 = (std::__shared_weak_count *)v24[1];
    *uint64_t v24 = v26;
    v24[1] = v25;
    if (v27) {
      sub_216784EC4(v27);
    }
  }
  else
  {
    uint64_t v23 = v21;
  }
  if (*a3)
  {
    uint64_t v28 = (pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens);
    if (!v28) {
      uint64_t v28 = sub_217212D60(&pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens);
    }
    sub_2168D2318((void *)v71 + v23, (void *)v28 + 3);
    uint64_t v29 = v23 + 1;
    uint64_t v30 = &v70[v23];
    uint64_t v32 = *a3;
    uint64_t v31 = a3[1];
    if (v31) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v33 = (std::__shared_weak_count *)v30[1];
    *uint64_t v30 = v32;
    v30[1] = v31;
    if (v33) {
      sub_216784EC4(v33);
    }
  }
  else
  {
    uint64_t v29 = v23;
  }
  if (*a4)
  {
    uint64_t v34 = (pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens);
    if (!v34) {
      uint64_t v34 = sub_217212D60(&pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens);
    }
    sub_2168D2318((void *)v71 + v29, (void *)v34 + 4);
    uint64_t v35 = v29 + 1;
    uint64_t v36 = &v70[v29];
    uint64_t v38 = *a4;
    uint64_t v37 = a4[1];
    if (v37) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v37 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v39 = (std::__shared_weak_count *)v36[1];
    void *v36 = v38;
    v36[1] = v37;
    if (v39) {
      sub_216784EC4(v39);
    }
  }
  else
  {
    uint64_t v35 = v29;
  }
  if (*a5)
  {
    uint64_t v40 = (pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens);
    if (!v40) {
      uint64_t v40 = sub_217212D60(&pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens);
    }
    sub_2168D2318((void *)v71 + v35, (void *)v40 + 5);
    unint64_t v41 = v35 + 1;
    unint64_t v42 = &v70[v35];
    uint64_t v44 = *a5;
    uint64_t v43 = a5[1];
    if (v43) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v43 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v45 = (std::__shared_weak_count *)v42[1];
    void *v42 = v44;
    v42[1] = v43;
    if (v45) {
      sub_216784EC4(v45);
    }
  }
  else
  {
    unint64_t v41 = v35;
  }
  if (*a6)
  {
    uint64_t v46 = (pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens);
    if (!v46) {
      uint64_t v46 = sub_217212D60(&pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens);
    }
    sub_2168D2318((void *)v71 + v41, (void *)v46 + 6);
    unint64_t v47 = v41 + 1;
    unint64_t v48 = &v70[v41];
    uint64_t v50 = *a6;
    uint64_t v49 = a6[1];
    if (v49) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v49 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v51 = (std::__shared_weak_count *)v48[1];
    void *v48 = v50;
    v48[1] = v49;
    if (v51) {
      sub_216784EC4(v51);
    }
  }
  else
  {
    unint64_t v47 = v41;
  }
  if (*a7)
  {
    long long v52 = (pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens);
    if (!v52) {
      long long v52 = sub_217212D60(&pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens);
    }
    sub_2168D2318((void *)v71 + v47, (void *)v52 + 7);
    unint64_t v53 = v47 + 1;
    unint64_t v54 = &v70[v47];
    uint64_t v56 = *a7;
    uint64_t v55 = a7[1];
    if (v55) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v55 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v57 = (std::__shared_weak_count *)v54[1];
    void *v54 = v56;
    v54[1] = v55;
    if (v57) {
      sub_216784EC4(v57);
    }
  }
  else
  {
    unint64_t v53 = v47;
  }
  if (*a8)
  {
    long long v58 = (pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens);
    if (!v58) {
      long long v58 = sub_217212D60(&pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens);
    }
    sub_2168D2318((void *)v71 + v53, (void *)v58 + 8);
    unint64_t v59 = v53 + 1;
    unint64_t v60 = &v70[v53];
    uint64_t v62 = *a8;
    uint64_t v61 = a8[1];
    if (v61) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v61 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v63 = (std::__shared_weak_count *)v60[1];
    void *v60 = v62;
    v60[1] = v61;
    if (v63) {
      sub_216784EC4(v63);
    }
  }
  else
  {
    unint64_t v59 = v53;
  }
  pxrInternal__aapl__pxrReserved__::HdRetainedContainerDataSource::New(v59, (uint64_t *)v71, (uint64_t *)v70, &v69);
  *a9 = v69;
  for (uint64_t i = 120; i != -8; i -= 16)
  {
    uint64_t v65 = *(std::__shared_weak_count **)((char *)v70 + i);
    if (v65) {
      sub_216784EC4(v65);
    }
  }
  for (uint64_t j = 56; j != -8; j -= 8)
  {
    uint64_t v67 = *(void *)((char *)v71 + j);
    if ((v67 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v67 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
}

void sub_2172126C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  uint64_t v30 = 120;
  while (1)
  {
    uint64_t v31 = *(std::__shared_weak_count **)(&a13 + v30);
    if (v31) {
      sub_216784EC4(v31);
    }
    v30 -= 16;
    if (v30 == -8)
    {
      uint64_t v32 = 56;
      while (1)
      {
        uint64_t v33 = *(void *)(&a29 + v32);
        if ((v33 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        v32 -= 8;
        if (v32 == -8) {
          _Unwind_Resume(exception_object);
        }
      }
    }
  }
}

void pxrInternal__aapl__pxrReserved__::HdLensDistortionSchema::GetFromParent(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens)) {
      sub_217212D60(&pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens);
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v3 + 24))(&v8, v3);
    sub_2171997C0((uint64_t)&v8, &v10);
    uint64_t v6 = v10;
    uint64_t v5 = v11;
    if (v11)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_216784EC4(v5);
      uint64_t v7 = v11;
      *a2 = v6;
      a2[1] = v5;
      if (v7) {
        sub_216784EC4(v7);
      }
    }
    else
    {
      *a2 = v10;
      a2[1] = 0;
    }
    if (v9) {
      sub_216784EC4(v9);
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    *a2 = 0;
    a2[1] = 0;
  }
}

pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::HdLensDistortionSchema::GetSchemaToken(pxrInternal__aapl__pxrReserved__::HdLensDistortionSchema *this)
{
  uint64_t result = (pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens);
  if (!result) {
    return sub_217212D60(&pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens);
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::HdLensDistortionSchema::GetDefaultLocator(pxrInternal__aapl__pxrReserved__::HdLensDistortionSchema *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B97CE0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B97CE0))
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    if (!v2) {
      uint64_t v2 = sub_2171A3D9C(&pxrInternal__aapl__pxrReserved__::HdCameraSchemaTokens);
    }
    uint64_t v3 = (pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens);
    if (!v3) {
      uint64_t v3 = sub_217212D60(&pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens);
    }
    pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&unk_267B97CA8, v2, v3);
    __cxa_atexit((void (*)(void *))sub_217199930, &unk_267B97CA8, &dword_216758000);
    __cxa_guard_release(&qword_267B97CE0);
  }
  return &unk_267B97CA8;
}

void sub_217212918(_Unwind_Exception *a1)
{
}

void pxrInternal__aapl__pxrReserved__::HdLensDistortionSchema::BuildTypeDataSource(pxrInternal__aapl__pxrReserved__::HdLensDistortionSchema *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = (pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens);
  if (!v5) {
    uint64_t v5 = sub_217212D60(&pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens);
  }
  if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) == (*((void *)v5 + 9) & 0xFFFFFFFFFFFFFFF8))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B97CF8, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_267B97CF8))
    {
      sub_2171A3CE4((uint64_t *)this, &qword_267B97CE8);
      __cxa_atexit((void (*)(void *))sub_2171A3D6C, &qword_267B97CE8, &dword_216758000);
      __cxa_guard_release(&qword_267B97CF8);
    }
    uint64_t v7 = &qword_267B97CE8;
  }
  else
  {
    uint64_t v6 = (pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens);
    if (!v6) {
      uint64_t v6 = sub_217212D60(&pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens);
    }
    if ((*(void *)this & 0xFFFFFFFFFFFFFFF8) != (*((void *)v6 + 10) & 0xFFFFFFFFFFFFFFF8))
    {
      sub_2171A3CE4((uint64_t *)this, &v10);
      *(_OWORD *)a2 = v10;
      return;
    }
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B97D10, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_267B97D10))
    {
      sub_2171A3CE4((uint64_t *)this, &qword_267B97D00);
      __cxa_atexit((void (*)(void *))sub_2171A3D6C, &qword_267B97D00, &dword_216758000);
      __cxa_guard_release(&qword_267B97D10);
    }
    uint64_t v7 = &qword_267B97D00;
  }
  uint64_t v9 = *v7;
  uint64_t v8 = v7[1];
  *(void *)a2 = v9;
  *(void *)(a2 + sub_2171F4108((uint64_t)this + 8) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
}

void sub_217212AD8(_Unwind_Exception *a1)
{
}

void *pxrInternal__aapl__pxrReserved__::HdLensDistortionSchema::Builder::SetType(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdLensDistortionSchema::Builder::SetK1(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 24);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdLensDistortionSchema::Builder::SetK2(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 40);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdLensDistortionSchema::Builder::SetCenter(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 56);
  *(void *)(a1 + 4sub_2171F4108((uint64_t)this + 8) = v4;
  *(void *)(a1 + 56) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdLensDistortionSchema::Builder::SetAnaSq(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = v4;
  *(void *)(a1 + 72) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdLensDistortionSchema::Builder::SetAsym(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 88);
  *(void *)(a1 + 80) = v4;
  *(void *)(a1 + 8sub_2171F4108((uint64_t)this + 8) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdLensDistortionSchema::Builder::SetScale(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 104);
  *(void *)(a1 + 96) = v4;
  *(void *)(a1 + 104) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::HdLensDistortionSchema::Builder::SetIor(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 120);
  *(void *)(a1 + 112) = v4;
  *(void *)(a1 + 120) = v3;
  if (v5) {
    sub_216784EC4(v5);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::HdLensDistortionSchema::Builder::Build(pxrInternal__aapl__pxrReserved__::HdLensDistortionSchema::Builder *this@<X0>, _OWORD *a2@<X8>)
{
}

pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens_StaticTokenType *sub_217212D60(atomic_ullong *a1)
{
  uint64_t result = sub_217212DA8();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens_StaticTokenType::~HdLensDistortionSchemaTokens_StaticTokenType(result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens_StaticTokenType *sub_217212DA8()
{
  uint64_t v0 = (pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens_StaticTokenType *)operator new(0x70uLL);
  pxrInternal__aapl__pxrReserved__::HdLensDistortionSchemaTokens_StaticTokenType::HdLensDistortionSchemaTokens_StaticTokenType(v0);
  return v0;
}

void sub_217212DD8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdLightTokens_StaticTokenType::~HdLightTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::HdLightTokens_StaticTokenType *this)
{
  uint64_t v34 = (void **)((char *)this + 264);
  sub_216889A04(&v34);
  uint64_t v2 = *((void *)this + 32);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 31);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *((void *)this + 30);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *((void *)this + 29);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v6 = *((void *)this + 28);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v7 = *((void *)this + 27);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v8 = *((void *)this + 26);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v9 = *((void *)this + 25);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v10 = *((void *)this + 24);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v11 = *((void *)this + 23);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v12 = *((void *)this + 22);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v13 = *((void *)this + 21);
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v14 = *((void *)this + 20);
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v15 = *((void *)this + 19);
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v16 = *((void *)this + 18);
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v17 = *((void *)this + 17);
  if ((v17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v18 = *((void *)this + 16);
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v19 = *((void *)this + 15);
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v20 = *((void *)this + 14);
  if ((v20 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v21 = *((void *)this + 13);
  if ((v21 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v22 = *((void *)this + 12);
  if ((v22 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v23 = *((void *)this + 11);
  if ((v23 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v24 = *((void *)this + 10);
  if ((v24 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v25 = *((void *)this + 9);
  if ((v25 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v26 = *((void *)this + 8);
  if ((v26 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v27 = *((void *)this + 7);
  if ((v27 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v28 = *((void *)this + 6);
  if ((v28 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v29 = *((void *)this + 5);
  if ((v29 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v30 = *((void *)this + 4);
  if ((v30 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v31 = *((void *)this + 3);
  if ((v31 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v32 = *((void *)this + 2);
  if ((v32 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v33 = *((void *)this + 1);
  if ((v33 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

pxrInternal__aapl__pxrReserved__::HdLightTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::HdLightTokens_StaticTokenType::HdLightTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::HdLightTokens_StaticTokenType *this)
{
  uint64_t v75 = *MEMORY[0x263EF8340];
  unint64_t v41 = (uint64_t *)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "angle", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v41, "color", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 16, "colorTemperature", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 24, "enableColorTemperature", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 32, "domeOffset", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 40, "exposure", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 48, "height", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 56, "intensity", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 64, "radius", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 72, "length", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 80, "texture:file", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 88, "texture:format", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 96, "width", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 104, "ambient", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 112, "diffuse", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 120, "specular", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 128, "normalize", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 136, "hasShadow", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 144, "shaping:focus", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 152, "shaping:focusTint", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 160, "shaping:cone:angle", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 168, "shaping:cone:softness", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 176, "shaping:ies:file", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 184, "shaping:ies:angleScale", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 192, "shaping:ies:normalize", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 200, "shadow:enable", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 208, "shadow:color", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 216, "shadow:distance", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 224, "shadow:falloff", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 232, "shadow:falloffGamma", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 240, "params", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 248, "shadowCollection", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 256, "shadowParams", 0);
  uint64_t v2 = *(void *)this;
  uint64_t v42 = v2;
  if ((v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v42 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v3 = *v41;
  uint64_t v43 = v3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v43 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v4 = *((void *)this + 2);
  uint64_t v44 = v4;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v44 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v5 = *((void *)this + 3);
  uint64_t v45 = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v45 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v6 = *((void *)this + 4);
  uint64_t v46 = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v46 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = *((void *)this + 5);
  uint64_t v47 = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v47 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v8 = *((void *)this + 6);
  uint64_t v48 = v8;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v48 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v9 = *((void *)this + 7);
  uint64_t v49 = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v49 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v10 = *((void *)this + 8);
  uint64_t v50 = v10;
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v50 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v11 = *((void *)this + 9);
  uint64_t v51 = v11;
  if ((v11 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v51 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v12 = *((void *)this + 10);
  uint64_t v52 = v12;
  if ((v12 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v52 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v13 = *((void *)this + 11);
  uint64_t v53 = v13;
  if ((v13 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v53 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v14 = *((void *)this + 12);
  uint64_t v54 = v14;
  if ((v14 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v54 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v15 = *((void *)this + 13);
  uint64_t v55 = v15;
  if ((v15 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v55 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v16 = *((void *)this + 14);
  uint64_t v56 = v16;
  if ((v16 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v56 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v17 = *((void *)this + 15);
  uint64_t v57 = v17;
  if ((v17 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v57 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v18 = *((void *)this + 16);
  uint64_t v58 = v18;
  if ((v18 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v58 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v19 = *((void *)this + 17);
  uint64_t v59 = v19;
  if ((v19 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v59 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v20 = *((void *)this + 18);
  uint64_t v60 = v20;
  if ((v20 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v60 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v21 = *((void *)this + 19);
  uint64_t v61 = v21;
  if ((v21 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v61 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v22 = *((void *)this + 20);
  uint64_t v62 = v22;
  if ((v22 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v62 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v23 = *((void *)this + 21);
  uint64_t v63 = v23;
  if ((v23 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v63 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v24 = *((void *)this + 22);
  uint64_t v64 = v24;
  if ((v24 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v64 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v25 = *((void *)this + 23);
  uint64_t v65 = v25;
  if ((v25 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v65 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v26 = *((void *)this + 24);
  uint64_t v66 = v26;
  if ((v26 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v66 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v27 = *((void *)this + 25);
  uint64_t v67 = v27;
  if ((v27 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v67 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v28 = *((void *)this + 26);
  uint64_t v68 = v28;
  if ((v28 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v68 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v29 = *((void *)this + 27);
  uint64_t v69 = v29;
  if ((v29 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v69 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v30 = *((void *)this + 28);
  uint64_t v70 = v30;
  if ((v30 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v70 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v31 = *((void *)this + 29);
  uint64_t v71 = v31;
  if ((v31 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v71 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v32 = *((void *)this + 30);
  uint64_t v72 = v32;
  if ((v32 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v72 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v33 = *((void *)this + 31);
  uint64_t v73 = v33;
  if ((v33 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v73 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v34 = *((void *)this + 32);
  uint64_t v74 = v34;
  if ((v34 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v74 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((void *)this + 33) = 0;
  *((void *)this + 34) = 0;
  *((void *)this + 35) = 0;
  uint64_t v35 = (char *)operator new(0x108uLL);
  uint64_t v36 = 0;
  *((void *)this + 33) = v35;
  *((void *)this + 34) = v35;
  *((void *)this + 35) = v35 + 264;
  do
  {
    uint64_t v37 = *(uint64_t *)((char *)&v42 + v36);
    *(void *)&v35[v36] = v37;
    if ((v37 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v37 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v35[v36] &= 0xFFFFFFFFFFFFFFF8;
    }
    v36 += 8;
  }
  while (v36 != 264);
  *((void *)this + 34) = v35 + 264;
  for (uint64_t i = 256; i != -8; i -= 8)
  {
    uint64_t v39 = *(uint64_t *)((char *)&v42 + i);
    if ((v39 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v39 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return this;
}

void sub_217213B70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30,void *a31,void *a32,void *a33,void **a34,uint64_t a35,char a36)
{
  sub_216889A04(&a34);
  uint64_t v46 = 256;
  while (1)
  {
    uint64_t v47 = *(void *)(&a36 + v46);
    if ((v47 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v46 -= 8;
    if (v46 == -8)
    {
      if ((*v41 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v40 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v39 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v39 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v38 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v38 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v37 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v45 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v45 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v44 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v44 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v43 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v43 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v42 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v42 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a20 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a21 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a22 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a23 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a24 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a25 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a26 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a27 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a28 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a29 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a30 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a31 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a32 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a33 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v36 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_217213F64()
{
}

void sub_217213F6C()
{
}

void sub_217213F74()
{
}

void sub_217213F7C()
{
}

void sub_217213F84()
{
}

void sub_217213F8C()
{
}

void sub_217213F94()
{
}

void sub_217213F9C()
{
}

void sub_217213FA4()
{
}

void sub_217213FAC()
{
}

void sub_217213FB4()
{
}

void sub_217213FBC()
{
}

void sub_217213FC4()
{
}

void sub_217213FCC()
{
}

void sub_217213FD4()
{
}

void sub_217213FDC()
{
}

void sub_217213FE4()
{
}

void sub_217213FEC()
{
}

void sub_217213FF4()
{
}

void sub_217213FFC()
{
}

void sub_217214004()
{
}

void sub_21721400C()
{
}

void sub_217214014()
{
}

void sub_21721401C()
{
}

pxrInternal__aapl__pxrReserved__::HdLight *pxrInternal__aapl__pxrReserved__::HdLight::HdLight(pxrInternal__aapl__pxrReserved__::HdLight *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v3 = pxrInternal__aapl__pxrReserved__::HdSprim::HdSprim(this, a2);
  *(void *)uint64_t v3 = &unk_26C781250;
  *((void *)v3 + 2) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v3 + 4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 5);
  return this;
}

void pxrInternal__aapl__pxrReserved__::HdLight::~HdLight(pxrInternal__aapl__pxrReserved__::HdLight *this)
{
  *(void *)this = &unk_26C781250;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 5);
  sub_21697C414((_DWORD *)this + 4);

  pxrInternal__aapl__pxrReserved__::HdSprim::~HdSprim(this);
}

_DWORD *pxrInternal__aapl__pxrReserved__::HdLight::_UpdateInstancer(pxrInternal__aapl__pxrReserved__::HdLight *this, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  uint64_t result = (_DWORD *)pxrInternal__aapl__pxrReserved__::HdChangeTracker::IsInstancerDirty((pxrInternal__aapl__pxrReserved__::HdChangeTracker *)*(unsigned int *)a3, (pxrInternal__aapl__pxrReserved__::HdLight *)((char *)this + 8), a3);
  if (result)
  {
    (*(void (**)(uint64_t *__return_ptr, pxrInternal__aapl__pxrReserved__::HdSceneDelegate *, char *))(*(void *)a2 + 232))(&v7, a2, (char *)this + 8);
    if (v7 != *((void *)this + 2))
    {
      uint64_t v6 = (pxrInternal__aapl__pxrReserved__::HdChangeTracker *)(*((void *)a2 + 1) + 416);
      if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)this + 4)) {
        pxrInternal__aapl__pxrReserved__::HdChangeTracker::RemoveInstancerSprimDependency(v6, (pxrInternal__aapl__pxrReserved__::HdLight *)((char *)this + 16), (pxrInternal__aapl__pxrReserved__::HdLight *)((char *)this + 8));
      }
      if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v7)) {
        pxrInternal__aapl__pxrReserved__::HdChangeTracker::AddInstancerSprimDependency(v6, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v7, (pxrInternal__aapl__pxrReserved__::HdLight *)((char *)this + 8));
      }
      sub_2169C487C((int *)this + 4, &v7);
      sub_2169C48D4((int *)this + 5, (_DWORD *)&v7 + 1);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v7 + 1);
    return sub_21697C414(&v7);
  }
  return result;
}

void sub_2172141F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::HdLight::StringifyDirtyBits@<X0>(pxrInternal__aapl__pxrReserved__::HdLight *this@<X0>, std::string *a2@<X8>)
{
  if (this)
  {
    int v3 = (int)this;
    sub_216778A5C((uint64_t)v7);
    if (v3) {
      sub_216779180(v8, (uint64_t)"Transform ", 10);
    }
    if ((v3 & 2) != 0) {
      sub_216779180(v8, (uint64_t)"Params ", 7);
    }
    if ((v3 & 4) != 0) {
      sub_216779180(v8, (uint64_t)"ShadowParams ", 13);
    }
    if ((v3 & 8) != 0) {
      sub_216779180(v8, (uint64_t)"Collection ", 11);
    }
    if ((v3 & 0x10) != 0) {
      sub_216779180(v8, (uint64_t)"Resource ", 9);
    }
    if ((v3 & 0x10000) != 0) {
      sub_216779180(v8, (uint64_t)"Instancer ", 10);
    }
    std::stringbuf::str();
    pxrInternal__aapl__pxrReserved__::TfStringTrimRight(" \n\t\r", &__p, a2);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    v7[0] = *MEMORY[0x263F8C2B8];
    uint64_t v4 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    *(void *)((char *)v7 + *(void *)(v7[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
    v8[0] = v4;
    v8[1] = MEMORY[0x263F8C318] + 16;
    if (v9 < 0) {
      operator delete((void *)v8[9]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    return (void *)MEMORY[0x21D447E60](&v10);
  }
  else
  {
    return sub_216779094(a2, "Clean");
  }
}

void sub_21721446C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_216778D38((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdLightSchemaTokens_StaticTokenType::~HdLightSchemaTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::HdLightSchemaTokens_StaticTokenType *this)
{
  uint64_t v2 = (void **)((char *)this + 8);
  sub_216889A04(&v2);
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

{
  void **v2;

  uint64_t v2 = (void **)((char *)this + 8);
  sub_216889A04(&v2);
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

pxrInternal__aapl__pxrReserved__::HdLightSchemaTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::HdLightSchemaTokens_StaticTokenType::HdLightSchemaTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::HdLightSchemaTokens_StaticTokenType *this)
{
  uint64_t v2 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "light", 0);
  uint64_t v3 = *v2;
  if ((*v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v3 &= 0xFFFFFFFFFFFFFFF8;
  }
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  uint64_t v4 = operator new(8uLL);
  *((void *)this + 1) = v4;
  *((void *)this + 2) = v4;
  void *v4 = v3;
  uint64_t v5 = v4 + 1;
  *((void *)this + 3) = v4 + 1;
  if ((v3 & 7) != 0)
  {
    if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
      *v4 &= 0xFFFFFFFFFFFFFFF8;
    }
    *((void *)this + 2) = v5;
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  else
  {
    *((void *)this + 2) = v5;
  }
  return this;
}

void sub_21721460C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v11 = v10;
  sub_216889A04(&a9);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_2173242CC(v9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdLightSchema::GetFromParent(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLightSchemaTokens)) {
      sub_2171C215C(&pxrInternal__aapl__pxrReserved__::HdLightSchemaTokens);
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v3 + 24))(&v8, v3);
    sub_2171997C0((uint64_t)&v8, &v10);
    uint64_t v6 = v10;
    uint64_t v5 = v11;
    if (v11)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_216784EC4(v5);
      uint64_t v7 = v11;
      *a2 = v6;
      a2[1] = v5;
      if (v7) {
        sub_216784EC4(v7);
      }
    }
    else
    {
      *a2 = v10;
      a2[1] = 0;
    }
    if (v9) {
      sub_216784EC4(v9);
    }
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    *a2 = 0;
    a2[1] = 0;
  }
}

pxrInternal__aapl__pxrReserved__::HdLightSchemaTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::HdLightSchema::GetSchemaToken(pxrInternal__aapl__pxrReserved__::HdLightSchema *this)
{
  uint64_t result = (pxrInternal__aapl__pxrReserved__::HdLightSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLightSchemaTokens);
  if (!result) {
    return sub_2171C215C(&pxrInternal__aapl__pxrReserved__::HdLightSchemaTokens);
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::HdLightSchema::GetDefaultLocator(pxrInternal__aapl__pxrReserved__::HdLightSchema *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B97D50, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B97D50))
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::HdLightSchemaTokens_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdLightSchemaTokens);
    if (!v2) {
      uint64_t v2 = sub_2171C215C(&pxrInternal__aapl__pxrReserved__::HdLightSchemaTokens);
    }
    pxrInternal__aapl__pxrReserved__::HdDataSourceLocator::HdDataSourceLocator((pxrInternal__aapl__pxrReserved__::HdDataSourceLocator *)&unk_267B97D18, v2);
    __cxa_atexit((void (*)(void *))sub_217199930, &unk_267B97D18, &dword_216758000);
    __cxa_guard_release(&qword_267B97D50);
  }
  return &unk_267B97D18;
}

void sub_21721481C(_Unwind_Exception *a1)
{
}

void *pxrInternal__aapl__pxrReserved__::HdMapContainerDataSource::HdMapContainerDataSource(void *a1, uint64_t a2, void *a3)
{
  *a1 = &unk_26C7812A0;
  sub_217214A84((uint64_t)(a1 + 1), a2);
  uint64_t v5 = a3[1];
  a1[5] = *a3;
  a1[6] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void sub_217214894(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::HdMapContainerDataSource::~HdMapContainerDataSource(pxrInternal__aapl__pxrReserved__::HdMapContainerDataSource *this)
{
  *(void *)this = &unk_26C7812A0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v2) {
    sub_216784EC4(v2);
  }
  sub_217214B1C((void *)this + 1);

  pxrInternal__aapl__pxrReserved__::HdDataSourceBase::~HdDataSourceBase(this);
}

{
  void *v1;
  uint64_t vars8;

  pxrInternal__aapl__pxrReserved__::HdMapContainerDataSource::~HdMapContainerDataSource(this);

  operator delete(v1);
}

uint64_t pxrInternal__aapl__pxrReserved__::HdMapContainerDataSource::GetNames@<X0>(pxrInternal__aapl__pxrReserved__::HdMapContainerDataSource *this@<X0>, void *a2@<X8>)
{
  uint64_t result = *((void *)this + 5);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

void pxrInternal__aapl__pxrReserved__::HdMapContainerDataSource::Get(pxrInternal__aapl__pxrReserved__::HdMapContainerDataSource *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *((void *)this + 5);
  if (v4)
  {
    if (*((void *)this + 4))
    {
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v4 + 24))(&v7);
      uint64_t v5 = *((void *)this + 4);
      if (!v5) {
        sub_21683A7CC();
      }
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v5 + 48))(v5, &v7);
      if (v8) {
        sub_216784EC4(v8);
      }
    }
    else
    {
      uint64_t v6 = *(void (**)(void))(*(void *)v4 + 24);
      v6();
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

void sub_217214A6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_217214A84(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_217214B1C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

pxrInternal__aapl__pxrReserved__::HdSprim *pxrInternal__aapl__pxrReserved__::HdMaterial::HdMaterial(pxrInternal__aapl__pxrReserved__::HdMaterial *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::HdSprim::HdSprim(this, a2);
  *(void *)uint64_t result = &unk_26C7812E8;
  return result;
}

void *pxrInternal__aapl__pxrReserved__::HdConvertToHdMaterialNetwork2@<X0>(void **a1@<X0>, BOOL *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + sub_2171F4108((uint64_t)this + 8) = 0;
  uint64_t v4 = (void *)(a3 + 8);
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = a3 + 8;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 24) = a3 + 32;
  *(void *)(a3 + 4sub_2171F4108((uint64_t)this + 8) = 0;
  uint64_t v28 = (void *)(a3 + 48);
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 64) = 0;
  uint64_t v7 = *a1;
  uint64_t result = a1 + 1;
  uint64_t v6 = v7;
  uint64_t v26 = (uint64_t **)(a3 + 24);
  uint64_t v27 = result;
  if (v7 != result)
  {
    do
    {
      uint64_t result = (void *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::HdMaterialTerminalTokens);
      if (!result) {
        uint64_t result = sub_2172166D4(&pxrInternal__aapl__pxrReserved__::HdMaterialTerminalTokens);
      }
      uint64_t v8 = (void **)v6[8];
      char v9 = (void **)v6[9];
      if (a2 && (v6[4] & 0xFFFFFFFFFFFFFFF8) == (result[2] & 0xFFFFFFFFFFFFFFF8)) {
        *a2 = v8 != v9;
      }
      if (v8 != v9)
      {
        uint64_t v10 = (uint64_t *)(v8 + 2);
        uint64_t v11 = v8 + 3;
        do
        {
          uint64_t v30 = v10 - 2;
          uint64_t v12 = sub_217216760((uint64_t **)a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v10 - 2), (uint64_t)&unk_2174BFD90, (_DWORD **)&v30);
          sub_2168D2318(v12 + 5, v10 - 1);
          if (v10 != v12 + 6) {
            sub_2172168E8((uint64_t **)v12 + 6, (void *)*v10, v11);
          }
          uint64_t v13 = (void **)(v10 + 3);
          v10 += 5;
          v11 += 5;
        }
        while (v13 != v9);
        uint64_t v14 = v6[9];
        uint64_t v30 = v6 + 4;
        uint64_t v15 = sub_217216B50(v26, v6 + 4, (uint64_t)&unk_2174BFD90, &v30);
        sub_2169C487C((int *)v15 + 10, (_DWORD *)(v14 - 40));
        uint64_t result = sub_2169C48D4((int *)v15 + 11, (_DWORD *)(v14 - 36));
        uint64_t v17 = v6[5];
        for (uint64_t i = v6[6]; v17 != i; v17 += 32)
        {
          uint64_t result = sub_216CF7EAC(a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v17 + 16));
          if (v4 != result)
          {
            uint64_t v30 = (uint64_t *)(v17 + 24);
            uint64_t v18 = sub_217216CCC((uint64_t **)result + 9, (uint64_t *)(v17 + 24), (uint64_t)&unk_2174BFD90, &v30);
            sub_216981010(&v30, (_DWORD *)v17);
            sub_21698105C((_DWORD *)&v30 + 1, (_DWORD *)(v17 + 4));
            uint64_t v19 = *(void *)(v17 + 8);
            uint64_t v31 = v19;
            if ((v19 & 7) != 0
              && (atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
            {
              v31 &= 0xFFFFFFFFFFFFFFF8;
            }
            uint64_t v20 = v18[5];
            unint64_t v21 = v18[6];
            if (v20 != v21)
            {
              while (*(uint64_t **)v20 != v30
                   || (*(void *)(v20 + 8) & 0xFFFFFFFFFFFFFFF8) != (v31 & 0xFFFFFFFFFFFFFFF8))
              {
                v20 += 16;
                if (v20 == v21)
                {
                  uint64_t v20 = v18[6];
                  break;
                }
              }
            }
            if (v20 == v21)
            {
              if (v21 >= v18[7])
              {
                uint64_t v22 = sub_217216DE0(v18 + 5, (uint64_t)&v30);
              }
              else
              {
                sub_21697D878((_DWORD *)v18[6], &v30);
                sub_21697D8B4((_DWORD *)(v21 + 4), (_DWORD *)&v30 + 1);
                *(void *)(v21 + sub_2171F4108((uint64_t)this + 8) = v31;
                uint64_t v31 = 0;
                uint64_t v22 = v21 + 16;
              }
              v18[6] = v22;
            }
            if ((v31 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v30 + 1);
            uint64_t result = sub_21697C414(&v30);
          }
        }
        if (v28 != v6 + 11) {
          uint64_t result = sub_216ABF1B0(v28, (uint64_t *)v6[11], (uint64_t *)v6[12], (uint64_t)(v6[12] - v6[11]) >> 3);
        }
      }
      uint64_t v23 = (void *)v6[1];
      if (v23)
      {
        do
        {
          uint64_t v24 = v23;
          uint64_t v23 = (void *)*v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          uint64_t v24 = (void *)v6[2];
          BOOL v25 = *v24 == (void)v6;
          uint64_t v6 = v24;
        }
        while (!v25);
      }
      uint64_t v6 = v24;
    }
    while (v24 != v27);
  }
  return result;
}

void sub_217214F20(_Unwind_Exception *a1)
{
  sub_217214FAC(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_217214F54(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));

  return sub_21697C414((_DWORD *)a1);
}

uint64_t sub_217214FAC(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 48);
  sub_216889A04(&v3);
  sub_217216440(a1 + 24, *(void **)(a1 + 32));
  sub_217216500(a1, *(void **)(a1 + 8));
  return a1;
}