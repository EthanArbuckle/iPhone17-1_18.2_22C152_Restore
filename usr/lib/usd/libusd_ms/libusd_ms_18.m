uint64_t sub_2170AC67C(uint64_t a1, unint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t result;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  unint64_t v22;
  unsigned int v23;
  uint64_t i;
  BOOL v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  char v29;
  int *v30;
  int *v31;
  char v32;
  unint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  char *v37;
  unsigned char *v38;
  unsigned char *v39;
  uint64_t v40;
  int v41;
  int *v42;
  unint64_t v43;
  int *v44;
  int v45;
  int **v46;
  int **v47;

  result = 5;
  if (a2 && a5)
  {
    if (*(_DWORD *)(a1 + 4384)) {
      return 6;
    }
    v16 = (unsigned int *)sub_2170A7784(a2, a3, a1 + 4320);
    result = 3;
    if (v16)
    {
      if ((v15 & 0x8000000000000000) == 0)
      {
        v17 = *(unsigned int *)(a1 + 4328);
        if (a3 - v17 >= 0 && (unint64_t)v16 + v15 >= a2)
        {
          v18 = a2 + v17;
          if (v18 >= (unint64_t)v16)
          {
            v19 = v18 - (void)v16;
            if ((uint64_t)(v18 - (void)v16) >= 0)
            {
              v20 = *(_DWORD *)(a1 + 1124);
              if (v20 >= 1)
              {
                v21 = *(_DWORD *)(a1 + 4332);
                if (v21 >= 1)
                {
                  v22 = *(unsigned int *)(a1 + 4336);
                  if ((int)v22 >= 1
                    && *(_DWORD *)(a1 + 4356) == 3
                    && *(_DWORD *)(a1 + 4340) == v20
                    && (a7 || !*(_DWORD *)(a1 + 4364))
                    && (a6 || !*(_DWORD *)(a1 + 4360)))
                  {
                    if ((*(_DWORD *)(a1 + 4376) - 5) >= 2)
                    {
                      v23 = *(_DWORD *)(a1 + 4348);
                    }
                    else
                    {
                      if (v22 != 2) {
                        return result;
                      }
                      v23 = *(_DWORD *)(a1 + 4348);
                      if (!v23) {
                        return result;
                      }
                    }
                    if (v23 > 0x1B) {
                      return result;
                    }
                    v47 = (int **)(a1 + 4056);
                    sub_21681C000(a1 + 4080, v22);
                    for (i = 0; i != v22; ++i)
                    {
                      v25 = v19 < 4;
                      v19 -= 4;
                      if (v25)
                      {
                        v19 = 0;
                        v16 = 0;
                      }
                      else
                      {
                        v26 = *v16++;
                        *(_DWORD *)(*(void *)(a1 + 4080) + 4 * i) = v26;
                      }
                    }
                    v46 = (int **)(a1 + 4080);
                    sub_21681C000((uint64_t)v47, v22);
                    v27 = 0;
                    result = 3;
                    do
                    {
                      while (1)
                      {
                        v25 = v19-- < 1;
                        if (!v25) {
                          break;
                        }
                        v16 = 0;
                        v19 = 0;
                        if (++v27 == v22) {
                          return result;
                        }
                      }
                      v28 = *(unsigned __int8 *)v16;
                      v16 = (unsigned int *)((char *)v16 + 1);
                      (*v47)[v27++] = v28;
                    }
                    while (v27 != v22);
                    if (!v16) {
                      return 3;
                    }
                    v29 = 0;
                    v30 = *v46;
                    v31 = *v47;
                    v32 = 1;
                    v33 = v22;
                    do
                    {
                      v34 = *v30++;
                      v29 |= v34 != 0;
                      v35 = *v31++;
                      v32 &= v35 < 29;
                      --v33;
                    }
                    while (v33);
                    if ((v32 & 1) == 0) {
                      return 3;
                    }
                    v37 = sub_2170A60B4(a1, v16, v19);
                    result = 3;
                    if (!v37 || v36 < 0) {
                      return result;
                    }
                    if (*(_DWORD *)(a1 + 4364)) {
                      sub_2170AC990(a1);
                    }
                    if (*(void *)(a1 + 4112) - *(void *)(a1 + 4104) != *(void *)(a1 + 1192)
                                                                          - *(void *)(a1 + 1184))
                      return 3;
                    result = sub_2170ACE44(a1, a5, a6);
                    if (!result)
                    {
                      if (a7)
                      {
                        v38 = *(unsigned char **)(a1 + 4104);
                        v39 = *(unsigned char **)(a1 + 4112);
                        if (v39 != v38) {
                          memmove(a7, v38, v39 - v38);
                        }
                      }
                      if (v29)
                      {
                        LODWORD(v40) = 0;
                        v41 = 0;
                        v42 = *v46;
                        do
                        {
                          v40 = (int)v40;
                          v43 = v22;
                          v44 = v42;
                          do
                          {
                            v45 = *v44++;
                            *(_DWORD *)(a5 + 4 * v40++) += v45;
                            --v43;
                          }
                          while (v43);
                          ++v41;
                        }
                        while (v41 != v21);
                      }
                      result = 0;
                      *a4 = *(unsigned int *)(a1 + 4328);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_2170AC990(uint64_t a1)
{
  uint64_t v72 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(unsigned int *)(a1 + 1116);
  v3 = (int **)(a1 + 4248);
  sub_2170A5390(a1 + 4248, v2);
  memset_pattern16(__b, &unk_2174AFAB0, 6uLL);
  __int16 v69 = 0x8000;
  __int16 v68 = 0x8000;
  if ((int)v2 >= 1)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 1;
    do
    {
      v6 = (unsigned int *)(*(void *)(a1 + 1256) + v4);
      uint64_t v7 = *v6;
      if ((v7 & 0x80000000) != 0) {
        int v8 = 0;
      }
      else {
        int v8 = (*v3)[v7 + 1];
      }
      uint64_t v9 = v6[1];
      if ((v9 & 0x80000000) != 0) {
        int v10 = 0;
      }
      else {
        int v10 = (*v3)[v9 + 1];
      }
      v11 = (unsigned int *)(*(void *)(a1 + 1280) + v4);
      uint64_t v12 = *v11;
      if ((v12 & 0x80000000) != 0) {
        int v13 = 0;
      }
      else {
        int v13 = (*v3)[v12 + 1];
      }
      uint64_t v14 = v11[1];
      if ((v14 & 0x80000000) != 0) {
        int v15 = 0;
      }
      else {
        int v15 = (*v3)[v14 + 1];
      }
      BOOL v16 = v13 == v15;
      if (v8 == v10) {
        BOOL v17 = v16 + 1;
      }
      else {
        BOOL v17 = v16;
      }
      if (sub_2170A4794((unsigned int *)a1, &__b[v17]))
      {
        int v18 = 1;
      }
      else if (sub_2170A4794((unsigned int *)a1, &v69))
      {
        int v18 = 0;
      }
      else
      {
        int v18 = sub_2170A4884((unsigned int *)a1, 0, &v68) + 2;
      }
      v4 += 12;
      (*v3)[v5++] += v18;
    }
    while (12 * v2 != v4);
  }
  sub_2170A5400(v3);
  int v19 = *(_DWORD *)(a1 + 4332);
  sub_21681C000(a1 + 4128, 0);
  v71[0] = -1;
  sub_216820DFC(a1 + 4128, v19, v71);
  __int16 v67 = 0x8000;
  __int16 v66 = 0x8000;
  if ((int)v2 > 0)
  {
    uint64_t v20 = 0;
    int v21 = 0;
    uint64_t v22 = *(void *)(a1 + 4248);
    do
    {
      uint64_t v23 = v20 + 1;
      int v24 = *(_DWORD *)(v22 + 4 * (v20 + 1)) - *(_DWORD *)(v22 + 4 * v20);
      if (v24 >= 1)
      {
        do
        {
          if (sub_2170A4794((unsigned int *)a1, &v67))
          {
            uint64_t v22 = *(void *)(a1 + 4248);
            int v25 = *(_DWORD *)(v22 + 4 * v20);
            uint64_t v26 = *(void *)(a1 + 4272);
            int v27 = *(_DWORD *)(v26 + 4 * v20);
            *(_DWORD *)(v26 + 4 * v20) = v27 + 1;
            *(_DWORD *)(*(void *)(a1 + 4296) + 4 * (v27 + v25)) = v21;
            int v28 = v21++;
            v29 = (void *)(a1 + 4128);
            int v30 = v20;
          }
          else
          {
            int v31 = sub_2170A4884((unsigned int *)a1, 0, &v66);
            uint64_t v22 = *(void *)(a1 + 4248);
            int v32 = *(_DWORD *)(v22 + 4 * v20);
            uint64_t v33 = *(void *)(a1 + 4272);
            int v34 = *(_DWORD *)(v33 + 4 * v20);
            int v30 = v21 + ~v31;
            *(_DWORD *)(v33 + 4 * v20) = v34 + 1;
            int v28 = v34 + v32;
            v29 = (void *)(a1 + 4296);
          }
          *(_DWORD *)(*v29 + 4 * v28) = v30;
          --v24;
        }
        while (v24);
      }
      ++v20;
    }
    while (v23 != v2);
  }
  uint64_t v35 = *(void *)(a1 + 4296);
  sub_2170A5390(a1 + 4176, v19);
  uint64_t v36 = *(unsigned int *)(a1 + 1120);
  v71[0] = 0;
  sub_2170A4FFC(__p, (int)v2, v71);
  memset_pattern16(v71, &unk_2174AFAB0, 0x28uLL);
  sub_21681C000(a1 + 4104, (uint64_t)(*(void *)(a1 + 1192) - *(void *)(a1 + 1184)) >> 2);
  if ((int)v36 >= 1)
  {
    uint64_t v37 = 0;
    int v38 = 0;
    for (i = v36; i != v37; uint64_t v36 = i)
    {
      uint64_t v39 = *(void *)(a1 + 1208);
      uint64_t v40 = *(int *)(v39 + 4 * v37++);
      int v41 = *(_DWORD *)(v39 + 4 * v37);
      if (v41 > (int)v40)
      {
        uint64_t v42 = 4 * v40;
        int v43 = v41 - v40;
        do
        {
          uint64_t v44 = *(int *)(*(void *)(a1 + 1184) + v42);
          int v45 = *(_DWORD *)(*(void *)(a1 + 4248) + 4 * v44);
          int v46 = *(_DWORD *)(*(void *)(a1 + 4272) + 4 * v44);
          if (v46 >= 2)
          {
            int v47 = *((_DWORD *)__p[0] + v44);
            *((_DWORD *)__p[0] + v44) = v47 + 1;
            if (v38 >= 1) {
              int v48 = 1;
            }
            else {
              int v48 = v38;
            }
            if (v47 >= 4) {
              int v49 = 4;
            }
            else {
              int v49 = v47;
            }
            int v38 = sub_2170AD408((unsigned int *)a1, v46 - 1, &v71[2 * v49 + v48]);
            v45 += v38;
          }
          int v50 = *(_DWORD *)(v35 + 4 * v45);
          *(_DWORD *)(*(void *)(a1 + 4104) + v42) = v50;
          ++*(_DWORD *)(*(void *)(a1 + 4176) + 4 * (v50 + 1));
          v42 += 4;
          --v43;
        }
        while (v43);
      }
    }
  }
  sub_2170A5400((int **)(a1 + 4176));
  if ((int)v36 >= 1)
  {
    uint64_t v51 = 0;
    uint64_t v52 = *(void *)(a1 + 1208);
    do
    {
      uint64_t v53 = *(int *)(v52 + 4 * v51);
      uint64_t v54 = v51 + 1;
      uint64_t v55 = *(int *)(v52 + 4 * (v51 + 1));
      if ((int)v53 < (int)v55)
      {
        uint64_t v56 = *(void *)(a1 + 4176);
        uint64_t v57 = *(void *)(a1 + 4200);
        uint64_t v58 = *(void *)(a1 + 4224);
        v59 = (int *)(*(void *)(a1 + 4104) + 4 * v53);
        uint64_t v60 = v55 - v53;
        do
        {
          uint64_t v61 = *v59++;
          int v62 = *(_DWORD *)(v56 + 4 * v61);
          int v63 = *(_DWORD *)(v57 + 4 * v61);
          *(_DWORD *)(v57 + 4 * v61) = v63 + 1;
          *(_DWORD *)(v58 + 4 * (v63 + v62)) = v51;
          --v60;
        }
        while (v60);
      }
      ++v51;
    }
    while (v54 != v36);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_2170ACE1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2170ACE44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 4360) == 1)
  {
    memset_pattern16(__b, &unk_2174AFAB0, 4uLL);
    uint64_t v6 = *(unsigned int *)(a1 + 4332);
    if ((int)v6 >= 1)
    {
      uint64_t v7 = 0;
      while (1)
      {
        uint64_t v8 = *(unsigned int *)(*(void *)(a1 + 4128) + 4 * v7);
        int v21 = -1;
        uint64_t v20 = -1;
        int v19 = -1;
        uint64_t v18 = -1;
        if ((v8 & 0x80000000) != 0)
        {
LABEL_22:
          int v14 = 0;
          goto LABEL_23;
        }
        uint64_t v9 = (unsigned int *)(*(void *)(a1 + 1280) + 12 * v8);
        sub_2170AD058((void *)a1, v8, v7, (unsigned int *)(*(void *)(a1 + 1256) + 12 * v8), &v20);
        sub_2170AD058((void *)a1, v8, v7, v9, &v18);
        int v10 = v21;
        if ((v21 & 0x80000000) == 0 || v19 < 0)
        {
          int v12 = v21;
          int v10 = v19;
        }
        else
        {
          uint64_t v11 = v20;
          uint64_t v20 = v18;
          int v12 = v19;
          int v21 = v19;
          uint64_t v18 = v11;
        }
        if (v10 != -1)
        {
          BOOL v13 = *(unsigned __int8 *)(a3 + SHIDWORD(v20))
              + *(unsigned __int8 *)(a3 + (int)v20)
              + *(unsigned __int8 *)(a3 + v12)
              + *(unsigned __int8 *)(a3 + (int)v18)
              + *(unsigned __int8 *)(a3 + SHIDWORD(v18))
              + *(unsigned __int8 *)(a3 + v10) > 2;
          goto LABEL_13;
        }
        if (v12 != -1)
        {
          BOOL v13 = *(unsigned __int8 *)(a3 + SHIDWORD(v20))
              + *(unsigned __int8 *)(a3 + (int)v20)
              + *(unsigned __int8 *)(a3 + v12) > 1;
LABEL_13:
          int v14 = v13;
          goto LABEL_23;
        }
        if (HIDWORD(v20) == -1) {
          break;
        }
        int v14 = *(unsigned __int8 *)(a3 + (int)v20);
        if (*(unsigned char *)(a3 + (int)v20))
        {
          int v15 = *(unsigned __int8 *)(a3 + SHIDWORD(v20));
LABEL_21:
          int v14 = v15 != 0;
        }
LABEL_23:
        *(unsigned char *)(a3 + v7++) = sub_2170A4794((unsigned int *)a1, &__b[v14]);
        if (v6 == v7) {
          goto LABEL_24;
        }
      }
      if (v20 == -1) {
        goto LABEL_22;
      }
      int v15 = *(unsigned __int8 *)(a3 + (int)v20);
      goto LABEL_21;
    }
  }
LABEL_24:
  uint64_t v16 = *(unsigned int *)(a1 + 4376);
  if (v16 > 6) {
    return 3;
  }
  ((void (*)(uint64_t, uint64_t, uint64_t))*(&off_26C7723E0 + 2 * v16))(a1, a2, a3);
  return 0;
}

void *sub_2170AD058(void *result, unsigned int a2, int a3, unsigned int *a4, _DWORD *a5)
{
  uint64_t v5 = *a4;
  *(void *)a5 = -1;
  a5[2] = -1;
  if ((a2 & 0x80000000) == 0 && (v5 & 0x80000000) == 0)
  {
    uint64_t v7 = result;
    uint64_t v8 = a5 + 1;
    uint64_t v32 = result[537];
    uint64_t v9 = result[534];
    int v10 = *(_DWORD *)(v9 + 4 * a2);
    uint64_t v11 = a4[2];
    uint64_t v12 = (int)a4[1];
    if ((v11 & 0x80000000) != 0)
    {
      if ((v12 & 0x80000000) == 0)
      {
        int v18 = *(_DWORD *)(v9 + 4 * v5);
        int v19 = *(_DWORD *)(v9 + 4 * v12);
        if (v10 == 1 && v18 == 1 && v19 == 1)
        {
          uint64_t v31 = result[531];
          *a5 = *(_DWORD *)(v32 + 4 * *(int *)(v31 + 4 * v5));
          a5[1] = *(_DWORD *)(v32 + 4 * *(int *)(v31 + 4 * v12));
        }
        else
        {
          return (void *)sub_2170AD274(result, a3, a2, v5, v12, a5, v8);
        }
      }
    }
    else
    {
      int v13 = *(_DWORD *)(v9 + 4 * v5);
      int v14 = *(_DWORD *)(v9 + 4 * v12);
      if (v10 == 1 && v13 == 1 && v14 == 1)
      {
        uint64_t v22 = result[531];
        int v17 = *(_DWORD *)(v32 + 4 * *(int *)(v22 + 4 * v5));
        *a5 = v17;
        a5[1] = *(_DWORD *)(v32 + 4 * *(int *)(v22 + 4 * v12));
        if (v17 < 0) {
          return result;
        }
      }
      else
      {
        result = (void *)sub_2170AD274(result, a3, a2, v5, v12, a5, v8);
        int v17 = *a5;
        if ((*a5 & 0x80000000) != 0) {
          return result;
        }
      }
      int v23 = *v8;
      if ((v23 & 0x80000000) == 0)
      {
        uint64_t v24 = *(int *)(v7[534] + 4 * v11);
        if (v24 == 1 && v13 == 1 && v14 == 1)
        {
          a5[2] = *(_DWORD *)(v32 + 4 * *(int *)(v7[531] + 4 * v11));
        }
        else if ((int)v24 >= 1)
        {
          uint64_t v27 = *(int *)(v7[531] + 4 * v11);
          uint64_t v28 = v27 + v24;
          do
          {
            int v29 = *(_DWORD *)(v32 + 4 * v27);
            uint64_t v33 = 0;
            result = (void *)sub_2170AD274(v7, v29, v11, v5, v12, (_DWORD *)&v33 + 1, &v33);
            if (HIDWORD(v33) == v17 && v33 == v23) {
              a5[2] = v29;
            }
            ++v27;
          }
          while (v27 < v28);
        }
      }
    }
  }
  return result;
}

uint64_t sub_2170AD274(void *a1, int a2, int a3, int a4, int a5, _DWORD *a6, _DWORD *a7)
{
  uint64_t v7 = *(int *)(a1[525] + 4 * a2);
  if ((int)v7 >= 1)
  {
    uint64_t v8 = *(int *)(a1[522] + 4 * a2);
    uint64_t v9 = v7 + v8;
    uint64_t v10 = a1[148];
    while (2)
    {
      uint64_t v11 = (int *)(a1[151] + 4 * *(int *)(a1[528] + 4 * v8));
      uint64_t v12 = *v11;
      uint64_t v13 = v11[1];
      int v14 = *(_DWORD *)(v10 + 4 * v12);
      uint64_t v15 = (int)v12 + 1;
      uint64_t v16 = 4 * v15 - 4;
      uint64_t v17 = v15 + 1;
      while (v17 < v13)
      {
        int v18 = *(_DWORD *)(v10 + v16 + 4);
        int v19 = *(_DWORD *)(v10 + v16 + 8);
        if (v14 == a3 && v18 == a4 && v19 == a5)
        {
          uint64_t v27 = a1[513] + v16;
          *a6 = *(_DWORD *)(v27 + 4);
          goto LABEL_41;
        }
        if (v14 == a3 && v19 == a4 && v18 == a5)
        {
          uint64_t v28 = a1[513] + v16;
          *a7 = *(_DWORD *)(v28 + 4);
          goto LABEL_43;
        }
        if (v18 == a3 && v14 == a4 && v19 == a5)
        {
          uint64_t v29 = a1[513];
          *a6 = *(_DWORD *)(v29 + 4 * v12);
          uint64_t v27 = v29 + v16;
LABEL_41:
          int v30 = *(_DWORD *)(v27 + 8);
LABEL_45:
          *a7 = v30;
          return 1;
        }
        if (v18 == a3 && v19 == a4 && v14 == a5)
        {
          uint64_t v31 = a1[513];
          *a7 = *(_DWORD *)(v31 + 4 * v12);
          uint64_t v28 = v31 + v16;
LABEL_43:
          int v34 = *(_DWORD *)(v28 + 8);
LABEL_46:
          *a6 = v34;
          return 1;
        }
        if (v19 == a3 && v14 == a4 && v18 == a5)
        {
          uint64_t v32 = a1[513];
          *a6 = *(_DWORD *)(v32 + 4 * v12);
          int v30 = *(_DWORD *)(v32 + v16 + 4);
          goto LABEL_45;
        }
        v16 += 4;
        ++v17;
        if (v19 == a3 && v18 == a4 && v14 == a5)
        {
          uint64_t v33 = a1[513];
          *a7 = *(_DWORD *)(v33 + 4 * v12);
          int v34 = *(_DWORD *)(v33 + v16);
          goto LABEL_46;
        }
      }
      if (++v8 < v9) {
        continue;
      }
      break;
    }
  }
  uint64_t result = 0;
  *a6 = -1;
  *a7 = -1;
  return result;
}

uint64_t sub_2170AD408(unsigned int *a1, int a2, _WORD *a3)
{
  if (!a2) {
    return 0;
  }
  unint64_t v3 = (unint64_t)a3;
  int v4 = a2;
  if (!sub_2170A4794(a1, a3)) {
    return 0;
  }
  if (v4 < 2) {
    return 1;
  }
  uint64_t v6 = (_WORD *)(v3 + 2);
  LODWORD(v3) = 1;
  do
  {
    BOOL v7 = sub_2170A4794(a1, v6);
    unint64_t v3 = (v3 + v7);
    if (v4 < 3) {
      break;
    }
    --v4;
  }
  while (v7);
  return v3;
}

void sub_2170AD48C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v151 = *MEMORY[0x263EF8340];
  v132 = (void *)(a1 + 4056);
  uint64_t v138 = *(int *)(a1 + 4336);
  int v136 = ~(-1 << (*(_DWORD *)(a1 + 4348) - 1));
  int v137 = *(_DWORD *)(a1 + 4360);
  uint64_t v133 = *(unsigned int *)(a1 + 4332);
  sub_2170AE224((void *)(a1 + 1160), (void *)(a1 + 1208), (void *)(a1 + 1184), (uint64_t *)(a1 + 4104), v133, (uint64_t *)(a1 + 4152), v136);
  uint64_t v5 = 0;
  uint64_t v150 = 0;
  memset(v149, 0, sizeof(v149));
  do
  {
    sub_2170A8CEC((uint64_t)v149 + v5, v138);
    v5 += 120;
  }
  while (v5 != 360);
  memset_pattern16(__b, &unk_2174AFAB0, 6uLL);
  memset_pattern16(v147, &unk_2174AFAB0, 6uLL);
  __int16 v146 = 0x8000;
  __int16 v145 = 0x8000;
  if ((int)v133 > 0)
  {
    uint64_t v6 = 0;
    uint64_t v131 = a3;
    int v130 = 2 * v136;
    int32x2_t v7 = vdup_n_s32(v136);
    uint64_t v8 = (int *)(a2 + 4);
    uint64_t v9 = 8;
    while (v137 && !*(unsigned char *)(a3 + v6))
    {
LABEL_163:
      ++v6;
      v8 += v138;
      v9 += 12;
      if (v133 == v6) {
        goto LABEL_166;
      }
    }
    uint64_t v10 = *(unsigned int *)(*(void *)(a1 + 4128) + 4 * v6);
    uint64_t v11 = (int *)(*(void *)(a1 + 4152) + v9);
    int v12 = *v11;
    int v13 = *v11;
    int32x2_t v134 = *(int32x2_t *)(v11 - 2);
    if ((v10 & 0x80000000) == 0)
    {
      v144[0] = -1;
      unint64_t v143 = -1;
      v142[0] = -1;
      uint64_t v141 = -1;
      sub_2170AD058((void *)a1, v10, v6, (unsigned int *)(*(void *)(a1 + 1256) + 12 * v10), &v143);
      sub_2170AD058((void *)a1, v10, v6, (unsigned int *)(*(void *)(a1 + 1280) + 12 * v10), &v141);
      int v14 = v144[0];
      if ((v144[0] & 0x80000000) == 0 || (v142[0] & 0x80000000) != 0)
      {
        int v16 = v144[0];
        int v14 = v142[0];
      }
      else
      {
        unint64_t v15 = v143;
        unint64_t v143 = v141;
        int v16 = v142[0];
        v144[0] = v142[0];
        uint64_t v141 = v15;
      }
      int v17 = HIDWORD(v143);
      if (v14 != -1
        && (!v137
         || *(unsigned char *)(a3 + (int)v143)
         && *(unsigned char *)(a3 + SHIDWORD(v143))
         && *(unsigned char *)(a3 + v16)
         && *(unsigned char *)(a3 + (int)v141)
         && *(unsigned char *)(a3 + SHIDWORD(v141))
         && *(unsigned char *)(a3 + v14)))
      {
        int v127 = v141;
        int v128 = HIDWORD(v141);
        int32x2_t v18 = vsub_s32(*(int32x2_t *)(a2 + 4 * (int)v143 * (int)v138), v7);
        int32x2_t v19 = vabs_s32(vrev64_s32(v18));
        int v129 = v136 - v19.i32[1] - v19.i32[0];
        if (v129 < 0) {
          int32x2_t v18 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v18), (int8x8_t)vsub_s32(v19, v7), (int8x8_t)__PAIR64__(v136 - v19.i32[1], v136 - v19.i32[0]));
        }
        BOOL v20 = sub_2170A4794((unsigned int *)a1, v147);
        uint64_t v21 = 2;
        if (!v20) {
          uint64_t v21 = 1;
        }
        if (sub_2170A4794((unsigned int *)a1, &v147[v21])) {
          int v23 = 2;
        }
        else {
          int v23 = 0;
        }
        int v24 = v23 | v20;
        if (v24 == 2)
        {
          int32x2_t v56 = vsub_s32(*(int32x2_t *)(a2 + 4 * v127 * (int)v138), v7);
          int32x2_t v57 = vabs_s32(vrev64_s32(v56));
          int v58 = v136 - v57.i32[1] - v57.i32[0];
          if (v58 < 0) {
            int32x2_t v56 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v56), (int8x8_t)vsub_s32(v57, v7), (int8x8_t)__PAIR64__(v136 - v57.i32[1], v136 - v57.i32[0]));
          }
          int32x2_t v59 = vsub_s32(*(int32x2_t *)(a2 + 4 * v128 * (int)v138), v7);
          int32x2_t v60 = vabs_s32(vrev64_s32(v59));
          int v61 = v136 - v60.i32[1] - v60.i32[0];
          if (v61 < 0) {
            int32x2_t v59 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v59), (int8x8_t)vsub_s32(v60, v7), (int8x8_t)__PAIR64__(v136 - v60.i32[1], v136 - v60.i32[0]));
          }
          int32x2_t v62 = vsub_s32(*(int32x2_t *)(a2 + 4 * v14 * (int)v138), v7);
          int32x2_t v63 = vabs_s32(vrev64_s32(v62));
          if (v136 - v63.i32[1] - v63.i32[0] < 0) {
            int32x2_t v62 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v62), (int8x8_t)vsub_s32(v63, v7), (int8x8_t)__PAIR64__(v136 - v63.i32[1], v136 - v63.i32[0]));
          }
          double v25 = COERCE_DOUBLE(vsub_s32(vadd_s32(v59, v56), v62));
          int v12 = v61 + v58 - (v136 - v63.i32[1] - v63.i32[0]);
        }
        else if (v24 == 1)
        {
          int32x2_t v64 = vsub_s32(*(int32x2_t *)(a2 + 4 * v17 * (int)v138), v7);
          int32x2_t v65 = vabs_s32(vrev64_s32(v64));
          int v66 = v136 - v65.i32[1] - v65.i32[0];
          if (v66 < 0) {
            int32x2_t v64 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v64), (int8x8_t)vsub_s32(v65, v7), (int8x8_t)__PAIR64__(v136 - v65.i32[1], v136 - v65.i32[0]));
          }
          int32x2_t v67 = vsub_s32(*(int32x2_t *)(a2 + 4 * v16 * (int)v138), v7);
          int32x2_t v68 = vabs_s32(vrev64_s32(v67));
          int v69 = v136 - v68.i32[1] - v68.i32[0];
          if (v69 < 0) {
            int32x2_t v67 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v67), (int8x8_t)vsub_s32(v68, v7), (int8x8_t)__PAIR64__(v136 - v68.i32[1], v136 - v68.i32[0]));
          }
          double v25 = COERCE_DOUBLE(vsub_s32(vadd_s32(v64, v18), v67));
          int v12 = v66 + v129 - v69;
        }
        else if (v24)
        {
          int32x2_t v70 = vsub_s32(*(int32x2_t *)(a2 + 4 * v17 * (int)v138), v7);
          int32x2_t v71 = vabs_s32(vrev64_s32(v70));
          int v72 = v136 - v71.i32[1] - v71.i32[0];
          if (v72 < 0) {
            int32x2_t v70 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v70), (int8x8_t)vsub_s32(v71, v7), (int8x8_t)__PAIR64__(v136 - v71.i32[1], v136 - v71.i32[0]));
          }
          int32x2_t v73 = vsub_s32(*(int32x2_t *)(a2 + 4 * v16 * (int)v138), v7);
          int32x2_t v74 = vabs_s32(vrev64_s32(v73));
          int v75 = v136 - v74.i32[1] - v74.i32[0];
          if (v75 < 0) {
            int32x2_t v73 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v73), (int8x8_t)vsub_s32(v74, v7), (int8x8_t)__PAIR64__(v136 - v74.i32[1], v136 - v74.i32[0]));
          }
          int32x2_t v76 = vsub_s32(*(int32x2_t *)(a2 + 4 * v127 * (int)v138), v7);
          int32x2_t v77 = vabs_s32(vrev64_s32(v76));
          int v78 = v136 - v77.i32[1] - v77.i32[0];
          if (v78 < 0) {
            int32x2_t v76 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v76), (int8x8_t)vsub_s32(v77, v7), (int8x8_t)__PAIR64__(v136 - v77.i32[1], v136 - v77.i32[0]));
          }
          int32x2_t v79 = vsub_s32(*(int32x2_t *)(a2 + 4 * v128 * (int)v138), v7);
          int32x2_t v80 = vabs_s32(vrev64_s32(v79));
          int v81 = v136 - v80.i32[1] - v80.i32[0];
          if (v81 < 0) {
            int32x2_t v79 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v79), (int8x8_t)vsub_s32(v80, v7), (int8x8_t)__PAIR64__(v136 - v80.i32[1], v136 - v80.i32[0]));
          }
          int32x2_t v82 = vsub_s32(*(int32x2_t *)(a2 + 4 * v14 * (int)v138), v7);
          int32x2_t v83 = vabs_s32(vrev64_s32(v82));
          if (v136 - v83.i32[1] - v83.i32[0] < 0) {
            int32x2_t v82 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v82), (int8x8_t)vsub_s32(v83, v7), (int8x8_t)__PAIR64__(v136 - v83.i32[1], v136 - v83.i32[0]));
          }
          uint32x2_t v84 = (uint32x2_t)vadd_s32(v76, v18);
          BOOL v85 = __OFADD__(v78, v129);
          int v86 = v78 + v129;
          if (v86 < 0 != v85) {
            ++v86;
          }
          int32x2_t v87 = vadd_s32(v79, v70);
          int64x2_t v88 = vmull_s32(vsub_s32(vsra_n_s32(vadd_s32(v87, v87), (int32x2_t)vsra_n_u32(v84, v84, 0x1FuLL), 1uLL), vadd_s32(v73, v82)), vdup_n_s32(0x55555556u));
          double v25 = COERCE_DOUBLE(vadd_s32(vshrn_n_s64(v88, 0x20uLL), vmovn_s64((int64x2_t)vshrq_n_u64((uint64x2_t)v88, 0x3FuLL))));
          unint64_t v89 = 1431655766 * ((v86 >> 1) + 2 * (v81 + v72) - (v75 + v136 - v83.i32[1] - v83.i32[0]));
          int v12 = HIDWORD(v89) + (v89 >> 63);
        }
        else
        {
          double v25 = *(double *)&v134;
          int32x2_t v26 = vzip1_s32(v18, v134);
          int32x2_t v27 = vzip2_s32(v18, v134);
          if (v26.i32[0] * (uint64_t)v26.i32[1] + v12 * (uint64_t)v129 + v27.i32[0] * (uint64_t)v27.i32[1] < 0)
          {
            double v25 = COERCE_DOUBLE(vneg_s32(v134));
            int v12 = -v12;
          }
        }
        unsigned int v48 = 2;
        goto LABEL_110;
      }
      if (v16 != -1 && (!v137 || *(unsigned char *)(a3 + (int)v143) && *(unsigned char *)(a3 + SHIDWORD(v143)) && *(unsigned char *)(a3 + v16)))
      {
        int32x2_t v28 = vsub_s32(*(int32x2_t *)(a2 + 4 * (int)v143 * (int)v138), v7);
        int32x2_t v29 = vabs_s32(vrev64_s32(v28));
        int v30 = v136 - v29.i32[1] - v29.i32[0];
        if (v30 < 0) {
          int32x2_t v28 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v28), (int8x8_t)vsub_s32(v29, v7), (int8x8_t)__PAIR64__(v136 - v29.i32[1], v136 - v29.i32[0]));
        }
        int32x2_t v31 = vsub_s32(*(int32x2_t *)(a2 + 4 * HIDWORD(v143) * (int)v138), v7);
        int32x2_t v32 = vabs_s32(vrev64_s32(v31));
        int v33 = v136 - v32.i32[1] - v32.i32[0];
        if (v33 < 0) {
          int32x2_t v31 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v31), (int8x8_t)vsub_s32(v32, v7), (int8x8_t)__PAIR64__(v136 - v32.i32[1], v136 - v32.i32[0]));
        }
        int32x2_t v34 = vsub_s32(*(int32x2_t *)(a2 + 4 * v16 * (int)v138), v7);
        int32x2_t v35 = vabs_s32(vrev64_s32(v34));
        int v36 = v136 - v35.i32[1] - v35.i32[0];
        if (v36 < 0) {
          int32x2_t v34 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v34), (int8x8_t)vsub_s32(v35, v7), (int8x8_t)__PAIR64__(v136 - v35.i32[1], v136 - v35.i32[0]));
        }
        BOOL v37 = sub_2170A4794((unsigned int *)a1, __b);
        uint64_t v38 = 2;
        if (!v37) {
          uint64_t v38 = 1;
        }
        if (sub_2170A4794((unsigned int *)a1, &__b[v38])) {
          int v39 = 2;
        }
        else {
          int v39 = 0;
        }
        int v40 = v39 | v37;
        if (v40 == 2)
        {
          uint32x2_t v90 = (uint32x2_t)vsub_s32(v31, (int32x2_t)vmvn_s8((int8x8_t)v28));
          double v25 = COERCE_DOUBLE(vshr_n_s32((int32x2_t)vsra_n_u32(v90, v90, 0x1FuLL), 1uLL));
          if (v30 + v33 + 1 >= 0) {
            int v91 = v30 + v33 + 1;
          }
          else {
            int v91 = v30 + v33 + 2;
          }
          int v12 = v91 >> 1;
        }
        else if (v40 == 1)
        {
          double v25 = COERCE_DOUBLE(vsub_s32(vadd_s32(v31, v28), v34));
          int v12 = v33 + v30 - v36;
        }
        else if (v40)
        {
          int64x2_t v92 = vmull_s32(vadd_s32(vsub_s32(v31, (int32x2_t)vmvn_s8((int8x8_t)v28)), v34), vdup_n_s32(0x55555556u));
          double v25 = COERCE_DOUBLE(vadd_s32(vshrn_n_s64(v92, 0x20uLL), vmovn_s64((int64x2_t)vshrq_n_u64((uint64x2_t)v92, 0x3FuLL))));
          int v12 = (v30 + v33 + v36 + 1) / 3;
        }
        else
        {
          double v25 = *(double *)&v134;
          int32x2_t v41 = vzip1_s32(v28, v134);
          int32x2_t v42 = vzip2_s32(v28, v134);
          if (v41.i32[0] * (uint64_t)v41.i32[1] + v12 * (uint64_t)v30 + v42.i32[0] * (uint64_t)v42.i32[1] < 0)
          {
            double v25 = COERCE_DOUBLE(vneg_s32(v134));
            int v12 = -v12;
          }
        }
        unsigned int v48 = 1;
        goto LABEL_110;
      }
      if (HIDWORD(v143) != -1 && (!v137 || *(unsigned char *)(a3 + (int)v143) && *(unsigned char *)(a3 + SHIDWORD(v143))))
      {
        int32x2_t v43 = vsub_s32(*(int32x2_t *)(a2 + 4 * (int)v143 * (int)v138), v7);
        int32x2_t v44 = vabs_s32(vrev64_s32(v43));
        int v45 = v136 - v44.i32[1] - v44.i32[0];
        if (v45 < 0) {
          int32x2_t v43 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v43), (int8x8_t)vsub_s32(v44, v7), (int8x8_t)__PAIR64__(v136 - v44.i32[1], v136 - v44.i32[0]));
        }
        if (sub_2170A4794((unsigned int *)a1, &v146))
        {
          int32x2_t v46 = vsub_s32(*(int32x2_t *)(a2 + 4 * v17 * (int)v138), v7);
          int32x2_t v47 = vabs_s32(vrev64_s32(v46));
          if (v136 - v47.i32[1] - v47.i32[0] < 0) {
            int32x2_t v46 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v46), (int8x8_t)vsub_s32(v47, v7), (int8x8_t)__PAIR64__(v136 - v47.i32[1], v136 - v47.i32[0]));
          }
          unsigned int v48 = 0;
          uint32x2_t v49 = (uint32x2_t)vsub_s32(v46, (int32x2_t)vmvn_s8((int8x8_t)v43));
          __int32 v50 = v45 + v136 - v47.i32[1] - v47.i32[0];
          double v25 = COERCE_DOUBLE(vshr_n_s32((int32x2_t)vsra_n_u32(v49, v49, 0x1FuLL), 1uLL));
          if (v50 + 1 >= 0) {
            int v51 = v50 + 1;
          }
          else {
            int v51 = v50 + 2;
          }
          int v12 = v51 >> 1;
LABEL_110:
          int v93 = LODWORD(v25);
          int v140 = LODWORD(v25);
          int v94 = HIDWORD(v25);
          int v139 = HIDWORD(v25);
          int32x2_t v95 = vabs_s32(*(int32x2_t *)&v25);
          unsigned int v96 = v95.u32[1];
          if (v12 >= 0) {
            unsigned int v97 = v12;
          }
          else {
            unsigned int v97 = -v12;
          }
          unsigned int v98 = v95.i32[0];
          BOOL v100 = v95.i32[0] < (unsigned __int32)v95.i32[1] || v95.i32[0] < v97;
          if (v100)
          {
            unsigned int v98 = v97;
            int v101 = HIDWORD(v25);
            int v102 = LODWORD(v25);
            if (v95.i32[1] < v97) {
              goto LABEL_124;
            }
            v103 = &v139;
            unsigned int v98 = v95.u32[1];
            int v101 = v12;
            int v102 = LODWORD(v25);
          }
          else
          {
            v103 = &v140;
            int v101 = HIDWORD(v25);
            int v102 = v12;
          }
          int *v103 = v12;
LABEL_124:
          unint64_t v143 = __PAIR64__(v101, v102);
          v144[0] = v98;
          sub_2170A7A6C((unsigned int *)a1, v22, (uint64_t)&v143, v138, v132, (unsigned char *)(a1 + 4372), (void *)v149 + 15 * v48, (uint64_t)&v141);
          int v105 = v141;
          int v104 = HIDWORD(v141);
          if ((int)v141 >= 0) {
            int v106 = v141;
          }
          else {
            int v106 = -(int)v141;
          }
          if (v141 >= 0) {
            int v107 = HIDWORD(v141);
          }
          else {
            int v107 = -HIDWORD(v141);
          }
          int v108 = v136 - v106;
          int v109 = v136 - v106 - v107;
          if (v109 < 0)
          {
            int v112 = v136 - v107;
            int v113 = v107 - v136;
            if ((int)v141 >= 0) {
              int v105 = v112;
            }
            else {
              int v105 = v113;
            }
            int v114 = v106 - v136;
            if (v141 >= 0) {
              int v104 = v108;
            }
            else {
              int v104 = v114;
            }
            if (v100) {
              goto LABEL_132;
            }
          }
          else if (v100)
          {
LABEL_132:
            if (v12 >= 0) {
              int v110 = v109;
            }
            else {
              int v110 = -v109;
            }
            if (v94 < 0) {
              int v109 = -v109;
            }
            if (v96 >= v97) {
              int v111 = v104;
            }
            else {
              int v111 = v110;
            }
            if (v96 >= v97) {
              int v104 = v109;
            }
            goto LABEL_152;
          }
          int v111 = v105;
          if (v93 >= 0) {
            int v105 = v109;
          }
          else {
            int v105 = -v109;
          }
LABEL_152:
          if (v104 >= 0) {
            int v115 = v104;
          }
          else {
            int v115 = -v104;
          }
          if (v105 < 0)
          {
            int v116 = -v105;
          }
          else
          {
            int v115 = v130 - v115;
            int v116 = v105;
          }
          if (v104 >= 0) {
            int v116 = v130 - v116;
          }
          int v117 = v105 + v136;
          int v118 = v104 + v136;
          if (v111 < 0)
          {
            int v117 = v115;
            int v118 = v116;
          }
          *(v8 - 1) = v117;
          *uint64_t v8 = v118;
          a3 = v131;
          goto LABEL_163;
        }
        double v25 = *(double *)&v134;
        int32x2_t v54 = vzip1_s32(v43, v134);
        int32x2_t v55 = vzip2_s32(v43, v134);
        if (v54.i32[0] * (uint64_t)v54.i32[1] + v12 * (uint64_t)v45 + v55.i32[0] * (uint64_t)v55.i32[1] < 0)
        {
          unsigned int v48 = 0;
          double v25 = COERCE_DOUBLE(vneg_s32(v134));
          int v12 = -v12;
          goto LABEL_110;
        }
LABEL_76:
        unsigned int v48 = 0;
        goto LABEL_110;
      }
      int v13 = v12;
    }
    if (sub_2170AE5B4(a1, v6, a2, a3, (uint64_t)&v143))
    {
      if (sub_2170A4794((unsigned int *)a1, &v146))
      {
        int v12 = v144[0];
        double v25 = *(double *)&v143;
      }
      else
      {
        double v25 = *(double *)&v134;
        if ((int)v143 * (uint64_t)v134.i32[0] + SHIDWORD(v143) * (uint64_t)v134.i32[1] + v144[0] * (uint64_t)v13 < 0)
        {
          double v25 = COERCE_DOUBLE(vneg_s32(v134));
          int v12 = -v12;
        }
      }
    }
    else
    {
      BOOL v52 = sub_2170A4794((unsigned int *)a1, &v145);
      double v25 = *(double *)&v134;
      double v53 = COERCE_DOUBLE(vneg_s32(v134));
      if (v52)
      {
        int v12 = -v12;
        double v25 = v53;
      }
    }
    goto LABEL_76;
  }
LABEL_166:
  unint64_t v119 = 360;
  do
  {
    v120 = (char *)v149 + v119;
    v121 = *(void **)&v144[v119 / 4];
    if (v121)
    {
      *((void *)v120 - 2) = v121;
      operator delete(v121);
    }
    v122 = (void *)*((void *)v120 - 6);
    if (v122)
    {
      *(void *)&v142[v119 / 4] = v122;
      operator delete(v122);
    }
    v123 = (char *)v149 + v119;
    v124 = *(void **)((char *)&v149[-4] + v119 - 8);
    if (v124)
    {
      *((void *)v123 - 8) = v124;
      operator delete(v124);
    }
    v125 = (void *)*((void *)v123 - 12);
    if (v125)
    {
      *(void *)((char *)&v149[-5] + v119 - 8) = v125;
      operator delete(v125);
    }
    v126 = (void *)*((void *)v120 - 15);
    if (v126)
    {
      *(void *)((char *)&v149[-7] + v119) = v126;
      operator delete(v126);
    }
    v119 -= 120;
  }
  while (v119);
}

void sub_2170AE1F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  for (uint64_t i = 240; i != -120; i -= 120)
    sub_2170A8E48((uint64_t)(&a31 + i));
  _Unwind_Resume(a1);
}

void sub_2170AE224(void *a1, void *a2, void *a3, uint64_t *a4, int a5, uint64_t *a6, int a7)
{
  unint64_t v12 = a2[1] - *a2;
  size_t v13 = a5;
  sub_2170A494C(a6, a5);
  uint64_t v14 = a6[1] - *a6;
  if (v14 >= 1) {
    bzero((void *)*a6, 12 * (v14 / 0xCuLL - ((unint64_t)v14 > 0xB)) + 12);
  }
  LOBYTE(v71) = 0;
  sub_2170A4C04(__p, v13, &v71);
  if ((int)(v12 >> 2) >= 2)
  {
    uint64_t v15 = 0;
    uint64_t v16 = (v12 >> 2) - 1;
    do
    {
      uint64_t v17 = *(int *)(*a2 + 4 * v15++);
      int v18 = *(_DWORD *)(*a2 + 4 * v15) - 1;
      if ((int)v17 + 1 >= v18) {
        continue;
      }
      uint64_t v19 = v17 + 1;
      do
      {
        uint64_t v20 = 0;
        int v21 = *(_DWORD *)(*a3 + 4 * v17);
        uint64_t v22 = 4 * v19;
        int v23 = *(_DWORD *)(*a3 + 4 * v19++);
        int v24 = *(_DWORD *)(*a3 + 4 * v19);
        uint64_t v25 = *a4;
        int v71 = *(_DWORD *)(*a4 + 4 * v17);
        uint64_t v72 = *(void *)(v25 + v22);
        int32x2_t v26 = (int *)(*a1 + 12 * v21);
        int32x2_t v27 = (int *)(*a1 + 12 * v23);
        int32x2_t v28 = (int *)(*a1 + 12 * v24);
        uint64_t v29 = *v26;
        uint64_t v30 = v26[1];
        uint64_t v31 = *v27 - v29;
        uint64_t v32 = *v28 - v29;
        uint64_t v33 = v27[1] - v30;
        uint64_t v34 = v28[1] - v30;
        uint64_t v35 = v26[2];
        uint64_t v36 = v27[2] - v35;
        uint64_t v37 = v28[2] - v35;
        uint64_t v38 = v37 * v33 - v34 * v36;
        uint64_t v39 = v32 * v36 - v37 * v31;
        uint64_t v40 = v34 * v31 - v32 * v33;
        do
        {
          uint64_t v41 = *(int *)((char *)&v71 + v20);
          int32x2_t v42 = (int *)(*a6 + 12 * (int)v41);
          char v43 = *((unsigned char *)__p[0] + v41);
          if (!v43)
          {
            uint64_t v48 = v39 + v42[1];
            uint64_t v49 = v40 + v42[2];
            uint64_t v45 = v38;
            goto LABEL_18;
          }
          uint64_t v44 = 1 << (v43 - 1);
          if (v38 < 0)
          {
            uint64_t v45 = -((v44 - v38) >> v43);
            if ((v39 & 0x8000000000000000) == 0)
            {
LABEL_11:
              uint64_t v46 = (v44 + v39) >> v43;
              if (v40 < 0) {
                goto LABEL_16;
              }
              goto LABEL_12;
            }
          }
          else
          {
            uint64_t v45 = (v44 + v38) >> v43;
            if ((v39 & 0x8000000000000000) == 0) {
              goto LABEL_11;
            }
          }
          uint64_t v46 = -((v44 - v39) >> v43);
          if (v40 < 0)
          {
LABEL_16:
            uint64_t v47 = -((v44 - v40) >> v43);
            goto LABEL_17;
          }
LABEL_12:
          uint64_t v47 = (v44 + v40) >> v43;
LABEL_17:
          uint64_t v48 = v46 + v42[1];
          uint64_t v49 = v47 + v42[2];
LABEL_18:
          uint64_t v50 = v45 + *v42;
          double v51 = fabs((double)v50);
          double v52 = fabs((double)v48);
          double v53 = fabs((double)v49);
          if (v51 < v52) {
            double v51 = v52;
          }
          if (v51 < v53) {
            double v51 = v53;
          }
          unint64_t v54 = (uint64_t)v51 + 1;
          if (v54 >> 30)
          {
            char v55 = __clz(v54);
            char v56 = 34 - v55;
            *((unsigned char *)__p[0] + v41) = v43 + 34 - v55;
            uint64_t v57 = 1 << (33 - v55);
            if (v50 < 0) {
              uint64_t v50 = -(uint64_t)((unint64_t)(v57 - v50) >> (34 - v55));
            }
            else {
              uint64_t v50 = (unint64_t)(v57 + v50) >> (34 - v55);
            }
            if (v48 < 0) {
              uint64_t v48 = -(uint64_t)((unint64_t)(v57 - v48) >> v56);
            }
            else {
              uint64_t v48 = (unint64_t)(v57 + v48) >> v56;
            }
            if (v49 < 0) {
              uint64_t v49 = -(uint64_t)((unint64_t)(v57 - v49) >> v56);
            }
            else {
              uint64_t v49 = (unint64_t)(v57 + v49) >> v56;
            }
          }
          v20 += 4;
          *int32x2_t v42 = v50;
          v42[1] = v48;
          v42[2] = v49;
        }
        while (v20 != 12);
      }
      while (v18 != v19);
    }
    while (v15 != v16);
  }
  int v58 = (int *)*a6;
  int32x2_t v59 = (int *)a6[1];
  if ((int *)*a6 != v59)
  {
    do
    {
      uint64_t v60 = *v58;
      uint64_t v61 = v58[1];
      uint64_t v62 = v58[2];
      if (v60 >= 0) {
        uint64_t v63 = *v58;
      }
      else {
        uint64_t v63 = -v60;
      }
      if (v61 >= 0) {
        uint64_t v64 = v58[1];
      }
      else {
        uint64_t v64 = -v61;
      }
      if (v62 >= 0) {
        uint64_t v65 = v58[2];
      }
      else {
        uint64_t v65 = -v62;
      }
      uint64_t v66 = v64 + v63 + v65;
      if (v66)
      {
        uint64_t v67 = (int)v60 * (uint64_t)a7 / v66;
        uint64_t v68 = (int)v61 * (uint64_t)a7 / v66;
        uint64_t v69 = (int)v62 * (uint64_t)a7 / v66;
      }
      else
      {
        LODWORD(v67) = 0;
        LODWORD(v68) = 0;
        LODWORD(v69) = a7;
      }
      *int v58 = v67;
      v58[1] = v68;
      v58[2] = v69;
      v58 += 3;
    }
    while (v58 != v59);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

uint64_t sub_2170AE5B4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v5 = *(_DWORD *)(a1 + 4360);
  unint64_t v6 = *(unsigned int *)(a1 + 4336);
  uint64_t v7 = *(int *)(*(void *)(a1 + 4176) + 4 * a2);
  int v8 = *(_DWORD *)(*(void *)(a1 + 4200) + 4 * a2);
  uint64_t v9 = *(void *)(a1 + 4224);
  int v10 = *(_DWORD *)(a1 + 4348);
  *(void *)a5 = 0;
  *(_DWORD *)(a5 + 8) = 0;
  if (v8 < 1) {
    return 0;
  }
  uint64_t result = 0;
  int v13 = 0;
  unsigned int v14 = ~(-1 << (v10 - 1));
  int v15 = v8 + v7;
  uint64_t v16 = *(void *)(a1 + 1208);
  int32x2_t v17 = 0;
  int32x2_t v18 = vdup_n_s32(v14);
  do
  {
    uint64_t v19 = (int *)(v16 + 4 * *(int *)(v9 + 4 * v7));
    uint64_t v21 = *v19;
    uint64_t v20 = v19[1];
    if ((int)v21 < (int)v20)
    {
      uint64_t v22 = *(void *)(a1 + 4104);
      do
      {
        uint64_t v23 = *(int *)(v22 + 4 * v21);
        if ((int)v23 < a2 && (!v5 || *(unsigned char *)(a4 + v23)))
        {
          int32x2_t v24 = vsub_s32(*(int32x2_t *)(a3 + 4 * (int)v23 * (int)v6), v18);
          int32x2_t v25 = vabs_s32(vrev64_s32(v24));
          if ((int)(v14 - v25.i32[1] - v25.i32[0]) < 0) {
            int32x2_t v24 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v24), (int8x8_t)vsub_s32(v25, v18), (int8x8_t)__PAIR64__(v14 - v25.i32[1], v14 - v25.i32[0]));
          }
          int32x2_t v17 = vadd_s32(v17, v24);
          *(int32x2_t *)a5 = v17;
          v13 += v14 - v25.i32[1] - v25.i32[0];
          *(_DWORD *)(a5 + 8) = v13;
          uint64_t result = (result + 1);
        }
        ++v21;
      }
      while (v21 < v20 && (int)result < 4);
    }
    ++v7;
  }
  while (v7 < v15 && (int)result < 4);
  if ((int)v6 >= 1 && (int)result >= 2)
  {
    for (unint64_t i = 0; i < v6; ++i)
      *(int *)(a5 + 4 * i) /= (int)result;
  }
  return result;
}

void sub_2170AE704(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(unsigned int *)(a1 + 4332);
  int v5 = *(_DWORD *)(a1 + 4336);
  int v43 = *(_DWORD *)(a1 + 4360);
  int v41 = ~(-1 << (*(_DWORD *)(a1 + 4348) - 1));
  sub_2170AE224((void *)(a1 + 1160), (void *)(a1 + 1208), (void *)(a1 + 1184), (uint64_t *)(a1 + 4104), v4, (uint64_t *)(a1 + 4152), v41);
  uint64_t v62 = 0;
  long long v60 = 0u;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)int v58 = 0u;
  *(_OWORD *)int32x2_t v59 = 0u;
  *(_OWORD *)char v56 = 0u;
  long long v57 = 0u;
  *(_OWORD *)char v55 = 0u;
  sub_2170A8CEC((uint64_t)v55, v5);
  __int16 v54 = 0x8000;
  __int16 v53 = 0x8000;
  if ((int)v4 >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v38 = v4;
    int v37 = 2 * v41;
    uint64_t v7 = (int *)(a2 + 4);
    int v39 = v5;
    uint64_t v42 = 4 * v5;
    uint64_t v8 = 4;
    while (v43 && !*(unsigned char *)(a3 + v6))
    {
LABEL_72:
      ++v6;
      v8 += 12;
      uint64_t v7 = (int *)((char *)v7 + v42);
      if (v4 == v6) {
        goto LABEL_73;
      }
    }
    uint64_t v9 = (int *)(*(void *)(a1 + 4152) + v8);
    int v11 = *(v9 - 1);
    int v10 = *v9;
    int v12 = v9[1];
    if (sub_2170AE5B4(a1, v6, a2, a3, (uint64_t)&v50))
    {
      if (sub_2170A4794((unsigned int *)a1, &v54))
      {
        int v10 = v51;
        int v12 = v52;
        int v11 = v50;
      }
      else if (v50 * (uint64_t)v11 + v51 * (uint64_t)v10 + v52 * (uint64_t)v12 < 0)
      {
        int v11 = -v11;
        int v10 = -v10;
        int v12 = -v12;
      }
    }
    else if (sub_2170A4794((unsigned int *)a1, &v53))
    {
      int v11 = -v11;
      int v10 = -v10;
      int v12 = -v12;
    }
    if (v11 >= 0) {
      unsigned int v14 = v11;
    }
    else {
      unsigned int v14 = -v11;
    }
    if (v10 >= 0) {
      unsigned int v15 = v10;
    }
    else {
      unsigned int v15 = -v10;
    }
    if (v12 >= 0) {
      unsigned int v16 = v12;
    }
    else {
      unsigned int v16 = -v12;
    }
    BOOL v18 = v14 < v15 || v14 < v16;
    if (v18)
    {
      unsigned int v14 = v16;
      int v19 = v10;
      int v20 = v11;
      if (v15 < v16)
      {
LABEL_33:
        v49[0] = v20;
        v49[1] = v19;
        v49[2] = v14;
        sub_2170A7A6C((unsigned int *)a1, v13, (uint64_t)v49, v39, (void *)(a1 + 4056), (unsigned char *)(a1 + 4372), v55, (uint64_t)&v45);
        int v22 = v45;
        int v23 = v46;
        if (v45 >= 0) {
          int v24 = v45;
        }
        else {
          int v24 = -v45;
        }
        if (v46 >= 0) {
          int v25 = v46;
        }
        else {
          int v25 = -v46;
        }
        int v26 = v41 - v24;
        int v27 = v41 - v24 - v25;
        if (v27 < 0)
        {
          int v28 = v41 - v25;
          int v29 = v25 - v41;
          if (v45 >= 0) {
            int v22 = v28;
          }
          else {
            int v22 = v29;
          }
          int v30 = v24 - v41;
          if (v46 >= 0) {
            int v23 = v26;
          }
          else {
            int v23 = v30;
          }
        }
        int v31 = -v27;
        if (v12 >= 0) {
          int v32 = v27;
        }
        else {
          int v32 = -v27;
        }
        if (v10 >= 0) {
          int v31 = v27;
        }
        if (v15 < v16) {
          int v31 = v23;
        }
        else {
          int v32 = v23;
        }
        if (v11 < 0) {
          int v27 = -v27;
        }
        if (v18) {
          int v23 = v31;
        }
        else {
          int v32 = v22;
        }
        if (!v18) {
          int v22 = v27;
        }
        if (v23 >= 0) {
          int v33 = v23;
        }
        else {
          int v33 = -v23;
        }
        if (v22 < 0)
        {
          int v34 = -v22;
        }
        else
        {
          int v33 = v37 - v33;
          int v34 = v22;
        }
        if (v23 >= 0) {
          int v34 = v37 - v34;
        }
        int v35 = v22 + v41;
        int v36 = v23 + v41;
        if (v32 < 0)
        {
          int v35 = v33;
          int v36 = v34;
        }
        *(v7 - 1) = v35;
        *uint64_t v7 = v36;
        uint64_t v4 = v38;
        goto LABEL_72;
      }
      uint64_t v21 = &v47;
      unsigned int v14 = v15;
      int v19 = v12;
      int v20 = v11;
    }
    else
    {
      uint64_t v21 = &v48;
      int v19 = v10;
      int v20 = v12;
    }
    *(_DWORD *)uint64_t v21 = v12;
    goto LABEL_33;
  }
LABEL_73:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v59[1])
  {
    *(void **)&long long v60 = v59[1];
    operator delete(v59[1]);
  }
  if (v58[0])
  {
    v58[1] = v58[0];
    operator delete(v58[0]);
  }
  if (v56[1])
  {
    *(void **)&long long v57 = v56[1];
    operator delete(v56[1]);
  }
  if (v55[0])
  {
    v55[1] = v55[0];
    operator delete(v55[0]);
  }
}

void sub_2170AEA70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_2170A8E48((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2170AEA88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = 0;
  uint64_t v169 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(unsigned int *)(a1 + 4332);
  unint64_t v6 = *(int *)(a1 + 4336);
  __int16 v145 = (void *)(a1 + 4056);
  int v148 = *(_DWORD *)(a1 + 4360);
  uint64_t v168 = 0;
  memset(v167, 0, sizeof(v167));
  do
  {
    sub_2170A8CEC((uint64_t)&v167[v4], v6);
    v4 += 15;
  }
  while (v4 != 45);
  __int16 v166 = 0x8000;
  memset_pattern16(__b, &unk_2174AFAB0, 6uLL);
  memset_pattern16(v164, &unk_2174AFAB0, 6uLL);
  memset_pattern16(v163, &unk_2174AFAB0, 6uLL);
  sub_2170B1D18(&v161, v6);
  LODWORD(__p) = 0;
  sub_2170A4FFC(v160, v6, &__p);
  uint64_t v7 = a2;
  LODWORD(v156) = 0;
  sub_2170A4FFC(&__p, v6, &v156);
  if ((int)v5 >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v138 = v6;
    uint64_t v9 = 4 * v6;
    uint64_t v10 = 4 * v6;
    int v11 = (_DWORD *)a2;
    uint64_t v141 = v5;
    unint64_t v146 = v6;
    uint64_t v134 = 4 * v6;
    uint64_t v135 = v9;
    while (v148 && !*(unsigned char *)(a3 + v8))
    {
LABEL_117:
      ++v8;
      int v11 = (_DWORD *)((char *)v11 + v10);
      if (v8 == v5) {
        goto LABEL_118;
      }
    }
    uint64_t v12 = *(unsigned int *)(*(void *)(a1 + 4128) + 4 * v8);
    if ((v12 & 0x80000000) == 0)
    {
      uint64_t v13 = (int *)(*(void *)(a1 + 1256) + 12 * v12);
      int v14 = *v13;
      LODWORD(v156) = *v13;
      LODWORD(v15) = v13[1];
      HIDWORD(v156) = v15;
      int v16 = v13[2];
      int v157 = v16;
      int32x2_t v17 = (_DWORD *)(*(void *)(a1 + 1280) + 12 * v12);
      int v18 = v17[1];
      LODWORD(v154) = *v17;
      HIDWORD(v154) = v18;
      int v143 = v17[2];
      int v144 = v154;
      int v155 = v143;
      int v153 = -1;
      uint64_t v152 = -1;
      int v151 = -1;
      uint64_t v150 = -1;
      sub_2170AD058((void *)a1, v12, v8, (unsigned int *)&v156, &v152);
      unsigned int v140 = v12;
      sub_2170AD058((void *)a1, v12, v8, (unsigned int *)&v154, &v150);
      int v20 = v153;
      int v21 = v151;
      if ((v153 & 0x80000000) == 0 || v151 < 0)
      {
        int v136 = v18;
        int v137 = v16;
        int v139 = v14;
        int v23 = v150;
        int v22 = HIDWORD(v150);
      }
      else
      {
        unint64_t v156 = v154;
        int v143 = v16;
        int v144 = v14;
        int v157 = v155;
        int v23 = v152;
        int v22 = HIDWORD(v152);
        uint64_t v152 = v150;
        int v21 = v153;
        int v20 = v151;
        int v153 = v151;
        LODWORD(v154) = v14;
        LODWORD(v150) = v23;
        int v136 = v15;
        int v137 = v155;
        unint64_t v15 = HIDWORD(v156);
        int v139 = v156;
      }
      uint64_t v24 = (int)v152;
      uint64_t v25 = SHIDWORD(v152);
      if (v21 != -1
        && (!v148
         || *(unsigned char *)(a3 + (int)v152)
         && *(unsigned char *)(a3 + SHIDWORD(v152))
         && *(unsigned char *)(a3 + v20)
         && *(unsigned char *)(a3 + v23)
         && *(unsigned char *)(a3 + v22)
         && *(unsigned char *)(a3 + v21)))
      {
        int v131 = v22;
        int v132 = v15;
        v147 = v11;
        unint64_t v6 = v146;
        int v26 = (int *)(v7 + 4 * (int)v152 * (int)v146);
        uint64_t v27 = v7;
        int v28 = (int *)(v7 + 4 * HIDWORD(v152) * (int)v146);
        int v29 = (int *)(v27 + 4 * v20 * (int)v146);
        BOOL v30 = sub_2170A4794((unsigned int *)a1, v163);
        uint64_t v31 = 2;
        if (!v30) {
          uint64_t v31 = 1;
        }
        if (sub_2170A4794((unsigned int *)a1, &v163[v31])) {
          int v32 = 2;
        }
        else {
          int v32 = 0;
        }
        int v33 = v32 | v30;
        if (v33)
        {
          int v34 = (int *)(v27 + 4 * v23 * (int)v146);
          int v35 = (int *)(v27 + 4 * v131 * (int)v146);
          int v36 = (int *)(v27 + 4 * v21 * (int)v146);
          if (v33 == 2)
          {
            unint64_t v6 = v146;
            sub_2170A5790(v26, v28, v29, v146, (int *)(*(void *)(a1 + 1160) + 12 * v139), (int *)(*(void *)(a1 + 1160) + 12 * v132), (int *)(*(void *)(a1 + 1160) + 12 * v137), (int *)(*(void *)(a1 + 1160) + 12 * v140), (_DWORD *)v160[0]);
            uint64_t v9 = v135;
            sub_2170A5790(v34, v35, v36, v146, (int *)(*(void *)(a1 + 1160) + 12 * v144), (int *)(*(void *)(a1 + 1160) + 12 * v136), (int *)(*(void *)(a1 + 1160) + 12 * v143), (int *)(*(void *)(a1 + 1160) + 12 * v140), __p);
            if ((int)v146 >= 1)
            {
              uint32x2_t v84 = (int *)v160[0];
              BOOL v85 = (int *)__p;
              uint64_t v86 = v138;
              do
              {
                int v87 = *v85++;
                int v88 = v87 + *v84;
                if (v88 < 0 != __OFADD__(v87, *v84)) {
                  ++v88;
                }
                *v84++ = v88 >> 1;
                --v86;
              }
              while (v86);
            }
          }
          else
          {
            uint64_t v9 = v135;
            if (v33 == 1)
            {
              unint64_t v6 = v146;
              if ((int)v146 >= 1)
              {
                int v37 = v160[0];
                uint64_t v38 = v138;
                do
                {
                  int v40 = *v34++;
                  int v39 = v40;
                  int v41 = *v35++;
                  int v42 = v41 + v39;
                  int v43 = *v36++;
                  *v37++ = v42 - v43;
                  --v38;
                }
                while (v38);
              }
            }
            else
            {
              unint64_t v6 = v146;
              if (v146 == 2)
              {
                sub_2170A5E8C((unint64_t)v26, v28, v29, (_DWORD *)(*(void *)(a1 + 1160) + 12 * v139), (_DWORD *)(*(void *)(a1 + 1160) + 12 * v132), (int *)(*(void *)(a1 + 1160) + 12 * v140), (int *)v160[0]);
                sub_2170A5E8C((unint64_t)v34, v35, v36, (_DWORD *)(*(void *)(a1 + 1160) + 12 * v144), (_DWORD *)(*(void *)(a1 + 1160) + 12 * v136), (int *)(*(void *)(a1 + 1160) + 12 * v140), (int *)__p);
                unint64_t v89 = v160[0];
                uint32x2_t v90 = __p;
                int v91 = *((_DWORD *)v160[0] + 1);
                int v92 = *(_DWORD *)__p + *(_DWORD *)v160[0];
                if (v92 < 0 != __OFADD__(*(_DWORD *)__p, *(_DWORD *)v160[0])) {
                  ++v92;
                }
                *(_DWORD *)v160[0] = v92 >> 1;
                int v93 = v90[1];
                BOOL v75 = __OFADD__(v93, v91);
                int v94 = v93 + v91;
                if (v94 < 0 != v75) {
                  ++v94;
                }
                v89[1] = v94 >> 1;
              }
              else if ((int)v146 >= 1)
              {
                unint64_t v104 = 0;
                int v105 = (char *)v160[0];
                do
                {
                  int v106 = v26[v104 / 4];
                  int v107 = v34[v104 / 4];
                  BOOL v75 = __OFADD__(v107, v106);
                  int v108 = v107 + v106;
                  if (v108 < 0 != v75) {
                    ++v108;
                  }
                  unint64_t v109 = 1431655766
                       * ((v108 >> 1) - (v29[v104 / 4] + v36[v104 / 4]) + 2 * (v35[v104 / 4] + v28[v104 / 4]));
                  *(_DWORD *)&v105[v104] = HIDWORD(v109) + (v109 >> 63);
                  v104 += 4;
                  int v60 = 2;
                }
                while (v135 != v104);
                goto LABEL_111;
              }
            }
          }
          goto LABEL_110;
        }
        if ((int)v146 >= 1)
        {
          int32x2_t v77 = v160[0];
          uint64_t v78 = v138;
          uint64_t v9 = v135;
          do
          {
            int v80 = *v26++;
            int v79 = v80;
            int v81 = *v28++;
            int v82 = v81 + v79;
            int v83 = *v29++;
            *v77++ = v82 - v83;
            --v78;
          }
          while (v78);
LABEL_110:
          int v60 = 2;
          goto LABEL_111;
        }
LABEL_98:
        int v60 = 2;
LABEL_99:
        uint64_t v9 = v135;
LABEL_111:
        uint64_t v5 = v141;
        uint64_t v7 = a2;
        uint64_t v10 = v134;
        int v11 = v147;
LABEL_112:
        sub_2170A7A6C((unsigned int *)a1, v19, (uint64_t)v160[0], v6, v145, (unsigned char *)(a1 + 4372), &v167[15 * v60], v7 + 4 * v8 * v6);
        if ((int)v6 >= 1)
        {
          int v117 = (char *)v161 + 4;
          uint64_t v118 = v138;
          unint64_t v119 = v11;
          do
          {
            int v121 = *v119++;
            int v120 = v121;
            int v122 = *((_DWORD *)v117 - 1);
            if (*(_DWORD *)&v117[4 * (((_BYTE)v122 - 1) & 3)] != v121)
            {
              *((_DWORD *)v117 - 1) = v122 + 1;
              *(_DWORD *)&v117[4 * (v122 & 3)] = v120;
            }
            v117 += 20;
            --v118;
          }
          while (v118);
        }
        goto LABEL_117;
      }
      if (v20 != -1 && (!v148 || *(unsigned char *)(a3 + (int)v152) && *(unsigned char *)(a3 + SHIDWORD(v152)) && *(unsigned char *)(a3 + v20)))
      {
        int v133 = v15;
        v147 = v11;
        uint64_t v44 = (int *)(v7 + 4 * (int)v152 * (int)v146);
        int v45 = (int *)(v7 + 4 * HIDWORD(v152) * (int)v146);
        int v46 = (int *)(v7 + 4 * v20 * (int)v146);
        BOOL v47 = sub_2170A4794((unsigned int *)a1, v164);
        uint64_t v48 = 2;
        if (!v47) {
          uint64_t v48 = 1;
        }
        if (sub_2170A4794((unsigned int *)a1, &v164[v48])) {
          int v49 = 2;
        }
        else {
          int v49 = 0;
        }
        int v50 = v49 | v47;
        if (v50 == 2)
        {
          unint64_t v6 = v146;
          sub_2170A5790(v44, v45, v46, v146, (int *)(*(void *)(a1 + 1160) + 12 * v139), (int *)(*(void *)(a1 + 1160) + 12 * v133), (int *)(*(void *)(a1 + 1160) + 12 * v137), (int *)(*(void *)(a1 + 1160) + 12 * v140), (_DWORD *)v160[0]);
          uint64_t v9 = v135;
          if ((int)v146 >= 1)
          {
            int32x2_t v95 = (int *)v160[0];
            uint64_t v96 = v138;
            do
            {
              int v98 = *v44++;
              int v97 = v98;
              int v99 = *v45++;
              int v100 = v99 + v97;
              int v101 = *v46++;
              int v102 = v100 - v101;
              BOOL v75 = __OFADD__(v102, *v95);
              int v103 = v102 + *v95;
              if (v103 < 0 != v75) {
                ++v103;
              }
              *v95++ = v103 >> 1;
              --v96;
            }
            while (v96);
          }
          goto LABEL_110;
        }
        if (v50 == 1)
        {
          unint64_t v6 = v146;
          sub_2170A5790(v44, v45, v46, v146, (int *)(*(void *)(a1 + 1160) + 12 * v139), (int *)(*(void *)(a1 + 1160) + 12 * v133), (int *)(*(void *)(a1 + 1160) + 12 * v137), (int *)(*(void *)(a1 + 1160) + 12 * v140), (_DWORD *)v160[0]);
        }
        else if (v50)
        {
          unint64_t v6 = v146;
          if (v146 != 2)
          {
            uint64_t v9 = v135;
            if ((int)v146 >= 1)
            {
              int v110 = v160[0];
              uint64_t v111 = v138;
              do
              {
                int v113 = *v44++;
                int v112 = v113;
                int v115 = *v45++;
                int v114 = v115;
                int v116 = *v46++;
                *v110++ = v114 + v112 - v116;
                int v60 = 2;
                --v111;
              }
              while (v111);
              goto LABEL_111;
            }
            goto LABEL_110;
          }
          sub_2170A5E8C(a2 + 8 * v24, (int *)(a2 + 8 * v25), (int *)(a2 + 8 * v20), (_DWORD *)(*(void *)(a1 + 1160) + 12 * v139), (_DWORD *)(*(void *)(a1 + 1160) + 12 * v133), (int *)(*(void *)(a1 + 1160) + 12 * v140), (int *)v160[0]);
        }
        else
        {
          unint64_t v6 = v146;
          if ((int)v146 >= 1)
          {
            int v51 = v160[0];
            uint64_t v52 = v138;
            uint64_t v9 = v135;
            do
            {
              int v54 = *v44++;
              int v53 = v54;
              int v55 = *v45++;
              int v56 = v55 + v53;
              int v57 = *v46++;
              *v51++ = v56 - v57;
              --v52;
            }
            while (v52);
            goto LABEL_110;
          }
        }
        goto LABEL_98;
      }
      if (HIDWORD(v152) != -1 && (!v148 || *(unsigned char *)(a3 + (int)v152) && *(unsigned char *)(a3 + SHIDWORD(v152))))
      {
        int v58 = v15;
        unint64_t v6 = v146;
        v147 = v11;
        if (v146 == 2)
        {
          BOOL v59 = sub_2170A4794((unsigned int *)a1, &v166);
          sub_2170A5C70((int *)(v7 + 8 * v24), (int *)(v7 + 8 * v25), (_DWORD *)(*(void *)(a1 + 1160) + 12 * v139), (_DWORD *)(*(void *)(a1 + 1160) + 12 * v58), (int *)(*(void *)(a1 + 1160) + 12 * v140), v59, (int *)v160[0]);
          int v60 = 1;
          unint64_t v6 = v146;
        }
        else
        {
          if ((int)v146 >= 1)
          {
            uint64_t v68 = (int *)(v7 + 4 * (int)v152 * (int)v146);
            uint64_t v69 = (int *)(v7 + 4 * HIDWORD(v152) * (int)v146);
            int32x2_t v70 = (int *)v160[0];
            uint64_t v71 = v138;
            do
            {
              int v73 = *v68++;
              int v72 = v73;
              int v74 = *v69++;
              BOOL v75 = __OFADD__(v74, v72);
              int v76 = v74 + v72;
              if (v76 < 0 != v75) {
                ++v76;
              }
              *v70++ = v76 >> 1;
              --v71;
            }
            while (v71);
          }
          int v60 = 1;
        }
        goto LABEL_99;
      }
      uint64_t v5 = v141;
      unint64_t v6 = v146;
      uint64_t v10 = v134;
      uint64_t v9 = v135;
    }
    int v61 = sub_2170AF61C(a1, v8, v7, a3, (uint64_t)v160);
    int v60 = 0;
    if (!v61 && (int)v6 >= 1)
    {
      uint64_t v62 = 0;
      uint64_t v63 = 4;
      do
      {
        BOOL v64 = sub_2170A4794((unsigned int *)a1, __b);
        BOOL v65 = v64;
        if (v64) {
          uint64_t v66 = 2;
        }
        else {
          uint64_t v66 = 1;
        }
        if (sub_2170A4794((unsigned int *)a1, &__b[v66])) {
          char v67 = 2;
        }
        else {
          char v67 = 0;
        }
        *(_DWORD *)((char *)v160[0] + v62) = *(_DWORD *)((char *)v161
                                                       + 4
                                                       * ((*(_DWORD *)((char *)v161 + v63 - 4)
                                                         + ~(v67 | v65)) & 3)
                                                       + v63);
        v63 += 20;
        v62 += 4;
      }
      while (v9 != v62);
      int v60 = 0;
      uint64_t v5 = v141;
      uint64_t v7 = a2;
      unint64_t v6 = v146;
    }
    goto LABEL_112;
  }
LABEL_118:
  if (__p)
  {
    v159[0] = __p;
    operator delete(__p);
  }
  if (v160[0])
  {
    v160[1] = v160[0];
    operator delete(v160[0]);
  }
  if (v161)
  {
    *(void *)v162 = v161;
    operator delete(v161);
  }
  unint64_t v123 = 360;
  do
  {
    v124 = &v167[v123 / 8];
    v125 = *(void **)&v162[v123 / 4 + 4];
    if (v125)
    {
      *((void *)v124 - 2) = v125;
      operator delete(v125);
    }
    v126 = (void *)*((void *)v124 - 6);
    if (v126)
    {
      *(void *)&v162[v123 / 4] = v126;
      operator delete(v126);
    }
    int v127 = &v167[v123 / 8];
    int v128 = v160[v123 / 8];
    if (v128)
    {
      *((void *)v127 - 8) = v128;
      operator delete(v128);
    }
    int v129 = (void *)*((void *)v127 - 12);
    if (v129)
    {
      v159[v123 / 8] = v129;
      operator delete(v129);
    }
    int v130 = (void *)*((void *)v124 - 15);
    if (v130)
    {
      *(unint64_t *)((char *)&v156 + v123) = (unint64_t)v130;
      operator delete(v130);
    }
    v123 -= 120;
  }
  while (v123);
}

void sub_2170AF59C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  if (__p) {
    operator delete(__p);
  }
  if (a36) {
    operator delete(a36);
  }
  if (a39) {
    operator delete(a39);
  }
  for (uint64_t i = 240; i != -120; i -= 120)
    sub_2170A8E48((uint64_t)(&a45 + i));
  _Unwind_Resume(a1);
}

uint64_t sub_2170AF61C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v9 = *(_DWORD *)(a1 + 4360);
  unint64_t v10 = *(unsigned int *)(a1 + 4336);
  uint64_t v11 = *(void *)(a1 + 4224);
  uint64_t v12 = *(int *)(*(void *)(a1 + 4176) + 4 * a2);
  uint64_t v13 = *(int *)(*(void *)(a1 + 4200) + 4 * a2);
  int v14 = *(_DWORD **)a5;
  uint64_t v15 = *(void *)(a5 + 8) - *(void *)a5;
  if (v15 >= 1) {
    bzero(*(void **)a5, 4 * (((unint64_t)v15 >> 2) - ((unint64_t)v15 > 3)) + 4);
  }
  if ((int)v13 < 1) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v17 = v13 + v12;
  uint64_t v18 = *(void *)(a1 + 1208);
  do
  {
    uint64_t v19 = (int *)(v18 + 4 * *(int *)(v11 + 4 * v12));
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    if ((int)v20 < (int)v21)
    {
      uint64_t v22 = *(void *)(a1 + 4104);
      do
      {
        uint64_t v23 = *(int *)(v22 + 4 * v20);
        if ((int)v23 < a2 && (!v9 || *(unsigned char *)(a4 + v23)))
        {
          if ((int)v10 >= 1)
          {
            uint64_t v24 = (int *)(a3 + 4 * (int)v23 * (int)v10);
            unint64_t v25 = v10;
            int v26 = v14;
            do
            {
              int v27 = *v24++;
              *v26++ += v27;
              --v25;
            }
            while (v25);
          }
          uint64_t result = (result + 1);
        }
        ++v20;
      }
      while (v20 < v21 && (int)result < 4);
    }
    ++v12;
  }
  while (v12 < v17 && (int)result < 4);
  if ((int)v10 >= 1 && (int)result >= 2)
  {
    for (unint64_t i = 0; i < v10; ++i)
      v14[i] /= (int)result;
  }
  return result;
}

void sub_2170AF788(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v94 = *MEMORY[0x263EF8340];
  int32x2_t v70 = (void *)(a1 + 4056);
  uint64_t v5 = *(unsigned int *)(a1 + 4332);
  unint64_t v6 = *(int *)(a1 + 4336);
  int v75 = *(_DWORD *)(a1 + 4360);
  memset_pattern16(__b, &unk_2174AFAB0, 6uLL);
  uint64_t v7 = 0;
  uint64_t v93 = 0;
  memset(v92, 0, sizeof(v92));
  do
  {
    sub_2170A8CEC((uint64_t)&v92[v7], v6);
    v7 += 15;
  }
  while (v7 != 45);
  __int16 v90 = 0x8000;
  sub_2170B1D18(&v88, v6);
  LODWORD(__p) = 0;
  sub_2170A4FFC(v87, v6, &__p);
  LODWORD(v83) = 0;
  sub_2170A4FFC(&__p, v6, &v83);
  if ((int)v5 >= 1)
  {
    uint64_t v8 = 0;
    unint64_t v69 = v6;
    uint64_t v65 = v6;
    uint64_t v66 = v5;
    uint64_t v9 = 4 * v6;
    uint64_t v74 = 4 * v6;
    unint64_t v10 = (int *)a2;
    uint64_t v67 = a2;
    while (v75 && !*(unsigned char *)(a3 + v8))
    {
LABEL_56:
      ++v8;
      unint64_t v10 = (int *)((char *)v10 + v74);
      if (v8 == v5) {
        goto LABEL_65;
      }
    }
    uint64_t v11 = *(unsigned int *)(*(void *)(a1 + 4128) + 4 * v8);
    if ((v11 & 0x80000000) == 0)
    {
      uint64_t v12 = (unsigned int *)(*(void *)(a1 + 1256) + 12 * v11);
      unsigned int v13 = *v12;
      LODWORD(v83) = *v12;
      unsigned int v14 = v12[1];
      HIDWORD(v83) = v14;
      unsigned int v15 = v12[2];
      v84[0] = v15;
      int v16 = (_DWORD *)(*(void *)(a1 + 1280) + 12 * v11);
      unsigned int v17 = v16[1];
      LODWORD(v81) = *v16;
      HIDWORD(v81) = v17;
      unsigned int v71 = v17;
      unsigned int v72 = v16[2];
      int v73 = v81;
      unsigned int v82 = v72;
      int v80 = -1;
      uint64_t v79 = -1;
      int v78 = -1;
      uint64_t v77 = -1;
      sub_2170AD058((void *)a1, v11, v8, (unsigned int *)&v83, &v79);
      sub_2170AD058((void *)a1, v11, v8, (unsigned int *)&v81, &v77);
      int v19 = v80;
      int v20 = v78;
      if ((v80 & 0x80000000) == 0 || v78 < 0)
      {
        unint64_t v68 = __PAIR64__(v14, v13);
        int v21 = v77;
        int v22 = HIDWORD(v77);
      }
      else
      {
        unsigned int v72 = v15;
        int v73 = v13;
        unint64_t v83 = v81;
        unsigned int v15 = v82;
        v84[0] = v82;
        int v21 = v79;
        int v22 = HIDWORD(v79);
        uint64_t v79 = v77;
        int v20 = v80;
        int v19 = v78;
        int v80 = v78;
        unsigned int v71 = v14;
        unint64_t v68 = v81;
      }
      int v23 = v79;
      int v24 = HIDWORD(v79);
      if (v20 != -1
        && (!v75
         || *(unsigned char *)(a3 + (int)v79)
         && *(unsigned char *)(a3 + SHIDWORD(v79))
         && *(unsigned char *)(a3 + v19)
         && *(unsigned char *)(a3 + v21)
         && *(unsigned char *)(a3 + v22)
         && *(unsigned char *)(a3 + v20)))
      {
        int v63 = v22;
        int v64 = v21;
        unint64_t v6 = v69;
        a2 = v67;
        sub_2170A5790((int *)(v67 + 4 * (int)v79 * (int)v69), (int *)(v67 + 4 * HIDWORD(v79) * (int)v69), (int *)(v67 + 4 * v19 * (int)v69), v69, (int *)(*(void *)(a1 + 1160) + 12 * (int)v68), (int *)(*(void *)(a1 + 1160) + 12 * SHIDWORD(v68)), (int *)(*(void *)(a1 + 1160) + 12 * (int)v15), (int *)(*(void *)(a1 + 1160) + 12 * v11), (_DWORD *)v87[0]);
        sub_2170A5790((int *)(a2 + 4 * v64 * (int)v6), (int *)(a2 + 4 * v63 * (int)v6), (int *)(a2 + 4 * v20 * (int)v6), v6, (int *)(*(void *)(a1 + 1160) + 12 * v73), (int *)(*(void *)(a1 + 1160) + 12 * (int)v71), (int *)(*(void *)(a1 + 1160) + 12 * (int)v72), (int *)(*(void *)(a1 + 1160) + 12 * v11), __p);
        uint64_t v5 = v66;
        if ((int)v69 >= 1)
        {
          unint64_t v25 = (int *)v87[0];
          int v26 = (int *)__p;
          uint64_t v27 = v65;
          do
          {
            int v28 = *v26++;
            int v29 = v28 + *v25;
            if (v29 < 0 != __OFADD__(v28, *v25)) {
              ++v29;
            }
            *v25++ = v29 >> 1;
            --v27;
          }
          while (v27);
        }
        int v30 = 2;
        goto LABEL_51;
      }
      if (v19 != -1 && (!v75 || *(unsigned char *)(a3 + (int)v79) && *(unsigned char *)(a3 + SHIDWORD(v79)) && *(unsigned char *)(a3 + v19)))
      {
        unint64_t v6 = v69;
        a2 = v67;
        sub_2170A5790((int *)(v67 + 4 * (int)v79 * (int)v69), (int *)(v67 + 4 * HIDWORD(v79) * (int)v69), (int *)(v67 + 4 * v19 * (int)v69), v69, (int *)(*(void *)(a1 + 1160) + 12 * (int)v68), (int *)(*(void *)(a1 + 1160) + 12 * SHIDWORD(v68)), (int *)(*(void *)(a1 + 1160) + 12 * (int)v15), (int *)(*(void *)(a1 + 1160) + 12 * v11), (_DWORD *)v87[0]);
        int v30 = 2;
        goto LABEL_50;
      }
      if (HIDWORD(v79) != -1 && (!v75 || *(unsigned char *)(a3 + (int)v79) && *(unsigned char *)(a3 + SHIDWORD(v79))))
      {
        uint64_t v5 = v66;
        if (v69 == 2)
        {
          BOOL v31 = sub_2170A4794((unsigned int *)a1, &v90);
          int v32 = 2 * v24;
          a2 = v67;
          sub_2170A5C70((int *)(v67 + 8 * v23), (int *)(v67 + 4 * v32), (_DWORD *)(*(void *)(a1 + 1160) + 12 * (int)v68), (_DWORD *)(*(void *)(a1 + 1160) + 12 * SHIDWORD(v68)), (int *)(*(void *)(a1 + 1160) + 12 * v11), v31, (int *)v87[0]);
          int v30 = 1;
          unint64_t v6 = v69;
        }
        else if ((int)v69 < 1)
        {
          int v30 = 1;
          a2 = v67;
          unint64_t v6 = v69;
        }
        else
        {
          int v46 = (int *)(v67 + 4 * (int)v79 * (int)v69);
          a2 = v67;
          BOOL v47 = (int *)(v67 + 4 * HIDWORD(v79) * (int)v69);
          uint64_t v48 = (int *)v87[0];
          uint64_t v49 = v65;
          unint64_t v6 = v69;
          do
          {
            int v51 = *v46++;
            int v50 = v51;
            int v52 = *v47++;
            BOOL v53 = __OFADD__(v52, v50);
            int v54 = v52 + v50;
            if (v54 < 0 != v53) {
              ++v54;
            }
            *v48++ = v54 >> 1;
            --v49;
          }
          while (v49);
          int v30 = 1;
        }
        goto LABEL_51;
      }
      uint64_t v5 = v66;
      a2 = v67;
      unint64_t v6 = v69;
    }
    int v33 = sub_2170AF61C(a1, v8, a2, a3, (uint64_t)v87);
    int v30 = 0;
    if (v33 || (int)v6 < 1)
    {
LABEL_51:
      sub_2170A7A6C((unsigned int *)a1, v18, (uint64_t)v87[0], v6, v70, (unsigned char *)(a1 + 4372), &v92[15 * v30], a2 + 4 * v8 * v6);
      if ((int)v6 >= 1)
      {
        int v40 = (char *)v88 + 4;
        uint64_t v41 = v65;
        int v42 = v10;
        do
        {
          int v44 = *v42++;
          int v43 = v44;
          int v45 = *((_DWORD *)v40 - 1);
          if (*(_DWORD *)&v40[4 * (((_BYTE)v45 - 1) & 3)] != v44)
          {
            *((_DWORD *)v40 - 1) = v45 + 1;
            *(_DWORD *)&v40[4 * (v45 & 3)] = v43;
          }
          v40 += 20;
          --v41;
        }
        while (v41);
      }
      goto LABEL_56;
    }
    uint64_t v34 = 0;
    uint64_t v35 = 4;
    do
    {
      BOOL v36 = sub_2170A4794((unsigned int *)a1, __b);
      BOOL v37 = v36;
      if (v36) {
        uint64_t v38 = 2;
      }
      else {
        uint64_t v38 = 1;
      }
      if (sub_2170A4794((unsigned int *)a1, &__b[v38])) {
        char v39 = 2;
      }
      else {
        char v39 = 0;
      }
      *(_DWORD *)((char *)v87[0] + v34) = *(_DWORD *)((char *)v88
                                                    + 4
                                                    * ((*(_DWORD *)((char *)v88 + v35 - 4)
                                                      + ~(v39 | v37)) & 3)
                                                    + v35);
      v35 += 20;
      v34 += 4;
    }
    while (v9 != v34);
    int v30 = 0;
    unint64_t v6 = v69;
    a2 = v67;
LABEL_50:
    uint64_t v5 = v66;
    goto LABEL_51;
  }
LABEL_65:
  if (__p)
  {
    v86[0] = __p;
    operator delete(__p);
  }
  if (v87[0])
  {
    v87[1] = v87[0];
    operator delete(v87[0]);
  }
  if (v88)
  {
    v89[0] = v88;
    operator delete(v88);
  }
  unint64_t v55 = 90;
  do
  {
    int v56 = &v92[v55 / 2];
    int v57 = (void *)v89[v55 / 2];
    if (v57)
    {
      *((void *)v56 - 2) = v57;
      operator delete(v57);
    }
    int v58 = (void *)*((void *)v56 - 6);
    if (v58)
    {
      v87[v55 / 2 + 2] = v58;
      operator delete(v58);
    }
    BOOL v59 = &v92[v55 / 2];
    int v60 = (void *)v86[v55 / 2];
    if (v60)
    {
      *((void *)v59 - 8) = v60;
      operator delete(v60);
    }
    int v61 = (void *)*((void *)v59 - 12);
    if (v61)
    {
      *(void *)&v84[v55] = v61;
      operator delete(v61);
    }
    uint64_t v62 = (void *)*((void *)v56 - 15);
    if (v62)
    {
      *(void *)((char *)&v80 + v55 * 4) = v62;
      operator delete(v62);
    }
    v55 -= 30;
  }
  while (v55 * 4);
}

void sub_2170AFEB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  if (__p) {
    operator delete(__p);
  }
  if (a34) {
    operator delete(a34);
  }
  if (a37) {
    operator delete(a37);
  }
  for (uint64_t i = 240; i != -120; i -= 120)
    sub_2170A8E48((uint64_t)(&a41 + i));
  _Unwind_Resume(a1);
}

void sub_2170AFF34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v121 = *MEMORY[0x263EF8340];
  int v106 = (void *)(a1 + 4056);
  uint64_t v108 = *(unsigned int *)(a1 + 4332);
  unint64_t v6 = *(int *)(a1 + 4336);
  int v110 = *(_DWORD *)(a1 + 4360);
  memset_pattern16(__b, &unk_2174AFAB0, 6uLL);
  memset_pattern16(v117, &unk_2174AFAB0, 6uLL);
  uint64_t v7 = 0;
  uint64_t v120 = 0;
  memset(v119, 0, sizeof(v119));
  do
  {
    sub_2170A8CEC((uint64_t)v119 + v7, v6);
    v7 += 120;
  }
  while (v7 != 360);
  sub_2170B1D18(v116, v6);
  LODWORD(v113) = 0;
  sub_2170A4FFC(__p, v6, &v113);
  if ((int)v108 >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v105 = a2;
    uint64_t v103 = v6;
    unint64_t v104 = v6;
    uint64_t v9 = 4 * v6;
    uint64_t v107 = 4 * v6;
    unint64_t v10 = (int *)a2;
    uint64_t v109 = a3;
    while (v110 && !*(unsigned char *)(a3 + v8))
    {
LABEL_87:
      ++v8;
      unint64_t v10 = (int *)((char *)v10 + v107);
      if (v8 == v108) {
        goto LABEL_90;
      }
    }
    uint64_t v11 = *(unsigned int *)(*(void *)(a1 + 4128) + 4 * v8);
    if ((v11 & 0x80000000) == 0)
    {
      v114[0] = -1;
      uint64_t v113 = -1;
      v112[0] = -1;
      uint64_t v111 = -1;
      sub_2170AD058((void *)a1, v11, v8, (unsigned int *)(*(void *)(a1 + 1256) + 12 * v11), &v113);
      sub_2170AD058((void *)a1, v11, v8, (unsigned int *)(*(void *)(a1 + 1280) + 12 * v11), &v111);
      int v13 = v114[0];
      if ((v114[0] & 0x80000000) == 0 || (v112[0] & 0x80000000) != 0)
      {
        int v15 = v114[0];
        int v13 = v112[0];
      }
      else
      {
        uint64_t v14 = v113;
        uint64_t v113 = v111;
        int v15 = v112[0];
        v114[0] = v112[0];
        uint64_t v111 = v14;
      }
      int v17 = v113;
      int v16 = HIDWORD(v113);
      if (v13 != -1
        && (!v110
         || *(unsigned char *)(v109 + (int)v113)
         && *(unsigned char *)(v109 + SHIDWORD(v113))
         && *(unsigned char *)(v109 + v15)
         && *(unsigned char *)(v109 + (int)v111)
         && *(unsigned char *)(v109 + SHIDWORD(v111))
         && *(unsigned char *)(v109 + v13)))
      {
        int v101 = v111;
        int v102 = HIDWORD(v111);
        BOOL v18 = sub_2170A4794((unsigned int *)a1, v117);
        uint64_t v19 = 2;
        if (!v18) {
          uint64_t v19 = 1;
        }
        if (sub_2170A4794((unsigned int *)a1, &v117[v19])) {
          int v20 = 2;
        }
        else {
          int v20 = 0;
        }
        int v21 = v17 * v104;
        a2 = v105;
        int v22 = (int *)(v105 + 4 * v21);
        int v23 = (int *)(v105 + 4 * v16 * (int)v104);
        int v24 = v15 * v104;
        unint64_t v6 = v104;
        unint64_t v25 = (int *)(v105 + 4 * v24);
        int v26 = v20 | v18;
        if (v20 | v18)
        {
          uint64_t v27 = (int *)(v105 + 4 * v101 * (int)v104);
          int v28 = (int *)(v105 + 4 * v102 * (int)v104);
          int v29 = (int *)(v105 + 4 * v13 * (int)v104);
          if (v26 == 1)
          {
            a3 = v109;
            if ((int)v104 >= 1)
            {
              uint64_t v74 = __p[0];
              uint64_t v75 = v103;
              do
              {
                int v77 = *v27++;
                int v76 = v77;
                int v78 = *v28++;
                int v79 = v78 + v76;
                int v80 = *v29++;
                *v74++ = v79 - v80;
                --v75;
              }
              while (v75);
            }
          }
          else
          {
            a3 = v109;
            if (v26 == 2)
            {
              if ((int)v104 >= 1)
              {
                int v30 = __p[0];
                uint64_t v31 = v103;
                do
                {
                  int v33 = *v23++;
                  int v32 = v33;
                  int v34 = *v28++;
                  int v35 = v34 + v32;
                  int v37 = *v22++;
                  int v36 = v37;
                  int v38 = *v27++;
                  BOOL v39 = __OFADD__(v38, v36);
                  int v40 = v38 + v36;
                  if (v40 < 0 != v39) {
                    ++v40;
                  }
                  *v30++ = v35 - (v40 >> 1);
                  --v31;
                }
                while (v31);
              }
            }
            else if ((int)v104 >= 1)
            {
              unint64_t v81 = 0;
              unsigned int v82 = (char *)__p[0];
              do
              {
                int v83 = v22[v81 / 4];
                int v84 = v27[v81 / 4];
                BOOL v39 = __OFADD__(v84, v83);
                int v85 = v84 + v83;
                if (v85 < 0 != v39) {
                  ++v85;
                }
                uint64_t v12 = v25[v81 / 4];
                unint64_t v86 = 1431655766 * ((v85 >> 1) - ((int)v12 + v29[v81 / 4]) + 2 * (v28[v81 / 4] + v23[v81 / 4]));
                *(_DWORD *)&v82[v81] = HIDWORD(v86) + (v86 >> 63);
                v81 += 4;
              }
              while (v9 != v81);
            }
          }
          goto LABEL_81;
        }
        if ((int)v104 >= 1)
        {
          uint64_t v67 = __p[0];
          uint64_t v68 = v103;
          a3 = v109;
          do
          {
            int v70 = *v22++;
            int v69 = v70;
            int v71 = *v23++;
            int v72 = v71 + v69;
            int v73 = *v25++;
            *v67++ = v72 - v73;
            --v68;
          }
          while (v68);
LABEL_81:
          unsigned int v59 = 2;
          goto LABEL_82;
        }
        unsigned int v59 = 2;
        a3 = v109;
LABEL_82:
        sub_2170A7A6C((unsigned int *)a1, v12, (uint64_t)__p[0], v6, v106, (unsigned char *)(a1 + 4372), (void *)v119 + 15 * v59, a2 + 4 * v8 * v6);
        if ((int)v6 >= 1)
        {
          int v87 = (char *)v116[0] + 4;
          uint64_t v88 = v103;
          unint64_t v89 = v10;
          do
          {
            int v91 = *v89++;
            int v90 = v91;
            int v92 = *((_DWORD *)v87 - 1);
            if (*(_DWORD *)&v87[4 * (((_BYTE)v92 - 1) & 3)] != v91)
            {
              *((_DWORD *)v87 - 1) = v92 + 1;
              *(_DWORD *)&v87[4 * (v92 & 3)] = v90;
            }
            v87 += 20;
            --v88;
          }
          while (v88);
        }
        goto LABEL_87;
      }
      a3 = v109;
      if (v15 != -1
        && (!v110 || *(unsigned char *)(v109 + (int)v113) && *(unsigned char *)(v109 + SHIDWORD(v113)) && *(unsigned char *)(v109 + v15)))
      {
        if ((int)v104 < 1)
        {
          unsigned int v59 = 2;
          a2 = v105;
          unint64_t v6 = v104;
          goto LABEL_82;
        }
        a2 = v105;
        uint64_t v41 = (int *)(v105 + 4 * (int)v113 * (int)v104);
        int v42 = (int *)(v105 + 4 * HIDWORD(v113) * (int)v104);
        int v43 = (int *)(v105 + 4 * v15 * (int)v104);
        int v44 = __p[0];
        uint64_t v45 = v103;
        unint64_t v6 = v104;
        do
        {
          int v47 = *v41++;
          int v46 = v47;
          int v48 = *v42++;
          int v49 = v48 + v46;
          int v50 = *v43++;
          *v44++ = v49 - v50;
          --v45;
        }
        while (v45);
        goto LABEL_81;
      }
      if (HIDWORD(v113) != -1 && (!v110 || *(unsigned char *)(v109 + (int)v113) && *(unsigned char *)(v109 + SHIDWORD(v113))))
      {
        unint64_t v6 = v104;
        if ((int)v104 >= 1)
        {
          a2 = v105;
          int v51 = (int *)(v105 + 4 * (int)v113 * (int)v104);
          int v52 = (int *)(v105 + 4 * HIDWORD(v113) * (int)v104);
          BOOL v53 = (int *)__p[0];
          uint64_t v54 = v103;
          do
          {
            int v56 = *v51++;
            int v55 = v56;
            int v57 = *v52++;
            BOOL v39 = __OFADD__(v57, v55);
            int v58 = v57 + v55;
            if (v58 < 0 != v39) {
              ++v58;
            }
            *v53++ = v58 >> 1;
            --v54;
          }
          while (v54);
          unsigned int v59 = 1;
          goto LABEL_82;
        }
        unsigned int v59 = 1;
        goto LABEL_65;
      }
      unint64_t v6 = v104;
      a2 = v105;
    }
    int v60 = sub_2170AF61C(a1, v8, a2, a3, (uint64_t)__p);
    unsigned int v59 = 0;
    if (v60 || (int)v6 < 1) {
      goto LABEL_82;
    }
    uint64_t v61 = 0;
    uint64_t v62 = 4;
    do
    {
      BOOL v63 = sub_2170A4794((unsigned int *)a1, __b);
      BOOL v64 = v63;
      if (v63) {
        uint64_t v65 = 2;
      }
      else {
        uint64_t v65 = 1;
      }
      if (sub_2170A4794((unsigned int *)a1, &__b[v65])) {
        char v66 = 2;
      }
      else {
        char v66 = 0;
      }
      *(_DWORD *)((char *)__p[0] + v61) = *(_DWORD *)((char *)v116[0]
                                                    + 4
                                                    * ((*(_DWORD *)((char *)v116[0] + v62 - 4)
                                                      + ~(v66 | v64)) & 3)
                                                    + v62);
      v62 += 20;
      v61 += 4;
    }
    while (v9 != v61);
    unsigned int v59 = 0;
    unint64_t v6 = v104;
    a3 = v109;
LABEL_65:
    a2 = v105;
    goto LABEL_82;
  }
LABEL_90:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v116[0])
  {
    v116[1] = v116[0];
    operator delete(v116[0]);
  }
  unint64_t v93 = 90;
  do
  {
    uint64_t v94 = (char *)v119 + v93 * 4;
    int32x2_t v95 = v116[v93 / 2 + 2];
    if (v95)
    {
      *((void *)v94 - 2) = v95;
      operator delete(v95);
    }
    uint64_t v96 = (void *)*((void *)v94 - 6);
    if (v96)
    {
      v116[v93 / 2] = v96;
      operator delete(v96);
    }
    int v97 = (char *)v119 + v93 * 4;
    int v98 = *(void **)&v114[v93];
    if (v98)
    {
      *((void *)v97 - 8) = v98;
      operator delete(v98);
    }
    int v99 = (void *)*((void *)v97 - 12);
    if (v99)
    {
      *(void *)&v112[v93] = v99;
      operator delete(v99);
    }
    int v100 = (void *)*((void *)v94 - 15);
    if (v100)
    {
      *(void *)((char *)&v119[-7] + v93 * 4) = v100;
      operator delete(v100);
    }
    v93 -= 30;
  }
  while (v93 * 4);
}

void sub_2170B0650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (__p) {
    operator delete(__p);
  }
  for (uint64_t i = 240; i != -120; i -= 120)
    sub_2170A8E48((uint64_t)(&a33 + i));
  _Unwind_Resume(a1);
}

void sub_2170B06AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v74 = *MEMORY[0x263EF8340];
  uint64_t v61 = (void *)(a1 + 4056);
  uint64_t v64 = *(unsigned int *)(a1 + 4332);
  unint64_t v6 = *(int *)(a1 + 4336);
  int v65 = *(_DWORD *)(a1 + 4360);
  memset_pattern16(__b, &unk_2174AFAB0, 6uLL);
  uint64_t v7 = 0;
  uint64_t v73 = 0;
  memset(v72, 0, sizeof(v72));
  do
  {
    sub_2170A8CEC((uint64_t)v72 + v7, v6);
    v7 += 120;
  }
  while (v7 != 360);
  sub_2170B1D18(&v69, v6);
  LODWORD(v66) = 0;
  sub_2170A4FFC(__p, v6, &v66);
  if ((int)v64 >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v60 = a2;
    unint64_t v58 = v6;
    uint64_t v59 = v6;
    uint64_t v9 = 4 * v6;
    uint64_t v62 = a3;
    uint64_t v63 = 4 * v6;
    unint64_t v10 = (int *)a2;
    while (v65 && !*(unsigned char *)(a3 + v8))
    {
LABEL_50:
      ++v8;
      unint64_t v10 = (int *)((char *)v10 + v63);
      if (v8 == v64) {
        goto LABEL_51;
      }
    }
    unsigned int v11 = *(_DWORD *)(*(void *)(a1 + 4128) + 4 * v8);
    if ((v11 & 0x80000000) != 0)
    {
      a3 = v62;
      goto LABEL_34;
    }
    int v67 = -1;
    uint64_t v66 = -1;
    sub_2170AD058((void *)a1, v11, v8, (unsigned int *)(*(void *)(a1 + 1256) + 12 * v11), &v66);
    int v14 = v66;
    int v13 = HIDWORD(v66);
    int v15 = v67;
    if (v67 < 0)
    {
      sub_2170AD058((void *)a1, v11, v8, (unsigned int *)(*(void *)(a1 + 1280) + 12 * v11), &v66);
      if (v67 < 0)
      {
        a3 = v62;
        if (v15 == -1)
        {
LABEL_23:
          if (v13 != -1 && (!v65 || *(unsigned char *)(a3 + v14) && *(unsigned char *)(a3 + v13)))
          {
            a2 = v60;
            if ((int)v6 >= 1)
            {
              int v28 = (int *)(v60 + 4 * v14 * (int)v6);
              int v29 = (int *)(v60 + 4 * v13 * (int)v6);
              int v30 = (int *)__p[0];
              uint64_t v31 = v59;
              do
              {
                int v33 = *v28++;
                int v32 = v33;
                int v34 = *v29++;
                BOOL v35 = __OFADD__(v34, v32);
                int v36 = v34 + v32;
                if (v36 < 0 != v35) {
                  ++v36;
                }
                *v30++ = v36 >> 1;
                --v31;
              }
              while (v31);
            }
            unsigned int v27 = 1;
            goto LABEL_45;
          }
          a2 = v60;
LABEL_34:
          int v37 = sub_2170AF61C(a1, v8, a2, a3, (uint64_t)__p);
          unsigned int v27 = 0;
          if (!v37 && (int)v6 >= 1)
          {
            uint64_t v38 = 0;
            uint64_t v39 = 4;
            do
            {
              BOOL v40 = sub_2170A4794((unsigned int *)a1, __b);
              BOOL v41 = v40;
              if (v40) {
                uint64_t v42 = 2;
              }
              else {
                uint64_t v42 = 1;
              }
              if (sub_2170A4794((unsigned int *)a1, &__b[v42])) {
                char v43 = 2;
              }
              else {
                char v43 = 0;
              }
              *(_DWORD *)((char *)__p[0] + v38) = *(_DWORD *)((char *)v69
                                                            + 4
                                                            * ((*(_DWORD *)((char *)v69 + v39 - 4)
                                                              + ~(v43 | v41)) & 3)
                                                            + v39);
              v39 += 20;
              v38 += 4;
            }
            while (v9 != v38);
            unsigned int v27 = 0;
            a3 = v62;
            a2 = v60;
            unint64_t v6 = v58;
          }
          goto LABEL_45;
        }
LABEL_12:
        if (!v65 || *(unsigned char *)(a3 + v14) && *(unsigned char *)(a3 + v13) && *(unsigned char *)(a3 + v15))
        {
          if ((int)v6 < 1)
          {
            unsigned int v27 = 2;
            a2 = v60;
          }
          else
          {
            uint64_t v16 = v59;
            int v17 = (int *)(v60 + 4 * v14 * (int)v6);
            BOOL v18 = (int *)(v60 + 4 * v13 * (int)v6);
            int v19 = v15 * v6;
            a2 = v60;
            int v20 = (int *)(v60 + 4 * v19);
            int v21 = __p[0];
            do
            {
              int v23 = *v17++;
              int v22 = v23;
              int v24 = *v18++;
              int v25 = v24 + v22;
              int v26 = *v20++;
              *v21++ = v25 - v26;
              --v16;
            }
            while (v16);
            unsigned int v27 = 2;
          }
LABEL_45:
          sub_2170A7A6C((unsigned int *)a1, v12, (uint64_t)__p[0], v6, v61, (unsigned char *)(a1 + 4372), (void *)v72 + 15 * v27, a2 + 4 * v8 * v6);
          if ((int)v6 >= 1)
          {
            int v44 = (char *)v69 + 4;
            uint64_t v45 = v59;
            int v46 = v10;
            do
            {
              int v48 = *v46++;
              int v47 = v48;
              int v49 = *((_DWORD *)v44 - 1);
              if (*(_DWORD *)&v44[4 * (((_BYTE)v49 - 1) & 3)] != v48)
              {
                *((_DWORD *)v44 - 1) = v49 + 1;
                *(_DWORD *)&v44[4 * (v49 & 3)] = v47;
              }
              v44 += 20;
              --v45;
            }
            while (v45);
          }
          goto LABEL_50;
        }
        goto LABEL_23;
      }
      int v14 = v66;
      int v13 = HIDWORD(v66);
      int v15 = v67;
    }
    a3 = v62;
    goto LABEL_12;
  }
LABEL_51:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v69)
  {
    v70[0] = v69;
    operator delete(v69);
  }
  unint64_t v50 = 360;
  do
  {
    int v51 = (char *)v72 + v50;
    int v52 = (void *)v70[v50 / 8];
    if (v52)
    {
      *((void *)v51 - 2) = v52;
      operator delete(v52);
    }
    BOOL v53 = (void *)*((void *)v51 - 6);
    if (v53)
    {
      __p[v50 / 8 + 2] = v53;
      operator delete(v53);
    }
    uint64_t v54 = (char *)v72 + v50;
    int v55 = *(void **)((char *)&v66 + v50);
    if (v55)
    {
      *((void *)v54 - 8) = v55;
      operator delete(v55);
    }
    int v56 = (void *)*((void *)v54 - 12);
    if (v56)
    {
      *(void *)((char *)&v72[-5] + v50 - 8) = v56;
      operator delete(v56);
    }
    int v57 = (void *)*((void *)v51 - 15);
    if (v57)
    {
      *(void *)((char *)&v72[-7] + v50) = v57;
      operator delete(v57);
    }
    v50 -= 120;
  }
  while (v50);
}

void sub_2170B0B70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (__p) {
    operator delete(__p);
  }
  for (uint64_t i = 240; i != -120; i -= 120)
    sub_2170A8E48((uint64_t)(&a27 + i));
  _Unwind_Resume(a1);
}

void sub_2170B0BCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v59 = *MEMORY[0x263EF8340];
  int v46 = (void *)(a1 + 4056);
  uint64_t v49 = *(unsigned int *)(a1 + 4332);
  unint64_t v4 = *(int *)(a1 + 4336);
  int v50 = *(_DWORD *)(a1 + 4360);
  memset_pattern16(__b, &unk_2174AFAB0, 6uLL);
  uint64_t v5 = 0;
  memset(v58, 0, sizeof(v58));
  do
  {
    sub_2170A8CEC((uint64_t)v58 + v5, v4);
    v5 += 120;
  }
  while (v5 != 240);
  sub_2170B1D18(v56, v4);
  LODWORD(v53) = 0;
  sub_2170A4FFC(__p, v4, &v53);
  if ((int)v49 >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v45 = v4;
    uint64_t v7 = 4 * v4;
    uint64_t v47 = 4 * v4;
    unint64_t v48 = v4;
    uint64_t v8 = (int *)a2;
    while (v50 && !*(unsigned char *)(a3 + v6))
    {
LABEL_39:
      ++v6;
      uint64_t v8 = (int *)((char *)v8 + v47);
      if (v6 == v49) {
        goto LABEL_40;
      }
    }
    unsigned int v9 = *(_DWORD *)(*(void *)(a1 + 4128) + 4 * v6);
    if ((v9 & 0x80000000) != 0)
    {
      unint64_t v13 = v48;
      goto LABEL_23;
    }
    int v54 = -1;
    uint64_t v53 = -1;
    sub_2170AD058((void *)a1, v9, v6, (unsigned int *)(*(void *)(a1 + 1256) + 12 * v9), &v53);
    int v11 = v53;
    int v12 = HIDWORD(v53);
    if (v53 < 0)
    {
      sub_2170AD058((void *)a1, v9, v6, (unsigned int *)(*(void *)(a1 + 1280) + 12 * v9), &v53);
      if (v53 < 0)
      {
        unint64_t v13 = v48;
        if (v12 == -1) {
          goto LABEL_23;
        }
        goto LABEL_12;
      }
      int v11 = v53;
      int v12 = HIDWORD(v53);
    }
    unint64_t v13 = v48;
LABEL_12:
    if (!v50 || *(unsigned char *)(a3 + v11) && *(unsigned char *)(a3 + v12))
    {
      if ((int)v13 >= 1)
      {
        int v14 = (int *)(a2 + 4 * v11 * (int)v13);
        int v15 = (int *)(a2 + 4 * v12 * (int)v13);
        uint64_t v16 = (int *)__p[0];
        uint64_t v17 = v45;
        do
        {
          int v19 = *v14++;
          int v18 = v19;
          int v20 = *v15++;
          BOOL v21 = __OFADD__(v20, v18);
          int v22 = v20 + v18;
          if (v22 < 0 != v21) {
            ++v22;
          }
          *v16++ = v22 >> 1;
          --v17;
        }
        while (v17);
      }
      unsigned int v23 = 1;
LABEL_34:
      sub_2170A7A6C((unsigned int *)a1, v10, (uint64_t)__p[0], v13, v46, (unsigned char *)(a1 + 4372), (void *)v58 + 15 * v23, a2 + 4 * v6 * v13);
      if ((int)v13 >= 1)
      {
        uint64_t v31 = (char *)v56[0] + 4;
        uint64_t v32 = v45;
        int v33 = v8;
        do
        {
          int v35 = *v33++;
          int v34 = v35;
          int v36 = *((_DWORD *)v31 - 1);
          if (*(_DWORD *)&v31[4 * (((_BYTE)v36 - 1) & 3)] != v35)
          {
            *((_DWORD *)v31 - 1) = v36 + 1;
            *(_DWORD *)&v31[4 * (v36 & 3)] = v34;
          }
          v31 += 20;
          --v32;
        }
        while (v32);
      }
      goto LABEL_39;
    }
LABEL_23:
    int v24 = sub_2170AF61C(a1, v6, a2, a3, (uint64_t)__p);
    unsigned int v23 = 0;
    if (!v24 && (int)v13 >= 1)
    {
      uint64_t v25 = 0;
      uint64_t v26 = 4;
      do
      {
        BOOL v27 = sub_2170A4794((unsigned int *)a1, __b);
        BOOL v28 = v27;
        if (v27) {
          uint64_t v29 = 2;
        }
        else {
          uint64_t v29 = 1;
        }
        if (sub_2170A4794((unsigned int *)a1, &__b[v29])) {
          char v30 = 2;
        }
        else {
          char v30 = 0;
        }
        *(_DWORD *)((char *)__p[0] + v25) = *(_DWORD *)((char *)v56[0]
                                                      + 4
                                                      * ((*(_DWORD *)((char *)v56[0] + v26 - 4)
                                                        + ~(v30 | v28)) & 3)
                                                      + v26);
        v26 += 20;
        v25 += 4;
      }
      while (v7 != v25);
      unsigned int v23 = 0;
      unint64_t v13 = v48;
    }
    goto LABEL_34;
  }
LABEL_40:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v56[0])
  {
    v56[1] = v56[0];
    operator delete(v56[0]);
  }
  for (uint64_t i = 0; i != -240; i -= 120)
  {
    uint64_t v38 = (void *)((char *)v58 + i);
    uint64_t v39 = *(void **)((char *)&v58[13] + i + 8);
    if (v39)
    {
      v38[28] = v39;
      operator delete(v39);
    }
    BOOL v40 = (void *)v38[24];
    if (v40)
    {
      *(void *)((char *)&v58[12] + i + 8) = v40;
      operator delete(v40);
    }
    BOOL v41 = (char *)v58 + i;
    uint64_t v42 = *(void **)((char *)&v58[10] + i + 8);
    if (v42)
    {
      *((void *)v41 + 22) = v42;
      operator delete(v42);
    }
    char v43 = (void *)*((void *)v41 + 18);
    if (v43)
    {
      *(void *)((char *)&v58[9] + i + 8) = v43;
      operator delete(v43);
    }
    int v44 = (void *)v38[15];
    if (v44)
    {
      *(void *)((char *)&v58[8] + i) = v44;
      operator delete(v44);
    }
  }
}

void sub_2170B0FF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (__p) {
    operator delete(__p);
  }
  for (uint64_t i = 120; i != -120; i -= 120)
    sub_2170A8E48((uint64_t)(&a27 + i));
  _Unwind_Resume(a1);
}

void *sub_2170B104C(void *a1)
{
  uint64_t v2 = operator new(0x1128uLL);
  sub_2170B1A20((uint64_t)v2);
  *a1 = v2;
  return a1;
}

void sub_2170B1084(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void **sub_2170B109C(void **a1)
{
  return a1;
}

double sub_2170B10C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v9 = 0;
  long long v7 = 0u;
  long long v8 = 0u;
  if (sub_2170A654C(a1, a2, (uint64_t)&v7, (int16x8_t)0))
  {
    if ((v4 & 0x8000000000000000) == 0)
    {
      double result = *(double *)&v7;
      long long v6 = v8;
      *(_OWORD *)a3 = v7;
      *(_OWORD *)(a3 + 16) = v6;
      *(unsigned char *)(a3 + 32) = v9;
    }
  }
  return result;
}

double sub_2170B1128(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  int v10 = 0;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v7 = 0u;
  if (sub_2170A7784(a1, a2, (uint64_t)&v7))
  {
    if ((v4 & 0x8000000000000000) == 0)
    {
      long long v6 = v8;
      *a3 = v7;
      a3[1] = v6;
      double result = *(double *)&v9;
      a3[2] = v9;
    }
  }
  return result;
}

uint64_t sub_2170B118C(_DWORD *a1, uint64_t a2)
{
  v3[1] = *MEMORY[0x263EF8340];
  v3[0] = 0xEEB6CC7FFAA28E71;
  return sub_2170A4320(a1, a2, v3, 2);
}

uint64_t sub_2170B11EC(uint64_t *a1, unint64_t a2, unint64_t a3, void *a4, int32x2_t *a5, _DWORD *a6, void *a7, int *a8)
{
  return sub_2170A6138(*a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_2170B11F4(uint64_t *a1, unint64_t a2, unint64_t a3, void *a4, uint64_t a5)
{
  return sub_2170A7480(*a1, a2, a3, a4, a5, 0);
}

uint64_t sub_2170B1200(uint64_t *a1, unint64_t a2, uint64_t a3, void *a4, uint64_t a5, void *a6)
{
  return sub_2170AC67C(*a1, a2, a3, a4, a5, 0, a6);
}

void sub_2170B1210(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_2170B13D0((char **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 12 * a2;
  }
}

void sub_2170B124C(uint64_t a1, int a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = a1 + 1544;
  unint64_t v4 = a2;
  do
  {
    __p = 0;
    long long v6 = 0;
    uint64_t v7 = 0;
    sub_2170B1540(&__p, *(const void **)v2, *(void *)(v2 + 8), (uint64_t)(*(void *)(v2 + 8) - *(void *)v2) >> 3);
    sub_2168265D4(&__p, v4);
    if (__p)
    {
      long long v6 = __p;
      operator delete(__p);
    }
    v2 += 24;
  }
  while (v2 != v3);
}

void sub_2170B12C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2170B12E4(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 16 * a2;
    }
  }
  else
  {
    sub_2170B15BC((void **)a1, a2 - v2);
  }
}

void sub_2170B1314(unint64_t *a1, size_t __sz)
{
  unint64_t v2 = *a1;
  if (a1[2] - *a1 < __sz)
  {
    if ((__sz & 0x8000000000000000) != 0) {
      sub_21677CB10();
    }
    uint64_t v5 = (char *)a1[1];
    long long v6 = operator new(__sz);
    uint64_t v7 = &v5[(void)v6 - v2];
    long long v8 = v7;
    if (v5 != (char *)v2)
    {
      long long v9 = &v5[~v2];
      do
      {
        char v10 = *--v5;
        (v9--)[(void)v6] = v10;
      }
      while (v5 != (char *)v2);
      long long v8 = v6;
    }
    *a1 = (unint64_t)v8;
    a1[1] = (unint64_t)v7;
    a1[2] = (unint64_t)&v6[__sz];
    if (v2)
    {
      operator delete((void *)v2);
    }
  }
}

void sub_2170B13D0(char **a1, unint64_t a2)
{
  long long v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v6[-v7] >> 2) >= a2)
  {
    if (a2)
    {
      uint64_t v13 = v7 + 12 * a2;
      do
      {
        *(void *)uint64_t v7 = 0xFFFFFFFF00000000;
        *(_DWORD *)(v7 + 8) = -1;
        v7 += 12;
      }
      while (v7 != v13);
      uint64_t v7 = v13;
    }
    a1[1] = (char *)v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)*a1) >> 2);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x1555555555555555) {
      sub_21677CB10();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 2);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v11 = 0x1555555555555555;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      int v12 = (char *)sub_216B0D05C(v4, v11);
    }
    else {
      int v12 = 0;
    }
    int v14 = &v12[12 * v8];
    int v15 = &v14[12 * a2];
    uint64_t v16 = v14;
    do
    {
      *(void *)uint64_t v16 = 0xFFFFFFFF00000000;
      *((_DWORD *)v16 + 2) = -1;
      v16 += 12;
    }
    while (v16 != v15);
    uint64_t v17 = &v12[12 * v11];
    int v19 = *a1;
    int v18 = a1[1];
    if (v18 != *a1)
    {
      do
      {
        uint64_t v20 = *(void *)(v18 - 12);
        v18 -= 12;
        int v21 = *((_DWORD *)v18 + 2);
        *(void *)(v14 - 12) = v20;
        v14 -= 12;
        *((_DWORD *)v14 + 2) = v21;
      }
      while (v18 != v19);
      int v18 = *a1;
    }
    *a1 = v14;
    a1[1] = v15;
    a1[2] = v17;
    if (v18)
    {
      operator delete(v18);
    }
  }
}

void *sub_2170B1540(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    double result = sub_21677CACC(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      double result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2170B15A0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_2170B15BC(void **a1, unint64_t a2)
{
  long long v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      sub_21677CB10();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      uint64_t v13 = (char *)sub_216787EE0(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    int v14 = &v13[16 * v10];
    int v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    uint64_t v16 = &v14[16 * a2];
    int v18 = (char *)*a1;
    uint64_t v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v17 - 1);
        v14 -= 16;
        v17 -= 16;
      }
      while (v17 != v18);
      uint64_t v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

uint64_t sub_2170B16DC(uint64_t a1, int a2)
{
  if (!sub_2170A4794((unsigned int *)a1, (_WORD *)(a1 + 3496))) {
    return sub_2170A4DD4((unsigned int *)a1, 0, (_WORD *)(a1 + 3530), (_WORD *)(a1 + 3532)) + a2;
  }
  uint64_t v4 = a1 + 3536;
  BOOL v5 = sub_2170A4794((unsigned int *)a1, (_WORD *)(a1 + 3536));
  if (v5) {
    uint64_t v6 = 4;
  }
  else {
    uint64_t v6 = 2;
  }
  if (sub_2170A4794((unsigned int *)a1, (_WORD *)(v4 + v6))) {
    int v7 = 2;
  }
  else {
    int v7 = 0;
  }
  int v8 = v7 | v5;
  if (sub_2170A4794((unsigned int *)a1, (_WORD *)(v4 + 2 * (v8 + 3)))) {
    int v9 = 4;
  }
  else {
    int v9 = 0;
  }
  int v10 = v8 | v9;
  if (sub_2170A4794((unsigned int *)a1, (_WORD *)(v4 + 2 * (v10 + 7)))) {
    int v11 = 8;
  }
  else {
    int v11 = 0;
  }
  int v12 = v10 | v11;
  if (sub_2170A4794((unsigned int *)a1, (_WORD *)(v4 + 2 * (v12 + 15)))) {
    int v13 = 16;
  }
  else {
    int v13 = 0;
  }
  int v14 = v12 | v13;
  if (sub_2170A4794((unsigned int *)a1, (_WORD *)(v4 + 2 * ((v12 | v13) + 31)))) {
    int v15 = 32;
  }
  else {
    int v15 = 0;
  }
  BOOL v16 = sub_2170A4794((unsigned int *)a1, (_WORD *)(a1 + 3664));
  if (v16) {
    uint64_t v17 = 4;
  }
  else {
    uint64_t v17 = 2;
  }
  if (sub_2170A4794((unsigned int *)a1, (_WORD *)(a1 + 3664 + v17))) {
    int v18 = 2;
  }
  else {
    int v18 = 0;
  }
  int v19 = v18 | v16;
  if (v19 != 3) {
    goto LABEL_29;
  }
  int v20 = sub_2170A4884((unsigned int *)a1, 0, (_WORD *)(a1 + 3670));
  if (v20 >= -3)
  {
    int v19 = v20 + 3;
LABEL_29:
    uint64_t v21 = a1 + 24 * (v14 | v15);
    uint64_t v22 = *(void *)(v21 + 1512);
    uint64_t v23 = *(void *)(v21 + 1504);
    if (v19 < (int)((unint64_t)(v22 - v23) >> 3))
    {
      uint64_t v24 = *(void *)(v23 + 8 * v19);
      if (v24) {
        return -1431655765 * ((unint64_t)(v24 - *(void *)(a1 + 1472)) >> 2);
      }
    }
  }
  *(_DWORD *)(a1 + 4384) = 3;
  return 0xFFFFFFFFLL;
}

void *sub_2170B18A0(void *result, int a2, unsigned int a3, int a4)
{
  uint64_t v4 = (a4 - 2);
  if (a3 > 2)
  {
    if (a3 == 3 || a3 == 5)
    {
      if (a4 >= 2)
      {
        int v12 = (int *)(result[181] + 16 * a2);
        int v13 = v12[3];
        int v14 = *v12;
        do
        {
          int v15 = v14;
          int v14 = *(_DWORD *)(result[166] + 4 * v4);
          if (*(unsigned char *)(result[169] + v4))
          {
            BOOL v16 = (_DWORD *)(result[157] + 12 * v14);
            *BOOL v16 = a2;
            v16[1] = v15;
            v16[2] = v13;
          }
          int v13 = v15;
        }
        while (v4-- > 0);
      }
    }
    else if (a4 >= 1)
    {
      uint64_t v18 = 0;
      int v19 = -1;
      int v20 = -1;
      do
      {
        int v21 = v19;
        int v19 = *(_DWORD *)(result[166] + 4 * v18);
        if (*(unsigned char *)(result[169] + v18))
        {
          uint64_t v22 = (_DWORD *)(result[157] + 12 * v19);
          *uint64_t v22 = a2;
          v22[1] = v21;
          v22[2] = v20;
        }
        ++v18;
        int v20 = v21;
      }
      while (a4 != v18);
    }
  }
  else
  {
    uint64_t v5 = result[181];
    if (a4 >= 2)
    {
      int v6 = *(_DWORD *)(v5 + 16 * a2 + 4);
      int v7 = *(_DWORD *)(v5 + 16 * a2 + 8);
      for (uint64_t i = 1; i != a4; ++i)
      {
        int v9 = *(_DWORD *)(result[166] + 4 * i);
        if (*(unsigned char *)(result[169] + i))
        {
          int v10 = (_DWORD *)(result[157] + 12 * v9);
          *int v10 = a2;
          v10[1] = v6;
          v10[2] = v7;
        }
        int v7 = v6;
        int v6 = v9;
      }
    }
    if (!a3)
    {
      if (*(unsigned char *)(result[169] + (int)v4))
      {
        int v11 = (_DWORD *)(result[160] + 12 * *(int *)(result[166] + 4 * (int)v4));
        _DWORD *v11 = a2;
        v11[1] = *(_DWORD *)(v5 + 16 * a2);
        v11[2] = *(_DWORD *)(v5 + 16 * a2 + 12);
      }
    }
  }
  return result;
}

uint64_t sub_2170B1A20(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 1140) = 0;
  *(_OWORD *)(a1 + 1072) = 0u;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_OWORD *)(a1 + 1104) = 0u;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(unsigned char *)(a1 + 1136) = 0;
  *(unsigned char *)(a1 + 1144) = 4;
  *(void *)(a1 + 1148) = 0x101010100000002;
  *(unsigned char *)(a1 + 1156) = 1;
  *(_DWORD *)(a1 + 1496) = 0;
  *(_OWORD *)(a1 + 1176) = 0u;
  *(_OWORD *)(a1 + 1192) = 0u;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_OWORD *)(a1 + 1224) = 0u;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(_OWORD *)(a1 + 1256) = 0u;
  *(_OWORD *)(a1 + 1272) = 0u;
  *(_OWORD *)(a1 + 1288) = 0u;
  *(_OWORD *)(a1 + 1304) = 0u;
  *(_OWORD *)(a1 + 1320) = 0u;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(_OWORD *)(a1 + 1336) = 0u;
  *(_OWORD *)(a1 + 1352) = 0u;
  *(_OWORD *)(a1 + 1368) = 0u;
  *(_OWORD *)(a1 + 1384) = 0u;
  *(_OWORD *)(a1 + 1400) = 0u;
  *(_OWORD *)(a1 + 1416) = 0u;
  *(_OWORD *)(a1 + 1432) = 0u;
  *(_OWORD *)(a1 + 1448) = 0u;
  *(_OWORD *)(a1 + 1464) = 0u;
  *(_OWORD *)(a1 + 1480) = 0u;
  *(_DWORD *)(a1 + 1500) = -1;
  bzero((void *)(a1 + 1504), 0x700uLL);
  memset_pattern16((void *)(a1 + 3296), &unk_2174AFAB0, 0xAuLL);
  *(_WORD *)(a1 + 3306) = 0x8000;
  memset_pattern16((void *)(a1 + 3308), &unk_2174AFAB0, 0x60uLL);
  *(_WORD *)(a1 + 3404) = 0x8000;
  memset_pattern16((void *)(a1 + 3406), &unk_2174AFAB0, 6uLL);
  *(_WORD *)(a1 + 3412) = 0x8000;
  memset_pattern16((void *)(a1 + 3414), &unk_2174AFAB0, 0x50uLL);
  *(_DWORD *)(a1 + 3494) = -2147450880;
  memset_pattern16((void *)(a1 + 3498), &unk_2174AFAB0, 0x20uLL);
  *(_DWORD *)(a1 + 3530) = -2147450880;
  *(_WORD *)(a1 + 3534) = 0x8000;
  memset_pattern16((void *)(a1 + 3536), &unk_2174AFAB0, 0x80uLL);
  memset_pattern16((void *)(a1 + 3664), &unk_2174AFAB0, 6uLL);
  *(_WORD *)(a1 + 3670) = 0x8000;
  memset_pattern16((void *)(a1 + 3672), &unk_2174AFAB0, 6uLL);
  *(_OWORD *)(a1 + 4028) = 0u;
  *(_OWORD *)(a1 + 4016) = 0u;
  *(_OWORD *)(a1 + 4000) = 0u;
  *(_OWORD *)(a1 + 3984) = 0u;
  *(_OWORD *)(a1 + 3968) = 0u;
  *(_OWORD *)(a1 + 3952) = 0u;
  *(_OWORD *)(a1 + 3936) = 0u;
  *(_OWORD *)(a1 + 3920) = 0u;
  *(_OWORD *)(a1 + 3904) = 0u;
  *(_OWORD *)(a1 + 3888) = 0u;
  *(_OWORD *)(a1 + 3872) = 0u;
  *(_OWORD *)(a1 + 3856) = 0u;
  *(_OWORD *)(a1 + 3840) = 0u;
  *(_OWORD *)(a1 + 3824) = 0u;
  *(_OWORD *)(a1 + 3808) = 0u;
  *(_OWORD *)(a1 + 3792) = 0u;
  *(_OWORD *)(a1 + 3776) = 0u;
  *(_OWORD *)(a1 + 3760) = 0u;
  *(_OWORD *)(a1 + 3744) = 0u;
  *(_OWORD *)(a1 + 3728) = 0u;
  *(_OWORD *)(a1 + 3712) = 0u;
  *(_OWORD *)(a1 + 3696) = 0u;
  *(_OWORD *)(a1 + 3680) = 0u;
  *(unsigned char *)(a1 + 4044) = 4;
  *(_DWORD *)(a1 + 4048) = 2;
  *(_OWORD *)(a1 + 4356) = 0u;
  *(_OWORD *)(a1 + 4056) = 0u;
  *(_OWORD *)(a1 + 4072) = 0u;
  *(_OWORD *)(a1 + 4088) = 0u;
  *(_OWORD *)(a1 + 4104) = 0u;
  *(_OWORD *)(a1 + 4120) = 0u;
  *(_OWORD *)(a1 + 4136) = 0u;
  *(_OWORD *)(a1 + 4152) = 0u;
  *(_OWORD *)(a1 + 4168) = 0u;
  *(_OWORD *)(a1 + 4184) = 0u;
  *(_OWORD *)(a1 + 4200) = 0u;
  *(_OWORD *)(a1 + 4216) = 0u;
  *(_OWORD *)(a1 + 4232) = 0u;
  *(_OWORD *)(a1 + 4248) = 0u;
  *(_OWORD *)(a1 + 4264) = 0u;
  *(_OWORD *)(a1 + 4280) = 0u;
  *(_OWORD *)(a1 + 4296) = 0u;
  *(_OWORD *)(a1 + 4312) = 0u;
  *(_OWORD *)(a1 + 4328) = 0u;
  *(_OWORD *)(a1 + 4344) = 0u;
  *(unsigned char *)(a1 + 4372) = 4;
  *(_DWORD *)(a1 + 4376) = 2;
  *(_DWORD *)(a1 + 4384) = 6;
  return a1;
}

uint64_t sub_2170B1C58(_DWORD *a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 8);
  if ((v2 & 0x80000000) != 0) {
    return 0;
  }
  int v3 = *(_DWORD *)(a2 + 4);
  uint64_t v4 = *(void *)&a1[6 * v3 + 2];
  int v5 = ((unint64_t)(*(void *)&a1[6 * v3 + 4] - v4) >> 3) - 1;
  if (v2 != v5)
  {
    uint64_t v6 = *(void *)(v4 + 8 * v2);
    *(void *)(v4 + 8 * v2) = *(void *)(v4 + 8 * v5);
    *(void *)(v4 + 8 * v5) = v6;
    *(_DWORD *)(*(void *)(v4 + 8 * v2) + 8) = v2;
    *(_DWORD *)(v6 + 8) = v5;
  }
  return sub_2170B1CAC(a1, v3);
}

uint64_t sub_2170B1CAC(_DWORD *a1, int a2)
{
  uint64_t v2 = &a1[6 * a2];
  uint64_t v3 = *((void *)v2 + 2);
  uint64_t v4 = *(void *)(v3 - 8);
  *((void *)v2 + 2) = v3 - 8;
  *(_DWORD *)(v4 + 8) = -1;
  if ((*a1)-- == 1)
  {
    a1[1] = -1;
  }
  else
  {
    int v6 = a1[1];
    if ((v6 & 0x80000000) == 0)
    {
      do
      {
        if (*(void *)&a1[6 * v6 + 2] != *(void *)&a1[6 * v6 + 4]) {
          break;
        }
        a1[1] = v6 - 1;
      }
      while (v6-- > 0);
    }
  }
  return v4;
}

void *sub_2170B1D18(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_216AF1F64(a1, a2);
    uint64_t v4 = a1[1];
    uint64_t v5 = v4 + 20 * a2;
    uint64_t v6 = 20 * a2;
    int v7 = (void *)(v4 + 4);
    do
    {
      *int v7 = 0;
      v7[1] = 0;
      *((_DWORD *)v7 - 1) = 4;
      int v7 = (void *)((char *)v7 + 20);
      v6 -= 20;
    }
    while (v6);
    a1[1] = v5;
  }
  return a1;
}

void sub_2170B1D84(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_2170B1DA0(void **a1, void *a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = sub_2170B1DE0(v3);
    operator delete(v4);
  }
}

void *sub_2170B1DE0(void *a1)
{
  sub_2170A5440((uint64_t)(a1 + 531));
  sub_2170A5440((uint64_t)(a1 + 522));
  uint64_t v2 = (void *)a1[519];
  if (v2)
  {
    a1[520] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[516];
  if (v3)
  {
    a1[517] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[513];
  if (v4)
  {
    a1[514] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[510];
  if (v5)
  {
    a1[511] = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)a1[507];
  if (v6)
  {
    a1[508] = v6;
    operator delete(v6);
  }
  int v7 = (void *)a1[496];
  if (v7)
  {
    a1[497] = v7;
    operator delete(v7);
  }
  int v8 = (void *)a1[493];
  if (v8)
  {
    a1[494] = v8;
    operator delete(v8);
  }
  int v9 = (void *)a1[490];
  if (v9)
  {
    a1[491] = v9;
    operator delete(v9);
  }
  sub_2170B1F04((uint64_t)(a1 + 163));
  int v10 = (void *)a1[160];
  if (v10)
  {
    a1[161] = v10;
    operator delete(v10);
  }
  int v11 = (void *)a1[157];
  if (v11)
  {
    a1[158] = v11;
    operator delete(v11);
  }
  int v12 = (void *)a1[154];
  if (v12)
  {
    a1[155] = v12;
    operator delete(v12);
  }
  int v13 = (void *)a1[151];
  if (v13)
  {
    a1[152] = v13;
    operator delete(v13);
  }
  int v14 = (void *)a1[148];
  if (v14)
  {
    a1[149] = v14;
    operator delete(v14);
  }
  int v15 = (void *)a1[145];
  if (v15)
  {
    a1[146] = v15;
    operator delete(v15);
  }
  return a1;
}

uint64_t sub_2170B1F04(uint64_t a1)
{
  for (uint64_t i = 2600; i != 2360; i -= 120)
  {
    uint64_t v3 = a1 + i;
    uint64_t v4 = *(void **)(a1 + i - 8);
    if (v4)
    {
      *(void *)(a1 + i) = v4;
      operator delete(v4);
    }
    uint64_t v5 = *(void **)(v3 - 32);
    if (v5)
    {
      *(void *)(a1 + i - 24) = v5;
      operator delete(v5);
    }
    uint64_t v6 = a1 + i;
    int v7 = *(void **)(a1 + i - 56);
    if (v7)
    {
      *(void *)(v6 - 48) = v7;
      operator delete(v7);
    }
    int v8 = *(void **)(v6 - 80);
    if (v8)
    {
      *(void *)(a1 + i - 72) = v8;
      operator delete(v8);
    }
    int v9 = *(void **)(v3 - 104);
    if (v9)
    {
      *(void *)(a1 + i - 96) = v9;
      operator delete(v9);
    }
  }
  uint64_t v10 = 1536;
  do
  {
    int v11 = *(void **)(a1 + v10 + 176);
    if (v11)
    {
      *(void *)(a1 + v10 + 184) = v11;
      operator delete(v11);
    }
    v10 -= 24;
  }
  while (v10);
  int v12 = *(void **)(a1 + 168);
  if (v12)
  {
    *(void *)(a1 + 176) = v12;
    operator delete(v12);
  }
  int v13 = *(void **)(a1 + 144);
  if (v13)
  {
    *(void *)(a1 + 152) = v13;
    operator delete(v13);
  }
  int v14 = *(void **)(a1 + 120);
  if (v14)
  {
    *(void *)(a1 + 128) = v14;
    operator delete(v14);
  }
  int v15 = *(void **)(a1 + 96);
  if (v15)
  {
    *(void *)(a1 + 104) = v15;
    operator delete(v15);
  }
  BOOL v16 = *(void **)(a1 + 72);
  if (v16)
  {
    *(void *)(a1 + 80) = v16;
    operator delete(v16);
  }
  uint64_t v17 = *(void **)(a1 + 48);
  if (v17)
  {
    *(void *)(a1 + 56) = v17;
    operator delete(v17);
  }
  uint64_t v18 = *(void **)(a1 + 24);
  if (v18)
  {
    *(void *)(a1 + 32) = v18;
    operator delete(v18);
  }
  int v19 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v19;
    operator delete(v19);
  }
  return a1;
}

uint64_t sub_2170B2044(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, const void *a5, unint64_t a6, int *a7, uint64_t a8, int *a9, unint64_t *a10, uint64_t *a11)
{
  uint64_t v18 = a9;
  uint64_t v19 = 4 * a4;
  if (!*(unsigned char *)(a8 + 16)) {
    uint64_t v19 = 0;
  }
  unint64_t v20 = 12 * a2 + 4 * a4 + 4 * a6 + v19 + 1024;
  uint64_t v21 = *a10;
  unint64_t v22 = a10[1] - *a10;
  if (v20 <= v22)
  {
    if (v20 < v22) {
      a10[1] = v21 + v20;
    }
  }
  else
  {
    uint64_t v24 = a8;
    sub_217077494(a10, v20 - v22);
    uint64_t v18 = a9;
    a8 = v24;
    uint64_t v21 = *a10;
  }
  *a11 = 0;
  return sub_2170B2190(v18, a1, a2, a3, a4, a5, a6, a7, v21, v20, a11, 0, 0, 0, a8);
}

uint64_t sub_2170B213C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = 4 * a4;
  if (!*(unsigned char *)(a8 + 16)) {
    uint64_t v8 = 0;
  }
  return 12 * a2 + 4 * a4 + 4 * a6 + v8 + 1024;
}

void sub_2170B2168(unint64_t *a1, unint64_t a2)
{
  unint64_t v2 = a1[1] - *a1;
  BOOL v3 = a2 >= v2;
  size_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_217077494(a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + a2;
  }
}

uint64_t sub_2170B2190(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, unint64_t a5, const void *a6, unint64_t a7, int *a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  v67[0] = 0;
  sub_216778A5C((uint64_t)v62);
  uint64_t v45 = a2;
  uint64_t v22 = sub_2170B327C(a2, a3, a4, a5, (uint64_t)a6, a7, (uint64_t)a8, a9, a10, v67, (uint64_t)&v66, v65, (uint64_t)v62, a15);
  if (!v22)
  {
    uint64_t v60 = (unsigned char *)a9;
    uint64_t v61 = a10;
    uint64_t v47 = 0;
    int v55 = 0;
    int v48 = 0;
    int v49 = a3;
    int v50 = a5;
    int v51 = a7;
    int v24 = v67[0];
    int v52 = *(_DWORD *)(a15 + 4);
    int v53 = v67[0];
    char v54 = *(unsigned char *)(a15 + 16);
    char v56 = *(unsigned char *)(a15 + 8);
    int v57 = *(_DWORD *)(a15 + 12);
    int v58 = *(_DWORD *)(a15 + 17);
    char v59 = *(unsigned char *)(a15 + 21);
    uint64_t v25 = (_DWORD *)sub_2170B3BD0(a9, a10, (uint64_t)&v47, v23);
    if (v26 > 3)
    {
      *uint64_t v25 = v65[0];
      uint64_t v29 = (int *)a4;
      uint64_t v30 = (uint64_t)v45;
      if ((v26 & 0xFFFFFFFFFFFFFFFCLL) == 4 || (v25[1] = v65[1], (v26 & 0xFFFFFFFFFFFFFFFCLL) == 8))
      {
        uint64_t v27 = 0;
        BOOL v28 = 0;
      }
      else
      {
        uint64_t v27 = v26 - 12;
        BOOL v28 = v25 + 3;
        v25[2] = v65[2];
      }
    }
    else
    {
      uint64_t v27 = 0;
      BOOL v28 = 0;
      uint64_t v60 = 0;
      uint64_t v61 = 0;
      uint64_t v29 = (int *)a4;
      uint64_t v30 = (uint64_t)v45;
    }
    if (*(unsigned char *)(a15 + 21))
    {
      unint64_t v31 = 0;
      int v32 = 1;
      do
      {
        unsigned int v33 = v67[v31 - 1];
        unsigned int v34 = 32 - __clz(v33);
        if (v33) {
          unsigned int v35 = v34;
        }
        else {
          unsigned int v35 = 0;
        }
        v67[v31 - 1] = v35;
        if (v27-- < 1)
        {
          uint64_t v27 = 0;
          BOOL v28 = 0;
        }
        else
        {
          *v28++ = v35;
          int v32 = *(unsigned __int8 *)(a15 + 21);
        }
        if (v31 > 1) {
          break;
        }
        ++v31;
      }
      while (v32);
    }
    uint64_t v60 = v28;
    uint64_t v61 = v27;
    sub_2170B3CEC((uint64_t)a1, v30, a3, v29, a5, a6, a7, v24, &v66, (uint64_t)v65);
    sub_2170B3F38((uint64_t)(a1 + 70), a1, a15);
    uint64_t v22 = sub_2170B4150((uint64_t)a1, a15, (uint64_t)&v60);
    if (!v22)
    {
      if (!*(unsigned char *)(a15 + 16)
        || (uint64_t v22 = sub_2170B420C((uint64_t)a1, (uint64_t)a8, a15, (uint64_t)&v60), !v22)
        && (uint64_t v22 = sub_2170B46C4((uint64_t)a1, a8), !v22))
      {
        uint64_t v22 = 1;
        if (v60)
        {
          if ((v61 & 0x8000000000000000) == 0)
          {
            uint64_t v39 = (a10 & ~(a10 >> 63)) - v61;
            if (a10 - v39 >= 0) {
              uint64_t v40 = (a10 & ~(a10 >> 63)) - v61;
            }
            else {
              uint64_t v40 = 0;
            }
            if (a10 - v39 >= 0) {
              uint64_t v41 = a9;
            }
            else {
              uint64_t v41 = 0;
            }
            uint64_t v42 = v40 & ~(v40 >> 63);
            *a11 = v42;
            if (v40 >= 16) {
              *(_DWORD *)(v41 + 12) = v42;
            }
            uint64_t v43 = 8;
            if (v40 > 8) {
              uint64_t v43 = v40;
            }
            int v44 = sub_2170A42E8(v41 + 8, v43 - 8);
            if (v40 >= 8) {
              *(_DWORD *)(v41 + 4) = v44;
            }
            sub_2170B3ABC((unsigned int *)a1, a12, a13, a14);
            uint64_t v22 = 0;
          }
        }
      }
    }
  }
  v62[0] = *MEMORY[0x263F8C2B8];
  uint64_t v37 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v62 + *(void *)(v62[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v62[2] = v37;
  v62[3] = MEMORY[0x263F8C318] + 16;
  if (v63 < 0) {
    operator delete((void *)v62[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x21D447E60](&v64);
  return v22;
}

void sub_2170B25B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

uint64_t sub_2170B25D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  MEMORY[0x270FA5388](a1, a2, a3);
  uint64_t v10 = v9;
  unint64_t v12 = v11;
  int v14 = v13;
  unint64_t v16 = v15;
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  sub_2170C384C((uint64_t)v36);
  __p = 0;
  unsigned int v34 = 0;
  uint64_t v35 = 0;
  unint64_t v32 = 0;
  uint64_t v23 = sub_2170B2044(v22, v20, v18, v16, v14, v12, v10, a9, v36, (unint64_t *)&__p, (uint64_t *)&v32);
  if (!v23)
  {
    uint64_t v31 = *(void *)(a9 + 16);
    long long v30 = *(_OWORD *)a9;
    long long v28 = *(_OWORD *)a9;
    uint64_t v29 = *(void *)(a9 + 16);
    BYTE1(v31) = 0;
    BYTE3(v31) = 0;
    unint64_t v27 = 0;
    uint64_t v23 = sub_2170B2044(v22, v20, v18, v16, v14, v12, v10, (uint64_t)&v30, v36, (unint64_t *)&__p, (uint64_t *)&v27);
    if (!v23)
    {
      BYTE1(v29) = 1;
      BYTE3(v29) = 0;
      unint64_t v26 = 0;
      uint64_t v23 = sub_2170B2044(v22, v20, v18, v16, v14, v12, v10, (uint64_t)&v28, v36, (unint64_t *)&__p, (uint64_t *)&v26);
      if (!v23 && (v32 > v27 || v32 > v26))
      {
        int v24 = &v30;
        if (v27 > v26) {
          int v24 = &v28;
        }
        *(_OWORD *)a9 = *v24;
        *(void *)(a9 + 14) = *(void *)((char *)v24 + 14);
      }
    }
  }
  if (__p)
  {
    unsigned int v34 = __p;
    operator delete(__p);
  }
  sub_2170C3D74((uint64_t)v36);
  return v23;
}

void sub_2170B27B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,char a27)
{
  if (__p) {
    operator delete(__p);
  }
  sub_2170C3D74((uint64_t)&a27);
  _Unwind_Resume(a1);
}

uint64_t sub_2170B27E0(uint64_t a1, unsigned char *a2, unsigned int a3, uint64_t a4, unint64_t a5, uint64_t a6, unsigned int *a7, unint64_t *a8, uint64_t *a9)
{
  if (*(_DWORD *)(a6 + 16)) {
    uint64_t v16 = a4;
  }
  else {
    uint64_t v16 = 0;
  }
  unint64_t v17 = v16 + 4 * a4 * a5 + 1024;
  uint64_t v18 = *a8;
  unint64_t v19 = a8[1] - *a8;
  if (v17 <= v19)
  {
    if (v17 < v19) {
      a8[1] = v18 + v17;
    }
  }
  else
  {
    sub_217077494(a8, v17 - v19);
    uint64_t v18 = *a8;
  }
  *a9 = 0;
  return sub_2170B28CC(a7, a1, a2, a3, 0, a5, v18, v17, a9, a6);
}

uint64_t sub_2170B28B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (*(_DWORD *)(a6 + 16)) {
    uint64_t v6 = a4;
  }
  else {
    uint64_t v6 = 0;
  }
  return v6 + 4 * a4 * a5 + 1024;
}

uint64_t sub_2170B28CC(unsigned int *a1, uint64_t a2, unsigned char *a3, unsigned int a4, unint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t a10)
{
  uint64_t result = 5;
  if (a5 <= 0xFF)
  {
    if (a2)
    {
      if (a6 - 256 >= 0xFFFFFFFFFFFFFF01 && (*(unsigned __int8 *)(a10 + 8) | 2) != 3 && !*(_DWORD *)(a10 + 20))
      {
        uint64_t v15 = a7;
        unsigned int v16 = a5;
        if (a3 || !*(_DWORD *)(a10 + 16))
        {
          unsigned int v19 = *(_DWORD *)(a10 + 4);
          if (v19 <= 0x1B)
          {
            if ((*(_DWORD *)(a10 + 12) - 5) > 1)
            {
              if (!a7) {
                return result;
              }
            }
            else if (!a7 || a6 != 2 || !v19)
            {
              return result;
            }
            if ((unint64_t)a8 >= 0x21)
            {
              unsigned int v68 = *(_DWORD *)(a10 + 12) - 5;
              uint64_t v20 = *a1;
              unint64_t v67 = (int)v20;
              uint64_t v21 = a1 + 750;
              a1[780] = a6;
              a1[781] = v20;
              a1[782] = a4;
              int v71 = (int **)(a1 + 762);
              uint64_t v69 = v20;
              int v70 = (int **)(a1 + 756);
              sub_21681C000((uint64_t)(a1 + 756), a6);
              sub_21681C000((uint64_t)(a1 + 762), a6);
              sub_21681C000((uint64_t)(a1 + 750), a6);
              uint64_t v22 = 0;
              uint64_t v23 = *((void *)a1 + 378);
              uint64_t v24 = *((void *)a1 + 381);
              do
              {
                int v25 = *(_DWORD *)(a2 + 4 * v22);
                *(_DWORD *)(v23 + 4 * v22) = v25;
                *(_DWORD *)(v24 + 4 * v22++) = v25;
              }
              while (a6 != v22);
              if ((int)v69 >= 2)
              {
                unint64_t v26 = *v70;
                unint64_t v27 = *v71;
                int v28 = 1;
                LODWORD(v29) = a6;
                do
                {
                  uint64_t v29 = (int)v29;
                  long long v30 = v27;
                  uint64_t v31 = v26;
                  unint64_t v32 = a6;
                  do
                  {
                    int v33 = *(_DWORD *)(a2 + 4 * v29);
                    if (v33 >= *v31) {
                      int v33 = *v31;
                    }
                    *v31++ = v33;
                    int v34 = *v30;
                    if (*v30 <= *(_DWORD *)(a2 + 4 * v29)) {
                      int v34 = *(_DWORD *)(a2 + 4 * v29);
                    }
                    *v30++ = v34;
                    ++v29;
                    --v32;
                  }
                  while (v32);
                  ++v28;
                }
                while (v28 != v69);
              }
              uint64_t v35 = 0;
              int v36 = *v71;
              uint64_t v37 = *v70;
              uint64_t result = 5;
              do
              {
                uint64_t v38 = v36[v35];
                uint64_t v39 = v37[v35];
                if (v38 - v39 > 0xFFFFFFF) {
                  return 5;
                }
                int v40 = *(_DWORD *)(a10 + 4);
                if (v40 && ((v39 & 0x80000000) != 0 || (int)v38 >= 1 << v40)) {
                  return result;
                }
                if (v68 > 1)
                {
                  *(_DWORD *)(*v21 + 4 * v35) = v38 - v39;
                }
                else
                {
                  *(_DWORD *)(*v21 + 4 * v35) = v38;
                  v37[v35] = 0;
                }
                ++v35;
              }
              while (a6 != v35);
              int v78 = (_DWORD *)v15;
              uint64_t v79 = a8;
              long long v72 = 0u;
              long long v73 = 0u;
              long long v74 = 0u;
              int v75 = 0;
              HIDWORD(v72) = v69;
              LODWORD(v73) = a6;
              *((void *)&v73 + 1) = __PAIR64__(*(_DWORD *)(a10 + 4), v16);
              int v42 = *(_DWORD *)(a10 + 12);
              int v41 = *(_DWORD *)(a10 + 16);
              LODWORD(v74) = a4;
              DWORD2(v74) = v41;
              char v76 = *(unsigned char *)(a10 + 8);
              int v77 = v42;
              uint64_t v43 = (_DWORD *)sub_2170B4820(v15, a8, (uint64_t)&v72);
              uint64_t v45 = 0;
              do
              {
                BOOL v46 = v44 < 4;
                v44 -= 4;
                if (v46)
                {
                  uint64_t v44 = 0;
                  uint64_t v43 = 0;
                }
                else
                {
                  *v43++ = (*v70)[v45];
                }
                unsigned int v47 = *(_DWORD *)(*v21 + 4 * v45);
                unsigned int v48 = 32 - __clz(v47);
                if (v47) {
                  unsigned int v49 = v48;
                }
                else {
                  unsigned int v49 = 0;
                }
                *(_DWORD *)(*v21 + 4 * v45++) = v49;
              }
              while (a6 != v45);
              uint64_t v50 = 0;
              do
              {
                BOOL v46 = v44-- < 1;
                if (v46)
                {
                  uint64_t v44 = 0;
                  uint64_t v43 = 0;
                }
                else
                {
                  *(unsigned char *)uint64_t v43 = *(_DWORD *)(*v21 + 4 * v50);
                  uint64_t v43 = (_DWORD *)((char *)v43 + 1);
                }
                ++v50;
              }
              while (a6 != v50);
              int v78 = v43;
              uint64_t v79 = v44;
              sub_21681C000((uint64_t)(a1 + 768), v67 * a6);
              if ((int)v69 >= 1)
              {
                int v51 = 0;
                LODWORD(v52) = 0;
                int v53 = *v70;
                uint64_t v54 = *((void *)a1 + 384);
                do
                {
                  uint64_t v52 = (int)v52;
                  int v55 = v53;
                  unint64_t v56 = a6;
                  do
                  {
                    int v57 = *v55++;
                    *(_DWORD *)(v54 + 4 * v52) = *(_DWORD *)(a2 + 4 * v52) - v57;
                    ++v52;
                    --v56;
                  }
                  while (v56);
                  ++v51;
                }
                while (v51 != v69);
              }
              int v58 = (void **)(a1 + 774);
              if (a3 && *(_DWORD *)(a10 + 16))
              {
                sub_2170B2168((unint64_t *)a1 + 387, v67);
                if ((int)v69 >= 1)
                {
                  for (uint64_t i = 0; i != v69; ++i)
                    *((unsigned char *)*v58 + i) = a3[i];
                }
                if (v69) {
                  memmove(*v58, a3, v67);
                }
              }
              else
              {
                sub_2170B2168((unint64_t *)a1 + 387, 0);
              }
              uint64_t result = sub_2170B4938((uint64_t)a1, a10, (uint64_t)&v78);
              if (!result)
              {
                uint64_t result = 1;
                if (v78)
                {
                  if ((v79 & 0x8000000000000000) == 0)
                  {
                    uint64_t v60 = (a8 & ~(a8 >> 63)) - v79;
                    BOOL v61 = a8 - v60 < 0;
                    if (a8 - v60 >= 0) {
                      uint64_t v62 = (a8 & ~(a8 >> 63)) - v79;
                    }
                    else {
                      uint64_t v62 = 0;
                    }
                    if (v61) {
                      uint64_t v15 = 0;
                    }
                    uint64_t v63 = v62 & ~(v62 >> 63);
                    *a9 = v63;
                    if (v62 >= 16) {
                      *(_DWORD *)(v15 + 12) = v63;
                    }
                    uint64_t v64 = 8;
                    if (v62 > 8) {
                      uint64_t v64 = v62;
                    }
                    int v65 = sub_2170A42E8(v15 + 8, v64 - 8);
                    if (v62 >= 8)
                    {
                      int v66 = v65;
                      uint64_t result = 0;
                      *(_DWORD *)(v15 + 4) = v66;
                    }
                    else
                    {
                      return 0;
                    }
                  }
                }
              }
            }
            else
            {
              return 1;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_2170B2D4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = MEMORY[0x270FA5388](a1, a2, a3);
  uint64_t v5 = v4;
  unint64_t v7 = v6;
  uint64_t v9 = v8;
  unsigned int v11 = v10;
  int v13 = v12;
  uint64_t v15 = v14;
  unsigned int v16 = (uint64_t *)v3;
  sub_2170C384C((uint64_t)v33);
  sub_2170B2F90((uint64_t)v33, v16);
  __p = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  unint64_t v29 = 0;
  uint64_t v17 = sub_2170B27E0(v15, v13, v11, v9, v7, v5, v33, (unint64_t *)&__p, (uint64_t *)&v29);
  if (!v17)
  {
    *(_OWORD *)int v28 = *(_OWORD *)v5;
    *(_OWORD *)&v28[12] = *(_OWORD *)(v5 + 12);
    if (v11 == 1 && v7 == 2)
    {
      BOOL v18 = *(_DWORD *)(v5 + 12) == 4;
      int v19 = 3;
    }
    else
    {
      int v20 = *(_DWORD *)(v5 + 12);
      if (v11 == 2 && v7 == 2)
      {
        BOOL v18 = v20 == 6;
        int v19 = 5;
      }
      else
      {
        BOOL v18 = v20 == 2;
        int v19 = 1;
      }
    }
    if (!v18) {
      ++v19;
    }
    *(_DWORD *)&v28[12] = v19;
    unint64_t v27 = 0;
    uint64_t v17 = sub_2170B27E0(v15, v13, v11, v9, v7, (uint64_t)v28, v33, (unint64_t *)&__p, (uint64_t *)&v27);
    if (!v17)
    {
      unint64_t v21 = v29;
      unint64_t v22 = v27;
      if (v29 <= v27)
      {
        int v23 = *(_DWORD *)(v5 + 12);
      }
      else
      {
        int v23 = *(_DWORD *)&v28[12];
        *(_DWORD *)(v5 + 12) = *(_DWORD *)&v28[12];
        unint64_t v21 = v22;
      }
      char v24 = v28[8] == 4 ? 2 : 4;
      v28[8] = v24;
      *(_DWORD *)&v28[12] = v23;
      unint64_t v26 = 0;
      uint64_t v17 = sub_2170B27E0(v15, v13, v11, v9, v7, (uint64_t)v28, v33, (unint64_t *)&__p, (uint64_t *)&v26);
      if (!v17 && v21 > v26) {
        *(unsigned char *)(v5 + 8) = v28[8];
      }
    }
  }
  if (__p)
  {
    uint64_t v31 = __p;
    operator delete(__p);
  }
  sub_2170C3D74((uint64_t)v33);
  return v17;
}

void sub_2170B2F5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,char a21)
{
  if (__p) {
    operator delete(__p);
  }
  sub_2170C3D74((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t sub_2170B2F90(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(void *)a1 = v3;
  uint64_t v4 = *(uint64_t *)((char *)a2 + 12);
  *(_DWORD *)(a1 + 20) = *((_DWORD *)a2 + 5);
  *(void *)(a1 + 12) = v4;
  uint64_t v5 = a2[3];
  *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
  *(void *)(a1 + 24) = v5;
  *(_DWORD *)(a1 + 36) = *((_DWORD *)a2 + 9);
  if ((uint64_t *)a1 != a2)
  {
    sub_216825D78((char *)(a1 + 40), (char *)a2[5], a2[6], (a2[6] - a2[5]) >> 2);
    sub_216825D78((char *)(a1 + 64), (char *)a2[8], a2[9], (a2[9] - a2[8]) >> 2);
    sub_216825D78((char *)(a1 + 88), (char *)a2[11], a2[12], (a2[12] - a2[11]) >> 2);
    sub_216825D78((char *)(a1 + 112), (char *)a2[14], a2[15], (a2[15] - a2[14]) >> 2);
    sub_2170A5494((void *)(a1 + 136), (_DWORD *)a2[17], (_DWORD *)a2[18], 0xAAAAAAAAAAAAAAABLL * ((a2[18] - a2[17]) >> 2));
    sub_2170A5494((void *)(a1 + 160), (_DWORD *)a2[20], (_DWORD *)a2[21], 0xAAAAAAAAAAAAAAABLL * ((a2[21] - a2[20]) >> 2));
    sub_2170A5494((void *)(a1 + 184), (_DWORD *)a2[23], (_DWORD *)a2[24], 0xAAAAAAAAAAAAAAABLL * ((a2[24] - a2[23]) >> 2));
    sub_216825D78((char *)(a1 + 208), (char *)a2[26], a2[27], (a2[27] - a2[26]) >> 2);
    sub_216825D78((char *)(a1 + 232), (char *)a2[29], a2[30], (a2[30] - a2[29]) >> 2);
    sub_216825D78((char *)(a1 + 256), (char *)a2[32], a2[33], (a2[33] - a2[32]) >> 2);
  }
  return a1;
}

double sub_2170B30E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int *a9, uint64_t a10)
{
  if (a4 || 3 * a5 == a7)
  {
    uint64_t v15 = v10;
    uint64_t v16 = v11;
    *(void *)&v14[16] = *(void *)(a10 + 16);
    *(_OWORD *)uint64_t v14 = *(_OWORD *)a10;
    v14[16] = a8 != 0;
    v14[21] = 1;
    v14[8] = 4;
    unsigned int v12 = *a9;
    if (*a9 - 3 < 4)
    {
      *(_DWORD *)&v14[12] = 1;
      *(_DWORD *)&v14[17] = 1;
    }
    else if (v12 >= 3)
    {
      if (v12 == 10)
      {
        if (sub_2170B25D0(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t)v14)) {
          return result;
        }
      }
      else
      {
        *(_DWORD *)&v14[12] = 2;
        *(_DWORD *)&v14[17] = 16843009;
      }
    }
    else
    {
      *(_DWORD *)&v14[12] = 1;
      *(_DWORD *)&v14[17] = 0;
    }
    double result = *(double *)v14;
    *(_OWORD *)a10 = *(_OWORD *)v14;
    *(void *)(a10 + 14) = *(void *)&v14[14];
  }
  return result;
}

uint64_t sub_2170B31C4(int *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, unsigned int *a6, uint64_t a7)
{
  int v7 = *a1;
  *(_DWORD *)(a7 + 16) = a3 != 0;
  if (a4 == 1 && v7 <= 79) {
    char v8 = 2;
  }
  else {
    char v8 = 4;
  }
  *(unsigned char *)(a7 + 8) = v8;
  unsigned int v9 = *a6;
  if (*a6 - 3 < 4)
  {
    char v10 = 0;
    if (a4 == 1) {
      int v11 = 3;
    }
    else {
      int v11 = 1;
    }
    goto LABEL_11;
  }
  if (v9 < 3)
  {
    char v10 = 0;
    int v11 = 1;
LABEL_11:
    *(_DWORD *)(a7 + 12) = v11;
    *(unsigned char *)(a7 + 24) = v10;
    return 0;
  }
  if (v9 != 10)
  {
    if (a4 == 1) {
      int v11 = 4;
    }
    else {
      int v11 = 2;
    }
    char v10 = 1;
    goto LABEL_11;
  }
  uint64_t result = sub_2170B2D4C((uint64_t)a1, a2, a3);
  if (!result) {
    return 0;
  }
  return result;
}

uint64_t sub_2170B327C(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, int *a10, uint64_t a11, int *a12, uint64_t a13, uint64_t a14)
{
  if (!a1)
  {
    uint64_t v14 = (void *)(a13 + 16);
    uint64_t v15 = "[Error] coordinates == nullptr";
    uint64_t v16 = 30;
    goto LABEL_18;
  }
  if (!a2)
  {
    uint64_t v14 = (void *)(a13 + 16);
    uint64_t v15 = "[Error] mesh has 0 vertices ";
    uint64_t v16 = 28;
    goto LABEL_18;
  }
  if (!a4)
  {
    uint64_t v14 = (void *)(a13 + 16);
    uint64_t v15 = "[Error] mesh has 0 faces ";
    uint64_t v16 = 25;
    goto LABEL_18;
  }
  if (!a5)
  {
    uint64_t v14 = (void *)(a13 + 16);
    uint64_t v15 = "[Error] faceVertexCounts == nullptr";
LABEL_17:
    uint64_t v16 = 35;
    goto LABEL_18;
  }
  if (!a6)
  {
    uint64_t v14 = (void *)(a13 + 16);
    uint64_t v15 = "[Error] mesh has 0 indices ";
    uint64_t v16 = 27;
    goto LABEL_18;
  }
  if (!a3 && 3 * a4 != a6)
  {
    uint64_t v14 = (void *)(a13 + 16);
    uint64_t v15 = "[Error] triangular mesh has invalid indexCount ";
    uint64_t v16 = 47;
LABEL_18:
    uint64_t v17 = (uint64_t)sub_216779180(v14, (uint64_t)v15, v16);
LABEL_19:
    BOOL v18 = (void *)v17;
    uint64_t v19 = 5;
LABEL_20:
    std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(void *)(*v18 - 24)));
    int v20 = std::locale::use_facet(&v94, MEMORY[0x263F8C108]);
    ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
    std::locale::~locale(&v94);
    std::ostream::put();
    std::ostream::flush();
    return v19;
  }
  if (!a7 && *(unsigned char *)(a14 + 16))
  {
    uint64_t v14 = (void *)(a13 + 16);
    uint64_t v15 = "[Error] faceGroupIndices == nullptr";
    goto LABEL_17;
  }
  if (!a8)
  {
    uint64_t v14 = (void *)(a13 + 16);
    uint64_t v15 = "[Error] outputBuffer == nullptr";
    uint64_t v16 = 31;
    goto LABEL_18;
  }
  if (a9 <= 0x20)
  {
    sub_216779180((void *)(a13 + 16), (uint64_t)"[Error] output buffer size is ", 30);
    unint64_t v22 = (void *)std::ostream::operator<<();
    int v23 = sub_216779180(v22, (uint64_t)" bytes", 6);
    sub_216779180(v23, (uint64_t)"It should at least ", 19);
    char v24 = (void *)std::ostream::operator<<();
    BOOL v18 = sub_216779180(v24, (uint64_t)" bytes ", 7);
    uint64_t v19 = 1;
    goto LABEL_20;
  }
  if (*(_DWORD *)(a14 + 4) >= 0x1Cu)
  {
    uint64_t v14 = (void *)(a13 + 16);
    uint64_t v15 = "[Error] bit depth should be between 0 and 28";
    uint64_t v16 = 44;
    goto LABEL_18;
  }
  if (*(_DWORD *)(a14 + 12) >= 3u)
  {
    sub_216779180((void *)(a13 + 16), (uint64_t)"[Error] geometry precition mode ", 32);
    uint64_t v38 = (void *)std::ostream::operator<<();
    uint64_t v39 = sub_216779180(v38, (uint64_t)" not supported. Only the following modes are supported : ", 57);
    sub_216779180(v39, (uint64_t)"(", 1);
    int v40 = (void *)std::ostream::operator<<();
    int v41 = sub_216779180(v40, (uint64_t)") ", 2);
    int v42 = sub_216779180(v41, (uint64_t)" DELTA,", 7);
    sub_216779180(v42, (uint64_t)"(", 1);
    uint64_t v43 = (void *)std::ostream::operator<<();
    uint64_t v44 = sub_216779180(v43, (uint64_t)") ", 2);
    uint64_t v45 = sub_216779180(v44, (uint64_t)" PARALLELOGRAM, and", 19);
    sub_216779180(v45, (uint64_t)"(", 1);
    BOOL v46 = (void *)std::ostream::operator<<();
    uint64_t v14 = sub_216779180(v46, (uint64_t)") ", 2);
    uint64_t v15 = " ADAPTIVE_PARALLELOGRAM.";
    uint64_t v16 = 24;
    goto LABEL_18;
  }
  unsigned int v25 = *(unsigned __int8 *)(a14 + 8);
  if (v25 > 4 || ((1 << v25) & 0x15) == 0)
  {
    sub_216779180((void *)(a13 + 16), (uint64_t)"[Error] geometry binarization mode ", 35);
    int v66 = (void *)std::ostream::operator<<();
    unint64_t v67 = sub_216779180(v66, (uint64_t)" not supported. Only the following modes are supported : ", 57);
    sub_216779180(v67, (uint64_t)"(", 1);
    unsigned int v68 = (void *)std::ostream::operator<<();
    uint64_t v69 = sub_216779180(v68, (uint64_t)") ", 2);
    int v70 = sub_216779180(v69, (uint64_t)" AC,", 4);
    sub_216779180(v70, (uint64_t)"(", 1);
    int v71 = (void *)std::ostream::operator<<();
    long long v72 = sub_216779180(v71, (uint64_t)") ", 2);
    long long v73 = sub_216779180(v72, (uint64_t)" EGK, and", 9);
    sub_216779180(v73, (uint64_t)"(", 1);
    long long v74 = (void *)std::ostream::operator<<();
    int v75 = sub_216779180(v74, (uint64_t)") ", 2);
    uint64_t v19 = 5;
    BOOL v18 = sub_216779180(v75, (uint64_t)" AC2.", 5);
    goto LABEL_20;
  }
  if (a3)
  {
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    int v28 = 0;
    int v29 = 0x10000;
    do
    {
      uint64_t v30 = *(unsigned int *)(a3 + 4 * v26);
      if ((v30 - 3) >= 0xFFFD)
      {
        sub_216779180((void *)(a13 + 16), (uint64_t)"[Error] faceVertexCounts[", 25);
        char v76 = (void *)std::ostream::operator<<();
        uint64_t v19 = 5;
        sub_216779180(v76, (uint64_t)"] == ", 5);
        int v77 = (void *)std::ostream::operator<<();
        sub_216779180(v77, (uint64_t)" is not the range 3 to ", 23);
LABEL_90:
        BOOL v18 = (void *)std::ostream::operator<<();
        goto LABEL_20;
      }
      if ((int)v30 < v29) {
        int v29 = *(_DWORD *)(a3 + 4 * v26);
      }
      if (v28 <= (int)v30) {
        int v28 = *(_DWORD *)(a3 + 4 * v26);
      }
      v27 += v30;
      ++v26;
    }
    while (a4 != v26);
    if (v28 == 4 && v29 == 3) {
      int v32 = 2;
    }
    else {
      int v32 = 3;
    }
    if (v29 == 4 && v28 == 4) {
      int v34 = 1;
    }
    else {
      int v34 = v32;
    }
    if (v29 == 3 && v28 == 3) {
      int v36 = 0;
    }
    else {
      int v36 = v34;
    }
    *a10 = v36;
    if (v27 != a6)
    {
      sub_216779180((void *)(a13 + 16), (uint64_t)"[Error] indexCount == ", 22);
      uint64_t v37 = (void *)std::ostream::operator<<();
      sub_216779180(v37, (uint64_t)" is different from expected value of ", 37);
      uint64_t v14 = (void *)std::ostream::operator<<();
      uint64_t v15 = " computed based on faceVertexCounts";
      goto LABEL_17;
    }
  }
  else
  {
    *a10 = 0;
  }
  uint64_t v47 = 0;
  if (a6 <= 1) {
    uint64_t v48 = 1;
  }
  else {
    uint64_t v48 = a6;
  }
  do
  {
    int v49 = *(_DWORD *)(a5 + 4 * v47);
    if (v49 < 0 || v49 >= (int)a2)
    {
      sub_216779180((void *)(a13 + 16), (uint64_t)"[Error] indices[", 16);
      int v78 = (void *)std::ostream::operator<<();
      sub_216779180(v78, (uint64_t)"] == ", 5);
      uint64_t v79 = (void *)std::ostream::operator<<();
      sub_216779180(v79, (uint64_t)" is not the range 0 to ", 23);
      BOOL v18 = (void *)std::ostream::operator<<();
      uint64_t v19 = 5;
      goto LABEL_20;
    }
    ++v47;
  }
  while (v48 != v47);
  uint64_t v50 = *a1;
  a12[2] = *((_DWORD *)a1 + 2);
  *(void *)a12 = v50;
  uint64_t v51 = *a1;
  a12[5] = *((_DWORD *)a1 + 2);
  *(void *)(a12 + 3) = v51;
  if ((int)a2 >= 2)
  {
    int v52 = *a12;
    int v53 = a12[1];
    int v55 = a12[2];
    int v54 = a12[3];
    unint64_t v56 = (int *)a1 + 5;
    uint64_t v57 = a2 - 1;
    int v59 = a12[4];
    int v58 = a12[5];
    do
    {
      if (*(v56 - 2) < v52) {
        int v52 = *(v56 - 2);
      }
      *a12 = v52;
      if (v54 <= *(v56 - 2)) {
        int v54 = *(v56 - 2);
      }
      a12[3] = v54;
      if (*(v56 - 1) < v53) {
        int v53 = *(v56 - 1);
      }
      a12[1] = v53;
      if (v59 <= *(v56 - 1)) {
        int v59 = *(v56 - 1);
      }
      a12[4] = v59;
      if (*v56 < v55) {
        int v55 = *v56;
      }
      a12[2] = v55;
      int v61 = *v56;
      v56 += 3;
      int v60 = v61;
      if (v58 <= v61) {
        int v58 = v60;
      }
      a12[5] = v58;
      --v57;
    }
    while (v57);
  }
  int v62 = *(_DWORD *)(a14 + 4);
  if (v62)
  {
    uint64_t v63 = 0;
    while (1)
    {
      uint64_t v64 = &a12[v63];
      if (*v64 < 0) {
        break;
      }
      int v65 = v64[3];
      if (v65 >= 1 << v62) {
        break;
      }
      *(_DWORD *)(a11 + 4 * v63++) = v65 - *v64;
      if (v63 == 3) {
        goto LABEL_95;
      }
    }
    sub_216779180((void *)(a13 + 16), (uint64_t)"[Error] boundingBox[", 20);
    int v85 = (void *)std::ostream::operator<<();
    sub_216779180(v85, (uint64_t)"] == [", 6);
    unint64_t v86 = (void *)std::ostream::operator<<();
    sub_216779180(v86, (uint64_t)", ", 2);
    int v87 = (void *)std::ostream::operator<<();
    sub_216779180(v87, (uint64_t)"] is not in the range 0 to ", 27);
    goto LABEL_108;
  }
  for (uint64_t i = 0; i != 3; ++i)
  {
    uint64_t v81 = a12[i + 3] - (uint64_t)a12[i];
    if (v81 > 0xFFFFFFF)
    {
      sub_216779180((void *)(a13 + 16), (uint64_t)"[Error] boundingBox.max[", 24);
      uint64_t v88 = (void *)std::ostream::operator<<();
      unint64_t v89 = sub_216779180(v88, (uint64_t)"] - ", 4);
      sub_216779180(v89, (uint64_t)"boundingBox.min[", 16);
      int v90 = (void *)std::ostream::operator<<();
      uint64_t v19 = 5;
      sub_216779180(v90, (uint64_t)"] == ", 5);
      int v91 = (void *)std::ostream::operator<<();
      sub_216779180(v91, (uint64_t)" is larger than ", 16);
      goto LABEL_90;
    }
    *(_DWORD *)(a11 + 4 * i) = v81;
  }
LABEL_95:
  uint64_t v19 = 0;
  if (a7 && *(unsigned char *)(a14 + 16))
  {
    uint64_t v82 = 0;
    if (a4 <= 1) {
      uint64_t v83 = 1;
    }
    else {
      uint64_t v83 = a4;
    }
    while (1)
    {
      int v84 = *(_DWORD *)(a7 + 4 * v82);
      if (v84 < 0) {
        int v84 = -v84;
      }
      if (v84 >> 28) {
        break;
      }
      uint64_t v19 = 0;
      if (v83 == ++v82) {
        return v19;
      }
    }
    sub_216779180((void *)(a13 + 16), (uint64_t)"[Error] abs(faceGroupIndices[", 29);
    int v92 = (void *)std::ostream::operator<<();
    sub_216779180(v92, (uint64_t)"]) == ", 6);
    unint64_t v93 = (void *)std::ostream::operator<<();
    sub_216779180(v93, (uint64_t)" is not in the range 0 to ", 26);
LABEL_108:
    uint64_t v17 = std::ostream::operator<<();
    goto LABEL_19;
  }
  return v19;
}

void sub_2170B3AA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t sub_2170B3ABC(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    uint64_t v4 = *a1;
    if ((int)v4 >= 1)
    {
      uint64_t v5 = 0;
      int32x2_t v6 = *(int32x2_t *)(a1 + 6);
      unsigned int v7 = a1[8];
      uint64_t v8 = 4 * v4;
      uint64_t v9 = 8;
      do
      {
        char v10 = (_DWORD *)(*((void *)a1 + 23) + v9);
        __int32 v11 = *v10 + v7;
        unsigned int v12 = (int32x2_t *)(a2 + 12 * *(int *)(*((void *)a1 + 8) + v5));
        *unsigned int v12 = vadd_s32(*(int32x2_t *)(v10 - 2), v6);
        v12[1].i32[0] = v11;
        v9 += 12;
        v5 += 4;
      }
      while (v8 != v5);
    }
  }
  if (a3)
  {
    uint64_t v13 = a1[1];
    if ((int)v13 >= 1)
    {
      uint64_t v14 = (int *)*((void *)a1 + 5);
      uint64_t v15 = (_DWORD *)(*((void *)a1 + 29) + 4);
      do
      {
        uint64_t v16 = *v14++;
        *(_DWORD *)(a3 + 4 * v16) = *v15 - *(v15 - 1);
        ++v15;
        --v13;
      }
      while (v13);
    }
  }
  if (a4)
  {
    uint64_t v17 = a1[1];
    if ((int)v17 >= 1)
    {
      uint64_t v18 = 0;
      int v19 = 0;
      uint64_t v20 = *((void *)a1 + 14);
      uint64_t v21 = *((void *)a1 + 29);
      do
      {
        unint64_t v22 = (int *)(v21 + 4 * *(int *)(v20 + 4 * v18));
        uint64_t v24 = *v22;
        uint64_t v23 = v22[1];
        if ((int)v24 < (int)v23)
        {
          uint64_t v25 = *((void *)a1 + 8);
          uint64_t v26 = (_DWORD *)(a4 + 4 * v19);
          uint64_t v27 = (int *)(*((void *)a1 + 26) + 4 * v24);
          uint64_t v28 = v23 - v24;
          int v19 = v19 + v23 - v24;
          do
          {
            uint64_t v29 = *v27++;
            *v26++ = *(_DWORD *)(v25 + 4 * v29);
            --v28;
          }
          while (v28);
        }
        ++v18;
      }
      while (v18 != v17);
    }
  }
  return 0;
}

uint64_t sub_2170B3BD0(uint64_t a1, uint64_t a2, uint64_t a3, uint8x8_t a4)
{
  if (a2 < 4) {
    return 0;
  }
  *(_DWORD *)a1 = -90009999;
  if (a2 < 9) {
    return 0;
  }
  *(unsigned char *)(a1 + 8) = 0;
  if (a2 == 9) {
    return 0;
  }
  *(unsigned char *)(a1 + 9) = 8;
  if (((a2 - 8) & 0xFFFFFFFFFFFFFFFELL) == 2) {
    return 0;
  }
  *(_WORD *)(a1 + 10) = 0;
  if (a2 < 20) {
    return 0;
  }
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a3 + 12);
  if (((a2 - 16) & 0xFFFFFFFFFFFFFFFCLL) == 4) {
    return 0;
  }
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a3 + 16);
  if (a2 == 24) {
    return 0;
  }
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a3 + 40);
  if (a2 == 25) {
    return 0;
  }
  *(unsigned char *)(a1 + 25) = *(_DWORD *)(a3 + 44);
  uint64_t v4 = a2 - 26;
  if (a2 == 26) {
    return v4;
  }
  a4.i32[0] = *(_DWORD *)(a3 + 48);
  uint16x4_t v5 = vshl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(a4), (uint16x4_t)0x4000300020001);
  *(unsigned char *)(a1 + 26) = v5.i8[0] | v5.i8[4] | ((v5.i32[0] | v5.i32[1]) >> 16) | (*(unsigned char *)(a3 + 28) << 6) | *(unsigned char *)(a3 + 32) | (32 * *(unsigned char *)(a3 + 52));
  if (a2 == 27) {
    return 0;
  }
  *(unsigned char *)(a1 + 27) = *(_DWORD *)(a3 + 24);
  if ((a2 & 0xFFFFFFFFFFFFFFFCLL) == 0x1C) {
    return 0;
  }
  uint64_t v4 = a1 + 32;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a3 + 20);
  return v4;
}

void sub_2170B3CEC(uint64_t a1, uint64_t a2, int a3, int *a4, int a5, const void *a6, int a7, int a8, uint64_t *a9, uint64_t a10)
{
  *(_DWORD *)a1 = a3;
  *(_DWORD *)(a1 + 4) = a5;
  *(_DWORD *)(a1 + 8) = a7;
  uint64_t v16 = *a9;
  *(_DWORD *)(a1 + 20) = *((_DWORD *)a9 + 2);
  *(void *)(a1 + 12) = v16;
  int v17 = *(_DWORD *)(a10 + 8);
  *(void *)(a1 + 24) = *(void *)a10;
  *(_DWORD *)(a1 + 32) = v17;
  *(_DWORD *)(a1 + 36) = a8;
  uint64_t v18 = a1 + 64;
  sub_21681C000(a1 + 64, 0);
  LODWORD(v31) = -1;
  sub_216820DFC(v18, a3, &v31);
  sub_21681C000(a1 + 40, 0);
  LODWORD(v31) = -1;
  sub_216820DFC(a1 + 40, a5, &v31);
  sub_21681C000(a1 + 112, a5);
  sub_21681C000(a1 + 88, a3);
  sub_21681C000(a1 + 256, a5);
  sub_2170A494C((uint64_t *)(a1 + 136), 0);
  int v32 = -1;
  uint64_t v31 = -1;
  sub_2170A4988((uint64_t *)(a1 + 136), a3, &v31);
  sub_2170A494C((uint64_t *)(a1 + 160), 0);
  int v32 = -1;
  uint64_t v31 = -1;
  sub_2170A4988((uint64_t *)(a1 + 160), a3, &v31);
  sub_2170A494C((uint64_t *)(a1 + 184), a3);
  if (a3 >= 1)
  {
    uint64_t v19 = 0;
    do
    {
      int v20 = *(_DWORD *)(a2 + v19 + 8) - *(_DWORD *)(a1 + 32);
      uint64_t v21 = (int32x2_t *)(*(void *)(a1 + 184) + v19);
      *uint64_t v21 = vsub_s32(*(int32x2_t *)(a2 + v19), *(int32x2_t *)(a1 + 24));
      v21[1].i32[0] = v20;
      v19 += 12;
    }
    while (12 * a3 != v19);
  }
  sub_21681C000(a1 + 232, a5 + 1);
  unint64_t v22 = *(_DWORD **)(a1 + 232);
  *unint64_t v22 = 0;
  if (a4)
  {
    if (a5 >= 1)
    {
      int v23 = 0;
      uint64_t v24 = a5;
      uint64_t v25 = v22 + 1;
      do
      {
        int v26 = *a4++;
        v23 += v26;
        *v25++ = v23;
        --v24;
      }
      while (v24);
    }
  }
  else if (a5 >= 1)
  {
    uint64_t v27 = v22 + 1;
    uint64_t v28 = 3;
    do
    {
      *v27++ = v28;
      v28 += 3;
    }
    while (3 * (a5 + 1) != v28);
  }
  uint64_t v29 = (void **)(a1 + 208);
  sub_21681C000((uint64_t)v29, a7);
  if (a7) {
    memmove(*v29, a6, 4 * a7);
  }
}

void sub_2170B3F38(uint64_t a1, int *a2, uint64_t a3)
{
  unint64_t v5 = *a2;
  if (*(unsigned char *)(a3 + 18)) {
    BOOL v6 = *(unsigned char *)(a3 + 17) == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6 || (sub_21681C000(a1 + 224, 0), int v13 = 0, sub_216820DFC(a1 + 224, v5, &v13), *(unsigned char *)(a3 + 17)))
  {
    sub_2170B1210(a1 + 272, v5);
    sub_2170B124C(a1 + 296, 64);
  }
  sub_2170B12E4(a1 + 248, v5);
  uint64_t v8 = *(unsigned char **)(a1 + 248);
  uint64_t v9 = *(unsigned char **)(a1 + 256);
  if (v8 != v9) {
    memset(v8, 255, ((v9 - v8 - 16) & 0xFFFFFFFFFFFFFFF0) + 16);
  }
  *(void *)a1 = 0;
  sub_21681FE20((void **)(a1 + 80), 0x100uLL);
  sub_216B0BCC8((char **)(a1 + 200), 0x40uLL);
  sub_21681FE20((void **)(a1 + 176), 0x40uLL);
  sub_21681FE20((void **)(a1 + 152), 0x40uLL);
  sub_21681FE20((void **)(a1 + 104), 0x20uLL);
  sub_2170B1314((unint64_t *)(a1 + 128), 0x20uLL);
  memset_pattern16((void *)(a1 + 2096), &unk_2174AFAB0, 0xAuLL);
  *(_WORD *)(a1 + 2106) = 0x8000;
  for (uint64_t i = 2108; i != 2204; i += 6)
    memset_pattern16((void *)(a1 + i), &unk_2174AFAB0, 6uLL);
  *(_WORD *)(a1 + 2204) = 0x8000;
  memset_pattern16((void *)(a1 + 2206), &unk_2174AFAB0, 6uLL);
  *(_WORD *)(a1 + 2212) = 0x8000;
  for (uint64_t j = 2214; j != 2294; j += 16)
    memset_pattern16((void *)(a1 + j), &unk_2174AFAB0, 0x10uLL);
  memset_pattern16((void *)(a1 + 2298), &unk_2174AFAB0, 0x20uLL);
  memset_pattern16((void *)(a1 + 2336), &unk_2174AFAB0, 0x80uLL);
  *(_WORD *)(a1 + 2334) = 0x8000;
  *(_DWORD *)(a1 + 2294) = -2147450880;
  *(_DWORD *)(a1 + 2330) = -2147450880;
  memset_pattern16((void *)(a1 + 2472), &unk_2174AFAB0, 6uLL);
  for (uint64_t k = 2480; k != 2720; k += 120)
    sub_2170A8CEC(a1 + k, 3);
  sub_2170C3F34((void *)a1, (uint64_t)a2);
}

uint64_t sub_2170B4150(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v6 = *(unsigned int **)a3;
  uint64_t v7 = *(void *)(a3 + 8);
  uint64_t v8 = *(void *)a3 + 4;
  *(void *)a3 = v8;
  *(void *)(a3 + 8) = v7 - 4;
  uint64_t v9 = (unsigned int *)(a1 + 3560);
  *(_DWORD *)(a1 + 3564) = (v7 - 4) & ~((v7 - 4) >> 63);
  *(void *)(a1 + 3568) = v8;
  sub_2170A41FC(a1 + 3560);
  if (*(unsigned char *)(a2 + 17)) {
    sub_2170B9ADC((unsigned int *)a1, a2);
  }
  else {
    sub_2170B9D10((unsigned int *)a1, a2);
  }
  unsigned int v10 = sub_2170A51F4((uint64_t)v9);
  if (v7 >= 4) {
    unsigned int *v6 = v10;
  }
  uint64_t v11 = v10;
  if (*(void *)a3) {
    uint64_t v11 = *(void *)a3 + v10;
  }
  uint64_t v12 = *(void *)(a3 + 8) - v10;
  *(void *)a3 = v11;
  *(void *)(a3 + 8) = v12;
  return *v9;
}

uint64_t sub_2170B420C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  uint64_t v7 = *(unsigned int *)(a1 + 4);
  uint64_t v30 = *(unsigned int **)a4;
  uint64_t v31 = *(void *)(a4 + 8);
  *(void *)a4 += 4;
  *(void *)(a4 + 8) = v31 - 4;
  uint64_t v8 = (unsigned int *)(a1 + 3560);
  *(_DWORD *)(a1 + 3564) = (v31 - 4) & ~((v31 - 4) >> 63);
  *(void *)(a1 + 3568) = v30 + 1;
  sub_2170A41FC(a1 + 3560);
  if (!*(unsigned char *)(a3 + 8))
  {
    __int16 v36 = 0x8000;
    __int16 v35 = 0x8000;
    memset_pattern16(__b, &unk_2174AFAB0, 0x80uLL);
    __int16 v34 = 0x8000;
    if ((int)v7 < 1) {
      goto LABEL_31;
    }
    uint64_t v17 = 0;
    int v18 = 0;
    uint64_t v19 = 4 * v7;
    while (1)
    {
      int v20 = v18;
      int v18 = *(_DWORD *)(a2 + 4 * *(int *)(*(void *)(a1 + 112) + v17));
      uint64_t v21 = &v36;
      uint64_t v22 = (uint64_t)v8;
      unsigned int v23 = v18 - v20;
      if (v18 == v20)
      {
        unsigned int v24 = 0;
      }
      else
      {
        sub_2170A5080((uint64_t)v8, 1, &v36);
        if ((v23 & 0x80000000) != 0)
        {
          sub_2170A5080((uint64_t)v8, 0, &v35);
          unsigned int v23 = -v23;
        }
        else
        {
          sub_2170A5080((uint64_t)v8, 1, &v35);
        }
        if (v23 > 0x3F)
        {
          sub_2170A5080((uint64_t)v8, 1, __b);
          sub_2170A5080((uint64_t)v8, 1, v38);
          sub_2170A5080((uint64_t)v8, 1, v39);
          sub_2170A5080((uint64_t)v8, 1, v40);
          sub_2170A5080((uint64_t)v8, 1, v41);
          sub_2170A5080((uint64_t)v8, 1, v42);
          sub_2170A56D8((uint64_t)v8, v23 - 64, 6, &v34);
          goto LABEL_30;
        }
        unsigned int v25 = v23 - 1;
        sub_2170A5080((uint64_t)v8, (v23 - 1) & 1, __b);
        sub_2170A5080((uint64_t)v8, (v25 >> 1) & 1, &__b[(v25 & 1) + 1]);
        sub_2170A5080((uint64_t)v8, (v25 >> 2) & 1, &__b[(v25 & 3) + 3]);
        sub_2170A5080((uint64_t)v8, (v25 >> 3) & 1, &__b[(v25 & 7) + 7]);
        sub_2170A5080((uint64_t)v8, (v25 >> 4) & 1, &__b[(v25 & 0xF) + 15]);
        unsigned int v24 = ((v23 - 1) >> 5) & 1;
        uint64_t v21 = &__b[((v23 - 1) & 0x1F) + 31];
        uint64_t v22 = (uint64_t)v8;
      }
      sub_2170A5080(v22, v24, v21);
LABEL_30:
      v17 += 4;
      if (v19 == v17) {
        goto LABEL_31;
      }
    }
  }
  __int16 v36 = 0x8000;
  __int16 v35 = 0x8000;
  memset_pattern16(__b, &unk_2174AFAB0, 0x80uLL);
  __int16 v34 = 0x8000;
  if ((int)v7 >= 1)
  {
    uint64_t v9 = 0;
    int v10 = 0;
    uint64_t v11 = 4 * v7;
    int v12 = 6;
    uint64_t v33 = a2;
    do
    {
      int v13 = v10;
      int v10 = *(_DWORD *)(a2 + 4 * *(int *)(*(void *)(a1 + 112) + v9));
      unsigned int v14 = v10 - v13;
      if (v10 == v13)
      {
        sub_2170A5080((uint64_t)v8, 0, &v36);
      }
      else
      {
        sub_2170A5080((uint64_t)v8, 1, &v36);
        if ((v14 & 0x80000000) != 0)
        {
          sub_2170A5080((uint64_t)v8, 0, &v35);
          unsigned int v14 = -v14;
        }
        else
        {
          sub_2170A5080((uint64_t)v8, 1, &v35);
        }
        unsigned int v15 = v14 - 1;
        if (v14 > 0x3F)
        {
          sub_2170A5080((uint64_t)v8, 1, __b);
          sub_2170A5080((uint64_t)v8, 1, v38);
          sub_2170A5080((uint64_t)v8, 1, v39);
          sub_2170A5080((uint64_t)v8, 1, v40);
          sub_2170A5080((uint64_t)v8, 1, v41);
          sub_2170A5080((uint64_t)v8, 1, v42);
          sub_2170A56D8((uint64_t)v8, v14 - 64, v12, &v34);
          unsigned int v16 = v15 >> v12;
          if (!v12 || v16)
          {
            if (v16 > 1) {
              ++v12;
            }
          }
          else
          {
            --v12;
          }
        }
        else
        {
          sub_2170A5080((uint64_t)v8, (v15 >> 5) & 1, __b);
          sub_2170A5080((uint64_t)v8, (v15 >> 4) & 1, &__b[(v15 >> 5) + 1]);
          sub_2170A5080((uint64_t)v8, (v15 >> 3) & 1, &__b[(v15 >> 4) + 3]);
          sub_2170A5080((uint64_t)v8, (v15 >> 2) & 1, &__b[(v15 >> 3) + 7]);
          sub_2170A5080((uint64_t)v8, (v15 >> 1) & 1, &__b[(v15 >> 2) + 15]);
          sub_2170A5080((uint64_t)v8, v15 & 1, &__b[(v15 >> 1) + 31]);
        }
        a2 = v33;
      }
      v9 += 4;
    }
    while (v11 != v9);
  }
LABEL_31:
  unsigned int v26 = sub_2170A51F4((uint64_t)v8);
  if (v31 >= 4) {
    *uint64_t v30 = v26;
  }
  uint64_t v27 = v26;
  uint64_t v28 = *(void *)(a4 + 8);
  if (*(void *)a4) {
    uint64_t v27 = *(void *)a4 + v26;
  }
  *(void *)a4 = v27;
  *(void *)(a4 + 8) = v28 - v26;
  return *v8;
}

uint64_t sub_2170B46C4(uint64_t a1, int *a2)
{
  uint64_t result = 5;
  if (a2)
  {
    uint64_t v4 = *(unsigned int *)(a1 + 4);
    if ((int)v4 >= 1)
    {
      LOBYTE(v27) = 0;
      uint64_t v7 = (int)*sub_217087E68(a2, &a2[v4]);
      if ((v7 & 0x80000000) != 0) {
        return 5;
      }
      uint64_t v8 = *v6;
      uint64_t v9 = v8 - v7;
      if ((int)v8 - (int)v7 > (int)v4)
      {
        return 5;
      }
      else
      {
        int v27 = 0;
        sub_2170A4FFC(__p, v9 + 2, &v27);
        int v10 = __p[0];
        uint64_t v11 = v4;
        int v12 = a2;
        do
        {
          int v13 = *v12++;
          ++v10[v13 - (int)v7 + 1];
          --v11;
        }
        while (v11);
        if ((v9 & 0x80000000) == 0)
        {
          unsigned int v14 = (char *)__p[0] + 4;
          int v15 = *(_DWORD *)__p[0];
          uint64_t v16 = (v9 + 2) - 1;
          do
          {
            v15 += *v14;
            *v14++ = v15;
            --v16;
          }
          while (v16);
        }
        uint64_t v17 = *(int **)(a1 + 112);
        int v18 = __p[0];
        uint64_t v19 = v4;
        uint64_t v20 = *(void *)(a1 + 40);
        do
        {
          uint64_t v21 = *v17++;
          int v22 = a2[v21] - v7;
          int v23 = v18[v22];
          v18[v22] = v23 + 1;
          *(_DWORD *)(v20 + 4 * v21) = v23;
          --v19;
        }
        while (v19);
        uint64_t v24 = 0;
        uint64_t v25 = *(void *)(a1 + 40);
        uint64_t v26 = *(void *)(a1 + 112);
        do
        {
          *(_DWORD *)(v26 + 4 * *(int *)(v25 + 4 * v24)) = v24;
          ++v24;
        }
        while (v4 != v24);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_2170B4820(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 < 4) {
    return 0;
  }
  *(_DWORD *)a1 = -290009985;
  if (a2 < 9) {
    return 0;
  }
  *(unsigned char *)(a1 + 8) = 0;
  if (a2 == 9) {
    return 0;
  }
  *(unsigned char *)(a1 + 9) = 8;
  if (((a2 - 8) & 0xFFFFFFFFFFFFFFFELL) == 2) {
    return 0;
  }
  *(_WORD *)(a1 + 10) = 0;
  if (a2 < 20) {
    return 0;
  }
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a3 + 12);
  if (a2 == 20) {
    return 0;
  }
  *(unsigned char *)(a1 + 20) = *(_DWORD *)(a3 + 32);
  if (a2 == 21) {
    return 0;
  }
  *(unsigned char *)(a1 + 21) = *(_DWORD *)(a3 + 24);
  if (a2 == 22) {
    return 0;
  }
  *(unsigned char *)(a1 + 22) = *(_DWORD *)(a3 + 16);
  if (a2 == 23) {
    return 0;
  }
  *(unsigned char *)(a1 + 23) = *(unsigned char *)(a3 + 52);
  if (a2 == 24) {
    return 0;
  }
  *(unsigned char *)(a1 + 24) = *(_DWORD *)(a3 + 56);
  uint64_t v3 = a2 - 25;
  if (a2 == 25) {
    return v3;
  }
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a3 + 36) | (16 * *(_DWORD *)(a3 + 44));
  if (a2 == 26) {
    return 0;
  }
  *(unsigned char *)(a1 + 26) = *(_DWORD *)(a3 + 40);
  if (a2 == 27) {
    return 0;
  }
  *(unsigned char *)(a1 + 27) = *(_DWORD *)(a3 + 28);
  if ((a2 & 0xFFFFFFFFFFFFFFFCLL) == 0x1C) {
    return 0;
  }
  uint64_t v3 = a1 + 32;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a3 + 20);
  return v3;
}

uint64_t sub_2170B4938(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v6 = *(unsigned int **)a3;
  uint64_t v7 = *(void *)(a3 + 8);
  uint64_t v8 = *(void *)a3 + 4;
  *(void *)a3 = v8;
  *(void *)(a3 + 8) = v7 - 4;
  uint64_t v9 = (unsigned int *)(a1 + 3560);
  *(_DWORD *)(a1 + 3564) = (v7 - 4) & ~((v7 - 4) >> 63);
  *(void *)(a1 + 3568) = v8;
  sub_2170A41FC(a1 + 3560);
  uint64_t result = sub_2170B98AC((unsigned int *)a1, a2);
  if (!result)
  {
    unsigned int v11 = sub_2170A51F4((uint64_t)v9);
    if (v7 >= 4) {
      unsigned int *v6 = v11;
    }
    uint64_t v12 = v11;
    if (*(void *)a3) {
      uint64_t v12 = *(void *)a3 + v11;
    }
    uint64_t v13 = *(void *)(a3 + 8) - v11;
    *(void *)a3 = v12;
    *(void *)(a3 + 8) = v13;
    return *v9;
  }
  return result;
}

uint64_t sub_2170B49E0(unsigned int *a1, uint64_t a2)
{
  unint64_t v2 = a1;
  uint64_t v576 = *MEMORY[0x263EF8340];
  uint64_t v524 = *a1;
  uint64_t v3 = a1[780];
  uint64_t v520 = *((void *)a1 + 384);
  unint64_t v5 = a1 + 46;
  uint64_t v4 = *((void *)a1 + 23);
  int v6 = ~(-1 << (*(_DWORD *)(a2 + 4) - 1));
  __p = 0;
  v571 = 0;
  uint64_t v572 = 0;
  sub_2170AE224((void *)a1 + 23, (void *)a1 + 29, (void *)a1 + 26, (uint64_t *)a1 + 26, -1431655765 * ((unint64_t)(*((void *)a1 + 24) - v4) >> 2), (uint64_t *)&__p, v6);
  uint64_t v7 = 0;
  uint64_t v575 = 0;
  v523 = v5 + 704;
  memset(v574, 0, sizeof(v574));
  memset(v573, 0, sizeof(v573));
  do
  {
    sub_2170A8CEC((uint64_t)v573 + v7, v3);
    v7 += 120;
  }
  while (v7 != 360);
  memset_pattern16(&__b, &unk_2174AFAB0, 6uLL);
  memset_pattern16(&v564, &unk_2174AFAB0, 6uLL);
  unsigned __int16 v563 = 0x8000;
  __int16 v562 = 0x8000;
  uint64_t v8 = v520;
  if ((int)v524 > 0)
  {
    uint64_t v9 = 0;
    int v10 = *(_DWORD *)(a2 + 16);
    unsigned int v11 = (unsigned char *)(a2 + 8);
    uint64_t v522 = (uint64_t)(v2 + 445);
    v517 = (unsigned __int8 *)(a2 + 8);
    v518 = v2;
    unsigned int v521 = v3;
    int v507 = v6;
    int v508 = v10;
    do
    {
      uint64_t v12 = *(int *)(v2[11] + 4 * v9);
      if (v10 && !*(unsigned char *)(v2[387] + v12)) {
        goto LABEL_742;
      }
      uint64_t v13 = (_DWORD *)(v8 + 4 * (int)v12 * (int)v3);
      int v14 = *v13 - v6;
      int v15 = v13[1] - v6;
      if (v14 >= 0) {
        int v16 = *v13 - v6;
      }
      else {
        int v16 = v6 - *v13;
      }
      if (v15 >= 0) {
        int v17 = v15;
      }
      else {
        int v17 = -v15;
      }
      int v18 = v6 - v16;
      int v19 = v17 - v6;
      if (v14 >= 0) {
        int v19 = v6 - v17;
      }
      int v20 = v16 - v6;
      if (v15 >= 0) {
        int v21 = v18;
      }
      else {
        int v21 = v20;
      }
      int v22 = v18 - v17;
      int v561 = v22;
      if (v22 < 0) {
        int v23 = v19;
      }
      else {
        int v23 = v14;
      }
      if (v22 < 0) {
        int v24 = v21;
      }
      else {
        int v24 = v15;
      }
      int v559 = v23;
      int v560 = v24;
      uint64_t v25 = 3 * v12;
      uint64_t v26 = (int *)((char *)__p + 12 * v12);
      int v27 = *v26;
      int v556 = *v26;
      int v28 = v26[1];
      int v557 = v28;
      int v29 = v26[2];
      int v558 = v29;
      uint64_t v30 = (int *)(v2[17] + 4 * v25);
      uint64_t v31 = *v30;
      uint64_t v32 = v30[1];
      uint64_t v33 = v30[2];
      __int16 v34 = (int *)(v2[20] + 4 * v25);
      uint64_t v35 = v34[2];
      if (v35 == -1
        || (uint64_t v36 = *v34, v37 = v34[1], v10)
        && ((uint64_t v38 = v2[387], !*(unsigned char *)(v38 + v31))
         || !*(unsigned char *)(v38 + v32)
         || !*(unsigned char *)(v38 + v33)
         || !*(unsigned char *)(v38 + v36)
         || !*(unsigned char *)(v38 + v37)
         || !*(unsigned char *)(v38 + v35)))
      {
        if (v33 == -1
          || v10 && ((uint64_t v120 = v2[387], !*(unsigned char *)(v120 + v31)) || !*(unsigned char *)(v120 + v32) || !*(unsigned char *)(v120 + v33)))
        {
          if (v32 != -1)
          {
            if (!v10 || (uint64_t v174 = v2[387], *(unsigned char *)(v174 + v31)) && *(unsigned char *)(v174 + v32))
            {
              v175 = (_DWORD *)(v8 + 4 * (int)v31 * (int)v3);
              v176 = (_DWORD *)(v8 + 4 * (int)v32 * (int)v3);
              int v177 = *v175 - v6;
              int v178 = v175[1] - v6;
              if (v177 >= 0) {
                int v179 = v177;
              }
              else {
                int v179 = -v177;
              }
              if (v178 >= 0) {
                int v180 = v178;
              }
              else {
                int v180 = -v178;
              }
              int v181 = v6 - v179;
              int v182 = v180 - v6;
              if (v177 >= 0) {
                int v182 = v6 - v180;
              }
              int v183 = v179 - v6;
              if (v178 >= 0) {
                int v183 = v181;
              }
              int v184 = v181 - v180;
              if (v181 - v180 < 0)
              {
                int v177 = v182;
                int v178 = v183;
              }
              int v185 = *v176 - v6;
              int v186 = v176[1] - v6;
              if (v185 >= 0) {
                int v187 = v185;
              }
              else {
                int v187 = -v185;
              }
              if (v186 >= 0) {
                int v188 = v186;
              }
              else {
                int v188 = -v186;
              }
              int v189 = v6 - v187;
              int v190 = v188 - v6;
              if (v185 >= 0) {
                int v190 = v6 - v188;
              }
              int v191 = v187 - v6;
              if (v186 >= 0) {
                int v191 = v189;
              }
              int v192 = v189 - v188;
              if (v192 < 0) {
                int v186 = v191;
              }
              else {
                int v190 = v185;
              }
              uint64_t v193 = v29 * (uint64_t)v184 + v27 * (uint64_t)v177 + v28 * (uint64_t)v178;
              if (v193 >= 0) {
                int v194 = v27;
              }
              else {
                int v194 = -v27;
              }
              if (v193 >= 0) {
                int v195 = v28;
              }
              else {
                int v195 = -v28;
              }
              if (v193 >= 0) {
                int v196 = v29;
              }
              else {
                int v196 = -v29;
              }
              int v531 = v194;
              int v528 = v195;
              int v197 = v177 + v190;
              int v198 = v178 + v186;
              int v199 = v184 + v192;
              int v200 = v197 + 2;
              if (v197 + 1 >= 0) {
                int v200 = v197 + 1;
              }
              int v201 = v200 >> 1;
              if (v198 + 1 >= 0) {
                int v202 = v198 + 1;
              }
              else {
                int v202 = v198 + 2;
              }
              int v203 = v202 >> 1;
              int v204 = v199 + 2;
              if (v199 + 1 >= 0) {
                int v204 = v199 + 1;
              }
              int v555 = v201;
              int v554 = v203;
              int v553 = v23;
              int v552 = v24;
              int v551 = v23;
              int v550 = v24;
              if (v27 < 0) {
                int v27 = -v27;
              }
              if (v28 < 0) {
                int v28 = -v28;
              }
              if (v29 < 0) {
                int v29 = -v29;
              }
              if (v27 >= v28 && v27 >= v29)
              {
                v205 = &v531;
                v206 = &v553;
                int v207 = v23;
                goto LABEL_371;
              }
              if (v28 >= v29)
              {
                v205 = &v528;
                v206 = &v552;
                int v207 = v24;
                int v194 = v195;
LABEL_371:
                int *v206 = v22;
                int *v205 = v196;
                int v237 = v553;
                int v196 = v194;
              }
              else
              {
                int v237 = v23;
                int v207 = v22;
              }
              if (v196 >= 0) {
                int v262 = v196;
              }
              else {
                int v262 = -v196;
              }
              if (v196 >= 0) {
                int v263 = v207;
              }
              else {
                int v263 = -v207;
              }
              int v264 = v552;
              if (v263 < 0)
              {
                if (v552 >= 0) {
                  int v266 = v552;
                }
                else {
                  int v266 = -v552;
                }
                int v267 = v266 - v6;
                int v268 = v6 - v266;
                if (v237 >= 0) {
                  int v265 = v268;
                }
                else {
                  int v265 = v267;
                }
                if (v237 >= 0) {
                  int v269 = v237;
                }
                else {
                  int v269 = -v237;
                }
                if (v552 < 0) {
                  int v264 = v269 - v6;
                }
                else {
                  int v264 = v6 - v269;
                }
              }
              else
              {
                int v265 = v237;
              }
              int v406 = v204 >> 1;
              if (v201 >= 0) {
                unsigned int v407 = v201;
              }
              else {
                unsigned int v407 = -v201;
              }
              if (v203 >= 0) {
                unsigned int v408 = v203;
              }
              else {
                unsigned int v408 = -v203;
              }
              if (v406 >= 0) {
                unsigned int v409 = v406;
              }
              else {
                unsigned int v409 = -v406;
              }
              if (v407 >= v408 && v407 >= v409)
              {
                v411 = &v555;
                v412 = &v551;
                unsigned int v409 = v407;
LABEL_673:
                int *v412 = v22;
                int v22 = v23;
                int *v411 = v406;
                int v23 = v551;
                int v406 = v201;
              }
              else if (v408 >= v409)
              {
                v411 = &v554;
                v412 = &v550;
                unsigned int v409 = v408;
                int v23 = v24;
                int v201 = v203;
                goto LABEL_673;
              }
              if (v406 >= 0) {
                int v413 = v22;
              }
              else {
                int v413 = -v22;
              }
              int v414 = v550;
              uint64_t v527 = v9;
              if (v413 < 0)
              {
                if (v550 >= 0) {
                  int v416 = v550;
                }
                else {
                  int v416 = -v550;
                }
                int v417 = v416 - v6;
                int v418 = v6 - v416;
                if (v23 >= 0) {
                  int v415 = v418;
                }
                else {
                  int v415 = v417;
                }
                if (v23 < 0) {
                  int v23 = -v23;
                }
                if (v550 < 0) {
                  int v414 = v23 - v6;
                }
                else {
                  int v414 = v6 - v23;
                }
              }
              else
              {
                int v415 = v23;
              }
              int v419 = v531;
              int v420 = v265 - v531;
              int v421 = v528;
              int v537 = v265 - v531;
              int v538 = v264 - v528;
              int v539 = v263 - v262;
              int v422 = v555;
              int v423 = v415 - v555;
              int v424 = v554;
              int v534 = v415 - v555;
              int v535 = v414 - v554;
              unsigned int v536 = v413 - v409;
              if (*(unsigned char *)(a2 + 24))
              {
                int v493 = v554;
                int v496 = v555;
                int v499 = v415;
                int v502 = v414;
                int v506 = v413;
                int v512 = v528;
                int v516 = v531;
                int v425 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((v563 + 2048) >> 10) & 0x7CLL));
                int v426 = sub_2170C4034(&v537, v521, *v517, (unsigned __int16 **)v573);
                int v427 = *(_DWORD *)((char *)&unk_2174AFBD0
                                 + (((67584 - (unint64_t)v563) >> 10) & 0x3FFFFFFFFFFFFCLL));
                int v428 = sub_2170C4034(&v534, v521, *v517, (unsigned __int16 **)v573);
                goto LABEL_730;
              }
LABEL_731:
              if ((int)v521 >= 1)
              {
                if (v420 < 0) {
                  int v420 = -v420;
                }
                signed int v437 = -(v521 * __clz(v420 + 1));
                if (v423 < 0) {
                  int v423 = -v423;
                }
                signed int v438 = -(v521 * __clz(v423 + 1));
                unint64_t v2 = v518;
                uint64_t v9 = v527;
                goto LABEL_737;
              }
              BOOL v439 = 0;
              unint64_t v2 = v518;
              uint64_t v9 = v527;
LABEL_740:
              int v556 = v419;
              int v557 = v421;
              int v558 = v262;
              int v559 = v265;
              int v560 = v264;
              int v561 = v263;
              sub_2170A5080(v522, v439, &v563);
              unsigned int v341 = 0;
              uint64_t v3 = v521;
              uint64_t v8 = v520;
              unsigned int v11 = (unsigned char *)(a2 + 8);
              goto LABEL_741;
            }
          }
          if (v31 == -1 || v10 && !*(unsigned char *)(v2[387] + v31))
          {
            unint64_t v225 = v27 * (uint64_t)v23 + v28 * (uint64_t)v24 + v29 * (uint64_t)v22;
            if ((v225 & 0x8000000000000000) != 0)
            {
              int v556 = -v27;
              int v557 = -v28;
              int v558 = -v29;
            }
            sub_2170A5080(v522, v225 >> 63, &v562);
            int v226 = v561;
            int v227 = v557;
            int v228 = v558;
            if (v556 >= 0) {
              unsigned int v229 = v556;
            }
            else {
              unsigned int v229 = -v556;
            }
            if (v557 >= 0) {
              unsigned int v230 = v557;
            }
            else {
              unsigned int v230 = -v557;
            }
            if (v558 >= 0) {
              unsigned int v231 = v558;
            }
            else {
              unsigned int v231 = -v558;
            }
            if (v229 >= v230 && v229 >= v231)
            {
              v232 = &v556;
              v233 = &v559;
              int v227 = v556;
              goto LABEL_315;
            }
            v232 = &v557;
            v233 = &v560;
            if (v230 >= v231)
            {
LABEL_315:
              int v238 = *v233;
              int *v233 = v561;
              int v561 = v238;
              int *v232 = v228;
              int v558 = v227;
              int v226 = v238;
              int v228 = v227;
            }
            if (v228 < 0)
            {
              int v558 = -v228;
              int v226 = -v226;
              int v561 = v226;
            }
            int v239 = v559;
            int v240 = v560;
            if (v226 < 0)
            {
              if (v560 >= 0) {
                int v260 = v560;
              }
              else {
                int v260 = -v560;
              }
              int v261 = v260 - v6;
              int v241 = v6 - v260;
              if (v559 < 0)
              {
                int v241 = v261;
                int v239 = -v559;
              }
              if (v560 < 0) {
                int v240 = v239 - v6;
              }
              else {
                int v240 = v6 - v239;
              }
            }
            else
            {
              int v241 = v559;
            }
            unsigned int v341 = 0;
            int v559 = v241;
            int v560 = v240;
            goto LABEL_741;
          }
          v208 = (_DWORD *)(v8 + 4 * (int)v31 * (int)v3);
          int v209 = *v208 - v6;
          int v210 = v208[1] - v6;
          if (v209 >= 0) {
            int v211 = *v208 - v6;
          }
          else {
            int v211 = v6 - *v208;
          }
          if (v210 >= 0) {
            int v212 = v210;
          }
          else {
            int v212 = -v210;
          }
          int v213 = v6 - v211;
          int v214 = v212 - v6;
          if (v209 >= 0) {
            int v214 = v6 - v212;
          }
          int v215 = v211 - v6;
          if (v210 >= 0) {
            int v216 = v213;
          }
          else {
            int v216 = v215;
          }
          int v217 = v213 - v212;
          if (v213 - v212 < 0)
          {
            int v209 = v214;
            int v210 = v216;
          }
          int v531 = v209;
          int v528 = v210;
          uint64_t v218 = v29 * (uint64_t)v217 + v27 * (uint64_t)v209 + v28 * (uint64_t)v210;
          if (v218 >= 0) {
            int v219 = v27;
          }
          else {
            int v219 = -v27;
          }
          if (v218 >= 0) {
            int v220 = v28;
          }
          else {
            int v220 = -v28;
          }
          if (v218 >= 0) {
            int v221 = v29;
          }
          else {
            int v221 = -v29;
          }
          int v555 = v219;
          int v554 = v220;
          int v553 = v23;
          int v552 = v24;
          int v551 = v23;
          int v550 = v24;
          if (v27 < 0) {
            int v27 = -v27;
          }
          if (v28 < 0) {
            int v28 = -v28;
          }
          if (v29 < 0) {
            int v29 = -v29;
          }
          if (v27 >= v28 && v27 >= v29)
          {
            v242 = &v555;
            v243 = &v553;
            int v224 = v23;
          }
          else
          {
            if (v28 < v29)
            {
              int v223 = v23;
              int v224 = v22;
              goto LABEL_393;
            }
            v242 = &v554;
            v243 = &v552;
            int v224 = v24;
            int v219 = v220;
          }
          int *v243 = v22;
          int *v242 = v221;
          int v223 = v553;
          int v221 = v219;
LABEL_393:
          if (v221 >= 0) {
            int v262 = v221;
          }
          else {
            int v262 = -v221;
          }
          if (v221 >= 0) {
            int v263 = v224;
          }
          else {
            int v263 = -v224;
          }
          int v264 = v552;
          if (v263 < 0)
          {
            if (v552 >= 0) {
              int v270 = v552;
            }
            else {
              int v270 = -v552;
            }
            int v271 = v270 - v6;
            int v272 = v6 - v270;
            if (v223 >= 0) {
              int v265 = v272;
            }
            else {
              int v265 = v271;
            }
            if (v223 >= 0) {
              int v273 = v223;
            }
            else {
              int v273 = -v223;
            }
            if (v552 < 0) {
              int v264 = v273 - v6;
            }
            else {
              int v264 = v6 - v273;
            }
          }
          else
          {
            int v265 = v223;
          }
          if (v209 >= 0) {
            unsigned int v429 = v209;
          }
          else {
            unsigned int v429 = -v209;
          }
          if (v210 >= 0) {
            unsigned int v430 = v210;
          }
          else {
            unsigned int v430 = -v210;
          }
          if (v217 >= 0) {
            unsigned int v409 = v217;
          }
          else {
            unsigned int v409 = -v217;
          }
          if (v429 >= v430 && v429 >= v409)
          {
            v432 = &v531;
            v433 = &v551;
            unsigned int v409 = v429;
LABEL_711:
            int *v433 = v22;
            int v22 = v23;
            int *v432 = v217;
            int v23 = v551;
            int v217 = v209;
          }
          else if (v430 >= v409)
          {
            v432 = &v528;
            v433 = &v550;
            unsigned int v409 = v430;
            int v23 = v24;
            int v209 = v210;
            goto LABEL_711;
          }
          if (v217 >= 0) {
            int v413 = v22;
          }
          else {
            int v413 = -v22;
          }
          int v414 = v550;
          uint64_t v527 = v9;
          if (v413 < 0)
          {
            if (v550 >= 0) {
              int v434 = v550;
            }
            else {
              int v434 = -v550;
            }
            int v435 = v434 - v6;
            int v436 = v6 - v434;
            if (v23 >= 0) {
              int v415 = v436;
            }
            else {
              int v415 = v435;
            }
            if (v23 < 0) {
              int v23 = -v23;
            }
            if (v550 < 0) {
              int v414 = v23 - v6;
            }
            else {
              int v414 = v6 - v23;
            }
          }
          else
          {
            int v415 = v23;
          }
          int v419 = v555;
          int v420 = v265 - v555;
          int v421 = v554;
          int v537 = v265 - v555;
          int v538 = v264 - v554;
          int v539 = v263 - v262;
          int v422 = v531;
          int v423 = v415 - v531;
          int v424 = v528;
          int v534 = v415 - v531;
          int v535 = v414 - v528;
          unsigned int v536 = v413 - v409;
          if (!*(unsigned char *)(a2 + 24)) {
            goto LABEL_731;
          }
          int v493 = v528;
          int v496 = v531;
          int v499 = v415;
          int v502 = v414;
          int v506 = v413;
          int v512 = v554;
          int v516 = v555;
          int v425 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((v563 + 2048) >> 10) & 0x7CLL));
          int v426 = sub_2170C4034(&v537, v521, *v517, (unsigned __int16 **)v573);
          int v427 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((67584 - (unint64_t)v563) >> 10) & 0x3FFFFFFFFFFFFCLL));
          int v428 = sub_2170C4034(&v534, v521, *v517, (unsigned __int16 **)v573);
LABEL_730:
          signed int v437 = v426 + v425;
          signed int v438 = v428 + v427;
          unint64_t v2 = v518;
          uint64_t v9 = v527;
          int v6 = v507;
          int v10 = v508;
          int v421 = v512;
          int v419 = v516;
          int v414 = v502;
          int v413 = v506;
          int v422 = v496;
          int v415 = v499;
          int v424 = v493;
LABEL_737:
          if (v437 > v438)
          {
            int v419 = v422;
            int v421 = v424;
            int v262 = v409;
            int v265 = v415;
            int v264 = v414;
            int v263 = v413;
          }
          BOOL v439 = v437 > v438;
          goto LABEL_740;
        }
        uint64_t v121 = (_DWORD *)(v8 + 4 * (int)v31 * (int)v3);
        int v122 = v121[1];
        int v123 = *v121 - v6;
        int v124 = v122 - v6;
        if (v123 >= 0) {
          int v125 = v123;
        }
        else {
          int v125 = -v123;
        }
        if (v124 >= 0) {
          int v126 = v122 - v6;
        }
        else {
          int v126 = v6 - v122;
        }
        int v127 = v6 - v125;
        int v128 = v6 - v125 - v126;
        if (v128 < 0)
        {
          int v129 = v126 - v6;
          int v130 = v6 - v126;
          if (v123 >= 0) {
            int v123 = v130;
          }
          else {
            int v123 = v129;
          }
          int v131 = v125 - v6;
          if (v124 >= 0) {
            int v124 = v127;
          }
          else {
            int v124 = v131;
          }
        }
        int v132 = (_DWORD *)(v8 + 4 * (int)v32 * (int)v3);
        int v133 = *v132 - v6;
        int v134 = v132[1] - v6;
        if (v133 >= 0) {
          int v135 = *v132 - v6;
        }
        else {
          int v135 = v6 - *v132;
        }
        if (v134 >= 0) {
          int v136 = v134;
        }
        else {
          int v136 = -v134;
        }
        int v137 = v6 - v135;
        int v138 = v6 - v135 - v136;
        if (v138 < 0)
        {
          int v139 = v136 - v6;
          int v140 = v6 - v136;
          if (v133 >= 0) {
            int v133 = v140;
          }
          else {
            int v133 = v139;
          }
          int v141 = v135 - v6;
          if (v134 >= 0) {
            int v134 = v137;
          }
          else {
            int v134 = v141;
          }
        }
        v142 = (_DWORD *)(v8 + 4 * (int)v33 * (int)v3);
        int v143 = *v142 - v6;
        int v144 = v142[1] - v6;
        if (v143 >= 0) {
          int v145 = *v142 - v6;
        }
        else {
          int v145 = v6 - *v142;
        }
        if (v144 >= 0) {
          int v146 = v142[1] - v6;
        }
        else {
          int v146 = v6 - v142[1];
        }
        int v147 = v6 - v145;
        int v148 = v6 - v145 - v146;
        if (v148 < 0)
        {
          int v149 = v146 - v6;
          int v150 = v6 - v146;
          if (v143 >= 0) {
            int v143 = v150;
          }
          else {
            int v143 = v149;
          }
          int v151 = v145 - v6;
          if (v144 >= 0) {
            int v144 = v147;
          }
          else {
            int v144 = v151;
          }
        }
        uint64_t v152 = v29 * (uint64_t)v128 + v27 * (uint64_t)v123 + v28 * (uint64_t)v124;
        if (v152 >= 0) {
          int v153 = v27;
        }
        else {
          int v153 = -v27;
        }
        if (v152 >= 0) {
          int v154 = v28;
        }
        else {
          int v154 = -v28;
        }
        if (v152 >= 0) {
          int v155 = v29;
        }
        else {
          int v155 = -v29;
        }
        int v555 = v153;
        int v554 = v154;
        int v156 = v133 + v123;
        int v157 = v134 + v124;
        int v158 = v138 + v128;
        int v159 = v156 - v143;
        int v160 = v134 + v124 - v144;
        int v553 = v156 - v143;
        int v552 = v160;
        int v161 = v156 + 1;
        int v162 = v157 + 1;
        int v163 = v158 + 1;
        if (v156 + 1 >= 0) {
          int v164 = v156 + 1;
        }
        else {
          int v164 = v156 + 2;
        }
        int v165 = v164 >> 1;
        int v166 = v157 + 2;
        if (v162 >= 0) {
          int v166 = v157 + 1;
        }
        int v167 = v166 >> 1;
        int v551 = v165;
        int v550 = v166 >> 1;
        int v168 = (v161 + v143) / 3;
        int v169 = (v162 + v144) / 3;
        int v549 = v168;
        int v548 = v169;
        if (v163 >= 0) {
          int v170 = v158 + 1;
        }
        else {
          int v170 = v158 + 2;
        }
        int v547 = v23;
        int v546 = v24;
        int v545 = v23;
        int v544 = v24;
        int v543 = v23;
        int v542 = v24;
        int v541 = v23;
        int v540 = v24;
        if (v27 < 0) {
          int v27 = -v27;
        }
        if (v28 < 0) {
          int v28 = -v28;
        }
        if (v29 < 0) {
          int v29 = -v29;
        }
        if (v27 >= v28 && v27 >= v29)
        {
          v171 = &v555;
          v172 = &v547;
          int v173 = v23;
          goto LABEL_343;
        }
        if (v28 >= v29)
        {
          v171 = &v554;
          v172 = &v546;
          int v173 = v24;
          int v153 = v154;
LABEL_343:
          int *v172 = v22;
          int *v171 = v155;
          int v236 = v547;
          int v155 = v153;
        }
        else
        {
          int v236 = v23;
          int v173 = v22;
        }
        if (v155 >= 0) {
          int v252 = v173;
        }
        else {
          int v252 = -v173;
        }
        if (v155 >= 0) {
          int v253 = v155;
        }
        else {
          int v253 = -v155;
        }
        int v254 = v546;
        if (v252 < 0)
        {
          if (v546 >= 0) {
            int v256 = v546;
          }
          else {
            int v256 = -v546;
          }
          int v257 = v256 - v6;
          int v258 = v6 - v256;
          if (v236 >= 0) {
            int v255 = v258;
          }
          else {
            int v255 = v257;
          }
          if (v236 >= 0) {
            int v259 = v236;
          }
          else {
            int v259 = -v236;
          }
          if (v546 < 0) {
            int v254 = v259 - v6;
          }
          else {
            int v254 = v6 - v259;
          }
        }
        else
        {
          int v255 = v236;
        }
        int v342 = v158 - v148;
        int v547 = v255;
        int v546 = v254;
        if (v159 >= 0) {
          unsigned int v343 = v159;
        }
        else {
          unsigned int v343 = -v159;
        }
        if (v160 >= 0) {
          unsigned int v344 = v160;
        }
        else {
          unsigned int v344 = -v160;
        }
        if (v342 >= 0) {
          unsigned int v345 = v158 - v148;
        }
        else {
          unsigned int v345 = v148 - v158;
        }
        if (v343 >= v344 && v343 >= v345)
        {
          v346 = &v553;
          v347 = &v545;
          unsigned int v345 = v343;
          int v348 = v23;
          goto LABEL_547;
        }
        if (v344 >= v345)
        {
          v346 = &v552;
          v347 = &v544;
          unsigned int v345 = v344;
          int v348 = v24;
          int v159 = v160;
LABEL_547:
          int *v347 = v22;
          int *v346 = v342;
          int v349 = v545;
          int v342 = v159;
        }
        else
        {
          int v349 = v23;
          int v348 = v22;
        }
        if (v342 >= 0) {
          int v350 = v348;
        }
        else {
          int v350 = -v348;
        }
        int v351 = v544;
        if (v350 < 0)
        {
          if (v544 >= 0) {
            int v353 = v544;
          }
          else {
            int v353 = -v544;
          }
          int v354 = v353 - v6;
          int v355 = v6 - v353;
          if (v349 >= 0) {
            int v352 = v355;
          }
          else {
            int v352 = v354;
          }
          if (v349 >= 0) {
            int v356 = v349;
          }
          else {
            int v356 = -v349;
          }
          if (v544 < 0) {
            int v351 = v356 - v6;
          }
          else {
            int v351 = v6 - v356;
          }
        }
        else
        {
          int v352 = v349;
        }
        int v357 = v170 >> 1;
        int v545 = v352;
        int v544 = v351;
        if (v165 >= 0) {
          unsigned int v358 = v165;
        }
        else {
          unsigned int v358 = -v165;
        }
        if (v167 >= 0) {
          unsigned int v359 = v167;
        }
        else {
          unsigned int v359 = -v167;
        }
        if (v357 >= 0) {
          unsigned int v360 = v170 >> 1;
        }
        else {
          unsigned int v360 = -v357;
        }
        if (v358 >= v359 && v358 >= v360)
        {
          v361 = &v551;
          v362 = &v543;
          int v363 = v23;
          goto LABEL_580;
        }
        if (v359 >= v360)
        {
          v361 = &v550;
          v362 = &v542;
          unsigned int v358 = v359;
          int v363 = v24;
          int v165 = v167;
LABEL_580:
          int *v362 = v22;
          int *v361 = v357;
          int v364 = v543;
          int v357 = v165;
          unsigned int v360 = v358;
        }
        else
        {
          int v364 = v23;
          int v363 = v22;
        }
        if (v357 >= 0) {
          int v365 = v363;
        }
        else {
          int v365 = -v363;
        }
        int v366 = v542;
        if (v365 < 0)
        {
          if (v542 >= 0) {
            int v368 = v542;
          }
          else {
            int v368 = -v542;
          }
          int v369 = v368 - v6;
          int v370 = v6 - v368;
          if (v364 >= 0) {
            int v367 = v370;
          }
          else {
            int v367 = v369;
          }
          if (v364 >= 0) {
            int v371 = v364;
          }
          else {
            int v371 = -v364;
          }
          if (v542 < 0) {
            int v366 = v371 - v6;
          }
          else {
            int v366 = v6 - v371;
          }
        }
        else
        {
          int v367 = v364;
        }
        int v372 = (v163 + v148) / 3;
        int v543 = v367;
        int v542 = v366;
        if (v168 >= 0) {
          unsigned int v373 = v168;
        }
        else {
          unsigned int v373 = -v168;
        }
        if (v169 >= 0) {
          unsigned int v374 = v169;
        }
        else {
          unsigned int v374 = -v169;
        }
        if (v372 >= 0) {
          unsigned int v375 = v372;
        }
        else {
          unsigned int v375 = -v372;
        }
        if (v373 >= v374 && v373 >= v375)
        {
          v376 = &v549;
          v377 = &v541;
          unsigned int v375 = v373;
          goto LABEL_612;
        }
        if (v374 >= v375)
        {
          v376 = &v548;
          v377 = &v540;
          unsigned int v375 = v374;
          int v23 = v24;
          int v168 = v169;
LABEL_612:
          int *v377 = v22;
          int v22 = v23;
          int *v376 = v372;
          int v23 = v541;
          int v372 = v168;
        }
        if (v372 >= 0) {
          int v378 = v22;
        }
        else {
          int v378 = -v22;
        }
        int v379 = v540;
        uint64_t v526 = v9;
        if (v378 < 0)
        {
          if (v540 >= 0) {
            int v381 = v540;
          }
          else {
            int v381 = -v540;
          }
          int v382 = v381 - v6;
          int v383 = v6 - v381;
          if (v23 >= 0) {
            int v380 = v383;
          }
          else {
            int v380 = v382;
          }
          if (v23 < 0) {
            int v23 = -v23;
          }
          if (v540 < 0) {
            int v379 = v23 - v6;
          }
          else {
            int v379 = v6 - v23;
          }
        }
        else
        {
          int v380 = v23;
        }
        int v541 = v380;
        int v540 = v379;
        int v384 = v555;
        int v385 = v255 - v555;
        int v515 = v554;
        int v537 = v255 - v555;
        int v538 = v254 - v554;
        int v539 = v252 - v253;
        int v511 = v553;
        int v386 = v352 - v553;
        int v505 = v552;
        int v534 = v352 - v553;
        int v535 = v351 - v552;
        unsigned int v536 = v350 - v345;
        int v456 = v551;
        int v387 = v367 - v551;
        int v454 = v550;
        int v531 = v367 - v551;
        int v532 = v366 - v550;
        unsigned int v533 = v365 - v360;
        int v452 = v549;
        int v388 = v380 - v549;
        int v450 = v548;
        int v528 = v380 - v549;
        int v529 = v379 - v548;
        unsigned int v530 = v378 - v375;
        unsigned int v458 = v375;
        if (*(unsigned char *)(a2 + 24))
        {
          int v470 = v555;
          int v472 = v380;
          int v474 = v379;
          int v476 = v378;
          int v478 = v367;
          int v480 = v366;
          int v482 = v365;
          unsigned int v484 = v360;
          int v486 = v352;
          int v488 = v351;
          int v490 = v350;
          unsigned int v491 = v345;
          int v495 = v253;
          int v498 = v254;
          int v501 = v252;
          int v466 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((v568 + 2048) >> 10) & 0x7CLL));
          int v468 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((__b + 2048) >> 10) & 0x7CLL));
          int v464 = sub_2170C4034(&v537, v3, *v11, (unsigned __int16 **)&v573[7] + 1);
          uint64_t v389 = v3;
          int v460 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((v569 + 2048) >> 10) & 0x7CLL));
          int v462 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((67584 - (unint64_t)__b) >> 10) & 0x3FFFFFFFFFFFFCLL));
          int v390 = sub_2170C4034(&v534, v3, *v11, (unsigned __int16 **)&v573[7] + 1);
          int v391 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((__b + 2048) >> 10) & 0x7CLL));
          int v392 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((67584 - (unint64_t)v568) >> 10) & 0x3FFFFFFFFFFFFCLL));
          int v393 = sub_2170C4034(&v531, v3, *v11, (unsigned __int16 **)&v573[7] + 1);
          int v394 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((67584 - (unint64_t)__b) >> 10) & 0x3FFFFFFFFFFFFCLL));
          int v395 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((67584 - (unint64_t)v569) >> 10) & 0x3FFFFFFFFFFFFCLL));
          int v396 = sub_2170C4034(&v528, v389, *v11, (unsigned __int16 **)&v573[7] + 1);
          int v397 = v466 + v468 + v464;
          int v398 = v460 + v462 + v390;
          int v399 = v392 + v391 + v393;
          int v400 = v395 + v394 + v396;
          unint64_t v2 = v518;
          uint64_t v3 = v389;
          uint64_t v8 = v520;
          uint64_t v9 = v526;
          int v6 = v507;
          int v254 = v498;
          int v252 = v501;
          int v253 = v495;
          int v350 = v490;
          unsigned int v345 = v491;
          int v352 = v486;
          int v351 = v488;
          int v365 = v482;
          unsigned int v360 = v484;
          int v367 = v478;
          int v366 = v480;
          int v379 = v474;
          int v378 = v476;
          int v384 = v470;
          int v380 = v472;
        }
        else
        {
          if ((int)v3 < 1)
          {
            int v397 = 0;
            int v398 = 0;
            int v399 = 0;
            int v400 = 0;
          }
          else
          {
            if (v385 < 0) {
              int v385 = v555 - v255;
            }
            int v397 = -(v3 * __clz(v385 + 1));
            if (v386 < 0) {
              int v386 = v553 - v352;
            }
            int v398 = -(v3 * __clz(v386 + 1));
            if (v387 < 0) {
              int v387 = v551 - v367;
            }
            int v399 = -(v3 * __clz(v387 + 1));
            if (v388 < 0) {
              int v388 = v549 - v380;
            }
            int v400 = -(v3 * __clz(v388 + 1));
          }
          unint64_t v2 = v518;
          uint64_t v8 = v520;
        }
        if (v397 > v398 || v397 > v399 || v397 > v400)
        {
          if (v398 > v399 || v398 > v400)
          {
            if (v399 <= v400)
            {
              int v405 = v367;
              int v402 = 0;
              int v556 = v456;
              int v557 = v454;
              int v401 = 1;
              int v558 = v360;
              int v254 = v366;
              int v252 = v365;
              uint64_t v403 = 1;
              int v559 = v405;
            }
            else
            {
              int v556 = v452;
              int v557 = v450;
              int v401 = 1;
              int v254 = v379;
              int v558 = v458;
              int v252 = v378;
              int v402 = 1;
              uint64_t v403 = 2;
              int v559 = v380;
            }
          }
          else
          {
            int v404 = v345;
            int v401 = 0;
            int v556 = v511;
            int v557 = v505;
            int v402 = 1;
            int v558 = v404;
            int v254 = v351;
            int v252 = v350;
            uint64_t v403 = 2;
            int v559 = v352;
          }
        }
        else
        {
          int v401 = 0;
          int v402 = 0;
          int v556 = v384;
          int v557 = v515;
          int v558 = v253;
          uint64_t v403 = 1;
          int v559 = v255;
        }
        int v560 = v254;
        int v561 = v252;
        sub_2170A5080(v522, v402, &__b);
        sub_2170A5080(v522, v401, &__b + v403);
        unsigned int v341 = 1;
        goto LABEL_655;
      }
      uint64_t v39 = (_DWORD *)(v8 + 4 * (int)v31 * (int)v3);
      int v40 = v39[1];
      int v41 = *v39 - v6;
      int v42 = v40 - v6;
      if (v41 >= 0) {
        int v43 = v41;
      }
      else {
        int v43 = -v41;
      }
      if (v42 >= 0) {
        int v44 = v40 - v6;
      }
      else {
        int v44 = v6 - v40;
      }
      int v45 = v6 - v43;
      int v46 = v6 - v43 - v44;
      if (v46 < 0)
      {
        int v47 = v44 - v6;
        int v48 = v6 - v44;
        if (v41 >= 0) {
          int v41 = v48;
        }
        else {
          int v41 = v47;
        }
        int v49 = v43 - v6;
        if (v42 >= 0) {
          int v42 = v45;
        }
        else {
          int v42 = v49;
        }
      }
      uint64_t v50 = (_DWORD *)(v8 + 4 * (int)v32 * (int)v3);
      int v51 = *v50 - v6;
      int v52 = v50[1] - v6;
      if (v51 >= 0) {
        int v53 = *v50 - v6;
      }
      else {
        int v53 = v6 - *v50;
      }
      if (v52 >= 0) {
        int v54 = v52;
      }
      else {
        int v54 = -v52;
      }
      int v55 = v6 - v53;
      int v56 = v6 - v53 - v54;
      if (v56 < 0)
      {
        int v57 = v54 - v6;
        int v58 = v6 - v54;
        if (v51 >= 0) {
          int v51 = v58;
        }
        else {
          int v51 = v57;
        }
        int v59 = v53 - v6;
        if (v52 >= 0) {
          int v52 = v55;
        }
        else {
          int v52 = v59;
        }
      }
      int v60 = (_DWORD *)(v8 + 4 * (int)v33 * (int)v3);
      int v61 = *v60 - v6;
      int v62 = v60[1] - v6;
      if (v61 >= 0) {
        int v63 = *v60 - v6;
      }
      else {
        int v63 = v6 - *v60;
      }
      if (v62 >= 0) {
        int v64 = v62;
      }
      else {
        int v64 = -v62;
      }
      int v65 = v6 - v63;
      int v503 = v6 - v63 - v64;
      if (v503 < 0)
      {
        int v66 = v64 - v6;
        int v67 = v6 - v64;
        if (v61 >= 0) {
          int v61 = v67;
        }
        else {
          int v61 = v66;
        }
        int v68 = v63 - v6;
        if (v62 >= 0) {
          int v62 = v65;
        }
        else {
          int v62 = v68;
        }
      }
      uint64_t v69 = (_DWORD *)(v8 + 4 * (int)v36 * (int)v3);
      int v70 = *v69 - v6;
      int v71 = v69[1] - v6;
      if (v70 >= 0) {
        int v72 = *v69 - v6;
      }
      else {
        int v72 = v6 - *v69;
      }
      if (v71 >= 0) {
        int v73 = v71;
      }
      else {
        int v73 = -v71;
      }
      int v74 = v6 - v72;
      int v509 = v6 - v72 - v73;
      uint64_t v525 = v9;
      int v75 = v56;
      if (v509 < 0)
      {
        int v76 = v73 - v6;
        int v77 = v6 - v73;
        if (v70 >= 0) {
          int v70 = v77;
        }
        else {
          int v70 = v76;
        }
        int v78 = v72 - v6;
        if (v71 >= 0) {
          int v71 = v74;
        }
        else {
          int v71 = v78;
        }
      }
      uint64_t v79 = (_DWORD *)(v8 + 4 * (int)v37 * (int)v3);
      int v80 = *v79 - v6;
      int v81 = v79[1] - v6;
      if (v80 >= 0) {
        int v82 = *v79 - v6;
      }
      else {
        int v82 = v6 - *v79;
      }
      if (v81 >= 0) {
        int v83 = v81;
      }
      else {
        int v83 = -v81;
      }
      int v84 = v6 - v82;
      int v513 = v6 - v82 - v83;
      if (v513 < 0)
      {
        int v85 = v83 - v6;
        int v86 = v6 - v83;
        if (v80 >= 0) {
          int v80 = v86;
        }
        else {
          int v80 = v85;
        }
        int v87 = v82 - v6;
        if (v81 >= 0) {
          int v81 = v84;
        }
        else {
          int v81 = v87;
        }
      }
      uint64_t v88 = (_DWORD *)(v8 + 4 * (int)v35 * (int)v3);
      int v89 = *v88 - v6;
      int v90 = v88[1] - v6;
      if (v89 >= 0) {
        int v91 = *v88 - v6;
      }
      else {
        int v91 = v6 - *v88;
      }
      if (v90 >= 0) {
        int v92 = v90;
      }
      else {
        int v92 = -v90;
      }
      int v93 = v6 - v91;
      int v94 = v6 - v91 - v92;
      if (v94 < 0)
      {
        int v95 = v92 - v6;
        int v96 = v6 - v92;
        if (v89 >= 0) {
          int v89 = v96;
        }
        else {
          int v89 = v95;
        }
        int v97 = v91 - v6;
        if (v90 >= 0) {
          int v90 = v93;
        }
        else {
          int v90 = v97;
        }
      }
      uint64_t v98 = v29 * (uint64_t)v46 + v27 * (uint64_t)v41 + v28 * (uint64_t)v42;
      BOOL v99 = v98 < 0;
      if (v98 >= 0) {
        int v100 = v27;
      }
      else {
        int v100 = -v27;
      }
      if (v98 >= 0) {
        int v101 = v28;
      }
      else {
        int v101 = -v28;
      }
      if (v99) {
        int v102 = -v29;
      }
      else {
        int v102 = v29;
      }
      int v555 = v100;
      int v554 = v101;
      int v103 = v51 + v41 - v61;
      int v104 = v52 + v42 - v62;
      int v553 = v103;
      int v552 = v104;
      int v105 = v80 + v70 - v89;
      int v106 = v81 + v71 - v90;
      int v551 = v105;
      int v550 = v106;
      BOOL v107 = __OFADD__(v70, v41);
      int v108 = v70 + v41;
      int v109 = v71 + v42;
      int v110 = v509 + v46;
      if (v108 < 0 != v107) {
        ++v108;
      }
      unint64_t v111 = 1431655766 * ((v108 >> 1) + 2 * (v80 + v51) - (v61 + v89));
      int v112 = HIDWORD(v111) + (v111 >> 63);
      unint64_t v113 = 1431655766 * (v109 / 2 + 2 * (v81 + v52) - (v62 + v90));
      int v114 = HIDWORD(v113) + (v113 >> 63);
      int v549 = v112;
      int v548 = v114;
      if (v110 >= 0) {
        int v115 = v509 + v46;
      }
      else {
        int v115 = v110 + 1;
      }
      int v547 = v23;
      int v546 = v24;
      int v545 = v23;
      int v544 = v24;
      int v543 = v23;
      int v542 = v24;
      int v541 = v23;
      int v540 = v24;
      if (v27 < 0) {
        int v27 = -v27;
      }
      if (v28 < 0) {
        int v28 = -v28;
      }
      if (v29 < 0) {
        int v29 = -v29;
      }
      if (v27 < v28 || v27 < v29)
      {
        unsigned int v11 = (unsigned char *)(a2 + 8);
        int v119 = v75;
        if (v28 < v29)
        {
          int v234 = v23;
          int v118 = v22;
          int v235 = v503;
          goto LABEL_323;
        }
        int v116 = &v554;
        int v117 = &v546;
        int v118 = v24;
        int v100 = v101;
      }
      else
      {
        int v116 = &v555;
        int v117 = &v547;
        int v118 = v23;
        unsigned int v11 = (unsigned char *)(a2 + 8);
        int v119 = v75;
      }
      int v235 = v503;
      *int v117 = v22;
      *int v116 = v102;
      int v234 = v547;
      int v102 = v100;
LABEL_323:
      if (v102 >= 0) {
        int v244 = v118;
      }
      else {
        int v244 = -v118;
      }
      if (v102 >= 0) {
        int v245 = v102;
      }
      else {
        int v245 = -v102;
      }
      int v246 = v546;
      if (v244 < 0)
      {
        if (v546 >= 0) {
          int v248 = v546;
        }
        else {
          int v248 = -v546;
        }
        int v249 = v248 - v6;
        int v250 = v6 - v248;
        if (v234 >= 0) {
          int v247 = v250;
        }
        else {
          int v247 = v249;
        }
        if (v234 >= 0) {
          int v251 = v234;
        }
        else {
          int v251 = -v234;
        }
        uint64_t v3 = v521;
        if (v546 < 0) {
          int v246 = v251 - v6;
        }
        else {
          int v246 = v6 - v251;
        }
      }
      else
      {
        int v247 = v234;
        uint64_t v3 = v521;
      }
      int v274 = v119 + v46 - v235;
      int v547 = v247;
      int v546 = v246;
      if (v103 >= 0) {
        unsigned int v275 = v103;
      }
      else {
        unsigned int v275 = -v103;
      }
      if (v104 >= 0) {
        unsigned int v276 = v104;
      }
      else {
        unsigned int v276 = -v104;
      }
      if (v274 >= 0) {
        unsigned int v277 = v119 + v46 - v235;
      }
      else {
        unsigned int v277 = v235 - (v119 + v46);
      }
      if (v275 < v276 || v275 < v277)
      {
        if (v276 < v277)
        {
          int v281 = v23;
          int v280 = v22;
          goto LABEL_429;
        }
        v278 = &v552;
        v279 = &v544;
        unsigned int v277 = v276;
        int v280 = v24;
        int v103 = v104;
      }
      else
      {
        v278 = &v553;
        v279 = &v545;
        unsigned int v277 = v275;
        int v280 = v23;
      }
      int *v279 = v22;
      int *v278 = v274;
      int v281 = v545;
      int v274 = v103;
LABEL_429:
      if (v274 >= 0) {
        int v282 = v280;
      }
      else {
        int v282 = -v280;
      }
      int v283 = v544;
      if (v282 < 0)
      {
        if (v544 >= 0) {
          int v285 = v544;
        }
        else {
          int v285 = -v544;
        }
        int v284 = v285 - v6;
        int v286 = v6 - v285;
        if (v281 < 0)
        {
          int v287 = -v281;
        }
        else
        {
          int v284 = v286;
          int v287 = v281;
        }
        if (v544 < 0) {
          int v283 = v287 - v6;
        }
        else {
          int v283 = v6 - v287;
        }
      }
      else
      {
        int v284 = v281;
      }
      int v288 = v513 + v509 - v94;
      int v510 = v284;
      int v545 = v284;
      int v544 = v283;
      if (v105 >= 0) {
        unsigned int v289 = v105;
      }
      else {
        unsigned int v289 = -v105;
      }
      if (v106 >= 0) {
        unsigned int v290 = v106;
      }
      else {
        unsigned int v290 = -v106;
      }
      if (v288 >= 0) {
        unsigned int v291 = v288;
      }
      else {
        unsigned int v291 = -v288;
      }
      if (v289 < v290 || v289 < v291)
      {
        if (v290 < v291)
        {
          int v295 = v23;
          int v294 = v22;
          goto LABEL_459;
        }
        v292 = &v550;
        v293 = &v542;
        unsigned int v289 = v290;
        int v294 = v24;
        int v105 = v106;
      }
      else
      {
        v292 = &v551;
        v293 = &v543;
        int v294 = v23;
      }
      int *v293 = v22;
      int *v292 = v288;
      int v295 = v543;
      int v288 = v105;
      unsigned int v291 = v289;
LABEL_459:
      if (v288 >= 0) {
        int v296 = v294;
      }
      else {
        int v296 = -v294;
      }
      int v297 = v542;
      if (v296 < 0)
      {
        if (v542 >= 0) {
          int v299 = v542;
        }
        else {
          int v299 = -v542;
        }
        int v300 = v299 - v6;
        int v301 = v6 - v299;
        if (v295 < 0)
        {
          int v302 = -v295;
        }
        else
        {
          int v300 = v301;
          int v302 = v295;
        }
        unsigned int v298 = v291;
        if (v542 < 0) {
          int v297 = v302 - v6;
        }
        else {
          int v297 = v6 - v302;
        }
        int v295 = v300;
      }
      else
      {
        unsigned int v298 = v291;
      }
      unint64_t v303 = 1431655766 * ((v115 >> 1) + 2 * (v513 + v119) - (v235 + v94));
      int v304 = HIDWORD(v303) + (v303 >> 63);
      int v543 = v295;
      int v514 = v297;
      int v542 = v297;
      if (v112 >= 0) {
        unsigned int v305 = v112;
      }
      else {
        unsigned int v305 = -v112;
      }
      if (v114 >= 0) {
        unsigned int v306 = v114;
      }
      else {
        unsigned int v306 = -v114;
      }
      if (v304 >= 0) {
        unsigned int v307 = v304;
      }
      else {
        unsigned int v307 = -v304;
      }
      int v308 = v295;
      if (v305 < v306 || v305 < v307)
      {
        int v311 = v510;
        if (v306 < v307)
        {
          unsigned int v312 = v298;
          goto LABEL_490;
        }
        v309 = &v548;
        v310 = &v540;
        unsigned int v307 = v306;
        int v23 = v24;
        int v112 = v114;
      }
      else
      {
        v309 = &v549;
        v310 = &v541;
        unsigned int v307 = v305;
        int v311 = v510;
      }
      unsigned int v312 = v298;
      int *v310 = v22;
      int v22 = v23;
      int *v309 = v304;
      int v23 = v541;
      int v304 = v112;
LABEL_490:
      if (v304 >= 0) {
        int v313 = v22;
      }
      else {
        int v313 = -v22;
      }
      int v314 = v540;
      if (v313 < 0)
      {
        if (v540 >= 0) {
          int v316 = v540;
        }
        else {
          int v316 = -v540;
        }
        int v317 = v316 - v6;
        int v318 = v6 - v316;
        if (v23 >= 0) {
          int v315 = v318;
        }
        else {
          int v315 = v317;
        }
        if (v23 < 0) {
          int v23 = -v23;
        }
        if (v540 < 0) {
          int v314 = v23 - v6;
        }
        else {
          int v314 = v6 - v23;
        }
      }
      else
      {
        int v315 = v23;
      }
      int v541 = v315;
      int v540 = v314;
      int v319 = v555;
      int v320 = v247 - v555;
      int v321 = v554;
      int v537 = v247 - v555;
      int v538 = v246 - v554;
      int v539 = v244 - v245;
      int v322 = v311 - v553;
      int v497 = v552;
      int v534 = v311 - v553;
      int v535 = v283 - v552;
      unsigned int v536 = v282 - v277;
      int v455 = v551;
      int v323 = v308 - v551;
      int v453 = v550;
      int v531 = v308 - v551;
      int v532 = v514 - v550;
      unsigned int v533 = v296 - v312;
      int v451 = v549;
      int v324 = v315 - v549;
      int v449 = v548;
      int v528 = v315 - v549;
      int v529 = v314 - v548;
      unsigned int v530 = v313 - v307;
      int v500 = v553;
      int v504 = v247;
      unsigned int v463 = v307;
      int v465 = v308;
      int v459 = v314;
      int v461 = v313;
      int v457 = v315;
      if (*(unsigned char *)(a2 + 24))
      {
        int v477 = v554;
        int v479 = v555;
        int v481 = v296;
        unsigned int v483 = v312;
        int v485 = v283;
        int v487 = v282;
        unsigned int v489 = v277;
        int v492 = v246;
        int v494 = v244;
        int v473 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((v565 + 2048) >> 10) & 0x7CLL));
        int v475 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((v564 + 2048) >> 10) & 0x7CLL));
        int v471 = sub_2170C4034(&v537, v3, *v11, (unsigned __int16 **)v574);
        uint64_t v325 = v3;
        int v467 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((v566 + 2048) >> 10) & 0x7CLL));
        int v469 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((67584 - (unint64_t)v564) >> 10) & 0x3FFFFFFFFFFFFCLL));
        int v326 = sub_2170C4034(&v534, v3, *v11, (unsigned __int16 **)v574);
        int v327 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((v564 + 2048) >> 10) & 0x7CLL));
        int v328 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((67584 - (unint64_t)v565) >> 10) & 0x3FFFFFFFFFFFFCLL));
        int v329 = sub_2170C4034(&v531, v3, *v11, (unsigned __int16 **)v574);
        int v330 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((67584 - (unint64_t)v564) >> 10) & 0x3FFFFFFFFFFFFCLL));
        int v331 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((67584 - (unint64_t)v566) >> 10) & 0x3FFFFFFFFFFFFCLL));
        int v332 = sub_2170C4034(&v528, v325, *v11, (unsigned __int16 **)v574);
        int v333 = v473 + v475 + v471;
        int v334 = v467 + v469 + v326;
        int v335 = v328 + v327 + v329;
        int v336 = v331 + v330 + v332;
        unint64_t v2 = v518;
        uint64_t v3 = v325;
        uint64_t v8 = v520;
        uint64_t v9 = v525;
        int v6 = v507;
        int v246 = v492;
        int v244 = v494;
        unsigned int v277 = v489;
        int v283 = v485;
        int v282 = v487;
        int v311 = v510;
        int v296 = v481;
        unsigned int v312 = v483;
        int v321 = v477;
        int v319 = v479;
      }
      else
      {
        if ((int)v3 < 1)
        {
          int v333 = 0;
          int v334 = 0;
          int v335 = 0;
          int v336 = 0;
        }
        else
        {
          if (v320 < 0) {
            int v320 = v555 - v247;
          }
          int v333 = -(v3 * __clz(v320 + 1));
          if (v322 < 0) {
            int v322 = v553 - v311;
          }
          int v334 = -(v3 * __clz(v322 + 1));
          if (v323 < 0) {
            int v323 = v551 - v308;
          }
          int v335 = -(v3 * __clz(v323 + 1));
          if (v324 < 0) {
            int v324 = v549 - v315;
          }
          int v336 = -(v3 * __clz(v324 + 1));
        }
        unint64_t v2 = v518;
        uint64_t v8 = v520;
        uint64_t v9 = v525;
      }
      if (v333 > v334 || v333 > v335 || v333 > v336)
      {
        if (v334 <= v335 && v334 <= v336)
        {
          int v246 = v283;
          int v337 = 0;
          int v556 = v500;
          int v557 = v497;
          int v338 = 1;
          int v558 = v277;
          int v244 = v282;
          uint64_t v339 = 2;
          int v559 = v311;
          goto LABEL_528;
        }
        if (v335 <= v336)
        {
          int v338 = 0;
          int v556 = v455;
          int v557 = v453;
          int v337 = 1;
          int v558 = v312;
          int v246 = v514;
          int v244 = v296;
          uint64_t v339 = 1;
          int v340 = v465;
        }
        else
        {
          int v556 = v451;
          int v557 = v449;
          int v337 = 1;
          int v246 = v459;
          int v244 = v461;
          int v558 = v463;
          int v338 = 1;
          uint64_t v339 = 2;
          int v340 = v457;
        }
      }
      else
      {
        int v337 = 0;
        int v338 = 0;
        int v556 = v319;
        int v557 = v321;
        int v558 = v245;
        uint64_t v339 = 1;
        int v340 = v504;
      }
      int v559 = v340;
LABEL_528:
      int v560 = v246;
      int v561 = v244;
      sub_2170A5080(v522, v338, &v564);
      sub_2170A5080(v522, v337, &v564 + v339);
      unsigned int v341 = 2;
LABEL_655:
      int v10 = v508;
LABEL_741:
      sub_2170B68A4((uint64_t)v2, v9, (uint64_t)&v559, (uint64_t)&v556, v3, v523, v11, (void *)v573 + 15 * v341);
LABEL_742:
      ++v9;
    }
    while (v524 != v9);
  }
  uint64_t v440 = 360;
  do
  {
    v441 = (char *)v573 + v440;
    v442 = *(void **)((char *)&__p + v440);
    if (v442)
    {
      *((void *)v441 - 2) = v442;
      operator delete(v442);
    }
    v443 = (void *)*((void *)v441 - 6);
    if (v443)
    {
      *(void *)((char *)&v562 + v440) = v443;
      operator delete(v443);
    }
    v444 = (char *)v573 + v440;
    v445 = *(void **)((char *)&v554 + v440);
    if (v445)
    {
      *((void *)v444 - 8) = v445;
      operator delete(v445);
    }
    v446 = (void *)*((void *)v444 - 12);
    if (v446)
    {
      *(void *)((char *)&v550 + v440) = v446;
      operator delete(v446);
    }
    v447 = (void *)*((void *)v441 - 15);
    if (v447)
    {
      *(void *)((char *)&v544 + v440) = v447;
      operator delete(v447);
    }
    v440 -= 120;
  }
  while (v440);
  if (__p)
  {
    v571 = __p;
    operator delete(__p);
  }
  return 0;
}

void sub_2170B6850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *__p,uint64_t a59,uint64_t a60,char a61)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2170B68A4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, void *a6, unsigned char *a7, void *a8)
{
  uint64_t v11 = result + 3560;
  switch(*a7)
  {
    case 0:
      if (a5 < 1) {
        return result;
      }
      uint64_t v12 = 0;
      uint64_t v13 = a5;
      while (1)
      {
        int v14 = *(_DWORD *)(a3 + 4 * v12);
        int v15 = *(_DWORD *)(a4 + 4 * v12);
        int v16 = (_WORD *)(*a8 + 2 * v12);
        uint64_t v17 = v11;
        unsigned int v18 = v14 - v15;
        if (v14 == v15)
        {
          unsigned int v20 = 0;
        }
        else
        {
          sub_2170A5080(v11, 1, v16);
          int v19 = (_WORD *)(a8[3] + 2 * v12);
          if ((v18 & 0x80000000) != 0)
          {
            sub_2170A5080(v11, 0, v19);
            unsigned int v18 = -v18;
          }
          else
          {
            sub_2170A5080(v11, 1, v19);
          }
          uint64_t v21 = a8[6];
          int v22 = (_WORD *)(v21 + 2 * (int)(v12 << 6));
          if (v18 > 0x3F)
          {
            sub_2170A5080(v11, 1, (_WORD *)(v21 + 2 * (int)(v12 << 6)));
            sub_2170A5080(v11, 1, v22 + 2);
            sub_2170A5080(v11, 1, v22 + 6);
            sub_2170A5080(v11, 1, v22 + 14);
            sub_2170A5080(v11, 1, v22 + 30);
            sub_2170A5080(v11, 1, v22 + 62);
            uint64_t result = sub_2170A56D8(v11, v18 - 64, *(_DWORD *)(a8[12] + 4 * v12), (_WORD *)(a8[9] + 2 * v12));
            goto LABEL_13;
          }
          unsigned int v23 = v18 - 1;
          sub_2170A5080(v11, (v18 - 1) & 1, (_WORD *)(v21 + 2 * (int)(v12 << 6)));
          sub_2170A5080(v11, (v23 >> 1) & 1, &v22[(v23 & 1) + 1]);
          sub_2170A5080(v11, (v23 >> 2) & 1, &v22[(v23 & 3) + 3]);
          sub_2170A5080(v11, (v23 >> 3) & 1, &v22[(v23 & 7) + 7]);
          sub_2170A5080(v11, (v23 >> 4) & 1, &v22[(v23 & 0xF) + 15]);
          unsigned int v20 = ((v18 - 1) >> 5) & 1;
          int v16 = &v22[((v18 - 1) & 0x1F) + 31];
          uint64_t v17 = v11;
        }
        uint64_t result = sub_2170A5080(v17, v20, v16);
LABEL_13:
        if (++v12 == v13) {
          return result;
        }
      }
    case 2:
      if (a5 < 1) {
        return result;
      }
      uint64_t v24 = 0;
      uint64_t v25 = a5;
      while (1)
      {
        signed int v26 = *(_DWORD *)(a3 + 4 * v24) - *(_DWORD *)(a4 + 4 * v24);
        uint64_t v27 = a8[12];
        uint64_t result = sub_2170A5664(v11, v26, *(_DWORD *)(v27 + 4 * v24), (_WORD *)(a8[3] + 2 * v24), (_WORD *)(a8[9] + 2 * v24));
        unsigned int v28 = v26 >= 0 ? v26 : -v26;
        int v29 = *(_DWORD *)(v27 + 4 * v24);
        unsigned int v30 = v28 >> v29;
        if (v29 && v30 == 0) {
          break;
        }
        if (v30 >= 2)
        {
          int v32 = 1;
LABEL_27:
          *(_DWORD *)(v27 + 4 * v24) = v29 + v32;
        }
        if (++v24 == v25) {
          return result;
        }
      }
      int v32 = -1;
      goto LABEL_27;
    case 3:
      if (a5 >= 1)
      {
        uint64_t v34 = 0;
        uint64_t v35 = a5;
        do
        {
          int v36 = *(_DWORD *)(*a6 + 4 * v34);
          if (v36 >= 1)
          {
            int v37 = 0;
            unsigned int v38 = *(_DWORD *)(a3 + 4 * v34) - *(_DWORD *)(a4 + 4 * v34);
            do
            {
              __int16 v55 = 0x8000;
              uint64_t result = sub_2170A5080(v11, (v38 >> v37++) & 1, &v55);
            }
            while (v36 != v37);
          }
          ++v34;
        }
        while (v34 != v35);
      }
      return result;
    case 4:
      if (a5 < 1) {
        return result;
      }
      uint64_t v39 = 0;
      uint64_t v40 = a5;
      break;
    default:
      return result;
  }
  do
  {
    int v41 = *(_DWORD *)(a3 + 4 * v39);
    int v42 = *(_DWORD *)(a4 + 4 * v39);
    int v43 = (_WORD *)(*a8 + 2 * v39);
    uint64_t v44 = v11;
    unsigned int v45 = v41 - v42;
    if (v41 == v42)
    {
      int v47 = 0;
LABEL_46:
      uint64_t result = sub_2170A5080(v44, v47, v43);
      goto LABEL_53;
    }
    sub_2170A5080(v11, 1, v43);
    int v46 = (_WORD *)(a8[3] + 2 * v39);
    if ((v45 & 0x80000000) != 0)
    {
      sub_2170A5080(v11, 0, v46);
      unsigned int v45 = -v45;
    }
    else
    {
      sub_2170A5080(v11, 1, v46);
    }
    unsigned int v48 = v45 - 1;
    uint64_t v49 = a8[6];
    uint64_t v50 = (_WORD *)(v49 + 2 * (int)(v39 << 6));
    if (v45 <= 0x3F)
    {
      sub_2170A5080(v11, (v48 >> 5) & 1, (_WORD *)(v49 + 2 * (int)(v39 << 6)));
      sub_2170A5080(v11, (v48 >> 4) & 1, &v50[(v48 >> 5) + 1]);
      sub_2170A5080(v11, (v48 >> 3) & 1, &v50[(v48 >> 4) + 3]);
      sub_2170A5080(v11, (v48 >> 2) & 1, &v50[(v48 >> 3) + 7]);
      sub_2170A5080(v11, (v48 >> 1) & 1, &v50[(v48 >> 2) + 15]);
      int v47 = v48 & 1;
      int v43 = &v50[(v48 >> 1) + 31];
      uint64_t v44 = v11;
      goto LABEL_46;
    }
    sub_2170A5080(v11, 1, (_WORD *)(v49 + 2 * (int)(v39 << 6)));
    sub_2170A5080(v11, 1, v50 + 2);
    sub_2170A5080(v11, 1, v50 + 6);
    sub_2170A5080(v11, 1, v50 + 14);
    sub_2170A5080(v11, 1, v50 + 30);
    sub_2170A5080(v11, 1, v50 + 62);
    uint64_t v51 = a8[12];
    uint64_t result = sub_2170A56D8(v11, v45 - 64, *(_DWORD *)(v51 + 4 * v39), (_WORD *)(a8[9] + 2 * v39));
    int v52 = *(_DWORD *)(v51 + 4 * v39);
    unsigned int v53 = v48 >> v52;
    if (!v52 || v53)
    {
      if (v53 < 2) {
        goto LABEL_53;
      }
      int v54 = v52 + 1;
    }
    else
    {
      int v54 = v52 - 1;
    }
    *(_DWORD *)(v51 + 4 * v39) = v54;
LABEL_53:
    ++v39;
  }
  while (v39 != v40);
  return result;
}

uint64_t sub_2170B6D78(unsigned int *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  int v5 = a1[780];
  uint64_t v6 = *((void *)a1 + 384);
  uint64_t v8 = a1 + 46;
  uint64_t v7 = *((void *)a1 + 23);
  int v9 = ~(-1 << (*(_DWORD *)(a2 + 4) - 1));
  int v70 = 0;
  int v71 = 0;
  uint64_t v72 = 0;
  sub_2170AE224((void *)a1 + 23, (void *)a1 + 29, (void *)a1 + 26, (uint64_t *)a1 + 26, -1431655765 * ((unint64_t)(*((void *)a1 + 24) - v7) >> 2), (uint64_t *)&v70, v9);
  uint64_t v69 = 0;
  long long v67 = 0u;
  *(_OWORD *)__p = 0u;
  *(_OWORD *)int v65 = 0u;
  *(_OWORD *)int v66 = 0u;
  *(_OWORD *)int v63 = 0u;
  long long v64 = 0u;
  *(_OWORD *)int v62 = 0u;
  sub_2170A8CEC((uint64_t)v62, v5);
  __int16 v61 = 0x8000;
  if ((int)v4 >= 1)
  {
    uint64_t v10 = 0;
    uint64_t v11 = v8 + 704;
    int v12 = *(_DWORD *)(a2 + 16);
    uint64_t v13 = (unsigned char *)(a2 + 8);
    while (1)
    {
      uint64_t v14 = *(int *)(*((void *)a1 + 11) + 4 * v10);
      if (!v12 || *(unsigned char *)(*((void *)a1 + 387) + v14)) {
        break;
      }
LABEL_68:
      if (v4 == ++v10) {
        goto LABEL_69;
      }
    }
    int v15 = (_DWORD *)(v6 + 4 * (int)v14 * v5);
    int v16 = *v15 - v9;
    int v17 = v15[1] - v9;
    if (v16 >= 0) {
      int v18 = *v15 - v9;
    }
    else {
      int v18 = v9 - *v15;
    }
    if (v17 >= 0) {
      int v19 = v17;
    }
    else {
      int v19 = -v17;
    }
    int v20 = v9 - v18;
    int v21 = v19 - v9;
    if (v16 >= 0) {
      int v21 = v9 - v19;
    }
    int v22 = v18 - v9;
    if (v17 >= 0) {
      int v23 = v20;
    }
    else {
      int v23 = v22;
    }
    int v24 = v20 - v19;
    if (v20 - v19 < 0) {
      int v25 = v21;
    }
    else {
      int v25 = v16;
    }
    if (v20 - v19 >= 0) {
      int v23 = v17;
    }
    int v58 = v25;
    int v59 = v23;
    int v60 = v20 - v19;
    uint64_t v26 = 3 * v14;
    uint64_t v27 = (int *)&v70[12 * v14];
    int v28 = *v27;
    int v29 = *v27;
    int v55 = *v27;
    int v30 = v27[1];
    int v56 = v30;
    int v31 = v27[2];
    int v57 = v31;
    uint64_t v32 = *(int *)(*((void *)a1 + 17) + 4 * v26);
    if (v32 == -1 || v12 && !*(unsigned char *)(*((void *)a1 + 387) + v32))
    {
      unint64_t v42 = v29 * (uint64_t)v25 + v30 * (uint64_t)v23 + v31 * (uint64_t)v24;
      if ((v42 & 0x8000000000000000) != 0)
      {
        int v55 = -v28;
        int v56 = -v30;
        int v57 = -v31;
      }
      sub_2170A5080((uint64_t)(a1 + 890), v42 >> 63, &v61);
      int v24 = v60;
      int v28 = v55;
      int v30 = v56;
      int v31 = v57;
    }
    else
    {
      uint64_t v33 = (_DWORD *)(v6 + 4 * (int)v32 * v5);
      int v34 = *v33 - v9;
      int v35 = v33[1] - v9;
      if (v34 >= 0) {
        int v36 = v34;
      }
      else {
        int v36 = -v34;
      }
      if (v35 >= 0) {
        int v37 = v35;
      }
      else {
        int v37 = -v35;
      }
      int v38 = v9 - v36;
      int v39 = v37 - v9;
      if (v34 >= 0) {
        int v39 = v9 - v37;
      }
      int v40 = v36 - v9;
      if (v35 >= 0) {
        int v40 = v38;
      }
      int v41 = v38 - v37;
      if (v41 < 0)
      {
        int v34 = v39;
        int v35 = v40;
      }
      if (v31 * (uint64_t)v41 + v29 * (uint64_t)v34 + v30 * (uint64_t)v35 < 0)
      {
        int v28 = -v28;
        int v30 = -v30;
        int v31 = -v31;
        int v55 = v28;
        int v56 = v30;
        int v57 = v31;
      }
    }
    if (v28 >= 0) {
      unsigned int v43 = v28;
    }
    else {
      unsigned int v43 = -v28;
    }
    if (v30 >= 0) {
      unsigned int v44 = v30;
    }
    else {
      unsigned int v44 = -v30;
    }
    if (v31 >= 0) {
      unsigned int v45 = v31;
    }
    else {
      unsigned int v45 = -v31;
    }
    if (v43 < v44 || v43 < v45)
    {
      int v46 = &v56;
      int v47 = &v59;
      if (v44 < v45)
      {
LABEL_55:
        if (v31 < 0)
        {
          int v57 = -v31;
          int v24 = -v24;
          int v60 = v24;
        }
        int v50 = v58;
        int v49 = v59;
        if (v24 < 0)
        {
          if (v59 >= 0) {
            int v52 = v59;
          }
          else {
            int v52 = -v59;
          }
          int v53 = v52 - v9;
          int v51 = v9 - v52;
          if (v58 < 0)
          {
            int v51 = v53;
            int v50 = -v58;
          }
          if (v59 < 0) {
            int v49 = v50 - v9;
          }
          else {
            int v49 = v9 - v50;
          }
        }
        else
        {
          int v51 = v58;
        }
        int v58 = v51;
        int v59 = v49;
        sub_2170B68A4((uint64_t)a1, v10, (uint64_t)&v58, (uint64_t)&v55, v5, v11, v13, v62);
        goto LABEL_68;
      }
    }
    else
    {
      int v46 = &v55;
      int v47 = &v58;
      int v30 = v28;
    }
    int v48 = *v47;
    *int v47 = v24;
    int v60 = v48;
    *int v46 = v31;
    int v57 = v30;
    int v24 = v48;
    int v31 = v30;
    goto LABEL_55;
  }
LABEL_69:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v66[1])
  {
    *(void **)&long long v67 = v66[1];
    operator delete(v66[1]);
  }
  if (v65[0])
  {
    v65[1] = v65[0];
    operator delete(v65[0]);
  }
  if (v63[1])
  {
    *(void **)&long long v64 = v63[1];
    operator delete(v63[1]);
  }
  if (v62[0])
  {
    v62[1] = v62[0];
    operator delete(v62[0]);
  }
  if (v70)
  {
    int v71 = v70;
    operator delete(v70);
  }
  return 0;
}

void sub_2170B714C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_2170A8E48((uint64_t)va);
  uint64_t v11 = *(void **)(v9 + 120);
  if (v11)
  {
    *(void *)(v9 + 128) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2170B7180(unsigned int *a1, uint64_t a2)
{
  unint64_t v2 = a1;
  uint64_t v3 = 0;
  v189[15] = *(unsigned __int16 **)MEMORY[0x263EF8340];
  uint64_t v171 = *a1;
  unint64_t v4 = (int)a1[780];
  int v167 = a1 + 750;
  uint64_t v5 = *((void *)a1 + 384);
  memset(v189, 0, 120);
  memset(v188, 0, sizeof(v188));
  do
  {
    sub_2170A8CEC((uint64_t)&v188[v3], v4);
    v3 += 15;
  }
  while (v3 != 45);
  __int16 v187 = 0x8000;
  memset_pattern16(&__b, &unk_2174AFAB0, 6uLL);
  memset_pattern16(&v181, &unk_2174AFAB0, 6uLL);
  LODWORD(v179[0]) = 0;
  sub_2170A4FFC(v180, v4, v179);
  LODWORD(v178[0]) = 0;
  sub_2170A4FFC(v179, v4, v178);
  LODWORD(v177[0]) = 0;
  sub_2170A4FFC(v178, v4, v177);
  LODWORD(v176[0]) = 0;
  sub_2170A4FFC(v177, v4, v176);
  LODWORD(v175[0]) = 0;
  sub_2170A4FFC(v176, v4, v175);
  LODWORD(v174[0]) = 0;
  sub_2170A4FFC(v175, v4, v174);
  LODWORD(__p[0]) = 0;
  sub_2170A4FFC(v174, v4, __p);
  int v172 = 0;
  sub_2170A4FFC(__p, v4, &v172);
  if ((int)v171 >= 1)
  {
    uint64_t v6 = 0;
    int v7 = *(_DWORD *)(a2 + 16);
    int v153 = v2;
    int v163 = (unsigned __int8 *)(a2 + 8);
    int v164 = v4;
    uint64_t v161 = (uint64_t)(v2 + 445);
    uint64_t v162 = v5;
    uint64_t v8 = 4 * v4;
    int v166 = v7;
    uint64_t v168 = v4;
    size_t v169 = v8;
    while (1)
    {
      uint64_t v9 = *(int *)(v2[11] + 4 * v6);
      if (v7 && !*(unsigned char *)(v2[387] + v9)) {
        goto LABEL_126;
      }
      uint64_t v10 = (int *)(v5 + 4 * (int)v9 * (int)v4);
      uint64_t v11 = (int *)(v2[17] + 12 * v9);
      uint64_t v12 = *v11;
      uint64_t v13 = v11[1];
      uint64_t v14 = v11[2];
      int v15 = (char *)v180[0];
      int v16 = (int *)(v2[20] + 12 * v9);
      uint64_t v17 = v16[2];
      if (v17 != -1)
      {
        uint64_t v19 = *v16;
        uint64_t v18 = v16[1];
        if (!v7
          || (uint64_t v20 = v2[387], *(unsigned char *)(v20 + v12))
          && *(unsigned char *)(v20 + v13)
          && *(unsigned char *)(v20 + v14)
          && *(unsigned char *)(v20 + v19)
          && *(unsigned char *)(v20 + v18)
          && *(unsigned char *)(v20 + v17))
        {
          int v154 = v19;
          int v157 = v18;
          uint64_t v165 = v6;
          int v21 = (int *)(v5 + 4 * (int)v12 * (int)v4);
          int v22 = (int *)(v5 + 4 * (int)v13 * (int)v4);
          int v23 = (int *)(v5 + 4 * (int)v14 * (int)v4);
          int v147 = v13;
          int v150 = v12;
          int v170 = (char *)v180[0];
          sub_2170A5790(v21, v22, v23, v4, (int *)(v2[23] + 12 * (int)v12), (int *)(v2[23] + 12 * (int)v13), (int *)(v2[23] + 12 * (int)v14), (int *)(v2[23] + 12 * (int)v9), (_DWORD *)v180[0]);
          int v24 = v2;
          int v25 = (int *)(v162 + 4 * v154 * (int)v4);
          uint64_t v26 = (int *)(v162 + 4 * v157 * (int)v4);
          uint64_t v27 = (int *)(v162 + 4 * (int)v17 * (int)v4);
          sub_2170A5790(v25, v26, v27, v4, (int *)(v24[23] + 12 * v154), (int *)(v24[23] + 12 * v157), (int *)(v24[23] + 12 * (int)v17), (int *)(v24[23] + 12 * (int)v9), (_DWORD *)v179[0]);
          uint64_t v28 = v168;
          if ((int)v4 >= 1)
          {
            int v29 = (int *)v180[0];
            int v30 = (int *)v179[0];
            uint64_t v31 = v168;
            uint64_t v32 = (int *)v178[0];
            do
            {
              int v34 = *v29++;
              int v33 = v34;
              int v35 = *v30++;
              BOOL v36 = __OFADD__(v35, v33);
              int v37 = v35 + v33;
              if (v37 < 0 != v36) {
                ++v37;
              }
              *v32++ = v37 >> 1;
              --v31;
            }
            while (v31);
            if (v164 == 2)
            {
              sub_2170A5E8C((unint64_t)v21, v22, v23, (_DWORD *)(v153[23] + 12 * v150), (_DWORD *)(v153[23] + 12 * v147), (int *)(v153[23] + 12 * (int)v9), (int *)v180[0]);
              sub_2170A5E8C((unint64_t)v25, v26, v27, (_DWORD *)(v153[23] + 12 * v154), (_DWORD *)(v153[23] + 12 * v157), (int *)(v153[23] + 12 * (int)v9), (int *)v179[0]);
              int v38 = v180[0];
              int v39 = v179[0];
              int v40 = v177[0];
              int v41 = *(_DWORD *)v179[0] + *(_DWORD *)v180[0];
              if (*(_DWORD *)v179[0] + *v38 < 0 != __OFADD__(*(_DWORD *)v179[0], *v38)) {
                ++v41;
              }
              *(_DWORD *)v177[0] = v41 >> 1;
              int v42 = v38[1];
              int v43 = v39[1];
              BOOL v36 = __OFADD__(v43, v42);
              int v44 = v43 + v42;
              if (v44 < 0 != v36) {
                ++v44;
              }
              v40[1] = v44 >> 1;
              uint64_t v28 = v168;
            }
            else
            {
              unint64_t v100 = 0;
              int v101 = (char *)v177[0];
              do
              {
                int v102 = v21[v100 / 4];
                int v103 = v25[v100 / 4];
                BOOL v36 = __OFADD__(v103, v102);
                int v104 = v103 + v102;
                if (v104 < 0 != v36) {
                  ++v104;
                }
                unint64_t v105 = 1431655766
                     * ((v104 >> 1) - (v23[v100 / 4] + v27[v100 / 4]) + 2 * (v26[v100 / 4] + v22[v100 / 4]));
                *(_DWORD *)&v101[v100] = HIDWORD(v105) + (v105 >> 63);
                v100 += 4;
              }
              while (v169 != v100);
            }
            uint64_t v106 = 0;
            BOOL v107 = v180[0];
            int v108 = v179[0];
            int v109 = v176[0];
            int v110 = v175[0];
            unint64_t v111 = v178[0];
            int v112 = v174[0];
            unint64_t v113 = v177[0];
            int v114 = __p[0];
            do
            {
              v107[v106] = v22[v106] + v21[v106] - v23[v106];
              v108[v106] = v26[v106] + v25[v106] - v27[v106];
              v109[v106] = v10[v106] - v107[v106];
              v110[v106] = v10[v106] - v108[v106];
              v112[v106] = v10[v106] - v111[v106];
              v114[v106] = v10[v106] - v113[v106];
              ++v106;
            }
            while (v28 != v106);
          }
          if (*(unsigned char *)(a2 + 24))
          {
            LODWORD(v4) = v164;
            int v159 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((v181 + 2048) >> 10) & 0x7CLL));
            int v156 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((v182 + 2048) >> 10) & 0x7CLL));
            int v152 = sub_2170C4034((int *)v176[0], v164, *v163, v189);
            int v146 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((v183 + 2048) >> 10) & 0x7CLL));
            int v149 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((67584 - (unint64_t)v181) >> 10) & 0x3FFFFFFFFFFFFCLL));
            int v115 = sub_2170C4034((int *)v175[0], v164, *v163, v189);
            int v116 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((v181 + 2048) >> 10) & 0x7CLL));
            int v117 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((67584 - (unint64_t)v182) >> 10) & 0x3FFFFFFFFFFFFCLL));
            int v118 = sub_2170C4034((int *)v174[0], v164, *v163, v189);
            int v119 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((67584 - (unint64_t)v181) >> 10) & 0x3FFFFFFFFFFFFCLL));
            int v120 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((67584 - (unint64_t)v183) >> 10) & 0x3FFFFFFFFFFFFCLL));
            int v121 = sub_2170C4034((int *)__p[0], v164, *v163, v189);
            signed int v122 = v156 + v159 + v152;
            signed int v123 = v146 + v149 + v115;
            signed int v124 = v117 + v116 + v118;
            signed int v125 = v120 + v119 + v121;
            unint64_t v2 = v153;
            uint64_t v5 = v162;
            int v55 = (unsigned char *)(a2 + 8);
          }
          else
          {
            int v55 = (unsigned char *)(a2 + 8);
            LODWORD(v4) = v164;
            if (v164 < 1)
            {
              signed int v122 = 0;
              signed int v123 = 0;
              signed int v124 = 0;
              signed int v125 = 0;
            }
            else
            {
              int v126 = *(_DWORD *)v176[0];
              if (*(int *)v176[0] < 0) {
                int v126 = -v126;
              }
              signed int v122 = -(v164 * __clz(v126 + 1));
              int v127 = *(_DWORD *)v175[0];
              if (*(int *)v175[0] < 0) {
                int v127 = -v127;
              }
              signed int v123 = -(v164 * __clz(v127 + 1));
              int v128 = *(_DWORD *)v174[0];
              if (*(int *)v174[0] < 0) {
                int v128 = -v128;
              }
              signed int v124 = -(v164 * __clz(v128 + 1));
              int v129 = *(_DWORD *)__p[0];
              if (*(int *)__p[0] < 0) {
                int v129 = -v129;
              }
              signed int v125 = -(v164 * __clz(v129 + 1));
            }
            unint64_t v2 = v153;
            uint64_t v5 = v162;
          }
          if (v122 <= v123 && v122 <= v124 && v122 <= v125)
          {
            int v130 = 0;
            int v131 = 0;
            goto LABEL_122;
          }
          if (v123 <= v124 && v123 <= v125)
          {
            int v130 = 0;
            int v131 = 1;
            int v170 = (char *)v179[0];
            goto LABEL_104;
          }
          if (v124 <= v125)
          {
            int v131 = 0;
            int v130 = 1;
            int v170 = (char *)v178[0];
LABEL_122:
            uint64_t v132 = 1;
          }
          else
          {
            int v130 = 1;
            int v170 = (char *)v177[0];
            int v131 = 1;
LABEL_104:
            uint64_t v132 = 2;
          }
          uint64_t v134 = v161;
          sub_2170A5080(v161, v131, &v181);
          p_b = &v181;
          goto LABEL_124;
        }
      }
      if (v14 != -1)
      {
        if (!v7 || (uint64_t v45 = v2[387], *(unsigned char *)(v45 + v12)) && *(unsigned char *)(v45 + v13) && *(unsigned char *)(v45 + v14))
        {
          int v170 = (char *)v180[0];
          uint64_t v165 = v6;
          int v46 = (int *)(v5 + 4 * (int)v12 * (int)v4);
          int v47 = v4;
          int v48 = (int *)(v5 + 4 * (int)v13 * (int)v4);
          int v49 = (int *)(v5 + 4 * (int)v14 * v47);
          int v50 = v12;
          int v51 = v13;
          sub_2170A5790(v46, v48, v49, v47, (int *)(v2[23] + 12 * (int)v12), (int *)(v2[23] + 12 * (int)v13), (int *)(v2[23] + 12 * (int)v14), (int *)(v2[23] + 12 * (int)v9), (_DWORD *)v179[0]);
          if (v164 == 2)
          {
            sub_2170A5E8C((unint64_t)v46, v48, v49, (_DWORD *)(v2[23] + 12 * v50), (_DWORD *)(v2[23] + 12 * v51), (int *)(v2[23] + 12 * (int)v9), (int *)v177[0]);
LABEL_52:
            uint64_t v68 = 0;
            uint64_t v69 = v180[0];
            int v70 = v179[0];
            int v71 = v178[0];
            uint64_t v72 = v176[0];
            int v73 = v175[0];
            int v74 = v174[0];
            int v75 = v177[0];
            int v76 = __p[0];
            do
            {
              int v77 = v48[v68] + v46[v68] - v49[v68];
              v69[v68] = v77;
              int v78 = v70[v68];
              BOOL v36 = __OFADD__(v78, v77);
              int v79 = v78 + v77;
              if (v79 < 0 != v36) {
                ++v79;
              }
              v71[v68] = v79 >> 1;
              v72[v68] = v10[v68] - v69[v68];
              v73[v68] = v10[v68] - v70[v68];
              v74[v68] = v10[v68] - v71[v68];
              v76[v68] = v10[v68] - v75[v68];
              ++v68;
            }
            while (v168 != v68);
          }
          else if (v164 >= 1)
          {
            int v58 = v177[0];
            uint64_t v59 = v168;
            int v60 = v46;
            __int16 v61 = v48;
            int v62 = v49;
            do
            {
              int v64 = *v60++;
              int v63 = v64;
              int v65 = *v61++;
              int v66 = v65 + v63;
              int v67 = *v62++;
              *v58++ = v66 - v67;
              --v59;
            }
            while (v59);
            goto LABEL_52;
          }
          if (*(unsigned char *)(a2 + 24))
          {
            LODWORD(v4) = v164;
            int v158 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((__b + 2048) >> 10) & 0x7CLL));
            int v155 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((v185 + 2048) >> 10) & 0x7CLL));
            int v151 = sub_2170C4034((int *)v176[0], v164, *v163, v189);
            int v145 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((v186 + 2048) >> 10) & 0x7CLL));
            int v148 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((67584 - (unint64_t)__b) >> 10) & 0x3FFFFFFFFFFFFCLL));
            int v80 = sub_2170C4034((int *)v175[0], v164, *v163, v189);
            int v81 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((__b + 2048) >> 10) & 0x7CLL));
            int v82 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((67584 - (unint64_t)v185) >> 10) & 0x3FFFFFFFFFFFFCLL));
            int v83 = sub_2170C4034((int *)v174[0], v164, *v163, v189);
            int v84 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((67584 - (unint64_t)__b) >> 10) & 0x3FFFFFFFFFFFFCLL));
            int v85 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((67584 - (unint64_t)v186) >> 10) & 0x3FFFFFFFFFFFFCLL));
            int v86 = sub_2170C4034((int *)__p[0], v164, *v163, v189);
            signed int v87 = v155 + v158 + v151;
            signed int v88 = v145 + v148 + v80;
            signed int v89 = v82 + v81 + v83;
            signed int v90 = v85 + v84 + v86;
            unint64_t v2 = v153;
            uint64_t v5 = v162;
            int v55 = (unsigned char *)(a2 + 8);
          }
          else
          {
            int v55 = (unsigned char *)(a2 + 8);
            LODWORD(v4) = v164;
            if (v164 < 1)
            {
              signed int v87 = 0;
              signed int v88 = 0;
              signed int v89 = 0;
              signed int v90 = 0;
            }
            else
            {
              int v96 = *(_DWORD *)v176[0];
              if (*(int *)v176[0] < 0) {
                int v96 = -v96;
              }
              signed int v87 = -(v164 * __clz(v96 + 1));
              int v97 = *(_DWORD *)v175[0];
              if (*(int *)v175[0] < 0) {
                int v97 = -v97;
              }
              signed int v88 = -(v164 * __clz(v97 + 1));
              int v98 = *(_DWORD *)v174[0];
              if (*(int *)v174[0] < 0) {
                int v98 = -v98;
              }
              signed int v89 = -(v164 * __clz(v98 + 1));
              int v99 = *(_DWORD *)__p[0];
              if (*(int *)__p[0] < 0) {
                int v99 = -v99;
              }
              signed int v90 = -(v164 * __clz(v99 + 1));
            }
            uint64_t v5 = v162;
          }
          if (v87 <= v88 && v87 <= v89 && v87 <= v90)
          {
            int v130 = 0;
            int v133 = 0;
            goto LABEL_113;
          }
          if (v88 <= v89 && v88 <= v90)
          {
            int v130 = 0;
            int v133 = 1;
            int v170 = (char *)v179[0];
            goto LABEL_119;
          }
          if (v89 <= v90)
          {
            int v133 = 0;
            int v130 = 1;
            int v170 = (char *)v178[0];
LABEL_113:
            uint64_t v132 = 1;
          }
          else
          {
            int v130 = 1;
            int v170 = (char *)v177[0];
            int v133 = 1;
LABEL_119:
            uint64_t v132 = 2;
          }
          uint64_t v134 = v161;
          sub_2170A5080(v161, v133, &__b);
          p_b = &__b;
LABEL_124:
          sub_2170A5080(v134, v130, &p_b[v132]);
          int v54 = 2;
          uint64_t v6 = v165;
          int v15 = v170;
          goto LABEL_125;
        }
      }
      if (v13 == -1) {
        break;
      }
      if (v7)
      {
        uint64_t v52 = v2[387];
        if (!*(unsigned char *)(v52 + v12) || !*(unsigned char *)(v52 + v13)) {
          break;
        }
      }
      if (v4 != 2)
      {
        if ((int)v4 >= 1)
        {
          uint64_t v91 = 0;
          uint64_t v92 = v5 + 4 * (int)v12 * (int)v4;
          int v55 = (unsigned char *)(a2 + 8);
          do
          {
            int v93 = *(_DWORD *)(v92 + v91);
            int v94 = *(_DWORD *)(v5 + 4 * (int)v13 * (int)v4 + v91);
            BOOL v36 = __OFADD__(v94, v93);
            int v95 = v94 + v93;
            if (v95 < 0 != v36) {
              ++v95;
            }
            *(_DWORD *)&v15[v91] = v95 >> 1;
            v91 += 4;
          }
          while (v8 != v91);
          int v54 = 1;
          goto LABEL_125;
        }
        int v54 = 1;
LABEL_106:
        int v55 = (unsigned char *)(a2 + 8);
        goto LABEL_125;
      }
      int v172 = 0;
      int v53 = (char *)v180[0];
      sub_2170A5A30((int *)(v5 + 8 * v12), (int *)(v5 + 8 * v13), v10, (_DWORD *)(v2[23] + 12 * (int)v12), (_DWORD *)(v2[23] + 12 * (int)v13), (int *)(v2[23] + 12 * (int)v9), (int *)v180[0], &v172);
      sub_2170A5080(v161, v172 != 0, &v187);
      int v54 = 1;
      int v55 = (unsigned char *)(a2 + 8);
      int v15 = v53;
LABEL_125:
      sub_2170B68A4((uint64_t)v2, v6, (uint64_t)v10, (uint64_t)v15, v4, v167, v55, &v188[15 * v54]);
      int v7 = v166;
      uint64_t v8 = v169;
LABEL_126:
      if (++v6 == v171) {
        goto LABEL_129;
      }
    }
    if (v12 == -1 || v7 && !*(unsigned char *)(v2[387] + v12))
    {
      if ((int)v4 >= 1)
      {
        int v57 = (char *)v180[0];
        bzero(v180[0], v169);
        int v15 = v57;
      }
      LOBYTE(v172) = 3;
      sub_2170B68A4((uint64_t)v2, v6, (uint64_t)v10, (uint64_t)v15, v4, v167, &v172, 0);
      int v7 = v166;
      uint64_t v8 = v169;
      goto LABEL_126;
    }
    if ((int)v4 >= 1)
    {
      uint64_t v56 = 0;
      int v55 = (unsigned char *)(a2 + 8);
      do
      {
        *(_DWORD *)&v15[v56] = *(_DWORD *)(v5 + 4 * (int)v12 * (int)v4 + v56);
        v56 += 4;
      }
      while (v8 != v56);
      int v54 = 0;
      goto LABEL_125;
    }
    int v54 = 0;
    goto LABEL_106;
  }
LABEL_129:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v174[0])
  {
    v174[1] = v174[0];
    operator delete(v174[0]);
  }
  if (v175[0])
  {
    v175[1] = v175[0];
    operator delete(v175[0]);
  }
  if (v176[0])
  {
    v176[1] = v176[0];
    operator delete(v176[0]);
  }
  if (v177[0])
  {
    v177[1] = v177[0];
    operator delete(v177[0]);
  }
  if (v178[0])
  {
    v178[1] = v178[0];
    operator delete(v178[0]);
  }
  if (v179[0])
  {
    v179[1] = v179[0];
    operator delete(v179[0]);
  }
  if (v180[0])
  {
    v180[1] = v180[0];
    operator delete(v180[0]);
  }
  uint64_t v136 = 45;
  do
  {
    int v137 = &v188[v136];
    int v138 = v180[v136 + 2];
    if (v138)
    {
      *((void *)v137 - 2) = v138;
      operator delete(v138);
    }
    int v139 = (void *)*((void *)v137 - 6);
    if (v139)
    {
      v180[v136] = v139;
      operator delete(v139);
    }
    int v140 = &v188[v136];
    int v141 = v178[v136 + 2];
    if (v141)
    {
      *((void *)v140 - 8) = v141;
      operator delete(v141);
    }
    v142 = (void *)*((void *)v140 - 12);
    if (v142)
    {
      v178[v136] = v142;
      operator delete(v142);
    }
    int v143 = (void *)*((void *)v137 - 15);
    if (v143)
    {
      v177[v136] = v143;
      operator delete(v143);
    }
    v136 -= 15;
  }
  while (v136 * 8);
  return 0;
}

void sub_2170B8094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  if (__p) {
    operator delete(__p);
  }
  if (a37) {
    operator delete(a37);
  }
  if (a40) {
    operator delete(a40);
  }
  if (a43) {
    operator delete(a43);
  }
  if (a46) {
    operator delete(a46);
  }
  if (a49) {
    operator delete(a49);
  }
  if (a52) {
    operator delete(a52);
  }
  for (uint64_t i = 240; i != -120; i -= 120)
    sub_2170A8E48((uint64_t)(&a57 + i));
  _Unwind_Resume(a1);
}

uint64_t sub_2170B81AC(unsigned int *a1, uint64_t a2)
{
  uint64_t v4 = 0;
  uint64_t v61 = *MEMORY[0x263EF8340];
  uint64_t v52 = *a1;
  unint64_t v5 = (int)a1[780];
  int v51 = a1 + 750;
  uint64_t v6 = *((void *)a1 + 384);
  uint64_t v60 = 0;
  memset(v59, 0, sizeof(v59));
  do
  {
    sub_2170A8CEC((uint64_t)v59 + v4, v5);
    v4 += 120;
  }
  while (v4 != 360);
  __int16 v58 = 0x8000;
  LODWORD(__p[0]) = 0;
  sub_2170A4FFC(&v56, v5, __p);
  int v54 = 0;
  sub_2170A4FFC(__p, v5, &v54);
  if ((int)v52 >= 1)
  {
    uint64_t v7 = 0;
    int v53 = *(_DWORD *)(a2 + 16);
    int v50 = (unsigned char *)(a2 + 8);
    do
    {
      uint64_t v8 = *(int *)(*((void *)a1 + 11) + 4 * v7);
      if (!v53 || *(unsigned char *)(*((void *)a1 + 387) + v8))
      {
        uint64_t v9 = (int *)(v6 + 4 * (int)v8 * (int)v5);
        uint64_t v10 = (int *)(*((void *)a1 + 17) + 12 * v8);
        uint64_t v11 = *v10;
        uint64_t v12 = v10[1];
        uint64_t v13 = v10[2];
        uint64_t v14 = v56;
        int v15 = (int *)(*((void *)a1 + 20) + 12 * v8);
        uint64_t v16 = v15[2];
        if (v16 != -1
          && ((uint64_t v17 = *v15, v18 = v15[1], !v53)
           || (uint64_t v19 = *((void *)a1 + 387), *(unsigned char *)(v19 + v11))
           && *(unsigned char *)(v19 + v12)
           && *(unsigned char *)(v19 + v13)
           && *(unsigned char *)(v19 + v17)
           && *(unsigned char *)(v19 + v18)
           && *(unsigned char *)(v19 + v16)))
        {
          sub_2170A5790((int *)(v6 + 4 * (int)v11 * (int)v5), (int *)(v6 + 4 * (int)v12 * (int)v5), (int *)(v6 + 4 * (int)v13 * (int)v5), v5, (int *)(*((void *)a1 + 23) + 12 * (int)v11), (int *)(*((void *)a1 + 23) + 12 * (int)v12), (int *)(*((void *)a1 + 23) + 12 * (int)v13), (int *)(*((void *)a1 + 23) + 12 * (int)v8), v56);
          sub_2170A5790((int *)(v6 + 4 * (int)v17 * (int)v5), (int *)(v6 + 4 * (int)v18 * (int)v5), (int *)(v6 + 4 * (int)v16 * (int)v5), v5, (int *)(*((void *)a1 + 23) + 12 * (int)v17), (int *)(*((void *)a1 + 23) + 12 * (int)v18), (int *)(*((void *)a1 + 23) + 12 * (int)v16), (int *)(*((void *)a1 + 23) + 12 * (int)v8), (_DWORD *)__p[0]);
          uint64_t v9 = (int *)(v6 + 4 * (int)v8 * (int)v5);
          if ((int)v5 >= 1)
          {
            uint64_t v20 = (int *)v56;
            int v21 = (int *)__p[0];
            uint64_t v22 = v5;
            do
            {
              int v23 = *v21++;
              int v24 = v23 + *v20;
              if (v24 < 0 != __OFADD__(v23, *v20)) {
                ++v24;
              }
              *v20++ = v24 >> 1;
              --v22;
            }
            while (v22);
          }
          unsigned int v25 = 2;
        }
        else if (v13 != -1 {
               && (!v53
        }
                || (uint64_t v26 = *((void *)a1 + 387), *(unsigned char *)(v26 + v11))
                && *(unsigned char *)(v26 + v12)
                && *(unsigned char *)(v26 + v13)))
        {
          sub_2170A5790((int *)(v6 + 4 * (int)v11 * (int)v5), (int *)(v6 + 4 * (int)v12 * (int)v5), (int *)(v6 + 4 * (int)v13 * (int)v5), v5, (int *)(*((void *)a1 + 23) + 12 * (int)v11), (int *)(*((void *)a1 + 23) + 12 * (int)v12), (int *)(*((void *)a1 + 23) + 12 * (int)v13), (int *)(*((void *)a1 + 23) + 12 * (int)v8), v56);
          unsigned int v25 = 2;
          uint64_t v9 = (int *)(v6 + 4 * (int)v8 * (int)v5);
        }
        else if (v12 == -1 {
               || v53 && ((uint64_t v27 = *((void *)a1 + 387), !*(unsigned char *)(v27 + v11)) || !*(unsigned char *)(v27 + v12)))
        }
        {
          if (v11 == -1 || v53 && !*(unsigned char *)(*((void *)a1 + 387) + v11))
          {
            if ((int)v5 >= 1)
            {
              bzero(v56, 4 * v5);
              uint64_t v9 = (int *)(v6 + 4 * (int)v8 * (int)v5);
            }
            LOBYTE(v54) = 3;
            sub_2170B68A4((uint64_t)a1, v7, (uint64_t)v9, (uint64_t)v14, v5, v51, &v54, 0);
            goto LABEL_50;
          }
          if ((int)v5 >= 1)
          {
            uint64_t v28 = (int *)(v6 + 4 * (int)v11 * (int)v5);
            uint64_t v29 = v5;
            int v30 = v56;
            do
            {
              int v31 = *v28++;
              *v30++ = v31;
              --v29;
            }
            while (v29);
          }
          unsigned int v25 = 0;
        }
        else if (v5 == 2)
        {
          int v54 = 0;
          sub_2170A5A30((int *)(v6 + 8 * v11), (int *)(v6 + 8 * v12), v9, (_DWORD *)(*((void *)a1 + 23) + 12 * (int)v11), (_DWORD *)(*((void *)a1 + 23) + 12 * (int)v12), (int *)(*((void *)a1 + 23) + 12 * (int)v8), (int *)v56, &v54);
          sub_2170A5080((uint64_t)(a1 + 890), v54 != 0, &v58);
          unsigned int v25 = 1;
          uint64_t v9 = (int *)(v6 + 8 * v8);
        }
        else
        {
          if ((int)v5 >= 1)
          {
            uint64_t v32 = (int *)(v6 + 4 * (int)v11 * (int)v5);
            int v33 = (int *)(v6 + 4 * (int)v12 * (int)v5);
            uint64_t v34 = v5;
            int v35 = (int *)v56;
            do
            {
              int v37 = *v32++;
              int v36 = v37;
              int v38 = *v33++;
              BOOL v39 = __OFADD__(v38, v36);
              int v40 = v38 + v36;
              if (v40 < 0 != v39) {
                ++v40;
              }
              *v35++ = v40 >> 1;
              --v34;
            }
            while (v34);
          }
          unsigned int v25 = 1;
        }
        sub_2170B68A4((uint64_t)a1, v7, (uint64_t)v9, (uint64_t)v14, v5, v51, v50, (void *)v59 + 15 * v25);
      }
LABEL_50:
      ++v7;
    }
    while (v7 != v52);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v56)
  {
    v57[0] = v56;
    operator delete(v56);
  }
  unint64_t v41 = 360;
  do
  {
    int v42 = (char *)v59 + v41;
    int v43 = (void *)v57[v41 / 8];
    if (v43)
    {
      *((void *)v42 - 2) = v43;
      operator delete(v43);
    }
    int v44 = (void *)*((void *)v42 - 6);
    if (v44)
    {
      __p[v41 / 8 + 2] = v44;
      operator delete(v44);
    }
    uint64_t v45 = (char *)v59 + v41;
    int v46 = *(void **)((char *)&v59[-4] + v41 - 8);
    if (v46)
    {
      *((void *)v45 - 8) = v46;
      operator delete(v46);
    }
    int v47 = (void *)*((void *)v45 - 12);
    if (v47)
    {
      *(void *)((char *)&v59[-5] + v41 - 8) = v47;
      operator delete(v47);
    }
    int v48 = (void *)*((void *)v42 - 15);
    if (v48)
    {
      *(void *)((char *)&v59[-7] + v41) = v48;
      operator delete(v48);
    }
    v41 -= 120;
  }
  while (v41);
  return 0;
}

void sub_2170B86E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (__p) {
    operator delete(__p);
  }
  for (uint64_t i = 240; i != -120; i -= 120)
    sub_2170A8E48((uint64_t)(&a25 + i));
  _Unwind_Resume(a1);
}

uint64_t sub_2170B8748(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v127 = *MEMORY[0x263EF8340];
  uint64_t v109 = *a1;
  unint64_t v3 = (int)a1[780];
  BOOL v107 = a1 + 750;
  uint64_t v110 = *((void *)a1 + 384);
  uint64_t v126 = 0;
  memset(v125, 0, sizeof(v125));
  do
  {
    sub_2170A8CEC((uint64_t)&v125[v2], v3);
    v2 += 15;
  }
  while (v2 != 45);
  memset_pattern16(&__b, &unk_2174AFAB0, 6uLL);
  LODWORD(v119[0]) = 0;
  sub_2170A4FFC(&v120, v3, v119);
  LODWORD(v117) = 0;
  sub_2170A4FFC(v119, v3, &v117);
  uint64_t v4 = a1;
  LODWORD(v116[0]) = 0;
  sub_2170A4FFC(&v117, v3, v116);
  LODWORD(v115[0]) = 0;
  sub_2170A4FFC(v116, v3, v115);
  LODWORD(v114[0]) = 0;
  sub_2170A4FFC(v115, v3, v114);
  LODWORD(v113[0]) = 0;
  sub_2170A4FFC(v114, v3, v113);
  LODWORD(__p[0]) = 0;
  sub_2170A4FFC(v113, v3, __p);
  int v111 = 0;
  sub_2170A4FFC(__p, v3, &v111);
  if ((int)v109 >= 1)
  {
    uint64_t v5 = 0;
    int v6 = *(_DWORD *)(a2 + 16);
    uint64_t v94 = (uint64_t)(a1 + 890);
    uint64_t v106 = (unsigned char *)(a2 + 8);
    int v108 = v6;
    uint64_t v101 = 4 * v3;
    while (1)
    {
      uint64_t v7 = *(int *)(v4[11] + 4 * v5);
      if (!v6 || *(unsigned char *)(v4[387] + v7)) {
        break;
      }
LABEL_81:
      if (++v5 == v109) {
        goto LABEL_85;
      }
    }
    uint64_t v8 = (int *)(v4[17] + 12 * (int)v7);
    uint64_t v10 = *v8;
    uint64_t v9 = v8[1];
    uint64_t v11 = v8[2];
    uint64_t v12 = v120;
    if (v11 != -1
      && (!v6 || (uint64_t v13 = v4[387], *(unsigned char *)(v13 + v10)) && *(unsigned char *)(v13 + v9) && *(unsigned char *)(v13 + v11)))
    {
      if ((int)v3 < 1)
      {
        LODWORD(v17) = 0;
      }
      else
      {
        uint64_t v14 = (int *)(v110 + 4 * (int)v10 * (int)v3);
        int v15 = (int *)(v110 + 4 * (int)v9 * (int)v3);
        uint64_t v16 = (int *)(v110 + 4 * (int)v11 * (int)v3);
        uint64_t v17 = v3;
        uint64_t v18 = v120;
        do
        {
          int v20 = *v14++;
          int v19 = v20;
          int v21 = *v15++;
          int v22 = v21 + v19;
          int v23 = *v16++;
          *(_DWORD *)uint64_t v18 = v22 - v23;
          v18 += 4;
          --v17;
        }
        while (v17);
      }
      int v34 = 2;
      int v35 = 2;
    }
    else if (v9 == -1 || v6 && ((uint64_t v24 = v4[387], !*(unsigned char *)(v24 + v10)) || !*(unsigned char *)(v24 + v9)))
    {
      if (v10 == -1 || v6 && !*(unsigned char *)(v4[387] + v10))
      {
        if ((int)v3 >= 1)
        {
          bzero(v120, v101);
          int v6 = v108;
        }
        int v34 = 0;
        int v35 = -1;
        LODWORD(v17) = 1;
      }
      else
      {
        if ((int)v3 >= 1)
        {
          int v36 = (int *)(v110 + 4 * (int)v10 * (int)v3);
          uint64_t v37 = v3;
          int v38 = v120;
          do
          {
            int v39 = *v36++;
            *(_DWORD *)int v38 = v39;
            v38 += 4;
            --v37;
          }
          while (v37);
        }
        int v34 = 0;
        LODWORD(v17) = 0;
        int v35 = 0;
      }
    }
    else
    {
      if ((int)v3 >= 1)
      {
        unsigned int v25 = (int *)(v110 + 4 * (int)v10 * (int)v3);
        uint64_t v26 = (int *)(v110 + 4 * (int)v9 * (int)v3);
        uint64_t v27 = v3;
        uint64_t v28 = (int *)v120;
        do
        {
          int v30 = *v25++;
          int v29 = v30;
          int v31 = *v26++;
          BOOL v32 = __OFADD__(v31, v29);
          int v33 = v31 + v29;
          if (v33 < 0 != v32) {
            ++v33;
          }
          *v28++ = v33 >> 1;
          --v27;
        }
        while (v27);
      }
      LODWORD(v17) = 0;
      int v34 = 1;
      int v35 = 1;
    }
    uint64_t v40 = v110 + 4 * (int)v7 * (int)v3;
    unint64_t v41 = (int *)(v4[20] + 12 * (int)v7);
    uint64_t v42 = v41[2];
    if (v42 == -1
      || (uint64_t v43 = *v41, v44 = v41[1], v6)
      && ((uint64_t v45 = v4[387], !*(unsigned char *)(v45 + v10))
       || !*(unsigned char *)(v45 + v9)
       || !*(unsigned char *)(v45 + v11)
       || !*(unsigned char *)(v45 + v43)
       || !*(unsigned char *)(v45 + v44)
       || !*(unsigned char *)(v45 + v42)))
    {
LABEL_77:
      if (v17)
      {
        LOBYTE(v111) = 3;
        sub_2170B68A4((uint64_t)v4, v5, v40, (uint64_t)v12, v3, v107, &v111, 0);
      }
      else
      {
        sub_2170B68A4((uint64_t)v4, v5, v40, (uint64_t)v12, v3, v107, v106, &v125[15 * v35]);
      }
      int v6 = v108;
      goto LABEL_81;
    }
    int v104 = v35;
    int v105 = v17;
    if ((int)v3 < 1)
    {
      int v70 = *(unsigned __int8 *)(a2 + 24);
      if (!*(unsigned char *)(a2 + 24))
      {
        int v68 = 0;
        int v72 = 0;
        int v74 = 0;
        goto LABEL_65;
      }
    }
    else
    {
      uint64_t v46 = 0;
      uint64_t v47 = v110 + 4 * (int)v10 * (int)v3;
      uint64_t v48 = v110 + 4 * (int)v9 * (int)v3;
      uint64_t v49 = v110 + 4 * (int)v11 * (int)v3;
      uint64_t v50 = v110 + 4 * (int)v43 * (int)v3;
      uint64_t v51 = v110 + 4 * (int)v44 * (int)v3;
      uint64_t v52 = v110 + 4 * (int)v42 * (int)v3;
      int v53 = (char *)v119[0];
      int v54 = (char *)v117;
      int v55 = (char *)v116[0];
      uint64_t v56 = (char *)v115[0];
      int v57 = (char *)v114[0];
      __int16 v58 = (char *)v113[0];
      uint64_t v59 = (char *)__p[0];
      do
      {
        *(_DWORD *)&v53[v46] = *(_DWORD *)(v51 + v46) + *(_DWORD *)(v50 + v46) - *(_DWORD *)(v52 + v46);
        int v60 = *(_DWORD *)(v47 + v46);
        int v61 = *(_DWORD *)(v50 + v46);
        int v62 = v61 + v60;
        if (v61 + v60 < 0 != __OFADD__(v61, v60)) {
          ++v62;
        }
        *(_DWORD *)&v54[v46] = *(_DWORD *)(v51 + v46) + *(_DWORD *)(v48 + v46) - (v62 >> 1);
        int v63 = *(_DWORD *)(v47 + v46);
        int v64 = *(_DWORD *)(v50 + v46);
        BOOL v32 = __OFADD__(v64, v63);
        int v65 = v64 + v63;
        if (v65 < 0 != v32) {
          ++v65;
        }
        unint64_t v66 = 1431655766
            * ((v65 >> 1)
             - (*(_DWORD *)(v49 + v46)
              + *(_DWORD *)(v52 + v46))
             + 2 * (*(_DWORD *)(v51 + v46) + *(_DWORD *)(v48 + v46)));
        *(_DWORD *)&v55[v46] = HIDWORD(v66) + (v66 >> 63);
        *(_DWORD *)&v56[v46] = *(_DWORD *)(v40 + v46) - *(_DWORD *)&v12[v46];
        *(_DWORD *)&v57[v46] = *(_DWORD *)(v40 + v46) - *(_DWORD *)&v53[v46];
        *(_DWORD *)&v58[v46] = *(_DWORD *)(v40 + v46) - *(_DWORD *)&v54[v46];
        *(_DWORD *)&v59[v46] = *(_DWORD *)(v40 + v46) - *(_DWORD *)&v55[v46];
        v46 += 4;
      }
      while (v101 != v46);
      if (!*(unsigned char *)(a2 + 24))
      {
        int v67 = *(_DWORD *)v115[0];
        if (*(int *)v115[0] < 0) {
          int v67 = -v67;
        }
        int v68 = -(v3 * __clz(v67 + 1));
        int v69 = *(_DWORD *)v114[0];
        if (*(int *)v114[0] < 0) {
          int v69 = -v69;
        }
        int v70 = -(v3 * __clz(v69 + 1));
        int v71 = *(_DWORD *)v113[0];
        if (*(int *)v113[0] < 0) {
          int v71 = -v71;
        }
        int v72 = -(v3 * __clz(v71 + 1));
        int v73 = *(_DWORD *)__p[0];
        if (*(int *)__p[0] < 0) {
          int v73 = -v73;
        }
        int v74 = -(v3 * __clz(v73 + 1));
LABEL_65:
        if (v68 <= v70 && v68 <= v72 && v68 <= v74)
        {
          int v82 = 0;
          int v83 = 0;
LABEL_69:
          uint64_t v84 = 1;
LABEL_76:
          sub_2170A5080(v94, v83, &__b);
          sub_2170A5080(v94, v82, &__b + v84);
          uint64_t v4 = a1;
          int v35 = v104;
          LODWORD(v17) = v105;
          goto LABEL_77;
        }
        if (v70 > v72 || v70 > v74)
        {
          if (v72 <= v74)
          {
            int v83 = 0;
            int v82 = 1;
            uint64_t v12 = (char *)v117;
            goto LABEL_69;
          }
          int v82 = 1;
          uint64_t v12 = (char *)v116[0];
          int v83 = 1;
        }
        else
        {
          int v82 = 0;
          int v83 = 1;
          uint64_t v12 = (char *)v119[0];
        }
        uint64_t v84 = 2;
        goto LABEL_76;
      }
    }
    int v75 = (unsigned __int16 **)&v125[15 * v34];
    int v99 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((v123 + 2048) >> 10) & 0x7CLL));
    int v100 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((__b + 2048) >> 10) & 0x7CLL));
    int v98 = sub_2170C4034((int *)v115[0], v3, *v106, v75);
    int v96 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((v124 + 2048) >> 10) & 0x7CLL));
    int v97 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((67584 - (unint64_t)__b) >> 10) & 0x3FFFFFFFFFFFFCLL));
    int v95 = sub_2170C4034((int *)v114[0], v3, *v106, v75);
    int v76 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((__b + 2048) >> 10) & 0x7CLL));
    int v77 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((67584 - (unint64_t)v123) >> 10) & 0x3FFFFFFFFFFFFCLL));
    int v78 = sub_2170C4034((int *)v113[0], v3, *v106, v75);
    int v79 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((67584 - (unint64_t)__b) >> 10) & 0x3FFFFFFFFFFFFCLL));
    int v80 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((67584 - (unint64_t)v124) >> 10) & 0x3FFFFFFFFFFFFCLL));
    int v81 = sub_2170C4034((int *)__p[0], v3, *v106, v75);
    int v68 = v99 + v100 + v98;
    int v70 = v96 + v97 + v95;
    int v72 = v77 + v76 + v78;
    int v74 = v80 + v79 + v81;
    goto LABEL_65;
  }
LABEL_85:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v113[0])
  {
    v113[1] = v113[0];
    operator delete(v113[0]);
  }
  if (v114[0])
  {
    v114[1] = v114[0];
    operator delete(v114[0]);
  }
  if (v115[0])
  {
    v115[1] = v115[0];
    operator delete(v115[0]);
  }
  if (v116[0])
  {
    v116[1] = v116[0];
    operator delete(v116[0]);
  }
  if (v117)
  {
    v118[0] = v117;
    operator delete(v117);
  }
  if (v119[0])
  {
    v119[1] = v119[0];
    operator delete(v119[0]);
  }
  if (v120)
  {
    v121[0] = v120;
    operator delete(v120);
  }
  uint64_t v85 = 45;
  do
  {
    int v86 = &v125[v85];
    signed int v87 = (void *)v121[v85];
    if (v87)
    {
      *((void *)v86 - 2) = v87;
      operator delete(v87);
    }
    signed int v88 = (void *)*((void *)v86 - 6);
    if (v88)
    {
      v119[v85 + 2] = v88;
      operator delete(v88);
    }
    signed int v89 = &v125[v85];
    signed int v90 = (void *)v118[v85];
    if (v90)
    {
      *((void *)v89 - 8) = v90;
      operator delete(v90);
    }
    uint64_t v91 = (void *)*((void *)v89 - 12);
    if (v91)
    {
      v116[v85 + 2] = v91;
      operator delete(v91);
    }
    uint64_t v92 = (void *)*((void *)v86 - 15);
    if (v92)
    {
      v115[v85 + 2] = v92;
      operator delete(v92);
    }
    v85 -= 15;
  }
  while (v85 * 8);
  return 0;
}

void sub_2170B9070(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  if (__p) {
    operator delete(__p);
  }
  if (a32) {
    operator delete(a32);
  }
  if (a35) {
    operator delete(a35);
  }
  if (a38) {
    operator delete(a38);
  }
  if (a41) {
    operator delete(a41);
  }
  if (a44) {
    operator delete(a44);
  }
  if (a47) {
    operator delete(a47);
  }
  for (uint64_t i = 240; i != -120; i -= 120)
    sub_2170A8E48((uint64_t)(&a51 + i));
  _Unwind_Resume(a1);
}

uint64_t sub_2170B9178(unsigned int *a1, uint64_t a2)
{
  uint64_t v4 = 0;
  uint64_t v53 = *MEMORY[0x263EF8340];
  uint64_t v5 = *a1;
  unint64_t v6 = (int)a1[780];
  uint64_t v7 = a1 + 750;
  uint64_t v8 = *((void *)a1 + 384);
  uint64_t v52 = 0;
  memset(v51, 0, sizeof(v51));
  do
  {
    sub_2170A8CEC((uint64_t)v51 + v4, v6);
    v4 += 120;
  }
  while (v4 != 360);
  int v49 = 0;
  sub_2170A4FFC(__p, v6, &v49);
  if ((int)v5 >= 1)
  {
    uint64_t v9 = 0;
    int v10 = *(_DWORD *)(a2 + 16);
    uint64_t v11 = (unsigned char *)(a2 + 8);
    uint64_t v12 = 4 * v6;
    uint64_t v48 = v8;
    do
    {
      uint64_t v13 = *(int *)(*((void *)a1 + 11) + 4 * v9);
      if (!v10 || *(unsigned char *)(*((void *)a1 + 387) + v13))
      {
        uint64_t v14 = v8 + 4 * (int)v13 * (int)v6;
        int v15 = (int *)(*((void *)a1 + 17) + 12 * (int)v13);
        uint64_t v16 = *v15;
        uint64_t v17 = v15[1];
        uint64_t v18 = v15[2];
        if (v18 != -1
          && (!v10
           || (uint64_t v19 = *((void *)a1 + 387), *(unsigned char *)(v19 + v16)) && *(unsigned char *)(v19 + v17) && *(unsigned char *)(v19 + v18)))
        {
          int v20 = (char *)__p[0];
          if ((int)v6 >= 1)
          {
            uint64_t v21 = 0;
            uint64_t v22 = v8 + 4 * (int)v16 * (int)v6;
            uint64_t v23 = v8 + 4 * (int)v17 * (int)v6;
            uint64_t v24 = v8 + 4 * (int)v18 * (int)v6;
            do
            {
              *(_DWORD *)&v20[v21] = *(_DWORD *)(v23 + v21) + *(_DWORD *)(v22 + v21) - *(_DWORD *)(v24 + v21);
              v21 += 4;
            }
            while (v12 != v21);
          }
          unsigned int v25 = 2;
        }
        else if (v17 == -1 {
               || v10 && ((uint64_t v26 = *((void *)a1 + 387), !*(unsigned char *)(v26 + v16)) || !*(unsigned char *)(v26 + v17)))
        }
        {
          if (v16 == -1 || v10 && !*(unsigned char *)(*((void *)a1 + 387) + v16))
          {
            uint64_t v36 = v5;
            uint64_t v37 = v11;
            int v38 = __p[0];
            if ((int)v6 >= 1) {
              bzero(__p[0], 4 * v6);
            }
            LOBYTE(v49) = 3;
            sub_2170B68A4((uint64_t)a1, v9, v14, (uint64_t)v38, v6, v7, &v49, 0);
            uint64_t v11 = v37;
            uint64_t v5 = v36;
            uint64_t v8 = v48;
            goto LABEL_37;
          }
          int v20 = (char *)__p[0];
          if ((int)v6 >= 1)
          {
            uint64_t v34 = 0;
            uint64_t v35 = v8 + 4 * (int)v16 * (int)v6;
            do
            {
              *(_DWORD *)&v20[v34] = *(_DWORD *)(v35 + v34);
              v34 += 4;
            }
            while (v12 != v34);
          }
          unsigned int v25 = 0;
        }
        else
        {
          int v20 = (char *)__p[0];
          if ((int)v6 >= 1)
          {
            uint64_t v27 = 0;
            uint64_t v28 = v8 + 4 * (int)v16 * (int)v6;
            uint64_t v29 = v8 + 4 * (int)v17 * (int)v6;
            do
            {
              int v30 = *(_DWORD *)(v28 + v27);
              int v31 = *(_DWORD *)(v29 + v27);
              BOOL v32 = __OFADD__(v31, v30);
              int v33 = v31 + v30;
              if (v33 < 0 != v32) {
                ++v33;
              }
              *(_DWORD *)&v20[v27] = v33 >> 1;
              v27 += 4;
            }
            while (v12 != v27);
          }
          unsigned int v25 = 1;
        }
        sub_2170B68A4((uint64_t)a1, v9, v14, (uint64_t)v20, v6, v7, v11, (void *)v51 + 15 * v25);
      }
LABEL_37:
      ++v9;
    }
    while (v9 != v5);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  unint64_t v39 = 360;
  do
  {
    uint64_t v40 = (char *)v51 + v39;
    unint64_t v41 = __p[v39 / 8];
    if (v41)
    {
      *((void *)v40 - 2) = v41;
      operator delete(v41);
    }
    uint64_t v42 = (void *)*((void *)v40 - 6);
    if (v42)
    {
      *(void *)((char *)&v51[-2] + v39 - 8) = v42;
      operator delete(v42);
    }
    uint64_t v43 = (char *)v51 + v39;
    uint64_t v44 = *(void **)((char *)&v51[-4] + v39 - 8);
    if (v44)
    {
      *((void *)v43 - 8) = v44;
      operator delete(v44);
    }
    uint64_t v45 = (void *)*((void *)v43 - 12);
    if (v45)
    {
      *(void *)((char *)&v51[-5] + v39 - 8) = v45;
      operator delete(v45);
    }
    uint64_t v46 = (void *)*((void *)v40 - 15);
    if (v46)
    {
      *(void *)((char *)&v51[-7] + v39) = v46;
      operator delete(v46);
    }
    v39 -= 120;
  }
  while (v39);
  return 0;
}

void sub_2170B9508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  for (uint64_t i = 240; i != -120; i -= 120)
    sub_2170A8E48((uint64_t)(&a15 + i));
  _Unwind_Resume(a1);
}

uint64_t sub_2170B9550(unsigned int *a1, uint64_t a2)
{
  uint64_t v4 = 0;
  uint64_t v45 = *MEMORY[0x263EF8340];
  uint64_t v5 = *a1;
  unint64_t v6 = (int)a1[780];
  unint64_t v41 = a1 + 750;
  uint64_t v7 = *((void *)a1 + 384);
  memset(v44, 0, sizeof(v44));
  do
  {
    sub_2170A8CEC((uint64_t)v44 + v4, v6);
    v4 += 120;
  }
  while (v4 != 240);
  int v42 = 0;
  sub_2170A4FFC(__p, v6, &v42);
  if ((int)v5 >= 1)
  {
    uint64_t v8 = 0;
    int v9 = *(_DWORD *)(a2 + 16);
    int v10 = (unsigned char *)(a2 + 8);
    uint64_t v11 = 4 * v6;
    while (1)
    {
      uint64_t v12 = *(int *)(*((void *)a1 + 11) + 4 * v8);
      if (!v9) {
        break;
      }
      uint64_t v13 = *((void *)a1 + 387);
      if (*(unsigned char *)(v13 + v12))
      {
        uint64_t v14 = v7 + 4 * (int)v12 * (int)v6;
        int v15 = (int *)(*((void *)a1 + 17) + 12 * (int)v12);
        int v16 = *v15;
        int v17 = v15[1];
        if (v17 == -1 || !*(unsigned char *)(v13 + v16) || !*(unsigned char *)(v13 + v17))
        {
          if (v16 == -1 || !*(unsigned char *)(v13 + v16))
          {
LABEL_25:
            int v30 = v10;
            int v31 = __p[0];
            if ((int)v6 >= 1) {
              bzero(__p[0], 4 * v6);
            }
            LOBYTE(v42) = 3;
            sub_2170B68A4((uint64_t)a1, v8, v14, (uint64_t)v31, v6, v41, &v42, 0);
            int v10 = v30;
            goto LABEL_28;
          }
LABEL_12:
          uint64_t v18 = (char *)__p[0];
          if ((int)v6 >= 1)
          {
            uint64_t v19 = 0;
            uint64_t v20 = v7 + 4 * v16 * (int)v6;
            do
            {
              *(_DWORD *)&v18[v19] = *(_DWORD *)(v20 + v19);
              v19 += 4;
            }
            while (v11 != v19);
          }
          unsigned int v21 = 0;
LABEL_23:
          sub_2170B68A4((uint64_t)a1, v8, v14, (uint64_t)v18, v6, v41, v10, (void *)v44 + 15 * v21);
          goto LABEL_28;
        }
LABEL_17:
        uint64_t v18 = (char *)__p[0];
        if ((int)v6 >= 1)
        {
          uint64_t v23 = 0;
          uint64_t v24 = v7 + 4 * v16 * (int)v6;
          uint64_t v25 = v7 + 4 * v17 * (int)v6;
          do
          {
            int v26 = *(_DWORD *)(v24 + v23);
            int v27 = *(_DWORD *)(v25 + v23);
            BOOL v28 = __OFADD__(v27, v26);
            int v29 = v27 + v26;
            if (v29 < 0 != v28) {
              ++v29;
            }
            *(_DWORD *)&v18[v23] = v29 >> 1;
            v23 += 4;
          }
          while (v11 != v23);
        }
        unsigned int v21 = 1;
        goto LABEL_23;
      }
LABEL_28:
      if (++v8 == v5) {
        goto LABEL_29;
      }
    }
    uint64_t v14 = v7 + 4 * (int)v12 * (int)v6;
    uint64_t v22 = (int *)(*((void *)a1 + 17) + 12 * (int)v12);
    int v16 = *v22;
    int v17 = v22[1];
    if (v17 == -1)
    {
      if (v16 == -1) {
        goto LABEL_25;
      }
      goto LABEL_12;
    }
    goto LABEL_17;
  }
LABEL_29:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  for (uint64_t i = 0; i != -240; i -= 120)
  {
    int v33 = (void *)((char *)v44 + i);
    uint64_t v34 = *(void **)((char *)&v44[13] + i + 8);
    if (v34)
    {
      v33[28] = v34;
      operator delete(v34);
    }
    uint64_t v35 = (void *)v33[24];
    if (v35)
    {
      *(void *)((char *)&v44[12] + i + 8) = v35;
      operator delete(v35);
    }
    uint64_t v36 = (char *)v44 + i;
    uint64_t v37 = *(void **)((char *)&v44[10] + i + 8);
    if (v37)
    {
      *((void *)v36 + 22) = v37;
      operator delete(v37);
    }
    int v38 = (void *)*((void *)v36 + 18);
    if (v38)
    {
      *(void *)((char *)&v44[9] + i + 8) = v38;
      operator delete(v38);
    }
    unint64_t v39 = (void *)v33[15];
    if (v39)
    {
      *(void *)((char *)&v44[8] + i) = v39;
      operator delete(v39);
    }
  }
  return 0;
}

void sub_2170B9864(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  for (uint64_t i = 120; i != -120; i -= 120)
    sub_2170A8E48((uint64_t)(&a15 + i));
  _Unwind_Resume(a1);
}

uint64_t sub_2170B98AC(unsigned int *a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 16) == 1)
  {
    uint64_t v4 = *a1;
    memset_pattern16(__b, &unk_2174AFAB0, 4uLL);
    if ((int)v4 >= 1)
    {
      uint64_t v5 = 0;
      uint64_t v6 = 4 * v4;
      do
      {
        uint64_t v7 = *(int *)(*((void *)a1 + 11) + v5);
        uint64_t v8 = (int *)(*((void *)a1 + 17) + 12 * v7);
        uint64_t v9 = *v8;
        uint64_t v10 = v8[1];
        uint64_t v11 = v8[2];
        uint64_t v12 = (int *)(*((void *)a1 + 20) + 12 * v7);
        uint64_t v13 = v12[2];
        if (v13 == -1)
        {
          uint64_t v14 = *((void *)a1 + 387);
          if (v11 == -1)
          {
            if (v10 == -1)
            {
              if (v9 == -1) {
                uint64_t v9 = 0;
              }
              else {
                uint64_t v9 = *(unsigned __int8 *)(v14 + v9);
              }
            }
            else
            {
              LODWORD(v9) = *(unsigned __int8 *)(v14 + v9);
              if (v9) {
                LODWORD(v9) = *(unsigned char *)(v14 + v10) != 0;
              }
              uint64_t v9 = v9;
            }
            goto LABEL_11;
          }
          BOOL v15 = *(unsigned __int8 *)(v14 + v10)
              + *(unsigned __int8 *)(v14 + v9)
              + *(unsigned __int8 *)(v14 + v11) > 1;
        }
        else
        {
          uint64_t v14 = *((void *)a1 + 387);
          BOOL v15 = *(unsigned __int8 *)(v14 + v10)
              + *(unsigned __int8 *)(v14 + v9)
              + *(unsigned __int8 *)(v14 + v11)
              + *(unsigned __int8 *)(v14 + *v12)
              + *(unsigned __int8 *)(v14 + v12[1])
              + *(unsigned __int8 *)(v14 + v13) > 2;
        }
        uint64_t v9 = v15;
LABEL_11:
        v5 += 4;
        sub_2170A5080((uint64_t)(a1 + 890), *(unsigned __int8 *)(v14 + v7) != 0, &__b[v9]);
      }
      while (v6 != v5);
    }
  }
  switch(*(_DWORD *)(a2 + 12))
  {
    case 0:
      sub_2170B9550(a1, a2);
      goto LABEL_29;
    case 1:
      sub_2170B9178(a1, a2);
      goto LABEL_29;
    case 2:
      sub_2170B8748(a1, a2);
      goto LABEL_29;
    case 3:
      sub_2170B81AC(a1, a2);
      goto LABEL_29;
    case 4:
      sub_2170B7180(a1, a2);
      goto LABEL_29;
    case 5:
      sub_2170B6D78(a1, a2);
      goto LABEL_29;
    case 6:
      sub_2170B49E0(a1, a2);
LABEL_29:
      uint64_t result = 0;
      break;
    default:
      uint64_t result = 5;
      break;
  }
  return result;
}

void sub_2170B9ADC(unsigned int *a1, uint64_t a2)
{
  uint64_t v26 = *a1;
  if ((int)v26 >= 1)
  {
    uint64_t v4 = 0;
    BOOL v28 = a1 + 144;
    uint64_t v5 = (uint64_t)(a1 + 890);
    uint64_t v6 = (_WORD *)a1 + 1193;
    int v7 = -1;
    do
    {
      uint64_t v8 = *((void *)a1 + 8);
      uint64_t v27 = v4;
      if (*(_DWORD *)(v8 + 4 * v4) == -1)
      {
        *(_DWORD *)(v8 + 4 * v4) = a1[70];
        uint64_t v9 = (int)a1[70];
        a1[70] = v9 + 1;
        *(_DWORD *)(*((void *)a1 + 11) + 4 * v9) = v4;
        int v10 = *(unsigned char *)(a2 + 21) ? -1 : v7;
        uint64_t v11 = 3 * v4;
        *(_DWORD *)(*((void *)a1 + 17) + 12 * v4) = v10;
        sub_2170BAF94((uint64_t)a1, v4, a2);
        sub_2170ABC20(v28, (int *)(*((void *)a1 + 69) + 4 * v11));
        if (a1[144])
        {
          do
          {
            int v12 = a1[145];
            if (v12 < 0) {
              uint64_t v13 = 0;
            }
            else {
              uint64_t v13 = sub_2170B1CAC(v28, v12);
            }
            int v7 = -1431655765 * ((v13 - *((void *)a1 + 69)) >> 2);
            sub_2170BA120((uint64_t)a1, v7);
            uint64_t v14 = (*((void *)a1 + 58) - *((void *)a1 + 57)) >> 2;
            int v15 = *(_DWORD *)(*((void *)a1 + 66) + 16 * v7);
            int v16 = *(_DWORD *)(*((void *)a1 + 66) + 16 * v7 + 4);
            BOOL v17 = v15 != -1;
            BOOL v18 = v16 == v15 && v15 != -1;
            unsigned int v19 = (v17 | (2 * (v16 != -1))) + v18;
            sub_2170A5080(v5, (int)v14 > 1, (_WORD *)a1 + v19 + 1188);
            if ((int)v14 >= 2)
            {
              int v20 = 1;
              do
              {
                int v29 = 0;
                int v21 = sub_2170BBB1C((uint64_t)a1, v7, v20 - 1, v19, (unsigned int *)&v29, a2);
                sub_2170BC3E0((uint64_t)a1, v29, v21, a2);
                sub_2170BC49C(a1, v7, v21, a2);
                int v22 = *(_DWORD *)(*((void *)a1 + 66) + 16 * v7);
                int v23 = *(_DWORD *)(*((void *)a1 + 66) + 16 * v7 + 4);
                BOOL v24 = v22 != -1;
                BOOL v25 = v23 == v22 && v22 != -1;
                unsigned int v19 = (v24 | (2 * (v23 != -1))) + v25;
                sub_2170A5080(v5, v20++ < (int)v14 - 1, v6);
              }
              while (v14 != v20);
            }
          }
          while (*v28);
        }
      }
      uint64_t v4 = v27 + 1;
    }
    while (v27 + 1 != v26);
  }
}

unsigned int *sub_2170B9D10(unsigned int *result, uint64_t a2)
{
  uint64_t v2 = *result;
  if ((int)v2 >= 1)
  {
    uint64_t v4 = (uint64_t)result;
    uint64_t v5 = 0;
    LODWORD(v6) = 0;
    uint64_t v7 = (uint64_t)(result + 890);
    uint64_t v8 = (_WORD *)result + 1193;
    int v9 = -1;
    uint64_t v25 = *result;
    do
    {
      uint64_t v10 = *(void *)(v4 + 64);
      if (*(_DWORD *)(v10 + 4 * v5) == -1)
      {
        *(_DWORD *)(v10 + 4 * v5) = *(_DWORD *)(v4 + 280);
        uint64_t v11 = *(int *)(v4 + 280);
        *(_DWORD *)(v4 + 280) = v11 + 1;
        *(_DWORD *)(*(void *)(v4 + 88) + 4 * v11) = v5;
        int v12 = *(unsigned char *)(a2 + 21) ? -1 : v9;
        *(_DWORD *)(*(void *)(v4 + 136) + 12 * v5) = v12;
        uint64_t result = (unsigned int *)sub_2170BAF94(v4, v5, a2);
        if ((int)v6 < *(_DWORD *)(v4 + 280))
        {
          uint64_t v26 = v5;
          uint64_t v6 = (int)v6;
          do
          {
            uint64_t v27 = v6;
            int v9 = *(_DWORD *)(*(void *)(v4 + 88) + 4 * v6);
            sub_2170BA120(v4, v9);
            uint64_t v13 = (*(void *)(v4 + 464) - *(void *)(v4 + 456)) >> 2;
            int v14 = *(_DWORD *)(*(void *)(v4 + 528) + 16 * v9);
            int v15 = *(_DWORD *)(*(void *)(v4 + 528) + 16 * v9 + 4);
            BOOL v16 = v14 != -1;
            BOOL v17 = v15 == v14 && v14 != -1;
            unsigned int v18 = (v16 | (2 * (v15 != -1))) + v17;
            uint64_t result = (unsigned int *)sub_2170A5080(v7, (int)v13 > 1, (_WORD *)(v4 + 2 * v18 + 2376));
            if ((int)v13 >= 2)
            {
              int v19 = 1;
              do
              {
                int v28 = 0;
                int v20 = sub_2170BBB1C(v4, v9, v19 - 1, v18, (unsigned int *)&v28, a2);
                sub_2170BC3E0(v4, v28, v20, a2);
                int v21 = *(_DWORD *)(*(void *)(v4 + 528) + 16 * v9);
                int v22 = *(_DWORD *)(*(void *)(v4 + 528) + 16 * v9 + 4);
                BOOL v23 = v21 != -1;
                BOOL v24 = v22 == v21 && v21 != -1;
                unsigned int v18 = (v23 | (2 * (v22 != -1))) + v24;
                uint64_t result = (unsigned int *)sub_2170A5080(v7, v19++ < (int)v13 - 1, v8);
              }
              while (v13 != v19);
            }
            ++v6;
          }
          while (v27 + 1 < *(int *)(v4 + 280));
          uint64_t v2 = v25;
          uint64_t v5 = v26;
        }
      }
      ++v5;
    }
    while (v5 != v2);
  }
  return result;
}

uint64_t sub_2170B9F0C(uint64_t a1, int a2, int a3)
{
  int v4 = *(_DWORD *)(*(void *)(a1 + 64) + 4 * a2);
  unsigned int v5 = *(_DWORD *)(a1 + 576);
  unsigned int v6 = 38 - __clz(v5);
  if (v5) {
    unsigned int v7 = v6;
  }
  else {
    unsigned int v7 = 6;
  }
  signed int v8 = v4 - a3;
  if (v4 == a3)
  {
    unsigned int v9 = 1;
  }
  else
  {
    if (v8 >= 0) {
      int v10 = v4 - a3;
    }
    else {
      int v10 = a3 - v4;
    }
    unsigned int v9 = 64 - 2 * __clz(v10 + 1);
  }
  uint64_t v11 = a1 + 3560;
  int v12 = (_WORD *)(a1 + 2576);
  if (v9 < v7 || (uint64_t v13 = *(void *)(a1 + 552) + 12 * a2, v14 = *(_DWORD *)(v13 + 8), (v14 & 0x80000000) != 0))
  {
    sub_2170A5080(a1 + 3560, 0, v12);
    return sub_2170A5664(a1 + 3560, v8, 0, (_WORD *)(a1 + 2610), (_WORD *)(a1 + 2612));
  }
  else
  {
    unsigned int v15 = *(_DWORD *)(v13 + 4);
    sub_2170A5080(a1 + 3560, 1, v12);
    sub_2170A5080(a1 + 3560, v15 & 1, (_WORD *)(a1 + 2616));
    sub_2170A5080(a1 + 3560, (v15 >> 1) & 1, (_WORD *)(a1 + 2616 + 2 * (v15 & 1) + 2));
    sub_2170A5080(a1 + 3560, (v15 >> 2) & 1, (_WORD *)(a1 + 2616 + 2 * (v15 & 3) + 6));
    sub_2170A5080(a1 + 3560, (v15 >> 3) & 1, (_WORD *)(a1 + 2616 + 2 * (v15 & 7) + 14));
    sub_2170A5080(a1 + 3560, (v15 >> 4) & 1, (_WORD *)(a1 + 2616 + 2 * (v15 & 0xF) + 30));
    sub_2170A5080(a1 + 3560, (v15 >> 5) & 1, (_WORD *)(a1 + 2616 + 2 * (v15 & 0x1F) + 62));
    if (v14 > 2)
    {
      sub_2170A5080(a1 + 3560, 1, (_WORD *)(a1 + 2744));
      sub_2170A5080(a1 + 3560, 1, (_WORD *)(a1 + 2748));
      return sub_2170A56D8(a1 + 3560, v14 - 3, 0, (_WORD *)(a1 + 2750));
    }
    else
    {
      BOOL v16 = (_WORD *)(a1 + 2744);
      sub_2170A5080(v11, v14 & 1, v16);
      return sub_2170A5080(v11, (v14 >> 1) & 1, &v16[(v14 & 1) + 1]);
    }
  }
}

void sub_2170BA120(uint64_t a1, int a2)
{
  uint64_t v4 = *(int *)(*(void *)(a1 + 288) + 4 * a2);
  int v5 = *(_DWORD *)(*(void *)(a1 + 312) + 4 * a2);
  uint64_t v73 = *(void *)(a1 + 336);
  unsigned int v6 = (uint64_t *)(a1 + 480);
  sub_2170BA5C4((void *)(a1 + 480), v5);
  if (v5 < 1)
  {
    int v7 = 0;
  }
  else
  {
    int v7 = 0;
    uint64_t v8 = v5 + (int)v4;
    uint64_t v9 = v73;
    uint64_t v71 = v8;
    int v72 = (void *)(a1 + 360);
    do
    {
      int v10 = *(_DWORD *)(v9 + 4 * v4);
      if (*(_DWORD *)(*(void *)(a1 + 40) + 4 * v10) == -1)
      {
        uint64_t v11 = v10;
        uint64_t v12 = *(void *)(a1 + 480);
        *(_DWORD *)(v12 + 12 * v7) = v10;
        uint64_t v13 = *(void *)(a1 + 232);
        int v14 = *(_DWORD *)(v13 + 4 * v10);
        int v15 = *(_DWORD *)(v13 + 4 * (v10 + 1));
        int v16 = v15 - v14;
        if (v15 <= v14)
        {
          int v20 = 0;
        }
        else
        {
          BOOL v17 = (int *)(*(void *)(a1 + 208) + 4 * v14);
          int v18 = v14;
          while (1)
          {
            int v19 = *v17++;
            if (v19 == a2) {
              break;
            }
            if (v15 == ++v18)
            {
              int v18 = v15;
              break;
            }
          }
          int v20 = v18 - v14;
          if (v18 != v14)
          {
            uint64_t v74 = v11;
            sub_21681C000((uint64_t)v72, v16);
            int v21 = (_DWORD *)*v72;
            if (v16 >= 1)
            {
              uint64_t v22 = *(void *)(a1 + 208);
              uint64_t v23 = (v15 - v14);
              BOOL v24 = (_DWORD *)*v72;
              int v25 = v20;
              do
              {
                *v24++ = *(_DWORD *)(v22 + 4 * (v25 % v16 + v14));
                ++v25;
                --v23;
              }
              while (v23);
            }
            uint64_t v26 = *(unsigned char **)(a1 + 368);
            if (v26 != (unsigned char *)v21) {
              memmove((void *)(*(void *)(a1 + 208) + 4 * v14), v21, v26 - (unsigned char *)v21);
            }
            uint64_t v9 = v73;
            uint64_t v11 = v74;
            uint64_t v8 = v71;
          }
        }
        uint64_t v27 = *(void *)(a1 + 208);
        uint64_t v28 = v12 + 12 * v7;
        *(_DWORD *)(v28 + 8) = *(_DWORD *)(v27 + 4 * (v15 - 1));
        *(_DWORD *)(v28 + 4) = *(_DWORD *)(v27 + 4 * (v14 + 1));
        *(_DWORD *)(*(void *)(a1 + 256) + 4 * v11) = v20;
        ++v7;
      }
      ++v4;
    }
    while (v4 < v8);
  }
  sub_2170BA5C4(v6, v7);
  int v29 = (void *)(a1 + 432);
  int v30 = (void **)(a1 + 456);
  sub_21681C000(a1 + 432, v7);
  sub_21681C000(a1 + 456, 1uLL);
  **(_DWORD **)(a1 + 456) = 0;
  if (v7 >= 1)
  {
    int v31 = 0;
    do
    {
      BOOL v32 = (int *)(*(void *)(a1 + 480) + 12 * (v7 - 1));
      *(_DWORD *)(*(void *)(a1 + 40) + 4 * *v32) = -2;
      int v33 = v32[1];
      int v34 = v32[2];
      int v35 = *v32;
      int v36 = v31 + 1;
      *(_DWORD *)(*(void *)(a1 + 432) + 4 * v31) = v35;
      unsigned int v37 = v7 - 2;
      if (v7 < 2)
      {
        int v7 = 0;
      }
      else
      {
        --v7;
        do
        {
          uint64_t v38 = *v6;
          if (*(_DWORD *)(*v6 + 12 * v37 + 4) == v34)
          {
            unint64_t v39 = (int *)(v38 + 12 * v37);
            uint64_t v40 = *v39;
            *(_DWORD *)(*(void *)(a1 + 40) + 4 * v40) = -2;
            *(_DWORD *)(*(void *)(a1 + 432) + 4 * v36++) = v40;
            int v34 = v39[2];
            unsigned int v37 = v7 - 1;
            uint64_t v41 = v38 + 12 * (v7 - 1);
            uint64_t v42 = *(void *)v39;
            int v43 = *(_DWORD *)(v41 + 8);
            *(void *)unint64_t v39 = *(void *)v41;
            v39[2] = v43;
            *(void *)uint64_t v41 = v42;
            *(_DWORD *)(v41 + 8) = v34;
            --v7;
          }
        }
        while ((int)v37-- > 0);
        if (v7 > 0)
        {
          if (v31 != v36)
          {
            uint64_t v45 = (_DWORD *)(*v29 + 4 * v36 - 4);
            if ((unint64_t)v45 > *v29 + 4 * v31)
            {
              unint64_t v46 = *v29 + 4 * v31 + 4;
              do
              {
                int v47 = *(_DWORD *)(v46 - 4);
                *(_DWORD *)(v46 - 4) = *v45;
                *v45-- = v47;
                BOOL v48 = v46 >= (unint64_t)v45;
                v46 += 4;
              }
              while (!v48);
            }
          }
          int v49 = v7;
          do
          {
            --v49;
            uint64_t v50 = *v6;
            if (*(_DWORD *)(*v6 + 12 * v49 + 8) == v33)
            {
              uint64_t v51 = (int *)(v50 + 12 * v49);
              uint64_t v52 = *v51;
              *(_DWORD *)(*(void *)(a1 + 40) + 4 * v52) = -2;
              *(_DWORD *)(*(void *)(a1 + 432) + 4 * v36++) = v52;
              int v49 = v7 - 1;
              uint64_t v53 = v50 + 12 * (v7 - 1);
              int v33 = v51[1];
              int v54 = v51[2];
              uint64_t v55 = *(void *)v51;
              int v56 = *(_DWORD *)(v53 + 8);
              *(void *)uint64_t v51 = *(void *)v53;
              v51[2] = v56;
              *(void *)uint64_t v53 = v55;
              *(_DWORD *)(v53 + 8) = v54;
              --v7;
            }
          }
          while (v49 > 0);
          if (v31 != v36)
          {
            int v57 = (_DWORD *)(*v29 + 4 * v36 - 4);
            if ((unint64_t)v57 > *v29 + 4 * v31)
            {
              unint64_t v58 = *v29 + 4 * v31 + 4;
              do
              {
                int v59 = *(_DWORD *)(v58 - 4);
                *(_DWORD *)(v58 - 4) = *v57;
                *v57-- = v59;
                BOOL v48 = v58 >= (unint64_t)v57;
                v58 += 4;
              }
              while (!v48);
            }
          }
        }
      }
      int v31 = v36;
      int v61 = *(char **)(a1 + 464);
      unint64_t v60 = *(void *)(a1 + 472);
      if ((unint64_t)v61 >= v60)
      {
        int v63 = (char *)*v30;
        uint64_t v64 = (v61 - (unsigned char *)*v30) >> 2;
        unint64_t v65 = v64 + 1;
        if ((unint64_t)(v64 + 1) >> 62) {
          sub_21677CB10();
        }
        uint64_t v66 = v60 - (void)v63;
        if (v66 >> 1 > v65) {
          unint64_t v65 = v66 >> 1;
        }
        if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v67 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v67 = v65;
        }
        if (v67)
        {
          int v68 = (char *)sub_21677EA28(a1 + 472, v67);
          int v63 = *(char **)(a1 + 456);
          int v61 = *(char **)(a1 + 464);
        }
        else
        {
          int v68 = 0;
        }
        int v69 = &v68[4 * v64];
        *(_DWORD *)int v69 = v31;
        int v62 = v69 + 4;
        while (v61 != v63)
        {
          int v70 = *((_DWORD *)v61 - 1);
          v61 -= 4;
          *((_DWORD *)v69 - 1) = v70;
          v69 -= 4;
        }
        *(void *)(a1 + 456) = v69;
        *(void *)(a1 + 464) = v62;
        *(void *)(a1 + 472) = &v68[4 * v67];
        if (v63) {
          operator delete(v63);
        }
      }
      else
      {
        *(_DWORD *)int v61 = v31;
        int v62 = v61 + 4;
      }
      *(void *)(a1 + 464) = v62;
    }
    while (v7 > 0);
  }
}

void sub_2170BA5C4(void *a1, unint64_t a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 2);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_2170C45EC((uint64_t)a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + 12 * a2;
  }
}

void *sub_2170BA600(void *result, int a2, unsigned int a3, int a4)
{
  uint64_t v4 = (a4 - 2);
  if (a3 > 2)
  {
    if (a3 == 3 || a3 == 5)
    {
      if (a4 >= 2)
      {
        uint64_t v12 = (int *)(result[66] + 16 * a2);
        int v13 = v12[3];
        int v14 = *v12;
        do
        {
          int v15 = v14;
          int v14 = *(_DWORD *)(result[48] + 4 * v4);
          if (*(unsigned char *)(result[51] + v4))
          {
            int v16 = (_DWORD *)(result[17] + 12 * v14);
            *int v16 = a2;
            v16[1] = v15;
            v16[2] = v13;
          }
          int v13 = v15;
        }
        while (v4-- > 0);
      }
    }
    else if (a4 >= 1)
    {
      uint64_t v18 = 0;
      int v19 = -1;
      int v20 = -1;
      do
      {
        int v21 = v19;
        int v19 = *(_DWORD *)(result[48] + 4 * v18);
        if (*(unsigned char *)(result[51] + v18))
        {
          uint64_t v22 = (_DWORD *)(result[17] + 12 * v19);
          *uint64_t v22 = a2;
          v22[1] = v21;
          v22[2] = v20;
        }
        ++v18;
        int v20 = v21;
      }
      while (a4 != v18);
    }
  }
  else
  {
    uint64_t v5 = result[66];
    if (a4 >= 2)
    {
      int v6 = *(_DWORD *)(v5 + 16 * a2 + 4);
      int v7 = *(_DWORD *)(v5 + 16 * a2 + 8);
      for (uint64_t i = 1; i != a4; ++i)
      {
        int v9 = *(_DWORD *)(result[48] + 4 * i);
        if (*(unsigned char *)(result[51] + i))
        {
          int v10 = (_DWORD *)(result[17] + 12 * v9);
          *int v10 = a2;
          v10[1] = v6;
          v10[2] = v7;
        }
        int v7 = v6;
        int v6 = v9;
      }
    }
    if (!a3)
    {
      if (*(unsigned char *)(result[51] + (int)v4))
      {
        uint64_t v11 = (_DWORD *)(result[20] + 12 * *(int *)(result[48] + 4 * (int)v4));
        _DWORD *v11 = a2;
        v11[1] = *(_DWORD *)(v5 + 16 * a2);
        v11[2] = *(_DWORD *)(v5 + 16 * a2 + 12);
      }
    }
  }
  return result;
}

uint64_t sub_2170BA780(int a1, int a2, int a3, void *a4)
{
  if (!a3)
  {
    int v4 = *(unsigned __int16 *)(*a4 + 2 * a2);
    if (a1)
    {
      uint64_t v5 = a2;
      int v25 = *(unsigned __int16 *)(a4[3] + 2 * a2);
      if (a1 >= 0) {
        int v25 = 0x10000 - v25;
      }
      int v26 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((v25 + 2048) >> 10) & 0xFCLL));
      if (a1 >= 0) {
        unsigned int v8 = a1;
      }
      else {
        unsigned int v8 = -a1;
      }
      int v9 = v26 + *(_DWORD *)((char *)&unk_2174AFBD0 + (((67584 - v4) >> 10) & 0x7CLL));
      int v10 = (unsigned __int16 *)(a4[6] + 2 * (a2 << 6));
      if (v8 <= 0x3F)
      {
        char v27 = v8 - 1;
        int v28 = *v10;
        if (((_BYTE)v8 - 1)) {
          int v28 = 0x10000 - v28;
        }
        int v13 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((v28 + 2048) >> 10) & 0xFCLL));
        int v29 = v10[(v27 & 1) + 1];
        if ((v27 & 2) != 0) {
          int v29 = 0x10000 - v29;
        }
        int v15 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((v29 + 2048) >> 10) & 0xFCLL));
        int v30 = v10[(v27 & 3) + 3];
        if ((v27 & 4) != 0) {
          int v30 = 0x10000 - v30;
        }
        int v17 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((v30 + 2048) >> 10) & 0xFCLL));
        int v31 = v10[(v27 & 7) + 7];
        if ((v27 & 8) != 0) {
          int v31 = 0x10000 - v31;
        }
        int v19 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((v31 + 2048) >> 10) & 0xFCLL));
        int v32 = v10[(v27 & 0xF) + 15];
        if ((v27 & 0x10) != 0) {
          int v32 = 0x10000 - v32;
        }
        int v21 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((v32 + 2048) >> 10) & 0xFCLL));
        int v22 = v10[(v27 & 0x1F) + 31];
        int v23 = 0x10000 - v22;
        BOOL v24 = (v27 & 0x20) == 0;
        goto LABEL_40;
      }
LABEL_48:
      int v37 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((67584 - (unint64_t)*v10) >> 10) & 0x3FFFFFFFFFFFFCLL));
      int v38 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((67584 - (unint64_t)v10[2]) >> 10) & 0x3FFFFFFFFFFFFCLL));
      int v39 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((67584 - (unint64_t)v10[6]) >> 10) & 0x3FFFFFFFFFFFFCLL));
      int v40 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((67584 - (unint64_t)v10[14]) >> 10) & 0x3FFFFFFFFFFFFCLL));
      int v41 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((67584 - (unint64_t)v10[30]) >> 10) & 0x3FFFFFFFFFFFFCLL));
      int v42 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((67584 - (unint64_t)v10[62]) >> 10) & 0x3FFFFFFFFFFFFCLL));
      int v43 = *(_DWORD *)(a4[12] + 4 * v5);
      return v9 + v37 + v38 + v39 + v40 + v41 + v42 + (v43 << 10) + 66560 - (__clz(((v8 - 64) >> v43) + 1) << 11);
    }
    return *(unsigned int *)((char *)&unk_2174AFBD0 + (((v4 + 2048) >> 10) & 0x7CLL));
  }
  if (a3 != 2)
  {
    if (a3 != 4) {
      return 0;
    }
    int v4 = *(unsigned __int16 *)(*a4 + 2 * a2);
    if (a1)
    {
      uint64_t v5 = a2;
      int v6 = *(unsigned __int16 *)(a4[3] + 2 * a2);
      if (a1 >= 0) {
        int v6 = 0x10000 - v6;
      }
      int v7 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((v6 + 2048) >> 10) & 0xFCLL));
      if (a1 >= 0) {
        unsigned int v8 = a1;
      }
      else {
        unsigned int v8 = -a1;
      }
      int v9 = v7 + *(_DWORD *)((char *)&unk_2174AFBD0 + (((67584 - v4) >> 10) & 0x7CLL));
      int v10 = (unsigned __int16 *)(a4[6] + 2 * (a2 << 6));
      if (v8 <= 0x3F)
      {
        unsigned int v11 = v8 - 1;
        int v12 = *v10;
        if (((v8 - 1) & 0x20) != 0) {
          int v12 = 0x10000 - v12;
        }
        int v13 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((v12 + 2048) >> 10) & 0xFCLL));
        int v14 = v10[(v11 >> 5) + 1];
        if ((v11 & 0x10) != 0) {
          int v14 = 0x10000 - v14;
        }
        int v15 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((v14 + 2048) >> 10) & 0xFCLL));
        int v16 = v10[(v11 >> 4) + 3];
        if ((v11 & 8) != 0) {
          int v16 = 0x10000 - v16;
        }
        int v17 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((v16 + 2048) >> 10) & 0xFCLL));
        int v18 = v10[(v11 >> 3) + 7];
        if ((v11 & 4) != 0) {
          int v18 = 0x10000 - v18;
        }
        int v19 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((v18 + 2048) >> 10) & 0xFCLL));
        int v20 = v10[(v11 >> 2) + 15];
        if ((v11 & 2) != 0) {
          int v20 = 0x10000 - v20;
        }
        int v21 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((v20 + 2048) >> 10) & 0xFCLL));
        int v22 = v10[(v11 >> 1) + 31];
        int v23 = 0x10000 - v22;
        BOOL v24 = (v11 & 1) == 0;
LABEL_40:
        if (!v24) {
          int v22 = v23;
        }
        return (v13
                            + v9
                            + v15
                            + v17
                            + v19
                            + v21
                            + *(_DWORD *)((char *)&unk_2174AFBD0 + (((v22 + 2048) >> 10) & 0xFCLL)));
      }
      goto LABEL_48;
    }
    return *(unsigned int *)((char *)&unk_2174AFBD0 + (((v4 + 2048) >> 10) & 0x7CLL));
  }
  if (a1 < 1)
  {
    if ((a1 & 0x80000000) == 0)
    {
      int v36 = 0;
      uint64_t v34 = a2;
      goto LABEL_51;
    }
    uint64_t v34 = a2;
    unsigned int v35 = *(unsigned __int16 *)(a4[3] + 2 * a2) + 2048;
  }
  else
  {
    uint64_t v34 = a2;
    unsigned int v35 = 67584 - *(unsigned __int16 *)(a4[3] + 2 * a2);
  }
  int v36 = *(_DWORD *)((char *)&unk_2174AFBD0 + ((v35 >> 10) & 0x7CLL));
LABEL_51:
  int v44 = *(_DWORD *)(a4[12] + 4 * v34);
  if (a1 >= 0) {
    unsigned int v45 = a1;
  }
  else {
    unsigned int v45 = -a1;
  }
  return v36 + (v44 << 10) + 66560 - (__clz((v45 >> v44) + 1) << 11);
}

uint64_t sub_2170BABD0(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t v4 = *(void *)(a1 + 184);
  uint64_t v5 = (_DWORD *)(v4 + 12 * a2);
  int v7 = (int *)(v4 + 12 * a3);
  int v9 = (int *)(v4 + 12 * a4);
  int v10 = *v9;
  int v11 = v9[1];
  int v13 = *v7;
  int v12 = v7[1];
  int v14 = *v9 - *v7;
  int v15 = v11 - v12;
  int v16 = v9[2];
  LODWORD(v9) = v7[2];
  int v17 = v16 - v9;
  int v18 = v5[1];
  int v19 = *v5 - v13;
  int v20 = v18 - v12;
  int v21 = v5[2];
  int v22 = v21 - v9;
  int v23 = *v5 - v10;
  int v24 = v18 - v11;
  int v25 = v21 - v16;
  if (v14 >= 0) {
    unsigned int v26 = v14;
  }
  else {
    unsigned int v26 = -v14;
  }
  if (v15 >= 0) {
    unsigned int v27 = v15;
  }
  else {
    unsigned int v27 = -v15;
  }
  if (v17 >= 0) {
    unsigned int v28 = v17;
  }
  else {
    unsigned int v28 = -v17;
  }
  BOOL v31 = v26 < 0x1000 && v27 < 0x1000 && v28 < 0x1000;
  if (v19 >= 0) {
    unsigned int v32 = v19;
  }
  else {
    unsigned int v32 = -v19;
  }
  if (v20 >= 0) {
    unsigned int v33 = v20;
  }
  else {
    unsigned int v33 = -v20;
  }
  if (v22 >= 0) {
    unsigned int v34 = v22;
  }
  else {
    unsigned int v34 = -v22;
  }
  if (v31 && v32 <= 0xFFF && v33 <= 0xFFF && v34 <= 0xFFF)
  {
    int v35 = v19 * v14 + v20 * v15 + v22 * v17;
    if (v35)
    {
      int v36 = v22 * v15 - v20 * v17;
      if (v36 < 0) {
        int v36 = v20 * v17 - v22 * v15;
      }
      int v37 = v19 * v17 - v22 * v14;
      if (v37 < 0) {
        int v37 = -v37;
      }
      int v38 = v20 * v14 - v19 * v15;
      if (v38 < 0) {
        int v38 = -v38;
      }
      int v39 = v36 + v37;
      if (v37 < v38)
      {
        int v40 = v38;
      }
      else
      {
        int v39 = v36 + v38;
        int v40 = v37;
      }
      BOOL v41 = v36 >= v37 && v36 >= v38;
      if (v41) {
        unsigned int v42 = v37 + v38;
      }
      else {
        unsigned int v42 = v39;
      }
      if (v41) {
        int v43 = v36;
      }
      else {
        int v43 = v40;
      }
      unsigned int v44 = v43 + (v42 >> 2);
      if (v35 < 0) {
        LODWORD(v45) = -16 * v35 / (int)(v44 - v35) + 16;
      }
      else {
        LODWORD(v45) = (int)(16 * v44) / (int)(v44 + v35);
      }
      goto LABEL_77;
    }
LABEL_74:
    LODWORD(v45) = 16;
    goto LABEL_77;
  }
  uint64_t v46 = v20 * (uint64_t)v15 + v19 * (uint64_t)v14 + v22 * (uint64_t)v17;
  if (!v46) {
    goto LABEL_74;
  }
  uint64_t v47 = v22 * (uint64_t)v15 - v20 * (uint64_t)v17;
  if (v47 < 0) {
    uint64_t v47 = v20 * (uint64_t)v17 - v22 * (uint64_t)v15;
  }
  uint64_t v48 = v19 * (uint64_t)v17 - v22 * (uint64_t)v14;
  if (v48 < 0) {
    uint64_t v48 = -v48;
  }
  uint64_t v49 = v20 * (uint64_t)v14 - v19 * (uint64_t)v15;
  if (v49 < 0) {
    uint64_t v49 = -v49;
  }
  uint64_t v50 = v47 + v48;
  if (v48 < (unint64_t)v49)
  {
    uint64_t v51 = v49;
  }
  else
  {
    uint64_t v50 = v47 + v49;
    uint64_t v51 = v48;
  }
  BOOL v52 = v47 >= (unint64_t)v48 && v47 >= (unint64_t)v49;
  if (v52) {
    unint64_t v53 = v48 + v49;
  }
  else {
    unint64_t v53 = v50;
  }
  if (v52) {
    uint64_t v54 = v47;
  }
  else {
    uint64_t v54 = v51;
  }
  unint64_t v55 = v54 + (v53 >> 2);
  if (v46 < 0) {
    LODWORD(v45) = -16 * v46 / (uint64_t)(v55 - v46) + 16;
  }
  else {
    uint64_t v45 = (uint64_t)(16 * v55) / (uint64_t)(v55 + v46);
  }
LABEL_77:
  uint64_t v56 = *(void *)(a1 + 552);
  *(_DWORD *)(v56 + 12 * a3) += v45;
  uint64_t result = -v14;
  int v58 = -v15;
  int v59 = -v17;
  if (v23 >= 0) {
    unsigned int v60 = v23;
  }
  else {
    unsigned int v60 = -v23;
  }
  BOOL v61 = v60 < 0x1000 && v31;
  if (v24 >= 0) {
    unsigned int v62 = v24;
  }
  else {
    unsigned int v62 = -v24;
  }
  if (v25 >= 0) {
    unsigned int v63 = v25;
  }
  else {
    unsigned int v63 = -v25;
  }
  if (v61 && v62 <= 0xFFF && v63 <= 0xFFF)
  {
    int v64 = v23 * result + v24 * v58 + v25 * v59;
    if (v64)
    {
      int v65 = v24 * v17 + v25 * v58;
      if (v65 < 0) {
        int v65 = -v65;
      }
      int v66 = v23 * v59 + v25 * v14;
      if (v66 < 0) {
        int v66 = -v66;
      }
      int v67 = v23 * v15 + v24 * result;
      if (v67 < 0) {
        int v67 = -v67;
      }
      if (v65 < v66 || v65 < v67)
      {
        unsigned int v68 = v65 + v66;
        if (v66 < v67)
        {
          int v65 = v67;
        }
        else
        {
          unsigned int v68 = v65 + v67;
          int v65 = v66;
        }
      }
      else
      {
        unsigned int v68 = v66 + v67;
      }
      int v79 = v65 + (v68 >> 2);
      if (v64 < 0) {
        LODWORD(v78) = -16 * v64 / (v79 - v64) + 16;
      }
      else {
        LODWORD(v78) = 16 * v79 / (v79 + v64);
      }
      goto LABEL_131;
    }
LABEL_123:
    LODWORD(v78) = 16;
    goto LABEL_131;
  }
  uint64_t v69 = v24 * (uint64_t)v58 + v23 * (uint64_t)(int)result + v25 * (uint64_t)v59;
  if (!v69) {
    goto LABEL_123;
  }
  uint64_t v70 = v25 * (uint64_t)v58 - v24 * (uint64_t)v59;
  if (v70 < 0) {
    uint64_t v70 = v24 * (uint64_t)v59 - v25 * (uint64_t)v58;
  }
  uint64_t v71 = v23 * (uint64_t)v59 - v25 * (uint64_t)(int)result;
  if (v71 < 0) {
    uint64_t v71 = -v71;
  }
  uint64_t v72 = v24 * (uint64_t)(int)result - v23 * (uint64_t)v58;
  if (v72 < 0) {
    uint64_t v72 = -v72;
  }
  uint64_t v73 = v70 + v71;
  if (v71 < (unint64_t)v72)
  {
    uint64_t v74 = v72;
  }
  else
  {
    uint64_t v73 = v70 + v72;
    uint64_t v74 = v71;
  }
  BOOL v75 = v70 >= (unint64_t)v71 && v70 >= (unint64_t)v72;
  if (v75) {
    unint64_t v76 = v71 + v72;
  }
  else {
    unint64_t v76 = v73;
  }
  if (v75) {
    uint64_t v77 = v70;
  }
  else {
    uint64_t v77 = v74;
  }
  uint64_t v78 = v77 + (v76 >> 2);
  if (v69 < 0) {
    LODWORD(v78) = -16 * v69 / (v78 - v69) + 16;
  }
  else {
    uint64_t v78 = 16 * v78 / (v78 + v69);
  }
LABEL_131:
  *(_DWORD *)(v56 + 12 * a4) += v78;
  return result;
}

uint64_t sub_2170BAF94(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 184);
  int v6 = (int32x2_t *)(v5 + 12 * a2);
  int v7 = (int *)(*(void *)(a1 + 136) + 12 * a2);
  int v8 = *v7;
  int v9 = v7[1];
  int v10 = v7[2];
  int v11 = *(_DWORD *)(a3 + 12);
  if (v11 == 1)
  {
    if (v10 != -1)
    {
      unsigned int v12 = 0;
      int v18 = (int32x2_t *)(v5 + 12 * v8);
      int v19 = (int32x2_t *)(v5 + 12 * v9);
      int v20 = (int32x2_t *)(v5 + 12 * v10);
      int32x2_t v16 = vsub_s32(vadd_s32(*v19, *v18), *v20);
      int v17 = v19[1].i32[0] + v18[1].i32[0] - v20[1].i32[0];
      goto LABEL_38;
    }
  }
  else if (v11 == 2)
  {
    if (v10 == -1)
    {
      if (v9 == -1)
      {
        if (v8 == -1)
        {
          int v17 = 0;
          unsigned int v12 = -*(char *)(a3 + 21);
          int32x2_t v16 = 0;
        }
        else
        {
          unsigned int v12 = 0;
          BOOL v31 = (int32x2_t *)(v5 + 12 * v8);
          int32x2_t v16 = *v31;
          int v17 = v31[1].i32[0];
        }
      }
      else
      {
        unsigned int v12 = 0;
        unsigned int v27 = (int32x2_t *)(v5 + 12 * v8);
        unsigned int v28 = (int32x2_t *)(v5 + 12 * v9);
        uint32x2_t v29 = (uint32x2_t)vadd_s32(*v28, *v27);
        LODWORD(v27) = v27[1].i32[0];
        LODWORD(v28) = v28[1].i32[0];
        BOOL v24 = __OFADD__(v28, v27);
        int v30 = v28 + v27;
        int32x2_t v16 = vshr_n_s32((int32x2_t)vsra_n_u32(v29, v29, 0x1FuLL), 1uLL);
        if (v30 < 0 != v24) {
          ++v30;
        }
        int v17 = v30 >> 1;
      }
    }
    else
    {
      unsigned int v12 = 0;
      int v13 = (int32x2_t *)(v5 + 12 * v8);
      int v14 = (int32x2_t *)(v5 + 12 * v9);
      int v15 = (int32x2_t *)(v5 + 12 * v10);
      int32x2_t v16 = vsub_s32(vadd_s32(*v14, *v13), *v15);
      int v17 = v14[1].i32[0] + v13[1].i32[0] - v15[1].i32[0];
    }
    unsigned int v32 = (int *)(*(void *)(a1 + 160) + 12 * a2);
    int v33 = v32[2];
    if (v33 != -1)
    {
      unsigned int v34 = (int32x2_t *)(v5 + 12 * *v32);
      int v35 = (int32x2_t *)(v5 + 12 * v32[1]);
      __int32 v36 = v34[1].i32[0];
      int v37 = (const float *)&v35[1];
      int v38 = (int32x2_t *)(v5 + 12 * v33);
      int v39 = (int32x2_t *)(v5 + 12 * v9);
      int v40 = (int32x2_t *)(v5 + 12 * v8);
      __int32 v41 = v40[1].i32[0];
      BOOL v24 = __OFADD__(v41, v36);
      int v42 = v41 + v36;
      v43.i32[0] = v36;
      v43.i32[1] = v39[1].i32[0];
      int32x2_t v44 = (int32x2_t)vld1_dup_f32(v37);
      int32x2_t v45 = vadd_s32(v43, v44);
      if (v42 < 0 != v24) {
        int v46 = v42 + 1;
      }
      else {
        int v46 = v42;
      }
      uint64_t v47 = (int32x2_t *)(v5 + 12 * v10);
      v48.i32[0] = v38[1].i32[0];
      v48.i32[1] = v46 >> 1;
      int32x2_t v49 = vsub_s32(v45, v48);
      int v50 = 2 * v45.i32[1];
      int32x2_t v51 = vsub_s32(vadd_s32(*v35, *v34), *v38);
      int32x2_t v52 = vadd_s32(*v39, *v35);
      uint32x2_t v53 = (uint32x2_t)vadd_s32(*v40, *v34);
      int32x2_t v54 = (int32x2_t)vsra_n_u32(v53, v53, 0x1FuLL);
      int32x2_t v55 = vsub_s32(v52, vshr_n_s32(v54, 1uLL));
      int64x2_t v56 = vmull_s32(vsub_s32(vsra_n_s32(vadd_s32(v52, v52), v54, 1uLL), vadd_s32(*v38, *v47)), vdup_n_s32(0x55555556u));
      int32x2_t v57 = vadd_s32(vshrn_n_s64(v56, 0x20uLL), vmovn_s64((int64x2_t)vshrq_n_u64((uint64x2_t)v56, 0x3FuLL)));
      unint64_t v58 = 1431655766 * (v50 + (v46 >> 1) - (v38[1].i32[0] + v47[1].i32[0]));
      int v59 = HIDWORD(v58) + (v58 >> 63);
      unsigned int v60 = (_WORD *)(a1 + 2752);
      int32x2_t v89 = v16;
      int32x2_t v94 = v49;
      if (*(unsigned char *)(a3 + 20))
      {
        __int32 v61 = v6[1].i32[0] - v17;
        int32x2_t v96 = vsub_s32(*v6, v16);
        int v97 = v61;
        int v93 = (__int32 *)((char *)&unk_2174AFBD0
                        + (((*(unsigned __int16 *)(a1 + 2752) + 2048) >> 10) & 0x7CLL));
        uint64_t v91 = (__int32 *)((char *)&unk_2174AFBD0
                        + (((*(unsigned __int16 *)(a1 + 2754) + 2048) >> 10) & 0x7CLL));
        unsigned int v92 = sub_2170C4034((int *)&v96, 3, *(unsigned __int8 *)(a3 + 8), (unsigned __int16 **)(a1 + 2880));
        int v62 = v6[1].i32[0] - v94.i32[0];
        int32x2_t v96 = vsub_s32(*v6, v51);
        int v97 = v62;
        uint64_t v63 = ((67584 - *(unsigned __int16 *)(a1 + 2752)) >> 10) & 0x7CLL;
        uint64_t v64 = ((*(unsigned __int16 *)(a1 + 2756) + 2048) >> 10) & 0x7CLL;
        unsigned int v65 = sub_2170C4034((int *)&v96, 3, *(unsigned __int8 *)(a3 + 8), (unsigned __int16 **)(a1 + 2880));
        int v66 = v6[1].i32[0] - v94.i32[1];
        int32x2_t v96 = vsub_s32(*v6, v55);
        int v97 = v66;
        v67.i32[0] = *(_DWORD *)((char *)&unk_2174AFBD0 + v64);
        v67.i32[1] = *(_DWORD *)((char *)&unk_2174AFBD0
                               + (((67584 - *(unsigned __int16 *)(a1 + 2754)) >> 10) & 0x7CLL));
        v68.i32[0] = *(_DWORD *)((char *)&unk_2174AFBD0 + v63);
        v68.i32[1] = *(_DWORD *)((char *)&unk_2174AFBD0
                               + (((*(unsigned __int16 *)(a1 + 2752) + 2048) >> 10) & 0x7CLL));
        int32x2_t v90 = vadd_s32(vadd_s32(v67, v68), (int32x2_t)__PAIR64__(sub_2170C4034((int *)&v96, 3, *(unsigned __int8 *)(a3 + 8), (unsigned __int16 **)(a1 + 2880)), v65));
        int v69 = v6[1].i32[0] - v59;
        int32x2_t v96 = vsub_s32(*v6, v57);
        int v97 = v69;
        v67.i32[0] = *(_DWORD *)((char *)&unk_2174AFBD0
                               + (((67584 - *(unsigned __int16 *)(a1 + 2756)) >> 10) & 0x7CLL));
        v67.i32[1] = *v91;
        v68.i32[0] = *(_DWORD *)((char *)&unk_2174AFBD0
                               + (((67584 - *(unsigned __int16 *)(a1 + 2752)) >> 10) & 0x7CLL));
        v68.i32[1] = *v93;
        int32x2_t v70 = vadd_s32(v67, v68);
        unsigned int v71 = sub_2170C4034((int *)&v96, 3, *(unsigned __int8 *)(a3 + 8), (unsigned __int16 **)(a1 + 2880));
        int32x2_t v72 = v90;
        unsigned int v60 = (_WORD *)(a1 + 2752);
        int32x2_t v73 = vadd_s32(v70, (int32x2_t)__PAIR64__(v92, v71));
      }
      else
      {
        uint64_t v74 = (const float *)v6;
        int32x2_t v75 = (int32x2_t)vld1_dup_f32(v74++);
        unint64_t v76 = (const float *)&v6[1];
        int32x2_t v77 = (int32x2_t)vld1_dup_f32(v74);
        int32x2_t v78 = (int32x2_t)vld1_dup_f32(v76);
        int32x2_t v72 = vneg_s32(vadd_s32(vadd_s32(vclz_s32(vaba_s32((int32x2_t)0x100000001, v75, vzip1_s32(v51, v55))), vclz_s32(vaba_s32((int32x2_t)0x100000001, v77, vzip2_s32(v51, v55)))), vclz_s32(vaba_s32((int32x2_t)0x100000001, v78, v49))));
        int32x2_t v73 = vneg_s32(vadd_s32(vadd_s32(vclz_s32(vaba_s32((int32x2_t)0x100000001, v75, vzip1_s32(v57, v16))), vclz_s32(vaba_s32((int32x2_t)0x100000001, v77, vzip2_s32(v57, v16)))), vclz_s32(vaba_s32((int32x2_t)0x100000001, v78, (int32x2_t)__PAIR64__(v17, v59)))));
      }
      if (v72.i32[0] < v73.i32[1]
        && (int32x2_t v79 = vcgt_s32((int32x2_t)__PAIR64__(v72.u32[1], v73.u32[0]), vdup_lane_s32(v72, 0)), (v79.i8[4] & 1) != 0)
        && (v79.i8[0] & 1) != 0)
      {
        int v80 = 0;
        int v17 = v94.i32[0];
        int v81 = 1;
        uint64_t v82 = 2;
      }
      else
      {
        int32x2_t v83 = vcgt_s32(v73, vdup_lane_s32(v72, 1));
        if (v83.i8[4] & v83.i8[0])
        {
          int v81 = 0;
          int v17 = v94.i32[1];
          int v80 = 1;
          uint64_t v82 = 1;
          int32x2_t v51 = v55;
        }
        else if (v73.i32[0] >= v73.i32[1])
        {
          int v80 = 0;
          int v81 = 0;
          uint64_t v82 = 1;
          int32x2_t v51 = v89;
        }
        else
        {
          int v80 = 1;
          uint64_t v82 = 2;
          int v17 = v59;
          int v81 = 1;
          int32x2_t v51 = v57;
        }
      }
      sub_2170A5080(a1 + 3560, v81, v60);
      sub_2170A5080(a1 + 3560, v80, (_WORD *)(a1 + 2 * v82 + 2752));
      unsigned int v12 = 1;
      int32x2_t v16 = v51;
    }
    goto LABEL_38;
  }
  if (v9 == -1)
  {
    if (v8 == -1)
    {
      int v17 = 0;
      unsigned int v12 = -*(char *)(a3 + 21);
      int32x2_t v16 = 0;
    }
    else
    {
      unsigned int v12 = 0;
      unsigned int v26 = (int32x2_t *)(v5 + 12 * v8);
      int32x2_t v16 = *v26;
      int v17 = v26[1].i32[0];
    }
  }
  else
  {
    unsigned int v12 = 0;
    int v21 = (int32x2_t *)(v5 + 12 * v8);
    int v22 = (int32x2_t *)(v5 + 12 * v9);
    uint32x2_t v23 = (uint32x2_t)vadd_s32(*v22, *v21);
    LODWORD(v21) = v21[1].i32[0];
    LODWORD(v22) = v22[1].i32[0];
    BOOL v24 = __OFADD__(v22, v21);
    int v25 = v22 + v21;
    int32x2_t v16 = vshr_n_s32((int32x2_t)vsra_n_u32(v23, v23, 0x1FuLL), 1uLL);
    if (v25 < 0 != v24) {
      ++v25;
    }
    int v17 = v25 >> 1;
  }
LABEL_38:
  __int32 v84 = v6[1].i32[0] - v17;
  int32x2_t v96 = vsub_s32(*v6, v16);
  int v97 = v84;
  if ((v12 & 0x80000000) != 0)
  {
    char v95 = 3;
    uint64_t v85 = &v95;
    uint64_t v87 = a1;
    int v86 = 0;
  }
  else
  {
    uint64_t v85 = (char *)(a3 + 8);
    int v86 = (void *)(a1 + 120 * v12 + 2760);
    uint64_t v87 = a1;
  }
  return sub_2170BB658(v87, (uint64_t)&v96, v85, v86);
}

uint64_t sub_2170BB658(uint64_t result, uint64_t a2, unsigned char *a3, void *a4)
{
  uint64_t v6 = result + 3560;
  switch(*a3)
  {
    case 0:
      uint64_t v7 = 0;
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      while (1)
      {
        unsigned int v10 = *(_DWORD *)(a2 + v7);
        int v11 = (_WORD *)(*a4 + v8);
        uint64_t v12 = v6;
        if (v10)
        {
          sub_2170A5080(v6, 1, v11);
          int v13 = (_WORD *)(a4[3] + v8);
          if ((v10 & 0x80000000) != 0)
          {
            sub_2170A5080(v6, 0, v13);
            unsigned int v10 = -v10;
          }
          else
          {
            sub_2170A5080(v6, 1, v13);
          }
          uint64_t v15 = a4[6];
          int32x2_t v16 = (_WORD *)(v15 + v9);
          if (v10 > 0x3F)
          {
            sub_2170A5080(v6, 1, (_WORD *)(v15 + v9));
            sub_2170A5080(v6, 1, v16 + 2);
            sub_2170A5080(v6, 1, v16 + 6);
            sub_2170A5080(v6, 1, v16 + 14);
            sub_2170A5080(v6, 1, v16 + 30);
            sub_2170A5080(v6, 1, v16 + 62);
            uint64_t result = sub_2170A56D8(v6, v10 - 64, *(_DWORD *)(a4[12] + v7), (_WORD *)(a4[9] + v8));
            goto LABEL_12;
          }
          unsigned int v17 = v10 - 1;
          sub_2170A5080(v6, (v10 - 1) & 1, (_WORD *)(v15 + v9));
          sub_2170A5080(v6, ((v10 - 1) >> 1) & 1, (_WORD *)(v15 + 2 * (((_BYTE)v10 + 1) & 1) + v9 + 2));
          sub_2170A5080(v6, (v17 >> 2) & 1, (_WORD *)(v15 + 2 * (v17 & 3) + v9 + 6));
          sub_2170A5080(v6, (v17 >> 3) & 1, (_WORD *)(v15 + 2 * (v17 & 7) + v9 + 14));
          sub_2170A5080(v6, (v17 >> 4) & 1, (_WORD *)(v15 + 2 * (v17 & 0xF) + v9 + 30));
          unsigned int v14 = ((v10 - 1) >> 5) & 1;
          int v11 = (_WORD *)(v15 + 2 * ((v10 - 1) & 0x1FLL) + v9 + 62);
          uint64_t v12 = v6;
        }
        else
        {
          unsigned int v14 = 0;
        }
        uint64_t result = sub_2170A5080(v12, v14, v11);
LABEL_12:
        v9 += 128;
        v8 += 2;
        v7 += 4;
        if (v9 == 384) {
          return result;
        }
      }
    case 2:
      uint64_t v18 = 0;
      for (uint64_t i = 0; ; i += 4)
      {
        signed int v20 = *(_DWORD *)(a2 + i);
        uint64_t v21 = a4[12];
        uint64_t result = sub_2170A5664(v6, v20, *(_DWORD *)(v21 + i), (_WORD *)(a4[3] + v18), (_WORD *)(a4[9] + v18));
        unsigned int v22 = v20 >= 0 ? v20 : -v20;
        int v23 = *(_DWORD *)(v21 + i);
        unsigned int v24 = v22 >> v23;
        if (v23 && v24 == 0) {
          break;
        }
        if (v24 >= 2)
        {
          int v26 = 1;
LABEL_25:
          *(_DWORD *)(v21 + i) = v23 + v26;
        }
        v18 += 2;
        if (v18 == 6) {
          return result;
        }
      }
      int v26 = -1;
      goto LABEL_25;
    case 3:
      uint64_t v27 = 0;
      uint64_t v28 = result + 12;
      do
      {
        int v29 = *(_DWORD *)(v28 + 4 * v27);
        if (v29 >= 1)
        {
          int v30 = 0;
          unsigned int v31 = *(_DWORD *)(a2 + 4 * v27);
          do
          {
            __int16 v47 = 0x8000;
            uint64_t result = sub_2170A5080(v6, (v31 >> v30++) & 1, &v47);
          }
          while (v29 != v30);
        }
        ++v27;
      }
      while (v27 != 3);
      return result;
    case 4:
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      break;
    default:
      return result;
  }
  do
  {
    unsigned int v35 = *(_DWORD *)(a2 + v32);
    __int32 v36 = (_WORD *)(*a4 + v33);
    uint64_t v37 = v6;
    if (!v35)
    {
      int v39 = 0;
LABEL_42:
      uint64_t result = sub_2170A5080(v37, v39, v36);
      goto LABEL_49;
    }
    sub_2170A5080(v6, 1, v36);
    int v38 = (_WORD *)(a4[3] + v33);
    if ((v35 & 0x80000000) != 0)
    {
      sub_2170A5080(v6, 0, v38);
      unsigned int v35 = -v35;
    }
    else
    {
      sub_2170A5080(v6, 1, v38);
    }
    unint64_t v40 = v35 - 1;
    uint64_t v41 = a4[6];
    int v42 = (_WORD *)(v41 + v34);
    if (v35 <= 0x3F)
    {
      sub_2170A5080(v6, (v40 >> 5) & 1, (_WORD *)(v41 + v34));
      sub_2170A5080(v6, (v40 >> 4) & 1, (_WORD *)((char *)v42 + ((v40 >> 4) & 0xFFFFFFE) + 2));
      sub_2170A5080(v6, (v40 >> 3) & 1, (_WORD *)((char *)v42 + ((v40 >> 3) & 0x1FFFFFFE) + 6));
      sub_2170A5080(v6, (v40 >> 2) & 1, (_WORD *)((char *)v42 + ((v40 >> 2) & 0x3FFFFFFE) + 14));
      sub_2170A5080(v6, (v40 >> 1) & 1, (_WORD *)((char *)v42 + ((v40 >> 1) & 0x7FFFFFFE) + 30));
      int v39 = ((_BYTE)v35 - 1) & 1;
      __int32 v36 = (_WORD *)((char *)v42 + (v40 & 0xFFFFFFFE) + 62);
      uint64_t v37 = v6;
      goto LABEL_42;
    }
    sub_2170A5080(v6, 1, (_WORD *)(v41 + v34));
    sub_2170A5080(v6, 1, v42 + 2);
    sub_2170A5080(v6, 1, v42 + 6);
    sub_2170A5080(v6, 1, v42 + 14);
    sub_2170A5080(v6, 1, v42 + 30);
    sub_2170A5080(v6, 1, v42 + 62);
    uint64_t v43 = a4[12];
    uint64_t result = sub_2170A56D8(v6, v35 - 64, *(_DWORD *)(v43 + v32), (_WORD *)(a4[9] + v33));
    int v44 = *(_DWORD *)(v43 + v32);
    unsigned int v45 = v40 >> v44;
    if (!v44 || v45)
    {
      if (v45 < 2) {
        goto LABEL_49;
      }
      int v46 = v44 + 1;
    }
    else
    {
      int v46 = v44 - 1;
    }
    *(_DWORD *)(v43 + v32) = v46;
LABEL_49:
    v34 += 128;
    v33 += 2;
    v32 += 4;
  }
  while (v34 != 384);
  return result;
}

uint64_t sub_2170BBB1C(uint64_t a1, int a2, int a3, int a4, unsigned int *a5, uint64_t a6)
{
  uint64_t v9 = (int *)(*(void *)(a1 + 528) + 16 * a2);
  unsigned int v10 = (int *)(*(void *)(a1 + 456) + 4 * a3);
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  int v13 = *(_DWORD *)(a1 + 36);
  if (v13)
  {
    if (v13 == 1)
    {
      int v14 = 2 * (v11 - v12);
    }
    else if ((int)v11 <= (int)v12)
    {
      int v14 = 0;
    }
    else
    {
      int v14 = 0;
      uint64_t v15 = (int *)(*(void *)(a1 + 432) + 4 * v12);
      uint64_t v16 = v11 - v12;
      do
      {
        uint64_t v17 = *v15++;
        int v14 = v14 - *(_DWORD *)(*(void *)(a1 + 232) + 4 * v17) + *(_DWORD *)(*(void *)(a1 + 232) + 4 * v17 + 4) - 2;
        --v16;
      }
      while (v16);
    }
  }
  else
  {
    int v14 = v11 - v12;
  }
  int v111 = *(_DWORD *)a1;
  int v18 = *v9;
  int v19 = v9[1];
  signed int v20 = (void *)(a1 + 408);
  unint64_t v21 = v14 + 1;
  uint64_t v113 = a1 + 384;
  sub_21681C000(a1 + 384, v21);
  uint64_t v22 = *(void *)(a1 + 408);
  unint64_t v23 = *(void *)(a1 + 416) - v22;
  if (v21 <= v23)
  {
    if (v21 < v23) {
      *(void *)(a1 + 416) = v22 + v21;
    }
  }
  else
  {
    sub_217077494((unint64_t *)(a1 + 408), v21 - v23);
  }
  if ((int)v12 < (int)v11)
  {
    int v24 = 0;
    uint64_t v25 = *(void *)(a1 + 432);
    uint64_t v26 = *(void *)(a1 + 112);
    uint64_t v27 = *(void *)(a1 + 40);
    uint64_t v28 = v12;
    uint64_t v29 = *(void *)(a1 + 232);
    do
    {
      uint64_t v30 = *(int *)(v25 + 4 * v28);
      *(_DWORD *)(v26 + 4 * *(int *)(a1 + 284)) = v30;
      int v31 = *(_DWORD *)(a1 + 284);
      *(_DWORD *)(a1 + 284) = v31 + 1;
      *(_DWORD *)(v27 + 4 * v30) = v31;
      int v32 = *(_DWORD *)(v29 + 4 * v30);
      if (v28 == v12) {
        int v33 = 1;
      }
      else {
        int v33 = 2;
      }
      int v34 = v33 + v32;
      uint64_t v35 = *(int *)(v29 + 4 * ((int)v30 + 1));
      if (v33 + v32 < (int)v35)
      {
        uint64_t v36 = *(void *)(a1 + 208);
        uint64_t v37 = v34;
        int v38 = (_DWORD *)(*(void *)(a1 + 384) + 4 * v24);
        int v24 = v24 + v35 - v34;
        do
          *v38++ = *(_DWORD *)(v36 + 4 * v37++);
        while (v37 < v35);
      }
      ++v28;
    }
    while (v28 != v11);
  }
  if (**(_DWORD **)v113 == v19 || *(_DWORD *)(*(void *)v113 + 4 * v14) != v18)
  {
    if ((v14 & 0x80000000) == 0)
    {
      uint64_t v45 = 0;
      do
      {
        int v46 = *(_DWORD *)(*(void *)(a1 + 384) + 4 * v45);
        uint64_t v47 = *(void *)(a1 + 64);
        int v48 = *(_DWORD *)(v47 + 4 * v46);
        if (v48 == -1)
        {
          *(_DWORD *)(v47 + 4 * v46) = *(_DWORD *)(a1 + 280);
          uint64_t v49 = *(int *)(a1 + 280);
          *(_DWORD *)(a1 + 280) = v49 + 1;
          *(_DWORD *)(*(void *)(a1 + 88) + 4 * v49) = v46;
        }
        *(unsigned char *)(*v20 + v45++) = v48 == -1;
      }
      while (v21 != v45);
    }
  }
  else if ((v14 & 0x80000000) == 0)
  {
    uint64_t v39 = v14;
    do
    {
      int v40 = *(_DWORD *)(*(void *)(a1 + 384) + 4 * v39);
      uint64_t v41 = *(void *)(a1 + 64);
      int v42 = *(_DWORD *)(v41 + 4 * v40);
      if (v42 == -1)
      {
        *(_DWORD *)(v41 + 4 * v40) = *(_DWORD *)(a1 + 280);
        uint64_t v43 = *(int *)(a1 + 280);
        *(_DWORD *)(a1 + 280) = v43 + 1;
        *(_DWORD *)(*(void *)(a1 + 88) + 4 * v43) = v40;
      }
      *(unsigned char *)(*v20 + v39) = v42 == -1;
    }
    while (v39-- > 0);
  }
  int v50 = *(int **)(a1 + 384);
  uint64_t v51 = *v50;
  uint64_t v52 = v50[v14];
  uint32x2_t v53 = *(unsigned __int8 **)(a1 + 408);
  int v110 = *v53;
  BOOL v54 = v110 == 0;
  int v55 = v53[v14];
  BOOL v56 = v53[v14] == 0;
  BOOL v57 = v51 == v19 && v110 == 0;
  BOOL v58 = v52 == v18 && v56;
  BOOL v107 = v57;
  char v108 = v58;
  int v59 = !v57;
  int v60 = !v58;
  uint64_t v105 = v51;
  uint64_t v106 = v52;
  int v109 = v55;
  if ((v59 & 1) != 0 || v60)
  {
    if ((v56 | v59) == 1)
    {
      char v62 = v59 ^ 1;
      if (v55) {
        char v62 = 0;
      }
      if (v62)
      {
        int v61 = 2;
      }
      else if ((v54 | v60) == 1)
      {
        BOOL v63 = v110 != 0;
        if (v55) {
          BOOL v63 = 0;
        }
        if (v63)
        {
          int v61 = 4;
        }
        else
        {
          BOOL v64 = v58;
          if (v110) {
            BOOL v64 = 0;
          }
          if (v64)
          {
            int v61 = 5;
          }
          else
          {
            BOOL v65 = !v56;
            if (v110) {
              BOOL v65 = 0;
            }
            if (v65)
            {
              int v61 = 6;
            }
            else if (v54 || v56)
            {
              int v61 = 8;
            }
            else
            {
              int v61 = 7;
            }
          }
        }
      }
      else
      {
        int v61 = 3;
      }
    }
    else
    {
      int v61 = 1;
    }
  }
  else
  {
    int v61 = 0;
  }
  *a5 = v61;
  sub_2170A5080(a1 + 3560, v61 == 0, (_WORD *)(a1 + 16 * a4 + 2494));
  if (*a5)
  {
    unsigned int v66 = *a5 - 1;
    uint64_t v67 = a1 + 16 * a4;
    uint64_t v68 = v67 + 2494;
    sub_2170A5080(a1 + 3560, v66 & 1, (_WORD *)(v67 + 2496));
    sub_2170A5080(a1 + 3560, (v66 >> 1) & 1, (_WORD *)(v68 + 2 * (v66 & 1 | 2)));
    sub_2170A5080(a1 + 3560, (v66 >> 2) & 1, (_WORD *)(v68 + 2 * (v66 & 3 | 4)));
  }
  if (*(unsigned char *)(a6 + 18) && *(unsigned char *)(a6 + 17))
  {
    int v69 = *(_DWORD *)(*(void *)(a1 + 552) + 12 * a2);
    if (v69 <= 19) {
      int v69 = 19;
    }
    unsigned int v70 = v69 - 19;
    unsigned int v115 = v70 >> 1;
    int v116 = 15;
    BOOL v71 = v70 >= 0x1E;
    int32x2_t v72 = &v116;
    if (!v71) {
      int32x2_t v72 = (int *)&v115;
    }
  }
  else
  {
    int v117 = 7;
    int32x2_t v72 = (int *)(*(void *)(a1 + 504) + 4 * a2);
    if (*v72 >= 7) {
      int32x2_t v72 = &v117;
    }
  }
  int v73 = *v72;
  int v74 = v11 + ~v12;
  int32x2_t v75 = (_WORD *)(a1 + 6 * *v72 + 2388);
  if (v74 > 2)
  {
    sub_2170A5080(a1 + 3560, 1, v75);
    sub_2170A5080(a1 + 3560, 1, (_WORD *)(a1 + 6 * v73 + 2392));
    sub_2170A56D8(a1 + 3560, v74 - 3, 0, (_WORD *)(a1 + 2484));
  }
  else
  {
    sub_2170A5080(a1 + 3560, v74 & 1, v75);
    sub_2170A5080(a1 + 3560, (v74 >> 1) & 1, (_WORD *)(a1 + 6 * v73 + 2 * ((v74 & 1u) + 1) + 2388));
  }
  int v76 = *(_DWORD *)(a1 + 36);
  if (v76 == 3)
  {
    if ((int)v12 < (int)v11)
    {
      uint64_t v80 = 4 * v12;
      int v81 = v11 - v12;
      do
      {
        uint64_t v82 = (_DWORD *)(*(void *)(a1 + 232) + 4 * *(int *)(*(void *)(a1 + 432) + v80));
        int v83 = v82[1] - *v82;
        if (v83 > 5)
        {
          sub_2170A5080(a1 + 3560, 1, (_WORD *)(a1 + 2486));
          sub_2170A5080(a1 + 3560, 1, (_WORD *)(a1 + 2490));
          sub_2170A56D8(a1 + 3560, v83 - 6, 0, (_WORD *)(a1 + 2492));
        }
        else
        {
          sub_2170A5080(a1 + 3560, (v83 - 3) & 1, (_WORD *)(a1 + 2486));
          sub_2170A5080(a1 + 3560, ((v83 - 3) >> 1) & 1, (_WORD *)(a1 + 2 * (((v83 - 3) & 1u) + 1) + 2486));
        }
        v80 += 4;
        --v81;
      }
      while (v81);
    }
  }
  else if (v76 == 2 && (int)v11 > (int)v12)
  {
    uint64_t v77 = 4 * v12;
    int v78 = v11 - v12;
    do
    {
      int32x2_t v79 = (_DWORD *)(*(void *)(a1 + 232) + 4 * *(int *)(*(void *)(a1 + 432) + v77));
      sub_2170A5080(a1 + 3560, v79[1] - *v79 != 3, (_WORD *)(a1 + 2486));
      v77 += 4;
      --v78;
    }
    while (v78);
  }
  char v84 = v107;
  if (v110) {
    char v84 = 1;
  }
  if ((v84 & 1) == 0)
  {
    if (*(unsigned char *)(a6 + 17)) {
      sub_2170B9F0C(a1, v105, *(_DWORD *)(*(void *)(a1 + 64) + 4 * a2) - 1);
    }
    else {
      sub_2170A5664(a1 + 3560, *(_DWORD *)(*(void *)(a1 + 64) + 4 * v105) - *(_DWORD *)(*(void *)(a1 + 64) + 4 * a2) + 1, 0, (_WORD *)(a1 + 2610), (_WORD *)(a1 + 2612));
    }
  }
  if (v14 >= 2)
  {
    uint64_t v85 = 1;
    do
    {
      char v86 = *(unsigned char *)(*v20 + v85);
      int v87 = v86 & 1;
    }
    while (++v85 < v14 && v87 != 0);
    sub_2170A5080(a1 + 3560, v87, (_WORD *)(a1 + 2614));
    if ((v86 & 1) == 0)
    {
      if (v21 == 3)
      {
        uint64_t v89 = *(int *)(*(void *)v113 + 4);
        if (*(unsigned char *)(a6 + 17)) {
          sub_2170B9F0C(a1, v89, v111);
        }
        else {
          sub_2170A56D8(a1 + 3560, v111 - *(_DWORD *)(*(void *)(a1 + 64) + 4 * v89), 0, (_WORD *)(a1 + 2612));
        }
      }
      else
      {
        for (uint64_t i = 1; i != v14; ++i)
        {
          int v91 = *(unsigned __int8 *)(*v20 + i);
          sub_2170A5080(a1 + 3560, *(unsigned char *)(*v20 + i) != 0, (_WORD *)(a1 + 2574));
          if (!v91)
          {
            uint64_t v92 = *(int *)(*(void *)v113 + 4 * i);
            if (*(unsigned char *)(a6 + 17)) {
              sub_2170B9F0C(a1, v92, v111);
            }
            else {
              sub_2170A56D8(a1 + 3560, v111 - *(_DWORD *)(*(void *)(a1 + 64) + 4 * v92), 0, (_WORD *)(a1 + 2612));
            }
          }
        }
      }
    }
  }
  char v93 = v108;
  if (v109) {
    char v93 = 1;
  }
  if ((v93 & 1) == 0)
  {
    if (*(unsigned char *)(a6 + 17)) {
      sub_2170B9F0C(a1, v106, *(_DWORD *)(*(void *)(a1 + 64) + 4 * a2) + 1);
    }
    else {
      sub_2170A5664(a1 + 3560, *(_DWORD *)(*(void *)(a1 + 64) + 4 * v106) + ~*(_DWORD *)(*(void *)(a1 + 64) + 4 * a2), 0, (_WORD *)(a1 + 2610), (_WORD *)(a1 + 2612));
    }
  }
  sub_2170BA600((void *)a1, a2, *a5, v21);
  if (*(unsigned char *)(a6 + 17)) {
    BOOL v94 = *(unsigned char *)(a6 + 18) == 0;
  }
  else {
    BOOL v94 = 1;
  }
  int v95 = v94;
  if (v14 >= 1)
  {
    uint64_t v96 = *(void *)(a1 + 528);
    uint64_t v97 = v14;
    int v98 = (int *)(*(void *)(a1 + 384) + 4);
    do
    {
      uint64_t v100 = *(v98 - 1);
      uint64_t v99 = *v98;
      uint64_t v101 = v96 + 16 * v99;
      *(_DWORD *)(v101 + 4) = v100;
      *(_DWORD *)(v101 + 8) = a2;
      int v102 = (_DWORD *)(v96 + 16 * v100);
      *int v102 = v99;
      v102[3] = a2;
      if (v95)
      {
        uint64_t v103 = *(void *)(a1 + 504);
        ++*(_DWORD *)(v103 + 4 * v100);
        ++*(_DWORD *)(v103 + 4 * v99);
      }
      ++v98;
      --v97;
    }
    while (v97);
  }
  return v14 + 1;
}

uint64_t sub_2170BC3E0(uint64_t result, int a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a2 == 3 || a2 == 5)
  {
    if (a3 >= 1)
    {
      unint64_t v6 = a3 + 1;
      do
      {
        uint64_t v7 = (v6 - 2);
        if (*(unsigned char *)(*(void *)(v5 + 408) + v7)) {
          uint64_t result = sub_2170BAF94(v5, *(_DWORD *)(*(void *)(v5 + 384) + 4 * v7), a4);
        }
        --v6;
      }
      while (v6 > 1);
    }
  }
  else if (a3 >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = a3;
    do
    {
      if (*(unsigned char *)(*(void *)(v5 + 408) + v8)) {
        uint64_t result = sub_2170BAF94(v5, *(_DWORD *)(*(void *)(v5 + 384) + 4 * v8), a4);
      }
      ++v8;
    }
    while (v9 != v8);
  }
  return result;
}

void sub_2170BC49C(void *a1, int a2, int a3, uint64_t a4)
{
  if (a3 > 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 4 * a3 - 4;
    do
    {
      unsigned int v10 = (int *)(a1[48] + v8);
      int v11 = *v10;
      int v12 = v10[1];
      if (*(unsigned char *)(a4 + 19))
      {
        sub_2170BABD0((uint64_t)a1, a2, v11, v12);
      }
      else
      {
        uint64_t v13 = a1[69];
        *(_DWORD *)(v13 + 12 * v11) += 8;
        *(_DWORD *)(v13 + 12 * v12) += 8;
      }
      v8 += 4;
    }
    while (v9 != v8);
  }
  if (a3 >= 1)
  {
    uint64_t v14 = 0;
    do
    {
      uint64_t v15 = (int *)(a1[69] + 12 * *(int *)(a1[48] + 4 * v14));
      uint64_t v16 = a1 + 72;
      if (*(unsigned char *)(a1[51] + v14)) {
        sub_2170ABC20(v16, v15);
      }
      else {
        sub_2170ABD78(v16, v15);
      }
      ++v14;
    }
    while (a3 != v14);
  }
}

uint64_t sub_2170BC59C(uint64_t a1, int *a2, unsigned char *a3, int a4, unint64_t a5, uint64_t a6, unint64_t a7, int *a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12)
{
  uint64_t result = 5;
  if (a7 - 255 < 0xFFFFFFFFFFFFFF02) {
    return result;
  }
  int v14 = a5;
  if (a5 > 0xFE) {
    return result;
  }
  if (!a6) {
    return result;
  }
  if (!a2) {
    return result;
  }
  uint64_t v17 = a9;
  if (!a9) {
    return result;
  }
  if ((*(unsigned __int8 *)(a12 + 8) | 2) == 3) {
    return result;
  }
  int v22 = *(_DWORD *)(a12 + 12);
  int v23 = *(_DWORD *)(a12 + 20);
  if (!a8)
  {
    if (v23) {
      return result;
    }
  }
  if (!a3 && *(_DWORD *)(a12 + 16)) {
    return result;
  }
  unsigned int v24 = *(_DWORD *)(a12 + 4);
  if (v24 > 0x1B || (v22 - 5) <= 1 && (a7 != 2 || !v24)) {
    return result;
  }
  if ((unint64_t)a10 < 0x21) {
    return 1;
  }
  uint64_t v25 = *(void *)(a1 + 216) - *(void *)(a1 + 208);
  uint64_t v26 = v25 >> 2;
  if (!v23)
  {
    uint64_t v31 = *(void *)(a1 + 3256);
    uint64_t v32 = *(void *)(a1 + 3264);
    if (v31 == v32 || v26 != (v32 - v31) >> 2) {
      return result;
    }
    goto LABEL_27;
  }
  if ((int)v26 < 1)
  {
LABEL_27:
    unsigned int v91 = v22 - 5;
    int v92 = v26;
    *(_DWORD *)(a1 + 3544) = a7;
    *(_DWORD *)(a1 + 3548) = a6;
    char v93 = (int **)(a1 + 3160);
    BOOL v94 = (void *)(a1 + 3136);
    *(_DWORD *)(a1 + 3552) = a4;
    sub_21681C000(a1 + 3160, a7);
    sub_21681C000(a1 + 3184, a7);
    sub_21681C000(a1 + 3136, a7);
    int v34 = (int **)(a1 + 3160);
    int v33 = (int **)(a1 + 3184);
    if (a7)
    {
      uint64_t v35 = *v93;
      uint64_t v36 = *(_DWORD **)(a1 + 3184);
      uint64_t v37 = a2;
      unint64_t v38 = a7;
      do
      {
        int v39 = *v37++;
        *v35++ = v39;
        *v36++ = v39;
        --v38;
      }
      while (v38);
    }
    if ((int)a6 >= 2)
    {
      int v40 = 1;
      int v41 = a7;
      do
      {
        if (a7)
        {
          int v42 = *v34;
          uint64_t v43 = *v33;
          int v44 = &a2[v41];
          v41 += a7;
          unint64_t v45 = a7;
          do
          {
            int v46 = *v44;
            if (*v44 >= *v42) {
              int v46 = *v42;
            }
            *v42++ = v46;
            int v48 = *v44++;
            int v47 = v48;
            if (*v43 > v48) {
              int v47 = *v43;
            }
            *v43++ = v47;
            --v45;
          }
          while (v45);
        }
        ++v40;
      }
      while (v40 != a6);
    }
    int v49 = *(_DWORD *)(a12 + 4);
    if (a7)
    {
      uint64_t v50 = 0;
      int v51 = 1 << v49;
      uint64_t v52 = *v33;
      uint32x2_t v53 = *v34;
      uint64_t result = 5;
      while (1)
      {
        uint64_t v54 = v52[v50];
        uint64_t v55 = v53[v50];
        if (v54 - v55 > 0xFFFFFFF) {
          return 5;
        }
        if (*(_DWORD *)(a12 + 4) && ((v55 & 0x80000000) != 0 || (int)v54 >= v51)) {
          return result;
        }
        if (v91 > 1)
        {
          *(_DWORD *)(*v94 + 4 * v50) = v54 - v55;
        }
        else
        {
          *(_DWORD *)(*v94 + 4 * v50) = v54;
          v53[v50] = 0;
        }
        if (a7 == ++v50)
        {
          int v49 = *(_DWORD *)(a12 + 4);
          goto LABEL_51;
        }
      }
    }
    else
    {
LABEL_51:
      uint64_t v106 = (_DWORD *)a9;
      uint64_t v107 = a10;
      long long v95 = 0u;
      uint64_t v102 = 0;
      int v103 = 0;
      HIDWORD(v95) = a6;
      int v96 = a7;
      int v97 = v92;
      int v98 = v14;
      int v99 = v49;
      int v100 = a4;
      int v101 = 3;
      uint64_t v102 = *(void *)(a12 + 16);
      char v104 = *(unsigned char *)(a12 + 8);
      int v105 = *(_DWORD *)(a12 + 12);
      BOOL v56 = (_DWORD *)sub_2170B4820(a9, a10, (uint64_t)&v95);
      if (a7)
      {
        uint64_t v58 = 0;
        do
        {
          BOOL v59 = v57 < 4;
          v57 -= 4;
          if (v59)
          {
            uint64_t v57 = 0;
            BOOL v56 = 0;
          }
          else
          {
            *v56++ = (*v93)[v58];
          }
          unsigned int v60 = *(_DWORD *)(*v94 + 4 * v58);
          unsigned int v61 = 32 - __clz(v60);
          if (v60) {
            unsigned int v62 = v61;
          }
          else {
            unsigned int v62 = 0;
          }
          *(_DWORD *)(*v94 + 4 * v58++) = v62;
        }
        while (a7 != v58);
        uint64_t v63 = 0;
        do
        {
          BOOL v59 = v57-- < 1;
          if (v59)
          {
            uint64_t v57 = 0;
            BOOL v56 = 0;
          }
          else
          {
            *(unsigned char *)BOOL v56 = *(_DWORD *)(*v94 + 4 * v63);
            BOOL v56 = (_DWORD *)((char *)v56 + 1);
          }
          ++v63;
        }
        while (a7 != v63);
      }
      uint64_t v106 = v56;
      uint64_t v107 = v57;
      sub_21681C000(a1 + 3208, a7 * a6);
      if ((int)a6 >= 1)
      {
        int v64 = 0;
        int v65 = 0;
        do
        {
          if (a7)
          {
            unsigned int v66 = *v93;
            uint64_t v67 = &a2[v65];
            uint64_t v68 = (_DWORD *)(*(void *)(a1 + 3208) + 4 * v65);
            v65 += a7;
            unint64_t v69 = a7;
            do
            {
              int v71 = *v67++;
              int v70 = v71;
              int v72 = *v66++;
              *v68++ = v70 - v72;
              --v69;
            }
            while (v69);
          }
          ++v64;
        }
        while (v64 != a6);
      }
      if (*(_DWORD *)(a12 + 20))
      {
        uint64_t v73 = *(unsigned int *)(a1 + 4);
        sub_21681C000(a1 + 3256, (uint64_t)(*(void *)(a1 + 216) - *(void *)(a1 + 208)) >> 2);
        if ((int)v73 >= 1)
        {
          uint64_t v74 = 0;
          uint64_t v75 = *(void *)(a1 + 256);
          uint64_t v76 = *(void *)(a1 + 232);
          do
          {
            uint64_t v77 = *(int *)(v76 + 4 * v74);
            uint64_t v78 = v74 + 1;
            uint64_t v79 = *(int *)(v76 + 4 * (v74 + 1));
            int v80 = v79 - v77;
            if ((int)v79 > (int)v77)
            {
              int v81 = *(_DWORD *)(v75 + 4 * v74);
              uint64_t v82 = (_DWORD *)(*(void *)(a1 + 3256) + 4 * v77);
              uint64_t v83 = v79 - v77;
              do
              {
                *v82++ = a8[v81 % v80 + (int)v77];
                ++v81;
                --v83;
              }
              while (v83);
            }
            uint64_t v74 = v78;
          }
          while (v78 != v73);
        }
      }
      if (a3 && *(_DWORD *)(a12 + 16))
      {
        sub_2170B2168((unint64_t *)(a1 + 3232), (int)a6);
        if ((int)a6 >= 1)
        {
          uint64_t v84 = 0;
          do
          {
            *(unsigned char *)(*(void *)(a1 + 3232) + v84) = a3[v84];
            ++v84;
          }
          while (a6 != v84);
        }
        sub_2170B2168((unint64_t *)(a1 + 3096), (int)a6);
        if (a6 << 32) {
          memmove(*(void **)(a1 + 3096), a3, (int)a6);
        }
      }
      else
      {
        sub_2170B2168((unint64_t *)(a1 + 3232), 0);
      }
      uint64_t result = sub_2170BCB30(a1, a12, (uint64_t)&v106);
      if (!result)
      {
        uint64_t result = 1;
        if (v106)
        {
          if ((v107 & 0x8000000000000000) == 0)
          {
            uint64_t v85 = (a10 & ~(a10 >> 63)) - v107;
            if (a10 - v85 >= 0) {
              uint64_t v86 = (a10 & ~(a10 >> 63)) - v107;
            }
            else {
              uint64_t v86 = 0;
            }
            if (a10 - v85 < 0) {
              uint64_t v17 = 0;
            }
            uint64_t v87 = v86 & ~(v86 >> 63);
            *a11 = v87;
            if (v86 >= 16) {
              *(_DWORD *)(v17 + 12) = v87;
            }
            uint64_t v88 = 8;
            if (v86 > 8) {
              uint64_t v88 = v86;
            }
            int v89 = sub_2170A42E8(v17 + 8, v88 - 8);
            if (v86 >= 8)
            {
              int v90 = v89;
              uint64_t result = 0;
              *(_DWORD *)(v17 + 4) = v90;
            }
            else
            {
              return 0;
            }
          }
        }
      }
    }
    return result;
  }
  uint64_t v27 = ((unint64_t)v25 >> 2);
  uint64_t v28 = a8;
  while (1)
  {
    int v30 = *v28++;
    int v29 = v30;
    if (v30 < 0 || v29 >= (int)a6) {
      return result;
    }
    if (!--v27) {
      goto LABEL_27;
    }
  }
}

uint64_t sub_2170BCB30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = *(unsigned int **)a3;
  uint64_t v7 = *(void *)(a3 + 8);
  uint64_t v8 = *(void *)a3 + 4;
  *(void *)a3 = v8;
  *(void *)(a3 + 8) = v7 - 4;
  uint64_t v9 = (unsigned int *)(a1 + 3560);
  *(_DWORD *)(a1 + 3564) = (v7 - 4) & ~((v7 - 4) >> 63);
  *(void *)(a1 + 3568) = v8;
  sub_2170A41FC(a1 + 3560);
  if (*(_DWORD *)(a2 + 20)) {
    sub_2170BD0B8((unsigned int *)a1);
  }
  uint64_t result = sub_2170C338C(a1, a2);
  if (!result)
  {
    unsigned int v11 = sub_2170A51F4((uint64_t)v9);
    if (v7 >= 4) {
      unsigned int *v6 = v11;
    }
    uint64_t v12 = v11;
    if (*(void *)a3) {
      uint64_t v12 = *(void *)a3 + v11;
    }
    uint64_t v13 = *(void *)(a3 + 8) - v11;
    *(void *)a3 = v12;
    *(void *)(a3 + 8) = v13;
    return *v9;
  }
  return result;
}

uint64_t sub_2170BCBE8(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 4);
  unint64_t v3 = *(void *)(a1 + 216) - *(void *)(a1 + 208);
  uint64_t v4 = (int **)(a1 + 3472);
  sub_2170A5390(a1 + 3472, *(_DWORD *)a1);
  if ((int)(v3 >> 2) >= 1)
  {
    uint64_t v5 = *(int **)(a1 + 208);
    uint64_t v6 = *(void *)(a1 + 3472);
    uint64_t v7 = (v3 >> 2);
    do
    {
      uint64_t v8 = *v5++;
      ++*(_DWORD *)(v6 + 4 * v8 + 4);
      --v7;
    }
    while (v7);
  }
  sub_2170A5400(v4);
  if ((int)v2 >= 1)
  {
    uint64_t v9 = 0;
    uint64_t v10 = *(void *)(a1 + 3520);
    uint64_t v11 = *(void *)(a1 + 112);
    uint64_t v12 = *(void *)(a1 + 232);
    do
    {
      uint64_t v13 = (int *)(v12 + 4 * *(int *)(v11 + 4 * v9));
      uint64_t v14 = *v13;
      uint64_t v15 = v13[1];
      if ((int)v14 < (int)v15)
      {
        uint64_t v16 = *(void *)(a1 + 208);
        uint64_t v17 = *(void *)(a1 + 3256);
        uint64_t v18 = *(void *)(a1 + 3472);
        uint64_t v19 = *(void *)(a1 + 3496);
        do
        {
          uint64_t v20 = *(int *)(v16 + 4 * v14);
          int v21 = *(_DWORD *)(v17 + 4 * v14);
          uint64_t v22 = *(int *)(v18 + 4 * v20);
          uint64_t v23 = *(int *)(v19 + 4 * v20);
          uint64_t v24 = v23 + v22;
          if ((int)v23 <= 0)
          {
LABEL_12:
            *(_DWORD *)(v19 + 4 * v20) = v23 + 1;
            *(_DWORD *)(v10 + 4 * v24) = v21;
          }
          else
          {
            uint64_t v24 = (int)v24;
            while (*(_DWORD *)(v10 + 4 * v22) != v21)
            {
              if (++v22 >= (int)v24) {
                goto LABEL_12;
              }
            }
          }
          ++v14;
        }
        while (v14 != v15);
      }
      ++v9;
    }
    while (v9 != v2);
  }
  return 0;
}

void *sub_2170BCD08(void *result, unsigned int a2, int a3, unsigned int *a4, _DWORD *a5)
{
  uint64_t v5 = *a4;
  *(void *)a5 = -1;
  a5[2] = -1;
  if ((a2 & 0x80000000) == 0 && (v5 & 0x80000000) == 0)
  {
    uint64_t v7 = result;
    uint64_t v8 = a5 + 1;
    uint64_t v32 = result[440];
    uint64_t v9 = result[437];
    int v10 = *(_DWORD *)(v9 + 4 * a2);
    uint64_t v11 = a4[2];
    uint64_t v12 = (int)a4[1];
    if ((v11 & 0x80000000) != 0)
    {
      if ((v12 & 0x80000000) == 0)
      {
        int v18 = *(_DWORD *)(v9 + 4 * v5);
        int v19 = *(_DWORD *)(v9 + 4 * v12);
        if (v10 == 1 && v18 == 1 && v19 == 1)
        {
          uint64_t v31 = result[434];
          *a5 = *(_DWORD *)(v32 + 4 * *(int *)(v31 + 4 * v5));
          a5[1] = *(_DWORD *)(v32 + 4 * *(int *)(v31 + 4 * v12));
        }
        else
        {
          return (void *)sub_2170BCF24(result, a3, a2, v5, v12, a5, v8);
        }
      }
    }
    else
    {
      int v13 = *(_DWORD *)(v9 + 4 * v5);
      int v14 = *(_DWORD *)(v9 + 4 * v12);
      if (v10 == 1 && v13 == 1 && v14 == 1)
      {
        uint64_t v22 = result[434];
        int v17 = *(_DWORD *)(v32 + 4 * *(int *)(v22 + 4 * v5));
        *a5 = v17;
        a5[1] = *(_DWORD *)(v32 + 4 * *(int *)(v22 + 4 * v12));
        if (v17 < 0) {
          return result;
        }
      }
      else
      {
        uint64_t result = (void *)sub_2170BCF24(result, a3, a2, v5, v12, a5, v8);
        int v17 = *a5;
        if ((*a5 & 0x80000000) != 0) {
          return result;
        }
      }
      int v23 = *v8;
      if ((v23 & 0x80000000) == 0)
      {
        uint64_t v24 = *(int *)(v7[437] + 4 * v11);
        if (v24 == 1 && v13 == 1 && v14 == 1)
        {
          a5[2] = *(_DWORD *)(v32 + 4 * *(int *)(v7[434] + 4 * v11));
        }
        else if ((int)v24 >= 1)
        {
          uint64_t v27 = *(int *)(v7[434] + 4 * v11);
          uint64_t v28 = v27 + v24;
          do
          {
            int v29 = *(_DWORD *)(v32 + 4 * v27);
            uint64_t v33 = 0;
            uint64_t result = (void *)sub_2170BCF24(v7, v29, v11, v5, v12, (_DWORD *)&v33 + 1, &v33);
            if (HIDWORD(v33) == v17 && v33 == v23) {
              a5[2] = v29;
            }
            ++v27;
          }
          while (v27 < v28);
        }
      }
    }
  }
  return result;
}

uint64_t sub_2170BCF24(void *a1, int a2, int a3, int a4, int a5, _DWORD *a6, _DWORD *a7)
{
  uint64_t v7 = *(int *)(a1[428] + 4 * a2);
  if ((int)v7 >= 1)
  {
    uint64_t v8 = *(int *)(a1[425] + 4 * a2);
    uint64_t v9 = v7 + v8;
    uint64_t v10 = a1[26];
    while (2)
    {
      uint64_t v11 = (int *)(a1[29] + 4 * *(int *)(a1[431] + 4 * v8));
      uint64_t v12 = *v11;
      uint64_t v13 = v11[1];
      int v14 = *(_DWORD *)(v10 + 4 * v12);
      uint64_t v15 = (int)v12 + 1;
      uint64_t v16 = 4 * v15 - 4;
      uint64_t v17 = v15 + 1;
      while (v17 < v13)
      {
        int v18 = *(_DWORD *)(v10 + v16 + 4);
        int v19 = *(_DWORD *)(v10 + v16 + 8);
        if (v14 == a3 && v18 == a4 && v19 == a5)
        {
          uint64_t v27 = a1[407] + v16;
          *a6 = *(_DWORD *)(v27 + 4);
          goto LABEL_41;
        }
        if (v14 == a3 && v19 == a4 && v18 == a5)
        {
          uint64_t v28 = a1[407] + v16;
          *a7 = *(_DWORD *)(v28 + 4);
          goto LABEL_43;
        }
        if (v18 == a3 && v14 == a4 && v19 == a5)
        {
          uint64_t v29 = a1[407];
          *a6 = *(_DWORD *)(v29 + 4 * v12);
          uint64_t v27 = v29 + v16;
LABEL_41:
          int v30 = *(_DWORD *)(v27 + 8);
LABEL_45:
          *a7 = v30;
          return 1;
        }
        if (v18 == a3 && v19 == a4 && v14 == a5)
        {
          uint64_t v31 = a1[407];
          *a7 = *(_DWORD *)(v31 + 4 * v12);
          uint64_t v28 = v31 + v16;
LABEL_43:
          int v34 = *(_DWORD *)(v28 + 8);
LABEL_46:
          *a6 = v34;
          return 1;
        }
        if (v19 == a3 && v14 == a4 && v18 == a5)
        {
          uint64_t v32 = a1[407];
          *a6 = *(_DWORD *)(v32 + 4 * v12);
          int v30 = *(_DWORD *)(v32 + v16 + 4);
          goto LABEL_45;
        }
        v16 += 4;
        ++v17;
        if (v19 == a3 && v18 == a4 && v14 == a5)
        {
          uint64_t v33 = a1[407];
          *a7 = *(_DWORD *)(v33 + 4 * v12);
          int v34 = *(_DWORD *)(v33 + v16);
          goto LABEL_46;
        }
      }
      if (++v8 < v9) {
        continue;
      }
      break;
    }
  }
  uint64_t result = 0;
  *a6 = -1;
  *a7 = -1;
  return result;
}

uint64_t sub_2170BD0B8(unsigned int *a1)
{
  uint64_t v72 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  unint64_t v4 = (int)a1[887];
  sub_2170BCBE8((uint64_t)a1);
  memset_pattern16(__b, &unk_2174AFAB0, 6uLL);
  __int16 v69 = 0x8000;
  __int16 v68 = 0x8000;
  uint64_t v5 = (uint64_t *)(a1 + 820);
  sub_21681C000((uint64_t)(a1 + 832), 0);
  sub_21681C000((uint64_t)(a1 + 820), 0);
  uint64_t v63 = a1 + 826;
  sub_21681C000((uint64_t)(a1 + 826), 0);
  v71[0] = -1;
  sub_216820DFC((uint64_t)(a1 + 832), v4, v71);
  v71[0] = -1;
  sub_216820DFC((uint64_t)(a1 + 820), v4, v71);
  v71[0] = -1;
  sub_216820DFC((uint64_t)(a1 + 826), v4, v71);
  uint64_t v64 = *((void *)a1 + 440);
  uint64_t v61 = v4;
  if ((int)v3 <= 0)
  {
    int v24 = 0;
    __int16 v67 = 0x8000;
    __int16 v66 = 0x8000;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v62 = v3;
    uint64_t v7 = 4 * v3;
    do
    {
      uint64_t v8 = *(int *)(*((void *)a1 + 11) + v6);
      uint64_t v9 = *((void *)a1 + 437);
      uint64_t v10 = (unsigned int *)(*((void *)a1 + 17) + 12 * v8);
      uint64_t v11 = *v10;
      if ((v11 & 0x80000000) != 0) {
        int v12 = 0;
      }
      else {
        int v12 = *(_DWORD *)(v9 + 4 * v11);
      }
      uint64_t v13 = v10[1];
      if ((v13 & 0x80000000) != 0) {
        int v14 = 0;
      }
      else {
        int v14 = *(_DWORD *)(v9 + 4 * v13);
      }
      uint64_t v15 = (unsigned int *)(*((void *)a1 + 20) + 12 * v8);
      uint64_t v16 = *v15;
      if ((v16 & 0x80000000) != 0) {
        int v17 = 0;
      }
      else {
        int v17 = *(_DWORD *)(v9 + 4 * v16);
      }
      uint64_t v18 = v15[1];
      if ((v18 & 0x80000000) != 0) {
        int v19 = 0;
      }
      else {
        int v19 = *(_DWORD *)(v9 + 4 * v18);
      }
      int v20 = *(_DWORD *)(v9 + 4 * v8);
      uint64_t v21 = v17 == v19;
      if (v12 == v14) {
        ++v21;
      }
      sub_2170A5080((uint64_t)(a1 + 890), v20 == 1, &__b[v21]);
      if (v20 != 1)
      {
        uint64_t v22 = (uint64_t)(a1 + 890);
        if (v20)
        {
          sub_2170A5080(v22, 0, &v69);
          sub_2170A56D8((uint64_t)(a1 + 890), v20 - 2, 0, &v68);
        }
        else
        {
          sub_2170A5080(v22, 1, &v69);
        }
      }
      v6 += 4;
    }
    while (v7 != v6);
    uint64_t v23 = 0;
    int v24 = 0;
    __int16 v67 = 0x8000;
    __int16 v66 = 0x8000;
    do
    {
      int v25 = *(_DWORD *)(*((void *)a1 + 11) + 4 * v23);
      uint64_t v26 = *(int *)(*((void *)a1 + 437) + 4 * v25);
      if ((int)v26 >= 1)
      {
        uint64_t v27 = *(int *)(*((void *)a1 + 434) + 4 * v25);
        uint64_t v28 = v26 + v27;
        do
        {
          int v29 = *(_DWORD *)(v64 + 4 * v27);
          uint64_t v30 = (uint64_t)(a1 + 890);
          if (*(_DWORD *)(*v5 + 4 * v29) == -1)
          {
            sub_2170A5080(v30, 1, &v67);
            *(_DWORD *)(*v5 + 4 * v29) = v24;
            *(_DWORD *)(*v63 + 4 * v24) = v29;
            *(_DWORD *)(*((void *)a1 + 416) + 4 * v29) = v25;
            ++v24;
          }
          else
          {
            sub_2170A5080(v30, 0, &v67);
            sub_2170A56D8((uint64_t)(a1 + 890), v24 + ~*(_DWORD *)(*v5 + 4 * v29), 0, &v66);
          }
          ++v27;
        }
        while (v27 < v28);
      }
      ++v23;
      LODWORD(v3) = v62;
    }
    while (v23 != v62);
  }
  if ((int)v61 >= 1)
  {
    uint64_t v31 = 0;
    uint64_t v32 = *v5;
    do
    {
      if (*(_DWORD *)(v32 + 4 * v31) == -1)
      {
        *(_DWORD *)(v32 + 4 * v31) = v24;
        *(_DWORD *)(*v63 + 4 * v24++) = v31;
      }
      ++v31;
    }
    while (v61 != v31);
  }
  sub_2170A5390((uint64_t)(a1 + 850), v61);
  if ((int)v2 < 1)
  {
    sub_2170A5400((int **)a1 + 425);
    v71[0] = 0;
    sub_2170A4FFC(__p, (int)v3, v71);
    memset_pattern16(v71, &unk_2174AFAB0, 0x28uLL);
  }
  else
  {
    uint64_t v33 = 0;
    uint64_t v34 = *((void *)a1 + 29);
    do
    {
      uint64_t v35 = *(int *)(v34 + 4 * v33++);
      uint64_t v36 = *(int *)(v34 + 4 * v33);
      if ((int)v35 < (int)v36)
      {
        uint64_t v37 = *((void *)a1 + 425);
        unint64_t v38 = (int *)(*((void *)a1 + 407) + 4 * v35);
        uint64_t v39 = v36 - v35;
        do
        {
          uint64_t v40 = *v38++;
          ++*(_DWORD *)(v37 + 4 * v40 + 4);
          --v39;
        }
        while (v39);
      }
    }
    while (v33 != v2);
    sub_2170A5400((int **)a1 + 425);
    v71[0] = 0;
    sub_2170A4FFC(__p, (int)v3, v71);
    memset_pattern16(v71, &unk_2174AFAB0, 0x28uLL);
    uint64_t v41 = 0;
    int v42 = 0;
    do
    {
      uint64_t v43 = *(int *)(*((void *)a1 + 14) + 4 * v41);
      uint64_t v44 = *((void *)a1 + 29);
      uint64_t v45 = *(int *)(v44 + 4 * v43);
      int v46 = *(_DWORD *)(v44 + 4 * ((int)v43 + 1));
      if ((int)v45 < v46)
      {
        do
        {
          uint64_t v47 = *(int *)(*((void *)a1 + 26) + 4 * v45);
          uint64_t v48 = *(int *)(*((void *)a1 + 407) + 4 * v45);
          uint64_t v49 = *((void *)a1 + 437);
          int v50 = *(_DWORD *)(v49 + 4 * v47);
          int v51 = *(_DWORD *)(*((void *)a1 + 425) + 4 * v48);
          uint64_t v52 = *((void *)a1 + 428);
          int v53 = *(_DWORD *)(v52 + 4 * v48);
          *(_DWORD *)(v52 + 4 * v48) = v53 + 1;
          *(_DWORD *)(*((void *)a1 + 431) + 4 * (v53 + v51)) = v43;
          if (v50 >= 2)
          {
            int v54 = *(_DWORD *)(v49 + 4 * v47);
            if (v54 < 1)
            {
LABEL_50:
              LODWORD(v55) = 0;
            }
            else
            {
              uint64_t v55 = 0;
              uint64_t v56 = *(int *)(*((void *)a1 + 434) + 4 * v47);
              uint64_t v57 = v54 + (int)v56;
              while (v48 != *(_DWORD *)(v64 + 4 * v56 + 4 * v55))
              {
                ++v55;
                if (v56 + v55 >= v57) {
                  goto LABEL_50;
                }
              }
            }
            int v58 = *((_DWORD *)__p[0] + v47);
            *((_DWORD *)__p[0] + v47) = v58 + 1;
            if (v42 >= 1) {
              int v42 = 1;
            }
            if (v58 >= 4) {
              int v59 = 4;
            }
            else {
              int v59 = v58;
            }
            sub_2170BD624((uint64_t)(a1 + 890), v55, v50 - 1, &v71[2 * v59 + v42]);
            int v42 = v55;
          }
          ++v45;
        }
        while (v46 != v45);
      }
      ++v41;
    }
    while (v41 != v2);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return 0;
}

void sub_2170BD600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
}

uint64_t sub_2170BD624(uint64_t result, int a2, int a3, _WORD *a4)
{
  if (a3)
  {
    uint64_t v7 = result;
    uint64_t result = sub_2170A5080(result, a2 != 0, a4);
    if (a2)
    {
      int v8 = a2 - 1;
      if (a2 != 1)
      {
        do
        {
          uint64_t result = sub_2170A5080(v7, 1, a4 + 1);
          --v8;
        }
        while (v8);
      }
      if (a3 > a2)
      {
        return sub_2170A5080(v7, 0, a4 + 1);
      }
    }
  }
  return result;
}

uint64_t sub_2170BD6D4(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a1 + 3208);
  unint64_t v6 = *(unsigned int *)(a1 + 3544);
  uint64_t v7 = *(void *)(a1 + 3280);
  int v8 = *(_DWORD *)(v7 + 4 * a2);
  int v9 = *(_DWORD *)(a4 + 16);
  uint64_t v10 = *(void *)(a1 + 3448);
  uint64_t v11 = *(int *)(*(void *)(a1 + 3400) + 4 * a2);
  uint64_t v12 = *(int *)(*(void *)(a1 + 3424) + 4 * a2);
  uint64_t v13 = *(_DWORD **)a3;
  uint64_t v14 = *(void *)(a3 + 8) - *(void *)a3;
  if (v14 >= 1) {
    bzero(*(void **)a3, 4 * (((unint64_t)v14 >> 2) - ((unint64_t)v14 > 3)) + 4);
  }
  if ((int)v12 < 1) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v16 = v12 + v11;
  uint64_t v17 = *(void *)(a1 + 232);
  do
  {
    uint64_t v18 = (int *)(v17 + 4 * *(int *)(v10 + 4 * v11));
    uint64_t v19 = *v18;
    uint64_t v20 = v18[1];
    if ((int)v19 < (int)v20)
    {
      uint64_t v21 = *(void *)(a1 + 3256);
      do
      {
        uint64_t v22 = *(int *)(v21 + 4 * v19);
        if (*(_DWORD *)(v7 + 4 * v22) < v8 && (!v9 || *(unsigned char *)(*(void *)(a1 + 3232) + v22)))
        {
          if ((int)v6 >= 1)
          {
            uint64_t v23 = (int *)(v5 + 4 * (int)v22 * (int)v6);
            unint64_t v24 = v6;
            int v25 = v13;
            do
            {
              int v26 = *v23++;
              *v25++ += v26;
              --v24;
            }
            while (v24);
          }
          uint64_t result = (result + 1);
        }
        ++v19;
      }
      while (v19 < v20 && (int)result < 4);
    }
    ++v11;
  }
  while (v11 < v16 && (int)result < 4);
  if ((int)v6 >= 1 && (int)result >= 2)
  {
    for (unint64_t i = 0; i < v6; ++i)
      v13[i] /= (int)result;
  }
  return result;
}

uint64_t sub_2170BD848(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 3208);
  unint64_t v5 = *(unsigned int *)(a1 + 3544);
  int v6 = *(_DWORD *)(a4 + 16);
  uint64_t v7 = *(void *)(a1 + 3280);
  int v8 = *(_DWORD *)(v7 + 4 * a2);
  uint64_t v9 = *(int *)(*(void *)(a1 + 3400) + 4 * a2);
  int v10 = *(_DWORD *)(*(void *)(a1 + 3424) + 4 * a2);
  uint64_t v11 = *(void *)(a1 + 3448);
  int v12 = *(_DWORD *)(a4 + 4);
  *(void *)a3 = 0;
  *(_DWORD *)(a3 + 8) = 0;
  if (v10 < 1) {
    return 0;
  }
  uint64_t result = 0;
  int v15 = 0;
  unsigned int v16 = ~(-1 << (v12 - 1));
  int v17 = v10 + v9;
  uint64_t v18 = *(void *)(a1 + 232);
  int32x2_t v19 = 0;
  int32x2_t v20 = vdup_n_s32(v16);
  do
  {
    uint64_t v21 = (int *)(v18 + 4 * *(int *)(v11 + 4 * v9));
    uint64_t v22 = *v21;
    uint64_t v23 = v21[1];
    if ((int)v22 < (int)v23)
    {
      uint64_t v24 = *(void *)(a1 + 3256);
      do
      {
        uint64_t v25 = *(int *)(v24 + 4 * v22);
        if (*(_DWORD *)(v7 + 4 * v25) < v8 && (!v6 || *(unsigned char *)(*(void *)(a1 + 3232) + v25)))
        {
          int32x2_t v26 = vsub_s32(*(int32x2_t *)(v4 + 4 * (int)v25 * (int)v5), v20);
          int32x2_t v27 = vabs_s32(vrev64_s32(v26));
          if ((int)(v16 - v27.i32[1] - v27.i32[0]) < 0) {
            int32x2_t v26 = (int32x2_t)vbsl_s8((int8x8_t)vcltz_s32(v26), (int8x8_t)vsub_s32(v27, v20), (int8x8_t)__PAIR64__(v16 - v27.i32[1], v16 - v27.i32[0]));
          }
          int32x2_t v19 = vadd_s32(v19, v26);
          *(int32x2_t *)a3 = v19;
          v15 += v16 - v27.i32[1] - v27.i32[0];
          *(_DWORD *)(a3 + 8) = v15;
          uint64_t result = (result + 1);
        }
        ++v22;
      }
      while (v22 < v23 && (int)result < 4);
    }
    ++v9;
  }
  while (v9 < v17 && (int)result < 4);
  if ((int)v5 >= 1 && (int)result >= 2)
  {
    for (unint64_t i = 0; i < v5; ++i)
      *(int *)(a3 + 4 * i) /= (int)result;
  }
  return result;
}

uint64_t sub_2170BD9AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)a1;
  uint64_t v609 = *MEMORY[0x263EF8340];
  unsigned int v3 = *(_DWORD *)(a1 + 3548);
  int v4 = *(_DWORD *)(a1 + 3544);
  uint64_t v5 = *(void *)(a1 + 3208);
  uint64_t v547 = v3;
  int v6 = ~(-1 << (*(_DWORD *)(a2 + 4) - 1));
  __p = 0;
  v604 = 0;
  uint64_t v605 = 0;
  int v550 = v6;
  sub_2170AE224((void *)(a1 + 184), v2 + 29, v2 + 26, v2 + 407, v3, (uint64_t *)&__p, v6);
  uint64_t v7 = 0;
  uint64_t v608 = 0;
  int v545 = v2 + 392;
  memset(v607, 0, sizeof(v607));
  memset(v606, 0, sizeof(v606));
  do
  {
    sub_2170A8CEC((uint64_t)v606 + v7, v4);
    v7 += 120;
  }
  while (v7 != 360);
  int v549 = v4;
  memset_pattern16(&__b, &unk_2174AFAB0, 6uLL);
  int v8 = v4;
  memset_pattern16(&v597, &unk_2174AFAB0, 6uLL);
  unsigned __int16 v596 = 0x8000;
  __int16 v595 = 0x8000;
  int v9 = v550;
  if ((int)v547 > 0)
  {
    uint64_t v10 = 0;
    int v557 = *(_DWORD *)(a2 + 16);
    int v543 = v2;
    uint64_t v544 = (uint64_t)(v2 + 445);
    uint64_t v542 = v5;
    int v546 = (unsigned __int8 *)(a2 + 8);
    do
    {
      uint64_t v11 = *(int *)(v2[413] + 4 * v10);
      if (v557 && !*(unsigned char *)(v2[404] + v11)) {
        goto LABEL_758;
      }
      uint64_t v551 = v10;
      int v12 = v11 * v8;
      uint64_t v13 = *(unsigned int *)(v2[416] + 4 * v11);
      uint64_t v14 = (_DWORD *)(v5 + 4 * v12);
      int v15 = *v14 - v9;
      int v16 = v14[1] - v9;
      if (v15 >= 0) {
        int v17 = v15;
      }
      else {
        int v17 = -v15;
      }
      if (v16 >= 0) {
        int v18 = v16;
      }
      else {
        int v18 = -v16;
      }
      int v19 = v9 - v17;
      int v20 = v18 - v9;
      if (v15 >= 0) {
        int v20 = v9 - v18;
      }
      int v21 = v17 - v9;
      if (v16 >= 0) {
        int v21 = v19;
      }
      int v22 = v19 - v18;
      int v552 = v22;
      int v594 = v22;
      if (v22 < 0) {
        int v23 = v20;
      }
      else {
        int v23 = v15;
      }
      if (v22 < 0) {
        int v24 = v21;
      }
      else {
        int v24 = v16;
      }
      int v592 = v23;
      int v593 = v24;
      uint64_t v25 = (int *)((char *)__p + 12 * (int)v11);
      int v26 = *v25;
      LODWORD(v590) = *v25;
      int v27 = v25[1];
      HIDWORD(v590) = v27;
      int v28 = v25[2];
      int v591 = v28;
      if ((v13 & 0x80000000) == 0)
      {
        v589[0] = -1;
        uint64_t v588 = -1;
        v587[0] = -1;
        uint64_t v586 = -1;
        sub_2170BCD08(v2, v13, v11, (unsigned int *)(v2[17] + 12 * v13), &v588);
        sub_2170BCD08(v2, v13, v11, (unsigned int *)(v2[20] + 12 * v13), &v586);
        int v29 = v589[0];
        if ((v589[0] & 0x80000000) != 0)
        {
          int v8 = v549;
          if ((v587[0] & 0x80000000) != 0)
          {
            int v31 = v589[0];
            int v29 = v587[0];
          }
          else
          {
            uint64_t v30 = v588;
            uint64_t v588 = v586;
            int v31 = v587[0];
            v589[0] = v587[0];
            uint64_t v586 = v30;
            v587[0] = v29;
          }
        }
        else
        {
          int v31 = v589[0];
          int v29 = v587[0];
          int v8 = v549;
        }
        int v9 = v550;
        if (v29 != -1)
        {
          if (!v557
            || (uint64_t v32 = v2[404], *(unsigned char *)(v32 + (int)v588))
            && *(unsigned char *)(v32 + SHIDWORD(v588))
            && *(unsigned char *)(v32 + v31)
            && *(unsigned char *)(v32 + (int)v586)
            && *(unsigned char *)(v32 + SHIDWORD(v586))
            && *(unsigned char *)(v32 + v29))
          {
            uint64_t v33 = (_DWORD *)(v5 + 4 * (int)v588 * v8);
            int v34 = v33[1];
            int v35 = *v33 - v550;
            int v36 = v34 - v550;
            if (v35 >= 0) {
              int v37 = v35;
            }
            else {
              int v37 = -v35;
            }
            if (v36 >= 0) {
              int v38 = v34 - v550;
            }
            else {
              int v38 = v550 - v34;
            }
            int v39 = v550 - v37;
            int v40 = v550 - v37 - v38;
            if (v40 < 0)
            {
              int v41 = v38 - v550;
              int v42 = v550 - v38;
              if (v35 >= 0) {
                int v35 = v42;
              }
              else {
                int v35 = v41;
              }
              int v43 = v37 - v550;
              if (v36 >= 0) {
                int v36 = v39;
              }
              else {
                int v36 = v43;
              }
            }
            uint64_t v44 = (_DWORD *)(v5 + 4 * HIDWORD(v588) * v8);
            int v45 = *v44 - v550;
            int v46 = v44[1] - v550;
            if (v45 >= 0) {
              int v47 = *v44 - v550;
            }
            else {
              int v47 = v550 - *v44;
            }
            if (v46 >= 0) {
              int v48 = v46;
            }
            else {
              int v48 = -v46;
            }
            int v49 = v550 - v47;
            int v50 = v550 - v47 - v48;
            if (v50 < 0)
            {
              int v51 = v48 - v550;
              int v52 = v550 - v48;
              if (v45 >= 0) {
                int v45 = v52;
              }
              else {
                int v45 = v51;
              }
              int v53 = v47 - v550;
              if (v46 >= 0) {
                int v46 = v49;
              }
              else {
                int v46 = v53;
              }
            }
            int v54 = (_DWORD *)(v5 + 4 * v31 * v8);
            int v55 = *v54 - v550;
            int v56 = v54[1] - v550;
            if (v55 >= 0) {
              int v57 = *v54 - v550;
            }
            else {
              int v57 = v550 - *v54;
            }
            if (v56 >= 0) {
              int v58 = v56;
            }
            else {
              int v58 = -v56;
            }
            int v59 = v550 - v57;
            int v537 = v550 - v57 - v58;
            if (v537 < 0)
            {
              int v60 = v58 - v550;
              int v61 = v550 - v58;
              if (v55 >= 0) {
                int v55 = v61;
              }
              else {
                int v55 = v60;
              }
              int v62 = v57 - v550;
              if (v56 >= 0) {
                int v56 = v59;
              }
              else {
                int v56 = v62;
              }
            }
            uint64_t v63 = (_DWORD *)(v5 + 4 * (int)v586 * v8);
            int v64 = *v63 - v550;
            int v65 = v63[1] - v550;
            if (v64 >= 0) {
              int v66 = *v63 - v550;
            }
            else {
              int v66 = v550 - *v63;
            }
            if (v65 >= 0) {
              int v67 = v65;
            }
            else {
              int v67 = -v65;
            }
            int v68 = v550 - v66;
            int v69 = v550 - v66 - v67;
            if (v69 < 0)
            {
              int v70 = v67 - v550;
              int v71 = v550 - v67;
              if (v64 >= 0) {
                int v64 = v71;
              }
              else {
                int v64 = v70;
              }
              int v72 = v66 - v550;
              if (v65 >= 0) {
                int v65 = v68;
              }
              else {
                int v65 = v72;
              }
            }
            uint64_t v73 = (_DWORD *)(v5 + 4 * HIDWORD(v586) * v8);
            int v74 = *v73 - v550;
            int v75 = v73[1] - v550;
            if (v74 >= 0) {
              int v76 = *v73 - v550;
            }
            else {
              int v76 = v550 - *v73;
            }
            if (v75 >= 0) {
              int v77 = v75;
            }
            else {
              int v77 = -v75;
            }
            int v78 = v550 - v76;
            int v532 = v550 - v76 - v77;
            if (v532 < 0)
            {
              int v79 = v77 - v550;
              int v80 = v550 - v77;
              if (v74 >= 0) {
                int v74 = v80;
              }
              else {
                int v74 = v79;
              }
              int v81 = v76 - v550;
              if (v75 >= 0) {
                int v75 = v78;
              }
              else {
                int v75 = v81;
              }
            }
            uint64_t v82 = (_DWORD *)(v5 + 4 * v29 * v8);
            int v83 = *v82 - v550;
            int v84 = v82[1] - v550;
            if (v83 >= 0) {
              int v85 = *v82 - v550;
            }
            else {
              int v85 = v550 - *v82;
            }
            if (v84 >= 0) {
              int v86 = v84;
            }
            else {
              int v86 = -v84;
            }
            int v87 = v550 - v85;
            int v88 = v550 - v85 - v86;
            if (v88 < 0)
            {
              int v89 = v86 - v550;
              int v90 = v550 - v86;
              if (v83 >= 0) {
                int v83 = v90;
              }
              else {
                int v83 = v89;
              }
              int v91 = v85 - v550;
              if (v84 >= 0) {
                int v84 = v87;
              }
              else {
                int v84 = v91;
              }
            }
            uint64_t v92 = v28 * (uint64_t)v40 + v26 * (uint64_t)v35 + v27 * (uint64_t)v36;
            BOOL v93 = v92 < 0;
            if (v92 >= 0) {
              int v94 = v26;
            }
            else {
              int v94 = -v26;
            }
            if (v92 >= 0) {
              int v95 = v27;
            }
            else {
              int v95 = -v27;
            }
            if (v93) {
              int v96 = -v28;
            }
            else {
              int v96 = v28;
            }
            int v585 = v94;
            int v584 = v95;
            int v97 = v45 + v35 - v55;
            int v98 = v46 + v36 - v56;
            int v583 = v97;
            int v582 = v98;
            int v99 = v74 + v64 - v83;
            int v100 = v75 + v65 - v84;
            int v581 = v99;
            int v580 = v100;
            BOOL v101 = __OFADD__(v64, v35);
            int v102 = v64 + v35;
            int v103 = v65 + v36;
            int v104 = v69 + v40;
            if (v102 < 0 != v101) {
              ++v102;
            }
            unint64_t v105 = 1431655766 * ((v102 >> 1) + 2 * (v74 + v45) - (v55 + v83));
            int v106 = HIDWORD(v105) + (v105 >> 63);
            unint64_t v107 = 1431655766 * (v103 / 2 + 2 * (v75 + v46) - (v56 + v84));
            int v108 = HIDWORD(v107) + (v107 >> 63);
            int v579 = v106;
            int v578 = v108;
            if (v104 >= 0) {
              int v109 = v69 + v40;
            }
            else {
              int v109 = v104 + 1;
            }
            int v577 = v23;
            int v576 = v24;
            int v575 = v23;
            int v574 = v24;
            int v573 = v23;
            int v572 = v24;
            int v571 = v23;
            int v570 = v24;
            if (v26 >= 0) {
              unsigned int v110 = v26;
            }
            else {
              unsigned int v110 = -v26;
            }
            if (v27 >= 0) {
              unsigned int v111 = v27;
            }
            else {
              unsigned int v111 = -v27;
            }
            if (v28 >= 0) {
              unsigned int v112 = v28;
            }
            else {
              unsigned int v112 = -v28;
            }
            if (v110 >= v111 && v110 >= v112)
            {
              uint64_t v113 = &v585;
              int v114 = &v577;
              int v115 = v23;
              int v116 = v552;
              int v117 = v50;
              goto LABEL_398;
            }
            int v116 = v552;
            int v117 = v50;
            if (v111 >= v112)
            {
              uint64_t v113 = &v584;
              int v114 = &v576;
              int v115 = v24;
              int v94 = v95;
LABEL_398:
              *int v114 = v116;
              *uint64_t v113 = v96;
              int v265 = v577;
              int v96 = v94;
            }
            else
            {
              int v265 = v23;
              int v115 = v552;
            }
            if (v96 >= 0) {
              int v284 = v115;
            }
            else {
              int v284 = -v115;
            }
            if (v96 >= 0) {
              int v285 = v96;
            }
            else {
              int v285 = -v96;
            }
            int v286 = v576;
            if (v284 < 0)
            {
              if (v576 >= 0) {
                int v288 = v576;
              }
              else {
                int v288 = -v576;
              }
              int v289 = v288 - v550;
              int v290 = v550 - v288;
              if (v265 >= 0) {
                int v287 = v290;
              }
              else {
                int v287 = v289;
              }
              if (v265 < 0) {
                int v265 = -v265;
              }
              int v8 = v549;
              if (v576 < 0) {
                int v286 = v265 - v550;
              }
              else {
                int v286 = v550 - v265;
              }
            }
            else
            {
              int v287 = v265;
              int v8 = v549;
            }
            int v308 = v117 + v40 - v537;
            int v577 = v287;
            int v576 = v286;
            if (v97 >= 0) {
              unsigned int v309 = v97;
            }
            else {
              unsigned int v309 = -v97;
            }
            if (v98 >= 0) {
              unsigned int v310 = v98;
            }
            else {
              unsigned int v310 = -v98;
            }
            if (v308 >= 0) {
              unsigned int v311 = v117 + v40 - v537;
            }
            else {
              unsigned int v311 = v537 - (v117 + v40);
            }
            if (v309 >= v310 && v309 >= v311)
            {
              unsigned int v312 = &v583;
              int v313 = &v575;
              unsigned int v311 = v309;
              int v314 = v23;
              goto LABEL_478;
            }
            if (v310 >= v311)
            {
              unsigned int v312 = &v582;
              int v313 = &v574;
              unsigned int v311 = v310;
              int v314 = v24;
              int v97 = v98;
LABEL_478:
              *int v313 = v116;
              *unsigned int v312 = v308;
              int v315 = v575;
              int v308 = v97;
            }
            else
            {
              int v315 = v23;
              int v314 = v116;
            }
            if (v308 >= 0) {
              int v316 = v314;
            }
            else {
              int v316 = -v314;
            }
            int v317 = v574;
            if (v316 < 0)
            {
              if (v574 >= 0) {
                int v319 = v574;
              }
              else {
                int v319 = -v574;
              }
              int v320 = v319 - v550;
              int v321 = v550 - v319;
              if (v315 >= 0) {
                int v318 = v321;
              }
              else {
                int v318 = v320;
              }
              if (v315 >= 0) {
                int v322 = v315;
              }
              else {
                int v322 = -v315;
              }
              if (v574 < 0) {
                int v317 = v322 - v550;
              }
              else {
                int v317 = v550 - v322;
              }
            }
            else
            {
              int v318 = v315;
            }
            int v323 = v532 + v69 - v88;
            int v575 = v318;
            int v574 = v317;
            if (v99 >= 0) {
              unsigned int v324 = v99;
            }
            else {
              unsigned int v324 = -v99;
            }
            if (v100 >= 0) {
              unsigned int v325 = v100;
            }
            else {
              unsigned int v325 = -v100;
            }
            if (v323 >= 0) {
              unsigned int v326 = v532 + v69 - v88;
            }
            else {
              unsigned int v326 = v88 - (v532 + v69);
            }
            if (v324 >= v325 && v324 >= v326)
            {
              int v327 = &v581;
              int v328 = &v573;
              unsigned int v554 = v324;
              int v329 = v23;
              goto LABEL_511;
            }
            if (v325 >= v326)
            {
              int v327 = &v580;
              int v328 = &v572;
              unsigned int v554 = v325;
              int v329 = v24;
              int v99 = v100;
LABEL_511:
              *int v328 = v116;
              *int v327 = v323;
              int v330 = v573;
              int v323 = v99;
            }
            else
            {
              unsigned int v554 = v326;
              int v330 = v23;
              int v329 = v116;
            }
            if (v323 >= 0) {
              int v331 = v329;
            }
            else {
              int v331 = -v329;
            }
            int v332 = v572;
            if (v331 < 0)
            {
              if (v572 >= 0) {
                int v334 = v572;
              }
              else {
                int v334 = -v572;
              }
              int v335 = v334 - v550;
              int v336 = v550 - v334;
              if (v330 >= 0) {
                int v333 = v336;
              }
              else {
                int v333 = v335;
              }
              if (v330 >= 0) {
                int v337 = v330;
              }
              else {
                int v337 = -v330;
              }
              if (v572 < 0) {
                int v332 = v337 - v550;
              }
              else {
                int v332 = v550 - v337;
              }
            }
            else
            {
              int v333 = v330;
            }
            unint64_t v338 = 1431655766 * ((v109 >> 1) + 2 * (v532 + v117) - (v537 + v88));
            int v339 = HIDWORD(v338) + (v338 >> 63);
            int v573 = v333;
            int v572 = v332;
            if (v106 >= 0) {
              unsigned int v340 = v106;
            }
            else {
              unsigned int v340 = -v106;
            }
            if (v108 >= 0) {
              unsigned int v341 = v108;
            }
            else {
              unsigned int v341 = -v108;
            }
            if (v339 >= 0) {
              unsigned int v342 = v339;
            }
            else {
              unsigned int v342 = -v339;
            }
            if (v340 >= v341 && v340 >= v342)
            {
              unsigned int v343 = &v579;
              unsigned int v344 = &v571;
              unsigned int v342 = v340;
              goto LABEL_543;
            }
            if (v341 >= v342)
            {
              unsigned int v343 = &v578;
              unsigned int v344 = &v570;
              unsigned int v342 = v341;
              int v23 = v24;
              int v106 = v108;
LABEL_543:
              *unsigned int v344 = v116;
              *unsigned int v343 = v339;
              int v116 = v23;
              int v23 = v571;
              int v339 = v106;
            }
            if (v339 >= 0) {
              int v345 = v116;
            }
            else {
              int v345 = -v116;
            }
            int v346 = v570;
            if (v345 < 0)
            {
              if (v570 >= 0) {
                int v348 = v570;
              }
              else {
                int v348 = -v570;
              }
              int v349 = v348 - v550;
              int v350 = v550 - v348;
              if (v23 >= 0) {
                int v347 = v350;
              }
              else {
                int v347 = v349;
              }
              if (v23 >= 0) {
                int v351 = v23;
              }
              else {
                int v351 = -v23;
              }
              if (v570 < 0) {
                int v346 = v351 - v550;
              }
              else {
                int v346 = v550 - v351;
              }
            }
            else
            {
              int v347 = v23;
            }
            int v238 = (unsigned char *)(a2 + 8);
            int v571 = v347;
            int v570 = v346;
            int v352 = v585;
            int v353 = v287 - v585;
            int v354 = v584;
            int v567 = v287 - v585;
            int v568 = v286 - v584;
            int v569 = v284 - v285;
            int v355 = v583;
            int v356 = v318 - v583;
            int v539 = v582;
            int v564 = v318 - v583;
            int v565 = v317 - v582;
            unsigned int v566 = v316 - v311;
            int v483 = v581;
            int v357 = v333 - v581;
            int v481 = v580;
            int v561 = v333 - v581;
            int v562 = v332 - v580;
            unsigned int v563 = v331 - v554;
            int v479 = v579;
            int v358 = v347 - v579;
            int v477 = v578;
            int v558 = v347 - v579;
            int v559 = v346 - v578;
            unsigned int v560 = v345 - v342;
            int v529 = v311;
            int v487 = v346;
            int v489 = v345;
            int v485 = v347;
            if (*(unsigned char *)(a2 + 24))
            {
              int v502 = v584;
              int v504 = v585;
              unsigned int v506 = v342;
              int v508 = v333;
              int v510 = v332;
              int v512 = v331;
              int v513 = v318;
              int v515 = v317;
              int v517 = v316;
              int v519 = v287;
              int v521 = v285;
              int v525 = v286;
              int v534 = v284;
              int v497 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((v598 + 2048) >> 10) & 0x7CLL));
              int v499 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((v597 + 2048) >> 10) & 0x7CLL));
              int v495 = sub_2170C4034(&v567, v8, *v546, (unsigned __int16 **)v607);
              int v491 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((v599 + 2048) >> 10) & 0x7CLL));
              int v493 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((67584 - (unint64_t)v597) >> 10) & 0x3FFFFFFFFFFFFCLL));
              int v359 = sub_2170C4034(&v564, v8, *v546, (unsigned __int16 **)v607);
              int v360 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((v597 + 2048) >> 10) & 0x7CLL));
              int v361 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((67584 - (unint64_t)v598) >> 10) & 0x3FFFFFFFFFFFFCLL));
              int v362 = sub_2170C4034(&v561, v8, *v546, (unsigned __int16 **)v607);
              int v363 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((67584 - (unint64_t)v597) >> 10) & 0x3FFFFFFFFFFFFCLL));
              int v364 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((67584 - (unint64_t)v599) >> 10) & 0x3FFFFFFFFFFFFCLL));
              int v365 = sub_2170C4034(&v558, v8, *v546, (unsigned __int16 **)v607);
              signed int v366 = v497 + v499 + v495;
              signed int v367 = v491 + v493 + v359;
              signed int v368 = v361 + v360 + v362;
              signed int v369 = v364 + v363 + v365;
              uint64_t v5 = v542;
              uint64_t v2 = v543;
              uint64_t v10 = v551;
              int v238 = (unsigned char *)(a2 + 8);
              int v284 = v534;
              int v286 = v525;
              int v287 = v519;
              int v285 = v521;
              int v317 = v515;
              int v316 = v517;
              int v331 = v512;
              int v318 = v513;
              int v333 = v508;
              int v332 = v510;
              int v352 = v504;
              unsigned int v342 = v506;
              int v354 = v502;
            }
            else
            {
              if (v8 < 1)
              {
                signed int v366 = 0;
                signed int v367 = 0;
                signed int v368 = 0;
                signed int v369 = 0;
              }
              else
              {
                if (v353 < 0) {
                  int v353 = v585 - v287;
                }
                signed int v366 = -(v8 * __clz(v353 + 1));
                if (v356 < 0) {
                  int v356 = v583 - v318;
                }
                signed int v367 = -(v8 * __clz(v356 + 1));
                if (v357 < 0) {
                  int v357 = v581 - v333;
                }
                signed int v368 = -(v8 * __clz(v357 + 1));
                if (v358 < 0) {
                  int v358 = v579 - v347;
                }
                signed int v369 = -(v8 * __clz(v358 + 1));
              }
              uint64_t v5 = v542;
              uint64_t v2 = v543;
              uint64_t v10 = v551;
            }
            if (v366 > v367 || v366 > v368 || v366 > v369)
            {
              if (v367 > v368 || v367 > v369)
              {
                if (v368 <= v369)
                {
                  int v371 = 0;
                  int64_t v590 = __PAIR64__(v481, v483);
                  int v370 = 1;
                  int v591 = v554;
                  int v286 = v332;
                  int v284 = v331;
                  uint64_t v372 = 1;
                  int v592 = v333;
                }
                else
                {
                  int64_t v590 = __PAIR64__(v477, v479);
                  int v370 = 1;
                  int v286 = v487;
                  int v284 = v489;
                  int v591 = v342;
                  int v371 = 1;
                  uint64_t v372 = 2;
                  int v592 = v485;
                }
              }
              else
              {
                int v370 = 0;
                int64_t v590 = __PAIR64__(v539, v355);
                int v373 = v318;
                int v371 = 1;
                int v591 = v529;
                int v286 = v317;
                int v284 = v316;
                uint64_t v372 = 2;
                int v592 = v373;
              }
            }
            else
            {
              int v370 = 0;
              int v371 = 0;
              int64_t v590 = __PAIR64__(v354, v352);
              int v591 = v285;
              uint64_t v372 = 1;
              int v592 = v287;
            }
            int v593 = v286;
            int v594 = v284;
            sub_2170A5080(v544, v371, &v597);
            sub_2170A5080(v544, v370, &v597 + v372);
            unsigned int v307 = 2;
LABEL_709:
            int v9 = v550;
            goto LABEL_757;
          }
        }
        if (v31 != -1)
        {
          if (!v557
            || (uint64_t v118 = v2[404], *(unsigned char *)(v118 + (int)v588))
            && *(unsigned char *)(v118 + SHIDWORD(v588))
            && *(unsigned char *)(v118 + v31))
          {
            int v119 = (_DWORD *)(v5 + 4 * (int)v588 * v8);
            int v120 = v119[1];
            int v121 = *v119 - v550;
            int v122 = v120 - v550;
            if (v121 >= 0) {
              int v123 = v121;
            }
            else {
              int v123 = -v121;
            }
            if (v122 >= 0) {
              int v124 = v120 - v550;
            }
            else {
              int v124 = v550 - v120;
            }
            int v125 = v550 - v123;
            int v126 = v550 - v123 - v124;
            if (v126 < 0)
            {
              int v127 = v124 - v550;
              int v128 = v550 - v124;
              if (v121 >= 0) {
                int v121 = v128;
              }
              else {
                int v121 = v127;
              }
              int v129 = v123 - v550;
              if (v122 >= 0) {
                int v122 = v125;
              }
              else {
                int v122 = v129;
              }
            }
            int v130 = (_DWORD *)(v5 + 4 * HIDWORD(v588) * v8);
            int v131 = *v130 - v550;
            int v132 = v130[1] - v550;
            if (v131 >= 0) {
              int v133 = *v130 - v550;
            }
            else {
              int v133 = v550 - *v130;
            }
            if (v132 >= 0) {
              int v134 = v132;
            }
            else {
              int v134 = -v132;
            }
            int v135 = v550 - v133;
            int v136 = v550 - v133 - v134;
            if (v136 < 0)
            {
              int v137 = v134 - v550;
              int v138 = v550 - v134;
              if (v131 >= 0) {
                int v131 = v138;
              }
              else {
                int v131 = v137;
              }
              int v139 = v133 - v550;
              if (v132 >= 0) {
                int v132 = v135;
              }
              else {
                int v132 = v139;
              }
            }
            int v140 = (_DWORD *)(v5 + 4 * v31 * v8);
            int v141 = *v140 - v550;
            int v142 = v140[1] - v550;
            if (v141 >= 0) {
              int v143 = *v140 - v550;
            }
            else {
              int v143 = v550 - *v140;
            }
            if (v142 >= 0) {
              int v144 = v140[1] - v550;
            }
            else {
              int v144 = v550 - v140[1];
            }
            int v145 = v550 - v143;
            int v146 = v550 - v143 - v144;
            if (v146 < 0)
            {
              int v147 = v144 - v550;
              int v148 = v550 - v144;
              if (v141 >= 0) {
                int v141 = v148;
              }
              else {
                int v141 = v147;
              }
              int v149 = v143 - v550;
              if (v142 >= 0) {
                int v142 = v145;
              }
              else {
                int v142 = v149;
              }
            }
            uint64_t v150 = v28 * (uint64_t)v126 + v26 * (uint64_t)v121 + v27 * (uint64_t)v122;
            if (v150 >= 0) {
              int v151 = v26;
            }
            else {
              int v151 = -v26;
            }
            if (v150 >= 0) {
              int v152 = v27;
            }
            else {
              int v152 = -v27;
            }
            if (v150 >= 0) {
              int v153 = v28;
            }
            else {
              int v153 = -v28;
            }
            int v585 = v151;
            int v584 = v152;
            int v154 = v131 + v121;
            int v155 = v132 + v122;
            int v156 = v136 + v126;
            int v157 = v154 - v141;
            int v158 = v132 + v122 - v142;
            int v583 = v154 - v141;
            int v582 = v158;
            int v159 = v154 + 1;
            int v160 = v155 + 1;
            int v161 = v156 + 1;
            if (v154 + 1 >= 0) {
              int v162 = v154 + 1;
            }
            else {
              int v162 = v154 + 2;
            }
            int v163 = v162 >> 1;
            int v164 = v155 + 2;
            if (v160 >= 0) {
              int v164 = v155 + 1;
            }
            int v165 = v164 >> 1;
            int v581 = v163;
            int v580 = v164 >> 1;
            int v166 = (v159 + v141) / 3;
            int v167 = (v160 + v142) / 3;
            int v579 = v166;
            int v578 = v167;
            if (v161 >= 0) {
              int v168 = v156 + 1;
            }
            else {
              int v168 = v156 + 2;
            }
            int v577 = v23;
            int v576 = v24;
            int v575 = v23;
            int v574 = v24;
            int v573 = v23;
            int v572 = v24;
            int v571 = v23;
            int v570 = v24;
            if (v26 >= 0) {
              unsigned int v169 = v26;
            }
            else {
              unsigned int v169 = -v26;
            }
            if (v27 >= 0) {
              unsigned int v170 = v27;
            }
            else {
              unsigned int v170 = -v27;
            }
            if (v28 >= 0) {
              unsigned int v171 = v28;
            }
            else {
              unsigned int v171 = -v28;
            }
            if (v169 >= v170 && v169 >= v171)
            {
              int v172 = &v585;
              int v173 = &v577;
              int v174 = v23;
              int v175 = v552;
              goto LABEL_418;
            }
            int v175 = v552;
            if (v170 >= v171)
            {
              int v172 = &v584;
              int v173 = &v576;
              int v174 = v24;
              int v151 = v152;
LABEL_418:
              *int v173 = v175;
              int *v172 = v153;
              int v268 = v577;
              int v153 = v151;
            }
            else
            {
              int v268 = v23;
              int v174 = v552;
            }
            if (v153 >= 0) {
              int v291 = v174;
            }
            else {
              int v291 = -v174;
            }
            if (v153 >= 0) {
              int v292 = v153;
            }
            else {
              int v292 = -v153;
            }
            int v293 = v576;
            if (v291 < 0)
            {
              if (v576 >= 0) {
                int v295 = v576;
              }
              else {
                int v295 = -v576;
              }
              int v296 = v295 - v550;
              int v297 = v550 - v295;
              if (v268 >= 0) {
                int v294 = v297;
              }
              else {
                int v294 = v296;
              }
              if (v268 >= 0) {
                int v298 = v268;
              }
              else {
                int v298 = -v268;
              }
              if (v576 < 0) {
                int v293 = v298 - v550;
              }
              else {
                int v293 = v550 - v298;
              }
            }
            else
            {
              int v294 = v268;
            }
            int v374 = v156 - v146;
            int v577 = v294;
            int v576 = v293;
            if (v157 >= 0) {
              unsigned int v375 = v157;
            }
            else {
              unsigned int v375 = -v157;
            }
            if (v158 >= 0) {
              unsigned int v376 = v158;
            }
            else {
              unsigned int v376 = -v158;
            }
            if (v374 >= 0) {
              unsigned int v377 = v374;
            }
            else {
              unsigned int v377 = -v374;
            }
            if (v375 >= v376 && v375 >= v377)
            {
              int v378 = &v583;
              int v379 = &v575;
              unsigned int v377 = v375;
              int v380 = v23;
              goto LABEL_600;
            }
            if (v376 >= v377)
            {
              int v378 = &v582;
              int v379 = &v574;
              unsigned int v377 = v376;
              int v380 = v24;
              int v157 = v158;
LABEL_600:
              *int v379 = v175;
              *int v378 = v374;
              int v381 = v575;
              int v374 = v157;
            }
            else
            {
              int v381 = v23;
              int v380 = v175;
            }
            if (v374 >= 0) {
              int v382 = v380;
            }
            else {
              int v382 = -v380;
            }
            int v383 = v574;
            if (v382 < 0)
            {
              if (v574 >= 0) {
                int v385 = v574;
              }
              else {
                int v385 = -v574;
              }
              int v386 = v385 - v550;
              int v387 = v550 - v385;
              if (v381 >= 0) {
                int v384 = v387;
              }
              else {
                int v384 = v386;
              }
              if (v381 >= 0) {
                int v388 = v381;
              }
              else {
                int v388 = -v381;
              }
              if (v574 < 0) {
                int v383 = v388 - v550;
              }
              else {
                int v383 = v550 - v388;
              }
            }
            else
            {
              int v384 = v381;
            }
            int v389 = v168 >> 1;
            int v575 = v384;
            int v574 = v383;
            if (v163 >= 0) {
              unsigned int v390 = v163;
            }
            else {
              unsigned int v390 = -v163;
            }
            if (v165 >= 0) {
              unsigned int v391 = v165;
            }
            else {
              unsigned int v391 = -v165;
            }
            if (v389 >= 0) {
              unsigned int v392 = v389;
            }
            else {
              unsigned int v392 = -v389;
            }
            if (v390 >= v391 && v390 >= v392)
            {
              int v393 = &v581;
              int v394 = &v573;
              unsigned int v392 = v390;
              int v395 = v23;
              goto LABEL_633;
            }
            if (v391 >= v392)
            {
              int v393 = &v580;
              int v394 = &v572;
              unsigned int v392 = v391;
              int v395 = v24;
              int v163 = v165;
LABEL_633:
              *int v394 = v175;
              *int v393 = v389;
              int v396 = v573;
              int v389 = v163;
            }
            else
            {
              int v396 = v23;
              int v395 = v175;
            }
            if (v389 < 0) {
              int v395 = -v395;
            }
            int v397 = v572;
            if (v395 < 0)
            {
              if (v572 >= 0) {
                int v399 = v572;
              }
              else {
                int v399 = -v572;
              }
              int v400 = v399 - v550;
              int v401 = v550 - v399;
              if (v396 >= 0) {
                int v398 = v401;
              }
              else {
                int v398 = v400;
              }
              if (v396 >= 0) {
                int v402 = v396;
              }
              else {
                int v402 = -v396;
              }
              if (v572 < 0) {
                int v397 = v402 - v550;
              }
              else {
                int v397 = v550 - v402;
              }
            }
            else
            {
              int v398 = v396;
            }
            int v403 = (v161 + v146) / 3;
            int v573 = v398;
            int v572 = v397;
            if (v166 >= 0) {
              unsigned int v404 = v166;
            }
            else {
              unsigned int v404 = -v166;
            }
            if (v167 >= 0) {
              unsigned int v405 = v167;
            }
            else {
              unsigned int v405 = -v167;
            }
            if (v403 >= 0) {
              unsigned int v406 = v403;
            }
            else {
              unsigned int v406 = -v403;
            }
            if (v404 >= v405 && v404 >= v406)
            {
              unsigned int v407 = &v579;
              unsigned int v408 = &v571;
              unsigned int v406 = v404;
              goto LABEL_664;
            }
            if (v405 >= v406)
            {
              unsigned int v407 = &v578;
              unsigned int v408 = &v570;
              unsigned int v406 = v405;
              int v23 = v24;
              int v166 = v167;
LABEL_664:
              *unsigned int v408 = v175;
              *unsigned int v407 = v403;
              int v175 = v23;
              int v23 = v571;
              int v403 = v166;
            }
            if (v403 >= 0) {
              int v409 = v175;
            }
            else {
              int v409 = -v175;
            }
            int v410 = v570;
            if (v409 < 0)
            {
              if (v570 >= 0) {
                int v412 = v570;
              }
              else {
                int v412 = -v570;
              }
              int v413 = v412 - v550;
              int v414 = v550 - v412;
              if (v23 >= 0) {
                int v411 = v414;
              }
              else {
                int v411 = v413;
              }
              if (v23 >= 0) {
                int v415 = v23;
              }
              else {
                int v415 = -v23;
              }
              if (v570 < 0) {
                int v410 = v415 - v550;
              }
              else {
                int v410 = v550 - v415;
              }
            }
            else
            {
              int v411 = v23;
            }
            int v238 = (unsigned char *)(a2 + 8);
            int v571 = v411;
            int v570 = v410;
            int v416 = v585;
            int v417 = v294 - v585;
            int v418 = v584;
            int v567 = v294 - v585;
            int v568 = v293 - v584;
            int v569 = v291 - v292;
            int v535 = v583;
            int v419 = v384 - v583;
            int v530 = v582;
            int v564 = v384 - v583;
            int v565 = v383 - v582;
            unsigned int v566 = v382 - v377;
            int v484 = v581;
            int v420 = v398 - v581;
            int v482 = v580;
            int v561 = v398 - v581;
            int v562 = v397 - v580;
            unsigned int v563 = v395 - v392;
            int v480 = v579;
            int v421 = v411 - v579;
            int v478 = v578;
            int v558 = v411 - v579;
            int v559 = v410 - v578;
            unsigned int v560 = v409 - v406;
            int v555 = v294;
            unsigned int v540 = v377;
            int v488 = v410;
            int v490 = v409;
            int v486 = v411;
            if (*(unsigned char *)(a2 + 24))
            {
              int v501 = v584;
              int v503 = v585;
              unsigned int v505 = v406;
              int v507 = v398;
              int v509 = v397;
              int v511 = v395;
              int v514 = v384;
              int v516 = v383;
              int v518 = v382;
              int v522 = v293;
              int v526 = v291;
              int v498 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((v601 + 2048) >> 10) & 0x7CLL));
              int v500 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((__b + 2048) >> 10) & 0x7CLL));
              int v496 = sub_2170C4034(&v567, v8, *v546, (unsigned __int16 **)&v606[7] + 1);
              int v492 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((v602 + 2048) >> 10) & 0x7CLL));
              int v494 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((67584 - (unint64_t)__b) >> 10) & 0x3FFFFFFFFFFFFCLL));
              int v422 = sub_2170C4034(&v564, v8, *v546, (unsigned __int16 **)&v606[7] + 1);
              int v423 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((__b + 2048) >> 10) & 0x7CLL));
              int v424 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((67584 - (unint64_t)v601) >> 10) & 0x3FFFFFFFFFFFFCLL));
              int v425 = sub_2170C4034(&v561, v8, *v546, (unsigned __int16 **)&v606[7] + 1);
              int v426 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((67584 - (unint64_t)__b) >> 10) & 0x3FFFFFFFFFFFFCLL));
              int v427 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((67584 - (unint64_t)v602) >> 10) & 0x3FFFFFFFFFFFFCLL));
              int v428 = sub_2170C4034(&v558, v8, *v546, (unsigned __int16 **)&v606[7] + 1);
              signed int v429 = v498 + v500 + v496;
              signed int v430 = v492 + v494 + v422;
              signed int v431 = v424 + v423 + v425;
              signed int v432 = v427 + v426 + v428;
              uint64_t v5 = v542;
              uint64_t v2 = v543;
              uint64_t v10 = v551;
              int v238 = (unsigned char *)(a2 + 8);
              int v291 = v526;
              int v293 = v522;
              int v383 = v516;
              int v382 = v518;
              int v384 = v514;
              int v397 = v509;
              int v395 = v511;
              unsigned int v406 = v505;
              int v398 = v507;
              int v418 = v501;
              int v416 = v503;
            }
            else
            {
              if (v8 < 1)
              {
                signed int v429 = 0;
                signed int v430 = 0;
                signed int v431 = 0;
                signed int v432 = 0;
              }
              else
              {
                if (v417 < 0) {
                  int v417 = v585 - v294;
                }
                signed int v429 = -(v8 * __clz(v417 + 1));
                if (v419 < 0) {
                  int v419 = v583 - v384;
                }
                signed int v430 = -(v8 * __clz(v419 + 1));
                if (v420 < 0) {
                  int v420 = v581 - v398;
                }
                signed int v431 = -(v8 * __clz(v420 + 1));
                if (v421 < 0) {
                  int v421 = v579 - v411;
                }
                signed int v432 = -(v8 * __clz(v421 + 1));
              }
              uint64_t v5 = v542;
              uint64_t v2 = v543;
              uint64_t v10 = v551;
            }
            if (v429 <= v430 && v429 <= v431 && v429 <= v432)
            {
              int v433 = 0;
              int v434 = 0;
              int64_t v590 = __PAIR64__(v418, v416);
              int v591 = v292;
              uint64_t v435 = 1;
              int v436 = v555;
              goto LABEL_705;
            }
            if (v430 > v431 || v430 > v432)
            {
              if (v431 <= v432)
              {
                int v434 = 0;
                int64_t v590 = __PAIR64__(v482, v484);
                unsigned int v438 = v392;
                int v433 = 1;
                int v591 = v438;
                int v293 = v397;
                int v291 = v395;
                uint64_t v435 = 1;
                int v592 = v398;
              }
              else
              {
                int64_t v590 = __PAIR64__(v478, v480);
                int v433 = 1;
                int v293 = v488;
                int v291 = v490;
                int v591 = v406;
                int v434 = 1;
                uint64_t v435 = 2;
                int v436 = v486;
LABEL_705:
                int v592 = v436;
              }
            }
            else
            {
              int v433 = 0;
              int64_t v590 = __PAIR64__(v530, v535);
              int v437 = v384;
              int v434 = 1;
              int v591 = v540;
              int v293 = v383;
              int v291 = v382;
              uint64_t v435 = 2;
              int v592 = v437;
            }
            int v593 = v293;
            int v594 = v291;
            sub_2170A5080(v544, v434, &__b);
            sub_2170A5080(v544, v433, &__b + v435);
            unsigned int v307 = 1;
            goto LABEL_709;
          }
        }
        if (HIDWORD(v588) != -1)
        {
          if (!v557 || (uint64_t v176 = v2[404], *(unsigned char *)(v176 + (int)v588)) && *(unsigned char *)(v176 + SHIDWORD(v588)))
          {
            int v177 = (_DWORD *)(v5 + 4 * (int)v588 * v8);
            int v178 = *v177 - v550;
            int v179 = v177[1] - v550;
            if (v178 >= 0) {
              int v180 = v178;
            }
            else {
              int v180 = -v178;
            }
            if (v179 >= 0) {
              int v181 = v179;
            }
            else {
              int v181 = -v179;
            }
            int v182 = v550 - v180;
            int v183 = v550 - v180 - v181;
            if (v183 < 0)
            {
              int v184 = v181 - v550;
              int v185 = v550 - v181;
              if (v178 >= 0) {
                int v178 = v185;
              }
              else {
                int v178 = v184;
              }
              int v186 = v180 - v550;
              if (v179 >= 0) {
                int v179 = v182;
              }
              else {
                int v179 = v186;
              }
            }
            __int16 v187 = (_DWORD *)(v5 + 4 * HIDWORD(v588) * v8);
            int v188 = *v187 - v550;
            int v189 = v187[1] - v550;
            if (v188 >= 0) {
              int v190 = v188;
            }
            else {
              int v190 = -v188;
            }
            if (v189 >= 0) {
              int v191 = v189;
            }
            else {
              int v191 = -v189;
            }
            int v192 = v550 - v190;
            int v193 = v550 - v190 - v191;
            if (v193 < 0)
            {
              int v194 = v191 - v550;
              int v195 = v550 - v191;
              if (v188 >= 0) {
                int v188 = v195;
              }
              else {
                int v188 = v194;
              }
              int v196 = v190 - v550;
              if (v189 >= 0) {
                int v189 = v192;
              }
              else {
                int v189 = v196;
              }
            }
            uint64_t v197 = v28 * (uint64_t)v183 + v26 * (uint64_t)v178 + v27 * (uint64_t)v179;
            if (v197 >= 0) {
              int v198 = v26;
            }
            else {
              int v198 = -v26;
            }
            if (v197 >= 0) {
              int v199 = v27;
            }
            else {
              int v199 = -v27;
            }
            if (v197 >= 0) {
              int v200 = v28;
            }
            else {
              int v200 = -v28;
            }
            int v561 = v198;
            int v558 = v199;
            int v201 = v178 + v188;
            int v202 = v179 + v189;
            int v203 = v183 + v193;
            int v204 = v201 + 2;
            if (v201 + 1 >= 0) {
              int v204 = v201 + 1;
            }
            int v205 = v204 >> 1;
            if (v202 + 1 >= 0) {
              int v206 = v202 + 1;
            }
            else {
              int v206 = v202 + 2;
            }
            int v207 = v206 >> 1;
            int v208 = v203 + 2;
            if (v203 + 1 >= 0) {
              int v208 = v203 + 1;
            }
            int v585 = v205;
            int v584 = v207;
            int v583 = v23;
            int v582 = v24;
            int v581 = v23;
            int v580 = v24;
            if (v26 >= 0) {
              unsigned int v209 = v26;
            }
            else {
              unsigned int v209 = -v26;
            }
            if (v27 >= 0) {
              unsigned int v210 = v27;
            }
            else {
              unsigned int v210 = -v27;
            }
            if (v28 >= 0) {
              unsigned int v211 = v28;
            }
            else {
              unsigned int v211 = -v28;
            }
            if (v209 >= v210 && v209 >= v211)
            {
              int v212 = &v561;
              int v213 = &v583;
              int v214 = v23;
              int v215 = v552;
              goto LABEL_439;
            }
            int v215 = v552;
            if (v210 >= v211)
            {
              int v212 = &v558;
              int v213 = &v582;
              int v214 = v24;
              int v198 = v199;
LABEL_439:
              *int v213 = v215;
              *int v212 = v200;
              int v269 = v583;
              int v200 = v198;
            }
            else
            {
              int v269 = v23;
              int v214 = v552;
            }
            if (v200 >= 0) {
              int v299 = v200;
            }
            else {
              int v299 = -v200;
            }
            if (v200 >= 0) {
              int v300 = v214;
            }
            else {
              int v300 = -v214;
            }
            int v301 = v582;
            if (v300 < 0)
            {
              if (v582 >= 0) {
                int v303 = v582;
              }
              else {
                int v303 = -v582;
              }
              int v304 = v303 - v550;
              int v305 = v550 - v303;
              if (v269 >= 0) {
                int v302 = v305;
              }
              else {
                int v302 = v304;
              }
              if (v269 >= 0) {
                int v306 = v269;
              }
              else {
                int v306 = -v269;
              }
              if (v582 < 0) {
                int v301 = v306 - v550;
              }
              else {
                int v301 = v550 - v306;
              }
            }
            else
            {
              int v302 = v269;
            }
            int v439 = v208 >> 1;
            if (v205 >= 0) {
              unsigned int v440 = v205;
            }
            else {
              unsigned int v440 = -v205;
            }
            if (v207 >= 0) {
              unsigned int v441 = v207;
            }
            else {
              unsigned int v441 = -v207;
            }
            if (v439 >= 0) {
              unsigned int v442 = v439;
            }
            else {
              unsigned int v442 = -v439;
            }
            if (v440 >= v441 && v440 >= v442)
            {
              v443 = &v585;
              v444 = &v581;
              unsigned int v442 = v440;
              goto LABEL_726;
            }
            if (v441 >= v442)
            {
              v443 = &v584;
              v444 = &v580;
              unsigned int v442 = v441;
              int v23 = v24;
              int v205 = v207;
LABEL_726:
              int *v444 = v215;
              int *v443 = v439;
              int v215 = v23;
              int v23 = v581;
              int v439 = v205;
            }
            if (v439 >= 0) {
              int v445 = v215;
            }
            else {
              int v445 = -v215;
            }
            int v446 = v580;
            if (v445 < 0)
            {
              if (v580 >= 0) {
                int v448 = v580;
              }
              else {
                int v448 = -v580;
              }
              int v449 = v448 - v550;
              int v450 = v550 - v448;
              if (v23 >= 0) {
                int v447 = v450;
              }
              else {
                int v447 = v449;
              }
              if (v23 >= 0) {
                int v451 = v23;
              }
              else {
                int v451 = -v23;
              }
              if (v580 < 0) {
                int v446 = v451 - v550;
              }
              else {
                int v446 = v550 - v451;
              }
            }
            else
            {
              int v447 = v23;
            }
            int v452 = v561;
            int v453 = v302 - v561;
            int v454 = v558;
            int v567 = v302 - v561;
            int v568 = v301 - v558;
            int v569 = v300 - v299;
            int v455 = v585;
            int v456 = v447 - v585;
            int v457 = v584;
            int v564 = v447 - v585;
            int v565 = v446 - v584;
            unsigned int v566 = v445 - v442;
            if (*(unsigned char *)(a2 + 24))
            {
              int v520 = v584;
              int v523 = v585;
              int v527 = v447;
              int v531 = v558;
              int v536 = v561;
              int v541 = v446;
              int v556 = v445;
              unsigned int v458 = v442;
              int v459 = v301;
              int v460 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((v596 + 2048) >> 10) & 0x7CLL));
              int v461 = v8;
              int v462 = sub_2170C4034(&v567, v8, *v546, (unsigned __int16 **)v606);
              int v463 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((67584 - (unint64_t)v596) >> 10) & 0x3FFFFFFFFFFFFCLL));
              int v464 = sub_2170C4034(&v564, v461, *v546, (unsigned __int16 **)v606);
              signed int v465 = v462 + v460;
              signed int v466 = v464 + v463;
              int v8 = v461;
              uint64_t v5 = v542;
              uint64_t v2 = v543;
              int v9 = v550;
              int v301 = v459;
              unsigned int v442 = v458;
              int v445 = v556;
              int v452 = v536;
              int v446 = v541;
              int v447 = v527;
              int v454 = v531;
              int v457 = v520;
              int v455 = v523;
              goto LABEL_752;
            }
            if (v8 < 1)
            {
              int v467 = 0;
              uint64_t v5 = v542;
              uint64_t v2 = v543;
            }
            else
            {
              if (v453 < 0) {
                int v453 = v561 - v302;
              }
              signed int v465 = -(v8 * __clz(v453 + 1));
              if (v456 < 0) {
                int v456 = v585 - v447;
              }
              signed int v466 = -(v8 * __clz(v456 + 1));
              uint64_t v5 = v542;
              uint64_t v2 = v543;
LABEL_752:
              if (v465 <= v466)
              {
                int v467 = 0;
              }
              else
              {
                int v467 = 1;
                int v452 = v455;
                int v454 = v457;
                int v299 = v442;
                int v302 = v447;
                int v301 = v446;
                int v300 = v445;
              }
            }
            int64_t v590 = __PAIR64__(v454, v452);
            int v591 = v299;
            int v592 = v302;
            int v593 = v301;
            int v594 = v300;
            sub_2170A5080(v544, v467, &v596);
            unsigned int v307 = 0;
            uint64_t v10 = v551;
            int v238 = (unsigned char *)(a2 + 8);
            goto LABEL_757;
          }
        }
      }
      if (!sub_2170BD848((uint64_t)v2, v11, (uint64_t)&v588, a2))
      {
        unint64_t v231 = v26 * (uint64_t)v23 + v27 * (uint64_t)v24 + v28 * (uint64_t)v552;
        int v8 = v549;
        if ((v231 & 0x8000000000000000) != 0)
        {
          LODWORD(v590) = -v26;
          HIDWORD(v590) = -v27;
          int v591 = -v28;
        }
        sub_2170A5080(v544, v231 >> 63, &v595);
        int v232 = v594;
        int v233 = HIDWORD(v590);
        int v234 = v591;
        if ((int)v590 >= 0) {
          unsigned int v235 = v590;
        }
        else {
          unsigned int v235 = -(int)v590;
        }
        if (v590 >= 0) {
          unsigned int v236 = HIDWORD(v590);
        }
        else {
          unsigned int v236 = -HIDWORD(v590);
        }
        if (v591 >= 0) {
          unsigned int v237 = v591;
        }
        else {
          unsigned int v237 = -v591;
        }
        int v238 = (unsigned char *)(a2 + 8);
        if (v235 >= v236 && v235 >= v237)
        {
          int v239 = &v590;
          int v240 = &v592;
          int v233 = v590;
          uint64_t v10 = v551;
          goto LABEL_313;
        }
        int v239 = (int64_t *)((char *)&v590 + 4);
        int v240 = &v593;
        uint64_t v10 = v551;
        if (v236 >= v237)
        {
LABEL_313:
          int v243 = *v240;
          *int v240 = v594;
          int v594 = v243;
          *(_DWORD *)int v239 = v234;
          int v591 = v233;
          int v232 = v243;
          int v234 = v233;
        }
        if (v234 < 0)
        {
          int v591 = -v234;
          int v232 = -v232;
          int v594 = v232;
        }
        int v244 = v592;
        int v245 = v593;
        if (v232 < 0)
        {
          if (v593 >= 0) {
            int v266 = v593;
          }
          else {
            int v266 = -v593;
          }
          int v267 = v266 - v9;
          int v246 = v9 - v266;
          if (v592 < 0)
          {
            int v246 = v267;
            int v244 = -v592;
          }
          if (v593 < 0) {
            int v245 = v244 - v9;
          }
          else {
            int v245 = v9 - v244;
          }
        }
        else
        {
          int v246 = v592;
        }
        int v592 = v246;
        int v593 = v245;
        goto LABEL_461;
      }
      int v216 = v588;
      int v217 = HIDWORD(v588);
      int v218 = v589[0];
      uint64_t v219 = v26 * (uint64_t)(int)v588 + v27 * (uint64_t)SHIDWORD(v588) + v28 * (uint64_t)v589[0];
      if (v219 >= 0) {
        int v220 = v26;
      }
      else {
        int v220 = -v26;
      }
      if (v219 >= 0) {
        int v221 = v27;
      }
      else {
        int v221 = -v27;
      }
      if (v219 >= 0) {
        int v222 = v28;
      }
      else {
        int v222 = -v28;
      }
      int v564 = v220;
      int v561 = v221;
      int v558 = v23;
      int v585 = v24;
      int v584 = v23;
      int v583 = v24;
      if (v26 >= 0) {
        unsigned int v223 = v26;
      }
      else {
        unsigned int v223 = -v26;
      }
      if (v27 >= 0) {
        unsigned int v224 = v27;
      }
      else {
        unsigned int v224 = -v27;
      }
      if (v28 >= 0) {
        unsigned int v225 = v28;
      }
      else {
        unsigned int v225 = -v28;
      }
      BOOL v226 = v223 >= v224 && v223 >= v225;
      int v8 = v549;
      if (v226)
      {
        int v241 = &v564;
        v242 = &v558;
        int v230 = v23;
        uint64_t v227 = a2;
        int v228 = v552;
      }
      else
      {
        uint64_t v227 = a2;
        int v228 = v552;
        if (v224 < v225)
        {
          int v229 = v23;
          int v230 = v552;
          goto LABEL_320;
        }
        int v241 = &v561;
        v242 = &v585;
        int v230 = v24;
        int v220 = v221;
      }
      int *v242 = v228;
      *int v241 = v222;
      int v229 = v558;
      int v222 = v220;
LABEL_320:
      if (v222 >= 0) {
        int v247 = v222;
      }
      else {
        int v247 = -v222;
      }
      if (v222 >= 0) {
        int v248 = v230;
      }
      else {
        int v248 = -v230;
      }
      int v249 = v585;
      if (v248 < 0)
      {
        if (v585 >= 0) {
          int v250 = v585;
        }
        else {
          int v250 = -v585;
        }
        int v251 = v250 - v9;
        int v252 = v9 - v250;
        if (v229 >= 0) {
          int v253 = v229;
        }
        else {
          int v253 = -v229;
        }
        if (v229 >= 0) {
          int v229 = v252;
        }
        else {
          int v229 = v251;
        }
        if (v585 >= 0) {
          int v249 = v9 - v253;
        }
        else {
          int v249 = v253 - v9;
        }
        int v228 = v552;
      }
      int v558 = v229;
      int v585 = v249;
      if (v216 >= 0) {
        unsigned int v254 = v216;
      }
      else {
        unsigned int v254 = -v216;
      }
      if (v217 >= 0) {
        unsigned int v255 = v217;
      }
      else {
        unsigned int v255 = -v217;
      }
      if (v218 >= 0) {
        unsigned int v256 = v218;
      }
      else {
        unsigned int v256 = -v218;
      }
      if (v254 < v255 || v254 < v256)
      {
        if (v255 < v256) {
          goto LABEL_355;
        }
        int v258 = &v583;
        int v23 = v24;
        int v257 = (uint64_t *)((char *)&v588 + 4);
        int v216 = v217;
      }
      else
      {
        int v257 = &v588;
        int v258 = &v584;
      }
      *int v258 = v228;
      *(_DWORD *)int v257 = v218;
      int v228 = v23;
      int v218 = v216;
      v589[0] = v216;
LABEL_355:
      int v238 = (unsigned char *)(a2 + 8);
      if (v218 < 0)
      {
        int v218 = -v218;
        v589[0] = v218;
        int v228 = -v228;
      }
      int v259 = v584;
      int v260 = v583;
      if (v228 < 0)
      {
        if (v583 >= 0) {
          int v262 = v583;
        }
        else {
          int v262 = -v583;
        }
        int v263 = v262 - v9;
        int v264 = v9 - v262;
        if (v584 >= 0) {
          int v261 = v264;
        }
        else {
          int v261 = v263;
        }
        if (v584 < 0) {
          int v259 = -v584;
        }
        if (v583 < 0) {
          int v260 = v259 - v9;
        }
        else {
          int v260 = v9 - v259;
        }
      }
      else
      {
        int v261 = v584;
      }
      int v270 = v564;
      int v271 = v561;
      LODWORD(v586) = v229 - v564;
      HIDWORD(v586) = v249 - v561;
      v587[0] = v248 - v247;
      int v567 = v261 - v588;
      int v568 = v260 - HIDWORD(v588);
      int v569 = v228 - v218;
      if (*(unsigned char *)(v227 + 24))
      {
        int v524 = v561;
        int v528 = v564;
        int v533 = v261;
        int v538 = v260;
        int v553 = v248;
        int v272 = v249;
        int v273 = v229;
        int v274 = v228;
        int v275 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((v596 + 2048) >> 10) & 0x7CLL));
        int v276 = sub_2170C4034((int *)&v586, v549, *v546, (unsigned __int16 **)v606);
        int v277 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((67584 - (unint64_t)v596) >> 10) & 0x3FFFFFFFFFFFFCLL));
        int v278 = sub_2170C4034(&v567, v549, *v546, (unsigned __int16 **)v606);
        signed int v279 = v276 + v275;
        signed int v280 = v278 + v277;
        uint64_t v5 = v542;
        uint64_t v2 = v543;
        int v228 = v274;
        int v229 = v273;
        int v249 = v272;
        int v248 = v553;
        int v261 = v533;
        int v260 = v538;
        int v271 = v524;
        int v270 = v528;
      }
      else
      {
        uint64_t v5 = v542;
        uint64_t v2 = v543;
        if (v549 < 1) {
          goto LABEL_395;
        }
        if (v229 - v564 >= 0) {
          int v281 = v229 - v564;
        }
        else {
          int v281 = v564 - v229;
        }
        signed int v279 = -(v549 * __clz(v281 + 1));
        if (v261 - (int)v588 >= 0) {
          int v282 = v261 - v588;
        }
        else {
          int v282 = v588 - v261;
        }
        signed int v280 = -(v549 * __clz(v282 + 1));
      }
      if (v279 <= v280)
      {
LABEL_395:
        int v283 = 0;
        int64_t v590 = __PAIR64__(v271, v270);
        int v228 = v248;
        int v591 = v247;
        goto LABEL_396;
      }
      int64_t v590 = v588;
      int v591 = v589[0];
      int v283 = 1;
      int v229 = v261;
      int v249 = v260;
LABEL_396:
      int v9 = v550;
      uint64_t v10 = v551;
      int v592 = v229;
      int v593 = v249;
      int v594 = v228;
      sub_2170A5080(v544, v283, &v596);
LABEL_461:
      unsigned int v307 = 0;
LABEL_757:
      sub_2170B68A4((uint64_t)v2, v10, (uint64_t)&v592, (uint64_t)&v590, v8, v545, v238, (void *)v606 + 15 * v307);
LABEL_758:
      ++v10;
    }
    while (v547 != v10);
  }
  unint64_t v468 = 360;
  do
  {
    int v469 = (char *)v606 + v468;
    int v470 = *(void **)((char *)&__p + v468);
    if (v470)
    {
      *((void *)v469 - 2) = v470;
      operator delete(v470);
    }
    int v471 = (void *)*((void *)v469 - 6);
    if (v471)
    {
      *(void *)((char *)&v595 + v468) = v471;
      operator delete(v471);
    }
    int v472 = (char *)v606 + v468;
    int v473 = *(void **)&v589[v468 / 4];
    if (v473)
    {
      *((void *)v472 - 8) = v473;
      operator delete(v473);
    }
    int v474 = (void *)*((void *)v472 - 12);
    if (v474)
    {
      *(void *)&v587[v468 / 4] = v474;
      operator delete(v474);
    }
    int v475 = (void *)*((void *)v469 - 15);
    if (v475)
    {
      *(void *)((char *)&v582 + v468) = v475;
      operator delete(v475);
    }
    v468 -= 120;
  }
  while (v468);
  if (__p)
  {
    v604 = __p;
    operator delete(__p);
  }
  return 0;
}

void sub_2170BF920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2170BF974(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  unsigned int v3 = (void *)a1;
  uint64_t v4 = *(unsigned int *)(a1 + 3548);
  uint64_t v5 = *(unsigned int *)(a1 + 3544);
  uint64_t v98 = *(void *)(a1 + 3208);
  int v6 = ~(-1 << (*(_DWORD *)(a2 + 4) - 1));
  int v100 = *(_DWORD *)(a2 + 16);
  int v129 = 0;
  int v130 = 0;
  uint64_t v131 = 0;
  uint64_t v102 = v4;
  sub_2170AE224((void *)(a1 + 184), v3 + 29, v3 + 26, v3 + 407, v4, (uint64_t *)&v129, v6);
  uint64_t v128 = 0;
  long long v126 = 0u;
  long long v127 = 0u;
  long long v124 = 0u;
  long long v125 = 0u;
  *(_OWORD *)__p = 0u;
  long long v123 = 0u;
  *(_OWORD *)int v121 = 0u;
  sub_2170A8CEC((uint64_t)v121, v5);
  unsigned __int16 v120 = 0x8000;
  __int16 v119 = 0x8000;
  if ((int)v102 >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v96 = (uint64_t)(v3 + 445);
    int v97 = v3 + 392;
    int v91 = v3;
    int v103 = v6;
    BOOL v101 = (unsigned __int8 *)(v2 + 8);
    do
    {
      uint64_t v8 = *(int *)(v3[413] + 4 * v7);
      if (v100 && !*(unsigned char *)(v3[404] + v8)) {
        goto LABEL_143;
      }
      uint64_t v9 = v5;
      uint64_t v10 = (_DWORD *)(v98 + 4 * (int)v8 * (int)v5);
      int v11 = *v10 - v6;
      int v12 = v10[1] - v6;
      if (v11 >= 0) {
        int v13 = v11;
      }
      else {
        int v13 = -v11;
      }
      if (v12 >= 0) {
        int v14 = v12;
      }
      else {
        int v14 = -v12;
      }
      int v15 = v6 - v13;
      int v16 = v14 - v6;
      if (v11 >= 0) {
        int v16 = v6 - v14;
      }
      int v17 = v13 - v6;
      if (v12 >= 0) {
        int v17 = v15;
      }
      int v18 = v15 - v14;
      if (v15 - v14 < 0) {
        int v19 = v16;
      }
      else {
        int v19 = v11;
      }
      if (v15 - v14 < 0) {
        int v20 = v17;
      }
      else {
        int v20 = v12;
      }
      int v116 = v19;
      int v117 = v20;
      int v118 = v15 - v14;
      int v21 = (int *)&v129[12 * (int)v8];
      int v22 = *v21;
      LODWORD(v114) = *v21;
      int v23 = v21[1];
      HIDWORD(v114) = v23;
      int v24 = v21[2];
      int v115 = v24;
      if (!sub_2170BD848((uint64_t)v3, v8, (uint64_t)&v112, v2))
      {
        unint64_t v39 = v22 * (uint64_t)v19 + v23 * (uint64_t)v20 + v24 * (uint64_t)v18;
        if ((v39 & 0x8000000000000000) != 0)
        {
          LODWORD(v114) = -v22;
          HIDWORD(v114) = -v23;
          int v115 = -v24;
        }
        sub_2170A5080(v96, v39 >> 63, &v119);
        int v40 = v118;
        int v41 = HIDWORD(v114);
        int v42 = v115;
        if ((int)v114 >= 0) {
          unsigned int v43 = v114;
        }
        else {
          unsigned int v43 = -(int)v114;
        }
        if (v114 >= 0) {
          unsigned int v44 = HIDWORD(v114);
        }
        else {
          unsigned int v44 = -HIDWORD(v114);
        }
        if (v115 >= 0) {
          unsigned int v45 = v115;
        }
        else {
          unsigned int v45 = -v115;
        }
        uint64_t v5 = v9;
        int v46 = v101;
        if (v43 >= v44 && v43 >= v45)
        {
          int v47 = &v114;
          int v48 = &v116;
          int v41 = v114;
          int v6 = v103;
          goto LABEL_62;
        }
        int v47 = (int64_t *)((char *)&v114 + 4);
        int v48 = &v117;
        int v6 = v103;
        if (v44 >= v45)
        {
LABEL_62:
          int v51 = *v48;
          *int v48 = v118;
          int v118 = v51;
          *(_DWORD *)int v47 = v42;
          int v115 = v41;
          int v40 = v51;
          int v42 = v41;
        }
        if (v42 < 0)
        {
          int v115 = -v42;
          int v40 = -v40;
          int v118 = v40;
        }
        int v53 = v116;
        int v52 = v117;
        if (v40 < 0)
        {
          if (v117 >= 0) {
            int v73 = v117;
          }
          else {
            int v73 = -v117;
          }
          int v74 = v73 - v6;
          int v54 = v6 - v73;
          if (v116 < 0)
          {
            int v54 = v74;
            int v53 = -v116;
          }
          if (v117 < 0) {
            int v52 = v53 - v6;
          }
          else {
            int v52 = v6 - v53;
          }
        }
        else
        {
          int v54 = v116;
        }
        int v116 = v54;
        int v117 = v52;
        goto LABEL_142;
      }
      int v25 = v112;
      int v26 = HIDWORD(v112);
      int v27 = v113;
      uint64_t v28 = (int)v112 * (uint64_t)v22 + SHIDWORD(v112) * (uint64_t)v23 + v113 * (uint64_t)v24;
      if (v28 >= 0) {
        int v29 = v22;
      }
      else {
        int v29 = -v22;
      }
      if (v28 >= 0) {
        int v30 = v23;
      }
      else {
        int v30 = -v23;
      }
      if (v28 >= 0) {
        int v31 = v24;
      }
      else {
        int v31 = -v24;
      }
      int v110 = v30;
      int v111 = v29;
      int v108 = v20;
      int v109 = v19;
      int v106 = v20;
      int v107 = v19;
      if (v22 >= 0) {
        unsigned int v32 = v22;
      }
      else {
        unsigned int v32 = -v22;
      }
      if (v23 >= 0) {
        unsigned int v33 = v23;
      }
      else {
        unsigned int v33 = -v23;
      }
      if (v24 >= 0) {
        unsigned int v34 = v24;
      }
      else {
        unsigned int v34 = -v24;
      }
      if (v32 >= v33 && v32 >= v34)
      {
        int v49 = &v111;
        int v50 = &v109;
        int v38 = v19;
        int v36 = v103;
      }
      else
      {
        int v36 = v103;
        if (v33 < v34)
        {
          int v37 = v19;
          int v38 = v18;
          goto LABEL_69;
        }
        int v49 = &v110;
        int v50 = &v108;
        int v38 = v20;
        int v29 = v30;
      }
      *int v50 = v18;
      *int v49 = v31;
      int v37 = v109;
      int v31 = v29;
LABEL_69:
      if (v31 >= 0) {
        int v55 = v38;
      }
      else {
        int v55 = -v38;
      }
      if (v31 >= 0) {
        int v56 = v31;
      }
      else {
        int v56 = -v31;
      }
      int v57 = v108;
      if (v55 < 0)
      {
        if (v108 >= 0) {
          int v58 = v108;
        }
        else {
          int v58 = -v108;
        }
        int v59 = v58 - v36;
        int v60 = v36 - v58;
        if (v37 >= 0) {
          int v61 = v37;
        }
        else {
          int v61 = -v37;
        }
        if (v37 >= 0) {
          int v37 = v60;
        }
        else {
          int v37 = v59;
        }
        if (v108 >= 0) {
          int v57 = v36 - v61;
        }
        else {
          int v57 = v61 - v36;
        }
        unsigned int v3 = v91;
      }
      int v108 = v57;
      int v109 = v37;
      if (v25 >= 0) {
        unsigned int v62 = v25;
      }
      else {
        unsigned int v62 = -v25;
      }
      if (v26 >= 0) {
        unsigned int v63 = v26;
      }
      else {
        unsigned int v63 = -v26;
      }
      if (v27 >= 0) {
        unsigned int v64 = v27;
      }
      else {
        unsigned int v64 = -v27;
      }
      if (v62 < v63 || v62 < v64)
      {
        if (v63 < v64) {
          goto LABEL_104;
        }
        int v66 = &v106;
        int v19 = v20;
        int v65 = (int *)&v112 + 1;
        int v25 = v26;
      }
      else
      {
        int v65 = (int *)&v112;
        int v66 = &v107;
      }
      *int v66 = v18;
      *int v65 = v27;
      int v18 = v19;
      int v27 = v25;
      int v113 = v25;
LABEL_104:
      uint64_t v5 = v9;
      if (v27 < 0)
      {
        int v27 = -v27;
        int v113 = v27;
        int v18 = -v18;
      }
      int v68 = v106;
      int v67 = v107;
      uint64_t v99 = v7;
      if (v18 < 0)
      {
        if (v106 >= 0) {
          int v70 = v106;
        }
        else {
          int v70 = -v106;
        }
        int v71 = v70 - v36;
        int v72 = v36 - v70;
        if (v107 >= 0) {
          int v69 = v72;
        }
        else {
          int v69 = v71;
        }
        if (v107 < 0) {
          int v67 = -v107;
        }
        if (v106 < 0) {
          int v68 = v67 - v36;
        }
        else {
          int v68 = v36 - v67;
        }
      }
      else
      {
        int v69 = v107;
      }
      int v75 = v110;
      int v76 = v111;
      v105[0] = v37 - v111;
      v105[1] = v57 - v110;
      v105[2] = v55 - v56;
      v104[0] = v69 - v112;
      v104[1] = v68 - HIDWORD(v112);
      v104[2] = v18 - v27;
      if (*(unsigned char *)(v2 + 24))
      {
        int v92 = v110;
        int v93 = v111;
        int v94 = v69;
        int v95 = v68;
        int v77 = v18;
        int v78 = v55;
        int v79 = v57;
        uint64_t v80 = v2;
        int v81 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((v120 + 2048) >> 10) & 0x7CLL));
        int v82 = sub_2170C4034(v105, v9, *v101, (unsigned __int16 **)v121);
        int v83 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((67584 - v120) >> 10) & 0x7CLL));
        int v84 = sub_2170C4034(v104, v5, *v101, (unsigned __int16 **)v121);
        int v85 = v82 + v81;
        int v86 = v84 + v83;
        uint64_t v2 = v80;
        unsigned int v3 = v91;
        int v57 = v79;
        int v55 = v78;
        int v18 = v77;
        uint64_t v7 = v99;
        int v69 = v94;
        int v68 = v95;
        int v75 = v92;
        int v76 = v93;
      }
      else
      {
        if ((int)v9 < 1) {
          goto LABEL_138;
        }
        if (v37 - v111 >= 0) {
          int v87 = v37 - v111;
        }
        else {
          int v87 = v111 - v37;
        }
        int v85 = -(v9 * __clz(v87 + 1));
        if (v69 - (int)v112 >= 0) {
          int v88 = v69 - v112;
        }
        else {
          int v88 = v112 - v69;
        }
        int v86 = -(v9 * __clz(v88 + 1));
      }
      if (v85 <= v86)
      {
LABEL_138:
        int v89 = 0;
        int64_t v114 = __PAIR64__(v75, v76);
        int v18 = v55;
        int v115 = v56;
        goto LABEL_139;
      }
      int64_t v114 = v112;
      int v115 = v113;
      int v89 = 1;
      int v37 = v69;
      int v57 = v68;
LABEL_139:
      int v6 = v103;
      int v46 = v101;
      int v116 = v37;
      int v117 = v57;
      int v118 = v18;
      sub_2170A5080(v96, v89, &v120);
LABEL_142:
      sub_2170B68A4((uint64_t)v3, v7, (uint64_t)&v116, (uint64_t)&v114, v5, v97, v46, v121);
LABEL_143:
      ++v7;
    }
    while (v102 != v7);
  }
  if ((void)v127)
  {
    *((void *)&v127 + 1) = v127;
    operator delete((void *)v127);
  }
  if (*((void *)&v125 + 1))
  {
    *(void *)&long long v126 = *((void *)&v125 + 1);
    operator delete(*((void **)&v125 + 1));
  }
  if ((void)v124)
  {
    *((void *)&v124 + 1) = v124;
    operator delete((void *)v124);
  }
  if (__p[1])
  {
    *(void **)&long long v123 = __p[1];
    operator delete(__p[1]);
  }
  if (v121[0])
  {
    v121[1] = v121[0];
    operator delete(v121[0]);
  }
  if (v129)
  {
    int v130 = v129;
    operator delete(v129);
  }
  return 0;
}

void sub_2170C0008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,void *a51)
{
  if (a50)
  {
    a51 = a50;
    operator delete(a50);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2170C0044(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)a1;
  uint64_t v3 = 0;
  v228[15] = *(unsigned __int16 **)MEMORY[0x263EF8340];
  uint64_t v190 = *(unsigned int *)(a1 + 3548);
  unint64_t v4 = *(int *)(a1 + 3544);
  uint64_t v176 = (void *)(a1 + 3136);
  uint64_t v191 = *(void *)(a1 + 3208);
  memset(v228, 0, 120);
  memset(v227, 0, sizeof(v227));
  do
  {
    sub_2170A8CEC((uint64_t)&v227[v3], v4);
    v3 += 15;
  }
  while (v3 != 45);
  __int16 v226 = 0x8000;
  memset_pattern16(__b, &unk_2174AFAB0, 6uLL);
  memset_pattern16(&v222, &unk_2174AFAB0, 6uLL);
  memset_pattern16(&v219, &unk_2174AFAB0, 6uLL);
  LODWORD(v216[0]) = 0;
  sub_2170A4FFC(&v217, v4, v216);
  LODWORD(v214) = 0;
  sub_2170A4FFC(v216, v4, &v214);
  LODWORD(v212) = 0;
  sub_2170A4FFC(&v214, v4, &v212);
  LODWORD(v211[0]) = 0;
  sub_2170A4FFC(&v212, v4, v211);
  LODWORD(v210[0]) = 0;
  sub_2170A4FFC(v211, v4, v210);
  LODWORD(v209[0]) = 0;
  sub_2170A4FFC(v210, v4, v209);
  LODWORD(v208[0]) = 0;
  sub_2170A4FFC(v209, v4, v208);
  LODWORD(__p[0]) = 0;
  sub_2170A4FFC(v208, v4, __p);
  uint64_t v5 = *(unsigned int *)(a2 + 16);
  sub_2170B1D18(__p, v4);
  if ((int)v190 >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = (unsigned char *)(a2 + 8);
    uint64_t v8 = v4;
    uint64_t v168 = 4 * v4;
    int v175 = v2;
    int v183 = v4;
    unsigned int v174 = v5;
    int v196 = (unsigned __int8 *)(a2 + 8);
    uint64_t v194 = (uint64_t)(v2 + 445);
    uint64_t v195 = v4;
    while (1)
    {
      uint64_t v9 = *(int *)(v2[413] + 4 * v6);
      if (!v5 || *(unsigned char *)(v2[404] + v9)) {
        break;
      }
LABEL_144:
      if (++v6 == v190) {
        goto LABEL_145;
      }
    }
    uint64_t v10 = (int *)(v191 + 4 * (int)v9 * (int)v4);
    uint64_t v11 = *(unsigned int *)(v2[416] + 4 * v9);
    int v12 = v217;
    uint64_t v192 = v6;
    int v193 = v217;
    if ((v11 & 0x80000000) == 0)
    {
      uint64_t v13 = v5;
      unsigned int v14 = *(_DWORD *)(v2[416] + 4 * v9);
      uint64_t v15 = 3 * v11;
      int v16 = (unsigned int *)(v2[17] + 4 * v15);
      unsigned int v17 = v16[1];
      unsigned int v18 = *v16;
      LODWORD(v205) = *v16;
      HIDWORD(v205) = v17;
      unsigned int v19 = v17;
      unsigned int v20 = v16[2];
      unsigned int v206 = v20;
      int v21 = (int *)(v2[20] + 4 * v15);
      unsigned int v184 = *v21;
      unsigned int v187 = v21[1];
      LODWORD(v203) = *v21;
      HIDWORD(v203) = v187;
      unsigned int v177 = v21[2];
      unsigned int v204 = v177;
      int v202 = -1;
      uint64_t v201 = -1;
      int v200 = -1;
      unint64_t v199 = -1;
      sub_2170BCD08(v2, v14, v9, (unsigned int *)&v205, &v201);
      unsigned int v180 = v14;
      sub_2170BCD08(v2, v14, v9, (unsigned int *)&v203, &v199);
      int v22 = v202;
      int v23 = v200;
      if ((v202 & 0x80000000) == 0 || v200 < 0)
      {
        unsigned int v26 = v199;
        unsigned int v25 = HIDWORD(v199);
        LODWORD(v28) = v19;
        int v29 = v18;
      }
      else
      {
        unint64_t v205 = v203;
        unsigned int v24 = v204;
        unsigned int v206 = v204;
        unint64_t v203 = __PAIR64__(v19, v18);
        unsigned int v204 = v20;
        unsigned int v26 = v201;
        unsigned int v25 = HIDWORD(v201);
        uint64_t v201 = v199;
        int v27 = v200;
        int v202 = v200;
        unint64_t v199 = __PAIR64__(v25, v26);
        int v200 = v22;
        int v23 = v22;
        int v22 = v27;
        unsigned int v177 = v20;
        unsigned int v184 = v18;
        unsigned int v187 = v19;
        unsigned int v20 = v24;
        unint64_t v28 = HIDWORD(v205);
        int v29 = v205;
      }
      uint64_t v5 = v13;
      if (v23 != -1)
      {
        if (!v13
          || (uint64_t v30 = v2[404], *(unsigned char *)(v30 + (int)v201))
          && *(unsigned char *)(v30 + SHIDWORD(v201))
          && *(unsigned char *)(v30 + v22)
          && *(unsigned char *)(v30 + (int)v26)
          && *(unsigned char *)(v30 + (int)v25)
          && *(unsigned char *)(v30 + v23))
        {
          int v31 = v2;
          unsigned int v32 = v25;
          LODWORD(v4) = v183;
          unsigned int v33 = (int *)(v191 + 4 * HIDWORD(v201) * v183);
          unsigned int v34 = (int *)(v191 + 4 * v22 * v183);
          int v169 = v29;
          int v170 = v28;
          unsigned int v171 = (int *)(v191 + 4 * (int)v201 * v183);
          sub_2170A5790(v171, v33, v34, v183, (int *)(v31[23] + 12 * v29), (int *)(v31[23] + 12 * (int)v28), (int *)(v31[23] + 12 * (int)v20), (int *)(v31[23] + 12 * v180), v193);
          int v35 = (int *)(v191 + 4 * (int)(v26 * v183));
          int v36 = (int *)(v191 + 4 * (int)(v32 * v183));
          int v37 = (int *)(v191 + 4 * v23 * v183);
          sub_2170A5790(v35, (int *)(v191 + 4 * (int)(v32 * v4)), v37, v4, (int *)(v175[23] + 12 * (int)v184), (int *)(v175[23] + 12 * (int)v187), (int *)(v175[23] + 12 * (int)v177), (int *)(v175[23] + 12 * v180), (_DWORD *)v216[0]);
          uint64_t v38 = v195;
          unint64_t v39 = v171;
          uint64_t v2 = v175;
          if (v183 >= 1)
          {
            int v40 = v217;
            int v41 = (int *)v216[0];
            int v42 = v214;
            do
            {
              int v44 = *v40++;
              int v43 = v44;
              int v45 = *v41++;
              BOOL v46 = __OFADD__(v45, v43);
              int v47 = v45 + v43;
              if (v47 < 0 != v46) {
                ++v47;
              }
              *v42++ = v47 >> 1;
              --v38;
            }
            while (v38);
            if (v183 == 2)
            {
              sub_2170A5E8C((unint64_t)v171, v33, v34, (_DWORD *)(v175[23] + 12 * v169), (_DWORD *)(v175[23] + 12 * v170), (int *)(v175[23] + 12 * v180), v217);
              sub_2170A5E8C((unint64_t)v35, v36, v37, (_DWORD *)(v175[23] + 12 * (int)v184), (_DWORD *)(v175[23] + 12 * (int)v187), (int *)(v175[23] + 12 * v180), (int *)v216[0]);
              int v48 = v217;
              int v49 = v216[0];
              int v50 = v212;
              int v51 = *(_DWORD *)v216[0] + *v217;
              if (*(_DWORD *)v216[0] + *v48 < 0 != __OFADD__(*(_DWORD *)v216[0], *v48)) {
                ++v51;
              }
              *int v212 = v51 >> 1;
              int v52 = v48[1];
              int v53 = v49[1];
              BOOL v46 = __OFADD__(v53, v52);
              int v54 = v53 + v52;
              if (v54 < 0 != v46) {
                ++v54;
              }
              v50[1] = v54 >> 1;
              uint64_t v55 = v195;
              unint64_t v39 = v171;
            }
            else
            {
              unint64_t v117 = 0;
              int v118 = v212;
              uint64_t v55 = v195;
              do
              {
                int v119 = v171[v117 / 4];
                int v120 = v35[v117 / 4];
                BOOL v46 = __OFADD__(v120, v119);
                int v121 = v120 + v119;
                if (v121 < 0 != v46) {
                  ++v121;
                }
                unint64_t v122 = 1431655766
                     * ((v121 >> 1) - (v34[v117 / 4] + v37[v117 / 4]) + 2 * (v36[v117 / 4] + v33[v117 / 4]));
                v118[v117 / 4] = HIDWORD(v122) + (v122 >> 63);
                v117 += 4;
              }
              while (v168 != v117);
            }
            uint64_t v123 = 0;
            long long v124 = v217;
            long long v125 = v216[0];
            long long v126 = v211[0];
            long long v127 = v210[0];
            uint64_t v128 = v214;
            int v129 = v209[0];
            int v130 = v212;
            uint64_t v131 = v208[0];
            LODWORD(v4) = v183;
            do
            {
              v124[v123] = v33[v123] + v39[v123] - v34[v123];
              v125[v123] = v36[v123] + v35[v123] - v37[v123];
              v126[v123] = v10[v123] - v124[v123];
              v127[v123] = v10[v123] - v125[v123];
              v129[v123] = v10[v123] - v128[v123];
              v131[v123] = v10[v123] - v130[v123];
              ++v123;
            }
            while (v55 != v123);
          }
          if (*(unsigned char *)(a2 + 24))
          {
            int v189 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((v219 + 2048) >> 10) & 0x7CLL));
            int v186 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((v220 + 2048) >> 10) & 0x7CLL));
            int v182 = sub_2170C4034((int *)v211[0], v4, *v196, v228);
            int v179 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((67584 - (unint64_t)v219) >> 10) & 0x3FFFFFFFFFFFFCLL));
            int v173 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((v221 + 2048) >> 10) & 0x7CLL));
            int v132 = sub_2170C4034((int *)v210[0], v4, *v196, v228);
            int v133 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((v219 + 2048) >> 10) & 0x7CLL));
            int v134 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((67584 - (unint64_t)v220) >> 10) & 0x3FFFFFFFFFFFFCLL));
            int v135 = sub_2170C4034((int *)v209[0], v4, *v196, v228);
            int v136 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((67584 - (unint64_t)v219) >> 10) & 0x3FFFFFFFFFFFFCLL));
            int v137 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((67584 - (unint64_t)v221) >> 10) & 0x3FFFFFFFFFFFFCLL));
            int v138 = sub_2170C4034((int *)v208[0], v4, *v196, v228);
            int v139 = v186 + v189 + v182;
            int v140 = v173 + v179 + v132;
            int v141 = v134 + v133 + v135;
            int v142 = v137 + v136 + v138;
            uint64_t v2 = v175;
            uint64_t v5 = v174;
            uint64_t v6 = v192;
            uint64_t v7 = (unsigned char *)(a2 + 8);
          }
          else
          {
            uint64_t v7 = (unsigned char *)(a2 + 8);
            if ((int)v4 < 1)
            {
              int v139 = 0;
              int v140 = 0;
              int v141 = 0;
              int v142 = 0;
            }
            else
            {
              int v143 = *(_DWORD *)v211[0];
              if (*(int *)v211[0] < 0) {
                int v143 = -v143;
              }
              int v139 = -(v4 * __clz(v143 + 1));
              int v144 = *(_DWORD *)v210[0];
              if (*(int *)v210[0] < 0) {
                int v144 = -v144;
              }
              int v140 = -(v4 * __clz(v144 + 1));
              int v145 = *(_DWORD *)v209[0];
              if (*(int *)v209[0] < 0) {
                int v145 = -v145;
              }
              int v141 = -(v4 * __clz(v145 + 1));
              int v146 = *(_DWORD *)v208[0];
              if (*(int *)v208[0] < 0) {
                int v146 = -v146;
              }
              int v142 = -(v4 * __clz(v146 + 1));
            }
            uint64_t v5 = v174;
            uint64_t v6 = v192;
          }
          if (v139 <= v140 && v139 <= v141 && v139 <= v142)
          {
            int v147 = 0;
            int v148 = 0;
LABEL_114:
            uint64_t v149 = 1;
LABEL_121:
            uint64_t v150 = v194;
            sub_2170A5080(v194, v148, &v219);
            int v151 = &v219;
LABEL_137:
            sub_2170A5080(v150, v147, &v151[v149]);
            unsigned int v64 = 2;
            uint64_t v8 = v195;
            int v12 = v193;
LABEL_138:
            if ((int)v4 >= 1)
            {
              int v153 = (char *)__p[0] + 4;
              uint64_t v154 = v8;
              int v155 = v10;
              do
              {
                int v157 = *v155++;
                int v156 = v157;
                int v158 = *((_DWORD *)v153 - 1);
                if (*(_DWORD *)&v153[4 * (((_BYTE)v158 - 1) & 3)] != v157)
                {
                  *((_DWORD *)v153 - 1) = v158 + 1;
                  *(_DWORD *)&v153[4 * (v158 & 3)] = v156;
                }
                v153 += 20;
                --v154;
              }
              while (v154);
            }
            sub_2170B68A4((uint64_t)v2, v6, (uint64_t)v10, (uint64_t)v12, v4, v176, v7, &v227[15 * v64]);
            goto LABEL_144;
          }
          if (v140 > v141 || v140 > v142)
          {
            if (v141 <= v142)
            {
              int v148 = 0;
              int v147 = 1;
              int v193 = v214;
              goto LABEL_114;
            }
            int v147 = 1;
            int v193 = v212;
            int v148 = 1;
          }
          else
          {
            int v147 = 0;
            int v148 = 1;
            int v193 = (int *)v216[0];
          }
          uint64_t v149 = 2;
          goto LABEL_121;
        }
      }
      LODWORD(v4) = v183;
      if (v22 != -1)
      {
        if (!v5
          || (uint64_t v56 = v2[404], *(unsigned char *)(v56 + (int)v201)) && *(unsigned char *)(v56 + SHIDWORD(v201)) && *(unsigned char *)(v56 + v22))
        {
          int v57 = (int *)(v191 + 4 * (int)v201 * v183);
          int v58 = (int *)(v191 + 4 * HIDWORD(v201) * v183);
          int v59 = (int *)(v191 + 4 * v22 * v183);
          int v60 = v29;
          int v61 = v28;
          sub_2170A5790(v57, v58, v59, v183, (int *)(v2[23] + 12 * v29), (int *)(v2[23] + 12 * (int)v28), (int *)(v2[23] + 12 * (int)v20), (int *)(v2[23] + 12 * v180), (_DWORD *)v216[0]);
          if (v183 == 2)
          {
            sub_2170A5E8C((unint64_t)v57, v58, v59, (_DWORD *)(v2[23] + 12 * v60), (_DWORD *)(v2[23] + 12 * v61), (int *)(v2[23] + 12 * v180), v212);
          }
          else
          {
            if (v183 < 1) {
              goto LABEL_72;
            }
            int v76 = v212;
            uint64_t v77 = v8;
            int v78 = v57;
            int v79 = v58;
            do
            {
              int v81 = *v78++;
              int v80 = v81;
              int v82 = *v79++;
              BOOL v46 = __OFADD__(v82, v80);
              int v83 = v82 + v80;
              if (v83 < 0 != v46) {
                ++v83;
              }
              *v76++ = v83 >> 1;
              --v77;
            }
            while (v77);
          }
          uint64_t v84 = 0;
          int v85 = v217;
          int v86 = v216[0];
          int v87 = v214;
          int v88 = v211[0];
          int v89 = v210[0];
          int v90 = v209[0];
          int v91 = v212;
          int v92 = v208[0];
          do
          {
            int v93 = v58[v84] + v57[v84] - v59[v84];
            v85[v84] = v93;
            int v94 = v86[v84];
            BOOL v46 = __OFADD__(v94, v93);
            int v95 = v94 + v93;
            if (v95 < 0 != v46) {
              ++v95;
            }
            v87[v84] = v95 >> 1;
            v88[v84] = v10[v84] - v85[v84];
            v89[v84] = v10[v84] - v86[v84];
            v90[v84] = v10[v84] - v87[v84];
            v92[v84] = v10[v84] - v91[v84];
            ++v84;
          }
          while (v8 != v84);
LABEL_72:
          if (*(unsigned char *)(a2 + 24))
          {
            uint64_t v7 = (unsigned char *)(a2 + 8);
            int v188 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((v222 + 2048) >> 10) & 0x7CLL));
            int v185 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((v223 + 2048) >> 10) & 0x7CLL));
            int v181 = sub_2170C4034((int *)v211[0], v183, *v196, v228);
            int v178 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((67584 - (unint64_t)v222) >> 10) & 0x3FFFFFFFFFFFFCLL));
            int v172 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((v224 + 2048) >> 10) & 0x7CLL));
            int v96 = sub_2170C4034((int *)v210[0], v183, *v196, v228);
            int v97 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((v222 + 2048) >> 10) & 0x7CLL));
            int v98 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((67584 - (unint64_t)v223) >> 10) & 0x3FFFFFFFFFFFFCLL));
            int v99 = sub_2170C4034((int *)v209[0], v183, *v196, v228);
            int v100 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((67584 - (unint64_t)v222) >> 10) & 0x3FFFFFFFFFFFFCLL));
            int v101 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((67584 - (unint64_t)v224) >> 10) & 0x3FFFFFFFFFFFFCLL));
            int v102 = sub_2170C4034((int *)v208[0], v183, *v196, v228);
            signed int v103 = v185 + v188 + v181;
            signed int v104 = v172 + v178 + v96;
            signed int v105 = v98 + v97 + v99;
            signed int v106 = v101 + v100 + v102;
            uint64_t v2 = v175;
          }
          else
          {
            uint64_t v7 = (unsigned char *)(a2 + 8);
            if (v183 < 1)
            {
              signed int v103 = 0;
              signed int v104 = 0;
              signed int v105 = 0;
              signed int v106 = 0;
            }
            else
            {
              int v113 = *(_DWORD *)v211[0];
              if (*(int *)v211[0] < 0) {
                int v113 = -v113;
              }
              signed int v103 = -(v183 * __clz(v113 + 1));
              int v114 = *(_DWORD *)v210[0];
              if (*(int *)v210[0] < 0) {
                int v114 = -v114;
              }
              signed int v104 = -(v183 * __clz(v114 + 1));
              int v115 = *(_DWORD *)v209[0];
              if (*(int *)v209[0] < 0) {
                int v115 = -v115;
              }
              signed int v105 = -(v183 * __clz(v115 + 1));
              int v116 = *(_DWORD *)v208[0];
              if (*(int *)v208[0] < 0) {
                int v116 = -v116;
              }
              signed int v106 = -(v183 * __clz(v116 + 1));
            }
          }
          uint64_t v5 = v174;
          uint64_t v6 = v192;
          if (v103 <= v104 && v103 <= v105 && v103 <= v106)
          {
            int v147 = 0;
            int v152 = 0;
LABEL_135:
            uint64_t v149 = 1;
            goto LABEL_136;
          }
          if (v104 > v105 || v104 > v106)
          {
            if (v105 <= v106)
            {
              int v152 = 0;
              int v147 = 1;
              int v193 = v214;
              goto LABEL_135;
            }
            int v147 = 1;
            int v193 = v212;
            int v152 = 1;
          }
          else
          {
            int v147 = 0;
            int v152 = 1;
            int v193 = (int *)v216[0];
          }
          uint64_t v149 = 2;
LABEL_136:
          uint64_t v150 = v194;
          sub_2170A5080(v194, v152, &v222);
          int v151 = &v222;
          goto LABEL_137;
        }
      }
      uint64_t v7 = (unsigned char *)(a2 + 8);
      if (HIDWORD(v201) != -1)
      {
        if (!v5 || (uint64_t v62 = v2[404], *(unsigned char *)(v62 + (int)v201)) && *(unsigned char *)(v62 + SHIDWORD(v201)))
        {
          uint64_t v6 = v192;
          int v12 = v193;
          if (v183 == 2)
          {
            int v198 = 0;
            sub_2170A5A30((int *)(v191 + 8 * v201), (int *)(v191 + 8 * HIDWORD(v201)), v10, (_DWORD *)(v2[23] + 12 * v29), (_DWORD *)(v2[23] + 12 * (int)v28), (int *)(v2[23] + 12 * v180), v193, &v198);
            sub_2170A5080(v194, v198 != 0, &v226);
          }
          else if (v183 >= 1)
          {
            unint64_t v107 = 0;
            uint64_t v108 = v191 + 4 * (int)v201 * v183;
            uint64_t v109 = v191 + 4 * HIDWORD(v201) * v183;
            do
            {
              int v110 = *(_DWORD *)(v108 + v107);
              int v111 = *(_DWORD *)(v109 + v107);
              BOOL v46 = __OFADD__(v111, v110);
              int v112 = v111 + v110;
              if (v112 < 0 != v46) {
                ++v112;
              }
              v193[v107 / 4] = v112 >> 1;
              v107 += 4;
            }
            while (v168 != v107);
          }
          unsigned int v64 = 1;
          goto LABEL_138;
        }
      }
      uint64_t v6 = v192;
      int v12 = v193;
    }
    if (sub_2170BD6D4((uint64_t)v2, v9, (uint64_t)&v217, a2)) {
      BOOL v63 = 1;
    }
    else {
      BOOL v63 = (int)v4 < 1;
    }
    if (v63)
    {
      unsigned int v64 = 0;
    }
    else
    {
      uint64_t v65 = 0;
      do
      {
        unsigned int v66 = 0;
        int v67 = __p[0];
        int v68 = (char *)__p[0] + 20 * v65;
        int v69 = 0x7FFFFFFF;
        char v70 = -1;
        unsigned int v71 = -1;
        do
        {
          int v72 = v67[5 * v65 + 1 + ((v70 + *v68) & 3)];
          int v73 = v10[v65] - v72;
          if (*(unsigned char *)(a2 + 24))
          {
            signed int v74 = sub_2170C1338(v73, v65, v66, __b, *v196, v227);
          }
          else
          {
            if (v73 >= 0) {
              int v75 = v10[v65] - v72;
            }
            else {
              int v75 = v72 - v10[v65];
            }
            signed int v74 = -__clz(v75 + 1);
          }
          if (v74 < v69)
          {
            v217[v65] = v72;
            int v69 = v74;
            unsigned int v71 = v66;
          }
          ++v66;
          --v70;
        }
        while (v66 != 4);
        sub_2170A5080(v194, v71 & 1, __b);
        sub_2170A5080(v194, (v71 >> 1) & 1, &__b[(v71 & 1) + 1]);
        ++v65;
        uint64_t v8 = v195;
      }
      while (v65 != v195);
      unsigned int v64 = 0;
      uint64_t v2 = v175;
      LODWORD(v4) = v183;
      uint64_t v5 = v174;
      uint64_t v6 = v192;
      int v12 = v193;
      uint64_t v7 = (unsigned char *)(a2 + 8);
    }
    goto LABEL_138;
  }
LABEL_145:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v208[0])
  {
    v208[1] = v208[0];
    operator delete(v208[0]);
  }
  if (v209[0])
  {
    v209[1] = v209[0];
    operator delete(v209[0]);
  }
  if (v210[0])
  {
    v210[1] = v210[0];
    operator delete(v210[0]);
  }
  if (v211[0])
  {
    v211[1] = v211[0];
    operator delete(v211[0]);
  }
  if (v212)
  {
    v213[0] = v212;
    operator delete(v212);
  }
  if (v214)
  {
    v215[0] = v214;
    operator delete(v214);
  }
  if (v216[0])
  {
    v216[1] = v216[0];
    operator delete(v216[0]);
  }
  if (v217)
  {
    *(void *)int v218 = v217;
    operator delete(v217);
  }
  unint64_t v159 = 360;
  do
  {
    int v160 = &v227[v159 / 8];
    int v161 = *(void **)&v218[v159 / 4 + 4];
    if (v161)
    {
      *(v160 - 2) = v161;
      operator delete(v161);
    }
    int v162 = (void *)*(v160 - 6);
    if (v162)
    {
      *(void *)&v218[v159 / 4] = v162;
      operator delete(v162);
    }
    int v163 = &v227[v159 / 8];
    int v164 = v216[v159 / 8];
    if (v164)
    {
      *(v163 - 8) = v164;
      operator delete(v164);
    }
    int v165 = (void *)*(v163 - 12);
    if (v165)
    {
      v215[v159 / 8] = v165;
      operator delete(v165);
    }
    int v166 = (void *)*(v160 - 15);
    if (v166)
    {
      v213[v159 / 8] = v166;
      operator delete(v166);
    }
    v159 -= 120;
  }
  while (v159);
  return 0;
}

void sub_2170C11C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,void *a63)
{
  if (__p) {
    operator delete(__p);
  }
  if (a42) {
    operator delete(a42);
  }
  if (a45) {
    operator delete(a45);
  }
  if (a48) {
    operator delete(a48);
  }
  if (a51) {
    operator delete(a51);
  }
  if (a54) {
    operator delete(a54);
  }
  if (a57) {
    operator delete(a57);
  }
  if (a60) {
    operator delete(a60);
  }
  if (a63) {
    operator delete(a63);
  }
  uint64_t v70 = 360;
  while (1)
  {
    unsigned int v71 = &a69 + v70;
    int v72 = *(void **)(&a69 + v70 - 24);
    if (v72)
    {
      *((void *)v71 - 2) = v72;
      operator delete(v72);
    }
    int v73 = (void *)*((void *)v71 - 6);
    if (v73)
    {
      *(void *)(&a69 + v70 - 40) = v73;
      operator delete(v73);
    }
    signed int v74 = &a69 + v70;
    int v75 = *(void **)(&a69 + v70 - 72);
    if (v75)
    {
      *((void *)v74 - 8) = v75;
      operator delete(v75);
    }
    int v76 = (void *)*((void *)v74 - 12);
    if (v76)
    {
      *(void *)(&a69 + v70 - 88) = v76;
      operator delete(v76);
    }
    uint64_t v77 = (void *)*((void *)v71 - 15);
    if (v77)
    {
      *(void *)(&a69 + v70 - 112) = v77;
      operator delete(v77);
    }
    v70 -= 120;
    if (!v70) {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t sub_2170C1338(int a1, int a2, char a3, unsigned __int16 *a4, int a5, void *a6)
{
  int v6 = *a4;
  if (a3) {
    int v6 = 0x10000 - v6;
  }
  int v7 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((v6 + 2048) >> 10) & 0xFCLL));
  int v8 = a4[(a3 & 1) + 1];
  if ((a3 & 2) != 0) {
    int v8 = 0x10000 - v8;
  }
  int v9 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((v8 + 2048) >> 10) & 0xFCLL));
  return v9 + v7 + sub_2170BA780(a1, a2, a5, a6);
}

uint64_t sub_2170C13B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)a1;
  v104[45] = *MEMORY[0x263EF8340];
  unint64_t v4 = (void *)(a1 + 3136);
  uint64_t v5 = *(unsigned int *)(a1 + 3548);
  unint64_t v6 = *(int *)(a1 + 3544);
  uint64_t v77 = *(void *)(a1 + 3208);
  memset_pattern16(__b, &unk_2174AFAB0, 6uLL);
  uint64_t v7 = 0;
  memset(v104, 0, 360);
  do
  {
    sub_2170A8CEC((uint64_t)&v104[v7], v6);
    v7 += 15;
  }
  while (v7 != 45);
  __int16 v102 = 0x8000;
  LODWORD(v99[0]) = 0;
  sub_2170A4FFC(&v100, v6, v99);
  LODWORD(__p) = 0;
  sub_2170A4FFC(v99, v6, &__p);
  uint64_t v8 = v77;
  int v84 = *(_DWORD *)(a2 + 16);
  sub_2170B1D18(&__p, v6);
  if ((int)v5 >= 1)
  {
    uint64_t v9 = 0;
    int v87 = (unsigned char *)(a2 + 8);
    uint64_t v85 = (uint64_t)(v3 + 445);
    uint64_t v86 = v6;
    signed int v74 = v3;
    uint64_t v75 = v5;
    int v76 = v4;
    int v73 = v6;
    while (1)
    {
      uint64_t v10 = *(int *)(v3[413] + 4 * v9);
      if (!v84 || *(unsigned char *)(v3[404] + v10)) {
        break;
      }
LABEL_71:
      if (++v9 == v5) {
        goto LABEL_72;
      }
    }
    uint64_t v11 = (int *)(v8 + 4 * (int)v10 * (int)v6);
    uint64_t v12 = *(unsigned int *)(v3[416] + 4 * v10);
    uint64_t v83 = v9;
    if ((v12 & 0x80000000) == 0)
    {
      uint64_t v13 = (int *)(v3[17] + 12 * v12);
      int v79 = *v13;
      int v81 = v13[1];
      LODWORD(v95) = *v13;
      HIDWORD(v95) = v81;
      int v14 = v13[2];
      v96[0] = v14;
      uint64_t v15 = (int *)(v3[20] + 12 * v12);
      int v16 = v15[1];
      int v17 = *v15;
      LODWORD(v93) = *v15;
      HIDWORD(v93) = v16;
      int v78 = v16;
      int v18 = v15[2];
      int v94 = v18;
      int v92 = -1;
      uint64_t v91 = -1;
      int v90 = -1;
      uint64_t v89 = -1;
      sub_2170BCD08(v3, v12, v10, (unsigned int *)&v95, &v91);
      sub_2170BCD08(v3, v12, v10, (unsigned int *)&v93, &v89);
      int v19 = v92;
      int v20 = v90;
      if ((v92 & 0x80000000) == 0 || v90 < 0)
      {
        int v21 = v89;
        int v22 = HIDWORD(v89);
        int v25 = v79;
        LODWORD(v23) = v81;
        int v24 = v14;
      }
      else
      {
        unint64_t v95 = v93;
        int v18 = v14;
        v96[0] = v94;
        int v21 = v91;
        int v22 = HIDWORD(v91);
        uint64_t v91 = v89;
        int v20 = v92;
        int v19 = v90;
        int v92 = v90;
        int v17 = v79;
        int v78 = v81;
        unint64_t v23 = HIDWORD(v93);
        int v24 = v94;
        int v25 = v93;
      }
      uint64_t v8 = v77;
      if (v20 != -1)
      {
        if (!v84
          || (uint64_t v26 = v3[404], *(unsigned char *)(v26 + (int)v91))
          && *(unsigned char *)(v26 + SHIDWORD(v91))
          && *(unsigned char *)(v26 + v19)
          && *(unsigned char *)(v26 + v21)
          && *(unsigned char *)(v26 + v22)
          && *(unsigned char *)(v26 + v20))
        {
          int v80 = v18;
          int v82 = v17;
          int v27 = v22;
          int v28 = v21;
          sub_2170A5790((int *)(v77 + 4 * (int)v91 * (int)v6), (int *)(v77 + 4 * HIDWORD(v91) * (int)v6), (int *)(v77 + 4 * v19 * (int)v6), v6, (int *)(v3[23] + 12 * v25), (int *)(v3[23] + 12 * (int)v23), (int *)(v3[23] + 12 * v24), (int *)(v3[23] + 12 * v12), v100);
          sub_2170A5790((int *)(v77 + 4 * v28 * (int)v6), (int *)(v77 + 4 * v27 * (int)v6), (int *)(v77 + 4 * v20 * (int)v6), v6, (int *)(v3[23] + 12 * v82), (int *)(v3[23] + 12 * v78), (int *)(v3[23] + 12 * v80), (int *)(v3[23] + 12 * v12), (_DWORD *)v99[0]);
          if ((int)v6 >= 1)
          {
            int v29 = (int *)v100;
            uint64_t v30 = (int *)v99[0];
            uint64_t v31 = v86;
            uint64_t v9 = v83;
            do
            {
              int v32 = *v30++;
              int v33 = v32 + *v29;
              if (v33 < 0 != __OFADD__(v32, *v29)) {
                ++v33;
              }
              *v29++ = v33 >> 1;
              --v31;
            }
            while (v31);
            unsigned int v34 = 2;
            goto LABEL_33;
          }
LABEL_32:
          unsigned int v34 = 2;
          uint64_t v9 = v83;
LABEL_33:
          uint64_t v5 = v75;
          unint64_t v4 = v76;
LABEL_65:
          if ((int)v6 >= 1)
          {
            int v58 = (char *)__p + 4;
            uint64_t v59 = v86;
            int v60 = v11;
            do
            {
              int v62 = *v60++;
              int v61 = v62;
              int v63 = *((_DWORD *)v58 - 1);
              if (*(_DWORD *)&v58[4 * (((_BYTE)v63 - 1) & 3)] != v62)
              {
                *((_DWORD *)v58 - 1) = v63 + 1;
                *(_DWORD *)&v58[4 * (v63 & 3)] = v61;
              }
              v58 += 20;
              --v59;
            }
            while (v59);
          }
          sub_2170B68A4((uint64_t)v3, v9, (uint64_t)v11, (uint64_t)v100, v6, v4, v87, &v104[15 * v34]);
          goto LABEL_71;
        }
      }
      if (v19 != -1)
      {
        if (!v84
          || (uint64_t v35 = v3[404], *(unsigned char *)(v35 + (int)v91)) && *(unsigned char *)(v35 + SHIDWORD(v91)) && *(unsigned char *)(v35 + v19))
        {
          sub_2170A5790((int *)(v77 + 4 * (int)v91 * (int)v6), (int *)(v77 + 4 * HIDWORD(v91) * (int)v6), (int *)(v77 + 4 * v19 * (int)v6), v6, (int *)(v3[23] + 12 * v25), (int *)(v3[23] + 12 * (int)v23), (int *)(v3[23] + 12 * v24), (int *)(v3[23] + 12 * v12), v100);
          goto LABEL_32;
        }
      }
      uint64_t v9 = v83;
      if (HIDWORD(v91) != -1)
      {
        if (!v84 || (uint64_t v36 = v3[404], *(unsigned char *)(v36 + (int)v91)) && *(unsigned char *)(v36 + SHIDWORD(v91)))
        {
          unint64_t v4 = v76;
          if (v6 == 2)
          {
            int v88 = 0;
            sub_2170A5A30((int *)(v77 + 8 * v91), (int *)(v77 + 8 * HIDWORD(v91)), v11, (_DWORD *)(v3[23] + 12 * v25), (_DWORD *)(v3[23] + 12 * (int)v23), (int *)(v3[23] + 12 * v12), (int *)v100, &v88);
            uint64_t v5 = v75;
            sub_2170A5080(v85, v88 != 0, &v102);
          }
          else
          {
            uint64_t v5 = v75;
            if ((int)v6 >= 1)
            {
              int v49 = (int *)(v77 + 4 * (int)v91 * (int)v6);
              int v50 = (int *)(v77 + 4 * HIDWORD(v91) * (int)v6);
              int v51 = (int *)v100;
              uint64_t v52 = v86;
              do
              {
                int v54 = *v49++;
                int v53 = v54;
                int v55 = *v50++;
                BOOL v56 = __OFADD__(v55, v53);
                int v57 = v55 + v53;
                if (v57 < 0 != v56) {
                  ++v57;
                }
                *v51++ = v57 >> 1;
                --v52;
              }
              while (v52);
            }
          }
          unsigned int v34 = 1;
          goto LABEL_65;
        }
      }
      uint64_t v5 = v75;
      unint64_t v4 = v76;
    }
    if (sub_2170BD6D4((uint64_t)v3, v10, (uint64_t)&v100, a2)) {
      BOOL v37 = 1;
    }
    else {
      BOOL v37 = (int)v6 < 1;
    }
    if (v37)
    {
      unsigned int v34 = 0;
    }
    else
    {
      uint64_t v38 = 0;
      do
      {
        unsigned int v39 = 0;
        int v40 = __p;
        int v41 = (char *)__p + 20 * v38;
        int v42 = 0x7FFFFFFF;
        char v43 = -1;
        unsigned int v44 = -1;
        do
        {
          int v45 = v40[5 * v38 + 1 + ((v43 + *v41) & 3)];
          int v46 = v11[v38] - v45;
          if (*(unsigned char *)(a2 + 24))
          {
            signed int v47 = sub_2170C1338(v46, v38, v39, __b, *v87, v104);
          }
          else
          {
            if (v46 >= 0) {
              int v48 = v11[v38] - v45;
            }
            else {
              int v48 = v45 - v11[v38];
            }
            signed int v47 = -__clz(v48 + 1);
          }
          if (v47 < v42)
          {
            *((_DWORD *)v100 + v38) = v45;
            int v42 = v47;
            unsigned int v44 = v39;
          }
          ++v39;
          --v43;
        }
        while (v39 != 4);
        sub_2170A5080(v85, v44 & 1, __b);
        sub_2170A5080(v85, (v44 >> 1) & 1, &__b[(v44 & 1) + 1]);
        ++v38;
      }
      while (v38 != v86);
      unsigned int v34 = 0;
      uint64_t v3 = v74;
      uint64_t v5 = v75;
      unint64_t v4 = v76;
      uint64_t v8 = v77;
      LODWORD(v6) = v73;
      uint64_t v9 = v83;
    }
    goto LABEL_65;
  }
LABEL_72:
  if (__p)
  {
    v98[0] = __p;
    operator delete(__p);
  }
  if (v99[0])
  {
    v99[1] = v99[0];
    operator delete(v99[0]);
  }
  if (v100)
  {
    v101[0] = v100;
    operator delete(v100);
  }
  unint64_t v64 = 90;
  do
  {
    uint64_t v65 = &v104[v64 / 2];
    unsigned int v66 = (void *)v101[v64 / 2];
    if (v66)
    {
      *(v65 - 2) = v66;
      operator delete(v66);
    }
    int v67 = (void *)*(v65 - 6);
    if (v67)
    {
      v99[v64 / 2 + 2] = v67;
      operator delete(v67);
    }
    int v68 = &v104[v64 / 2];
    int v69 = (void *)v98[v64 / 2];
    if (v69)
    {
      *(v68 - 8) = v69;
      operator delete(v69);
    }
    uint64_t v70 = (void *)*(v68 - 12);
    if (v70)
    {
      *(void *)&v96[v64] = v70;
      operator delete(v70);
    }
    unsigned int v71 = (void *)*(v65 - 15);
    if (v71)
    {
      *(void *)((char *)&v92 + v64 * 4) = v71;
      operator delete(v71);
    }
    v64 -= 30;
  }
  while (v64 * 4);
  return 0;
}

void sub_2170C1B10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  if (__p) {
    operator delete(__p);
  }
  if (a34) {
    operator delete(a34);
  }
  if (a37) {
    operator delete(a37);
  }
  uint64_t v42 = 360;
  while (1)
  {
    char v43 = &a41 + v42;
    unsigned int v44 = *(void **)(&a41 + v42 - 24);
    if (v44)
    {
      *((void *)v43 - 2) = v44;
      operator delete(v44);
    }
    int v45 = (void *)*((void *)v43 - 6);
    if (v45)
    {
      *(void *)(&a41 + v42 - 40) = v45;
      operator delete(v45);
    }
    int v46 = &a41 + v42;
    signed int v47 = *(void **)(&a41 + v42 - 72);
    if (v47)
    {
      *((void *)v46 - 8) = v47;
      operator delete(v47);
    }
    int v48 = (void *)*((void *)v46 - 12);
    if (v48)
    {
      *(void *)(&a41 + v42 - 88) = v48;
      operator delete(v48);
    }
    int v49 = (void *)*((void *)v43 - 15);
    if (v49)
    {
      *(void *)(&a41 + v42 - 112) = v49;
      operator delete(v49);
    }
    v42 -= 120;
    if (!v42) {
      _Unwind_Resume(exception_object);
    }
  }
}

uint64_t sub_2170C1BE8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)a1;
  uint64_t v4 = 0;
  v147[45] = *MEMORY[0x263EF8340];
  uint64_t v5 = *(unsigned int *)(a1 + 3548);
  unint64_t v6 = *(int *)(a1 + 3544);
  uint64_t v121 = *(void *)(a1 + 3208);
  unint64_t v122 = (void *)(a1 + 3136);
  memset(v147, 0, 360);
  do
  {
    sub_2170A8CEC((uint64_t)&v147[v4], v6);
    v4 += 15;
  }
  while (v4 != 45);
  memset_pattern16(__b, &unk_2174AFAB0, 6uLL);
  memset_pattern16(&v143, &unk_2174AFAB0, 6uLL);
  LODWORD(v141[0]) = 0;
  sub_2170A4FFC(v142, v6, v141);
  LODWORD(v140[0]) = 0;
  sub_2170A4FFC(v141, v6, v140);
  uint64_t v7 = v121;
  LODWORD(v139[0]) = 0;
  sub_2170A4FFC(v140, v6, v139);
  LODWORD(v138[0]) = 0;
  sub_2170A4FFC(v139, v6, v138);
  LODWORD(v137[0]) = 0;
  sub_2170A4FFC(v138, v6, v137);
  LODWORD(v136[0]) = 0;
  sub_2170A4FFC(v137, v6, v136);
  LODWORD(v135[0]) = 0;
  sub_2170A4FFC(v136, v6, v135);
  LODWORD(__p[0]) = 0;
  sub_2170A4FFC(v135, v6, __p);
  int v8 = *(_DWORD *)(a2 + 16);
  sub_2170B1D18(__p, v6);
  if ((int)v5 >= 1)
  {
    uint64_t v9 = 0;
    uint64_t v127 = (uint64_t)(v3 + 445);
    uint64_t v128 = v6;
    uint64_t v109 = 4 * v6;
    uint64_t v119 = v5;
    int v120 = v3;
    int v123 = v8;
    int v117 = v6;
    int v129 = (unsigned char *)(a2 + 8);
    while (1)
    {
      uint64_t v10 = *(int *)(v3[413] + 4 * v9);
      if (!v8 || *(unsigned char *)(v3[404] + v10)) {
        break;
      }
LABEL_100:
      if (++v9 == v5) {
        goto LABEL_101;
      }
    }
    uint64_t v124 = v9;
    uint64_t v11 = v7 + 4 * (int)v10 * (int)v6;
    uint64_t v12 = *(unsigned int *)(v3[416] + 4 * v10);
    uint64_t v13 = v142[0];
    if ((v12 & 0x80000000) != 0)
    {
      uint64_t v9 = v124;
      goto LABEL_75;
    }
    long long v125 = v142[0];
    int v133 = -1;
    uint64_t v132 = -1;
    int v131 = -1;
    uint64_t v130 = -1;
    sub_2170BCD08(v3, v12, v10, (unsigned int *)(v3[17] + 12 * v12), &v132);
    sub_2170BCD08(v3, v12, v10, (unsigned int *)(v3[20] + 12 * v12), &v130);
    int v14 = v133;
    if (v133 < 0)
    {
      int v8 = v123;
      uint64_t v9 = v124;
      if ((v131 & 0x80000000) == 0)
      {
        uint64_t v17 = v132;
        uint64_t v132 = v130;
        int v18 = v131;
        int v133 = v131;
        uint64_t v130 = v17;
        int v131 = v14;
        int v14 = v18;
      }
      uint64_t v13 = v125;
      int v15 = v132;
      int v16 = HIDWORD(v132);
      if (v14 == -1) {
        goto LABEL_22;
      }
    }
    else
    {
      int v15 = v132;
      int v16 = HIDWORD(v132);
      int v8 = v123;
      uint64_t v9 = v124;
      uint64_t v13 = v125;
    }
    if (!v8 || (uint64_t v19 = v3[404], *(unsigned char *)(v19 + v15)) && *(unsigned char *)(v19 + v16) && *(unsigned char *)(v19 + v14))
    {
      if ((int)v6 >= 1)
      {
        int v20 = (int *)(v7 + 4 * v15 * (int)v6);
        int v21 = (int *)(v7 + 4 * v16 * (int)v6);
        int v22 = (int *)(v7 + 4 * v14 * (int)v6);
        uint64_t v23 = v128;
        int v24 = v13;
        do
        {
          int v26 = *v20++;
          int v25 = v26;
          int v27 = *v21++;
          int v28 = v27 + v25;
          int v29 = *v22++;
          *v24++ = v28 - v29;
          --v23;
        }
        while (v23);
      }
      int v30 = 0;
      unsigned int v31 = 2;
      goto LABEL_33;
    }
LABEL_22:
    if (v16 == -1 || v8 && ((uint64_t v32 = v3[404], !*(unsigned char *)(v32 + v15)) || !*(unsigned char *)(v32 + v16)))
    {
      unsigned int v31 = 0;
      int v30 = 1;
    }
    else
    {
      if ((int)v6 >= 1)
      {
        int v33 = (int *)(v7 + 4 * v15 * (int)v6);
        unsigned int v34 = (int *)(v7 + 4 * v16 * (int)v6);
        uint64_t v35 = v128;
        uint64_t v36 = v13;
        do
        {
          int v38 = *v33++;
          int v37 = v38;
          int v39 = *v34++;
          BOOL v40 = __OFADD__(v39, v37);
          int v41 = v39 + v37;
          if (v41 < 0 != v40) {
            ++v41;
          }
          *v36++ = v41 >> 1;
          --v35;
        }
        while (v35);
      }
      int v30 = 0;
      unsigned int v31 = 1;
    }
LABEL_33:
    if (v131 == -1
      || v8
      && ((uint64_t v42 = v3[404], !*(unsigned char *)(v42 + v15))
       || !*(unsigned char *)(v42 + v16)
       || !*(unsigned char *)(v42 + v14)
       || !*(unsigned char *)(v42 + (int)v130)
       || !*(unsigned char *)(v42 + SHIDWORD(v130))
       || !*(unsigned char *)(v42 + v131)))
    {
LABEL_74:
      if (!v30)
      {
LABEL_94:
        if ((int)v6 >= 1)
        {
          int v94 = (char *)__p[0] + 4;
          uint64_t v95 = v128;
          int v96 = (int *)v11;
          do
          {
            int v98 = *v96++;
            int v97 = v98;
            int v99 = *((_DWORD *)v94 - 1);
            if (*(_DWORD *)&v94[4 * (((_BYTE)v99 - 1) & 3)] != v98)
            {
              *((_DWORD *)v94 - 1) = v99 + 1;
              *(_DWORD *)&v94[4 * (v99 & 3)] = v97;
            }
            v94 += 20;
            --v95;
          }
          while (v95);
        }
        sub_2170B68A4((uint64_t)v3, v9, v11, (uint64_t)v13, v6, v122, v129, &v147[15 * v31]);
        goto LABEL_100;
      }
LABEL_75:
      long long v126 = v13;
      if (sub_2170BD6D4((uint64_t)v3, v10, (uint64_t)v142, a2)) {
        BOOL v82 = 1;
      }
      else {
        BOOL v82 = (int)v6 < 1;
      }
      if (v82)
      {
        unsigned int v31 = 0;
      }
      else
      {
        uint64_t v83 = 0;
        do
        {
          unsigned int v84 = 0;
          uint64_t v85 = __p[0];
          uint64_t v86 = (char *)__p[0] + 20 * v83;
          int v87 = 0x7FFFFFFF;
          char v88 = -1;
          unsigned int v89 = -1;
          do
          {
            int v90 = v85[5 * v83 + 1 + ((v88 + *v86) & 3)];
            int v91 = *(_DWORD *)(v11 + 4 * v83) - v90;
            if (*(unsigned char *)(a2 + 24))
            {
              signed int v92 = sub_2170C1338(v91, v83, v84, __b, *v129, v147);
            }
            else
            {
              if (v91 >= 0) {
                int v93 = *(_DWORD *)(v11 + 4 * v83) - v90;
              }
              else {
                int v93 = v90 - *(_DWORD *)(v11 + 4 * v83);
              }
              signed int v92 = -__clz(v93 + 1);
            }
            if (v92 < v87)
            {
              *((_DWORD *)v142[0] + v83) = v90;
              int v87 = v92;
              unsigned int v89 = v84;
            }
            ++v84;
            --v88;
          }
          while (v84 != 4);
          sub_2170A5080(v127, v89 & 1, __b);
          sub_2170A5080(v127, (v89 >> 1) & 1, &__b[(v89 & 1) + 1]);
          ++v83;
        }
        while (v83 != v128);
        unsigned int v31 = 0;
        uint64_t v5 = v119;
        uint64_t v3 = v120;
        LODWORD(v6) = v117;
        uint64_t v7 = v121;
        int v8 = v123;
        uint64_t v9 = v124;
      }
      uint64_t v13 = v126;
      goto LABEL_94;
    }
    int v116 = v30;
    unsigned int v118 = v31;
    if ((int)v6 < 1)
    {
      int v65 = *(unsigned __int8 *)(a2 + 24);
      if (!*(unsigned char *)(a2 + 24))
      {
        int v67 = 0;
        int v69 = 0;
        int v71 = 0;
        goto LABEL_60;
      }
    }
    else
    {
      unint64_t v43 = 0;
      uint64_t v44 = v7 + 4 * v15 * (int)v6;
      uint64_t v45 = v7 + 4 * v16 * (int)v6;
      uint64_t v46 = v7 + 4 * v14 * (int)v6;
      uint64_t v47 = v7 + 4 * (int)v130 * (int)v6;
      uint64_t v48 = v7 + 4 * HIDWORD(v130) * (int)v6;
      uint64_t v49 = v7 + 4 * v131 * (int)v6;
      int v50 = (char *)v141[0];
      int v51 = (char *)v140[0];
      uint64_t v52 = (char *)v139[0];
      int v53 = (char *)v138[0];
      int v54 = (char *)v137[0];
      int v55 = (char *)v136[0];
      BOOL v56 = (char *)v135[0];
      do
      {
        *(_DWORD *)&v50[v43] = *(_DWORD *)(v48 + v43) + *(_DWORD *)(v47 + v43) - *(_DWORD *)(v49 + v43);
        int v57 = *(_DWORD *)(v44 + v43);
        int v58 = *(_DWORD *)(v47 + v43);
        int v59 = v58 + v57;
        if (v58 + v57 < 0 != __OFADD__(v58, v57)) {
          ++v59;
        }
        *(_DWORD *)&v51[v43] = *(_DWORD *)(v48 + v43) + *(_DWORD *)(v45 + v43) - (v59 >> 1);
        int v60 = *(_DWORD *)(v44 + v43);
        int v61 = *(_DWORD *)(v47 + v43);
        BOOL v40 = __OFADD__(v61, v60);
        int v62 = v61 + v60;
        if (v62 < 0 != v40) {
          ++v62;
        }
        unint64_t v63 = 1431655766
            * ((v62 >> 1)
             - (*(_DWORD *)(v46 + v43)
              + *(_DWORD *)(v49 + v43))
             + 2 * (*(_DWORD *)(v48 + v43) + *(_DWORD *)(v45 + v43)));
        *(_DWORD *)&v52[v43] = HIDWORD(v63) + (v63 >> 63);
        *(_DWORD *)&v53[v43] = *(_DWORD *)(v11 + v43) - v13[v43 / 4];
        *(_DWORD *)&v54[v43] = *(_DWORD *)(v11 + v43) - *(_DWORD *)&v50[v43];
        *(_DWORD *)&v55[v43] = *(_DWORD *)(v11 + v43) - *(_DWORD *)&v51[v43];
        *(_DWORD *)&v56[v43] = *(_DWORD *)(v11 + v43) - *(_DWORD *)&v52[v43];
        v43 += 4;
      }
      while (v109 != v43);
      unsigned int v31 = v118;
      if (!*(unsigned char *)(a2 + 24))
      {
        int v64 = *(_DWORD *)v138[0];
        if (*(int *)v138[0] < 0) {
          int v64 = -v64;
        }
        int v65 = -(v6 * __clz(v64 + 1));
        int v66 = *(_DWORD *)v137[0];
        if (*(int *)v137[0] < 0) {
          int v66 = -v66;
        }
        int v67 = -(v6 * __clz(v66 + 1));
        int v68 = *(_DWORD *)v136[0];
        if (*(int *)v136[0] < 0) {
          int v68 = -v68;
        }
        int v69 = -(v6 * __clz(v68 + 1));
        int v70 = *(_DWORD *)v135[0];
        if (*(int *)v135[0] < 0) {
          int v70 = -v70;
        }
        int v71 = -(v6 * __clz(v70 + 1));
LABEL_60:
        if (v65 <= v67 && v65 <= v69 && v65 <= v71)
        {
          int v79 = 0;
          int v80 = 0;
LABEL_72:
          uint64_t v81 = 1;
          goto LABEL_73;
        }
        if (v67 > v69 || v67 > v71)
        {
          if (v69 <= v71)
          {
            int v80 = 0;
            int v79 = 1;
            long long v125 = v140[0];
            goto LABEL_72;
          }
          int v79 = 1;
          long long v125 = v139[0];
          int v80 = 1;
        }
        else
        {
          int v79 = 0;
          int v80 = 1;
          long long v125 = v141[0];
        }
        uint64_t v81 = 2;
LABEL_73:
        sub_2170A5080(v127, v80, &v143);
        sub_2170A5080(v127, v79, &v143 + v81);
        int v8 = v123;
        uint64_t v9 = v124;
        uint64_t v13 = v125;
        unsigned int v31 = v118;
        int v30 = v116;
        goto LABEL_74;
      }
    }
    int v114 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((v144 + 2048) >> 10) & 0x7CLL));
    int v115 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((v143 + 2048) >> 10) & 0x7CLL));
    int v72 = (unsigned __int16 **)&v147[15 * v31];
    int v113 = sub_2170C4034((int *)v138[0], v6, *v129, v72);
    int v111 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((v145 + 2048) >> 10) & 0x7CLL));
    int v112 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((67584 - (unint64_t)v143) >> 10) & 0x3FFFFFFFFFFFFCLL));
    int v110 = sub_2170C4034((int *)v137[0], v6, *v129, v72);
    int v73 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((v143 + 2048) >> 10) & 0x7CLL));
    int v74 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((67584 - (unint64_t)v144) >> 10) & 0x3FFFFFFFFFFFFCLL));
    int v75 = sub_2170C4034((int *)v136[0], v6, *v129, v72);
    int v76 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((67584 - (unint64_t)v143) >> 10) & 0x3FFFFFFFFFFFFCLL));
    int v77 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((67584 - (unint64_t)v145) >> 10) & 0x3FFFFFFFFFFFFCLL));
    int v78 = sub_2170C4034((int *)v135[0], v6, *v129, v72);
    int v65 = v114 + v115 + v113;
    int v67 = v111 + v112 + v110;
    int v69 = v74 + v73 + v75;
    int v71 = v77 + v76 + v78;
    uint64_t v5 = v119;
    uint64_t v3 = v120;
    uint64_t v7 = v121;
    goto LABEL_60;
  }
LABEL_101:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v135[0])
  {
    v135[1] = v135[0];
    operator delete(v135[0]);
  }
  if (v136[0])
  {
    v136[1] = v136[0];
    operator delete(v136[0]);
  }
  if (v137[0])
  {
    v137[1] = v137[0];
    operator delete(v137[0]);
  }
  if (v138[0])
  {
    v138[1] = v138[0];
    operator delete(v138[0]);
  }
  if (v139[0])
  {
    v139[1] = v139[0];
    operator delete(v139[0]);
  }
  if (v140[0])
  {
    v140[1] = v140[0];
    operator delete(v140[0]);
  }
  if (v141[0])
  {
    v141[1] = v141[0];
    operator delete(v141[0]);
  }
  if (v142[0])
  {
    v142[1] = v142[0];
    operator delete(v142[0]);
  }
  uint64_t v100 = 45;
  do
  {
    int v101 = &v147[v100];
    __int16 v102 = v142[v100 + 2];
    if (v102)
    {
      *(v101 - 2) = v102;
      operator delete(v102);
    }
    signed int v103 = (void *)*(v101 - 6);
    if (v103)
    {
      v142[v100] = v103;
      operator delete(v103);
    }
    signed int v104 = &v147[v100];
    signed int v105 = v140[v100 + 2];
    if (v105)
    {
      *(v104 - 8) = v105;
      operator delete(v105);
    }
    signed int v106 = (void *)*(v104 - 12);
    if (v106)
    {
      v140[v100] = v106;
      operator delete(v106);
    }
    unint64_t v107 = (void *)*(v101 - 15);
    if (v107)
    {
      v139[v100] = v107;
      operator delete(v107);
    }
    v100 -= 15;
  }
  while (v100 * 8);
  return 0;
}

void sub_2170C26B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  if (__p) {
    operator delete(__p);
  }
  if (a36) {
    operator delete(a36);
  }
  if (a39) {
    operator delete(a39);
  }
  if (a42) {
    operator delete(a42);
  }
  if (a45) {
    operator delete(a45);
  }
  if (a48) {
    operator delete(a48);
  }
  if (a51) {
    operator delete(a51);
  }
  if (a54) {
    operator delete(a54);
  }
  uint64_t v60 = 360;
  while (1)
  {
    int v61 = &a59 + v60;
    int v62 = *(void **)(&a59 + v60 - 24);
    if (v62)
    {
      *((void *)v61 - 2) = v62;
      operator delete(v62);
    }
    unint64_t v63 = (void *)*((void *)v61 - 6);
    if (v63)
    {
      *(void *)(&a59 + v60 - 40) = v63;
      operator delete(v63);
    }
    int v64 = &a59 + v60;
    int v65 = *(void **)(&a59 + v60 - 72);
    if (v65)
    {
      *((void *)v64 - 8) = v65;
      operator delete(v65);
    }
    int v66 = (void *)*((void *)v64 - 12);
    if (v66)
    {
      *(void *)(&a59 + v60 - 88) = v66;
      operator delete(v66);
    }
    int v67 = (void *)*((void *)v61 - 15);
    if (v67)
    {
      *(void *)(&a59 + v60 - 112) = v67;
      operator delete(v67);
    }
    v60 -= 120;
    if (!v60) {
      _Unwind_Resume(exception_object);
    }
  }
}

uint64_t sub_2170C2818(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)a1;
  uint64_t v83 = *MEMORY[0x263EF8340];
  uint64_t v4 = (void *)(a1 + 3136);
  uint64_t v5 = *(unsigned int *)(a1 + 3548);
  unint64_t v6 = *(int *)(a1 + 3544);
  uint64_t v70 = *(void *)(a1 + 3208);
  memset_pattern16(__b, &unk_2174AFAB0, 6uLL);
  uint64_t v7 = 0;
  uint64_t v82 = 0;
  memset(v81, 0, sizeof(v81));
  do
  {
    sub_2170A8CEC((uint64_t)v81 + v7, v6);
    v7 += 120;
  }
  while (v7 != 360);
  LODWORD(__p[0]) = 0;
  sub_2170A4FFC(&v78, v6, __p);
  int v71 = *(_DWORD *)(a2 + 16);
  sub_2170B1D18(__p, v6);
  if ((int)v5 >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v72 = (uint64_t)(v3 + 445);
    uint64_t v73 = v6;
    int v74 = (unsigned char *)(a2 + 8);
    int v65 = v6;
    int v66 = v3;
    uint64_t v68 = v5;
    int v69 = v4;
    while (1)
    {
      uint64_t v9 = *(int *)(v3[413] + 4 * v8);
      if (!v71 || *(unsigned char *)(v3[404] + v9)) {
        break;
      }
LABEL_56:
      if (++v8 == v5) {
        goto LABEL_57;
      }
    }
    uint64_t v10 = v70 + 4 * (int)v9 * (int)v6;
    unsigned int v11 = *(_DWORD *)(v3[416] + 4 * v9);
    if ((v11 & 0x80000000) != 0) {
      goto LABEL_32;
    }
    uint64_t v12 = v8;
    int v76 = -1;
    uint64_t v75 = -1;
    sub_2170BCD08(v3, v11, v9, (unsigned int *)(v3[17] + 12 * v11), &v75);
    int v14 = v75;
    int v13 = HIDWORD(v75);
    int v15 = v76;
    if (v76 < 0)
    {
      sub_2170BCD08(v3, v11, v9, (unsigned int *)(v3[20] + 12 * v11), &v75);
      if (v76 < 0)
      {
        if (v15 == -1)
        {
LABEL_20:
          if (v13 != -1)
          {
            if (!v71 || (uint64_t v28 = v3[404], *(unsigned char *)(v28 + v14)) && *(unsigned char *)(v28 + v13))
            {
              if ((int)v6 >= 1)
              {
                int v29 = (int *)(v70 + 4 * v14 * (int)v6);
                int v30 = (int *)(v70 + 4 * v13 * (int)v6);
                unsigned int v31 = (int *)v78;
                uint64_t v32 = v73;
                do
                {
                  int v34 = *v29++;
                  int v33 = v34;
                  int v35 = *v30++;
                  BOOL v36 = __OFADD__(v35, v33);
                  int v37 = v35 + v33;
                  if (v37 < 0 != v36) {
                    ++v37;
                  }
                  *v31++ = v37 >> 1;
                  --v32;
                }
                while (v32);
              }
              unsigned int v27 = 1;
              uint64_t v8 = v12;
              goto LABEL_30;
            }
          }
          uint64_t v8 = v12;
          uint64_t v5 = v68;
          uint64_t v4 = v69;
LABEL_32:
          if (sub_2170BD6D4((uint64_t)v3, v9, (uint64_t)&v78, a2)) {
            BOOL v38 = 1;
          }
          else {
            BOOL v38 = (int)v6 < 1;
          }
          if (v38)
          {
            unsigned int v27 = 0;
          }
          else
          {
            uint64_t v67 = v8;
            uint64_t v39 = 0;
            do
            {
              unsigned int v40 = 0;
              int v41 = __p[0];
              uint64_t v42 = (char *)__p[0] + 20 * v39;
              int v43 = 0x7FFFFFFF;
              char v44 = -1;
              unsigned int v45 = -1;
              do
              {
                int v46 = v41[5 * v39 + 1 + ((v44 + *v42) & 3)];
                int v47 = *(_DWORD *)(v10 + 4 * v39) - v46;
                if (*(unsigned char *)(a2 + 24))
                {
                  signed int v48 = sub_2170C1338(v47, v39, v40, __b, *v74, v81);
                }
                else
                {
                  if (v47 >= 0) {
                    int v49 = *(_DWORD *)(v10 + 4 * v39) - v46;
                  }
                  else {
                    int v49 = v46 - *(_DWORD *)(v10 + 4 * v39);
                  }
                  signed int v48 = -__clz(v49 + 1);
                }
                if (v48 < v43)
                {
                  *((_DWORD *)v78 + v39) = v46;
                  int v43 = v48;
                  unsigned int v45 = v40;
                }
                ++v40;
                --v44;
              }
              while (v40 != 4);
              sub_2170A5080(v72, v45 & 1, __b);
              sub_2170A5080(v72, (v45 >> 1) & 1, &__b[(v45 & 1) + 1]);
              ++v39;
            }
            while (v39 != v73);
            unsigned int v27 = 0;
            LODWORD(v6) = v65;
            uint64_t v3 = v66;
            uint64_t v5 = v68;
            uint64_t v4 = v69;
            uint64_t v8 = v67;
          }
          goto LABEL_50;
        }
      }
      else
      {
        int v14 = v75;
        int v13 = HIDWORD(v75);
        int v15 = v76;
      }
    }
    if (!v71 || (uint64_t v16 = v3[404], *(unsigned char *)(v16 + v14)) && *(unsigned char *)(v16 + v13) && *(unsigned char *)(v16 + v15))
    {
      if ((int)v6 >= 1)
      {
        uint64_t v17 = (int *)(v70 + 4 * v14 * (int)v6);
        int v18 = (int *)(v70 + 4 * v13 * (int)v6);
        uint64_t v19 = (int *)(v70 + 4 * v15 * (int)v6);
        int v20 = v78;
        uint64_t v21 = v73;
        do
        {
          int v23 = *v17++;
          int v22 = v23;
          int v24 = *v18++;
          int v25 = v24 + v22;
          int v26 = *v19++;
          *v20++ = v25 - v26;
          --v21;
        }
        while (v21);
      }
      unsigned int v27 = 2;
      uint64_t v8 = v12;
LABEL_30:
      uint64_t v5 = v68;
      uint64_t v4 = v69;
LABEL_50:
      if ((int)v6 >= 1)
      {
        int v50 = (char *)__p[0] + 4;
        uint64_t v51 = v73;
        uint64_t v52 = (int *)v10;
        do
        {
          int v54 = *v52++;
          int v53 = v54;
          int v55 = *((_DWORD *)v50 - 1);
          if (*(_DWORD *)&v50[4 * (((_BYTE)v55 - 1) & 3)] != v54)
          {
            *((_DWORD *)v50 - 1) = v55 + 1;
            *(_DWORD *)&v50[4 * (v55 & 3)] = v53;
          }
          v50 += 20;
          --v51;
        }
        while (v51);
      }
      sub_2170B68A4((uint64_t)v3, v8, v10, (uint64_t)v78, v6, v4, v74, (void *)v81 + 15 * v27);
      goto LABEL_56;
    }
    goto LABEL_20;
  }
LABEL_57:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v78)
  {
    v79[0] = v78;
    operator delete(v78);
  }
  unint64_t v56 = 360;
  do
  {
    int v57 = (char *)v81 + v56;
    int v58 = (void *)v79[v56 / 8];
    if (v58)
    {
      *((void *)v57 - 2) = v58;
      operator delete(v58);
    }
    int v59 = (void *)*((void *)v57 - 6);
    if (v59)
    {
      __p[v56 / 8 + 2] = v59;
      operator delete(v59);
    }
    uint64_t v60 = (char *)v81 + v56;
    int v61 = *(void **)((char *)&v75 + v56);
    if (v61)
    {
      *((void *)v60 - 8) = v61;
      operator delete(v61);
    }
    int v62 = (void *)*((void *)v60 - 12);
    if (v62)
    {
      *(void *)((char *)&v81[-5] + v56 - 8) = v62;
      operator delete(v62);
    }
    unint64_t v63 = (void *)*((void *)v57 - 15);
    if (v63)
    {
      *(void *)((char *)&v81[-7] + v56) = v63;
      operator delete(v63);
    }
    v56 -= 120;
  }
  while (v56);
  return 0;
}

void sub_2170C2D5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v30 = 360;
  while (1)
  {
    unsigned int v31 = &a29 + v30;
    uint64_t v32 = *(void **)(&a29 + v30 - 24);
    if (v32)
    {
      *((void *)v31 - 2) = v32;
      operator delete(v32);
    }
    int v33 = (void *)*((void *)v31 - 6);
    if (v33)
    {
      *(void *)(&a29 + v30 - 40) = v33;
      operator delete(v33);
    }
    int v34 = &a29 + v30;
    int v35 = *(void **)(&a29 + v30 - 72);
    if (v35)
    {
      *((void *)v34 - 8) = v35;
      operator delete(v35);
    }
    BOOL v36 = (void *)*((void *)v34 - 12);
    if (v36)
    {
      *(void *)(&a29 + v30 - 88) = v36;
      operator delete(v36);
    }
    int v37 = (void *)*((void *)v31 - 15);
    if (v37)
    {
      *(void *)(&a29 + v30 - 112) = v37;
      operator delete(v37);
    }
    v30 -= 120;
    if (!v30) {
      _Unwind_Resume(exception_object);
    }
  }
}

uint64_t sub_2170C2E14(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)a1;
  uint64_t v70 = *MEMORY[0x263EF8340];
  uint64_t v4 = (void *)(a1 + 3136);
  uint64_t v5 = *(unsigned int *)(a1 + 3548);
  unint64_t v6 = *(int *)(a1 + 3544);
  uint64_t v59 = *(void *)(a1 + 3208);
  int v60 = *(_DWORD *)(a2 + 16);
  memset_pattern16(__b, &unk_2174AFAB0, 6uLL);
  uint64_t v7 = 0;
  memset(v69, 0, sizeof(v69));
  do
  {
    sub_2170A8CEC((uint64_t)v69 + v7, v6);
    v7 += 120;
  }
  while (v7 != 240);
  LODWORD(__p[0]) = 0;
  sub_2170A4FFC(v67, v6, __p);
  sub_2170B1D18(__p, v6);
  if ((int)v5 >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v61 = (uint64_t)(v3 + 445);
    uint64_t v62 = v6;
    unint64_t v63 = (unsigned char *)(a2 + 8);
    int v55 = v4;
    unint64_t v56 = v3;
    uint64_t v58 = v5;
    int v54 = v6;
    while (1)
    {
      uint64_t v9 = *(int *)(v3[413] + 4 * v8);
      if (!v60 || *(unsigned char *)(v3[404] + v9)) {
        break;
      }
LABEL_46:
      if (++v8 == v5) {
        goto LABEL_47;
      }
    }
    uint64_t v10 = v59 + 4 * (int)v9 * (int)v6;
    unsigned int v11 = *(_DWORD *)(v3[416] + 4 * v9);
    if ((v11 & 0x80000000) != 0) {
      goto LABEL_22;
    }
    uint64_t v12 = v4;
    uint64_t v13 = v8;
    int v65 = -1;
    uint64_t v64 = -1;
    sub_2170BCD08(v3, v11, v9, (unsigned int *)(v3[17] + 12 * v11), &v64);
    int v14 = v64;
    int v15 = HIDWORD(v64);
    if (v64 < 0)
    {
      sub_2170BCD08(v3, v11, v9, (unsigned int *)(v3[20] + 12 * v11), &v64);
      if (v64 < 0)
      {
        if (v15 == -1)
        {
LABEL_21:
          uint64_t v8 = v13;
          uint64_t v4 = v12;
          uint64_t v5 = v58;
LABEL_22:
          if (sub_2170BD6D4((uint64_t)v3, v9, (uint64_t)v67, a2)) {
            BOOL v27 = 1;
          }
          else {
            BOOL v27 = (int)v6 < 1;
          }
          if (v27)
          {
            unsigned int v26 = 0;
          }
          else
          {
            uint64_t v57 = v8;
            uint64_t v28 = 0;
            do
            {
              unsigned int v29 = 0;
              uint64_t v30 = __p[0];
              unsigned int v31 = (char *)__p[0] + 20 * v28;
              int v32 = 0x7FFFFFFF;
              char v33 = -1;
              unsigned int v34 = -1;
              do
              {
                int v35 = v30[5 * v28 + 1 + ((v33 + *v31) & 3)];
                int v36 = *(_DWORD *)(v10 + 4 * v28) - v35;
                if (*(unsigned char *)(a2 + 24))
                {
                  signed int v37 = sub_2170C1338(v36, v28, v29, __b, *v63, v69);
                }
                else
                {
                  if (v36 >= 0) {
                    int v38 = *(_DWORD *)(v10 + 4 * v28) - v35;
                  }
                  else {
                    int v38 = v35 - *(_DWORD *)(v10 + 4 * v28);
                  }
                  signed int v37 = -__clz(v38 + 1);
                }
                if (v37 < v32)
                {
                  *((_DWORD *)v67[0] + v28) = v35;
                  int v32 = v37;
                  unsigned int v34 = v29;
                }
                ++v29;
                --v33;
              }
              while (v29 != 4);
              sub_2170A5080(v61, v34 & 1, __b);
              sub_2170A5080(v61, (v34 >> 1) & 1, &__b[(v34 & 1) + 1]);
              ++v28;
            }
            while (v28 != v62);
            unsigned int v26 = 0;
            uint64_t v4 = v55;
            uint64_t v3 = v56;
            uint64_t v8 = v57;
            uint64_t v5 = v58;
            LODWORD(v6) = v54;
          }
          goto LABEL_40;
        }
      }
      else
      {
        int v14 = v64;
        int v15 = HIDWORD(v64);
      }
    }
    if (!v60 || (uint64_t v16 = v3[404], *(unsigned char *)(v16 + v14)) && *(unsigned char *)(v16 + v15))
    {
      if ((int)v6 >= 1)
      {
        uint64_t v17 = (int *)(v59 + 4 * v14 * (int)v6);
        int v18 = (int *)(v59 + 4 * v15 * (int)v6);
        uint64_t v19 = (int *)v67[0];
        uint64_t v20 = v62;
        do
        {
          int v22 = *v17++;
          int v21 = v22;
          int v23 = *v18++;
          BOOL v24 = __OFADD__(v23, v21);
          int v25 = v23 + v21;
          if (v25 < 0 != v24) {
            ++v25;
          }
          *v19++ = v25 >> 1;
          --v20;
        }
        while (v20);
      }
      unsigned int v26 = 1;
      uint64_t v8 = v13;
      uint64_t v4 = v12;
      uint64_t v5 = v58;
LABEL_40:
      if ((int)v6 >= 1)
      {
        uint64_t v39 = (char *)__p[0] + 4;
        uint64_t v40 = v62;
        int v41 = (int *)v10;
        do
        {
          int v43 = *v41++;
          int v42 = v43;
          int v44 = *((_DWORD *)v39 - 1);
          if (*(_DWORD *)&v39[4 * (((_BYTE)v44 - 1) & 3)] != v43)
          {
            *((_DWORD *)v39 - 1) = v44 + 1;
            *(_DWORD *)&v39[4 * (v44 & 3)] = v42;
          }
          v39 += 20;
          --v40;
        }
        while (v40);
      }
      sub_2170B68A4((uint64_t)v3, v8, v10, (uint64_t)v67[0], v6, v4, v63, (void *)v69 + 15 * v26);
      goto LABEL_46;
    }
    goto LABEL_21;
  }
LABEL_47:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v67[0])
  {
    v67[1] = v67[0];
    operator delete(v67[0]);
  }
  for (uint64_t i = 0; i != -240; i -= 120)
  {
    int v46 = (void *)((char *)v69 + i);
    int v47 = *(void **)((char *)&v69[13] + i + 8);
    if (v47)
    {
      v46[28] = v47;
      operator delete(v47);
    }
    signed int v48 = (void *)v46[24];
    if (v48)
    {
      *(void *)((char *)&v69[12] + i + 8) = v48;
      operator delete(v48);
    }
    int v49 = (char *)v69 + i;
    int v50 = *(void **)((char *)&v69[10] + i + 8);
    if (v50)
    {
      *((void *)v49 + 22) = v50;
      operator delete(v50);
    }
    uint64_t v51 = (void *)*((void *)v49 + 18);
    if (v51)
    {
      *(void *)((char *)&v69[9] + i + 8) = v51;
      operator delete(v51);
    }
    uint64_t v52 = (void *)v46[15];
    if (v52)
    {
      *(void *)((char *)&v69[8] + i) = v52;
      operator delete(v52);
    }
  }
  return 0;
}

void sub_2170C32D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (__p) {
    operator delete(__p);
  }
  uint64_t v30 = 0;
  while (1)
  {
    unsigned int v31 = &a29 + v30;
    int v32 = *(void **)(&a29 + v30 + 216);
    if (v32)
    {
      *((void *)v31 + 28) = v32;
      operator delete(v32);
    }
    char v33 = (void *)*((void *)v31 + 24);
    if (v33)
    {
      *(void *)(&a29 + v30 + 200) = v33;
      operator delete(v33);
    }
    unsigned int v34 = &a29 + v30;
    int v35 = *(void **)(&a29 + v30 + 168);
    if (v35)
    {
      *((void *)v34 + 22) = v35;
      operator delete(v35);
    }
    int v36 = (void *)*((void *)v34 + 18);
    if (v36)
    {
      *(void *)(&a29 + v30 + 152) = v36;
      operator delete(v36);
    }
    signed int v37 = (void *)*((void *)v31 + 15);
    if (v37)
    {
      *(void *)(&a29 + v30 + 128) = v37;
      operator delete(v37);
    }
    v30 -= 120;
    if (v30 == -240) {
      _Unwind_Resume(exception_object);
    }
  }
}

uint64_t sub_2170C338C(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 16) == 1)
  {
    uint64_t v4 = *(unsigned int *)(a1 + 3548);
    memset_pattern16(__b, &unk_2174AFAB0, 4uLL);
    if ((int)v4 >= 1)
    {
      uint64_t v5 = 0;
      uint64_t v6 = 4 * v4;
      do
      {
        uint64_t v7 = *(int *)(*(void *)(a1 + 3304) + v5);
        uint64_t v8 = *(unsigned int *)(*(void *)(a1 + 3328) + 4 * v7);
        int v20 = -1;
        uint64_t v19 = -1;
        int v18 = -1;
        uint64_t v17 = -1;
        if ((v8 & 0x80000000) != 0)
        {
          uint64_t v13 = 0;
          uint64_t v14 = *(void *)(a1 + 3096);
        }
        else
        {
          uint64_t v9 = (unsigned int *)(*(void *)(a1 + 160) + 12 * v8);
          sub_2170BCD08((void *)a1, v8, v7, (unsigned int *)(*(void *)(a1 + 136) + 12 * v8), &v19);
          sub_2170BCD08((void *)a1, v8, v7, v9, &v17);
          int v10 = v20;
          if ((v20 & 0x80000000) == 0 || v18 < 0)
          {
            int v12 = v20;
            int v10 = v18;
          }
          else
          {
            uint64_t v11 = v19;
            uint64_t v19 = v17;
            int v12 = v18;
            int v20 = v18;
            uint64_t v17 = v11;
          }
          if (v10 == -1)
          {
            uint64_t v14 = *(void *)(a1 + 3096);
            if (v12 == -1)
            {
              if (HIDWORD(v19) == -1)
              {
                if (v19 == -1) {
                  uint64_t v13 = 0;
                }
                else {
                  uint64_t v13 = *(unsigned __int8 *)(v14 + (int)v19);
                }
              }
              else
              {
                LODWORD(v13) = *(unsigned __int8 *)(v14 + (int)v19);
                if (*(unsigned char *)(v14 + (int)v19)) {
                  LODWORD(v13) = *(unsigned char *)(v14 + SHIDWORD(v19)) != 0;
                }
                uint64_t v13 = v13;
              }
              goto LABEL_17;
            }
            BOOL v15 = *(unsigned __int8 *)(v14 + SHIDWORD(v19))
                + *(unsigned __int8 *)(v14 + (int)v19)
                + *(unsigned __int8 *)(v14 + v12) > 1;
          }
          else
          {
            uint64_t v14 = *(void *)(a1 + 3096);
            BOOL v15 = *(unsigned __int8 *)(v14 + SHIDWORD(v19))
                + *(unsigned __int8 *)(v14 + (int)v19)
                + *(unsigned __int8 *)(v14 + v12)
                + *(unsigned __int8 *)(v14 + (int)v17)
                + *(unsigned __int8 *)(v14 + SHIDWORD(v17))
                + *(unsigned __int8 *)(v14 + v10) > 2;
          }
          uint64_t v13 = v15;
        }
LABEL_17:
        v5 += 4;
        sub_2170A5080(a1 + 3560, *(unsigned __int8 *)(v14 + v7) != 0, &__b[v13]);
      }
      while (v6 != v5);
    }
  }
  switch(*(_DWORD *)(a2 + 12))
  {
    case 0:
      sub_2170C2E14(a1, a2);
      goto LABEL_35;
    case 1:
      sub_2170C2818(a1, a2);
      goto LABEL_35;
    case 2:
      sub_2170C1BE8(a1, a2);
      goto LABEL_35;
    case 3:
      sub_2170C13B8(a1, a2);
      goto LABEL_35;
    case 4:
      sub_2170C0044(a1, a2);
      goto LABEL_35;
    case 5:
      sub_2170BF974(a1, a2);
      goto LABEL_35;
    case 6:
      sub_2170BD9AC(a1, a2);
LABEL_35:
      uint64_t result = 0;
      break;
    default:
      uint64_t result = 5;
      break;
  }
  return result;
}

void *sub_2170C3654(void *a1)
{
  uint64_t v2 = operator new(0x1330uLL);
  sub_2170C384C((uint64_t)v2);
  *a1 = v2;
  return a1;
}

void sub_2170C368C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_2170C36A4(uint64_t *a1)
{
  return a1;
}

double sub_2170C36D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int *a9, uint64_t a10)
{
  return sub_2170B30E0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t sub_2170C36DC(int **a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, unsigned int *a6, uint64_t a7)
{
  return sub_2170B31C4(*a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_2170C36E4(int **a1, uint64_t *a2, uint64_t a3, uint64_t a4, unint64_t a5, const void *a6, unint64_t a7, int *a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12)
{
  return sub_2170B2190(*a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, 0, 0, 0, a12);
}

uint64_t sub_2170C3720(unsigned int **a1, uint64_t a2, unsigned char *a3, unsigned int a4, unint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t a10)
{
  return sub_2170B28CC(*a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t sub_2170C3730(uint64_t a1)
{
  return *(void *)(*(void *)a1 + 64);
}

uint64_t sub_2170C373C(uint64_t a1)
{
  return *(void *)(*(void *)a1 + 40);
}

uint64_t sub_2170C3748(uint64_t a1)
{
  return *(void *)(*(void *)a1 + 256);
}

uint64_t sub_2170C3754(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_DWORD *)(a8 + 16)) {
    uint64_t v8 = a4;
  }
  else {
    uint64_t v8 = 0;
  }
  if (*(_DWORD *)(a8 + 20)) {
    uint64_t v9 = 4 * a7;
  }
  else {
    uint64_t v9 = 0;
  }
  return v8 + 4 * a4 * a5 + v9 + 1024;
}

uint64_t sub_2170C3780(int **a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int *a8, uint64_t a9)
{
  uint64_t v9 = *a1;
  *(_DWORD *)(a9 + 16) = a3 != 0;
  *(_DWORD *)(a9 + 20) = a7 != 0;
  if (a4 == 1 && *v9 <= 79) {
    char v10 = 2;
  }
  else {
    char v10 = 4;
  }
  *(unsigned char *)(a9 + 8) = v10;
  unsigned int v11 = *a8;
  if (*a8 - 3 < 4)
  {
    char v12 = 0;
    if (a4 == 1) {
      int v13 = 3;
    }
    else {
      int v13 = 1;
    }
  }
  else if (v11 >= 3)
  {
    if (v11 == 11) {
      return 0;
    }
    if (a4 == 1) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    char v12 = 1;
  }
  else
  {
    char v12 = 0;
    int v13 = 1;
  }
  *(_DWORD *)(a9 + 12) = v13;
  *(unsigned char *)(a9 + 24) = v12;
  return 0;
}

uint64_t sub_2170C3824(uint64_t *a1, int *a2, unsigned char *a3, int a4, unint64_t a5, uint64_t a6, unint64_t a7, int *a8, uint64_t a9, uint64_t a10, uint64_t *a11, uint64_t a12)
{
  return sub_2170BC59C(*a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t sub_2170C3840(uint64_t a1)
{
  return *(void *)(*(void *)a1 + 3280);
}

uint64_t sub_2170C384C(uint64_t a1)
{
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  bzero((void *)(a1 + 36), 0x220uLL);
  *(_DWORD *)(a1 + 580) = -1;
  bzero((void *)(a1 + 584), 0x700uLL);
  memset_pattern16((void *)(a1 + 2376), &unk_2174AFAB0, 0xAuLL);
  *(_WORD *)(a1 + 2386) = 0x8000;
  memset_pattern16((void *)(a1 + 2388), &unk_2174AFAB0, 0x60uLL);
  *(_WORD *)(a1 + 2484) = 0x8000;
  memset_pattern16((void *)(a1 + 2486), &unk_2174AFAB0, 6uLL);
  *(_WORD *)(a1 + 2492) = 0x8000;
  memset_pattern16((void *)(a1 + 2494), &unk_2174AFAB0, 0x50uLL);
  *(_DWORD *)(a1 + 2574) = -2147450880;
  memset_pattern16((void *)(a1 + 2578), &unk_2174AFAB0, 0x20uLL);
  *(_DWORD *)(a1 + 2610) = -2147450880;
  *(_WORD *)(a1 + 2614) = 0x8000;
  memset_pattern16((void *)(a1 + 2616), &unk_2174AFAB0, 0x80uLL);
  memset_pattern16((void *)(a1 + 2744), &unk_2174AFAB0, 6uLL);
  *(_WORD *)(a1 + 2750) = 0x8000;
  memset_pattern16((void *)(a1 + 2752), &unk_2174AFAB0, 6uLL);
  *(_DWORD *)(a1 + 3552) = 0;
  *(_OWORD *)(a1 + 3536) = 0u;
  *(_OWORD *)(a1 + 3520) = 0u;
  *(_OWORD *)(a1 + 3504) = 0u;
  *(_OWORD *)(a1 + 3488) = 0u;
  *(_OWORD *)(a1 + 3472) = 0u;
  *(_OWORD *)(a1 + 3456) = 0u;
  *(_OWORD *)(a1 + 3440) = 0u;
  *(_OWORD *)(a1 + 3424) = 0u;
  *(_OWORD *)(a1 + 3408) = 0u;
  *(_OWORD *)(a1 + 3392) = 0u;
  *(_OWORD *)(a1 + 3376) = 0u;
  *(_OWORD *)(a1 + 3360) = 0u;
  *(_OWORD *)(a1 + 3344) = 0u;
  *(_OWORD *)(a1 + 3328) = 0u;
  *(_OWORD *)(a1 + 3312) = 0u;
  *(_OWORD *)(a1 + 3296) = 0u;
  *(_OWORD *)(a1 + 3280) = 0u;
  *(_OWORD *)(a1 + 3264) = 0u;
  *(_OWORD *)(a1 + 3248) = 0u;
  *(_OWORD *)(a1 + 3232) = 0u;
  *(_OWORD *)(a1 + 3216) = 0u;
  *(_OWORD *)(a1 + 3200) = 0u;
  *(_OWORD *)(a1 + 3184) = 0u;
  *(_OWORD *)(a1 + 3168) = 0u;
  *(_OWORD *)(a1 + 3152) = 0u;
  *(_OWORD *)(a1 + 3136) = 0u;
  *(void *)(a1 + 3568) = 0;
  *(_OWORD *)(a1 + 2760) = 0u;
  *(_OWORD *)(a1 + 2776) = 0u;
  *(_OWORD *)(a1 + 2792) = 0u;
  *(_OWORD *)(a1 + 2808) = 0u;
  *(_OWORD *)(a1 + 2824) = 0u;
  *(_OWORD *)(a1 + 2840) = 0u;
  *(_OWORD *)(a1 + 2856) = 0u;
  *(_OWORD *)(a1 + 2872) = 0u;
  *(_OWORD *)(a1 + 2888) = 0u;
  *(_OWORD *)(a1 + 2904) = 0u;
  *(_OWORD *)(a1 + 2920) = 0u;
  *(_OWORD *)(a1 + 2936) = 0u;
  *(_OWORD *)(a1 + 2952) = 0u;
  *(_OWORD *)(a1 + 2968) = 0u;
  *(_OWORD *)(a1 + 2984) = 0u;
  *(_OWORD *)(a1 + 3000) = 0u;
  *(_OWORD *)(a1 + 3016) = 0u;
  *(_OWORD *)(a1 + 3032) = 0u;
  *(_OWORD *)(a1 + 3048) = 0u;
  *(_OWORD *)(a1 + 3064) = 0u;
  *(_OWORD *)(a1 + 3080) = 0u;
  *(_OWORD *)(a1 + 3096) = 0u;
  *(_OWORD *)(a1 + 3112) = 0u;
  *(_DWORD *)(a1 + 3128) = 0;
  sub_216778A5C(a1 + 4632);
  return a1;
}

void sub_2170C3A44(_Unwind_Exception *a1)
{
  sub_2170C3A74(v3);
  sub_2170A8E48((uint64_t)(v1 + 375));
  sub_2170C3B58(v2);
  sub_2170C3CB0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2170C3A74(uint64_t a1)
{
  sub_2170A5440(a1 + 336);
  sub_2170A5440(a1 + 264);
  uint64_t v2 = *(void **)(a1 + 240);
  if (v2)
  {
    *(void *)(a1 + 248) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 216);
  if (v3)
  {
    *(void *)(a1 + 224) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 192);
  if (v4)
  {
    *(void *)(a1 + 200) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)(a1 + 168);
  if (v5)
  {
    *(void *)(a1 + 176) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)(a1 + 144);
  if (v6)
  {
    *(void *)(a1 + 152) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *(void **)(a1 + 120);
  if (v7)
  {
    *(void *)(a1 + 128) = v7;
    operator delete(v7);
  }
  uint64_t v8 = *(void **)(a1 + 96);
  if (v8)
  {
    *(void *)(a1 + 104) = v8;
    operator delete(v8);
  }
  uint64_t v9 = *(void **)(a1 + 72);
  if (v9)
  {
    *(void *)(a1 + 80) = v9;
    operator delete(v9);
  }
  char v10 = *(void **)(a1 + 48);
  if (v10)
  {
    *(void *)(a1 + 56) = v10;
    operator delete(v10);
  }
  unsigned int v11 = *(void **)(a1 + 24);
  if (v11)
  {
    *(void *)(a1 + 32) = v11;
    operator delete(v11);
  }
  char v12 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v12;
    operator delete(v12);
  }
  return a1;
}

void *sub_2170C3B58(void *a1)
{
  for (uint64_t i = 338; i != 308; i -= 15)
  {
    uint64_t v3 = &a1[i];
    uint64_t v4 = (void *)a1[i - 1];
    if (v4)
    {
      a1[i] = v4;
      operator delete(v4);
    }
    uint64_t v5 = (void *)*(v3 - 4);
    if (v5)
    {
      a1[i - 3] = v5;
      operator delete(v5);
    }
    uint64_t v6 = &a1[i];
    uint64_t v7 = (void *)a1[i - 7];
    if (v7)
    {
      *(v6 - 6) = v7;
      operator delete(v7);
    }
    uint64_t v8 = (void *)*(v6 - 10);
    if (v8)
    {
      a1[i - 9] = v8;
      operator delete(v8);
    }
    uint64_t v9 = (void *)*(v3 - 13);
    if (v9)
    {
      a1[i - 12] = v9;
      operator delete(v9);
    }
  }
  uint64_t v10 = 192;
  do
  {
    unsigned int v11 = (void *)a1[v10 + 35];
    if (v11)
    {
      a1[v10 + 36] = v11;
      operator delete(v11);
    }
    v10 -= 3;
  }
  while (v10 * 8);
  char v12 = (void *)a1[34];
  if (v12)
  {
    a1[35] = v12;
    operator delete(v12);
  }
  int v13 = (void *)a1[31];
  if (v13)
  {
    a1[32] = v13;
    operator delete(v13);
  }
  uint64_t v14 = (void *)a1[28];
  if (v14)
  {
    a1[29] = v14;
    operator delete(v14);
  }
  BOOL v15 = (void *)a1[25];
  if (v15)
  {
    a1[26] = v15;
    operator delete(v15);
  }
  uint64_t v16 = (void *)a1[22];
  if (v16)
  {
    a1[23] = v16;
    operator delete(v16);
  }
  uint64_t v17 = (void *)a1[19];
  if (v17)
  {
    a1[20] = v17;
    operator delete(v17);
  }
  int v18 = (void *)a1[16];
  if (v18)
  {
    a1[17] = v18;
    operator delete(v18);
  }
  uint64_t v19 = (void *)a1[13];
  if (v19)
  {
    a1[14] = v19;
    operator delete(v19);
  }
  int v20 = (void *)a1[10];
  if (v20)
  {
    a1[11] = v20;
    operator delete(v20);
  }
  sub_2170A5440((uint64_t)(a1 + 1));
  return a1;
}

void *sub_2170C3CB0(void *a1)
{
  uint64_t v2 = (void *)a1[32];
  if (v2)
  {
    a1[33] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[29];
  if (v3)
  {
    a1[30] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[26];
  if (v4)
  {
    a1[27] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[23];
  if (v5)
  {
    a1[24] = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)a1[20];
  if (v6)
  {
    a1[21] = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)a1[17];
  if (v7)
  {
    a1[18] = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)a1[14];
  if (v8)
  {
    a1[15] = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)a1[11];
  if (v9)
  {
    a1[12] = v9;
    operator delete(v9);
  }
  uint64_t v10 = (void *)a1[8];
  if (v10)
  {
    a1[9] = v10;
    operator delete(v10);
  }
  unsigned int v11 = (void *)a1[5];
  if (v11)
  {
    a1[6] = v11;
    operator delete(v11);
  }
  return a1;
}

void *sub_2170C3D74(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2B8];
  uint64_t v3 = *MEMORY[0x263F8C2B8];
  *(void *)(a1 + 4632) = *MEMORY[0x263F8C2B8];
  uint64_t v4 = *(void *)(v2 + 72);
  *(void *)(a1 + 4632 + *(void *)(v3 - 24)) = *(void *)(v2 + 64);
  *(void *)(a1 + 4648) = v4;
  *(void *)(a1 + 4656) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 4743) < 0) {
    operator delete(*(void **)(a1 + 4720));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x21D447E60](a1 + 4760);
  sub_2170C3A74(a1 + 3136);
  uint64_t v5 = *(void **)(a1 + 3096);
  if (v5)
  {
    *(void *)(a1 + 3104) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)(a1 + 3072);
  if (v6)
  {
    *(void *)(a1 + 3080) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *(void **)(a1 + 3048);
  if (v7)
  {
    *(void *)(a1 + 3056) = v7;
    operator delete(v7);
  }
  uint64_t v8 = *(void **)(a1 + 3024);
  if (v8)
  {
    *(void *)(a1 + 3032) = v8;
    operator delete(v8);
  }
  uint64_t v9 = *(void **)(a1 + 3000);
  if (v9)
  {
    *(void *)(a1 + 3008) = v9;
    operator delete(v9);
  }
  sub_2170C3B58((void *)(a1 + 280));

  return sub_2170C3CB0((void *)a1);
}

void sub_2170C3F34(void *a1, uint64_t a2)
{
  uint64_t v4 = (int **)(a1 + 1);
  sub_2170A5390((uint64_t)(a1 + 1), *(_DWORD *)a2);
  uint64_t v5 = *(int **)(a2 + 208);
  uint64_t v6 = *(int **)(a2 + 216);
  if (v5 != v6)
  {
    uint64_t v7 = *v4;
    do
    {
      uint64_t v8 = *v5++;
      ++v7[v8 + 1];
    }
    while (v5 != v6);
  }
  sub_2170A5400(v4);
  uint64_t v9 = *(unsigned int *)(a2 + 4);
  if ((int)v9 >= 1)
  {
    uint64_t v10 = 0;
    uint64_t v11 = a1[7];
    uint64_t v12 = *(void *)(a2 + 232);
    uint64_t v13 = *(void *)(a2 + 208);
    do
    {
      uint64_t v14 = *(int *)(v12 + 4 * v10);
      uint64_t v15 = v10 + 1;
      uint64_t v16 = *(int *)(v12 + 4 * (v10 + 1));
      if ((int)v14 < (int)v16)
      {
        uint64_t v17 = a1[1];
        uint64_t v18 = a1[4];
        do
        {
          uint64_t v19 = *(int *)(v13 + 4 * v14);
          uint64_t v20 = *(int *)(v17 + 4 * v19);
          uint64_t v21 = *(int *)(v18 + 4 * v19);
          uint64_t v22 = v21 + v20;
          if ((int)v21 <= 0)
          {
LABEL_12:
            *(_DWORD *)(v18 + 4 * v19) = v21 + 1;
            *(_DWORD *)(v11 + 4 * v22) = v10;
          }
          else
          {
            uint64_t v22 = (int)v22;
            while (v10 != *(_DWORD *)(v11 + 4 * v20))
            {
              if (++v20 >= (int)v22) {
                goto LABEL_12;
              }
            }
          }
          ++v14;
        }
        while (v14 != v16);
      }
      ++v10;
    }
    while (v15 != v9);
  }
}

uint64_t sub_2170C4034(int *a1, int a2, int a3, unsigned __int16 **a4)
{
  if (a3)
  {
    if (a3 != 4)
    {
      if (a3 == 2 && a2 >= 1)
      {
        LODWORD(v4) = 0;
        uint64_t v5 = a4[3];
        uint64_t v6 = a4[12];
        uint64_t v7 = a2;
        while (1)
        {
          int v9 = *a1++;
          int v8 = v9;
          if (v9 < 1)
          {
            if ((v8 & 0x80000000) == 0) {
              goto LABEL_10;
            }
            unint64_t v10 = *v5 + 2048;
          }
          else
          {
            unint64_t v10 = 67584 - *v5;
          }
          LODWORD(v4) = *(_DWORD *)((char *)&unk_2174AFBD0 + ((v10 >> 10) & 0x3FFFFFFFFFFFFCLL)) + v4;
LABEL_10:
          int v12 = *(_DWORD *)v6;
          v6 += 2;
          int v11 = v12;
          if (v8 < 0) {
            int v8 = -v8;
          }
          uint64_t v4 = v4 + 66560 + (v11 << 10) - (__clz((v8 >> v11) + 1) << 11);
          ++v5;
          if (!--v7) {
            return v4;
          }
        }
      }
      return 0;
    }
    if (a2 >= 1)
    {
      uint64_t v40 = 0;
      LODWORD(v4) = 0;
      int v41 = *a4;
      int v42 = a4[3];
      int v43 = a4[6];
      int v44 = a4[12];
      do
      {
        int v46 = *a1++;
        int v45 = v46;
        unsigned int v48 = *v41++;
        uint64_t v47 = v48;
        if (v45)
        {
          int v49 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((unint64_t)(67584 - v47) >> 10) & 0x3FFFFFFFFFFFFCLL))
              + v4;
          if (v45 >= 0) {
            unsigned int v50 = v45;
          }
          else {
            unsigned int v50 = -v45;
          }
          if (v45 >= 0) {
            int v51 = 0x10000 - *v42;
          }
          else {
            int v51 = *v42;
          }
          int v52 = v49 + *(_DWORD *)((char *)&unk_2174AFBD0 + (((v51 + 2048) >> 10) & 0xFCLL));
          int v53 = &v43[(int)v40];
          if (v50 > 0x3F)
          {
            int v66 = *(_DWORD *)v44;
            uint64_t v4 = v52
               + 66560
               + *(_DWORD *)((char *)&unk_2174AFBD0 + (((67584 - (unint64_t)*v53) >> 10) & 0x3FFFFFFFFFFFFCLL))
               + *(_DWORD *)((char *)&unk_2174AFBD0 + (((67584 - (unint64_t)v53[2]) >> 10) & 0x3FFFFFFFFFFFFCLL))
               + *(_DWORD *)((char *)&unk_2174AFBD0 + (((67584 - (unint64_t)v53[6]) >> 10) & 0x3FFFFFFFFFFFFCLL))
               + *(_DWORD *)((char *)&unk_2174AFBD0 + (((67584 - (unint64_t)v53[14]) >> 10) & 0x3FFFFFFFFFFFFCLL))
               + *(_DWORD *)((char *)&unk_2174AFBD0 + (((67584 - (unint64_t)v53[30]) >> 10) & 0x3FFFFFFFFFFFFCLL))
               + *(_DWORD *)((char *)&unk_2174AFBD0 + (((67584 - (unint64_t)v53[62]) >> 10) & 0x3FFFFFFFFFFFFCLL))
               + (v66 << 10)
               - (__clz(((v50 - 64) >> v66) + 1) << 11);
          }
          else
          {
            unsigned int v54 = v50 - 1;
            int v55 = *v53;
            if ((v54 & 0x20) != 0) {
              int v55 = 0x10000 - v55;
            }
            int v56 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((v55 + 2048) >> 10) & 0xFCLL));
            int v57 = v53[(v54 >> 5) + 1];
            if ((v54 & 0x10) != 0) {
              int v57 = 0x10000 - v57;
            }
            int v58 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((v57 + 2048) >> 10) & 0xFCLL));
            int v59 = v53[(v54 >> 4) + 3];
            if ((v54 & 8) != 0) {
              int v59 = 0x10000 - v59;
            }
            int v60 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((v59 + 2048) >> 10) & 0xFCLL));
            int v61 = v53[(v54 >> 3) + 7];
            if ((v54 & 4) != 0) {
              int v61 = 0x10000 - v61;
            }
            int v62 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((v61 + 2048) >> 10) & 0xFCLL));
            int v63 = v53[(v54 >> 2) + 15];
            if ((v54 & 2) != 0) {
              int v63 = 0x10000 - v63;
            }
            int v64 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((v63 + 2048) >> 10) & 0xFCLL));
            int v65 = v53[(v54 >> 1) + 31];
            if (v54) {
              int v65 = 0x10000 - v65;
            }
            uint64_t v4 = (v56
                              + v52
                              + v58
                              + v60
                              + v62
                              + v64
                              + *(_DWORD *)((char *)&unk_2174AFBD0 + (((v65 + 2048) >> 10) & 0xFCLL)));
          }
        }
        else
        {
          uint64_t v4 = (*(_DWORD *)((char *)&unk_2174AFBD0 + (((v47 + 2048) >> 10) & 0x7CLL)) + v4);
        }
        v40 += 64;
        ++v42;
        v44 += 2;
      }
      while ((unint64_t)a2 << 6 != v40);
      return v4;
    }
    return 0;
  }
  if (a2 < 1) {
    return 0;
  }
  uint64_t v13 = 0;
  LODWORD(v4) = 0;
  uint64_t v14 = *a4;
  uint64_t v15 = a4[3];
  uint64_t v16 = a4[6];
  uint64_t v17 = a4[12];
  do
  {
    int v19 = *a1++;
    int v18 = v19;
    unsigned int v21 = *v14++;
    uint64_t v20 = v21;
    if (v18)
    {
      int v22 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((unint64_t)(67584 - v20) >> 10) & 0x3FFFFFFFFFFFFCLL)) + v4;
      if (v18 >= 0) {
        unsigned int v23 = v18;
      }
      else {
        unsigned int v23 = -v18;
      }
      if (v18 >= 0) {
        int v24 = 0x10000 - *v15;
      }
      else {
        int v24 = *v15;
      }
      int v25 = v22 + *(_DWORD *)((char *)&unk_2174AFBD0 + (((v24 + 2048) >> 10) & 0xFCLL));
      unsigned int v26 = &v16[(int)v13];
      if (v23 > 0x3F)
      {
        int v39 = *(_DWORD *)v17;
        uint64_t v4 = v25
           + 66560
           + *(_DWORD *)((char *)&unk_2174AFBD0 + (((67584 - (unint64_t)*v26) >> 10) & 0x3FFFFFFFFFFFFCLL))
           + *(_DWORD *)((char *)&unk_2174AFBD0 + (((67584 - (unint64_t)v26[2]) >> 10) & 0x3FFFFFFFFFFFFCLL))
           + *(_DWORD *)((char *)&unk_2174AFBD0 + (((67584 - (unint64_t)v26[6]) >> 10) & 0x3FFFFFFFFFFFFCLL))
           + *(_DWORD *)((char *)&unk_2174AFBD0 + (((67584 - (unint64_t)v26[14]) >> 10) & 0x3FFFFFFFFFFFFCLL))
           + *(_DWORD *)((char *)&unk_2174AFBD0 + (((67584 - (unint64_t)v26[30]) >> 10) & 0x3FFFFFFFFFFFFCLL))
           + *(_DWORD *)((char *)&unk_2174AFBD0 + (((67584 - (unint64_t)v26[62]) >> 10) & 0x3FFFFFFFFFFFFCLL))
           + (v39 << 10)
           - (__clz(((v23 - 64) >> v39) + 1) << 11);
      }
      else
      {
        char v27 = v23 - 1;
        int v28 = *v26;
        if (v27) {
          int v28 = 0x10000 - v28;
        }
        int v29 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((v28 + 2048) >> 10) & 0xFCLL));
        int v30 = v26[(v27 & 1) + 1];
        if ((v27 & 2) != 0) {
          int v30 = 0x10000 - v30;
        }
        int v31 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((v30 + 2048) >> 10) & 0xFCLL));
        int v32 = v26[(v27 & 3) + 3];
        if ((v27 & 4) != 0) {
          int v32 = 0x10000 - v32;
        }
        int v33 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((v32 + 2048) >> 10) & 0xFCLL));
        int v34 = v26[(v27 & 7) + 7];
        if ((v27 & 8) != 0) {
          int v34 = 0x10000 - v34;
        }
        int v35 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((v34 + 2048) >> 10) & 0xFCLL));
        int v36 = v26[(v27 & 0xF) + 15];
        if ((v27 & 0x10) != 0) {
          int v36 = 0x10000 - v36;
        }
        int v37 = *(_DWORD *)((char *)&unk_2174AFBD0 + (((v36 + 2048) >> 10) & 0xFCLL));
        int v38 = v26[(v27 & 0x1F) + 31];
        if ((v27 & 0x20) != 0) {
          int v38 = 0x10000 - v38;
        }
        uint64_t v4 = (v29
                          + v25
                          + v31
                          + v33
                          + v35
                          + v37
                          + *(_DWORD *)((char *)&unk_2174AFBD0 + (((v38 + 2048) >> 10) & 0xFCLL)));
      }
    }
    else
    {
      uint64_t v4 = (*(_DWORD *)((char *)&unk_2174AFBD0 + (((v20 + 2048) >> 10) & 0x7CLL)) + v4);
    }
    v13 += 64;
    ++v15;
    v17 += 2;
  }
  while ((unint64_t)a2 << 6 != v13);
  return v4;
}

void sub_2170C45EC(uint64_t a1, unint64_t a2)
{
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v4 = a1 + 16;
  uint64_t v5 = v6;
  uint64_t v7 = *(_DWORD **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - (uint64_t)v7) >> 2) >= a2)
  {
    if (a2)
    {
      size_t v14 = 12 * ((12 * a2 - 12) / 0xC) + 12;
      memset(*(void **)(v4 - 8), 255, v14);
      uint64_t v7 = (_DWORD *)((char *)v7 + v14);
    }
    *(void *)(a1 + 8) = v7;
  }
  else
  {
    int v8 = *(_DWORD **)a1;
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *(void *)a1) >> 2);
    unint64_t v10 = v9 + a2;
    if (v9 + a2 > 0x1555555555555555) {
      sub_21677CB10();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (uint64_t)v8) >> 2);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v12 = 0x1555555555555555;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      uint64_t v13 = (char *)sub_216B0D05C(v4, v12);
      int v8 = *(_DWORD **)a1;
      uint64_t v7 = *(_DWORD **)(a1 + 8);
    }
    else
    {
      uint64_t v13 = 0;
    }
    uint64_t v15 = &v13[12 * v9];
    uint64_t v16 = &v13[12 * v12];
    size_t v17 = 12 * ((12 * a2 - 12) / 0xC) + 12;
    memset(v15, 255, v17);
    int v18 = &v15[v17];
    if (v7 != v8)
    {
      do
      {
        uint64_t v19 = *(void *)(v7 - 3);
        v7 -= 3;
        int v20 = v7[2];
        *(void *)(v15 - 12) = v19;
        v15 -= 12;
        *((_DWORD *)v15 + 2) = v20;
      }
      while (v7 != v8);
      int v8 = *(_DWORD **)a1;
    }
    *(void *)a1 = v15;
    *(void *)(a1 + 8) = v18;
    *(void *)(a1 + 16) = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void sub_2170C478C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    uint64_t v4 = sub_2170C3D74(v3);
    operator delete(v4);
  }
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Action::~UsdInteractivePreliminary_Action(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Action *this)
{
  pxrInternal__aapl__pxrReserved__::UsdTyped::~UsdTyped(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Action::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    int v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C772460;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    unint64_t v9 = "aaplUsdInteractive/preliminary_Action.cpp";
    unint64_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 51;
    unint64_t v12 = (unint64_t)"static UsdInteractivePreliminary_Action pxrInternal__aapl__pxrReserved__::UsdInteractivePrel"
                            "iminary_Action::Get(const UsdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    unint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C772460;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_2170C4980(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Action::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Action *this)
{
  return 2;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Action::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Action *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95368, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95368))
  {
    __cxa_guard_release(&qword_267B95368);
  }
  return &qword_267B95360;
}

void sub_2170C4A10(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Action::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Action *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95378, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Action *)__cxa_guard_acquire(&qword_267B95378);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Action::_GetStaticTfType(v2);
      byte_267B95370 = sub_216D16508((char *)&qword_267B95360, v3, v4);
      __cxa_guard_release(&qword_267B95378);
    }
  }
  return byte_267B95370;
}

void sub_2170C4A90(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Action::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Action *this)
{
  return &qword_267B95360;
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Action::GetInfoIdAttr(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Action *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v3) {
    uint64_t v3 = sub_2170C51D8(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v3 + 144), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170C4B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Action::CreateInfoIdAttr(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Action *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v8) {
    uint64_t v8 = sub_2170C51D8(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  }
  unint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    unint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v8 + 144), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Action::GetMultiplePerformOperationAttr(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Action *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v3) {
    uint64_t v3 = sub_2170C51D8(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v3 + 184), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170C4CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Action::CreateMultiplePerformOperationAttr(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Action *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v8) {
    uint64_t v8 = sub_2170C51D8(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  }
  unint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    unint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v8 + 184), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Action::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Action *this)
{
  int v1 = (int)this;
  uint64_t v14 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95398, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95398))
  {
    uint64_t v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
    if (!v3) {
      uint64_t v3 = sub_2170C51D8(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
    }
    uint64_t v4 = *((void *)v3 + 18);
    uint64_t v12 = v4;
    if ((v4 & 7) != 0)
    {
      uint64_t v5 = (atomic_uint *)(v4 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v5, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v12 = (uint64_t)v5;
      }
    }
    int v6 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
    if (!v6) {
      int v6 = sub_2170C51D8(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
    }
    int v7 = (atomic_uint *)*((void *)v6 + 23);
    char v13 = v7;
    if ((v7 & 7) != 0)
    {
      uint64_t v8 = (atomic_uint *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
        char v13 = v8;
      }
    }
    sub_216D30CFC(&qword_267B95380, &v12, 2uLL);
    for (uint64_t i = 8; i != -8; i -= 8)
    {
      uint64_t v10 = *(uint64_t *)((char *)&v12 + i);
      if ((v10 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B95380, &dword_216758000);
    __cxa_guard_release(&qword_267B95398);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B953B8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B953B8))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdTyped::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdTyped *)1);
    sub_2170C4FF0((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B953A0, &dword_216758000);
    __cxa_guard_release(&qword_267B953B8);
  }
  if (v1) {
    return &qword_267B953A0;
  }
  else {
    return &qword_267B95380;
  }
}

void sub_2170C4F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  __cxa_guard_abort(&qword_267B95398);
  _Unwind_Resume(a1);
}

void *sub_2170C4FF0(uint64_t **a1)
{
  qword_267B953A8 = 0;
  unk_267B953B0 = 0;
  qword_267B953A0 = 0;
  sub_216973388((char **)&qword_267B953A0, ((unk_267B95388 - qword_267B95380) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B953A0, (void *)qword_267B953A8, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B953A0, (void *)qword_267B953A8, (uint64_t *)qword_267B95380, unk_267B95388, (unk_267B95388 - qword_267B95380) >> 3);
}

void sub_2170C5088(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_2170C50A8()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216F1B0B4((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_2170C5188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *sub_2170C51D8(atomic_ullong *a1)
{
  uint64_t result = sub_2170C5220();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      char v4 = (void *)sub_2170C5264((uint64_t)result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *sub_2170C5220()
{
  v0 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)operator new(0x158uLL);
  pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType::AaplUsdInteractiveTokensType(v0);
  return v0;
}

void sub_2170C5250(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2170C5264(uint64_t a1)
{
  int v42 = (void **)(a1 + 320);
  sub_216889A04(&v42);
  uint64_t v2 = *(void *)(a1 + 312);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *(void *)(a1 + 304);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *(void *)(a1 + 296);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *(void *)(a1 + 288);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v6 = *(void *)(a1 + 280);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v7 = *(void *)(a1 + 272);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v8 = *(void *)(a1 + 264);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v9 = *(void *)(a1 + 256);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v10 = *(void *)(a1 + 248);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v11 = *(void *)(a1 + 240);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v12 = *(void *)(a1 + 232);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v13 = *(void *)(a1 + 224);
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v14 = *(void *)(a1 + 216);
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v15 = *(void *)(a1 + 208);
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v16 = *(void *)(a1 + 200);
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v17 = *(void *)(a1 + 192);
  if ((v17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v18 = *(void *)(a1 + 184);
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v19 = *(void *)(a1 + 176);
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v20 = *(void *)(a1 + 168);
  if ((v20 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v21 = *(void *)(a1 + 160);
  if ((v21 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v22 = *(void *)(a1 + 152);
  if ((v22 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v23 = *(void *)(a1 + 144);
  if ((v23 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v24 = *(void *)(a1 + 136);
  if ((v24 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v25 = *(void *)(a1 + 128);
  if ((v25 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v26 = *(void *)(a1 + 120);
  if ((v26 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v27 = *(void *)(a1 + 112);
  if ((v27 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v28 = *(void *)(a1 + 104);
  if ((v28 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v29 = *(void *)(a1 + 96);
  if ((v29 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v30 = *(void *)(a1 + 88);
  if ((v30 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v31 = *(void *)(a1 + 80);
  if ((v31 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v32 = *(void *)(a1 + 72);
  if ((v32 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v33 = *(void *)(a1 + 64);
  if ((v33 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v34 = *(void *)(a1 + 56);
  if ((v34 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v35 = *(void *)(a1 + 48);
  if ((v35 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v36 = *(void *)(a1 + 40);
  if ((v36 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v37 = *(void *)(a1 + 32);
  if ((v37 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v38 = *(void *)(a1 + 24);
  if ((v38 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v38 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v39 = *(void *)(a1 + 16);
  if ((v39 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v39 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v40 = *(void *)(a1 + 8);
  if ((v40 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)a1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)a1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI::~UsdInteractivePreliminary_AnchoringAPI(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *((void *)a3 + 3) = 0;
    *(void *)a3 = &unk_26C7724B8;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "aaplUsdInteractive/preliminary_AnchoringAPI.cpp";
    uint64_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 57;
    unint64_t v12 = (unint64_t)"static UsdInteractivePreliminary_AnchoringAPI pxrInternal__aapl__pxrReserved__::UsdInteracti"
                            "vePreliminary_AnchoringAPI::Get(const UsdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *((void *)a3 + 3) = 0;
    *(void *)a3 = &unk_26C7724B8;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_2170C581C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI *this)
{
  return 5;
}

uint64_t sub_2170C5844(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI *a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B953C0, v4);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplySingleApplyAPI(a1, SchemaInfo, a2);
  }
  else
  {
    v12[0] = "usd/prim.h";
    v12[1] = "CanApplyAPI";
    v12[2] = 1024;
    v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(std::string *) const [SchemaType = pxrInternal_"
             "_aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI]";
    char v13 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
    if (*(char *)(TypeName + 23) >= 0) {
      uint64_t v11 = (const char *)TypeName;
    }
    else {
      uint64_t v11 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v11);
    return 0;
  }
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  if (sub_2170C5A2C(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, this);
    *((void *)a2 + 3) = 0;
    *(void *)a2 = &unk_26C7724B8;
  }
  else
  {
    int v5 = 1;
    uint64_t v6 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v7);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v8);
    uint64_t v9 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
    *((void *)a2 + 3) = 0;
    *(void *)a2 = &unk_26C7724B8;
    if ((v9 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
    sub_21697C414(&v7);
    if (v6) {
      sub_216D16E0C(v6);
    }
  }
}

void sub_2170C5A18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2170C5A2C(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI::_GetStaticTfType(a1);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B953C0, v2);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(a1, SchemaInfo);
  }
  else
  {
    v10[0] = "usd/prim.h";
    v10[1] = "ApplyAPI";
    v10[2] = 1147;
    v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI() const [SchemaType = pxrInternal__aapl__pxrReserv"
             "ed__::UsdInteractivePreliminary_AnchoringAPI]";
    char v11 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v7);
    if (*(char *)(TypeName + 23) >= 0) {
      uint64_t v9 = (const char *)TypeName;
    }
    else {
      uint64_t v9 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v9);
    return 0;
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B953C8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B953C8))
  {
    __cxa_guard_release(&qword_267B953C8);
  }
  return &qword_267B953C0;
}

void sub_2170C5B60(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B953D8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI *)__cxa_guard_acquire(&qword_267B953D8);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI::_GetStaticTfType(v2);
      byte_267B953D0 = sub_216D16508((char *)&qword_267B953C0, v3, v4);
      __cxa_guard_release(&qword_267B953D8);
    }
  }
  return byte_267B953D0;
}

void sub_2170C5BE0(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI *this)
{
  return &qword_267B953C0;
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI::GetPreliminaryAnchoringTypeAttr(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v3) {
    uint64_t v3 = sub_2170C51D8(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v3 + 224), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170C5CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI::CreatePreliminaryAnchoringTypeAttr(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v8) {
    uint64_t v8 = sub_2170C51D8(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v8 + 224), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI::GetPreliminaryPlaneAnchoringAlignmentAttr(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v3) {
    uint64_t v3 = sub_2170C51D8(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v3 + 240), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170C5E20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI::CreatePreliminaryPlaneAnchoringAlignmentAttr(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v8) {
    uint64_t v8 = sub_2170C51D8(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v8 + 240), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI::GetPreliminaryImageAnchoringReferenceImageRel(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v3) {
    uint64_t v3 = sub_2170C51D8(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v3 + 232), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170C5F88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI::CreatePreliminaryImageAnchoringReferenceImageRel(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v3) {
    uint64_t v3 = sub_2170C51D8(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v3 + 232), 0, a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170C6044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_AnchoringAPI *this)
{
  int v1 = (int)this;
  uint64_t v14 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B953F8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B953F8))
  {
    uint64_t v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
    if (!v3) {
      uint64_t v3 = sub_2170C51D8(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
    }
    uint64_t v4 = *((void *)v3 + 28);
    uint64_t v12 = v4;
    if ((v4 & 7) != 0)
    {
      int v5 = (atomic_uint *)(v4 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v5, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v12 = (uint64_t)v5;
      }
    }
    int v6 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
    if (!v6) {
      int v6 = sub_2170C51D8(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
    }
    int v7 = (atomic_uint *)*((void *)v6 + 30);
    char v13 = v7;
    if ((v7 & 7) != 0)
    {
      uint64_t v8 = (atomic_uint *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
        char v13 = v8;
      }
    }
    sub_216D30CFC(&qword_267B953E0, &v12, 2uLL);
    for (uint64_t i = 8; i != -8; i -= 8)
    {
      uint64_t v10 = *(uint64_t *)((char *)&v12 + i);
      if ((v10 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B953E0, &dword_216758000);
    __cxa_guard_release(&qword_267B953F8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95418, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95418))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    sub_2170C62B4((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B95400, &dword_216758000);
    __cxa_guard_release(&qword_267B95418);
  }
  if (v1) {
    return &qword_267B95400;
  }
  else {
    return &qword_267B953E0;
  }
}

void sub_2170C623C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  __cxa_guard_abort(&qword_267B953F8);
  _Unwind_Resume(a1);
}

void *sub_2170C62B4(uint64_t **a1)
{
  qword_267B95408 = 0;
  unk_267B95410 = 0;
  qword_267B95400 = 0;
  sub_216973388((char **)&qword_267B95400, ((unk_267B953E8 - qword_267B953E0) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B95400, (void *)qword_267B95408, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B95400, (void *)qword_267B95408, (uint64_t *)qword_267B953E0, unk_267B953E8, (unk_267B953E8 - qword_267B953E0) >> 3);
}

void sub_2170C634C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_2170C636C()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216D24064((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_2170C644C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_2170C649C()
{
  sub_2170C7104();
  sub_216779094(__p, "Preliminary_Behavior");
  sub_2170C7230((char *)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_2170C64EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Behavior::~UsdInteractivePreliminary_Behavior(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Behavior *this)
{
  pxrInternal__aapl__pxrReserved__::UsdTyped::~UsdTyped(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Behavior::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C772510;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "aaplUsdInteractive/preliminary_Behavior.cpp";
    uint64_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 57;
    unint64_t v12 = (unint64_t)"static UsdInteractivePreliminary_Behavior pxrInternal__aapl__pxrReserved__::UsdInteractivePr"
                            "eliminary_Behavior::Get(const UsdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C772510;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_2170C66B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Behavior::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95428, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95428))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B95420, "Preliminary_Behavior");
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B95420, &dword_216758000);
    __cxa_guard_release(&qword_267B95428);
  }
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v8, a2, &qword_267B95420, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C772510;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "aaplUsdInteractive/preliminary_Behavior.cpp";
    uint64_t v10 = (atomic_ullong *)"Define";
    uint64_t v11 = 70;
    unint64_t v12 = (unint64_t)"static UsdInteractivePreliminary_Behavior pxrInternal__aapl__pxrReserved__::UsdInteractivePr"
                            "eliminary_Behavior::Define(const UsdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C772510;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_2170C68C4(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Behavior::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Behavior *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Behavior::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Behavior *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95438, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95438))
  {
    __cxa_guard_release(&qword_267B95438);
  }
  return &qword_267B95430;
}

void sub_2170C696C(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Behavior::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Behavior *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95448, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Behavior *)__cxa_guard_acquire(&qword_267B95448);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Behavior::_GetStaticTfType(v2);
      byte_267B95440 = sub_216D16508((char *)&qword_267B95430, v3, v4);
      __cxa_guard_release(&qword_267B95448);
    }
  }
  return byte_267B95440;
}

void sub_2170C69EC(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Behavior::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Behavior *this)
{
  return &qword_267B95430;
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Behavior::GetExclusiveAttr(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Behavior *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v3) {
    uint64_t v3 = sub_2170C51D8(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v3 + 64), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170C6AC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Behavior::CreateExclusiveAttr(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Behavior *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v8) {
    uint64_t v8 = sub_2170C51D8(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v8 + 64), v9, 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Behavior::GetTriggersRel(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Behavior *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v3) {
    uint64_t v3 = sub_2170C51D8(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v3 + 280), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170C6C2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Behavior::CreateTriggersRel(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Behavior *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v3) {
    uint64_t v3 = sub_2170C51D8(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v3 + 280), 0, a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170C6CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Behavior::GetActionsRel(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Behavior *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v3) {
    uint64_t v3 = sub_2170C51D8(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, v3, a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170C6DA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Behavior::CreateActionsRel(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Behavior *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v3) {
    uint64_t v3 = sub_2170C51D8(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, v3, 0, a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170C6E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Behavior::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Behavior *this)
{
  int v1 = (int)this;
  v7[1] = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95468, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95468))
  {
    uint64_t v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
    if (!v3) {
      uint64_t v3 = sub_2170C51D8(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
    }
    uint64_t v4 = *((void *)v3 + 8);
    v7[0] = v4;
    if ((v4 & 7) != 0)
    {
      int v5 = (atomic_uint *)(v4 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v5, 2u, memory_order_relaxed) & 1) == 0) {
        v7[0] = (uint64_t)v5;
      }
    }
    sub_216D30CFC(&qword_267B95450, v7, 1uLL);
    if ((v7[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v7[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B95450, &dword_216758000);
    __cxa_guard_release(&qword_267B95468);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95488, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95488))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdTyped::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdTyped *)1);
    sub_2170C704C((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B95470, &dword_216758000);
    __cxa_guard_release(&qword_267B95488);
  }
  if (v1) {
    return &qword_267B95470;
  }
  else {
    return &qword_267B95450;
  }
}

void sub_2170C7004(_Unwind_Exception *a1)
{
}

void *sub_2170C704C(uint64_t **a1)
{
  qword_267B95478 = 0;
  unk_267B95480 = 0;
  qword_267B95470 = 0;
  sub_216973388((char **)&qword_267B95470, ((unk_267B95458 - qword_267B95450) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B95470, (void *)qword_267B95478, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B95470, (void *)qword_267B95478, (uint64_t *)qword_267B95450, unk_267B95458, (unk_267B95458 - qword_267B95450) >> 3);
}

void sub_2170C70E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_2170C7104()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216F1B0B4((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_2170C71E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_2170C7230(char *a1)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_2170C72C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2170C72E8()
{
  sub_2170C7E50();
  sub_216779094(__p, "Preliminary_ReferenceImage");
  sub_2170C7F7C((char *)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_2170C7338(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_ReferenceImage::~UsdInteractivePreliminary_ReferenceImage(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_ReferenceImage *this)
{
  pxrInternal__aapl__pxrReserved__::UsdTyped::~UsdTyped(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_ReferenceImage::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C772568;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "aaplUsdInteractive/preliminary_ReferenceImage.cpp";
    uint64_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 57;
    unint64_t v12 = (unint64_t)"static UsdInteractivePreliminary_ReferenceImage pxrInternal__aapl__pxrReserved__::UsdInterac"
                            "tivePreliminary_ReferenceImage::Get(const UsdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C772568;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_2170C7504(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_ReferenceImage::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95498, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95498))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B95490, "Preliminary_ReferenceImage");
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B95490, &dword_216758000);
    __cxa_guard_release(&qword_267B95498);
  }
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v8, a2, &qword_267B95490, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C772568;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "aaplUsdInteractive/preliminary_ReferenceImage.cpp";
    uint64_t v10 = (atomic_ullong *)"Define";
    uint64_t v11 = 70;
    unint64_t v12 = (unint64_t)"static UsdInteractivePreliminary_ReferenceImage pxrInternal__aapl__pxrReserved__::UsdInterac"
                            "tivePreliminary_ReferenceImage::Define(const UsdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C772568;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_2170C7710(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_ReferenceImage::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_ReferenceImage *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_ReferenceImage::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_ReferenceImage *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B954A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B954A8))
  {
    __cxa_guard_release(&qword_267B954A8);
  }
  return &qword_267B954A0;
}

void sub_2170C77B8(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_ReferenceImage::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_ReferenceImage *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B954B8, memory_order_acquire) & 1) == 0)
  {
    unint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_ReferenceImage *)__cxa_guard_acquire(&qword_267B954B8);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_ReferenceImage::_GetStaticTfType(v2);
      byte_267B954B0 = sub_216D16508((char *)&qword_267B954A0, v3, v4);
      __cxa_guard_release(&qword_267B954B8);
    }
  }
  return byte_267B954B0;
}

void sub_2170C7838(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_ReferenceImage::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_ReferenceImage *this)
{
  return &qword_267B954A0;
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_ReferenceImage::GetImageAttr(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_ReferenceImage *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v3) {
    unint64_t v3 = sub_2170C51D8(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v3 + 136), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170C7910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_ReferenceImage::CreateImageAttr(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_ReferenceImage *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v8) {
    uint64_t v8 = sub_2170C51D8(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v8 + 136), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 96), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_ReferenceImage::GetPhysicalWidthAttr(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_ReferenceImage *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v3) {
    unint64_t v3 = sub_2170C51D8(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v3 + 200), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170C7A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_ReferenceImage::CreatePhysicalWidthAttr(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_ReferenceImage *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v8) {
    uint64_t v8 = sub_2170C51D8(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v8 + 200), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 64), 0, 1, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_ReferenceImage::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_ReferenceImage *this)
{
  int v1 = (int)this;
  uint64_t v14 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B954D8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B954D8))
  {
    unint64_t v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
    if (!v3) {
      unint64_t v3 = sub_2170C51D8(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
    }
    uint64_t v4 = *((void *)v3 + 17);
    uint64_t v12 = v4;
    if ((v4 & 7) != 0)
    {
      char v5 = (atomic_uint *)(v4 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v5, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v12 = (uint64_t)v5;
      }
    }
    int v6 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
    if (!v6) {
      int v6 = sub_2170C51D8(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
    }
    int v7 = (atomic_uint *)*((void *)v6 + 25);
    char v13 = v7;
    if ((v7 & 7) != 0)
    {
      uint64_t v8 = (atomic_uint *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
        char v13 = v8;
      }
    }
    sub_216D30CFC(&qword_267B954C0, &v12, 2uLL);
    for (uint64_t i = 8; i != -8; i -= 8)
    {
      uint64_t v10 = *(uint64_t *)((char *)&v12 + i);
      if ((v10 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B954C0, &dword_216758000);
    __cxa_guard_release(&qword_267B954D8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B954F8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B954F8))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdTyped::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdTyped *)1);
    sub_2170C7D98((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B954E0, &dword_216758000);
    __cxa_guard_release(&qword_267B954F8);
  }
  if (v1) {
    return &qword_267B954E0;
  }
  else {
    return &qword_267B954C0;
  }
}

void sub_2170C7D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  __cxa_guard_abort(&qword_267B954D8);
  _Unwind_Resume(a1);
}

void *sub_2170C7D98(uint64_t **a1)
{
  qword_267B954E8 = 0;
  unk_267B954F0 = 0;
  qword_267B954E0 = 0;
  sub_216973388((char **)&qword_267B954E0, ((unk_267B954C8 - qword_267B954C0) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B954E0, (void *)qword_267B954E8, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B954E0, (void *)qword_267B954E8, (uint64_t *)qword_267B954C0, unk_267B954C8, (unk_267B954C8 - qword_267B954C0) >> 3);
}

void sub_2170C7E30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_2170C7E50()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216F1B0B4((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_2170C7F30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_2170C7F7C(char *a1)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_2170C8010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2170C8034()
{
  sub_2170C97B4();
  sub_216779094(__p, "Preliminary_Text");
  sub_2170C98E0((char *)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_2170C8084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text::~UsdInteractivePreliminary_Text(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text *this)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomGprim::~UsdGeomGprim(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C7725C0;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "aaplUsdInteractive/preliminary_Text.cpp";
    uint64_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 57;
    unint64_t v12 = (unint64_t)"static UsdInteractivePreliminary_Text pxrInternal__aapl__pxrReserved__::UsdInteractivePrelim"
                            "inary_Text::Get(const UsdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C7725C0;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_2170C8250(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95508, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95508))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B95500, "Preliminary_Text");
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B95500, &dword_216758000);
    __cxa_guard_release(&qword_267B95508);
  }
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v8, a2, &qword_267B95500, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C7725C0;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "aaplUsdInteractive/preliminary_Text.cpp";
    uint64_t v10 = (atomic_ullong *)"Define";
    uint64_t v11 = 70;
    unint64_t v12 = (unint64_t)"static UsdInteractivePreliminary_Text pxrInternal__aapl__pxrReserved__::UsdInteractivePrelim"
                            "inary_Text::Define(const UsdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C7725C0;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_2170C845C(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95518, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95518))
  {
    __cxa_guard_release(&qword_267B95518);
  }
  return &qword_267B95510;
}

void sub_2170C8504(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95528, memory_order_acquire) & 1) == 0)
  {
    unint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text *)__cxa_guard_acquire(&qword_267B95528);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text::_GetStaticTfType(v2);
      byte_267B95520 = sub_216D16508((char *)&qword_267B95510, v3, v4);
      __cxa_guard_release(&qword_267B95528);
    }
  }
  return byte_267B95520;
}

void sub_2170C8584(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text *this)
{
  return &qword_267B95510;
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text::GetContentAttr(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v3) {
    unint64_t v3 = sub_2170C51D8(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v3 + 48), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170C865C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text::CreateContentAttr(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v8) {
    uint64_t v8 = sub_2170C51D8(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v8 + 48), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 80), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text::GetFontAttr(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v3) {
    unint64_t v3 = sub_2170C51D8(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v3 + 88), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170C87C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text::CreateFontAttr(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v8) {
    uint64_t v8 = sub_2170C51D8(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v8 + 88), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 536), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text::GetPointSizeAttr(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v3) {
    unint64_t v3 = sub_2170C51D8(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v3 + 216), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170C892C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text::CreatePointSizeAttr(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v8) {
    uint64_t v8 = sub_2170C51D8(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v8 + 216), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text::GetWidthAttr(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v3) {
    unint64_t v3 = sub_2170C51D8(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v3 + 304), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170C8A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text::CreateWidthAttr(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v8) {
    uint64_t v8 = sub_2170C51D8(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v8 + 304), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text::GetHeightAttr(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v3) {
    unint64_t v3 = sub_2170C51D8(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v3 + 104), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170C8BFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text::CreateHeightAttr(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v8) {
    uint64_t v8 = sub_2170C51D8(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v8 + 104), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text::GetDepthAttr(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v3) {
    unint64_t v3 = sub_2170C51D8(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v3 + 56), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170C8D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text::CreateDepthAttr(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v8) {
    uint64_t v8 = sub_2170C51D8(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v8 + 56), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text::GetWrapModeAttr(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v3) {
    unint64_t v3 = sub_2170C51D8(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v3 + 312), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170C8ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text::CreateWrapModeAttr(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v8) {
    uint64_t v8 = sub_2170C51D8(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v8 + 312), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text::GetHorizontalAlignmentAttr(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v3) {
    unint64_t v3 = sub_2170C51D8(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v3 + 120), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170C9034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text::CreateHorizontalAlignmentAttr(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v8) {
    uint64_t v8 = sub_2170C51D8(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v8 + 120), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text::GetVerticalAlignmentAttr(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v3) {
    unint64_t v3 = sub_2170C51D8(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v3 + 296), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170C919C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text::CreateVerticalAlignmentAttr(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v8) {
    uint64_t v8 = sub_2170C51D8(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v8 + 296), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 0, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Text *this)
{
  int v1 = (int)this;
  uint64_t v33 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95548, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95548))
  {
    unint64_t v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
    if (!v3) {
      unint64_t v3 = sub_2170C51D8(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
    }
    uint64_t v4 = *((void *)v3 + 6);
    uint64_t v24 = v4;
    if ((v4 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v24 &= 0xFFFFFFFFFFFFFFF8;
    }
    char v5 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
    if (!v5) {
      char v5 = sub_2170C51D8(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
    }
    uint64_t v6 = *((void *)v5 + 11);
    uint64_t v25 = v6;
    if ((v6 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v25 &= 0xFFFFFFFFFFFFFFF8;
    }
    int v7 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
    if (!v7) {
      int v7 = sub_2170C51D8(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
    }
    uint64_t v8 = *((void *)v7 + 27);
    uint64_t v26 = v8;
    if ((v8 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v26 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
    if (!v9) {
      uint64_t v9 = sub_2170C51D8(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
    }
    uint64_t v10 = *((void *)v9 + 38);
    uint64_t v27 = v10;
    if ((v10 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v27 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v11 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
    if (!v11) {
      uint64_t v11 = sub_2170C51D8(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
    }
    uint64_t v12 = *((void *)v11 + 13);
    uint64_t v28 = v12;
    if ((v12 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v28 &= 0xFFFFFFFFFFFFFFF8;
    }
    char v13 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
    if (!v13) {
      char v13 = sub_2170C51D8(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
    }
    uint64_t v14 = *((void *)v13 + 7);
    uint64_t v29 = v14;
    if ((v14 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v29 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v15 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
    if (!v15) {
      uint64_t v15 = sub_2170C51D8(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
    }
    uint64_t v16 = *((void *)v15 + 39);
    uint64_t v30 = v16;
    if ((v16 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v30 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v17 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
    if (!v17) {
      uint64_t v17 = sub_2170C51D8(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
    }
    uint64_t v18 = *((void *)v17 + 15);
    uint64_t v31 = v18;
    if ((v18 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v31 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v19 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
    if (!v19) {
      uint64_t v19 = sub_2170C51D8(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
    }
    uint64_t v20 = *((void *)v19 + 37);
    uint64_t v32 = v20;
    if ((v20 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v32 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_216D30CFC(&qword_267B95530, &v24, 9uLL);
    for (uint64_t i = 64; i != -8; i -= 8)
    {
      uint64_t v22 = *(uint64_t *)((char *)&v24 + i);
      if ((v22 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B95530, &dword_216758000);
    __cxa_guard_release(&qword_267B95548);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95568, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95568))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdGeomGprim::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdGeomGprim *)1);
    sub_2170C96FC((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B95550, &dword_216758000);
    __cxa_guard_release(&qword_267B95568);
  }
  if (v1) {
    return &qword_267B95550;
  }
  else {
    return &qword_267B95530;
  }
}

void sub_2170C9678(_Unwind_Exception *a1)
{
}

void *sub_2170C96FC(uint64_t **a1)
{
  qword_267B95558 = 0;
  unk_267B95560 = 0;
  qword_267B95550 = 0;
  sub_216973388((char **)&qword_267B95550, ((unk_267B95538 - qword_267B95530) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B95550, (void *)qword_267B95558, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B95550, (void *)qword_267B95558, (uint64_t *)qword_267B95530, unk_267B95538, (unk_267B95538 - qword_267B95530) >> 3);
}

void sub_2170C9794(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_2170C97B4()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216F0D538((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_2170C9894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_2170C98E0(char *a1)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_2170C9974(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Trigger::~UsdInteractivePreliminary_Trigger(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Trigger *this)
{
  pxrInternal__aapl__pxrReserved__::UsdTyped::~UsdTyped(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Trigger::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C772618;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "aaplUsdInteractive/preliminary_Trigger.cpp";
    uint64_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 51;
    unint64_t v12 = (unint64_t)"static UsdInteractivePreliminary_Trigger pxrInternal__aapl__pxrReserved__::UsdInteractivePre"
                            "liminary_Trigger::Get(const UsdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C772618;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_2170C9B4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Trigger::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Trigger *this)
{
  return 2;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Trigger::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Trigger *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95578, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95578))
  {
    __cxa_guard_release(&qword_267B95578);
  }
  return &qword_267B95570;
}

void sub_2170C9BDC(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Trigger::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Trigger *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95588, memory_order_acquire) & 1) == 0)
  {
    unint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Trigger *)__cxa_guard_acquire(&qword_267B95588);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Trigger::_GetStaticTfType(v2);
      byte_267B95580 = sub_216D16508((char *)&qword_267B95570, v3, v4);
      __cxa_guard_release(&qword_267B95588);
    }
  }
  return byte_267B95580;
}

void sub_2170C9C5C(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Trigger::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Trigger *this)
{
  return &qword_267B95570;
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Trigger::GetInfoIdAttr(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Trigger *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v3) {
    unint64_t v3 = sub_2170C51D8(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v3 + 144), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170C9D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Trigger::CreateInfoIdAttr(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Trigger *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  if (!v8) {
    uint64_t v8 = sub_2170C51D8(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)((char *)v8 + 144), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Trigger::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdInteractivePreliminary_Trigger *this)
{
  int v1 = (int)this;
  v7[1] = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B955A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B955A8))
  {
    unint64_t v3 = (pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
    if (!v3) {
      unint64_t v3 = sub_2170C51D8(&pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokens);
    }
    uint64_t v4 = *((void *)v3 + 18);
    v7[0] = v4;
    if ((v4 & 7) != 0)
    {
      char v5 = (atomic_uint *)(v4 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v5, 2u, memory_order_relaxed) & 1) == 0) {
        v7[0] = (uint64_t)v5;
      }
    }
    sub_216D30CFC(&qword_267B95590, v7, 1uLL);
    if ((v7[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v7[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B95590, &dword_216758000);
    __cxa_guard_release(&qword_267B955A8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B955C8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B955C8))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdTyped::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdTyped *)1);
    sub_2170C9FD4((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B955B0, &dword_216758000);
    __cxa_guard_release(&qword_267B955C8);
  }
  if (v1) {
    return &qword_267B955B0;
  }
  else {
    return &qword_267B95590;
  }
}

void sub_2170C9F8C(_Unwind_Exception *a1)
{
}

void *sub_2170C9FD4(uint64_t **a1)
{
  qword_267B955B8 = 0;
  unk_267B955C0 = 0;
  qword_267B955B0 = 0;
  sub_216973388((char **)&qword_267B955B0, ((unk_267B95598 - qword_267B95590) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B955B0, (void *)qword_267B955B8, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B955B0, (void *)qword_267B955B8, (uint64_t *)qword_267B95590, unk_267B95598, (unk_267B95598 - qword_267B95590) >> 3);
}

void sub_2170CA06C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_2170CA08C()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216F1B0B4((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_2170CA16C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType::AaplUsdInteractiveTokensType(pxrInternal__aapl__pxrReserved__::AaplUsdInteractiveTokensType *this)
{
  uint64_t v89 = *MEMORY[0x263EF8340];
  unsigned int v48 = (uint64_t *)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "actions", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v48, "allow", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 16, "any", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 24, "baseline", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 32, "bottom", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 40, "center", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 48, "content", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 56, "depth", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 64, "exclusive", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 72, "face", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 80, "flowing", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 88, "font", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 96, "hardBreaks", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 104, "height", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 112, "horizontal", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 120, "horizontalAlignment", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 128, "ignore", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 136, "image", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 144, "info:id", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 152, "justified", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 160, "left", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 168, "lowerMiddle", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 176, "middle", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 184, "multiplePerformOperation", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 192, "none", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 200, "physicalWidth", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 208, "plane", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 216, "pointSize", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 224, "preliminary:anchoring:type", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 232, "preliminary:imageAnchoring:referenceImage", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 240, "preliminary:planeAnchoring:alignment", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 248, "right", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 256, "singleLine", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 264, "stop", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 272, "top", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 280, "triggers", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 288, "vertical", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 296, "verticalAlignment", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 304, "width", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 312, "wrapMode", 0);
  uint64_t v2 = *(void *)this;
  uint64_t v49 = v2;
  if ((v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v49 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v3 = *v48;
  uint64_t v50 = v3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v50 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v4 = *((void *)this + 2);
  uint64_t v51 = v4;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v51 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v5 = *((void *)this + 3);
  uint64_t v52 = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v52 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v6 = *((void *)this + 4);
  uint64_t v53 = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v53 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = *((void *)this + 5);
  uint64_t v54 = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v54 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v8 = *((void *)this + 6);
  uint64_t v55 = v8;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v55 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v9 = *((void *)this + 7);
  uint64_t v56 = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v56 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v10 = *((void *)this + 8);
  uint64_t v57 = v10;
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v57 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v11 = *((void *)this + 9);
  uint64_t v58 = v11;
  if ((v11 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v58 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v12 = *((void *)this + 10);
  uint64_t v59 = v12;
  if ((v12 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v59 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v13 = *((void *)this + 11);
  uint64_t v60 = v13;
  if ((v13 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v60 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v14 = *((void *)this + 12);
  uint64_t v61 = v14;
  if ((v14 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v61 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v15 = *((void *)this + 13);
  uint64_t v62 = v15;
  if ((v15 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v62 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v16 = *((void *)this + 14);
  uint64_t v63 = v16;
  if ((v16 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v63 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v17 = *((void *)this + 15);
  uint64_t v64 = v17;
  if ((v17 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v64 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v18 = *((void *)this + 16);
  uint64_t v65 = v18;
  if ((v18 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v65 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v19 = *((void *)this + 17);
  uint64_t v66 = v19;
  if ((v19 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v66 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v20 = *((void *)this + 18);
  uint64_t v67 = v20;
  if ((v20 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v67 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v21 = *((void *)this + 19);
  uint64_t v68 = v21;
  if ((v21 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v68 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v22 = *((void *)this + 20);
  uint64_t v69 = v22;
  if ((v22 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v69 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v23 = *((void *)this + 21);
  uint64_t v70 = v23;
  if ((v23 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v70 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v24 = *((void *)this + 22);
  uint64_t v71 = v24;
  if ((v24 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v71 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v25 = *((void *)this + 23);
  uint64_t v72 = v25;
  if ((v25 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v72 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v26 = *((void *)this + 24);
  uint64_t v73 = v26;
  if ((v26 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v73 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v27 = *((void *)this + 25);
  uint64_t v74 = v27;
  if ((v27 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v74 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v28 = *((void *)this + 26);
  uint64_t v75 = v28;
  if ((v28 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v75 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v29 = *((void *)this + 27);
  uint64_t v76 = v29;
  if ((v29 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v76 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v30 = *((void *)this + 28);
  uint64_t v77 = v30;
  if ((v30 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v77 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v31 = *((void *)this + 29);
  uint64_t v78 = v31;
  if ((v31 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v78 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v32 = *((void *)this + 30);
  uint64_t v79 = v32;
  if ((v32 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v79 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v33 = *((void *)this + 31);
  uint64_t v80 = v33;
  if ((v33 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v80 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v34 = *((void *)this + 32);
  uint64_t v81 = v34;
  if ((v34 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v81 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v35 = *((void *)this + 33);
  uint64_t v82 = v35;
  if ((v35 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v82 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v36 = *((void *)this + 34);
  uint64_t v83 = v36;
  if ((v36 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v83 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v37 = *((void *)this + 35);
  uint64_t v84 = v37;
  if ((v37 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v37 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v84 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v38 = *((void *)this + 36);
  uint64_t v85 = v38;
  if ((v38 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v38 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v85 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v39 = *((void *)this + 37);
  uint64_t v86 = v39;
  if ((v39 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v39 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v86 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v40 = *((void *)this + 38);
  uint64_t v87 = v40;
  if ((v40 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v87 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v41 = *((void *)this + 39);
  uint64_t v88 = v41;
  if ((v41 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v88 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((void *)this + 40) = 0;
  *((void *)this + 41) = 0;
  *((void *)this + 42) = 0;
  int v42 = (char *)operator new(0x140uLL);
  uint64_t v43 = 0;
  *((void *)this + 40) = v42;
  *((void *)this + 41) = v42;
  *((void *)this + 42) = v42 + 320;
  do
  {
    uint64_t v44 = *(uint64_t *)((char *)&v49 + v43);
    *(void *)&v42[v43] = v44;
    if ((v44 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v44 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v42[v43] &= 0xFFFFFFFFFFFFFFF8;
    }
    v43 += 8;
  }
  while (v43 != 320);
  *((void *)this + 41) = v42 + 320;
  for (uint64_t i = 312; i != -8; i -= 8)
  {
    uint64_t v46 = *(uint64_t *)((char *)&v49 + i);
    if ((v46 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v46 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return this;
}

void sub_2170CADE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30,void *a31,void *a32,void *a33,void *a34,void *a35,void *a36,void *a37,void *a38,void *a39,void *a40,void **a41,uint64_t a42,char a43)
{
  sub_216889A04(&a41);
  uint64_t v53 = 312;
  while (1)
  {
    uint64_t v54 = *(void *)(&a43 + v53);
    if ((v54 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v54 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v53 -= 8;
    if (v53 == -8)
    {
      if ((*v46 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v46 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v45 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v45 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v44 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v44 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v52 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v52 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v51 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v51 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v50 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v50 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v49 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v49 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v48 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v48 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v47 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a20 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a21 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a22 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a23 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a24 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a25 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a26 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a27 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a28 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a29 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a30 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a31 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a32 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a33 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a34 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a35 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a36 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a37 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a38 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a38 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a39 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a39 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a40 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v43 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v43 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_2170CB298()
{
}

void sub_2170CB2A0()
{
}

void sub_2170CB2A8()
{
}

void sub_2170CB2B0()
{
}

void sub_2170CB2B8()
{
}

void sub_2170CB2C0()
{
}

void sub_2170CB2C8()
{
}

void sub_2170CB2D0()
{
}

void sub_2170CB2D8()
{
}

void sub_2170CB2E0()
{
}

void sub_2170CB2E8()
{
}

void sub_2170CB2F0()
{
}

void sub_2170CB2F8()
{
}

void sub_2170CB300()
{
}

void sub_2170CB308()
{
}

void sub_2170CB310()
{
}

void sub_2170CB318()
{
}

void sub_2170CB320()
{
}

void sub_2170CB328()
{
}

void sub_2170CB330()
{
}

void sub_2170CB338()
{
}

void sub_2170CB340()
{
}

void sub_2170CB348()
{
}

void sub_2170CB350()
{
}

void sub_2170CB358()
{
}

void sub_2170CB360()
{
}

void sub_2170CB368()
{
}

void sub_2170CB370()
{
}

void sub_2170CB378()
{
}

void sub_2170CB380()
{
}

void sub_2170CB388()
{
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsArticulationRootAPI::~UsdPhysicsArticulationRootAPI(pxrInternal__aapl__pxrReserved__::UsdPhysicsArticulationRootAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsArticulationRootAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *((void *)a3 + 3) = 0;
    *(void *)a3 = &unk_26C772670;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdPhysics/articulationRootAPI.cpp";
    uint64_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 51;
    unint64_t v12 = (unint64_t)"static UsdPhysicsArticulationRootAPI pxrInternal__aapl__pxrReserved__::UsdPhysicsArticulatio"
                            "nRootAPI::Get(const UsdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *((void *)a3 + 3) = 0;
    *(void *)a3 = &unk_26C772670;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_2170CB550(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsArticulationRootAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdPhysicsArticulationRootAPI *this)
{
  return 5;
}

uint64_t sub_2170CB578(pxrInternal__aapl__pxrReserved__::UsdPhysicsArticulationRootAPI *a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsArticulationRootAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B955D0, v4);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplySingleApplyAPI(a1, SchemaInfo, a2);
  }
  else
  {
    v12[0] = "usd/prim.h";
    v12[1] = "CanApplyAPI";
    v12[2] = 1024;
    v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(std::string *) const [SchemaType = pxrInternal_"
             "_aapl__pxrReserved__::UsdPhysicsArticulationRootAPI]";
    char v13 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
    if (*(char *)(TypeName + 23) >= 0) {
      uint64_t v11 = (const char *)TypeName;
    }
    else {
      uint64_t v11 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v11);
    return 0;
  }
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsArticulationRootAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdPhysicsArticulationRootAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  if (sub_2170CB760(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, this);
    *((void *)a2 + 3) = 0;
    *(void *)a2 = &unk_26C772670;
  }
  else
  {
    int v5 = 1;
    uint64_t v6 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v7);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v8);
    uint64_t v9 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
    *((void *)a2 + 3) = 0;
    *(void *)a2 = &unk_26C772670;
    if ((v9 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
    sub_21697C414(&v7);
    if (v6) {
      sub_216D16E0C(v6);
    }
  }
}

void sub_2170CB74C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2170CB760(pxrInternal__aapl__pxrReserved__::UsdPhysicsArticulationRootAPI *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsArticulationRootAPI::_GetStaticTfType(a1);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B955D0, v2);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(a1, SchemaInfo);
  }
  else
  {
    v10[0] = "usd/prim.h";
    v10[1] = "ApplyAPI";
    v10[2] = 1147;
    v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI() const [SchemaType = pxrInternal__aapl__pxrReserv"
             "ed__::UsdPhysicsArticulationRootAPI]";
    char v11 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v7);
    if (*(char *)(TypeName + 23) >= 0) {
      uint64_t v9 = (const char *)TypeName;
    }
    else {
      uint64_t v9 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v9);
    return 0;
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsArticulationRootAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsArticulationRootAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B955D8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B955D8))
  {
    __cxa_guard_release(&qword_267B955D8);
  }
  return &qword_267B955D0;
}

void sub_2170CB894(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsArticulationRootAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdPhysicsArticulationRootAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B955E8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsArticulationRootAPI *)__cxa_guard_acquire(&qword_267B955E8);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdPhysicsArticulationRootAPI::_GetStaticTfType(v2);
      byte_267B955E0 = sub_216D16508((char *)&qword_267B955D0, v3, v4);
      __cxa_guard_release(&qword_267B955E8);
    }
  }
  return byte_267B955E0;
}

void sub_2170CB914(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsArticulationRootAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsArticulationRootAPI *this)
{
  return &qword_267B955D0;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsArticulationRootAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdPhysicsArticulationRootAPI *this)
{
  int v1 = (int)this;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95608, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95608))
  {
    qword_267B955F0 = 0;
    *(void *)algn_267B955F8 = 0;
    qword_267B95600 = 0;
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B955F0, &dword_216758000);
    __cxa_guard_release(&qword_267B95608);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95628, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95628))
  {
    SchemaAttributeNames = (uint64_t **)pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    qword_267B95610 = 0;
    *(void *)algn_267B95618 = 0;
    qword_267B95620 = 0;
    sub_21698FA28(&qword_267B95610, *SchemaAttributeNames, SchemaAttributeNames[1], SchemaAttributeNames[1] - *SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B95610, &dword_216758000);
    __cxa_guard_release(&qword_267B95628);
  }
  if (v1) {
    return &qword_267B95610;
  }
  else {
    return &qword_267B955F0;
  }
}

void sub_2170CBA5C(_Unwind_Exception *a1)
{
}

uint64_t *sub_2170CBA74()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216D24064((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_2170CBB54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI::~UsdPhysicsCollisionAPI(pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    int v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *((void *)a3 + 3) = 0;
    *(void *)a3 = &unk_26C7726C8;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdPhysics/collisionAPI.cpp";
    uint64_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 51;
    unint64_t v12 = (unint64_t)"static UsdPhysicsCollisionAPI pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI::Get("
                            "const UsdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *((void *)a3 + 3) = 0;
    *(void *)a3 = &unk_26C7726C8;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_2170CBD60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI *this)
{
  return 5;
}

uint64_t sub_2170CBD88(pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI *a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B95630, v4);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplySingleApplyAPI(a1, SchemaInfo, a2);
  }
  else
  {
    v12[0] = "usd/prim.h";
    v12[1] = "CanApplyAPI";
    v12[2] = 1024;
    v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(std::string *) const [SchemaType = pxrInternal_"
             "_aapl__pxrReserved__::UsdPhysicsCollisionAPI]";
    char v13 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
    if (*(char *)(TypeName + 23) >= 0) {
      uint64_t v11 = (const char *)TypeName;
    }
    else {
      uint64_t v11 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v11);
    return 0;
  }
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  if (sub_2170CBF70(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, this);
    *((void *)a2 + 3) = 0;
    *(void *)a2 = &unk_26C7726C8;
  }
  else
  {
    int v5 = 1;
    uint64_t v6 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v7);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v8);
    uint64_t v9 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
    *((void *)a2 + 3) = 0;
    *(void *)a2 = &unk_26C7726C8;
    if ((v9 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
    sub_21697C414(&v7);
    if (v6) {
      sub_216D16E0C(v6);
    }
  }
}

void sub_2170CBF5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2170CBF70(pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI::_GetStaticTfType(a1);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B95630, v2);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(a1, SchemaInfo);
  }
  else
  {
    v10[0] = "usd/prim.h";
    v10[1] = "ApplyAPI";
    v10[2] = 1147;
    v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI() const [SchemaType = pxrInternal__aapl__pxrReserv"
             "ed__::UsdPhysicsCollisionAPI]";
    char v11 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v7);
    if (*(char *)(TypeName + 23) >= 0) {
      uint64_t v9 = (const char *)TypeName;
    }
    else {
      uint64_t v9 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v9);
    return 0;
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95638, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95638))
  {
    __cxa_guard_release(&qword_267B95638);
  }
  return &qword_267B95630;
}

void sub_2170CC0A4(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95648, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI *)__cxa_guard_acquire(&qword_267B95648);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI::_GetStaticTfType(v2);
      byte_267B95640 = sub_216D16508((char *)&qword_267B95630, v3, v4);
      __cxa_guard_release(&qword_267B95648);
    }
  }
  return byte_267B95640;
}

void sub_2170CC124(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI *this)
{
  return &qword_267B95630;
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI::GetCollisionEnabledAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3) {
    uint64_t v3 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 248), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170CC1FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI::CreateCollisionEnabledAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8) {
    uint64_t v8 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 248), v9, 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI::GetSimulationOwnerRel(pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3) {
    uint64_t v3 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 456), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170CC364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI::CreateSimulationOwnerRel(pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3) {
    uint64_t v3 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 456), 0, a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170CC420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI *this)
{
  int v1 = (int)this;
  v7[1] = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95668, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95668))
  {
    uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v3) {
      uint64_t v3 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    }
    uint64_t v4 = *((void *)v3 + 31);
    v7[0] = v4;
    if ((v4 & 7) != 0)
    {
      int v5 = (atomic_uint *)(v4 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v5, 2u, memory_order_relaxed) & 1) == 0) {
        v7[0] = (uint64_t)v5;
      }
    }
    sub_216D30CFC(&qword_267B95650, v7, 1uLL);
    if ((v7[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v7[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B95650, &dword_216758000);
    __cxa_guard_release(&qword_267B95668);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95688, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95688))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    sub_2170CC610((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B95670, &dword_216758000);
    __cxa_guard_release(&qword_267B95688);
  }
  if (v1) {
    return &qword_267B95670;
  }
  else {
    return &qword_267B95650;
  }
}

void sub_2170CC5C8(_Unwind_Exception *a1)
{
}

void *sub_2170CC610(uint64_t **a1)
{
  qword_267B95678 = 0;
  unk_267B95680 = 0;
  qword_267B95670 = 0;
  sub_216973388((char **)&qword_267B95670, ((unk_267B95658 - qword_267B95650) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B95670, (void *)qword_267B95678, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B95670, (void *)qword_267B95678, (uint64_t *)qword_267B95650, unk_267B95658, (unk_267B95658 - qword_267B95650) >> 3);
}

void sub_2170CC6A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_2170CC6C8()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216D24064((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_2170CC7A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *sub_2170CC7F8(atomic_ullong *a1)
{
  uint64_t result = sub_2170CC840();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      char v4 = (void *)sub_2170CC884((uint64_t)result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *sub_2170CC840()
{
  v0 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)operator new(0x2D8uLL);
  pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType::UsdPhysicsTokensType(v0);
  return v0;
}

void sub_2170CC870(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2170CC884(uint64_t a1)
{
  int v90 = (void **)(a1 + 704);
  sub_216889A04(&v90);
  uint64_t v2 = *(void *)(a1 + 696);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *(void *)(a1 + 688);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *(void *)(a1 + 680);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *(void *)(a1 + 672);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v6 = *(void *)(a1 + 664);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v7 = *(void *)(a1 + 656);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v8 = *(void *)(a1 + 648);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v9 = *(void *)(a1 + 640);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v10 = *(void *)(a1 + 632);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v11 = *(void *)(a1 + 624);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v12 = *(void *)(a1 + 616);
  if ((v12 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v13 = *(void *)(a1 + 608);
  if ((v13 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v14 = *(void *)(a1 + 600);
  if ((v14 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v15 = *(void *)(a1 + 592);
  if ((v15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v16 = *(void *)(a1 + 584);
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v17 = *(void *)(a1 + 576);
  if ((v17 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v18 = *(void *)(a1 + 568);
  if ((v18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v19 = *(void *)(a1 + 560);
  if ((v19 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v20 = *(void *)(a1 + 552);
  if ((v20 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v21 = *(void *)(a1 + 544);
  if ((v21 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v22 = *(void *)(a1 + 536);
  if ((v22 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v23 = *(void *)(a1 + 528);
  if ((v23 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v24 = *(void *)(a1 + 520);
  if ((v24 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v25 = *(void *)(a1 + 512);
  if ((v25 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v26 = *(void *)(a1 + 504);
  if ((v26 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v27 = *(void *)(a1 + 496);
  if ((v27 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v28 = *(void *)(a1 + 488);
  if ((v28 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v29 = *(void *)(a1 + 480);
  if ((v29 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v30 = *(void *)(a1 + 472);
  if ((v30 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v31 = *(void *)(a1 + 464);
  if ((v31 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v32 = *(void *)(a1 + 456);
  if ((v32 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v33 = *(void *)(a1 + 448);
  if ((v33 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v34 = *(void *)(a1 + 440);
  if ((v34 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v35 = *(void *)(a1 + 432);
  if ((v35 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v36 = *(void *)(a1 + 424);
  if ((v36 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v37 = *(void *)(a1 + 416);
  if ((v37 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v38 = *(void *)(a1 + 408);
  if ((v38 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v38 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v39 = *(void *)(a1 + 400);
  if ((v39 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v39 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v40 = *(void *)(a1 + 392);
  if ((v40 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v41 = *(void *)(a1 + 384);
  if ((v41 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v42 = *(void *)(a1 + 376);
  if ((v42 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v42 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v43 = *(void *)(a1 + 368);
  if ((v43 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v43 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v44 = *(void *)(a1 + 360);
  if ((v44 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v44 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v45 = *(void *)(a1 + 352);
  if ((v45 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v45 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v46 = *(void *)(a1 + 344);
  if ((v46 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v46 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v47 = *(void *)(a1 + 336);
  if ((v47 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v48 = *(void *)(a1 + 328);
  if ((v48 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v48 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v49 = *(void *)(a1 + 320);
  if ((v49 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v49 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v50 = *(void *)(a1 + 312);
  if ((v50 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v50 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v51 = *(void *)(a1 + 304);
  if ((v51 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v51 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v52 = *(void *)(a1 + 296);
  if ((v52 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v52 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v53 = *(void *)(a1 + 288);
  if ((v53 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v53 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v54 = *(void *)(a1 + 280);
  if ((v54 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v54 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v55 = *(void *)(a1 + 272);
  if ((v55 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v55 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v56 = *(void *)(a1 + 264);
  if ((v56 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v56 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v57 = *(void *)(a1 + 256);
  if ((v57 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v57 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v58 = *(void *)(a1 + 248);
  if ((v58 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v58 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v59 = *(void *)(a1 + 240);
  if ((v59 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v59 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v60 = *(void *)(a1 + 232);
  if ((v60 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v60 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v61 = *(void *)(a1 + 224);
  if ((v61 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v61 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v62 = *(void *)(a1 + 216);
  if ((v62 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v62 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v63 = *(void *)(a1 + 208);
  if ((v63 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v63 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v64 = *(void *)(a1 + 200);
  if ((v64 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v64 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v65 = *(void *)(a1 + 192);
  if ((v65 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v65 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v66 = *(void *)(a1 + 184);
  if ((v66 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v66 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v67 = *(void *)(a1 + 176);
  if ((v67 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v67 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v68 = *(void *)(a1 + 168);
  if ((v68 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v68 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v69 = *(void *)(a1 + 160);
  if ((v69 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v69 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v70 = *(void *)(a1 + 152);
  if ((v70 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v70 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v71 = *(void *)(a1 + 144);
  if ((v71 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v71 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v72 = *(void *)(a1 + 136);
  if ((v72 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v72 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v73 = *(void *)(a1 + 128);
  if ((v73 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v73 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v74 = *(void *)(a1 + 120);
  if ((v74 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v74 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v75 = *(void *)(a1 + 112);
  if ((v75 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v75 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v76 = *(void *)(a1 + 104);
  if ((v76 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v76 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v77 = *(void *)(a1 + 96);
  if ((v77 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v77 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v78 = *(void *)(a1 + 88);
  if ((v78 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v78 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v79 = *(void *)(a1 + 80);
  if ((v79 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v79 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v80 = *(void *)(a1 + 72);
  if ((v80 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v80 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v81 = *(void *)(a1 + 64);
  if ((v81 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v81 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v82 = *(void *)(a1 + 56);
  if ((v82 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v82 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v83 = *(void *)(a1 + 48);
  if ((v83 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v83 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v84 = *(void *)(a1 + 40);
  if ((v84 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v84 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v85 = *(void *)(a1 + 32);
  if ((v85 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v85 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v86 = *(void *)(a1 + 24);
  if ((v86 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v86 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v87 = *(void *)(a1 + 16);
  if ((v87 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v87 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v88 = *(void *)(a1 + 8);
  if ((v88 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v88 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)a1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)a1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return a1;
}

void sub_2170CD100()
{
  sub_2170CEC78();
  sub_216779094(__p, "PhysicsCollisionGroup");
  sub_2170CEDA4((char *)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_2170CD150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup::~UsdPhysicsCollisionGroup(pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup *this)
{
  pxrInternal__aapl__pxrReserved__::UsdTyped::~UsdTyped(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C772720;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdPhysics/collisionGroup.cpp";
    uint64_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 57;
    unint64_t v12 = (unint64_t)"static UsdPhysicsCollisionGroup pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup::"
                            "Get(const UsdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C772720;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_2170CD31C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95698, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95698))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B95690, "PhysicsCollisionGroup");
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B95690, &dword_216758000);
    __cxa_guard_release(&qword_267B95698);
  }
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v8, a2, &qword_267B95690, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C772720;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdPhysics/collisionGroup.cpp";
    uint64_t v10 = (atomic_ullong *)"Define";
    uint64_t v11 = 70;
    unint64_t v12 = (unint64_t)"static UsdPhysicsCollisionGroup pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup::"
                            "Define(const UsdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C772720;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_2170CD528(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B956A8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B956A8))
  {
    __cxa_guard_release(&qword_267B956A8);
  }
  return &qword_267B956A0;
}

void sub_2170CD5D0(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B956B8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup *)__cxa_guard_acquire(&qword_267B956B8);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup::_GetStaticTfType(v2);
      byte_267B956B0 = sub_216D16508((char *)&qword_267B956A0, v3, v4);
      __cxa_guard_release(&qword_267B956B8);
    }
  }
  return byte_267B956B0;
}

void sub_2170CD650(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup *this)
{
  return &qword_267B956A0;
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup::GetMergeGroupNameAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3) {
    uint64_t v3 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 416), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170CD728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup::CreateMergeGroupNameAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8) {
    uint64_t v8 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 416), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 80), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup::GetInvertFilteredGroupsAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3) {
    uint64_t v3 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 336), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170CD890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup::CreateInvertFilteredGroupsAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8) {
    uint64_t v8 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 336), v9, 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup::GetFilteredGroupsRel(pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3) {
    uint64_t v3 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 304), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170CD9F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup::CreateFilteredGroupsRel(pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3) {
    uint64_t v3 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 304), 0, a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170CDAB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup *this)
{
  int v1 = (int)this;
  uint64_t v14 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B956D8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B956D8))
  {
    uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v3) {
      uint64_t v3 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    }
    uint64_t v4 = *((void *)v3 + 52);
    uint64_t v12 = v4;
    if ((v4 & 7) != 0)
    {
      uint64_t v5 = (atomic_uint *)(v4 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v5, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v12 = (uint64_t)v5;
      }
    }
    int v6 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v6) {
      int v6 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    }
    int v7 = (atomic_uint *)*((void *)v6 + 42);
    char v13 = v7;
    if ((v7 & 7) != 0)
    {
      uint64_t v8 = (atomic_uint *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
        char v13 = v8;
      }
    }
    sub_216D30CFC(&qword_267B956C0, &v12, 2uLL);
    for (uint64_t i = 8; i != -8; i -= 8)
    {
      uint64_t v10 = *(uint64_t *)((char *)&v12 + i);
      if ((v10 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B956C0, &dword_216758000);
    __cxa_guard_release(&qword_267B956D8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B956F8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B956F8))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdTyped::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdTyped *)1);
    sub_2170CDD24((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B956E0, &dword_216758000);
    __cxa_guard_release(&qword_267B956F8);
  }
  if (v1) {
    return &qword_267B956E0;
  }
  else {
    return &qword_267B956C0;
  }
}

void sub_2170CDCAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  __cxa_guard_abort(&qword_267B956D8);
  _Unwind_Resume(a1);
}

void *sub_2170CDD24(uint64_t **a1)
{
  qword_267B956E8 = 0;
  unk_267B956F0 = 0;
  qword_267B956E0 = 0;
  sub_216973388((char **)&qword_267B956E0, ((unk_267B956C8 - qword_267B956C0) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B956E0, (void *)qword_267B956E8, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B956E0, (void *)qword_267B956E8, (uint64_t *)qword_267B956C0, unk_267B956C8, (unk_267B956C8 - qword_267B956C0) >> 3);
}

void sub_2170CDDBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup::GetCollidersCollectionAPI(pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3) {
    uint64_t v3 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  sub_216D36868(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (uint64_t *)v3 + 4);
  *(void *)a2 = &unk_26C767A08;
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170CDE98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup::CollisionGroupTable::IsCollisionEnabled(pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup::CollisionGroupTable *this, unsigned int a2, unsigned int a3)
{
  uint64_t v3 = *((void *)this + 1) - *(void *)this;
  if (v3 >> 3 <= (unint64_t)a2 || v3 >> 3 <= (unint64_t)a3) {
    return 1;
  }
  unint64_t v6 = (unint64_t)v3 >> 3;
  if (a3 >= a2) {
    unsigned int v7 = a2;
  }
  else {
    unsigned int v7 = a3;
  }
  if (a2 <= a3) {
    unsigned int v8 = a3;
  }
  else {
    unsigned int v8 = a2;
  }
  unint64_t v9 = v8 - ((v7 + v7 * v7) >> 1) + v7 * v6;
  return (*(void *)(*((void *)this + 3) + ((v9 >> 3) & 0x1FFFFFF8)) >> v9) & 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup::CollisionGroupTable::IsCollisionEnabled(pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup::CollisionGroupTable *a1, void *a2, void *a3)
{
  uint64_t v3 = (void *)*((void *)a1 + 1);
  uint64_t v4 = *(void **)a1;
  if (*(void **)a1 == v3)
  {
    uint64_t v5 = *(void **)a1;
  }
  else
  {
    uint64_t v5 = *(void **)a1;
    do
    {
      if (*v5 == *a2) {
        goto LABEL_6;
      }
      ++v5;
    }
    while (v5 != v3);
    uint64_t v5 = (void *)*((void *)a1 + 1);
LABEL_6:
    while (*v4 != *a3)
    {
      if (++v4 == v3)
      {
        uint64_t v4 = (void *)*((void *)a1 + 1);
        return pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup::CollisionGroupTable::IsCollisionEnabled(a1, ((unint64_t)v5 - *(void *)a1) >> 3, ((unint64_t)v4 - *(void *)a1) >> 3);
      }
    }
  }
  return pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup::CollisionGroupTable::IsCollisionEnabled(a1, ((unint64_t)v5 - *(void *)a1) >> 3, ((unint64_t)v4 - *(void *)a1) >> 3);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup::ComputeCollisionGroupTable(pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v78 = 0;
  uint64_t v79 = 0;
  unint64_t v80 = 0;
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPseudoRoot(this, (uint64_t)&v71);
  sub_216F00438((uint64_t)v75, (uint64_t)&v71);
  if ((v74 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v74 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v73 + 1);
  sub_21697C414(&v73);
  if (v72) {
    sub_216D16E0C((atomic_ullong *)v72);
  }
  sub_216D3ADBC((uint64_t *)v75, (uint64_t)&v71);
  uint64_t v66 = v75[1];
  uint64_t v67 = v75;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v68);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v68 + 1);
  int v69 = 0;
  __int16 v70 = 0;
  while (v72 != v67
       || v71 != v66
       || v73 != v68
       || v74 != v69
       || BYTE4(v74) != v70
       || BYTE5(v74) != HIBYTE(v70))
  {
    sub_216D3AE90((uint64_t)&v71, (uint64_t)&v62);
    pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup::_GetStaticTfType(v3);
    SchemaInfo = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B956A0, v4);
    if (pxrInternal__aapl__pxrReserved__::UsdPrim::_IsA((uint64_t)&v62, SchemaInfo, v6))
    {
      unsigned int v7 = v79;
      if ((unint64_t)v79 >= v80)
      {
        unsigned int v8 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)sub_2170CEE5C((uint64_t *)&v78, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v62);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(v79, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v62);
        *(void *)unsigned int v7 = &unk_26C772720;
        unsigned int v8 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v7 + 24);
      }
      uint64_t v79 = v8;
    }
    if ((v65 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v65 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v64 + 1);
    sub_21697C414(&v64);
    if (v63) {
      sub_216D16E0C(v63);
    }
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((uint64_t)&v71);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v68 + 1);
  sub_21697C414(&v68);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v73 + 1);
  sub_21697C414(&v73);
  uint64_t v67 = 0;
  uint64_t v68 = 0;
  uint64_t v66 = (void **)&v67;
  uint64_t v63 = 0;
  uint64_t v64 = 0;
  uint64_t v62 = &v63;
  unint64_t v9 = v78;
  uint64_t v10 = v79;
  if (v78 == v79)
  {
    unsigned int v52 = 0;
  }
  else
  {
    unsigned int v52 = 0;
    do
    {
      pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup::GetMergeGroupNameAttr(v9, (uint64_t)&v71);
      if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsAuthored((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v71))
      {
        __p = 0;
        uint64_t v60 = 0;
        uint64_t v61 = 0;
        pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<std::string>();
      }
      sub_216D1E2AC((uint64_t)v9, &v56);
      __p = &v56;
      *((void *)sub_2170CF0AC((uint64_t **)&v66, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v56, (uint64_t)&unk_2174BFD90, (_DWORD **)&__p)+ 5) = v52;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v56 + 1);
      sub_21697C414(&v56);
      ++v52;
      if ((v74 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v74 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v73 + 1);
      sub_21697C414(&v73);
      if (v72) {
        sub_216D16E0C((atomic_ullong *)v72);
      }
      unint64_t v9 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup *)((char *)v9 + 24);
    }
    while (v9 != v10);
  }
  __p = 0;
  uint64_t v60 = 0;
  uint64_t v61 = 0;
  sub_216804164((uint64_t)&__p, (v52 + v52 * v52) >> 1, 1);
  uint64_t v11 = v78;
  if (v78 != v79)
  {
    sub_216D1E2AC((uint64_t)v78, &v56);
    uint64_t v71 = &v56;
    sub_2170CF0AC((uint64_t **)&v66, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v56, (uint64_t)&unk_2174BFD90, (_DWORD **)&v71);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v56 + 1);
    sub_21697C414(&v56);
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    uint64_t v58 = 0;
    pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup::GetFilteredGroupsRel(v11, (uint64_t)&v71);
    uint64_t v53 = 0;
    uint64_t v54 = 0;
    uint64_t v55 = 0;
    pxrInternal__aapl__pxrReserved__::UsdRelationship::GetTargets((uint64_t)&v71, (uint64_t *)&v53);
    sub_21681FE20(&v56, (v54 - v53) >> 3);
    char v13 = v53;
    uint64_t v12 = v54;
    while (v13 != v12)
    {
      uint64_t v81 = v13;
      int v14 = sub_217042718((uint64_t **)&v66, (pxrInternal__aapl__pxrReserved__::SdfPath *)v13, (uint64_t)&unk_2174BFD90, (_DWORD **)&v81)[10];
      uint64_t v15 = v57;
      if (v57 >= v58)
      {
        uint64_t v17 = (char *)v56;
        uint64_t v18 = (v57 - (unsigned char *)v56) >> 2;
        unint64_t v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 62) {
          sub_21677CB10();
        }
        uint64_t v20 = v58 - (unsigned char *)v56;
        if ((v58 - (unsigned char *)v56) >> 1 > v19) {
          unint64_t v19 = v20 >> 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v21 = v19;
        }
        if (v21)
        {
          uint64_t v22 = (char *)sub_21677EA28((uint64_t)&v58, v21);
          uint64_t v17 = (char *)v56;
          uint64_t v15 = v57;
        }
        else
        {
          uint64_t v22 = 0;
        }
        uint64_t v23 = &v22[4 * v18];
        *(_DWORD *)uint64_t v23 = v14;
        uint64_t v16 = v23 + 4;
        while (v15 != v17)
        {
          int v24 = *((_DWORD *)v15 - 1);
          v15 -= 4;
          *((_DWORD *)v23 - 1) = v24;
          v23 -= 4;
        }
        uint64_t v56 = v23;
        uint64_t v57 = v16;
        uint64_t v58 = &v22[4 * v21];
        if (v17) {
          operator delete(v17);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v57 = v14;
        uint64_t v16 = v15 + 4;
      }
      uint64_t v57 = v16;
      v13 += 8;
    }
    uint64_t v82 = &v53;
    sub_216981168((void ***)&v82);
    if ((v74 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v74 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v73 + 1);
    sub_21697C414(&v73);
    if (v72) {
      sub_216D16E0C((atomic_ullong *)v72);
    }
    LOBYTE(v82) = 0;
    pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionGroup::GetInvertFilteredGroupsAttr(v11, (uint64_t)&v71);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<BOOL>();
  }
  uint64_t v25 = v78;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  sub_216A6E72C((uint64_t *)a2, 0xAAAAAAAAAAAAAAABLL * ((v25 - v11) >> 3));
  uint64_t v26 = v78;
  for (i = v79; v26 != i; uint64_t v26 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v26 + 24))
  {
    sub_216D16CFC((uint64_t)&v71, (uint64_t *)v26 + 1, (_DWORD *)v26 + 4);
    uint64_t v28 = sub_216D2F758((uint64_t)&v71);
    unint64_t v29 = *(void *)(a2 + 8);
    if (v29 >= *(void *)(a2 + 16))
    {
      uint64_t v30 = sub_216981B30((uint64_t *)a2, v28);
    }
    else
    {
      sub_216981010(*(_DWORD **)(a2 + 8), v28);
      sub_21698105C((_DWORD *)(v29 + 4), (_DWORD *)v28 + 1);
      uint64_t v30 = v29 + 8;
    }
    *(void *)(a2 + 8) = v30;
    if ((v74 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v74 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v73 + 1);
    sub_21697C414(&v73);
    if (v72) {
      sub_216D16E0C((atomic_ullong *)v72);
    }
  }
  sub_216804164(a2 + 24, (unint64_t)(((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3)* ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3)+ ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3)) >> 1, 1);
  uint64_t v31 = v78;
  uint64_t v32 = v79;
  if (v79 != v78)
  {
    unint64_t v33 = 0;
    unsigned int v34 = 0;
    unsigned int v35 = 1;
    do
    {
      unsigned int v36 = v34;
      unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((v32 - v31) >> 3);
      unsigned int v50 = v35;
      uint64_t v38 = v34;
      if (v37 > v34)
      {
        do
        {
          sub_216D1E2AC((uint64_t)v31 + 24 * v33, &v56);
          uint64_t v71 = &v56;
          int v39 = sub_2170CF0AC((uint64_t **)&v66, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v56, (uint64_t)&unk_2174BFD90, (_DWORD **)&v71)[10];
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v56 + 1);
          sub_21697C414(&v56);
          sub_216D1E2AC((uint64_t)v78 + 24 * v38, &v56);
          uint64_t v71 = &v56;
          uint64_t v40 = *((void *)sub_2170CF0AC((uint64_t **)&v66, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v56, (uint64_t)&unk_2174BFD90, (_DWORD **)&v71)+ 5);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v56 + 1);
          sub_21697C414(&v56);
          if (v35 - 1 >= v36) {
            unsigned int v42 = v36;
          }
          else {
            unsigned int v42 = v35 - 1;
          }
          if (v36 <= v35 - 1) {
            unsigned int v43 = v35 - 1;
          }
          else {
            unsigned int v43 = v36;
          }
          uint64_t v31 = v78;
          uint64_t v32 = v79;
          unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((v79 - v78) >> 3);
          unint64_t v44 = v43 - ((v42 + v42 * v42) >> 1) + v42 * v37;
          uint64_t v45 = *(void *)(a2 + 24);
          unint64_t v46 = v44 >> 6;
          uint64_t v47 = 1 << v44;
          unint64_t v41 = v52 * v39 - ((v39 + v39 * v39) >> 1) + v40;
          if ((*(void *)((char *)__p + ((v41 >> 3) & 0x1FFFFFF8)) >> v41)) {
            uint64_t v48 = *(void *)(v45 + 8 * v46) | v47;
          }
          else {
            uint64_t v48 = *(void *)(v45 + 8 * v46) & ~v47;
          }
          uint64_t v38 = v35;
          BOOL v49 = v37 > v35++;
          *(void *)(v45 + 8 * v46) = v48;
        }
        while (v49);
      }
      unint64_t v33 = v36 + 1;
      unsigned int v35 = v50 + 1;
      unsigned int v34 = v36 + 1;
    }
    while (v37 > v33);
  }
  if (__p) {
    operator delete(__p);
  }
  sub_21678A498((uint64_t)&v62, (char *)v63);
  sub_2170428FC((uint64_t)&v66, v67);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v77);
  sub_21697C414(&v76);
  v75[0] = (void **)&v78;
  sub_216F50D48(v75);
}

void sub_2170CEA4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,char *a27,uint64_t a28,uint64_t a29,char a30,void *a31,uint64_t a32,uint64_t a33,char a34)
{
  if (__p) {
    operator delete(__p);
  }
  sub_21678A498((uint64_t)&a26, a27);
  sub_2170428FC((uint64_t)&a30, a31);
  sub_216D3AF04(v34 - 192);
  *(void *)(v34 - 192) = v34 - 136;
  sub_216F50D48((void ***)(v34 - 192));
  _Unwind_Resume(a1);
}

uint64_t sub_2170CEC34(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2) {
    operator delete(v2);
  }
  uint64_t v4 = (void **)a1;
  sub_216981168(&v4);
  return a1;
}

uint64_t *sub_2170CEC78()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216F1B0B4((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_2170CED58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_2170CEDA4(char *a1)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_2170CEE38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2170CEE5C(uint64_t *a1, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_216782ED8(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  char v13 = v10;
  int v14 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v10[24 * v4];
  uint64_t v15 = v14;
  uint64_t v16 = &v10[24 * v9];
  *(void *)pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(v14, a2) = &unk_26C772720;
  uint64_t v15 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v15 + 24);
  sub_2170CEF80(a1, &v13);
  uint64_t v11 = a1[1];
  sub_216F51058((uint64_t)&v13);
  return v11;
}

void sub_2170CEF6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216F51058((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2170CEF80(uint64_t *a1, void *a2)
{
  uint64_t result = sub_2170CEFF8((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_2170CEFF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(a7 + v11 - 24), (const pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(a3 + v11 - 24));
      v11 -= 24;
      *(void *)uint64_t v12 = &unk_26C772720;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_2170CF090(_Unwind_Exception *exception_object)
{
  if (v3) {
    sub_21732512C(v2, v1);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *sub_2170CF0AC(uint64_t **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v6 = (void **)sub_216AF190C((uint64_t)a1, &v13, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = operator new(0x30uLL);
    v11[1] = a1 + 1;
    unint64_t v9 = *a4;
    sub_21697D878(v7 + 8, v9);
    sub_21697D8B4(v7 + 9, v9 + 1);
    *((void *)v7 + 5) = 0;
    char v12 = 1;
    sub_21677B358(a1, v13, v8, (uint64_t *)v7);
    v11[0] = 0;
    sub_2170427DC((uint64_t)v11, 0);
  }
  return v7;
}

uint64_t sub_2170CF170(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  *(void *)(a1 + 8) = 0;
  unint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      sub_2167FF5C8((uint64_t **)a1, v4, v6, v6);
      ++v6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_2170CF1DC(_Unwind_Exception *a1)
{
  sub_2167FB780(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_2170CF1F4()
{
  sub_2170CFD5C();
  sub_216779094(__p, "PhysicsDistanceJoint");
  sub_2170CFE88((char *)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_2170CF244(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsDistanceJoint::~UsdPhysicsDistanceJoint(pxrInternal__aapl__pxrReserved__::UsdPhysicsDistanceJoint *this)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::~UsdPhysicsJoint(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsDistanceJoint::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C772778;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    unint64_t v9 = "usdPhysics/distanceJoint.cpp";
    uint64_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 57;
    unint64_t v12 = (unint64_t)"static UsdPhysicsDistanceJoint pxrInternal__aapl__pxrReserved__::UsdPhysicsDistanceJoint::Ge"
                            "t(const UsdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C772778;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_2170CF410(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsDistanceJoint::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95708, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95708))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B95700, "PhysicsDistanceJoint");
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B95700, &dword_216758000);
    __cxa_guard_release(&qword_267B95708);
  }
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v8, a2, &qword_267B95700, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C772778;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    unint64_t v9 = "usdPhysics/distanceJoint.cpp";
    uint64_t v10 = (atomic_ullong *)"Define";
    uint64_t v11 = 70;
    unint64_t v12 = (unint64_t)"static UsdPhysicsDistanceJoint pxrInternal__aapl__pxrReserved__::UsdPhysicsDistanceJoint::De"
                            "fine(const UsdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C772778;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_2170CF61C(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsDistanceJoint::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdPhysicsDistanceJoint *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsDistanceJoint::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsDistanceJoint *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95718, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95718))
  {
    __cxa_guard_release(&qword_267B95718);
  }
  return &qword_267B95710;
}

void sub_2170CF6C4(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsDistanceJoint::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdPhysicsDistanceJoint *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95728, memory_order_acquire) & 1) == 0)
  {
    unint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsDistanceJoint *)__cxa_guard_acquire(&qword_267B95728);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdPhysicsDistanceJoint::_GetStaticTfType(v2);
      byte_267B95720 = sub_216D16508((char *)&qword_267B95710, v3, v4);
      __cxa_guard_release(&qword_267B95728);
    }
  }
  return byte_267B95720;
}

void sub_2170CF744(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsDistanceJoint::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsDistanceJoint *this)
{
  return &qword_267B95710;
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsDistanceJoint::GetMinDistanceAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsDistanceJoint *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3) {
    uint64_t v3 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 424), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170CF81C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsDistanceJoint::CreateMinDistanceAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsDistanceJoint *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8) {
    uint64_t v8 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  unint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    unint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 424), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsDistanceJoint::GetMaxDistanceAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsDistanceJoint *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3) {
    uint64_t v3 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 408), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170CF984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsDistanceJoint::CreateMaxDistanceAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsDistanceJoint *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8) {
    uint64_t v8 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  unint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    unint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 408), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsDistanceJoint::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdPhysicsDistanceJoint *this)
{
  int v1 = (int)this;
  uint64_t v14 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95748, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95748))
  {
    uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v3) {
      uint64_t v3 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    }
    uint64_t v4 = *((void *)v3 + 53);
    uint64_t v12 = v4;
    if ((v4 & 7) != 0)
    {
      uint64_t v5 = (atomic_uint *)(v4 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v5, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v12 = (uint64_t)v5;
      }
    }
    int v6 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v6) {
      int v6 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    }
    int v7 = (atomic_uint *)*((void *)v6 + 51);
    char v13 = v7;
    if ((v7 & 7) != 0)
    {
      uint64_t v8 = (atomic_uint *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
        char v13 = v8;
      }
    }
    sub_216D30CFC(&qword_267B95730, &v12, 2uLL);
    for (uint64_t i = 8; i != -8; i -= 8)
    {
      uint64_t v10 = *(uint64_t *)((char *)&v12 + i);
      if ((v10 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B95730, &dword_216758000);
    __cxa_guard_release(&qword_267B95748);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95768, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95768))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint *)1);
    sub_2170CFCA4((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B95750, &dword_216758000);
    __cxa_guard_release(&qword_267B95768);
  }
  if (v1) {
    return &qword_267B95750;
  }
  else {
    return &qword_267B95730;
  }
}

void sub_2170CFC2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  __cxa_guard_abort(&qword_267B95748);
  _Unwind_Resume(a1);
}

void *sub_2170CFCA4(uint64_t **a1)
{
  qword_267B95758 = 0;
  unk_267B95760 = 0;
  qword_267B95750 = 0;
  sub_216973388((char **)&qword_267B95750, ((unk_267B95738 - qword_267B95730) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B95750, (void *)qword_267B95758, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B95750, (void *)qword_267B95758, (uint64_t *)qword_267B95730, unk_267B95738, (unk_267B95738 - qword_267B95730) >> 3);
}

void sub_2170CFD3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_2170CFD5C()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_2170CFF3C((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_2170CFE3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_2170CFE88(char *a1)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_2170CFF1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2170CFF3C(unint64_t **a1@<X8>)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  unint64_t v3 = (unint64_t *)operator new(8uLL);
  *a1 = v3;
  *v3++ = v2;
  a1[1] = v3;
  a1[2] = v3;
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_2170CFFAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI::~UsdPhysicsDriveAPI(pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI::Get(uint64_t *a1@<X0>, pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v8 & 1 | (unint64_t)v6)
  {
    uint64_t v12 = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI::IsPhysicsDriveAPIPath(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v12, v7))
    {
      unint64_t v9 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a2, &v11);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v9, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, (uint64_t)&v13);
      sub_216D36868(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13, &v12);
      *(void *)a3 = &unk_26C7727D0;
      if ((v16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
      sub_21697C414(&v15);
      if (v14) {
        sub_216D16E0C(v14);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
      sub_21697C414(&v11);
    }
    else
    {
      char v13 = "usdPhysics/driveAPI.cpp";
      uint64_t v14 = (atomic_ullong *)"Get";
      uint64_t v15 = 63;
      unint64_t v16 = (unint64_t)"static UsdPhysicsDriveAPI pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI::Get(const "
                              "UsdStagePtr &, const SdfPath &)";
      char v17 = 0;
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid drive path <%s>.", Text);
      LODWORD(v13) = 1;
      uint64_t v14 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
      unint64_t v16 = 0;
      uint64_t v11 = 0;
      sub_216D36868(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13, &v11);
      *(void *)a3 = &unk_26C7727D0;
      if ((v11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((v16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
      sub_21697C414(&v15);
      if (v14) {
        sub_216D16E0C(v14);
      }
    }
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    char v13 = "usdPhysics/driveAPI.cpp";
    uint64_t v14 = (atomic_ullong *)"Get";
    uint64_t v15 = 58;
    unint64_t v16 = (unint64_t)"static UsdPhysicsDriveAPI pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI::Get(const Us"
                            "dStagePtr &, const SdfPath &)";
    char v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    uint64_t v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    unint64_t v16 = 0;
    uint64_t v12 = 0;
    sub_216D36868(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13, &v12);
    *(void *)a3 = &unk_26C7727D0;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
    sub_21697C414(&v15);
    if (v14) {
      sub_216D16E0C(v14);
    }
  }
}

void sub_2170D0308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  if ((a3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216D16AD8((uint64_t)va);
  if ((a4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI::IsPhysicsDriveAPIPath(pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(this)) {
    return 0;
  }
  Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName(this);
  if (*((char *)Name + 23) < 0)
  {
    sub_216778F24(&__p, (void *)*Name, Name[1]);
  }
  else
  {
    long long v6 = *(_OWORD *)Name;
    __p.__r_.__value_.__r.__words[2] = Name[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v6;
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::TokenizeIdentifierAsTokens((unsigned __int8 *)&__p, (uint64_t *)&v20);
  unint64_t v9 = *(void *)(v21 - 8);
  unint64_t v19 = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    unint64_t v19 = v9 & 0xFFFFFFFFFFFFFFF8;
    v9 &= 0xFFFFFFFFFFFFFFF8;
  }
  if (!pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI::IsSchemaPropertyBaseName((pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI *)&v19, v8)&& (uint64_t v10 = v20, (unint64_t)(v21 - (void)v20) >= 9)&& (*v10 & 0xFFFFFFFFFFFFFFF8) == (*(void *)sub_2170D0B04() & 0xFFFFFFFFFFFFFFF8))
  {
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_2170D0B04();
    if ((*(void *)v12 & 0xFFFFFFFFFFFFFFF8) != 0) {
      EmptyString = (uint64_t *)((*(void *)v12 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
    }
    if (*((char *)EmptyString + 23) < 0) {
      uint64_t v14 = EmptyString[1];
    }
    else {
      uint64_t v14 = *((unsigned __int8 *)EmptyString + 23);
    }
    std::string::basic_string(&v17, &__p, v14 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v23);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v18);
    uint64_t v15 = *(void *)a2;
    uint64_t v16 = *(void *)a2 & 7;
    if (&v18 == (uint64_t *)a2)
    {
      if (v16) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    else
    {
      if (v16) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      *(void *)a2 = v18;
      uint64_t v18 = 0;
    }
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
    uint64_t v7 = 1;
    unint64_t v9 = v19;
  }
  else
  {
    uint64_t v7 = 0;
  }
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  v17.__r_.__value_.__r.__words[0] = (std::string::size_type)&v20;
  sub_216889A04((void ***)&v17);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v7;
}

void sub_2170D0588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if ((v25 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  std::string __p = &a17;
  sub_216889A04((void ***)&__p);
  if (a25 < 0) {
    operator delete(a20);
  }
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdSchemaBase *pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI::Get@<X0>(pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t result = sub_216D36868(a3, this, (uint64_t *)a2);
  *(void *)uint64_t result = &unk_26C7727D0;
  return result;
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI::GetAll(pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI *this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI::_GetStaticTfType(this);
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::_GetMultipleApplyInstanceNames(this, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&qword_267B95798, (uint64_t)&v8);
  char v5 = v8;
  long long v6 = v9;
  if (v8 != v9)
  {
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)a2[1];
    do
    {
      if ((unint64_t)v7 >= a2[2])
      {
        uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)sub_2170D2D24(a2, this, v5);
      }
      else
      {
        sub_216D36868(v7, this, v5);
        *(void *)uint64_t v7 = &unk_26C7727D0;
        uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v7 + 32);
        a2[1] = (uint64_t)v7;
      }
      a2[1] = (uint64_t)v7;
      ++v5;
    }
    while (v5 != v6);
  }
  uint64_t v10 = (void **)&v8;
  sub_216889A04(&v10);
}

void sub_2170D070C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216D37524((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B957A0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B957A0))
  {
    __cxa_guard_release(&qword_267B957A0);
  }
  return &qword_267B95798;
}

void sub_2170D07B4(_Unwind_Exception *a1)
{
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI::IsSchemaPropertyBaseName(pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  v25[1] = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95788, memory_order_acquire) & 1) == 0)
  {
    char v4 = this;
    int v5 = __cxa_guard_acquire(&qword_267B95788);
    this = v4;
    if (v5)
    {
      long long v6 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
      if (!v6) {
        long long v6 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
      }
      if ((*((void *)v6 + 14) & 0xFFFFFFFFFFFFFFF8) != 0) {
        EmptyString = (uint64_t *)((*((void *)v6 + 14) & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
      }
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetMultipleApplyNameTemplateBaseName((uint64_t)EmptyString, &v20);
      char v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
      if (!v8) {
        char v8 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
      }
      if ((*((void *)v8 + 10) & 0xFFFFFFFFFFFFFFF8) != 0) {
        unint64_t v9 = (uint64_t *)((*((void *)v8 + 10) & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        unint64_t v9 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
      }
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetMultipleApplyNameTemplateBaseName((uint64_t)v9, &v21);
      uint64_t v10 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
      if (!v10) {
        uint64_t v10 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
      }
      if ((*((void *)v10 + 12) & 0xFFFFFFFFFFFFFFF8) != 0) {
        uint64_t v11 = (uint64_t *)((*((void *)v10 + 12) & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        uint64_t v11 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v10);
      }
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetMultipleApplyNameTemplateBaseName((uint64_t)v11, &v22);
      uint64_t v12 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
      if (!v12) {
        uint64_t v12 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
      }
      if ((*((void *)v12 + 13) & 0xFFFFFFFFFFFFFFF8) != 0) {
        char v13 = (uint64_t *)((*((void *)v12 + 13) & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        char v13 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
      }
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetMultipleApplyNameTemplateBaseName((uint64_t)v13, &v23);
      uint64_t v14 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
      if (!v14) {
        uint64_t v14 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
      }
      if ((*((void *)v14 + 9) & 0xFFFFFFFFFFFFFFF8) != 0) {
        uint64_t v15 = (uint64_t *)((*((void *)v14 + 9) & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        uint64_t v15 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v14);
      }
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetMultipleApplyNameTemplateBaseName((uint64_t)v15, &v24);
      uint64_t v16 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
      if (!v16) {
        uint64_t v16 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
      }
      if ((*((void *)v16 + 11) & 0xFFFFFFFFFFFFFFF8) != 0) {
        std::string v17 = (uint64_t *)((*((void *)v16 + 11) & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        std::string v17 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v16);
      }
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetMultipleApplyNameTemplateBaseName((uint64_t)v17, v25);
      sub_216D30CFC(qword_267B95770, &v20, 6uLL);
      for (uint64_t i = 40; i != -8; i -= 8)
      {
        uint64_t v19 = *(uint64_t *)((char *)&v20 + i);
        if ((v19 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
      __cxa_atexit((void (*)(void *))sub_216B554D0, qword_267B95770, &dword_216758000);
      __cxa_guard_release(&qword_267B95788);
      this = v4;
    }
  }
  unint64_t v2 = (void *)qword_267B95770[0];
  if (qword_267B95770[0] != unk_267B95778)
  {
    while ((*v2 & 0xFFFFFFFFFFFFFFF8) != (*(void *)this & 0xFFFFFFFFFFFFFFF8))
    {
      if (++v2 == (void *)unk_267B95778)
      {
        unint64_t v2 = (void *)unk_267B95778;
        return v2 != (void *)unk_267B95778;
      }
    }
  }
  return v2 != (void *)unk_267B95778;
}

void sub_2170D0A90(_Unwind_Exception *a1)
{
  uint64_t v3 = 40;
  while (1)
  {
    uint64_t v4 = *(void *)(v1 + v3);
    if ((v4 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v3 -= 8;
    if (v3 == -8)
    {
      __cxa_guard_abort(&qword_267B95788);
      _Unwind_Resume(a1);
    }
  }
}

unint64_t sub_2170D0B04()
{
  v0 = (char *)atomic_load((unint64_t *)&qword_267B95790);
  if (!v0)
  {
    v0 = (char *)operator new(0x20uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0, "drive", 0);
    uint64_t v2 = *(void *)v0;
    if ((*(void *)v0 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v2 &= 0xFFFFFFFFFFFFFFF8;
    }
    *((void *)v0 + 1) = 0;
    *((void *)v0 + 2) = 0;
    *((void *)v0 + 3) = 0;
    long long v6 = (void **)(v0 + 8);
    char v7 = 0;
    uint64_t v3 = operator new(8uLL);
    *((void *)v0 + 1) = v3;
    *((void *)v0 + 2) = v3;
    *uint64_t v3 = v2;
    uint64_t v4 = v3 + 1;
    *((void *)v0 + 3) = v3 + 1;
    if ((v2 & 7) != 0)
    {
      if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
        *v3 &= 0xFFFFFFFFFFFFFFF8;
      }
      *((void *)v0 + 2) = v4;
      atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    else
    {
      *((void *)v0 + 2) = v4;
    }
    uint64_t v5 = 0;
    atomic_compare_exchange_strong(&qword_267B95790, (unint64_t *)&v5, (unint64_t)v0);
    if (v5)
    {
      long long v6 = (void **)(v0 + 8);
      sub_216889A04(&v6);
      if ((*(void *)v0 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v0 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v0);
      return atomic_load((unint64_t *)&qword_267B95790);
    }
  }
  return (unint64_t)v0;
}

void sub_2170D0C28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_216889A04(&a9);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  operator delete(v9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI *this)
{
  return 6;
}

uint64_t sub_2170D0C84(pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B95798, v6);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplyMultipleApplyAPI(a1, SchemaInfo, a2, a3);
  }
  else
  {
    v14[0] = "usd/prim.h";
    v14[1] = "CanApplyAPI";
    v14[2] = 1059;
    v14[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(const TfToken &, std::string *) const [SchemaTy"
             "pe = pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI]";
    char v15 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v11);
    if (*(char *)(TypeName + 23) >= 0) {
      char v13 = (const char *)TypeName;
    }
    else {
      char v13 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v13);
    return 0;
  }
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  if (sub_2170D0EB8(this, a2))
  {
    sub_216D36868(a3, this, (uint64_t *)a2);
    *(void *)a3 = &unk_26C7727D0;
  }
  else
  {
    int v8 = 1;
    unint64_t v9 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v10);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v11);
    uint64_t v12 = 0;
    uint64_t v7 = 0;
    sub_216D36868(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v8, &v7);
    *(void *)a3 = &unk_26C7727D0;
    if ((v7 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
    sub_21697C414(&v10);
    if (v9) {
      sub_216D16E0C(v9);
    }
  }
}

void sub_2170D0E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if ((a3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2170D0EB8(pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B95798, v4);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplyMultipleApplyAPI(a1, SchemaInfo, a2);
  }
  else
  {
    v12[0] = "usd/prim.h";
    v12[1] = "ApplyAPI";
    v12[2] = 1188;
    v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI(const TfToken &) const [SchemaType = pxrInternal__"
             "aapl__pxrReserved__::UsdPhysicsDriveAPI]";
    char v13 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
    if (*(char *)(TypeName + 23) >= 0) {
      int v11 = (const char *)TypeName;
    }
    else {
      int v11 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v11);
    return 0;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B957B0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI *)__cxa_guard_acquire(&qword_267B957B0);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI::_GetStaticTfType(v2);
      byte_267B957A8 = sub_216D16508((char *)&qword_267B95798, v3, v4);
      __cxa_guard_release(&qword_267B957B0);
    }
  }
  return byte_267B957A8;
}

void sub_2170D0FF0(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI *this)
{
  return &qword_267B95798;
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI::GetTypeAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)v12, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v4 = *((void *)this + 3);
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v4 &= 0xFFFFFFFFFFFFFFF8;
  }
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!EmptyString) {
    EmptyString = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  uint64_t v6 = *((void *)EmptyString + 14);
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v6 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = (atomic_uint *)(v6 & 0xFFFFFFFFFFFFFFF8);
  if ((v6 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v8 = (uint64_t)(v7 + 4);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    uint64_t v8 = (uint64_t)EmptyString;
  }
  unint64_t v9 = (atomic_uint *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 0xFFFFFFFFFFFFFFF8) != 0) {
    int v10 = (uint64_t *)(v9 + 4);
  }
  else {
    int v10 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  }
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v8, (uint64_t)v10, (uint64_t)&v11);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v12, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v11, a2);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit(v7, 0xFFFFFFFE, memory_order_release);
  }
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit(v9, 0xFFFFFFFE, memory_order_release);
  }
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
  sub_21697C414(&v14);
  if (v13) {
    sub_216D16E0C(v13);
  }
}

void sub_2170D1190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI::CreateTypeAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *((void *)this + 3);
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v8 &= 0xFFFFFFFFFFFFFFF8;
  }
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!EmptyString) {
    EmptyString = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  uint64_t v10 = *((void *)EmptyString + 14);
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v10 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v11 = (atomic_uint *)(v10 & 0xFFFFFFFFFFFFFFF8);
  if ((v10 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v12 = (uint64_t)(v11 + 4);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    uint64_t v12 = (uint64_t)EmptyString;
  }
  char v13 = (atomic_uint *)(v8 & 0xFFFFFFFFFFFFFFF8);
  if ((v8 & 0xFFFFFFFFFFFFFFF8) != 0) {
    int v14 = (uint64_t *)(v13 + 4);
  }
  else {
    int v14 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  }
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v12, (uint64_t)v14, (uint64_t)&v16);
  int v15 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v15) {
    int v15 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v16, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v15 + 88), 0, 1, a2, a3, a4);
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit(v11, 0xFFFFFFFE, memory_order_release);
  }
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit(v13, 0xFFFFFFFE, memory_order_release);
  }
}

void sub_2170D1360(_Unwind_Exception *a1)
{
  if ((v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI::GetMaxForceAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)v12, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v4 = *((void *)this + 3);
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v4 &= 0xFFFFFFFFFFFFFFF8;
  }
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!EmptyString) {
    EmptyString = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  uint64_t v6 = *((void *)EmptyString + 10);
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v6 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = (atomic_uint *)(v6 & 0xFFFFFFFFFFFFFFF8);
  if ((v6 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v8 = (uint64_t)(v7 + 4);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    uint64_t v8 = (uint64_t)EmptyString;
  }
  unint64_t v9 = (atomic_uint *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 0xFFFFFFFFFFFFFFF8) != 0) {
    uint64_t v10 = (uint64_t *)(v9 + 4);
  }
  else {
    uint64_t v10 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  }
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v8, (uint64_t)v10, (uint64_t)&v11);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v12, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v11, a2);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit(v7, 0xFFFFFFFE, memory_order_release);
  }
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit(v9, 0xFFFFFFFE, memory_order_release);
  }
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
  sub_21697C414(&v14);
  if (v13) {
    sub_216D16E0C(v13);
  }
}

void sub_2170D1510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI::CreateMaxForceAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *((void *)this + 3);
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v8 &= 0xFFFFFFFFFFFFFFF8;
  }
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!EmptyString) {
    EmptyString = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  uint64_t v10 = *((void *)EmptyString + 10);
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v10 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v11 = (atomic_uint *)(v10 & 0xFFFFFFFFFFFFFFF8);
  if ((v10 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v12 = (uint64_t)(v11 + 4);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    uint64_t v12 = (uint64_t)EmptyString;
  }
  char v13 = (atomic_uint *)(v8 & 0xFFFFFFFFFFFFFFF8);
  if ((v8 & 0xFFFFFFFFFFFFFFF8) != 0) {
    int v14 = (uint64_t *)(v13 + 4);
  }
  else {
    int v14 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  }
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v12, (uint64_t)v14, (uint64_t)&v16);
  int v15 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v15) {
    int v15 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v16, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v15 + 56), 0, 0, a2, a3, a4);
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit(v11, 0xFFFFFFFE, memory_order_release);
  }
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit(v13, 0xFFFFFFFE, memory_order_release);
  }
}

void sub_2170D16E0(_Unwind_Exception *a1)
{
  if ((v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI::GetTargetPositionAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)v12, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v4 = *((void *)this + 3);
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v4 &= 0xFFFFFFFFFFFFFFF8;
  }
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!EmptyString) {
    EmptyString = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  uint64_t v6 = *((void *)EmptyString + 12);
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v6 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = (atomic_uint *)(v6 & 0xFFFFFFFFFFFFFFF8);
  if ((v6 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v8 = (uint64_t)(v7 + 4);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    uint64_t v8 = (uint64_t)EmptyString;
  }
  unint64_t v9 = (atomic_uint *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 0xFFFFFFFFFFFFFFF8) != 0) {
    uint64_t v10 = (uint64_t *)(v9 + 4);
  }
  else {
    uint64_t v10 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  }
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v8, (uint64_t)v10, (uint64_t)&v11);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v12, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v11, a2);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit(v7, 0xFFFFFFFE, memory_order_release);
  }
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit(v9, 0xFFFFFFFE, memory_order_release);
  }
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
  sub_21697C414(&v14);
  if (v13) {
    sub_216D16E0C(v13);
  }
}

void sub_2170D1890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI::CreateTargetPositionAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *((void *)this + 3);
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v8 &= 0xFFFFFFFFFFFFFFF8;
  }
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!EmptyString) {
    EmptyString = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  uint64_t v10 = *((void *)EmptyString + 12);
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v10 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v11 = (atomic_uint *)(v10 & 0xFFFFFFFFFFFFFFF8);
  if ((v10 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v12 = (uint64_t)(v11 + 4);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    uint64_t v12 = (uint64_t)EmptyString;
  }
  char v13 = (atomic_uint *)(v8 & 0xFFFFFFFFFFFFFFF8);
  if ((v8 & 0xFFFFFFFFFFFFFFF8) != 0) {
    int v14 = (uint64_t *)(v13 + 4);
  }
  else {
    int v14 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  }
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v12, (uint64_t)v14, (uint64_t)&v16);
  int v15 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v15) {
    int v15 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v16, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v15 + 56), 0, 0, a2, a3, a4);
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit(v11, 0xFFFFFFFE, memory_order_release);
  }
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit(v13, 0xFFFFFFFE, memory_order_release);
  }
}

void sub_2170D1A60(_Unwind_Exception *a1)
{
  if ((v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI::GetTargetVelocityAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)v12, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v4 = *((void *)this + 3);
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v4 &= 0xFFFFFFFFFFFFFFF8;
  }
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!EmptyString) {
    EmptyString = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  uint64_t v6 = *((void *)EmptyString + 13);
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v6 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = (atomic_uint *)(v6 & 0xFFFFFFFFFFFFFFF8);
  if ((v6 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v8 = (uint64_t)(v7 + 4);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    uint64_t v8 = (uint64_t)EmptyString;
  }
  unint64_t v9 = (atomic_uint *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 0xFFFFFFFFFFFFFFF8) != 0) {
    uint64_t v10 = (uint64_t *)(v9 + 4);
  }
  else {
    uint64_t v10 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  }
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v8, (uint64_t)v10, (uint64_t)&v11);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v12, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v11, a2);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit(v7, 0xFFFFFFFE, memory_order_release);
  }
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit(v9, 0xFFFFFFFE, memory_order_release);
  }
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
  sub_21697C414(&v14);
  if (v13) {
    sub_216D16E0C(v13);
  }
}

void sub_2170D1C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI::CreateTargetVelocityAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *((void *)this + 3);
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v8 &= 0xFFFFFFFFFFFFFFF8;
  }
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!EmptyString) {
    EmptyString = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  uint64_t v10 = *((void *)EmptyString + 13);
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v10 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v11 = (atomic_uint *)(v10 & 0xFFFFFFFFFFFFFFF8);
  if ((v10 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v12 = (uint64_t)(v11 + 4);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    uint64_t v12 = (uint64_t)EmptyString;
  }
  char v13 = (atomic_uint *)(v8 & 0xFFFFFFFFFFFFFFF8);
  if ((v8 & 0xFFFFFFFFFFFFFFF8) != 0) {
    int v14 = (uint64_t *)(v13 + 4);
  }
  else {
    int v14 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  }
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v12, (uint64_t)v14, (uint64_t)&v16);
  int v15 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v15) {
    int v15 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v16, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v15 + 56), 0, 0, a2, a3, a4);
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit(v11, 0xFFFFFFFE, memory_order_release);
  }
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit(v13, 0xFFFFFFFE, memory_order_release);
  }
}

void sub_2170D1DE0(_Unwind_Exception *a1)
{
  if ((v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI::GetDampingAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)v12, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v4 = *((void *)this + 3);
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v4 &= 0xFFFFFFFFFFFFFFF8;
  }
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!EmptyString) {
    EmptyString = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  uint64_t v6 = *((void *)EmptyString + 9);
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v6 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = (atomic_uint *)(v6 & 0xFFFFFFFFFFFFFFF8);
  if ((v6 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v8 = (uint64_t)(v7 + 4);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    uint64_t v8 = (uint64_t)EmptyString;
  }
  unint64_t v9 = (atomic_uint *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 0xFFFFFFFFFFFFFFF8) != 0) {
    uint64_t v10 = (uint64_t *)(v9 + 4);
  }
  else {
    uint64_t v10 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  }
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v8, (uint64_t)v10, (uint64_t)&v11);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v12, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v11, a2);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit(v7, 0xFFFFFFFE, memory_order_release);
  }
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit(v9, 0xFFFFFFFE, memory_order_release);
  }
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
  sub_21697C414(&v14);
  if (v13) {
    sub_216D16E0C(v13);
  }
}

void sub_2170D1F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI::CreateDampingAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *((void *)this + 3);
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v8 &= 0xFFFFFFFFFFFFFFF8;
  }
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!EmptyString) {
    EmptyString = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  uint64_t v10 = *((void *)EmptyString + 9);
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v10 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v11 = (atomic_uint *)(v10 & 0xFFFFFFFFFFFFFFF8);
  if ((v10 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v12 = (uint64_t)(v11 + 4);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    uint64_t v12 = (uint64_t)EmptyString;
  }
  char v13 = (atomic_uint *)(v8 & 0xFFFFFFFFFFFFFFF8);
  if ((v8 & 0xFFFFFFFFFFFFFFF8) != 0) {
    int v14 = (uint64_t *)(v13 + 4);
  }
  else {
    int v14 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  }
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v12, (uint64_t)v14, (uint64_t)&v16);
  int v15 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v15) {
    int v15 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v16, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v15 + 56), 0, 0, a2, a3, a4);
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit(v11, 0xFFFFFFFE, memory_order_release);
  }
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit(v13, 0xFFFFFFFE, memory_order_release);
  }
}

void sub_2170D2160(_Unwind_Exception *a1)
{
  if ((v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI::GetStiffnessAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)v12, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v4 = *((void *)this + 3);
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v4 &= 0xFFFFFFFFFFFFFFF8;
  }
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!EmptyString) {
    EmptyString = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  uint64_t v6 = *((void *)EmptyString + 11);
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v6 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = (atomic_uint *)(v6 & 0xFFFFFFFFFFFFFFF8);
  if ((v6 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v8 = (uint64_t)(v7 + 4);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    uint64_t v8 = (uint64_t)EmptyString;
  }
  unint64_t v9 = (atomic_uint *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 0xFFFFFFFFFFFFFFF8) != 0) {
    uint64_t v10 = (uint64_t *)(v9 + 4);
  }
  else {
    uint64_t v10 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  }
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v8, (uint64_t)v10, (uint64_t)&v11);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v12, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v11, a2);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit(v7, 0xFFFFFFFE, memory_order_release);
  }
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit(v9, 0xFFFFFFFE, memory_order_release);
  }
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
  sub_21697C414(&v14);
  if (v13) {
    sub_216D16E0C(v13);
  }
}

void sub_2170D2310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI::CreateStiffnessAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *((void *)this + 3);
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v8 &= 0xFFFFFFFFFFFFFFF8;
  }
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!EmptyString) {
    EmptyString = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  uint64_t v10 = *((void *)EmptyString + 11);
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v10 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v11 = (atomic_uint *)(v10 & 0xFFFFFFFFFFFFFFF8);
  if ((v10 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v12 = (uint64_t)(v11 + 4);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    uint64_t v12 = (uint64_t)EmptyString;
  }
  char v13 = (atomic_uint *)(v8 & 0xFFFFFFFFFFFFFFF8);
  if ((v8 & 0xFFFFFFFFFFFFFFF8) != 0) {
    int v14 = (uint64_t *)(v13 + 4);
  }
  else {
    int v14 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  }
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v12, (uint64_t)v14, (uint64_t)&v16);
  int v15 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v15) {
    int v15 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v16, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v15 + 56), 0, 0, a2, a3, a4);
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit(v11, 0xFFFFFFFE, memory_order_release);
  }
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit(v13, 0xFFFFFFFE, memory_order_release);
  }
}

void sub_2170D24E0(_Unwind_Exception *a1)
{
  if ((v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI *this)
{
  int v1 = (int)this;
  uint64_t v24 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B957D0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B957D0))
  {
    uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v3) {
      uint64_t v3 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    }
    uint64_t v4 = *((void *)v3 + 14);
    uint64_t v18 = v4;
    if ((v4 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v18 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v5) {
      uint64_t v5 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    }
    uint64_t v6 = *((void *)v5 + 10);
    uint64_t v19 = v6;
    if ((v6 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v19 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v7) {
      uint64_t v7 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    }
    uint64_t v8 = *((void *)v7 + 12);
    uint64_t v20 = v8;
    if ((v8 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v20 &= 0xFFFFFFFFFFFFFFF8;
    }
    unint64_t v9 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v9) {
      unint64_t v9 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    }
    uint64_t v10 = *((void *)v9 + 13);
    uint64_t v21 = v10;
    if ((v10 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v21 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v11 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v11) {
      uint64_t v11 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    }
    uint64_t v12 = *((void *)v11 + 9);
    uint64_t v22 = v12;
    if ((v12 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v22 &= 0xFFFFFFFFFFFFFFF8;
    }
    char v13 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v13) {
      char v13 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    }
    uint64_t v14 = *((void *)v13 + 11);
    uint64_t v23 = v14;
    if ((v14 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v23 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_216D30CFC(&qword_267B957B8, &v18, 6uLL);
    for (uint64_t i = 40; i != -8; i -= 8)
    {
      uint64_t v16 = *(uint64_t *)((char *)&v18 + i);
      if ((v16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B957B8, &dword_216758000);
    __cxa_guard_release(&qword_267B957D0);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B957F0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B957F0))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    sub_2170D28DC((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B957D8, &dword_216758000);
    __cxa_guard_release(&qword_267B957F0);
  }
  if (v1) {
    return &qword_267B957D8;
  }
  else {
    return &qword_267B957B8;
  }
}

void sub_2170D2858(_Unwind_Exception *a1)
{
}

void *sub_2170D28DC(uint64_t **a1)
{
  qword_267B957E0 = 0;
  unk_267B957E8 = 0;
  qword_267B957D8 = 0;
  sub_216973388((char **)&qword_267B957D8, ((unk_267B957C0 - qword_267B957B8) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B957D8, (void *)qword_267B957E0, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B957D8, (void *)qword_267B957E0, (uint64_t *)qword_267B957B8, unk_267B957C0, (unk_267B957C0 - qword_267B957B8) >> 3);
}

void sub_2170D2974(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI *this@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdPhysicsDriveAPI::GetSchemaAttributeNames(this);
  uint64_t v7 = SchemaAttributeNames;
  uint64_t v8 = *a2;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  if (v8)
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216973388((char **)a3, (SchemaAttributeNames[1] - *SchemaAttributeNames) >> 3);
    uint64_t v10 = (void *)*v7;
    uint64_t v11 = (void *)v7[1];
    if ((void *)*v7 != v11)
    {
      do
      {
        if ((*v10 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          uint64_t v12 = (*v10 & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else
        {
          EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
          uint64_t v12 = (uint64_t)EmptyString;
        }
        if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0) {
          char v13 = (uint64_t *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 16);
        }
        else {
          char v13 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
        }
        pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v12, (uint64_t)v13, (uint64_t)&v37);
        int v15 = *(void **)(a3 + 8);
        unint64_t v14 = *(void *)(a3 + 16);
        if ((unint64_t)v15 >= v14)
        {
          uint64_t v18 = ((uint64_t)v15 - *(void *)a3) >> 3;
          if ((unint64_t)(v18 + 1) >> 61) {
            sub_21677CB10();
          }
          uint64_t v19 = v14 - *(void *)a3;
          uint64_t v20 = v19 >> 2;
          if (v19 >> 2 <= (unint64_t)(v18 + 1)) {
            uint64_t v20 = v18 + 1;
          }
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v21 = v20;
          }
          uint64_t v36 = a3 + 16;
          if (v21) {
            uint64_t v22 = (char *)sub_21677CB28(a3 + 16, v21);
          }
          else {
            uint64_t v22 = 0;
          }
          uint64_t v23 = &v22[8 * v18];
          uint64_t v24 = &v22[8 * v21];
          unsigned int v35 = v24;
          *(void *)uint64_t v23 = v37;
          std::string v17 = v23 + 8;
          uint64_t v37 = 0;
          v34.i64[1] = (uint64_t)(v23 + 8);
          uint64_t v26 = *(char **)a3;
          uint64_t v25 = *(char **)(a3 + 8);
          if (v25 == *(char **)a3)
          {
            int64x2_t v28 = vdupq_n_s64((unint64_t)v25);
          }
          else
          {
            do
            {
              uint64_t v27 = *((void *)v25 - 1);
              v25 -= 8;
              *((void *)v23 - 1) = v27;
              v23 -= 8;
              *(void *)uint64_t v25 = 0;
            }
            while (v25 != v26);
            int64x2_t v28 = *(int64x2_t *)a3;
            std::string v17 = (void *)v34.i64[1];
            uint64_t v24 = v35;
          }
          *(void *)a3 = v23;
          *(void *)(a3 + 8) = v17;
          int64x2_t v34 = v28;
          unint64_t v29 = *(char **)(a3 + 16);
          *(void *)(a3 + 16) = v24;
          unsigned int v35 = v29;
          uint64_t v33 = v28.i64[0];
          EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_2168BE9D8((uint64_t)&v33);
          uint64_t v16 = v37;
        }
        else
        {
          uint64_t v16 = 0;
          *int v15 = v37;
          std::string v17 = v15 + 1;
          uint64_t v37 = 0;
        }
        *(void *)(a3 + 8) = v17;
        if ((v16 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        ++v10;
      }
      while (v10 != v11);
    }
  }
  else
  {
    uint64_t v30 = (uint64_t *)*SchemaAttributeNames;
    uint64_t v31 = (uint64_t *)SchemaAttributeNames[1];
    unint64_t v32 = ((uint64_t)v31 - *SchemaAttributeNames) >> 3;
    sub_21698FA28((void *)a3, v30, v31, v32);
  }
}

void sub_2170D2BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_2170D2BF4()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216D24064((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_2170D2CD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_2170D2D24(uint64_t *a1, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2, uint64_t *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (a1[1] - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    sub_21677CB10();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v10 = a1[2] - v4;
  if (v10 >> 4 > v6) {
    unint64_t v6 = v10 >> 4;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v6;
  }
  uint64_t v19 = a1 + 2;
  if (v11) {
    uint64_t v12 = (char *)sub_2168707F4(v9, v11);
  }
  else {
    uint64_t v12 = 0;
  }
  int v15 = v12;
  uint64_t v16 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v12[32 * v5];
  std::string v17 = v16;
  uint64_t v18 = &v12[32 * v11];
  *(void *)sub_216D36868(v16, a2, a3) = &unk_26C7727D0;
  std::string v17 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v17 + 32);
  sub_2170D2E30(a1, &v15);
  uint64_t v13 = a1[1];
  sub_216D3788C((uint64_t)&v15);
  return v13;
}

void sub_2170D2E1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D3788C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2170D2E30(uint64_t *a1, void *a2)
{
  uint64_t result = sub_2170D2EA8((int)a1 + 16, a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_2170D2EA8(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  for (uint64_t i = 0;
        a3 + i != a5;
        sub_2170D2F3C(a1, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(i + a7), (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(i + a3)))
  {
    i -= 32;
  }
  return a6;
}

pxrInternal__aapl__pxrReserved__::UsdSchemaBase *sub_2170D2F3C(int a1, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *this, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(this, a3);
  *(void *)uint64_t result = &unk_26C767760;
  uint64_t v5 = *((void *)a3 + 3);
  *((void *)result + 3) = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *((void *)result + 3) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)uint64_t result = &unk_26C7727D0;
  return result;
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsFilteredPairsAPI::~UsdPhysicsFilteredPairsAPI(pxrInternal__aapl__pxrReserved__::UsdPhysicsFilteredPairsAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsFilteredPairsAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *((void *)a3 + 3) = 0;
    *(void *)a3 = &unk_26C772828;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdPhysics/filteredPairsAPI.cpp";
    uint64_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 51;
    unint64_t v12 = (unint64_t)"static UsdPhysicsFilteredPairsAPI pxrInternal__aapl__pxrReserved__::UsdPhysicsFilteredPairsA"
                            "PI::Get(const UsdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *((void *)a3 + 3) = 0;
    *(void *)a3 = &unk_26C772828;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_2170D3188(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsFilteredPairsAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdPhysicsFilteredPairsAPI *this)
{
  return 5;
}

uint64_t sub_2170D31B0(pxrInternal__aapl__pxrReserved__::UsdPhysicsFilteredPairsAPI *a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsFilteredPairsAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B957F8, v4);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplySingleApplyAPI(a1, SchemaInfo, a2);
  }
  else
  {
    v12[0] = "usd/prim.h";
    v12[1] = "CanApplyAPI";
    v12[2] = 1024;
    v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(std::string *) const [SchemaType = pxrInternal_"
             "_aapl__pxrReserved__::UsdPhysicsFilteredPairsAPI]";
    char v13 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
    if (*(char *)(TypeName + 23) >= 0) {
      uint64_t v11 = (const char *)TypeName;
    }
    else {
      uint64_t v11 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v11);
    return 0;
  }
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsFilteredPairsAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdPhysicsFilteredPairsAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  if (sub_2170D3398(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, this);
    *((void *)a2 + 3) = 0;
    *(void *)a2 = &unk_26C772828;
  }
  else
  {
    int v5 = 1;
    uint64_t v6 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v7);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v8);
    uint64_t v9 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
    *((void *)a2 + 3) = 0;
    *(void *)a2 = &unk_26C772828;
    if ((v9 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
    sub_21697C414(&v7);
    if (v6) {
      sub_216D16E0C(v6);
    }
  }
}

void sub_2170D3384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2170D3398(pxrInternal__aapl__pxrReserved__::UsdPhysicsFilteredPairsAPI *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsFilteredPairsAPI::_GetStaticTfType(a1);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B957F8, v2);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(a1, SchemaInfo);
  }
  else
  {
    v10[0] = "usd/prim.h";
    v10[1] = "ApplyAPI";
    v10[2] = 1147;
    v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI() const [SchemaType = pxrInternal__aapl__pxrReserv"
             "ed__::UsdPhysicsFilteredPairsAPI]";
    char v11 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v7);
    if (*(char *)(TypeName + 23) >= 0) {
      uint64_t v9 = (const char *)TypeName;
    }
    else {
      uint64_t v9 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v9);
    return 0;
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsFilteredPairsAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsFilteredPairsAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95800, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95800))
  {
    __cxa_guard_release(&qword_267B95800);
  }
  return &qword_267B957F8;
}

void sub_2170D34CC(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsFilteredPairsAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdPhysicsFilteredPairsAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95810, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsFilteredPairsAPI *)__cxa_guard_acquire(&qword_267B95810);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdPhysicsFilteredPairsAPI::_GetStaticTfType(v2);
      byte_267B95808 = sub_216D16508((char *)&qword_267B957F8, v3, v4);
      __cxa_guard_release(&qword_267B95810);
    }
  }
  return byte_267B95808;
}

void sub_2170D354C(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsFilteredPairsAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsFilteredPairsAPI *this)
{
  return &qword_267B957F8;
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsFilteredPairsAPI::GetFilteredPairsRel(pxrInternal__aapl__pxrReserved__::UsdPhysicsFilteredPairsAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3) {
    uint64_t v3 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 312), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170D3624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsFilteredPairsAPI::CreateFilteredPairsRel(pxrInternal__aapl__pxrReserved__::UsdPhysicsFilteredPairsAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3) {
    uint64_t v3 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 312), 0, a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170D36E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsFilteredPairsAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdPhysicsFilteredPairsAPI *this)
{
  int v1 = (int)this;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95830, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95830))
  {
    qword_267B95818 = 0;
    unk_267B95820 = 0;
    qword_267B95828 = 0;
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B95818, &dword_216758000);
    __cxa_guard_release(&qword_267B95830);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95850, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95850))
  {
    SchemaAttributeNames = (uint64_t **)pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    qword_267B95838 = 0;
    unk_267B95840 = 0;
    qword_267B95848 = 0;
    sub_21698FA28(&qword_267B95838, *SchemaAttributeNames, SchemaAttributeNames[1], SchemaAttributeNames[1] - *SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B95838, &dword_216758000);
    __cxa_guard_release(&qword_267B95850);
  }
  if (v1) {
    return &qword_267B95838;
  }
  else {
    return &qword_267B95818;
  }
}

void sub_2170D3808(_Unwind_Exception *a1)
{
}

uint64_t *sub_2170D3820()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216D24064((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_2170D3900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_2170D3950()
{
  sub_2170D4000();
  sub_216779094(__p, "PhysicsFixedJoint");
  sub_2170D412C((char *)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_2170D39A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsFixedJoint::~UsdPhysicsFixedJoint(pxrInternal__aapl__pxrReserved__::UsdPhysicsFixedJoint *this)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::~UsdPhysicsJoint(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsFixedJoint::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C772880;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdPhysics/fixedJoint.cpp";
    uint64_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 57;
    unint64_t v12 = (unint64_t)"static UsdPhysicsFixedJoint pxrInternal__aapl__pxrReserved__::UsdPhysicsFixedJoint::Get(cons"
                            "t UsdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C772880;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_2170D3B6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsFixedJoint::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95860, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95860))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B95858, "PhysicsFixedJoint");
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B95858, &dword_216758000);
    __cxa_guard_release(&qword_267B95860);
  }
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v8, a2, &qword_267B95858, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C772880;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdPhysics/fixedJoint.cpp";
    uint64_t v10 = (atomic_ullong *)"Define";
    uint64_t v11 = 70;
    unint64_t v12 = (unint64_t)"static UsdPhysicsFixedJoint pxrInternal__aapl__pxrReserved__::UsdPhysicsFixedJoint::Define(c"
                            "onst UsdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C772880;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_2170D3D78(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsFixedJoint::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdPhysicsFixedJoint *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsFixedJoint::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsFixedJoint *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95870, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95870))
  {
    __cxa_guard_release(&qword_267B95870);
  }
  return &qword_267B95868;
}

void sub_2170D3E20(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsFixedJoint::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdPhysicsFixedJoint *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95880, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsFixedJoint *)__cxa_guard_acquire(&qword_267B95880);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdPhysicsFixedJoint::_GetStaticTfType(v2);
      byte_267B95878 = sub_216D16508((char *)&qword_267B95868, v3, v4);
      __cxa_guard_release(&qword_267B95880);
    }
  }
  return byte_267B95878;
}

void sub_2170D3EA0(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsFixedJoint::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsFixedJoint *this)
{
  return &qword_267B95868;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsFixedJoint::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdPhysicsFixedJoint *this)
{
  int v1 = (int)this;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B958A0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B958A0))
  {
    qword_267B95888 = 0;
    unk_267B95890 = 0;
    qword_267B95898 = 0;
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B95888, &dword_216758000);
    __cxa_guard_release(&qword_267B958A0);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B958C0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B958C0))
  {
    SchemaAttributeNames = (uint64_t **)pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint *)1);
    qword_267B958A8 = 0;
    unk_267B958B0 = 0;
    qword_267B958B8 = 0;
    sub_21698FA28(&qword_267B958A8, *SchemaAttributeNames, SchemaAttributeNames[1], SchemaAttributeNames[1] - *SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B958A8, &dword_216758000);
    __cxa_guard_release(&qword_267B958C0);
  }
  if (v1) {
    return &qword_267B958A8;
  }
  else {
    return &qword_267B95888;
  }
}

void sub_2170D3FE8(_Unwind_Exception *a1)
{
}

uint64_t *sub_2170D4000()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_2170CFF3C((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_2170D40E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_2170D412C(char *a1)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_2170D41C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2170D41E4()
{
  sub_2170D5C4C();
  sub_216779094(__p, "PhysicsJoint");
  sub_2170D5D78((char *)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_2170D4234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::~UsdPhysicsJoint(pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint *this)
{
  pxrInternal__aapl__pxrReserved__::UsdGeomImageable::~UsdGeomImageable(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C7728D8;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdPhysics/joint.cpp";
    uint64_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 57;
    unint64_t v12 = (unint64_t)"static UsdPhysicsJoint pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::Get(const UsdStage"
                            "Ptr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C7728D8;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_2170D4400(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B958D0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B958D0))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B958C8, "PhysicsJoint");
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B958C8, &dword_216758000);
    __cxa_guard_release(&qword_267B958D0);
  }
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v8, a2, &qword_267B958C8, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C7728D8;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdPhysics/joint.cpp";
    uint64_t v10 = (atomic_ullong *)"Define";
    uint64_t v11 = 70;
    unint64_t v12 = (unint64_t)"static UsdPhysicsJoint pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::Define(const UsdSt"
                            "agePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C7728D8;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_2170D460C(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B958E0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B958E0))
  {
    __cxa_guard_release(&qword_267B958E0);
  }
  return &qword_267B958D8;
}

void sub_2170D46B4(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B958F0, memory_order_acquire) & 1) == 0)
  {
    unint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint *)__cxa_guard_acquire(&qword_267B958F0);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::_GetStaticTfType(v2);
      byte_267B958E8 = sub_216D16508((char *)&qword_267B958D8, v3, v4);
      __cxa_guard_release(&qword_267B958F0);
    }
  }
  return byte_267B958E8;
}

void sub_2170D4734(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint *this)
{
  return &qword_267B958D8;
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::GetLocalPos0Attr(pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3) {
    unint64_t v3 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 360), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170D480C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::CreateLocalPos0Attr(pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8) {
    uint64_t v8 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 360), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 208), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::GetLocalRot0Attr(pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3) {
    unint64_t v3 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 376), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170D4974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::CreateLocalRot0Attr(pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8) {
    uint64_t v8 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 376), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 328), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::GetLocalPos1Attr(pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3) {
    unint64_t v3 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 368), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170D4ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::CreateLocalPos1Attr(pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8) {
    uint64_t v8 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 368), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 208), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::GetLocalRot1Attr(pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3) {
    unint64_t v3 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 384), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170D4C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::CreateLocalRot1Attr(pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8) {
    uint64_t v8 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 384), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 328), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::GetJointEnabledAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3) {
    unint64_t v3 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 344), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170D4DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::CreateJointEnabledAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8) {
    uint64_t v8 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 344), v9, 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::GetCollisionEnabledAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3) {
    unint64_t v3 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 248), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170D4F14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::CreateCollisionEnabledAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8) {
    uint64_t v8 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 248), v9, 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::GetExcludeFromArticulationAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3) {
    unint64_t v3 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 296), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170D507C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::CreateExcludeFromArticulationAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8) {
    uint64_t v8 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 296), v9, 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::GetBreakForceAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3) {
    unint64_t v3 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 224), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170D51E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::CreateBreakForceAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8) {
    uint64_t v8 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 224), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::GetBreakTorqueAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3) {
    unint64_t v3 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 232), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170D534C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::CreateBreakTorqueAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8) {
    uint64_t v8 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 232), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::GetBody0Rel(pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3) {
    unint64_t v3 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 208), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170D54B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::CreateBody0Rel(pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3) {
    unint64_t v3 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 208), 0, a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170D5570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::GetBody1Rel(pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3) {
    unint64_t v3 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 216), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170D5628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::CreateBody1Rel(pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3) {
    unint64_t v3 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 216), 0, a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170D56E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint *this)
{
  int v1 = (int)this;
  uint64_t v33 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95910, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95910))
  {
    unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v3) {
      unint64_t v3 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    }
    uint64_t v4 = *((void *)v3 + 45);
    uint64_t v24 = v4;
    if ((v4 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v24 &= 0xFFFFFFFFFFFFFFF8;
    }
    char v5 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v5) {
      char v5 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    }
    uint64_t v6 = *((void *)v5 + 47);
    uint64_t v25 = v6;
    if ((v6 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v25 &= 0xFFFFFFFFFFFFFFF8;
    }
    int v7 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v7) {
      int v7 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    }
    uint64_t v8 = *((void *)v7 + 46);
    uint64_t v26 = v8;
    if ((v8 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v26 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v9) {
      uint64_t v9 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    }
    uint64_t v10 = *((void *)v9 + 48);
    uint64_t v27 = v10;
    if ((v10 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v27 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v11 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v11) {
      uint64_t v11 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    }
    uint64_t v12 = *((void *)v11 + 43);
    uint64_t v28 = v12;
    if ((v12 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v28 &= 0xFFFFFFFFFFFFFFF8;
    }
    char v13 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v13) {
      char v13 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    }
    uint64_t v14 = *((void *)v13 + 31);
    uint64_t v29 = v14;
    if ((v14 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v29 &= 0xFFFFFFFFFFFFFFF8;
    }
    int v15 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v15) {
      int v15 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    }
    uint64_t v16 = *((void *)v15 + 37);
    uint64_t v30 = v16;
    if ((v16 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v30 &= 0xFFFFFFFFFFFFFFF8;
    }
    std::string v17 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v17) {
      std::string v17 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    }
    uint64_t v18 = *((void *)v17 + 28);
    uint64_t v31 = v18;
    if ((v18 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v31 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v19 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v19) {
      uint64_t v19 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    }
    uint64_t v20 = *((void *)v19 + 29);
    uint64_t v32 = v20;
    if ((v20 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v32 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_216D30CFC(&qword_267B958F8, &v24, 9uLL);
    for (uint64_t i = 64; i != -8; i -= 8)
    {
      uint64_t v22 = *(uint64_t *)((char *)&v24 + i);
      if ((v22 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B958F8, &dword_216758000);
    __cxa_guard_release(&qword_267B95910);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95930, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95930))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdGeomImageable::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdGeomImageable *)1);
    sub_2170D5B94((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B95918, &dword_216758000);
    __cxa_guard_release(&qword_267B95930);
  }
  if (v1) {
    return &qword_267B95918;
  }
  else {
    return &qword_267B958F8;
  }
}

void sub_2170D5B10(_Unwind_Exception *a1)
{
}

void *sub_2170D5B94(uint64_t **a1)
{
  qword_267B95920 = 0;
  unk_267B95928 = 0;
  qword_267B95918 = 0;
  sub_216973388((char **)&qword_267B95918, ((unk_267B95900 - qword_267B958F8) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B95918, (void *)qword_267B95920, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B95918, (void *)qword_267B95920, (uint64_t *)qword_267B958F8, unk_267B95900, (unk_267B95900 - qword_267B958F8) >> 3);
}

void sub_2170D5C2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_2170D5C4C()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216F48EC4((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_2170D5D2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_2170D5D78(char *a1)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_2170D5E0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI::~UsdPhysicsLimitAPI(pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI::Get(uint64_t *a1@<X0>, pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v8 & 1 | (unint64_t)v6)
  {
    uint64_t v12 = 0;
    if (pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI::IsPhysicsLimitAPIPath(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v12, v7))
    {
      uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a2, &v11);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v9, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, (uint64_t)&v13);
      sub_216D36868(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13, &v12);
      *(void *)a3 = &unk_26C772930;
      if ((v16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
      sub_21697C414(&v15);
      if (v14) {
        sub_216D16E0C(v14);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
      sub_21697C414(&v11);
    }
    else
    {
      char v13 = "usdPhysics/limitAPI.cpp";
      uint64_t v14 = (atomic_ullong *)"Get";
      uint64_t v15 = 63;
      unint64_t v16 = (unint64_t)"static UsdPhysicsLimitAPI pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI::Get(const "
                              "UsdStagePtr &, const SdfPath &)";
      char v17 = 0;
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid limit path <%s>.", Text);
      LODWORD(v13) = 1;
      uint64_t v14 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
      unint64_t v16 = 0;
      uint64_t v11 = 0;
      sub_216D36868(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13, &v11);
      *(void *)a3 = &unk_26C772930;
      if ((v11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((v16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
      sub_21697C414(&v15);
      if (v14) {
        sub_216D16E0C(v14);
      }
    }
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    char v13 = "usdPhysics/limitAPI.cpp";
    uint64_t v14 = (atomic_ullong *)"Get";
    uint64_t v15 = 58;
    unint64_t v16 = (unint64_t)"static UsdPhysicsLimitAPI pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI::Get(const Us"
                            "dStagePtr &, const SdfPath &)";
    char v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    uint64_t v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    unint64_t v16 = 0;
    uint64_t v12 = 0;
    sub_216D36868(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13, &v12);
    *(void *)a3 = &unk_26C772930;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
    sub_21697C414(&v15);
    if (v14) {
      sub_216D16E0C(v14);
    }
  }
}

void sub_2170D6168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  if ((a3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216D16AD8((uint64_t)va);
  if ((a4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI::IsPhysicsLimitAPIPath(pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(this)) {
    return 0;
  }
  Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName(this);
  if (*((char *)Name + 23) < 0)
  {
    sub_216778F24(&__p, (void *)*Name, Name[1]);
  }
  else
  {
    long long v6 = *(_OWORD *)Name;
    __p.__r_.__value_.__r.__words[2] = Name[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v6;
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::TokenizeIdentifierAsTokens((unsigned __int8 *)&__p, (uint64_t *)&v20);
  unint64_t v9 = *(void *)(v21 - 8);
  unint64_t v19 = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    unint64_t v19 = v9 & 0xFFFFFFFFFFFFFFF8;
    v9 &= 0xFFFFFFFFFFFFFFF8;
  }
  if (!pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI::IsSchemaPropertyBaseName((pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI *)&v19, v8)&& (uint64_t v10 = v20, (unint64_t)(v21 - (void)v20) >= 9)&& (*v10 & 0xFFFFFFFFFFFFFFF8) == (*(void *)sub_2170D6854() & 0xFFFFFFFFFFFFFFF8))
  {
    uint64_t v12 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_2170D6854();
    if ((*(void *)v12 & 0xFFFFFFFFFFFFFFF8) != 0) {
      EmptyString = (uint64_t *)((*(void *)v12 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v12);
    }
    if (*((char *)EmptyString + 23) < 0) {
      uint64_t v14 = EmptyString[1];
    }
    else {
      uint64_t v14 = *((unsigned __int8 *)EmptyString + 23);
    }
    std::string::basic_string(&v17, &__p, v14 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v23);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v18);
    uint64_t v15 = *(void *)a2;
    uint64_t v16 = *(void *)a2 & 7;
    if (&v18 == (uint64_t *)a2)
    {
      if (v16) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    else
    {
      if (v16) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      *(void *)a2 = v18;
      uint64_t v18 = 0;
    }
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
    uint64_t v7 = 1;
    unint64_t v9 = v19;
  }
  else
  {
    uint64_t v7 = 0;
  }
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  v17.__r_.__value_.__r.__words[0] = (std::string::size_type)&v20;
  sub_216889A04((void ***)&v17);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v7;
}

void sub_2170D63E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if ((v25 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  std::string __p = &a17;
  sub_216889A04((void ***)&__p);
  if (a25 < 0) {
    operator delete(a20);
  }
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdSchemaBase *pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI::Get@<X0>(pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t result = sub_216D36868(a3, this, (uint64_t *)a2);
  *(void *)uint64_t result = &unk_26C772930;
  return result;
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI::GetAll(pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI *this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI::_GetStaticTfType(this);
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::_GetMultipleApplyInstanceNames(this, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&qword_267B95960, (uint64_t)&v8);
  char v5 = v8;
  long long v6 = v9;
  if (v8 != v9)
  {
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)a2[1];
    do
    {
      if ((unint64_t)v7 >= a2[2])
      {
        uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)sub_2170D7B18(a2, this, v5);
      }
      else
      {
        sub_216D36868(v7, this, v5);
        *(void *)uint64_t v7 = &unk_26C772930;
        uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v7 + 32);
        a2[1] = (uint64_t)v7;
      }
      a2[1] = (uint64_t)v7;
      ++v5;
    }
    while (v5 != v6);
  }
  uint64_t v10 = (void **)&v8;
  sub_216889A04(&v10);
}

void sub_2170D656C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_216D37524((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95968, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95968))
  {
    __cxa_guard_release(&qword_267B95968);
  }
  return &qword_267B95960;
}

void sub_2170D6614(_Unwind_Exception *a1)
{
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI::IsSchemaPropertyBaseName(pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  v13[1] = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95950, memory_order_acquire) & 1) == 0)
  {
    char v4 = this;
    int v5 = __cxa_guard_acquire(&qword_267B95950);
    this = v4;
    if (v5)
    {
      long long v6 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
      if (!v6) {
        long long v6 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
      }
      if ((*((void *)v6 + 19) & 0xFFFFFFFFFFFFFFF8) != 0) {
        EmptyString = (uint64_t *)((*((void *)v6 + 19) & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
      }
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetMultipleApplyNameTemplateBaseName((uint64_t)EmptyString, &v12);
      char v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
      if (!v8) {
        char v8 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
      }
      if ((*((void *)v8 + 18) & 0xFFFFFFFFFFFFFFF8) != 0) {
        unint64_t v9 = (uint64_t *)((*((void *)v8 + 18) & 0xFFFFFFFFFFFFFFF8) + 16);
      }
      else {
        unint64_t v9 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
      }
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetMultipleApplyNameTemplateBaseName((uint64_t)v9, v13);
      sub_216D30CFC(qword_267B95938, &v12, 2uLL);
      for (uint64_t i = 1; i != -1; --i)
      {
        uint64_t v11 = v13[i - 1];
        if ((v11 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
      }
      __cxa_atexit((void (*)(void *))sub_216B554D0, qword_267B95938, &dword_216758000);
      __cxa_guard_release(&qword_267B95950);
      this = v4;
    }
  }
  unint64_t v2 = (void *)qword_267B95938[0];
  if (qword_267B95938[0] != unk_267B95940)
  {
    while ((*v2 & 0xFFFFFFFFFFFFFFF8) != (*(void *)this & 0xFFFFFFFFFFFFFFF8))
    {
      if (++v2 == (void *)unk_267B95940)
      {
        unint64_t v2 = (void *)unk_267B95940;
        return v2 != (void *)unk_267B95940;
      }
    }
  }
  return v2 != (void *)unk_267B95940;
}

void sub_2170D67EC(_Unwind_Exception *a1)
{
  uint64_t v3 = 8;
  while (1)
  {
    uint64_t v4 = *(void *)(v1 + v3);
    if ((v4 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v3 -= 8;
    if (v3 == -8)
    {
      __cxa_guard_abort(&qword_267B95950);
      _Unwind_Resume(a1);
    }
  }
}

unint64_t sub_2170D6854()
{
  v0 = (char *)atomic_load((unint64_t *)&qword_267B95958);
  if (!v0)
  {
    v0 = (char *)operator new(0x20uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0, "limit", 0);
    uint64_t v2 = *(void *)v0;
    if ((*(void *)v0 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v2 &= 0xFFFFFFFFFFFFFFF8;
    }
    *((void *)v0 + 1) = 0;
    *((void *)v0 + 2) = 0;
    *((void *)v0 + 3) = 0;
    long long v6 = (void **)(v0 + 8);
    char v7 = 0;
    uint64_t v3 = operator new(8uLL);
    *((void *)v0 + 1) = v3;
    *((void *)v0 + 2) = v3;
    *uint64_t v3 = v2;
    uint64_t v4 = v3 + 1;
    *((void *)v0 + 3) = v3 + 1;
    if ((v2 & 7) != 0)
    {
      if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
        *v3 &= 0xFFFFFFFFFFFFFFF8;
      }
      *((void *)v0 + 2) = v4;
      atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    else
    {
      *((void *)v0 + 2) = v4;
    }
    uint64_t v5 = 0;
    atomic_compare_exchange_strong(&qword_267B95958, (unint64_t *)&v5, (unint64_t)v0);
    if (v5)
    {
      long long v6 = (void **)(v0 + 8);
      sub_216889A04(&v6);
      if ((*(void *)v0 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v0 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v0);
      return atomic_load((unint64_t *)&qword_267B95958);
    }
  }
  return (unint64_t)v0;
}

void sub_2170D6978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_216889A04(&a9);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  operator delete(v9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI *this)
{
  return 6;
}

uint64_t sub_2170D69D4(pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B95960, v6);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplyMultipleApplyAPI(a1, SchemaInfo, a2, a3);
  }
  else
  {
    v14[0] = "usd/prim.h";
    v14[1] = "CanApplyAPI";
    v14[2] = 1059;
    v14[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(const TfToken &, std::string *) const [SchemaTy"
             "pe = pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI]";
    char v15 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v11);
    if (*(char *)(TypeName + 23) >= 0) {
      char v13 = (const char *)TypeName;
    }
    else {
      char v13 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v13);
    return 0;
  }
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  if (sub_2170D6C08(this, a2))
  {
    sub_216D36868(a3, this, (uint64_t *)a2);
    *(void *)a3 = &unk_26C772930;
  }
  else
  {
    int v8 = 1;
    unint64_t v9 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v10);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v11);
    uint64_t v12 = 0;
    uint64_t v7 = 0;
    sub_216D36868(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v8, &v7);
    *(void *)a3 = &unk_26C772930;
    if ((v7 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
    sub_21697C414(&v10);
    if (v9) {
      sub_216D16E0C(v9);
    }
  }
}

void sub_2170D6BDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if ((a3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2170D6C08(pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B95960, v4);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplyMultipleApplyAPI(a1, SchemaInfo, a2);
  }
  else
  {
    v12[0] = "usd/prim.h";
    v12[1] = "ApplyAPI";
    v12[2] = 1188;
    v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI(const TfToken &) const [SchemaType = pxrInternal__"
             "aapl__pxrReserved__::UsdPhysicsLimitAPI]";
    char v13 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
    if (*(char *)(TypeName + 23) >= 0) {
      int v11 = (const char *)TypeName;
    }
    else {
      int v11 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v11);
    return 0;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95978, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI *)__cxa_guard_acquire(&qword_267B95978);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI::_GetStaticTfType(v2);
      byte_267B95970 = sub_216D16508((char *)&qword_267B95960, v3, v4);
      __cxa_guard_release(&qword_267B95978);
    }
  }
  return byte_267B95970;
}

void sub_2170D6D40(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI *this)
{
  return &qword_267B95960;
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI::GetLowAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)v12, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v4 = *((void *)this + 3);
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v4 &= 0xFFFFFFFFFFFFFFF8;
  }
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!EmptyString) {
    EmptyString = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  uint64_t v6 = *((void *)EmptyString + 19);
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v6 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = (atomic_uint *)(v6 & 0xFFFFFFFFFFFFFFF8);
  if ((v6 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v8 = (uint64_t)(v7 + 4);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    uint64_t v8 = (uint64_t)EmptyString;
  }
  unint64_t v9 = (atomic_uint *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 0xFFFFFFFFFFFFFFF8) != 0) {
    int v10 = (uint64_t *)(v9 + 4);
  }
  else {
    int v10 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  }
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v8, (uint64_t)v10, (uint64_t)&v11);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v12, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v11, a2);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit(v7, 0xFFFFFFFE, memory_order_release);
  }
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit(v9, 0xFFFFFFFE, memory_order_release);
  }
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
  sub_21697C414(&v14);
  if (v13) {
    sub_216D16E0C(v13);
  }
}

void sub_2170D6EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI::CreateLowAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *((void *)this + 3);
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v8 &= 0xFFFFFFFFFFFFFFF8;
  }
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!EmptyString) {
    EmptyString = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  uint64_t v10 = *((void *)EmptyString + 19);
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v10 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v11 = (atomic_uint *)(v10 & 0xFFFFFFFFFFFFFFF8);
  if ((v10 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v12 = (uint64_t)(v11 + 4);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    uint64_t v12 = (uint64_t)EmptyString;
  }
  char v13 = (atomic_uint *)(v8 & 0xFFFFFFFFFFFFFFF8);
  if ((v8 & 0xFFFFFFFFFFFFFFF8) != 0) {
    int v14 = (uint64_t *)(v13 + 4);
  }
  else {
    int v14 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  }
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v12, (uint64_t)v14, (uint64_t)&v16);
  int v15 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v15) {
    int v15 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v16, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v15 + 56), 0, 0, a2, a3, a4);
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit(v11, 0xFFFFFFFE, memory_order_release);
  }
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit(v13, 0xFFFFFFFE, memory_order_release);
  }
}

void sub_2170D70B0(_Unwind_Exception *a1)
{
  if ((v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI::GetHighAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)v12, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v4 = *((void *)this + 3);
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v4 &= 0xFFFFFFFFFFFFFFF8;
  }
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!EmptyString) {
    EmptyString = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  uint64_t v6 = *((void *)EmptyString + 18);
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v6 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = (atomic_uint *)(v6 & 0xFFFFFFFFFFFFFFF8);
  if ((v6 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v8 = (uint64_t)(v7 + 4);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    uint64_t v8 = (uint64_t)EmptyString;
  }
  unint64_t v9 = (atomic_uint *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 0xFFFFFFFFFFFFFFF8) != 0) {
    uint64_t v10 = (uint64_t *)(v9 + 4);
  }
  else {
    uint64_t v10 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  }
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v8, (uint64_t)v10, (uint64_t)&v11);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v12, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v11, a2);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit(v7, 0xFFFFFFFE, memory_order_release);
  }
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit(v9, 0xFFFFFFFE, memory_order_release);
  }
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
  sub_21697C414(&v14);
  if (v13) {
    sub_216D16E0C(v13);
  }
}

void sub_2170D7260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI::CreateHighAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = *((void *)this + 3);
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v8 &= 0xFFFFFFFFFFFFFFF8;
  }
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!EmptyString) {
    EmptyString = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  uint64_t v10 = *((void *)EmptyString + 18);
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v10 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v11 = (atomic_uint *)(v10 & 0xFFFFFFFFFFFFFFF8);
  if ((v10 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    uint64_t v12 = (uint64_t)(v11 + 4);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    uint64_t v12 = (uint64_t)EmptyString;
  }
  char v13 = (atomic_uint *)(v8 & 0xFFFFFFFFFFFFFFF8);
  if ((v8 & 0xFFFFFFFFFFFFFFF8) != 0) {
    int v14 = (uint64_t *)(v13 + 4);
  }
  else {
    int v14 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  }
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v12, (uint64_t)v14, (uint64_t)&v16);
  int v15 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v15) {
    int v15 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v16, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v15 + 56), 0, 0, a2, a3, a4);
  if ((v16 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit(v11, 0xFFFFFFFE, memory_order_release);
  }
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit(v13, 0xFFFFFFFE, memory_order_release);
  }
}

void sub_2170D7430(_Unwind_Exception *a1)
{
  if ((v1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI *this)
{
  int v1 = (int)this;
  uint64_t v14 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95998, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95998))
  {
    uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v3) {
      uint64_t v3 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    }
    uint64_t v4 = *((void *)v3 + 19);
    uint64_t v12 = v4;
    if ((v4 & 7) != 0)
    {
      uint64_t v5 = (atomic_uint *)(v4 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v5, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v12 = (uint64_t)v5;
      }
    }
    uint64_t v6 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v6) {
      uint64_t v6 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    }
    uint64_t v7 = (atomic_uint *)*((void *)v6 + 18);
    char v13 = v7;
    if ((v7 & 7) != 0)
    {
      uint64_t v8 = (atomic_uint *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
        char v13 = v8;
      }
    }
    sub_216D30CFC(&qword_267B95980, &v12, 2uLL);
    for (uint64_t i = 8; i != -8; i -= 8)
    {
      uint64_t v10 = *(uint64_t *)((char *)&v12 + i);
      if ((v10 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B95980, &dword_216758000);
    __cxa_guard_release(&qword_267B95998);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B959B8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B959B8))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    sub_2170D76D0((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B959A0, &dword_216758000);
    __cxa_guard_release(&qword_267B959B8);
  }
  if (v1) {
    return &qword_267B959A0;
  }
  else {
    return &qword_267B95980;
  }
}

void sub_2170D7658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  __cxa_guard_abort(&qword_267B95998);
  _Unwind_Resume(a1);
}

void *sub_2170D76D0(uint64_t **a1)
{
  qword_267B959A8 = 0;
  unk_267B959B0 = 0;
  qword_267B959A0 = 0;
  sub_216973388((char **)&qword_267B959A0, ((unk_267B95988 - qword_267B95980) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B959A0, (void *)qword_267B959A8, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B959A0, (void *)qword_267B959A8, (uint64_t *)qword_267B95980, unk_267B95988, (unk_267B95988 - qword_267B95980) >> 3);
}

void sub_2170D7768(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI *this@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdPhysicsLimitAPI::GetSchemaAttributeNames(this);
  uint64_t v7 = SchemaAttributeNames;
  uint64_t v8 = *a2;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  if (v8)
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_216973388((char **)a3, (SchemaAttributeNames[1] - *SchemaAttributeNames) >> 3);
    uint64_t v10 = (void *)*v7;
    uint64_t v11 = (void *)v7[1];
    if ((void *)*v7 != v11)
    {
      do
      {
        if ((*v10 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          uint64_t v12 = (*v10 & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else
        {
          EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
          uint64_t v12 = (uint64_t)EmptyString;
        }
        if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0) {
          char v13 = (uint64_t *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 16);
        }
        else {
          char v13 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
        }
        pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v12, (uint64_t)v13, (uint64_t)&v37);
        int v15 = *(void **)(a3 + 8);
        unint64_t v14 = *(void *)(a3 + 16);
        if ((unint64_t)v15 >= v14)
        {
          uint64_t v18 = ((uint64_t)v15 - *(void *)a3) >> 3;
          if ((unint64_t)(v18 + 1) >> 61) {
            sub_21677CB10();
          }
          uint64_t v19 = v14 - *(void *)a3;
          uint64_t v20 = v19 >> 2;
          if (v19 >> 2 <= (unint64_t)(v18 + 1)) {
            uint64_t v20 = v18 + 1;
          }
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v21 = v20;
          }
          uint64_t v36 = a3 + 16;
          if (v21) {
            uint64_t v22 = (char *)sub_21677CB28(a3 + 16, v21);
          }
          else {
            uint64_t v22 = 0;
          }
          char v23 = &v22[8 * v18];
          uint64_t v24 = &v22[8 * v21];
          unsigned int v35 = v24;
          *(void *)char v23 = v37;
          std::string v17 = v23 + 8;
          uint64_t v37 = 0;
          v34.i64[1] = (uint64_t)(v23 + 8);
          uint64_t v26 = *(char **)a3;
          uint64_t v25 = *(char **)(a3 + 8);
          if (v25 == *(char **)a3)
          {
            int64x2_t v28 = vdupq_n_s64((unint64_t)v25);
          }
          else
          {
            do
            {
              uint64_t v27 = *((void *)v25 - 1);
              v25 -= 8;
              *((void *)v23 - 1) = v27;
              v23 -= 8;
              *(void *)uint64_t v25 = 0;
            }
            while (v25 != v26);
            int64x2_t v28 = *(int64x2_t *)a3;
            std::string v17 = (void *)v34.i64[1];
            uint64_t v24 = v35;
          }
          *(void *)a3 = v23;
          *(void *)(a3 + 8) = v17;
          int64x2_t v34 = v28;
          uint64_t v29 = *(char **)(a3 + 16);
          *(void *)(a3 + 16) = v24;
          unsigned int v35 = v29;
          uint64_t v33 = v28.i64[0];
          EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_2168BE9D8((uint64_t)&v33);
          uint64_t v16 = v37;
        }
        else
        {
          uint64_t v16 = 0;
          *int v15 = v37;
          std::string v17 = v15 + 1;
          uint64_t v37 = 0;
        }
        *(void *)(a3 + 8) = v17;
        if ((v16 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        ++v10;
      }
      while (v10 != v11);
    }
  }
  else
  {
    uint64_t v30 = (uint64_t *)*SchemaAttributeNames;
    uint64_t v31 = (uint64_t *)SchemaAttributeNames[1];
    unint64_t v32 = ((uint64_t)v31 - *SchemaAttributeNames) >> 3;
    sub_21698FA28((void *)a3, v30, v31, v32);
  }
}

void sub_2170D79A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_2170D79E8()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216D24064((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_2170D7AC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_2170D7B18(uint64_t *a1, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2, uint64_t *a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = (a1[1] - *a1) >> 5;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59) {
    sub_21677CB10();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v10 = a1[2] - v4;
  if (v10 >> 4 > v6) {
    unint64_t v6 = v10 >> 4;
  }
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v6;
  }
  uint64_t v19 = a1 + 2;
  if (v11) {
    uint64_t v12 = (char *)sub_2168707F4(v9, v11);
  }
  else {
    uint64_t v12 = 0;
  }
  int v15 = v12;
  uint64_t v16 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v12[32 * v5];
  std::string v17 = v16;
  uint64_t v18 = &v12[32 * v11];
  *(void *)sub_216D36868(v16, a2, a3) = &unk_26C772930;
  std::string v17 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v17 + 32);
  sub_2170D7C24(a1, &v15);
  uint64_t v13 = a1[1];
  sub_216D3788C((uint64_t)&v15);
  return v13;
}

void sub_2170D7C10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D3788C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2170D7C24(uint64_t *a1, void *a2)
{
  uint64_t result = sub_2170D7C9C((int)a1 + 16, a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_2170D7C9C(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  for (uint64_t i = 0;
        a3 + i != a5;
        sub_2170D7D30(a1, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(i + a7), (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(i + a3)))
  {
    i -= 32;
  }
  return a6;
}

pxrInternal__aapl__pxrReserved__::UsdSchemaBase *sub_2170D7D30(int a1, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *this, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3)
{
  uint64_t result = pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(this, a3);
  *(void *)uint64_t result = &unk_26C767760;
  uint64_t v5 = *((void *)a3 + 3);
  *((void *)result + 3) = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *((void *)result + 3) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(void *)uint64_t result = &unk_26C772930;
  return result;
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI::~UsdPhysicsMassAPI(pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *((void *)a3 + 3) = 0;
    *(void *)a3 = &unk_26C772988;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdPhysics/massAPI.cpp";
    uint64_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 51;
    unint64_t v12 = (unint64_t)"static UsdPhysicsMassAPI pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI::Get(const UsdS"
                            "tagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *((void *)a3 + 3) = 0;
    *(void *)a3 = &unk_26C772988;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_2170D7F7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI *this)
{
  return 5;
}

uint64_t sub_2170D7FA4(pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI *a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B959C0, v4);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplySingleApplyAPI(a1, SchemaInfo, a2);
  }
  else
  {
    v12[0] = "usd/prim.h";
    v12[1] = "CanApplyAPI";
    v12[2] = 1024;
    v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(std::string *) const [SchemaType = pxrInternal_"
             "_aapl__pxrReserved__::UsdPhysicsMassAPI]";
    char v13 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
    if (*(char *)(TypeName + 23) >= 0) {
      uint64_t v11 = (const char *)TypeName;
    }
    else {
      uint64_t v11 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v11);
    return 0;
  }
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  if (sub_2170D818C(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, this);
    *((void *)a2 + 3) = 0;
    *(void *)a2 = &unk_26C772988;
  }
  else
  {
    int v5 = 1;
    uint64_t v6 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v7);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v8);
    uint64_t v9 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
    *((void *)a2 + 3) = 0;
    *(void *)a2 = &unk_26C772988;
    if ((v9 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
    sub_21697C414(&v7);
    if (v6) {
      sub_216D16E0C(v6);
    }
  }
}

void sub_2170D8178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2170D818C(pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI::_GetStaticTfType(a1);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B959C0, v2);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(a1, SchemaInfo);
  }
  else
  {
    v10[0] = "usd/prim.h";
    v10[1] = "ApplyAPI";
    v10[2] = 1147;
    v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI() const [SchemaType = pxrInternal__aapl__pxrReserv"
             "ed__::UsdPhysicsMassAPI]";
    char v11 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v7);
    if (*(char *)(TypeName + 23) >= 0) {
      uint64_t v9 = (const char *)TypeName;
    }
    else {
      uint64_t v9 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v9);
    return 0;
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B959C8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B959C8))
  {
    __cxa_guard_release(&qword_267B959C8);
  }
  return &qword_267B959C0;
}

void sub_2170D82C0(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B959D8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI *)__cxa_guard_acquire(&qword_267B959D8);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI::_GetStaticTfType(v2);
      byte_267B959D0 = sub_216D16508((char *)&qword_267B959C0, v3, v4);
      __cxa_guard_release(&qword_267B959D8);
    }
  }
  return byte_267B959D0;
}

void sub_2170D8340(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI *this)
{
  return &qword_267B959C0;
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI::GetMassAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3) {
    uint64_t v3 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 400), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170D8418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI::CreateMassAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8) {
    uint64_t v8 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 400), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI::GetDensityAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3) {
    uint64_t v3 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 272), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170D8580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI::CreateDensityAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8) {
    uint64_t v8 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 272), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI::GetCenterOfMassAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3) {
    uint64_t v3 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 240), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170D86E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI::CreateCenterOfMassAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8) {
    uint64_t v8 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 240), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 208), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI::GetDiagonalInertiaAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3) {
    uint64_t v3 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 280), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170D8850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI::CreateDiagonalInertiaAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8) {
    uint64_t v8 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 280), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 160), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI::GetPrincipalAxesAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3) {
    uint64_t v3 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 432), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170D89B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI::CreatePrincipalAxesAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8) {
    uint64_t v8 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 432), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 328), 0, 0, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI *this)
{
  int v1 = (int)this;
  uint64_t v21 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B959F8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B959F8))
  {
    uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v3) {
      uint64_t v3 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    }
    uint64_t v4 = *((void *)v3 + 50);
    uint64_t v16 = v4;
    if ((v4 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v16 &= 0xFFFFFFFFFFFFFFF8;
    }
    int v5 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v5) {
      int v5 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    }
    uint64_t v6 = *((void *)v5 + 34);
    uint64_t v17 = v6;
    if ((v6 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v17 &= 0xFFFFFFFFFFFFFFF8;
    }
    int v7 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v7) {
      int v7 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    }
    uint64_t v8 = *((void *)v7 + 30);
    uint64_t v18 = v8;
    if ((v8 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v18 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v9) {
      uint64_t v9 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    }
    uint64_t v10 = *((void *)v9 + 35);
    uint64_t v19 = v10;
    if ((v10 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v19 &= 0xFFFFFFFFFFFFFFF8;
    }
    char v11 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v11) {
      char v11 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    }
    uint64_t v12 = *((void *)v11 + 54);
    uint64_t v20 = v12;
    if ((v12 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v20 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_216D30CFC(&qword_267B959E0, &v16, 5uLL);
    for (uint64_t i = 32; i != -8; i -= 8)
    {
      uint64_t v14 = *(uint64_t *)((char *)&v16 + i);
      if ((v14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B959E0, &dword_216758000);
    __cxa_guard_release(&qword_267B959F8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95A18, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95A18))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    sub_2170D8DE8((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B95A00, &dword_216758000);
    __cxa_guard_release(&qword_267B95A18);
  }
  if (v1) {
    return &qword_267B95A00;
  }
  else {
    return &qword_267B959E0;
  }
}

void sub_2170D8D64(_Unwind_Exception *a1)
{
}

void *sub_2170D8DE8(uint64_t **a1)
{
  qword_267B95A08 = 0;
  unk_267B95A10 = 0;
  qword_267B95A00 = 0;
  sub_216973388((char **)&qword_267B95A00, ((unk_267B959E8 - qword_267B959E0) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B95A00, (void *)qword_267B95A08, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B95A00, (void *)qword_267B95A08, (uint64_t *)qword_267B959E0, unk_267B959E8, (unk_267B959E8 - qword_267B959E0) >> 3);
}

void sub_2170D8E80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_2170D8EA0()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216D24064((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_2170D8F80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI::~UsdPhysicsMaterialAPI(pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *((void *)a3 + 3) = 0;
    *(void *)a3 = &unk_26C7729E0;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdPhysics/materialAPI.cpp";
    uint64_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 51;
    unint64_t v12 = (unint64_t)"static UsdPhysicsMaterialAPI pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI::Get(co"
                            "nst UsdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *((void *)a3 + 3) = 0;
    *(void *)a3 = &unk_26C7729E0;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_2170D918C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI *this)
{
  return 5;
}

uint64_t sub_2170D91B4(pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI *a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B95A20, v4);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplySingleApplyAPI(a1, SchemaInfo, a2);
  }
  else
  {
    v12[0] = "usd/prim.h";
    v12[1] = "CanApplyAPI";
    v12[2] = 1024;
    v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(std::string *) const [SchemaType = pxrInternal_"
             "_aapl__pxrReserved__::UsdPhysicsMaterialAPI]";
    char v13 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
    if (*(char *)(TypeName + 23) >= 0) {
      uint64_t v11 = (const char *)TypeName;
    }
    else {
      uint64_t v11 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v11);
    return 0;
  }
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  if (sub_2170D939C(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, this);
    *((void *)a2 + 3) = 0;
    *(void *)a2 = &unk_26C7729E0;
  }
  else
  {
    int v5 = 1;
    uint64_t v6 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v7);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v8);
    uint64_t v9 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
    *((void *)a2 + 3) = 0;
    *(void *)a2 = &unk_26C7729E0;
    if ((v9 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
    sub_21697C414(&v7);
    if (v6) {
      sub_216D16E0C(v6);
    }
  }
}

void sub_2170D9388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2170D939C(pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI::_GetStaticTfType(a1);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B95A20, v2);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(a1, SchemaInfo);
  }
  else
  {
    v10[0] = "usd/prim.h";
    v10[1] = "ApplyAPI";
    v10[2] = 1147;
    v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI() const [SchemaType = pxrInternal__aapl__pxrReserv"
             "ed__::UsdPhysicsMaterialAPI]";
    char v11 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v7);
    if (*(char *)(TypeName + 23) >= 0) {
      uint64_t v9 = (const char *)TypeName;
    }
    else {
      uint64_t v9 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v9);
    return 0;
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95A28, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95A28))
  {
    __cxa_guard_release(&qword_267B95A28);
  }
  return &qword_267B95A20;
}

void sub_2170D94D0(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95A38, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI *)__cxa_guard_acquire(&qword_267B95A38);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI::_GetStaticTfType(v2);
      byte_267B95A30 = sub_216D16508((char *)&qword_267B95A20, v3, v4);
      __cxa_guard_release(&qword_267B95A38);
    }
  }
  return byte_267B95A30;
}

void sub_2170D9550(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI *this)
{
  return &qword_267B95A20;
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI::GetDynamicFrictionAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3) {
    uint64_t v3 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 288), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170D9628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI::CreateDynamicFrictionAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8) {
    uint64_t v8 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 288), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI::GetStaticFrictionAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3) {
    uint64_t v3 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 472), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170D9790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI::CreateStaticFrictionAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8) {
    uint64_t v8 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 472), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI::GetRestitutionAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3) {
    uint64_t v3 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 440), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170D98F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI::CreateRestitutionAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8) {
    uint64_t v8 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 440), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI::GetDensityAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3) {
    uint64_t v3 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 272), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170D9A60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI::CreateDensityAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8) {
    uint64_t v8 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 272), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI *this)
{
  int v1 = (int)this;
  uint64_t v18 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95A58, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95A58))
  {
    uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v3) {
      uint64_t v3 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    }
    uint64_t v4 = *((void *)v3 + 36);
    uint64_t v14 = v4;
    if ((v4 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v14 &= 0xFFFFFFFFFFFFFFF8;
    }
    int v5 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v5) {
      int v5 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    }
    uint64_t v6 = *((void *)v5 + 59);
    uint64_t v15 = v6;
    if ((v6 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v15 &= 0xFFFFFFFFFFFFFFF8;
    }
    int v7 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v7) {
      int v7 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    }
    uint64_t v8 = *((void *)v7 + 55);
    uint64_t v16 = v8;
    if ((v8 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v16 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v9) {
      uint64_t v9 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    }
    uint64_t v10 = *((void *)v9 + 34);
    uint64_t v17 = v10;
    if ((v10 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v17 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_216D30CFC(&qword_267B95A40, &v14, 4uLL);
    for (uint64_t i = 24; i != -8; i -= 8)
    {
      uint64_t v12 = *(uint64_t *)((char *)&v14 + i);
      if ((v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B95A40, &dword_216758000);
    __cxa_guard_release(&qword_267B95A58);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95A78, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95A78))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    sub_2170D9E44((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B95A60, &dword_216758000);
    __cxa_guard_release(&qword_267B95A78);
  }
  if (v1) {
    return &qword_267B95A60;
  }
  else {
    return &qword_267B95A40;
  }
}

void sub_2170D9DC0(_Unwind_Exception *a1)
{
}

void *sub_2170D9E44(uint64_t **a1)
{
  qword_267B95A68 = 0;
  unk_267B95A70 = 0;
  qword_267B95A60 = 0;
  sub_216973388((char **)&qword_267B95A60, ((unk_267B95A48 - qword_267B95A40) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B95A60, (void *)qword_267B95A68, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B95A60, (void *)qword_267B95A68, (uint64_t *)qword_267B95A40, unk_267B95A48, (unk_267B95A48 - qword_267B95A40) >> 3);
}

void sub_2170D9EDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_2170D9EFC()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216D24064((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_2170D9FDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsMeshCollisionAPI::~UsdPhysicsMeshCollisionAPI(pxrInternal__aapl__pxrReserved__::UsdPhysicsMeshCollisionAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsMeshCollisionAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *((void *)a3 + 3) = 0;
    *(void *)a3 = &unk_26C772A38;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    uint64_t v9 = "usdPhysics/meshCollisionAPI.cpp";
    uint64_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 51;
    unint64_t v12 = (unint64_t)"static UsdPhysicsMeshCollisionAPI pxrInternal__aapl__pxrReserved__::UsdPhysicsMeshCollisionA"
                            "PI::Get(const UsdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *((void *)a3 + 3) = 0;
    *(void *)a3 = &unk_26C772A38;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_2170DA1E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsMeshCollisionAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdPhysicsMeshCollisionAPI *this)
{
  return 5;
}

uint64_t sub_2170DA210(pxrInternal__aapl__pxrReserved__::UsdPhysicsMeshCollisionAPI *a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsMeshCollisionAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B95A80, v4);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplySingleApplyAPI(a1, SchemaInfo, a2);
  }
  else
  {
    v12[0] = "usd/prim.h";
    v12[1] = "CanApplyAPI";
    v12[2] = 1024;
    v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(std::string *) const [SchemaType = pxrInternal_"
             "_aapl__pxrReserved__::UsdPhysicsMeshCollisionAPI]";
    char v13 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
    if (*(char *)(TypeName + 23) >= 0) {
      uint64_t v11 = (const char *)TypeName;
    }
    else {
      uint64_t v11 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v11);
    return 0;
  }
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsMeshCollisionAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdPhysicsMeshCollisionAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  if (sub_2170DA3F8(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, this);
    *((void *)a2 + 3) = 0;
    *(void *)a2 = &unk_26C772A38;
  }
  else
  {
    int v5 = 1;
    uint64_t v6 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v7);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v8);
    uint64_t v9 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
    *((void *)a2 + 3) = 0;
    *(void *)a2 = &unk_26C772A38;
    if ((v9 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
    sub_21697C414(&v7);
    if (v6) {
      sub_216D16E0C(v6);
    }
  }
}

void sub_2170DA3E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2170DA3F8(pxrInternal__aapl__pxrReserved__::UsdPhysicsMeshCollisionAPI *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsMeshCollisionAPI::_GetStaticTfType(a1);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B95A80, v2);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(a1, SchemaInfo);
  }
  else
  {
    v10[0] = "usd/prim.h";
    v10[1] = "ApplyAPI";
    v10[2] = 1147;
    v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI() const [SchemaType = pxrInternal__aapl__pxrReserv"
             "ed__::UsdPhysicsMeshCollisionAPI]";
    char v11 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v7);
    if (*(char *)(TypeName + 23) >= 0) {
      uint64_t v9 = (const char *)TypeName;
    }
    else {
      uint64_t v9 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v9);
    return 0;
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsMeshCollisionAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsMeshCollisionAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95A88, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95A88))
  {
    __cxa_guard_release(&qword_267B95A88);
  }
  return &qword_267B95A80;
}

void sub_2170DA52C(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsMeshCollisionAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdPhysicsMeshCollisionAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95A98, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsMeshCollisionAPI *)__cxa_guard_acquire(&qword_267B95A98);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdPhysicsMeshCollisionAPI::_GetStaticTfType(v2);
      byte_267B95A90 = sub_216D16508((char *)&qword_267B95A80, v3, v4);
      __cxa_guard_release(&qword_267B95A98);
    }
  }
  return byte_267B95A90;
}

void sub_2170DA5AC(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsMeshCollisionAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsMeshCollisionAPI *this)
{
  return &qword_267B95A80;
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsMeshCollisionAPI::GetApproximationAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsMeshCollisionAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3) {
    uint64_t v3 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 192), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170DA684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsMeshCollisionAPI::CreateApproximationAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsMeshCollisionAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8) {
    uint64_t v8 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 192), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsMeshCollisionAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdPhysicsMeshCollisionAPI *this)
{
  int v1 = (int)this;
  v7[1] = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95AB8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95AB8))
  {
    uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v3) {
      uint64_t v3 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    }
    uint64_t v4 = *((void *)v3 + 24);
    v7[0] = v4;
    if ((v4 & 7) != 0)
    {
      int v5 = (atomic_uint *)(v4 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v5, 2u, memory_order_relaxed) & 1) == 0) {
        v7[0] = (uint64_t)v5;
      }
    }
    sub_216D30CFC(&qword_267B95AA0, v7, 1uLL);
    if ((v7[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v7[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B95AA0, &dword_216758000);
    __cxa_guard_release(&qword_267B95AB8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95AD8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95AD8))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    sub_2170DA924((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B95AC0, &dword_216758000);
    __cxa_guard_release(&qword_267B95AD8);
  }
  if (v1) {
    return &qword_267B95AC0;
  }
  else {
    return &qword_267B95AA0;
  }
}

void sub_2170DA8DC(_Unwind_Exception *a1)
{
}

void *sub_2170DA924(uint64_t **a1)
{
  qword_267B95AC8 = 0;
  unk_267B95AD0 = 0;
  qword_267B95AC0 = 0;
  sub_216973388((char **)&qword_267B95AC0, ((unk_267B95AA8 - qword_267B95AA0) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B95AC0, (void *)qword_267B95AC8, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B95AC0, (void *)qword_267B95AC8, (uint64_t *)qword_267B95AA0, unk_267B95AA8, (unk_267B95AA8 - qword_267B95AA0) >> 3);
}

void sub_2170DA9BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_2170DA9DC()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216D24064((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_2170DAABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::UsdPhysicsGetStageKilogramsPerUnit(uint64_t *a1)
{
  double v9 = 1.0;
  uint64_t v2 = sub_216D24140(a1);
  if (v3 & 1 | (unint64_t)v2)
  {
    char v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D01530(a1);
    int v5 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v5) {
      int v5 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    }
    sub_216E099A8(v4, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v5 + 128), &v9);
    return v9;
  }
  else
  {
    v7[0] = "usdPhysics/metrics.cpp";
    v7[1] = "UsdPhysicsGetStageKilogramsPerUnit";
    uint64_t v7[2] = 47;
    v7[3] = "double pxrInternal__aapl__pxrReserved__::UsdPhysicsGetStageKilogramsPerUnit(const UsdStageWeakPtr &)";
    char v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid UsdStage");
    return 1.0;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsStageHasAuthoredKilogramsPerUnit(uint64_t *a1)
{
  uint64_t v2 = sub_216D24140(a1);
  if (v3 & 1 | (unint64_t)v2)
  {
    char v4 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D01530(a1);
    int v5 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v5) {
      int v5 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    }
    return pxrInternal__aapl__pxrReserved__::UsdStage::HasAuthoredMetadata(v4, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v5 + 128));
  }
  else
  {
    v7[0] = "usdPhysics/metrics.cpp";
    v7[1] = "UsdPhysicsStageHasAuthoredKilogramsPerUnit";
    uint64_t v7[2] = 59;
    v7[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPhysicsStageHasAuthoredKilogramsPerUnit(const UsdStageWeakPtr &)";
    char v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid UsdStage");
    return 0;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsSetStageKilogramsPerUnit(uint64_t *a1, double a2)
{
  double v10 = a2;
  char v3 = sub_216D24140(a1);
  if (v4 & 1 | (unint64_t)v3)
  {
    int v5 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_216D01530(a1);
    uint64_t v6 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v6) {
      uint64_t v6 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    }
    return sub_216E08DBC(v5, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v6 + 128), &v10);
  }
  else
  {
    v8[0] = "usdPhysics/metrics.cpp";
    v8[1] = "UsdPhysicsSetStageKilogramsPerUnit";
    v8[2] = 71;
    v8[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPhysicsSetStageKilogramsPerUnit(const UsdStageWeakPtr &, double)";
    char v9 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v8, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid UsdStage");
    return 0;
  }
}

BOOL pxrInternal__aapl__pxrReserved__::UsdPhysicsMassUnitsAre(pxrInternal__aapl__pxrReserved__ *this, double a2, double a3, double a4)
{
  BOOL result = 0;
  if (a2 > 0.0 && a3 > 0.0)
  {
    double v5 = vabdd_f64(a2, a3);
    return v5 / a2 < a4 && v5 / a3 < a4;
  }
  return result;
}

void sub_2170DAD94()
{
  sub_2170DBADC();
  sub_216779094(__p, "PhysicsPrismaticJoint");
  sub_2170DBC08((char *)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_2170DADE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPrismaticJoint::~UsdPhysicsPrismaticJoint(pxrInternal__aapl__pxrReserved__::UsdPhysicsPrismaticJoint *this)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::~UsdPhysicsJoint(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPrismaticJoint::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    char v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C772A90;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    char v9 = "usdPhysics/prismaticJoint.cpp";
    double v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 57;
    unint64_t v12 = (unint64_t)"static UsdPhysicsPrismaticJoint pxrInternal__aapl__pxrReserved__::UsdPhysicsPrismaticJoint::"
                            "Get(const UsdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    double v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C772A90;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_2170DAFB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPrismaticJoint::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95AE8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95AE8))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B95AE0, "PhysicsPrismaticJoint");
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B95AE0, &dword_216758000);
    __cxa_guard_release(&qword_267B95AE8);
  }
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    char v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v8, a2, &qword_267B95AE0, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C772A90;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    char v9 = "usdPhysics/prismaticJoint.cpp";
    double v10 = (atomic_ullong *)"Define";
    uint64_t v11 = 70;
    unint64_t v12 = (unint64_t)"static UsdPhysicsPrismaticJoint pxrInternal__aapl__pxrReserved__::UsdPhysicsPrismaticJoint::"
                            "Define(const UsdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    double v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C772A90;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_2170DB1BC(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsPrismaticJoint::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdPhysicsPrismaticJoint *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsPrismaticJoint::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsPrismaticJoint *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95AF8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95AF8))
  {
    __cxa_guard_release(&qword_267B95AF8);
  }
  return &qword_267B95AF0;
}

void sub_2170DB264(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsPrismaticJoint::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdPhysicsPrismaticJoint *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95B08, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsPrismaticJoint *)__cxa_guard_acquire(&qword_267B95B08);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdPhysicsPrismaticJoint::_GetStaticTfType(v2);
      byte_267B95B00 = sub_216D16508((char *)&qword_267B95AF0, v3, v4);
      __cxa_guard_release(&qword_267B95B08);
    }
  }
  return byte_267B95B00;
}

void sub_2170DB2E4(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsPrismaticJoint::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsPrismaticJoint *this)
{
  return &qword_267B95AF0;
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPrismaticJoint::GetAxisAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsPrismaticJoint *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  char v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3) {
    char v3 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 200), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170DB3BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPrismaticJoint::CreateAxisAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsPrismaticJoint *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8) {
    uint64_t v8 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  char v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    char v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 200), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPrismaticJoint::GetLowerLimitAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsPrismaticJoint *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  char v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3) {
    char v3 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 392), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170DB524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPrismaticJoint::CreateLowerLimitAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsPrismaticJoint *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8) {
    uint64_t v8 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  char v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    char v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 392), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPrismaticJoint::GetUpperLimitAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsPrismaticJoint *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  char v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3) {
    char v3 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 480), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170DB68C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsPrismaticJoint::CreateUpperLimitAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsPrismaticJoint *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8) {
    uint64_t v8 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  char v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    char v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 480), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsPrismaticJoint::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdPhysicsPrismaticJoint *this)
{
  int v1 = (int)this;
  uint64_t v15 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95B28, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95B28))
  {
    char v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v3) {
      char v3 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    }
    uint64_t v4 = *((void *)v3 + 25);
    uint64_t v12 = v4;
    if ((v4 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v12 &= 0xFFFFFFFFFFFFFFF8;
    }
    double v5 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v5) {
      double v5 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    }
    uint64_t v6 = *((void *)v5 + 49);
    uint64_t v13 = v6;
    if ((v6 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v13 &= 0xFFFFFFFFFFFFFFF8;
    }
    int v7 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v7) {
      int v7 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    }
    uint64_t v8 = *((void *)v7 + 60);
    uint64_t v14 = v8;
    if ((v8 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v14 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_216D30CFC(&qword_267B95B10, &v12, 3uLL);
    for (uint64_t i = 16; i != -8; i -= 8)
    {
      uint64_t v10 = *(uint64_t *)((char *)&v12 + i);
      if ((v10 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B95B10, &dword_216758000);
    __cxa_guard_release(&qword_267B95B28);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95B48, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95B48))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint *)1);
    sub_2170DBA24((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B95B30, &dword_216758000);
    __cxa_guard_release(&qword_267B95B48);
  }
  if (v1) {
    return &qword_267B95B30;
  }
  else {
    return &qword_267B95B10;
  }
}

void sub_2170DB9A0(_Unwind_Exception *a1)
{
}

void *sub_2170DBA24(uint64_t **a1)
{
  qword_267B95B38 = 0;
  unk_267B95B40 = 0;
  qword_267B95B30 = 0;
  sub_216973388((char **)&qword_267B95B30, ((unk_267B95B18 - qword_267B95B10) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B95B30, (void *)qword_267B95B38, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B95B30, (void *)qword_267B95B38, (uint64_t *)qword_267B95B10, unk_267B95B18, (unk_267B95B18 - qword_267B95B10) >> 3);
}

void sub_2170DBABC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_2170DBADC()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_2170CFF3C((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_2170DBBBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_2170DBC08(char *a1)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_2170DBC9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2170DBCC0()
{
  sub_2170DCA08();
  sub_216779094(__p, "PhysicsRevoluteJoint");
  sub_2170DCB34((char *)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_2170DBD10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsRevoluteJoint::~UsdPhysicsRevoluteJoint(pxrInternal__aapl__pxrReserved__::UsdPhysicsRevoluteJoint *this)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::~UsdPhysicsJoint(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsRevoluteJoint::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C772AE8;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    char v9 = "usdPhysics/revoluteJoint.cpp";
    uint64_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 57;
    unint64_t v12 = (unint64_t)"static UsdPhysicsRevoluteJoint pxrInternal__aapl__pxrReserved__::UsdPhysicsRevoluteJoint::Ge"
                            "t(const UsdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C772AE8;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_2170DBEDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsRevoluteJoint::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95B58, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95B58))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B95B50, "PhysicsRevoluteJoint");
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B95B50, &dword_216758000);
    __cxa_guard_release(&qword_267B95B58);
  }
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v8, a2, &qword_267B95B50, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C772AE8;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    char v9 = "usdPhysics/revoluteJoint.cpp";
    uint64_t v10 = (atomic_ullong *)"Define";
    uint64_t v11 = 70;
    unint64_t v12 = (unint64_t)"static UsdPhysicsRevoluteJoint pxrInternal__aapl__pxrReserved__::UsdPhysicsRevoluteJoint::De"
                            "fine(const UsdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C772AE8;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_2170DC0E8(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsRevoluteJoint::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdPhysicsRevoluteJoint *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsRevoluteJoint::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsRevoluteJoint *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95B68, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95B68))
  {
    __cxa_guard_release(&qword_267B95B68);
  }
  return &qword_267B95B60;
}

void sub_2170DC190(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsRevoluteJoint::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdPhysicsRevoluteJoint *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95B78, memory_order_acquire) & 1) == 0)
  {
    unint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsRevoluteJoint *)__cxa_guard_acquire(&qword_267B95B78);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdPhysicsRevoluteJoint::_GetStaticTfType(v2);
      byte_267B95B70 = sub_216D16508((char *)&qword_267B95B60, v3, v4);
      __cxa_guard_release(&qword_267B95B78);
    }
  }
  return byte_267B95B70;
}

void sub_2170DC210(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsRevoluteJoint::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsRevoluteJoint *this)
{
  return &qword_267B95B60;
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsRevoluteJoint::GetAxisAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsRevoluteJoint *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3) {
    unint64_t v3 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 200), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170DC2E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsRevoluteJoint::CreateAxisAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsRevoluteJoint *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8) {
    uint64_t v8 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  char v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    char v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 200), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsRevoluteJoint::GetLowerLimitAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsRevoluteJoint *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3) {
    unint64_t v3 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 392), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170DC450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsRevoluteJoint::CreateLowerLimitAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsRevoluteJoint *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8) {
    uint64_t v8 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  char v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    char v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 392), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsRevoluteJoint::GetUpperLimitAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsRevoluteJoint *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3) {
    unint64_t v3 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 480), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170DC5B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsRevoluteJoint::CreateUpperLimitAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsRevoluteJoint *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8) {
    uint64_t v8 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  char v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    char v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 480), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsRevoluteJoint::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdPhysicsRevoluteJoint *this)
{
  int v1 = (int)this;
  uint64_t v15 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95B98, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95B98))
  {
    unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v3) {
      unint64_t v3 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    }
    uint64_t v4 = *((void *)v3 + 25);
    uint64_t v12 = v4;
    if ((v4 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v12 &= 0xFFFFFFFFFFFFFFF8;
    }
    char v5 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v5) {
      char v5 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    }
    uint64_t v6 = *((void *)v5 + 49);
    uint64_t v13 = v6;
    if ((v6 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v13 &= 0xFFFFFFFFFFFFFFF8;
    }
    int v7 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v7) {
      int v7 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    }
    uint64_t v8 = *((void *)v7 + 60);
    uint64_t v14 = v8;
    if ((v8 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v14 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_216D30CFC(&qword_267B95B80, &v12, 3uLL);
    for (uint64_t i = 16; i != -8; i -= 8)
    {
      uint64_t v10 = *(uint64_t *)((char *)&v12 + i);
      if ((v10 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B95B80, &dword_216758000);
    __cxa_guard_release(&qword_267B95B98);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95BB8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95BB8))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint *)1);
    sub_2170DC950((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B95BA0, &dword_216758000);
    __cxa_guard_release(&qword_267B95BB8);
  }
  if (v1) {
    return &qword_267B95BA0;
  }
  else {
    return &qword_267B95B80;
  }
}

void sub_2170DC8CC(_Unwind_Exception *a1)
{
}

void *sub_2170DC950(uint64_t **a1)
{
  qword_267B95BA8 = 0;
  unk_267B95BB0 = 0;
  qword_267B95BA0 = 0;
  sub_216973388((char **)&qword_267B95BA0, ((unk_267B95B88 - qword_267B95B80) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B95BA0, (void *)qword_267B95BA8, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B95BA0, (void *)qword_267B95BA8, (uint64_t *)qword_267B95B80, unk_267B95B88, (unk_267B95B88 - qword_267B95B80) >> 3);
}

void sub_2170DC9E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_2170DCA08()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_2170CFF3C((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_2170DCAE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_2170DCB34(char *a1)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_2170DCBC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI::~UsdPhysicsRigidBodyAPI(pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *((void *)a3 + 3) = 0;
    *(void *)a3 = &unk_26C772B40;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    char v9 = "usdPhysics/rigidBodyAPI.cpp";
    uint64_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 51;
    unint64_t v12 = (unint64_t)"static UsdPhysicsRigidBodyAPI pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI::Get("
                            "const UsdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *((void *)a3 + 3) = 0;
    *(void *)a3 = &unk_26C772B40;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_2170DCDA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI *this)
{
  return 5;
}

uint64_t sub_2170DCDD0(pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI *a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B95BC0, v4);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplySingleApplyAPI(a1, SchemaInfo, a2);
  }
  else
  {
    v12[0] = "usd/prim.h";
    v12[1] = "CanApplyAPI";
    v12[2] = 1024;
    v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(std::string *) const [SchemaType = pxrInternal_"
             "_aapl__pxrReserved__::UsdPhysicsRigidBodyAPI]";
    char v13 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
    if (*(char *)(TypeName + 23) >= 0) {
      uint64_t v11 = (const char *)TypeName;
    }
    else {
      uint64_t v11 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v11);
    return 0;
  }
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a2@<X8>)
{
  if (sub_2170DCFB8(this))
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, this);
    *((void *)a2 + 3) = 0;
    *(void *)a2 = &unk_26C772B40;
  }
  else
  {
    int v5 = 1;
    uint64_t v6 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v7);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v8);
    uint64_t v9 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a2, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v5);
    *((void *)a2 + 3) = 0;
    *(void *)a2 = &unk_26C772B40;
    if ((v9 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
    sub_21697C414(&v7);
    if (v6) {
      sub_216D16E0C(v6);
    }
  }
}

void sub_2170DCFA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_2170DCFB8(pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI::_GetStaticTfType(a1);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_267B95BC0, v2);
  if (SchemaInfo)
  {
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplySingleApplyAPI(a1, SchemaInfo);
  }
  else
  {
    v10[0] = "usd/prim.h";
    v10[1] = "ApplyAPI";
    v10[2] = 1147;
    v10[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI() const [SchemaType = pxrInternal__aapl__pxrReserv"
             "ed__::UsdPhysicsRigidBodyAPI]";
    char v11 = 0;
    uint64_t TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v7);
    if (*(char *)(TypeName + 23) >= 0) {
      uint64_t v9 = (const char *)TypeName;
    }
    else {
      uint64_t v9 = *(const char **)TypeName;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v9);
    return 0;
  }
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95BC8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95BC8))
  {
    __cxa_guard_release(&qword_267B95BC8);
  }
  return &qword_267B95BC0;
}

void sub_2170DD0EC(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95BD8, memory_order_acquire) & 1) == 0)
  {
    unint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI *)__cxa_guard_acquire(&qword_267B95BD8);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI::_GetStaticTfType(v2);
      byte_267B95BD0 = sub_216D16508((char *)&qword_267B95BC0, v3, v4);
      __cxa_guard_release(&qword_267B95BD8);
    }
  }
  return byte_267B95BD0;
}

void sub_2170DD16C(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI *this)
{
  return &qword_267B95BC0;
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI::GetRigidBodyEnabledAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3) {
    unint64_t v3 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 448), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170DD244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI::CreateRigidBodyEnabledAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8) {
    uint64_t v8 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 448), v9, 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI::GetKinematicEnabledAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3) {
    unint64_t v3 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 352), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170DD3AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI::CreateKinematicEnabledAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8) {
    uint64_t v8 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 352), v9, 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI::GetStartsAsleepAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3) {
    unint64_t v3 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 464), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170DD514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI::CreateStartsAsleepAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8) {
    uint64_t v8 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 464), v9, 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI::GetVelocityAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3) {
    unint64_t v3 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 488), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170DD67C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI::CreateVelocityAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8) {
    uint64_t v8 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 488), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 232), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI::GetAngularVelocityAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3) {
    unint64_t v3 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 184), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170DD7E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI::CreateAngularVelocityAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8) {
    uint64_t v8 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    uint64_t v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 184), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 232), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI::GetSimulationOwnerRel(pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3) {
    unint64_t v3 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 456), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170DD94C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI::CreateSimulationOwnerRel(pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3) {
    unint64_t v3 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 456), 0, a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170DDA08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI *this)
{
  int v1 = (int)this;
  uint64_t v21 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95BF8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95BF8))
  {
    unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v3) {
      unint64_t v3 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    }
    uint64_t v4 = *((void *)v3 + 56);
    uint64_t v16 = v4;
    if ((v4 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v16 &= 0xFFFFFFFFFFFFFFF8;
    }
    int v5 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v5) {
      int v5 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    }
    uint64_t v6 = *((void *)v5 + 44);
    uint64_t v17 = v6;
    if ((v6 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v17 &= 0xFFFFFFFFFFFFFFF8;
    }
    int v7 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v7) {
      int v7 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    }
    uint64_t v8 = *((void *)v7 + 58);
    uint64_t v18 = v8;
    if ((v8 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v18 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v9 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v9) {
      uint64_t v9 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    }
    uint64_t v10 = *((void *)v9 + 61);
    uint64_t v19 = v10;
    if ((v10 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v19 &= 0xFFFFFFFFFFFFFFF8;
    }
    char v11 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v11) {
      char v11 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    }
    uint64_t v12 = *((void *)v11 + 23);
    uint64_t v20 = v12;
    if ((v12 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v20 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_216D30CFC(&qword_267B95BE0, &v16, 5uLL);
    for (uint64_t i = 32; i != -8; i -= 8)
    {
      uint64_t v14 = *(uint64_t *)((char *)&v16 + i);
      if ((v14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B95BE0, &dword_216758000);
    __cxa_guard_release(&qword_267B95BF8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95C18, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95C18))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    sub_2170DDD88((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B95C00, &dword_216758000);
    __cxa_guard_release(&qword_267B95C18);
  }
  if (v1) {
    return &qword_267B95C00;
  }
  else {
    return &qword_267B95BE0;
  }
}

void sub_2170DDD04(_Unwind_Exception *a1)
{
}

void *sub_2170DDD88(uint64_t **a1)
{
  qword_267B95C08 = 0;
  unk_267B95C10 = 0;
  qword_267B95C00 = 0;
  sub_216973388((char **)&qword_267B95C00, ((unk_267B95BE8 - qword_267B95BE0) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B95C00, (void *)qword_267B95C08, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B95C00, (void *)qword_267B95C08, (uint64_t *)qword_267B95BE0, unk_267B95BE8, (unk_267B95BE8 - qword_267B95BE0) >> 3);
}

void sub_2170DDE20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

float pxrInternal__aapl__pxrReserved__::UsdPhysicsIndexedRotation(pxrInternal__aapl__pxrReserved__ *this, float a2, float a3)
{
  LODWORD(v4) = 0;
  *((float *)&v4 + this) = a2;
  return *(float *)&v4;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsGetNextIndex3(pxrInternal__aapl__pxrReserved__ *this)
{
  return (this + (this >> 1) + 1) & 3;
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsDiagonalize(pxrInternal__aapl__pxrReserved__ *this, const pxrInternal__aapl__pxrReserved__::GfMatrix3f *a2, pxrInternal__aapl__pxrReserved__::GfQuatf *a3)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  long long v32 = xmmword_217453090;
  int v5 = 24;
  do
  {
    pxrInternal__aapl__pxrReserved__::GfMatrix3f::GfMatrix3f((pxrInternal__aapl__pxrReserved__::GfMatrix3f *)v28, (const pxrInternal__aapl__pxrReserved__::GfQuatf *)&v32);
    long long v25 = v28[0];
    long long v26 = v28[1];
    int v27 = v29;
    pxrInternal__aapl__pxrReserved__::GfMatrix3f::operator*=((float *)&v25, (float *)this);
    pxrInternal__aapl__pxrReserved__::GfMatrix3f::GetTranspose((pxrInternal__aapl__pxrReserved__::GfMatrix3f *)v28, (uint64_t)v24);
    long long v33 = v25;
    long long v34 = v26;
    int v35 = v27;
    pxrInternal__aapl__pxrReserved__::GfMatrix3f::operator*=((float *)&v33, v24);
    v30[0] = v33;
    v30[1] = v34;
    int v31 = v35;
    float v6 = fabsf(*((float *)&v34 + 1));
    float v7 = fabsf(*((float *)&v33 + 2));
    float v8 = fabsf(*((float *)&v33 + 1));
    if (v7 > v8) {
      unsigned int v9 = 1;
    }
    else {
      unsigned int v9 = 2;
    }
    if (v6 > v8 && v6 > v7) {
      unsigned int v9 = 0;
    }
    uint64_t v12 = (char *)v30 + 12 * ((v9 + (v9 >> 1) + 1) & 3);
    float v13 = *(float *)&v12[4
                       * (((_BYTE)v9
                         + (v9 >> 1)
                         + 1
                         + (((v9 + (v9 >> 1) + 1) & 3) >> 1)
                         + 1) & 3)];
    if (v13 == 0.0) {
      break;
    }
    float v14 = *(float *)&v12[4 * (((_BYTE)v9 + (v9 >> 1) + 1) & 3)];
    uint64_t v11 = ((_BYTE)v9 + (v9 >> 1) + 1 + (((v9 + (v9 >> 1) + 1) & 3) >> 1) + 1) & 3;
    float v15 = *((float *)v30 + (3 * v11) + v11);
    if (fabs(v13 + v13) * 2000000.0 < vabds_f32(v14, v15)) {
      break;
    }
    float v16 = (float)(v14 - v15) / (float)(v13 + v13);
    float v17 = fabsf(v16);
    if (v17 <= 1000.0)
    {
      float v20 = sqrtf((float)(v16 * v16) + 1.0);
      float v21 = 1.0 / sqrtf((float)((float)(1.0 / (float)(v17 + v20)) * (float)(1.0 / (float)(v17 + v20))) + 1.0);
      float v22 = sqrtf((float)(1.0 - v21) * 0.5);
      if (v16 < 0.0) {
        float v22 = -v22;
      }
      float v19 = sqrtf((float)(v21 + 1.0) * 0.5);
      DWORD2(v33) = 0;
      *(void *)&long long v33 = 0;
      *((float *)&v33 + v9) = v22;
    }
    else
    {
      float v18 = v16 * 4.0;
      float v19 = 1.0;
      DWORD2(v33) = 0;
      *(void *)&long long v33 = 0;
      *((float *)&v33 + v9) = 1.0 / v18;
    }
    *(void *)&long long v25 = v33;
    *((void *)&v25 + 1) = __PAIR64__(LODWORD(v19), DWORD2(v33));
    long long v33 = v32;
    pxrInternal__aapl__pxrReserved__::GfQuatf::operator*=((float *)&v33, (float *)&v25);
    long long v33 = *v23;
    pxrInternal__aapl__pxrReserved__::GfQuatf::Normalize((float32x2_t *)&v33, 1.0e-10);
    long long v32 = v33;
    --v5;
  }
  while (v5);
  *(_OWORD *)a2 = v32;
}

uint64_t pxrInternal__aapl__pxrReserved__::_ParseMassApi@<X0>(pxrInternal__aapl__pxrReserved__ *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2@<X1>, uint64_t a3@<X8>)
{
  __asm { FMOV            V0.2S, #-1.0 }
  *(void *)a3 = _D0;
  *(unsigned char *)(a3 + 8) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)(a3 + 12) = _D0;
  *(_DWORD *)(a3 + 20) = 1065353216;
  *(unsigned char *)(a3 + 24) = 0;
  StaticTfType = pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI::_GetStaticTfType(this);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)StaticTfType, v11);
  uint64_t result = pxrInternal__aapl__pxrReserved__::UsdPrim::_HasAPI((uint64_t)this, SchemaInfo);
  if (result)
  {
    float v14 = pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v19, this);
    v19[3] = 0;
    v19[0] = &unk_26C772988;
    pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI::GetDensityAttr(v14, (uint64_t)v18);
    pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI::GetMassAttr((pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI *)v19, (uint64_t)v17);
    pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI::GetDiagonalInertiaAttr((pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI *)v19, (uint64_t)v16);
    pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI::GetPrincipalAxesAttr((pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI *)v19, (uint64_t)v15);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<float>();
  }
  return result;
}

void sub_2170DE41C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va3, a5);
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v17 = va_arg(va3, void);
  uint64_t v19 = va_arg(va3, void);
  uint64_t v20 = va_arg(va3, void);
  uint64_t v21 = va_arg(va3, void);
  sub_216D2EDA0((uint64_t)va);
  sub_216D2EDA0((uint64_t)va1);
  sub_216D2EDA0((uint64_t)va2);
  sub_216D2EDA0((uint64_t)va3);
  pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI::~UsdPhysicsMassAPI((pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI *)(v5 - 96));
  _Unwind_Resume(a1);
}

void sub_2170DE464()
{
}

void sub_2170DE46C()
{
}

void sub_2170DE474()
{
}

uint64_t pxrInternal__aapl__pxrReserved__::_GetCoM(pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI *a1)
{
  StaticTfType = pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI::_GetStaticTfType(a1);
  SchemaInfo = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)StaticTfType, v3);
  if (pxrInternal__aapl__pxrReserved__::UsdPrim::_HasAPI((uint64_t)a1, SchemaInfo))
  {
    uint64_t v5 = pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v8, a1);
    v8[3] = 0;
    v8[0] = &unk_26C772988;
    pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI::GetCenterOfMassAttr(v5, (uint64_t)v7);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfVec3f>();
  }
  return 0;
}

void sub_2170DE614(_Unwind_Exception *a1)
{
  sub_216D2EDA0(v1 - 112);
  pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI::~UsdPhysicsMassAPI((pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI *)(v1 - 80));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::_GetCollisionShapeMassAPIData(pxrInternal__aapl__pxrReserved__ *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI *a2@<X1>, float a3@<S0>, float *a4@<X2>, uint64_t a5@<X8>)
{
  sub_216D16CFC((uint64_t)&v18, (uint64_t *)this + 1, (_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::_ParseMassApi((pxrInternal__aapl__pxrReserved__ *)&v18, v10, a5);
  if ((v22 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v21);
  sub_21697C414(&v20);
  if (v19) {
    sub_216D16E0C(v19);
  }
  float v11 = *(float *)(a5 + 4);
  if (v11 <= 0.0)
  {
    *(float *)(a5 + 4) = a3;
    float v11 = a3;
  }
  *(float *)a2 = v11;
  if (v11 <= 0.0)
  {
    uint64_t v12 = *((void *)a4 + 1);
    if (v12)
    {
      if ((*(unsigned char *)(v12 + 57) & 8) == 0 && (*(unsigned int (**)(float *))(*(void *)a4 + 32))(a4))
      {
        sub_216D16CFC((uint64_t)&v13, (uint64_t *)a4 + 1, (_DWORD *)a4 + 4);
        pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v18, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
        uint64_t v22 = 0;
        float v18 = (unsigned int (**)(void **))&unk_26C7729E0;
        if ((v17 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
        sub_21697C414(&v15);
        if (v14) {
          sub_216D16E0C(v14);
        }
        if (v19 && (*((unsigned char *)v19 + 57) & 8) == 0)
        {
          if (v18[4]((void **)&v18))
          {
            pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI::GetDensityAttr((pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI *)&v18, (uint64_t)&v13);
            pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<float>();
          }
        }
        pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI::~UsdPhysicsMaterialAPI((pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI *)&v18);
      }
    }
  }
}

void sub_2170DE858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::_ParseCollisionShapeForMass@<X0>(pxrInternal__aapl__pxrReserved__::UsdObject *a1@<X0>, long long *a2@<X1>, pxrInternal__aapl__pxrReserved__::GfMatrix4f *a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>, float a6@<S0>)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  long long v9 = a2[1];
  long long v55 = *a2;
  v56[0] = v9;
  *(_OWORD *)((char *)v56 + 12) = *(long long *)((char *)a2 + 28);
  uint64_t v10 = *(void *)(a4 + 24);
  if (!v10) {
    sub_21683A7CC();
  }
  (*(void (**)(float *__return_ptr))(*(void *)v10 + 48))(&v47);
  if (v47 < 0.0)
  {
    *(void *)&v29.f64[0] = "usdPhysics/rigidBodyAPI.cpp";
    *(void *)&v29.f64[1] = "_ParseCollisionShapeForMass";
    *(void *)&long long v30 = 396;
    *((void *)&v30 + 1) = "UsdPhysicsMassProperties pxrInternal__aapl__pxrReserved__::_ParseCollisionShapeForMass(const"
                            " UsdPrim &, const _MassApiData &, float, GfMatrix4f *, UsdGeomXformCache *, const UsdPhysics"
                            "RigidBodyAPI::MassInformationFn &)";
    LOBYTE(v31) = 1;
    v32.i32[1] = 6;
    uint64_t v13 = sub_216D2F758((uint64_t)a1);
    String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)v13);
    if (*((char *)String + 23) >= 0) {
      int v15 = (const char *)String;
    }
    else {
      int v15 = (const char *)*String;
    }
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueWarning((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)&v29, (pxrInternal__aapl__pxrReserved__ *)"Provided mass information not valid for a prim %s.", v15);
    uint64_t result = pxrInternal__aapl__pxrReserved__::GfMatrix3f::SetDiagonal(a5, 0.0);
    *(_DWORD *)(a5 + 48) = 1065353216;
    *(_DWORD *)a5 = 1065353216;
    *(_DWORD *)(a5 + 16) = 1065353216;
    *(_OWORD *)(a5 + 32) = xmmword_2174B0140;
    return result;
  }
  float64x2_t v44 = v48;
  long long v45 = v49;
  int v46 = v50;
  if (a6 <= 0.0)
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1, v12, &v29);
    double StageMetersPerUnit = pxrInternal__aapl__pxrReserved__::UsdGeomGetStageMetersPerUnit((uint64_t *)&v29);
    float64_t v19 = v29.f64[1];
    if (*(void *)&v29.f64[1]
      && atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&v29.f64[1] + 8), 0xFFFFFFFF, memory_order_release) == 1)
    {
      (*(void (**)(float64_t))(**(void **)&v19 + 8))(COERCE_FLOAT64_T(*(void *)&v19));
    }
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(a1, v17, &v29);
    float v20 = StageMetersPerUnit;
    float StageKilogramsPerUnit = pxrInternal__aapl__pxrReserved__::UsdPhysicsGetStageKilogramsPerUnit((uint64_t *)&v29);
    float64_t v22 = v29.f64[1];
    if (*(void *)&v29.f64[1]
      && atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)&v29.f64[1] + 8), 0xFFFFFFFF, memory_order_release) == 1)
    {
      (*(void (**)(float64_t))(**(void **)&v22 + 8))(COERCE_FLOAT64_T(*(void *)&v22));
    }
    a6 = (float)((float)((float)(v20 * 1000.0) * v20) * v20) / StageKilogramsPerUnit;
  }
  float v43 = 0.0;
  float32x2_t v42 = 0;
  long long v41 = xmmword_217453090;
  int CoM = pxrInternal__aapl__pxrReserved__::_GetCoM(a1);
  if (*(float *)&v55 > 0.0)
  {
    float64x2_t v29 = v44;
    long long v30 = v45;
    int v31 = v46;
    pxrInternal__aapl__pxrReserved__::GfMatrix3f::operator*=((float32x2_t *)&v29, (float)(*(float *)&v55 / v47));
LABEL_19:
    int v25 = *(_DWORD *)(v24 + 32);
    long long v26 = *(_OWORD *)(v24 + 16);
    float64x2_t v44 = *(float64x2_t *)v24;
    long long v45 = v26;
    int v46 = v25;
    goto LABEL_20;
  }
  if (v47 >= 0.0)
  {
    *(float *)&long long v55 = a6 * v47;
    float64x2_t v29 = v44;
    long long v30 = v45;
    int v31 = v46;
    pxrInternal__aapl__pxrReserved__::GfMatrix3f::operator*=((float32x2_t *)&v29, a6);
    goto LABEL_19;
  }
LABEL_20:
  if (BYTE8(v55))
  {
    pxrInternal__aapl__pxrReserved__::GfMatrix3f::GfMatrix3f((pxrInternal__aapl__pxrReserved__::GfMatrix3f *)&v29, (const pxrInternal__aapl__pxrReserved__::GfQuatf *)&v41);
    pxrInternal__aapl__pxrReserved__::GfMatrix3f::SetDiagonal((uint64_t)&v38, 0.0);
    LODWORD(v38.f64[0]) = HIDWORD(v55);
    int v40 = DWORD1(v56[0]);
    LODWORD(v39) = v56[0];
    float64x2_t v35 = v38;
    long long v36 = v39;
    int v37 = DWORD1(v56[0]);
    pxrInternal__aapl__pxrReserved__::GfMatrix3f::operator*=((float *)&v35, (float *)&v29);
    float64x2_t v44 = v35;
    long long v45 = v36;
    int v46 = v37;
  }
  if (BYTE8(v56[0]))
  {
    sub_2170DED2C((float *)&v44, (const pxrInternal__aapl__pxrReserved__::GfQuatf *)((char *)v56 + 12), (uint64_t)&v29);
    float64x2_t v44 = v29;
    long long v45 = v30;
    int v46 = v31;
  }
  if (CoM)
  {
    if (!BYTE8(v55))
    {
      float64x2_t v29 = v44;
      long long v30 = v45;
      int v31 = v46;
      float32x2_t v32 = v51;
      float v33 = v52;
      int v34 = v55;
      *(float32x2_t *)&v38.f64[0] = vsub_f32(v42, v51);
      *(float *)&v38.f64[1] = v43 - v52;
      sub_2170DEDB0((uint64_t)&v29, (float *)&v38);
      float64x2_t v44 = v29;
      long long v45 = v30;
      int v46 = v31;
    }
    float32x2_t v51 = v42;
    float v52 = v43;
  }
  pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetTranslate((uint64_t)a3, (uint64_t)&v53);
  pxrInternal__aapl__pxrReserved__::GfQuatd::GfQuatd(&v38, v54);
  pxrInternal__aapl__pxrReserved__::GfRotation::SetQuat((pxrInternal__aapl__pxrReserved__::GfRotation *)&v29, (const pxrInternal__aapl__pxrReserved__::GfQuatd *)&v38);
  uint64_t result = (uint64_t)pxrInternal__aapl__pxrReserved__::GfMatrix4f::SetRotateOnly(a3, &v29);
  int v27 = v55;
  long long v28 = v45;
  *(float64x2_t *)a5 = v44;
  *(_OWORD *)(a5 + 16) = v28;
  *(_DWORD *)(a5 + 32) = v46;
  *(float32x2_t *)(a5 + 36) = v51;
  *(float *)(a5 + 44) = v52;
  *(_DWORD *)(a5 + 48) = v27;
  return result;
}

void sub_2170DECF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    sub_217324208(a12);
  }
  _Unwind_Resume(exception_object);
}

float sub_2170DED2C@<S0>(float *a1@<X0>, const pxrInternal__aapl__pxrReserved__::GfQuatf *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = pxrInternal__aapl__pxrReserved__::GfMatrix3f::GfMatrix3f((pxrInternal__aapl__pxrReserved__::GfMatrix3f *)v13, a2);
  *(_DWORD *)(a3 + 32) = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  pxrInternal__aapl__pxrReserved__::GfMatrix3f::GetTranspose(v5, (uint64_t)v8);
  long long v10 = v8[0];
  long long v11 = v8[1];
  int v12 = v9;
  pxrInternal__aapl__pxrReserved__::GfMatrix3f::operator*=((float *)&v10, a1);
  long long v6 = v11;
  *(_OWORD *)a3 = v10;
  *(_OWORD *)(a3 + 16) = v6;
  *(_DWORD *)(a3 + 32) = v12;
  return pxrInternal__aapl__pxrReserved__::GfMatrix3f::operator*=((float *)a3, v13);
}

float sub_2170DEDB0(uint64_t a1, float *a2)
{
  sub_2170DFEC4((float *)a1, a2, (uint64_t)v7, *(float *)(a1 + 48));
  long long v4 = v7[1];
  *(_OWORD *)a1 = v7[0];
  *(_OWORD *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 32) = v8;
  float v5 = *(float *)(a1 + 40);
  *(float *)(a1 + 36) = *a2 + *(float *)(a1 + 36);
  *(float *)(a1 + 40) = a2[1] + v5;
  float result = a2[2] + *(float *)(a1 + 44);
  *(float *)(a1 + 44) = result;
  return result;
}

float pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI::ComputeMassProperties(uint64_t a1, float *a2, float32x2_t *a3, _OWORD *a4, uint64_t a5)
{
  uint64_t v153 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::GfMatrix3f::SetDiagonal((uint64_t)v149, 0.0);
  int v151 = 1065353216;
  v149[0] = 1065353216;
  v149[4] = 1065353216;
  long long v150 = xmmword_2174B0140;
  sub_216D16CFC((uint64_t)v144, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((pxrInternal__aapl__pxrReserved__::UsdObject *)v144, v10, &v142);
  pxrInternal__aapl__pxrReserved__::UsdGeomXformCache::UsdGeomXformCache((pxrInternal__aapl__pxrReserved__::UsdGeomXformCache *)v141);
  pxrInternal__aapl__pxrReserved__::_ParseMassApi((pxrInternal__aapl__pxrReserved__ *)v144, v11, (uint64_t)v134);
  float v12 = *(float *)v134;
  float v133 = 0.0;
  float32x2_t v132 = 0;
  int v13 = v139;
  long long v131 = v140;
  int CoM = pxrInternal__aapl__pxrReserved__::_GetCoM((pxrInternal__aapl__pxrReserved__::UsdPhysicsMassAPI *)v144);
  char v15 = CoM;
  float v16 = *(float *)v134;
  float v17 = v136;
  float v18 = v137;
  float v19 = v138;
  if (v12 > 0.0 && v135 && CoM == 1) {
    goto LABEL_105;
  }
  std::string __p = 0;
  int v129 = 0;
  uint64_t v130 = 0;
  long long v125 = 0;
  long long v126 = 0;
  uint64_t v127 = 0;
  uint64_t v122 = 0;
  uint64_t v123 = 0;
  uint64_t v124 = 0;
  sub_216F00438((uint64_t)v119, (uint64_t)v144);
  char v104 = v15;
  int v105 = v13;
  sub_216D3ADBC(v119, (uint64_t)&v111);
  while (1)
  {
    *(void *)&long long v107 = v119[1];
    *((void *)&v107 + 1) = v119;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v108);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v108 + 1);
    DWORD2(v108) = 0;
    WORD6(v108) = 0;
    if (v111 == v107)
    {
      BOOL v20 = 1;
      if ((void)v112 == (void)v108 && !DWORD2(v112) && !BYTE12(v112)) {
        BOOL v20 = BYTE13(v112) != 0;
      }
    }
    else
    {
      BOOL v20 = 1;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v108 + 1);
    sub_21697C414(&v108);
    if (!v20) {
      break;
    }
    sub_216D3AE90((uint64_t)&v111, (uint64_t)&v107);
    IsDefined = (pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI *)pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v107, v21);
    if (IsDefined)
    {
      StaticTfType = pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI::_GetStaticTfType(IsDefined);
      SchemaInfo = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)StaticTfType, v24);
      if (pxrInternal__aapl__pxrReserved__::UsdPrim::_HasAPI((uint64_t)&v107, SchemaInfo)) {
        sub_216DF4444(&v122, (uint64_t)&v107);
      }
    }
    if ((BYTE8(v108) & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v108 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v108 + 1);
    sub_21697C414(&v108);
    if (*((void *)&v107 + 1)) {
      sub_216D16E0C(*((atomic_ullong **)&v107 + 1));
    }
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((uint64_t)&v111);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v112 + 1);
  sub_21697C414(&v112);
  long long v26 = (uint64_t *)atomic_load((unint64_t *)&qword_267B95C20);
  if (!v26)
  {
    long long v26 = (uint64_t *)operator new(0x20uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v26, "physics", 0);
    uint64_t v100 = *v26;
    if ((*v26 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v100 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v100 &= 0xFFFFFFFFFFFFFFF8;
    }
    v26[1] = 0;
    v26[2] = 0;
    v26[3] = 0;
    *(void *)&long long v111 = v26 + 1;
    BYTE8(v111) = 0;
    int v101 = operator new(8uLL);
    v26[1] = (uint64_t)v101;
    v26[2] = (uint64_t)v101;
    *int v101 = v100;
    __int16 v102 = v101 + 1;
    v26[3] = (uint64_t)(v101 + 1);
    if ((v100 & 7) != 0)
    {
      if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v100 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
        *v101 &= 0xFFFFFFFFFFFFFFF8;
      }
      v26[2] = (uint64_t)v102;
      atomic_fetch_add_explicit((atomic_uint *volatile)(v100 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    else
    {
      v26[2] = (uint64_t)v102;
    }
    uint64_t v103 = 0;
    atomic_compare_exchange_strong(&qword_267B95C20, (unint64_t *)&v103, (unint64_t)v26);
    if (v103)
    {
      *(void *)&long long v111 = v26 + 1;
      sub_216889A04((void ***)&v111);
      if ((*v26 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v26);
      long long v26 = (uint64_t *)atomic_load((unint64_t *)&qword_267B95C20);
    }
  }
  pxrInternal__aapl__pxrReserved__::UsdShadeMaterialBindingAPI::ComputeBoundMaterials(&v122, (uint64_t)v26, 0, 1, &v117);
  signed int v106 = a3;
  uint64_t v27 = v117;
  uint64_t v28 = v118;
  if (v117 != v118)
  {
    uint64_t v29 = v117;
    do
    {
      int v31 = (atomic_ullong **)(v29 + 8);
      uint64_t v30 = *(void *)(v29 + 8);
      if (v30
        && (*(unsigned char *)(v30 + 57) & 8) == 0
        && (*(unsigned int (**)(uint64_t))(*(void *)v29 + 32))(v29))
      {
        float32x2_t v32 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI *)sub_216D16CFC((uint64_t)&v111, (uint64_t *)(v29 + 8), (_DWORD *)(v29 + 16));
        float v33 = pxrInternal__aapl__pxrReserved__::UsdPhysicsMaterialAPI::_GetStaticTfType(v32);
        float64x2_t v35 = (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)v33, v34);
        char HasAPI = pxrInternal__aapl__pxrReserved__::UsdPrim::_HasAPI((uint64_t)&v111, v35);
        if ((BYTE8(v112) & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v112 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v112 + 1);
        sub_21697C414(&v112);
        if (*((void *)&v111 + 1)) {
          sub_216D16E0C(*((atomic_ullong **)&v111 + 1));
        }
        if ((HasAPI & 1) == 0)
        {
          LODWORD(v111) = 1;
          *((void *)&v111 + 1) = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v112);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v112 + 1);
          *((void *)&v112 + 1) = 0;
          pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v107, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v111);
          *(void *)&long long v107 = &unk_26C76DAD0;
          int v37 = (atomic_ullong *)*((void *)&v107 + 1);
          if (*((void *)&v107 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v107 + 1) + 48), 1uLL, memory_order_relaxed);
          }
          float64x2_t v38 = *v31;
          *int v31 = v37;
          if (v38) {
            sub_216D16E0C(v38);
          }
          sub_2169C487C((int *)(v29 + 16), &v108);
          sub_2169C48D4((int *)(v29 + 20), (_DWORD *)&v108 + 1);
          pxrInternal__aapl__pxrReserved__::UsdShadeMaterial::~UsdShadeMaterial((pxrInternal__aapl__pxrReserved__::UsdShadeMaterial *)&v107);
          if ((BYTE8(v112) & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(*((void *)&v112 + 1) & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v112 + 1);
          sub_21697C414(&v112);
          if (*((void *)&v111 + 1)) {
            sub_216D16E0C(*((atomic_ullong **)&v111 + 1));
          }
        }
      }
      v29 += 24;
      v27 += 24;
    }
    while (v29 != v28);
  }
  uint64_t v39 = v122;
  if (v123 != v122)
  {
    unint64_t v40 = 0;
    do
    {
      long long v41 = (const pxrInternal__aapl__pxrReserved__::UsdPrim *)(v39 + 32 * v40);
      pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v116, v41);
      v116[3] = 0;
      v116[0] = &unk_26C7726C8;
      float v115 = 0.0;
      pxrInternal__aapl__pxrReserved__::_GetCollisionShapeMassAPIData((pxrInternal__aapl__pxrReserved__ *)v116, (const pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI *)&v115, *(float *)&v134[1], (float *)(v117 + 24 * v40), (uint64_t)v152);
      pxrInternal__aapl__pxrReserved__::_ParseCollisionShapeForMass(v41, v152, (pxrInternal__aapl__pxrReserved__::GfMatrix4f *)&v111, a5, (uint64_t)&v107, v115);
      float32x2_t v42 = v129;
      if (v129 >= v130)
      {
        float v47 = __p;
        uint64_t v48 = 0x4EC4EC4EC4EC4EC5 * ((v129 - (unsigned char *)__p) >> 2);
        unint64_t v49 = v48 + 1;
        if ((unint64_t)(v48 + 1) > 0x4EC4EC4EC4EC4ECLL) {
          sub_21677CB10();
        }
        if (0x9D89D89D89D89D8ALL * ((v130 - (unsigned char *)__p) >> 2) > v49) {
          unint64_t v49 = 0x9D89D89D89D89D8ALL * ((v130 - (unsigned char *)__p) >> 2);
        }
        if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * ((v130 - (unsigned char *)__p) >> 2)) >= 0x276276276276276) {
          unint64_t v50 = 0x4EC4EC4EC4EC4ECLL;
        }
        else {
          unint64_t v50 = v49;
        }
        if (v50)
        {
          float32x2_t v51 = (char *)sub_2170DFFE0((uint64_t)&v130, v50);
          float v47 = __p;
          float32x2_t v42 = v129;
        }
        else
        {
          float32x2_t v51 = 0;
        }
        float v52 = &v51[52 * v48];
        long long v53 = v107;
        long long v54 = v108;
        long long v55 = v109;
        *((_DWORD *)v52 + 12) = v110;
        *((_OWORD *)v52 + 1) = v54;
        *((_OWORD *)v52 + 2) = v55;
        *(_OWORD *)float v52 = v53;
        if (v42 == v47)
        {
          uint64_t v60 = &v51[52 * v48];
        }
        else
        {
          uint64_t v56 = &v51[52 * v48];
          do
          {
            long long v57 = *(_OWORD *)((char *)v42 - 52);
            long long v58 = *(_OWORD *)((char *)v42 - 36);
            long long v59 = *(_OWORD *)((char *)v42 - 20);
            uint64_t v60 = v56 - 52;
            *((_DWORD *)v56 - 1) = *((_DWORD *)v42 - 1);
            *(_OWORD *)(v56 - 20) = v59;
            *(_OWORD *)(v56 - 36) = v58;
            *(_OWORD *)(v56 - 52) = v57;
            float32x2_t v42 = (_OWORD *)((char *)v42 - 52);
            v56 -= 52;
          }
          while (v42 != v47);
        }
        int v46 = v52 + 52;
        std::string __p = v60;
        int v129 = v52 + 52;
        uint64_t v130 = &v51[52 * v50];
        if (v47) {
          operator delete(v47);
        }
      }
      else
      {
        long long v43 = v107;
        long long v44 = v108;
        long long v45 = v109;
        *((_DWORD *)v129 + 12) = v110;
        v42[1] = v44;
        _WORD v42[2] = v45;
        *float32x2_t v42 = v43;
        int v46 = (char *)v42 + 52;
      }
      int v129 = v46;
      uint64_t v61 = v126;
      if (v126 >= v127)
      {
        uint64_t v66 = (char *)v125;
        uint64_t v67 = (v126 - (unsigned char *)v125) >> 6;
        unint64_t v68 = v67 + 1;
        if ((unint64_t)(v67 + 1) >> 58) {
          sub_21677CB10();
        }
        uint64_t v69 = v127 - (unsigned char *)v125;
        if ((v127 - (unsigned char *)v125) >> 5 > v68) {
          unint64_t v68 = v69 >> 5;
        }
        if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFC0) {
          unint64_t v70 = 0x3FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v70 = v68;
        }
        if (v70)
        {
          uint64_t v71 = (char *)sub_2169B761C((uint64_t)&v127, v70);
          uint64_t v66 = (char *)v125;
          uint64_t v61 = v126;
        }
        else
        {
          uint64_t v71 = 0;
        }
        uint64_t v72 = &v71[64 * v67];
        long long v73 = v111;
        long long v74 = v112;
        long long v75 = v114;
        *((_OWORD *)v72 + 2) = v113;
        *((_OWORD *)v72 + 3) = v75;
        *(_OWORD *)uint64_t v72 = v73;
        *((_OWORD *)v72 + 1) = v74;
        if (v61 == v66)
        {
          unint64_t v80 = &v71[64 * v67];
        }
        else
        {
          int v76 = &v71[64 * v67];
          do
          {
            long long v77 = *((_OWORD *)v61 - 4);
            long long v78 = *((_OWORD *)v61 - 3);
            long long v79 = *((_OWORD *)v61 - 1);
            unint64_t v80 = v76 - 64;
            *((_OWORD *)v76 - 2) = *((_OWORD *)v61 - 2);
            *((_OWORD *)v76 - 1) = v79;
            *((_OWORD *)v76 - 4) = v77;
            *((_OWORD *)v76 - 3) = v78;
            v61 -= 64;
            v76 -= 64;
          }
          while (v61 != v66);
        }
        uint64_t v65 = v72 + 64;
        long long v125 = v80;
        long long v126 = v72 + 64;
        uint64_t v127 = &v71[64 * v70];
        if (v66) {
          operator delete(v66);
        }
      }
      else
      {
        long long v62 = v111;
        long long v63 = v112;
        long long v64 = v114;
        *((_OWORD *)v126 + 2) = v113;
        *((_OWORD *)v61 + 3) = v64;
        *(_OWORD *)uint64_t v61 = v62;
        *((_OWORD *)v61 + 1) = v63;
        uint64_t v65 = v61 + 64;
      }
      long long v126 = v65;
      pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI::~UsdPhysicsCollisionAPI((pxrInternal__aapl__pxrReserved__::UsdPhysicsCollisionAPI *)v116);
      ++v40;
      uint64_t v39 = v122;
    }
    while (v40 < (v123 - v122) >> 5);
  }
  if (__p == v129)
  {
    a3 = v106;
    if (!v135)
    {
      if (v16 <= 0.0)
      {
        *(void *)&long long v111 = "usdPhysics/rigidBodyAPI.cpp";
        *((void *)&v111 + 1) = "ComputeMassProperties";
        *(void *)&long long v112 = 610;
        *((void *)&v112 + 1) = "float pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI::ComputeMassProperties(G"
                                 "fVec3f *, GfVec3f *, GfQuatf *, const MassInformationFn &) const";
        LOBYTE(v113) = 1;
        DWORD2(v113) = 6;
        int v94 = sub_216D2F758((uint64_t)v144);
        String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)v94);
        if (*((char *)String + 23) >= 0) {
          int v96 = (const char *)String;
        }
        else {
          int v96 = (const char *)*String;
        }
        int v97 = "";
        if (v16 < 0.0) {
          int v97 = " and a negative mass";
        }
        pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueWarning((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)&v111, (pxrInternal__aapl__pxrReserved__ *)"The rigid body at %s has a possibly invalid inertia tensor of {1.0, 1.0, 1.0}%s. %s %s", v96, v97, "Either specify correct values in the mass properties, or add collider(s) to any shape(s) that you wish to automatically compute mass properties for.", "If you do not want the objects to collide, add colliders regardless then disable the 'enable collision' property.");
      }
      else
      {
        double StageMetersPerUnit = pxrInternal__aapl__pxrReserved__::UsdGeomGetStageMetersPerUnit(&v142);
        *(void *)&long long v111 = "usdPhysics/rigidBodyAPI.cpp";
        *((void *)&v111 + 1) = "ComputeMassProperties";
        *(void *)&long long v112 = 602;
        *((void *)&v112 + 1) = "float pxrInternal__aapl__pxrReserved__::UsdPhysicsRigidBodyAPI::ComputeMassProperties(G"
                                 "fVec3f *, GfVec3f *, GfQuatf *, const MassInformationFn &) const";
        LOBYTE(v113) = 1;
        DWORD2(v113) = 6;
        uint64_t v84 = sub_216D2F758((uint64_t)v144);
        uint64_t v85 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)v84);
        if (*((char *)v85 + 23) >= 0) {
          uint64_t v86 = (const char *)v85;
        }
        else {
          uint64_t v86 = (const char *)*v85;
        }
        pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueWarning((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)&v111, (pxrInternal__aapl__pxrReserved__ *)"The rigid body at %s has a possibly invalid inertia tensor of {1.0, 1.0, 1.0}, small sphere approximated inertia was used. %s %s", v86, "Either specify correct values in the mass properties, or add collider(s) to any shape(s) that you wish to automatically compute mass properties for.", "If you do not want the objects to collide, add colliders regardless then disable the 'enable collision' property.");
        float v87 = StageMetersPerUnit;
        float v17 = (float)(0.1 / v87) * (float)((float)(v16 * 0.4) * (float)(0.1 / v87));
        float v18 = v17;
        float v19 = v17;
      }
    }
    goto LABEL_101;
  }
  sub_2170DFBB0((uint64_t)__p, (float32x2_t *)v125, -991146299 * ((unint64_t)(v129 - (unsigned char *)__p) >> 2), (uint64_t)&v111);
  a3 = v106;
  float v82 = *(float *)&v114;
  if (v12 > 0.0)
  {
    *(float *)&long long v114 = v16;
    long long v107 = v111;
    long long v108 = v112;
    LODWORD(v109) = v113;
    pxrInternal__aapl__pxrReserved__::GfMatrix3f::operator*=((float32x2_t *)&v107, (float)(v16 / v82));
    int v89 = *((_DWORD *)v88 + 8);
    long long v90 = v88[1];
    long long v111 = *v88;
    long long v112 = v90;
    LODWORD(v113) = v89;
    if (v104) {
      goto LABEL_82;
    }
LABEL_90:
    float32x2_t v132 = *(float32x2_t *)((char *)&v113 + 4);
    float v133 = *((float *)&v113 + 3);
    goto LABEL_91;
  }
  float v16 = *(float *)&v114;
  if ((v104 & 1) == 0) {
    goto LABEL_90;
  }
LABEL_82:
  *(float32x2_t *)&long long v107 = vsub_f32(v132, *(float32x2_t *)((char *)&v113 + 4));
  *((float *)&v107 + 2) = v133 - *((float *)&v113 + 3);
  sub_2170DEDB0((uint64_t)&v111, (float *)&v107);
LABEL_91:
  pxrInternal__aapl__pxrReserved__::UsdPhysicsDiagonalize((pxrInternal__aapl__pxrReserved__ *)&v111, (const pxrInternal__aapl__pxrReserved__::GfMatrix3f *)&v107, v81);
  if (!v135)
  {
    float v17 = v91;
    float v18 = v92;
    float v19 = v93;
  }
  if (!v105) {
    long long v131 = v107;
  }
LABEL_101:
  *(void *)&long long v111 = &v117;
  sub_216F50D48((void ***)&v111);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v121);
  sub_21697C414(&v120);
  *(void *)&long long v111 = &v122;
  sub_216E1B384((void ***)&v111);
  if (v125)
  {
    long long v126 = (char *)v125;
    operator delete(v125);
  }
  if (__p)
  {
    int v129 = (char *)__p;
    operator delete(__p);
  }
LABEL_105:
  if (a3)
  {
    *a3 = v132;
    a3[1].f32[0] = v133;
  }
  if (a2)
  {
    *a2 = v17;
    a2[1] = v18;
    a2[2] = v19;
  }
  if (a4) {
    *a4 = v131;
  }
  sub_216EF9C4C((uint64_t)v141);
  uint64_t v98 = v143;
  if (v143 && atomic_fetch_add_explicit((atomic_uint *volatile)(v143 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v98 + 8))(v98);
  }
  if ((v148 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v148 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v147);
  sub_21697C414(&v146);
  if (v145) {
    sub_216D16E0C(v145);
  }
  return v16;
}

void sub_2170DF9E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_216889A04((void ***)&a27);
  if ((v68 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v68 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*v69 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*v69 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  operator delete(v69);
  sub_216D3AF04((uint64_t)&a43);
  a27 = (uint64_t)&a50;
  sub_216E1B384((void ***)&a27);
  if (__p)
  {
    a54 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a56)
  {
    a57 = (uint64_t)a56;
    operator delete(a56);
  }
  sub_216EF9C4C((uint64_t)&a68);
  uint64_t v71 = (atomic_uint *)STACK[0x210];
  if (STACK[0x210])
  {
    if (atomic_fetch_add_explicit(v71 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v71 + 8))(v71);
    }
  }
  sub_216D16AD8((uint64_t)&STACK[0x218]);
  _Unwind_Resume(a1);
}

double sub_2170DFBB0@<D0>(uint64_t a1@<X0>, float32x2_t *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  int v48 = 0;
  long long v46 = 0u;
  long long v47 = 0u;
  float v8 = 0.0;
  pxrInternal__aapl__pxrReserved__::GfMatrix3f::SetDiagonal((uint64_t)&v46, 0.0);
  float v9 = 0.0;
  float v10 = 0.0;
  float v11 = 0.0;
  if (a3)
  {
    uint64_t v12 = a3;
    int v13 = (float *)(a1 + 36);
    uint64_t v14 = v12;
    char v15 = a2;
    do
    {
      float v11 = v11 + v13[3];
      float v16 = sub_21702AB78(v15, v13).f32[0];
      float v17 = v13[3];
      float v8 = v8 + (float)(v17 * v16);
      float v9 = v9 + (float)(v17 * v18);
      float v10 = v10 + (float)(v17 * v19);
      v15 += 8;
      v13 += 13;
      --v14;
    }
    while (v14);
    if (v11 > 0.0)
    {
      double v20 = 1.0 / v11;
      float v8 = v20 * v8;
      float v9 = v20 * v9;
      float v10 = v20 * v10;
    }
    int v21 = (float *)(a1 + 36);
    do
    {
      float v22 = sub_21702AB78(a2, v21).f32[0];
      float v24 = v23;
      float v26 = v25;
      v37.f64[0] = pxrInternal__aapl__pxrReserved__::GfMatrix4f::ExtractRotation((pxrInternal__aapl__pxrReserved__::GfMatrix4f *)a2);
      v37.f64[1] = v27;
      uint64_t v38 = v28;
      uint64_t v39 = v29;
      v40.n128_u64[0] = pxrInternal__aapl__pxrReserved__::GfRotation::GetQuat(&v37);
      v40.n128_u64[1] = v30;
      uint64_t v41 = v31;
      uint64_t v42 = v32;
      pxrInternal__aapl__pxrReserved__::GfQuatf::GfQuatf(&v43, &v40);
      sub_2170DED2C(v21 - 9, (const pxrInternal__aapl__pxrReserved__::GfQuatf *)&v43, (uint64_t)v44);
      float v33 = v21[3];
      v36[0] = v8 - v22;
      v36[1] = v9 - v24;
      v36[2] = v10 - v26;
      sub_2170DFEC4(v44, v36, (uint64_t)v45, v33);
      pxrInternal__aapl__pxrReserved__::GfMatrix3f::operator+=((float *)&v46, v45);
      a2 += 8;
      v21 += 13;
      --v12;
    }
    while (v12);
  }
  double result = *(double *)&v46;
  long long v35 = v47;
  *(_OWORD *)a4 = v46;
  *(_OWORD *)(a4 + 16) = v35;
  *(_DWORD *)(a4 + 32) = v48;
  *(float *)(a4 + 36) = v8;
  *(float *)(a4 + 40) = v9;
  *(float *)(a4 + 44) = v10;
  *(float *)(a4 + 48) = v11;
  return result;
}

uint64_t *sub_2170DFD94()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216D24064((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_2170DFE74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_2170DFEC4(float *a1@<X0>, float *a2@<X1>, uint64_t a3@<X8>, float a4@<S0>)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  float v8 = a2[1];
  float v7 = a2[2];
  float v9 = *a2;
  LODWORD(v17) = 0;
  *((void *)&v17 + 1) = __PAIR64__(LODWORD(v7), LODWORD(v8));
  LODWORD(v18) = 0;
  *((float *)&v18 + 2) = -v8;
  *((float *)&v18 + 3) = v9;
  *((float *)&v17 + 1) = -v7;
  *((float *)&v18 + 1) = -v9;
  int v19 = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 0;
  pxrInternal__aapl__pxrReserved__::GfMatrix3f::GetTranspose((pxrInternal__aapl__pxrReserved__::GfMatrix3f *)&v17, (uint64_t)v13);
  long long v14 = v17;
  long long v15 = v18;
  int v16 = v19;
  pxrInternal__aapl__pxrReserved__::GfMatrix3f::operator*=((float *)&v14, v13);
  v20[0] = v14;
  v20[1] = v15;
  int v21 = v16;
  pxrInternal__aapl__pxrReserved__::GfMatrix3f::operator*=((float32x2_t *)v20, a4);
  int v24 = *((_DWORD *)v10 + 8);
  int v11 = v24;
  long long v12 = v10[1];
  long long v22 = *v10;
  long long v23 = v12;
  *(_OWORD *)a3 = v22;
  *(_OWORD *)(a3 + 16) = v12;
  *(_DWORD *)(a3 + 32) = v11;
  pxrInternal__aapl__pxrReserved__::GfMatrix3f::operator+=((float *)a3, a1);
}

void *sub_2170DFFE0(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x4EC4EC4EC4EC4EDLL) {
    sub_21677CA1C();
  }
  return operator new(52 * a2);
}

void sub_2170E002C()
{
  sub_2170E0B94();
  sub_216779094(__p, "PhysicsScene");
  sub_2170E0CC0((char *)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_2170E007C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsScene::~UsdPhysicsScene(pxrInternal__aapl__pxrReserved__::UsdPhysicsScene *this)
{
  pxrInternal__aapl__pxrReserved__::UsdTyped::~UsdTyped(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsScene::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    float v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C772B98;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    float v9 = "usdPhysics/scene.cpp";
    float v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 57;
    unint64_t v12 = (unint64_t)"static UsdPhysicsScene pxrInternal__aapl__pxrReserved__::UsdPhysicsScene::Get(const UsdStage"
                            "Ptr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    float v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C772B98;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_2170E0248(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsScene::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95C30, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95C30))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B95C28, "PhysicsScene");
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B95C28, &dword_216758000);
    __cxa_guard_release(&qword_267B95C30);
  }
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    float v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v8, a2, &qword_267B95C28, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C772B98;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    float v9 = "usdPhysics/scene.cpp";
    float v10 = (atomic_ullong *)"Define";
    uint64_t v11 = 70;
    unint64_t v12 = (unint64_t)"static UsdPhysicsScene pxrInternal__aapl__pxrReserved__::UsdPhysicsScene::Define(const UsdSt"
                            "agePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    float v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C772B98;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_2170E0454(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsScene::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdPhysicsScene *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsScene::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsScene *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95C40, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95C40))
  {
    __cxa_guard_release(&qword_267B95C40);
  }
  return &qword_267B95C38;
}

void sub_2170E04FC(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsScene::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdPhysicsScene *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95C50, memory_order_acquire) & 1) == 0)
  {
    unint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsScene *)__cxa_guard_acquire(&qword_267B95C50);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdPhysicsScene::_GetStaticTfType(v2);
      byte_267B95C48 = sub_216D16508((char *)&qword_267B95C38, v3, v4);
      __cxa_guard_release(&qword_267B95C50);
    }
  }
  return byte_267B95C48;
}

void sub_2170E057C(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsScene::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsScene *this)
{
  return &qword_267B95C38;
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsScene::GetGravityDirectionAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsScene *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3) {
    unint64_t v3 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 320), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170E0654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsScene::CreateGravityDirectionAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsScene *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8) {
    uint64_t v8 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  float v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    float v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 320), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 232), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsScene::GetGravityMagnitudeAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsScene *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3) {
    unint64_t v3 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 328), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170E07BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsScene::CreateGravityMagnitudeAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsScene *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8) {
    uint64_t v8 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  float v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    float v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 328), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsScene::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdPhysicsScene *this)
{
  int v1 = (int)this;
  uint64_t v14 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95C70, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95C70))
  {
    unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v3) {
      unint64_t v3 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    }
    uint64_t v4 = *((void *)v3 + 40);
    uint64_t v12 = v4;
    if ((v4 & 7) != 0)
    {
      float v5 = (atomic_uint *)(v4 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v5, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v12 = (uint64_t)v5;
      }
    }
    int v6 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v6) {
      int v6 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    }
    int v7 = (atomic_uint *)*((void *)v6 + 41);
    char v13 = v7;
    if ((v7 & 7) != 0)
    {
      uint64_t v8 = (atomic_uint *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
        char v13 = v8;
      }
    }
    sub_216D30CFC(&qword_267B95C58, &v12, 2uLL);
    for (uint64_t i = 8; i != -8; i -= 8)
    {
      uint64_t v10 = *(uint64_t *)((char *)&v12 + i);
      if ((v10 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B95C58, &dword_216758000);
    __cxa_guard_release(&qword_267B95C70);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95C90, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95C90))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdTyped::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdTyped *)1);
    sub_2170E0ADC((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B95C78, &dword_216758000);
    __cxa_guard_release(&qword_267B95C90);
  }
  if (v1) {
    return &qword_267B95C78;
  }
  else {
    return &qword_267B95C58;
  }
}

void sub_2170E0A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if ((a10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  __cxa_guard_abort(&qword_267B95C70);
  _Unwind_Resume(a1);
}

void *sub_2170E0ADC(uint64_t **a1)
{
  qword_267B95C80 = 0;
  unk_267B95C88 = 0;
  qword_267B95C78 = 0;
  sub_216973388((char **)&qword_267B95C78, ((unk_267B95C60 - qword_267B95C58) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B95C78, (void *)qword_267B95C80, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B95C78, (void *)qword_267B95C80, (uint64_t *)qword_267B95C58, unk_267B95C60, (unk_267B95C60 - qword_267B95C58) >> 3);
}

void sub_2170E0B74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_2170E0B94()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216F1B0B4((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_2170E0C74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_2170E0CC0(char *a1)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_2170E0D54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2170E0D78()
{
  sub_2170E1AC0();
  sub_216779094(__p, "PhysicsSphericalJoint");
  sub_2170E1BEC((char *)__p);
  if (v1 < 0) {
    operator delete(__p[0]);
  }
}

void sub_2170E0DC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsSphericalJoint::~UsdPhysicsSphericalJoint(pxrInternal__aapl__pxrReserved__::UsdPhysicsSphericalJoint *this)
{
  pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::~UsdPhysicsJoint(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsSphericalJoint::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C772BF0;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    float v9 = "usdPhysics/sphericalJoint.cpp";
    uint64_t v10 = (atomic_ullong *)"Get";
    uint64_t v11 = 57;
    unint64_t v12 = (unint64_t)"static UsdPhysicsSphericalJoint pxrInternal__aapl__pxrReserved__::UsdPhysicsSphericalJoint::"
                            "Get(const UsdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C772BF0;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_2170E0F94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216D16AD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsSphericalJoint::Define(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95CA0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95CA0))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B95C98, "PhysicsSphericalJoint");
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B95C98, &dword_216758000);
    __cxa_guard_release(&qword_267B95CA0);
  }
  uint64_t v6 = sub_216D24140(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_216D01530(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::DefinePrim(v8, a2, &qword_267B95C98, (uint64_t)&v9);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C772BF0;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    float v9 = "usdPhysics/sphericalJoint.cpp";
    uint64_t v10 = (atomic_ullong *)"Define";
    uint64_t v11 = 70;
    unint64_t v12 = (unint64_t)"static UsdPhysicsSphericalJoint pxrInternal__aapl__pxrReserved__::UsdPhysicsSphericalJoint::"
                            "Define(const UsdStagePtr &, const SdfPath &)";
    char v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v9) = 1;
    uint64_t v10 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v11 + 1);
    unint64_t v12 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v9);
    *(void *)a3 = &unk_26C772BF0;
    if ((v12 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_21697C414(&v11);
  if (v10) {
    sub_216D16E0C(v10);
  }
}

void sub_2170E11A0(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsSphericalJoint::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdPhysicsSphericalJoint *this)
{
  return 3;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsSphericalJoint::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsSphericalJoint *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95CB0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95CB0))
  {
    __cxa_guard_release(&qword_267B95CB0);
  }
  return &qword_267B95CA8;
}

void sub_2170E1248(_Unwind_Exception *a1)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdPhysicsSphericalJoint::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdPhysicsSphericalJoint *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95CC0, memory_order_acquire) & 1) == 0)
  {
    unint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsSphericalJoint *)__cxa_guard_acquire(&qword_267B95CC0);
    if (v2)
    {
      pxrInternal__aapl__pxrReserved__::UsdPhysicsSphericalJoint::_GetStaticTfType(v2);
      byte_267B95CB8 = sub_216D16508((char *)&qword_267B95CA8, v3, v4);
      __cxa_guard_release(&qword_267B95CC0);
    }
  }
  return byte_267B95CB8;
}

void sub_2170E12C8(_Unwind_Exception *a1)
{
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsSphericalJoint::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdPhysicsSphericalJoint *this)
{
  return &qword_267B95CA8;
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsSphericalJoint::GetAxisAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsSphericalJoint *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3) {
    unint64_t v3 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 200), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170E13A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsSphericalJoint::CreateAxisAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsSphericalJoint *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8) {
    uint64_t v8 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  float v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    float v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 200), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 88), 0, 1, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsSphericalJoint::GetConeAngle0LimitAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsSphericalJoint *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3) {
    unint64_t v3 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 256), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170E1508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsSphericalJoint::CreateConeAngle0LimitAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsSphericalJoint *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8) {
    uint64_t v8 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  float v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    float v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 256), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsSphericalJoint::GetConeAngle1LimitAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsSphericalJoint *this@<X0>, uint64_t a2@<X8>)
{
  sub_216D16CFC((uint64_t)&v4, (uint64_t *)this + 1, (_DWORD *)this + 4);
  unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v3) {
    unint64_t v3 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v4, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v3 + 264), a2);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5) {
    sub_216D16E0C(v5);
  }
}

void sub_2170E1670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void pxrInternal__aapl__pxrReserved__::UsdPhysicsSphericalJoint::CreateConeAngle1LimitAttr(pxrInternal__aapl__pxrReserved__::UsdPhysicsSphericalJoint *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  if (!v8) {
    uint64_t v8 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
  }
  float v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    float v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }

  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)((char *)v8 + 264), (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v9 + 56), 0, 0, a2, a3, a4);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdPhysicsSphericalJoint::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdPhysicsSphericalJoint *this)
{
  int v1 = (int)this;
  uint64_t v15 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95CE0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95CE0))
  {
    unint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v3) {
      unint64_t v3 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    }
    uint64_t v4 = *((void *)v3 + 25);
    uint64_t v12 = v4;
    if ((v4 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v12 &= 0xFFFFFFFFFFFFFFF8;
    }
    char v5 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v5) {
      char v5 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    }
    uint64_t v6 = *((void *)v5 + 32);
    uint64_t v13 = v6;
    if ((v6 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v13 &= 0xFFFFFFFFFFFFFFF8;
    }
    int v7 = (pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    if (!v7) {
      int v7 = sub_2170CC7F8(&pxrInternal__aapl__pxrReserved__::UsdPhysicsTokens);
    }
    uint64_t v8 = *((void *)v7 + 33);
    uint64_t v14 = v8;
    if ((v8 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      v14 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_216D30CFC(&qword_267B95CC8, &v12, 3uLL);
    for (uint64_t i = 16; i != -8; i -= 8)
    {
      uint64_t v10 = *(uint64_t *)((char *)&v12 + i);
      if ((v10 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B95CC8, &dword_216758000);
    __cxa_guard_release(&qword_267B95CE0);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95D00, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95D00))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdPhysicsJoint *)1);
    sub_2170E1A08((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_216B554D0, &qword_267B95CE8, &dword_216758000);
    __cxa_guard_release(&qword_267B95D00);
  }
  if (v1) {
    return &qword_267B95CE8;
  }
  else {
    return &qword_267B95CC8;
  }
}

void sub_2170E1984(_Unwind_Exception *a1)
{
}

void *sub_2170E1A08(uint64_t **a1)
{
  qword_267B95CF0 = 0;
  unk_267B95CF8 = 0;
  qword_267B95CE8 = 0;
  sub_216973388((char **)&qword_267B95CE8, ((*(void *)algn_267B95CD0 - qword_267B95CC8) >> 3) + a1[1] - *a1);
  sub_216AE27E0(&qword_267B95CE8, (void *)qword_267B95CF0, *a1, a1[1], a1[1] - *a1);
  return sub_216AE27E0(&qword_267B95CE8, (void *)qword_267B95CF0, (uint64_t *)qword_267B95CC8, *(uint64_t **)algn_267B95CD0, (*(void *)algn_267B95CD0 - qword_267B95CC8) >> 3);
}

void sub_2170E1AA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_2170E1AC0()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_2170CFF3C((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_2170E1BA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_2170E1BEC(char *a1)
{
  unint64_t v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v3 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::TfType::AddAlias((uint64_t *)&v3, v2, a1);
}

void sub_2170E1C80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType::UsdPhysicsTokensType(pxrInternal__aapl__pxrReserved__::UsdPhysicsTokensType *this)
{
  uint64_t v185 = *MEMORY[0x263EF8340];
  int v96 = (uint64_t *)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "acceleration", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v96, "angular", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 16, "boundingCube", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 24, "boundingSphere", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 32, "colliders", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 40, "convexDecomposition", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 48, "convexHull", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 56, "distance", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 64, "drive", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 72, "drive:__INSTANCE_NAME__:physics:damping", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 80, "drive:__INSTANCE_NAME__:physics:maxForce", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 88, "drive:__INSTANCE_NAME__:physics:stiffness", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 96, "drive:__INSTANCE_NAME__:physics:targetPosition", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 104, "drive:__INSTANCE_NAME__:physics:targetVelocity", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 112, "drive:__INSTANCE_NAME__:physics:type", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 120, "force", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 128, "kilogramsPerUnit", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 136, "limit", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 144, "limit:__INSTANCE_NAME__:physics:high", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 152, "limit:__INSTANCE_NAME__:physics:low", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 160, "linear", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 168, "meshSimplification", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 176, "none", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 184, "physics:angularVelocity", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 192, "physics:approximation", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 200, "physics:axis", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 208, "physics:body0", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 216, "physics:body1", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 224, "physics:breakForce", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 232, "physics:breakTorque", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 240, "physics:centerOfMass", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 248, "physics:collisionEnabled", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 256, "physics:coneAngle0Limit", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 264, "physics:coneAngle1Limit", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 272, "physics:density", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 280, "physics:diagonalInertia", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 288, "physics:dynamicFriction", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 296, "physics:excludeFromArticulation", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 304, "physics:filteredGroups", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 312, "physics:filteredPairs", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 320, "physics:gravityDirection", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 328, "physics:gravityMagnitude", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 336, "physics:invertFilteredGroups", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 344, "physics:jointEnabled", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 352, "physics:kinematicEnabled", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 360, "physics:localPos0", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 368, "physics:localPos1", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 376, "physics:localRot0", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 384, "physics:localRot1", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 392, "physics:lowerLimit", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 400, "physics:mass", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 408, "physics:maxDistance", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 416, "physics:mergeGroup", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 424, "physics:minDistance", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 432, "physics:principalAxes", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 440, "physics:restitution", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 448, "physics:rigidBodyEnabled", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 456, "physics:simulationOwner", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 464, "physics:startsAsleep", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 472, "physics:staticFriction", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 480, "physics:upperLimit", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 488, "physics:velocity", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 496, "rotX", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 504, "rotY", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 512, "rotZ", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 520, "transX", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 528, "transY", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 536, "transZ", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 544, "X", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 552, "Y", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 560, "Z", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 568, "PhysicsArticulationRootAPI", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 576, "PhysicsCollisionAPI", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 584, "PhysicsCollisionGroup", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 592, "PhysicsDistanceJoint", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 600, "PhysicsDriveAPI", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 608, "PhysicsFilteredPairsAPI", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 616, "PhysicsFixedJoint", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 624, "PhysicsJoint", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 632, "PhysicsLimitAPI", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 640, "PhysicsMassAPI", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 648, "PhysicsMaterialAPI", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 656, "PhysicsMeshCollisionAPI", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 664, "PhysicsPrismaticJoint", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 672, "PhysicsRevoluteJoint", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 680, "PhysicsRigidBodyAPI", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 688, "PhysicsScene", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 696, "PhysicsSphericalJoint", 0);
  uint64_t v2 = *(void *)this;
  uint64_t v97 = v2;
  if ((v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v97 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v3 = *v96;
  uint64_t v98 = v3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v98 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v4 = *((void *)this + 2);
  uint64_t v99 = v4;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v99 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v5 = *((void *)this + 3);
  uint64_t v100 = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v100 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v6 = *((void *)this + 4);
  uint64_t v101 = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v101 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = *((void *)this + 5);
  uint64_t v102 = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v102 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v8 = *((void *)this + 6);
  uint64_t v103 = v8;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v103 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v9 = *((void *)this + 7);
  uint64_t v104 = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v104 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v10 = *((void *)this + 8);
  uint64_t v105 = v10;
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v105 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v11 = *((void *)this + 9);
  uint64_t v106 = v11;
  if ((v11 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v106 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v12 = *((void *)this + 10);
  uint64_t v107 = v12;
  if ((v12 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v107 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v13 = *((void *)this + 11);
  uint64_t v108 = v13;
  if ((v13 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v108 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v14 = *((void *)this + 12);
  uint64_t v109 = v14;
  if ((v14 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v14 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v109 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v15 = *((void *)this + 13);
  uint64_t v110 = v15;
  if ((v15 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v110 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v16 = *((void *)this + 14);
  uint64_t v111 = v16;
  if ((v16 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v111 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v17 = *((void *)this + 15);
  uint64_t v112 = v17;
  if ((v17 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v112 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v18 = *((void *)this + 16);
  uint64_t v113 = v18;
  if ((v18 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v113 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v19 = *((void *)this + 17);
  uint64_t v114 = v19;
  if ((v19 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v19 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v114 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v20 = *((void *)this + 18);
  uint64_t v115 = v20;
  if ((v20 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v20 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v115 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v21 = *((void *)this + 19);
  uint64_t v116 = v21;
  if ((v21 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v21 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v116 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v22 = *((void *)this + 20);
  uint64_t v117 = v22;
  if ((v22 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v117 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v23 = *((void *)this + 21);
  uint64_t v118 = v23;
  if ((v23 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v23 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v118 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v24 = *((void *)this + 22);
  uint64_t v119 = v24;
  if ((v24 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v119 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v25 = *((void *)this + 23);
  uint64_t v120 = v25;
  if ((v25 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v25 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v120 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v26 = *((void *)this + 24);
  uint64_t v121 = v26;
  if ((v26 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v121 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v27 = *((void *)this + 25);
  uint64_t v122 = v27;
  if ((v27 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v122 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v28 = *((void *)this + 26);
  uint64_t v123 = v28;
  if ((v28 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v28 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v123 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v29 = *((void *)this + 27);
  uint64_t v124 = v29;
  if ((v29 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v29 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v124 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v30 = *((void *)this + 28);
  uint64_t v125 = v30;
  if ((v30 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v30 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v125 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v31 = *((void *)this + 29);
  uint64_t v126 = v31;
  if ((v31 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v31 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v126 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v32 = *((void *)this + 30);
  uint64_t v127 = v32;
  if ((v32 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v127 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v33 = *((void *)this + 31);
  uint64_t v128 = v33;
  if ((v33 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v33 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v128 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v34 = *((void *)this + 32);
  uint64_t v129 = v34;
  if ((v34 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v34 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v129 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v35 = *((void *)this + 33);
  uint64_t v130 = v35;
  if ((v35 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v130 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v36 = *((void *)this + 34);
  uint64_t v131 = v36;
  if ((v36 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v131 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v37 = *((void *)this + 35);
  uint64_t v132 = v37;
  if ((v37 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v37 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v132 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v38 = *((void *)this + 36);
  uint64_t v133 = v38;
  if ((v38 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v38 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v133 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v39 = *((void *)this + 37);
  uint64_t v134 = v39;
  if ((v39 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v39 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v134 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v40 = *((void *)this + 38);
  uint64_t v135 = v40;
  if ((v40 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v40 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v135 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v41 = *((void *)this + 39);
  uint64_t v136 = v41;
  if ((v41 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v41 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v136 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v42 = *((void *)this + 40);
  uint64_t v137 = v42;
  if ((v42 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v42 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v137 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v43 = *((void *)this + 41);
  uint64_t v138 = v43;
  if ((v43 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v43 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v138 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v44 = *((void *)this + 42);
  uint64_t v139 = v44;
  if ((v44 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v44 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v139 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v45 = *((void *)this + 43);
  uint64_t v140 = v45;
  if ((v45 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v45 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v140 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v46 = *((void *)this + 44);
  uint64_t v141 = v46;
  if ((v46 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v46 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v141 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v47 = *((void *)this + 45);
  uint64_t v142 = v47;
  if ((v47 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v47 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v142 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v48 = *((void *)this + 46);
  uint64_t v143 = v48;
  if ((v48 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v48 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v143 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v49 = *((void *)this + 47);
  uint64_t v144 = v49;
  if ((v49 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v49 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v144 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v50 = *((void *)this + 48);
  uint64_t v145 = v50;
  if ((v50 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v50 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v145 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v51 = *((void *)this + 49);
  uint64_t v146 = v51;
  if ((v51 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v51 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v146 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v52 = *((void *)this + 50);
  uint64_t v147 = v52;
  if ((v52 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v52 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v147 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v53 = *((void *)this + 51);
  uint64_t v148 = v53;
  if ((v53 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v53 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v148 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v54 = *((void *)this + 52);
  uint64_t v149 = v54;
  if ((v54 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v54 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v149 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v55 = *((void *)this + 53);
  uint64_t v150 = v55;
  if ((v55 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v55 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v150 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v56 = *((void *)this + 54);
  uint64_t v151 = v56;
  if ((v56 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v56 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v151 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v57 = *((void *)this + 55);
  uint64_t v152 = v57;
  if ((v57 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v57 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v152 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v58 = *((void *)this + 56);
  uint64_t v153 = v58;
  if ((v58 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v58 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v153 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v59 = *((void *)this + 57);
  uint64_t v154 = v59;
  if ((v59 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v59 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v154 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v60 = *((void *)this + 58);
  uint64_t v155 = v60;
  if ((v60 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v60 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v155 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v61 = *((void *)this + 59);
  uint64_t v156 = v61;
  if ((v61 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v61 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v156 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v62 = *((void *)this + 60);
  uint64_t v157 = v62;
  if ((v62 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v62 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v157 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v63 = *((void *)this + 61);
  uint64_t v158 = v63;
  if ((v63 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v63 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v158 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v64 = *((void *)this + 62);
  uint64_t v159 = v64;
  if ((v64 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v64 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v159 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v65 = *((void *)this + 63);
  uint64_t v160 = v65;
  if ((v65 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v65 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v160 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v66 = *((void *)this + 64);
  uint64_t v161 = v66;
  if ((v66 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v66 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v161 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v67 = *((void *)this + 65);
  uint64_t v162 = v67;
  if ((v67 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v67 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v162 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v68 = *((void *)this + 66);
  uint64_t v163 = v68;
  if ((v68 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v68 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v163 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v69 = *((void *)this + 67);
  uint64_t v164 = v69;
  if ((v69 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v69 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v164 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v70 = *((void *)this + 68);
  uint64_t v165 = v70;
  if ((v70 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v70 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v165 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v71 = *((void *)this + 69);
  uint64_t v166 = v71;
  if ((v71 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v71 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v166 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v72 = *((void *)this + 70);
  uint64_t v167 = v72;
  if ((v72 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v72 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v167 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v73 = *((void *)this + 71);
  uint64_t v168 = v73;
  if ((v73 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v73 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v168 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v74 = *((void *)this + 72);
  uint64_t v169 = v74;
  if ((v74 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v74 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v169 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v75 = *((void *)this + 73);
  uint64_t v170 = v75;
  if ((v75 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v75 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v170 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v76 = *((void *)this + 74);
  uint64_t v171 = v76;
  if ((v76 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v76 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v171 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v77 = *((void *)this + 75);
  uint64_t v172 = v77;
  if ((v77 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v77 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v172 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v78 = *((void *)this + 76);
  uint64_t v173 = v78;
  if ((v78 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v78 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v173 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v79 = *((void *)this + 77);
  uint64_t v174 = v79;
  if ((v79 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v79 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v174 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v80 = *((void *)this + 78);
  uint64_t v175 = v80;
  if ((v80 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v80 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v175 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v81 = *((void *)this + 79);
  uint64_t v176 = v81;
  if ((v81 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v81 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v176 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v82 = *((void *)this + 80);
  uint64_t v177 = v82;
  if ((v82 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v82 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v177 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v83 = *((void *)this + 81);
  uint64_t v178 = v83;
  if ((v83 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v83 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v178 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v84 = *((void *)this + 82);
  uint64_t v179 = v84;
  if ((v84 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v84 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v179 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v85 = *((void *)this + 83);
  uint64_t v180 = v85;
  if ((v85 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v85 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v180 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v86 = *((void *)this + 84);
  uint64_t v181 = v86;
  if ((v86 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v86 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v181 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v87 = *((void *)this + 85);
  uint64_t v182 = v87;
  if ((v87 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v87 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v182 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v88 = *((void *)this + 86);
  uint64_t v183 = v88;
  if ((v88 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v88 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v183 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v89 = *((void *)this + 87);
  uint64_t v184 = v89;
  if ((v89 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v89 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v184 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((void *)this + 88) = 0;
  *((void *)this + 89) = 0;
  *((void *)this + 90) = 0;
  long long v90 = (char *)operator new(0x2C0uLL);
  uint64_t v91 = 0;
  *((void *)this + 88) = v90;
  *((void *)this + 89) = v90;
  *((void *)this + 90) = v90 + 704;
  do
  {
    uint64_t v92 = *(uint64_t *)((char *)&v97 + v91);
    *(void *)&v90[v91] = v92;
    if ((v92 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v92 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v90[v91] &= 0xFFFFFFFFFFFFFFF8;
    }
    v91 += 8;
  }
  while (v91 != 704);
  *((void *)this + 89) = v90 + 704;
  for (uint64_t i = 696; i != -8; i -= 8)
  {
    uint64_t v94 = *(uint64_t *)((char *)&v97 + i);
    if ((v94 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v94 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return this;
}

void sub_2170E364C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _Unwind_Exception *exception_objecta, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30,void *a31,void *a32,void *a33,void *a34,void *a35,void *a36,void *a37,void *a38,void *a39,void *a40,void *a41,void *a42,void *a43,void *a44,void *a45,void *a46,void *a47,void *a48,void *a49,void *a50,void *a51,void *a52,void *a53,void *a54,void *a55,void *a56,void *a57,void *a58,void *a59,void *a60,void *a61,void *a62,void *a63)
{
  sub_216889A04((void ***)&STACK[0x280]);
  uint64_t v82 = 696;
  while (1)
  {
    uint64_t v83 = *(unint64_t *)((char *)&STACK[0x290] + v82);
    if ((v83 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v83 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v82 -= 8;
    if (v82 == -8)
    {
      if ((*v78 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v78 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v77 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v77 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v76 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v76 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v75 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v75 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v74 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v74 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v73 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v73 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v81 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v81 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v80 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v80 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v79 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v79 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a20 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a21 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a22 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a23 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a23 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a24 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a25 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a25 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a26 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a26 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a27 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a28 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a28 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a29 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a29 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a30 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a30 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a31 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a32 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a32 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a33 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a33 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a34 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a34 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a35 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a35 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a36 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a36 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a37 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a37 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a38 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a38 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a39 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a39 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a40 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a40 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a41 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a41 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a42 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a42 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a43 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a43 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a44 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a44 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a45 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a45 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a46 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a46 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a47 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a47 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a48 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a48 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a49 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a49 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a50 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a50 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a51 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a51 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a52 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a52 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a53 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a53 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a54 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a54 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a55 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a55 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a56 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a56 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a57 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a57 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a58 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a58 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a59 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a59 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a60 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a60 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a61 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a61 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a62 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a62 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a63 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a63 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a64 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a64 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a65 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a65 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a66 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a66 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a67 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a67 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a68 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a68 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a69 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a69 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a70 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a70 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a71 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a71 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a72 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a72 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v84 = *(void *)STACK[0x200];
      if ((v84 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v84 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v85 = *(void *)STACK[0x208];
      if ((v85 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v85 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v86 = *(void *)STACK[0x210];
      if ((v86 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v86 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v87 = *(void *)STACK[0x218];
      if ((v87 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v87 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v88 = *(void *)STACK[0x220];
      if ((v88 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v88 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v89 = *(void *)STACK[0x228];
      if ((v89 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v89 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v90 = *(void *)STACK[0x230];
      if ((v90 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v90 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v91 = *(void *)STACK[0x238];
      if ((v91 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v91 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v92 = *(void *)STACK[0x240];
      if ((v92 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v92 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v93 = *(void *)STACK[0x248];
      if ((v93 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v93 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v94 = *(void *)STACK[0x250];
      if ((v94 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v94 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v95 = *(void *)STACK[0x258];
      if ((v95 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v95 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v96 = *(void *)STACK[0x260];
      if ((v96 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v96 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v97 = *(void *)STACK[0x268];
      if ((v97 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v97 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v98 = *(void *)STACK[0x270];
      if ((v98 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v98 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v99 = *(void *)STACK[0x278];
      if ((v99 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v99 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v72 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v72 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_2170E4044()
{
}

void sub_2170E404C()
{
}

void sub_2170E4054()
{
}

void sub_2170E405C()
{
}

void sub_2170E4064()
{
}

void sub_2170E406C()
{
}

void sub_2170E4074()
{
}

void sub_2170E407C()
{
}

void sub_2170E4084()
{
}

void sub_2170E408C()
{
}

void sub_2170E4094()
{
}

void sub_2170E409C()
{
}

void sub_2170E40A4()
{
}

void sub_2170E40AC()
{
}

void sub_2170E40B4()
{
}

void sub_2170E40BC()
{
}

void sub_2170E40C4()
{
}

void sub_2170E40CC()
{
}

void sub_2170E40D4()
{
}

void sub_2170E40DC()
{
}

void sub_2170E40E4()
{
}

void sub_2170E40EC()
{
}

void sub_2170E40F4()
{
}

void sub_2170E40FC()
{
}

void sub_2170E4104()
{
}

void sub_2170E410C()
{
}

void sub_2170E4114()
{
}

void sub_2170E411C()
{
}

void sub_2170E4124()
{
}

void sub_2170E412C()
{
}

void sub_2170E4134()
{
}

void sub_2170E413C()
{
}

void sub_2170E4144()
{
}

void sub_2170E414C()
{
}

void sub_2170E4154()
{
}

void sub_2170E415C()
{
}

void sub_2170E4164()
{
}

void sub_2170E416C()
{
}

void sub_2170E4174()
{
}

void sub_2170E417C()
{
}

void sub_2170E4184()
{
}

void sub_2170E418C()
{
}

void sub_2170E4194()
{
}

void sub_2170E419C()
{
}

void sub_2170E41A4()
{
}

void sub_2170E41AC()
{
}

void sub_2170E41B4()
{
}

void sub_2170E41BC()
{
}

void sub_2170E41C4()
{
}

void sub_2170E41CC()
{
}

void sub_2170E41D4()
{
}

void sub_2170E41DC()
{
}

void sub_2170E41E4()
{
}

void sub_2170E41EC()
{
}

void sub_2170E41F4()
{
}

void sub_2170E41FC()
{
}

void sub_2170E4204()
{
}

void sub_2170E420C()
{
}

void sub_2170E4214()
{
}

void sub_2170E421C()
{
}

void sub_2170E4224()
{
}

void sub_2170E422C()
{
}

void sub_2170E4234()
{
}

void sub_2170E423C()
{
}

void sub_2170E4244()
{
}

void sub_2170E424C()
{
}

void sub_2170E4254()
{
}

void sub_2170E425C()
{
}

void sub_2170E4264()
{
}

void sub_2170E426C()
{
}

void sub_2170E4274()
{
}

void sub_2170E427C()
{
}

void sub_2170E4284()
{
}

void sub_2170E428C()
{
}

void sub_2170E4294()
{
}

void sub_2170E429C()
{
}

void sub_2170E42A4()
{
}

void sub_2170E42AC()
{
}

void sub_2170E42B4()
{
}

void sub_2170E42C0()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ABC_EXPAND_INSTANCES)) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
  }
}

void sub_2170E4308()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ABC_DISABLE_INSTANCING)) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
  }
}

void sub_2170E4350()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ABC_PARENT_INSTANCES)) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::UsdAbc_AlembicData(uint64_t result, void *a2)
{
  *(_DWORD *)(result + 8) = 1;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(void *)double result = &unk_26C772C48;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = *a2;
  uint64_t v2 = a2 + 1;
  uint64_t v3 = a2[1];
  *(void *)(result + 48) = v3;
  uint64_t v4 = result + 48;
  uint64_t v5 = a2[2];
  *(void *)(result + 56) = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    *a2 = v2;
    *uint64_t v2 = 0;
    a2[2] = 0;
  }
  else
  {
    *(void *)(result + 40) = v4;
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::~UsdAbc_AlembicData(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData *this)
{
  *(void *)this = &unk_26C772C48;
  sub_2167877AC((uint64_t)this + 40, *((void **)this + 6));
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v3) {
    sub_216784EC4(v3);
  }

  pxrInternal__aapl__pxrReserved__::SdfAbstractData::~SdfAbstractData(this, v2);
}

{
  void *v1;
  uint64_t vars8;

  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::~UsdAbc_AlembicData(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::New(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x40uLL);
  uint64_t v5 = (void *)*a1;
  uint64_t v7 = a1 + 1;
  uint64_t v6 = (void *)a1[1];
  uint64_t v10 = (void *)*a1;
  uint64_t v11 = v6;
  uint64_t v8 = a1[2];
  uint64_t v12 = v8;
  if (v8)
  {
    v6[2] = &v11;
    *a1 = v7;
    *uint64_t v7 = 0;
    a1[2] = 0;
  }
  else
  {
    uint64_t v10 = &v11;
    uint64_t v5 = &v11;
  }
  v4[2] = 1;
  *((void *)v4 + 2) = 0;
  *((void *)v4 + 3) = 0;
  *(void *)uint64_t v4 = &unk_26C772C48;
  *((void *)v4 + 4) = 0;
  *((void *)v4 + 5) = v5;
  *((void *)v4 + 6) = v6;
  uint64_t v9 = (char *)(v4 + 12);
  *((void *)v4 + 7) = v8;
  if (v8)
  {
    v6[2] = v9;
    uint64_t v10 = &v11;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v6 = 0;
  }
  else
  {
    *((void *)v4 + 5) = v9;
  }
  *a2 = v4;
  sub_2167877AC((uint64_t)&v10, v6);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::Open(uint64_t a1, uint64_t a2)
{
  sub_216851EE4((uint64_t)&v27, "UsdAbc_AlembicData", "UsdAbc_AlembicData::Open");
  uint64_t v4 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *)operator new(0x20uLL);
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::UsdAbc_AlembicDataReader(v4);
  uint64_t v5 = (char **)(a1 + 24);
  sub_2170E47FC((void *)(a1 + 24), (uint64_t)v4);
  uint64_t v6 = (unsigned char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ABC_EXPAND_INSTANCES);
  if (!v6) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
  }
  if (*v6)
  {
    uint64_t v7 = *v5;
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames);
    if (!v8) {
      uint64_t v8 = sub_2170E5328(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames);
    }
    pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::SetFlag((pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *)v7, (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames_StaticTokenType *)((char *)v8 + 8), 1);
  }
  uint64_t v9 = (unsigned char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ABC_DISABLE_INSTANCING);
  if (!v9) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
  }
  if (*v9)
  {
    uint64_t v10 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *)*v5;
    uint64_t v11 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames);
    if (!v11) {
      uint64_t v11 = sub_2170E5328(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames);
    }
    pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::SetFlag(v10, (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames_StaticTokenType *)((char *)v11 + 16), 1);
  }
  uint64_t v12 = (unsigned char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ABC_PARENT_INSTANCES);
  if (!v12) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
  }
  if (*v12)
  {
    uint64_t v13 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *)*v5;
    uint64_t v14 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames);
    if (!v14) {
      uint64_t v14 = sub_2170E5328(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames);
    }
    pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::SetFlag(v13, (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames_StaticTokenType *)((char *)v14 + 24), 1);
  }
  BOOL v15 = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::Open(*(void *)(a1 + 24), (long long *)a2, a1 + 40);
  if (!v15)
  {
    v25[0] = "usdAbc/alembicData.cpp";
    v25[1] = "Open";
    void v25[2] = 157;
    v25[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::Open(const std::string &)";
    char v26 = 0;
    int v16 = *(char *)(a2 + 23);
    uint64_t v17 = *(const char **)a2;
    pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::GetErrors(*v5, (uint64_t)__p);
    if (v16 >= 0) {
      uint64_t v18 = (const char *)a2;
    }
    else {
      uint64_t v18 = v17;
    }
    if (v24 >= 0) {
      uint64_t v19 = __p;
    }
    else {
      uint64_t v19 = (void **)__p[0];
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v25, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to open Alembic archive \"%s\": %s", v18, (const char *)v19);
    if (v24 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v20 = *(std::__shared_weak_count **)(a1 + 32);
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
    if (v20) {
      sub_216784EC4(v20);
    }
  }
  while (v28--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v27);
  return v15;
}

void sub_2170E47BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_21684E6B8(v16 - 64);
  _Unwind_Resume(a1);
}

void sub_2170E47FC(void *a1, uint64_t a2)
{
  sub_2170E520C(&v5, a2);
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  long long v4 = v5;
  *(void *)&long long v5 = *a1;
  *((void *)&v5 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3) {
    sub_216784EC4(v3);
  }
}

void pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::Close(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  if (v2) {
    sub_216784EC4(v2);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::Write(uint64_t *a1, std::string *a2, uint64_t a3)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  sub_216851EE4((uint64_t)&v21, "UsdAbc_AlembicData", "UsdAbc_AlembicData::Write");
  if (*(char *)(a3 + 23) < 0) {
    sub_216778F24(&__dst, *(void **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __dst = *(std::string *)a3;
  }
  uint64_t v6 = sub_216AA03A8(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __dst.__r_.__value_.__l.__size_;
    }
    if (!size)
    {
      uint64_t v9 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216A5B4F4(a1);
      uint64_t v10 = pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v9);
      uint64_t v11 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v11) {
        uint64_t v11 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      (*(void (**)(char **__return_ptr, pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t, uint64_t))(*(void *)v9 + 136))(&v23, v9, v10, (uint64_t)v11 + 48);
      if (sub_21695C360((pxrInternal__aapl__pxrReserved__::VtValue *)&v23))
      {
        if ((v24 & 4) != 0) {
          uint64_t v12 = (const std::string *)(*(uint64_t (**)(char **))((v24 & 0xFFFFFFFFFFFFFFF8) + 168))(&v23);
        }
        else {
          uint64_t v12 = (const std::string *)v23;
        }
        std::string::operator=(&__dst, v12);
      }
      sub_2168EE084((uint64_t)&v23);
    }
  }
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataWriter::UsdAbc_AlembicDataWriter((pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataWriter *)v19);
  if (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataWriter::Open((uint64_t)v19, a2, (uint64_t)&__dst))
  {
    if (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataWriter::Write(v19, (uint64_t)a1)
      && (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataWriter::Close((pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataWriter *)v19) & 1) != 0)
    {
      uint64_t v13 = 1;
      goto LABEL_26;
    }
    pxrInternal__aapl__pxrReserved__::TfDeleteFile((const char *)a2);
  }
  uint64_t v23 = "usdAbc/alembicData.cpp";
  unint64_t v24 = (unint64_t)"Write";
  uint64_t v25 = 197;
  char v26 = "static BOOL pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::Write(const SdfAbstractDataConstPtr &, const s"
        "td::string &, const std::string &)";
  char v27 = 0;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataWriter::GetErrors((char *)v19, (uint64_t)__p);
  if (v18 >= 0) {
    uint64_t v14 = __p;
  }
  else {
    uint64_t v14 = (void **)__p[0];
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v23, 3, (pxrInternal__aapl__pxrReserved__ *)"Alembic error: %s", (const char *)v14);
  if (v18 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v13 = 0;
LABEL_26:
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataWriter::~UsdAbc_AlembicDataWriter((pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataWriter *)v19);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  while (v22--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v21);
  return v13;
}

void sub_2170E4AC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27)
{
  sub_2168EE084(v27 - 80);
  if (a25 < 0) {
    operator delete(__p);
  }
  sub_21684E6B8((uint64_t)&a27);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::StreamsData(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData *this)
{
  return 1;
}

void pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::CreateSpec()
{
  v0[0] = "usdAbc/alembicData.cpp";
  v0[1] = "CreateSpec";
  v0[2] = 210;
  v0[3] = "virtual void pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::CreateSpec(const SdfPath &, SdfSpecType)";
  char v1 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v0, 3, (pxrInternal__aapl__pxrReserved__ *)"Alembic file CreateSpec() not supported");
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::HasSpec(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *)*((void *)this + 3);
  if (!v2) {
    return *(void *)a2 == *(void *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(0);
  }

  return pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::HasSpec(v2, a2);
}

void pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::EraseSpec(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  v2[0] = "usdAbc/alembicData.cpp";
  v2[1] = "EraseSpec";
  v2[2] = 223;
  v2[3] = "virtual void pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::EraseSpec(const SdfPath &)";
  char v3 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v2, 3, (pxrInternal__aapl__pxrReserved__ *)"Alembic file EraseSpec() not supported");
}

void pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::MoveSpec(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  v3[0] = "usdAbc/alembicData.cpp";
  v3[1] = "MoveSpec";
  void v3[2] = 231;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::MoveSpec(const SdfPath &, const SdfPath &)";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 3, (pxrInternal__aapl__pxrReserved__ *)"Alembic file MoveSpec() not supported");
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::GetSpecType(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *)*((void *)this + 3);
  if (v2)
  {
    return pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::GetSpecType(v2, a2);
  }
  else if (*(void *)a2 == *(void *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(0))
  {
    return 7;
  }
  else
  {
    return 0;
  }
}

_DWORD *pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::_VisitSpecs(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData *this, pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor *a2)
{
  double result = (_DWORD *)*((void *)this + 3);
  if (result) {
    return pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::VisitSpecs(result, this, a2);
  }
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::Has(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t *a3, uint64_t a4)
{
  double result = *(uint64_t **)(a1 + 24);
  if (result) {
    return (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::HasField(result, a2, a3, a4);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::Has(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  double result = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *)*((void *)this + 3);
  if (result) {
    return (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *)pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::HasField(result, a2, a3, a4);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::Get@<X0>(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, const pxrInternal__aapl__pxrReserved__::TfToken *a3@<X2>, pxrInternal__aapl__pxrReserved__::VtValue *a4@<X8>)
{
  *((void *)a4 + 1) = 0;
  double result = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *)*((void *)this + 3);
  if (result) {
    return (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *)pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::HasField(result, a2, a3, a4);
  }
  return result;
}

void sub_2170E4D8C(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::Set(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  v4[0] = "usdAbc/alembicData.cpp";
  v4[1] = "Set";
  v4[2] = 290;
  v4[3] = "virtual void pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::Set(const SdfPath &, const TfToken &, const VtValue &)";
  char v5 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 3, (pxrInternal__aapl__pxrReserved__ *)"Alembic file Set() not supported", a4);
}

void pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::Set()
{
  v0[0] = "usdAbc/alembicData.cpp";
  v0[1] = "Set";
  v0[2] = 299;
  v0[3] = "virtual void pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::Set(const SdfPath &, const TfToken &, const"
          " SdfAbstractDataConstValue &)";
  char v1 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v0, 3, (pxrInternal__aapl__pxrReserved__ *)"Alembic file Set() not supported");
}

void pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::Erase(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  v3[0] = "usdAbc/alembicData.cpp";
  v3[1] = "Erase";
  void v3[2] = 307;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::Erase(const SdfPath &, const TfToken &)";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 3, (pxrInternal__aapl__pxrReserved__ *)"Alembic file Erase() not supported");
}

pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::List@<X0>(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, void *a3@<X8>)
{
  double result = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *)*((void *)this + 3);
  if (result) {
    return (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *)pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::List(result, a2, (uint64_t)a3);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  return result;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::ListAllTimeSamples@<X0>(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData *this@<X0>, uint64_t *a2@<X8>)
{
  double result = (uint64_t *)*((void *)this + 3);
  if (result)
  {
    uint64_t v4 = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::ListAllTimeSamples((pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *)result);
    return sub_2170E53B4(a2, v4);
  }
  else
  {
    a2[2] = 0;
    a2[1] = 0;
    *a2 = (uint64_t)(a2 + 1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::ListTimeSamplesForPath@<X0>(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, void *a3@<X8>)
{
  double result = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *)*((void *)this + 3);
  if (result)
  {
    char v5 = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::ListTimeSamplesForPath(result, a2);
    return (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *)pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::TimeSamples::GetTimes((double **)v5, (uint64_t)a3);
  }
  else
  {
    a3[2] = 0;
    a3[1] = 0;
    *a3 = a3 + 1;
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::GetBracketingTimeSamples(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader **this, double a2, double *a3, double *a4)
{
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::ListAllTimeSamples(this[3]);

  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::TimeSamples::Bracket<std::set<double>>();
}

pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::GetNumTimeSamplesForPath(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  double result = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *)*((void *)this + 3);
  if (result)
  {
    char v3 = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::ListTimeSamplesForPath(result, a2);
    return (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *)pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::TimeSamples::GetSize((pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::TimeSamples *)v3);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::GetBracketingTimeSamplesForPath(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, double a3, double *a4, double *a5)
{
  double result = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *)*((void *)this + 3);
  if (result)
  {
    uint64_t v9 = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::ListTimeSamplesForPath(result, a2);
    return (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *)pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::TimeSamples::Bracket((pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::TimeSamples *)v9, a3, a4, a5);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::QueryTimeSample(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  double result = *(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader **)(a1 + 24);
  if (result)
  {
    uint64_t v10 = 0;
    uint64_t v9 = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::ListTimeSamplesForPath(result, a2);
    double result = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *)pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::TimeSamples::FindIndex((pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::TimeSamples *)v9, a4, &v10);
    if (result) {
      return (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *)pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::HasValue(*(std::recursive_mutex ****)(a1 + 24), a2, v10, a3);
    }
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::QueryTimeSample(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader **this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, double a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  uint64_t v10 = 0;
  uint64_t v8 = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::ListTimeSamplesForPath(this[3], a2);
  double result = (void *)pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::TimeSamples::FindIndex((pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::TimeSamples *)v8, a3, &v10);
  if (result) {
    return pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::HasValue((std::recursive_mutex ***)this[3], a2, v10, a4);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::SetTimeSample(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, double a3, const pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  v4[0] = "usdAbc/alembicData.cpp";
  v4[1] = "SetTimeSample";
  v4[2] = 383;
  v4[3] = "virtual void pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::SetTimeSample(const SdfPath &, double, const VtValue &)";
  char v5 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 3, (pxrInternal__aapl__pxrReserved__ *)"Alembic file SetTimeSample() not supported", a3);
}

void pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::EraseTimeSample(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, double a3)
{
  v3[0] = "usdAbc/alembicData.cpp";
  v3[1] = "EraseTimeSample";
  void v3[2] = 389;
  v3[3] = "virtual void pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::EraseTimeSample(const SdfPath &, double)";
  char v4 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 3, (pxrInternal__aapl__pxrReserved__ *)"Alembic file EraseTimeSample() not supported", a3);
}

void *sub_2170E520C(void *a1, uint64_t a2)
{
  *a1 = a2;
  char v4 = operator new(0x20uLL);
  *char v4 = &unk_26C772DB0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_2170E5264(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::~UsdAbc_AlembicDataReader(v1);
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_2170E5284(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void sub_2170E52AC(uint64_t a1)
{
  char v1 = *(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader **)(a1 + 24);
  if (v1)
  {
    pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::~UsdAbc_AlembicDataReader(v1);
    operator delete(v2);
  }
}

uint64_t sub_2170E52E4(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C772E00)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames_StaticTokenType *sub_2170E5328(atomic_ullong *a1)
{
  double result = sub_2170E5370();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames_StaticTokenType::~UsdAbc_AlembicContextFlagNames_StaticTokenType(result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames_StaticTokenType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames_StaticTokenType *sub_2170E5370()
{
  v0 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames_StaticTokenType *)operator new(0x38uLL);
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames_StaticTokenType::UsdAbc_AlembicContextFlagNames_StaticTokenType(v0);
  return v0;
}

void sub_2170E53A0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_2170E53B4(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_216A9C700(a1, *(double **)a2, (double *)(a2 + 8));
  return a1;
}

void sub_2170E53F4(_Unwind_Exception *a1)
{
  sub_2167FB780(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAbcAlembicFileFormatTokens_StaticTokenType::~UsdAbcAlembicFileFormatTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::UsdAbcAlembicFileFormatTokens_StaticTokenType *this)
{
  char v4 = (void **)((char *)this + 24);
  sub_216889A04(&v4);
  uint64_t v2 = *((void *)this + 2);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 1);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

pxrInternal__aapl__pxrReserved__::UsdAbcAlembicFileFormatTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::UsdAbcAlembicFileFormatTokens_StaticTokenType::UsdAbcAlembicFileFormatTokens_StaticTokenType(atomic_uint **this)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v2 = (atomic_uint **)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "abc", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2, "1.0", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 2, "usd", 0);
  uint64_t v3 = *this;
  BOOL v15 = v3;
  if ((v3 & 7) != 0)
  {
    char v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
      BOOL v15 = v4;
    }
  }
  char v5 = *v2;
  uint64_t v16 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v16 = v6;
    }
  }
  char v7 = this[2];
  uint64_t v17 = v7;
  if ((v7 & 7) != 0)
  {
    uint64_t v8 = (atomic_uint *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v17 = v8;
    }
  }
  this[3] = 0;
  this[4] = 0;
  this[5] = 0;
  uint64_t v9 = (atomic_uint *)operator new(0x18uLL);
  unint64_t v10 = 0;
  this[3] = v9;
  this[4] = v9;
  this[5] = v9 + 6;
  do
  {
    uint64_t v11 = (&v15)[v10 / 2];
    *(void *)&v9[v10] = v11;
    if ((v11 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v9[v10] &= 0xFFFFFFFFFFFFFFF8;
    }
    v10 += 2;
  }
  while (v10 != 6);
  this[4] = v9 + 6;
  for (uint64_t i = 2; i != -1; --i)
  {
    uint64_t v13 = (&v15)[i];
    if ((v13 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return (pxrInternal__aapl__pxrReserved__::UsdAbcAlembicFileFormatTokens_StaticTokenType *)this;
}

void sub_2170E563C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  sub_216889A04(&a9);
  uint64_t v15 = 16;
  while (1)
  {
    uint64_t v16 = *(void *)(&a11 + v15);
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v15 -= 8;
    if (v15 == -8)
    {
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

uint64_t sub_2170E56D8()
{
  v0 = sub_2170E5DFC();

  return sub_2170E5F28(v0);
}

pxrInternal__aapl__pxrReserved__::UsdAbcAlembicFileFormat *pxrInternal__aapl__pxrReserved__::UsdAbcAlembicFileFormat::UsdAbcAlembicFileFormat(pxrInternal__aapl__pxrReserved__::UsdAbcAlembicFileFormat *this)
{
  uint64_t v2 = (uint64_t *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdAbcAlembicFileFormatTokens);
  if (!v2) {
    uint64_t v2 = (uint64_t *)sub_2170E608C(&pxrInternal__aapl__pxrReserved__::UsdAbcAlembicFileFormatTokens);
  }
  uint64_t v3 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdAbcAlembicFileFormatTokens);
  if (!v3) {
    uint64_t v3 = sub_2170E608C(&pxrInternal__aapl__pxrReserved__::UsdAbcAlembicFileFormatTokens);
  }
  char v4 = (atomic_uint **)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdAbcAlembicFileFormatTokens);
  if (!v4) {
    char v4 = sub_2170E608C(&pxrInternal__aapl__pxrReserved__::UsdAbcAlembicFileFormatTokens);
  }
  char v5 = (uint64_t *)(v3 + 1);
  uint64_t v6 = (uint64_t *)(v4 + 2);
  char v7 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdAbcAlembicFileFormatTokens);
  if (!v7) {
    char v7 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_2170E608C(&pxrInternal__aapl__pxrReserved__::UsdAbcAlembicFileFormatTokens);
  }
  if ((*(void *)v7 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)v7 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v7);
  }
  pxrInternal__aapl__pxrReserved__::SdfFileFormat::SdfFileFormat((uint64_t)this, v2, v5, v6, (uint64_t)EmptyString);
  *(void *)this = &unk_26C772E28;
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::SdfFileFormat *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdUsdaFileFormatTokens);
  if (!v9) {
    uint64_t v9 = sub_216C42AE0(&pxrInternal__aapl__pxrReserved__::UsdUsdaFileFormatTokens);
  }
  pxrInternal__aapl__pxrReserved__::SdfFileFormat::FindById(v9, (uint64_t *)this + 14);
  return this;
}

void sub_2170E5820(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::SdfFileFormat::~SdfFileFormat(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAbcAlembicFileFormat::~UsdAbcAlembicFileFormat(pxrInternal__aapl__pxrReserved__::UsdAbcAlembicFileFormat *this)
{
  *(void *)this = &unk_26C772E28;
  uint64_t v2 = (atomic_uint *)*((void *)this + 15);
  if (v2 && atomic_fetch_add_explicit(v2 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v2 + 8))(v2);
  }

  pxrInternal__aapl__pxrReserved__::SdfFileFormat::~SdfFileFormat(this);
}

{
  void *v1;
  uint64_t vars8;

  pxrInternal__aapl__pxrReserved__::UsdAbcAlembicFileFormat::~UsdAbcAlembicFileFormat(this);

  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdAbcAlembicFileFormat::InitData(const void ***a1@<X1>, void *a2@<X8>)
{
  sub_2167898D0(v3, a1);
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::New(v3, &v4);
  *a2 = v4;
  char v4 = 0;
  sub_2170E6118(&v4);
  sub_2167877AC((uint64_t)v3, (void *)v3[1]);
}

void sub_2170E5950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAbcAlembicFileFormat::CanRead(pxrInternal__aapl__pxrReserved__::SdfFileFormat *a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::TfGetExtension(a2, &__p);
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (!size)
  {
    uint64_t v5 = 0;
    if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) == 0) {
      return v5;
    }
    goto LABEL_5;
  }
  FormatId = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetFormatId(a1);
  uint64_t v5 = pxrInternal__aapl__pxrReserved__::TfToken::operator==(FormatId, (unsigned __int8 *)&__p);
  if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_5:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
  return v5;
}

void sub_2170E59E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdAbcAlembicFileFormat::Read(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfLayer *this, uint64_t a3)
{
  uint64_t FileFormatArguments = pxrInternal__aapl__pxrReserved__::SdfLayer::GetFileFormatArguments(this);
  (*(void (**)(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 40))(&v11, a1, FileFormatArguments);
  unint64_t v10 = v11;
  sub_2168BD80C((uint64_t *)&v10);
  uint64_t v7 = sub_2170E5AE0((uint64_t *)&v10);
  BOOL v8 = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::Open(v7, a3);
  if (v8) {
    pxrInternal__aapl__pxrReserved__::SdfFileFormat::_SetLayerData(this, (uint64_t *)&v11);
  }
  sub_2170E6118(&v10);
  sub_216AA10A8(&v11);
  return v8;
}

void sub_2170E5ABC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216AA10A8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2170E5AE0(uint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v2 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/refPtr.h", 47);
    v3[0] = sub_21684E5D4((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/refPtr.h", (uint64_t)v2, 0x2Fu);
    v3[1] = "operator->";
    void v3[2] = 953;
    uint64_t v3[3] = "T *pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData>::operato"
            "r->() const [U = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData]";
    char v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError((uint64_t)v3, (pxrInternal__aapl__pxrReserved__ *)(0x80000002174B046CLL & 0x7FFFFFFFFFFFFFFFLL));
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAbcAlembicFileFormat::_ReadDetached(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfLayer *a2, uint64_t a3, uint64_t a4)
{
  return pxrInternal__aapl__pxrReserved__::SdfFileFormat::_ReadAndCopyLayerDataToMemory(a1, a2, a3, a4, 0);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAbcAlembicFileFormat::WriteToFile(int a1, pxrInternal__aapl__pxrReserved__::SdfFileFormat *this, std::string *a3, uint64_t a4)
{
  pxrInternal__aapl__pxrReserved__::SdfFileFormat::_GetLayerData(&v13, this, this);
  uint64_t v6 = sub_216AA03A8(&v13);
  if (v7 & 1 | (unint64_t)v6
    || (v11[0] = "usdAbc/alembicFileFormat.cpp",
        v11[1] = "WriteToFile",
        void v11[2] = 124,
        v11[3] = "virtual BOOL pxrInternal__aapl__pxrReserved__::UsdAbcAlembicFileFormat::WriteToFile(const SdfLayer &, c"
                 "onst std::string &, const std::string &, const FileFormatArguments &) const",
        char v12 = 0,
        pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v11, "data", 0)))
  {
    uint64_t v8 = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::Write(&v13, a3, a4);
  }
  else
  {
    uint64_t v8 = 0;
  }
  uint64_t v9 = v14;
  if (v14 && atomic_fetch_add_explicit((atomic_uint *volatile)(v14 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  return v8;
}

void sub_2170E5C60(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(atomic_uint **)(v1 - 24);
  if (v3)
  {
    if (atomic_fetch_add_explicit(v3 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v3 + 8))(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAbcAlembicFileFormat::ReadFromString(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)sub_216979288((uint64_t *)(a1 + 112)) + 72);

  return v1();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAbcAlembicFileFormat::WriteToString(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)sub_216979288((uint64_t *)(a1 + 112)) + 88);

  return v1();
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAbcAlembicFileFormat::WriteToStream(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)sub_216979288((uint64_t *)(a1 + 112)) + 80);

  return v1();
}

uint64_t *sub_2170E5DFC()
{
  sub_216851EE4((uint64_t)&v6, "Tf", "TfType::Define");
  sub_216B76D4C((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((long long *)__p, (char **)v5, 0);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_2170E5EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  sub_21684E6B8(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_2170E5F28(uint64_t *a1)
{
  uint64_t v2 = operator new(8uLL);
  *uint64_t v2 = &unk_26C772EE0;
  uint64_t v5 = v2;
  pxrInternal__aapl__pxrReserved__::TfType::SetFactory(a1, (uint64_t *)&v5, v3);
  uint64_t result = (uint64_t)v5;
  uint64_t v5 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_2170E5FB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_217324398(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_2170E5FD8(pxrInternal__aapl__pxrReserved__::Sdf_FileFormatFactoryBase *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_FileFormatFactoryBase::~Sdf_FileFormatFactoryBase(a1);

  operator delete(v1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_2170E6000@<X0>(pxrInternal__aapl__pxrReserved__::UsdAbcAlembicFileFormat **a1@<X8>)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdAbcAlembicFileFormat *)operator new(0x80uLL);
  pxrInternal__aapl__pxrReserved__::UsdAbcAlembicFileFormat::UsdAbcAlembicFileFormat(v2);
  *a1 = v2;
  char v4 = 0;
  return sub_2170E605C(&v4);
}

void sub_2170E6048(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_2170E605C(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  return a1;
}

atomic_uint **sub_2170E608C(atomic_ullong *a1)
{
  uint64_t result = sub_2170E60D4();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::UsdAbcAlembicFileFormatTokens_StaticTokenType::~UsdAbcAlembicFileFormatTokens_StaticTokenType((pxrInternal__aapl__pxrReserved__::UsdAbcAlembicFileFormatTokens_StaticTokenType *)result);
      operator delete(v4);
    }
    return (atomic_uint **)atomic_load((unint64_t *)a1);
  }
  return result;
}

atomic_uint **sub_2170E60D4()
{
  v0 = (atomic_uint **)operator new(0x30uLL);
  pxrInternal__aapl__pxrReserved__::UsdAbcAlembicFileFormatTokens_StaticTokenType::UsdAbcAlembicFileFormatTokens_StaticTokenType(v0);
  return v0;
}

void sub_2170E6104(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_2170E6118(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  return a1;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::TimeSamples::Bracket<std::set<double>>(void *a1, double *a2, double *a3, double a4)
{
  uint64_t v4 = a1[2];
  if (v4)
  {
    uint64_t v5 = (double *)(a1 + 1);
    uint64_t v6 = (double *)a1[1];
    if (v6)
    {
      int v7 = (double *)(a1 + 1);
      uint64_t v8 = a1[1];
      do
      {
        uint64_t v9 = (uint64_t *)(v8 + 8);
        if (*(double *)(v8 + 32) >= a4)
        {
          uint64_t v9 = (uint64_t *)v8;
          int v7 = (double *)v8;
        }
        uint64_t v8 = *v9;
      }
      while (*v9);
      if (v7 != v5)
      {
        unint64_t v10 = (double *)*a1;
        double v11 = v7[4];
        *a3 = v11;
        BOOL v12 = v7 == v10 || v11 == a4;
        if (!v12)
        {
          double v13 = *v7;
          if (*(void *)v7)
          {
            do
            {
              uint64_t v14 = *(double **)&v13;
              double v13 = *(double *)(*(void *)&v13 + 8);
            }
            while (v13 != 0.0);
          }
          else
          {
            do
            {
              uint64_t v14 = (double *)*((void *)v7 + 2);
              BOOL v12 = *(void *)v14 == (void)v7;
              int v7 = v14;
            }
            while (v12);
          }
          double v11 = v14[4];
        }
        goto LABEL_21;
      }
      do
      {
        uint64_t v15 = v6;
        uint64_t v6 = (double *)*((void *)v6 + 1);
      }
      while (v6);
    }
    else
    {
      do
      {
        uint64_t v15 = (double *)*((void *)v5 + 2);
        BOOL v12 = *(void *)v15 == (void)v5;
        uint64_t v5 = v15;
      }
      while (v12);
    }
    double v11 = v15[4];
    *a3 = v11;
LABEL_21:
    *a2 = v11;
  }
  return v4 != 0;
}

void sub_2170E6210()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ABC_WARN_ALL_UNSUPPORTED_VALUES)) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
  }
}

void sub_2170E6258()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ABC_NUM_OGAWA_STREAMS)) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<int>();
  }
}

void sub_2170E62A0()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ABC_WRITE_UV_AS_ST_TEXCOORD2FARRAY)) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
  }
}

void sub_2170E62E8()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ABC_XFORM_PRIM_COLLAPSE)) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
  }
}

void sub_2170E6330()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ABC_READ_ARCHIVE_USE_MMAP)) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
  }
}

void *pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::TimeSamples::TimeSamples(void *this)
{
  *this = 0;
  this[1] = 0;
  this[2] = 0;
  return this;
}

{
  *this = 0;
  this[1] = 0;
  this[2] = 0;
  return this;
}

void *pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::TimeSamples::TimeSamples(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_21677CA50(a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  return a1;
}

{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_21677CA50(a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  return a1;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::TimeSamples::Swap(uint64_t *this, pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::TimeSamples *a2)
{
  uint64_t v2 = *this;
  *this = *(void *)a2;
  *(void *)a2 = v2;
  uint64_t v3 = this[1];
  this[1] = *((void *)a2 + 1);
  *((void *)a2 + 1) = v3;
  uint64_t v4 = this[2];
  this[2] = *((void *)a2 + 2);
  *((void *)a2 + 2) = v4;
  return this;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::TimeSamples::IsEmpty(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::TimeSamples *this)
{
  return *(void *)this == *((void *)this + 1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::TimeSamples::GetSize(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::TimeSamples *this)
{
  return (uint64_t)(*((void *)this + 1) - *(void *)this) >> 3;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::TimeSamples::GetTimes@<X0>(double **this@<X0>, uint64_t a2@<X8>)
{
  return sub_216C65290(a2, *this, this[1]);
}

double pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::TimeSamples::operator[](void *a1, uint64_t a2)
{
  return *(double *)(*a1 + 8 * a2);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::TimeSamples::AddTo(uint64_t *result, uint64_t **a2)
{
  uint64_t v2 = (double *)*result;
  uint64_t v3 = (double *)result[1];
  if ((double *)*result != v3)
  {
    uint64_t v5 = (double *)(a2 + 1);
    do
    {
      uint64_t result = sub_216A9E4F4(a2, v5, v2, (uint64_t *)v2);
      ++v2;
    }
    while (v2 != v3);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::TimeSamples::FindIndex(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::TimeSamples *this, double a2, uint64_t *a3)
{
  uint64_t v3 = (double *)*((void *)this + 1);
  if (v3 == *(double **)this)
  {
    uint64_t v5 = (double *)*((void *)this + 1);
  }
  else
  {
    unint64_t v4 = ((uint64_t)v3 - *(void *)this) >> 3;
    uint64_t v5 = *(double **)this;
    do
    {
      unint64_t v6 = v4 >> 1;
      int v7 = &v5[v4 >> 1];
      double v9 = *v7;
      uint64_t v8 = v7 + 1;
      v4 += ~(v4 >> 1);
      if (v9 < a2) {
        uint64_t v5 = v8;
      }
      else {
        unint64_t v4 = v6;
      }
    }
    while (v4);
  }
  if (v3 == v5 || *v5 != a2) {
    return 0;
  }
  *a3 = ((uint64_t)v5 - *(void *)this) >> 3;
  return 1;
}

BOOL sub_2170E656C(double **a1, double *a2, double *a3, double a4)
{
  unint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  if (*a1 != v5)
  {
    unint64_t v6 = v5 - v4;
    int v7 = *a1;
    do
    {
      unint64_t v8 = v6 >> 1;
      double v9 = &v7[v6 >> 1];
      double v11 = *v9;
      unint64_t v10 = v9 + 1;
      v6 += ~(v6 >> 1);
      if (v11 < a4) {
        int v7 = v10;
      }
      else {
        unint64_t v6 = v8;
      }
    }
    while (v6);
    if (v7 == v5)
    {
      double v12 = *(v5 - 1);
      *a3 = v12;
    }
    else
    {
      double v12 = *v7;
      *a3 = *v7;
      if (v7 != v4 && v12 != a4) {
        double v12 = *(v7 - 1);
      }
    }
    *a2 = v12;
  }
  return v4 != v5;
}

pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::UsdAbc_AlembicDataReader(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *this)
{
  uint64_t v2 = (char *)operator new(0xD0uLL);
  *(void *)uint64_t v2 = 0;
  *(_OWORD *)(v2 + 8) = xmmword_2174B04C0;
  *((void *)v2 + 4) = 0;
  *((void *)v2 + 3) = v2 + 32;
  *((void *)v2 + 5) = 0;
  *((_DWORD *)v2 + 12) = 2;
  sub_216779094((void *)v2 + 7, "");
  *((void *)v2 + 14) = 0;
  *((void *)v2 + 10) = 0;
  *((void *)v2 + 11) = 0;
  *((void *)v2 + 12) = 0;
  *((void *)v2 + 13) = v2 + 112;
  *((void *)v2 + 17) = 0;
  *((void *)v2 + 15) = 0;
  *((void *)v2 + 16) = v2 + 136;
  *((void *)v2 + 21) = 0;
  *((void *)v2 + 20) = 0;
  *((void *)v2 + 18) = 0;
  *((void *)v2 + 19) = v2 + 160;
  *((void *)v2 + 25) = 0;
  *((void *)v2 + 24) = 0;
  *((void *)v2 + 23) = v2 + 192;
  *((void *)this + 1) = 0;
  *(void *)this = v2;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95D38, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95D38))
  {
    sub_2170E9EA4();
    __cxa_atexit((void (*)(void *))sub_2170EB1A0, &unk_267B95D08, &dword_216758000);
    __cxa_guard_release(&qword_267B95D38);
  }
  *((void *)v2 + 12) = &unk_267B95D08;
  return this;
}

void sub_2170E6718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  __cxa_guard_abort(&qword_267B95D38);
  if (*(char *)(v10 + 31) < 0) {
    operator delete(*a10);
  }
  uint64_t v12 = *(void *)v10;
  *(void *)uint64_t v10 = 0;
  if (v12) {
    sub_21711CC58(v10, v12);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::~UsdAbc_AlembicDataReader(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *this)
{
  sub_2170E84B4(*(void *)this);
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
  uint64_t v2 = *(void *)this;
  *(void *)this = 0;
  if (v2) {
    sub_21711CC58((uint64_t)this, v2);
  }
}

void pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::Close(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *this)
{
}

BOOL pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::Open(uint64_t a1, long long *a2, uint64_t a3)
{
  if (*(char *)(a1 + 31) < 0)
  {
    **(unsigned char **)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 8) = 0;
    *(unsigned char *)(a1 + 31) = 0;
  }
  uint64_t v6 = a1 + 8;
  uint64_t v7 = *(void *)a1;
  sub_2170E84B4(*(void *)a1);
  uint64_t v251 = 0;
  int v252 = 0;
  unint64_t v253 = 0;
  sub_216779094(&__p, "abcLayers");
  uint64_t v8 = sub_21678C2D8(a3, (const void **)&__p);
  if (SHIBYTE(v227) < 0) {
    operator delete((void *)__p);
  }
  uint64_t v212 = a3 + 8;
  uint64_t v214 = v7;
  if (a3 + 8 != v8)
  {
    sub_216779094(&__p, ",");
    pxrInternal__aapl__pxrReserved__::TfStringSplit((std::string *)(v8 + 56), (char *)&__p, (uint64_t *)&v220);
    if (SHIBYTE(v227) < 0) {
      operator delete((void *)__p);
    }
    double v9 = v220;
    uint64_t v10 = (void *)v221.i64[0];
    if (v220 != (void *)v221.i64[0])
    {
      double v11 = v252;
      do
      {
        if ((unint64_t)v11 >= v253)
        {
          unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v11[-v251] >> 3);
          unint64_t v14 = v13 + 1;
          if (v13 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_21677CB10();
          }
          if (0x5555555555555556 * ((uint64_t)(v253 - v251) >> 3) > v14) {
            unint64_t v14 = 0x5555555555555556 * ((uint64_t)(v253 - v251) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v253 - v251) >> 3) >= 0x555555555555555) {
            unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v15 = v14;
          }
          int v229 = &v253;
          if (v15) {
            uint64_t v16 = (char *)sub_216782ED8((uint64_t)&v253, v15);
          }
          else {
            uint64_t v16 = 0;
          }
          uint64_t v17 = &v16[24 * v13];
          *(void *)&long long __p = v16;
          *((void *)&__p + 1) = v17;
          int v228 = &v16[24 * v15];
          long long v18 = *(_OWORD *)v9;
          *((void *)v17 + 2) = v9[2];
          *(_OWORD *)uint64_t v17 = v18;
          v9[1] = 0;
          v9[2] = 0;
          *double v9 = 0;
          uint64_t v227 = (uint64_t)(v17 + 24);
          sub_216790CCC(&v251, &__p);
          double v11 = v252;
          sub_216790E64((uint64_t)&__p);
        }
        else
        {
          long long v12 = *(_OWORD *)v9;
          *((void *)v11 + 2) = v9[2];
          *(_OWORD *)double v11 = v12;
          v11 += 24;
          v9[1] = 0;
          v9[2] = 0;
          *double v9 = 0;
        }
        int v252 = v11;
        v9 += 3;
      }
      while (v9 != v10);
    }
    *(void *)&long long __p = &v220;
    sub_216782F20((void ***)&__p);
    uint64_t v6 = a1 + 8;
  }
  uint64_t v19 = (long long *)v252;
  if ((unint64_t)v252 >= v253)
  {
    uint64_t v21 = (unsigned char *)sub_2168DF188(&v251, a2);
  }
  else
  {
    if (*((char *)a2 + 23) < 0)
    {
      sub_216778F24(v252, *(void **)a2, *((void *)a2 + 1));
    }
    else
    {
      long long v20 = *a2;
      *((void *)v252 + 2) = *((void *)a2 + 2);
      *uint64_t v19 = v20;
    }
    uint64_t v21 = (char *)v19 + 24;
  }
  int v252 = v21;
  int v22 = (pxrInternal__aapl__pxrReserved__ *)Alembic::AbcCoreFactory::v12::IFactory::IFactory((uint64_t)v248);
  int v247 = 0;
  int v250 = 0;
  uint64_t v23 = (int *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ABC_NUM_OGAWA_STREAMS);
  if (!v23) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<int>();
  }
  int ConcurrencyLimit = pxrInternal__aapl__pxrReserved__::WorkGetConcurrencyLimit(v22);
  int v25 = *v23;
  if (ConcurrencyLimit < *v23) {
    int v25 = ConcurrencyLimit;
  }
  v248[1] = v25;
  char v26 = (unsigned char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ABC_READ_ARCHIVE_USE_MMAP);
  if (!v26) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
  }
  if (!*v26) {
    int v249 = 0;
  }
  Alembic::AbcCoreFactory::v12::IFactory::getArchive((uint64_t)v248, (uint64_t)&v251, &v247, (uint64_t)&v243);
  v241[0] = 0;
  v241[1] = 0;
  uint64_t v242 = 0;
  uint64_t v27 = "Unknown";
  if (v247 == 2) {
    uint64_t v27 = "Layer";
  }
  if (v247 == 1) {
    uint64_t v28 = "Ogawa";
  }
  else {
    uint64_t v28 = v27;
  }
  MEMORY[0x21D4477E0](v241, v28);
  if (SHIBYTE(v244.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!v244.__r_.__value_.__l.__size_) {
      goto LABEL_46;
    }
LABEL_56:
    uint64_t v37 = v241;
    if (v242 < 0) {
      uint64_t v37 = (void **)v241[0];
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Unsupported format: '%s'", v29, v30, v37);
    if (*(char *)(a1 + 31) < 0) {
      operator delete(*(void **)v6);
    }
    char v38 = 0;
    *(_OWORD *)uint64_t v6 = __p;
    *(void *)(v6 + 16) = v227;
    goto LABEL_336;
  }
  if (*((unsigned char *)&v244.__r_.__value_.__s + 23)) {
    goto LABEL_56;
  }
LABEL_46:
  if (!v245) {
    goto LABEL_56;
  }
  unsigned int v240 = 0;
  v238[0] = 0;
  v238[1] = 0;
  uint64_t v239 = 0;
  v236[0] = 0;
  v236[1] = 0;
  uint64_t v237 = 0;
  v234[0] = 0;
  v234[1] = 0;
  uint64_t v235 = 0;
  v232[0] = 0;
  v232[1] = 0;
  uint64_t v233 = 0;
  Alembic::Abc::v12::GetArchiveInfo((Alembic::Abc::v12::IArchive *)&v243, (uint64_t)v238, (uint64_t)v236, &v240, (uint64_t)v234, (uint64_t)v232);
  uint64_t v33 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames);
  if (!v33) {
    uint64_t v33 = sub_2170E5328(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames);
  }
  uint64_t v34 = *(void **)(v7 + 32);
  if (v34)
  {
    unint64_t v35 = *(void *)v33 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      unint64_t v36 = v34[4] & 0xFFFFFFFFFFFFFFF8;
      if (v35 >= v36)
      {
        if (v36 >= v35)
        {
          *(void *)&long long __p = "usdAbc/alembicReader.cpp";
          *((void *)&__p + 1) = "Open";
          uint64_t v227 = 936;
          int v228 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ReaderContext::Open(const std::string &,"
                 " std::string *, const SdfFileFormat::FileFormatArguments &)";
          LOBYTE(v229) = 0;
          int v39 = SHIBYTE(v242);
          uint64_t v40 = (void **)v241[0];
          pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_FormatAlembicVersion((pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil *)v240, v31, v32);
          uint64_t v42 = v241;
          if (v39 < 0) {
            uint64_t v42 = v40;
          }
          if (v221.i8[15] >= 0) {
            uint64_t v43 = &v220;
          }
          else {
            uint64_t v43 = v220;
          }
          pxrInternal__aapl__pxrReserved__::Tf_PostStatusHelper((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__ *)"Opened %s file written by Alembic %s", v41, v42, v43);
          if (v221.i8[15] < 0) {
            operator delete(v220);
          }
          break;
        }
        ++v34;
      }
      uint64_t v34 = (void *)*v34;
    }
    while (v34);
  }
  *(_DWORD *)(v7 + 48) = v243;
  std::string::operator=((std::string *)(v7 + 56), &v244);
  uint64_t v44 = v245;
  uint64_t v45 = v246;
  if (v246) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v246 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v46 = *(std::__shared_weak_count **)(v7 + 88);
  *(void *)(v7 + 80) = v44;
  *(void *)(v7 + 88) = v45;
  if (v46) {
    sub_216784EC4(v46);
  }
  uint64_t v213 = a3;
  unsigned int v211 = (uint64_t *)a2;
  uint64_t v47 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v46);
  sub_216981010(&v230, v47);
  sub_21698105C(&v231, v47 + 1);
  int v215 = (uint64_t **)(v7 + 152);
  uint64_t v48 = sub_2170F5958((uint64_t **)(v7 + 152), (pxrInternal__aapl__pxrReserved__::SdfPath *)&v230);
  *(void *)(v7 + 176) = v48;
  uint64_t v49 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v49) {
    uint64_t v49 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  *(void *)&long long __p = (char *)v49 + 136;
  uint64_t v50 = sub_2170F7770((uint64_t **)v48 + 16, (uint64_t *)v49 + 17, (uint64_t)&unk_2174BFD90, (uint64_t **)&__p);
  sub_216B8DDC0((uint64_t)(v50 + 5), (uint64_t)v232);
  Alembic::Abc::v12::IArchive::getTop((Alembic::Abc::v12::IArchive *)(v7 + 48), (uint64_t)&__p);
  v225[0] = 0;
  v225[1] = 0;
  unsigned __int16 v224 = v225;
  uint64_t NumChildren = Alembic::Abc::v12::IObject::getNumChildren((Alembic::Abc::v12::IObject *)&__p);
  if (NumChildren)
  {
    for (uint64_t i = 0; i != NumChildren; ++i)
    {
      uint64_t ChildHeader = Alembic::Abc::v12::IObject::getChildHeader((Alembic::Abc::v12::IObject *)&__p);
      LODWORD(__dst.__r_.__value_.__l.__data_) = 0;
      LODWORD(__dst.__r_.__value_.__r.__words[1]) = 0;
      sub_2167ECB6C((uint64_t)&v220, (uint64_t)&__p, ChildHeader, &__dst);
      uint64_t Name = Alembic::Abc::v12::IObject::getName((Alembic::Abc::v12::IObject *)&v220);
      sub_2170FB8C4(Name, " _", (uint64_t)&v224, (uint64_t)&__dst);
      sub_21680EE0C((uint64_t **)&v224, (const void **)&__dst.__r_.__value_.__l.__data_, (uint64_t)&__dst);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&v220);
    }
  }
  Alembic::Abc::v12::IObject::getProperties((Alembic::Abc::v12::IObject *)&__p, (uint64_t)&v220);
  sub_216779094(&__dst, "Usd");
  uint64_t PropertyHeader = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader((uint64_t)&v220);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v220);
  if (PropertyHeader)
  {
    uint64_t v56 = *(void *)(v7 + 176);
    uint64_t v57 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v57) {
      uint64_t v57 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    unsigned __int16 v220 = (char *)v57 + 440;
    uint64_t v58 = sub_2170F7770((uint64_t **)(v56 + 128), (uint64_t *)v57 + 55, (uint64_t)&unk_2174BFD90, (uint64_t **)&v220);
    uint64_t v59 = v58;
    uint64_t v60 = v58[6];
    if (v60 && (v58[6] & 3) != 3) {
      (*(void (**)(uint64_t *))((v60 & 0xFFFFFFFFFFFFFFF8) + 32))(v58 + 5);
    }
    v59[5] = 0x4038000000000000;
    v59[6] = (uint64_t)&unk_26C750B03;
    uint64_t v61 = *(void *)(v7 + 176);
    uint64_t v62 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v62) {
      uint64_t v62 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    sub_217119DF4((pxrInternal__aapl__pxrReserved__::TfToken *)(PropertyHeader + 32), (uint64_t **)(v61 + 128), (uint64_t *)v62 + 55);
    uint64_t v63 = *(void *)(v7 + 176);
    uint64_t v64 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v64) {
      uint64_t v64 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    unsigned __int16 v220 = (char *)v64 + 440;
    uint64_t v65 = sub_2170F7770((uint64_t **)(v63 + 128), (uint64_t *)v64 + 55, (uint64_t)&unk_2174BFD90, (uint64_t **)&v220);
    *(void *)(v7 + 8) = *(void *)sub_21691CEA0((pxrInternal__aapl__pxrReserved__::VtValue *)(v65 + 5));
  }
  uint64_t v66 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames);
  if (!v66) {
    uint64_t v66 = sub_2170E5328(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames);
  }
  uint64_t v67 = *(void **)(v7 + 32);
  if (v67)
  {
    unint64_t v68 = *((void *)v66 + 1) & 0xFFFFFFFFFFFFFFF8;
    do
    {
      unint64_t v69 = v67[4] & 0xFFFFFFFFFFFFFFF8;
      if (v68 >= v69)
      {
        if (v69 >= v68) {
          goto LABEL_199;
        }
        ++v67;
      }
      uint64_t v67 = (void *)*v67;
    }
    while (v67);
  }
  v219[0] = 0;
  v219[1] = 0;
  unint64_t v218 = (unint64_t)v219;
  sub_217119F80((Alembic::Abc::v12::IObject *)&__p, (uint64_t **)&v218);
  v217[0] = 0;
  v217[1] = 0;
  int v216 = (uint64_t *)v217;
  uint64_t v70 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames);
  if (!v70) {
    uint64_t v70 = sub_2170E5328(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames);
  }
  uint64_t v71 = *(void **)(v7 + 32);
  if (v71)
  {
    unint64_t v72 = *((void *)v70 + 3) & 0xFFFFFFFFFFFFFFF8;
    do
    {
      unint64_t v73 = v71[4] & 0xFFFFFFFFFFFFFFF8;
      if (v72 >= v73)
      {
        if (v73 >= v72)
        {
          uint64_t v74 = (void *)v218;
          if ((void **)v218 != v219)
          {
            do
            {
              uint64_t v76 = v74 + 4;
              uint64_t v75 = v74[4];
              if (v75)
              {
                (*(void (**)(void **__return_ptr))(*(void *)v75 + 32))(&v220);
                uint64_t v77 = (*(uint64_t (**)(void *))(*(void *)v220 + 48))(v220);
                if (v221.i64[0]) {
                  sub_216784EC4((std::__shared_weak_count *)v221.i64[0]);
                }
                if (v77 == 1)
                {
                  uint64_t v78 = (*(uint64_t (**)(void))(*(void *)*v76 + 16))();
                  if (sub_21711B500(v78 + 48, 0))
                  {
                    (*(void (**)(void **__return_ptr))(*(void *)*v76 + 32))(&v220);
                    uint64_t v79 = (*(uint64_t (**)(void *))(*(void *)v220 + 16))(v220);
                    char v80 = sub_2170FCAF4(v79 + 48, 0);
                    if (v221.i64[0]) {
                      sub_216784EC4((std::__shared_weak_count *)v221.i64[0]);
                    }
                    if (v80)
                    {
                      uint64_t v81 = (void *)v74[6];
                      if (v81 != v74 + 7)
                      {
                        do
                        {
                          (*(void (**)(void **__return_ptr))(*(void *)v81[4] + 32))(&v220);
                          (*(void (**)(void *))(*(void *)v220 + 48))(v220);
                          if (v221.i64[0]) {
                            sub_216784EC4((std::__shared_weak_count *)v221.i64[0]);
                          }
                          uint64_t v82 = (void *)v81[1];
                          if (v82)
                          {
                            do
                            {
                              uint64_t v83 = v82;
                              uint64_t v82 = (void *)*v82;
                            }
                            while (v82);
                          }
                          else
                          {
                            do
                            {
                              uint64_t v83 = (void *)v81[2];
                              BOOL v181 = *v83 == (void)v81;
                              uint64_t v81 = v83;
                            }
                            while (!v181);
                          }
                          uint64_t v81 = v83;
                        }
                        while (v83 != v74 + 7);
                      }
                      sub_216BD4CA0(&v216, v74 + 4, v74 + 4);
                    }
                  }
                }
              }
              uint64_t v84 = (void *)v74[1];
              if (v84)
              {
                do
                {
                  uint64_t v85 = (void **)v84;
                  uint64_t v84 = (void *)*v84;
                }
                while (v84);
              }
              else
              {
                do
                {
                  uint64_t v85 = (void **)v74[2];
                  BOOL v181 = *v85 == v74;
                  uint64_t v74 = v85;
                }
                while (!v181);
              }
              uint64_t v74 = v85;
            }
            while (v85 != v219);
          }
          break;
        }
        ++v71;
      }
      uint64_t v71 = (void *)*v71;
    }
    while (v71);
  }
  uint64_t v86 = (void *)v218;
  if ((void **)v218 != v219)
  {
    uint64_t v87 = (uint64_t **)(v7 + 128);
    uint64_t v88 = (uint64_t **)(v214 + 112);
    uint64_t v89 = (void *)(v214 + 120);
    do
    {
      unint64_t v90 = v86[4];
      if (v90)
      {
        uint64_t v91 = v217[0];
        if (!v217[0]) {
          goto LABEL_146;
        }
        uint64_t v92 = v217;
        do
        {
          uint64_t v93 = v91;
          uint64_t v94 = v92;
          unint64_t v95 = v91[4];
          uint64_t v96 = v91 + 1;
          if (v95 >= v90)
          {
            uint64_t v96 = v93;
            uint64_t v92 = (void **)v93;
          }
          uint64_t v91 = (void *)*v96;
        }
        while (v91);
        if (v92 == v217) {
          goto LABEL_146;
        }
        if (v95 < v90) {
          uint64_t v93 = v94;
        }
        if (v90 >= v93[4])
        {
          (*(void (**)(void **__return_ptr))(*(void *)v90 + 32))(&v220);
          uint64_t v105 = (*(uint64_t (**)(void *))(*(void *)v220 + 16))(v220);
          if (v221.i64[0]) {
            sub_216784EC4((std::__shared_weak_count *)v221.i64[0]);
          }
          uint64_t v97 = v105 + 24;
          uint64_t v106 = (void *)v86[6];
          if (v106 != v86 + 7)
          {
            do
            {
              (*(void (**)(void **__return_ptr))(*(void *)v106[4] + 32))(&v220);
              __dst.__r_.__value_.__r.__words[0] = (*(uint64_t (**)(void *))(*(void *)v220 + 16))(v220)
                                                 + 24;
              uint64_t v107 = sub_21677B174(v87, (const void **)__dst.__r_.__value_.__l.__data_, (uint64_t)&unk_2174BFD90, (long long **)&__dst);
              std::string::operator=((std::string *)(v107 + 7), (const std::string *)v97);
              if (v221.i64[0]) {
                sub_216784EC4((std::__shared_weak_count *)v221.i64[0]);
              }
              uint64_t v108 = (void *)v106[1];
              if (v108)
              {
                do
                {
                  uint64_t v109 = v108;
                  uint64_t v108 = (void *)*v108;
                }
                while (v108);
              }
              else
              {
                do
                {
                  uint64_t v109 = (void *)v106[2];
                  BOOL v181 = *v109 == (void)v106;
                  uint64_t v106 = v109;
                }
                while (!v181);
              }
              uint64_t v106 = v109;
            }
            while (v109 != v86 + 7);
          }
          char v102 = 1;
        }
        else
        {
LABEL_146:
          uint64_t v97 = (*(uint64_t (**)(unint64_t))(*(void *)v90 + 16))(v90) + 24;
          uint64_t v98 = (void *)v86[6];
          if (v98 != v86 + 7)
          {
            do
            {
              unsigned __int16 v220 = (void *)((*(uint64_t (**)(void))(*(void *)v98[4] + 16))(v98[4]) + 24);
              uint64_t v99 = sub_21677B174(v87, (const void **)v220, (uint64_t)&unk_2174BFD90, (long long **)&v220);
              std::string::operator=((std::string *)(v99 + 7), (const std::string *)v97);
              uint64_t v100 = (void *)v98[1];
              if (v100)
              {
                do
                {
                  uint64_t v101 = v100;
                  uint64_t v100 = (void *)*v100;
                }
                while (v100);
              }
              else
              {
                do
                {
                  uint64_t v101 = (void *)v98[2];
                  BOOL v181 = *v101 == (void)v98;
                  uint64_t v98 = v101;
                }
                while (!v181);
              }
              uint64_t v98 = v101;
            }
            while (v101 != v86 + 7);
          }
          char v102 = 0;
        }
        unsigned __int16 v220 = (void *)v97;
        uint64_t v103 = sub_21677B174(v87, (const void **)v97, (uint64_t)&unk_2174BFD90, (long long **)&v220);
        std::string::operator=((std::string *)(v103 + 7), (const std::string *)v97);
        uint64_t v104 = (pxrInternal__aapl__pxrReserved__::SdfPath *)std::string::rfind((const std::string *)v97, 47, 0xFFFFFFFFFFFFFFFFLL);
        if (v104 == (pxrInternal__aapl__pxrReserved__::SdfPath *)-1)
        {
          if (*(char *)(v97 + 23) < 0) {
            uint64_t v104 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_216778F24(&__dst, *(void **)v97, *(void *)(v97 + 8));
          }
          else {
            std::string __dst = *(std::string *)v97;
          }
        }
        else
        {
          uint64_t v104 = (pxrInternal__aapl__pxrReserved__::SdfPath *)std::string::basic_string(&__dst, (const std::string *)v97, (std::string::size_type)v104 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v220);
        }
        uint64_t v110 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v104);
        sub_2170FB8C4((uint64_t)&__dst, " _", (uint64_t)&v224, (uint64_t)&v220);
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v254);
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(v110, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v254, &v256);
        if ((v254 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v254 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        if (v221.i8[15] < 0) {
          operator delete(v220);
        }
        sub_216981010(&v254, &v256);
        sub_21698105C((_DWORD *)&v254 + 1, &v257);
        char v255 = v102;
        uint64_t v111 = *v88;
        uint64_t v112 = (uint64_t **)(v214 + 112);
        uint64_t v113 = (uint64_t *)(v214 + 112);
        if (!*v88) {
          goto LABEL_184;
        }
        uint64_t v112 = (uint64_t **)(v214 + 112);
        while (1)
        {
          while (1)
          {
            uint64_t v113 = v111;
            uint64_t v114 = (const void **)(v111 + 4);
            if (!sub_21677B108((uint64_t)v89, (const void **)v97, (const void **)v111 + 4)) {
              break;
            }
            uint64_t v111 = (uint64_t *)*v113;
            uint64_t v112 = (uint64_t **)v113;
            if (!*v113) {
              goto LABEL_184;
            }
          }
          if (!sub_21677B108((uint64_t)v89, v114, (const void **)v97)) {
            break;
          }
          uint64_t v112 = (uint64_t **)(v113 + 1);
          uint64_t v111 = (uint64_t *)v113[1];
          if (!v111) {
            goto LABEL_184;
          }
        }
        if (!*v112)
        {
LABEL_184:
          uint64_t v115 = (char *)operator new(0x48uLL);
          unsigned __int16 v220 = v115;
          v221.i64[0] = v214 + 112;
          v221.i8[8] = 0;
          uint64_t v116 = v115 + 32;
          if (*(char *)(v97 + 23) < 0)
          {
            sub_216778F24(v116, *(void **)v97, *(void *)(v97 + 8));
            uint64_t v118 = (uint64_t *)v220;
          }
          else
          {
            long long v117 = *(_OWORD *)v97;
            *((void *)v115 + 6) = *(void *)(v97 + 16);
            *(_OWORD *)uint64_t v116 = v117;
            uint64_t v118 = (uint64_t *)v115;
          }
          sub_21697D878((_DWORD *)v115 + 14, &v254);
          sub_21697D8B4((_DWORD *)v115 + 15, (_DWORD *)&v254 + 1);
          v115[64] = v255;
          v221.i8[8] = 1;
          *uint64_t v118 = 0;
          v118[1] = 0;
          void v118[2] = (uint64_t)v113;
          *uint64_t v112 = v118;
          uint64_t v119 = **(void **)(v214 + 104);
          if (v119)
          {
            *(void *)(v214 + 104) = v119;
            uint64_t v118 = *v112;
          }
          sub_21677B3B0(*v88, v118);
          ++*v89;
          unsigned __int16 v220 = 0;
          sub_21711B69C((uint64_t)&v220);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v254 + 1);
        sub_21697C414(&v254);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v257);
        sub_21697C414(&v256);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
      }
      uint64_t v120 = (void *)v86[1];
      if (v120)
      {
        do
        {
          uint64_t v121 = (void **)v120;
          uint64_t v120 = (void *)*v120;
        }
        while (v120);
      }
      else
      {
        do
        {
          uint64_t v121 = (void **)v86[2];
          BOOL v181 = *v121 == v86;
          uint64_t v86 = v121;
        }
        while (!v181);
      }
      uint64_t v86 = v121;
    }
    while (v121 != v219);
  }
  sub_216BD5270((uint64_t)&v216, v217[0]);
  sub_21711B740((uint64_t)&v218, v219[0]);
  uint64_t v7 = v214;
LABEL_199:
  unint64_t v218 = 0;
  sub_216779094(&v220, "abcReRoot");
  uint64_t v123 = sub_21678C2D8(v213, (const void **)&v220);
  if (v221.i8[15] < 0) {
    operator delete(v220);
  }
  if (v212 != v123)
  {
    uint64_t v126 = *(char **)(v123 + 56);
    uint64_t v125 = (char *)(v123 + 56);
    uint64_t v124 = v126;
    if (v125[23] >= 0) {
      uint64_t v124 = v125;
    }
    int v127 = *v124;
    if (*v124) {
      BOOL v128 = (v127 - 48) >= 0xA;
    }
    else {
      BOOL v128 = 0;
    }
    if (v128 && (v127 == 95 || (v127 & 0xFFFFFFDF) - 65 <= 0x19))
    {
      uint64_t v130 = v124;
      do
      {
        int v132 = *v130++;
        char v131 = v132;
        unsigned int v133 = (v132 & 0xFFFFFFDF) - 65;
        unsigned int v134 = v132 - 48;
      }
      while (v132 == 95 || v133 < 0x1A || v134 < 0xA);
      if (!v131)
      {
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v220);
        if ((v218 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v218 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        unint64_t v218 = (unint64_t)v220;
        if (v220) {
          goto LABEL_228;
        }
        goto LABEL_250;
      }
    }
    unsigned __int16 v220 = "usdAbc/alembicReader.cpp";
    v221.i64[0] = (uint64_t)"Open";
    v221.i64[1] = 998;
    unsigned __int16 v222 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ReaderContext::Open(const std::string &, std::"
           "string *, const SdfFileFormat::FileFormatArguments &)";
    LOBYTE(v223) = 0;
    if (*((char *)v211 + 23) >= 0) {
      uint64_t v137 = v211;
    }
    else {
      uint64_t v137 = (uint64_t *)*v211;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v220, (pxrInternal__aapl__pxrReserved__ *)"[usdAbc] Ignoring re-root because identifer '%s' is not valid (%s).", v122, v124, v137);
  }
  if (v218)
  {
LABEL_228:
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)&v230, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v218, &__dst);
    uint64_t v138 = sub_2170F5958(v215, (pxrInternal__aapl__pxrReserved__::SdfPath *)&__dst);
    uint64_t v139 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
    if (!v139) {
      uint64_t v139 = sub_2170F5C24(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
    }
    sub_2168D2318(v138, (void *)v139 + 9);
    *((_DWORD *)v138 + 14) = 0;
    sub_21711A0E4(v7, (Alembic::Abc::v12::IObject *)&__p, (pxrInternal__aapl__pxrReserved__::SdfPath *)&__dst, v138);
    uint64_t v140 = *(void **)(v7 + 176);
    uint64_t v141 = (unint64_t *)v140[2];
    unint64_t v142 = v140[3];
    if ((unint64_t)v141 >= v142)
    {
      uint64_t v144 = v140[1];
      uint64_t v145 = ((uint64_t)v141 - v144) >> 3;
      if ((unint64_t)(v145 + 1) >> 61) {
        sub_21677CB10();
      }
      uint64_t v146 = v142 - v144;
      uint64_t v147 = v146 >> 2;
      if (v146 >> 2 <= (unint64_t)(v145 + 1)) {
        uint64_t v147 = v145 + 1;
      }
      if ((unint64_t)v146 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v148 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v148 = v147;
      }
      unsigned __int16 v223 = v140 + 3;
      if (v148) {
        uint64_t v149 = (char *)sub_21677CB28((uint64_t)(v140 + 3), v148);
      }
      else {
        uint64_t v149 = 0;
      }
      uint64_t v150 = (unint64_t *)&v149[8 * v145];
      uint64_t v151 = &v149[8 * v148];
      unsigned __int16 v222 = v151;
      *uint64_t v150 = v218;
      uint64_t v143 = v150 + 1;
      unint64_t v218 = 0;
      v221.i64[1] = (uint64_t)(v150 + 1);
      uint64_t v153 = (void *)v140[1];
      uint64_t v152 = (void *)v140[2];
      if (v152 == v153)
      {
        int64x2_t v155 = vdupq_n_s64((unint64_t)v152);
      }
      else
      {
        do
        {
          unint64_t v154 = *--v152;
          *--uint64_t v150 = v154;
          *uint64_t v152 = 0;
        }
        while (v152 != v153);
        int64x2_t v155 = *(int64x2_t *)(v140 + 1);
        uint64_t v143 = (void *)v221.i64[1];
        uint64_t v151 = v222;
      }
      v140[1] = v150;
      v140[2] = v143;
      int64x2_t v221 = v155;
      uint64_t v156 = (const char *)v140[3];
      v140[3] = v151;
      unsigned __int16 v222 = v156;
      unsigned __int16 v220 = (void *)v155.i64[0];
      sub_2168BE9D8((uint64_t)&v220);
    }
    else
    {
      *uint64_t v141 = v218;
      uint64_t v143 = v141 + 1;
      unint64_t v218 = 0;
    }
    v140[2] = v143;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__dst.__r_.__value_.__r.__words + 1);
    sub_21697C414(&__dst);
    goto LABEL_251;
  }
LABEL_250:
  sub_21711A0E4(v7, (Alembic::Abc::v12::IObject *)&__p, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v230, *(void **)(v7 + 176));
LABEL_251:
  if (*(void *)(v7 + 120))
  {
    uint64_t v157 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames);
    if (!v157) {
      uint64_t v157 = sub_2170E5328(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames);
    }
    uint64_t v158 = *(void **)(v7 + 32);
    if (v158)
    {
      unint64_t v159 = *((void *)v157 + 2) & 0xFFFFFFFFFFFFFFF8;
      do
      {
        unint64_t v160 = v158[4] & 0xFFFFFFFFFFFFFFF8;
        if (v159 >= v160)
        {
          if (v160 >= v159)
          {
            char v161 = 0;
            goto LABEL_262;
          }
          ++v158;
        }
        uint64_t v158 = (void *)*v158;
      }
      while (v158);
    }
    char v161 = 1;
LABEL_262:
    int64x2_t v221 = 0uLL;
    unsigned __int16 v220 = &v221;
    uint64_t v162 = *(void **)(v7 + 104);
    if (v162 != (void *)(v7 + 112))
    {
      do
      {
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)(v162 + 7);
        uint64_t v163 = sub_21711BD9C((uint64_t **)&v220, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v162 + 7), (uint64_t)&unk_2174BFD90, &__dst);
        std::string::operator=((std::string *)(v163 + 10), (const std::string *)(v162 + 4));
        uint64_t v164 = (void *)v162[1];
        if (v164)
        {
          do
          {
            uint64_t v165 = v164;
            uint64_t v164 = (void *)*v164;
          }
          while (v164);
        }
        else
        {
          do
          {
            uint64_t v165 = (void *)v162[2];
            BOOL v181 = *v165 == (void)v162;
            uint64_t v162 = v165;
          }
          while (!v181);
        }
        uint64_t v162 = v165;
      }
      while (v165 != (void *)(v7 + 112));
      uint64_t v166 = (char *)v220;
      if (v220 != &v221)
      {
        do
        {
          uint64_t v167 = *(void *)(v7 + 176);
          NameToken = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)(v166 + 32));
          uint64_t v169 = *(uint64_t **)(v167 + 16);
          if ((unint64_t)v169 >= *(void *)(v167 + 24))
          {
            uint64_t v171 = sub_216973984((char **)(v167 + 8), NameToken);
          }
          else
          {
            uint64_t v170 = *NameToken;
            *uint64_t v169 = *NameToken;
            if ((v170 & 7) != 0
              && (atomic_fetch_add_explicit((atomic_uint *volatile)(v170 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
            {
              *v169 &= 0xFFFFFFFFFFFFFFF8;
            }
            uint64_t v171 = (char *)(v169 + 1);
          }
          *(void *)(v167 + 16) = v171;
          uint64_t v172 = sub_2170F5958(v215, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v166 + 32));
          std::string::operator=((std::string *)(v172 + 23), (const std::string *)(v166 + 40));
          *((unsigned char *)sub_2170F5958(v215, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v166 + 32)) + 208) = v161;
          uint64_t v173 = (int64x2_t *)*((void *)v166 + 1);
          if (v173)
          {
            do
            {
              uint64_t v174 = v173;
              uint64_t v173 = (int64x2_t *)v173->i64[0];
            }
            while (v173);
          }
          else
          {
            do
            {
              uint64_t v174 = (int64x2_t *)*((void *)v166 + 2);
              BOOL v181 = v174->i64[0] == (void)v166;
              uint64_t v166 = (char *)v174;
            }
            while (!v181);
          }
          uint64_t v166 = (char *)v174;
        }
        while (v174 != &v221);
      }
    }
    sub_21711BF0C((uint64_t)&v220, v221.i64[0]);
  }
  if (*(void *)(v7 + 200))
  {
    uint64_t v175 = *(void *)(v7 + 176);
    uint64_t v176 = *(void *)(*(void *)(v7 + 184) + 32);
    uint64_t v177 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v177) {
      uint64_t v177 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    unsigned __int16 v220 = (char *)v177 + 320;
    uint64_t v178 = sub_2170F7770((uint64_t **)(v175 + 128), (uint64_t *)v177 + 40, (uint64_t)&unk_2174BFD90, (uint64_t **)&v220);
    uint64_t v179 = v178;
    uint64_t v180 = v178[6];
    if (v180) {
      BOOL v181 = (v178[6] & 3) == 3;
    }
    else {
      BOOL v181 = 1;
    }
    if (!v181) {
      (*(void (**)(uint64_t *))((v180 & 0xFFFFFFFFFFFFFFF8) + 32))(v178 + 5);
    }
    v179[6] = (uint64_t)&unk_26C750B03;
    v179[5] = v176;
    uint64_t v182 = (void *)(v7 + 192);
    uint64_t v183 = *(void **)(v7 + 192);
    if (v183)
    {
      do
      {
        uint64_t v184 = v183;
        uint64_t v183 = (void *)v183[1];
      }
      while (v183);
    }
    else
    {
      do
      {
        uint64_t v184 = (void *)v182[2];
        BOOL v181 = *v184 == (void)v182;
        uint64_t v182 = v184;
      }
      while (v181);
    }
    uint64_t v185 = v184[4];
    uint64_t v186 = *(void *)(v7 + 176);
    unsigned int v187 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v187) {
      unsigned int v187 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    unsigned __int16 v220 = (char *)v187 + 144;
    int v188 = sub_2170F7770((uint64_t **)(v186 + 128), (uint64_t *)v187 + 18, (uint64_t)&unk_2174BFD90, (uint64_t **)&v220);
    int v189 = v188;
    uint64_t v190 = v188[6];
    if (v190) {
      BOOL v191 = (v188[6] & 3) == 3;
    }
    else {
      BOOL v191 = 1;
    }
    if (!v191) {
      (*(void (**)(uint64_t *))((v190 & 0xFFFFFFFFFFFFFFF8) + 32))(v188 + 5);
    }
    v189[6] = (uint64_t)&unk_26C750B03;
    v189[5] = v185;
  }
  uint64_t v192 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v192) {
    uint64_t v192 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  uint64_t v193 = *(void *)(v7 + 176);
  uint64_t v194 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v194) {
    uint64_t v194 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  unsigned __int16 v220 = (char *)v194 + 1184;
  uint64_t v195 = sub_2170F7770((uint64_t **)(v193 + 128), (uint64_t *)v194 + 148, (uint64_t)&unk_2174BFD90, (uint64_t **)&v220);
  sub_216B8E0B4(v195 + 5, (uint64_t *)v192 + 168);
  Alembic::Abc::v12::IObject::getProperties((Alembic::Abc::v12::IObject *)&__p, (uint64_t)&v220);
  sub_216779094(&__dst, "Usd");
  uint64_t v196 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader((uint64_t)&v220);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v220);
  if (v196)
  {
    uint64_t v197 = *(void *)(v7 + 176);
    int v198 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v198) {
      int v198 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    unint64_t v199 = (pxrInternal__aapl__pxrReserved__::TfToken *)(v196 + 32);
    sub_217119DF4(v199, (uint64_t **)(v197 + 128), (uint64_t *)v198 + 40);
    uint64_t v200 = *(void *)(v7 + 176);
    uint64_t v201 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v201) {
      uint64_t v201 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    sub_217119DF4(v199, (uint64_t **)(v200 + 128), (uint64_t *)v201 + 18);
    uint64_t v202 = *(void *)(v7 + 176);
    unint64_t v203 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v203) {
      unint64_t v203 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    sub_217119DF4(v199, (uint64_t **)(v202 + 128), (uint64_t *)v203 + 21);
    uint64_t v204 = *(void *)(v7 + 176);
    unint64_t v205 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v205) {
      unint64_t v205 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    sub_21711B1A0(v199, (uint64_t **)(v204 + 128), (uint64_t *)v205 + 148);
    uint64_t v206 = *(void *)(v7 + 176);
    int v207 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v207) {
      int v207 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    sub_21711B1A0(v199, (uint64_t **)(v206 + 128), (uint64_t *)v207 + 12);
  }
  uint64_t v208 = *(void *)(v7 + 176);
  if (*(void *)(v208 + 8) != *(void *)(v208 + 16))
  {
    unsigned int v209 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v209) {
      unsigned int v209 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    unsigned __int16 v220 = (char *)v209 + 96;
    __dst.__r_.__value_.__r.__words[0] = *(void *)(*(void *)(v7 + 176) + 8);
    sub_21711BF68((uint64_t **)(v208 + 128), (uint64_t)&unk_2174BFD90, (uint64_t **)&v220, (uint64_t **)&__dst);
  }
  if ((v218 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v218 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_21678A498((uint64_t)&v224, v225[0]);
  Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&__p);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v231);
  sub_21697C414(&v230);
  if (SHIBYTE(v233) < 0) {
    operator delete(v232[0]);
  }
  if (SHIBYTE(v235) < 0) {
    operator delete(v234[0]);
  }
  if (SHIBYTE(v237) < 0) {
    operator delete(v236[0]);
  }
  if (SHIBYTE(v239) < 0) {
    operator delete(v238[0]);
  }
  char v38 = 1;
LABEL_336:
  if (SHIBYTE(v242) < 0) {
    operator delete(v241[0]);
  }
  Alembic::Abc::v12::IArchive::~IArchive((Alembic::Abc::v12::IArchive *)&v243);
  Alembic::AbcCoreFactory::v12::IFactory::~IFactory((Alembic::AbcCoreFactory::v12::IFactory *)v248);
  *(void *)&long long __p = &v251;
  sub_216782F20((void ***)&__p);
  return (v38 & 1) != 0;
}

void sub_2170E84A0()
{
}

void sub_2170E84B4(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 160);
  sub_21711C10C(*(char **)(a1 + 160));
  *(void *)(a1 + 152) = v2;
  *uint64_t v2 = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  sub_2167FB780(a1 + 184, *(void **)(a1 + 192));
  *(void *)(a1 + 184) = a1 + 192;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 192) = 0;
  sub_21711C208(a1 + 104, *(void **)(a1 + 112));
  *(void *)(a1 + 104) = a1 + 112;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 112) = 0;
  sub_2167877AC(a1 + 128, *(void **)(a1 + 136));
  *(void *)(a1 + 128) = a1 + 136;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 136) = 0;
  uint64_t v3 = *(std::recursive_mutex **)a1;
  if (*(void *)a1) {
    std::recursive_mutex::lock(*(std::recursive_mutex **)a1);
  }
  int v7 = 2;
  sub_216779094(&v8, "");
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  *(_DWORD *)(a1 + 48) = 2;
  std::string::operator=((std::string *)(a1 + 56), &v8);
  uint64_t v5 = v9;
  uint64_t v4 = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 88);
  *(void *)(a1 + 80) = v5;
  *(void *)(a1 + 88) = v4;
  if (v6) {
    sub_216784EC4(v6);
  }
  Alembic::Abc::v12::IArchive::~IArchive((Alembic::Abc::v12::IArchive *)&v7);
  *(void *)a1 = 0;
  if (v3) {
    std::recursive_mutex::unlock(v3);
  }
}

void sub_2170E85D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Alembic::Abc::v12::IArchive::~IArchive((Alembic::Abc::v12::IArchive *)&a9);
  if (v9) {
    std::recursive_mutex::unlock(v9);
  }
  _Unwind_Resume(a1);
}

char *pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::GetErrors@<X0>(char *this@<X0>, uint64_t a2@<X8>)
{
  if (this[31] < 0) {
    return (char *)sub_216778F24((unsigned char *)a2, *((void **)this + 1), *((void *)this + 2));
  }
  *(_OWORD *)a2 = *(_OWORD *)(this + 8);
  *(void *)(a2 + 16) = *((void *)this + 3);
  return this;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::SetFlag(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, int a3)
{
  uint64_t v3 = (uint64_t **)(*(void *)this + 24);
  if (a3) {
    return sub_216AE2E60((uint64_t)v3, a2, (uint64_t *)a2);
  }
  else {
    return (uint64_t *)sub_21711C264(v3, a2);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::HasSpec(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t result = (uint64_t)sub_21711C2AC(*(void *)this, a2);
  if (result)
  {
    uint64_t v4 = result;
    return pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootOrPrimPath(a2) || sub_21711C370(v4, a2) != 0;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::GetSpecType(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v3 = *(void *)this;
  uint64_t result = (uint64_t)sub_21711C2AC(*(void *)this, a2);
  if (result)
  {
    uint64_t v5 = result;
    if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootOrPrimPath(a2))
    {
      if (v5 == *(void *)(v3 + 176)) {
        return 7;
      }
      else {
        return 6;
      }
    }
    else
    {
      return sub_21711C370(v5, a2) != 0;
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::HasField(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4 = *a1;
  int v7 = 0;
  if (a4)
  {
    int v7 = 2;
    uint64_t v6 = a4;
  }
  return sub_2170E8744(v4, a2, a3, (uint64_t)&v6);
}

uint64_t sub_2170E8744(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  std::string v8 = sub_21711C2AC(a1, a2);
  if (!v8) {
    return 0;
  }
  uint64_t v9 = (uint64_t)v8;
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootOrPrimPath(a2))
  {
    uint64_t v19 = sub_21711C370(v9, a2);
    if (!v19) {
      return 0;
    }
    uint64_t v20 = (uint64_t)v19;
    uint64_t v21 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v21) {
      uint64_t v21 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    if ((*a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v21 + 11) & 0xFFFFFFFFFFFFFFF8))
    {
      if (!*(unsigned char *)(v20 + 56) && *(void *)(v20 + 32) != *(void *)(v20 + 40))
      {
        uint64_t v51 = 0;
        uint64_t v52 = 0;
        LODWORD(v53) = 2;
        return sub_21711C3D8((std::recursive_mutex **)a1, v20, (uint64_t)&v51, a4);
      }
    }
    else
    {
      int v22 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v22) {
        int v22 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      if ((*a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v22 + 54) & 0xFFFFFFFFFFFFFFF8))
      {
        if (*(unsigned char *)(v20 + 56))
        {
          uint64_t v30 = 1;
          if (*(_DWORD *)(a4 + 8))
          {
            v50[1] = 0;
            int v48 = 1;
            uint64_t v47 = v50;
            uint64_t v52 = 0;
            uint64_t v53 = 0;
            uint64_t v51 = &v52;
            uint64_t v32 = *(void *)(v20 + 40) - *(void *)(v20 + 32);
            if (v32)
            {
              uint64_t v33 = 0;
              uint64_t v34 = v32 >> 3;
              do
              {
                __p[0] = v33;
                __p[1] = 0;
                LODWORD(v45) = 2;
                if (sub_21711C3D8((std::recursive_mutex **)a1, v20, (uint64_t)__p, (uint64_t)&v47))
                {
                  uint64_t v46 = *(void *)(*(void *)(v20 + 32) + 8 * (void)v33);
                  __p[0] = &v46;
                  unint64_t v35 = sub_216A9E780((uint64_t **)&v51, (double *)&v46, (uint64_t)&unk_2174BFD90, (uint64_t **)__p);
                  sub_2168EC6DC(v35 + 5, v50);
                }
                uint64_t v33 = (char *)v33 + 1;
              }
              while ((void *)v34 != v33);
            }
            sub_216997AE0(v49, (uint64_t)&v51);
            uint64_t v30 = sub_21711C4AC(a4, (uint64_t)v49);
            sub_216997EC4((uint64_t)v49, (void *)v49[1]);
            sub_216997EC4((uint64_t)&v51, v52);
            sub_2168EE084((uint64_t)v50);
          }
          return v30;
        }
      }
      else
      {
        uint64_t v23 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v23) {
          uint64_t v23 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        if ((*a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v23 + 56) & 0xFFFFFFFFFFFFFFF8))
        {
          pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken(v20, (atomic_uint **)&v43);
          uint64_t v30 = sub_2170F9F98(a4, (uint64_t)&v43);
          uint64_t v31 = v43;
LABEL_68:
          if ((v31 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v31 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          return v30;
        }
        unint64_t v24 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v24) {
          unint64_t v24 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        if ((*a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v24 + 58) & 0xFFFFFFFFFFFFFFF8)) {
          return sub_21711C500(a4, *(unsigned __int8 *)(v20 + 57));
        }
      }
    }
    unint64_t v36 = sub_216A8E1C4(v20 + 8, a3);
    uint64_t v37 = (void *)(v20 + 16);
    goto LABEL_88;
  }
  uint64_t v10 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v10) {
    uint64_t v10 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  }
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v10 + 4) & 0xFFFFFFFFFFFFFFF8))
  {
    char v26 = *(uint64_t **)(v9 + 8);
    uint64_t v27 = *(uint64_t **)(v9 + 16);
    if (v26 != v27) {
      goto LABEL_74;
    }
  }
  if (*(void *)(a1 + 176) == v9) {
    goto LABEL_87;
  }
  double v11 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v11) {
    double v11 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v11 + 56) & 0xFFFFFFFFFFFFFFF8))
  {
    uint64_t v28 = *(std::type_info ****)v9;
    uint64_t v51 = v28;
    if ((v28 & 7) != 0)
    {
      uint64_t v29 = (uint64_t *)((unint64_t)v28 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit((atomic_uint *volatile)v29, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v51 = (std::type_info ***)v29;
      }
    }
    uint64_t v30 = sub_2170F9F98(a4, (uint64_t)&v51);
    uint64_t v31 = v51;
    goto LABEL_68;
  }
  long long v12 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v12) {
    long long v12 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v12 + 27) & 0xFFFFFFFFFFFFFFF8))
  {
    if (!*(unsigned char *)(v9 + 88)) {
      goto LABEL_87;
    }
    uint64_t v51 = 0;
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    sub_21698FA28(&v51, *(uint64_t **)(v9 + 64), *(uint64_t **)(v9 + 72), (uint64_t)(*(void *)(v9 + 72) - *(void *)(v9 + 64)) >> 3);
    uint64_t v38 = sub_21711C70C(a4, (uint64_t)&v51);
LABEL_75:
    uint64_t v30 = v38;
    __p[0] = &v51;
    sub_216889A04((void ***)__p);
    return v30;
  }
  unint64_t v13 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v13) {
    unint64_t v13 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v13 + 34) & 0xFFFFFFFFFFFFFFF8))
  {
    if (!*(unsigned char *)(v9 + 120)) {
      goto LABEL_87;
    }
    uint64_t v51 = 0;
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    sub_21698FA28(&v51, *(uint64_t **)(v9 + 96), *(uint64_t **)(v9 + 104), (uint64_t)(*(void *)(v9 + 104) - *(void *)(v9 + 96)) >> 3);
    uint64_t v38 = sub_21711C70C(a4, (uint64_t)&v51);
    goto LABEL_75;
  }
  unint64_t v14 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v14) {
    unint64_t v14 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v14 + 39) & 0xFFFFFFFFFFFFFFF8)) {
    return sub_21711C760(a4, *(_DWORD *)(v9 + 56));
  }
  unint64_t v15 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!v15) {
    unint64_t v15 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  }
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v15 + 5) & 0xFFFFFFFFFFFFFFF8))
  {
    char v26 = *(uint64_t **)(v9 + 32);
    uint64_t v27 = *(uint64_t **)(v9 + 40);
    if (v26 != v27)
    {
LABEL_74:
      uint64_t v51 = 0;
      uint64_t v52 = 0;
      uint64_t v53 = 0;
      sub_21698FA28(&v51, v26, v27, v27 - v26);
      uint64_t v38 = sub_21711C70C(a4, (uint64_t)&v51);
      goto LABEL_75;
    }
    goto LABEL_87;
  }
  uint64_t v16 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v16) {
    uint64_t v16 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) != (*((void *)v16 + 9) & 0xFFFFFFFFFFFFFFF8))
  {
    uint64_t v17 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v17) {
      uint64_t v17 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    if ((*a3 & 0xFFFFFFFFFFFFFFF8) != (*((void *)v17 + 25) & 0xFFFFFFFFFFFFFFF8))
    {
      long long v18 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v18) {
        long long v18 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      if ((*a3 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v18 + 35) & 0xFFFFFFFFFFFFFFF8)
        && pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v9 + 176)))
      {
        pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SdfListOp();
      }
      goto LABEL_87;
    }
    if (*(char *)(v9 + 207) < 0) {
      uint64_t v40 = *(void *)(v9 + 192);
    }
    else {
      uint64_t v40 = *(unsigned __int8 *)(v9 + 207);
    }
    if (v40) {
      return sub_21711C810(a4, *(unsigned char *)(v9 + 208));
    }
LABEL_87:
    unint64_t v36 = sub_216A8E1C4(v9 + 128, a3);
    uint64_t v37 = (void *)(v9 + 136);
LABEL_88:
    if (v37 != v36) {
      return sub_2170FFC3C(a4, (uint64_t)(v36 + 5));
    }
    return 0;
  }
  if (*(char *)(v9 + 207) < 0) {
    uint64_t v39 = *(void *)(v9 + 192);
  }
  else {
    uint64_t v39 = *(unsigned __int8 *)(v9 + 207);
  }
  if (!v39) {
    goto LABEL_87;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95E28, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95E28))
  {
    sub_216779094(&xmmword_267B95E10, "abcInstanceSourcePath");
    __cxa_atexit(MEMORY[0x263F8C0B8], &xmmword_267B95E10, &dword_216758000);
    __cxa_guard_release(&qword_267B95E28);
  }
  __p[0] = 0;
  uint64_t v52 = &off_26C750BB8;
  sub_21691B31C((unsigned int **)&v51, v9 + 184);
  uint64_t v41 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[]((pxrInternal__aapl__pxrReserved__::VtDictionary *)__p, &xmmword_267B95E10);
  sub_2168ED33C(v41, &v51);
  sub_2168EE084((uint64_t)&v51);
  pxrInternal__aapl__pxrReserved__::VtDictionary::VtDictionary((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v51, (const pxrInternal__aapl__pxrReserved__::VtDictionary *)__p);
  uint64_t v30 = sub_21711C7BC(a4, (uint64_t)&v51);
  sub_2168EBBB8(&v51, 0);
  sub_2168EBBB8((void ***)__p, 0);
  return v30;
}

void sub_2170E90AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::HasField(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  uint64_t v4 = *(void *)this;
  int v7 = 0;
  if (a4)
  {
    int v7 = 1;
    uint64_t v6 = a4;
  }
  return sub_2170E8744(v4, a2, (uint64_t *)a3, (uint64_t)&v6);
}

void *pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::HasValue(std::recursive_mutex ***a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *a1;
  int v7 = 0;
  if (a4)
  {
    int v7 = 2;
    uint64_t v6 = a4;
  }
  return sub_2170E9360(v4, a2, a3, (uint64_t)&v6);
}

void *sub_2170E9360(std::recursive_mutex **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = sub_21711C2AC((uint64_t)a1, a2);
  if (result)
  {
    uint64_t v9 = (uint64_t)result;
    if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootOrPrimPath(a2))
    {
      return 0;
    }
    else
    {
      uint64_t result = sub_21711C370(v9, a2);
      if (result)
      {
        v10[0] = a3;
        v10[1] = 0;
        int v11 = 2;
        return (void *)sub_21711C3D8(a1, (uint64_t)result, (uint64_t)v10, a4);
      }
    }
  }
  return result;
}

void *pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::HasValue(std::recursive_mutex ***this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  uint64_t v4 = *this;
  int v7 = 0;
  if (a4)
  {
    int v7 = 1;
    uint64_t v6 = a4;
  }
  return sub_2170E9360(v4, a2, a3, (uint64_t)&v6);
}

_DWORD *pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::VisitSpecs(_DWORD *this, const pxrInternal__aapl__pxrReserved__::SdfAbstractData *a2, pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor *a3)
{
  uint64_t v3 = *(void *)this;
  uint64_t v4 = *(void **)(*(void *)this + 152);
  uint64_t v5 = *(void *)this + 160;
  if (v4 != (void *)v5)
  {
    do
    {
      this = (_DWORD *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor *, const pxrInternal__aapl__pxrReserved__::SdfAbstractData *, void *))(*(void *)a3 + 16))(a3, a2, v4 + 4);
      if (!this) {
        break;
      }
      if (v4 + 5 != *(void **)(v3 + 176))
      {
        std::string v8 = (void *)v4[24];
        if (v8 != v4 + 25)
        {
          do
          {
            pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)(v4 + 4), (const pxrInternal__aapl__pxrReserved__::TfToken *)(v8 + 4), &v15);
            char v9 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor *, const pxrInternal__aapl__pxrReserved__::SdfAbstractData *, int *))(*(void *)a3 + 16))(a3, a2, &v15);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
            this = sub_21697C414(&v15);
            if ((v9 & 1) == 0) {
              return this;
            }
            uint64_t v10 = (void *)v8[1];
            if (v10)
            {
              do
              {
                int v11 = v10;
                uint64_t v10 = (void *)*v10;
              }
              while (v10);
            }
            else
            {
              do
              {
                int v11 = (void *)v8[2];
                BOOL v12 = *v11 == (void)v8;
                std::string v8 = v11;
              }
              while (!v12);
            }
            std::string v8 = v11;
          }
          while (v11 != v4 + 25);
        }
      }
      unint64_t v13 = (void *)v4[1];
      if (v13)
      {
        do
        {
          unint64_t v14 = v13;
          unint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          unint64_t v14 = (void *)v4[2];
          BOOL v12 = *v14 == (void)v4;
          uint64_t v4 = v14;
        }
        while (!v12);
      }
      uint64_t v4 = v14;
    }
    while (v14 != (void *)v5);
  }
  return this;
}

void sub_2170E95BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v2);
  sub_21697C414((int *)va);
  _Unwind_Resume(a1);
}

unint64_t pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::List@<X0>(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)this;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  unint64_t result = (unint64_t)sub_21711C2AC(v5, a2);
  uint64_t v7 = result;
  if (!result) {
    return result;
  }
  unint64_t result = pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootOrPrimPath(a2);
  if (result)
  {
    if (v7 == *(void *)(v5 + 176)) {
      goto LABEL_143;
    }
    if (*(void *)v7)
    {
      std::string v8 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v8) {
        std::string v8 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      char v9 = (uint64_t *)((char *)v8 + 448);
      uint64_t v10 = *(uint64_t **)(a3 + 8);
      if ((unint64_t)v10 >= *(void *)(a3 + 16))
      {
        BOOL v12 = sub_216973984((char **)a3, v9);
      }
      else
      {
        uint64_t v11 = *v9;
        *uint64_t v10 = *v9;
        if ((v11 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          *v10 &= 0xFFFFFFFFFFFFFFF8;
        }
        BOOL v12 = (char *)(v10 + 1);
      }
      *(void *)(a3 + 8) = v12;
    }
    uint64_t v40 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v40) {
      uint64_t v40 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t v41 = (uint64_t *)((char *)v40 + 312);
    uint64_t v42 = *(uint64_t **)(a3 + 8);
    if ((unint64_t)v42 >= *(void *)(a3 + 16))
    {
      uint64_t v44 = sub_216973984((char **)a3, v41);
    }
    else
    {
      uint64_t v43 = *v41;
      *uint64_t v42 = *v41;
      if ((v43 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v43 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *v42 &= 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v44 = (char *)(v42 + 1);
    }
    *(void *)(a3 + 8) = v44;
    if (*(void *)(v7 + 32) != *(void *)(v7 + 40))
    {
      uint64_t v45 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
      if (!v45) {
        uint64_t v45 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
      }
      uint64_t v46 = (uint64_t *)((char *)v45 + 40);
      uint64_t v47 = *(uint64_t **)(a3 + 8);
      if ((unint64_t)v47 >= *(void *)(a3 + 16))
      {
        uint64_t v49 = sub_216973984((char **)a3, v46);
      }
      else
      {
        uint64_t v48 = *v46;
        *uint64_t v47 = *v46;
        if ((v48 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v48 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          *v47 &= 0xFFFFFFFFFFFFFFF8;
        }
        uint64_t v49 = (char *)(v47 + 1);
      }
      *(void *)(a3 + 8) = v49;
    }
    if (*(unsigned char *)(v7 + 88))
    {
      uint64_t v50 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v50) {
        uint64_t v50 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      uint64_t v51 = (uint64_t *)((char *)v50 + 216);
      uint64_t v52 = *(uint64_t **)(a3 + 8);
      if ((unint64_t)v52 >= *(void *)(a3 + 16))
      {
        uint64_t v54 = sub_216973984((char **)a3, v51);
      }
      else
      {
        uint64_t v53 = *v51;
        *uint64_t v52 = *v51;
        if ((v53 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v53 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          *v52 &= 0xFFFFFFFFFFFFFFF8;
        }
        uint64_t v54 = (char *)(v52 + 1);
      }
      *(void *)(a3 + 8) = v54;
    }
    if (*(unsigned char *)(v7 + 120))
    {
      uint64_t v55 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v55) {
        uint64_t v55 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      uint64_t v56 = (uint64_t *)((char *)v55 + 272);
      uint64_t v57 = *(uint64_t **)(a3 + 8);
      if ((unint64_t)v57 >= *(void *)(a3 + 16))
      {
        uint64_t v59 = sub_216973984((char **)a3, v56);
      }
      else
      {
        uint64_t v58 = *v56;
        *uint64_t v57 = *v56;
        if ((v58 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v58 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          *v57 &= 0xFFFFFFFFFFFFFFF8;
        }
        uint64_t v59 = (char *)(v57 + 1);
      }
      *(void *)(a3 + 8) = v59;
    }
    unint64_t result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v7 + 176));
    if (result)
    {
      uint64_t v60 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v60) {
        uint64_t v60 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      uint64_t v61 = (uint64_t *)((char *)v60 + 280);
      uint64_t v62 = *(uint64_t **)(a3 + 8);
      if ((unint64_t)v62 >= *(void *)(a3 + 16))
      {
        unint64_t result = (unint64_t)sub_216973984((char **)a3, v61);
      }
      else
      {
        uint64_t v63 = *v61;
        *uint64_t v62 = *v61;
        if ((v63 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v63 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          *v62 &= 0xFFFFFFFFFFFFFFF8;
        }
        unint64_t result = (unint64_t)(v62 + 1);
      }
      *(void *)(a3 + 8) = result;
    }
    if (*(char *)(v7 + 207) < 0)
    {
      if (!*(void *)(v7 + 192)) {
        goto LABEL_129;
      }
    }
    else if (!*(unsigned char *)(v7 + 207))
    {
      goto LABEL_129;
    }
    uint64_t v64 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v64) {
      uint64_t v64 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t v65 = (uint64_t *)((char *)v64 + 72);
    uint64_t v66 = *(uint64_t **)(a3 + 8);
    if ((unint64_t)v66 >= *(void *)(a3 + 16))
    {
      unint64_t result = (unint64_t)sub_216973984((char **)a3, v65);
    }
    else
    {
      uint64_t v67 = *v65;
      *uint64_t v66 = *v65;
      if ((v67 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v67 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *v66 &= 0xFFFFFFFFFFFFFFF8;
      }
      unint64_t result = (unint64_t)(v66 + 1);
    }
    *(void *)(a3 + 8) = result;
LABEL_129:
    if (*(unsigned char *)(v7 + 208))
    {
      if ((*(char *)(v7 + 207) & 0x80000000) == 0)
      {
        if (!*(unsigned char *)(v7 + 207)) {
          goto LABEL_143;
        }
LABEL_134:
        unint64_t v68 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v68) {
          unint64_t v68 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        }
        unint64_t v69 = (uint64_t *)((char *)v68 + 200);
        uint64_t v70 = *(uint64_t **)(a3 + 8);
        if ((unint64_t)v70 >= *(void *)(a3 + 16))
        {
          unint64_t result = (unint64_t)sub_216973984((char **)a3, v69);
        }
        else
        {
          uint64_t v71 = *v69;
          *uint64_t v70 = *v69;
          if ((v71 & 7) != 0
            && (atomic_fetch_add_explicit((atomic_uint *volatile)(v71 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
          {
            *v70 &= 0xFFFFFFFFFFFFFFF8;
          }
          unint64_t result = (unint64_t)(v70 + 1);
        }
        *(void *)(a3 + 8) = result;
        goto LABEL_143;
      }
      if (*(void *)(v7 + 192)) {
        goto LABEL_134;
      }
    }
LABEL_143:
    if (*(void *)(v7 + 8) != *(void *)(v7 + 16))
    {
      unint64_t v72 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
      if (!v72) {
        unint64_t v72 = sub_21697E16C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
      }
      unint64_t v73 = (uint64_t *)((char *)v72 + 32);
      uint64_t v74 = *(uint64_t **)(a3 + 8);
      if ((unint64_t)v74 >= *(void *)(a3 + 16))
      {
        unint64_t result = (unint64_t)sub_216973984((char **)a3, v73);
      }
      else
      {
        uint64_t v75 = *v73;
        *uint64_t v74 = *v73;
        if ((v75 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v75 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          *v74 &= 0xFFFFFFFFFFFFFFF8;
        }
        unint64_t result = (unint64_t)(v74 + 1);
      }
      *(void *)(a3 + 8) = result;
    }
    uint64_t v76 = *(void **)(v7 + 128);
    uint64_t v77 = (void *)(v7 + 136);
    if (v76 != v77)
    {
      unint64_t result = *(void *)(a3 + 8);
      do
      {
        uint64_t v78 = v76 + 4;
        if (result >= *(void *)(a3 + 16))
        {
          unint64_t result = (unint64_t)sub_216973984((char **)a3, v78);
        }
        else
        {
          uint64_t v79 = *v78;
          *(void *)unint64_t result = *v78;
          if ((v79 & 7) != 0
            && (atomic_fetch_add_explicit((atomic_uint *volatile)(v79 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
          {
            *(void *)result &= 0xFFFFFFFFFFFFFFF8;
          }
          result += 8;
        }
        *(void *)(a3 + 8) = result;
        char v80 = (void *)v76[1];
        if (v80)
        {
          do
          {
            uint64_t v81 = v80;
            char v80 = (void *)*v80;
          }
          while (v80);
        }
        else
        {
          do
          {
            uint64_t v81 = (void *)v76[2];
            BOOL v39 = *v81 == (void)v76;
            uint64_t v76 = v81;
          }
          while (!v39);
        }
        uint64_t v76 = v81;
      }
      while (v81 != v77);
    }
    return result;
  }
  unint64_t result = (unint64_t)sub_21711C370(v7, a2);
  unint64_t v13 = result;
  if (!result) {
    return result;
  }
  unint64_t v14 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v14) {
    unint64_t v14 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  int v15 = (uint64_t *)((char *)v14 + 448);
  int v16 = *(uint64_t **)(a3 + 8);
  if ((unint64_t)v16 >= *(void *)(a3 + 16))
  {
    long long v18 = sub_216973984((char **)a3, v15);
  }
  else
  {
    uint64_t v17 = *v15;
    *int v16 = *v15;
    if ((v17 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *v16 &= 0xFFFFFFFFFFFFFFF8;
    }
    long long v18 = (char *)(v16 + 1);
  }
  *(void *)(a3 + 8) = v18;
  uint64_t v19 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v19) {
    uint64_t v19 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  uint64_t v20 = (uint64_t *)((char *)v19 + 64);
  uint64_t v21 = *(uint64_t **)(a3 + 8);
  if ((unint64_t)v21 >= *(void *)(a3 + 16))
  {
    uint64_t v23 = sub_216973984((char **)a3, v20);
  }
  else
  {
    uint64_t v22 = *v20;
    *uint64_t v21 = *v20;
    if ((v22 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *v21 &= 0xFFFFFFFFFFFFFFF8;
    }
    uint64_t v23 = (char *)(v21 + 1);
  }
  *(void *)(a3 + 8) = v23;
  unint64_t v24 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v24) {
    unint64_t v24 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  int v25 = (uint64_t *)((char *)v24 + 464);
  char v26 = *(uint64_t **)(a3 + 8);
  if ((unint64_t)v26 >= *(void *)(a3 + 16))
  {
    unint64_t result = (unint64_t)sub_216973984((char **)a3, v25);
  }
  else
  {
    uint64_t v27 = *v25;
    *char v26 = *v25;
    if ((v27 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *v26 &= 0xFFFFFFFFFFFFFFF8;
    }
    unint64_t result = (unint64_t)(v26 + 1);
  }
  *(void *)(a3 + 8) = result;
  if (*(unsigned char *)(v13 + 56))
  {
    uint64_t v28 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v28) {
      uint64_t v28 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t v29 = (uint64_t *)((char *)v28 + 432);
LABEL_45:
    uint64_t v31 = *(uint64_t **)(a3 + 8);
    if ((unint64_t)v31 >= *(void *)(a3 + 16))
    {
      unint64_t result = (unint64_t)sub_216973984((char **)a3, v29);
    }
    else
    {
      uint64_t v32 = *v29;
      *uint64_t v31 = *v29;
      if ((v32 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *v31 &= 0xFFFFFFFFFFFFFFF8;
      }
      unint64_t result = (unint64_t)(v31 + 1);
    }
    *(void *)(a3 + 8) = result;
    goto LABEL_52;
  }
  if (*(void *)(v13 + 32) != *(void *)(v13 + 40))
  {
    uint64_t v30 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v30) {
      uint64_t v30 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    uint64_t v29 = (uint64_t *)((char *)v30 + 88);
    goto LABEL_45;
  }
LABEL_52:
  uint64_t v33 = *(void **)(v13 + 8);
  uint64_t v34 = (void *)(v13 + 16);
  if (v33 != v34)
  {
    do
    {
      unint64_t v35 = v33 + 4;
      if (result >= *(void *)(a3 + 16))
      {
        unint64_t result = (unint64_t)sub_216973984((char **)a3, v35);
      }
      else
      {
        uint64_t v36 = *v35;
        *(void *)unint64_t result = *v35;
        if ((v36 & 7) != 0
          && (atomic_fetch_add_explicit((atomic_uint *volatile)(v36 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
        {
          *(void *)result &= 0xFFFFFFFFFFFFFFF8;
        }
        result += 8;
      }
      *(void *)(a3 + 8) = result;
      uint64_t v37 = (void *)v33[1];
      if (v37)
      {
        do
        {
          uint64_t v38 = v37;
          uint64_t v37 = (void *)*v37;
        }
        while (v37);
      }
      else
      {
        do
        {
          uint64_t v38 = (void *)v33[2];
          BOOL v39 = *v38 == (void)v33;
          uint64_t v33 = v38;
        }
        while (!v39);
      }
      uint64_t v33 = v38;
    }
    while (v38 != v34);
  }
  return result;
}

void sub_2170E9DAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_216889A04((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::ListAllTimeSamples(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *this)
{
  return *(void *)this + 184;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader::ListTimeSamplesForPath(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicDataReader *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v3 = *(void *)this;
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(a2))
  {
    uint64_t v4 = sub_21711C2AC(v3, a2);
    if (v4)
    {
      uint64_t v5 = sub_21711C370((uint64_t)v4, a2);
      if (v5)
      {
        if (*((unsigned char *)v5 + 56)) {
          return v5 + 4;
        }
      }
    }
  }
  if (atomic_load_explicit((atomic_uchar *volatile)&qword_267B95E48, memory_order_acquire)) {
    return &qword_267B95E30;
  }
  if (__cxa_guard_acquire(&qword_267B95E48))
  {
    qword_267B95E30 = 0;
    *(void *)algn_267B95E38 = 0;
    qword_267B95E40 = 0;
    __cxa_atexit((void (*)(void *))sub_2170F5B6C, &qword_267B95E30, &dword_216758000);
    __cxa_guard_release(&qword_267B95E48);
  }
  return &qword_267B95E30;
}

void *sub_2170E9EA4()
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicConversions::UsdAbc_AlembicConversions((pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicConversions *)&unk_267B95D08);
  qword_267B95D28 = 0;
  qword_267B95D30 = 0;
  qword_267B95D20 = (uint64_t)&qword_267B95D28;
  uint64_t v7 = (uint64_t *)sub_2170EB1E4("AbcGeom_GeomBase_v1");
  uint64_t v28 = (uint64_t *)&unk_26C772F20;
  uint64_t v29 = (uint64_t *)sub_2170EB494;
  uint64_t v31 = (void **)&v28;
  sub_2170EB2B4(&v7, (uint64_t)&v28);
  *(void *)&long long v25 = &unk_26C772F20;
  *((void *)&v25 + 1) = sub_2170EB698;
  uint64_t v27 = &v25;
  sub_2170EB2B4(&v7, (uint64_t)&v25);
  uint64_t v22 = &unk_26C772F20;
  uint64_t v23 = sub_2170EBBD4;
  unint64_t v24 = &v22;
  sub_2170EB2B4(&v7, (uint64_t)&v22);
  uint64_t v19 = (uint64_t *)&unk_26C772F20;
  uint64_t v20 = sub_2170EC134;
  uint64_t v21 = &v19;
  sub_2170EB2B4(&v7, (uint64_t)&v19);
  int v16 = (uint64_t *)&unk_26C772F20;
  uint64_t v17 = sub_2170EC61C;
  long long v18 = &v16;
  sub_2170EB2B4(&v7, (uint64_t)&v16);
  unint64_t v13 = (uint64_t *)&unk_26C772F20;
  unint64_t v14 = sub_2170EC71C;
  int v15 = &v13;
  sub_2170EB2B4(&v7, (uint64_t)&v13);
  uint64_t v10 = &unk_26C772F20;
  uint64_t v11 = sub_2170EC81C;
  BOOL v12 = &v10;
  sub_2170EB2B4(&v7, (uint64_t)&v10);
  sub_2170ECCD8(&v10);
  sub_2170ECCD8(&v13);
  sub_2170ECCD8(&v16);
  sub_2170ECCD8(&v19);
  sub_2170ECCD8(&v22);
  sub_2170ECCD8(&v25);
  sub_2170ECCD8(&v28);
  unint64_t v13 = (uint64_t *)sub_2170EB1E4("AbcGeom_Xform_v3");
  uint64_t v28 = (uint64_t *)&unk_26C772F20;
  uint64_t v29 = (uint64_t *)sub_2170ECD5C;
  uint64_t v31 = (void **)&v28;
  sub_2170EB2B4(&v13, (uint64_t)&v28);
  *(void *)&long long v25 = &unk_26C772F20;
  *((void *)&v25 + 1) = sub_2170EC134;
  uint64_t v27 = &v25;
  sub_2170EB2B4(&v13, (uint64_t)&v25);
  uint64_t v22 = &unk_26C772F20;
  uint64_t v23 = sub_2170EC61C;
  unint64_t v24 = &v22;
  sub_2170EB2B4(&v13, (uint64_t)&v22);
  uint64_t v19 = (uint64_t *)&unk_26C772F20;
  uint64_t v20 = sub_2170EC71C;
  uint64_t v21 = &v19;
  sub_2170EB2B4(&v13, (uint64_t)&v19);
  int v16 = (uint64_t *)&unk_26C772F20;
  uint64_t v17 = sub_2170EC81C;
  long long v18 = &v16;
  sub_2170EB2B4(&v13, (uint64_t)&v16);
  sub_2170ECCD8(&v16);
  sub_2170ECCD8(&v19);
  sub_2170ECCD8(&v22);
  sub_2170ECCD8(&v25);
  sub_2170ECCD8(&v28);
  uint64_t v6 = (uint64_t *)sub_2170EB1E4("AbcGeom_SubD_v1");
  uint64_t v28 = (uint64_t *)&unk_26C772F20;
  uint64_t v29 = (uint64_t *)sub_2170ED580;
  uint64_t v31 = (void **)&v28;
  sub_2170EB2B4(&v6, (uint64_t)&v28);
  *(void *)&long long v25 = &unk_26C772F20;
  *((void *)&v25 + 1) = sub_2170EDAD8;
  uint64_t v27 = &v25;
  sub_2170EB2B4(&v6, (uint64_t)&v25);
  uint64_t v22 = &unk_26C772F20;
  uint64_t v23 = sub_2170EB698;
  unint64_t v24 = &v22;
  sub_2170EB2B4(&v6, (uint64_t)&v22);
  uint64_t v19 = (uint64_t *)&unk_26C772F20;
  uint64_t v20 = sub_2170EBBD4;
  uint64_t v21 = &v19;
  sub_2170EB2B4(&v6, (uint64_t)&v19);
  int v16 = (uint64_t *)&unk_26C772F20;
  uint64_t v17 = sub_2170EC134;
  long long v18 = &v16;
  sub_2170EB2B4(&v6, (uint64_t)&v16);
  unint64_t v13 = (uint64_t *)&unk_26C772F20;
  unint64_t v14 = sub_2170EC61C;
  int v15 = &v13;
  sub_2170EB2B4(&v6, (uint64_t)&v13);
  uint64_t v10 = &unk_26C772F20;
  uint64_t v11 = sub_2170EC71C;
  BOOL v12 = &v10;
  sub_2170EB2B4(&v6, (uint64_t)&v10);
  uint64_t v7 = (uint64_t *)&unk_26C772F20;
  std::string v8 = sub_2170EC81C;
  char v9 = &v7;
  sub_2170EB2B4(&v6, (uint64_t)&v7);
  sub_2170ECCD8(&v7);
  sub_2170ECCD8(&v10);
  sub_2170ECCD8(&v13);
  sub_2170ECCD8(&v16);
  sub_2170ECCD8(&v19);
  sub_2170ECCD8(&v22);
  sub_2170ECCD8(&v25);
  sub_2170ECCD8(&v28);
  uint64_t v6 = (uint64_t *)sub_2170EB1E4("AbcGeom_PolyMesh_v1");
  uint64_t v28 = (uint64_t *)&unk_26C772F20;
  uint64_t v29 = (uint64_t *)sub_2170ED580;
  uint64_t v31 = (void **)&v28;
  sub_2170EB2B4(&v6, (uint64_t)&v28);
  *(void *)&long long v25 = &unk_26C772F20;
  *((void *)&v25 + 1) = sub_2170EEEC8;
  uint64_t v27 = &v25;
  sub_2170EB2B4(&v6, (uint64_t)&v25);
  uint64_t v22 = &unk_26C772F20;
  uint64_t v23 = sub_2170EB698;
  unint64_t v24 = &v22;
  sub_2170EB2B4(&v6, (uint64_t)&v22);
  uint64_t v19 = (uint64_t *)&unk_26C772F20;
  uint64_t v20 = sub_2170EBBD4;
  uint64_t v21 = &v19;
  sub_2170EB2B4(&v6, (uint64_t)&v19);
  int v16 = (uint64_t *)&unk_26C772F20;
  uint64_t v17 = sub_2170EC134;
  long long v18 = &v16;
  sub_2170EB2B4(&v6, (uint64_t)&v16);
  unint64_t v13 = (uint64_t *)&unk_26C772F20;
  unint64_t v14 = sub_2170EC61C;
  int v15 = &v13;
  sub_2170EB2B4(&v6, (uint64_t)&v13);
  uint64_t v10 = &unk_26C772F20;
  uint64_t v11 = sub_2170EC71C;
  BOOL v12 = &v10;
  sub_2170EB2B4(&v6, (uint64_t)&v10);
  uint64_t v7 = (uint64_t *)&unk_26C772F20;
  std::string v8 = sub_2170EC81C;
  char v9 = &v7;
  sub_2170EB2B4(&v6, (uint64_t)&v7);
  sub_2170ECCD8(&v7);
  sub_2170ECCD8(&v10);
  sub_2170ECCD8(&v13);
  sub_2170ECCD8(&v16);
  sub_2170ECCD8(&v19);
  sub_2170ECCD8(&v22);
  sub_2170ECCD8(&v25);
  sub_2170ECCD8(&v28);
  *(void *)&long long v25 = sub_2170EB1E4("AbcGeom_FaceSet_v1");
  uint64_t v28 = (uint64_t *)&unk_26C772F20;
  uint64_t v29 = (uint64_t *)sub_2170EF5A8;
  uint64_t v31 = (void **)&v28;
  sub_2170EB2B4((uint64_t **)&v25, (uint64_t)&v28);
  sub_2170ECCD8(&v28);
  uint64_t v6 = (uint64_t *)sub_2170EB1E4("AbcGeom_Curve_v2");
  uint64_t v28 = (uint64_t *)&unk_26C772F20;
  uint64_t v29 = (uint64_t *)sub_2170ED580;
  uint64_t v31 = (void **)&v28;
  sub_2170EB2B4(&v6, (uint64_t)&v28);
  *(void *)&long long v25 = &unk_26C772F20;
  *((void *)&v25 + 1) = sub_2170F04CC;
  uint64_t v27 = &v25;
  sub_2170EB2B4(&v6, (uint64_t)&v25);
  uint64_t v22 = &unk_26C772F20;
  uint64_t v23 = sub_2170EB698;
  unint64_t v24 = &v22;
  sub_2170EB2B4(&v6, (uint64_t)&v22);
  uint64_t v19 = (uint64_t *)&unk_26C772F20;
  uint64_t v20 = sub_2170EBBD4;
  uint64_t v21 = &v19;
  sub_2170EB2B4(&v6, (uint64_t)&v19);
  int v16 = (uint64_t *)&unk_26C772F20;
  uint64_t v17 = sub_2170EC134;
  long long v18 = &v16;
  sub_2170EB2B4(&v6, (uint64_t)&v16);
  unint64_t v13 = (uint64_t *)&unk_26C772F20;
  unint64_t v14 = sub_2170EC61C;
  int v15 = &v13;
  sub_2170EB2B4(&v6, (uint64_t)&v13);
  uint64_t v10 = &unk_26C772F20;
  uint64_t v11 = sub_2170EC71C;
  BOOL v12 = &v10;
  sub_2170EB2B4(&v6, (uint64_t)&v10);
  uint64_t v7 = (uint64_t *)&unk_26C772F20;
  std::string v8 = sub_2170EC81C;
  char v9 = &v7;
  sub_2170EB2B4(&v6, (uint64_t)&v7);
  sub_2170ECCD8(&v7);
  sub_2170ECCD8(&v10);
  sub_2170ECCD8(&v13);
  sub_2170ECCD8(&v16);
  sub_2170ECCD8(&v19);
  sub_2170ECCD8(&v22);
  sub_2170ECCD8(&v25);
  sub_2170ECCD8(&v28);
  uint64_t v6 = (uint64_t *)sub_2170EB1E4("AbcGeom_Points_v1");
  uint64_t v28 = (uint64_t *)&unk_26C772F20;
  uint64_t v29 = (uint64_t *)sub_2170ED580;
  uint64_t v31 = (void **)&v28;
  sub_2170EB2B4(&v6, (uint64_t)&v28);
  *(void *)&long long v25 = &unk_26C772F20;
  *((void *)&v25 + 1) = sub_2170F1D88;
  uint64_t v27 = &v25;
  sub_2170EB2B4(&v6, (uint64_t)&v25);
  uint64_t v22 = &unk_26C772F20;
  uint64_t v23 = sub_2170EB698;
  unint64_t v24 = &v22;
  sub_2170EB2B4(&v6, (uint64_t)&v22);
  uint64_t v19 = (uint64_t *)&unk_26C772F20;
  uint64_t v20 = sub_2170EBBD4;
  uint64_t v21 = &v19;
  sub_2170EB2B4(&v6, (uint64_t)&v19);
  int v16 = (uint64_t *)&unk_26C772F20;
  uint64_t v17 = sub_2170EC134;
  long long v18 = &v16;
  sub_2170EB2B4(&v6, (uint64_t)&v16);
  unint64_t v13 = (uint64_t *)&unk_26C772F20;
  unint64_t v14 = sub_2170EC61C;
  int v15 = &v13;
  sub_2170EB2B4(&v6, (uint64_t)&v13);
  uint64_t v10 = &unk_26C772F20;
  uint64_t v11 = sub_2170EC71C;
  BOOL v12 = &v10;
  sub_2170EB2B4(&v6, (uint64_t)&v10);
  uint64_t v7 = (uint64_t *)&unk_26C772F20;
  std::string v8 = sub_2170EC81C;
  char v9 = &v7;
  sub_2170EB2B4(&v6, (uint64_t)&v7);
  sub_2170ECCD8(&v7);
  sub_2170ECCD8(&v10);
  sub_2170ECCD8(&v13);
  sub_2170ECCD8(&v16);
  sub_2170ECCD8(&v19);
  sub_2170ECCD8(&v22);
  sub_2170ECCD8(&v25);
  sub_2170ECCD8(&v28);
  int v16 = (uint64_t *)sub_2170EB1E4("AbcGeom_Camera_v1");
  uint64_t v28 = (uint64_t *)&unk_26C772F20;
  uint64_t v29 = (uint64_t *)sub_2170F25D8;
  uint64_t v31 = (void **)&v28;
  sub_2170EB2B4(&v16, (uint64_t)&v28);
  *(void *)&long long v25 = &unk_26C772F20;
  *((void *)&v25 + 1) = sub_2170EC61C;
  uint64_t v27 = &v25;
  sub_2170EB2B4(&v16, (uint64_t)&v25);
  uint64_t v22 = &unk_26C772F20;
  uint64_t v23 = sub_2170EC71C;
  unint64_t v24 = &v22;
  sub_2170EB2B4(&v16, (uint64_t)&v22);
  uint64_t v19 = (uint64_t *)&unk_26C772F20;
  uint64_t v20 = sub_2170EC81C;
  uint64_t v21 = &v19;
  sub_2170EB2B4(&v16, (uint64_t)&v19);
  sub_2170ECCD8(&v19);
  sub_2170ECCD8(&v22);
  sub_2170ECCD8(&v25);
  sub_2170ECCD8(&v28);
  long long v25 = 0uLL;
  uint64_t v26 = 0;
  v0 = sub_2170F54B4(&v19, (const void **)&v25);
  uint64_t v1 = (uint64_t *)*v0;
  if (!*v0)
  {
    uint64_t v2 = (uint64_t **)v0;
    uint64_t v3 = operator new(0x50uLL);
    uint64_t v28 = v3;
    uint64_t v29 = &qword_267B95D28;
    char v30 = 0;
    uint64_t v4 = v3 + 4;
    if (SHIBYTE(v26) < 0)
    {
      sub_216778F24(v4, (void *)v25, *((unint64_t *)&v25 + 1));
      uint64_t v1 = v28;
    }
    else
    {
      *(_OWORD *)uint64_t v4 = v25;
      v3[6] = v26;
      uint64_t v1 = v3;
    }
    v3[7] = 0;
    v3[8] = 0;
    v3[9] = 0;
    char v30 = 1;
    sub_2170F5564((uint64_t)v19, v2, v1);
    uint64_t v28 = 0;
    sub_2170F55C4((uint64_t)&v28);
  }
  if (SHIBYTE(v26) < 0) {
    operator delete((void *)v25);
  }
  uint64_t v7 = v1 + 7;
  uint64_t v28 = (uint64_t *)&unk_26C772F20;
  uint64_t v29 = (uint64_t *)sub_2170EB494;
  uint64_t v31 = (void **)&v28;
  sub_2170EB2B4(&v7, (uint64_t)&v28);
  *(void *)&long long v25 = &unk_26C772F20;
  *((void *)&v25 + 1) = sub_2170EB698;
  uint64_t v27 = &v25;
  sub_2170EB2B4(&v7, (uint64_t)&v25);
  uint64_t v22 = &unk_26C772F20;
  uint64_t v23 = sub_2170EBBD4;
  unint64_t v24 = &v22;
  sub_2170EB2B4(&v7, (uint64_t)&v22);
  uint64_t v19 = (uint64_t *)&unk_26C772F20;
  uint64_t v20 = sub_2170EC134;
  uint64_t v21 = &v19;
  sub_2170EB2B4(&v7, (uint64_t)&v19);
  int v16 = (uint64_t *)&unk_26C772F20;
  uint64_t v17 = sub_2170EC61C;
  long long v18 = &v16;
  sub_2170EB2B4(&v7, (uint64_t)&v16);
  unint64_t v13 = (uint64_t *)&unk_26C772F20;
  unint64_t v14 = sub_2170EC71C;
  int v15 = &v13;
  sub_2170EB2B4(&v7, (uint64_t)&v13);
  uint64_t v10 = &unk_26C772F20;
  uint64_t v11 = sub_2170EC81C;
  BOOL v12 = &v10;
  sub_2170EB2B4(&v7, (uint64_t)&v10);
  sub_2170ECCD8(&v10);
  sub_2170ECCD8(&v13);
  sub_2170ECCD8(&v16);
  sub_2170ECCD8(&v19);
  sub_2170ECCD8(&v22);
  sub_2170ECCD8(&v25);
  return sub_2170ECCD8(&v28);
}

void sub_2170EAFF8(_Unwind_Exception *a1)
{
  sub_2170F55C4(v2 - 88);
  if (*(char *)(v2 - 97) < 0) {
    operator delete(*(void **)(v2 - 120));
  }
  sub_217119C64(v1 + 24, *(void **)(v1 + 32));
  *(void *)(v2 - 152) = v1;
  sub_217119CC0((void ***)(v2 - 152));
  _Unwind_Resume(a1);
}

uint64_t sub_2170EB1A0(uint64_t a1)
{
  sub_217119C64(a1 + 24, *(void **)(a1 + 32));
  uint64_t v3 = (void **)a1;
  sub_217119CC0(&v3);
  return a1;
}

uint64_t sub_2170EB1E4(char *__s)
{
  sub_216779094(__p, __s);
  uint64_t v1 = sub_2170F54B4(&v10, (const void **)__p);
  uint64_t v2 = (_OWORD *)*v1;
  if (!*v1)
  {
    uint64_t v3 = (uint64_t **)v1;
    uint64_t v2 = operator new(0x50uLL);
    v8[1] = &qword_267B95D28;
    v2[2] = *(_OWORD *)__p;
    uint64_t v4 = v7;
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v7 = 0;
    *((void *)v2 + 6) = v4;
    *((void *)v2 + 7) = 0;
    *((void *)v2 + 8) = 0;
    *((void *)v2 + 9) = 0;
    char v9 = 1;
    sub_2170F5564((uint64_t)v10, v3, (uint64_t *)v2);
    v8[0] = 0;
    sub_2170F55C4((uint64_t)v8);
  }
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
  return (uint64_t)v2 + 56;
}

void sub_2170EB298(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **sub_2170EB2B4(uint64_t **a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = (*a1)[1];
  unint64_t v6 = (*a1)[2];
  if (v5 < v6)
  {
    sub_2170F56B8((*a1)[1], a2);
    uint64_t v7 = v5 + 32;
    v4[1] = v5 + 32;
    goto LABEL_25;
  }
  uint64_t v8 = (uint64_t)(v5 - *v4) >> 5;
  if ((unint64_t)(v8 + 1) >> 59) {
    sub_21677CB10();
  }
  uint64_t v9 = v6 - *v4;
  uint64_t v10 = v9 >> 4;
  if (v9 >> 4 <= (unint64_t)(v8 + 1)) {
    uint64_t v10 = v8 + 1;
  }
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v11 = v10;
  }
  uint64_t v28 = (uint64_t)(*a1 + 2);
  if (v11)
  {
    if (v11 >> 59) {
      sub_21677CA1C();
    }
    BOOL v12 = (char *)operator new(32 * v11);
  }
  else
  {
    BOOL v12 = 0;
  }
  unint64_t v24 = v12;
  long long v25 = &v12[32 * v8];
  uint64_t v27 = &v12[32 * v11];
  sub_2170F56B8((uint64_t)v25, a2);
  uint64_t v13 = (uint64_t)v25;
  uint64_t v7 = (uint64_t)(v25 + 32);
  uint64_t v26 = v25 + 32;
  uint64_t v15 = *v4;
  uint64_t v14 = v4[1];
  if (v14 != *v4)
  {
    int v16 = (void *)(v14 - 8);
    while (1)
    {
      uint64_t v17 = v13 - 32;
      long long v18 = (void *)*v16;
      if (*v16)
      {
        if (v16 - 3 == v18)
        {
          *(void *)(v13 - 8) = v17;
          (*(void (**)(void, uint64_t))(*(void *)*v16 + 24))(*v16, v17);
          goto LABEL_21;
        }
        *(void *)(v13 - 8) = v18;
        uint64_t v19 = v16;
      }
      else
      {
        uint64_t v19 = (void *)(v13 - 8);
      }
      *uint64_t v19 = 0;
LABEL_21:
      uint64_t v20 = v16 - 3;
      v16 -= 4;
      uint64_t v13 = v17;
      if (v20 == (void *)v15)
      {
        uint64_t v21 = *v4;
        uint64_t v14 = v4[1];
        uint64_t v13 = v17;
        uint64_t v7 = (uint64_t)v26;
        goto LABEL_24;
      }
    }
  }
  uint64_t v21 = v4[1];
LABEL_24:
  *uint64_t v4 = v13;
  unint64_t v24 = (char *)v21;
  long long v25 = (char *)v21;
  v4[1] = v7;
  uint64_t v26 = (char *)v14;
  uint64_t v22 = (char *)v4[2];
  v4[2] = (uint64_t)v27;
  uint64_t v27 = v22;
  sub_2170F5760((uint64_t)&v24);
LABEL_25:
  v4[1] = v7;
  return a1;
}

void sub_2170EB470(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2170F5760((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2170EB494(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = sub_2170F5958((uint64_t **)(*(void *)a1 + 152), (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 152));
  sub_2167A2320((uint64_t)v9, v2);
  uint64_t Header = Alembic::Abc::v12::IObject::getHeader((Alembic::Abc::v12::IObject *)v9);
  unint64_t v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v5) {
    unint64_t v5 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  if ((*((void *)v5 + 56) & 0xFFFFFFFFFFFFFFF8) == 0) {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v5);
  }
  std::operator+<char>();
  sub_21679F2AC(Header + 48, (const void **)&__p, &v11);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v13);
  if (&v13 == v3)
  {
    if ((v13 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else
  {
    if ((*v3 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(*v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    *uint64_t v3 = v13;
    uint64_t v13 = 0;
  }
  if (v12 < 0) {
    operator delete(v11);
  }
  if (v8 < 0) {
    operator delete(__p);
  }
  Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)v9);
  if (!*v3 && !*((_DWORD *)v3 + 14))
  {
    unint64_t v6 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
    if (!v6) {
      unint64_t v6 = sub_2170F5C24(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
    }
    sub_2168D2318(v3, (void *)v6 + 8);
  }
  sub_216779094(v9, ".geom");
  sub_2170F57B0(a1, (uint64_t)v9);
  if (v10 < 0) {
    operator delete(v9[0]);
  }
}

void sub_2170EB638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2170EB698(uint64_t **a1)
{
  v43[4] = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95D48, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95D48))
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&unk_267B95D40, "primvars:displayColor");
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &unk_267B95D40, &dword_216758000);
    __cxa_guard_release(&qword_267B95D48);
  }
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v2) {
    uint64_t v2 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_216779094(v9, "adskDiffuseColor");
  sub_2170F5D84((uint64_t)a1, (unsigned __int8 **)v9, (uint64_t)&v11);
  if (v15 < 0)
  {
    if (v14) {
      goto LABEL_15;
    }
  }
  else if (v15)
  {
    goto LABEL_15;
  }
  if (v16)
  {
    uint64_t PropertyHeader = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader((uint64_t)v13);
    if (PropertyHeader)
    {
      if (*(_DWORD *)(PropertyHeader + 56) == 10
        && *(unsigned char *)(PropertyHeader + 60) == 4
        && *(_DWORD *)(PropertyHeader + 24) == 1
        && sub_2170F863C(PropertyHeader + 32, 0))
      {
        int v34 = 0;
        LODWORD(v35) = 0;
        int v29 = 0;
        LODWORD(v30) = 0;
        sub_2170F871C((uint64_t)&v19, v13, (uint64_t)&__p, &v34, &v29);
        goto LABEL_16;
      }
    }
  }
LABEL_15:
  int v19 = 2;
  sub_216779094(__src, "");
  uint64_t v22 = 0;
  uint64_t v23 = 0;
LABEL_16:
  if (SHIBYTE(v21) < 0)
  {
    if (__src[1] || !v22) {
      goto LABEL_36;
    }
    int v29 = v19;
    sub_216778F24(&v30, __src[0], 0);
    uint64_t v4 = v22;
  }
  else
  {
    if (HIBYTE(v21)) {
      goto LABEL_36;
    }
    uint64_t v4 = v22;
    if (!v22) {
      goto LABEL_36;
    }
    int v29 = v19;
    long long v30 = *(_OWORD *)__src;
    uint64_t v31 = v21;
  }
  uint64_t v32 = v4;
  uint64_t v33 = v23;
  if (v23) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v42 = 0;
  unint64_t v5 = operator new(0x38uLL);
  *unint64_t v5 = &unk_26C772FD0;
  sub_216D467D8((uint64_t)(v5 + 1), (uint64_t)&v29);
  uint64_t v42 = v5;
  int v24 = v19;
  if (SHIBYTE(v21) < 0)
  {
    sub_216778F24(&v25, __src[0], (unint64_t)__src[1]);
  }
  else
  {
    long long v25 = *(_OWORD *)__src;
    uint64_t v26 = v21;
  }
  uint64_t v27 = v22;
  uint64_t v28 = v23;
  if (v23) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v40 = 0;
  unint64_t v6 = operator new(0x38uLL);
  void *v6 = &unk_26C773078;
  sub_216D467D8((uint64_t)(v6 + 1), (uint64_t)&v24);
  uint64_t v40 = v6;
  uint64_t v7 = sub_2170F5EA4(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&unk_267B95D40, (void *)v2 + 92, (uint64_t)v41, (uint64_t)v39);
  int v34 = v19;
  if (SHIBYTE(v21) < 0)
  {
    sub_216778F24(&v35, __src[0], (unint64_t)__src[1]);
  }
  else
  {
    long long v35 = *(_OWORD *)__src;
    uint64_t v36 = v21;
  }
  uint64_t v37 = v22;
  uint64_t v38 = v23;
  if (v23) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
  }
  char v8 = operator new(0x38uLL);
  *char v8 = &unk_26C7730F8;
  sub_216D467D8((uint64_t)(v8 + 1), (uint64_t)&v34);
  v43[3] = v8;
  sub_2170F8214(v43, (void *)v7 + 8);
  sub_2170F5BA0(v43);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v34);
  sub_2170F5FA4(v39);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v24);
  sub_2170F6028(v41);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v29);
LABEL_36:
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v19);
  if (v18 < 0) {
    operator delete(__p);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v13);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  sub_21697C414(&v11);
  if (v10 < 0) {
    operator delete(v9[0]);
  }
}

void sub_2170EBAEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

void sub_2170EBBD4(uint64_t **a1)
{
  v49[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v2) {
    uint64_t v2 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v3) {
    uint64_t v3 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_216779094(v15, ".selfBnds");
  sub_2170F5D84((uint64_t)a1, (unsigned __int8 **)v15, (uint64_t)&v17);
  if (v21 < 0)
  {
    if (v20) {
      goto LABEL_16;
    }
  }
  else if (v21)
  {
    goto LABEL_16;
  }
  if (v22)
  {
    uint64_t PropertyHeader = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader((uint64_t)v18);
    if (PropertyHeader)
    {
      if (*(_DWORD *)(PropertyHeader + 56) == 11
        && *(unsigned char *)(PropertyHeader + 60) == 6
        && *(_DWORD *)(PropertyHeader + 24) == 1
        && sub_2167B1640(PropertyHeader + 32, 0))
      {
        int v40 = 0;
        LODWORD(v41) = 0;
        int v35 = 0;
        LODWORD(v36) = 0;
        sub_2167B10BC((uint64_t)&v25, v18, (uint64_t)&__p, &v40, &v35);
        goto LABEL_17;
      }
    }
  }
LABEL_16:
  int v25 = 2;
  sub_216779094(&__src, "");
  uint64_t v28 = 0;
  uint64_t v29 = 0;
LABEL_17:
  if (SHIBYTE(v27) < 0)
  {
    if (*((void *)&__src + 1) || !v28) {
      goto LABEL_37;
    }
    int v35 = v25;
    sub_216778F24(&v36, (void *)__src, 0);
    uint64_t v5 = v28;
  }
  else
  {
    if (HIBYTE(v27)) {
      goto LABEL_37;
    }
    uint64_t v5 = v28;
    if (!v28) {
      goto LABEL_37;
    }
    int v35 = v25;
    long long v36 = __src;
    uint64_t v37 = v27;
  }
  uint64_t v38 = v5;
  uint64_t v39 = v29;
  if (v29) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v48 = 0;
  unint64_t v6 = operator new(0x38uLL);
  void *v6 = &unk_26C773190;
  sub_216D467D8((uint64_t)(v6 + 1), (uint64_t)&v35);
  uint64_t v48 = v6;
  int v30 = v25;
  if (SHIBYTE(v27) < 0)
  {
    sub_216778F24(&v31, (void *)__src, *((unint64_t *)&__src + 1));
  }
  else
  {
    long long v31 = __src;
    uint64_t v32 = v27;
  }
  uint64_t v33 = v28;
  uint64_t v34 = v29;
  if (v29) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v46 = 0;
  uint64_t v7 = operator new(0x38uLL);
  *uint64_t v7 = &unk_26C773228;
  sub_216D467D8((uint64_t)(v7 + 1), (uint64_t)&v30);
  uint64_t v46 = v7;
  char v8 = sub_2170F5EA4(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v2 + 296), (void *)v3 + 77, (uint64_t)v47, (uint64_t)v45);
  int v40 = v25;
  if (SHIBYTE(v27) < 0)
  {
    sub_216778F24(&v41, (void *)__src, *((unint64_t *)&__src + 1));
  }
  else
  {
    long long v41 = __src;
    uint64_t v42 = v27;
  }
  uint64_t v43 = v28;
  uint64_t v44 = v29;
  if (v29) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = operator new(0x38uLL);
  *uint64_t v9 = &unk_26C773298;
  sub_216D467D8((uint64_t)(v9 + 1), (uint64_t)&v40);
  _DWORD v49[3] = v9;
  sub_2170F8214(v49, (void *)v8 + 8);
  sub_2170F5BA0(v49);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v40);
  sub_2170F5FA4(v45);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v30);
  sub_2170F6028(v47);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v35);
LABEL_37:
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v25);
  if (v24 < 0) {
    operator delete(__p);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v18);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v17 + 1);
  sub_21697C414(&v17);
  if (v16 < 0) {
    operator delete(v15[0]);
  }
  sub_216779094(&v17, ".geom");
  sub_2170F8CA0((uint64_t)a1, (uint64_t)&v17, (uint64_t)&v10);
  if (v14 < 0) {
    operator delete(v13);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v12);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
  sub_21697C414(&v10);
  if (v19 < 0) {
    operator delete(v17);
  }
}

void sub_2170EC048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  sub_2170F6028((void *)(v50 - 136));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&a50);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&a38);
  sub_2170F5E4C((uint64_t)&a25);
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_2170EC134(uint64_t **a1)
{
  v44[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v2) {
    uint64_t v2 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v3) {
    uint64_t v3 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_216779094(v10, "visible");
  sub_2170F8CA0((uint64_t)a1, (uint64_t)v10, (uint64_t)&v12);
  if (v16 < 0)
  {
    if (v15) {
      goto LABEL_16;
    }
  }
  else if (v16)
  {
    goto LABEL_16;
  }
  if (v17)
  {
    uint64_t PropertyHeader = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader((uint64_t)v14);
    if (PropertyHeader)
    {
      if (*(_DWORD *)(PropertyHeader + 56) == 2
        && *(unsigned char *)(PropertyHeader + 60) == 1
        && *(_DWORD *)(PropertyHeader + 24) == 1
        && sub_2167F9BA4(PropertyHeader + 32, 0))
      {
        int v35 = 0;
        LODWORD(v36) = 0;
        int v30 = 0;
        LODWORD(v31) = 0;
        sub_2167F9620((uint64_t)&v20, v14, (uint64_t)&__p, &v35, &v30);
        goto LABEL_17;
      }
    }
  }
LABEL_16:
  int v20 = 2;
  sub_216779094(__src, "");
  uint64_t v23 = 0;
  uint64_t v24 = 0;
LABEL_17:
  if (SHIBYTE(v22) < 0)
  {
    if (__src[1] || !v23) {
      goto LABEL_37;
    }
    int v30 = v20;
    sub_216778F24(&v31, __src[0], 0);
    uint64_t v5 = v23;
  }
  else
  {
    if (HIBYTE(v22)) {
      goto LABEL_37;
    }
    uint64_t v5 = v23;
    if (!v23) {
      goto LABEL_37;
    }
    int v30 = v20;
    long long v31 = *(_OWORD *)__src;
    uint64_t v32 = v22;
  }
  uint64_t v33 = v5;
  uint64_t v34 = v24;
  if (v24) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v43 = 0;
  unint64_t v6 = operator new(0x38uLL);
  void *v6 = &unk_26C773308;
  sub_216D467D8((uint64_t)(v6 + 1), (uint64_t)&v30);
  uint64_t v43 = v6;
  int v25 = v20;
  if (SHIBYTE(v22) < 0)
  {
    sub_216778F24(&v26, __src[0], (unint64_t)__src[1]);
  }
  else
  {
    long long v26 = *(_OWORD *)__src;
    uint64_t v27 = v22;
  }
  uint64_t v28 = v23;
  uint64_t v29 = v24;
  if (v24) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
  }
  long long v41 = 0;
  uint64_t v7 = operator new(0x38uLL);
  *uint64_t v7 = &unk_26C7733A0;
  sub_216D467D8((uint64_t)(v7 + 1), (uint64_t)&v25);
  long long v41 = v7;
  char v8 = sub_2170F5EA4(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v2 + 1256), (void *)v3 + 11, (uint64_t)v42, (uint64_t)v40);
  int v35 = v20;
  if (SHIBYTE(v22) < 0)
  {
    sub_216778F24(&v36, __src[0], (unint64_t)__src[1]);
  }
  else
  {
    long long v36 = *(_OWORD *)__src;
    uint64_t v37 = v22;
  }
  uint64_t v38 = v23;
  uint64_t v39 = v24;
  if (v24) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = operator new(0x38uLL);
  *uint64_t v9 = &unk_26C773410;
  sub_216D467D8((uint64_t)(v9 + 1), (uint64_t)&v35);
  v44[3] = v9;
  sub_2170F8214(v44, (void *)v8 + 8);
  sub_2170F5BA0(v44);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v35);
  sub_2170F5FA4(v40);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v25);
  sub_2170F6028(v42);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v30);
LABEL_37:
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v20);
  if (v19 < 0) {
    operator delete(__p);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v14);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  sub_21697C414(&v12);
  if (v11 < 0) {
    operator delete(v10[0]);
  }
}

void sub_2170EC548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  sub_2170F6028((void *)(v37 - 136));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&a37);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&a25);
  sub_2170F5E4C((uint64_t)&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_2170EC61C(uint64_t **a1)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
  if (!v2) {
    uint64_t v2 = sub_2170FC394(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
  }
  if ((*(void *)v2 & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*(void *)v2 & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v2);
  }
  sub_216779094(v4, ".arbGeomParams");
  sub_2170F5D84((uint64_t)a1, (unsigned __int8 **)v4, (uint64_t)&v6);
  sub_2170FAD20(a1, (unsigned __int8 *)EmptyString, (uint64_t)&v6);
  if (v10 < 0) {
    operator delete(__p);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_2170EC6F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_2170EC71C(uint64_t **a1)
{
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
  if (!v2) {
    uint64_t v2 = sub_2170FC394(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
  }
  if ((*((void *)v2 + 1) & 0xFFFFFFFFFFFFFFF8) != 0) {
    EmptyString = (uint64_t *)((*((void *)v2 + 1) & 0xFFFFFFFFFFFFFFF8) + 16);
  }
  else {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v2);
  }
  sub_216779094(v4, ".userProperties");
  sub_2170F5D84((uint64_t)a1, (unsigned __int8 **)v4, (uint64_t)&v6);
  sub_2170FAD20(a1, (unsigned __int8 *)EmptyString, (uint64_t)&v6);
  if (v10 < 0) {
    operator delete(__p);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_21697C414(&v6);
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_2170EC7F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_2170EC81C(uint64_t a1)
{
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  sub_216812BD8((char *)&v25, *(long long **)(a1 + 160), *(long long **)(a1 + 168), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 168) - *(void *)(a1 + 160)) >> 3));
  uint64_t v2 = v25;
  uint64_t v3 = v26;
  if (v25 != v26)
  {
    uint64_t v4 = a1 + 216;
    do
    {
      if (pxrInternal__aapl__pxrReserved__::SdfPath::IsValidNamespacedIdentifier((size_t *)v2))
      {
        char v5 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::TfToken(__p);
        if ((__p[0].__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) != 0) {
          EmptyString = (uint64_t *)((__p[0].__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) + 16);
        }
        else {
          EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v5);
        }
        if (*((char *)EmptyString + 23) < 0)
        {
          sub_216778F24(&v24, (void *)*EmptyString, EmptyString[1]);
        }
        else
        {
          long long v12 = *(_OWORD *)EmptyString;
          v24.__r_.__value_.__r.__words[2] = EmptyString[2];
          *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v12;
        }
        if ((__p[0].__r_.__value_.__s.__data_[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(__p[0].__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        goto LABEL_53;
      }
      if (*(char *)(v2 + 23) < 0)
      {
        sub_216778F24(&__dst, *(void **)v2, *(void *)(v2 + 8));
      }
      else
      {
        long long v7 = *(_OWORD *)v2;
        __dst.__r_.__value_.__r.__words[2] = *(void *)(v2 + 16);
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v7;
      }
      std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = __dst.__r_.__value_.__l.__size_;
      }
      if (size)
      {
        pxrInternal__aapl__pxrReserved__::TfStringTrimLeft(" .", &__dst, __p);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        std::string __dst = __p[0];
        if ((pxrInternal__aapl__pxrReserved__::SdfPath::IsValidNamespacedIdentifier((size_t *)&__dst) & 1) == 0)
        {
          sub_216779094(__p, ":");
          pxrInternal__aapl__pxrReserved__::TfStringSplit(&__dst, (char *)__p, (uint64_t *)&v30);
          if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p[0].__r_.__value_.__l.__data_);
          }
          std::string::size_type v9 = v30.__r_.__value_.__l.__size_;
          for (std::string::size_type i = v30.__r_.__value_.__r.__words[0]; i != v9; i += 24)
          {
            pxrInternal__aapl__pxrReserved__::TfMakeValidIdentifier((unsigned __int8 *)i, __p);
            if (*(char *)(i + 23) < 0) {
              operator delete(*(void **)i);
            }
            long long v11 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
            *(void *)(i + 16) = *((void *)&__p[0].__r_.__value_.__l + 2);
            *(_OWORD *)std::string::size_type i = v11;
          }
          pxrInternal__aapl__pxrReserved__::TfStringJoin(":", (std::string **)&v30, &v28);
          __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v30;
          sub_216782F20((void ***)__p);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__dst.__r_.__value_.__l.__data_);
          }
          std::string __dst = v28;
        }
      }
      else
      {
        std::string::operator=(&__dst, 95);
      }
      if (v4 != sub_21678C2D8(a1 + 208, (const void **)&__dst.__r_.__value_.__l.__data_))
      {
        uint64_t v15 = (__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__dst
            : (std::string *)__dst.__r_.__value_.__r.__words[0];
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s_%d", v13, v14, v15, 1);
        uint64_t v16 = 2;
        while (v4 != sub_21678C2D8(a1 + 208, (const void **)&__p[0].__r_.__value_.__l.__data_))
        {
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_dst = &__dst;
          }
          else {
            p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
          }
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s_%d", v17, v18, p_dst, v16);
          if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p[0].__r_.__value_.__l.__data_);
          }
          __p[0] = v30;
          uint64_t v16 = (v16 + 1);
        }
        std::string::operator=(&__dst, __p);
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p[0].__r_.__value_.__l.__data_);
        }
      }
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        if (__dst.__r_.__value_.__l.__size_ == 4)
        {
          int v20 = (std::string *)__dst.__r_.__value_.__r.__words[0];
LABEL_51:
          if (LODWORD(v20->__r_.__value_.__l.__data_) == 1936482678)
          {
            sub_216779094(&v24, "");
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__dst.__r_.__value_.__l.__data_);
            }
            goto LABEL_53;
          }
        }
      }
      else if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) == 4)
      {
        int v20 = &__dst;
        goto LABEL_51;
      }
      std::string v24 = __dst;
LABEL_53:
      sub_2170F8CA0(a1, v2, (uint64_t)__p);
      sub_2170FAD20((uint64_t **)a1, (unsigned __int8 *)&v24, (uint64_t)__p);
      if (v23 < 0) {
        operator delete(v22);
      }
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&__p[0].__r_.__value_.__r.__words[1]);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p[0].__r_.__value_.__r.__words + 1);
      sub_21697C414(__p);
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v24.__r_.__value_.__l.__data_);
      }
      v2 += 24;
    }
    while (v2 != v3);
  }
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v25;
  sub_216782F20((void ***)__p);
}

void sub_2170ECC0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,char *a36)
{
  *(void *)(v36 - 96) = v36 - 120;
  sub_216782F20((void ***)(v36 - 96));
  if (*(char *)(v36 - 121) < 0) {
    operator delete(*(void **)(v36 - 144));
  }
  a36 = &a33;
  sub_216782F20((void ***)&a36);
  _Unwind_Resume(a1);
}

void *sub_2170ECCD8(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_2170ECD5C(uint64_t **a1)
{
  v78[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = (uint64_t)(a1 + 1);
  sub_2167A2320((uint64_t)&__p, (uint64_t)(a1 + 1));
  uint64_t Header = Alembic::Abc::v12::IObject::getHeader((Alembic::Abc::v12::IObject *)&__p);
  char v4 = sub_2170FCAF4(Header + 48, 0);
  Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&__p);
  if ((v4 & 1) == 0) {
    return;
  }
  sub_2167A2320((uint64_t)&__p, v2);
  LODWORD(v72) = 0;
  LODWORD(v73) = 0;
  v66[0] = 0;
  v66[2] = 0;
  sub_2170FCF30((Alembic::Abc::v12::IObject *)&v48, (uint64_t)&__p, 0, &v72, v66);
  Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&__p);
  sub_216779094(&__p, ".xform");
  sub_2170F57B0((uint64_t)a1, (uint64_t)&__p);
  if (SBYTE7(v68) < 0) {
    operator delete((void *)__p);
  }
  uint64_t NumSamples = Alembic::AbcGeom::v12::IXformSchema::getNumSamples((Alembic::AbcGeom::v12::IXformSchema *)&v58);
  if (v64[48]) {
    uint64_t v6 = NumSamples != 0;
  }
  else {
    uint64_t v6 = NumSamples;
  }
  if (v6 >= 1)
  {
    uint64_t v7 = 0;
    while (1)
    {
      long long __p = (unint64_t)v7;
      LODWORD(v68) = 2;
      if (!Alembic::AbcGeom::v12::IXformSchema::getInheritsXforms((uint64_t)&v58, (uint64_t)&__p)) {
        break;
      }
      if (v6 == ++v7) {
        goto LABEL_11;
      }
    }
    *(void *)&long long __p = "usdAbc/alembicReader.cpp";
    *((void *)&__p + 1) = "_ReadXform";
    *(void *)&long long v68 = 3144;
    *((void *)&v68 + 1) = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ReadXform(_PrimReaderContext *)";
    LOBYTE(v69) = 0;
    Alembic::AbcGeom::v12::IXformSchema::getTimeSampling((Alembic::AbcGeom::v12::IXformSchema *)&v58, &v72);
    double SampleTime = Alembic::AbcCoreAbstract::v12::TimeSampling::getSampleTime((double **)v72, v7);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 19));
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__ *)"Ignoring transform that doesn't inherit at samples at time %f at <%s>", v14, *(void *)&SampleTime, Text);
    if (v73) {
      sub_216784EC4(v73);
    }
    goto LABEL_52;
  }
LABEL_11:
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
  if (!v8) {
    uint64_t v8 = sub_2170F5C24(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
  }
  std::string::size_type v9 = sub_2170F5958((uint64_t **)*a1 + 19, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 19));
  sub_2168D2318(v9, (void *)v8 + 9);
  if (v6 >= 1)
  {
    unint64_t v10 = sub_2170FC420();
    long long v11 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v11) {
      long long v11 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    int v34 = v49;
    if (SHIBYTE(v51) < 0)
    {
      sub_216778F24(&v35, (void *)__src, *((unint64_t *)&__src + 1));
    }
    else
    {
      long long v35 = __src;
      uint64_t v36 = v51;
    }
    uint64_t v33 = &unk_26C749578;
    uint64_t v37 = v52;
    uint64_t v38 = v53;
    if (v53) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v53 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v39 = v54;
    uint64_t v40 = v55;
    if (v55) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v55 + 8), 1uLL, memory_order_relaxed);
    }
    if (SHIBYTE(v57) < 0)
    {
      sub_216778F24(&v41, (void *)v56, *((unint64_t *)&v56 + 1));
    }
    else
    {
      long long v41 = v56;
      uint64_t v42 = v57;
    }
    uint64_t v33 = &unk_26C7735A0;
    sub_2170FE2B8((uint64_t)v43, (uint64_t)&v58);
    char v46 = 0;
    char v47 = 0;
    if (SHIBYTE(v36) < 0)
    {
      if (*((void *)&v35 + 1)) {
        goto LABEL_39;
      }
    }
    else if (HIBYTE(v36))
    {
      goto LABEL_39;
    }
    if (v37)
    {
      if (v44 < 0)
      {
        if (!v43[3]) {
          goto LABEL_37;
        }
      }
      else if (!v44)
      {
LABEL_37:
        if (v45)
        {
          sub_2170FE1C4((uint64_t)&v72, (uint64_t)&v33);
          uint64_t v77 = 0;
          uint64_t v15 = operator new(0x1D0uLL);
          *uint64_t v15 = &unk_26C773658;
          sub_2170FE9AC((uint64_t)(v15 + 1), (uint64_t)&v72);
          uint64_t v77 = v15;
          sub_2170FE1C4((uint64_t)v66, (uint64_t)&v33);
          uint64_t v71 = 0;
          uint64_t v16 = operator new(0x1D0uLL);
          *uint64_t v16 = &unk_26C7736D8;
          sub_2170FE9AC((uint64_t)(v16 + 1), (uint64_t)v66);
          uint64_t v71 = v16;
          uint64_t v17 = sub_2170F5EA4(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v10 + 8), (void *)v11 + 45, (uint64_t)v76, (uint64_t)v70);
          sub_2170FE1C4((uint64_t)&__p, (uint64_t)&v33);
          char v18 = operator new(0x1D0uLL);
          *char v18 = &unk_26C773748;
          sub_2170FE9AC((uint64_t)(v18 + 1), (uint64_t)&__p);
          v78[3] = v18;
          sub_2170F8214(v78, (void *)v17 + 8);
          sub_2170F5BA0(v78);
          sub_2170FC688((uint64_t)&__p);
          sub_2170F5FA4(v70);
          sub_2170FC688((uint64_t)v66);
          sub_2170F6028(v76);
          sub_2170FC688((uint64_t)&v72);
        }
      }
    }
LABEL_39:
    sub_2170FC688((uint64_t)&v33);
    sub_2169B28F8((uint64_t)&__p, 1uLL);
    unint64_t v19 = sub_2170FC420();
    sub_2169B3278((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&__p, v20, v21);
    sub_2168D2318(v69, (void *)(v19 + 8));
    uint64_t v22 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v22) {
      uint64_t v22 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    char v23 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v23) {
      char v23 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    unint64_t v73 = (std::__shared_weak_count *)off_26C755978;
    std::string v24 = operator new(0x30uLL);
    long long v25 = v68;
    *(_OWORD *)std::string v24 = __p;
    *((_OWORD *)v24 + 1) = v25;
    uint64_t v26 = v69;
    *((void *)v24 + 4) = v69;
    if (v26)
    {
      uint64_t v27 = v26 - 2;
      if (*((void *)v24 + 3)) {
        uint64_t v27 = (atomic_ullong *)*((void *)v24 + 3);
      }
      atomic_fetch_add_explicit(v27, 1uLL, memory_order_relaxed);
    }
    atomic_store(0, (unsigned int *)v24 + 10);
    unint64_t v72 = (Alembic::AbcCoreAbstract::v12::TimeSampling *)v24;
    atomic_fetch_add_explicit((atomic_uint *volatile)v24 + 10, 1u, memory_order_relaxed);
    v75[1] = 0;
    v75[0] = 0;
    uint64_t v74 = v75;
    sub_2170FC74C(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v22 + 1336), (void *)v23 + 68, (uint64_t)&v72);
    sub_2167877AC((uint64_t)&v74, v75[0]);
    sub_2168EE084((uint64_t)&v72);
    sub_2169B2E0C(&__p);
  }
  sub_216779094(&__p, ".xform");
  sub_2170F8CA0((uint64_t)a1, (uint64_t)&__p, (uint64_t)&v28);
  if (v32 < 0) {
    operator delete(v31);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v30);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v29);
  sub_21697C414(&v28);
  if (SBYTE7(v68) < 0) {
    operator delete((void *)__p);
  }
LABEL_52:
  uint64_t v48 = &unk_26C7735A0;
  uint64_t v58 = &unk_26C7735D8;
  *(void *)&long long __p = &v65;
  sub_216802314((void ***)&__p);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v64);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v63);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v62);
  if (v61) {
    sub_216784EC4(v61);
  }
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v60);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v59);
  Alembic::Abc::v12::IObject::~IObject(&v48);
}

void sub_2170ED400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  operator delete(v13);
  sub_2170FC688((uint64_t)&STACK[0x598]);
  sub_2170F5FA4(&STACK[0x760]);
  sub_2170FC688((uint64_t)&STACK[0x3D0]);
  sub_2170F6028((void *)(v14 - 152));
  sub_2170FC688((uint64_t)&STACK[0x780]);
  sub_2170FC688((uint64_t)va);
  sub_2170FCA44((uint64_t)&STACK[0x228]);
  _Unwind_Resume(a1);
}

_DWORD *sub_2170ED580(uint64_t **a1)
{
  v46[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v2) {
    uint64_t v2 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  if ((*((void *)v2 + 91) & 0xFFFFFFFFFFFFFFF8) == 0) {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v2);
  }
  std::operator+<char>();
  sub_2170F8CA0((uint64_t)a1, (uint64_t)&v41, (uint64_t)&v22);
  if (SHIBYTE(v42) < 0) {
    operator delete(v41);
  }
  sub_2170FFCF0((uint64_t)&v22, (uint64_t)&v41);
  if (SHIBYTE(v43) < 0)
  {
    if (*((void *)&v42 + 1)) {
      goto LABEL_9;
    }
LABEL_21:
    uint64_t v8 = v44;
    Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v41);
    if (!v8) {
      goto LABEL_10;
    }
    std::string::size_type v9 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v9) {
      std::string::size_type v9 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    unint64_t v10 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v10) {
      unint64_t v10 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    sub_2170FFCF0((uint64_t)&v22, (uint64_t)&v17);
    if (SHIBYTE(v19) < 0)
    {
      if (!__src[1] && v20)
      {
        int v32 = v17;
        sub_216778F24(&v33, __src[0], 0);
        uint64_t v11 = v20;
        goto LABEL_33;
      }
    }
    else if (!HIBYTE(v19))
    {
      uint64_t v11 = v20;
      if (v20)
      {
        int v32 = v17;
        long long v33 = *(_OWORD *)__src;
        int v34 = v19;
LABEL_33:
        uint64_t v35 = v11;
        uint64_t v36 = v21;
        if (v21) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v40 = 0;
        long long v12 = operator new(0x38uLL);
        *long long v12 = &unk_26C773948;
        sub_216D467D8((uint64_t)(v12 + 1), (uint64_t)&v32);
        uint64_t v40 = v12;
        int v27 = v17;
        if (SHIBYTE(v19) < 0)
        {
          sub_216778F24(&v28, __src[0], (unint64_t)__src[1]);
        }
        else
        {
          long long v28 = *(_OWORD *)__src;
          int v29 = v19;
        }
        uint64_t v30 = v20;
        uint64_t v31 = v21;
        if (v21) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v38 = 0;
        int v13 = operator new(0x38uLL);
        *int v13 = &unk_26C7739E0;
        sub_216D467D8((uint64_t)(v13 + 1), (uint64_t)&v27);
        uint64_t v38 = v13;
        uint64_t v14 = sub_2170F5EA4(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v9 + 728), (void *)v10 + 11, (uint64_t)v39, (uint64_t)v37);
        LODWORD(v41) = v17;
        if (SHIBYTE(v19) < 0)
        {
          sub_216778F24(&v42, __src[0], (unint64_t)__src[1]);
        }
        else
        {
          long long v42 = *(_OWORD *)__src;
          uint64_t v43 = v19;
        }
        uint64_t v44 = v20;
        uint64_t v45 = v21;
        if (v21) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v15 = operator new(0x38uLL);
        *uint64_t v15 = &unk_26C773A50;
        sub_216D467D8((uint64_t)(v15 + 1), (uint64_t)&v41);
        v46[3] = v15;
        sub_2170F8214(v46, (void *)v14 + 8);
        sub_2170F5BA0(v46);
        Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v41);
        sub_2170F5FA4(v37);
        Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v27);
        sub_2170F6028(v39);
        Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v32);
      }
    }
    Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v17);
    goto LABEL_47;
  }
  if (!HIBYTE(v43)) {
    goto LABEL_21;
  }
LABEL_9:
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v41);
LABEL_10:
  uint64_t v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v3) {
    uint64_t v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  char v4 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v4) {
    char v4 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  char v5 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v5) {
    char v5 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  unint64_t v6 = *((void *)v5 + 66);
  long long v41 = (void *)v6;
  *(void *)&long long v42 = (char *)&off_26C750C70 + 1;
  if ((v6 & 7) != 0)
  {
    uint64_t v7 = (void *)(v6 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit((atomic_uint *volatile)v7, 2u, memory_order_relaxed) & 1) == 0) {
      long long v41 = v7;
    }
  }
  uint64_t v43 = 0;
  uint64_t v44 = 0;
  *((void *)&v42 + 1) = &v43;
  sub_2170FC74C(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v3 + 728), (void *)v4 + 11, (uint64_t)&v41);
  sub_2167877AC((uint64_t)&v42 + 8, v43);
  sub_2168EE084((uint64_t)&v41);
LABEL_47:
  if (v26 < 0) {
    operator delete(__p);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v24);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v23);
  return sub_21697C414(&v22);
}

void sub_2170ED9E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_2170F5E4C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2170EDAD8(uint64_t **a1)
{
  uint64_t v82 = *MEMORY[0x263EF8340];
  sub_2167A2320((uint64_t)&__p, (uint64_t)(a1 + 1));
  uint64_t Header = Alembic::Abc::v12::IObject::getHeader((Alembic::Abc::v12::IObject *)&__p);
  char v3 = sub_217103250(Header + 48, 0);
  Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&__p);
  if ((v3 & 1) == 0) {
    return;
  }
  char v4 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
  if (!v4) {
    char v4 = sub_2170F5C24(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
  }
  char v5 = sub_2170F5958((uint64_t **)*a1 + 19, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 19));
  sub_2168D2318(v5, (void *)v4 + 3);
  sub_216779094(&__p, ".geom");
  sub_2170F57B0((uint64_t)a1, (uint64_t)&__p);
  if ((v57[15] & 0x80000000) != 0) {
    operator delete(__p);
  }
  unint64_t v6 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v6) {
    unint64_t v6 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v7) {
    uint64_t v7 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_216779094(&v65, "P");
  sub_2170F5D84((uint64_t)a1, (unsigned __int8 **)&v65, (uint64_t)&__p);
  sub_217103FF0((uint64_t)&v75, (uint64_t)&__p, 1);
  sub_2171005A4(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v6 + 816), (void *)v7 + 83, (int *)&v75);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v75);
  if (v59 < 0) {
    operator delete(v58);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v57);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_21697C414(&__p);
  if (SHIBYTE(v66) < 0) {
    operator delete(v65);
  }
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8) {
    uint64_t v8 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  std::string::size_type v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    std::string::size_type v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_216779094(&v65, ".velocities");
  sub_2170F5D84((uint64_t)a1, (unsigned __int8 **)&v65, (uint64_t)&__p);
  sub_217100BE4((uint64_t)&v75, (uint64_t)&__p);
  sub_2171008C4(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v8 + 1216), (void *)v9 + 86, (int *)&v75);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v75);
  if (v59 < 0) {
    operator delete(v58);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v57);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_21697C414(&__p);
  if (SHIBYTE(v66) < 0) {
    operator delete(v65);
  }
  unint64_t v10 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v10) {
    unint64_t v10 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  uint64_t v11 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v11) {
    uint64_t v11 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_216779094(&v65, ".faceIndices");
  sub_2170F5D84((uint64_t)a1, (unsigned __int8 **)&v65, (uint64_t)&__p);
  sub_217100FE4((uint64_t)&v75, (uint64_t)&__p);
  sub_217100CC4(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v10 + 344), (void *)v11 + 58, (int *)&v75);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v75);
  if (v59 < 0) {
    operator delete(v58);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v57);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_21697C414(&__p);
  if (SHIBYTE(v66) < 0) {
    operator delete(v65);
  }
  long long v12 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v12) {
    long long v12 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  int v13 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v13) {
    int v13 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_216779094(&v65, ".faceCounts");
  sub_2170F5D84((uint64_t)a1, (unsigned __int8 **)&v65, (uint64_t)&__p);
  sub_217100FE4((uint64_t)&v75, (uint64_t)&__p);
  sub_217100CC4(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v12 + 336), (void *)v13 + 58, (int *)&v75);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v75);
  if (v59 < 0) {
    operator delete(v58);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v57);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_21697C414(&__p);
  if (SHIBYTE(v66) < 0) {
    operator delete(v65);
  }
  uint64_t v14 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v14) {
    uint64_t v14 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  uint64_t v15 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v15) {
    uint64_t v15 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_216779094(v72, ".scheme");
  sub_2170F5D84((uint64_t)a1, v72, (uint64_t)&__p);
  sub_2170FFCF0((uint64_t)&__p, (uint64_t)&v51);
  if (SHIBYTE(v53) < 0)
  {
    if (__src[1] || !v54) {
      goto LABEL_62;
    }
    LODWORD(v65) = v51;
    sub_216778F24(&v66, __src[0], 0);
    uint64_t v16 = v54;
  }
  else
  {
    if (HIBYTE(v53)) {
      goto LABEL_62;
    }
    uint64_t v16 = v54;
    if (!v54) {
      goto LABEL_62;
    }
    LODWORD(v65) = v51;
    long long v66 = *(_OWORD *)__src;
    uint64_t v67 = v53;
  }
  uint64_t v68 = v16;
  uint64_t v69 = v55;
  if (v55) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v55 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v77 = 0;
  int v17 = operator new(0x38uLL);
  *int v17 = &unk_26C773EE0;
  sub_216D467D8((uint64_t)(v17 + 1), (uint64_t)&v65);
  uint64_t v77 = v17;
  int v60 = v51;
  if (SHIBYTE(v53) < 0)
  {
    sub_216778F24(&v61, __src[0], (unint64_t)__src[1]);
  }
  else
  {
    long long v61 = *(_OWORD *)__src;
    uint64_t v62 = v53;
  }
  uint64_t v63 = v54;
  uint64_t v64 = v55;
  if (v55) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v55 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v81 = 0;
  char v18 = operator new(0x38uLL);
  *char v18 = &unk_26C773F68;
  sub_216D467D8((uint64_t)(v18 + 1), (uint64_t)&v60);
  uint64_t v81 = v18;
  unint64_t v19 = sub_2170F5EA4(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v14 + 1032), (void *)v15 + 11, (uint64_t)&v75, (uint64_t)v80);
  sub_2170F5FA4(v80);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v60);
  sub_2170F6028(&v75);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v65);
  LODWORD(v75) = v51;
  if (SHIBYTE(v53) < 0)
  {
    sub_216778F24(&v76, __src[0], (unint64_t)__src[1]);
  }
  else
  {
    long long v76 = *(_OWORD *)__src;
    uint64_t v77 = v53;
  }
  uint64_t v78 = v54;
  uint64_t v79 = v55;
  if (v55) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v55 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v20 = operator new(0x38uLL);
  *uint64_t v20 = &unk_26C773FD8;
  sub_216D467D8((uint64_t)(v20 + 1), (uint64_t)&v75);
  uint64_t v81 = v20;
  sub_2170F8214(v80, (void *)v19 + 8);
  sub_2170F5BA0(v80);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v75);
  *((_WORD *)v19 + 28) = 256;
LABEL_62:
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v51);
  if (v59 < 0) {
    operator delete(v58);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v57);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_21697C414(&__p);
  if (v73 < 0) {
    operator delete(v72[0]);
  }
  uint64_t v21 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v21) {
    uint64_t v21 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  int v22 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v22) {
    int v22 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_216779094(v49, ".interpolateBoundary");
  sub_2170F5D84((uint64_t)a1, (unsigned __int8 **)v49, (uint64_t)&__p);
  sub_2171065D4((uint64_t)&v51, (uint64_t)&__p);
  if (SHIBYTE(v53) < 0)
  {
    if (__src[1] || !v54) {
      goto LABEL_90;
    }
    LODWORD(v65) = v51;
    sub_216778F24(&v66, __src[0], 0);
    uint64_t v23 = v54;
  }
  else
  {
    if (HIBYTE(v53)) {
      goto LABEL_90;
    }
    uint64_t v23 = v54;
    if (!v54) {
      goto LABEL_90;
    }
    LODWORD(v65) = v51;
    long long v66 = *(_OWORD *)__src;
    uint64_t v67 = v53;
  }
  uint64_t v68 = v23;
  uint64_t v69 = v55;
  if (v55) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v55 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v74 = 0;
  uint64_t v24 = operator new(0x38uLL);
  *uint64_t v24 = &unk_26C774048;
  sub_216D467D8((uint64_t)(v24 + 1), (uint64_t)&v65);
  uint64_t v74 = v24;
  int v60 = v51;
  if (SHIBYTE(v53) < 0)
  {
    sub_216778F24(&v61, __src[0], (unint64_t)__src[1]);
  }
  else
  {
    long long v61 = *(_OWORD *)__src;
    uint64_t v62 = v53;
  }
  uint64_t v63 = v54;
  uint64_t v64 = v55;
  if (v55) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v55 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v71 = 0;
  long long v25 = operator new(0x38uLL);
  *long long v25 = &unk_26C7740E0;
  sub_216D467D8((uint64_t)(v25 + 1), (uint64_t)&v60);
  uint64_t v71 = v25;
  char v26 = sub_2170F5EA4(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v21 + 480), (void *)v22 + 11, (uint64_t)v72, (uint64_t)v70);
  LODWORD(v75) = v51;
  if (SHIBYTE(v53) < 0)
  {
    sub_216778F24(&v76, __src[0], (unint64_t)__src[1]);
  }
  else
  {
    long long v76 = *(_OWORD *)__src;
    uint64_t v77 = v53;
  }
  uint64_t v78 = v54;
  uint64_t v79 = v55;
  if (v55) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v55 + 8), 1uLL, memory_order_relaxed);
  }
  int v27 = operator new(0x38uLL);
  *int v27 = &unk_26C774150;
  sub_216D467D8((uint64_t)(v27 + 1), (uint64_t)&v75);
  uint64_t v81 = v27;
  sub_2170F8214(v80, (void *)v26 + 8);
  sub_2170F5BA0(v80);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v75);
  sub_2170F5FA4(v70);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v60);
  sub_2170F6028(v72);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v65);
LABEL_90:
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v51);
  if (v59 < 0) {
    operator delete(v58);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v57);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_21697C414(&__p);
  if (v50 < 0) {
    operator delete(v49[0]);
  }
  long long v28 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v28) {
    long long v28 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  int v29 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v29) {
    int v29 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_216779094(v49, ".faceVaryingInterpolateBoundary");
  sub_2170F5D84((uint64_t)a1, (unsigned __int8 **)v49, (uint64_t)&__p);
  sub_2171065D4((uint64_t)&v51, (uint64_t)&__p);
  if (SHIBYTE(v53) < 0)
  {
    if (!__src[1] && v54)
    {
      LODWORD(v65) = v51;
      sub_216778F24(&v66, __src[0], 0);
      uint64_t v30 = v54;
      goto LABEL_105;
    }
  }
  else if (!HIBYTE(v53))
  {
    uint64_t v30 = v54;
    if (v54)
    {
      LODWORD(v65) = v51;
      long long v66 = *(_OWORD *)__src;
      uint64_t v67 = v53;
LABEL_105:
      uint64_t v68 = v30;
      uint64_t v69 = v55;
      if (v55) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v55 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v74 = 0;
      uint64_t v31 = operator new(0x38uLL);
      *uint64_t v31 = &unk_26C7741C0;
      sub_216D467D8((uint64_t)(v31 + 1), (uint64_t)&v65);
      uint64_t v74 = v31;
      int v60 = v51;
      if (SHIBYTE(v53) < 0)
      {
        sub_216778F24(&v61, __src[0], (unint64_t)__src[1]);
      }
      else
      {
        long long v61 = *(_OWORD *)__src;
        uint64_t v62 = v53;
      }
      uint64_t v63 = v54;
      uint64_t v64 = v55;
      if (v55) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v55 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v71 = 0;
      int v32 = operator new(0x38uLL);
      *int v32 = &unk_26C774248;
      sub_216D467D8((uint64_t)(v32 + 1), (uint64_t)&v60);
      uint64_t v71 = v32;
      long long v33 = sub_2170F5EA4(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v28 + 328), (void *)v29 + 11, (uint64_t)v72, (uint64_t)v70);
      LODWORD(v75) = v51;
      if (SHIBYTE(v53) < 0)
      {
        sub_216778F24(&v76, __src[0], (unint64_t)__src[1]);
      }
      else
      {
        long long v76 = *(_OWORD *)__src;
        uint64_t v77 = v53;
      }
      uint64_t v78 = v54;
      uint64_t v79 = v55;
      if (v55) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v55 + 8), 1uLL, memory_order_relaxed);
      }
      int v34 = operator new(0x38uLL);
      *int v34 = &unk_26C7742B8;
      sub_216D467D8((uint64_t)(v34 + 1), (uint64_t)&v75);
      uint64_t v81 = v34;
      sub_2170F8214(v80, (void *)v33 + 8);
      sub_2170F5BA0(v80);
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v75);
      sub_2170F5FA4(v70);
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v60);
      sub_2170F6028(v72);
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v65);
    }
  }
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v51);
  if (v59 < 0) {
    operator delete(v58);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v57);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_21697C414(&__p);
  if (v50 < 0) {
    operator delete(v49[0]);
  }
  uint64_t v35 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v35) {
    uint64_t v35 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  uint64_t v36 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v36) {
    uint64_t v36 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_216779094(&v65, ".holes");
  sub_2170F5D84((uint64_t)a1, (unsigned __int8 **)&v65, (uint64_t)&__p);
  sub_217100FE4((uint64_t)&v75, (uint64_t)&__p);
  sub_217100CC4(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v35 + 424), (void *)v36 + 58, (int *)&v75);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v75);
  if (v59 < 0) {
    operator delete(v58);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v57);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_21697C414(&__p);
  if (SHIBYTE(v66) < 0) {
    operator delete(v65);
  }
  uint64_t v37 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v37) {
    uint64_t v37 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  uint64_t v38 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v38) {
    uint64_t v38 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_216779094(&v65, ".cornerIndices");
  sub_2170F5D84((uint64_t)a1, (unsigned __int8 **)&v65, (uint64_t)&__p);
  sub_217100FE4((uint64_t)&v75, (uint64_t)&__p);
  sub_217100CC4(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v37 + 144), (void *)v38 + 58, (int *)&v75);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v75);
  if (v59 < 0) {
    operator delete(v58);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v57);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_21697C414(&__p);
  if (SHIBYTE(v66) < 0) {
    operator delete(v65);
  }
  uint64_t v39 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v39) {
    uint64_t v39 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  uint64_t v40 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v40) {
    uint64_t v40 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_216779094(&v65, ".cornerSharpnesses");
  sub_2170F5D84((uint64_t)a1, (unsigned __int8 **)&v65, (uint64_t)&__p);
  sub_217107850((uint64_t)&__p, (uint64_t)&v75);
  sub_2171010BC(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v39 + 152), (void *)v40 + 64, (int *)&v75);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v75);
  if (v59 < 0) {
    operator delete(v58);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v57);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_21697C414(&__p);
  if (SHIBYTE(v66) < 0) {
    operator delete(v65);
  }
  long long v41 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v41) {
    long long v41 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  long long v42 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v42) {
    long long v42 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_216779094(&v65, ".creaseIndices");
  sub_2170F5D84((uint64_t)a1, (unsigned __int8 **)&v65, (uint64_t)&__p);
  sub_217100FE4((uint64_t)&v75, (uint64_t)&__p);
  sub_217100CC4(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v41 + 184), (void *)v42 + 58, (int *)&v75);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v75);
  if (v59 < 0) {
    operator delete(v58);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v57);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_21697C414(&__p);
  if (SHIBYTE(v66) < 0) {
    operator delete(v65);
  }
  uint64_t v43 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v43) {
    uint64_t v43 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  uint64_t v44 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v44) {
    uint64_t v44 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_216779094(&v65, ".creaseLengths");
  sub_2170F5D84((uint64_t)a1, (unsigned __int8 **)&v65, (uint64_t)&__p);
  sub_217100FE4((uint64_t)&v75, (uint64_t)&__p);
  sub_217100CC4(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v43 + 192), (void *)v44 + 58, (int *)&v75);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v75);
  if (v59 < 0) {
    operator delete(v58);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v57);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_21697C414(&__p);
  if (SHIBYTE(v66) < 0) {
    operator delete(v65);
  }
  uint64_t v45 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v45) {
    uint64_t v45 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  char v46 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v46) {
    char v46 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_216779094(&v65, ".creaseSharpnesses");
  sub_2170F5D84((uint64_t)a1, (unsigned __int8 **)&v65, (uint64_t)&__p);
  sub_217107850((uint64_t)&__p, (uint64_t)&v75);
  sub_2171010BC(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v45 + 200), (void *)v46 + 64, (int *)&v75);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v75);
  if (v59 < 0) {
    operator delete(v58);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v57);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_21697C414(&__p);
  if (SHIBYTE(v66) < 0) {
    operator delete(v65);
  }
  sub_217103020();
  uint64_t v48 = qword_267B95DD0;
  if ((qword_267B95DD0 & 7) != 0)
  {
    unint64_t v47 = qword_267B95DD0 & 0xFFFFFFFFFFFFFFF8;
    if ((atomic_fetch_add_explicit((atomic_uint *volatile)(qword_267B95DD0 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)uint64_t v48 = v47; {
  }
    }
  sub_21710315C();
  sub_2171013DC(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v48, qword_267B95DE0);
  if ((v48 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v48 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

void sub_2170EEC04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  sub_2170F6028((void *)(v49 - 200));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&a44);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&a17);
  sub_2170F5E4C((uint64_t)&a23);
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_2170EEEC8(uint64_t **a1)
{
  v37[7] = *MEMORY[0x263EF8340];
  sub_2167A2320((uint64_t)&__p, (uint64_t)(a1 + 1));
  uint64_t Header = Alembic::Abc::v12::IObject::getHeader((Alembic::Abc::v12::IObject *)&__p);
  char v3 = sub_21710ADF8(Header + 48, 0);
  Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&__p);
  if (v3)
  {
    char v4 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
    if (!v4) {
      char v4 = sub_2170F5C24(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
    }
    char v5 = sub_2170F5958((uint64_t **)*a1 + 19, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 19));
    sub_2168D2318(v5, (void *)v4 + 3);
    sub_216779094(&__p, ".geom");
    sub_2170F57B0((uint64_t)a1, (uint64_t)&__p);
    if (SHIBYTE(v32) < 0) {
      operator delete(__p);
    }
    unint64_t v6 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v6) {
      unint64_t v6 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v7) {
      uint64_t v7 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    sub_216779094(v28, "P");
    sub_2170F5D84((uint64_t)a1, (unsigned __int8 **)v28, (uint64_t)&__p);
    sub_217103FF0((uint64_t)&v23, (uint64_t)&__p, 1);
    sub_2171005A4(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v6 + 816), (void *)v7 + 83, &v23);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v23);
    if (v36 < 0) {
      operator delete(v35);
    }
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v31);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
    sub_21697C414(&__p);
    if (v29 < 0) {
      operator delete(v28[0]);
    }
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v8) {
      uint64_t v8 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    std::string::size_type v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v9) {
      std::string::size_type v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    sub_216779094(v28, ".velocities");
    sub_2170F5D84((uint64_t)a1, (unsigned __int8 **)v28, (uint64_t)&__p);
    sub_217100BE4((uint64_t)&v23, (uint64_t)&__p);
    sub_2171008C4(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v8 + 1216), (void *)v9 + 86, &v23);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v23);
    if (v36 < 0) {
      operator delete(v35);
    }
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v31);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
    sub_21697C414(&__p);
    if (v29 < 0) {
      operator delete(v28[0]);
    }
    unint64_t v10 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v10) {
      unint64_t v10 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    uint64_t v11 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v11) {
      uint64_t v11 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    sub_216779094(v28, "N");
    sub_2170F5D84((uint64_t)a1, (unsigned __int8 **)v28, (uint64_t)&v23);
    sub_21710ACE0((uint64_t)&__p, (uint64_t)&v23);
    sub_21710A95C(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v10 + 704), (void *)v11 + 89, (uint64_t)&__p);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v37);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v34);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&__p);
    if (v27 < 0) {
      operator delete(v26);
    }
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v25);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v24);
    sub_21697C414(&v23);
    if (v29 < 0) {
      operator delete(v28[0]);
    }
    long long v12 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v12) {
      long long v12 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    int v13 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v13) {
      int v13 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    sub_216779094(v28, ".faceIndices");
    sub_2170F5D84((uint64_t)a1, (unsigned __int8 **)v28, (uint64_t)&__p);
    sub_217100FE4((uint64_t)&v23, (uint64_t)&__p);
    sub_217100CC4(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v12 + 344), (void *)v13 + 58, &v23);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v23);
    if (v36 < 0) {
      operator delete(v35);
    }
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v31);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
    sub_21697C414(&__p);
    if (v29 < 0) {
      operator delete(v28[0]);
    }
    uint64_t v14 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v14) {
      uint64_t v14 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    uint64_t v15 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v15) {
      uint64_t v15 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    sub_216779094(v28, ".faceCounts");
    sub_2170F5D84((uint64_t)a1, (unsigned __int8 **)v28, (uint64_t)&__p);
    sub_217100FE4((uint64_t)&v23, (uint64_t)&__p);
    sub_217100CC4(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v14 + 336), (void *)v15 + 58, &v23);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v23);
    if (v36 < 0) {
      operator delete(v35);
    }
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v31);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
    sub_21697C414(&__p);
    if (v29 < 0) {
      operator delete(v28[0]);
    }
    sub_217103020();
    uint64_t v22 = qword_267B95DD0;
    if ((qword_267B95DD0 & 7) != 0)
    {
      unint64_t v16 = qword_267B95DD0 & 0xFFFFFFFFFFFFFFF8;
      if ((atomic_fetch_add_explicit((atomic_uint *volatile)(qword_267B95DD0 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)uint64_t v22 = v16; {
    }
      }
    sub_21710315C();
    sub_2171013DC(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v22, qword_267B95DE0);
    if ((v22 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    int v17 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v17) {
      int v17 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    char v18 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v18) {
      char v18 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    unint64_t v19 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v19) {
      unint64_t v19 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    unint64_t v20 = *((void *)v19 + 85);
    long long __p = (void *)v20;
    uint64_t v31 = (char *)&off_26C750C70 + 1;
    if ((v20 & 7) != 0)
    {
      uint64_t v21 = (void *)(v20 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit((atomic_uint *volatile)v21, 2u, memory_order_relaxed) & 1) == 0) {
        long long __p = v21;
      }
    }
    v33[0] = 0;
    v33[1] = 0;
    int v32 = v33;
    sub_2170FC74C(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v17 + 1032), (void *)v18 + 11, (uint64_t)&__p);
    sub_2167877AC((uint64_t)&v32, v33[0]);
    sub_2168EE084((uint64_t)&__p);
  }
}

void sub_2170EF4AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
}

void sub_2170EF5A8(uint64_t **a1)
{
  uint64_t v125 = *MEMORY[0x263EF8340];
  uint64_t v2 = (const std::string *)(a1 + 1);
  sub_2167A2320((uint64_t)&__p, (uint64_t)(a1 + 1));
  uint64_t Header = Alembic::Abc::v12::IObject::getHeader((Alembic::Abc::v12::IObject *)&__p);
  char v4 = sub_2167EBBC4(Header + 48, 0);
  Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&__p);
  if (v4)
  {
    sub_2167A2320((uint64_t)&v89, (uint64_t)v2);
    Alembic::Abc::v12::IObject::getParent((const std::string *)&v89, (uint64_t)&__p);
    if (SHIBYTE(v109) < 0)
    {
      if (*((void *)&v108 + 1)) {
        goto LABEL_4;
      }
    }
    else if (HIBYTE(v109))
    {
LABEL_4:
      Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&__p);
      Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&v89);
      return;
    }
    uint64_t v5 = v110;
    Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&__p);
    Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&v89);
    if (v5)
    {
      sub_2167A2320((uint64_t)&__p, (uint64_t)v2);
      LODWORD(v89) = 0;
      int v90 = 0;
      LODWORD(v72) = 0;
      int v73 = 0;
      sub_21710CEBC((uint64_t)&v55, (uint64_t)&__p, 0, &v89, &v72);
      Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&__p);
      sub_216779094(&__p, ".faceset");
      sub_2170F57B0((uint64_t)a1, (uint64_t)&__p);
      if (SBYTE7(v108) < 0) {
        operator delete(__p);
      }
      unint64_t v6 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
      if (!v6) {
        unint64_t v6 = sub_2170F5C24(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
      }
      uint64_t v7 = sub_2170F5958((uint64_t **)*a1 + 19, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 19));
      sub_2168D2318(v7, (void *)v6 + 10);
      uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v8) {
        uint64_t v8 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      }
      std::string::size_type v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (!v9) {
        std::string::size_type v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      }
      sub_216779094(&v72, ".faces");
      sub_2170F5D84((uint64_t)a1, (unsigned __int8 **)&v72, (uint64_t)&__p);
      sub_217100FE4((uint64_t)&v89, (uint64_t)&__p);
      sub_217100CC4(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v8 + 464), (void *)v9 + 58, (int *)&v89);
      Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v89);
      if (SBYTE7(v114) < 0) {
        operator delete(v112);
      }
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v107);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
      sub_21697C414(&__p);
      if (SBYTE7(v74) < 0) {
        operator delete(v72);
      }
      unint64_t v10 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v10) {
        unint64_t v10 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      }
      uint64_t v11 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (!v11) {
        uint64_t v11 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      }
      long long v12 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v12) {
        long long v12 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      }
      unint64_t v13 = *((void *)v12 + 39);
      uint64_t v107 = (char *)&off_26C750C70 + 1;
      long long __p = (void *)v13;
      if ((v13 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        long long __p = (void *)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8);
      }
      uint64_t v109 = 0;
      *((void *)&v108 + 1) = 0;
      *(void *)&long long v108 = (char *)&v108 + 8;
      sub_2170FC74C(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v10 + 280), (void *)v11 + 11, (uint64_t)&__p);
      sub_2167877AC((uint64_t)&v108, *((void **)&v108 + 1));
      sub_2168EE084((uint64_t)&__p);
      uint64_t v14 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v14) {
        uint64_t v14 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      }
      uint64_t v15 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (!v15) {
        uint64_t v15 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      }
      unint64_t v16 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
      if (!v16) {
        unint64_t v16 = sub_2170FC394(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
      }
      unint64_t v17 = *((void *)v16 + 2);
      uint64_t v107 = (char *)&off_26C750C70 + 1;
      long long __p = (void *)v17;
      if ((v17 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        long long __p = (void *)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8);
      }
      uint64_t v109 = 0;
      *((void *)&v108 + 1) = 0;
      *(void *)&long long v108 = (char *)&v108 + 8;
      sub_2170FC74C(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v14 + 352), (void *)v15 + 11, (uint64_t)&__p);
      sub_2167877AC((uint64_t)&v108, *((void **)&v108 + 1));
      sub_2168EE084((uint64_t)&__p);
      char v18 = *a1;
      Alembic::Abc::v12::IObject::getParent(v2, (uint64_t)&__p);
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 19), &v89);
      sub_21710D3C4((uint64_t)&v47, (uint64_t)v18, (uint64_t)&__p, &v89);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v89 + 1);
      sub_21697C414(&v89);
      Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&__p);
      unint64_t v19 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
      if (!v19) {
        unint64_t v19 = sub_2170FC394(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
      }
      unint64_t v20 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (!v20) {
        unint64_t v20 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      }
      int v31 = v56;
      if (SHIBYTE(v58) < 0)
      {
        sub_216778F24(&v32, (void *)__src, *((unint64_t *)&__src + 1));
      }
      else
      {
        long long v32 = __src;
        uint64_t v33 = v58;
      }
      uint64_t v30 = &unk_26C749578;
      uint64_t v34 = v59;
      uint64_t v35 = v60;
      if (v60) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v60 + 8), 1uLL, memory_order_relaxed);
      }
      char v36 = v61;
      uint64_t v37 = v62;
      if (v62) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v62 + 8), 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(v64) < 0)
      {
        sub_216778F24(&v38, (void *)v63, *((unint64_t *)&v63 + 1));
      }
      else
      {
        long long v38 = v63;
        uint64_t v39 = v64;
      }
      uint64_t v30 = &unk_26C749FB8;
      sub_2167EB704((uint64_t)&v40, (uint64_t)&v65);
      if (sub_2167EC41C((uint64_t)&v30))
      {
        int v90 = v31;
        if (SHIBYTE(v33) < 0)
        {
          sub_216778F24(&v91, (void *)v32, *((unint64_t *)&v32 + 1));
        }
        else
        {
          long long v91 = v32;
          uint64_t v92 = v33;
        }
        uint64_t v89 = &unk_26C749578;
        uint64_t v93 = v34;
        uint64_t v94 = v35;
        if (v35) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v35 + 8), 1uLL, memory_order_relaxed);
        }
        unint64_t v95 = v36;
        uint64_t v96 = v37;
        if (v37) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v37 + 8), 1uLL, memory_order_relaxed);
        }
        if (SHIBYTE(v39) < 0)
        {
          sub_216778F24(&v97, (void *)v38, *((unint64_t *)&v38 + 1));
        }
        else
        {
          long long v97 = v38;
          uint64_t v98 = v39;
        }
        uint64_t v89 = &unk_26C749FB8;
        sub_2167EB704((uint64_t)&v99, (uint64_t)&v40);
        *((void *)&v108 + 1) = 0;
        uint64_t v21 = operator new(0x190uLL);
        *uint64_t v21 = &unk_26C774B18;
        sub_21710D8B8((uint64_t)(v21 + 1), (uint64_t)&v89);
        *((void *)&v108 + 1) = v21;
        int v73 = v31;
        if (SHIBYTE(v33) < 0)
        {
          sub_216778F24(&v74, (void *)v32, *((unint64_t *)&v32 + 1));
        }
        else
        {
          long long v74 = v32;
          uint64_t v75 = v33;
        }
        unint64_t v72 = &unk_26C749578;
        uint64_t v76 = v34;
        uint64_t v77 = v35;
        if (v35) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v35 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v78 = v36;
        uint64_t v79 = v37;
        if (v37) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v37 + 8), 1uLL, memory_order_relaxed);
        }
        if (SHIBYTE(v39) < 0)
        {
          sub_216778F24(&v80, (void *)v38, *((unint64_t *)&v38 + 1));
        }
        else
        {
          long long v80 = v38;
          uint64_t v81 = v39;
        }
        unint64_t v72 = &unk_26C749FB8;
        sub_2167EB704((uint64_t)&v82, (uint64_t)&v40);
        uint64_t v124 = 0;
        uint64_t v22 = operator new(0x190uLL);
        *uint64_t v22 = &unk_26C774BB0;
        sub_21710D8B8((uint64_t)(v22 + 1), (uint64_t)&v72);
        uint64_t v124 = v22;
        int v23 = sub_2170F5EA4(&v47, (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *)((char *)v19 + 24), (void *)v20 + 11, (uint64_t)&__p, (uint64_t)v123);
        sub_2170F5FA4(v123);
        unint64_t v72 = &unk_26C749FB8;
        uint64_t v82 = &unk_26C749FF0;
        Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v88);
        uint64_t v82 = &unk_26C74A078;
        Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v87);
        Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v86);
        Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v85);
        Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v84);
        Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v83);
        Alembic::Abc::v12::IObject::~IObject(&v72);
        sub_2170F6028(&__p);
        uint64_t v89 = &unk_26C749FB8;
        uint64_t v99 = &unk_26C749FF0;
        Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v105);
        uint64_t v99 = &unk_26C74A078;
        Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v104);
        Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v103);
        Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v102);
        Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v101);
        Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v100);
        Alembic::Abc::v12::IObject::~IObject(&v89);
        LODWORD(v107) = v31;
        if (SHIBYTE(v33) < 0)
        {
          sub_216778F24(&v108, (void *)v32, *((unint64_t *)&v32 + 1));
        }
        else
        {
          long long v108 = v32;
          uint64_t v109 = v33;
        }
        long long __p = &unk_26C749578;
        uint64_t v110 = v34;
        uint64_t v111 = v35;
        if (v35) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v35 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v112 = v36;
        uint64_t v113 = v37;
        if (v37) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v37 + 8), 1uLL, memory_order_relaxed);
        }
        if (SHIBYTE(v39) < 0)
        {
          sub_216778F24(&v114, (void *)v38, *((unint64_t *)&v38 + 1));
        }
        else
        {
          long long v114 = v38;
          uint64_t v115 = v39;
        }
        long long __p = &unk_26C749FB8;
        sub_2167EB704((uint64_t)&v116, (uint64_t)&v40);
        int v24 = operator new(0x190uLL);
        *int v24 = &unk_26C774C20;
        sub_21710D8B8((uint64_t)(v24 + 1), (uint64_t)&__p);
        uint64_t v124 = v24;
        sub_2170F8214(v123, (void *)v23 + 8);
        sub_2170F5BA0(v123);
        long long __p = &unk_26C749FB8;
        uint64_t v116 = &unk_26C749FF0;
        Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v122);
        uint64_t v116 = &unk_26C74A078;
        Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v121);
        Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v120);
        Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v119);
        Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v118);
        Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v117);
        Alembic::Abc::v12::IObject::~IObject(&__p);
        *((_WORD *)v23 + 28) = 256;
      }
      uint64_t v30 = &unk_26C749FB8;
      uint64_t v40 = &unk_26C749FF0;
      Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v46);
      uint64_t v40 = &unk_26C74A078;
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v45);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v44);
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v43);
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v42);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v41);
      Alembic::Abc::v12::IObject::~IObject(&v30);
      sub_216779094(&__p, ".faceset");
      sub_2170F8CA0((uint64_t)a1, (uint64_t)&__p, (uint64_t)&v25);
      if (v29 < 0) {
        operator delete(v28);
      }
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v27);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v26);
      sub_21697C414(&v25);
      if (SBYTE7(v108) < 0) {
        operator delete(__p);
      }
      sub_21678A498((uint64_t)v54, v54[1]);
      long long __p = &v53;
      sub_216782F20((void ***)&__p);
      long long __p = &v52;
      sub_216782F20((void ***)&__p);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v51);
      sub_21697C414(&v50);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v49);
      Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&v48);
      uint64_t v55 = &unk_26C749FB8;
      uint64_t v65 = &unk_26C749FF0;
      Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v71);
      uint64_t v65 = &unk_26C74A078;
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v70);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v69);
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v68);
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v67);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v66);
      Alembic::Abc::v12::IObject::~IObject(&v55);
    }
  }
}

void sub_2170F0230(_Unwind_Exception *a1)
{
}

void sub_2170F04CC(uint64_t **a1)
{
  uint64_t v130 = *MEMORY[0x263EF8340];
  uint64_t v2 = (Alembic::Abc::v12::IObject *)(a1 + 1);
  sub_2167A2320((uint64_t)&__p, (uint64_t)(a1 + 1));
  uint64_t Header = Alembic::Abc::v12::IObject::getHeader((Alembic::Abc::v12::IObject *)&__p);
  char v4 = sub_21710EBC0(Header + 48, 0);
  Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&__p);
  if ((v4 & 1) == 0) {
    return;
  }
  sub_216779094(&__p, ".geom");
  sub_2170F57B0((uint64_t)a1, (uint64_t)&__p);
  if (SHIBYTE(v117) < 0) {
    operator delete(__p);
  }
  long long v86 = 0u;
  long long v87 = 0u;
  long long v88 = 0u;
  int64x2_t v89 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  long long v90 = xmmword_217409FA0;
  int64x2_t v91 = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  long long v92 = 0u;
  long long v93 = 0u;
  long long v94 = 0u;
  sub_21710EFFC((uint64_t)&v86);
  uint64_t v103 = 0;
  *(void *)&long long v104 = 0;
  DWORD2(v104) = 2;
  Alembic::Abc::v12::IObject::getProperties(v2, (uint64_t)&v108);
  int v98 = 0;
  LODWORD(v99) = 0;
  int v76 = 0;
  LODWORD(__src[0]) = 0;
  sub_21710F110((uint64_t)&__p, (uint64_t)&v108, &v98, &v76);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v108);
  if (sub_21710F09C((uint64_t)&__p))
  {
    Alembic::AbcGeom::v12::ICurvesSchema::get((uint64_t *)&__p, (uint64_t)&v86, (uint64_t)&v103);
    sub_217110B04(&__p);
    sub_216779094(&__p, "curveBasisAndType");
    sub_2170F5D84((uint64_t)a1, (unsigned __int8 **)&__p, (uint64_t)&v81);
    if (v85 < 0) {
      operator delete(v84);
    }
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v83);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v82);
    sub_21697C414(&v81);
    if (SHIBYTE(v117) < 0) {
      operator delete(__p);
    }
    if (v95)
    {
      if (v95 == 2)
      {
        uint64_t v5 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
        if (!v5) {
          uint64_t v5 = sub_2170F5C24(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
        }
        unint64_t v6 = sub_2170F5958((uint64_t **)*a1 + 19, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 19));
        sub_2168D2318(v6, (void *)v5 + 4);
        uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
        if (!v7) {
          uint64_t v7 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
        }
        uint64_t v8 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        if (!v8) {
          uint64_t v8 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        }
        sub_216779094(&v103, ".orders");
        sub_2170F5D84((uint64_t)a1, (unsigned __int8 **)&v103, (uint64_t)&__p);
        sub_217100FE4((uint64_t)&v108, (uint64_t)&__p);
        sub_217100CC4(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v7 + 720), (void *)v8 + 58, (int *)&v108);
        Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v108);
        if (v122 < 0) {
          operator delete(v121);
        }
        Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v116);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
        sub_21697C414(&__p);
        if (SHIBYTE(v104) < 0) {
          operator delete(v103);
        }
        std::string::size_type v9 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
        if (!v9) {
          std::string::size_type v9 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
        }
        unint64_t v10 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        if (!v10) {
          unint64_t v10 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        }
        sub_216779094(v74, ".knots");
        sub_2170F5D84((uint64_t)a1, (unsigned __int8 **)v74, (uint64_t)&__p);
        sub_217107850((uint64_t)&__p, (uint64_t)&v76);
        if (SHIBYTE(v78) < 0)
        {
          if (!__src[1] && v79)
          {
            LODWORD(v103) = v76;
            sub_216778F24(&v104, __src[0], 0);
            uint64_t v11 = v79;
            goto LABEL_74;
          }
        }
        else if (!HIBYTE(v78))
        {
          uint64_t v11 = v79;
          if (v79)
          {
            LODWORD(v103) = v76;
            long long v104 = *(_OWORD *)__src;
            uint64_t v105 = v78;
LABEL_74:
            uint64_t v106 = v11;
            uint64_t v107 = v80;
            if (v80) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v80 + 8), 1uLL, memory_order_relaxed);
            }
            int v127 = 0;
            uint64_t v33 = operator new(0x38uLL);
            *uint64_t v33 = &unk_26C774D68;
            sub_216D467D8((uint64_t)(v33 + 1), (uint64_t)&v103);
            int v127 = v33;
            int v98 = v76;
            if (SHIBYTE(v78) < 0)
            {
              sub_216778F24(&v99, __src[0], (unint64_t)__src[1]);
            }
            else
            {
              long long v99 = *(_OWORD *)__src;
              uint64_t v100 = v78;
            }
            uint64_t v101 = v79;
            uint64_t v102 = v80;
            if (v80) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v80 + 8), 1uLL, memory_order_relaxed);
            }
            uint64_t v125 = 0;
            unint64_t v47 = operator new(0x38uLL);
            *unint64_t v47 = &unk_26C774DE8;
            sub_216D467D8((uint64_t)(v47 + 1), (uint64_t)&v98);
            uint64_t v125 = v47;
            uint64_t v48 = sub_2170F5EA4(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v9 + 512), (void *)v10 + 65, (uint64_t)v126, (uint64_t)v124);
            LODWORD(v108) = v76;
            if (SHIBYTE(v78) < 0)
            {
              sub_216778F24(&v109, __src[0], (unint64_t)__src[1]);
            }
            else
            {
              long long v109 = *(_OWORD *)__src;
              uint64_t v110 = v78;
            }
            uint64_t v111 = v79;
            uint64_t v112 = v80;
            if (v80) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v80 + 8), 1uLL, memory_order_relaxed);
            }
            uint64_t v49 = operator new(0x38uLL);
            *uint64_t v49 = &unk_26C774E58;
            sub_216D467D8((uint64_t)(v49 + 1), (uint64_t)&v108);
            uint64_t v129 = v49;
            sub_2170F8214(v128, (void *)v48 + 8);
            sub_2170F5BA0(v128);
            Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v108);
            sub_2170F5FA4(v124);
            Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v98);
            sub_2170F6028(v126);
            Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v103);
          }
        }
        Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v76);
        if (v122 < 0) {
          operator delete(v121);
        }
LABEL_181:
        Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v116);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
        sub_21697C414(&__p);
        if (v75 < 0) {
          operator delete(v74[0]);
        }
LABEL_183:
        uint64_t v60 = sub_2170F5958((uint64_t **)*a1 + 19, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 19));
        long long v61 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
        if (!v61) {
          long long v61 = sub_2170F5C24(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
        }
        if ((*v60 & 0xFFFFFFFFFFFFFFF8) == (*(void *)v61 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_189;
        }
        uint64_t v62 = sub_2170F5958((uint64_t **)*a1 + 19, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 19));
        long long v63 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
        if (!v63) {
          long long v63 = sub_2170F5C24(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
        }
        if ((*v62 & 0xFFFFFFFFFFFFFFF8) == (*((void *)v63 + 4) & 0xFFFFFFFFFFFFFFF8))
        {
LABEL_189:
          uint64_t v64 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
          if (!v64) {
            uint64_t v64 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
          }
          uint64_t v65 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
          if (!v65) {
            uint64_t v65 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
          }
          sub_216779094(&v103, "P");
          sub_2170F5D84((uint64_t)a1, (unsigned __int8 **)&v103, (uint64_t)&__p);
          sub_217103FF0((uint64_t)&v108, (uint64_t)&__p, 1);
          sub_2171005A4(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v64 + 816), (void *)v65 + 83, (int *)&v108);
          Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v108);
          if (v122 < 0) {
            operator delete(v121);
          }
          Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v116);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
          sub_21697C414(&__p);
          if (SHIBYTE(v104) < 0) {
            operator delete(v103);
          }
          uint64_t v66 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
          if (!v66) {
            uint64_t v66 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
          }
          uint64_t v67 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
          if (!v67) {
            uint64_t v67 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
          }
          sub_216779094(&v103, ".velocities");
          sub_2170F5D84((uint64_t)a1, (unsigned __int8 **)&v103, (uint64_t)&__p);
          sub_217100BE4((uint64_t)&v108, (uint64_t)&__p);
          sub_2171008C4(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v66 + 1216), (void *)v67 + 86, (int *)&v108);
          Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v108);
          if (v122 < 0) {
            operator delete(v121);
          }
          Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v116);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
          sub_21697C414(&__p);
          if (SHIBYTE(v104) < 0) {
            operator delete(v103);
          }
        }
        uint64_t v68 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
        if (!v68) {
          uint64_t v68 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
        }
        uint64_t v69 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        if (!v69) {
          uint64_t v69 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        }
        sub_216779094(&v103, "N");
        sub_2170F5D84((uint64_t)a1, (unsigned __int8 **)&v103, (uint64_t)&v108);
        sub_21710ACE0((uint64_t)&__p, (uint64_t)&v108);
        sub_21710A95C(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v68 + 704), (void *)v69 + 89, (uint64_t)&__p);
        Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v123);
        Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v120);
        Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&__p);
        if (v114 < 0) {
          operator delete(v113);
        }
        Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v109);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v108 + 1);
        sub_21697C414(&v108);
        if (SHIBYTE(v104) < 0) {
          operator delete(v103);
        }
        uint64_t v70 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
        if (!v70) {
          uint64_t v70 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
        }
        uint64_t v71 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        if (!v71) {
          uint64_t v71 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        }
        sub_216779094(&v103, "nVertices");
        sub_2170F5D84((uint64_t)a1, (unsigned __int8 **)&v103, (uint64_t)&__p);
        sub_217100FE4((uint64_t)&v108, (uint64_t)&__p);
        sub_217100CC4(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v70 + 224), (void *)v71 + 58, (int *)&v108);
        Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v108);
        if (v122 < 0) {
          operator delete(v121);
        }
        Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v116);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
        sub_21697C414(&__p);
        if (SHIBYTE(v104) < 0) {
          operator delete(v103);
        }
        unint64_t v72 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
        if (!v72) {
          unint64_t v72 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
        }
        int v73 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        if (!v73) {
          int v73 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        }
        sub_216779094(&v103, "width");
        sub_2170F5D84((uint64_t)a1, (unsigned __int8 **)&v103, (uint64_t)&v108);
        sub_21710EA3C((uint64_t)&__p, (uint64_t)&v108);
        sub_21710E6B8(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v72 + 1312), (void *)v73 + 64, (uint64_t)&__p);
        Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v123);
        Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v120);
        Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&__p);
        if (v114 < 0) {
          operator delete(v113);
        }
        Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v109);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v108 + 1);
        sub_21697C414(&v108);
        if (SHIBYTE(v104) < 0) {
          operator delete(v103);
        }
        goto LABEL_229;
      }
LABEL_42:
      unint64_t v20 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
      if (!v20) {
        unint64_t v20 = sub_2170F5C24(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
      }
      uint64_t v21 = sub_2170F5958((uint64_t **)*a1 + 19, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 19));
      sub_2168D2318(v21, v20);
      uint64_t v22 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v22) {
        uint64_t v22 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      }
      int v23 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (!v23) {
        int v23 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      }
      int v24 = v95;
      int v25 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (v24 == 1)
      {
        if (!v25) {
          int v25 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
        }
        unint64_t v26 = *((void *)v25 + 68);
      }
      else
      {
        if (!v25) {
          int v25 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
        }
        unint64_t v26 = *((void *)v25 + 27);
      }
      if ((v26 & 7) == 0
        || (unint64_t v27 = v26 & 0xFFFFFFFFFFFFFFF8,
            (atomic_fetch_add_explicit((atomic_uint *volatile)(v26 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) != 0))
      {
        unint64_t v27 = v26;
      }
      long long __p = (void *)v27;
      uint64_t v116 = (char *)&off_26C750C70 + 1;
      if ((v27 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        long long __p = (void *)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8);
      }
      uint64_t v119 = 0;
      uint64_t v118 = 0;
      uint64_t v117 = (uint64_t)&v118;
      sub_2170FC74C(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v22 + 1128), (void *)v23 + 11, (uint64_t)&__p);
      sub_2167877AC((uint64_t)&v117, v118);
      sub_2168EE084((uint64_t)&__p);
      if ((v27 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v27 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      char v29 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v29) {
        char v29 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      }
      uint64_t v30 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (!v30) {
        uint64_t v30 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      }
      switch(v96)
      {
        case 2:
          int v31 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
          if (!v31) {
            int v31 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
          }
          unint64_t v32 = *((void *)v31 + 10);
          break;
        case 3:
          char v36 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
          if (!v36) {
            char v36 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
          }
          unint64_t v32 = *((void *)v36 + 13);
          break;
        case 4:
          long long __p = "usdAbc/alembicReader.cpp";
          uint64_t v116 = "_ConvertCurveBasis";
          uint64_t v117 = 2930;
          uint64_t v118 = "TfToken pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ConvertCurveBasis(BasisType)";
          LOBYTE(v119) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__ *)"'hermite' basis is no longer an allowed token for UsdGeomBasisCurves.", v28);
          uint64_t v34 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
          if (!v34) {
            uint64_t v34 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
          }
          unint64_t v32 = *((void *)v34 + 52);
          break;
        case 5:
          long long __p = "usdAbc/alembicReader.cpp";
          uint64_t v116 = "_ConvertCurveBasis";
          uint64_t v117 = 2935;
          uint64_t v118 = "TfToken pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ConvertCurveBasis(BasisType)";
          LOBYTE(v119) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__ *)"'power' basis is no longer an allowed token for UsdGeomBasisCurves.", v28);
          uint64_t v35 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
          if (!v35) {
            uint64_t v35 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
          }
          unint64_t v32 = *((void *)v35 + 105);
          break;
        default:
          uint64_t v37 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
          if (!v37) {
            uint64_t v37 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
          }
          unint64_t v32 = *((void *)v37 + 5);
          break;
      }
      if ((v32 & 7) == 0
        || (unint64_t v38 = v32 & 0xFFFFFFFFFFFFFFF8,
            (atomic_fetch_add_explicit((atomic_uint *volatile)(v32 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) != 0))
      {
        unint64_t v38 = v32;
      }
      unint64_t v108 = v38;
      *(void *)&long long v109 = (char *)&off_26C750C70 + 1;
      if ((v38 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v38 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        v108 &= 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v110 = 0;
      uint64_t v111 = 0;
      *((void *)&v109 + 1) = &v110;
      sub_2170FC74C(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v29 + 32), (void *)v30 + 11, (uint64_t)&v108);
      sub_2167877AC((uint64_t)&v109 + 8, v110);
      sub_2168EE084((uint64_t)&v108);
      if ((v38 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v38 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t v39 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v39) {
        uint64_t v39 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      }
      uint64_t v40 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (!v40) {
        uint64_t v40 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      }
      sub_21710E62C(v97, (atomic_uint **)&v108);
      long long __p = (void *)v108;
      uint64_t v116 = (char *)&off_26C750C70 + 1;
      if ((v108 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v108 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        long long __p = (void *)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8);
      }
      uint64_t v119 = 0;
      uint64_t v118 = 0;
      uint64_t v117 = (uint64_t)&v118;
      sub_2170FC74C(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v39 + 1320), (void *)v40 + 11, (uint64_t)&__p);
      sub_2167877AC((uint64_t)&v117, v118);
      sub_2168EE084((uint64_t)&__p);
      if ((v108 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v108 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      goto LABEL_183;
    }
    if (v96 != 4) {
      goto LABEL_42;
    }
    long long v12 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
    if (!v12) {
      long long v12 = sub_2170F5C24(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
    }
    unint64_t v13 = sub_2170F5958((uint64_t **)*a1 + 19, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 19));
    sub_2168D2318(v13, (void *)v12 + 2);
    sub_21710E62C(v97, (atomic_uint **)&__p);
    uint64_t v14 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v14) {
      uint64_t v14 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    uint64_t v15 = (atomic_uint *)((unint64_t)__p & 0xFFFFFFFFFFFFFFF8);
    unint64_t v16 = *((void *)v14 + 87) & 0xFFFFFFFFFFFFFFF8;
    if ((__p & 7) != 0) {
      atomic_fetch_add_explicit(v15, 0xFFFFFFFE, memory_order_release);
    }
    if (v15 != (atomic_uint *)v16)
    {
      long long __p = "usdAbc/alembicReader.cpp";
      uint64_t v116 = "_ReadCurves";
      uint64_t v117 = 3419;
      uint64_t v118 = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ReadCurves(_PrimReaderContext *)";
      LOBYTE(v119) = 0;
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 19));
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__ *)"Wrap mode is not supported for cubic hermite curves: '%s'", v18, Text);
    }
    sub_216779094(&v103, ".velocities");
    sub_2170F5D84((uint64_t)a1, (unsigned __int8 **)&v103, (uint64_t)&__p);
    sub_217100BE4((uint64_t)&v108, (uint64_t)&__p);
    if (SHIBYTE(v110) < 0)
    {
      if (*((void *)&v109 + 1)) {
        goto LABEL_41;
      }
    }
    else if (HIBYTE(v110))
    {
LABEL_41:
      BOOL v19 = 0;
      goto LABEL_109;
    }
    BOOL v19 = v111 != 0;
LABEL_109:
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v108);
    if (v122 < 0) {
      operator delete(v121);
    }
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v116);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
    sub_21697C414(&__p);
    if (SHIBYTE(v104) < 0) {
      operator delete(v103);
    }
    if (v19)
    {
      long long __p = "usdAbc/alembicReader.cpp";
      uint64_t v116 = "_ReadCurves";
      uint64_t v117 = 3425;
      uint64_t v118 = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ReadCurves(_PrimReaderContext *)";
      LOBYTE(v119) = 0;
      uint64_t v41 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 19));
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&__p, (pxrInternal__aapl__pxrReserved__ *)"Velocities are not supported for cubic hermite curves: '%s'", v42, v41);
    }
    uint64_t v43 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v43) {
      uint64_t v43 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    uint64_t v44 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v44) {
      uint64_t v44 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    sub_216779094(v74, "P");
    sub_2170F5D84((uint64_t)a1, (unsigned __int8 **)v74, (uint64_t)&__p);
    sub_217103FF0((uint64_t)&v76, (uint64_t)&__p, 0);
    if (SHIBYTE(v78) < 0)
    {
      if (__src[1] || !v79) {
        goto LABEL_151;
      }
      LODWORD(v103) = v76;
      sub_216778F24(&v104, __src[0], 0);
      uint64_t v45 = v79;
    }
    else
    {
      if (HIBYTE(v78)) {
        goto LABEL_151;
      }
      uint64_t v45 = v79;
      if (!v79) {
        goto LABEL_151;
      }
      LODWORD(v103) = v76;
      long long v104 = *(_OWORD *)__src;
      uint64_t v105 = v78;
    }
    uint64_t v106 = v45;
    uint64_t v107 = v80;
    if (v80) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v80 + 8), 1uLL, memory_order_relaxed);
    }
    int v127 = 0;
    uint64_t v46 = operator new(0x38uLL);
    *uint64_t v46 = &unk_26C774EC8;
    sub_216D467D8((uint64_t)(v46 + 1), (uint64_t)&v103);
    int v127 = v46;
    int v98 = v76;
    if (SHIBYTE(v78) < 0)
    {
      sub_216778F24(&v99, __src[0], (unint64_t)__src[1]);
    }
    else
    {
      long long v99 = *(_OWORD *)__src;
      uint64_t v100 = v78;
    }
    uint64_t v101 = v79;
    uint64_t v102 = v80;
    if (v80) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v80 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v125 = 0;
    int v50 = operator new(0x38uLL);
    *int v50 = &unk_26C774F50;
    sub_216D467D8((uint64_t)(v50 + 1), (uint64_t)&v98);
    uint64_t v125 = v50;
    int v51 = sub_2170F5EA4(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v43 + 816), (void *)v44 + 83, (uint64_t)v126, (uint64_t)v124);
    LODWORD(v108) = v76;
    if (SHIBYTE(v78) < 0)
    {
      sub_216778F24(&v109, __src[0], (unint64_t)__src[1]);
    }
    else
    {
      long long v109 = *(_OWORD *)__src;
      uint64_t v110 = v78;
    }
    uint64_t v111 = v79;
    uint64_t v112 = v80;
    if (v80) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v80 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v52 = operator new(0x38uLL);
    *uint64_t v52 = &unk_26C774FC0;
    sub_216D467D8((uint64_t)(v52 + 1), (uint64_t)&v108);
    uint64_t v129 = v52;
    sub_2170F8214(v128, (void *)v51 + 8);
    sub_2170F5BA0(v128);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v108);
    sub_2170F5FA4(v124);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v98);
    sub_2170F6028(v126);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v103);
LABEL_151:
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v76);
    if (v122 < 0) {
      operator delete(v121);
    }
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v116);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
    sub_21697C414(&__p);
    if (v75 < 0) {
      operator delete(v74[0]);
    }
    uint64_t v53 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v53) {
      uint64_t v53 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    uint64_t v54 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v54) {
      uint64_t v54 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    sub_216779094(v74, "P");
    sub_2170F5D84((uint64_t)a1, (unsigned __int8 **)v74, (uint64_t)&__p);
    sub_217103FF0((uint64_t)&v76, (uint64_t)&__p, 0);
    if (SHIBYTE(v78) < 0)
    {
      if (!__src[1] && v79)
      {
        LODWORD(v103) = v76;
        sub_216778F24(&v104, __src[0], 0);
        uint64_t v55 = v79;
        goto LABEL_166;
      }
    }
    else if (!HIBYTE(v78))
    {
      uint64_t v55 = v79;
      if (v79)
      {
        LODWORD(v103) = v76;
        long long v104 = *(_OWORD *)__src;
        uint64_t v105 = v78;
LABEL_166:
        uint64_t v106 = v55;
        uint64_t v107 = v80;
        if (v80) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v80 + 8), 1uLL, memory_order_relaxed);
        }
        int v127 = 0;
        int v56 = operator new(0x38uLL);
        *int v56 = &unk_26C775030;
        sub_216D467D8((uint64_t)(v56 + 1), (uint64_t)&v103);
        int v127 = v56;
        int v98 = v76;
        if (SHIBYTE(v78) < 0)
        {
          sub_216778F24(&v99, __src[0], (unint64_t)__src[1]);
        }
        else
        {
          long long v99 = *(_OWORD *)__src;
          uint64_t v100 = v78;
        }
        uint64_t v101 = v79;
        uint64_t v102 = v80;
        if (v80) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v80 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v125 = 0;
        uint64_t v57 = operator new(0x38uLL);
        *uint64_t v57 = &unk_26C7750B8;
        sub_216D467D8((uint64_t)(v57 + 1), (uint64_t)&v98);
        uint64_t v125 = v57;
        uint64_t v58 = sub_2170F5EA4(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v53 + 1048), (void *)v54 + 86, (uint64_t)v126, (uint64_t)v124);
        LODWORD(v108) = v76;
        if (SHIBYTE(v78) < 0)
        {
          sub_216778F24(&v109, __src[0], (unint64_t)__src[1]);
        }
        else
        {
          long long v109 = *(_OWORD *)__src;
          uint64_t v110 = v78;
        }
        uint64_t v111 = v79;
        uint64_t v112 = v80;
        if (v80) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v80 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v59 = operator new(0x38uLL);
        void *v59 = &unk_26C775128;
        sub_216D467D8((uint64_t)(v59 + 1), (uint64_t)&v108);
        uint64_t v129 = v59;
        sub_2170F8214(v128, (void *)v58 + 8);
        sub_2170F5BA0(v128);
        Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v108);
        sub_2170F5FA4(v124);
        Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v98);
        sub_2170F6028(v126);
        Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v103);
      }
    }
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v76);
    if (v122 < 0) {
      operator delete(v121);
    }
    goto LABEL_181;
  }
  sub_217110B04(&__p);
LABEL_229:
  if (*((void *)&v94 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v94 + 1));
  }
  if (*((void *)&v93 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v93 + 1));
  }
  if (*((void *)&v92 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v92 + 1));
  }
  if (*((void *)&v88 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v88 + 1));
  }
  if (*((void *)&v87 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v87 + 1));
  }
  if (*((void *)&v86 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v86 + 1));
  }
}

void sub_2170F1A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if ((a72 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)a72 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  sub_21710EB54(&a29);
  _Unwind_Resume(a1);
}

void sub_2170F1D50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_217110B04(&a72);
  JUMPOUT(0x2170F1D40);
}

void sub_2170F1D60()
{
}

void sub_2170F1D68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&a72);
  JUMPOUT(0x2170F1D48);
}

void sub_2170F1D88(uint64_t **a1)
{
  v59[4] = *MEMORY[0x263EF8340];
  sub_2167A2320((uint64_t)&__p, (uint64_t)(a1 + 1));
  uint64_t Header = Alembic::Abc::v12::IObject::getHeader((Alembic::Abc::v12::IObject *)&__p);
  char v3 = sub_2171139B0(Header + 48, 0);
  Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&__p);
  if ((v3 & 1) == 0) {
    return;
  }
  char v4 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
  if (!v4) {
    char v4 = sub_2170F5C24(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
  }
  uint64_t v5 = sub_2170F5958((uint64_t **)*a1 + 19, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 19));
  sub_2168D2318(v5, (void *)v4 + 5);
  sub_216779094(&__p, ".geom");
  sub_2170F57B0((uint64_t)a1, (uint64_t)&__p);
  if (v37 < 0) {
    operator delete(__p);
  }
  unint64_t v6 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v6) {
    unint64_t v6 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  uint64_t v7 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v7) {
    uint64_t v7 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_216779094(&v50, "P");
  sub_2170F5D84((uint64_t)a1, &v50, (uint64_t)&__p);
  sub_217103FF0((uint64_t)&v27, (uint64_t)&__p, 1);
  sub_2171005A4(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v6 + 816), (void *)v7 + 83, &v27);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v27);
  if (v43 < 0) {
    operator delete(v42);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v36);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_21697C414(&__p);
  if (SHIBYTE(v51) < 0) {
    operator delete(v50);
  }
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v8) {
    uint64_t v8 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  std::string::size_type v9 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v9) {
    std::string::size_type v9 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_216779094(&v50, ".velocities");
  sub_2170F5D84((uint64_t)a1, &v50, (uint64_t)&__p);
  sub_217100BE4((uint64_t)&v27, (uint64_t)&__p);
  sub_2171008C4(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v8 + 1216), (void *)v9 + 86, &v27);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v27);
  if (v43 < 0) {
    operator delete(v42);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v36);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_21697C414(&__p);
  if (SHIBYTE(v51) < 0) {
    operator delete(v50);
  }
  unint64_t v10 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v10) {
    unint64_t v10 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  uint64_t v11 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v11) {
    uint64_t v11 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_216779094(&v50, ".widths");
  sub_2170F5D84((uint64_t)a1, &v50, (uint64_t)&v27);
  sub_21710EA3C((uint64_t)&__p, (uint64_t)&v27);
  sub_21710E6B8(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v10 + 1312), (void *)v11 + 64, (uint64_t)&__p);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v44);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v41);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&__p);
  if (v34 < 0) {
    operator delete(v33);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v29);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v28);
  sub_21697C414(&v27);
  if (SHIBYTE(v51) < 0) {
    operator delete(v50);
  }
  long long v12 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v12) {
    long long v12 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  unint64_t v13 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v13) {
    unint64_t v13 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_216779094(v20, ".pointIds");
  sub_2170F5D84((uint64_t)a1, (unsigned __int8 **)v20, (uint64_t)&__p);
  if (v39 < 0)
  {
    if (v38) {
      goto LABEL_44;
    }
  }
  else if (v39)
  {
    goto LABEL_44;
  }
  if (v40)
  {
    uint64_t PropertyHeader = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader((uint64_t)v36);
    if (PropertyHeader)
    {
      if (*(_DWORD *)(PropertyHeader + 56) == 7
        && *(_DWORD *)(PropertyHeader + 24) == 2
        && sub_2167E383C(PropertyHeader + 32, 0))
      {
        int v27 = 0;
        LODWORD(v29) = 0;
        LODWORD(v50) = 0;
        LODWORD(v51) = 0;
        sub_2167E32C0((uint64_t)&v22, v36, (uint64_t)&v42, &v27, &v50);
        goto LABEL_45;
      }
    }
  }
LABEL_44:
  int v22 = 2;
  sub_216779094(__src, "");
  uint64_t v25 = 0;
  uint64_t v26 = 0;
LABEL_45:
  if (SHIBYTE(v24) < 0)
  {
    if (!__src[1] && v25)
    {
      LODWORD(v50) = v22;
      sub_216778F24(&v51, __src[0], 0);
      uint64_t v15 = v25;
      goto LABEL_52;
    }
  }
  else if (!HIBYTE(v24))
  {
    uint64_t v15 = v25;
    if (v25)
    {
      LODWORD(v50) = v22;
      long long v51 = *(_OWORD *)__src;
      uint64_t v52 = v24;
LABEL_52:
      uint64_t v53 = v15;
      uint64_t v54 = v26;
      if (v26) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v58 = 0;
      unint64_t v16 = operator new(0x38uLL);
      *unint64_t v16 = &unk_26C775348;
      sub_216D467D8((uint64_t)(v16 + 1), (uint64_t)&v50);
      uint64_t v58 = v16;
      int v45 = v22;
      if (SHIBYTE(v24) < 0)
      {
        sub_216778F24(&v46, __src[0], (unint64_t)__src[1]);
      }
      else
      {
        long long v46 = *(_OWORD *)__src;
        uint64_t v47 = v24;
      }
      uint64_t v48 = v25;
      uint64_t v49 = v26;
      if (v26) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
      }
      int v56 = 0;
      unint64_t v17 = operator new(0x38uLL);
      *unint64_t v17 = &unk_26C7753C8;
      sub_216D467D8((uint64_t)(v17 + 1), (uint64_t)&v45);
      int v56 = v17;
      char v18 = sub_2170F5EA4(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v12 + 448), (void *)v13 + 61, (uint64_t)v57, (uint64_t)v55);
      int v27 = v22;
      if (SHIBYTE(v24) < 0)
      {
        sub_216778F24(&v29, __src[0], (unint64_t)__src[1]);
      }
      else
      {
        long long v29 = *(_OWORD *)__src;
        uint64_t v30 = v24;
      }
      uint64_t v31 = v25;
      uint64_t v32 = v26;
      if (v26) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
      }
      BOOL v19 = operator new(0x38uLL);
      *BOOL v19 = &unk_26C775438;
      sub_216D467D8((uint64_t)(v19 + 1), (uint64_t)&v27);
      v59[3] = v19;
      sub_2170F8214(v59, (void *)v18 + 8);
      sub_2170F5BA0(v59);
      Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v27);
      sub_2170F5FA4(v55);
      Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v45);
      sub_2170F6028(v57);
      Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v50);
    }
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v22);
  if (v43 < 0) {
    operator delete(v42);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v36);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_21697C414(&__p);
  if (v21 < 0) {
    operator delete(v20[0]);
  }
}

void sub_2170F2474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  sub_2170F6028((void *)(v54 - 136));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(v54 - 216));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&a16);
  sub_2170F5E4C((uint64_t)&a32);
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_2170F25D8(uint64_t **a1)
{
  uint64_t v140 = *MEMORY[0x263EF8340];
  uint64_t v1 = (uint64_t)(a1 + 1);
  sub_2167A2320((uint64_t)&__p, (uint64_t)(a1 + 1));
  uint64_t Header = Alembic::Abc::v12::IObject::getHeader((Alembic::Abc::v12::IObject *)&__p);
  char v3 = sub_217114934(Header + 48, 0);
  Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&__p);
  if (v3)
  {
    sub_2167A2320((uint64_t)&__p, v1);
    LODWORD(v95) = 0;
    int v96 = 0;
    LODWORD(v76) = 0;
    int v77 = 0;
    sub_217114D88((Alembic::Abc::v12::IObject *)v67, (uint64_t)&__p, 0, &v95, &v76);
    Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&__p);
    char v4 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
    if (!v4) {
      char v4 = sub_2170F5C24(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames);
    }
    uint64_t v5 = sub_2170F5958((uint64_t **)*a1 + 19, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 19));
    sub_2168D2318(v5, (void *)v4 + 1);
    sub_216779094(&__p, ".geom");
    sub_2170F57B0((uint64_t)a1, (uint64_t)&__p);
    if (SBYTE7(v116) < 0) {
      operator delete(__p);
    }
    unint64_t v6 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v6) {
      unint64_t v6 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    uint64_t v7 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v7) {
      uint64_t v7 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    sub_217116898((uint64_t)&v48, (uint64_t)v67);
    if (sub_2171154A8((uint64_t)&v48))
    {
      int v96 = v49;
      if (SHIBYTE(v51) < 0)
      {
        sub_216778F24(&v97, (void *)v50, *((unint64_t *)&v50 + 1));
      }
      else
      {
        long long v97 = v50;
        uint64_t v98 = v51;
      }
      int v95 = &unk_26C749578;
      uint64_t v99 = v52;
      uint64_t v100 = v53;
      if (v53) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v53 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v101 = v54;
      uint64_t v102 = v55;
      if (v55) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v55 + 8), 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(v57) < 0)
      {
        sub_216778F24(&v103, (void *)v56, *((unint64_t *)&v56 + 1));
      }
      else
      {
        long long v103 = v56;
        uint64_t v104 = v57;
      }
      int v95 = &unk_26C7754A8;
      sub_2171154D8((uint64_t)&v105, (uint64_t)&v58);
      uint64_t v137 = 0;
      uint64_t v8 = operator new(0x1D8uLL);
      *uint64_t v8 = &unk_26C7754E0;
      sub_217115B08((uint64_t)(v8 + 1), (uint64_t)&v95);
      uint64_t v137 = v8;
      int v77 = v49;
      if (SHIBYTE(v51) < 0)
      {
        sub_216778F24(&v78, (void *)v50, *((unint64_t *)&v50 + 1));
      }
      else
      {
        long long v78 = v50;
        uint64_t v79 = v51;
      }
      int v76 = &unk_26C749578;
      uint64_t v80 = v52;
      uint64_t v81 = v53;
      if (v53) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v53 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v82 = v54;
      uint64_t v83 = v55;
      if (v55) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v55 + 8), 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(v57) < 0)
      {
        sub_216778F24(&v84, (void *)v56, *((unint64_t *)&v56 + 1));
      }
      else
      {
        long long v84 = v56;
        uint64_t v85 = v57;
      }
      int v76 = &unk_26C7754A8;
      sub_2171154D8((uint64_t)&v86, (uint64_t)&v58);
      uint64_t v135 = 0;
      std::string::size_type v9 = operator new(0x1D8uLL);
      *std::string::size_type v9 = &unk_26C775578;
      sub_217115B08((uint64_t)(v9 + 1), (uint64_t)&v76);
      uint64_t v135 = v9;
      unint64_t v10 = sub_2170F5EA4(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v6 + 360), (void *)v7 + 7, (uint64_t)v136, (uint64_t)v134);
      int v115 = v49;
      if (SHIBYTE(v51) < 0)
      {
        sub_216778F24(&v116, (void *)v50, *((unint64_t *)&v50 + 1));
      }
      else
      {
        long long v116 = v50;
        uint64_t v117 = v51;
      }
      long long __p = &unk_26C749578;
      uint64_t v118 = v52;
      uint64_t v119 = v53;
      if (v53) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v53 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v120 = v54;
      uint64_t v121 = v55;
      if (v55) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v55 + 8), 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(v57) < 0)
      {
        sub_216778F24(&v122, (void *)v56, *((unint64_t *)&v56 + 1));
      }
      else
      {
        long long v122 = v56;
        uint64_t v123 = v57;
      }
      long long __p = &unk_26C7754A8;
      sub_2171154D8((uint64_t)&v124, (uint64_t)&v58);
      uint64_t v11 = operator new(0x1D8uLL);
      void *v11 = &unk_26C7755E8;
      sub_217115B08((uint64_t)(v11 + 1), (uint64_t)&__p);
      uint64_t v139 = v11;
      sub_2170F8214(v138, (void *)v10 + 8);
      sub_2170F5BA0(v138);
      long long __p = &unk_26C7754A8;
      uint64_t v124 = &unk_26C749C48;
      unsigned int v133 = (void **)v132;
      sub_2167D05B4(&v133);
      Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v131);
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v130);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v129);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v128);
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v127);
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v126);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v125);
      Alembic::Abc::v12::IObject::~IObject(&__p);
      sub_2170F5FA4(v134);
      int v76 = &unk_26C7754A8;
      long long v86 = &unk_26C749C48;
      long long __p = v94;
      sub_2167D05B4((void ***)&__p);
      Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v93);
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v92);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v91);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v90);
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v89);
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v88);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v87);
      Alembic::Abc::v12::IObject::~IObject(&v76);
      sub_2170F6028(v136);
      int v95 = &unk_26C7754A8;
      uint64_t v105 = &unk_26C749C48;
      long long __p = v113;
      sub_2167D05B4((void ***)&__p);
      Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v112);
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v111);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v110);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v109);
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v108);
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v107);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v106);
      Alembic::Abc::v12::IObject::~IObject(&v95);
    }
    uint64_t v48 = &unk_26C7754A8;
    uint64_t v58 = &unk_26C749C48;
    long long __p = v66;
    sub_2167D05B4((void ***)&__p);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v65);
    Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v64);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v63);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v62);
    Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v61);
    Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v60);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v59);
    Alembic::Abc::v12::IObject::~IObject(&v48);
    long long v12 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v12) {
      long long v12 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    unint64_t v13 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v13) {
      unint64_t v13 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    sub_217116898((uint64_t)&v48, (uint64_t)v67);
    if (sub_2171154A8((uint64_t)&v48))
    {
      int v96 = v49;
      if (SHIBYTE(v51) < 0)
      {
        sub_216778F24(&v97, (void *)v50, *((unint64_t *)&v50 + 1));
      }
      else
      {
        long long v97 = v50;
        uint64_t v98 = v51;
      }
      int v95 = &unk_26C749578;
      uint64_t v99 = v52;
      uint64_t v100 = v53;
      if (v53) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v53 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v101 = v54;
      uint64_t v102 = v55;
      if (v55) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v55 + 8), 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(v57) < 0)
      {
        sub_216778F24(&v103, (void *)v56, *((unint64_t *)&v56 + 1));
      }
      else
      {
        long long v103 = v56;
        uint64_t v104 = v57;
      }
      int v95 = &unk_26C7754A8;
      sub_2171154D8((uint64_t)&v105, (uint64_t)&v58);
      uint64_t v137 = 0;
      uint64_t v14 = operator new(0x1D8uLL);
      *uint64_t v14 = &unk_26C775670;
      sub_217116BF4((uint64_t)(v14 + 1), (uint64_t)&v95);
      uint64_t v137 = v14;
      int v77 = v49;
      if (SHIBYTE(v51) < 0)
      {
        sub_216778F24(&v78, (void *)v50, *((unint64_t *)&v50 + 1));
      }
      else
      {
        long long v78 = v50;
        uint64_t v79 = v51;
      }
      int v76 = &unk_26C749578;
      uint64_t v80 = v52;
      uint64_t v81 = v53;
      if (v53) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v53 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v82 = v54;
      uint64_t v83 = v55;
      if (v55) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v55 + 8), 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(v57) < 0)
      {
        sub_216778F24(&v84, (void *)v56, *((unint64_t *)&v56 + 1));
      }
      else
      {
        long long v84 = v56;
        uint64_t v85 = v57;
      }
      int v76 = &unk_26C7754A8;
      sub_2171154D8((uint64_t)&v86, (uint64_t)&v58);
      uint64_t v135 = 0;
      uint64_t v15 = operator new(0x1D8uLL);
      *uint64_t v15 = &unk_26C7756F8;
      sub_217116BF4((uint64_t)(v15 + 1), (uint64_t)&v76);
      uint64_t v135 = v15;
      unint64_t v16 = sub_2170F5EA4(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v12 + 432), (void *)v13 + 7, (uint64_t)v136, (uint64_t)v134);
      int v115 = v49;
      if (SHIBYTE(v51) < 0)
      {
        sub_216778F24(&v116, (void *)v50, *((unint64_t *)&v50 + 1));
      }
      else
      {
        long long v116 = v50;
        uint64_t v117 = v51;
      }
      long long __p = &unk_26C749578;
      uint64_t v118 = v52;
      uint64_t v119 = v53;
      if (v53) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v53 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v120 = v54;
      uint64_t v121 = v55;
      if (v55) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v55 + 8), 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(v57) < 0)
      {
        sub_216778F24(&v122, (void *)v56, *((unint64_t *)&v56 + 1));
      }
      else
      {
        long long v122 = v56;
        uint64_t v123 = v57;
      }
      long long __p = &unk_26C7754A8;
      sub_2171154D8((uint64_t)&v124, (uint64_t)&v58);
      unint64_t v17 = operator new(0x1D8uLL);
      *unint64_t v17 = &unk_26C775768;
      sub_217116BF4((uint64_t)(v17 + 1), (uint64_t)&__p);
      uint64_t v139 = v17;
      sub_2170F8214(v138, (void *)v16 + 8);
      sub_2170F5BA0(v138);
      long long __p = &unk_26C7754A8;
      uint64_t v124 = &unk_26C749C48;
      unsigned int v133 = (void **)v132;
      sub_2167D05B4(&v133);
      Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v131);
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v130);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v129);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v128);
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v127);
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v126);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v125);
      Alembic::Abc::v12::IObject::~IObject(&__p);
      sub_2170F5FA4(v134);
      int v76 = &unk_26C7754A8;
      long long v86 = &unk_26C749C48;
      long long __p = v94;
      sub_2167D05B4((void ***)&__p);
      Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v93);
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v92);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v91);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v90);
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v89);
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v88);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v87);
      Alembic::Abc::v12::IObject::~IObject(&v76);
      sub_2170F6028(v136);
      int v95 = &unk_26C7754A8;
      uint64_t v105 = &unk_26C749C48;
      long long __p = v113;
      sub_2167D05B4((void ***)&__p);
      Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v112);
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v111);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v110);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v109);
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v108);
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v107);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v106);
      Alembic::Abc::v12::IObject::~IObject(&v95);
    }
    uint64_t v48 = &unk_26C7754A8;
    uint64_t v58 = &unk_26C749C48;
    long long __p = v66;
    sub_2167D05B4((void ***)&__p);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v65);
    Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v64);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v63);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v62);
    Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v61);
    Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v60);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v59);
    Alembic::Abc::v12::IObject::~IObject(&v48);
    char v18 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v18) {
      char v18 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    BOOL v19 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v19) {
      BOOL v19 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    sub_217116898((uint64_t)&v48, (uint64_t)v67);
    if (sub_2171154A8((uint64_t)&v48))
    {
      int v96 = v49;
      if (SHIBYTE(v51) < 0)
      {
        sub_216778F24(&v97, (void *)v50, *((unint64_t *)&v50 + 1));
      }
      else
      {
        long long v97 = v50;
        uint64_t v98 = v51;
      }
      int v95 = &unk_26C749578;
      uint64_t v99 = v52;
      uint64_t v100 = v53;
      if (v53) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v53 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v101 = v54;
      uint64_t v102 = v55;
      if (v55) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v55 + 8), 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(v57) < 0)
      {
        sub_216778F24(&v103, (void *)v56, *((unint64_t *)&v56 + 1));
      }
      else
      {
        long long v103 = v56;
        uint64_t v104 = v57;
      }
      int v95 = &unk_26C7754A8;
      sub_2171154D8((uint64_t)&v105, (uint64_t)&v58);
      uint64_t v137 = 0;
      unint64_t v20 = operator new(0x1D8uLL);
      *unint64_t v20 = &unk_26C7757D8;
      sub_2171175FC((uint64_t)(v20 + 1), (uint64_t)&v95);
      uint64_t v137 = v20;
      int v77 = v49;
      if (SHIBYTE(v51) < 0)
      {
        sub_216778F24(&v78, (void *)v50, *((unint64_t *)&v50 + 1));
      }
      else
      {
        long long v78 = v50;
        uint64_t v79 = v51;
      }
      int v76 = &unk_26C749578;
      uint64_t v80 = v52;
      uint64_t v81 = v53;
      if (v53) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v53 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v82 = v54;
      uint64_t v83 = v55;
      if (v55) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v55 + 8), 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(v57) < 0)
      {
        sub_216778F24(&v84, (void *)v56, *((unint64_t *)&v56 + 1));
      }
      else
      {
        long long v84 = v56;
        uint64_t v85 = v57;
      }
      int v76 = &unk_26C7754A8;
      sub_2171154D8((uint64_t)&v86, (uint64_t)&v58);
      uint64_t v135 = 0;
      char v21 = operator new(0x1D8uLL);
      *char v21 = &unk_26C775860;
      sub_2171175FC((uint64_t)(v21 + 1), (uint64_t)&v76);
      uint64_t v135 = v21;
      int v22 = sub_2170F5EA4(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v18 + 1232), (void *)v19 + 7, (uint64_t)v136, (uint64_t)v134);
      int v115 = v49;
      if (SHIBYTE(v51) < 0)
      {
        sub_216778F24(&v116, (void *)v50, *((unint64_t *)&v50 + 1));
      }
      else
      {
        long long v116 = v50;
        uint64_t v117 = v51;
      }
      long long __p = &unk_26C749578;
      uint64_t v118 = v52;
      uint64_t v119 = v53;
      if (v53) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v53 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v120 = v54;
      uint64_t v121 = v55;
      if (v55) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v55 + 8), 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(v57) < 0)
      {
        sub_216778F24(&v122, (void *)v56, *((unint64_t *)&v56 + 1));
      }
      else
      {
        long long v122 = v56;
        uint64_t v123 = v57;
      }
      long long __p = &unk_26C7754A8;
      sub_2171154D8((uint64_t)&v124, (uint64_t)&v58);
      int v23 = operator new(0x1D8uLL);
      *int v23 = &unk_26C7758D0;
      sub_2171175FC((uint64_t)(v23 + 1), (uint64_t)&__p);
      uint64_t v139 = v23;
      sub_2170F8214(v138, (void *)v22 + 8);
      sub_2170F5BA0(v138);
      long long __p = &unk_26C7754A8;
      uint64_t v124 = &unk_26C749C48;
      unsigned int v133 = (void **)v132;
      sub_2167D05B4(&v133);
      Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v131);
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v130);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v129);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v128);
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v127);
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v126);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v125);
      Alembic::Abc::v12::IObject::~IObject(&__p);
      sub_2170F5FA4(v134);
      int v76 = &unk_26C7754A8;
      long long v86 = &unk_26C749C48;
      long long __p = v94;
      sub_2167D05B4((void ***)&__p);
      Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v93);
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v92);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v91);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v90);
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v89);
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v88);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v87);
      Alembic::Abc::v12::IObject::~IObject(&v76);
      sub_2170F6028(v136);
      int v95 = &unk_26C7754A8;
      uint64_t v105 = &unk_26C749C48;
      long long __p = v113;
      sub_2167D05B4((void ***)&__p);
      Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v112);
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v111);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v110);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v109);
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v108);
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v107);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v106);
      Alembic::Abc::v12::IObject::~IObject(&v95);
    }
    uint64_t v48 = &unk_26C7754A8;
    uint64_t v58 = &unk_26C749C48;
    long long __p = v66;
    sub_2167D05B4((void ***)&__p);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v65);
    Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v64);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v63);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v62);
    Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v61);
    Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v60);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v59);
    Alembic::Abc::v12::IObject::~IObject(&v48);
    uint64_t v24 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v24) {
      uint64_t v24 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    uint64_t v25 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v25) {
      uint64_t v25 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    sub_217116898((uint64_t)&v48, (uint64_t)v67);
    if (sub_2171154A8((uint64_t)&v48))
    {
      int v96 = v49;
      if (SHIBYTE(v51) < 0)
      {
        sub_216778F24(&v97, (void *)v50, *((unint64_t *)&v50 + 1));
      }
      else
      {
        long long v97 = v50;
        uint64_t v98 = v51;
      }
      int v95 = &unk_26C749578;
      uint64_t v99 = v52;
      uint64_t v100 = v53;
      if (v53) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v53 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v101 = v54;
      uint64_t v102 = v55;
      if (v55) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v55 + 8), 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(v57) < 0)
      {
        sub_216778F24(&v103, (void *)v56, *((unint64_t *)&v56 + 1));
      }
      else
      {
        long long v103 = v56;
        uint64_t v104 = v57;
      }
      int v95 = &unk_26C7754A8;
      sub_2171154D8((uint64_t)&v105, (uint64_t)&v58);
      uint64_t v137 = 0;
      uint64_t v26 = operator new(0x1D8uLL);
      *uint64_t v26 = &unk_26C775940;
      sub_217118004((uint64_t)(v26 + 1), (uint64_t)&v95);
      uint64_t v137 = v26;
      int v77 = v49;
      if (SHIBYTE(v51) < 0)
      {
        sub_216778F24(&v78, (void *)v50, *((unint64_t *)&v50 + 1));
      }
      else
      {
        long long v78 = v50;
        uint64_t v79 = v51;
      }
      int v76 = &unk_26C749578;
      uint64_t v80 = v52;
      uint64_t v81 = v53;
      if (v53) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v53 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v82 = v54;
      uint64_t v83 = v55;
      if (v55) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v55 + 8), 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(v57) < 0)
      {
        sub_216778F24(&v84, (void *)v56, *((unint64_t *)&v56 + 1));
      }
      else
      {
        long long v84 = v56;
        uint64_t v85 = v57;
      }
      int v76 = &unk_26C7754A8;
      sub_2171154D8((uint64_t)&v86, (uint64_t)&v58);
      uint64_t v135 = 0;
      int v27 = operator new(0x1D8uLL);
      *int v27 = &unk_26C7759C8;
      sub_217118004((uint64_t)(v27 + 1), (uint64_t)&v76);
      uint64_t v135 = v27;
      int v28 = sub_2170F5EA4(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v24 + 440), (void *)v25 + 7, (uint64_t)v136, (uint64_t)v134);
      int v115 = v49;
      if (SHIBYTE(v51) < 0)
      {
        sub_216778F24(&v116, (void *)v50, *((unint64_t *)&v50 + 1));
      }
      else
      {
        long long v116 = v50;
        uint64_t v117 = v51;
      }
      long long __p = &unk_26C749578;
      uint64_t v118 = v52;
      uint64_t v119 = v53;
      if (v53) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v53 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v120 = v54;
      uint64_t v121 = v55;
      if (v55) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v55 + 8), 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(v57) < 0)
      {
        sub_216778F24(&v122, (void *)v56, *((unint64_t *)&v56 + 1));
      }
      else
      {
        long long v122 = v56;
        uint64_t v123 = v57;
      }
      long long __p = &unk_26C7754A8;
      sub_2171154D8((uint64_t)&v124, (uint64_t)&v58);
      long long v29 = operator new(0x1D8uLL);
      void *v29 = &unk_26C775A38;
      sub_217118004((uint64_t)(v29 + 1), (uint64_t)&__p);
      uint64_t v139 = v29;
      sub_2170F8214(v138, (void *)v28 + 8);
      sub_2170F5BA0(v138);
      long long __p = &unk_26C7754A8;
      uint64_t v124 = &unk_26C749C48;
      unsigned int v133 = (void **)v132;
      sub_2167D05B4(&v133);
      Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v131);
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v130);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v129);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v128);
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v127);
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v126);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v125);
      Alembic::Abc::v12::IObject::~IObject(&__p);
      sub_2170F5FA4(v134);
      int v76 = &unk_26C7754A8;
      long long v86 = &unk_26C749C48;
      long long __p = v94;
      sub_2167D05B4((void ***)&__p);
      Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v93);
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v92);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v91);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v90);
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v89);
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v88);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v87);
      Alembic::Abc::v12::IObject::~IObject(&v76);
      sub_2170F6028(v136);
      int v95 = &unk_26C7754A8;
      uint64_t v105 = &unk_26C749C48;
      long long __p = v113;
      sub_2167D05B4((void ***)&__p);
      Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v112);
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v111);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v110);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v109);
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v108);
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v107);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v106);
      Alembic::Abc::v12::IObject::~IObject(&v95);
    }
    uint64_t v48 = &unk_26C7754A8;
    uint64_t v58 = &unk_26C749C48;
    long long __p = v66;
    sub_2167D05B4((void ***)&__p);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v65);
    Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v64);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v63);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v62);
    Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v61);
    Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v60);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v59);
    Alembic::Abc::v12::IObject::~IObject(&v48);
    uint64_t v30 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v30) {
      uint64_t v30 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    uint64_t v31 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v31) {
      uint64_t v31 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    sub_217116898((uint64_t)&v48, (uint64_t)v67);
    if (sub_2171154A8((uint64_t)&v48))
    {
      int v96 = v49;
      if (SHIBYTE(v51) < 0)
      {
        sub_216778F24(&v97, (void *)v50, *((unint64_t *)&v50 + 1));
      }
      else
      {
        long long v97 = v50;
        uint64_t v98 = v51;
      }
      int v95 = &unk_26C749578;
      uint64_t v99 = v52;
      uint64_t v100 = v53;
      if (v53) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v53 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v101 = v54;
      uint64_t v102 = v55;
      if (v55) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v55 + 8), 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(v57) < 0)
      {
        sub_216778F24(&v103, (void *)v56, *((unint64_t *)&v56 + 1));
      }
      else
      {
        long long v103 = v56;
        uint64_t v104 = v57;
      }
      int v95 = &unk_26C7754A8;
      sub_2171154D8((uint64_t)&v105, (uint64_t)&v58);
      uint64_t v137 = 0;
      uint64_t v32 = operator new(0x1D8uLL);
      *uint64_t v32 = &unk_26C775AA8;
      sub_217118A0C((uint64_t)(v32 + 1), (uint64_t)&v95);
      uint64_t v137 = v32;
      int v77 = v49;
      if (SHIBYTE(v51) < 0)
      {
        sub_216778F24(&v78, (void *)v50, *((unint64_t *)&v50 + 1));
      }
      else
      {
        long long v78 = v50;
        uint64_t v79 = v51;
      }
      int v76 = &unk_26C749578;
      uint64_t v80 = v52;
      uint64_t v81 = v53;
      if (v53) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v53 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v82 = v54;
      uint64_t v83 = v55;
      if (v55) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v55 + 8), 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(v57) < 0)
      {
        sub_216778F24(&v84, (void *)v56, *((unint64_t *)&v56 + 1));
      }
      else
      {
        long long v84 = v56;
        uint64_t v85 = v57;
      }
      int v76 = &unk_26C7754A8;
      sub_2171154D8((uint64_t)&v86, (uint64_t)&v58);
      uint64_t v135 = 0;
      uint64_t v33 = operator new(0x1D8uLL);
      *uint64_t v33 = &unk_26C775B30;
      sub_217118A0C((uint64_t)(v33 + 1), (uint64_t)&v76);
      uint64_t v135 = v33;
      char v34 = sub_2170F5EA4(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v30 + 1240), (void *)v31 + 7, (uint64_t)v136, (uint64_t)v134);
      int v115 = v49;
      if (SHIBYTE(v51) < 0)
      {
        sub_216778F24(&v116, (void *)v50, *((unint64_t *)&v50 + 1));
      }
      else
      {
        long long v116 = v50;
        uint64_t v117 = v51;
      }
      long long __p = &unk_26C749578;
      uint64_t v118 = v52;
      uint64_t v119 = v53;
      if (v53) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v53 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v120 = v54;
      uint64_t v121 = v55;
      if (v55) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v55 + 8), 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(v57) < 0)
      {
        sub_216778F24(&v122, (void *)v56, *((unint64_t *)&v56 + 1));
      }
      else
      {
        long long v122 = v56;
        uint64_t v123 = v57;
      }
      long long __p = &unk_26C7754A8;
      sub_2171154D8((uint64_t)&v124, (uint64_t)&v58);
      uint64_t v35 = operator new(0x1D8uLL);
      *uint64_t v35 = &unk_26C775BA0;
      sub_217118A0C((uint64_t)(v35 + 1), (uint64_t)&__p);
      uint64_t v139 = v35;
      sub_2170F8214(v138, (void *)v34 + 8);
      sub_2170F5BA0(v138);
      long long __p = &unk_26C7754A8;
      uint64_t v124 = &unk_26C749C48;
      unsigned int v133 = (void **)v132;
      sub_2167D05B4(&v133);
      Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v131);
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v130);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v129);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v128);
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v127);
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v126);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v125);
      Alembic::Abc::v12::IObject::~IObject(&__p);
      sub_2170F5FA4(v134);
      int v76 = &unk_26C7754A8;
      long long v86 = &unk_26C749C48;
      long long __p = v94;
      sub_2167D05B4((void ***)&__p);
      Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v93);
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v92);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v91);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v90);
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v89);
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v88);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v87);
      Alembic::Abc::v12::IObject::~IObject(&v76);
      sub_2170F6028(v136);
      int v95 = &unk_26C7754A8;
      uint64_t v105 = &unk_26C749C48;
      long long __p = v113;
      sub_2167D05B4((void ***)&__p);
      Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v112);
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v111);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v110);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v109);
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v108);
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v107);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v106);
      Alembic::Abc::v12::IObject::~IObject(&v95);
    }
    uint64_t v48 = &unk_26C7754A8;
    uint64_t v58 = &unk_26C749C48;
    long long __p = v66;
    sub_2167D05B4((void ***)&__p);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v65);
    Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v64);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v63);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v62);
    Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v61);
    Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v60);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v59);
    Alembic::Abc::v12::IObject::~IObject(&v48);
    char v36 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v36) {
      char v36 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    char v37 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v37) {
      char v37 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    sub_217116898((uint64_t)&v48, (uint64_t)v67);
    if (sub_2171154A8((uint64_t)&v48))
    {
      int v96 = v49;
      if (SHIBYTE(v51) < 0)
      {
        sub_216778F24(&v97, (void *)v50, *((unint64_t *)&v50 + 1));
      }
      else
      {
        long long v97 = v50;
        uint64_t v98 = v51;
      }
      int v95 = &unk_26C749578;
      uint64_t v99 = v52;
      uint64_t v100 = v53;
      if (v53) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v53 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v101 = v54;
      uint64_t v102 = v55;
      if (v55) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v55 + 8), 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(v57) < 0)
      {
        sub_216778F24(&v103, (void *)v56, *((unint64_t *)&v56 + 1));
      }
      else
      {
        long long v103 = v56;
        uint64_t v104 = v57;
      }
      int v95 = &unk_26C7754A8;
      sub_2171154D8((uint64_t)&v105, (uint64_t)&v58);
      uint64_t v137 = 0;
      uint64_t v38 = operator new(0x1D8uLL);
      *uint64_t v38 = &unk_26C775C10;
      sub_217119410((uint64_t)(v38 + 1), (uint64_t)&v95);
      uint64_t v137 = v38;
      int v77 = v49;
      if (SHIBYTE(v51) < 0)
      {
        sub_216778F24(&v78, (void *)v50, *((unint64_t *)&v50 + 1));
      }
      else
      {
        long long v78 = v50;
        uint64_t v79 = v51;
      }
      int v76 = &unk_26C749578;
      uint64_t v80 = v52;
      uint64_t v81 = v53;
      if (v53) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v53 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v82 = v54;
      uint64_t v83 = v55;
      if (v55) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v55 + 8), 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(v57) < 0)
      {
        sub_216778F24(&v84, (void *)v56, *((unint64_t *)&v56 + 1));
      }
      else
      {
        long long v84 = v56;
        uint64_t v85 = v57;
      }
      int v76 = &unk_26C7754A8;
      sub_2171154D8((uint64_t)&v86, (uint64_t)&v58);
      uint64_t v135 = 0;
      char v39 = operator new(0x1D8uLL);
      *char v39 = &unk_26C775C98;
      sub_217119410((uint64_t)(v39 + 1), (uint64_t)&v76);
      uint64_t v135 = v39;
      uint64_t v40 = sub_2170F5EA4(a1, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v36 + 120), (void *)v37 + 19, (uint64_t)v136, (uint64_t)v134);
      int v115 = v49;
      if (SHIBYTE(v51) < 0)
      {
        sub_216778F24(&v116, (void *)v50, *((unint64_t *)&v50 + 1));
      }
      else
      {
        long long v116 = v50;
        uint64_t v117 = v51;
      }
      long long __p = &unk_26C749578;
      uint64_t v118 = v52;
      uint64_t v119 = v53;
      if (v53) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v53 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v120 = v54;
      uint64_t v121 = v55;
      if (v55) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v55 + 8), 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(v57) < 0)
      {
        sub_216778F24(&v122, (void *)v56, *((unint64_t *)&v56 + 1));
      }
      else
      {
        long long v122 = v56;
        uint64_t v123 = v57;
      }
      long long __p = &unk_26C7754A8;
      sub_2171154D8((uint64_t)&v124, (uint64_t)&v58);
      uint64_t v41 = operator new(0x1D8uLL);
      *uint64_t v41 = &unk_26C775D08;
      sub_217119410((uint64_t)(v41 + 1), (uint64_t)&__p);
      uint64_t v139 = v41;
      sub_2170F8214(v138, (void *)v40 + 8);
      sub_2170F5BA0(v138);
      long long __p = &unk_26C7754A8;
      uint64_t v124 = &unk_26C749C48;
      unsigned int v133 = (void **)v132;
      sub_2167D05B4(&v133);
      Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v131);
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v130);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v129);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v128);
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v127);
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v126);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v125);
      Alembic::Abc::v12::IObject::~IObject(&__p);
      sub_2170F5FA4(v134);
      int v76 = &unk_26C7754A8;
      long long v86 = &unk_26C749C48;
      long long __p = v94;
      sub_2167D05B4((void ***)&__p);
      Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v93);
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v92);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v91);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v90);
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v89);
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v88);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v87);
      Alembic::Abc::v12::IObject::~IObject(&v76);
      sub_2170F6028(v136);
      int v95 = &unk_26C7754A8;
      uint64_t v105 = &unk_26C749C48;
      long long __p = v113;
      sub_2167D05B4((void ***)&__p);
      Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v112);
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v111);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v110);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v109);
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v108);
      Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v107);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v106);
      Alembic::Abc::v12::IObject::~IObject(&v95);
    }
    uint64_t v48 = &unk_26C7754A8;
    uint64_t v58 = &unk_26C749C48;
    long long __p = v66;
    sub_2167D05B4((void ***)&__p);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v65);
    Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v64);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v63);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v62);
    Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v61);
    Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v60);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v59);
    Alembic::Abc::v12::IObject::~IObject(&v48);
    sub_216779094(&__p, ".geom");
    sub_2170F8CA0((uint64_t)a1, (uint64_t)&__p, (uint64_t)&v43);
    if (v47 < 0) {
      operator delete(v46);
    }
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v45);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v44);
    sub_21697C414(&v43);
    if (SBYTE7(v116) < 0) {
      operator delete(__p);
    }
    v67[0] = &unk_26C7754A8;
    v67[12] = &unk_26C749C48;
    long long __p = &v75;
    sub_2167D05B4((void ***)&__p);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v74);
    Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v73);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v72);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v71);
    Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v70);
    Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v69);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v68);
    Alembic::Abc::v12::IObject::~IObject(v67);
  }
}

void sub_2170F4C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  if (STACK[0x7D8]) {
    sub_216784EC4((std::__shared_weak_count *)STACK[0x7D8]);
  }
  if (STACK[0x7C8]) {
    sub_216784EC4((std::__shared_weak_count *)STACK[0x7C8]);
  }
  if (SLOBYTE(STACK[0x7BF]) < 0) {
    operator delete((void *)STACK[0x7A8]);
  }
  sub_2170F5FA4((void *)(v12 - 192));
  sub_2171147CC((uint64_t)&STACK[0x3F8]);
  sub_2170F6028((void *)(v12 - 160));
  sub_2171147CC((uint64_t)&STACK[0x5C8]);
  sub_2171147CC((uint64_t)va);
  sub_217114880((uint64_t)&STACK[0x228]);
  _Unwind_Resume(a1);
}

void sub_2170F5468()
{
}

uint64_t *sub_2170F54B4(uint64_t **a1, const void **a2)
{
  char v3 = &qword_267B95D28;
  uint64_t v4 = qword_267B95D28;
  if (qword_267B95D28)
  {
    unint64_t v6 = &qword_267B95D28;
    do
    {
      while (1)
      {
        char v3 = (uint64_t *)v4;
        uint64_t v7 = (const void **)(v4 + 32);
        if (!sub_21677B108((uint64_t)&qword_267B95D30, a2, (const void **)(v4 + 32))) {
          break;
        }
        uint64_t v4 = *v3;
        unint64_t v6 = v3;
        if (!*v3) {
          goto LABEL_10;
        }
      }
      if (!sub_21677B108((uint64_t)&qword_267B95D30, v7, a2)) {
        break;
      }
      unint64_t v6 = v3 + 1;
      uint64_t v4 = v3[1];
    }
    while (v4);
  }
  else
  {
    unint64_t v6 = &qword_267B95D28;
  }
LABEL_10:
  *a1 = v3;
  return v6;
}

uint64_t *sub_2170F5564(uint64_t a1, uint64_t **a2, uint64_t *a3)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = a1;
  *a2 = a3;
  if (*(void *)qword_267B95D20)
  {
    qword_267B95D20 = *(void *)qword_267B95D20;
    a3 = *a2;
  }
  unint64_t result = sub_21677B3B0((uint64_t *)qword_267B95D28, a3);
  ++qword_267B95D30;
  return result;
}

uint64_t sub_2170F55C4(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_2170F560C((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
  return a1;
}

void sub_2170F560C(uint64_t a1)
{
  sub_2170F565C((void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void **sub_2170F565C(void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    char v3 = a1[1];
    uint64_t v4 = v2;
    if (v3 != v2)
    {
      do
        char v3 = sub_2170ECCD8(v3 - 4);
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_2170F56B8(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a2 + 24);
  if (result)
  {
    if (result == a2)
    {
      *(void *)(a1 + 24) = a1;
      uint64_t v4 = *(uint64_t (**)(void))(**(void **)(a2 + 24) + 24);
      return v4();
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
      *(void *)(a1 + 24) = result;
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return result;
}

uint64_t sub_2170F5760(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 32;
    sub_2170ECCD8((void *)(i - 32));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_2170F57B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 184);
  sub_216782F74((uint64_t *)(a1 + 184));
  Alembic::Abc::v12::IObject::getProperties((Alembic::Abc::v12::IObject *)(a1 + 8), (uint64_t)v19);
  v18[0] = 1;
  v18[2] = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(&v20, v19, a2, v18);
  *(_DWORD *)(a1 + 104) = v20;
  std::string::operator=((std::string *)(a1 + 112), &v21);
  uint64_t v6 = v22;
  uint64_t v5 = v23;
  if (v23) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 144);
  *(void *)(a1 + 136) = v6;
  *(void *)(a1 + 144) = v5;
  if (v7) {
    sub_216784EC4(v7);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v20);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v19);
  if (*(char *)(a1 + 135) < 0)
  {
    if (*(void *)(a1 + 120)) {
      goto LABEL_13;
    }
  }
  else if (*(unsigned char *)(a1 + 135))
  {
    goto LABEL_13;
  }
  if (*(void *)(a1 + 136))
  {
    unint64_t NumProperties = Alembic::Abc::v12::ICompoundProperty::getNumProperties((Alembic::Abc::v12::ICompoundProperty *)(a1 + 104));
    sub_216790984(v4, NumProperties);
    uint64_t v9 = *(void *)(a1 + 192) - *(void *)(a1 + 184);
    if (v9)
    {
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      uint64_t v12 = v9 / 24;
      do
      {
        uint64_t PropertyHeader = (const std::string *)Alembic::Abc::v12::ICompoundProperty::getPropertyHeader((Alembic::Abc::v12::ICompoundProperty *)(a1 + 104));
        std::string::operator=((std::string *)(*v4 + v10), PropertyHeader);
        ++v11;
        v10 += 24;
      }
      while (v12 != v11);
    }
  }
LABEL_13:
  uint64_t v14 = *(const void ***)(a1 + 184);
  uint64_t v15 = *(const void ***)(a1 + 192);
  if (v14 != v15)
  {
    unint64_t v16 = (uint64_t **)(a1 + 208);
    unint64_t v17 = (uint64_t *)(a1 + 216);
    do
    {
      sub_216814A8C(v16, v17, v14, (uint64_t)v14);
      v14 += 3;
    }
    while (v14 != v15);
  }
}

void sub_2170F5934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)va1);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_2170F5958(uint64_t **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v5 = a1 + 1;
  uint64_t v4 = a1[1];
  if (!v4)
  {
    uint64_t v6 = a1 + 1;
LABEL_10:
    uint64_t v8 = (uint64_t *)operator new(0x100uLL);
    sub_216981010((_DWORD *)v8 + 8, a2);
    sub_21698105C((_DWORD *)v8 + 9, (_DWORD *)a2 + 1);
    *((unsigned char *)v8 + 104) = 0;
    *((unsigned char *)v8 + 128) = 0;
    *((unsigned char *)v8 + 136) = 0;
    *((unsigned char *)v8 + 160) = 0;
    v8[22] = 0;
    *(_OWORD *)(v8 + 5) = 0u;
    *(_OWORD *)(v8 + 7) = 0u;
    *(_OWORD *)(v8 + 9) = 0u;
    v8[11] = 0;
    v8[21] = (uint64_t)(v8 + 22);
    v8[25] = 0;
    v8[23] = 0;
    v8[24] = (uint64_t)(v8 + 25);
    v8[26] = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v8 + 54);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v8 + 55);
    v8[28] = 0;
    v8[29] = 0;
    *((_WORD *)v8 + 124) = 0;
    v8[30] = 0;
    *uint64_t v8 = 0;
    v8[1] = 0;
    void v8[2] = (uint64_t)v6;
    *uint64_t v5 = v8;
    uint64_t v9 = (uint64_t *)**a1;
    uint64_t v10 = v8;
    if (v9)
    {
      *a1 = v9;
      uint64_t v10 = *v5;
    }
    sub_21677B3B0(a1[1], v10);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v8 + 5;
  }
  while (1)
  {
    while (1)
    {
      uint64_t v6 = (uint64_t **)v4;
      uint64_t v7 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v4 + 4);
      if (!sub_2169817E8(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v4 + 4))) {
        break;
      }
      uint64_t v4 = *v6;
      uint64_t v5 = v6;
      if (!*v6) {
        goto LABEL_10;
      }
    }
    if (!sub_2169817E8(v7, a2)) {
      break;
    }
    uint64_t v5 = v6 + 1;
    uint64_t v4 = v6[1];
    if (!v4) {
      goto LABEL_10;
    }
  }
  uint64_t v8 = *v5;
  if (!*v5) {
    goto LABEL_10;
  }
  return v8 + 5;
}

void sub_2170F5AB4(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_2170F5AB4(a1, *a2);
    sub_2170F5AB4(a1, a2[1]);
    sub_2170F5B10((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_2170F5B10(uint64_t a1)
{
  sub_2170F5BA0((void *)(a1 + 72));
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
  sub_216D61968(a1 + 16, *(void **)(a1 + 24));
  if ((*(void *)a1 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)a1 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

uint64_t sub_2170F5B6C(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void *sub_2170F5BA0(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *sub_2170F5C24(atomic_ullong *a1)
{
  uint64_t result = sub_2170F5C6C();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType::~UsdAbcPrimTypeNames_StaticTokenType(result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *sub_2170F5C6C()
{
  v0 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *)operator new(0x70uLL);
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType::UsdAbcPrimTypeNames_StaticTokenType(v0);
  return v0;
}

void sub_2170F5C9C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_2170F5CB8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26C772F20;
  result[1] = v3;
  return result;
}

uint64_t sub_2170F5D00(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C772F20;
  a2[1] = v2;
  return result;
}

uint64_t sub_2170F5D2C(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void))(a1 + 8))(*a2);
}

uint64_t sub_2170F5D38(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C772FA0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2170F5D78()
{
  return &unk_26C772FA0;
}

uint64_t sub_2170F5D84@<X0>(uint64_t a1@<X0>, unsigned __int8 **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_2169CAFD0(*(void *)(a1 + 184), *(void *)(a1 + 192), a2);
  uint64_t v7 = *(long long **)(a1 + 192);
  if ((long long *)v6 == v7) {
    return sub_2170F857C(a3, (_DWORD *)(a1 + 152), (long long *)a2);
  }
  sub_216A3104C((uint64_t)&v12, (long long *)(v6 + 24), v7, v6);
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(a1 + 192);
  if (v10 != v8)
  {
    do
    {
      if (*(char *)(v10 - 1) < 0) {
        operator delete(*(void **)(v10 - 24));
      }
      v10 -= 24;
    }
    while (v10 != v9);
  }
  *(void *)(a1 + 192) = v9;
  return sub_2170F8480(a3, (_DWORD *)(a1 + 152), (long long *)a2, a1 + 104);
}

_DWORD *sub_2170F5E4C(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));

  return sub_21697C414((_DWORD *)a1);
}

char *sub_2170F5EA4(uint64_t **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *(void *)(a4 + 24);
  if (!v6
    || (uint64_t v10 = (pxrInternal__aapl__pxrReserved__::TfToken *)(*(uint64_t (**)(uint64_t, void **))(*(void *)v6 + 48))(v6, __p), (v11 = *(void *)(a5 + 24)) == 0))
  {
    sub_21683A7CC();
  }
  (*(void (**)(void **__return_ptr))(*(void *)v11 + 48))(__p);
  char v12 = sub_2170F60AC(a1, a2, a3, v10, (uint64_t)__p, 0);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v12;
}

void sub_2170F5F88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2170F5FA4(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_2170F6028(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

char *sub_2170F60AC(uint64_t **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, void *a3, pxrInternal__aapl__pxrReserved__::TfToken *a4, uint64_t a5, char a6)
{
  uint64_t v116 = *MEMORY[0x263EF8340];
  uint64_t v10 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 19);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 19), a2, (int *)&v112);
  uint64_t v11 = *a1;
  pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v112, &__dst);
  uint64_t v14 = (void *)v11[20];
  char v12 = v11 + 20;
  unint64_t v13 = v14;
  if (!v14) {
    goto LABEL_8;
  }
  uint64_t v15 = v12;
  do
  {
    int v16 = sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)(v13 + 4), (const pxrInternal__aapl__pxrReserved__::SdfPath *)&__dst);
    unint64_t v17 = v13 + 1;
    if (!v16)
    {
      unint64_t v17 = v13;
      uint64_t v15 = v13;
    }
    unint64_t v13 = (void *)*v17;
  }
  while (*v17);
  if (v15 == v12
    || sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)&__dst, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v15 + 4)))
  {
LABEL_8:
    uint64_t v15 = v12;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__dst + 1);
  sub_21697C414(&__dst);
  if (v15 == v12
    || (NameToken = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v112),
        v15 + 25 == sub_216A8E1C4((uint64_t)(v15 + 24), NameToken)))
  {
    BOOL v19 = sub_2170F5958((uint64_t **)*a1 + 19, v10);
    int v20 = v19;
    std::string v21 = (void *)v19[5];
    if ((unint64_t)v21 >= v19[6])
    {
      uint64_t v23 = sub_216973984((char **)v19 + 4, (uint64_t *)a2);
    }
    else
    {
      uint64_t v22 = *(void *)a2;
      *std::string v21 = *(void *)a2;
      if ((v22 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *v21 &= 0xFFFFFFFFFFFFFFF8;
      }
      uint64_t v23 = (char *)(v21 + 1);
    }
    v20[5] = (uint64_t)v23;
    if ((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) != 0) {
      EmptyString = (uint64_t *)((*(void *)a2 & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v23);
    }
    sub_21680EE0C(a1 + 26, (const void **)EmptyString, (uint64_t)EmptyString);
  }
  uint64_t v25 = *a1;
  pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v112, &__p);
  uint64_t v26 = sub_2170F5958((uint64_t **)v25 + 19, (pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
  int v27 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v112);
  int v28 = (uint64_t *)v26[20];
  long long v29 = (uint64_t **)(v26 + 20);
  uint64_t v30 = (uint64_t **)(v26 + 20);
  if (!v28) {
    goto LABEL_30;
  }
  long long v29 = (uint64_t **)(v26 + 20);
  while (1)
  {
    while (1)
    {
      uint64_t v30 = (uint64_t **)v28;
      uint64_t v31 = v28 + 4;
      if (!sub_2168BE1F8((uint64_t)(v26 + 21), v27, v28 + 4)) {
        break;
      }
      int v28 = *v30;
      long long v29 = v30;
      if (!*v30) {
        goto LABEL_30;
      }
    }
    if (!sub_2168BE1F8((uint64_t)(v26 + 21), v31, v27)) {
      break;
    }
    long long v29 = v30 + 1;
    int v28 = v30[1];
    if (!v28) {
      goto LABEL_30;
    }
  }
  uint64_t v32 = (char *)*v29;
  if (!*v29)
  {
LABEL_30:
    uint64_t v33 = (char *)operator new(0x88uLL);
    char v34 = v33;
    std::string __dst = v33;
    char v114 = (double *)(v26 + 20);
    LOBYTE(v115) = 0;
    uint64_t v35 = *v27;
    *((void *)v33 + 4) = *v27;
    if ((v35 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v35 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *((void *)v33 + 4) &= 0xFFFFFFFFFFFFFFF8;
    }
    *(_OWORD *)(v33 + 40) = 0u;
    *(_OWORD *)(v33 + 104) = 0u;
    *(_OWORD *)(v33 + 120) = 0u;
    *(_OWORD *)(v33 + 72) = 0u;
    *(_OWORD *)(v33 + 88) = 0u;
    *(_OWORD *)(v33 + 56) = 0u;
    pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)(v33 + 40));
    *((void *)v34 + 7) = 0;
    char v36 = v34 + 56;
    *(v36 - 1) = v36;
    int v36[3] = 0;
    v36[4] = 0;
    v36[1] = 0;
    v36[2] = 0;
    v36[9] = 0;
    LOBYTE(v115) = 1;
    char v37 = (uint64_t *)__dst;
    *(void *)std::string __dst = 0;
    v37[1] = 0;
    v37[2] = (uint64_t)v30;
    void *v29 = v37;
    uint64_t v38 = *(void *)v26[19];
    if (v38)
    {
      v26[19] = v38;
      char v37 = *v29;
    }
    sub_21677B3B0((uint64_t *)v26[20], v37);
    ++v26[21];
    uint64_t v32 = (char *)__dst;
    std::string __dst = 0;
    sub_2170F7428((uint64_t)&__dst);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_21697C414(&__p);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v112 + 1);
  sub_21697C414(&v112);
  *((void *)v32 + 5) = *a3;
  char v39 = (uint64_t *)(v32 + 40);
  uint64_t v40 = *a1;
  std::string __dst = 0;
  char v114 = 0;
  uint64_t v115 = 0;
  sub_21677C0AC((uint64_t)&__dst, (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 3);
  if (*((double *)v40 + 1) == 1.0 && *((double *)v40 + 2) == 0.0)
  {
    uint64_t v41 = *(void *)(a5 + 8);
    uint64_t v42 = (double *)__dst;
    if (v41 != *(void *)a5)
    {
      memmove(__dst, *(const void **)a5, v41 - *(void *)a5);
      uint64_t v42 = (double *)__dst;
    }
  }
  else
  {
    uint64_t v42 = (double *)__dst;
    if (v114 == __dst)
    {
      uint64_t v42 = v114;
    }
    else
    {
      uint64_t v43 = 0;
      uint64_t v44 = ((char *)v114 - (unsigned char *)__dst) >> 3;
      uint64_t v45 = *(double **)a5;
      do
      {
        v42[v43] = rint((v45[v43] * *((double *)v40 + 1) + *((double *)v40 + 2)) * 1.0e10) / 1.0e10;
        ++v43;
      }
      while (v44 != v43);
    }
  }
  long long __p = 0;
  long long v111 = 0uLL;
  sub_21677CA50(&__p, v42, (uint64_t)v114, v114 - v42);
  if (__dst)
  {
    char v114 = (double *)__dst;
    operator delete(__dst);
  }
  long long v46 = (void *)*((void *)v32 + 9);
  if (v46)
  {
    *((void *)v32 + 10) = v46;
    operator delete(v46);
    *((void *)v32 + 9) = 0;
    *((void *)v32 + 10) = 0;
    *((void *)v32 + 11) = 0;
  }
  char v47 = __p;
  *((void *)v32 + 9) = __p;
  uint64_t v48 = (void *)v111;
  *((_OWORD *)v32 + 5) = v111;
  v32[96] = v48 != v47;
  char v114 = (double *)&unk_26C7501AB;
  LOBYTE(__dst) = a6;
  int v49 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v49) {
    int v49 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  long long __p = (char *)v49 + 64;
  long long v50 = sub_2170F7770((uint64_t **)v32 + 6, (uint64_t *)v49 + 8, (uint64_t)&unk_2174BFD90, (uint64_t **)&__p);
  sub_2168ED33C(v50 + 5, &__dst);
  sub_2168EE084((uint64_t)&__dst);
  uint64_t v51 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v51) {
    uint64_t v51 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  sub_2170F7470(a4, (uint64_t **)v32 + 6, (uint64_t *)v51 + 8);
  uint64_t v52 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v52) {
    uint64_t v52 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  if ((*((void *)v52 + 58) & 0xFFFFFFFFFFFFFFF8) == 0) {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v52);
  }
  std::operator+<char>();
  sub_21679F2AC((uint64_t)a4, (const void **)&__p, &__dst);
  if (SHIBYTE(v115) < 0)
  {
    BOOL v54 = v114 == (double *)7 && *(_DWORD *)__dst == 1718185589 && *(_DWORD *)((char *)__dst + 3) == 1836216166;
    operator delete(__dst);
  }
  else
  {
    BOOL v54 = SHIBYTE(v115) == 7 && __dst == 1718185589 && *(_DWORD *)((char *)&__dst + 3) == 1836216166;
  }
  if (SHIBYTE(v111) < 0) {
    operator delete(__p);
  }
  long long v56 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (v54)
  {
    if (!v56) {
      long long v56 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    std::string __dst = (char *)v56 + 464;
    uint64_t v57 = sub_2170F7770((uint64_t **)v32 + 6, (uint64_t *)v56 + 58, (uint64_t)&unk_2174BFD90, (uint64_t **)&__dst);
    uint64_t v58 = v57;
    uint64_t v59 = v57[6];
    if (v59 && (v57[6] & 3) != 3) {
      (*(void (**)(uint64_t *))((v59 & 0xFFFFFFFFFFFFFFF8) + 32))(v57 + 5);
    }
    v58[6] = (uint64_t)&off_26C756E60 + 3;
    *((_DWORD *)v58 + 10) = 1;
  }
  else
  {
    if (!v56) {
      long long v56 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    std::string __dst = (char *)v56 + 464;
    uint64_t v60 = sub_2170F7770((uint64_t **)v32 + 6, (uint64_t *)v56 + 58, (uint64_t)&unk_2174BFD90, (uint64_t **)&__dst);
    long long v61 = v60;
    uint64_t v62 = v60[6];
    if (v62 && (v60[6] & 3) != 3) {
      (*(void (**)(uint64_t *))((v62 & 0xFFFFFFFFFFFFFFF8) + 32))(v60 + 5);
    }
    v61[6] = (uint64_t)&off_26C756E60 + 3;
    *((_DWORD *)v61 + 10) = 0;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::_IsEmpty((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)(v32 + 40)))
  {
    uint64_t v63 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
    if (!v63) {
      pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
    }
    uint64_t v64 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v64) {
      uint64_t v64 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    if ((*((void *)v64 + 56) & 0xFFFFFFFFFFFFFFF8) == 0) {
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v64);
    }
    std::operator+<char>();
    sub_21679F2AC((uint64_t)a4, (const void **)&__p, &__dst);
    *char v39 = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(v63);
    if (SHIBYTE(v115) < 0) {
      operator delete(__dst);
    }
    if (SHIBYTE(v111) < 0) {
      operator delete(__p);
    }
  }
  if (*((void *)v32 + 10) - *((void *)v32 + 9) == 8)
  {
    uint64_t v65 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata);
    if (!v65) {
      uint64_t v65 = sub_2170F7878(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata);
    }
    if ((*((void *)v65 + 3) & 0xFFFFFFFFFFFFFFF8) == 0) {
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v65);
    }
    std::operator+<char>();
    sub_21679F2AC((uint64_t)a4, (const void **)&__p, &__dst);
    if (SHIBYTE(v115) < 0)
    {
      BOOL v66 = v114 == (double *)4 && *(_DWORD *)__dst == 1702195828;
      operator delete(__dst);
    }
    else
    {
      BOOL v66 = SHIBYTE(v115) == 4 && __dst == 1702195828;
    }
    if ((SHIBYTE(v111) & 0x80000000) == 0)
    {
      if (!v66) {
        goto LABEL_117;
      }
      goto LABEL_116;
    }
    operator delete(__p);
    if (v66) {
LABEL_116:
    }
      v32[96] = 0;
  }
LABEL_117:
  sub_216779094(&__p, "interpretation");
  sub_21679F2AC((uint64_t)a4, (const void **)&__p, &__dst);
  if ((SHIBYTE(v115) & 0x80000000) == 0)
  {
    switch(HIBYTE(v115))
    {
      case 3:
        if ((unsigned __int16)__dst != 26482 || BYTE2(__dst) != 98) {
          goto LABEL_172;
        }
        goto LABEL_131;
      case 4:
        if (__dst == 1633838962) {
          goto LABEL_172;
        }
        p_dst = &__dst;
        goto LABEL_154;
      case 5:
        if (__dst != 1852403568 || BYTE4(__dst) != 116) {
          goto LABEL_172;
        }
        goto LABEL_161;
      case 6:
        if (__dst == 1836216174 && WORD2(__dst) == 27745) {
          goto LABEL_244;
        }
        if (__dst != 1952671094 || WORD2(__dst) != 29295) {
          goto LABEL_172;
        }
        goto LABEL_247;
      default:
        goto LABEL_172;
    }
  }
  switch((unint64_t)v114)
  {
    case 3uLL:
      if (*(_WORD *)__dst != 26482 || *((unsigned char *)__dst + 2) != 98) {
        goto LABEL_172;
      }
LABEL_131:
      uint64_t v69 = (pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
      if (!v69) {
        uint64_t v69 = sub_216B6DF8C(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
      }
      unint64_t v70 = *((void *)v69 + 3);
      goto LABEL_250;
    case 4uLL:
      p_dst = __dst;
      if (*(_DWORD *)__dst == 1633838962) {
        goto LABEL_172;
      }
LABEL_154:
      if (*p_dst != 1952544113) {
        goto LABEL_172;
      }
      pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&v109, "quat");
      goto LABEL_173;
    case 5uLL:
      if (*(_DWORD *)__dst != 1852403568 || *((unsigned char *)__dst + 4) != 116) {
        goto LABEL_172;
      }
LABEL_161:
      int v76 = (pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
      if (!v76) {
        int v76 = sub_216B6DF8C(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
      }
      unint64_t v70 = *(void *)v76;
      goto LABEL_250;
    case 6uLL:
      if (*(_DWORD *)__dst == 1836216174 && *((_WORD *)__dst + 2) == 27745)
      {
LABEL_244:
        uint64_t v104 = (pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
        if (!v104) {
          uint64_t v104 = sub_216B6DF8C(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
        }
        unint64_t v70 = *((void *)v104 + 1);
      }
      else
      {
        if (*(_DWORD *)__dst != 1952671094 || *((_WORD *)__dst + 2) != 29295)
        {
LABEL_172:
          unint64_t v109 = 0;
          goto LABEL_173;
        }
LABEL_247:
        uint64_t v105 = (pxrInternal__aapl__pxrReserved__::SdfValueRoleNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
        if (!v105) {
          uint64_t v105 = sub_216B6DF8C(&pxrInternal__aapl__pxrReserved__::SdfValueRoleNames);
        }
        unint64_t v70 = *((void *)v105 + 2);
      }
LABEL_250:
      unint64_t v109 = v70;
      if ((v70 & 7) != 0)
      {
        uint64_t v106 = (atomic_uint *)(v70 & 0xFFFFFFFFFFFFFFF8);
        if ((atomic_fetch_add_explicit(v106, 2u, memory_order_relaxed) & 1) == 0) {
          unint64_t v109 = (unint64_t)v106;
        }
      }
LABEL_173:
      if (!pxrInternal__aapl__pxrReserved__::TfToken::operator==((pxrInternal__aapl__pxrReserved__::TfToken *)&v109, "quat"))goto LABEL_186; {
      uint64_t v79 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      }
      if (!v79) {
        uint64_t v79 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      }
      BOOL v80 = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==((void **)v32 + 5, (void **)v79 + 21);
      uint64_t v81 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      if (v80)
      {
        if (!v81) {
          uint64_t v81 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        }
        uint64_t v82 = *((void *)v81 + 41);
      }
      else
      {
        if (!v81) {
          uint64_t v81 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
        }
        if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==((void **)v32 + 5, (void **)v81 + 24))
        {
          uint64_t v83 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
          if (!v83) {
            uint64_t v83 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
          }
          uint64_t v82 = *((void *)v83 + 42);
        }
        else
        {
LABEL_186:
          long long v84 = (atomic_ullong ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
          if (!v84) {
            pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
          }
          Type = (const pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetType((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)(v32 + 40));
          uint64_t v112 = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(v84, Type, (atomic_uint **)&v109);
          if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::_IsEmpty((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v112)) {
            long long v86 = (uint64_t *)(v32 + 40);
          }
          else {
            long long v86 = &v112;
          }
          uint64_t v82 = *v86;
        }
      }
      *char v39 = v82;
      if ((v109 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v109 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if (SHIBYTE(v115) < 0) {
        operator delete(__dst);
      }
      if (SHIBYTE(v111) < 0) {
        operator delete(__p);
      }
      sub_216779094(&__p, "geoScope");
      sub_21679F2AC((uint64_t)a4, (const void **)&__p, &__dst);
      if (SHIBYTE(v115) < 0)
      {
        BOOL v87 = v114 == 0;
        operator delete(__dst);
      }
      else
      {
        BOOL v87 = SHIBYTE(v115) == 0;
      }
      if (SHIBYTE(v111) < 0)
      {
        operator delete(__p);
        if (v87) {
          goto LABEL_227;
        }
      }
      else if (v87)
      {
        goto LABEL_227;
      }
      int v88 = sub_2167B21C0((uint64_t)a4);
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95D58, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_267B95D58))
      {
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B95D50, "constant");
        __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B95D50, &dword_216758000);
        __cxa_guard_release(&qword_267B95D58);
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95D68, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_267B95D68))
      {
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B95D60, "uniform");
        __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B95D60, &dword_216758000);
        __cxa_guard_release(&qword_267B95D68);
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95D78, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_267B95D78))
      {
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B95D70, "varying");
        __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B95D70, &dword_216758000);
        __cxa_guard_release(&qword_267B95D78);
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95D88, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_267B95D88))
      {
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B95D80, "vertex");
        __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B95D80, &dword_216758000);
        __cxa_guard_release(&qword_267B95D88);
      }
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95D98, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&qword_267B95D98))
      {
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&qword_267B95D90, "faceVarying");
        __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B95D90, &dword_216758000);
        __cxa_guard_release(&qword_267B95D98);
      }
      switch(v88)
      {
        case 0:
          uint64_t v89 = qword_267B95D50;
          goto LABEL_216;
        case 1:
          uint64_t v89 = qword_267B95D60;
          goto LABEL_216;
        case 2:
          uint64_t v89 = qword_267B95D70;
          goto LABEL_216;
        case 3:
          uint64_t v89 = qword_267B95D80;
          goto LABEL_216;
        case 4:
          uint64_t v89 = qword_267B95D90;
LABEL_216:
          if ((v89 & 7) == 0
            || (unint64_t v90 = v89 & 0xFFFFFFFFFFFFFFF8,
                (atomic_fetch_add_explicit((atomic_uint *volatile)(v89 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) != 0))
          {
            unint64_t v90 = v89;
          }
          if (v90)
          {
            std::string __dst = (void *)v90;
            char v114 = (double *)((char *)&off_26C750C70 + 1);
            if ((v90 & 7) != 0
              && (atomic_fetch_add_explicit((atomic_uint *volatile)(v90 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
            {
              std::string __dst = (void *)(v90 & 0xFFFFFFFFFFFFFFF8);
            }
            int64x2_t v91 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
            if (!v91) {
              int64x2_t v91 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
            }
            long long __p = (char *)v91 + 488;
            long long v92 = sub_2170F7770((uint64_t **)v32 + 6, (uint64_t *)v91 + 61, (uint64_t)&unk_2174BFD90, (uint64_t **)&__p);
            sub_2168ED33C(v92 + 5, &__dst);
            sub_2168EE084((uint64_t)&__dst);
            if ((v90 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v90 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
          }
          break;
        default:
          break;
      }
LABEL_227:
      long long v93 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v93) {
        long long v93 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      sub_2170F7604(a4, (uint64_t **)v32 + 6, (uint64_t *)v93 + 13);
      long long v94 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v94) {
        long long v94 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      sub_2170F7604(a4, (uint64_t **)v32 + 6, (uint64_t *)v94 + 17);
      int v95 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v95) {
        int v95 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      sub_2170F7470(a4, (uint64_t **)v32 + 6, (uint64_t *)v95 + 22);
      int v96 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata);
      if (!v96) {
        int v96 = sub_2170F7878(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata);
      }
      sub_2170F7604(a4, (uint64_t **)v32 + 6, (uint64_t *)v96 + 1);
      long long v97 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata);
      if (!v97) {
        long long v97 = sub_2170F7878(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata);
      }
      sub_2170F7604(a4, (uint64_t **)v32 + 6, (uint64_t *)v97 + 2);
      uint64_t v98 = (uint64_t *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata);
      if (!v98) {
        uint64_t v98 = (uint64_t *)sub_2170F7878(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata);
      }
      sub_2170F7470(a4, (uint64_t **)v32 + 6, v98);
      if (v32[96])
      {
        uint64_t v99 = (double *)*((void *)v32 + 9);
        uint64_t v100 = (double *)*((void *)v32 + 10);
        if (v99 != v100)
        {
          uint64_t v101 = (uint64_t **)(*a1 + 23);
          uint64_t v102 = (double *)(*a1 + 24);
          do
          {
            sub_216A9E4F4(v101, v102, v99, (uint64_t *)v99);
            ++v99;
          }
          while (v99 != v100);
        }
      }
      return v32 + 40;
    default:
      goto LABEL_172;
  }
}

void sub_2170F721C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
}

uint64_t sub_2170F7428(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_2170F5B10((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
  return a1;
}

void sub_2170F7470(pxrInternal__aapl__pxrReserved__::TfToken *a1, uint64_t **a2, uint64_t *a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) == 0) {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  }
  std::operator+<char>();
  sub_21679F2AC((uint64_t)a1, (const void **)__p, &v9);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if ((v11 & 0x80) == 0)
  {
    if (!v11) {
      return;
    }
    if (v11 == 4)
    {
      uint64_t v6 = &v9;
LABEL_12:
      BOOL v7 = *v6 == 1702195828;
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v10)
  {
    if (v10 == 4)
    {
      uint64_t v6 = v9;
      goto LABEL_12;
    }
LABEL_13:
    BOOL v7 = 0;
LABEL_14:
    __p[1] = &unk_26C7501AB;
    LOBYTE(__p[0]) = v7;
    char v12 = a3;
    uint64_t v8 = sub_2170F7770(a2, a3, (uint64_t)&unk_2174BFD90, &v12);
    sub_2168ED33C(v8 + 5, __p);
    sub_2168EE084((uint64_t)__p);
    if ((v11 & 0x80000000) == 0) {
      return;
    }
  }
  operator delete(v9);
}

void sub_2170F75C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_2170F7604(pxrInternal__aapl__pxrReserved__::TfToken *a1, uint64_t **a2, uint64_t *a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) == 0) {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  }
  std::operator+<char>();
  sub_21679F2AC((uint64_t)a1, (const void **)__p, v9);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v6 = v10;
  unsigned __int8 v7 = v10;
  if ((v10 & 0x80u) != 0) {
    unint64_t v6 = (unint64_t)v9[1];
  }
  if (v6)
  {
    __p[1] = &off_26C750BB8;
    sub_21691B31C((unsigned int **)__p, (uint64_t)v9);
    char v11 = a3;
    uint64_t v8 = sub_2170F7770(a2, a3, (uint64_t)&unk_2174BFD90, &v11);
    sub_2168ED33C(v8 + 5, __p);
    sub_2168EE084((uint64_t)__p);
    unsigned __int8 v7 = v10;
  }
  if ((v7 & 0x80) != 0) {
    operator delete(v9[0]);
  }
}

void sub_2170F7728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_2170F7770(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v6 = (uint64_t **)sub_2168BE158((uint64_t)a1, &v9, a2);
  uint64_t result = *v6;
  if (!*v6)
  {
    sub_216E1F940((uint64_t)a1, a4, (uint64_t)&v8);
    sub_21677B358(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

void sub_2170F7808(uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    sub_2168EE084((uint64_t)(a2 + 5));
    uint64_t v3 = a2[4];
    if ((v3 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  else if (!a2)
  {
    return;
  }

  operator delete(a2);
}

pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata_StaticTokenType *sub_2170F7878(atomic_ullong *a1)
{
  uint64_t result = sub_2170F78C0();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata_StaticTokenType::~UsdAbcCustomMetadata_StaticTokenType(result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata_StaticTokenType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata_StaticTokenType *sub_2170F78C0()
{
  v0 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata_StaticTokenType *)operator new(0x38uLL);
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata_StaticTokenType::UsdAbcCustomMetadata_StaticTokenType(v0);
  return v0;
}

void sub_2170F78F0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_2170F7904(void *a1)
{
  *a1 = &unk_26C772FD0;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 1));
  return a1;
}

void sub_2170F7948(void *a1)
{
  *a1 = &unk_26C772FD0;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 1));

  operator delete(a1);
}

void *sub_2170F799C(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x38uLL);
  *uint64_t v2 = &unk_26C772FD0;
  sub_216D467D8((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_2170F79F0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2170F7A04(uint64_t a1, void *a2)
{
  *a2 = &unk_26C772FD0;
  return sub_216D467D8((uint64_t)(a2 + 1), a1 + 8);
}

void sub_2170F7A30(uint64_t a1)
{
}

void sub_2170F7A38(uint64_t a1)
{
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 8));

  operator delete((void *)a1);
}

uint64_t sub_2170F7A74(uint64_t a1)
{
  return sub_2167B5CBC(a1 + 8) + 32;
}

uint64_t sub_2170F7A94(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C773050)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2170F7AD4()
{
  return &unk_26C773050;
}

void *sub_2170F7AE0(void *a1)
{
  *a1 = &unk_26C773078;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 1));
  return a1;
}

void sub_2170F7B24(void *a1)
{
  *a1 = &unk_26C773078;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 1));

  operator delete(a1);
}

void *sub_2170F7B78(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x38uLL);
  *uint64_t v2 = &unk_26C773078;
  sub_216D467D8((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_2170F7BCC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2170F7BE0(uint64_t a1, void *a2)
{
  *a2 = &unk_26C773078;
  return sub_216D467D8((uint64_t)(a2 + 1), a1 + 8);
}

void sub_2170F7C0C(uint64_t a1)
{
}

void sub_2170F7C14(uint64_t a1)
{
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 8));

  operator delete((void *)a1);
}

void sub_2170F7C50(uint64_t a1@<X0>, double **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (*(char *)(a1 + 39) < 0)
  {
    if (*(void *)(a1 + 24)) {
      return;
    }
  }
  else if (*(unsigned char *)(a1 + 39))
  {
    return;
  }
  if (*(void *)(a1 + 40))
  {
    uint64_t v3 = (Alembic::Abc::v12::IScalarProperty *)(a1 + 8);
    Alembic::Abc::v12::IScalarProperty::getTimeSampling((Alembic::Abc::v12::IScalarProperty *)(a1 + 8), &v20);
    uint64_t NumSamples = Alembic::Abc::v12::IScalarProperty::getNumSamples(v3);
    if (Alembic::Abc::v12::IScalarProperty::isConstant(v3)) {
      uint64_t v5 = NumSamples != 0;
    }
    else {
      uint64_t v5 = NumSamples;
    }
    if (v5)
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        double SampleTime = Alembic::AbcCoreAbstract::v12::TimeSampling::getSampleTime((double **)v20, i);
        double v8 = SampleTime;
        unsigned __int8 v10 = a2[1];
        unint64_t v9 = (unint64_t)a2[2];
        if ((unint64_t)v10 >= v9)
        {
          char v12 = *a2;
          uint64_t v13 = v10 - *a2;
          unint64_t v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 61) {
            sub_21677CB10();
          }
          uint64_t v15 = v9 - (void)v12;
          if (v15 >> 2 > v14) {
            unint64_t v14 = v15 >> 2;
          }
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v16 = v14;
          }
          if (v16)
          {
            unint64_t v17 = (char *)sub_21677CB28((uint64_t)(a2 + 2), v16);
            char v12 = *a2;
            unsigned __int8 v10 = a2[1];
          }
          else
          {
            unint64_t v17 = 0;
          }
          char v18 = (double *)&v17[8 * v13];
          *char v18 = v8;
          char v11 = v18 + 1;
          while (v10 != v12)
          {
            uint64_t v19 = *((void *)v10-- - 1);
            *((void *)v18-- - 1) = v19;
          }
          *a2 = v18;
          a2[1] = v11;
          a2[2] = (double *)&v17[8 * v16];
          if (v12) {
            operator delete(v12);
          }
        }
        else
        {
          *unsigned __int8 v10 = SampleTime;
          char v11 = v10 + 1;
        }
        a2[1] = v11;
      }
    }
    if (v21) {
      sub_216784EC4(v21);
    }
  }
}

void sub_2170F7DD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  char v12 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + 8) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2170F7E10(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C773050)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2170F7E50()
{
  return &unk_26C773050;
}

void *sub_2170F7E5C(void *a1)
{
  *a1 = &unk_26C7730F8;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 1));
  return a1;
}

void sub_2170F7EA0(void *a1)
{
  *a1 = &unk_26C7730F8;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 1));

  operator delete(a1);
}

void *sub_2170F7EF4(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x38uLL);
  *uint64_t v2 = &unk_26C7730F8;
  sub_216D467D8((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_2170F7F48(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2170F7F5C(uint64_t a1, void *a2)
{
  *a2 = &unk_26C7730F8;
  return sub_216D467D8((uint64_t)(a2 + 1), a1 + 8);
}

void sub_2170F7F88(uint64_t a1)
{
}

void sub_2170F7F90(uint64_t a1)
{
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 8));

  operator delete((void *)a1);
}

uint64_t sub_2170F7FCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Alembic::Abc::v12::IScalarProperty::get(a1 + 8, (uint64_t)&v17, a3, 16);
  sub_2168FD0E8((uint64_t)v15, 1uLL);
  uint64_t v4 = v17;
  int v5 = v18;
  sub_2168FD54C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v15, v6, v7);
  double v8 = v16;
  *unint64_t v16 = v4;
  *((_DWORD *)v8 + 2) = v5;
  long long v12 = v15[0];
  long long v13 = v15[1];
  unint64_t v14 = v16;
  if (v16)
  {
    unint64_t v9 = v16 - 2;
    if (*((void *)&v13 + 1)) {
      unint64_t v9 = (atomic_ullong *)*((void *)&v13 + 1);
    }
    atomic_fetch_add_explicit(v9, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = sub_2170F8108(a2, (uint64_t)&v12);
  sub_2168F83DC((uint64_t)&v12);
  sub_2168F83DC((uint64_t)v15);
  return v10;
}

void sub_2170F8090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

uint64_t sub_2170F80BC(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C773050)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2170F80FC()
{
  return &unk_26C773050;
}

uint64_t sub_2170F8108(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1) {
    sub_2168BBB60();
  }
  int v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_26C773168[v2])(&v5, a1);
}

uint64_t sub_2170F815C()
{
  return 1;
}

uint64_t sub_2170F8164(uint64_t **a1, void **a2)
{
  return 1;
}

BOOL sub_2170F818C(long long ***a1, uint64_t *a2)
{
  return sub_2170F819C(*a2, **a1);
}

BOOL sub_2170F819C(uint64_t a1, long long *a2)
{
  int v4 = strcmp((const char *)(0x80000002174E5318 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4) {
    *(unsigned char *)(a1 + 25) = 1;
  }
  else {
    sub_216C48F14(*(void *)(a1 + 8), a2);
  }
  return v4 == 0;
}

void *sub_2170F8214(void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    int v4 = (void *)result[3];
    int v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        uint64_t v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        uint64_t v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        uint64_t v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      uint64_t v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_2170F8474(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_21675DB74(a1);
}

uint64_t sub_2170F8480(uint64_t a1, _DWORD *a2, long long *a3, uint64_t a4)
{
  double v8 = sub_216981010((_DWORD *)a1, a2);
  sub_21698105C(v8 + 1, a2 + 1);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)a4;
  unint64_t v9 = (unsigned char *)(a1 + 16);
  if (*(char *)(a4 + 31) < 0)
  {
    sub_216778F24(v9, *(void **)(a4 + 8), *(void *)(a4 + 16));
  }
  else
  {
    long long v10 = *(_OWORD *)(a4 + 8);
    *(void *)(a1 + 32) = *(void *)(a4 + 24);
    *(_OWORD *)unint64_t v9 = v10;
  }
  uint64_t v11 = *(void *)(a4 + 40);
  *(void *)(a1 + 40) = *(void *)(a4 + 32);
  *(void *)(a1 + 48) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  long long v12 = (unsigned char *)(a1 + 56);
  if (*((char *)a3 + 23) < 0)
  {
    sub_216778F24(v12, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v13 = *a3;
    *(void *)(a1 + 72) = *((void *)a3 + 2);
    *(_OWORD *)long long v12 = v13;
  }
  return a1;
}

void sub_2170F854C(_Unwind_Exception *a1)
{
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v2);
  sub_21697C414(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2170F857C(uint64_t a1, _DWORD *a2, long long *a3)
{
  uint64_t v6 = sub_216981010((_DWORD *)a1, a2);
  sub_21698105C(v6 + 1, a2 + 1);
  *(_DWORD *)(a1 + 8) = 2;
  sub_216779094((void *)(a1 + 16), "");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  unsigned __int8 v7 = (unsigned char *)(a1 + 56);
  if (*((char *)a3 + 23) < 0)
  {
    sub_216778F24(v7, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v8 = *a3;
    *(void *)(a1 + 72) = *((void *)a3 + 2);
    *(_OWORD *)unsigned __int8 v7 = v8;
  }
  return a1;
}

void sub_2170F860C(_Unwind_Exception *a1)
{
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v2);
  sub_21697C414(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2170F863C(uint64_t a1, int a2)
{
  if (a2) {
    return 1;
  }
  sub_216779094(__p, "interpretation");
  sub_21679F2AC(a1, (const void **)__p, v7);
  if (v8 < 0)
  {
    BOOL v2 = v7[1] == (void *)4 && *(_DWORD *)v7[0] == 1633838962;
    operator delete(v7[0]);
  }
  else
  {
    BOOL v2 = v8 == 4 && LODWORD(v7[0]) == 1633838962;
  }
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void sub_2170F8700(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2170F871C(uint64_t a1, int *a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  *(_DWORD *)a1 = 2;
  sub_216779094((void *)(a1 + 8), "");
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  int v10 = *a2;
  *((void *)&v45 + 1) = 0;
  v46[0] = 0;
  *(void *)&long long v45 = (char *)&v45 + 8;
  int v47 = v10;
  sub_2167898D0(v48, (const void ***)&v45);
  v48[3] = 0;
  int v49 = 0;
  int v50 = 0;
  uint64_t v51 = 1;
  sub_2167877AC((uint64_t)&v45, *((void **)&v45 + 1));
  sub_2167A030C(a4, (uint64_t)&v47);
  sub_2167A030C(a5, (uint64_t)&v47);
  *(_DWORD *)a1 = v47;
  v46[34] = a1;
  v46[35] = "ITypedScalarProperty::ITypedScalarProperty()";
  uint64_t v12 = *((void *)a2 + 4);
  uint64_t v11 = (std::__shared_weak_count *)*((void *)a2 + 5);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v12)
  {
    sub_216778A5C((uint64_t)&v45);
    uint64_t v31 = sub_216779180(v46, (uint64_t)"NULL CompoundPropertyReader passed into ", 40);
    sub_216779180(v31, (uint64_t)"ITypedScalarProperty ctor", 25);
    std::stringbuf::str();
    sub_216778E70(__p, (long long *)v41);
    if (v42 < 0) {
      operator delete(v41[0]);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v33 = sub_216779038(exception, (uint64_t)__p);
    __cxa_throw(v33, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v12 + 80))(v12, a3);
  uint64_t v14 = v13;
  if (!v13)
  {
    sub_216778A5C((uint64_t)&v45);
    char v34 = sub_216779180(v46, (uint64_t)"Nonexistent scalar property: ", 29);
    int v35 = *(char *)(a3 + 23);
    if (v35 >= 0) {
      uint64_t v36 = a3;
    }
    else {
      uint64_t v36 = *(void *)a3;
    }
    if (v35 >= 0) {
      uint64_t v37 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v37 = *(void *)(a3 + 8);
    }
    sub_216779180(v34, v36, v37);
    std::stringbuf::str();
    sub_216778E70(__p, (long long *)v41);
    if (v42 < 0) {
      operator delete(v41[0]);
    }
    uint64_t v38 = __cxa_allocate_exception(0x20uLL);
    char v39 = sub_216779038(v38, (uint64_t)__p);
    __cxa_throw(v39, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  BOOL v16 = *(_DWORD *)(v13 + 56) == 10 && *(unsigned char *)(v13 + 60) == 4 && *(_DWORD *)(v13 + 24) == 1;
  if (!v16 || (sub_2170F863C(v13 + 32, v51) & 1) == 0)
  {
    sub_216778A5C((uint64_t)&v45);
    int v20 = sub_216779180(v46, (uint64_t)"Incorrect match of header datatype: ", 36);
    std::string v21 = sub_21677D5B0(v20, (int *)(v14 + 56));
    uint64_t v22 = sub_216779180(v21, (uint64_t)" to expected: ", 14);
    uint64_t v40 = 0x40000000ALL;
    uint64_t v23 = sub_21677D5B0(v22, (int *)&v40);
    uint64_t v24 = sub_216779180(v23, (uint64_t)",\n...or incorrect match of interpretation: ", 43);
    sub_216779094(v41, "interpretation");
    sub_21679F2AC(v14 + 32, (const void **)v41, __p);
    if ((v44 & 0x80u) == 0) {
      uint64_t v25 = __p;
    }
    else {
      uint64_t v25 = (void **)__p[0];
    }
    if ((v44 & 0x80u) == 0) {
      uint64_t v26 = v44;
    }
    else {
      uint64_t v26 = (uint64_t)__p[1];
    }
    int v27 = sub_216779180(v24, (uint64_t)v25, v26);
    int v28 = sub_216779180(v27, (uint64_t)" to expected: ", 14);
    sub_216779180(v28, (uint64_t)"rgba", 4);
    if ((char)v44 < 0) {
      operator delete(__p[0]);
    }
    if (v42 < 0) {
      operator delete(v41[0]);
    }
    std::stringbuf::str();
    sub_216778E70(__p, (long long *)v41);
    if (v42 < 0) {
      operator delete(v41[0]);
    }
    long long v29 = __cxa_allocate_exception(0x20uLL);
    uint64_t v30 = sub_216779038(v29, (uint64_t)__p);
    __cxa_throw(v30, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(*(void *)v12 + 88))(&v45, v12, a3);
  long long v17 = v45;
  long long v45 = 0uLL;
  int v18 = *(std::__shared_weak_count **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = v17;
  if (v18)
  {
    sub_216784EC4(v18);
    if (*((void *)&v45 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v45 + 1));
    }
  }
  if (v11) {
    sub_216784EC4(v11);
  }
  if (v49) {
    sub_216784EC4(v49);
  }
  sub_2167877AC((uint64_t)v48, (void *)v48[1]);
  return a1;
}

void sub_2170F8B58(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24)
{
  sub_216779148((std::exception *)&__p);
  sub_216778D38((uint64_t)&a23);
  if (v25) {
    sub_216784EC4(v25);
  }
  long long v29 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    uint64_t v30 = (uint64_t)v29;
    sub_2167A13A4(v24);
    sub_21679FA64(v26 - 144, v30);
  }
  else
  {
    sub_2167A13A4(v24);
    sub_21679F9F4(v26 - 144, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2170F88BCLL);
}

void sub_2170F8C60()
{
  sub_2167A03C4(v0 - 128);
  JUMPOUT(0x2170F8C90);
}

void sub_2170F8CA0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_2169CAFD0(*(void *)(a1 + 160), *(void *)(a1 + 168), (unsigned __int8 **)a2);
  unsigned __int8 v7 = *(long long **)(a1 + 168);
  if ((long long *)v6 == v7)
  {
    sub_2170F857C(a3, (_DWORD *)(a1 + 152), (long long *)a2);
  }
  else
  {
    sub_216A3104C((uint64_t)v12, (long long *)(v6 + 24), v7, v6);
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(a1 + 168);
    if (v10 != v8)
    {
      do
      {
        if (*(char *)(v10 - 1) < 0) {
          operator delete(*(void **)(v10 - 24));
        }
        v10 -= 24;
      }
      while (v10 != v9);
    }
    *(void *)(a1 + 168) = v9;
    sub_2167A2320((uint64_t)v12, a1 + 8);
    sub_216981010((_DWORD *)a3, (_DWORD *)(a1 + 152));
    sub_21698105C((_DWORD *)(a3 + 4), (_DWORD *)(a1 + 156));
    Alembic::Abc::v12::IObject::getProperties((Alembic::Abc::v12::IObject *)v12, a3 + 8);
    uint64_t v11 = (unsigned char *)(a3 + 56);
    if (*(char *)(a2 + 23) < 0)
    {
      sub_216778F24(v11, *(void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)uint64_t v11 = *(_OWORD *)a2;
      *(void *)(a3 + 72) = *(void *)(a2 + 16);
    }
    Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)v12);
  }
}

void sub_2170F8DC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v10);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v11);
  sub_21697C414(v9);
  Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&a9);
  _Unwind_Resume(a1);
}

void *sub_2170F8DF8(void *a1)
{
  *a1 = &unk_26C773190;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 1));
  return a1;
}

void sub_2170F8E3C(void *a1)
{
  *a1 = &unk_26C773190;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 1));

  operator delete(a1);
}

void *sub_2170F8E90(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  BOOL v2 = operator new(0x38uLL);
  *BOOL v2 = &unk_26C773190;
  sub_216D467D8((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_2170F8EE4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2170F8EF8(uint64_t a1, void *a2)
{
  *a2 = &unk_26C773190;
  return sub_216D467D8((uint64_t)(a2 + 1), a1 + 8);
}

void sub_2170F8F24(uint64_t a1)
{
}

void sub_2170F8F2C(uint64_t a1)
{
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 8));

  operator delete((void *)a1);
}

uint64_t sub_2170F8F68(uint64_t a1)
{
  return sub_2167B5CBC(a1 + 8) + 32;
}

uint64_t sub_2170F8F88(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C773200)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2170F8FC8()
{
  return &unk_26C773200;
}

void *sub_2170F8FD4(void *a1)
{
  *a1 = &unk_26C773228;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 1));
  return a1;
}

void sub_2170F9018(void *a1)
{
  *a1 = &unk_26C773228;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 1));

  operator delete(a1);
}

void *sub_2170F906C(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  BOOL v2 = operator new(0x38uLL);
  *BOOL v2 = &unk_26C773228;
  sub_216D467D8((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_2170F90C0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2170F90D4(uint64_t a1, void *a2)
{
  *a2 = &unk_26C773228;
  return sub_216D467D8((uint64_t)(a2 + 1), a1 + 8);
}

void sub_2170F9100(uint64_t a1)
{
}

void sub_2170F9108(uint64_t a1)
{
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 8));

  operator delete((void *)a1);
}

void sub_2170F9144(uint64_t a1@<X0>, double **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (*(char *)(a1 + 39) < 0)
  {
    if (*(void *)(a1 + 24)) {
      return;
    }
  }
  else if (*(unsigned char *)(a1 + 39))
  {
    return;
  }
  if (*(void *)(a1 + 40))
  {
    uint64_t v3 = (Alembic::Abc::v12::IScalarProperty *)(a1 + 8);
    Alembic::Abc::v12::IScalarProperty::getTimeSampling((Alembic::Abc::v12::IScalarProperty *)(a1 + 8), &v20);
    uint64_t NumSamples = Alembic::Abc::v12::IScalarProperty::getNumSamples(v3);
    if (Alembic::Abc::v12::IScalarProperty::isConstant(v3)) {
      uint64_t v5 = NumSamples != 0;
    }
    else {
      uint64_t v5 = NumSamples;
    }
    if (v5)
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        double SampleTime = Alembic::AbcCoreAbstract::v12::TimeSampling::getSampleTime((double **)v20, i);
        double v8 = SampleTime;
        uint64_t v10 = a2[1];
        unint64_t v9 = (unint64_t)a2[2];
        if ((unint64_t)v10 >= v9)
        {
          uint64_t v12 = *a2;
          uint64_t v13 = v10 - *a2;
          unint64_t v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 61) {
            sub_21677CB10();
          }
          uint64_t v15 = v9 - (void)v12;
          if (v15 >> 2 > v14) {
            unint64_t v14 = v15 >> 2;
          }
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v16 = v14;
          }
          if (v16)
          {
            long long v17 = (char *)sub_21677CB28((uint64_t)(a2 + 2), v16);
            uint64_t v12 = *a2;
            uint64_t v10 = a2[1];
          }
          else
          {
            long long v17 = 0;
          }
          int v18 = (double *)&v17[8 * v13];
          *int v18 = v8;
          uint64_t v11 = v18 + 1;
          while (v10 != v12)
          {
            uint64_t v19 = *((void *)v10-- - 1);
            *((void *)v18-- - 1) = v19;
          }
          *a2 = v18;
          a2[1] = v11;
          a2[2] = (double *)&v17[8 * v16];
          if (v12) {
            operator delete(v12);
          }
        }
        else
        {
          *uint64_t v10 = SampleTime;
          uint64_t v11 = v10 + 1;
        }
        a2[1] = v11;
      }
    }
    if (v21) {
      sub_216784EC4(v21);
    }
  }
}

void sub_2170F92CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v12 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + 8) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2170F9304(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C773200)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2170F9344()
{
  return &unk_26C773200;
}

void *sub_2170F9350(void *a1)
{
  *a1 = &unk_26C773298;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 1));
  return a1;
}

void sub_2170F9394(void *a1)
{
  *a1 = &unk_26C773298;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 1));

  operator delete(a1);
}

void *sub_2170F93E8(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  BOOL v2 = operator new(0x38uLL);
  *BOOL v2 = &unk_26C773298;
  sub_216D467D8((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_2170F943C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2170F9450(uint64_t a1, void *a2)
{
  *a2 = &unk_26C773298;
  return sub_216D467D8((uint64_t)(a2 + 1), a1 + 8);
}

void sub_2170F947C(uint64_t a1)
{
}

void sub_2170F9484(uint64_t a1)
{
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 8));

  operator delete((void *)a1);
}

uint64_t sub_2170F94C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64x2_t v24 = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(_OWORD *)uint64_t v25 = xmmword_217409FA0;
  *(int64x2_t *)&v25[16] = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  Alembic::Abc::v12::IScalarProperty::get(a1 + 8, (uint64_t)&v24, a3, 48);
  sub_2168FD0E8((uint64_t)v22, 2uLL);
  float64x2_t v17 = (float64x2_t)v24;
  double v4 = *(double *)v25;
  sub_2168FD54C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v22, v5, v6);
  float v7 = v4;
  uint64_t v8 = v23;
  *(float32x2_t *)uint64_t v23 = vcvt_f32_f64(v17);
  *(float *)(v8 + 8) = v7;
  float64x2_t v18 = *(float64x2_t *)&v25[8];
  double v9 = *(double *)&v25[24];
  sub_2168FD54C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v22, v10, v11);
  float v12 = v9;
  uint64_t v13 = v23;
  *(float32x2_t *)(v23 + 12) = vcvt_f32_f64(v18);
  *(float *)(v13 + 20) = v12;
  long long v19 = v22[0];
  long long v20 = v22[1];
  uint64_t v21 = v23;
  if (v23)
  {
    unint64_t v14 = (atomic_ullong *)(v23 - 16);
    if (*((void *)&v20 + 1)) {
      unint64_t v14 = (atomic_ullong *)*((void *)&v20 + 1);
    }
    atomic_fetch_add_explicit(v14, 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = sub_2170F8108(a2, (uint64_t)&v19);
  sub_2168F83DC((uint64_t)&v19);
  sub_2168F83DC((uint64_t)v22);
  return v15;
}

void sub_2170F95E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_2168F83DC((uint64_t)va);
  sub_2168F83DC((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_2170F9610(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C773200)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2170F9650()
{
  return &unk_26C773200;
}

void *sub_2170F965C(void *a1)
{
  *a1 = &unk_26C773308;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 1));
  return a1;
}

void sub_2170F96A0(void *a1)
{
  *a1 = &unk_26C773308;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 1));

  operator delete(a1);
}

void *sub_2170F96F4(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  BOOL v2 = operator new(0x38uLL);
  *BOOL v2 = &unk_26C773308;
  sub_216D467D8((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_2170F9748(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2170F975C(uint64_t a1, void *a2)
{
  *a2 = &unk_26C773308;
  return sub_216D467D8((uint64_t)(a2 + 1), a1 + 8);
}

void sub_2170F9788(uint64_t a1)
{
}

void sub_2170F9790(uint64_t a1)
{
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 8));

  operator delete((void *)a1);
}

uint64_t sub_2170F97CC(uint64_t a1)
{
  return sub_2167B5CBC(a1 + 8) + 32;
}

uint64_t sub_2170F97EC(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C773378)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2170F982C()
{
  return &unk_26C773378;
}

void *sub_2170F9838(void *a1)
{
  *a1 = &unk_26C7733A0;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 1));
  return a1;
}

void sub_2170F987C(void *a1)
{
  *a1 = &unk_26C7733A0;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 1));

  operator delete(a1);
}

void *sub_2170F98D0(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  BOOL v2 = operator new(0x38uLL);
  *BOOL v2 = &unk_26C7733A0;
  sub_216D467D8((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_2170F9924(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2170F9938(uint64_t a1, void *a2)
{
  *a2 = &unk_26C7733A0;
  return sub_216D467D8((uint64_t)(a2 + 1), a1 + 8);
}

void sub_2170F9964(uint64_t a1)
{
}

void sub_2170F996C(uint64_t a1)
{
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 8));

  operator delete((void *)a1);
}

void sub_2170F99A8(uint64_t a1@<X0>, double **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (*(char *)(a1 + 39) < 0)
  {
    if (*(void *)(a1 + 24)) {
      return;
    }
  }
  else if (*(unsigned char *)(a1 + 39))
  {
    return;
  }
  if (*(void *)(a1 + 40))
  {
    uint64_t v3 = (Alembic::Abc::v12::IScalarProperty *)(a1 + 8);
    Alembic::Abc::v12::IScalarProperty::getTimeSampling((Alembic::Abc::v12::IScalarProperty *)(a1 + 8), &v20);
    uint64_t NumSamples = Alembic::Abc::v12::IScalarProperty::getNumSamples(v3);
    if (Alembic::Abc::v12::IScalarProperty::isConstant(v3)) {
      uint64_t v5 = NumSamples != 0;
    }
    else {
      uint64_t v5 = NumSamples;
    }
    if (v5)
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        double SampleTime = Alembic::AbcCoreAbstract::v12::TimeSampling::getSampleTime((double **)v20, i);
        double v8 = SampleTime;
        uint64_t v10 = a2[1];
        unint64_t v9 = (unint64_t)a2[2];
        if ((unint64_t)v10 >= v9)
        {
          float v12 = *a2;
          uint64_t v13 = v10 - *a2;
          unint64_t v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 61) {
            sub_21677CB10();
          }
          uint64_t v15 = v9 - (void)v12;
          if (v15 >> 2 > v14) {
            unint64_t v14 = v15 >> 2;
          }
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v16 = v14;
          }
          if (v16)
          {
            float64x2_t v17 = (char *)sub_21677CB28((uint64_t)(a2 + 2), v16);
            float v12 = *a2;
            uint64_t v10 = a2[1];
          }
          else
          {
            float64x2_t v17 = 0;
          }
          float64x2_t v18 = (double *)&v17[8 * v13];
          *float64x2_t v18 = v8;
          uint64_t v11 = v18 + 1;
          while (v10 != v12)
          {
            uint64_t v19 = *((void *)v10-- - 1);
            *((void *)v18-- - 1) = v19;
          }
          *a2 = v18;
          a2[1] = v11;
          a2[2] = (double *)&v17[8 * v16];
          if (v12) {
            operator delete(v12);
          }
        }
        else
        {
          *uint64_t v10 = SampleTime;
          uint64_t v11 = v10 + 1;
        }
        a2[1] = v11;
      }
    }
    if (v21) {
      sub_216784EC4(v21);
    }
  }
}

void sub_2170F9B30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  float v12 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + 8) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2170F9B68(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C773378)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2170F9BA8()
{
  return &unk_26C773378;
}

void *sub_2170F9BB4(void *a1)
{
  *a1 = &unk_26C773410;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 1));
  return a1;
}

void sub_2170F9BF8(void *a1)
{
  *a1 = &unk_26C773410;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 1));

  operator delete(a1);
}

void *sub_2170F9C4C(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  BOOL v2 = operator new(0x38uLL);
  *BOOL v2 = &unk_26C773410;
  sub_216D467D8((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_2170F9CA0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2170F9CB4(uint64_t a1, void *a2)
{
  *a2 = &unk_26C773410;
  return sub_216D467D8((uint64_t)(a2 + 1), a1 + 8);
}

void sub_2170F9CE0(uint64_t a1)
{
}

void sub_2170F9CE8(uint64_t a1)
{
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 8));

  operator delete((void *)a1);
}

uint64_t sub_2170F9D24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (int *)(a1 + 8);
  LOBYTE(v19[0]) = 0;
  Alembic::Abc::v12::IScalarProperty::get(a1 + 8, (uint64_t)v19, a3, 1);
  uint64_t v6 = SLOBYTE(v19[0]);
  if (v6 != -1)
  {
    if (!LOBYTE(v19[0]))
    {
      uint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v7) {
        uint64_t v7 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      }
      unint64_t v8 = *((void *)v7 + 62);
      v19[0] = (void *)v8;
      if ((v8 & 7) != 0)
      {
        unint64_t v9 = (void *)(v8 & 0xFFFFFFFFFFFFFFF8);
        if ((atomic_fetch_add_explicit((atomic_uint *volatile)v9, 2u, memory_order_relaxed) & 1) == 0) {
          v19[0] = v9;
        }
      }
      uint64_t result = sub_2170F9F98(a2, (uint64_t)v19);
      goto LABEL_27;
    }
    if (v6 == 1) {
      sub_216779094(v19, "kVisibilityVisible");
    }
    else {
      pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_26C773488, v6, (uint64_t)v19);
    }
    if (v20 >= 0) {
      uint64_t v11 = (char *)v19;
    }
    else {
      uint64_t v11 = (char *)v19[0];
    }
    sub_216779094(v17, v11);
    sub_216779094(__p, "kVisibilityDeferred");
    sub_2170F9FEC(v5, a3, 0, (uint64_t *)v17, (uint64_t *)__p);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    if (v18 < 0) {
      operator delete(v17[0]);
    }
    if (v20 < 0) {
      operator delete(v19[0]);
    }
  }
  float v12 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v12) {
    float v12 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  unint64_t v13 = *((void *)v12 + 59);
  v19[0] = (void *)v13;
  if ((v13 & 7) != 0)
  {
    unint64_t v14 = (void *)(v13 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit((atomic_uint *volatile)v14, 2u, memory_order_relaxed) & 1) == 0) {
      v19[0] = v14;
    }
  }
  uint64_t result = sub_2170F9F98(a2, (uint64_t)v19);
LABEL_27:
  if (((uint64_t)v19[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v19[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void sub_2170F9EDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2170F9F4C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C773378)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2170F9F8C()
{
  return &unk_26C773378;
}

uint64_t sub_2170F9F98(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1) {
    sub_2168BBB60();
  }
  uint64_t v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_26C773470[v2])(&v5, a1);
}

void sub_2170F9FEC(int *a1, uint64_t a2, int a3, uint64_t *a4, uint64_t *a5)
{
  sub_2170FA8D0(a1, (uint64_t)v52);
  Alembic::Abc::v12::IObject::getArchive((Alembic::Abc::v12::IObject *)v52, (uint64_t)&v53);
  Alembic::Abc::v12::IArchive::getName((Alembic::Abc::v12::IArchive *)&v53, (uint64_t)__p);
  Alembic::Abc::v12::IArchive::~IArchive((Alembic::Abc::v12::IArchive *)&v53);
  uint64_t v10 = (unsigned char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ABC_WARN_ALL_UNSUPPORTED_VALUES);
  if (!v10) {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
  }
  if (*v10)
  {
    v48[0] = "usdAbc/alembicReader.cpp";
    v48[1] = "_PostUnsupportedValueWarning";
    v48[2] = 210;
    v48[3] = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_PostUnsupportedValueWarning(const IScalarPro"
             "perty &, const ISampleSelector &, _WarningType, const std::string &, const std::string &)";
    char v49 = 0;
    uint64_t v11 = off_2642946B8[a3];
    if (*((char *)a4 + 23) >= 0) {
      float v12 = a4;
    }
    else {
      float v12 = (uint64_t *)*a4;
    }
    uint64_t v60 = 0;
    long long v61 = 0;
    unint64_t v62 = 0;
    uint64_t v13 = sub_2167B5CBC((uint64_t)a1);
    unint64_t v14 = v61;
    if ((unint64_t)v61 >= v62)
    {
      char v16 = (long long *)sub_2167E9A44(&v60, (long long *)v13);
    }
    else
    {
      if (*(char *)(v13 + 23) < 0)
      {
        sub_216778F24(v61, *(void **)v13, *(void *)(v13 + 8));
      }
      else
      {
        long long v15 = *(_OWORD *)v13;
        *((void *)v61 + 2) = *(void *)(v13 + 16);
        *unint64_t v14 = v15;
      }
      char v16 = (long long *)((char *)v14 + 24);
    }
    long long v61 = v16;
    Alembic::Abc::v12::IScalarProperty::getParent((Alembic::Abc::v12::IScalarProperty *)a1, (uint64_t)&v53);
    while (1)
    {
      if (SHIBYTE(v54) < 0)
      {
        if (v53.__r_.__value_.__r.__words[2]) {
          break;
        }
      }
      else if (HIBYTE(v54))
      {
        break;
      }
      if (!v55) {
        break;
      }
      uint64_t v23 = sub_21680F968((uint64_t)&v53);
      int64x2_t v24 = v61;
      if ((unint64_t)v61 >= v62)
      {
        uint64_t v26 = (long long *)sub_2167E9A44(&v60, (long long *)v23);
      }
      else
      {
        if (*(char *)(v23 + 23) < 0)
        {
          sub_216778F24(v61, *(void **)v23, *(void *)(v23 + 8));
        }
        else
        {
          long long v25 = *(_OWORD *)v23;
          *((void *)v61 + 2) = *(void *)(v23 + 16);
          *int64x2_t v24 = v25;
        }
        uint64_t v26 = (long long *)((char *)v24 + 24);
      }
      long long v61 = v26;
      Alembic::Abc::v12::ICompoundProperty::getParent((Alembic::Abc::v12::ICompoundProperty *)&v53, (uint64_t)&v57);
      LODWORD(v53.__r_.__value_.__l.__data_) = v57.__r_.__value_.__l.__data_;
      std::string::operator=((std::string *)&v53.__r_.__value_.__r.__words[1], (const std::string *)&v57.__r_.__value_.__r.__words[1]);
      uint64_t v28 = v58;
      int v27 = v59;
      if (v59) {
        atomic_fetch_add_explicit(&v59->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v29 = v56;
      uint64_t v55 = v28;
      long long v56 = v27;
      if (v29) {
        sub_216784EC4(v29);
      }
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v57);
    }
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v53);
    sub_2170FAA50(".", (uint64_t)v61, v60, &v57);
    sub_2170FA8D0(a1, (uint64_t)&v53);
    Fulluint64_t Name = Alembic::Abc::v12::IObject::getFullName((Alembic::Abc::v12::IObject *)&v53);
    if (*(char *)(FullName + 23) < 0)
    {
      sub_216778F24(&__dst, *(void **)FullName, *(void *)(FullName + 8));
    }
    else
    {
      long long v31 = *(_OWORD *)FullName;
      __dst.__r_.__value_.__r.__words[2] = *(void *)(FullName + 16);
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v31;
    }
    Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&v53);
    unsigned __int8 v32 = HIBYTE(v57.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v57.__r_.__value_.__l.__size_)
      {
        uint64_t v33 = (std::string *)v57.__r_.__value_.__r.__words[0];
LABEL_52:
        if (v33->__r_.__value_.__s.__data_[0] != 46)
        {
          std::string::push_back(&__dst, 46);
          unsigned __int8 v32 = HIBYTE(v57.__r_.__value_.__r.__words[2]);
        }
      }
    }
    else if (*((unsigned char *)&v57.__r_.__value_.__s + 23))
    {
      uint64_t v33 = &v57;
      goto LABEL_52;
    }
    if ((v32 & 0x80u) == 0) {
      char v34 = &v57;
    }
    else {
      char v34 = (std::string *)v57.__r_.__value_.__r.__words[0];
    }
    if ((v32 & 0x80u) == 0) {
      std::string::size_type size = v32;
    }
    else {
      std::string::size_type size = v57.__r_.__value_.__l.__size_;
    }
    std::string::append(&__dst, (const std::string::value_type *)v34, size);
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v57.__r_.__value_.__l.__data_);
    }
    v53.__r_.__value_.__r.__words[0] = (std::string::size_type)&v60;
    sub_216782F20((void ***)&v53);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_dst = &__dst;
    }
    else {
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    if (*(void *)a2 == -1)
    {
      pxrInternal__aapl__pxrReserved__::TfStringify(*(double *)(a2 + 8), &v53);
      uint64_t v37 = std::string::insert(&v53, 0, "sample time ");
    }
    else
    {
      uint64_t v60 = *(void *)a2;
      sub_2169996F8();
      uint64_t v37 = std::string::insert(&v53, 0, "sample index ");
    }
    long long v39 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
    v57.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v39;
    v37->__r_.__value_.__l.__size_ = 0;
    v37->__r_.__value_.__r.__words[2] = 0;
    v37->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v53.__r_.__value_.__l.__data_);
    }
    uint64_t v40 = &v57;
    if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v40 = (std::string *)v57.__r_.__value_.__r.__words[0];
    }
    uint64_t v41 = __p;
    if (SHIBYTE(v51) < 0) {
      uint64_t v41 = (void **)__p[0];
    }
    if (*((char *)a5 + 23) >= 0) {
      char v42 = a5;
    }
    else {
      char v42 = (uint64_t *)*a5;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v48, (pxrInternal__aapl__pxrReserved__ *)"Unsupported %s '%s' for <%s> at %s in archive '%s'. Using '%s' instead.", v38, v11, v12, p_dst, v40, v41, v42);
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v57.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    goto LABEL_95;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95DB8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95DB8))
  {
    qword_267B95DB0 = 0;
    qword_267B95DA8 = 0;
    qword_267B95DA0 = (uint64_t)&qword_267B95DA8;
    __cxa_atexit((void (*)(void *))sub_2170FAA24, &qword_267B95DA0, &dword_216758000);
    __cxa_guard_release(&qword_267B95DB8);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95DC0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95DC0))
  {
    __cxa_atexit(MEMORY[0x263F8C118], &stru_26798D858, &dword_216758000);
    __cxa_guard_release(&qword_267B95DC0);
  }
  std::mutex::lock(&stru_26798D858);
  LODWORD(v53.__r_.__value_.__l.__data_) = a3;
  if (SHIBYTE(v51) < 0)
  {
    sub_216778F24(&v53.__r_.__value_.__s.__data_[8], __p[0], (unint64_t)__p[1]);
  }
  else
  {
    *(_OWORD *)&v53.__r_.__value_.__r.__words[1] = *(_OWORD *)__p;
    BOOL v54 = v51;
  }
  uint64_t v17 = qword_267B95DA8;
  if (qword_267B95DA8)
  {
    while (1)
    {
      while (1)
      {
        char v18 = (uint64_t *)v17;
        uint64_t v19 = v17 + 32;
        if (!sub_2170FAC84((uint64_t)&v53, v17 + 32)) {
          break;
        }
        uint64_t v17 = *v18;
        char v20 = v18;
        if (!*v18) {
          goto LABEL_23;
        }
      }
      if (!sub_2170FAC84(v19, (uint64_t)&v53)) {
        break;
      }
      uint64_t v17 = v18[1];
      if (!v17)
      {
        char v20 = v18 + 1;
        goto LABEL_23;
      }
    }
    char v43 = 1;
  }
  else
  {
    char v20 = &qword_267B95DA8;
    char v18 = &qword_267B95DA8;
LABEL_23:
    uint64_t v21 = (char *)operator new(0x40uLL);
    v57.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
    v57.__r_.__value_.__l.__size_ = (std::string::size_type)&qword_267B95DA8;
    v57.__r_.__value_.__s.__data_[16] = 0;
    *((_DWORD *)v21 + 8) = v53.__r_.__value_.__l.__data_;
    uint64_t v22 = v21 + 40;
    if (SHIBYTE(v54) < 0)
    {
      sub_216778F24(v22, (void *)v53.__r_.__value_.__l.__size_, v53.__r_.__value_.__r.__words[2]);
      uint64_t v21 = (char *)v57.__r_.__value_.__r.__words[0];
    }
    else
    {
      *(_OWORD *)uint64_t v22 = *(_OWORD *)&v53.__r_.__value_.__r.__words[1];
      *((void *)v21 + 7) = v54;
    }
    v57.__r_.__value_.__s.__data_[16] = 1;
    *(void *)uint64_t v21 = 0;
    *((void *)v21 + 1) = 0;
    *((void *)v21 + 2) = v18;
    *char v20 = (uint64_t)v21;
    if (*(void *)qword_267B95DA0)
    {
      qword_267B95DA0 = *(void *)qword_267B95DA0;
      uint64_t v21 = (char *)*v20;
    }
    sub_21677B3B0((uint64_t *)qword_267B95DA8, (uint64_t *)v21);
    ++qword_267B95DB0;
    v57.__r_.__value_.__r.__words[0] = 0;
    sub_2170FAC34((uint64_t *)&v57);
    char v43 = 0;
  }
  if (SHIBYTE(v54) < 0) {
    operator delete((void *)v53.__r_.__value_.__l.__size_);
  }
  std::mutex::unlock(&stru_26798D858);
  if ((v43 & 1) == 0)
  {
    v53.__r_.__value_.__r.__words[0] = (std::string::size_type)"usdAbc/alembicReader.cpp";
    v53.__r_.__value_.__l.__size_ = (std::string::size_type)"_PostUnsupportedValueWarning";
    v53.__r_.__value_.__r.__words[2] = 231;
    BOOL v54 = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_PostUnsupportedValueWarning(const IScalarProper"
          "ty &, const ISampleSelector &, _WarningType, const std::string &, const std::string &)";
    LOBYTE(v55) = 0;
    long long v45 = __p;
    if (SHIBYTE(v51) < 0) {
      long long v45 = (void **)__p[0];
    }
    if (*((char *)a5 + 23) >= 0) {
      long long v46 = a5;
    }
    else {
      long long v46 = (uint64_t *)*a5;
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v53, (pxrInternal__aapl__pxrReserved__ *)"Unsupported %s detected in archive '%s'. Using '%s' instead.", v44, off_2642946B8[a3], v45, v46);
  }
LABEL_95:
  if (SHIBYTE(v51) < 0) {
    operator delete(__p[0]);
  }
  Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)v52);
}

void sub_2170FA6B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,void *a46,int a47,__int16 a48,char a49,char a50,int a51,__int16 a52,char a53,char a54)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&a33);
  _Unwind_Resume(a1);
}

uint64_t sub_2170FA818()
{
  return 1;
}

uint64_t sub_2170FA820(uint64_t ***a1, uint64_t **a2)
{
  return 1;
}

BOOL sub_2170FA848(void ***a1, uint64_t *a2)
{
  return sub_2170FA858(*a2, **a1);
}

BOOL sub_2170FA858(uint64_t a1, void *a2)
{
  int v4 = strcmp((const char *)(0x8000000217473E3CLL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4) {
    *(unsigned char *)(a1 + 25) = 1;
  }
  else {
    sub_2168D2318(*(void **)(a1 + 8), a2);
  }
  return v4 == 0;
}

void sub_2170FA8D0(int *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v8 = a1;
  unint64_t v9 = "IBasePropertyT::getObject()";
  (*(void (**)(uint64_t *__return_ptr))(**((void **)a1 + 4) + 24))(&v6);
  int v4 = *a1;
  v5[0] = 1;
  v5[2] = v4;
  sub_2167A0084(a2, &v6, v5);
  if (v7) {
    sub_216784EC4(v7);
  }
}

void sub_2170FA968(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, char a13)
{
  if (a12) {
    sub_216784EC4(a12);
  }
  char v16 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64((uint64_t)&a13, (uint64_t)v16);
  }
  else {
    sub_21679F9F4((uint64_t)&a13, 0);
  }
  __cxa_end_catch();
  *(_DWORD *)(v13 + 8) = 2;
  sub_216779094((void *)(v13 + 16), "");
  *(void *)uint64_t v13 = &unk_26C749578;
  *(_OWORD *)(v13 + 40) = 0u;
  *(_OWORD *)(v13 + 56) = 0u;
  *(_OWORD *)(v13 + 72) = 0u;
  *(void *)(v13 + 88) = 0;
  JUMPOUT(0x2170FA954);
}

void sub_2170FAA04(_Unwind_Exception *a1)
{
}

uint64_t sub_2170FAA24(uint64_t a1)
{
  return a1;
}

void sub_2170FAA50(char *__s@<X4>, uint64_t a2@<X1>, uint64_t a3@<X3>, std::string *a4@<X8>)
{
  uint64_t v5 = a2 - a3;
  if (a2 == a3)
  {
    a4->__r_.__value_.__r.__words[0] = 0;
    a4->__r_.__value_.__l.__size_ = 0;
    a4->__r_.__value_.__r.__words[2] = 0;
  }
  else if (v5 == 24)
  {
    if (*(char *)(a2 - 1) < 0)
    {
      uint64_t v22 = *(void **)(a2 - 24);
      unint64_t v23 = *(void *)(a2 - 16);
      sub_216778F24(a4, v22, v23);
    }
    else
    {
      long long v7 = *(_OWORD *)(a2 - 24);
      a4->__r_.__value_.__r.__words[2] = *(void *)(a2 - 8);
      *(_OWORD *)&a4->__r_.__value_.__l.__data_ = v7;
    }
  }
  else
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 3);
    a4->__r_.__value_.__r.__words[0] = 0;
    a4->__r_.__value_.__l.__size_ = 0;
    a4->__r_.__value_.__r.__words[2] = 0;
    uint64_t v12 = a2;
    do
    {
      if (*(char *)(v12 - 1) < 0) {
        uint64_t v13 = *(void *)(v12 - 16);
      }
      else {
        uint64_t v13 = *(unsigned __int8 *)(v12 - 1);
      }
      v12 -= 24;
      v10 += v13;
    }
    while (v12 != a3);
    size_t v14 = strlen(__s);
    std::string::reserve(a4, v10 + v14 * (v11 - 1));
    int v15 = *(char *)(a2 - 1);
    if (v15 >= 0) {
      char v16 = (const std::string::value_type *)(a2 - 24);
    }
    else {
      char v16 = *(const std::string::value_type **)(a2 - 24);
    }
    if (v15 >= 0) {
      std::string::size_type v17 = *(unsigned __int8 *)(a2 - 1);
    }
    else {
      std::string::size_type v17 = *(void *)(a2 - 16);
    }
    std::string::append(a4, v16, v17);
    for (uint64_t i = a2 - 48; i + 24 != a3; i -= 24)
    {
      std::string::append(a4, __s);
      int v19 = *(char *)(i + 23);
      if (v19 >= 0) {
        char v20 = (const std::string::value_type *)i;
      }
      else {
        char v20 = *(const std::string::value_type **)i;
      }
      if (v19 >= 0) {
        std::string::size_type v21 = *(unsigned __int8 *)(i + 23);
      }
      else {
        std::string::size_type v21 = *(void *)(i + 8);
      }
      std::string::append(a4, v20, v21);
    }
  }
}

void sub_2170FABB8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_2170FABD8(char *a1)
{
  if (a1)
  {
    sub_2170FABD8(*(void *)a1);
    sub_2170FABD8(*((void *)a1 + 1));
    if (a1[63] < 0) {
      operator delete(*((void **)a1 + 5));
    }
    operator delete(a1);
  }
}

uint64_t *sub_2170FAC34(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16) && *(char *)(v2 + 63) < 0) {
      operator delete(*(void **)(v2 + 40));
    }
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t sub_2170FAC84(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 < *(_DWORD *)a2) {
    return 1;
  }
  if (*(_DWORD *)a2 < *(_DWORD *)a1) {
    return 0;
  }
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v3 = a2 + 8;
  uint64_t v4 = v5;
  int v6 = *(char *)(v3 + 23);
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v7 = a1 + 8;
  uint64_t v8 = v9;
  int v10 = *(char *)(v7 + 23);
  if (v10 >= 0) {
    size_t v11 = *(unsigned __int8 *)(v7 + 23);
  }
  else {
    size_t v11 = *(void *)(v7 + 8);
  }
  if (v10 < 0) {
    uint64_t v7 = v8;
  }
  if (v6 >= 0) {
    size_t v12 = *(unsigned __int8 *)(v3 + 23);
  }
  else {
    size_t v12 = *(void *)(v3 + 8);
  }
  if (v6 < 0) {
    uint64_t v3 = v4;
  }
  if (v12 >= v11) {
    size_t v13 = v11;
  }
  else {
    size_t v13 = v12;
  }
  int v14 = memcmp((const void *)v7, (const void *)v3, v13);
  if (v14) {
    return v14 < 0;
  }
  else {
    return v11 < v12;
  }
}

void sub_2170FAD20(uint64_t **a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v90 = *MEMORY[0x263EF8340];
  if (*(char *)(a3 + 39) < 0)
  {
    if (*(void *)(a3 + 24)) {
      return;
    }
  }
  else if (*(unsigned char *)(a3 + 39))
  {
    return;
  }
  if (*(void *)(a3 + 40))
  {
    uint64_t PropertyHeader = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(a3 + 8);
    if (PropertyHeader)
    {
      uint64_t v7 = PropertyHeader;
      int v8 = *(_DWORD *)(PropertyHeader + 24);
      if (v8)
      {
        v75[0] = 0;
        v75[1] = 0;
        int v76 = 0;
        if (v8 == 1)
        {
          if (*(char *)(a3 + 39) < 0)
          {
            if (*(void *)(a3 + 24)) {
              goto LABEL_48;
            }
          }
          else if (*(unsigned char *)(a3 + 39))
          {
            goto LABEL_48;
          }
          if (*(void *)(a3 + 40))
          {
            uint64_t v16 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(a3 + 8);
            if (v16)
            {
              if (*(_DWORD *)(v16 + 24) == 1)
              {
                LODWORD(__dst[0]) = 0;
                LODWORD(__dst[1]) = 0;
                Alembic::Abc::v12::IScalarProperty::IScalarProperty(&v80, a3 + 8, a3 + 56, __dst);
                goto LABEL_49;
              }
            }
          }
LABEL_48:
          LODWORD(v80) = 2;
          sub_216779094(&v81, "");
          uint64_t v84 = 0;
          uint64_t v85 = 0;
LABEL_49:
          memset(v77, 0, 24);
          if (SHIBYTE(v83) < 0)
          {
            if (!v82) {
              goto LABEL_62;
            }
          }
          else if (!HIBYTE(v83))
          {
LABEL_62:
            if (v84)
            {
              Alembic::Abc::v12::IScalarProperty::getTimeSampling((Alembic::Abc::v12::IScalarProperty *)&v80, __dst);
              uint64_t NumSamples = Alembic::Abc::v12::IScalarProperty::getNumSamples((Alembic::Abc::v12::IScalarProperty *)&v80);
              if (Alembic::Abc::v12::IScalarProperty::isConstant((Alembic::Abc::v12::IScalarProperty *)&v80)) {
                uint64_t v19 = NumSamples != 0;
              }
              else {
                uint64_t v19 = NumSamples;
              }
              if (v19)
              {
                for (uint64_t i = 0; i != v19; ++i)
                {
                  double SampleTime = Alembic::AbcCoreAbstract::v12::TimeSampling::getSampleTime((double **)__dst[0], i);
                  double v22 = SampleTime;
                  unint64_t v23 = (char *)v77[1];
                  if (v77[1] >= v77[2])
                  {
                    long long v25 = (char *)v77[0];
                    int64_t v26 = ((char *)v77[1] - (char *)v77[0]) >> 3;
                    unint64_t v27 = v26 + 1;
                    if ((unint64_t)(v26 + 1) >> 61) {
                      sub_21677CB10();
                    }
                    int64_t v28 = (char *)v77[2] - (char *)v77[0];
                    if (((char *)v77[2] - (char *)v77[0]) >> 2 > v27) {
                      unint64_t v27 = v28 >> 2;
                    }
                    if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v29 = v27;
                    }
                    if (v29)
                    {
                      uint64_t v30 = (char *)sub_21677CB28((uint64_t)&v77[2], v29);
                      long long v25 = (char *)v77[0];
                      unint64_t v23 = (char *)v77[1];
                    }
                    else
                    {
                      uint64_t v30 = 0;
                    }
                    long long v31 = (double *)&v30[8 * v26];
                    *long long v31 = v22;
                    int64x2_t v24 = v31 + 1;
                    while (v23 != v25)
                    {
                      uint64_t v32 = *((void *)v23 - 1);
                      v23 -= 8;
                      *((void *)v31-- - 1) = v32;
                    }
                    v77[0] = v31;
                    v77[1] = v24;
                    v77[2] = &v30[8 * v29];
                    if (v25) {
                      operator delete(v25);
                    }
                  }
                  else
                  {
                    *(double *)v77[1] = SampleTime;
                    int64x2_t v24 = v23 + 8;
                  }
                  v77[1] = v24;
                }
              }
              if (__dst[1]) {
                sub_216784EC4((std::__shared_weak_count *)__dst[1]);
              }
            }
          }
          uint64_t v65 = v77[0];
          *(_OWORD *)uint64_t v75 = *(_OWORD *)v77;
          int v76 = v77[2];
          memset(v77, 0, 24);
          Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v80);
LABEL_115:
          int v48 = *(_DWORD *)(v7 + 24);
          int v49 = *(_DWORD *)(v7 + 56);
          char v50 = *(unsigned char *)(v7 + 60);
          if (!v48)
          {
            int v49 = 127;
            char v50 = 0;
          }
          LODWORD(__dst[0]) = v49;
          BYTE4(__dst[0]) = v50;
          BYTE5(__dst[0]) = v48 == 2;
          Converter = (void *)pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::FindConverter((pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion *)(*a1)[12], (const pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicType *)__dst);
          if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::_IsEmpty((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Converter))
          {
            unint64_t v80 = (unint64_t)"usdAbc/alembicReader.cpp";
            uint64_t v81 = "AddOutOfSchemaProperty";
            uint64_t v82 = 2115;
            uint64_t v83 = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_PrimReaderContext::AddOutOfSchemaProper"
                  "ty(const std::string &, const AlembicProperty &)";
            LOBYTE(v84) = 0;
            if ((a2[23] & 0x80u) != 0) {
              a2 = *(unsigned __int8 **)a2;
            }
            pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicType::Stringify((pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicType *)__dst, v51, v52);
            int v53 = SHIBYTE(v77[2]);
            BOOL v54 = (void **)v77[0];
            Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 19));
            std::string v57 = v77;
            if (v53 < 0) {
              std::string v57 = v54;
            }
            pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v80, (pxrInternal__aapl__pxrReserved__ *)"No conversion for \"%s\" of type \"%s\" at <%s>", v56, a2, v57, Text);
            if (SHIBYTE(v77[2]) < 0) {
              operator delete(v77[0]);
            }
            uint64_t v58 = v65;
          }
          else
          {
            uint64_t v59 = (unsigned char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ABC_WRITE_UV_AS_ST_TEXCOORD2FARRAY);
            if (!v59) {
              pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
            }
            if (!*v59) {
              goto LABEL_133;
            }
            uint64_t v60 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
            if (!v60) {
              uint64_t v60 = sub_2170FC394(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
            }
            if (pxrInternal__aapl__pxrReserved__::TfToken::operator==((pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *)((char *)v60 + 40), a2))
            {
              long long v61 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
              if (!v61) {
                long long v61 = sub_2170FC394(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
              }
              unint64_t v62 = sub_2170F60AC(a1, (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *)((char *)v61 + 56), &Converter, (pxrInternal__aapl__pxrReserved__::TfToken *)(v7 + 32), (uint64_t)v75, 1);
            }
            else
            {
LABEL_133:
              pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v80);
              unint64_t v62 = sub_2170F60AC(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v80, &Converter, (pxrInternal__aapl__pxrReserved__::TfToken *)(v7 + 32), (uint64_t)v75, 1);
              if ((v80 & 7) != 0) {
                atomic_fetch_add_explicit((atomic_uint *volatile)(v80 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
              }
            }
            uint64_t v63 = pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::GetToUsdConverter((void *)(*a1)[12], (uint64_t)__dst, (void **)v62);
            LODWORD(v77[0]) = *(_DWORD *)(a3 + 8);
            if (*(char *)(a3 + 39) < 0)
            {
              sub_216778F24(&v77[1], *(void **)(a3 + 16), *(void *)(a3 + 24));
            }
            else
            {
              *(_OWORD *)&v77[1] = *(_OWORD *)(a3 + 16);
              v77[3] = *(void **)(a3 + 32);
            }
            uint64_t v64 = *(void *)(a3 + 48);
            uint64_t v78 = *(void *)(a3 + 40);
            uint64_t v79 = v64;
            if (v64) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v64 + 8), 1uLL, memory_order_relaxed);
            }
            sub_2170FBD1C((uint64_t)&v80, (uint64_t)v63, (uint64_t)v77, (long long *)(a3 + 56));
            sub_2170FBBD4((void *)v62 + 8, (uint64_t)&v80);
            if (v89 < 0) {
              operator delete(v88);
            }
            Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v84);
            sub_2170FBE90(&v80);
            Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v77);
            uint64_t v58 = v75[0];
          }
          if (v58)
          {
            v75[1] = v58;
            operator delete(v58);
          }
          return;
        }
        if (*(char *)(a3 + 39) < 0)
        {
          if (*(void *)(a3 + 24)) {
            goto LABEL_57;
          }
        }
        else if (*(unsigned char *)(a3 + 39))
        {
          goto LABEL_57;
        }
        if (*(void *)(a3 + 40))
        {
          uint64_t v17 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(a3 + 8);
          if (v17)
          {
            if (*(_DWORD *)(v17 + 24) == 2)
            {
              LODWORD(__dst[0]) = 0;
              LODWORD(__dst[1]) = 0;
              LODWORD(Converter) = 0;
              int v71 = 0;
              Alembic::Abc::v12::IArrayProperty::IArrayProperty(&v80, a3 + 8, a3 + 56, __dst, &Converter);
              goto LABEL_58;
            }
          }
        }
LABEL_57:
        LODWORD(v80) = 2;
        sub_216779094(&v81, "");
        uint64_t v84 = 0;
        uint64_t v85 = 0;
LABEL_58:
        memset(v77, 0, 24);
        if (SHIBYTE(v83) < 0)
        {
          if (!v82) {
            goto LABEL_89;
          }
        }
        else if (!HIBYTE(v83))
        {
LABEL_89:
          if (v84)
          {
            Alembic::Abc::v12::IArrayProperty::getTimeSampling((Alembic::Abc::v12::IArrayProperty *)&v80, __dst);
            uint64_t v33 = Alembic::Abc::v12::IArrayProperty::getNumSamples((Alembic::Abc::v12::IArrayProperty *)&v80);
            if (Alembic::Abc::v12::IArrayProperty::isConstant((Alembic::Abc::v12::IArrayProperty *)&v80)) {
              uint64_t v34 = v33 != 0;
            }
            else {
              uint64_t v34 = v33;
            }
            if (v34)
            {
              for (uint64_t j = 0; j != v34; ++j)
              {
                double v36 = Alembic::AbcCoreAbstract::v12::TimeSampling::getSampleTime((double **)__dst[0], j);
                double v37 = v36;
                uint64_t v38 = (char *)v77[1];
                if (v77[1] >= v77[2])
                {
                  uint64_t v40 = (char *)v77[0];
                  int64_t v41 = ((char *)v77[1] - (char *)v77[0]) >> 3;
                  unint64_t v42 = v41 + 1;
                  if ((unint64_t)(v41 + 1) >> 61) {
                    sub_21677CB10();
                  }
                  int64_t v43 = (char *)v77[2] - (char *)v77[0];
                  if (((char *)v77[2] - (char *)v77[0]) >> 2 > v42) {
                    unint64_t v42 = v43 >> 2;
                  }
                  if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v44 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v44 = v42;
                  }
                  if (v44)
                  {
                    long long v45 = (char *)sub_21677CB28((uint64_t)&v77[2], v44);
                    uint64_t v40 = (char *)v77[0];
                    uint64_t v38 = (char *)v77[1];
                  }
                  else
                  {
                    long long v45 = 0;
                  }
                  long long v46 = (double *)&v45[8 * v41];
                  *long long v46 = v37;
                  long long v39 = v46 + 1;
                  while (v38 != v40)
                  {
                    uint64_t v47 = *((void *)v38 - 1);
                    v38 -= 8;
                    *((void *)v46-- - 1) = v47;
                  }
                  v77[0] = v46;
                  v77[1] = v39;
                  v77[2] = &v45[8 * v44];
                  if (v40) {
                    operator delete(v40);
                  }
                }
                else
                {
                  *(double *)v77[1] = v36;
                  long long v39 = v38 + 8;
                }
                v77[1] = v39;
              }
            }
            if (__dst[1]) {
              sub_216784EC4((std::__shared_weak_count *)__dst[1]);
            }
          }
        }
        uint64_t v65 = v77[0];
        *(_OWORD *)uint64_t v75 = *(_OWORD *)v77;
        int v76 = v77[2];
        memset(v77, 0, 24);
        Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v80);
        goto LABEL_115;
      }
      if (*(char *)(a3 + 39) < 0)
      {
        if (*(void *)(a3 + 24)) {
          goto LABEL_22;
        }
      }
      else if (*(unsigned char *)(a3 + 39))
      {
        goto LABEL_22;
      }
      if (*(void *)(a3 + 40))
      {
        uint64_t v9 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(a3 + 8);
        if (v9)
        {
          if (!*(_DWORD *)(v9 + 24))
          {
            LODWORD(v80) = 0;
            LODWORD(v81) = 0;
            Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v77, a3 + 8, a3 + 56, &v80);
            goto LABEL_23;
          }
        }
      }
LABEL_22:
      LODWORD(v77[0]) = 2;
      sub_216779094(&v77[1], "");
      uint64_t v78 = 0;
      uint64_t v79 = 0;
LABEL_23:
      v75[1] = 0;
      int v76 = 0;
      v75[0] = &v75[1];
      uint64_t NumProperties = Alembic::Abc::v12::ICompoundProperty::getNumProperties((Alembic::Abc::v12::ICompoundProperty *)v77);
      if (NumProperties)
      {
        for (uint64_t k = 0; k != NumProperties; ++k)
        {
          size_t v12 = (const void **)Alembic::Abc::v12::ICompoundProperty::getPropertyHeader((Alembic::Abc::v12::ICompoundProperty *)v77);
          sub_21680EE0C((uint64_t **)v75, v12, (uint64_t)v12);
        }
      }
      uint64_t v13 = Alembic::Abc::v12::ICompoundProperty::getNumProperties((Alembic::Abc::v12::ICompoundProperty *)v77);
      if (v13)
      {
        for (uint64_t m = 0; m != v13; ++m)
        {
          uint64_t v15 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader((Alembic::Abc::v12::ICompoundProperty *)v77);
          if (*(char *)(v15 + 23) < 0)
          {
            sub_216778F24(__dst, *(void **)v15, *(void *)(v15 + 8));
          }
          else
          {
            *(_OWORD *)std::string __dst = *(_OWORD *)v15;
            uint64_t v74 = *(void *)(v15 + 16);
          }
          sub_2170FB8C4((uint64_t)__dst, " .", (uint64_t)v75, (uint64_t)&Converter);
          pxrInternal__aapl__pxrReserved__::SdfPath::JoinIdentifier((const void **)a2, (uint64_t)&Converter, (uint64_t)__p);
          pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v80);
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 19), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v80, &v66);
          if ((v80 & 7) != 0) {
            atomic_fetch_add_explicit((atomic_uint *volatile)(v80 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
          }
          sub_2170F8480((uint64_t)&v80, &v66, (long long *)__dst, (uint64_t)v77);
          sub_2170FAD20(a1, __p, &v80);
          if (v87 < 0) {
            operator delete(v86);
          }
          Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v81);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v80 + 1);
          sub_21697C414(&v80);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v67);
          sub_21697C414(&v66);
          if (v69 < 0) {
            operator delete(__p[0]);
          }
          if (v72 < 0) {
            operator delete(Converter);
          }
          if (SHIBYTE(v74) < 0) {
            operator delete(__dst[0]);
          }
        }
      }
      sub_21678A498((uint64_t)v75, (char *)v75[1]);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v77);
    }
  }
}

void sub_2170FB6F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (__p) {
    operator delete(__p);
  }
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(v45 - 216));
  _Unwind_Resume(a1);
}

void sub_2170FB8C4(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsValidIdentifier(a1))
  {
    int v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&__p);
    if ((__p.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) != 0) {
      EmptyString = (uint64_t *)((__p.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) + 16);
    }
    else {
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
    }
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_216778F24((unsigned char *)a4, (void *)*EmptyString, EmptyString[1]);
    }
    else
    {
      long long v10 = *(_OWORD *)EmptyString;
      *(void *)(a4 + 16) = EmptyString[2];
      *(_OWORD *)a4 = v10;
    }
    if ((__p.__r_.__value_.__s.__data_[0] & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(__p.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    return;
  }
  if (*(char *)(a1 + 23) < 0) {
    sub_216778F24(&__p, *(void **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string __p = *(std::string *)a1;
  }
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    pxrInternal__aapl__pxrReserved__::TfStringTrimLeft(a2, &__p, &__str);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = __str;
    if ((pxrInternal__aapl__pxrReserved__::SdfPath::IsValidIdentifier((uint64_t)&__p) & 1) == 0)
    {
      pxrInternal__aapl__pxrReserved__::TfMakeValidIdentifier((unsigned __int8 *)&__p, &__str);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = __str;
    }
  }
  else
  {
    std::string::operator=(&__p, 95);
  }
  if (a3 + 8 != sub_21678C2D8(a3, (const void **)&__p.__r_.__value_.__l.__data_))
  {
    int v14 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s_%d", v12, v13, v14, 1);
    uint64_t v15 = 2;
    while (a3 + 8 != sub_21678C2D8(a3, (const void **)&__str.__r_.__value_.__l.__data_))
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s_%d", v16, v17, p_p, v15);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      std::string __str = v20;
      uint64_t v15 = (v15 + 1);
    }
    std::string::operator=(&__p, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) == 4)
    {
      uint64_t v19 = &__p;
      goto LABEL_42;
    }
LABEL_43:
    *(std::string *)a4 = __p;
    return;
  }
  if (__p.__r_.__value_.__l.__size_ != 4) {
    goto LABEL_43;
  }
  uint64_t v19 = (std::string *)__p.__r_.__value_.__r.__words[0];
LABEL_42:
  if (LODWORD(v19->__r_.__value_.__l.__data_) != 1936482678) {
    goto LABEL_43;
  }
  sub_216779094((void *)a4, "");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_2170FBB68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_2170FBBD4(void *a1, uint64_t a2)
{
  void v10[4] = *MEMORY[0x263EF8340];
  sub_2170FBF14((uint64_t)v6, a2);
  sub_216D467D8((uint64_t)v7, a2 + 32);
  *(_OWORD *)std::string __p = *(_OWORD *)(a2 + 80);
  uint64_t v9 = *(void *)(a2 + 96);
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 80) = 0;
  uint64_t v4 = (void *)sub_2170FBF94((uint64_t)v10, (uint64_t)v6);
  sub_2170F8214(v4, a1);
  sub_2170F5BA0(v10);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v7);
  sub_2170FBE90(v6);
  return a1;
}

void sub_2170FBCAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_2170FBCD0((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_2170FBCD0(uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 32));

  return sub_2170FBE90((void *)a1);
}

uint64_t sub_2170FBD1C(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4)
{
  uint64_t v7 = sub_2170FBD90(a1, a2);
  sub_2170FBE28(v7 + 32, a3, a4);
  return a1;
}

void sub_2170FBD7C(_Unwind_Exception *a1)
{
  sub_2170FBE90(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2170FBD90(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_2170FBE28(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v5 = sub_216D467D8(a1, a2) + 48;
  if (*((char *)a3 + 23) < 0)
  {
    sub_216778F24((unsigned char *)v5, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v6 = *a3;
    *(void *)(v5 + 16) = *((void *)a3 + 2);
    *(_OWORD *)uint64_t v5 = v6;
  }
  return a1;
}

void sub_2170FBE7C(_Unwind_Exception *a1)
{
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v1);
  _Unwind_Resume(a1);
}

void *sub_2170FBE90(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_2170FBF14(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

uint64_t sub_2170FBF94(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = 0;
  uint64_t v4 = operator new(0x70uLL);
  *uint64_t v4 = &unk_26C7734A8;
  sub_2170FC214((uint64_t)(v4 + 1), a2);
  *(void *)(a1 + 24) = v4;
  return a1;
}

void sub_2170FBFFC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2170FC010(uint64_t a1)
{
  *(void *)a1 = &unk_26C7734A8;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 40));
  sub_2170FBE90((void *)(a1 + 8));
  return a1;
}

void sub_2170FC074(void **a1)
{
  *a1 = &unk_26C7734A8;
  if (*((char *)a1 + 111) < 0) {
    operator delete(a1[11]);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 5));
  sub_2170FBE90(a1 + 1);

  operator delete(a1);
}

void *sub_2170FC0E8(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x70uLL);
  *uint64_t v2 = &unk_26C7734A8;
  sub_2170FC278((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_2170FC13C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2170FC150(uint64_t a1, void *a2)
{
  *a2 = &unk_26C7734A8;
  return sub_2170FC278((uint64_t)(a2 + 1), a1 + 8);
}

void *sub_2170FC17C(uint64_t a1)
{
  return sub_2170FBCD0(a1 + 8);
}

void sub_2170FC184(void *a1)
{
  sub_2170FBCD0((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t sub_2170FC1C0(uint64_t a1)
{
  return sub_2170FC330(a1 + 8);
}

uint64_t sub_2170FC1C8(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C773578)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2170FC208()
{
  return &unk_26C773578;
}

uint64_t sub_2170FC214(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2170FBF14(a1, a2);
  sub_216D467D8(v4 + 32, a2 + 32);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = v5;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 80) = 0;
  return a1;
}

void sub_2170FC264(_Unwind_Exception *a1)
{
  sub_2170FBE90(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2170FC278(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_2170FBD90(a1, a2);
  sub_2170FC2C4(v4 + 32, a2 + 32);
  return a1;
}

void sub_2170FC2B0(_Unwind_Exception *a1)
{
  sub_2170FBE90(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2170FC2C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_216D467D8(a1, a2) + 48;
  if (*(char *)(a2 + 71) < 0)
  {
    sub_216778F24((unsigned char *)v4, *(void **)(a2 + 48), *(void *)(a2 + 56));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 48);
    *(void *)(v4 + 16) = *(void *)(a2 + 64);
    *(_OWORD *)uint64_t v4 = v5;
  }
  return a1;
}

void sub_2170FC31C(_Unwind_Exception *a1)
{
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2170FC330(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  if (!v1) {
    sub_21683A7CC();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *sub_2170FC394(atomic_ullong *a1)
{
  uint64_t result = sub_2170FC3DC();
  uint64_t v3 = 0;
  atomic_compare_exchange_strong(a1, (unint64_t *)&v3, (unint64_t)result);
  if (v3)
  {
    if (result)
    {
      pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType::~UsdAbcPropertyNames_StaticTokenType(result);
      operator delete(v4);
    }
    return (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *)atomic_load((unint64_t *)a1);
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *sub_2170FC3DC()
{
  uint64_t v0 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *)operator new(0x58uLL);
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType::UsdAbcPropertyNames_StaticTokenType(v0);
  return v0;
}

void sub_2170FC40C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_2170FC420()
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v0 = (char *)atomic_load((unint64_t *)&qword_267B95DC8);
  if (!v0)
  {
    uint64_t v0 = (char *)operator new(0x28uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0, "transform", 0);
    uint64_t v2 = v0 + 8;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0 + 8, "xformOp:transform", 0);
    uint64_t v3 = *(atomic_uint **)v0;
    uint64_t v15 = v3;
    if ((v3 & 7) != 0)
    {
      uint64_t v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v15 = v4;
      }
    }
    long long v5 = (atomic_uint *)*v2;
    uint64_t v16 = v5;
    if ((v5 & 7) != 0)
    {
      long long v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v16 = v6;
      }
    }
    *((void *)v0 + 2) = 0;
    *((void *)v0 + 3) = 0;
    *((void *)v0 + 4) = 0;
    uint64_t v13 = (void **)(v0 + 16);
    char v14 = 0;
    uint64_t v7 = (char *)operator new(0x10uLL);
    uint64_t v8 = 0;
    *((void *)v0 + 2) = v7;
    *((void *)v0 + 3) = v7;
    *((void *)v0 + 4) = v7 + 16;
    do
    {
      uint64_t v9 = (&v15)[v8];
      *(void *)&v7[v8 * 8] = v9;
      if ((v9 & 7) != 0
        && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
      {
        *(void *)&v7[v8 * 8] &= 0xFFFFFFFFFFFFFFF8;
      }
      ++v8;
    }
    while (v8 != 2);
    *((void *)v0 + 3) = v7 + 16;
    for (uint64_t i = 1; i != -1; --i)
    {
      size_t v11 = (&v15)[i];
      if ((v11 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
    }
    uint64_t v12 = 0;
    atomic_compare_exchange_strong(&qword_267B95DC8, (unint64_t *)&v12, (unint64_t)v0);
    if (v12)
    {
      uint64_t v13 = (void **)(v0 + 16);
      sub_216889A04(&v13);
      if ((*v2 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*(void *)v0 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v0 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v0);
      return atomic_load((unint64_t *)&qword_267B95DC8);
    }
  }
  return (unint64_t)v0;
}

void sub_2170FC600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  sub_216889A04(&a10);
  uint64_t v15 = 8;
  while (1)
  {
    uint64_t v16 = *(void *)(&a12 + v15);
    if ((v16 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v15 -= 8;
    if (v15 == -8)
    {
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      operator delete(v12);
      _Unwind_Resume(a1);
    }
  }
}

void sub_2170FC688(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 448)) {
    sub_2167877AC(a1 + 424, *(void **)(a1 + 432));
  }
  *(void *)a1 = &unk_26C7735A0;
  *(void *)(a1 + 96) = &unk_26C7735D8;
  uint64_t v3 = (void **)(a1 + 376);
  sub_216802314(&v3);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 312));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 264));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 216));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 208);
  if (v2) {
    sub_216784EC4(v2);
  }
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 152));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 104));
  Alembic::Abc::v12::IObject::~IObject((void **)a1);
}

uint64_t sub_2170FC74C(uint64_t **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, void *a3, uint64_t a4)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  sub_2168EE4C4(v15, (void *)a4);
  sub_2167898D0(v16, (const void ***)(a4 + 16));
  uint64_t v19 = 0;
  uint64_t v8 = operator new(0x30uLL);
  *uint64_t v8 = &unk_26C7737D0;
  sub_2170FF704(v8 + 1, (uint64_t)v15);
  uint64_t v19 = v8;
  sub_2168EE4C4(v13, (void *)a4);
  sub_2167898D0(v14, (const void ***)(a4 + 16));
  std::string::size_type v21 = 0;
  uint64_t v9 = operator new(0x30uLL);
  *uint64_t v9 = &unk_26C773850;
  sub_2170FF704(v9 + 1, (uint64_t)v13);
  std::string::size_type v21 = v9;
  long long v10 = sub_2170F5EA4(a1, a2, a3, (uint64_t)v17, (uint64_t)v20);
  sub_2170F5FA4(v20);
  sub_2167877AC((uint64_t)v14, (void *)v14[1]);
  sub_2168EE084((uint64_t)v13);
  sub_2170F6028(v17);
  sub_2167877AC((uint64_t)v16, (void *)v16[1]);
  sub_2168EE084((uint64_t)v15);
  sub_2168EE4C4(v17, (void *)a4);
  sub_2167898D0(&v18, (const void ***)(a4 + 16));
  size_t v11 = operator new(0x30uLL);
  void *v11 = &unk_26C7738C0;
  sub_2170FF704(v11 + 1, (uint64_t)v17);
  std::string::size_type v21 = v11;
  sub_2170F8214(v20, (void *)v10 + 8);
  sub_2170F5BA0(v20);
  sub_2167877AC((uint64_t)&v18, v19);
  uint64_t result = sub_2168EE084((uint64_t)v17);
  *((_WORD *)v10 + 28) = 256;
  return result;
}

void sub_2170FC950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  operator delete(v19);
  sub_2170FCA04((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void sub_2170FC9D4()
{
  operator delete(v0);
  JUMPOUT(0x2170FC9C4);
}

void sub_2170FC9E4()
{
}

void sub_2170FC9EC()
{
}

void sub_2170FC9FC()
{
}

uint64_t sub_2170FCA04(uint64_t a1)
{
  sub_2167877AC(a1 + 16, *(void **)(a1 + 24));

  return sub_2168EE084(a1);
}

void sub_2170FCA44(uint64_t a1)
{
  *(void *)a1 = &unk_26C7735A0;
  *(void *)(a1 + 96) = &unk_26C7735D8;
  uint64_t v3 = (void **)(a1 + 376);
  sub_216802314(&v3);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 312));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 264));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 216));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 208);
  if (v2) {
    sub_216784EC4(v2);
  }
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 152));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 104));
  Alembic::Abc::v12::IObject::~IObject((void **)a1);
}

uint64_t sub_2170FCAF4(uint64_t a1, int a2)
{
  if (a2 == 2)
  {
    sub_216779094(v34, "schema");
    sub_21679F2AC(a1, v34, &v36);
    if (((char)v38 & 0x80000000) == 0)
    {
      BOOL v10 = v38 == 16 && v36 == (void *)0x5F6D6F6547636241 && v37 == 0x33765F6D726F6658;
      goto LABEL_72;
    }
    size_t v11 = v36;
    BOOL v10 = v37 == 16 && *v36 == 0x5F6D6F6547636241 && v36[1] == 0x33765F6D726F6658;
    goto LABEL_71;
  }
  if (a2 == 1) {
    return 1;
  }
  if (a2) {
    return 0;
  }
  sub_216779094(v34, "schemaObjTitle");
  sub_21679F2AC(a1, v34, &v36);
  sub_2170FCE50(&v33);
  uint64_t v3 = v38;
  if ((v38 & 0x80u) == 0) {
    size_t v4 = v38;
  }
  else {
    size_t v4 = v37;
  }
  std::string::size_type size = HIBYTE(v33.__r_.__value_.__r.__words[2]);
  char v6 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v33.__r_.__value_.__l.__size_;
  }
  if (v4 != size)
  {
LABEL_39:
    sub_216779094(v28, "schema");
    sub_21679F2AC(a1, (const void **)v28, &__s1);
    sub_2170FCE50(&__p);
    unsigned __int8 v13 = v32;
    if ((v32 & 0x80u) == 0) {
      size_t v14 = v32;
    }
    else {
      size_t v14 = __n;
    }
    std::string::size_type v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    int v16 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v15 = __p.__r_.__value_.__l.__size_;
    }
    if (v14 != v15)
    {
      BOOL v10 = 0;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_63;
      }
      goto LABEL_58;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((char)v32 < 0)
    {
      BOOL v10 = memcmp(__s1, p_p, __n) == 0;
    }
    else
    {
      if (!v32)
      {
        BOOL v10 = 1;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_63:
          if ((v13 & 0x80) != 0) {
            operator delete(__s1);
          }
          if (v29 < 0) {
            operator delete(v28[0]);
          }
          if ((*((unsigned char *)&v33.__r_.__value_.__s + 23) & 0x80) == 0) {
            goto LABEL_69;
          }
          goto LABEL_68;
        }
LABEL_58:
        operator delete(__p.__r_.__value_.__l.__data_);
        unsigned __int8 v13 = v32;
        goto LABEL_63;
      }
      uint64_t v18 = v32 - 1;
      p_s1 = &__s1;
      do
      {
        int v21 = *(unsigned __int8 *)p_s1;
        p_s1 = (void **)((char *)p_s1 + 1);
        int v20 = v21;
        int v23 = p_p->__r_.__value_.__s.__data_[0];
        p_p = (std::string *)((char *)p_p + 1);
        int v22 = v23;
        BOOL v25 = v18-- != 0;
        BOOL v10 = v20 == v22;
      }
      while (v20 == v22 && v25);
    }
    if ((v16 & 0x80000000) == 0) {
      goto LABEL_63;
    }
    goto LABEL_58;
  }
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v7 = &v33;
  }
  else {
    uint64_t v7 = (std::string *)v33.__r_.__value_.__r.__words[0];
  }
  if ((v38 & 0x80) != 0)
  {
    if (memcmp(v36, v7, v37)) {
      goto LABEL_39;
    }
  }
  else if (v38)
  {
    uint64_t v8 = (unsigned __int8 *)&v36;
    while (*v8 == v7->__r_.__value_.__s.__data_[0])
    {
      ++v8;
      uint64_t v7 = (std::string *)((char *)v7 + 1);
      if (!--v3) {
        goto LABEL_59;
      }
    }
    goto LABEL_39;
  }
LABEL_59:
  BOOL v10 = 1;
  if (v6 < 0) {
LABEL_68:
  }
    operator delete(v33.__r_.__value_.__l.__data_);
LABEL_69:
  if (((char)v38 & 0x80000000) == 0) {
    goto LABEL_72;
  }
  size_t v11 = v36;
LABEL_71:
  operator delete(v11);
LABEL_72:
  if (v35 < 0) {
    operator delete((void *)v34[0]);
  }
  return v10;
}

void sub_2170FCDD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (*(char *)(v29 - 33) < 0) {
    operator delete(*(void **)(v29 - 56));
  }
  if (*(char *)(v29 - 57) < 0) {
    operator delete(*(void **)(v29 - 80));
  }
  _Unwind_Resume(exception_object);
}

void sub_2170FCE50(std::string *a1@<X8>)
{
  sub_216779094(&v5, ":");
  uint64_t v2 = std::string::insert(&v5, 0, "AbcGeom_Xform_v3");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v6.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v6.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  size_t v4 = std::string::append(&v6, ".xform");
  *a1 = *v4;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
}

void sub_2170FCEFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

Alembic::Abc::v12::IObject *sub_2170FCF30(Alembic::Abc::v12::IObject *a1, uint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v9 = (void *)sub_2167A2320((uint64_t)a1, a2);
  *uint64_t v9 = &unk_26C7735A0;
  uint64_t v10 = (uint64_t)(v9 + 12);
  sub_2170FD6DC((uint64_t)(v9 + 12));
  uint64_t v11 = sub_2167A2320((uint64_t)v47, a2);
  LODWORD(v33) = 0;
  int v34 = 0;
  LODWORD(__p) = 0;
  LODWORD(v31) = 0;
  *((_DWORD *)a1 + 2) = sub_2167A2218(v11, a4, a5, &v33, &__p);
  Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)v47);
  uint64_t v45 = (_DWORD *)((char *)a1 + 8);
  long long v46 = "ISchemaObject::ISchemaObject( wrapflag)";
  uint64_t Header = Alembic::Abc::v12::IObject::getHeader(a1);
  LODWORD(v33) = 0;
  int v34 = 0;
  LODWORD(__p) = 0;
  LODWORD(v31) = 0;
  int v13 = sub_216807C40(a4, a5, &v33, &__p);
  uint64_t v14 = Header + 48;
  if ((sub_2170FCAF4(v14, v13) & 1) == 0)
  {
    sub_216778A5C((uint64_t)&v33);
    uint64_t v18 = sub_216779180(v35, (uint64_t)"Incorrect match of schema: ", 27);
    sub_216779094(&v43, "schemaObjTitle");
    sub_21679F2AC(v14, (const void **)&v43, &__p);
    if ((v32 & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if ((v32 & 0x80u) == 0) {
      uint64_t v20 = v32;
    }
    else {
      uint64_t v20 = v31;
    }
    int v21 = sub_216779180(v18, (uint64_t)p_p, v20);
    int v22 = sub_216779180(v21, (uint64_t)" to expected: ", 14);
    sub_2170FCE50(&v42);
    if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v23 = &v42;
    }
    else {
      int v23 = (std::string *)v42.__r_.__value_.__r.__words[0];
    }
    if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v42.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v42.__r_.__value_.__l.__size_;
    }
    sub_216779180(v22, (uint64_t)v23, size);
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v42.__r_.__value_.__l.__data_);
    }
    if ((char)v32 < 0) {
      operator delete(__p);
    }
    if (v44 < 0) {
      operator delete((void *)v43);
    }
    std::stringbuf::str();
    sub_216778E70(&__p, &v43);
    if (v44 < 0) {
      operator delete((void *)v43);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    int64_t v26 = sub_216779038(exception, (uint64_t)&__p);
    __cxa_throw(v26, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  Alembic::Abc::v12::IObject::getProperties(a1, (uint64_t)&__p);
  sub_216779094(&v43, ".xform");
  int v15 = *((_DWORD *)a1 + 2);
  LODWORD(v42.__r_.__value_.__l.__data_) = 1;
  LODWORD(v42.__r_.__value_.__r.__words[1]) = v15;
  v28[0] = 0;
  _OWORD v28[2] = 0;
  v27[0] = 0;
  v27[2] = 0;
  int v16 = sub_216807C40(a4, a5, v28, v27);
  v29[0] = 5;
  v29[2] = v16;
  sub_2170FD93C((uint64_t)&v33, (uint64_t)&__p, (uint64_t)&v43, &v42, v29);
  sub_2170FD404(v10, (uint64_t)&v33);
  std::string v33 = &unk_26C7735D8;
  int v48 = (void **)&v41;
  sub_216802314(&v48);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v40);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v39);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v38);
  if (v37) {
    sub_216784EC4(v37);
  }
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v36);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v34);
  if (v44 < 0) {
    operator delete((void *)v43);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&__p);
  return a1;
}

void sub_2170FD270(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  sub_216779148((std::exception *)&__p);
  sub_216778D38((uint64_t)&a24);
  uint64_t v29 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    uint64_t v30 = (uint64_t)v29;
    sub_216801468(v25);
    Alembic::Abc::v12::IObject::reset(v24);
    sub_21679FA64(v26 - 184, v30);
  }
  else
  {
    sub_216801468(v25);
    Alembic::Abc::v12::IObject::reset(v24);
    sub_21679F9F4(v26 - 184, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2170FD11CLL);
}

void sub_2170FD3E8()
{
}

void sub_2170FD3F4()
{
}

uint64_t sub_2170FD404(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  std::string::operator=((std::string *)(a1 + 16), (const std::string *)(a2 + 16));
  uint64_t v5 = *(void *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 48);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  std::string v6 = *(std::__shared_weak_count **)(a1 + 48);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = v4;
  if (v6) {
    sub_216784EC4(v6);
  }
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  std::string::operator=((std::string *)(a1 + 64), (const std::string *)(a2 + 64));
  uint64_t v8 = *(void *)(a2 + 88);
  uint64_t v7 = *(void *)(a2 + 96);
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 96);
  *(void *)(a1 + 88) = v8;
  *(void *)(a1 + 96) = v7;
  if (v9) {
    sub_216784EC4(v9);
  }
  long long v10 = *(_OWORD *)(a2 + 104);
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  uint64_t v11 = *(std::__shared_weak_count **)(a1 + 112);
  *(_OWORD *)(a1 + 104) = v10;
  if (v11) {
    sub_216784EC4(v11);
  }
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  std::string::operator=((std::string *)(a1 + 128), (const std::string *)(a2 + 128));
  uint64_t v13 = *(void *)(a2 + 152);
  uint64_t v12 = *(void *)(a2 + 160);
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = *(std::__shared_weak_count **)(a1 + 160);
  *(void *)(a1 + 152) = v13;
  *(void *)(a1 + 160) = v12;
  if (v14) {
    sub_216784EC4(v14);
  }
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  std::string::operator=((std::string *)(a1 + 176), (const std::string *)(a2 + 176));
  uint64_t v16 = *(void *)(a2 + 200);
  uint64_t v15 = *(void *)(a2 + 208);
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v17 = *(std::__shared_weak_count **)(a1 + 208);
  *(void *)(a1 + 200) = v16;
  *(void *)(a1 + 208) = v15;
  if (v17) {
    sub_216784EC4(v17);
  }
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
  std::string::operator=((std::string *)(a1 + 224), (const std::string *)(a2 + 224));
  uint64_t v19 = *(void *)(a2 + 248);
  uint64_t v18 = *(void *)(a2 + 256);
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v20 = *(std::__shared_weak_count **)(a1 + 256);
  *(void *)(a1 + 248) = v19;
  *(void *)(a1 + 256) = v18;
  if (v20) {
    sub_216784EC4(v20);
  }
  *(_WORD *)(a1 + 264) = *(_WORD *)(a2 + 264);
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  sub_216801EAC((void **)(a1 + 280));
  uint64_t v21 = *(void *)(a2 + 288);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  *(void *)(a1 + 288) = v21;
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  *(void *)(a2 + 280) = 0;
  *(void *)(a2 + 288) = 0;
  *(void *)(a2 + 296) = 0;
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
  *(unsigned char *)(a1 + 320) = *(unsigned char *)(a2 + 320);
  return a1;
}

uint64_t sub_2170FD59C(uint64_t a1)
{
  *(void *)a1 = &unk_26C7735D8;
  uint64_t v4 = (void **)(a1 + 280);
  sub_216802314(&v4);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 216));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 168));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 120));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 112);
  if (v2) {
    sub_216784EC4(v2);
  }
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 56));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 8));
  return a1;
}

void sub_2170FD628(uint64_t a1)
{
  *(void *)a1 = &unk_26C7735A0;
  *(void *)(a1 + 96) = &unk_26C7735D8;
  uint64_t v4 = (void **)(a1 + 376);
  sub_216802314(&v4);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 312));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 264));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 216));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 208);
  if (v2) {
    sub_216784EC4(v2);
  }
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 152));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 104));
  Alembic::Abc::v12::IObject::~IObject((void **)a1);
  operator delete(v3);
}

uint64_t sub_2170FD6DC(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 2;
  sub_216779094((void *)(a1 + 16), "");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)a1 = &unk_26C7735D8;
  *(_DWORD *)(a1 + 56) = 2;
  sub_216779094((void *)(a1 + 64), "");
  *(_DWORD *)(a1 + 120) = 2;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  sub_216779094((void *)(a1 + 128), "");
  *(_DWORD *)(a1 + 168) = 2;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  sub_216779094((void *)(a1 + 176), "");
  *(_DWORD *)(a1 + 216) = 2;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  sub_216779094((void *)(a1 + 224), "");
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  Alembic::AbcGeom::v12::XformSample::XformSample(a1 + 272);
  *(unsigned char *)(a1 + 320) = 0;
  *(_WORD *)(a1 + 264) = 257;
  return a1;
}

void sub_2170FD7E0(_Unwind_Exception *a1)
{
  uint64_t v7 = v5;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v7);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v6);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v4);
  uint64_t v9 = *(std::__shared_weak_count **)(v2 + 112);
  if (v9) {
    sub_216784EC4(v9);
  }
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v3);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v1);
  _Unwind_Resume(a1);
}

void sub_2170FD844(char *a1)
{
  *(void *)a1 = &unk_26C7735D8;
  long long v3 = (void **)(a1 + 280);
  sub_216802314(&v3);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 216));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 168));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 120));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)a1 + 14);
  if (v2) {
    sub_216784EC4(v2);
  }
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 56));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 8));
  operator delete(a1);
}

uint64_t sub_2170FD8D4(uint64_t a1)
{
  return a1;
}

void sub_2170FD900(uint64_t a1)
{
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 8));

  operator delete((void *)a1);
}

uint64_t sub_2170FD93C(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v8 = sub_2170FDAB4(a1, a2, a3, a4, a5);
  *(void *)uint64_t v8 = &unk_26C7735D8;
  *(_DWORD *)(v8 + 56) = 2;
  sub_216779094((void *)(v8 + 64), "");
  *(_DWORD *)(a1 + 120) = 2;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  sub_216779094((void *)(a1 + 128), "");
  *(_DWORD *)(a1 + 168) = 2;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  sub_216779094((void *)(a1 + 176), "");
  *(_DWORD *)(a1 + 216) = 2;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  sub_216779094((void *)(a1 + 224), "");
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 0;
  Alembic::AbcGeom::v12::XformSample::XformSample(a1 + 272);
  Alembic::AbcGeom::v12::IXformSchema::init(a1, a4, a5);
  return a1;
}

void sub_2170FDA3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10 = (void **)(v10 + 280);
  sub_216802314(&a10);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v14);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v13);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v12);
  uint64_t v16 = *(std::__shared_weak_count **)(v10 + 112);
  if (v16) {
    sub_216784EC4(v16);
  }
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v11);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(v10 + 8));
  _Unwind_Resume(a1);
}

void sub_2170FDAAC()
{
}

uint64_t sub_2170FDAB4(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  *(_DWORD *)(a1 + 8) = 2;
  sub_216779094((void *)(a1 + 16), "");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)a1 = &unk_26C773638;
  sub_2170FDB60(a1, a2, a3, a4, a5);
  return a1;
}

void sub_2170FDB4C(_Unwind_Exception *a1)
{
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v1);
  _Unwind_Resume(a1);
}

void sub_2170FDB60(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  *((void *)&v35 + 1) = 0;
  v36[0] = 0;
  *(void *)&long long v35 = (char *)&v35 + 8;
  int v37 = 2;
  sub_2167898D0(v38, (const void ***)&v35);
  v38[3] = 0;
  uint64_t v39 = 0;
  int v40 = 0;
  uint64_t v41 = 1;
  sub_2167877AC((uint64_t)&v35, *((void **)&v35 + 1));
  sub_2167A030C(a4, (uint64_t)&v37);
  sub_2167A030C(a5, (uint64_t)&v37);
  *(_DWORD *)(a1 + 8) = v37;
  v36[34] = a1 + 8;
  v36[35] = "ISchema::ISchema::init()";
  if (*(char *)(a2 + 31) < 0)
  {
    if (*(void *)(a2 + 16)) {
      goto LABEL_18;
    }
  }
  else if (*(unsigned char *)(a2 + 31))
  {
LABEL_18:
    sub_216778A5C((uint64_t)&v35);
    sub_216779180(v36, (uint64_t)"NULL parent passed into ISchema ctor", 36);
    std::stringbuf::str();
    sub_216778E70(v33, (long long *)__p);
    if (v32 < 0) {
      operator delete(__p[0]);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v17 = sub_216779038(exception, (uint64_t)v33);
    __cxa_throw(v17, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  uint64_t v10 = *(void *)(a2 + 32);
  if (!v10) {
    goto LABEL_18;
  }
  uint64_t v11 = *(std::__shared_weak_count **)(a2 + 40);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v10 + 80))(v10, a3);
  if (!v12)
  {
    sub_216778A5C((uint64_t)&v35);
    uint64_t v18 = sub_216779180(v36, (uint64_t)"Nonexistent compound property: ", 31);
    int v19 = *(char *)(a3 + 23);
    if (v19 >= 0) {
      uint64_t v20 = a3;
    }
    else {
      uint64_t v20 = *(void *)a3;
    }
    if (v19 >= 0) {
      uint64_t v21 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v21 = *(void *)(a3 + 8);
    }
    sub_216779180(v18, v20, v21);
    std::stringbuf::str();
    sub_216778E70(v33, (long long *)__p);
    if (v32 < 0) {
      operator delete(__p[0]);
    }
    int v22 = __cxa_allocate_exception(0x20uLL);
    int v23 = sub_216779038(v22, (uint64_t)v33);
    __cxa_throw(v23, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  uint64_t v13 = v12 + 32;
  if ((sub_2170FE098(v12 + 32, v41) & 1) == 0)
  {
    sub_216778A5C((uint64_t)&v35);
    int64x2_t v24 = sub_216779180(v36, (uint64_t)"Incorrect match of schema: ", 27);
    sub_216779094(__p, "schema");
    sub_21679F2AC(v13, (const void **)__p, v33);
    if ((v34 & 0x80u) == 0) {
      uint64_t v25 = v33;
    }
    else {
      uint64_t v25 = (void **)v33[0];
    }
    if ((v34 & 0x80u) == 0) {
      uint64_t v26 = v34;
    }
    else {
      uint64_t v26 = (uint64_t)v33[1];
    }
    unint64_t v27 = sub_216779180(v24, (uint64_t)v25, v26);
    int64_t v28 = sub_216779180(v27, (uint64_t)" to expected: ", 14);
    sub_216779180(v28, (uint64_t)"AbcGeom_Xform_v3", 16);
    if ((char)v34 < 0) {
      operator delete(v33[0]);
    }
    if (v32 < 0) {
      operator delete(__p[0]);
    }
    std::stringbuf::str();
    sub_216778E70(v33, (long long *)__p);
    if (v32 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v29 = __cxa_allocate_exception(0x20uLL);
    uint64_t v30 = sub_216779038(v29, (uint64_t)v33);
    __cxa_throw(v30, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(*(void *)v10 + 104))(&v35, v10, a3);
  long long v14 = v35;
  long long v35 = 0uLL;
  uint64_t v15 = *(std::__shared_weak_count **)(a1 + 48);
  *(_OWORD *)(a1 + 40) = v14;
  if (v15)
  {
    sub_216784EC4(v15);
    if (*((void *)&v35 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v35 + 1));
    }
  }
  if (v11) {
    sub_216784EC4(v11);
  }
  if (v39) {
    sub_216784EC4(v39);
  }
  sub_2167877AC((uint64_t)v38, (void *)v38[1]);
}

void sub_2170FDF34(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24)
{
  sub_216779148((std::exception *)&__p);
  sub_216778D38((uint64_t)&a23);
  if (v25) {
    sub_216784EC4(v25);
  }
  uint64_t v29 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    uint64_t v30 = (uint64_t)v29;
    sub_2167A13A4(v24);
    sub_21679FA64(v26 - 144, v30);
  }
  else
  {
    sub_2167A13A4(v24);
    sub_21679F9F4(v26 - 144, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2170FDCE8);
}

void sub_2170FE060()
{
  sub_2167A03C4(v0 - 128);
  JUMPOUT(0x2170FE090);
}

uint64_t sub_2170FE098(uint64_t a1, int a2)
{
  if (a2 == 1) {
    return 1;
  }
  if ((a2 & 0xFFFFFFFD) != 0) {
    return 0;
  }
  sub_216779094(__p, "schema");
  sub_21679F2AC(a1, (const void **)__p, &v9);
  if (v11 < 0)
  {
    BOOL v2 = v10 == 16 && *v9 == 0x5F6D6F6547636241 && v9[1] == 0x33765F6D726F6658;
    operator delete(v9);
  }
  else
  {
    BOOL v2 = v11 == 16 && v9 == (void *)0x5F6D6F6547636241 && v10 == 0x33765F6D726F6658;
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void sub_2170FE1A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2170FE1C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)sub_2167A2320(a1, a2);
  *uint64_t v4 = &unk_26C7735A0;
  sub_2170FE2B8((uint64_t)(v4 + 12), a2 + 96);
  sub_2170FE5F4(a1 + 424, a2 + 424);
  return a1;
}

void sub_2170FE23C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v12 = v11;
  *(void *)uint64_t v10 = v12;
  *(void *)(v10 + 96) = &unk_26C7735D8;
  a10 = (void **)(v10 + 376);
  sub_216802314(&a10);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(v10 + 312));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(v10 + 264));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(v10 + 216));
  long long v14 = *(std::__shared_weak_count **)(v10 + 208);
  if (v14) {
    sub_216784EC4(v14);
  }
  sub_217325208((void **)v10);
  _Unwind_Resume(a1);
}

uint64_t sub_2170FE2B8(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v4 = a1 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_216778F24((unsigned char *)v4, *(void **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(void *)(v4 + 16) = *(void *)(a2 + 32);
    *(_OWORD *)uint64_t v4 = v5;
  }
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = &unk_26C7735D8;
  uint64_t v7 = (unsigned char *)(a1 + 64);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  if (*(char *)(a2 + 87) < 0)
  {
    sub_216778F24(v7, *(void **)(a2 + 64), *(void *)(a2 + 72));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(_OWORD *)uint64_t v7 = v8;
  }
  uint64_t v9 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  uint64_t v11 = (unsigned char *)(a1 + 128);
  if (*(char *)(a2 + 151) < 0)
  {
    sub_216778F24(v11, *(void **)(a2 + 128), *(void *)(a2 + 136));
  }
  else
  {
    long long v12 = *(_OWORD *)(a2 + 128);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(_OWORD *)uint64_t v11 = v12;
  }
  uint64_t v13 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  long long v14 = (unsigned char *)(a1 + 176);
  if (*(char *)(a2 + 199) < 0)
  {
    sub_216778F24(v14, *(void **)(a2 + 176), *(void *)(a2 + 184));
  }
  else
  {
    long long v15 = *(_OWORD *)(a2 + 176);
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    *(_OWORD *)long long v14 = v15;
  }
  uint64_t v16 = *(void *)(a2 + 208);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 208) = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
  uint64_t v17 = (unsigned char *)(a1 + 224);
  if (*(char *)(a2 + 247) < 0)
  {
    sub_216778F24(v17, *(void **)(a2 + 224), *(void *)(a2 + 232));
  }
  else
  {
    long long v18 = *(_OWORD *)(a2 + 224);
    *(void *)(a1 + 240) = *(void *)(a2 + 240);
    *(_OWORD *)uint64_t v17 = v18;
  }
  uint64_t v19 = *(void *)(a2 + 256);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(void *)(a1 + 256) = v19;
  if (v19) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
  }
  *(_WORD *)(a1 + 264) = *(_WORD *)(a2 + 264);
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 280) = 0;
  sub_2170FE56C((void *)(a1 + 280), *(int **)(a2 + 280), *(int **)(a2 + 288), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 288) - *(void *)(a2 + 280)) >> 3));
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
  *(unsigned char *)(a1 + 320) = *(unsigned char *)(a2 + 320);
  return a1;
}

void sub_2170FE50C(_Unwind_Exception *a1)
{
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v5);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v4);
  uint64_t v7 = *(std::__shared_weak_count **)(v2 + 112);
  if (v7) {
    sub_216784EC4(v7);
  }
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v3);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v1);
  _Unwind_Resume(a1);
}

void *sub_2170FE56C(void *result, int *a2, int *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_2167B8760(result, a4);
    uint64_t result = (void *)sub_2168020C0((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_2170FE5D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_216802314(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_2170FE5F4(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  if (*(unsigned char *)(a2 + 24))
  {
    sub_2167898D0((uint64_t *)a1, (const void ***)a2);
    *(unsigned char *)(a1 + 24) = 1;
  }
  return a1;
}

void sub_2170FE638(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24)) {
    sub_2167877AC(v1, *(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

void *sub_2170FE658(void *a1)
{
  *a1 = &unk_26C773658;
  sub_2170FC688((uint64_t)(a1 + 1));
  return a1;
}

void sub_2170FE69C(void *a1)
{
  *a1 = &unk_26C773658;
  sub_2170FC688((uint64_t)(a1 + 1));

  operator delete(a1);
}

void *sub_2170FE6F0(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x1D0uLL);
  *uint64_t v2 = &unk_26C773658;
  sub_2170FE1C4((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_2170FE744(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2170FE758(uint64_t a1, void *a2)
{
  *a2 = &unk_26C773658;
  return sub_2170FE1C4((uint64_t)(a2 + 1), a1 + 8);
}

void sub_2170FE784(uint64_t a1)
{
}

void sub_2170FE78C(void *a1)
{
  sub_2170FC688((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t **sub_2170FE7C8(uint64_t a1)
{
  uint64_t v1 = (uint64_t **)(a1 + 432);
  if (!*(unsigned char *)(a1 + 456))
  {
    *(_OWORD *)&v11.__r_.__value_.__r.__words[1] = 0uLL;
    v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v11.__r_.__value_.__l.__size_;
    sub_2170FED80(a1 + 432, (uint64_t)&v11);
    sub_2167877AC((uint64_t)&v11, (void *)v11.__r_.__value_.__l.__size_);
    uint64_t Header = Alembic::Abc::v12::IObject::getHeader((Alembic::Abc::v12::IObject *)(a1 + 8));
    uint64_t v4 = *(void **)(Header + 48);
    long long v5 = (void *)(Header + 56);
    if (v4 != (void *)(Header + 56))
    {
      do
      {
        if (*((char *)v4 + 79) < 0)
        {
          if (v4[8])
          {
LABEL_7:
            if (!std::string::compare((const std::string *)(v4 + 4), 0, 0xEuLL, "Usd.transform:"))
            {
              std::string::basic_string(&v11, (const std::string *)(v4 + 4), 0xEuLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v12);
              long long v12 = &v11;
              uint64_t v6 = sub_21677B174(v1, (const void **)&v11.__r_.__value_.__l.__data_, (uint64_t)&unk_2174BFD90, (long long **)&v12);
              std::string::operator=((std::string *)(v6 + 7), (const std::string *)(v4 + 7));
              if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v11.__r_.__value_.__l.__data_);
              }
            }
          }
        }
        else if (*((unsigned char *)v4 + 79))
        {
          goto LABEL_7;
        }
        uint64_t v7 = (void *)v4[1];
        if (v7)
        {
          do
          {
            long long v8 = v7;
            uint64_t v7 = (void *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            long long v8 = (void *)v4[2];
            BOOL v9 = *v8 == (void)v4;
            uint64_t v4 = v8;
          }
          while (!v9);
        }
        uint64_t v4 = v8;
      }
      while (v8 != v5);
    }
  }
  return v1;
}

void sub_2170FE930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, void *a11, int a12, __int16 a13, char a14, char a15)
{
}

uint64_t sub_2170FE960(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7736B8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2170FE9A0()
{
  return &unk_26C7736B8;
}

uint64_t sub_2170FE9AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)sub_2167A2320(a1, a2);
  *uint64_t v4 = &unk_26C7735A0;
  sub_2170FEAA0((uint64_t)(v4 + 12), a2 + 96);
  sub_2170FED1C(a1 + 424, a2 + 424);
  return a1;
}

void sub_2170FEA24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v12 = v11;
  *(void *)uint64_t v10 = v12;
  *(void *)(v10 + 96) = &unk_26C7735D8;
  a10 = (void **)(v10 + 376);
  sub_216802314(&a10);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(v10 + 312));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(v10 + 264));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(v10 + 216));
  long long v14 = *(std::__shared_weak_count **)(v10 + 208);
  if (v14) {
    sub_216784EC4(v14);
  }
  sub_217325208((void **)v10);
  _Unwind_Resume(a1);
}

uint64_t sub_2170FEAA0(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v4 = a1 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_216778F24((unsigned char *)v4, *(void **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(void *)(v4 + 16) = *(void *)(a2 + 32);
    *(_OWORD *)uint64_t v4 = v5;
  }
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = &unk_26C7735D8;
  uint64_t v7 = (unsigned char *)(a1 + 64);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  if (*(char *)(a2 + 87) < 0)
  {
    sub_216778F24(v7, *(void **)(a2 + 64), *(void *)(a2 + 72));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(_OWORD *)uint64_t v7 = v8;
  }
  uint64_t v9 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  uint64_t v10 = (unsigned char *)(a1 + 128);
  if (*(char *)(a2 + 151) < 0)
  {
    sub_216778F24(v10, *(void **)(a2 + 128), *(void *)(a2 + 136));
  }
  else
  {
    long long v11 = *(_OWORD *)(a2 + 128);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(_OWORD *)uint64_t v10 = v11;
  }
  uint64_t v12 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 168) = *(_DWORD *)(a2 + 168);
  uint64_t v13 = (unsigned char *)(a1 + 176);
  if (*(char *)(a2 + 199) < 0)
  {
    sub_216778F24(v13, *(void **)(a2 + 176), *(void *)(a2 + 184));
  }
  else
  {
    long long v14 = *(_OWORD *)(a2 + 176);
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    *(_OWORD *)uint64_t v13 = v14;
  }
  uint64_t v15 = *(void *)(a2 + 208);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 208) = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
  uint64_t v16 = (unsigned char *)(a1 + 224);
  if (*(char *)(a2 + 247) < 0)
  {
    sub_216778F24(v16, *(void **)(a2 + 224), *(void *)(a2 + 232));
  }
  else
  {
    long long v17 = *(_OWORD *)(a2 + 224);
    *(void *)(a1 + 240) = *(void *)(a2 + 240);
    *(_OWORD *)uint64_t v16 = v17;
  }
  uint64_t v18 = *(void *)(a2 + 256);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(void *)(a1 + 256) = v18;
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
  }
  *(_WORD *)(a1 + 264) = *(_WORD *)(a2 + 264);
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 280) = 0;
  uint64_t v19 = *(void *)(a2 + 288);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  *(void *)(a1 + 288) = v19;
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
  *(void *)(a2 + 280) = 0;
  *(void *)(a2 + 288) = 0;
  *(void *)(a2 + 296) = 0;
  *(_OWORD *)(a1 + 304) = *(_OWORD *)(a2 + 304);
  *(unsigned char *)(a1 + 320) = *(unsigned char *)(a2 + 320);
  return a1;
}

void sub_2170FECCC(_Unwind_Exception *a1)
{
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v5);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v4);
  uint64_t v7 = *(std::__shared_weak_count **)(v1 + 112);
  if (v7) {
    sub_216784EC4(v7);
  }
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v3);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_2170FED1C(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 24) = 0;
  if (*(unsigned char *)(a2 + 24))
  {
    sub_2167898D0((uint64_t *)a1, (const void ***)a2);
    *(unsigned char *)(a1 + 24) = 1;
  }
  return a1;
}

void sub_2170FED60(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24)) {
    sub_2167877AC(v1, *(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2170FED80(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    if (a1 != a2) {
      sub_216799C1C((uint64_t **)a1, *(long long **)a2, (long long *)(a2 + 8));
    }
  }
  else
  {
    sub_2167898D0((uint64_t *)a1, (const void ***)a2);
    *(unsigned char *)(a1 + 24) = 1;
  }
  return a1;
}

void *sub_2170FEDDC(void *a1)
{
  *a1 = &unk_26C7736D8;
  sub_2170FC688((uint64_t)(a1 + 1));
  return a1;
}

void sub_2170FEE20(void *a1)
{
  *a1 = &unk_26C7736D8;
  sub_2170FC688((uint64_t)(a1 + 1));

  operator delete(a1);
}

void *sub_2170FEE74(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x1D0uLL);
  *uint64_t v2 = &unk_26C7736D8;
  sub_2170FE1C4((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_2170FEEC8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2170FEEDC(uint64_t a1, void *a2)
{
  *a2 = &unk_26C7736D8;
  return sub_2170FE1C4((uint64_t)(a2 + 1), a1 + 8);
}

void sub_2170FEF08(uint64_t a1)
{
}

void sub_2170FEF10(void *a1)
{
  sub_2170FC688((uint64_t)a1 + 8);

  operator delete(a1);
}

void sub_2170FEF4C(uint64_t a1@<X0>, double **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (*(char *)(a1 + 143) < 0)
  {
    if (*(void *)(a1 + 128)) {
      return;
    }
  }
  else if (*(unsigned char *)(a1 + 143))
  {
    return;
  }
  if (*(void *)(a1 + 144))
  {
    Alembic::AbcGeom::v12::IXformSchema::getTimeSampling((Alembic::AbcGeom::v12::IXformSchema *)(a1 + 104), &v20);
    uint64_t NumSamples = Alembic::AbcGeom::v12::IXformSchema::getNumSamples((Alembic::AbcGeom::v12::IXformSchema *)(a1 + 104));
    if (*(unsigned char *)(a1 + 368)) {
      uint64_t v5 = NumSamples != 0;
    }
    else {
      uint64_t v5 = NumSamples;
    }
    if (v5)
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        double SampleTime = Alembic::AbcCoreAbstract::v12::TimeSampling::getSampleTime((double **)v20, i);
        double v8 = SampleTime;
        uint64_t v10 = a2[1];
        unint64_t v9 = (unint64_t)a2[2];
        if ((unint64_t)v10 >= v9)
        {
          uint64_t v12 = *a2;
          uint64_t v13 = v10 - *a2;
          unint64_t v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 61) {
            sub_21677CB10();
          }
          uint64_t v15 = v9 - (void)v12;
          if (v15 >> 2 > v14) {
            unint64_t v14 = v15 >> 2;
          }
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v16 = v14;
          }
          if (v16)
          {
            long long v17 = (char *)sub_21677CB28((uint64_t)(a2 + 2), v16);
            uint64_t v12 = *a2;
            uint64_t v10 = a2[1];
          }
          else
          {
            long long v17 = 0;
          }
          uint64_t v18 = (double *)&v17[8 * v13];
          *uint64_t v18 = v8;
          long long v11 = v18 + 1;
          while (v10 != v12)
          {
            uint64_t v19 = *((void *)v10-- - 1);
            *((void *)v18-- - 1) = v19;
          }
          *a2 = v18;
          a2[1] = v11;
          a2[2] = (double *)&v17[8 * v16];
          if (v12) {
            operator delete(v12);
          }
        }
        else
        {
          *uint64_t v10 = SampleTime;
          long long v11 = v10 + 1;
        }
        a2[1] = v11;
      }
    }
    if (v21) {
      sub_216784EC4(v21);
    }
  }
}

void sub_2170FF0D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  uint64_t v12 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + 8) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2170FF108(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7736B8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2170FF148()
{
  return &unk_26C7736B8;
}

void *sub_2170FF154(void *a1)
{
  *a1 = &unk_26C773748;
  sub_2170FC688((uint64_t)(a1 + 1));
  return a1;
}

void sub_2170FF198(void *a1)
{
  *a1 = &unk_26C773748;
  sub_2170FC688((uint64_t)(a1 + 1));

  operator delete(a1);
}

void *sub_2170FF1EC(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x1D0uLL);
  *uint64_t v2 = &unk_26C773748;
  sub_2170FE1C4((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_2170FF240(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2170FF254(uint64_t a1, void *a2)
{
  *a2 = &unk_26C773748;
  return sub_2170FE1C4((uint64_t)(a2 + 1), a1 + 8);
}

void sub_2170FF280(uint64_t a1)
{
}

void sub_2170FF288(void *a1)
{
  sub_2170FC688((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t sub_2170FF2C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Alembic::AbcGeom::v12::IXformSchema::getValue(a1 + 104, a3, (Alembic::AbcGeom::v12::XformSample *)v5);
  Alembic::AbcGeom::v12::XformSample::getMatrix((Alembic::AbcGeom::v12::XformSample *)v5, (uint64_t)v6);
  uint64_t v7 = (void **)v5 + 1;
  sub_216802314(&v7);
  v5[0] = v6[0];
  v5[1] = v6[1];
  v5[2] = v6[2];
  v5[3] = v6[3];
  _DWORD v5[4] = v6[4];
  v5[5] = v6[5];
  v5[6] = v6[6];
  v5[7] = v6[7];
  return sub_2170FF3B8(a2, (uint64_t)v5);
}

void sub_2170FF350(_Unwind_Exception *a1)
{
  *(void *)(v2 - 40) = v1 + 8;
  sub_216802314((void ***)(v2 - 40));
  _Unwind_Resume(a1);
}

uint64_t sub_2170FF36C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7736B8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2170FF3AC()
{
  return &unk_26C7736B8;
}

uint64_t sub_2170FF3B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1) {
    sub_2168BBB60();
  }
  uint64_t v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_26C7737A8[v2])(&v5, a1);
}

uint64_t sub_2170FF40C()
{
  return 1;
}

uint64_t sub_2170FF414(_OWORD ***a1, void **a2)
{
  return 1;
}

BOOL sub_2170FF440(long long ***a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  int v4 = strcmp((const char *)(0x80000002174E42C6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)(*a2 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4)
  {
    *(unsigned char *)(v3 + 25) = 1;
  }
  else
  {
    uint64_t v5 = **a1;
    uint64_t v6 = *(_OWORD **)(v3 + 8);
    long long v7 = v5[7];
    long long v9 = v5[4];
    long long v8 = v5[5];
    v6[6] = v5[6];
    v6[7] = v7;
    void v6[4] = v9;
    v6[5] = v8;
    long long v10 = *v5;
    long long v11 = v5[1];
    long long v12 = v5[3];
    v6[2] = v5[2];
    v6[3] = v12;
    _OWORD *v6 = v10;
    v6[1] = v11;
  }
  return v4 == 0;
}

uint64_t sub_2170FF4CC(uint64_t a1)
{
  *(void *)a1 = &unk_26C7737D0;
  uint64_t v2 = a1 + 8;
  sub_2167877AC(a1 + 24, *(void **)(a1 + 32));
  sub_2168EE084(v2);
  return a1;
}

void sub_2170FF524(void **a1)
{
  *a1 = &unk_26C7737D0;
  uint64_t v2 = (uint64_t)(a1 + 1);
  sub_2167877AC((uint64_t)(a1 + 3), a1[4]);
  sub_2168EE084(v2);

  operator delete(a1);
}

void *sub_2170FF58C(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x30uLL);
  *uint64_t v2 = &unk_26C7737D0;
  sub_2170FF750(v2 + 1, v1);
  return v2;
}

void sub_2170FF5E0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_2170FF5F4(uint64_t a1, void *a2)
{
  *a2 = &unk_26C7737D0;
  return sub_2170FF750(a2 + 1, a1 + 8);
}

uint64_t sub_2170FF620(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  sub_2167877AC(a1 + 24, *(void **)(a1 + 32));

  return sub_2168EE084(v1);
}

void sub_2170FF664(void **a1)
{
  uint64_t v2 = (uint64_t)(a1 + 1);
  sub_2167877AC((uint64_t)(a1 + 3), a1[4]);
  sub_2168EE084(v2);

  operator delete(a1);
}

uint64_t sub_2170FF6B0(uint64_t a1)
{
  return a1 + 24;
}

uint64_t sub_2170FF6B8(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C773830)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2170FF6F8()
{
  return &unk_26C773830;
}

void *sub_2170FF704(void *a1, uint64_t a2)
{
  int v4 = sub_2168EDFA8(a1, (void *)a2);
  sub_2167898D0(v4 + 2, (const void ***)(a2 + 16));
  return a1;
}

void sub_2170FF73C(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

void *sub_2170FF750(void *a1, uint64_t a2)
{
  int v4 = sub_2168EE4C4(a1, (void *)a2);
  sub_2167898D0(v4 + 2, (const void ***)(a2 + 16));
  return a1;
}

void sub_2170FF788(_Unwind_Exception *a1)
{
  sub_2168EE084(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2170FF79C(uint64_t a1)
{
  *(void *)a1 = &unk_26C773850;
  uint64_t v2 = a1 + 8;
  sub_2167877AC(a1 + 24, *(void **)(a1 + 32));
  sub_2168EE084(v2);
  return a1;
}

void sub_2170FF7F4(void **a1)
{
  *a1 = &unk_26C773850;
  uint64_t v2 = (uint64_t)(a1 + 1);
  sub_2167877AC((uint64_t)(a1 + 3), a1[4]);
  sub_2168EE084(v2);

  operator delete(a1);
}

void *sub_2170FF85C(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x30uLL);
  *uint64_t v2 = &unk_26C773850;
  sub_2170FF750(v2 + 1, v1);
  return v2;
}

void sub_2170FF8B0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_2170FF8C4(uint64_t a1, void *a2)
{
  *a2 = &unk_26C773850;
  return sub_2170FF750(a2 + 1, a1 + 8);
}

uint64_t sub_2170FF8F0(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  sub_2167877AC(a1 + 24, *(void **)(a1 + 32));

  return sub_2168EE084(v1);
}

void sub_2170FF934(void **a1)
{
  uint64_t v2 = (uint64_t)(a1 + 1);
  sub_2167877AC((uint64_t)(a1 + 3), a1[4]);
  sub_2168EE084(v2);

  operator delete(a1);
}

void *sub_2170FF980@<X0>(void *a1@<X8>)
{
  uint64_t v2 = 0;
  return sub_2167B31F4(a1, 1uLL, &v2);
}

uint64_t sub_2170FF9B0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C773830)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2170FF9F0()
{
  return &unk_26C773830;
}

uint64_t sub_2170FF9FC(uint64_t a1)
{
  *(void *)a1 = &unk_26C7738C0;
  uint64_t v2 = a1 + 8;
  sub_2167877AC(a1 + 24, *(void **)(a1 + 32));
  sub_2168EE084(v2);
  return a1;
}

void sub_2170FFA54(void **a1)
{
  *a1 = &unk_26C7738C0;
  uint64_t v2 = (uint64_t)(a1 + 1);
  sub_2167877AC((uint64_t)(a1 + 3), a1[4]);
  sub_2168EE084(v2);

  operator delete(a1);
}

void *sub_2170FFABC(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x30uLL);
  *uint64_t v2 = &unk_26C7738C0;
  sub_2170FF750(v2 + 1, v1);
  return v2;
}

void sub_2170FFB10(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_2170FFB24(uint64_t a1, void *a2)
{
  *a2 = &unk_26C7738C0;
  return sub_2170FF750(a2 + 1, a1 + 8);
}

uint64_t sub_2170FFB50(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  sub_2167877AC(a1 + 24, *(void **)(a1 + 32));

  return sub_2168EE084(v1);
}

void sub_2170FFB94(void **a1)
{
  uint64_t v2 = (uint64_t)(a1 + 1);
  sub_2167877AC((uint64_t)(a1 + 3), a1[4]);
  sub_2168EE084(v2);

  operator delete(a1);
}

uint64_t sub_2170FFBE0(uint64_t a1, uint64_t a2)
{
  return sub_2170FFC3C(a2, a1 + 8);
}

uint64_t sub_2170FFBF0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C773830)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2170FFC30()
{
  return &unk_26C773830;
}

uint64_t sub_2170FFC3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1) {
    sub_2168BBB60();
  }
  uint64_t v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_26C773920[v2])(&v5, a1);
}

uint64_t sub_2170FFC90()
{
  return 1;
}

uint64_t sub_2170FFC98(void ***a1, void **a2)
{
  return 1;
}

uint64_t sub_2170FFCC0(void **a1, void *a2)
{
  return (**(uint64_t (***)(void, void))*a2)(*a2, **a1);
}

void *sub_2170FFCF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(char *)(a1 + 39) < 0)
  {
    if (*(void *)(a1 + 24)) {
      goto LABEL_17;
    }
  }
  else if (*(unsigned char *)(a1 + 39))
  {
    goto LABEL_17;
  }
  if (*(void *)(a1 + 40))
  {
    uint64_t v3 = (int *)(a1 + 8);
    uint64_t v4 = a1 + 56;
    uint64_t PropertyHeader = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(a1 + 8);
    if (PropertyHeader)
    {
      BOOL v6 = *(_DWORD *)(PropertyHeader + 56) == 12 && *(unsigned char *)(PropertyHeader + 60) == 1;
      BOOL v7 = v6 && *(_DWORD *)(PropertyHeader + 24) == 1;
      if (v7 && sub_2167A4CB4(PropertyHeader + 32, 0))
      {
        v10[0] = 0;
        void v10[2] = 0;
        v9[0] = 0;
        v9[2] = 0;
        return (void *)sub_2167A4730(a2, v3, v4, v10, v9);
      }
    }
  }
LABEL_17:
  *(_DWORD *)a2 = 2;
  uint64_t result = sub_216779094((void *)(a2 + 8), "");
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  return result;
}

void *sub_2170FFDCC(void *a1)
{
  *a1 = &unk_26C773948;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 1));
  return a1;
}

void sub_2170FFE10(void *a1)
{
  *a1 = &unk_26C773948;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 1));

  operator delete(a1);
}

void *sub_2170FFE64(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x38uLL);
  *uint64_t v2 = &unk_26C773948;
  sub_216D467D8((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_2170FFEB8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2170FFECC(uint64_t a1, void *a2)
{
  *a2 = &unk_26C773948;
  return sub_216D467D8((uint64_t)(a2 + 1), a1 + 8);
}

void sub_2170FFEF8(uint64_t a1)
{
}

void sub_2170FFF00(uint64_t a1)
{
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 8));

  operator delete((void *)a1);
}

uint64_t sub_2170FFF3C(uint64_t a1)
{
  return sub_2167B5CBC(a1 + 8) + 32;
}

uint64_t sub_2170FFF5C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7739B8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2170FFF9C()
{
  return &unk_26C7739B8;
}

void *sub_2170FFFA8(void *a1)
{
  *a1 = &unk_26C7739E0;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 1));
  return a1;
}

void sub_2170FFFEC(void *a1)
{
  *a1 = &unk_26C7739E0;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 1));

  operator delete(a1);
}

void *sub_217100040(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x38uLL);
  *uint64_t v2 = &unk_26C7739E0;
  sub_216D467D8((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_217100094(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2171000A8(uint64_t a1, void *a2)
{
  *a2 = &unk_26C7739E0;
  return sub_216D467D8((uint64_t)(a2 + 1), a1 + 8);
}

void sub_2171000D4(uint64_t a1)
{
}

void sub_2171000DC(uint64_t a1)
{
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 8));

  operator delete((void *)a1);
}

void sub_217100118(uint64_t a1@<X0>, double **a2@<X8>)
{
}

uint64_t sub_217100120(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7739B8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217100160()
{
  return &unk_26C7739B8;
}

void sub_21710016C(Alembic::Abc::v12::IScalarProperty *this@<X0>, double **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (*((char *)this + 31) < 0)
  {
    if (*((void *)this + 2)) {
      return;
    }
  }
  else if (*((unsigned char *)this + 31))
  {
    return;
  }
  if (*((void *)this + 4))
  {
    Alembic::Abc::v12::IScalarProperty::getTimeSampling(this, &v20);
    uint64_t NumSamples = Alembic::Abc::v12::IScalarProperty::getNumSamples(this);
    if (Alembic::Abc::v12::IScalarProperty::isConstant(this)) {
      uint64_t v5 = NumSamples != 0;
    }
    else {
      uint64_t v5 = NumSamples;
    }
    if (v5)
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        double SampleTime = Alembic::AbcCoreAbstract::v12::TimeSampling::getSampleTime((double **)v20, i);
        double v8 = SampleTime;
        long long v10 = a2[1];
        unint64_t v9 = (unint64_t)a2[2];
        if ((unint64_t)v10 >= v9)
        {
          long long v12 = *a2;
          uint64_t v13 = v10 - *a2;
          unint64_t v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 61) {
            sub_21677CB10();
          }
          uint64_t v15 = v9 - (void)v12;
          if (v15 >> 2 > v14) {
            unint64_t v14 = v15 >> 2;
          }
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v16 = v14;
          }
          if (v16)
          {
            long long v17 = (char *)sub_21677CB28((uint64_t)(a2 + 2), v16);
            long long v12 = *a2;
            long long v10 = a2[1];
          }
          else
          {
            long long v17 = 0;
          }
          uint64_t v18 = (double *)&v17[8 * v13];
          *uint64_t v18 = v8;
          long long v11 = v18 + 1;
          while (v10 != v12)
          {
            uint64_t v19 = *((void *)v10-- - 1);
            *((void *)v18-- - 1) = v19;
          }
          *a2 = v18;
          a2[1] = v11;
          a2[2] = (double *)&v17[8 * v16];
          if (v12) {
            operator delete(v12);
          }
        }
        else
        {
          *long long v10 = SampleTime;
          long long v11 = v10 + 1;
        }
        a2[1] = v11;
      }
    }
    if (v21) {
      sub_216784EC4(v21);
    }
  }
}

void sub_2171002F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  long long v12 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + 8) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

void *sub_21710032C(void *a1)
{
  *a1 = &unk_26C773A50;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 1));
  return a1;
}

void sub_217100370(void *a1)
{
  *a1 = &unk_26C773A50;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 1));

  operator delete(a1);
}

void *sub_2171003C4(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x38uLL);
  *uint64_t v2 = &unk_26C773A50;
  sub_216D467D8((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_217100418(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21710042C(uint64_t a1, void *a2)
{
  *a2 = &unk_26C773A50;
  return sub_216D467D8((uint64_t)(a2 + 1), a1 + 8);
}

void sub_217100458(uint64_t a1)
{
}

void sub_217100460(uint64_t a1)
{
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 8));

  operator delete((void *)a1);
}

uint64_t sub_21710049C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_2167A46DC(a1 + 8, a3, &__p);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v8);
  uint64_t v4 = sub_2170F9F98(a2, (uint64_t)&v8);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (v7 < 0) {
    operator delete(__p);
  }
  return v4;
}

void sub_21710051C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if ((a15 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_217100558(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7739B8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217100598()
{
  return &unk_26C7739B8;
}

void sub_2171005A4(uint64_t **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, void *a3, int *a4)
{
  uint64_t v38[4] = *MEMORY[0x263EF8340];
  if (*((char *)a4 + 31) < 0)
  {
    if (*((void *)a4 + 2)) {
      BOOL v11 = 1;
    }
    else {
      BOOL v11 = *((void *)a4 + 4) == 0;
    }
    if (v11) {
      return;
    }
    int v24 = *a4;
    uint64_t v10 = (long long *)(a4 + 2);
    sub_216778F24(&v25, *((void **)a4 + 1), 0);
    uint64_t v8 = *((void *)a4 + 4);
  }
  else
  {
    uint64_t v8 = *((void *)a4 + 4);
    if (*((unsigned char *)a4 + 31)) {
      BOOL v9 = 1;
    }
    else {
      BOOL v9 = v8 == 0;
    }
    if (v9) {
      return;
    }
    int v24 = *a4;
    uint64_t v10 = (long long *)(a4 + 2);
    long long v25 = *(_OWORD *)(a4 + 2);
    uint64_t v26 = *((void *)a4 + 3);
  }
  uint64_t v12 = *((void *)a4 + 5);
  uint64_t v27 = v8;
  uint64_t v28 = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  int v37 = 0;
  uint64_t v13 = operator new(0x38uLL);
  *uint64_t v13 = &unk_26C773AC0;
  sub_216D467D8((uint64_t)(v13 + 1), (uint64_t)&v24);
  int v37 = v13;
  int v19 = *a4;
  if (*((char *)a4 + 31) < 0)
  {
    sub_216778F24(&v20, *((void **)a4 + 1), *((void *)a4 + 2));
  }
  else
  {
    long long v20 = *v10;
    uint64_t v21 = *((void *)v10 + 2);
  }
  uint64_t v14 = *((void *)a4 + 5);
  uint64_t v22 = *((void *)a4 + 4);
  uint64_t v23 = v14;
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
  }
  long long v35 = 0;
  uint64_t v15 = operator new(0x38uLL);
  *uint64_t v15 = &unk_26C773B40;
  sub_216D467D8((uint64_t)(v15 + 1), (uint64_t)&v19);
  long long v35 = v15;
  unint64_t v16 = sub_2170F5EA4(a1, a2, a3, (uint64_t)v36, (uint64_t)v34);
  int v29 = *a4;
  if (*((char *)a4 + 31) < 0)
  {
    sub_216778F24(&v30, *((void **)a4 + 1), *((void *)a4 + 2));
  }
  else
  {
    long long v30 = *v10;
    uint64_t v31 = *((void *)v10 + 2);
  }
  uint64_t v17 = *((void *)a4 + 5);
  uint64_t v32 = *((void *)a4 + 4);
  uint64_t v33 = v17;
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v18 = operator new(0x38uLL);
  *uint64_t v18 = &unk_26C773BB0;
  sub_216D467D8((uint64_t)(v18 + 1), (uint64_t)&v29);
  v38[3] = v18;
  sub_2170F8214(v38, (void *)v16 + 8);
  sub_2170F5BA0(v38);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v29);
  sub_2170F5FA4(v34);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v19);
  sub_2170F6028(v36);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v24);
}

void sub_217100838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_2170F6028((void *)(v8 - 136));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)va);
  _Unwind_Resume(a1);
}

void sub_2171008C4(uint64_t **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, void *a3, int *a4)
{
  uint64_t v38[4] = *MEMORY[0x263EF8340];
  if (*((char *)a4 + 31) < 0)
  {
    if (*((void *)a4 + 2)) {
      BOOL v11 = 1;
    }
    else {
      BOOL v11 = *((void *)a4 + 4) == 0;
    }
    if (v11) {
      return;
    }
    int v24 = *a4;
    uint64_t v10 = (long long *)(a4 + 2);
    sub_216778F24(&v25, *((void **)a4 + 1), 0);
    uint64_t v8 = *((void *)a4 + 4);
  }
  else
  {
    uint64_t v8 = *((void *)a4 + 4);
    if (*((unsigned char *)a4 + 31)) {
      BOOL v9 = 1;
    }
    else {
      BOOL v9 = v8 == 0;
    }
    if (v9) {
      return;
    }
    int v24 = *a4;
    uint64_t v10 = (long long *)(a4 + 2);
    long long v25 = *(_OWORD *)(a4 + 2);
    uint64_t v26 = *((void *)a4 + 3);
  }
  uint64_t v12 = *((void *)a4 + 5);
  uint64_t v27 = v8;
  uint64_t v28 = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  int v37 = 0;
  uint64_t v13 = operator new(0x38uLL);
  *uint64_t v13 = &unk_26C773C20;
  sub_216D467D8((uint64_t)(v13 + 1), (uint64_t)&v24);
  int v37 = v13;
  int v19 = *a4;
  if (*((char *)a4 + 31) < 0)
  {
    sub_216778F24(&v20, *((void **)a4 + 1), *((void *)a4 + 2));
  }
  else
  {
    long long v20 = *v10;
    uint64_t v21 = *((void *)v10 + 2);
  }
  uint64_t v14 = *((void *)a4 + 5);
  uint64_t v22 = *((void *)a4 + 4);
  uint64_t v23 = v14;
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
  }
  long long v35 = 0;
  uint64_t v15 = operator new(0x38uLL);
  *uint64_t v15 = &unk_26C773CA0;
  sub_216D467D8((uint64_t)(v15 + 1), (uint64_t)&v19);
  long long v35 = v15;
  unint64_t v16 = sub_2170F5EA4(a1, a2, a3, (uint64_t)v36, (uint64_t)v34);
  int v29 = *a4;
  if (*((char *)a4 + 31) < 0)
  {
    sub_216778F24(&v30, *((void **)a4 + 1), *((void *)a4 + 2));
  }
  else
  {
    long long v30 = *v10;
    uint64_t v31 = *((void *)v10 + 2);
  }
  uint64_t v17 = *((void *)a4 + 5);
  uint64_t v32 = *((void *)a4 + 4);
  uint64_t v33 = v17;
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v18 = operator new(0x38uLL);
  *uint64_t v18 = &unk_26C773D10;
  sub_216D467D8((uint64_t)(v18 + 1), (uint64_t)&v29);
  v38[3] = v18;
  sub_2170F8214(v38, (void *)v16 + 8);
  sub_2170F5BA0(v38);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v29);
  sub_2170F5FA4(v34);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v19);
  sub_2170F6028(v36);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v24);
}

void sub_217100B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_2170F6028((void *)(v8 - 136));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_217100BE4(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 39) < 0)
  {
    if (!*(void *)(a2 + 24)) {
      goto LABEL_5;
    }
LABEL_17:
    *(_DWORD *)a1 = 2;
    sub_216779094((void *)(a1 + 8), "");
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    return a1;
  }
  if (*(unsigned char *)(a2 + 39)) {
    goto LABEL_17;
  }
LABEL_5:
  if (!*(void *)(a2 + 40)) {
    goto LABEL_17;
  }
  uint64_t v3 = (int *)(a2 + 8);
  uint64_t v4 = a2 + 56;
  uint64_t PropertyHeader = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(a2 + 8);
  if (!PropertyHeader) {
    goto LABEL_17;
  }
  BOOL v6 = *(_DWORD *)(PropertyHeader + 56) == 10 && *(unsigned char *)(PropertyHeader + 60) == 3;
  BOOL v7 = v6 && *(_DWORD *)(PropertyHeader + 24) == 2;
  if (!v7 || !sub_2167BEF00(PropertyHeader + 32, 0)) {
    goto LABEL_17;
  }
  v10[0] = 0;
  void v10[2] = 0;
  v9[0] = 0;
  v9[2] = 0;
  sub_2167BE97C(a1, v3, v4, v10, v9);
  return a1;
}

void sub_217100CC4(uint64_t **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, void *a3, int *a4)
{
  uint64_t v38[4] = *MEMORY[0x263EF8340];
  if (*((char *)a4 + 31) < 0)
  {
    if (*((void *)a4 + 2)) {
      BOOL v11 = 1;
    }
    else {
      BOOL v11 = *((void *)a4 + 4) == 0;
    }
    if (v11) {
      return;
    }
    int v24 = *a4;
    uint64_t v10 = (long long *)(a4 + 2);
    sub_216778F24(&v25, *((void **)a4 + 1), 0);
    uint64_t v8 = *((void *)a4 + 4);
  }
  else
  {
    uint64_t v8 = *((void *)a4 + 4);
    if (*((unsigned char *)a4 + 31)) {
      BOOL v9 = 1;
    }
    else {
      BOOL v9 = v8 == 0;
    }
    if (v9) {
      return;
    }
    int v24 = *a4;
    uint64_t v10 = (long long *)(a4 + 2);
    long long v25 = *(_OWORD *)(a4 + 2);
    uint64_t v26 = *((void *)a4 + 3);
  }
  uint64_t v12 = *((void *)a4 + 5);
  uint64_t v27 = v8;
  uint64_t v28 = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  int v37 = 0;
  uint64_t v13 = operator new(0x38uLL);
  *uint64_t v13 = &unk_26C773D80;
  sub_216D467D8((uint64_t)(v13 + 1), (uint64_t)&v24);
  int v37 = v13;
  int v19 = *a4;
  if (*((char *)a4 + 31) < 0)
  {
    sub_216778F24(&v20, *((void **)a4 + 1), *((void *)a4 + 2));
  }
  else
  {
    long long v20 = *v10;
    uint64_t v21 = *((void *)v10 + 2);
  }
  uint64_t v14 = *((void *)a4 + 5);
  uint64_t v22 = *((void *)a4 + 4);
  uint64_t v23 = v14;
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
  }
  long long v35 = 0;
  uint64_t v15 = operator new(0x38uLL);
  *uint64_t v15 = &unk_26C773E00;
  sub_216D467D8((uint64_t)(v15 + 1), (uint64_t)&v19);
  long long v35 = v15;
  unint64_t v16 = sub_2170F5EA4(a1, a2, a3, (uint64_t)v36, (uint64_t)v34);
  int v29 = *a4;
  if (*((char *)a4 + 31) < 0)
  {
    sub_216778F24(&v30, *((void **)a4 + 1), *((void *)a4 + 2));
  }
  else
  {
    long long v30 = *v10;
    uint64_t v31 = *((void *)v10 + 2);
  }
  uint64_t v17 = *((void *)a4 + 5);
  uint64_t v32 = *((void *)a4 + 4);
  uint64_t v33 = v17;
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v18 = operator new(0x38uLL);
  *uint64_t v18 = &unk_26C773E70;
  sub_216D467D8((uint64_t)(v18 + 1), (uint64_t)&v29);
  v38[3] = v18;
  sub_2170F8214(v38, (void *)v16 + 8);
  sub_2170F5BA0(v38);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v29);
  sub_2170F5FA4(v34);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v19);
  sub_2170F6028(v36);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v24);
}

void sub_217100F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_2170F6028((void *)(v8 - 136));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_217100FE4(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 39) < 0)
  {
    if (!*(void *)(a2 + 24)) {
      goto LABEL_5;
    }
LABEL_14:
    *(_DWORD *)a1 = 2;
    sub_216779094((void *)(a1 + 8), "");
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    return a1;
  }
  if (*(unsigned char *)(a2 + 39)) {
    goto LABEL_14;
  }
LABEL_5:
  if (!*(void *)(a2 + 40)) {
    goto LABEL_14;
  }
  uint64_t v3 = (int *)(a2 + 8);
  uint64_t v4 = a2 + 56;
  uint64_t PropertyHeader = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(a2 + 8);
  if (!PropertyHeader) {
    goto LABEL_14;
  }
  BOOL v6 = *(_DWORD *)(PropertyHeader + 56) == 6 && *(_DWORD *)(PropertyHeader + 24) == 2;
  if (!v6 || !sub_2167BB8F8(PropertyHeader + 32, 0)) {
    goto LABEL_14;
  }
  v9[0] = 0;
  v9[2] = 0;
  v8[0] = 0;
  void v8[2] = 0;
  sub_2167BB37C(a1, v3, v4, v9, v8);
  return a1;
}

void sub_2171010BC(uint64_t **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, void *a3, int *a4)
{
  uint64_t v38[4] = *MEMORY[0x263EF8340];
  if (*((char *)a4 + 31) < 0)
  {
    if (*((void *)a4 + 2)) {
      BOOL v11 = 1;
    }
    else {
      BOOL v11 = *((void *)a4 + 4) == 0;
    }
    if (v11) {
      return;
    }
    int v24 = *a4;
    uint64_t v10 = (long long *)(a4 + 2);
    sub_216778F24(&v25, *((void **)a4 + 1), 0);
    uint64_t v8 = *((void *)a4 + 4);
  }
  else
  {
    uint64_t v8 = *((void *)a4 + 4);
    if (*((unsigned char *)a4 + 31)) {
      BOOL v9 = 1;
    }
    else {
      BOOL v9 = v8 == 0;
    }
    if (v9) {
      return;
    }
    int v24 = *a4;
    uint64_t v10 = (long long *)(a4 + 2);
    long long v25 = *(_OWORD *)(a4 + 2);
    uint64_t v26 = *((void *)a4 + 3);
  }
  uint64_t v12 = *((void *)a4 + 5);
  uint64_t v27 = v8;
  uint64_t v28 = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  int v37 = 0;
  uint64_t v13 = operator new(0x38uLL);
  *uint64_t v13 = &unk_26C774328;
  sub_216D467D8((uint64_t)(v13 + 1), (uint64_t)&v24);
  int v37 = v13;
  int v19 = *a4;
  if (*((char *)a4 + 31) < 0)
  {
    sub_216778F24(&v20, *((void **)a4 + 1), *((void *)a4 + 2));
  }
  else
  {
    long long v20 = *v10;
    uint64_t v21 = *((void *)v10 + 2);
  }
  uint64_t v14 = *((void *)a4 + 5);
  uint64_t v22 = *((void *)a4 + 4);
  uint64_t v23 = v14;
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
  }
  long long v35 = 0;
  uint64_t v15 = operator new(0x38uLL);
  *uint64_t v15 = &unk_26C7743A8;
  sub_216D467D8((uint64_t)(v15 + 1), (uint64_t)&v19);
  long long v35 = v15;
  unint64_t v16 = sub_2170F5EA4(a1, a2, a3, (uint64_t)v36, (uint64_t)v34);
  int v29 = *a4;
  if (*((char *)a4 + 31) < 0)
  {
    sub_216778F24(&v30, *((void **)a4 + 1), *((void *)a4 + 2));
  }
  else
  {
    long long v30 = *v10;
    uint64_t v31 = *((void *)v10 + 2);
  }
  uint64_t v17 = *((void *)a4 + 5);
  uint64_t v32 = *((void *)a4 + 4);
  uint64_t v33 = v17;
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v18 = operator new(0x38uLL);
  *uint64_t v18 = &unk_26C774418;
  sub_216D467D8((uint64_t)(v18 + 1), (uint64_t)&v29);
  v38[3] = v18;
  sub_2170F8214(v38, (void *)v16 + 8);
  sub_2170F5BA0(v38);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v29);
  sub_2170F5FA4(v34);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v19);
  sub_2170F6028(v36);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v24);
}

void sub_217101350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_2170F6028((void *)(v8 - 136));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_2171013DC(uint64_t **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t a3)
{
  uint64_t v155 = *MEMORY[0x263EF8340];
  uint64_t v100 = a3;
  sub_216779094(&__p, "uv");
  sub_2170F5D84((uint64_t)a1, (unsigned __int8 **)&__p, (uint64_t)&v95);
  if (SHIBYTE(v134) < 0) {
    operator delete(__p);
  }
  sub_217107924((uint64_t)&v95, (uint64_t)&__p);
  int v5 = v148;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v143);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v138);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&__p);
  uint64_t v75 = a1;
  if (v5)
  {
    sub_217107924((uint64_t)&v95, (uint64_t)&v79);
    if (sub_2171081B8((uint64_t)&v79))
    {
      int v117 = v79;
      if (SHIBYTE(v81) < 0)
      {
        sub_216778F24(&v118, (void *)v80, *((unint64_t *)&v80 + 1));
      }
      else
      {
        long long v118 = v80;
        uint64_t v119 = v81;
      }
      uint64_t v120 = v82;
      uint64_t v121 = v83;
      if (v83) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v83 + 8), 1uLL, memory_order_relaxed);
      }
      int v122 = v84;
      if (SHIBYTE(v86) < 0)
      {
        sub_216778F24(&v123, (void *)v85, *((unint64_t *)&v85 + 1));
      }
      else
      {
        long long v123 = v85;
        uint64_t v124 = v86;
      }
      uint64_t v125 = v87;
      uint64_t v126 = v88;
      if (v88) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v88 + 8), 1uLL, memory_order_relaxed);
      }
      int v127 = v89;
      if (SHIBYTE(v91) < 0)
      {
        sub_216778F24(&__src, (void *)v90, *((unint64_t *)&v90 + 1));
      }
      else
      {
        long long __src = v90;
        uint64_t v129 = v91;
      }
      uint64_t v130 = v92;
      uint64_t v131 = v93;
      if (v93) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v93 + 8), 1uLL, memory_order_relaxed);
      }
      char v132 = v94;
      uint64_t v152 = 0;
      BOOL v6 = (char *)operator new(0xA0uLL);
      *(void *)BOOL v6 = &unk_26C774488;
      *((_DWORD *)v6 + 2) = v117;
      BOOL v7 = v6 + 16;
      if (SHIBYTE(v119) < 0)
      {
        sub_216778F24(v7, (void *)v118, *((unint64_t *)&v118 + 1));
      }
      else
      {
        *(_OWORD *)BOOL v7 = v118;
        *((void *)v6 + 4) = v119;
      }
      uint64_t v8 = v121;
      *((void *)v6 + 5) = v120;
      *((void *)v6 + 6) = v8;
      if (v8) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
      }
      *((_DWORD *)v6 + 14) = v122;
      BOOL v9 = v6 + 64;
      if (SHIBYTE(v124) < 0)
      {
        sub_216778F24(v9, (void *)v123, *((unint64_t *)&v123 + 1));
      }
      else
      {
        *(_OWORD *)BOOL v9 = v123;
        *((void *)v6 + 10) = v124;
      }
      uint64_t v10 = v126;
      *((void *)v6 + 11) = v125;
      *((void *)v6 + 12) = v10;
      if (v10) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
      }
      *((_DWORD *)v6 + 26) = v127;
      BOOL v11 = v6 + 112;
      if (SHIBYTE(v129) < 0)
      {
        sub_216778F24(v11, (void *)__src, *((unint64_t *)&__src + 1));
      }
      else
      {
        *(_OWORD *)BOOL v11 = __src;
        *((void *)v6 + 16) = v129;
      }
      uint64_t v12 = v131;
      *((void *)v6 + 17) = v130;
      *((void *)v6 + 18) = v12;
      if (v12) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
      }
      v6[152] = v132;
      uint64_t v152 = v6;
      int v101 = v79;
      if (SHIBYTE(v81) < 0)
      {
        sub_216778F24(&v102, (void *)v80, *((unint64_t *)&v80 + 1));
      }
      else
      {
        long long v102 = v80;
        uint64_t v103 = v81;
      }
      uint64_t v104 = v82;
      uint64_t v105 = v83;
      if (v83) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v83 + 8), 1uLL, memory_order_relaxed);
      }
      int v106 = v84;
      if (SHIBYTE(v86) < 0)
      {
        sub_216778F24(&v107, (void *)v85, *((unint64_t *)&v85 + 1));
      }
      else
      {
        long long v107 = v85;
        uint64_t v108 = v86;
      }
      uint64_t v109 = v87;
      uint64_t v110 = v88;
      if (v88) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v88 + 8), 1uLL, memory_order_relaxed);
      }
      int v111 = v89;
      if (SHIBYTE(v91) < 0)
      {
        sub_216778F24(&v112, (void *)v90, *((unint64_t *)&v90 + 1));
      }
      else
      {
        long long v112 = v90;
        uint64_t v113 = v91;
      }
      uint64_t v114 = v92;
      uint64_t v115 = v93;
      if (v93) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v93 + 8), 1uLL, memory_order_relaxed);
      }
      char v116 = v94;
      uint64_t v150 = 0;
      uint64_t v13 = (char *)operator new(0xA0uLL);
      *(void *)uint64_t v13 = &unk_26C774508;
      *((_DWORD *)v13 + 2) = v101;
      uint64_t v14 = v13 + 16;
      if (SHIBYTE(v103) < 0)
      {
        sub_216778F24(v14, (void *)v102, *((unint64_t *)&v102 + 1));
      }
      else
      {
        *(_OWORD *)uint64_t v14 = v102;
        *((void *)v13 + 4) = v103;
      }
      uint64_t v15 = v105;
      *((void *)v13 + 5) = v104;
      *((void *)v13 + 6) = v15;
      if (v15) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
      }
      *((_DWORD *)v13 + 14) = v106;
      unint64_t v16 = v13 + 64;
      if (SHIBYTE(v108) < 0)
      {
        sub_216778F24(v16, (void *)v107, *((unint64_t *)&v107 + 1));
      }
      else
      {
        *(_OWORD *)unint64_t v16 = v107;
        *((void *)v13 + 10) = v108;
      }
      uint64_t v17 = v110;
      *((void *)v13 + 11) = v109;
      *((void *)v13 + 12) = v17;
      if (v17) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
      }
      *((_DWORD *)v13 + 26) = v111;
      uint64_t v18 = v13 + 112;
      if (SHIBYTE(v113) < 0)
      {
        sub_216778F24(v18, (void *)v112, *((unint64_t *)&v112 + 1));
      }
      else
      {
        *(_OWORD *)uint64_t v18 = v112;
        *((void *)v13 + 16) = v113;
      }
      uint64_t v19 = v115;
      *((void *)v13 + 17) = v114;
      *((void *)v13 + 18) = v19;
      if (v19) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
      }
      v13[152] = v116;
      uint64_t v150 = v13;
      long long v20 = sub_2170F5EA4(a1, a2, &v100, (uint64_t)v151, (uint64_t)v149);
      LODWORD(__p) = v79;
      if (SHIBYTE(v81) < 0)
      {
        sub_216778F24(&v134, (void *)v80, *((unint64_t *)&v80 + 1));
      }
      else
      {
        long long v134 = v80;
        uint64_t v135 = v81;
      }
      uint64_t v136 = v82;
      uint64_t v137 = v83;
      if (v83) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v83 + 8), 1uLL, memory_order_relaxed);
      }
      int v138 = v84;
      if (SHIBYTE(v86) < 0)
      {
        sub_216778F24(&v139, (void *)v85, *((unint64_t *)&v85 + 1));
      }
      else
      {
        long long v139 = v85;
        uint64_t v140 = v86;
      }
      uint64_t v141 = v87;
      uint64_t v142 = v88;
      if (v88) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v88 + 8), 1uLL, memory_order_relaxed);
      }
      int v143 = v89;
      if (SHIBYTE(v91) < 0)
      {
        sub_216778F24(&v144, (void *)v90, *((unint64_t *)&v90 + 1));
      }
      else
      {
        long long v144 = v90;
        uint64_t v145 = v91;
      }
      uint64_t v146 = v92;
      uint64_t v147 = v93;
      if (v93) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v93 + 8), 1uLL, memory_order_relaxed);
      }
      unsigned __int8 v148 = v94;
      uint64_t v21 = (char *)operator new(0xA0uLL);
      *(void *)uint64_t v21 = &unk_26C774578;
      *((_DWORD *)v21 + 2) = __p;
      uint64_t v22 = v21 + 16;
      if (SHIBYTE(v135) < 0)
      {
        sub_216778F24(v22, (void *)v134, *((unint64_t *)&v134 + 1));
      }
      else
      {
        *(_OWORD *)uint64_t v22 = v134;
        *((void *)v21 + 4) = v135;
      }
      uint64_t v23 = v137;
      *((void *)v21 + 5) = v136;
      *((void *)v21 + 6) = v23;
      if (v23) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
      }
      *((_DWORD *)v21 + 14) = v138;
      int v24 = v21 + 64;
      if (SHIBYTE(v140) < 0)
      {
        sub_216778F24(v24, (void *)v139, *((unint64_t *)&v139 + 1));
      }
      else
      {
        *(_OWORD *)int v24 = v139;
        *((void *)v21 + 10) = v140;
      }
      uint64_t v25 = v142;
      *((void *)v21 + 11) = v141;
      *((void *)v21 + 12) = v25;
      if (v25) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
      }
      *((_DWORD *)v21 + 26) = v143;
      uint64_t v26 = v21 + 112;
      if (SHIBYTE(v145) < 0)
      {
        sub_216778F24(v26, (void *)v144, *((unint64_t *)&v144 + 1));
      }
      else
      {
        *(_OWORD *)uint64_t v26 = v144;
        *((void *)v21 + 16) = v145;
      }
      uint64_t v27 = v147;
      *((void *)v21 + 17) = v146;
      *((void *)v21 + 18) = v27;
      if (v27) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
      }
      v21[152] = v148;
      unint64_t v154 = v21;
      sub_2170F8214(v153, (void *)v20 + 8);
      sub_2170F5BA0(v153);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v143);
      Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v138);
      Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&__p);
      sub_2170F5FA4(v149);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v111);
      Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v106);
      Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v101);
      sub_2170F6028(v151);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v127);
      Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v122);
      Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v117);
    }
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v89);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v84);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v79);
    uint64_t v28 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v28) {
      uint64_t v28 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::JoinIdentifier(a2, (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)((char *)v28 + 464), (uint64_t)&v76);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v78);
    int v29 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (!v29) {
      int v29 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    }
    sub_217107924((uint64_t)&v95, (uint64_t)&v79);
    if (sub_2171081B8((uint64_t)&v79))
    {
      int v117 = v79;
      if (SHIBYTE(v81) < 0)
      {
        sub_216778F24(&v118, (void *)v80, *((unint64_t *)&v80 + 1));
      }
      else
      {
        long long v118 = v80;
        uint64_t v119 = v81;
      }
      uint64_t v120 = v82;
      uint64_t v121 = v83;
      if (v83) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v83 + 8), 1uLL, memory_order_relaxed);
      }
      int v122 = v84;
      if (SHIBYTE(v86) < 0)
      {
        sub_216778F24(&v123, (void *)v85, *((unint64_t *)&v85 + 1));
      }
      else
      {
        long long v123 = v85;
        uint64_t v124 = v86;
      }
      uint64_t v125 = v87;
      uint64_t v126 = v88;
      if (v88) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v88 + 8), 1uLL, memory_order_relaxed);
      }
      int v127 = v89;
      if (SHIBYTE(v91) < 0)
      {
        sub_216778F24(&__src, (void *)v90, *((unint64_t *)&v90 + 1));
      }
      else
      {
        long long __src = v90;
        uint64_t v129 = v91;
      }
      uint64_t v130 = v92;
      uint64_t v131 = v93;
      if (v93) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v93 + 8), 1uLL, memory_order_relaxed);
      }
      char v132 = v94;
      uint64_t v152 = 0;
      long long v30 = (char *)operator new(0xA0uLL);
      *(void *)long long v30 = &unk_26C774698;
      *((_DWORD *)v30 + 2) = v117;
      uint64_t v31 = v30 + 16;
      if (SHIBYTE(v119) < 0)
      {
        sub_216778F24(v31, (void *)v118, *((unint64_t *)&v118 + 1));
      }
      else
      {
        *(_OWORD *)uint64_t v31 = v118;
        *((void *)v30 + 4) = v119;
      }
      uint64_t v32 = v121;
      *((void *)v30 + 5) = v120;
      *((void *)v30 + 6) = v32;
      if (v32) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v32 + 8), 1uLL, memory_order_relaxed);
      }
      *((_DWORD *)v30 + 14) = v122;
      uint64_t v33 = v30 + 64;
      if (SHIBYTE(v124) < 0)
      {
        sub_216778F24(v33, (void *)v123, *((unint64_t *)&v123 + 1));
      }
      else
      {
        *(_OWORD *)uint64_t v33 = v123;
        *((void *)v30 + 10) = v124;
      }
      uint64_t v34 = v126;
      *((void *)v30 + 11) = v125;
      *((void *)v30 + 12) = v34;
      if (v34) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v34 + 8), 1uLL, memory_order_relaxed);
      }
      *((_DWORD *)v30 + 26) = v127;
      long long v35 = v30 + 112;
      if (SHIBYTE(v129) < 0)
      {
        sub_216778F24(v35, (void *)__src, *((unint64_t *)&__src + 1));
      }
      else
      {
        *(_OWORD *)long long v35 = __src;
        *((void *)v30 + 16) = v129;
      }
      uint64_t v36 = v131;
      *((void *)v30 + 17) = v130;
      *((void *)v30 + 18) = v36;
      if (v36) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v36 + 8), 1uLL, memory_order_relaxed);
      }
      v30[152] = v132;
      uint64_t v152 = v30;
      int v101 = v79;
      if (SHIBYTE(v81) < 0)
      {
        sub_216778F24(&v102, (void *)v80, *((unint64_t *)&v80 + 1));
      }
      else
      {
        long long v102 = v80;
        uint64_t v103 = v81;
      }
      uint64_t v104 = v82;
      uint64_t v105 = v83;
      if (v83) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v83 + 8), 1uLL, memory_order_relaxed);
      }
      int v106 = v84;
      if (SHIBYTE(v86) < 0)
      {
        sub_216778F24(&v107, (void *)v85, *((unint64_t *)&v85 + 1));
      }
      else
      {
        long long v107 = v85;
        uint64_t v108 = v86;
      }
      uint64_t v109 = v87;
      uint64_t v110 = v88;
      if (v88) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v88 + 8), 1uLL, memory_order_relaxed);
      }
      int v111 = v89;
      if (SHIBYTE(v91) < 0)
      {
        sub_216778F24(&v112, (void *)v90, *((unint64_t *)&v90 + 1));
      }
      else
      {
        long long v112 = v90;
        uint64_t v113 = v91;
      }
      uint64_t v114 = v92;
      uint64_t v115 = v93;
      if (v93) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v93 + 8), 1uLL, memory_order_relaxed);
      }
      char v116 = v94;
      uint64_t v150 = 0;
      int v37 = (char *)operator new(0xA0uLL);
      *(void *)int v37 = &unk_26C774718;
      *((_DWORD *)v37 + 2) = v101;
      uint64_t v38 = v37 + 16;
      if (SHIBYTE(v103) < 0)
      {
        sub_216778F24(v38, (void *)v102, *((unint64_t *)&v102 + 1));
      }
      else
      {
        *(_OWORD *)uint64_t v38 = v102;
        *((void *)v37 + 4) = v103;
      }
      uint64_t v39 = v105;
      *((void *)v37 + 5) = v104;
      *((void *)v37 + 6) = v39;
      if (v39) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v39 + 8), 1uLL, memory_order_relaxed);
      }
      *((_DWORD *)v37 + 14) = v106;
      int v40 = v37 + 64;
      if (SHIBYTE(v108) < 0)
      {
        sub_216778F24(v40, (void *)v107, *((unint64_t *)&v107 + 1));
      }
      else
      {
        *(_OWORD *)int v40 = v107;
        *((void *)v37 + 10) = v108;
      }
      uint64_t v41 = v110;
      *((void *)v37 + 11) = v109;
      *((void *)v37 + 12) = v41;
      if (v41) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v41 + 8), 1uLL, memory_order_relaxed);
      }
      *((_DWORD *)v37 + 26) = v111;
      std::string v42 = v37 + 112;
      if (SHIBYTE(v113) < 0)
      {
        sub_216778F24(v42, (void *)v112, *((unint64_t *)&v112 + 1));
      }
      else
      {
        *(_OWORD *)std::string v42 = v112;
        *((void *)v37 + 16) = v113;
      }
      uint64_t v43 = v115;
      *((void *)v37 + 17) = v114;
      *((void *)v37 + 18) = v43;
      if (v43) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v43 + 8), 1uLL, memory_order_relaxed);
      }
      v37[152] = v116;
      uint64_t v150 = v37;
      char v44 = sub_2170F5EA4(v75, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v78, (void *)v29 + 58, (uint64_t)v151, (uint64_t)v149);
      LODWORD(__p) = v79;
      if (SHIBYTE(v81) < 0)
      {
        sub_216778F24(&v134, (void *)v80, *((unint64_t *)&v80 + 1));
      }
      else
      {
        long long v134 = v80;
        uint64_t v135 = v81;
      }
      uint64_t v136 = v82;
      uint64_t v137 = v83;
      if (v83) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v83 + 8), 1uLL, memory_order_relaxed);
      }
      int v138 = v84;
      if (SHIBYTE(v86) < 0)
      {
        sub_216778F24(&v139, (void *)v85, *((unint64_t *)&v85 + 1));
      }
      else
      {
        long long v139 = v85;
        uint64_t v140 = v86;
      }
      uint64_t v141 = v87;
      uint64_t v142 = v88;
      if (v88) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v88 + 8), 1uLL, memory_order_relaxed);
      }
      int v143 = v89;
      if (SHIBYTE(v91) < 0)
      {
        sub_216778F24(&v144, (void *)v90, *((unint64_t *)&v90 + 1));
      }
      else
      {
        long long v144 = v90;
        uint64_t v145 = v91;
      }
      uint64_t v146 = v92;
      uint64_t v147 = v93;
      if (v93) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v93 + 8), 1uLL, memory_order_relaxed);
      }
      unsigned __int8 v148 = v94;
      uint64_t v45 = (char *)operator new(0xA0uLL);
      *(void *)uint64_t v45 = &unk_26C774788;
      *((_DWORD *)v45 + 2) = __p;
      long long v46 = v45 + 16;
      if (SHIBYTE(v135) < 0)
      {
        sub_216778F24(v46, (void *)v134, *((unint64_t *)&v134 + 1));
      }
      else
      {
        *(_OWORD *)long long v46 = v134;
        *((void *)v45 + 4) = v135;
      }
      uint64_t v47 = v137;
      *((void *)v45 + 5) = v136;
      *((void *)v45 + 6) = v47;
      if (v47) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v47 + 8), 1uLL, memory_order_relaxed);
      }
      *((_DWORD *)v45 + 14) = v138;
      int v48 = v45 + 64;
      if (SHIBYTE(v140) < 0)
      {
        sub_216778F24(v48, (void *)v139, *((unint64_t *)&v139 + 1));
      }
      else
      {
        *(_OWORD *)int v48 = v139;
        *((void *)v45 + 10) = v140;
      }
      uint64_t v49 = v142;
      *((void *)v45 + 11) = v141;
      *((void *)v45 + 12) = v49;
      if (v49) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v49 + 8), 1uLL, memory_order_relaxed);
      }
      *((_DWORD *)v45 + 26) = v143;
      char v50 = v45 + 112;
      if (SHIBYTE(v145) < 0)
      {
        sub_216778F24(v50, (void *)v144, *((unint64_t *)&v144 + 1));
      }
      else
      {
        *(_OWORD *)char v50 = v144;
        *((void *)v45 + 16) = v145;
      }
      uint64_t v51 = v147;
      *((void *)v45 + 17) = v146;
      *((void *)v45 + 18) = v51;
      if (v51) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v51 + 8), 1uLL, memory_order_relaxed);
      }
      v45[152] = v148;
      unint64_t v154 = v45;
      sub_2170F8214(v153, (void *)v44 + 8);
      sub_2170F5BA0(v153);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v143);
      Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v138);
      Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&__p);
      sub_2170F5FA4(v149);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v111);
      Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v106);
      Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v101);
      sub_2170F6028(v151);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v127);
      Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v122);
      Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v117);
    }
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v89);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v84);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v79);
    if ((v78 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v78 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    if (v77 < 0) {
      operator delete(v76);
    }
  }
  else
  {
    sub_217107924((uint64_t)&v95, (uint64_t)&v79);
    if (sub_2171081B8((uint64_t)&v79))
    {
      int v117 = v79;
      if (SHIBYTE(v81) < 0)
      {
        sub_216778F24(&v118, (void *)v80, *((unint64_t *)&v80 + 1));
      }
      else
      {
        long long v118 = v80;
        uint64_t v119 = v81;
      }
      uint64_t v120 = v82;
      uint64_t v121 = v83;
      if (v83) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v83 + 8), 1uLL, memory_order_relaxed);
      }
      int v122 = v84;
      if (SHIBYTE(v86) < 0)
      {
        sub_216778F24(&v123, (void *)v85, *((unint64_t *)&v85 + 1));
      }
      else
      {
        long long v123 = v85;
        uint64_t v124 = v86;
      }
      uint64_t v125 = v87;
      uint64_t v126 = v88;
      if (v88) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v88 + 8), 1uLL, memory_order_relaxed);
      }
      int v127 = v89;
      if (SHIBYTE(v91) < 0)
      {
        sub_216778F24(&__src, (void *)v90, *((unint64_t *)&v90 + 1));
      }
      else
      {
        long long __src = v90;
        uint64_t v129 = v91;
      }
      uint64_t v130 = v92;
      uint64_t v131 = v93;
      if (v93) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v93 + 8), 1uLL, memory_order_relaxed);
      }
      char v132 = v94;
      uint64_t v152 = 0;
      uint64_t v52 = (char *)operator new(0xA0uLL);
      *(void *)uint64_t v52 = &unk_26C7747F8;
      *((_DWORD *)v52 + 2) = v117;
      int v53 = v52 + 16;
      if (SHIBYTE(v119) < 0)
      {
        sub_216778F24(v53, (void *)v118, *((unint64_t *)&v118 + 1));
      }
      else
      {
        *(_OWORD *)int v53 = v118;
        *((void *)v52 + 4) = v119;
      }
      uint64_t v54 = v121;
      *((void *)v52 + 5) = v120;
      *((void *)v52 + 6) = v54;
      if (v54) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v54 + 8), 1uLL, memory_order_relaxed);
      }
      *((_DWORD *)v52 + 14) = v122;
      uint64_t v55 = v52 + 64;
      if (SHIBYTE(v124) < 0)
      {
        sub_216778F24(v55, (void *)v123, *((unint64_t *)&v123 + 1));
      }
      else
      {
        *(_OWORD *)uint64_t v55 = v123;
        *((void *)v52 + 10) = v124;
      }
      uint64_t v56 = v126;
      *((void *)v52 + 11) = v125;
      *((void *)v52 + 12) = v56;
      if (v56) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v56 + 8), 1uLL, memory_order_relaxed);
      }
      *((_DWORD *)v52 + 26) = v127;
      std::string v57 = v52 + 112;
      if (SHIBYTE(v129) < 0)
      {
        sub_216778F24(v57, (void *)__src, *((unint64_t *)&__src + 1));
      }
      else
      {
        *(_OWORD *)std::string v57 = __src;
        *((void *)v52 + 16) = v129;
      }
      uint64_t v58 = v131;
      *((void *)v52 + 17) = v130;
      *((void *)v52 + 18) = v58;
      if (v58) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v58 + 8), 1uLL, memory_order_relaxed);
      }
      v52[152] = v132;
      uint64_t v152 = v52;
      int v101 = v79;
      if (SHIBYTE(v81) < 0)
      {
        sub_216778F24(&v102, (void *)v80, *((unint64_t *)&v80 + 1));
      }
      else
      {
        long long v102 = v80;
        uint64_t v103 = v81;
      }
      uint64_t v104 = v82;
      uint64_t v105 = v83;
      if (v83) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v83 + 8), 1uLL, memory_order_relaxed);
      }
      int v106 = v84;
      if (SHIBYTE(v86) < 0)
      {
        sub_216778F24(&v107, (void *)v85, *((unint64_t *)&v85 + 1));
      }
      else
      {
        long long v107 = v85;
        uint64_t v108 = v86;
      }
      uint64_t v109 = v87;
      uint64_t v110 = v88;
      if (v88) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v88 + 8), 1uLL, memory_order_relaxed);
      }
      int v111 = v89;
      if (SHIBYTE(v91) < 0)
      {
        sub_216778F24(&v112, (void *)v90, *((unint64_t *)&v90 + 1));
      }
      else
      {
        long long v112 = v90;
        uint64_t v113 = v91;
      }
      uint64_t v114 = v92;
      uint64_t v115 = v93;
      if (v93) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v93 + 8), 1uLL, memory_order_relaxed);
      }
      char v116 = v94;
      uint64_t v150 = 0;
      uint64_t v59 = (char *)operator new(0xA0uLL);
      *(void *)uint64_t v59 = &unk_26C774878;
      *((_DWORD *)v59 + 2) = v101;
      uint64_t v60 = v59 + 16;
      if (SHIBYTE(v103) < 0)
      {
        sub_216778F24(v60, (void *)v102, *((unint64_t *)&v102 + 1));
      }
      else
      {
        *(_OWORD *)uint64_t v60 = v102;
        *((void *)v59 + 4) = v103;
      }
      uint64_t v61 = v105;
      *((void *)v59 + 5) = v104;
      *((void *)v59 + 6) = v61;
      if (v61) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v61 + 8), 1uLL, memory_order_relaxed);
      }
      *((_DWORD *)v59 + 14) = v106;
      unint64_t v62 = v59 + 64;
      if (SHIBYTE(v108) < 0)
      {
        sub_216778F24(v62, (void *)v107, *((unint64_t *)&v107 + 1));
      }
      else
      {
        *(_OWORD *)unint64_t v62 = v107;
        *((void *)v59 + 10) = v108;
      }
      uint64_t v63 = v110;
      *((void *)v59 + 11) = v109;
      *((void *)v59 + 12) = v63;
      if (v63) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v63 + 8), 1uLL, memory_order_relaxed);
      }
      *((_DWORD *)v59 + 26) = v111;
      uint64_t v64 = v59 + 112;
      if (SHIBYTE(v113) < 0)
      {
        sub_216778F24(v64, (void *)v112, *((unint64_t *)&v112 + 1));
      }
      else
      {
        *(_OWORD *)uint64_t v64 = v112;
        *((void *)v59 + 16) = v113;
      }
      uint64_t v65 = v115;
      *((void *)v59 + 17) = v114;
      *((void *)v59 + 18) = v65;
      if (v65) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v65 + 8), 1uLL, memory_order_relaxed);
      }
      v59[152] = v116;
      uint64_t v150 = v59;
      int v66 = sub_2170F5EA4(a1, a2, &v100, (uint64_t)v151, (uint64_t)v149);
      LODWORD(__p) = v79;
      if (SHIBYTE(v81) < 0)
      {
        sub_216778F24(&v134, (void *)v80, *((unint64_t *)&v80 + 1));
      }
      else
      {
        long long v134 = v80;
        uint64_t v135 = v81;
      }
      uint64_t v136 = v82;
      uint64_t v137 = v83;
      if (v83) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v83 + 8), 1uLL, memory_order_relaxed);
      }
      int v138 = v84;
      if (SHIBYTE(v86) < 0)
      {
        sub_216778F24(&v139, (void *)v85, *((unint64_t *)&v85 + 1));
      }
      else
      {
        long long v139 = v85;
        uint64_t v140 = v86;
      }
      uint64_t v141 = v87;
      uint64_t v142 = v88;
      if (v88) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v88 + 8), 1uLL, memory_order_relaxed);
      }
      int v143 = v89;
      if (SHIBYTE(v91) < 0)
      {
        sub_216778F24(&v144, (void *)v90, *((unint64_t *)&v90 + 1));
      }
      else
      {
        long long v144 = v90;
        uint64_t v145 = v91;
      }
      uint64_t v146 = v92;
      uint64_t v147 = v93;
      if (v93) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v93 + 8), 1uLL, memory_order_relaxed);
      }
      unsigned __int8 v148 = v94;
      int v67 = (char *)operator new(0xA0uLL);
      *(void *)int v67 = &unk_26C7748E8;
      *((_DWORD *)v67 + 2) = __p;
      uint64_t v68 = v67 + 16;
      if (SHIBYTE(v135) < 0)
      {
        sub_216778F24(v68, (void *)v134, *((unint64_t *)&v134 + 1));
      }
      else
      {
        *(_OWORD *)uint64_t v68 = v134;
        *((void *)v67 + 4) = v135;
      }
      uint64_t v69 = v137;
      *((void *)v67 + 5) = v136;
      *((void *)v67 + 6) = v69;
      if (v69) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v69 + 8), 1uLL, memory_order_relaxed);
      }
      *((_DWORD *)v67 + 14) = v138;
      unint64_t v70 = v67 + 64;
      if (SHIBYTE(v140) < 0)
      {
        sub_216778F24(v70, (void *)v139, *((unint64_t *)&v139 + 1));
      }
      else
      {
        *(_OWORD *)unint64_t v70 = v139;
        *((void *)v67 + 10) = v140;
      }
      uint64_t v71 = v142;
      *((void *)v67 + 11) = v141;
      *((void *)v67 + 12) = v71;
      if (v71) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v71 + 8), 1uLL, memory_order_relaxed);
      }
      *((_DWORD *)v67 + 26) = v143;
      char v72 = v67 + 112;
      if (SHIBYTE(v145) < 0)
      {
        sub_216778F24(v72, (void *)v144, *((unint64_t *)&v144 + 1));
      }
      else
      {
        *(_OWORD *)char v72 = v144;
        *((void *)v67 + 16) = v145;
      }
      uint64_t v73 = v147;
      *((void *)v67 + 17) = v146;
      *((void *)v67 + 18) = v73;
      if (v73) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v73 + 8), 1uLL, memory_order_relaxed);
      }
      v67[152] = v148;
      unint64_t v154 = v67;
      sub_2170F8214(v153, (void *)v66 + 8);
      sub_2170F5BA0(v153);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v143);
      Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v138);
      Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&__p);
      sub_2170F5FA4(v149);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v111);
      Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v106);
      Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v101);
      sub_2170F6028(v151);
      Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v127);
      Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v122);
      Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v117);
    }
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v89);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v84);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v79);
  }
  if (v99 < 0) {
    operator delete(v98);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v97);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v96);
  return sub_21697C414(&v95);
}

void sub_217102BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  if ((a18 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_2170F5E4C((uint64_t)&a38);
  _Unwind_Resume(a1);
}

void sub_217103000()
{
  if (SLOBYTE(STACK[0x26F]) < 0) {
    operator delete((void *)STACK[0x258]);
  }
  JUMPOUT(0x217102FF8);
}

void sub_217103018()
{
}

void sub_217103020()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95DD8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95DD8))
  {
    uint64_t v0 = (unsigned __int8 *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ABC_WRITE_UV_AS_ST_TEXCOORD2FARRAY);
    if (!v0) {
      pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
    }
    int v1 = *v0;
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
    if (v1)
    {
      if (!v2) {
        uint64_t v2 = sub_2170FC394(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
      }
      uint64_t v3 = (uint64_t *)((char *)v2 + 48);
    }
    else
    {
      if (!v2) {
        uint64_t v2 = sub_2170FC394(&pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames);
      }
      uint64_t v3 = (uint64_t *)((char *)v2 + 32);
    }
    uint64_t v4 = *v3;
    qword_267B95DD0 = v4;
    if ((v4 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      qword_267B95DD0 &= 0xFFFFFFFFFFFFFFF8;
    }
    __cxa_atexit((void (*)(void *))sub_216BC90EC, &qword_267B95DD0, &dword_216758000);
    __cxa_guard_release(&qword_267B95DD8);
  }
}

void sub_217103144(_Unwind_Exception *a1)
{
}

void sub_21710315C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_267B95DE8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_267B95DE8))
  {
    uint64_t v0 = (unsigned __int8 *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ABC_WRITE_UV_AS_ST_TEXCOORD2FARRAY);
    if (!v0) {
      pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
    }
    int v1 = *v0;
    uint64_t v2 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
    if (v1)
    {
      if (!v2) {
        uint64_t v2 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      }
      uint64_t v3 = (uint64_t *)((char *)v2 + 840);
    }
    else
    {
      if (!v2) {
        uint64_t v2 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
      }
      uint64_t v3 = (uint64_t *)((char *)v2 + 608);
    }
    qword_267B95DE0 = *v3;
    __cxa_guard_release(&qword_267B95DE8);
  }
}

void sub_217103238(_Unwind_Exception *a1)
{
}

uint64_t sub_217103250(uint64_t a1, int a2)
{
  if (a2 == 2)
  {
    sub_216779094(v34, "schema");
    sub_21679F2AC(a1, v34, &v36);
    if (((char)v37 & 0x80000000) == 0)
    {
      BOOL v10 = v37 == 15 && (void)v36 == 0x5F6D6F6547636241 && *(void *)((char *)&v36 + 7) == 0x31765F446275535FLL;
      goto LABEL_72;
    }
    BOOL v11 = (void *)v36;
    BOOL v10 = *((void *)&v36 + 1) == 15
       && *(void *)v36 == 0x5F6D6F6547636241
       && *(void *)(v36 + 7) == 0x31765F446275535FLL;
    goto LABEL_71;
  }
  if (a2 == 1) {
    return 1;
  }
  if (a2) {
    return 0;
  }
  sub_216779094(v34, "schemaObjTitle");
  sub_21679F2AC(a1, v34, &v36);
  sub_2171035B4(&v33);
  uint64_t v3 = v37;
  if ((v37 & 0x80u) == 0) {
    uint64_t v4 = v37;
  }
  else {
    uint64_t v4 = *((void *)&v36 + 1);
  }
  std::string::size_type size = HIBYTE(v33.__r_.__value_.__r.__words[2]);
  char v6 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v33.__r_.__value_.__l.__size_;
  }
  if (v4 != size)
  {
LABEL_39:
    sub_216779094(v28, "schema");
    sub_21679F2AC(a1, (const void **)v28, &__s1);
    sub_2171035B4(&__p);
    unsigned __int8 v13 = v32;
    if ((v32 & 0x80u) == 0) {
      size_t v14 = v32;
    }
    else {
      size_t v14 = __n;
    }
    std::string::size_type v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    int v16 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v15 = __p.__r_.__value_.__l.__size_;
    }
    if (v14 != v15)
    {
      BOOL v10 = 0;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_63;
      }
      goto LABEL_58;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((char)v32 < 0)
    {
      BOOL v10 = memcmp(__s1, p_p, __n) == 0;
    }
    else
    {
      if (!v32)
      {
        BOOL v10 = 1;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_63:
          if ((v13 & 0x80) != 0) {
            operator delete(__s1);
          }
          if (v29 < 0) {
            operator delete(v28[0]);
          }
          if ((*((unsigned char *)&v33.__r_.__value_.__s + 23) & 0x80) == 0) {
            goto LABEL_69;
          }
          goto LABEL_68;
        }
LABEL_58:
        operator delete(__p.__r_.__value_.__l.__data_);
        unsigned __int8 v13 = v32;
        goto LABEL_63;
      }
      uint64_t v18 = v32 - 1;
      p_s1 = &__s1;
      do
      {
        int v21 = *(unsigned __int8 *)p_s1;
        p_s1 = (void **)((char *)p_s1 + 1);
        int v20 = v21;
        int v23 = p_p->__r_.__value_.__s.__data_[0];
        p_p = (std::string *)((char *)p_p + 1);
        int v22 = v23;
        BOOL v25 = v18-- != 0;
        BOOL v10 = v20 == v22;
      }
      while (v20 == v22 && v25);
    }
    if ((v16 & 0x80000000) == 0) {
      goto LABEL_63;
    }
    goto LABEL_58;
  }
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    BOOL v7 = &v33;
  }
  else {
    BOOL v7 = (std::string *)v33.__r_.__value_.__r.__words[0];
  }
  if ((v37 & 0x80) != 0)
  {
    if (memcmp((const void *)v36, v7, *((size_t *)&v36 + 1))) {
      goto LABEL_39;
    }
  }
  else if (v37)
  {
    uint64_t v8 = (unsigned __int8 *)&v36;
    while (*v8 == v7->__r_.__value_.__s.__data_[0])
    {
      ++v8;
      BOOL v7 = (std::string *)((char *)v7 + 1);
      if (!--v3) {
        goto LABEL_59;
      }
    }
    goto LABEL_39;
  }
LABEL_59:
  BOOL v10 = 1;
  if (v6 < 0) {
LABEL_68:
  }
    operator delete(v33.__r_.__value_.__l.__data_);
LABEL_69:
  if (((char)v37 & 0x80000000) == 0) {
    goto LABEL_72;
  }
  BOOL v11 = (void *)v36;
LABEL_71:
  operator delete(v11);
LABEL_72:
  if (v35 < 0) {
    operator delete((void *)v34[0]);
  }
  return v10;
}

void sub_217103534(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (*(char *)(v29 - 33) < 0) {
    operator delete(*(void **)(v29 - 56));
  }
  if (*(char *)(v29 - 57) < 0) {
    operator delete(*(void **)(v29 - 80));
  }
  _Unwind_Resume(exception_object);
}

void sub_2171035B4(std::string *a1@<X8>)
{
  sub_216779094(&v5, ":");
  uint64_t v2 = std::string::insert(&v5, 0, "AbcGeom_SubD_v1");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v6.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v6.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  uint64_t v4 = std::string::append(&v6, ".geom");
  *a1 = *v4;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
}

void sub_217103660(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void *sub_217103694(void *a1)
{
  *a1 = &unk_26C773AC0;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));
  return a1;
}

void sub_2171036D8(void *a1)
{
  *a1 = &unk_26C773AC0;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));

  operator delete(a1);
}

void *sub_21710372C(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x38uLL);
  *uint64_t v2 = &unk_26C773AC0;
  sub_216D467D8((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_217103780(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_217103794(uint64_t a1, void *a2)
{
  *a2 = &unk_26C773AC0;
  return sub_216D467D8((uint64_t)(a2 + 1), a1 + 8);
}

void sub_2171037C0(uint64_t a1)
{
}

void sub_2171037C8(uint64_t a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 8));

  operator delete((void *)a1);
}

uint64_t sub_217103804(uint64_t a1)
{
  return sub_2168087E8(a1 + 8) + 32;
}

uint64_t sub_217103824(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C773B20)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217103864()
{
  return &unk_26C773B20;
}

void *sub_217103870(void *a1)
{
  *a1 = &unk_26C773B40;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));
  return a1;
}

void sub_2171038B4(void *a1)
{
  *a1 = &unk_26C773B40;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));

  operator delete(a1);
}

void *sub_217103908(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x38uLL);
  *uint64_t v2 = &unk_26C773B40;
  sub_216D467D8((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_21710395C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_217103970(uint64_t a1, void *a2)
{
  *a2 = &unk_26C773B40;
  return sub_216D467D8((uint64_t)(a2 + 1), a1 + 8);
}

void sub_21710399C(uint64_t a1)
{
}

void sub_2171039A4(uint64_t a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 8));

  operator delete((void *)a1);
}

void sub_2171039E0(uint64_t a1@<X0>, double **a2@<X8>)
{
}

uint64_t sub_2171039E8(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C773B20)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217103A28()
{
  return &unk_26C773B20;
}

void sub_217103A34(Alembic::Abc::v12::IArrayProperty *this@<X0>, double **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (*((char *)this + 31) < 0)
  {
    if (*((void *)this + 2)) {
      return;
    }
  }
  else if (*((unsigned char *)this + 31))
  {
    return;
  }
  if (*((void *)this + 4))
  {
    Alembic::Abc::v12::IArrayProperty::getTimeSampling(this, &v20);
    uint64_t NumSamples = Alembic::Abc::v12::IArrayProperty::getNumSamples(this);
    if (Alembic::Abc::v12::IArrayProperty::isConstant(this)) {
      uint64_t v5 = NumSamples != 0;
    }
    else {
      uint64_t v5 = NumSamples;
    }
    if (v5)
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        double SampleTime = Alembic::AbcCoreAbstract::v12::TimeSampling::getSampleTime((double **)v20, i);
        double v8 = SampleTime;
        BOOL v10 = a2[1];
        unint64_t v9 = (unint64_t)a2[2];
        if ((unint64_t)v10 >= v9)
        {
          uint64_t v12 = *a2;
          uint64_t v13 = v10 - *a2;
          unint64_t v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 61) {
            sub_21677CB10();
          }
          uint64_t v15 = v9 - (void)v12;
          if (v15 >> 2 > v14) {
            unint64_t v14 = v15 >> 2;
          }
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v16 = v14;
          }
          if (v16)
          {
            uint64_t v17 = (char *)sub_21677CB28((uint64_t)(a2 + 2), v16);
            uint64_t v12 = *a2;
            BOOL v10 = a2[1];
          }
          else
          {
            uint64_t v17 = 0;
          }
          uint64_t v18 = (double *)&v17[8 * v13];
          *uint64_t v18 = v8;
          BOOL v11 = v18 + 1;
          while (v10 != v12)
          {
            uint64_t v19 = *((void *)v10-- - 1);
            *((void *)v18-- - 1) = v19;
          }
          *a2 = v18;
          a2[1] = v11;
          a2[2] = (double *)&v17[8 * v16];
          if (v12) {
            operator delete(v12);
          }
        }
        else
        {
          *BOOL v10 = SampleTime;
          BOOL v11 = v10 + 1;
        }
        a2[1] = v11;
      }
    }
    if (v21) {
      sub_216784EC4(v21);
    }
  }
}

void sub_217103BBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v12 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + 8) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

void *sub_217103BF4(void *a1)
{
  *a1 = &unk_26C773BB0;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));
  return a1;
}

void sub_217103C38(void *a1)
{
  *a1 = &unk_26C773BB0;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));

  operator delete(a1);
}

void *sub_217103C8C(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x38uLL);
  *uint64_t v2 = &unk_26C773BB0;
  sub_216D467D8((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_217103CE0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_217103CF4(uint64_t a1, void *a2)
{
  *a2 = &unk_26C773BB0;
  return sub_216D467D8((uint64_t)(a2 + 1), a1 + 8);
}

void sub_217103D20(uint64_t a1)
{
}

void sub_217103D28(uint64_t a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 8));

  operator delete((void *)a1);
}

uint64_t sub_217103D64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v8[2] = *MEMORY[0x263EF8340];
  sub_217103FA8(a1 + 8, a3, &v6);
  sub_217103E78(&v6, v8);
  uint64_t v4 = sub_2170FFC3C(a2, (uint64_t)v8);
  sub_2168EE084((uint64_t)v8);
  if (v7) {
    sub_216784EC4(v7);
  }
  return v4;
}

void sub_217103DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  va_start(va, a4);
  sub_2168EE084((uint64_t)va);
  if (a4) {
    sub_216784EC4(a4);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_217103E2C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C773B20)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217103E6C()
{
  return &unk_26C773B20;
}

void sub_217103E78(uint64_t **a1@<X0>, void *a2@<X8>)
{
  long long v3 = *a1;
  if (*a1)
  {
    uint64_t v5 = (uint64_t *)v3[2];
    uint64_t v6 = v3[3] - (void)v5;
    if (v6)
    {
      unint64_t v7 = v6 >> 3;
      if (v7 <= 1) {
        unint64_t v7 = 1;
      }
      unint64_t v8 = 1;
      do
      {
        uint64_t v9 = *v5++;
        v8 *= v9;
        --v7;
      }
      while (v7);
    }
    else
    {
      unint64_t v8 = 0;
    }
    uint64_t v10 = *v3;
    sub_2168FD0E8((uint64_t)v24, v8);
    sub_2168FD54C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v24, v11, v12);
    uint64_t v13 = (uint64_t *)(*a1)[2];
    uint64_t v14 = (*a1)[3] - (void)v13;
    if (v14)
    {
      unint64_t v15 = v14 >> 3;
      if (v15 <= 1) {
        unint64_t v15 = 1;
      }
      uint64_t v16 = 1;
      do
      {
        uint64_t v17 = v16;
        uint64_t v19 = *v13++;
        uint64_t v18 = v19;
        v16 *= v19;
        --v15;
      }
      while (v15);
      if (v16)
      {
        int v20 = (_DWORD *)(v10 + 8);
        uint64_t v21 = v17 * v18;
        int v22 = (_DWORD *)(v25 + 8);
        do
        {
          int v23 = *v20;
          *((void *)v22 - 1) = *((void *)v20 - 1);
          *int v22 = v23;
          v22 += 3;
          v20 += 3;
          --v21;
        }
        while (v21);
      }
    }
    a2[1] = off_26C74F110;
    sub_2168F8DBC(a2, (uint64_t)v24);
    sub_2168F83DC((uint64_t)v24);
  }
  else
  {
    a2[1] = 0;
  }
}

void sub_217103F8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_217103FA8(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  sub_2167BAA94(a1, a3, a2);
}

void sub_217103FD8(_Unwind_Exception *exception_object)
{
  long long v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    sub_216784EC4(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_217103FF0(uint64_t a1, uint64_t a2, int a3)
{
  if (*(char *)(a2 + 39) < 0)
  {
    if (!*(void *)(a2 + 24)) {
      goto LABEL_5;
    }
LABEL_17:
    *(_DWORD *)a1 = 2;
    sub_216779094((void *)(a1 + 8), "");
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    return a1;
  }
  if (*(unsigned char *)(a2 + 39)) {
    goto LABEL_17;
  }
LABEL_5:
  if (!*(void *)(a2 + 40)) {
    goto LABEL_17;
  }
  uint64_t v5 = (int *)(a2 + 8);
  uint64_t v6 = a2 + 56;
  uint64_t PropertyHeader = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(a2 + 8);
  if (!PropertyHeader) {
    goto LABEL_17;
  }
  BOOL v8 = *(_DWORD *)(PropertyHeader + 56) == 10 && *(unsigned char *)(PropertyHeader + 60) == 3;
  BOOL v9 = v8 && *(_DWORD *)(PropertyHeader + 24) == 2;
  if (!v9 || !sub_2167BB284(PropertyHeader + 32, a3)) {
    goto LABEL_17;
  }
  v12[0] = 0;
  v12[2] = 0;
  v11[0] = 0;
  void v11[2] = 0;
  sub_2167BAD00(a1, v5, v6, v12, v11);
  return a1;
}

void *sub_2171040D4(void *a1)
{
  *a1 = &unk_26C773C20;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));
  return a1;
}

void sub_217104118(void *a1)
{
  *a1 = &unk_26C773C20;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));

  operator delete(a1);
}

void *sub_21710416C(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x38uLL);
  *uint64_t v2 = &unk_26C773C20;
  sub_216D467D8((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_2171041C0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2171041D4(uint64_t a1, void *a2)
{
  *a2 = &unk_26C773C20;
  return sub_216D467D8((uint64_t)(a2 + 1), a1 + 8);
}

void sub_217104200(uint64_t a1)
{
}

void sub_217104208(uint64_t a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 8));

  operator delete((void *)a1);
}

uint64_t sub_217104244(uint64_t a1)
{
  return sub_2168087E8(a1 + 8) + 32;
}

uint64_t sub_217104264(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C773C80)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2171042A4()
{
  return &unk_26C773C80;
}

void *sub_2171042B0(void *a1)
{
  *a1 = &unk_26C773CA0;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));
  return a1;
}

void sub_2171042F4(void *a1)
{
  *a1 = &unk_26C773CA0;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));

  operator delete(a1);
}

void *sub_217104348(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x38uLL);
  *uint64_t v2 = &unk_26C773CA0;
  sub_216D467D8((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_21710439C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2171043B0(uint64_t a1, void *a2)
{
  *a2 = &unk_26C773CA0;
  return sub_216D467D8((uint64_t)(a2 + 1), a1 + 8);
}

void sub_2171043DC(uint64_t a1)
{
}

void sub_2171043E4(uint64_t a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 8));

  operator delete((void *)a1);
}

void sub_217104420(uint64_t a1@<X0>, double **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (*(char *)(a1 + 39) < 0)
  {
    if (*(void *)(a1 + 24)) {
      return;
    }
  }
  else if (*(unsigned char *)(a1 + 39))
  {
    return;
  }
  if (*(void *)(a1 + 40))
  {
    long long v3 = (Alembic::Abc::v12::IArrayProperty *)(a1 + 8);
    Alembic::Abc::v12::IArrayProperty::getTimeSampling((Alembic::Abc::v12::IArrayProperty *)(a1 + 8), &v20);
    uint64_t NumSamples = Alembic::Abc::v12::IArrayProperty::getNumSamples(v3);
    if (Alembic::Abc::v12::IArrayProperty::isConstant(v3)) {
      uint64_t v5 = NumSamples != 0;
    }
    else {
      uint64_t v5 = NumSamples;
    }
    if (v5)
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        double SampleTime = Alembic::AbcCoreAbstract::v12::TimeSampling::getSampleTime((double **)v20, i);
        double v8 = SampleTime;
        uint64_t v10 = a2[1];
        unint64_t v9 = (unint64_t)a2[2];
        if ((unint64_t)v10 >= v9)
        {
          uint64_t v12 = *a2;
          uint64_t v13 = v10 - *a2;
          unint64_t v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 61) {
            sub_21677CB10();
          }
          uint64_t v15 = v9 - (void)v12;
          if (v15 >> 2 > v14) {
            unint64_t v14 = v15 >> 2;
          }
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v16 = v14;
          }
          if (v16)
          {
            uint64_t v17 = (char *)sub_21677CB28((uint64_t)(a2 + 2), v16);
            uint64_t v12 = *a2;
            uint64_t v10 = a2[1];
          }
          else
          {
            uint64_t v17 = 0;
          }
          uint64_t v18 = (double *)&v17[8 * v13];
          *uint64_t v18 = v8;
          uint64_t v11 = v18 + 1;
          while (v10 != v12)
          {
            uint64_t v19 = *((void *)v10-- - 1);
            *((void *)v18-- - 1) = v19;
          }
          *a2 = v18;
          a2[1] = v11;
          a2[2] = (double *)&v17[8 * v16];
          if (v12) {
            operator delete(v12);
          }
        }
        else
        {
          *uint64_t v10 = SampleTime;
          uint64_t v11 = v10 + 1;
        }
        a2[1] = v11;
      }
    }
    if (v21) {
      sub_216784EC4(v21);
    }
  }
}

void sub_2171045A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v12 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + 8) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2171045E0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C773C80)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217104620()
{
  return &unk_26C773C80;
}

void *sub_21710462C(void *a1)
{
  *a1 = &unk_26C773D10;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));
  return a1;
}

void sub_217104670(void *a1)
{
  *a1 = &unk_26C773D10;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));

  operator delete(a1);
}

void *sub_2171046C4(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x38uLL);
  *uint64_t v2 = &unk_26C773D10;
  sub_216D467D8((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_217104718(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21710472C(uint64_t a1, void *a2)
{
  *a2 = &unk_26C773D10;
  return sub_216D467D8((uint64_t)(a2 + 1), a1 + 8);
}

void sub_217104758(uint64_t a1)
{
}

void sub_217104760(uint64_t a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 8));

  operator delete((void *)a1);
}

uint64_t sub_21710479C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  sub_2171049E4(a1 + 8, a3, &v29);
  if (v29)
  {
    uint64_t v4 = (uint64_t *)v29[2];
    uint64_t v5 = v29[3] - (void)v4;
    if (v5)
    {
      unint64_t v6 = v5 >> 3;
      if (v6 <= 1) {
        unint64_t v6 = 1;
      }
      unint64_t v7 = 1;
      do
      {
        uint64_t v8 = *v4++;
        v7 *= v8;
        --v6;
      }
      while (v6);
    }
    else
    {
      unint64_t v7 = 0;
    }
    uint64_t v9 = *v29;
    sub_2168FD0E8((uint64_t)v31, v7);
    sub_2168FD54C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v31, v10, v11);
    uint64_t v12 = (uint64_t *)v29[2];
    uint64_t v13 = v29[3] - (void)v12;
    if (v13)
    {
      unint64_t v14 = v13 >> 3;
      if (v14 <= 1) {
        unint64_t v14 = 1;
      }
      uint64_t v15 = 1;
      do
      {
        uint64_t v16 = v15;
        uint64_t v18 = *v12++;
        uint64_t v17 = v18;
        v15 *= v18;
        --v14;
      }
      while (v14);
      if (v15)
      {
        uint64_t v19 = (_DWORD *)(v9 + 8);
        uint64_t v20 = v16 * v17;
        uint64_t v21 = (_DWORD *)(v32 + 8);
        do
        {
          int v22 = *v19;
          *((void *)v21 - 1) = *((void *)v19 - 1);
          *uint64_t v21 = v22;
          v21 += 3;
          v19 += 3;
          --v20;
        }
        while (v20);
      }
    }
    uint64_t v34 = off_26C74F110;
    int v23 = operator new(0x30uLL);
    long long v24 = v31[1];
    *(_OWORD *)int v23 = v31[0];
    *((_OWORD *)v23 + 1) = v24;
    uint64_t v25 = v32;
    *((void *)v23 + 4) = v32;
    if (v25)
    {
      uint64_t v26 = (atomic_ullong *)(v25 - 16);
      if (*((void *)v23 + 3)) {
        uint64_t v26 = (atomic_ullong *)*((void *)v23 + 3);
      }
      atomic_fetch_add_explicit(v26, 1uLL, memory_order_relaxed);
    }
    atomic_store(0, (unsigned int *)v23 + 10);
    std::string v33 = v23;
    atomic_fetch_add_explicit((atomic_uint *volatile)v23 + 10, 1u, memory_order_relaxed);
    sub_2168F83DC((uint64_t)v31);
  }
  else
  {
    uint64_t v34 = 0;
  }
  uint64_t v27 = sub_2170FFC3C(a2, (uint64_t)&v33);
  sub_2168EE084((uint64_t)&v33);
  if (v30) {
    sub_216784EC4(v30);
  }
  return v27;
}

void sub_217104940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_217104998(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C773C80)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2171049D8()
{
  return &unk_26C773C80;
}

void sub_2171049E4(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  sub_2167BAC84(a1, a3, a2);
}

void sub_217104A14(_Unwind_Exception *exception_object)
{
  long long v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    sub_216784EC4(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_217104A2C(void *a1)
{
  *a1 = &unk_26C773D80;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));
  return a1;
}

void sub_217104A70(void *a1)
{
  *a1 = &unk_26C773D80;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));

  operator delete(a1);
}

void *sub_217104AC4(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x38uLL);
  *uint64_t v2 = &unk_26C773D80;
  sub_216D467D8((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_217104B18(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_217104B2C(uint64_t a1, void *a2)
{
  *a2 = &unk_26C773D80;
  return sub_216D467D8((uint64_t)(a2 + 1), a1 + 8);
}

void sub_217104B58(uint64_t a1)
{
}

void sub_217104B60(uint64_t a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 8));

  operator delete((void *)a1);
}

uint64_t sub_217104B9C(uint64_t a1)
{
  return sub_2168087E8(a1 + 8) + 32;
}

uint64_t sub_217104BBC(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C773DE0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217104BFC()
{
  return &unk_26C773DE0;
}

void *sub_217104C08(void *a1)
{
  *a1 = &unk_26C773E00;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));
  return a1;
}

void sub_217104C4C(void *a1)
{
  *a1 = &unk_26C773E00;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));

  operator delete(a1);
}

void *sub_217104CA0(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x38uLL);
  *uint64_t v2 = &unk_26C773E00;
  sub_216D467D8((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_217104CF4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_217104D08(uint64_t a1, void *a2)
{
  *a2 = &unk_26C773E00;
  return sub_216D467D8((uint64_t)(a2 + 1), a1 + 8);
}

void sub_217104D34(uint64_t a1)
{
}

void sub_217104D3C(uint64_t a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 8));

  operator delete((void *)a1);
}

void sub_217104D78(uint64_t a1@<X0>, double **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (*(char *)(a1 + 39) < 0)
  {
    if (*(void *)(a1 + 24)) {
      return;
    }
  }
  else if (*(unsigned char *)(a1 + 39))
  {
    return;
  }
  if (*(void *)(a1 + 40))
  {
    long long v3 = (Alembic::Abc::v12::IArrayProperty *)(a1 + 8);
    Alembic::Abc::v12::IArrayProperty::getTimeSampling((Alembic::Abc::v12::IArrayProperty *)(a1 + 8), &v20);
    uint64_t NumSamples = Alembic::Abc::v12::IArrayProperty::getNumSamples(v3);
    if (Alembic::Abc::v12::IArrayProperty::isConstant(v3)) {
      uint64_t v5 = NumSamples != 0;
    }
    else {
      uint64_t v5 = NumSamples;
    }
    if (v5)
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        double SampleTime = Alembic::AbcCoreAbstract::v12::TimeSampling::getSampleTime((double **)v20, i);
        double v8 = SampleTime;
        uint64_t v10 = a2[1];
        unint64_t v9 = (unint64_t)a2[2];
        if ((unint64_t)v10 >= v9)
        {
          uint64_t v12 = *a2;
          uint64_t v13 = v10 - *a2;
          unint64_t v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 61) {
            sub_21677CB10();
          }
          uint64_t v15 = v9 - (void)v12;
          if (v15 >> 2 > v14) {
            unint64_t v14 = v15 >> 2;
          }
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v16 = v14;
          }
          if (v16)
          {
            uint64_t v17 = (char *)sub_21677CB28((uint64_t)(a2 + 2), v16);
            uint64_t v12 = *a2;
            uint64_t v10 = a2[1];
          }
          else
          {
            uint64_t v17 = 0;
          }
          uint64_t v18 = (double *)&v17[8 * v13];
          *uint64_t v18 = v8;
          uint64_t v11 = v18 + 1;
          while (v10 != v12)
          {
            uint64_t v19 = *((void *)v10-- - 1);
            *((void *)v18-- - 1) = v19;
          }
          *a2 = v18;
          a2[1] = v11;
          a2[2] = (double *)&v17[8 * v16];
          if (v12) {
            operator delete(v12);
          }
        }
        else
        {
          *uint64_t v10 = SampleTime;
          uint64_t v11 = v10 + 1;
        }
        a2[1] = v11;
      }
    }
    if (v21) {
      sub_216784EC4(v21);
    }
  }
}

void sub_217104F00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v12 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + 8) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_217104F38(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C773DE0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217104F78()
{
  return &unk_26C773DE0;
}

void *sub_217104F84(void *a1)
{
  *a1 = &unk_26C773E70;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));
  return a1;
}

void sub_217104FC8(void *a1)
{
  *a1 = &unk_26C773E70;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));

  operator delete(a1);
}

void *sub_21710501C(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x38uLL);
  *uint64_t v2 = &unk_26C773E70;
  sub_216D467D8((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_217105070(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_217105084(uint64_t a1, void *a2)
{
  *a2 = &unk_26C773E70;
  return sub_216D467D8((uint64_t)(a2 + 1), a1 + 8);
}

void sub_2171050B0(uint64_t a1)
{
}

void sub_2171050B8(uint64_t a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 8));

  operator delete((void *)a1);
}

uint64_t sub_2171050F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  sub_21710531C(a1 + 8, a3, &v24);
  if (v24)
  {
    uint64_t v4 = *(uint64_t **)(v24 + 16);
    uint64_t v5 = *(void *)(v24 + 24) - (void)v4;
    if (v5)
    {
      unint64_t v6 = v5 >> 3;
      if (v6 <= 1) {
        unint64_t v6 = 1;
      }
      unint64_t v7 = 1;
      do
      {
        uint64_t v8 = *v4++;
        v7 *= v8;
        --v6;
      }
      while (v6);
    }
    else
    {
      unint64_t v7 = 0;
    }
    unint64_t v9 = *(const void **)v24;
    sub_216907954((uint64_t)v26, v7);
    sub_216907C74((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v26, v10, v11);
    uint64_t v12 = *(uint64_t **)(v24 + 16);
    uint64_t v13 = *(void *)(v24 + 24) - (void)v12;
    if (v13)
    {
      unint64_t v14 = v13 >> 3;
      uint64_t v15 = v14 <= 1 ? 1 : v14;
      uint64_t v16 = 1;
      do
      {
        uint64_t v17 = *v12++;
        v16 *= v17;
        --v15;
      }
      while (v15);
      if (v16) {
        memmove(__dst, v9, 4 * v16);
      }
    }
    uint64_t v29 = &off_26C74FA68;
    uint64_t v18 = operator new(0x30uLL);
    long long v19 = v26[1];
    *(_OWORD *)uint64_t v18 = v26[0];
    *((_OWORD *)v18 + 1) = v19;
    uint64_t v20 = (char *)__dst;
    *((void *)v18 + 4) = __dst;
    if (v20)
    {
      uint64_t v21 = (atomic_ullong *)(v20 - 16);
      if (*((void *)v18 + 3)) {
        uint64_t v21 = (atomic_ullong *)*((void *)v18 + 3);
      }
      atomic_fetch_add_explicit(v21, 1uLL, memory_order_relaxed);
    }
    atomic_store(0, (unsigned int *)v18 + 10);
    uint64_t v28 = v18;
    atomic_fetch_add_explicit((atomic_uint *volatile)v18 + 10, 1u, memory_order_relaxed);
    sub_2168F83DC((uint64_t)v26);
  }
  else
  {
    uint64_t v29 = 0;
  }
  uint64_t v22 = sub_2170FFC3C(a2, (uint64_t)&v28);
  sub_2168EE084((uint64_t)&v28);
  if (v25) {
    sub_216784EC4(v25);
  }
  return v22;
}

void sub_217105278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2171052D0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C773DE0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217105310()
{
  return &unk_26C773DE0;
}

void sub_21710531C(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  sub_2167BAB10(a1, a3, a2);
}

void sub_21710534C(_Unwind_Exception *exception_object)
{
  long long v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    sub_216784EC4(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_217105364(void *a1)
{
  *a1 = &unk_26C773EE0;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 1));
  return a1;
}

void sub_2171053A8(void *a1)
{
  *a1 = &unk_26C773EE0;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 1));

  operator delete(a1);
}

void *sub_2171053FC(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x38uLL);
  *uint64_t v2 = &unk_26C773EE0;
  sub_216D467D8((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_217105450(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_217105464(uint64_t a1, void *a2)
{
  *a2 = &unk_26C773EE0;
  return sub_216D467D8((uint64_t)(a2 + 1), a1 + 8);
}

void sub_217105490(uint64_t a1)
{
}

void sub_217105498(uint64_t a1)
{
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 8));

  operator delete((void *)a1);
}

uint64_t sub_2171054D4(uint64_t a1)
{
  return sub_2167B5CBC(a1 + 8) + 32;
}

uint64_t sub_2171054F4(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C773F40)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217105534()
{
  return &unk_26C773F40;
}

void *sub_217105540(void *a1)
{
  *a1 = &unk_26C773F68;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 1));
  return a1;
}

void sub_217105584(void *a1)
{
  *a1 = &unk_26C773F68;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 1));

  operator delete(a1);
}

void *sub_2171055D8(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x38uLL);
  *uint64_t v2 = &unk_26C773F68;
  sub_216D467D8((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_21710562C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_217105640(uint64_t a1, void *a2)
{
  *a2 = &unk_26C773F68;
  return sub_216D467D8((uint64_t)(a2 + 1), a1 + 8);
}

void sub_21710566C(uint64_t a1)
{
}

void sub_217105674(uint64_t a1)
{
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 8));

  operator delete((void *)a1);
}

void sub_2171056B0(uint64_t a1@<X0>, double **a2@<X8>)
{
}

uint64_t sub_2171056B8(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C773F40)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2171056F8()
{
  return &unk_26C773F40;
}

void *sub_217105704(void *a1)
{
  *a1 = &unk_26C773FD8;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 1));
  return a1;
}

void sub_217105748(void *a1)
{
  *a1 = &unk_26C773FD8;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 1));

  operator delete(a1);
}

void *sub_21710579C(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x38uLL);
  *uint64_t v2 = &unk_26C773FD8;
  sub_216D467D8((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_2171057F0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_217105804(uint64_t a1, void *a2)
{
  *a2 = &unk_26C773FD8;
  return sub_216D467D8((uint64_t)(a2 + 1), a1 + 8);
}

void sub_217105830(uint64_t a1)
{
}

void sub_217105838(uint64_t a1)
{
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 8));

  operator delete((void *)a1);
}

uint64_t sub_217105874(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (int *)(a1 + 8);
  sub_2167A46DC(a1 + 8, a3, &v26);
  if ((char)v27 < 0)
  {
    if (*((uint64_t *)&v26 + 1) <= 7)
    {
      if (*((void *)&v26 + 1))
      {
        if (*((void *)&v26 + 1) == 4)
        {
          int v6 = *(_DWORD *)v26;
LABEL_10:
          if (v6 == 1886351212)
          {
            unint64_t v7 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
            if (!v7) {
              unint64_t v7 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
            }
            unint64_t v8 = *((void *)v7 + 69);
            __p[0] = (void *)v8;
            if ((v8 & 7) != 0)
            {
              unint64_t v9 = (void *)(v8 & 0xFFFFFFFFFFFFFFF8);
              if ((atomic_fetch_add_explicit((atomic_uint *volatile)v9, 2u, memory_order_relaxed) & 1) == 0) {
                __p[0] = v9;
              }
            }
            goto LABEL_48;
          }
        }
LABEL_41:
        sub_216779094(__p, "catmull-clark");
        sub_2170F9FEC(v5, a3, 1, (uint64_t *)&v26, (uint64_t *)__p);
        if (v25 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v16 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
        if (!v16) {
          uint64_t v16 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
        }
        unint64_t v17 = *((void *)v16 + 12);
        __p[0] = (void *)v17;
        if ((v17 & 7) != 0)
        {
          uint64_t v18 = (void *)(v17 & 0xFFFFFFFFFFFFFFF8);
          if ((atomic_fetch_add_explicit((atomic_uint *volatile)v18, 2u, memory_order_relaxed) & 1) == 0) {
            __p[0] = v18;
          }
        }
        goto LABEL_48;
      }
      goto LABEL_32;
    }
    if (*((void *)&v26 + 1) != 8)
    {
      if (*((void *)&v26 + 1) != 13) {
        goto LABEL_41;
      }
      if (*(void *)v26 != 0x2D6C6C756D746163 || *(void *)(v26 + 5) != 0x6B72616C632D6C6CLL) {
        goto LABEL_41;
      }
LABEL_32:
      uint64_t v12 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v12) {
        uint64_t v12 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      }
      unint64_t v13 = *((void *)v12 + 12);
      __p[0] = (void *)v13;
      if ((v13 & 7) != 0)
      {
        unint64_t v14 = (void *)(v13 & 0xFFFFFFFFFFFFFFF8);
        if ((atomic_fetch_add_explicit((atomic_uint *volatile)v14, 2u, memory_order_relaxed) & 1) == 0) {
          __p[0] = v14;
        }
      }
      goto LABEL_48;
    }
    uint64_t v15 = (long long *)v26;
  }
  else
  {
    if (v27 <= 7u)
    {
      if (v27)
      {
        if (v27 == 4)
        {
          int v6 = v26;
          goto LABEL_10;
        }
        goto LABEL_41;
      }
      goto LABEL_32;
    }
    if (v27 != 8)
    {
      if (v27 != 13) {
        goto LABEL_41;
      }
      if ((void)v26 != 0x2D6C6C756D746163 || *(void *)((char *)&v26 + 5) != 0x6B72616C632D6C6CLL) {
        goto LABEL_41;
      }
      goto LABEL_32;
    }
    uint64_t v15 = &v26;
  }
  if (*(void *)v15 != 0x7261656E696C6962) {
    goto LABEL_41;
  }
  uint64_t v21 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v21) {
    uint64_t v21 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  unint64_t v22 = *((void *)v21 + 6);
  __p[0] = (void *)v22;
  if ((v22 & 7) != 0)
  {
    int v23 = (void *)(v22 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit((atomic_uint *volatile)v23, 2u, memory_order_relaxed) & 1) == 0) {
      __p[0] = v23;
    }
  }
LABEL_48:
  uint64_t v19 = sub_2170F9F98(a2, (uint64_t)__p);
  if (((uint64_t)__p[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((char)v27 < 0) {
    operator delete((void *)v26);
  }
  return v19;
}

void sub_217105B80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_217105BE4(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C773F40)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217105C24()
{
  return &unk_26C773F40;
}

void *sub_217105C30(void *a1)
{
  *a1 = &unk_26C774048;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 1));
  return a1;
}

void sub_217105C74(void *a1)
{
  *a1 = &unk_26C774048;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 1));

  operator delete(a1);
}

void *sub_217105CC8(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x38uLL);
  *uint64_t v2 = &unk_26C774048;
  sub_216D467D8((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_217105D1C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_217105D30(uint64_t a1, void *a2)
{
  *a2 = &unk_26C774048;
  return sub_216D467D8((uint64_t)(a2 + 1), a1 + 8);
}

void sub_217105D5C(uint64_t a1)
{
}

void sub_217105D64(uint64_t a1)
{
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 8));

  operator delete((void *)a1);
}

uint64_t sub_217105DA0(uint64_t a1)
{
  return sub_2167B5CBC(a1 + 8) + 32;
}

uint64_t sub_217105DC0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7740B8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217105E00()
{
  return &unk_26C7740B8;
}

void *sub_217105E0C(void *a1)
{
  *a1 = &unk_26C7740E0;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 1));
  return a1;
}

void sub_217105E50(void *a1)
{
  *a1 = &unk_26C7740E0;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 1));

  operator delete(a1);
}

void *sub_217105EA4(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x38uLL);
  *uint64_t v2 = &unk_26C7740E0;
  sub_216D467D8((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_217105EF8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_217105F0C(uint64_t a1, void *a2)
{
  *a2 = &unk_26C7740E0;
  return sub_216D467D8((uint64_t)(a2 + 1), a1 + 8);
}

void sub_217105F38(uint64_t a1)
{
}

void sub_217105F40(uint64_t a1)
{
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 8));

  operator delete((void *)a1);
}

void sub_217105F7C(uint64_t a1@<X0>, double **a2@<X8>)
{
}

uint64_t sub_217105F84(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7740B8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217105FC4()
{
  return &unk_26C7740B8;
}

void sub_217105FD0(Alembic::Abc::v12::IScalarProperty *this@<X0>, double **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (*((char *)this + 31) < 0)
  {
    if (*((void *)this + 2)) {
      return;
    }
  }
  else if (*((unsigned char *)this + 31))
  {
    return;
  }
  if (*((void *)this + 4))
  {
    Alembic::Abc::v12::IScalarProperty::getTimeSampling(this, &v20);
    uint64_t NumSamples = Alembic::Abc::v12::IScalarProperty::getNumSamples(this);
    if (Alembic::Abc::v12::IScalarProperty::isConstant(this)) {
      uint64_t v5 = NumSamples != 0;
    }
    else {
      uint64_t v5 = NumSamples;
    }
    if (v5)
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        double SampleTime = Alembic::AbcCoreAbstract::v12::TimeSampling::getSampleTime((double **)v20, i);
        double v8 = SampleTime;
        uint64_t v10 = a2[1];
        unint64_t v9 = (unint64_t)a2[2];
        if ((unint64_t)v10 >= v9)
        {
          uint64_t v12 = *a2;
          uint64_t v13 = v10 - *a2;
          unint64_t v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 61) {
            sub_21677CB10();
          }
          uint64_t v15 = v9 - (void)v12;
          if (v15 >> 2 > v14) {
            unint64_t v14 = v15 >> 2;
          }
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v16 = v14;
          }
          if (v16)
          {
            unint64_t v17 = (char *)sub_21677CB28((uint64_t)(a2 + 2), v16);
            uint64_t v12 = *a2;
            uint64_t v10 = a2[1];
          }
          else
          {
            unint64_t v17 = 0;
          }
          uint64_t v18 = (double *)&v17[8 * v13];
          *uint64_t v18 = v8;
          uint64_t v11 = v18 + 1;
          while (v10 != v12)
          {
            uint64_t v19 = *((void *)v10-- - 1);
            *((void *)v18-- - 1) = v19;
          }
          *a2 = v18;
          a2[1] = v11;
          a2[2] = (double *)&v17[8 * v16];
          if (v12) {
            operator delete(v12);
          }
        }
        else
        {
          *uint64_t v10 = SampleTime;
          uint64_t v11 = v10 + 1;
        }
        a2[1] = v11;
      }
    }
    if (v21) {
      sub_216784EC4(v21);
    }
  }
}

void sub_217106158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v12 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + 8) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

void *sub_217106190(void *a1)
{
  *a1 = &unk_26C774150;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 1));
  return a1;
}

void sub_2171061D4(void *a1)
{
  *a1 = &unk_26C774150;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 1));

  operator delete(a1);
}

void *sub_217106228(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x38uLL);
  *uint64_t v2 = &unk_26C774150;
  sub_216D467D8((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_21710627C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_217106290(uint64_t a1, void *a2)
{
  *a2 = &unk_26C774150;
  return sub_216D467D8((uint64_t)(a2 + 1), a1 + 8);
}

void sub_2171062BC(uint64_t a1)
{
}

void sub_2171062C4(uint64_t a1)
{
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 8));

  operator delete((void *)a1);
}

uint64_t sub_217106300(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (int *)(a1 + 8);
  LODWORD(v22[0]) = 0;
  Alembic::Abc::v12::IScalarProperty::get(a1 + 8, (uint64_t)v22, a3, 4);
  if (LODWORD(v22[0]))
  {
    if (LODWORD(v22[0]) == 2)
    {
      uint64_t v10 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v10) {
        uint64_t v10 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      }
      unint64_t v11 = *((void *)v10 + 33);
      v22[0] = (void *)v11;
      if ((v11 & 7) != 0)
      {
        uint64_t v12 = (void *)(v11 & 0xFFFFFFFFFFFFFFF8);
        if ((atomic_fetch_add_explicit((atomic_uint *volatile)v12, 2u, memory_order_relaxed) & 1) == 0) {
          v22[0] = v12;
        }
      }
      goto LABEL_9;
    }
    if (LODWORD(v22[0]) == 1)
    {
      int v6 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v6) {
        int v6 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      }
      unint64_t v7 = *((void *)v6 + 32);
      v22[0] = (void *)v7;
      if ((v7 & 7) != 0)
      {
        double v8 = (void *)(v7 & 0xFFFFFFFFFFFFFFF8);
        if ((atomic_fetch_add_explicit((atomic_uint *volatile)v8, 2u, memory_order_relaxed) & 1) == 0) {
          v22[0] = v8;
        }
      }
LABEL_9:
      uint64_t result = sub_2170F9F98(a2, (uint64_t)v22);
      goto LABEL_31;
    }
    LODWORD(__p[0]) = 0;
    Alembic::Abc::v12::IScalarProperty::get((uint64_t)v5, (uint64_t)__p, a3, 4);
    int v19 = (int)__p[0];
    sub_216997470();
    if (v21 >= 0) {
      uint64_t v13 = (char *)&v20;
    }
    else {
      uint64_t v13 = (char *)v20;
    }
    sub_216779094(v22, v13);
    sub_216779094(__p, "0");
    sub_2170F9FEC(v5, a3, 2, (uint64_t *)v22, (uint64_t *)__p);
    if (v18 < 0) {
      operator delete(__p[0]);
    }
    if (v23 < 0) {
      operator delete(v22[0]);
    }
    if (v21 < 0) {
      operator delete(v20);
    }
  }
  unint64_t v14 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (!v14) {
    unint64_t v14 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  }
  unint64_t v15 = *((void *)v14 + 85);
  v22[0] = (void *)v15;
  if ((v15 & 7) != 0)
  {
    unint64_t v16 = (void *)(v15 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit((atomic_uint *volatile)v16, 2u, memory_order_relaxed) & 1) == 0) {
      v22[0] = v16;
    }
  }
  uint64_t result = sub_2170F9F98(a2, (uint64_t)v22);
LABEL_31:
  if (((uint64_t)v22[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v22[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void sub_217106514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_217106588(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7740B8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2171065C8()
{
  return &unk_26C7740B8;
}

uint64_t sub_2171065D4(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 39) < 0)
  {
    if (!*(void *)(a2 + 24)) {
      goto LABEL_5;
    }
LABEL_17:
    *(_DWORD *)a1 = 2;
    sub_216779094((void *)(a1 + 8), "");
    *(void *)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
    return a1;
  }
  if (*(unsigned char *)(a2 + 39)) {
    goto LABEL_17;
  }
LABEL_5:
  if (!*(void *)(a2 + 40)) {
    goto LABEL_17;
  }
  long long v3 = (int *)(a2 + 8);
  uint64_t v4 = a2 + 56;
  uint64_t PropertyHeader = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(a2 + 8);
  if (!PropertyHeader) {
    goto LABEL_17;
  }
  BOOL v6 = *(_DWORD *)(PropertyHeader + 56) == 6 && *(unsigned char *)(PropertyHeader + 60) == 1;
  BOOL v7 = v6 && *(_DWORD *)(PropertyHeader + 24) == 1;
  if (!v7 || !sub_2167DEA58(PropertyHeader + 32, 0)) {
    goto LABEL_17;
  }
  v10[0] = 0;
  void v10[2] = 0;
  v9[0] = 0;
  v9[2] = 0;
  sub_2167DE4D4(a1, v3, v4, v10, v9);
  return a1;
}

void *sub_2171066B4(void *a1)
{
  *a1 = &unk_26C7741C0;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 1));
  return a1;
}

void sub_2171066F8(void *a1)
{
  *a1 = &unk_26C7741C0;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 1));

  operator delete(a1);
}

void *sub_21710674C(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x38uLL);
  *uint64_t v2 = &unk_26C7741C0;
  sub_216D467D8((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_2171067A0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2171067B4(uint64_t a1, void *a2)
{
  *a2 = &unk_26C7741C0;
  return sub_216D467D8((uint64_t)(a2 + 1), a1 + 8);
}

void sub_2171067E0(uint64_t a1)
{
}

void sub_2171067E8(uint64_t a1)
{
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 8));

  operator delete((void *)a1);
}

uint64_t sub_217106824(uint64_t a1)
{
  return sub_2167B5CBC(a1 + 8) + 32;
}

uint64_t sub_217106844(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C774220)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217106884()
{
  return &unk_26C774220;
}

void *sub_217106890(void *a1)
{
  *a1 = &unk_26C774248;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 1));
  return a1;
}

void sub_2171068D4(void *a1)
{
  *a1 = &unk_26C774248;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 1));

  operator delete(a1);
}

void *sub_217106928(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x38uLL);
  *uint64_t v2 = &unk_26C774248;
  sub_216D467D8((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_21710697C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_217106990(uint64_t a1, void *a2)
{
  *a2 = &unk_26C774248;
  return sub_216D467D8((uint64_t)(a2 + 1), a1 + 8);
}

void sub_2171069BC(uint64_t a1)
{
}

void sub_2171069C4(uint64_t a1)
{
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 8));

  operator delete((void *)a1);
}

void sub_217106A00(uint64_t a1@<X0>, double **a2@<X8>)
{
}

uint64_t sub_217106A08(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C774220)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217106A48()
{
  return &unk_26C774220;
}

void *sub_217106A54(void *a1)
{
  *a1 = &unk_26C7742B8;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 1));
  return a1;
}

void sub_217106A98(void *a1)
{
  *a1 = &unk_26C7742B8;
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 1));

  operator delete(a1);
}

void *sub_217106AEC(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x38uLL);
  *uint64_t v2 = &unk_26C7742B8;
  sub_216D467D8((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_217106B40(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_217106B54(uint64_t a1, void *a2)
{
  *a2 = &unk_26C7742B8;
  return sub_216D467D8((uint64_t)(a2 + 1), a1 + 8);
}

void sub_217106B80(uint64_t a1)
{
}

void sub_217106B88(uint64_t a1)
{
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 8));

  operator delete((void *)a1);
}

uint64_t sub_217106BC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (int *)(a1 + 8);
  LODWORD(v25[0]) = 0;
  Alembic::Abc::v12::IScalarProperty::get(a1 + 8, (uint64_t)v25, a3, 4);
  switch(LODWORD(v25[0]))
  {
    case 0:
      goto LABEL_17;
    case 1:
      BOOL v6 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v6) {
        BOOL v6 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      }
      unint64_t v7 = *((void *)v6 + 21);
      v25[0] = (void *)v7;
      if ((v7 & 7) != 0)
      {
        double v8 = (void *)(v7 & 0xFFFFFFFFFFFFFFF8);
        if ((atomic_fetch_add_explicit((atomic_uint *volatile)v8, 2u, memory_order_relaxed) & 1) == 0) {
          v25[0] = v8;
        }
      }
      goto LABEL_34;
    case 2:
      unint64_t v14 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v14) {
        unint64_t v14 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      }
      unint64_t v15 = *((void *)v14 + 85);
      v25[0] = (void *)v15;
      if ((v15 & 7) != 0)
      {
        unint64_t v16 = (void *)(v15 & 0xFFFFFFFFFFFFFFF8);
        if ((atomic_fetch_add_explicit((atomic_uint *volatile)v16, 2u, memory_order_relaxed) & 1) == 0) {
          v25[0] = v16;
        }
      }
      goto LABEL_34;
    case 3:
      unint64_t v17 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v17) {
        unint64_t v17 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      }
      unint64_t v18 = *((void *)v17 + 7);
      v25[0] = (void *)v18;
      if ((v18 & 7) != 0)
      {
        int v19 = (void *)(v18 & 0xFFFFFFFFFFFFFFF8);
        if ((atomic_fetch_add_explicit((atomic_uint *volatile)v19, 2u, memory_order_relaxed) & 1) == 0) {
          v25[0] = v19;
        }
      }
LABEL_34:
      uint64_t result = sub_2170F9F98(a2, (uint64_t)v25);
      break;
    default:
      LODWORD(__p[0]) = 0;
      Alembic::Abc::v12::IScalarProperty::get((uint64_t)v5, (uint64_t)__p, a3, 4);
      int v22 = (int)__p[0];
      sub_216997470();
      if (v24 >= 0) {
        unint64_t v9 = (char *)&v23;
      }
      else {
        unint64_t v9 = (char *)v23;
      }
      sub_216779094(v25, v9);
      sub_216779094(__p, "0");
      sub_2170F9FEC(v5, a3, 3, (uint64_t *)v25, (uint64_t *)__p);
      if (v21 < 0) {
        operator delete(__p[0]);
      }
      if (v26 < 0) {
        operator delete(v25[0]);
      }
      if (v24 < 0) {
        operator delete(v23);
      }
LABEL_17:
      uint64_t v10 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      if (!v10) {
        uint64_t v10 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
      }
      unint64_t v11 = *((void *)v10 + 1);
      v25[0] = (void *)v11;
      if ((v11 & 7) != 0)
      {
        uint64_t v12 = (void *)(v11 & 0xFFFFFFFFFFFFFFF8);
        if ((atomic_fetch_add_explicit((atomic_uint *volatile)v12, 2u, memory_order_relaxed) & 1) == 0) {
          v25[0] = v12;
        }
      }
      uint64_t result = sub_2170F9F98(a2, (uint64_t)v25);
      break;
  }
  if (((uint64_t)v25[0] & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v25[0] & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void sub_217106E40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_217106EC8(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C774220)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217106F08()
{
  return &unk_26C774220;
}

void *sub_217106F14(void *a1)
{
  *a1 = &unk_26C774328;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));
  return a1;
}

void sub_217106F58(void *a1)
{
  *a1 = &unk_26C774328;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));

  operator delete(a1);
}

void *sub_217106FAC(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x38uLL);
  *uint64_t v2 = &unk_26C774328;
  sub_216D467D8((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_217107000(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_217107014(uint64_t a1, void *a2)
{
  *a2 = &unk_26C774328;
  return sub_216D467D8((uint64_t)(a2 + 1), a1 + 8);
}

void sub_217107040(uint64_t a1)
{
}

void sub_217107048(uint64_t a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 8));

  operator delete((void *)a1);
}

uint64_t sub_217107084(uint64_t a1)
{
  return sub_2168087E8(a1 + 8) + 32;
}

uint64_t sub_2171070A4(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C774388)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2171070E4()
{
  return &unk_26C774388;
}

void *sub_2171070F0(void *a1)
{
  *a1 = &unk_26C7743A8;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));
  return a1;
}

void sub_217107134(void *a1)
{
  *a1 = &unk_26C7743A8;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));

  operator delete(a1);
}

void *sub_217107188(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x38uLL);
  *uint64_t v2 = &unk_26C7743A8;
  sub_216D467D8((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_2171071DC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2171071F0(uint64_t a1, void *a2)
{
  *a2 = &unk_26C7743A8;
  return sub_216D467D8((uint64_t)(a2 + 1), a1 + 8);
}

void sub_21710721C(uint64_t a1)
{
}

void sub_217107224(uint64_t a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 8));

  operator delete((void *)a1);
}

void sub_217107260(uint64_t a1@<X0>, double **a2@<X8>)
{
}

uint64_t sub_217107268(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C774388)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2171072A8()
{
  return &unk_26C774388;
}

void sub_2171072B4(Alembic::Abc::v12::IArrayProperty *this@<X0>, double **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (*((char *)this + 31) < 0)
  {
    if (*((void *)this + 2)) {
      return;
    }
  }
  else if (*((unsigned char *)this + 31))
  {
    return;
  }
  if (*((void *)this + 4))
  {
    Alembic::Abc::v12::IArrayProperty::getTimeSampling(this, &v20);
    uint64_t NumSamples = Alembic::Abc::v12::IArrayProperty::getNumSamples(this);
    if (Alembic::Abc::v12::IArrayProperty::isConstant(this)) {
      uint64_t v5 = NumSamples != 0;
    }
    else {
      uint64_t v5 = NumSamples;
    }
    if (v5)
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        double SampleTime = Alembic::AbcCoreAbstract::v12::TimeSampling::getSampleTime((double **)v20, i);
        double v8 = SampleTime;
        uint64_t v10 = a2[1];
        unint64_t v9 = (unint64_t)a2[2];
        if ((unint64_t)v10 >= v9)
        {
          uint64_t v12 = *a2;
          uint64_t v13 = v10 - *a2;
          unint64_t v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 61) {
            sub_21677CB10();
          }
          uint64_t v15 = v9 - (void)v12;
          if (v15 >> 2 > v14) {
            unint64_t v14 = v15 >> 2;
          }
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v16 = v14;
          }
          if (v16)
          {
            unint64_t v17 = (char *)sub_21677CB28((uint64_t)(a2 + 2), v16);
            uint64_t v12 = *a2;
            uint64_t v10 = a2[1];
          }
          else
          {
            unint64_t v17 = 0;
          }
          unint64_t v18 = (double *)&v17[8 * v13];
          *unint64_t v18 = v8;
          unint64_t v11 = v18 + 1;
          while (v10 != v12)
          {
            uint64_t v19 = *((void *)v10-- - 1);
            *((void *)v18-- - 1) = v19;
          }
          *a2 = v18;
          a2[1] = v11;
          a2[2] = (double *)&v17[8 * v16];
          if (v12) {
            operator delete(v12);
          }
        }
        else
        {
          *uint64_t v10 = SampleTime;
          unint64_t v11 = v10 + 1;
        }
        a2[1] = v11;
      }
    }
    if (v21) {
      sub_216784EC4(v21);
    }
  }
}

void sub_21710743C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v12 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + 8) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

void *sub_217107474(void *a1)
{
  *a1 = &unk_26C774418;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));
  return a1;
}

void sub_2171074B8(void *a1)
{
  *a1 = &unk_26C774418;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));

  operator delete(a1);
}

void *sub_21710750C(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x38uLL);
  *uint64_t v2 = &unk_26C774418;
  sub_216D467D8((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_217107560(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_217107574(uint64_t a1, void *a2)
{
  *a2 = &unk_26C774418;
  return sub_216D467D8((uint64_t)(a2 + 1), a1 + 8);
}

void sub_2171075A0(uint64_t a1)
{
}

void sub_2171075A8(uint64_t a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 8));

  operator delete((void *)a1);
}

uint64_t sub_2171075E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v8[2] = *MEMORY[0x263EF8340];
  sub_217107808(a1 + 8, a3, &v6);
  sub_2171076F8(&v6, v8);
  uint64_t v4 = sub_2170FFC3C(a2, (uint64_t)v8);
  sub_2168EE084((uint64_t)v8);
  if (v7) {
    sub_216784EC4(v7);
  }
  return v4;
}

void sub_21710767C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  va_start(va, a4);
  sub_2168EE084((uint64_t)va);
  if (a4) {
    sub_216784EC4(a4);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2171076AC(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C774388)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2171076EC()
{
  return &unk_26C774388;
}

void sub_2171076F8(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    uint64_t v5 = *(uint64_t **)(v3 + 16);
    uint64_t v6 = *(void *)(v3 + 24) - (void)v5;
    if (v6)
    {
      unint64_t v7 = v6 >> 3;
      if (v7 <= 1) {
        unint64_t v7 = 1;
      }
      unint64_t v8 = 1;
      do
      {
        uint64_t v9 = *v5++;
        v8 *= v9;
        --v7;
      }
      while (v7);
    }
    else
    {
      unint64_t v8 = 0;
    }
    uint64_t v10 = *(const void **)v3;
    sub_2168F8250((uint64_t)v19, v8);
    sub_2168F8710((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v19, v11, v12);
    uint64_t v13 = *(uint64_t **)(*a1 + 16);
    uint64_t v14 = *(void *)(*a1 + 24) - (void)v13;
    if (v14)
    {
      unint64_t v15 = v14 >> 3;
      if (v15 <= 1) {
        uint64_t v16 = 1;
      }
      else {
        uint64_t v16 = v15;
      }
      uint64_t v17 = 1;
      do
      {
        uint64_t v18 = *v13++;
        v17 *= v18;
        --v16;
      }
      while (v16);
      if (v17) {
        memmove(__dst, v10, 4 * v17);
      }
    }
    a2[1] = &off_26C74ECC0;
    sub_2168F8DBC(a2, (uint64_t)v19);
    sub_2168F83DC((uint64_t)v19);
  }
  else
  {
    a2[1] = 0;
  }
}

void sub_2171077EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_217107808(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  sub_2167BAB8C(a1, a3, a2);
}

void sub_217107838(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    sub_216784EC4(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_217107850@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(char *)(a1 + 39) < 0)
  {
    if (*(void *)(a1 + 24)) {
      goto LABEL_14;
    }
  }
  else if (*(unsigned char *)(a1 + 39))
  {
    goto LABEL_14;
  }
  if (*(void *)(a1 + 40))
  {
    uint64_t v3 = (int *)(a1 + 8);
    uint64_t v4 = a1 + 56;
    uint64_t PropertyHeader = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(a1 + 8);
    if (PropertyHeader)
    {
      BOOL v6 = *(_DWORD *)(PropertyHeader + 56) == 10 && *(_DWORD *)(PropertyHeader + 24) == 2;
      if (v6 && sub_2167BBF1C(PropertyHeader + 32, 0))
      {
        v9[0] = 0;
        v9[2] = 0;
        v8[0] = 0;
        void v8[2] = 0;
        return (void *)sub_2167BB9A0(a2, v3, v4, v9, v8);
      }
    }
  }
LABEL_14:
  *(_DWORD *)a2 = 2;
  uint64_t result = sub_216779094((void *)(a2 + 8), "");
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_217107924(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(char *)(a1 + 39) < 0)
  {
    if (*(void *)(a1 + 24)) {
      goto LABEL_10;
    }
  }
  else if (*(unsigned char *)(a1 + 39))
  {
    goto LABEL_10;
  }
  if (*(void *)(a1 + 40))
  {
    uint64_t PropertyHeader = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(a1 + 8);
    if (PropertyHeader)
    {
      if (sub_2167B243C(PropertyHeader, 0))
      {
        int v8 = *(_DWORD *)(a1 + 8);
        if (*(char *)(a1 + 39) < 0)
        {
          sub_216778F24(&v9, *(void **)(a1 + 16), *(void *)(a1 + 24));
        }
        else
        {
          long long v9 = *(_OWORD *)(a1 + 16);
          uint64_t v10 = *(void *)(a1 + 32);
        }
        uint64_t v5 = *(void *)(a1 + 48);
        uint64_t v11 = *(void *)(a1 + 40);
        uint64_t v12 = v5;
        if (v5) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
        }
        v7[0] = 0;
        _OWORD v7[2] = 0;
        v6[0] = 0;
        v6[2] = 0;
        sub_217107A54(a2, (uint64_t)&v8, a1 + 56, v7, v6);
        Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v8);
        return;
      }
    }
  }
LABEL_10:

  sub_217108118(a2);
}

void sub_217107A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_217107A54(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  *(_DWORD *)a1 = 2;
  uint64_t v10 = (std::string *)(a1 + 8);
  sub_216779094((void *)(a1 + 8), "");
  *(_DWORD *)(a1 + 48) = 2;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  sub_216779094((void *)(a1 + 56), "");
  *(_DWORD *)(a1 + 96) = 2;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  sub_216779094((void *)(a1 + 104), "");
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  int v11 = *(_DWORD *)a2;
  *(_OWORD *)&v52.__r_.__value_.__l.__data_ = 0uLL;
  uint64_t v51 = &v52;
  int v57 = v11;
  sub_2167898D0(v58, (const void ***)&v51);
  v58[3] = 0;
  uint64_t v59 = 0;
  int v60 = 0;
  uint64_t v61 = 1;
  sub_2167877AC((uint64_t)&v51, v52.__r_.__value_.__l.__data_);
  sub_2167A030C(a4, (uint64_t)&v57);
  sub_2167A030C(a5, (uint64_t)&v57);
  *(_DWORD *)a1 = v57;
  uint64_t v55 = a1;
  uint64_t v56 = "ITypedGeomParam::ITypedGeomParam()";
  uint64_t v12 = *(void *)(a2 + 32);
  uint64_t v13 = *(std::__shared_weak_count **)(a2 + 40);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v45 = v13;
  if (!v12)
  {
    sub_216778A5C((uint64_t)&v51);
    uint64_t v30 = sub_216779180(&v52.__r_.__value_.__l.__size_, (uint64_t)"NULL CompoundPropertyReader passed into ", 40);
    sub_216779180(v30, (uint64_t)"ITypedGeomParam ctor", 20);
    std::stringbuf::str();
    sub_216778E70(&__p, (long long *)v46);
    if (v47 < 0) {
      operator delete(v46[0]);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v32 = sub_216779038(exception, (uint64_t)&__p);
    __cxa_throw(v32, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v12 + 80))(v12, a3);
  if (!v14)
  {
    sub_216778A5C((uint64_t)&v51);
    std::string v33 = sub_216779180(&v52.__r_.__value_.__l.__size_, (uint64_t)"Nonexistent GeomParam: ", 23);
    int v34 = *(char *)(a3 + 23);
    if (v34 >= 0) {
      uint64_t v35 = a3;
    }
    else {
      uint64_t v35 = *(void *)a3;
    }
    if (v34 >= 0) {
      uint64_t v36 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v36 = *(void *)(a3 + 8);
    }
    sub_216779180(v33, v35, v36);
    std::stringbuf::str();
    sub_216778E70(&__p, (long long *)v46);
    if (v47 < 0) {
      operator delete(v46[0]);
    }
    unsigned __int8 v37 = __cxa_allocate_exception(0x20uLL);
    uint64_t v38 = sub_216779038(v37, (uint64_t)&__p);
    __cxa_throw(v38, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  int v15 = *(_DWORD *)(v14 + 24);
  if (v15 == 2)
  {
    sub_2167BCDC4((uint64_t)&v51, (int *)a2, a3, a4, a5);
    *(_DWORD *)a1 = v51;
    std::string::operator=(v10, &v52);
    uint64_t v27 = v53;
    uint64_t v26 = v54;
    if (v54) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v54 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v28 = *(std::__shared_weak_count **)(a1 + 40);
    *(void *)(a1 + 32) = v27;
    *(void *)(a1 + 40) = v26;
    if (v28) {
      sub_216784EC4(v28);
    }
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v51);
    char v25 = 0;
  }
  else
  {
    if (v15)
    {
      sub_216778A5C((uint64_t)&v51);
      uint64_t v39 = sub_216779180(&v52.__r_.__value_.__l.__size_, (uint64_t)"Invalid ITypedGeomParam: ", 25);
      int v40 = *(char *)(a3 + 23);
      if (v40 >= 0) {
        uint64_t v41 = a3;
      }
      else {
        uint64_t v41 = *(void *)a3;
      }
      if (v40 >= 0) {
        uint64_t v42 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v42 = *(void *)(a3 + 8);
      }
      sub_216779180(v39, v41, v42);
      std::stringbuf::str();
      sub_216778E70(&__p, (long long *)v46);
      if (v47 < 0) {
        operator delete(v46[0]);
      }
      uint64_t v43 = __cxa_allocate_exception(0x20uLL);
      char v44 = sub_216779038(v43, (uint64_t)&__p);
      __cxa_throw(v44, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
    }
    LODWORD(__p) = 1;
    int v49 = v57;
    Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(&v51, a2, a3, &__p);
    *(_DWORD *)(a1 + 96) = v51;
    std::string::operator=((std::string *)(a1 + 104), &v52);
    uint64_t v17 = v53;
    uint64_t v16 = v54;
    if (v54) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v54 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v18 = *(std::__shared_weak_count **)(a1 + 136);
    *(void *)(a1 + 128) = v17;
    *(void *)(a1 + 136) = v16;
    if (v18) {
      sub_216784EC4(v18);
    }
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v51);
    sub_216779094(&__p, ".indices");
    sub_2167BC7A0((uint64_t)&v51, (int *)(a1 + 96), (uint64_t)&__p, a4, a5);
    *(_DWORD *)(a1 + 48) = v51;
    std::string::operator=((std::string *)(a1 + 56), &v52);
    uint64_t v20 = v53;
    uint64_t v19 = v54;
    if (v54) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v54 + 8), 1uLL, memory_order_relaxed);
    }
    char v21 = *(std::__shared_weak_count **)(a1 + 88);
    *(void *)(a1 + 80) = v20;
    *(void *)(a1 + 88) = v19;
    if (v21) {
      sub_216784EC4(v21);
    }
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v51);
    if (v50 < 0) {
      operator delete(__p);
    }
    sub_216779094(&__p, ".vals");
    sub_2167BCDC4((uint64_t)&v51, (int *)(a1 + 96), (uint64_t)&__p, a4, a5);
    *(_DWORD *)a1 = v51;
    std::string::operator=(v10, &v52);
    uint64_t v23 = v53;
    uint64_t v22 = v54;
    if (v54) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v54 + 8), 1uLL, memory_order_relaxed);
    }
    char v24 = *(std::__shared_weak_count **)(a1 + 40);
    *(void *)(a1 + 32) = v23;
    *(void *)(a1 + 40) = v22;
    if (v24) {
      sub_216784EC4(v24);
    }
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v51);
    if (v50 < 0) {
      operator delete(__p);
    }
    char v25 = 1;
  }
  *(unsigned char *)(a1 + 144) = v25;
  if (v45) {
    sub_216784EC4(v45);
  }
  if (v59) {
    sub_216784EC4(v59);
  }
  sub_2167877AC((uint64_t)v58, (void *)v58[1]);
  return a1;
}

void sub_217107F94(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22)
{
  sub_216779148((std::exception *)&__p);
  sub_216778D38((uint64_t)&a22);
  if (a11) {
    sub_216784EC4(a11);
  }
  char v25 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64(v22 - 168, (uint64_t)v25);
  }
  else {
    sub_21679F9F4(v22 - 168, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x217107D9CLL);
}

void sub_2171080A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, Alembic::Abc::v12::IArrayProperty *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20)
{
  sub_2167A03C4(v22 - 152);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v21);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a9);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v20);
  _Unwind_Resume(a1);
}

uint64_t sub_217108118(uint64_t a1)
{
  *(_DWORD *)a1 = 2;
  sub_216779094((void *)(a1 + 8), "");
  *(_DWORD *)(a1 + 48) = 2;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  sub_216779094((void *)(a1 + 56), "");
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 2;
  sub_216779094((void *)(a1 + 104), "");
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 144) = 0;
  return a1;
}

void sub_217108194(_Unwind_Exception *a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v1);
  _Unwind_Resume(a1);
}

BOOL sub_2171081B8(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
  {
    if (!*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    return 0;
  }
  if (*(unsigned char *)(a1 + 31)) {
    return 0;
  }
LABEL_5:
  if (!*(void *)(a1 + 32)) {
    return 0;
  }
  if (*(char *)(a1 + 127) < 0)
  {
    if (!*(void *)(a1 + 112)) {
      goto LABEL_11;
    }
    return 1;
  }
  if (*(unsigned char *)(a1 + 127)) {
    return 1;
  }
LABEL_11:
  if (!*(void *)(a1 + 128)) {
    return 1;
  }
  if (*(char *)(a1 + 79) < 0)
  {
    if (*(void *)(a1 + 64)) {
      goto LABEL_14;
    }
LABEL_17:
    if (*(void *)(a1 + 80)) {
      uint64_t v2 = nullsub_5;
    }
    else {
      uint64_t v2 = 0;
    }
    return v2 != 0;
  }
  if (!*(unsigned char *)(a1 + 79)) {
    goto LABEL_17;
  }
LABEL_14:
  uint64_t v2 = 0;
  return v2 != 0;
}

uint64_t sub_21710825C(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = a1 + 8;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_216778F24((unsigned char *)v4, *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 8);
    *(void *)(v4 + 16) = *(void *)(a2 + 24);
    *(_OWORD *)uint64_t v4 = v5;
  }
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  unint64_t v7 = (unsigned char *)(a1 + 56);
  if (*(char *)(a2 + 79) < 0)
  {
    sub_216778F24(v7, *(void **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(_OWORD *)unint64_t v7 = v8;
  }
  uint64_t v9 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  uint64_t v10 = (unsigned char *)(a1 + 104);
  if (*(char *)(a2 + 127) < 0)
  {
    sub_216778F24(v10, *(void **)(a2 + 104), *(void *)(a2 + 112));
  }
  else
  {
    long long v11 = *(_OWORD *)(a2 + 104);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(_OWORD *)uint64_t v10 = v11;
  }
  uint64_t v12 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  return a1;
}

void sub_217108378(_Unwind_Exception *a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v1);
  _Unwind_Resume(a1);
}

void *sub_21710839C(void *a1)
{
  *a1 = &unk_26C774488;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 7));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));
  return a1;
}

void sub_2171083F4(void *a1)
{
  *a1 = &unk_26C774488;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 7));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));

  operator delete(a1);
}

void *sub_21710845C(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0xA0uLL);
  *uint64_t v2 = &unk_26C774488;
  sub_21710825C((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_2171084B0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2171084C4(uint64_t a1, void *a2)
{
  *a2 = &unk_26C774488;
  return sub_21710825C((uint64_t)(a2 + 1), a1 + 8);
}

void sub_2171084F0(uint64_t a1)
{
  uint64_t v2 = (Alembic::Abc::v12::IArrayProperty *)(a1 + 8);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 104));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 56));

  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);
}

void sub_217108538(uint64_t a1)
{
  uint64_t v2 = (Alembic::Abc::v12::IArrayProperty *)(a1 + 8);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 104));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 56));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);

  operator delete((void *)a1);
}

uint64_t sub_217108588(uint64_t a1)
{
  return sub_2171085DC(a1 + 8);
}

uint64_t sub_217108590(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7744E8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2171085D0()
{
  return &unk_26C7744E8;
}

uint64_t sub_2171085DC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 144)) {
    uint64_t v1 = sub_21680F968(a1 + 96);
  }
  else {
    uint64_t v1 = sub_2168087E8(a1);
  }
  return v1 + 32;
}

void *sub_21710860C(void *a1)
{
  *a1 = &unk_26C774508;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 7));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));
  return a1;
}

void sub_217108664(void *a1)
{
  *a1 = &unk_26C774508;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 7));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));

  operator delete(a1);
}

void *sub_2171086CC(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0xA0uLL);
  *uint64_t v2 = &unk_26C774508;
  sub_21710825C((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_217108720(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_217108734(uint64_t a1, void *a2)
{
  *a2 = &unk_26C774508;
  return sub_21710825C((uint64_t)(a2 + 1), a1 + 8);
}

void sub_217108760(uint64_t a1)
{
  uint64_t v2 = (Alembic::Abc::v12::IArrayProperty *)(a1 + 8);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 104));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 56));

  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);
}

void sub_2171087A8(uint64_t a1)
{
  uint64_t v2 = (Alembic::Abc::v12::IArrayProperty *)(a1 + 8);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 104));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 56));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);

  operator delete((void *)a1);
}

void sub_2171087F8(uint64_t a1@<X0>, double **a2@<X8>)
{
}

uint64_t sub_217108800(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7744E8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217108840()
{
  return &unk_26C7744E8;
}

void sub_21710884C(Alembic::Abc::v12::IArrayProperty *a1@<X0>, double **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (sub_2171081B8((uint64_t)a1))
  {
    sub_2171089F4((uint64_t)a1, &v20);
    unint64_t v4 = sub_217108AA0(a1);
    if (sub_217108BB0(a1)) {
      unint64_t v5 = v4 != 0;
    }
    else {
      unint64_t v5 = v4;
    }
    if (v5)
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        double SampleTime = Alembic::AbcCoreAbstract::v12::TimeSampling::getSampleTime((double **)v20, i);
        double v8 = SampleTime;
        uint64_t v10 = a2[1];
        unint64_t v9 = (unint64_t)a2[2];
        if ((unint64_t)v10 >= v9)
        {
          uint64_t v12 = *a2;
          uint64_t v13 = v10 - *a2;
          unint64_t v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 61) {
            sub_21677CB10();
          }
          uint64_t v15 = v9 - (void)v12;
          if (v15 >> 2 > v14) {
            unint64_t v14 = v15 >> 2;
          }
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v16 = v14;
          }
          if (v16)
          {
            uint64_t v17 = (char *)sub_21677CB28((uint64_t)(a2 + 2), v16);
            uint64_t v12 = *a2;
            uint64_t v10 = a2[1];
          }
          else
          {
            uint64_t v17 = 0;
          }
          uint64_t v18 = (double *)&v17[8 * v13];
          *uint64_t v18 = v8;
          long long v11 = v18 + 1;
          while (v10 != v12)
          {
            uint64_t v19 = *((void *)v10-- - 1);
            *((void *)v18-- - 1) = v19;
          }
          *a2 = v18;
          a2[1] = v11;
          a2[2] = (double *)&v17[8 * v16];
          if (v12) {
            operator delete(v12);
          }
        }
        else
        {
          *uint64_t v10 = SampleTime;
          long long v11 = v10 + 1;
        }
        a2[1] = v11;
      }
    }
    if (v21) {
      sub_216784EC4(v21);
    }
  }
}

void sub_2171089BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v12 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + 8) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2171089F4@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if (*(char *)(result + 31) < 0)
  {
    if (*(void *)(result + 16)) {
      goto LABEL_3;
    }
  }
  else if (*(unsigned char *)(result + 31))
  {
LABEL_3:
    uint64_t v2 = 0;
    goto LABEL_8;
  }
  if (*(void *)(result + 32)) {
    uint64_t v2 = nullsub_5;
  }
  else {
    uint64_t v2 = 0;
  }
LABEL_8:
  if (v2) {
    return Alembic::Abc::v12::IArrayProperty::getTimeSampling((Alembic::Abc::v12::IArrayProperty *)result, a2);
  }
  if (*(char *)(result + 79) < 0)
  {
    if (*(void *)(result + 64)) {
      goto LABEL_12;
    }
  }
  else if (*(unsigned char *)(result + 79))
  {
LABEL_12:
    uint64_t v3 = 0;
    goto LABEL_17;
  }
  if (*(void *)(result + 80)) {
    uint64_t v3 = nullsub_5;
  }
  else {
    uint64_t v3 = 0;
  }
LABEL_17:
  if (v3)
  {
    result += 48;
    return Alembic::Abc::v12::IArrayProperty::getTimeSampling((Alembic::Abc::v12::IArrayProperty *)result, a2);
  }
  *a2 = 0;
  a2[1] = 0;
  return result;
}

unint64_t sub_217108AA0(Alembic::Abc::v12::IArrayProperty *this)
{
  if (*((unsigned char *)this + 144))
  {
    unint64_t NumSamples = Alembic::Abc::v12::IArrayProperty::getNumSamples((Alembic::Abc::v12::IArrayProperty *)((char *)this + 48));
    unint64_t result = Alembic::Abc::v12::IArrayProperty::getNumSamples(this);
    if (NumSamples > result) {
      return NumSamples;
    }
    return result;
  }
  if (*((char *)this + 31) < 0)
  {
    if (*((void *)this + 2)) {
      goto LABEL_7;
    }
LABEL_9:
    if (*((void *)this + 4)) {
      unint64_t v4 = nullsub_5;
    }
    else {
      unint64_t v4 = 0;
    }
    goto LABEL_12;
  }
  if (!*((unsigned char *)this + 31)) {
    goto LABEL_9;
  }
LABEL_7:
  unint64_t v4 = 0;
LABEL_12:
  if (v4) {
    return Alembic::Abc::v12::IArrayProperty::getNumSamples(this);
  }
  else {
    return 0;
  }
}

void sub_217108B90(_Unwind_Exception *a1)
{
}

uint64_t sub_217108BB0(Alembic::Abc::v12::IArrayProperty *this)
{
  uint64_t v1 = this;
  if (*((unsigned char *)this + 144))
  {
    uint64_t result = Alembic::Abc::v12::IArrayProperty::isConstant(this);
    if (!result) {
      return result;
    }
    uint64_t v1 = (Alembic::Abc::v12::IArrayProperty *)((char *)v1 + 48);
  }
  return Alembic::Abc::v12::IArrayProperty::isConstant(v1);
}

void sub_217108C04(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64((uint64_t)&a9, (uint64_t)v10);
  }
  else {
    sub_21679F9F4((uint64_t)&a9, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x217108BF4);
}

void sub_217108C3C(_Unwind_Exception *a1)
{
}

void *sub_217108C5C(void *a1)
{
  *a1 = &unk_26C774578;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 7));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));
  return a1;
}

void sub_217108CB4(void *a1)
{
  *a1 = &unk_26C774578;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 7));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));

  operator delete(a1);
}

void *sub_217108D1C(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0xA0uLL);
  *uint64_t v2 = &unk_26C774578;
  sub_21710825C((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_217108D70(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_217108D84(uint64_t a1, void *a2)
{
  *a2 = &unk_26C774578;
  return sub_21710825C((uint64_t)(a2 + 1), a1 + 8);
}

void sub_217108DB0(uint64_t a1)
{
  uint64_t v2 = (Alembic::Abc::v12::IArrayProperty *)(a1 + 8);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 104));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 56));

  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);
}

void sub_217108DF8(uint64_t a1)
{
  uint64_t v2 = (Alembic::Abc::v12::IArrayProperty *)(a1 + 8);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 104));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 56));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);

  operator delete((void *)a1);
}

uint64_t sub_217108E48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v12[2] = *MEMORY[0x263EF8340];
  uint64_t v5 = a1 + 8;
  long long v10 = 0u;
  long long v11 = 0u;
  if (*(unsigned char *)(a1 + 152)) {
    sub_217108FC0(v5, (uint64_t)&v10, a3);
  }
  else {
    sub_217109170(v5, (uint64_t)&v10, a3);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)&v10 + 1);
  long long v9 = v10;
  if (*((void *)&v10 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v10 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  sub_2171093D0((uint64_t *)&v9, v12);
  uint64_t v7 = sub_2170FFC3C(a2, (uint64_t)v12);
  sub_2168EE084((uint64_t)v12);
  if (v6) {
    sub_216784EC4(v6);
  }
  if (*((void *)&v11 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v11 + 1));
  }
  if (*((void *)&v10 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v10 + 1));
  }
  return v7;
}

void sub_217108F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  sub_2168EE084(v15 - 40);
  if (v14) {
    sub_216784EC4(v14);
  }
  if (a14) {
    sub_216784EC4(a14);
  }
  if (a12) {
    sub_216784EC4(a12);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_217108F74(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7744E8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217108FB4()
{
  return &unk_26C7744E8;
}

uint64_t sub_217108FC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_2171094EC(a1, (void *)a2, a3);
  if (*(char *)(a1 + 79) < 0)
  {
    if (*(void *)(a1 + 64)) {
      goto LABEL_3;
    }
  }
  else if (*(unsigned char *)(a1 + 79))
  {
LABEL_3:
    uint64_t v6 = 0;
    goto LABEL_8;
  }
  if (*(void *)(a1 + 80)) {
    uint64_t v6 = nullsub_5;
  }
  else {
    uint64_t v6 = 0;
  }
LABEL_8:
  if (v6)
  {
    sub_2168013EC(a1 + 48, (void *)(a2 + 16), a3);
  }
  else
  {
    uint64_t v7 = *(uint64_t **)(*(void *)a2 + 16);
    uint64_t v8 = *(void *)(*(void *)a2 + 24) - (void)v7;
    if (v8)
    {
      unint64_t v9 = v8 >> 3;
      if (v9 <= 1) {
        uint64_t v10 = 1;
      }
      else {
        uint64_t v10 = v9;
      }
      unsigned int v11 = 1;
      do
      {
        uint64_t v12 = *v7++;
        v11 *= v12;
        --v10;
      }
      while (v10);
      uint64_t v13 = v11;
      unint64_t v14 = operator new[](4 * v11);
      uint64_t v15 = v14;
      if (v13)
      {
        for (uint64_t i = 0; i != v13; ++i)
          *((_DWORD *)v14 + i) = i;
      }
    }
    else
    {
      uint64_t v15 = operator new[](0);
      uint64_t v13 = 0;
    }
    uint64_t v20 = v13;
    sub_2167864B4(&__p, 1uLL, &v20);
    uint64_t v17 = operator new(0x28uLL);
    *uint64_t v17 = v15;
    v17[1] = 0x100000005;
    v17[3] = 0;
    v17[4] = 0;
    void v17[2] = 0;
    sub_21677EA60(v17 + 2, __p, (uint64_t)v22, (v22 - (unsigned char *)__p) >> 3);
    sub_217109568((void *)(a2 + 16), (uint64_t)v17);
    if (__p)
    {
      uint64_t v22 = __p;
      operator delete(__p);
    }
  }
  uint64_t v18 = sub_2168087E8(a1);
  uint64_t result = sub_2167B21C0(v18 + 32);
  *(_DWORD *)(a2 + 32) = result;
  *(unsigned char *)(a2 + 36) = *(unsigned char *)(a1 + 144);
  return result;
}

void sub_217109144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  operator delete(v11);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_217109170(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_2168087E8(a1);
  *(_DWORD *)(a2 + 32) = sub_2167B21C0(v6 + 32);
  *(unsigned char *)(a2 + 36) = *(unsigned char *)(a1 + 144);
  if (*(char *)(a1 + 79) < 0)
  {
    if (*(void *)(a1 + 64)) {
      goto LABEL_31;
    }
  }
  else if (*(unsigned char *)(a1 + 79))
  {
    goto LABEL_31;
  }
  if (*(void *)(a1 + 80))
  {
    sub_2171096B4(a1 + 48, a3, &v31);
    if (v31)
    {
      uint64_t v7 = (uint64_t *)v31[2];
      uint64_t v8 = v31[3] - (void)v7;
      if (!v8) {
        goto LABEL_34;
      }
      unint64_t v9 = v8 >> 3;
      if (v9 <= 1) {
        unint64_t v9 = 1;
      }
      unint64_t v10 = 1;
      do
      {
        uint64_t v11 = *v7++;
        v10 *= v11;
        --v9;
      }
      while (v9);
      if (v10)
      {
        sub_2171096FC(a1, a3, &v29);
        if (v10 >> 61) {
          size_t v12 = -1;
        }
        else {
          size_t v12 = 8 * v10;
        }
        uint64_t v13 = operator new[](v12);
        unint64_t v14 = v13;
        uint64_t v15 = v29;
        unint64_t v16 = (uint64_t *)v29[2];
        uint64_t v17 = v29[3] - (void)v16;
        if (v17)
        {
          unint64_t v18 = v17 >> 3;
          if (v18 <= 1) {
            uint64_t v19 = 1;
          }
          else {
            uint64_t v19 = v18;
          }
          uint64_t v17 = 1;
          do
          {
            uint64_t v20 = *v16++;
            v17 *= v20;
            --v19;
          }
          while (v19);
        }
        uint64_t v21 = 0;
        uint64_t v22 = *v31;
        if (v10 <= 1) {
          uint64_t v23 = 1;
        }
        else {
          uint64_t v23 = v10;
        }
        do
        {
          unint64_t v24 = *(unsigned int *)(v22 + 4 * v21);
          if (v17 <= v24) {
            break;
          }
          v13[v21++] = *(void *)(*v15 + 8 * v24);
        }
        while (v23 != v21);
        unint64_t v26 = v10;
        sub_2167864B4(&__p, 1uLL, &v26);
        char v25 = operator new(0x28uLL);
        *char v25 = v14;
        v25[1] = 0x20000000ALL;
        v25[3] = 0;
        void v25[4] = 0;
        void v25[2] = 0;
        sub_21677EA60(v25 + 2, __p, (uint64_t)v28, (v28 - (unsigned char *)__p) >> 3);
        sub_217109744((void *)a2, (uint64_t)v25);
        if (__p)
        {
          uint64_t v28 = __p;
          operator delete(__p);
        }
        if (v30) {
          sub_216784EC4(v30);
        }
      }
      else
      {
LABEL_34:
        sub_2171094EC(a1, (void *)a2, a3);
      }
    }
    if (v32) {
      sub_216784EC4(v32);
    }
    return;
  }
LABEL_31:

  sub_2171094EC(a1, (void *)a2, a3);
}

void sub_217109374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16)
{
  operator delete(v16);
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    sub_216784EC4(a14);
  }
  if (a16) {
    sub_216784EC4(a16);
  }
  _Unwind_Resume(a1);
}

void sub_2171093D0(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  if (*a1)
  {
    uint64_t v5 = *(uint64_t **)(v3 + 16);
    uint64_t v6 = *(void *)(v3 + 24) - (void)v5;
    if (v6)
    {
      unint64_t v7 = v6 >> 3;
      if (v7 <= 1) {
        unint64_t v7 = 1;
      }
      unint64_t v8 = 1;
      do
      {
        uint64_t v9 = *v5++;
        v8 *= v9;
        --v7;
      }
      while (v7);
    }
    else
    {
      unint64_t v8 = 0;
    }
    unint64_t v10 = *(uint64_t **)v3;
    sub_2168FA95C((uint64_t)v23, v8);
    sub_2168FAD50((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v23, v11, v12);
    uint64_t v13 = *(uint64_t **)(*a1 + 16);
    uint64_t v14 = *(void *)(*a1 + 24) - (void)v13;
    if (v14)
    {
      uint64_t v15 = v24;
      unint64_t v16 = v14 >> 3;
      if (v16 <= 1) {
        unint64_t v16 = 1;
      }
      uint64_t v17 = 1;
      do
      {
        uint64_t v18 = v17;
        uint64_t v20 = *v13++;
        uint64_t v19 = v20;
        v17 *= v20;
        --v16;
      }
      while (v16);
      if (v17)
      {
        uint64_t v21 = v18 * v19;
        do
        {
          uint64_t v22 = *v10++;
          *v15++ = v22;
          --v21;
        }
        while (v21);
      }
    }
    a2[1] = off_26C74EEE8;
    sub_2168F8DBC(a2, (uint64_t)v23);
    sub_2168F83DC((uint64_t)v23);
  }
  else
  {
    a2[1] = 0;
  }
}

void sub_2171094D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2171094EC(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  Alembic::Abc::v12::IArrayProperty::get(a1, (uint64_t)&v7, a3);
  uint64_t v5 = v7;
  unint64_t v4 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  *a2 = v5;
  a2[1] = v4;
  if (v6) {
    sub_216784EC4(v6);
  }
  if (v8) {
    sub_216784EC4(v8);
  }
}

void sub_217109550(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_217109568(void *a1, uint64_t a2)
{
  sub_2171095B0(&v5, a2);
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  long long v4 = v5;
  *(void *)&long long v5 = *a1;
  *((void *)&v5 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3) {
    sub_216784EC4(v3);
  }
}

void *sub_2171095B0(void *a1, uint64_t a2)
{
  *a1 = a2;
  long long v4 = operator new(0x20uLL);
  *long long v4 = &unk_26C7745E8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_217109610(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  __cxa_begin_catch(a1);
  sub_21677EB68((int)&a13, v13);
  __cxa_rethrow();
}

void sub_217109628(_Unwind_Exception *a1)
{
}

void sub_217109640(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void sub_217109668(uint64_t a1)
{
}

uint64_t sub_217109670(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7473A8)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void sub_2171096B4(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  sub_2168013EC(a1, a3, a2);
}

void sub_2171096E4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    sub_216784EC4(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_2171096FC(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  sub_2171094EC(a1, a3, a2);
}

void sub_21710972C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    sub_216784EC4(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_217109744(void *a1, uint64_t a2)
{
  sub_21710978C(&v5, a2);
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  long long v4 = v5;
  *(void *)&long long v5 = *a1;
  *((void *)&v5 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3) {
    sub_216784EC4(v3);
  }
}

void *sub_21710978C(void *a1, uint64_t a2)
{
  *a1 = a2;
  long long v4 = operator new(0x20uLL);
  *long long v4 = &unk_26C774638;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_2171097EC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  __cxa_begin_catch(a1);
  sub_21677EB68((int)&a13, v13);
  __cxa_rethrow();
}

void sub_217109804(_Unwind_Exception *a1)
{
}

void sub_21710981C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void sub_217109844(uint64_t a1)
{
}

uint64_t sub_21710984C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C774678)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void *sub_217109890(void *a1)
{
  *a1 = &unk_26C774698;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 7));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));
  return a1;
}

void sub_2171098E8(void *a1)
{
  *a1 = &unk_26C774698;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 7));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));

  operator delete(a1);
}

void *sub_217109950(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0xA0uLL);
  *uint64_t v2 = &unk_26C774698;
  sub_21710825C((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_2171099A4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2171099B8(uint64_t a1, void *a2)
{
  *a2 = &unk_26C774698;
  return sub_21710825C((uint64_t)(a2 + 1), a1 + 8);
}

void sub_2171099E4(uint64_t a1)
{
  uint64_t v2 = (Alembic::Abc::v12::IArrayProperty *)(a1 + 8);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 104));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 56));

  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);
}

void sub_217109A2C(uint64_t a1)
{
  uint64_t v2 = (Alembic::Abc::v12::IArrayProperty *)(a1 + 8);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 104));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 56));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);

  operator delete((void *)a1);
}

uint64_t sub_217109A7C(uint64_t a1)
{
  return sub_2171085DC(a1 + 8);
}

uint64_t sub_217109A84(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7746F8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217109AC4()
{
  return &unk_26C7746F8;
}

void *sub_217109AD0(void *a1)
{
  *a1 = &unk_26C774718;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 7));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));
  return a1;
}

void sub_217109B28(void *a1)
{
  *a1 = &unk_26C774718;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 7));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));

  operator delete(a1);
}

void *sub_217109B90(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0xA0uLL);
  *uint64_t v2 = &unk_26C774718;
  sub_21710825C((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_217109BE4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_217109BF8(uint64_t a1, void *a2)
{
  *a2 = &unk_26C774718;
  return sub_21710825C((uint64_t)(a2 + 1), a1 + 8);
}

void sub_217109C24(uint64_t a1)
{
  uint64_t v2 = (Alembic::Abc::v12::IArrayProperty *)(a1 + 8);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 104));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 56));

  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);
}

void sub_217109C6C(uint64_t a1)
{
  uint64_t v2 = (Alembic::Abc::v12::IArrayProperty *)(a1 + 8);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 104));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 56));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);

  operator delete((void *)a1);
}

void sub_217109CBC(uint64_t a1@<X0>, double **a2@<X8>)
{
}

uint64_t sub_217109CC4(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7746F8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217109D04()
{
  return &unk_26C7746F8;
}

void *sub_217109D10(void *a1)
{
  *a1 = &unk_26C774788;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 7));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));
  return a1;
}

void sub_217109D68(void *a1)
{
  *a1 = &unk_26C774788;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 7));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));

  operator delete(a1);
}

void *sub_217109DD0(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0xA0uLL);
  *uint64_t v2 = &unk_26C774788;
  sub_21710825C((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_217109E24(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_217109E38(uint64_t a1, void *a2)
{
  *a2 = &unk_26C774788;
  return sub_21710825C((uint64_t)(a2 + 1), a1 + 8);
}

void sub_217109E64(uint64_t a1)
{
  uint64_t v2 = (Alembic::Abc::v12::IArrayProperty *)(a1 + 8);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 104));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 56));

  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);
}

void sub_217109EAC(uint64_t a1)
{
  uint64_t v2 = (Alembic::Abc::v12::IArrayProperty *)(a1 + 8);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 104));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 56));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);

  operator delete((void *)a1);
}

uint64_t sub_217109EFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  if (!*(unsigned char *)(a1 + 152)) {
    return 0;
  }
  long long v29 = 0u;
  long long v30 = 0u;
  sub_217108FC0(a1 + 8, (uint64_t)&v29, a3);
  long long v4 = v30;
  if (*((void *)&v30 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v30 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  if ((void)v4)
  {
    long long v5 = *(uint64_t **)(v4 + 16);
    uint64_t v6 = *(void *)(v4 + 24) - (void)v5;
    if (v6)
    {
      unint64_t v7 = v6 >> 3;
      if (v7 <= 1) {
        unint64_t v7 = 1;
      }
      unint64_t v8 = 1;
      do
      {
        uint64_t v9 = *v5++;
        v8 *= v9;
        --v7;
      }
      while (v7);
    }
    else
    {
      unint64_t v8 = 0;
    }
    uint64_t v11 = *(int **)v4;
    sub_216907954((uint64_t)v31, v8);
    sub_216907C74((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v31, v12, v13);
    uint64_t v14 = v32;
    uint64_t v15 = *(uint64_t **)(v4 + 16);
    uint64_t v16 = *(void *)(v4 + 24) - (void)v15;
    if (v16)
    {
      unint64_t v17 = v16 >> 3;
      if (v17 <= 1) {
        unint64_t v17 = 1;
      }
      uint64_t v18 = 1;
      do
      {
        uint64_t v19 = v18;
        uint64_t v21 = *v15++;
        uint64_t v20 = v21;
        v18 *= v21;
        --v17;
      }
      while (v17);
      if (v18)
      {
        uint64_t v22 = v19 * v20;
        uint64_t v23 = v32;
        do
        {
          int v24 = *v11++;
          *v23++ = v24;
          --v22;
        }
        while (v22);
      }
    }
    int v34 = &off_26C74FA68;
    char v25 = operator new(0x30uLL);
    long long v26 = v31[1];
    *(_OWORD *)char v25 = v31[0];
    *((_OWORD *)v25 + 1) = v26;
    *((void *)v25 + 4) = v14;
    if (v14)
    {
      uint64_t v27 = (atomic_ullong *)*((void *)v25 + 3);
      if (!v27) {
        uint64_t v27 = (atomic_ullong *)(v14 - 4);
      }
      atomic_fetch_add_explicit(v27, 1uLL, memory_order_relaxed);
    }
    atomic_store(0, (unsigned int *)v25 + 10);
    std::string v33 = v25;
    atomic_fetch_add_explicit((atomic_uint *volatile)v25 + 10, 1u, memory_order_relaxed);
    sub_2168F83DC((uint64_t)v31);
  }
  else
  {
    int v34 = 0;
  }
  uint64_t v10 = sub_2170FFC3C(a2, (uint64_t)&v33);
  sub_2168EE084((uint64_t)&v33);
  if (*((void *)&v4 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v4 + 1));
  }
  if (*((void *)&v30 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v30 + 1));
  }
  if (*((void *)&v29 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v29 + 1));
  }
  return v10;
}

void sub_21710A0D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21710A144(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7746F8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21710A184()
{
  return &unk_26C7746F8;
}

void *sub_21710A190(void *a1)
{
  *a1 = &unk_26C7747F8;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 7));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));
  return a1;
}

void sub_21710A1E8(void *a1)
{
  *a1 = &unk_26C7747F8;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 7));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));

  operator delete(a1);
}

void *sub_21710A250(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0xA0uLL);
  *uint64_t v2 = &unk_26C7747F8;
  sub_21710825C((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_21710A2A4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21710A2B8(uint64_t a1, void *a2)
{
  *a2 = &unk_26C7747F8;
  return sub_21710825C((uint64_t)(a2 + 1), a1 + 8);
}

void sub_21710A2E4(uint64_t a1)
{
  uint64_t v2 = (Alembic::Abc::v12::IArrayProperty *)(a1 + 8);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 104));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 56));

  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);
}

void sub_21710A32C(uint64_t a1)
{
  uint64_t v2 = (Alembic::Abc::v12::IArrayProperty *)(a1 + 8);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 104));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 56));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);

  operator delete((void *)a1);
}

uint64_t sub_21710A37C(uint64_t a1)
{
  return sub_2171085DC(a1 + 8);
}

uint64_t sub_21710A384(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C774858)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21710A3C4()
{
  return &unk_26C774858;
}

void *sub_21710A3D0(void *a1)
{
  *a1 = &unk_26C774878;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 7));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));
  return a1;
}

void sub_21710A428(void *a1)
{
  *a1 = &unk_26C774878;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 7));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));

  operator delete(a1);
}

void *sub_21710A490(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0xA0uLL);
  *uint64_t v2 = &unk_26C774878;
  sub_21710825C((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_21710A4E4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21710A4F8(uint64_t a1, void *a2)
{
  *a2 = &unk_26C774878;
  return sub_21710825C((uint64_t)(a2 + 1), a1 + 8);
}

void sub_21710A524(uint64_t a1)
{
  uint64_t v2 = (Alembic::Abc::v12::IArrayProperty *)(a1 + 8);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 104));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 56));

  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);
}

void sub_21710A56C(uint64_t a1)
{
  uint64_t v2 = (Alembic::Abc::v12::IArrayProperty *)(a1 + 8);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 104));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 56));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);

  operator delete((void *)a1);
}

void sub_21710A5BC(uint64_t a1@<X0>, double **a2@<X8>)
{
}

uint64_t sub_21710A5C4(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C774858)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21710A604()
{
  return &unk_26C774858;
}

void *sub_21710A610(void *a1)
{
  *a1 = &unk_26C7748E8;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 7));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));
  return a1;
}

void sub_21710A668(void *a1)
{
  *a1 = &unk_26C7748E8;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 7));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));

  operator delete(a1);
}

void *sub_21710A6D0(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0xA0uLL);
  *uint64_t v2 = &unk_26C7748E8;
  sub_21710825C((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_21710A724(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21710A738(uint64_t a1, void *a2)
{
  *a2 = &unk_26C7748E8;
  return sub_21710825C((uint64_t)(a2 + 1), a1 + 8);
}

void sub_21710A764(uint64_t a1)
{
  uint64_t v2 = (Alembic::Abc::v12::IArrayProperty *)(a1 + 8);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 104));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 56));

  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);
}

void sub_21710A7AC(uint64_t a1)
{
  uint64_t v2 = (Alembic::Abc::v12::IArrayProperty *)(a1 + 8);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 104));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 56));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);

  operator delete((void *)a1);
}

uint64_t sub_21710A7FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v10[2] = *MEMORY[0x263EF8340];
  long long v8 = 0u;
  long long v9 = 0u;
  sub_217109170(a1 + 8, (uint64_t)&v8, a3);
  long long v4 = (std::__shared_weak_count *)*((void *)&v8 + 1);
  long long v7 = v8;
  if (*((void *)&v8 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v8 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  sub_2171093D0((uint64_t *)&v7, v10);
  uint64_t v5 = sub_2170FFC3C(a2, (uint64_t)v10);
  sub_2168EE084((uint64_t)v10);
  if (v4) {
    sub_216784EC4(v4);
  }
  if (*((void *)&v9 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v9 + 1));
  }
  if (*((void *)&v8 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v8 + 1));
  }
  return v5;
}

void sub_21710A8C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  sub_2168EE084(v15 - 40);
  if (v14) {
    sub_216784EC4(v14);
  }
  if (a14) {
    sub_216784EC4(a14);
  }
  if (a12) {
    sub_216784EC4(a12);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_21710A910(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C774858)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21710A950()
{
  return &unk_26C774858;
}

void sub_21710A95C(uint64_t **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, void *a3, uint64_t a4)
{
  v44[4] = *MEMORY[0x263EF8340];
  if (sub_2171081B8(a4))
  {
    sub_21710B264((uint64_t)v21, a4);
    uint64_t v43 = 0;
    long long v8 = operator new(0xA0uLL);
    *long long v8 = &unk_26C774958;
    sub_21710B5E4((uint64_t)(v8 + 1), (uint64_t)v21);
    uint64_t v43 = v8;
    sub_21710B264((uint64_t)v18, a4);
    uint64_t v41 = 0;
    long long v9 = operator new(0xA0uLL);
    *long long v9 = &unk_26C7749D8;
    sub_21710B5E4((uint64_t)(v9 + 1), (uint64_t)v18);
    uint64_t v41 = v9;
    uint64_t v10 = sub_2170F5EA4(a1, a2, a3, (uint64_t)v42, (uint64_t)v40);
    sub_21710B264((uint64_t)&v24, a4);
    uint64_t v11 = (char *)operator new(0xA0uLL);
    *(void *)uint64_t v11 = &unk_26C774A48;
    *((_DWORD *)v11 + 2) = v24;
    uint64_t v12 = v11 + 16;
    if (SHIBYTE(v26) < 0)
    {
      sub_216778F24(v12, (void *)v25, *((unint64_t *)&v25 + 1));
    }
    else
    {
      *(_OWORD *)uint64_t v12 = v25;
      *((void *)v11 + 4) = v26;
    }
    uint64_t v13 = v28;
    *((void *)v11 + 5) = v27;
    *((void *)v11 + 6) = v13;
    if (v13) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
    }
    *((_DWORD *)v11 + 14) = v29;
    uint64_t v14 = v11 + 64;
    if (SHIBYTE(v31) < 0)
    {
      sub_216778F24(v14, (void *)v30, *((unint64_t *)&v30 + 1));
    }
    else
    {
      *(_OWORD *)uint64_t v14 = v30;
      *((void *)v11 + 10) = v31;
    }
    uint64_t v15 = v33;
    *((void *)v11 + 11) = v32;
    *((void *)v11 + 12) = v15;
    if (v15) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
    }
    *((_DWORD *)v11 + 26) = v34;
    uint64_t v16 = v11 + 112;
    if (SHIBYTE(v36) < 0)
    {
      sub_216778F24(v16, (void *)v35, *((unint64_t *)&v35 + 1));
    }
    else
    {
      *(_OWORD *)uint64_t v16 = v35;
      *((void *)v11 + 16) = v36;
    }
    uint64_t v17 = v38;
    *((void *)v11 + 17) = v37;
    *((void *)v11 + 18) = v17;
    if (v17) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
    }
    v11[152] = v39;
    v44[3] = v11;
    sub_2170F8214(v44, (void *)v10 + 8);
    sub_2170F5BA0(v44);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v34);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v29);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v24);
    sub_2170F5FA4(v40);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v20);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v19);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v18);
    sub_2170F6028(v42);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v23);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v22);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v21);
  }
}

void sub_21710AC34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v49);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v48);
  operator delete(v47);
  sub_2167BA760((uint64_t)&a47);
  sub_2170F5FA4((void *)(v50 - 168));
  sub_2167BA760((uint64_t)&a9);
  sub_2170F6028((void *)(v50 - 136));
  sub_2167BA760((uint64_t)&a28);
  _Unwind_Resume(a1);
}

uint64_t sub_21710ACE0(uint64_t a1, uint64_t a2)
{
  if ((*(char *)(a2 + 39) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(a2 + 39)) {
      goto LABEL_5;
    }
LABEL_10:
    sub_21710CCE4(a1);
    return a1;
  }
  if (*(void *)(a2 + 24)) {
    goto LABEL_10;
  }
LABEL_5:
  if (!*(void *)(a2 + 40)) {
    goto LABEL_10;
  }
  uint64_t PropertyHeader = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(a2 + 8);
  if (!PropertyHeader || !sub_21710C408(PropertyHeader, 0)) {
    goto LABEL_10;
  }
  int v9 = *(_DWORD *)(a2 + 8);
  if (*(char *)(a2 + 39) < 0)
  {
    sub_216778F24(&v10, *(void **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    long long v10 = *(_OWORD *)(a2 + 16);
    uint64_t v11 = *(void *)(a2 + 32);
  }
  uint64_t v6 = *(void *)(a2 + 48);
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  v8[0] = 0;
  void v8[2] = 0;
  v7[0] = 0;
  _OWORD v7[2] = 0;
  sub_21710C620(a1, (uint64_t)&v9, a2 + 56, v8, v7);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v9);
  return a1;
}

void sub_21710ADE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21710ADF8(uint64_t a1, int a2)
{
  if (a2 == 2)
  {
    sub_216779094(v36, "schema");
    sub_21679F2AC(a1, v36, &v38);
    if (((char)v40 & 0x80000000) == 0)
    {
      BOOL v11 = v40 == 19
         && v38 == (void *)0x5F6D6F6547636241
         && *(void *)v39 == 0x6873654D796C6F50
         && *(void *)&v39[3] == 0x31765F6873654D79;
      goto LABEL_78;
    }
    uint64_t v12 = v38;
    BOOL v11 = *(void *)v39 == 19
       && *v38 == 0x5F6D6F6547636241
       && v38[1] == 0x6873654D796C6F50
       && *(void *)((char *)v38 + 11) == 0x31765F6873654D79;
    goto LABEL_77;
  }
  if (a2 == 1) {
    return 1;
  }
  if (a2) {
    return 0;
  }
  sub_216779094(v36, "schemaObjTitle");
  sub_21679F2AC(a1, v36, &v38);
  sub_21710B184(&v35);
  uint64_t v3 = v40;
  if ((v40 & 0x80u) == 0) {
    uint64_t v4 = v40;
  }
  else {
    uint64_t v4 = *(void *)v39;
  }
  std::string::size_type size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  char v6 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v35.__r_.__value_.__l.__size_;
  }
  if (v4 != size)
  {
LABEL_45:
    sub_216779094(v30, "schema");
    sub_21679F2AC(a1, (const void **)v30, &__s1);
    sub_21710B184(&__p);
    unsigned __int8 v15 = v34;
    if ((v34 & 0x80u) == 0) {
      size_t v16 = v34;
    }
    else {
      size_t v16 = __n;
    }
    std::string::size_type v17 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    int v18 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v17 = __p.__r_.__value_.__l.__size_;
    }
    if (v16 != v17)
    {
      BOOL v11 = 0;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_69;
      }
      goto LABEL_64;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((char)v34 < 0)
    {
      BOOL v11 = memcmp(__s1, p_p, __n) == 0;
    }
    else
    {
      if (!v34)
      {
        BOOL v11 = 1;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_69:
          if ((v15 & 0x80) != 0) {
            operator delete(__s1);
          }
          if (v31 < 0) {
            operator delete(v30[0]);
          }
          if ((*((unsigned char *)&v35.__r_.__value_.__s + 23) & 0x80) == 0) {
            goto LABEL_75;
          }
          goto LABEL_74;
        }
LABEL_64:
        operator delete(__p.__r_.__value_.__l.__data_);
        unsigned __int8 v15 = v34;
        goto LABEL_69;
      }
      uint64_t v20 = v34 - 1;
      p_s1 = &__s1;
      do
      {
        int v23 = *(unsigned __int8 *)p_s1;
        p_s1 = (void **)((char *)p_s1 + 1);
        int v22 = v23;
        int v25 = p_p->__r_.__value_.__s.__data_[0];
        p_p = (std::string *)((char *)p_p + 1);
        int v24 = v25;
        BOOL v27 = v20-- != 0;
        BOOL v11 = v22 == v24;
      }
      while (v22 == v24 && v27);
    }
    if ((v18 & 0x80000000) == 0) {
      goto LABEL_69;
    }
    goto LABEL_64;
  }
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v7 = &v35;
  }
  else {
    long long v7 = (std::string *)v35.__r_.__value_.__r.__words[0];
  }
  if ((v40 & 0x80) != 0)
  {
    if (memcmp(v38, v7, *(size_t *)v39)) {
      goto LABEL_45;
    }
  }
  else if (v40)
  {
    long long v8 = (unsigned __int8 *)&v38;
    while (*v8 == v7->__r_.__value_.__s.__data_[0])
    {
      ++v8;
      long long v7 = (std::string *)((char *)v7 + 1);
      if (!--v3) {
        goto LABEL_65;
      }
    }
    goto LABEL_45;
  }
LABEL_65:
  BOOL v11 = 1;
  if (v6 < 0) {
LABEL_74:
  }
    operator delete(v35.__r_.__value_.__l.__data_);
LABEL_75:
  if (((char)v40 & 0x80000000) == 0) {
    goto LABEL_78;
  }
  uint64_t v12 = v38;
LABEL_77:
  operator delete(v12);
LABEL_78:
  if (v37 < 0) {
    operator delete((void *)v36[0]);
  }
  return v11;
}

void sub_21710B104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (*(char *)(v29 - 33) < 0) {
    operator delete(*(void **)(v29 - 56));
  }
  if (*(char *)(v29 - 57) < 0) {
    operator delete(*(void **)(v29 - 80));
  }
  _Unwind_Resume(exception_object);
}

void sub_21710B184(std::string *a1@<X8>)
{
  sub_216779094(&v5, ":");
  uint64_t v2 = std::string::insert(&v5, 0, "AbcGeom_PolyMesh_v1");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v6.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v6.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  uint64_t v4 = std::string::append(&v6, ".geom");
  *a1 = *v4;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
}

void sub_21710B230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21710B264(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = a1 + 8;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_216778F24((unsigned char *)v4, *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 8);
    *(void *)(v4 + 16) = *(void *)(a2 + 24);
    *(_OWORD *)uint64_t v4 = v5;
  }
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  long long v7 = (unsigned char *)(a1 + 56);
  if (*(char *)(a2 + 79) < 0)
  {
    sub_216778F24(v7, *(void **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(_OWORD *)long long v7 = v8;
  }
  uint64_t v9 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  long long v10 = (unsigned char *)(a1 + 104);
  if (*(char *)(a2 + 127) < 0)
  {
    sub_216778F24(v10, *(void **)(a2 + 104), *(void *)(a2 + 112));
  }
  else
  {
    long long v11 = *(_OWORD *)(a2 + 104);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(_OWORD *)long long v10 = v11;
  }
  uint64_t v12 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  return a1;
}

void sub_21710B380(_Unwind_Exception *a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v1);
  _Unwind_Resume(a1);
}

void *sub_21710B3A4(void *a1)
{
  *a1 = &unk_26C774958;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 7));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));
  return a1;
}

void sub_21710B3FC(void *a1)
{
  *a1 = &unk_26C774958;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 7));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));

  operator delete(a1);
}

void *sub_21710B464(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0xA0uLL);
  *uint64_t v2 = &unk_26C774958;
  sub_21710B264((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_21710B4B8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21710B4CC(uint64_t a1, void *a2)
{
  *a2 = &unk_26C774958;
  return sub_21710B264((uint64_t)(a2 + 1), a1 + 8);
}

void sub_21710B4F8(uint64_t a1)
{
  uint64_t v2 = (Alembic::Abc::v12::IArrayProperty *)(a1 + 8);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 104));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 56));

  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);
}

void sub_21710B540(uint64_t a1)
{
  uint64_t v2 = (Alembic::Abc::v12::IArrayProperty *)(a1 + 8);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 104));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 56));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);

  operator delete((void *)a1);
}

uint64_t sub_21710B590(uint64_t a1)
{
  return sub_2171085DC(a1 + 8);
}

uint64_t sub_21710B598(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7749B8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21710B5D8()
{
  return &unk_26C7749B8;
}

uint64_t sub_21710B5E4(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = a1 + 8;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_216778F24((unsigned char *)v4, *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 8);
    *(void *)(v4 + 16) = *(void *)(a2 + 24);
    *(_OWORD *)uint64_t v4 = v5;
  }
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  long long v7 = (unsigned char *)(a1 + 56);
  if (*(char *)(a2 + 79) < 0)
  {
    sub_216778F24(v7, *(void **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(_OWORD *)long long v7 = v8;
  }
  uint64_t v9 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  long long v10 = (unsigned char *)(a1 + 104);
  if (*(char *)(a2 + 127) < 0)
  {
    sub_216778F24(v10, *(void **)(a2 + 104), *(void *)(a2 + 112));
  }
  else
  {
    long long v11 = *(_OWORD *)(a2 + 104);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(_OWORD *)long long v10 = v11;
  }
  uint64_t v12 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  return a1;
}

void sub_21710B700(_Unwind_Exception *a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v1);
  _Unwind_Resume(a1);
}

void *sub_21710B724(void *a1)
{
  *a1 = &unk_26C7749D8;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 7));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));
  return a1;
}

void sub_21710B77C(void *a1)
{
  *a1 = &unk_26C7749D8;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 7));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));

  operator delete(a1);
}

void *sub_21710B7E4(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0xA0uLL);
  *uint64_t v2 = &unk_26C7749D8;
  sub_21710B264((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_21710B838(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21710B84C(uint64_t a1, void *a2)
{
  *a2 = &unk_26C7749D8;
  return sub_21710B264((uint64_t)(a2 + 1), a1 + 8);
}

void sub_21710B878(uint64_t a1)
{
  uint64_t v2 = (Alembic::Abc::v12::IArrayProperty *)(a1 + 8);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 104));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 56));

  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);
}

void sub_21710B8C0(uint64_t a1)
{
  uint64_t v2 = (Alembic::Abc::v12::IArrayProperty *)(a1 + 8);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 104));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 56));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);

  operator delete((void *)a1);
}

void sub_21710B910(uint64_t a1@<X0>, double **a2@<X8>)
{
  long long v3 = (Alembic::Abc::v12::IArrayProperty *)(a1 + 8);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (sub_2171081B8(a1 + 8))
  {
    sub_2171089F4((uint64_t)v3, &v20);
    unint64_t v4 = sub_217108AA0(v3);
    if (sub_217108BB0(v3)) {
      unint64_t v5 = v4 != 0;
    }
    else {
      unint64_t v5 = v4;
    }
    if (v5)
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        double SampleTime = Alembic::AbcCoreAbstract::v12::TimeSampling::getSampleTime((double **)v20, i);
        double v8 = SampleTime;
        long long v10 = a2[1];
        unint64_t v9 = (unint64_t)a2[2];
        if ((unint64_t)v10 >= v9)
        {
          uint64_t v12 = *a2;
          uint64_t v13 = v10 - *a2;
          unint64_t v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 61) {
            sub_21677CB10();
          }
          uint64_t v15 = v9 - (void)v12;
          if (v15 >> 2 > v14) {
            unint64_t v14 = v15 >> 2;
          }
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v16 = v14;
          }
          if (v16)
          {
            std::string::size_type v17 = (char *)sub_21677CB28((uint64_t)(a2 + 2), v16);
            uint64_t v12 = *a2;
            long long v10 = a2[1];
          }
          else
          {
            std::string::size_type v17 = 0;
          }
          int v18 = (double *)&v17[8 * v13];
          *int v18 = v8;
          long long v11 = v18 + 1;
          while (v10 != v12)
          {
            uint64_t v19 = *((void *)v10-- - 1);
            *((void *)v18-- - 1) = v19;
          }
          *a2 = v18;
          a2[1] = v11;
          a2[2] = (double *)&v17[8 * v16];
          if (v12) {
            operator delete(v12);
          }
        }
        else
        {
          *long long v10 = SampleTime;
          long long v11 = v10 + 1;
        }
        a2[1] = v11;
      }
    }
    if (v21) {
      sub_216784EC4(v21);
    }
  }
}

void sub_21710BA84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v12 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + 8) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21710BABC(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7749B8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21710BAFC()
{
  return &unk_26C7749B8;
}

void *sub_21710BB08(void *a1)
{
  *a1 = &unk_26C774A48;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 7));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));
  return a1;
}

void sub_21710BB60(void *a1)
{
  *a1 = &unk_26C774A48;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 7));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));

  operator delete(a1);
}

void *sub_21710BBC8(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0xA0uLL);
  *uint64_t v2 = &unk_26C774A48;
  sub_21710B264((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_21710BC1C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21710BC30(uint64_t a1, void *a2)
{
  *a2 = &unk_26C774A48;
  return sub_21710B264((uint64_t)(a2 + 1), a1 + 8);
}

void sub_21710BC5C(uint64_t a1)
{
  uint64_t v2 = (Alembic::Abc::v12::IArrayProperty *)(a1 + 8);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 104));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 56));

  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);
}

void sub_21710BCA4(uint64_t a1)
{
  uint64_t v2 = (Alembic::Abc::v12::IArrayProperty *)(a1 + 8);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 104));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 56));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);

  operator delete((void *)a1);
}

uint64_t sub_21710BCF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  long long v30 = 0u;
  long long v31 = 0u;
  sub_21710BF84(a1 + 8, (uint64_t)&v30, a3);
  long long v4 = v30;
  if (*((void *)&v30 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v30 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  if ((void)v4)
  {
    unint64_t v5 = *(uint64_t **)(v4 + 16);
    uint64_t v6 = *(void *)(v4 + 24) - (void)v5;
    if (v6)
    {
      unint64_t v7 = v6 >> 3;
      if (v7 <= 1) {
        unint64_t v7 = 1;
      }
      unint64_t v8 = 1;
      do
      {
        uint64_t v9 = *v5++;
        v8 *= v9;
        --v7;
      }
      while (v7);
    }
    else
    {
      unint64_t v8 = 0;
    }
    uint64_t v10 = *(void *)v4;
    sub_2168FD0E8((uint64_t)v32, v8);
    sub_2168FD54C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v32, v11, v12);
    unint64_t v14 = *(uint64_t **)(v4 + 16);
    uint64_t v13 = *(void **)(v4 + 24);
    if (v13 != v14)
    {
      unint64_t v15 = v13 - v14;
      if (v15 <= 1) {
        unint64_t v15 = 1;
      }
      uint64_t v16 = 1;
      do
      {
        uint64_t v17 = v16;
        uint64_t v19 = *v14++;
        uint64_t v18 = v19;
        v16 *= v19;
        --v15;
      }
      while (v15);
      if (v16)
      {
        uint64_t v20 = (_DWORD *)(v10 + 8);
        uint64_t v21 = v17 * v18;
        int v22 = (_DWORD *)(v33 + 8);
        do
        {
          int v23 = *v20;
          *((void *)v22 - 1) = *((void *)v20 - 1);
          *int v22 = v23;
          v22 += 3;
          v20 += 3;
          --v21;
        }
        while (v21);
      }
    }
    std::string v35 = off_26C74F110;
    int v24 = operator new(0x30uLL);
    long long v25 = v32[1];
    *(_OWORD *)int v24 = v32[0];
    *((_OWORD *)v24 + 1) = v25;
    uint64_t v26 = v33;
    *((void *)v24 + 4) = v33;
    if (v26)
    {
      BOOL v27 = (atomic_ullong *)(v26 - 16);
      if (*((void *)v24 + 3)) {
        BOOL v27 = (atomic_ullong *)*((void *)v24 + 3);
      }
      atomic_fetch_add_explicit(v27, 1uLL, memory_order_relaxed);
    }
    atomic_store(0, (unsigned int *)v24 + 10);
    unsigned __int8 v34 = v24;
    atomic_fetch_add_explicit((atomic_uint *volatile)v24 + 10, 1u, memory_order_relaxed);
    sub_2168F83DC((uint64_t)v32);
  }
  else
  {
    std::string v35 = 0;
  }
  uint64_t v28 = sub_2170FFC3C(a2, (uint64_t)&v34);
  sub_2168EE084((uint64_t)&v34);
  if (*((void *)&v4 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v4 + 1));
  }
  if (*((void *)&v31 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v31 + 1));
  }
  if (*((void *)&v30 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v30 + 1));
  }
  return v28;
}

void sub_21710BEC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21710BF38(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7749B8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21710BF78()
{
  return &unk_26C7749B8;
}

void sub_21710BF84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_2168087E8(a1);
  *(_DWORD *)(a2 + 32) = sub_2167B21C0(v6 + 32);
  *(unsigned char *)(a2 + 36) = *(unsigned char *)(a1 + 144);
  if (*(char *)(a1 + 79) < 0)
  {
    if (*(void *)(a1 + 64)) {
      goto LABEL_32;
    }
  }
  else if (*(unsigned char *)(a1 + 79))
  {
    goto LABEL_32;
  }
  if (*(void *)(a1 + 80))
  {
    sub_2171096B4(a1 + 48, a3, &v33);
    if (v33)
    {
      unint64_t v7 = (uint64_t *)v33[2];
      uint64_t v8 = (char *)v33[3] - (char *)v7;
      if (!v8) {
        goto LABEL_35;
      }
      unint64_t v9 = v8 >> 3;
      if (v9 <= 1) {
        unint64_t v9 = 1;
      }
      unint64_t v10 = 1;
      do
      {
        uint64_t v11 = *v7++;
        v10 *= v11;
        --v9;
      }
      while (v9);
      if (v10)
      {
        sub_21710C274(a1, a3, &v31);
        if (is_mul_ok(v10, 0xCuLL)) {
          size_t v12 = 12 * v10;
        }
        else {
          size_t v12 = -1;
        }
        uint64_t v13 = (char *)operator new[](v12);
        unint64_t v14 = v13;
        unint64_t v15 = v31;
        uint64_t v16 = (uint64_t *)v31[2];
        uint64_t v17 = v31[3] - (void)v16;
        if (v17)
        {
          unint64_t v18 = v17 >> 3;
          if (v18 <= 1) {
            uint64_t v19 = 1;
          }
          else {
            uint64_t v19 = v18;
          }
          uint64_t v17 = 1;
          do
          {
            uint64_t v20 = *v16++;
            v17 *= v20;
            --v19;
          }
          while (v19);
        }
        uint64_t v21 = *v33;
        if (v10 <= 1) {
          uint64_t v22 = 1;
        }
        else {
          uint64_t v22 = v10;
        }
        int v23 = v13 + 8;
        do
        {
          unsigned int v25 = *v21++;
          unsigned int v24 = v25;
          if (v17 <= (unint64_t)v25) {
            break;
          }
          uint64_t v26 = *v15 + 12 * v24;
          *((void *)v23 - 1) = *(void *)v26;
          *int v23 = *(_DWORD *)(v26 + 8);
          v23 += 3;
          --v22;
        }
        while (v22);
        unint64_t v28 = v10;
        sub_2167864B4(&__p, 1uLL, &v28);
        BOOL v27 = operator new(0x28uLL);
        *BOOL v27 = v14;
        v27[1] = 0x30000000ALL;
        v27[3] = 0;
        _DWORD v27[4] = 0;
        v27[2] = 0;
        sub_21677EA60(v27 + 2, __p, (uint64_t)v30, (v30 - (unsigned char *)__p) >> 3);
        sub_21710C2BC((void *)a2, (uint64_t)v27);
        if (__p)
        {
          long long v30 = __p;
          operator delete(__p);
        }
        if (v32) {
          sub_216784EC4(v32);
        }
      }
      else
      {
LABEL_35:
        sub_21710C1F8(a1, (void *)a2, a3);
      }
    }
    if (v34) {
      sub_216784EC4(v34);
    }
    return;
  }
LABEL_32:

  sub_21710C1F8(a1, (void *)a2, a3);
}

void sub_21710C19C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16)
{
  operator delete(v16);
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    sub_216784EC4(a14);
  }
  if (a16) {
    sub_216784EC4(a16);
  }
  _Unwind_Resume(a1);
}

void sub_21710C1F8(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  Alembic::Abc::v12::IArrayProperty::get(a1, (uint64_t)&v7, a3);
  uint64_t v5 = v7;
  long long v4 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  *a2 = v5;
  a2[1] = v4;
  if (v6) {
    sub_216784EC4(v6);
  }
  if (v8) {
    sub_216784EC4(v8);
  }
}

void sub_21710C25C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_21710C274(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  sub_21710C1F8(a1, a3, a2);
}

void sub_21710C2A4(_Unwind_Exception *exception_object)
{
  long long v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    sub_216784EC4(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_21710C2BC(void *a1, uint64_t a2)
{
  sub_21710C304(&v5, a2);
  long long v3 = (std::__shared_weak_count *)a1[1];
  long long v4 = v5;
  *(void *)&long long v5 = *a1;
  *((void *)&v5 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3) {
    sub_216784EC4(v3);
  }
}

void *sub_21710C304(void *a1, uint64_t a2)
{
  *a1 = a2;
  long long v4 = operator new(0x20uLL);
  *long long v4 = &unk_26C774AB8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_21710C364(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  __cxa_begin_catch(a1);
  sub_21677EB68((int)&a13, v13);
  __cxa_rethrow();
}

void sub_21710C37C(_Unwind_Exception *a1)
{
}

void sub_21710C394(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void sub_21710C3BC(uint64_t a1)
{
}

uint64_t sub_21710C3C4(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C774AF8)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t sub_21710C408(uint64_t a1, int a2)
{
  int v3 = *(_DWORD *)(a1 + 24);
  if (v3 != 2)
  {
    if (!v3)
    {
      uint64_t v4 = a1 + 32;
      sub_216779094(v19, "podName");
      sub_21679F2AC(v4, (const void **)v19, v21);
      if (v22 < 0)
      {
        if (v21[1] != (void *)9)
        {
          uint64_t v7 = 0;
LABEL_35:
          operator delete(v21[0]);
LABEL_36:
          if (v20 < 0) {
            operator delete(v19[0]);
          }
          return v7;
        }
        long long v5 = (void **)v21[0];
      }
      else
      {
        if (v22 != 9)
        {
          uint64_t v7 = 0;
          goto LABEL_36;
        }
        long long v5 = v21;
      }
      unint64_t v10 = *v5;
      int v11 = *((unsigned __int8 *)v5 + 8);
      if (v10 == (void *)0x5F323374616F6C66 && v11 == 116)
      {
        sub_216779094(v15, "podExtent");
        sub_21679F2AC(v4, (const void **)v15, __p);
        char v13 = v18;
        if (v18 >= 0) {
          unint64_t v14 = __p;
        }
        else {
          unint64_t v14 = (void **)__p[0];
        }
        if (atoi((const char *)v14) == 3)
        {
          uint64_t v7 = sub_2167BE0A8(v4, a2);
          char v13 = v18;
        }
        else
        {
          uint64_t v7 = 0;
        }
        if (v13 < 0) {
          operator delete(__p[0]);
        }
        if (v16 < 0) {
          operator delete(v15[0]);
        }
        if ((v22 & 0x80) == 0) {
          goto LABEL_36;
        }
      }
      else
      {
        uint64_t v7 = 0;
        if ((v22 & 0x80) == 0) {
          goto LABEL_36;
        }
      }
      goto LABEL_35;
    }
    return 0;
  }
  if (*(_DWORD *)(a1 + 56) != 10 || *(unsigned char *)(a1 + 60) != 3) {
    return 0;
  }
  uint64_t v8 = a1 + 32;

  return sub_2167BE0A8(v8, a2);
}

void sub_21710C5BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (*(char *)(v26 - 33) < 0) {
    operator delete(*(void **)(v26 - 56));
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21710C620(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  *(_DWORD *)a1 = 2;
  unint64_t v10 = (std::string *)(a1 + 8);
  sub_216779094((void *)(a1 + 8), "");
  *(_DWORD *)(a1 + 48) = 2;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  sub_216779094((void *)(a1 + 56), "");
  *(_DWORD *)(a1 + 96) = 2;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  sub_216779094((void *)(a1 + 104), "");
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  int v11 = *(_DWORD *)a2;
  *(_OWORD *)&v52.__r_.__value_.__l.__data_ = 0uLL;
  uint64_t v51 = &v52;
  int v57 = v11;
  sub_2167898D0(v58, (const void ***)&v51);
  v58[3] = 0;
  uint64_t v59 = 0;
  int v60 = 0;
  uint64_t v61 = 1;
  sub_2167877AC((uint64_t)&v51, v52.__r_.__value_.__l.__data_);
  sub_2167A030C(a4, (uint64_t)&v57);
  sub_2167A030C(a5, (uint64_t)&v57);
  *(_DWORD *)a1 = v57;
  uint64_t v55 = a1;
  uint64_t v56 = "ITypedGeomParam::ITypedGeomParam()";
  uint64_t v12 = *(void *)(a2 + 32);
  char v13 = *(std::__shared_weak_count **)(a2 + 40);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v45 = v13;
  if (!v12)
  {
    sub_216778A5C((uint64_t)&v51);
    long long v30 = sub_216779180(&v52.__r_.__value_.__l.__size_, (uint64_t)"NULL CompoundPropertyReader passed into ", 40);
    sub_216779180(v30, (uint64_t)"ITypedGeomParam ctor", 20);
    std::stringbuf::str();
    sub_216778E70(&__p, (long long *)v46);
    if (v47 < 0) {
      operator delete(v46[0]);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v32 = sub_216779038(exception, (uint64_t)&__p);
    __cxa_throw(v32, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v12 + 80))(v12, a3);
  if (!v14)
  {
    sub_216778A5C((uint64_t)&v51);
    uint64_t v33 = sub_216779180(&v52.__r_.__value_.__l.__size_, (uint64_t)"Nonexistent GeomParam: ", 23);
    int v34 = *(char *)(a3 + 23);
    if (v34 >= 0) {
      uint64_t v35 = a3;
    }
    else {
      uint64_t v35 = *(void *)a3;
    }
    if (v34 >= 0) {
      uint64_t v36 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v36 = *(void *)(a3 + 8);
    }
    sub_216779180(v33, v35, v36);
    std::stringbuf::str();
    sub_216778E70(&__p, (long long *)v46);
    if (v47 < 0) {
      operator delete(v46[0]);
    }
    char v37 = __cxa_allocate_exception(0x20uLL);
    uint64_t v38 = sub_216779038(v37, (uint64_t)&__p);
    __cxa_throw(v38, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  int v15 = *(_DWORD *)(v14 + 24);
  if (v15 == 2)
  {
    sub_2167BDB24((uint64_t)&v51, (int *)a2, a3, a4, a5);
    *(_DWORD *)a1 = v51;
    std::string::operator=(v10, &v52);
    uint64_t v27 = v53;
    uint64_t v26 = v54;
    if (v54) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v54 + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v28 = *(std::__shared_weak_count **)(a1 + 40);
    *(void *)(a1 + 32) = v27;
    *(void *)(a1 + 40) = v26;
    if (v28) {
      sub_216784EC4(v28);
    }
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v51);
    char v25 = 0;
  }
  else
  {
    if (v15)
    {
      sub_216778A5C((uint64_t)&v51);
      char v39 = sub_216779180(&v52.__r_.__value_.__l.__size_, (uint64_t)"Invalid ITypedGeomParam: ", 25);
      int v40 = *(char *)(a3 + 23);
      if (v40 >= 0) {
        uint64_t v41 = a3;
      }
      else {
        uint64_t v41 = *(void *)a3;
      }
      if (v40 >= 0) {
        uint64_t v42 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v42 = *(void *)(a3 + 8);
      }
      sub_216779180(v39, v41, v42);
      std::stringbuf::str();
      sub_216778E70(&__p, (long long *)v46);
      if (v47 < 0) {
        operator delete(v46[0]);
      }
      uint64_t v43 = __cxa_allocate_exception(0x20uLL);
      char v44 = sub_216779038(v43, (uint64_t)&__p);
      __cxa_throw(v44, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
    }
    LODWORD(__p) = 1;
    int v49 = v57;
    Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(&v51, a2, a3, &__p);
    *(_DWORD *)(a1 + 96) = v51;
    std::string::operator=((std::string *)(a1 + 104), &v52);
    uint64_t v17 = v53;
    uint64_t v16 = v54;
    if (v54) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v54 + 8), 1uLL, memory_order_relaxed);
    }
    char v18 = *(std::__shared_weak_count **)(a1 + 136);
    *(void *)(a1 + 128) = v17;
    *(void *)(a1 + 136) = v16;
    if (v18) {
      sub_216784EC4(v18);
    }
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v51);
    sub_216779094(&__p, ".indices");
    sub_2167BC7A0((uint64_t)&v51, (int *)(a1 + 96), (uint64_t)&__p, a4, a5);
    *(_DWORD *)(a1 + 48) = v51;
    std::string::operator=((std::string *)(a1 + 56), &v52);
    uint64_t v20 = v53;
    uint64_t v19 = v54;
    if (v54) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v54 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v21 = *(std::__shared_weak_count **)(a1 + 88);
    *(void *)(a1 + 80) = v20;
    *(void *)(a1 + 88) = v19;
    if (v21) {
      sub_216784EC4(v21);
    }
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v51);
    if (v50 < 0) {
      operator delete(__p);
    }
    sub_216779094(&__p, ".vals");
    sub_2167BDB24((uint64_t)&v51, (int *)(a1 + 96), (uint64_t)&__p, a4, a5);
    *(_DWORD *)a1 = v51;
    std::string::operator=(v10, &v52);
    uint64_t v23 = v53;
    uint64_t v22 = v54;
    if (v54) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v54 + 8), 1uLL, memory_order_relaxed);
    }
    unsigned int v24 = *(std::__shared_weak_count **)(a1 + 40);
    *(void *)(a1 + 32) = v23;
    *(void *)(a1 + 40) = v22;
    if (v24) {
      sub_216784EC4(v24);
    }
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v51);
    if (v50 < 0) {
      operator delete(__p);
    }
    char v25 = 1;
  }
  *(unsigned char *)(a1 + 144) = v25;
  if (v45) {
    sub_216784EC4(v45);
  }
  if (v59) {
    sub_216784EC4(v59);
  }
  sub_2167877AC((uint64_t)v58, (void *)v58[1]);
  return a1;
}

void sub_21710CB60(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22)
{
  sub_216779148((std::exception *)&__p);
  sub_216778D38((uint64_t)&a22);
  if (a11) {
    sub_216784EC4(a11);
  }
  char v25 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64(v22 - 168, (uint64_t)v25);
  }
  else {
    sub_21679F9F4(v22 - 168, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x21710C968);
}

void sub_21710CC70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, Alembic::Abc::v12::IArrayProperty *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20)
{
  sub_2167A03C4(v22 - 152);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v21);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a9);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v20);
  _Unwind_Resume(a1);
}

uint64_t sub_21710CCE4(uint64_t a1)
{
  *(_DWORD *)a1 = 2;
  sub_216779094((void *)(a1 + 8), "");
  *(_DWORD *)(a1 + 48) = 2;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  sub_216779094((void *)(a1 + 56), "");
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 2;
  sub_216779094((void *)(a1 + 104), "");
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 144) = 0;
  return a1;
}

void sub_21710CD60(_Unwind_Exception *a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v1);
  _Unwind_Resume(a1);
}

void sub_21710CD84(uint64_t a1)
{
  *(void *)a1 = &unk_26C749FB8;
  *(void *)(a1 + 96) = &unk_26C749FF0;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 344));
  *(void *)(a1 + 96) = &unk_26C74A078;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 296));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 248));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 200));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 152));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 104));

  Alembic::Abc::v12::IObject::~IObject((void **)a1);
}

uint64_t sub_21710CE40(uint64_t a1)
{
  sub_21678A498(a1 + 208, *(char **)(a1 + 216));
  int v3 = (void **)(a1 + 184);
  sub_216782F20(&v3);
  int v3 = (void **)(a1 + 160);
  sub_216782F20(&v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 156));
  sub_21697C414((_DWORD *)(a1 + 152));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 104));
  Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)(a1 + 8));
  return a1;
}

uint64_t sub_21710CEBC(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  unint64_t v9 = (void *)sub_2167A2320(a1, a2);
  *unint64_t v9 = &unk_26C749FB8;
  uint64_t v10 = (uint64_t)(v9 + 12);
  sub_2167EC284((uint64_t)(v9 + 12));
  uint64_t v11 = sub_2167A2320((uint64_t)v52, a2);
  LODWORD(v36) = 0;
  int v37 = 0;
  LODWORD(__p) = 0;
  LODWORD(v34) = 0;
  *(_DWORD *)(a1 + 8) = sub_2167A2218(v11, a4, a5, &v36, &__p);
  Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)v52);
  uint64_t v50 = a1 + 8;
  uint64_t v51 = "ISchemaObject::ISchemaObject( wrapflag)";
  uint64_t Header = Alembic::Abc::v12::IObject::getHeader((Alembic::Abc::v12::IObject *)a1);
  LODWORD(v36) = 0;
  int v37 = 0;
  LODWORD(__p) = 0;
  LODWORD(v34) = 0;
  int v13 = sub_216807C40(a4, a5, &v36, &__p);
  uint64_t v14 = Header + 48;
  if ((sub_2167EBBC4(v14, v13) & 1) == 0)
  {
    sub_216778A5C((uint64_t)&v36);
    uint64_t v21 = sub_216779180(v38, (uint64_t)"Incorrect match of schema: ", 27);
    sub_216779094(&v48, "schemaObjTitle");
    sub_21679F2AC(v14, (const void **)&v48, &__p);
    if ((v35 & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if ((v35 & 0x80u) == 0) {
      uint64_t v23 = v35;
    }
    else {
      uint64_t v23 = v34;
    }
    unsigned int v24 = sub_216779180(v21, (uint64_t)p_p, v23);
    char v25 = sub_216779180(v24, (uint64_t)" to expected: ", 14);
    sub_2167EBF38(&v47);
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v26 = &v47;
    }
    else {
      uint64_t v26 = (std::string *)v47.__r_.__value_.__r.__words[0];
    }
    if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v47.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v47.__r_.__value_.__l.__size_;
    }
    sub_216779180(v25, (uint64_t)v26, size);
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v47.__r_.__value_.__l.__data_);
    }
    if ((char)v35 < 0) {
      operator delete(__p);
    }
    if (v49 < 0) {
      operator delete((void *)v48);
    }
    std::stringbuf::str();
    sub_216778E70(&__p, &v48);
    if (v49 < 0) {
      operator delete((void *)v48);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v29 = sub_216779038(exception, (uint64_t)&__p);
    __cxa_throw(v29, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  Alembic::Abc::v12::IObject::getProperties((Alembic::Abc::v12::IObject *)a1, (uint64_t)&__p);
  sub_216779094(&v48, ".faceset");
  int v15 = *(_DWORD *)(a1 + 8);
  LODWORD(v47.__r_.__value_.__l.__data_) = 1;
  LODWORD(v47.__r_.__value_.__r.__words[1]) = v15;
  v31[0] = 0;
  _OWORD v31[2] = 0;
  v30[0] = 0;
  _OWORD v30[2] = 0;
  int v16 = sub_216807C40(a4, a5, v31, v30);
  v32[0] = 5;
  _OWORD v32[2] = v16;
  sub_2167ECD38((uint64_t)&v36, (uint64_t)&__p, (uint64_t)&v48, &v47, v32);
  sub_2167E7F50(v10, (uint64_t)&v36);
  *(_DWORD *)(a1 + 344) = v43;
  std::string::operator=((std::string *)(a1 + 352), &v44);
  uint64_t v18 = v45;
  uint64_t v17 = v46;
  if (v46) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v46 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v19 = *(std::__shared_weak_count **)(a1 + 384);
  *(void *)(a1 + 376) = v18;
  *(void *)(a1 + 384) = v17;
  if (v19) {
    sub_216784EC4(v19);
  }
  uint64_t v36 = &unk_26C749FF0;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v43);
  uint64_t v36 = &unk_26C74A078;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v42);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v41);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v40);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v39);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v37);
  if (v49 < 0) {
    operator delete((void *)v48);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&__p);
  return a1;
}

void sub_21710D240(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  sub_216779148((std::exception *)&__p);
  sub_216778D38((uint64_t)&a25);
  uint64_t v29 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    uint64_t v30 = (uint64_t)v29;
    sub_2167ECCF0(v25);
    sub_21679FA64(v26 - 176, v30);
  }
  else
  {
    sub_2167ECCF0(v25);
    sub_21679F9F4(v26 - 176, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x21710D0ECLL);
}

void sub_21710D3A8()
{
}

void sub_21710D3B4()
{
}

uint64_t sub_21710D3C4(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  *(void *)a1 = a2;
  uint64_t v6 = (Alembic::Abc::v12::IObject *)(a1 + 8);
  sub_2167A2320(a1 + 8, a3);
  *(_DWORD *)(a1 + 104) = 2;
  sub_216779094((void *)(a1 + 112), "");
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  sub_216981010((_DWORD *)(a1 + 152), a4);
  sub_21698105C((_DWORD *)(a1 + 156), a4 + 1);
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 208) = a1 + 216;
  *(_OWORD *)(a1 + 160) = 0u;
  *(void *)(a1 + 224) = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  Alembic::Abc::v12::IObject::getProperties(v6, (uint64_t)v16);
  unint64_t NumProperties = Alembic::Abc::v12::ICompoundProperty::getNumProperties((Alembic::Abc::v12::ICompoundProperty *)v16);
  sub_216790984((uint64_t *)(a1 + 160), NumProperties);
  uint64_t v8 = *(void *)(a1 + 168) - *(void *)(a1 + 160);
  if (v8)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = v8 / 24;
    do
    {
      uint64_t PropertyHeader = (const std::string *)Alembic::Abc::v12::ICompoundProperty::getPropertyHeader((Alembic::Abc::v12::ICompoundProperty *)v16);
      std::string::operator=((std::string *)(*(void *)(a1 + 160) + v9), PropertyHeader);
      ++v10;
      v9 += 24;
    }
    while (v11 != v10);
    uint64_t v14 = *(const void ***)(a1 + 160);
    int v13 = *(const void ***)(a1 + 168);
    while (v14 != v13)
    {
      sub_216814A8C((uint64_t **)(a1 + 208), (uint64_t *)(a1 + 216), v14, (uint64_t)v14);
      v14 += 3;
    }
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v16);
  return a1;
}

void sub_21710D534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _DWORD *a10, void **a11)
{
  sub_21678A498(v15, *v14);
  a11 = (void **)(v15 - 24);
  sub_216782F20(&a11);
  sub_216782F20(&a11);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v13);
  sub_21697C414(a10);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v12);
  Alembic::Abc::v12::IObject::~IObject(v11);
  _Unwind_Resume(a1);
}

void **sub_21710D5AC(void **a1)
{
  *a1 = &unk_26C774B18;
  uint64_t v2 = a1 + 1;
  a1[1] = &unk_26C749FB8;
  a1[13] = &unk_26C749FF0;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 44));
  a1[13] = &unk_26C74A078;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 38));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 32));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 26));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 20));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 14));
  Alembic::Abc::v12::IObject::~IObject(v2);
  return a1;
}

void sub_21710D688(void **a1)
{
  *a1 = &unk_26C774B18;
  uint64_t v2 = a1 + 1;
  a1[1] = &unk_26C749FB8;
  a1[13] = &unk_26C749FF0;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 44));
  a1[13] = &unk_26C74A078;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 38));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 32));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 26));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 20));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 14));
  Alembic::Abc::v12::IObject::~IObject(v2);

  operator delete(a1);
}

void *sub_21710D774(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x190uLL);
  *uint64_t v2 = &unk_26C774B18;
  sub_21710DC30((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_21710D7C8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21710D7DC(uint64_t a1, void *a2)
{
  *a2 = &unk_26C774B18;
  return sub_21710DC30((uint64_t)(a2 + 1), a1 + 8);
}

void sub_21710D808(uint64_t a1)
{
}

void sub_21710D810(void *a1)
{
  sub_21710CD84((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t sub_21710D84C(uint64_t a1)
{
  return Alembic::Abc::v12::IObject::getHeader((Alembic::Abc::v12::IObject *)(a1 + 8)) + 48;
}

uint64_t sub_21710D86C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C774B88)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21710D8AC()
{
  return &unk_26C774B88;
}

uint64_t sub_21710D8B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)sub_2167A2320(a1, a2);
  *uint64_t v4 = &unk_26C749FB8;
  sub_21710D91C((uint64_t)(v4 + 12), a2 + 96);
  return a1;
}

void sub_21710D908(_Unwind_Exception *a1)
{
  Alembic::Abc::v12::IObject::~IObject(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21710D91C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_21710DA0C(a1, a2);
  *(void *)uint64_t v4 = &unk_26C749FF0;
  *(_DWORD *)(v4 + 248) = *(_DWORD *)(a2 + 248);
  uint64_t v5 = v4 + 256;
  if (*(char *)(a2 + 279) < 0)
  {
    sub_216778F24((unsigned char *)v5, *(void **)(a2 + 256), *(void *)(a2 + 264));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 256);
    *(void *)(v5 + 16) = *(void *)(a2 + 272);
    *(_OWORD *)uint64_t v5 = v6;
  }
  uint64_t v7 = *(void *)(a2 + 288);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  *(void *)(a1 + 288) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void sub_21710D9B8(_Unwind_Exception *a1)
{
  void *v1 = &unk_26C74A078;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(v1 + 25));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(v1 + 19));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(v1 + 13));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(v1 + 7));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(v1 + 1));
  _Unwind_Resume(a1);
}

uint64_t sub_21710DA0C(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v4 = a1 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_216778F24((unsigned char *)v4, *(void **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(void *)(v4 + 16) = *(void *)(a2 + 32);
    *(_OWORD *)uint64_t v4 = v5;
  }
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = &unk_26C74A078;
  uint64_t v7 = (unsigned char *)(a1 + 64);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  if (*(char *)(a2 + 87) < 0)
  {
    sub_216778F24(v7, *(void **)(a2 + 64), *(void *)(a2 + 72));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(_OWORD *)uint64_t v7 = v8;
  }
  uint64_t v9 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  uint64_t v10 = (unsigned char *)(a1 + 112);
  if (*(char *)(a2 + 135) < 0)
  {
    sub_216778F24(v10, *(void **)(a2 + 112), *(void *)(a2 + 120));
  }
  else
  {
    long long v11 = *(_OWORD *)(a2 + 112);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(_OWORD *)uint64_t v10 = v11;
  }
  uint64_t v12 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  int v13 = (unsigned char *)(a1 + 160);
  if (*(char *)(a2 + 183) < 0)
  {
    sub_216778F24(v13, *(void **)(a2 + 160), *(void *)(a2 + 168));
  }
  else
  {
    long long v14 = *(_OWORD *)(a2 + 160);
    *(void *)(a1 + 176) = *(void *)(a2 + 176);
    *(_OWORD *)int v13 = v14;
  }
  uint64_t v15 = *(void *)(a2 + 192);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  int v16 = (unsigned char *)(a1 + 208);
  if (*(char *)(a2 + 231) < 0)
  {
    sub_216778F24(v16, *(void **)(a2 + 208), *(void *)(a2 + 216));
  }
  else
  {
    long long v17 = *(_OWORD *)(a2 + 208);
    *(void *)(a1 + 224) = *(void *)(a2 + 224);
    *(_OWORD *)int v16 = v17;
  }
  uint64_t v18 = *(void *)(a2 + 240);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a1 + 240) = v18;
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void sub_21710DBEC(_Unwind_Exception *a1)
{
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v4);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v3);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v2);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21710DC30(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)sub_2167A2320(a1, a2);
  *uint64_t v4 = &unk_26C749FB8;
  sub_2167EB704((uint64_t)(v4 + 12), a2 + 96);
  return a1;
}

void sub_21710DC80(_Unwind_Exception *a1)
{
  Alembic::Abc::v12::IObject::~IObject(v1);
  _Unwind_Resume(a1);
}

void **sub_21710DC94(void **a1)
{
  *a1 = &unk_26C774BB0;
  uint64_t v2 = a1 + 1;
  a1[1] = &unk_26C749FB8;
  a1[13] = &unk_26C749FF0;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 44));
  a1[13] = &unk_26C74A078;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 38));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 32));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 26));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 20));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 14));
  Alembic::Abc::v12::IObject::~IObject(v2);
  return a1;
}

void sub_21710DD70(void **a1)
{
  *a1 = &unk_26C774BB0;
  uint64_t v2 = a1 + 1;
  a1[1] = &unk_26C749FB8;
  a1[13] = &unk_26C749FF0;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 44));
  a1[13] = &unk_26C74A078;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 38));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 32));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 26));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 20));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 14));
  Alembic::Abc::v12::IObject::~IObject(v2);

  operator delete(a1);
}

void *sub_21710DE5C(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x190uLL);
  *uint64_t v2 = &unk_26C774BB0;
  sub_21710DC30((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_21710DEB0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21710DEC4(uint64_t a1, void *a2)
{
  *a2 = &unk_26C774BB0;
  return sub_21710DC30((uint64_t)(a2 + 1), a1 + 8);
}

void sub_21710DEF0(uint64_t a1)
{
}

void sub_21710DEF8(void *a1)
{
  sub_21710CD84((uint64_t)a1 + 8);

  operator delete(a1);
}

void sub_21710DF34(uint64_t a1@<X0>, double **a2@<X8>)
{
  long long v5 = (Alembic::AbcGeom::v12::IFaceSetSchema *)(a1 + 104);
  uint64_t v4 = *(void *)(a1 + 104);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if ((*(unsigned int (**)(uint64_t))(v4 + 24))(a1 + 104))
  {
    sub_21710E150((uint64_t)v5, &v22);
    unint64_t NumSamples = Alembic::AbcGeom::v12::IFaceSetSchema::getNumSamples(v5);
    if (Alembic::Abc::v12::IArrayProperty::isConstant((Alembic::Abc::v12::IArrayProperty *)(a1 + 352))) {
      unint64_t v7 = NumSamples != 0;
    }
    else {
      unint64_t v7 = NumSamples;
    }
    if (v7)
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        double SampleTime = Alembic::AbcCoreAbstract::v12::TimeSampling::getSampleTime((double **)v22, i);
        double v10 = SampleTime;
        uint64_t v12 = a2[1];
        unint64_t v11 = (unint64_t)a2[2];
        if ((unint64_t)v12 >= v11)
        {
          long long v14 = *a2;
          uint64_t v15 = v12 - *a2;
          unint64_t v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 61) {
            sub_21677CB10();
          }
          uint64_t v17 = v11 - (void)v14;
          if (v17 >> 2 > v16) {
            unint64_t v16 = v17 >> 2;
          }
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v18 = v16;
          }
          if (v18)
          {
            uint64_t v19 = (char *)sub_21677CB28((uint64_t)(a2 + 2), v18);
            long long v14 = *a2;
            uint64_t v12 = a2[1];
          }
          else
          {
            uint64_t v19 = 0;
          }
          uint64_t v20 = (double *)&v19[8 * v15];
          *uint64_t v20 = v10;
          int v13 = v20 + 1;
          while (v12 != v14)
          {
            uint64_t v21 = *((void *)v12-- - 1);
            *((void *)v20-- - 1) = v21;
          }
          *a2 = v20;
          a2[1] = v13;
          a2[2] = (double *)&v19[8 * v18];
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          *uint64_t v12 = SampleTime;
          int v13 = v12 + 1;
        }
        a2[1] = v13;
      }
    }
    if (v23) {
      sub_216784EC4(v23);
    }
  }
}

void sub_21710E0CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v12 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + 8) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_21710E104(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C774B88)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21710E144()
{
  return &unk_26C774B88;
}

void sub_21710E150(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(char *)(a1 + 279) < 0)
  {
    if (!*(void *)(a1 + 264)) {
      goto LABEL_5;
    }
LABEL_9:
    sub_2167EA9AC((int *)(a1 + 8), (uint64_t)v4);
    Alembic::Abc::v12::IObject::getArchive((Alembic::Abc::v12::IObject *)v4, (uint64_t)v5);
    Alembic::Abc::v12::IArchive::getTimeSampling((Alembic::Abc::v12::IArchive *)v5, a2);
    Alembic::Abc::v12::IArchive::~IArchive((Alembic::Abc::v12::IArchive *)v5);
    Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)v4);
    return;
  }
  if (*(unsigned char *)(a1 + 279)) {
    goto LABEL_9;
  }
LABEL_5:
  if (!*(void *)(a1 + 280)) {
    goto LABEL_9;
  }
  int v3 = (Alembic::Abc::v12::IArrayProperty *)(a1 + 248);

  Alembic::Abc::v12::IArrayProperty::getTimeSampling(v3, a2);
}

void sub_21710E1F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  Alembic::Abc::v12::IArchive::~IArchive((Alembic::Abc::v12::IArchive *)(v9 - 64));
  Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&a9);
  _Unwind_Resume(a1);
}

void **sub_21710E21C(void **a1)
{
  *a1 = &unk_26C774C20;
  uint64_t v2 = a1 + 1;
  a1[1] = &unk_26C749FB8;
  a1[13] = &unk_26C749FF0;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 44));
  a1[13] = &unk_26C74A078;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 38));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 32));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 26));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 20));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 14));
  Alembic::Abc::v12::IObject::~IObject(v2);
  return a1;
}

void sub_21710E2F8(void **a1)
{
  *a1 = &unk_26C774C20;
  uint64_t v2 = a1 + 1;
  a1[1] = &unk_26C749FB8;
  a1[13] = &unk_26C749FF0;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 44));
  a1[13] = &unk_26C74A078;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 38));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 32));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 26));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 20));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 14));
  Alembic::Abc::v12::IObject::~IObject(v2);

  operator delete(a1);
}

void *sub_21710E3E4(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x190uLL);
  *uint64_t v2 = &unk_26C774C20;
  sub_21710DC30((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_21710E438(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21710E44C(uint64_t a1, void *a2)
{
  *a2 = &unk_26C774C20;
  return sub_21710DC30((uint64_t)(a2 + 1), a1 + 8);
}

void sub_21710E478(uint64_t a1)
{
}

void sub_21710E480(void *a1)
{
  sub_21710CD84((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t sub_21710E4BC(uint64_t a1, uint64_t a2)
{
  if (Alembic::AbcGeom::v12::IFaceSetSchema::getFaceExclusivity((Alembic::AbcGeom::v12::IFaceSetSchema *)(a1 + 104)) == 1)
  {
    int v3 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v3) {
      int v3 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    uint64_t v4 = (atomic_uint *)*((void *)v3 + 86);
    uint64_t v10 = v4;
    if ((v4 & 7) != 0)
    {
      long long v5 = (atomic_uint *)((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v5, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v10 = v5;
      }
    }
  }
  else
  {
    uint64_t v6 = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    if (!v6) {
      uint64_t v6 = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    unint64_t v7 = (atomic_uint *)*((void *)v6 + 146);
    uint64_t v10 = v7;
    if ((v7 & 7) != 0)
    {
      long long v8 = (atomic_uint *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
        uint64_t v10 = v8;
      }
    }
  }
  uint64_t result = sub_2170F9F98(a2, (uint64_t)&v10);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

uint64_t sub_21710E5E0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C774B88)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21710E620()
{
  return &unk_26C774B88;
}

pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *sub_21710E62C@<X0>(int a1@<W0>, atomic_uint **a2@<X8>)
{
  uint64_t result = (pxrInternal__aapl__pxrReserved__::UsdGeomTokensType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
  if (a1 == 1)
  {
    if (!result) {
      uint64_t result = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    long long v5 = (atomic_uint *)*((void *)result + 97);
  }
  else
  {
    if (!result) {
      uint64_t result = sub_216F00634(&pxrInternal__aapl__pxrReserved__::UsdGeomTokens);
    }
    long long v5 = (atomic_uint *)*((void *)result + 87);
  }
  *a2 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      *a2 = v6;
    }
  }
  return result;
}

void sub_21710E6B8(uint64_t **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, void *a3, uint64_t a4)
{
  v44[4] = *MEMORY[0x263EF8340];
  if (sub_2171081B8(a4))
  {
    sub_2171121E4((uint64_t)v21, a4);
    int v43 = 0;
    long long v8 = operator new(0xA0uLL);
    *long long v8 = &unk_26C775198;
    sub_217112564((uint64_t)(v8 + 1), (uint64_t)v21);
    int v43 = v8;
    sub_2171121E4((uint64_t)v18, a4);
    uint64_t v41 = 0;
    uint64_t v9 = operator new(0xA0uLL);
    *uint64_t v9 = &unk_26C775218;
    sub_217112564((uint64_t)(v9 + 1), (uint64_t)v18);
    uint64_t v41 = v9;
    uint64_t v10 = sub_2170F5EA4(a1, a2, a3, (uint64_t)v42, (uint64_t)v40);
    sub_2171121E4((uint64_t)&v24, a4);
    unint64_t v11 = (char *)operator new(0xA0uLL);
    *(void *)unint64_t v11 = &unk_26C775288;
    *((_DWORD *)v11 + 2) = v24;
    uint64_t v12 = v11 + 16;
    if (SHIBYTE(v26) < 0)
    {
      sub_216778F24(v12, (void *)v25, *((unint64_t *)&v25 + 1));
    }
    else
    {
      *(_OWORD *)uint64_t v12 = v25;
      *((void *)v11 + 4) = v26;
    }
    uint64_t v13 = v28;
    *((void *)v11 + 5) = v27;
    *((void *)v11 + 6) = v13;
    if (v13) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
    }
    *((_DWORD *)v11 + 14) = v29;
    long long v14 = v11 + 64;
    if (SHIBYTE(v31) < 0)
    {
      sub_216778F24(v14, (void *)v30, *((unint64_t *)&v30 + 1));
    }
    else
    {
      *(_OWORD *)long long v14 = v30;
      *((void *)v11 + 10) = v31;
    }
    uint64_t v15 = v33;
    *((void *)v11 + 11) = v32;
    *((void *)v11 + 12) = v15;
    if (v15) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
    }
    *((_DWORD *)v11 + 26) = v34;
    unint64_t v16 = v11 + 112;
    if (SHIBYTE(v36) < 0)
    {
      sub_216778F24(v16, (void *)v35, *((unint64_t *)&v35 + 1));
    }
    else
    {
      *(_OWORD *)unint64_t v16 = v35;
      *((void *)v11 + 16) = v36;
    }
    uint64_t v17 = v38;
    *((void *)v11 + 17) = v37;
    *((void *)v11 + 18) = v17;
    if (v17) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
    }
    v11[152] = v39;
    v44[3] = v11;
    sub_2170F8214(v44, (void *)v10 + 8);
    sub_2170F5BA0(v44);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v34);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v29);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v24);
    sub_2170F5FA4(v40);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v20);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v19);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v18);
    sub_2170F6028(v42);
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v23);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v22);
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v21);
  }
}

void sub_21710E990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v49);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v48);
  operator delete(v47);
  sub_2167BA760((uint64_t)&a47);
  sub_2170F5FA4((void *)(v50 - 168));
  sub_2167BA760((uint64_t)&a9);
  sub_2170F6028((void *)(v50 - 136));
  sub_2167BA760((uint64_t)&a28);
  _Unwind_Resume(a1);
}

uint64_t sub_21710EA3C(uint64_t a1, uint64_t a2)
{
  if ((*(char *)(a2 + 39) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(a2 + 39)) {
      goto LABEL_5;
    }
LABEL_10:
    sub_217110A2C(a1);
    return a1;
  }
  if (*(void *)(a2 + 24)) {
    goto LABEL_10;
  }
LABEL_5:
  if (!*(void *)(a2 + 40)) {
    goto LABEL_10;
  }
  uint64_t PropertyHeader = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(a2 + 8);
  if (!PropertyHeader || !sub_217113180(PropertyHeader, 0)) {
    goto LABEL_10;
  }
  int v9 = *(_DWORD *)(a2 + 8);
  if (*(char *)(a2 + 39) < 0)
  {
    sub_216778F24(&v10, *(void **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    long long v10 = *(_OWORD *)(a2 + 16);
    uint64_t v11 = *(void *)(a2 + 32);
  }
  uint64_t v6 = *(void *)(a2 + 48);
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  v8[0] = 0;
  void v8[2] = 0;
  v7[0] = 0;
  _OWORD v7[2] = 0;
  sub_2171132EC(a1, (uint64_t)&v9, a2 + 56, v8, v7);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v9);
  return a1;
}

void sub_21710EB40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)va);
  _Unwind_Resume(a1);
}

void *sub_21710EB54(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[17];
  if (v2) {
    sub_216784EC4(v2);
  }
  int v3 = (std::__shared_weak_count *)a1[15];
  if (v3) {
    sub_216784EC4(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[13];
  if (v4) {
    sub_216784EC4(v4);
  }
  long long v5 = (std::__shared_weak_count *)a1[5];
  if (v5) {
    sub_216784EC4(v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)a1[3];
  if (v6) {
    sub_216784EC4(v6);
  }
  unint64_t v7 = (std::__shared_weak_count *)a1[1];
  if (v7) {
    sub_216784EC4(v7);
  }
  return a1;
}

uint64_t sub_21710EBC0(uint64_t a1, int a2)
{
  if (a2 == 2)
  {
    sub_216779094(v34, "schema");
    sub_21679F2AC(a1, v34, &v36);
    if (((char)v38 & 0x80000000) == 0)
    {
      BOOL v10 = v38 == 16 && v36 == (void *)0x5F6D6F6547636241 && v37 == 0x32765F6576727543;
      goto LABEL_72;
    }
    uint64_t v11 = v36;
    BOOL v10 = v37 == 16 && *v36 == 0x5F6D6F6547636241 && v36[1] == 0x32765F6576727543;
    goto LABEL_71;
  }
  if (a2 == 1) {
    return 1;
  }
  if (a2) {
    return 0;
  }
  sub_216779094(v34, "schemaObjTitle");
  sub_21679F2AC(a1, v34, &v36);
  sub_21710EF1C(&v33);
  uint64_t v3 = v38;
  if ((v38 & 0x80u) == 0) {
    size_t v4 = v38;
  }
  else {
    size_t v4 = v37;
  }
  std::string::size_type size = HIBYTE(v33.__r_.__value_.__r.__words[2]);
  char v6 = HIBYTE(v33.__r_.__value_.__r.__words[2]);
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v33.__r_.__value_.__l.__size_;
  }
  if (v4 != size)
  {
LABEL_39:
    sub_216779094(v28, "schema");
    sub_21679F2AC(a1, (const void **)v28, &__s1);
    sub_21710EF1C(&__p);
    unsigned __int8 v13 = v32;
    if ((v32 & 0x80u) == 0) {
      size_t v14 = v32;
    }
    else {
      size_t v14 = __n;
    }
    std::string::size_type v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    int v16 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v15 = __p.__r_.__value_.__l.__size_;
    }
    if (v14 != v15)
    {
      BOOL v10 = 0;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_63;
      }
      goto LABEL_58;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((char)v32 < 0)
    {
      BOOL v10 = memcmp(__s1, p_p, __n) == 0;
    }
    else
    {
      if (!v32)
      {
        BOOL v10 = 1;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_63:
          if ((v13 & 0x80) != 0) {
            operator delete(__s1);
          }
          if (v29 < 0) {
            operator delete(v28[0]);
          }
          if ((*((unsigned char *)&v33.__r_.__value_.__s + 23) & 0x80) == 0) {
            goto LABEL_69;
          }
          goto LABEL_68;
        }
LABEL_58:
        operator delete(__p.__r_.__value_.__l.__data_);
        unsigned __int8 v13 = v32;
        goto LABEL_63;
      }
      uint64_t v18 = v32 - 1;
      p_s1 = &__s1;
      do
      {
        int v21 = *(unsigned __int8 *)p_s1;
        p_s1 = (void **)((char *)p_s1 + 1);
        int v20 = v21;
        int v23 = p_p->__r_.__value_.__s.__data_[0];
        p_p = (std::string *)((char *)p_p + 1);
        int v22 = v23;
        BOOL v25 = v18-- != 0;
        BOOL v10 = v20 == v22;
      }
      while (v20 == v22 && v25);
    }
    if ((v16 & 0x80000000) == 0) {
      goto LABEL_63;
    }
    goto LABEL_58;
  }
  if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v7 = &v33;
  }
  else {
    unint64_t v7 = (std::string *)v33.__r_.__value_.__r.__words[0];
  }
  if ((v38 & 0x80) != 0)
  {
    if (memcmp(v36, v7, v37)) {
      goto LABEL_39;
    }
  }
  else if (v38)
  {
    long long v8 = (unsigned __int8 *)&v36;
    while (*v8 == v7->__r_.__value_.__s.__data_[0])
    {
      ++v8;
      unint64_t v7 = (std::string *)((char *)v7 + 1);
      if (!--v3) {
        goto LABEL_59;
      }
    }
    goto LABEL_39;
  }
LABEL_59:
  BOOL v10 = 1;
  if (v6 < 0) {
LABEL_68:
  }
    operator delete(v33.__r_.__value_.__l.__data_);
LABEL_69:
  if (((char)v38 & 0x80000000) == 0) {
    goto LABEL_72;
  }
  uint64_t v11 = v36;
LABEL_71:
  operator delete(v11);
LABEL_72:
  if (v35 < 0) {
    operator delete((void *)v34[0]);
  }
  return v10;
}

void sub_21710EE9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (*(char *)(v29 - 33) < 0) {
    operator delete(*(void **)(v29 - 56));
  }
  if (*(char *)(v29 - 57) < 0) {
    operator delete(*(void **)(v29 - 80));
  }
  _Unwind_Resume(exception_object);
}

void sub_21710EF1C(std::string *a1@<X8>)
{
  sub_216779094(&v5, ":");
  uint64_t v2 = std::string::insert(&v5, 0, "AbcGeom_Curve_v2");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v6.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v6.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  size_t v4 = std::string::append(&v6, ".geom");
  *a1 = *v4;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
}

void sub_21710EFC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

int64x2_t sub_21710EFFC(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  if (v2) {
    sub_216784EC4(v2);
  }
  long long v3 = *(std::__shared_weak_count **)(a1 + 104);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  if (v3) {
    sub_216784EC4(v3);
  }
  size_t v4 = *(std::__shared_weak_count **)(a1 + 40);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  if (v4) {
    sub_216784EC4(v4);
  }
  *(_DWORD *)(a1 + 152) = 0;
  *(void *)(a1 + 144) = 0x100000000;
  std::string v5 = *(std::__shared_weak_count **)(a1 + 120);
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  if (v5) {
    sub_216784EC4(v5);
  }
  std::string v6 = *(std::__shared_weak_count **)(a1 + 136);
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  if (v6) {
    sub_216784EC4(v6);
  }
  *(int64x2_t *)(a1 + 48) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(_OWORD *)(a1 + 64) = xmmword_217409FA0;
  int64x2_t result = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  *(int64x2_t *)(a1 + 80) = result;
  return result;
}

BOOL sub_21710F09C(uint64_t a1)
{
  BOOL result = sub_21711020C(a1);
  if (result)
  {
    if (*(char *)(a1 + 279) < 0)
    {
      if (*(void *)(a1 + 264)) {
        return 0;
      }
    }
    else if (*(unsigned char *)(a1 + 279))
    {
      return 0;
    }
    if (*(void *)(a1 + 280))
    {
      if (*(char *)(a1 + 375) < 0)
      {
        if (*(void *)(a1 + 360)) {
          return 0;
        }
      }
      else if (*(unsigned char *)(a1 + 375))
      {
        return 0;
      }
      return *(void *)(a1 + 376) != 0;
    }
    return 0;
  }
  return result;
}

uint64_t sub_21710F110(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v7 = sub_21710F324(a1, a2, a3, a4);
  *(void *)uint64_t v7 = &unk_26C774C90;
  *(_DWORD *)(v7 + 248) = 2;
  sub_216779094((void *)(v7 + 256), "");
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 2;
  sub_216779094((void *)(a1 + 304), "");
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  *(_DWORD *)(a1 + 344) = 2;
  sub_216779094((void *)(a1 + 352), "");
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(_DWORD *)(a1 + 392) = 2;
  sub_216779094((void *)(a1 + 400), "");
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = 0;
  sub_217110A2C(a1 + 440);
  sub_217108118(a1 + 592);
  sub_21710CCE4(a1 + 744);
  *(_DWORD *)(a1 + 896) = 2;
  sub_216779094((void *)(a1 + 904), "");
  *(void *)(a1 + 936) = 0;
  *(void *)(a1 + 928) = 0;
  *(_DWORD *)(a1 + 944) = 2;
  sub_216779094((void *)(a1 + 952), "");
  *(void *)(a1 + 984) = 0;
  *(void *)(a1 + 976) = 0;
  *(_DWORD *)(a1 + 992) = 2;
  sub_216779094((void *)(a1 + 1000), "");
  *(void *)(a1 + 1032) = 0;
  *(void *)(a1 + 1024) = 0;
  Alembic::AbcGeom::v12::ICurvesSchema::init(a1, a3, a4);
  return a1;
}

void sub_21710F270(_Unwind_Exception *a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v6);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(v1 + 118));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(v1 + 112));
  sub_2167BA760(v5);
  sub_2167BA760(v4);
  sub_2167BA760(v3);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(v1 + 49));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(v1 + 43));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(v1 + 37));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);
  sub_21710F464(v1);
  _Unwind_Resume(a1);
}

void sub_21710F2F4()
{
}

void sub_21710F2FC()
{
}

void sub_21710F304()
{
}

void sub_21710F30C()
{
}

void sub_21710F314()
{
}

void sub_21710F31C()
{
}

uint64_t sub_21710F324(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t v7 = sub_21710F57C((void *)a1, a2, a3, a4);
  *uint64_t v7 = &unk_26C774D18;
  *((_DWORD *)v7 + 14) = 2;
  sub_216779094(v7 + 8, "");
  *(_DWORD *)(a1 + 104) = 2;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  sub_216779094((void *)(a1 + 112), "");
  *(_DWORD *)(a1 + 152) = 2;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  sub_216779094((void *)(a1 + 160), "");
  *(_DWORD *)(a1 + 200) = 2;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  sub_216779094((void *)(a1 + 208), "");
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  sub_21710F9C4(a1, a3, a4);
  return a1;
}

void sub_21710F410(_Unwind_Exception *a1)
{
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v5);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v4);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v3);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v2);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(v1 + 8));
  _Unwind_Resume(a1);
}

void *sub_21710F464(void *a1)
{
  *a1 = &unk_26C774D18;
  uint64_t v2 = (Alembic::Abc::v12::ICompoundProperty *)(a1 + 1);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 25));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 19));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 13));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 7));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v2);
  return a1;
}

void sub_21710F4D0(void *a1)
{
  uint64_t v1 = sub_217110B04(a1);

  operator delete(v1);
}

void sub_21710F4F8(uint64_t a1)
{
  sub_2167A13A4(a1 + 248);
  sub_2167A13A4(a1 + 296);
  sub_2167A13A4(a1 + 344);
  sub_2167A13A4(a1 + 896);
  sub_2167A13A4(a1 + 944);
  sub_2167A13A4(a1 + 992);
  sub_217110ACC(a1 + 592);
  sub_217110ACC(a1 + 744);
  sub_217110ACC(a1 + 440);
  sub_2167A13A4(a1 + 392);

  sub_2171101B8(a1);
}

void *sub_21710F57C(void *a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  long long v8 = *(std::__shared_weak_count **)(a2 + 40);
  uint64_t v40 = *(void *)(a2 + 32);
  uint64_t v41 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v35 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_216778F24(&v36, *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v36 = *(_OWORD *)(a2 + 8);
    uint64_t v37 = *(void *)(a2 + 24);
  }
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v38 = *(void *)(a2 + 32);
  uint64_t v39 = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  LODWORD(v23) = 0;
  LODWORD(v24) = 0;
  LODWORD(v26[0]) = 0;
  LODWORD(v26[1]) = 0;
  int v10 = sub_217110258(&v35, a3, a4, &v23, v26);
  LODWORD(__p) = 1;
  int v29 = v10;
  LODWORD(v33) = 0;
  LODWORD(v34) = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty((uint64_t)(a1 + 1), &v40, &__p, &v33);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v35);
  if (v41) {
    sub_216784EC4(v41);
  }
  *a1 = &unk_26C774D48;
  std::string v33 = a1 + 1;
  int v34 = "ISchema::ISchema( wrap)";
  uint64_t v11 = sub_21680F968((uint64_t)(a1 + 1));
  LODWORD(__p) = 0;
  int v29 = 0;
  LODWORD(v23) = 0;
  LODWORD(v24) = 0;
  int v12 = sub_216807C40(a3, a4, &__p, &v23);
  uint64_t v13 = v11 + 32;
  if ((sub_217110900(v13, v12) & 1) == 0)
  {
    sub_216778A5C((uint64_t)&__p);
    int v16 = sub_216779180(&v30, (uint64_t)"Incorrect match of schema: ", 27);
    sub_216779094(v26, "schema");
    sub_21679F2AC(v13, (const void **)v26, &v23);
    if ((v25 & 0x80u) == 0) {
      uint64_t v17 = &v23;
    }
    else {
      uint64_t v17 = v23;
    }
    if ((v25 & 0x80u) == 0) {
      uint64_t v18 = v25;
    }
    else {
      uint64_t v18 = v24;
    }
    uint64_t v19 = sub_216779180(v16, (uint64_t)v17, v18);
    int v20 = sub_216779180(v19, (uint64_t)" to expected: ", 14);
    sub_216779180(v20, (uint64_t)"AbcGeom_Curve_v2", 16);
    if ((char)v25 < 0) {
      operator delete(v23);
    }
    if (v27 < 0) {
      operator delete(v26[0]);
    }
    std::stringbuf::str();
    sub_216778E70(&v23, (long long *)v26);
    if (v27 < 0) {
      operator delete(v26[0]);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    int v22 = sub_216779038(exception, (uint64_t)&v23);
    __cxa_throw(v22, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  Alembic::Abc::v12::ICompoundProperty::getParent((Alembic::Abc::v12::ICompoundProperty *)a2, (uint64_t)&__p);
  if (v31 < 0)
  {
    if (v30) {
      goto LABEL_13;
    }
LABEL_17:
    uint64_t v14 = v32;
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&__p);
    if (v14) {
      return a1;
    }
    goto LABEL_14;
  }
  if (!v31) {
    goto LABEL_17;
  }
LABEL_13:
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&__p);
LABEL_14:
  sub_216779094(&__p, ".geom");
  sub_217110360((uint64_t)a1, a2, (uint64_t)&__p, a3, a4);
  if (SHIBYTE(v30) < 0) {
    operator delete(__p);
  }
  return a1;
}

void sub_21710F880(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  sub_216779148((std::exception *)&__p);
  sub_216778D38((uint64_t)&a22);
  char v31 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    uint64_t v32 = (uint64_t)v31;
    sub_2167A13A4(v27);
    sub_21679FA64(v28 - 144, v32);
  }
  else
  {
    sub_2167A13A4(v27);
    sub_21679F9F4(v28 - 144, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x21710F75CLL);
}

void sub_21710F994()
{
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v0);
  JUMPOUT(0x21710F938);
}

void sub_21710F9C4(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v6 = a1 + 8;
  uint64_t v53 = a1 + 8;
  uint64_t v54 = "IGeomBaseSchema::init()";
  *(_OWORD *)&v45.__r_.__value_.__l.__data_ = 0uLL;
  std::string v44 = &v45;
  int v48 = 2;
  sub_2167898D0(v49, (const void ***)&v44);
  _DWORD v49[3] = 0;
  uint64_t v50 = 0;
  int v51 = 0;
  uint64_t v52 = 1;
  sub_2167877AC((uint64_t)&v44, v45.__r_.__value_.__l.__data_);
  sub_2167A030C(a2, (uint64_t)&v48);
  sub_2167A030C(a3, (uint64_t)&v48);
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 48);
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v42 = v7;
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v42 = 0;
  }
  uint64_t v41 = v8;
  int v39 = 0;
  int v40 = 0;
  int v37 = 0;
  int v38 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v43, &v41, &v39, &v37);
  sub_216779094(__p, ".selfBnds");
  sub_2167B10BC((uint64_t)&v44, v43, (uint64_t)__p, a2, a3);
  *(_DWORD *)(a1 + 56) = v44;
  std::string::operator=((std::string *)(a1 + 64), &v45);
  uint64_t v10 = v46;
  uint64_t v9 = v47;
  if (v47) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v47 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = *(std::__shared_weak_count **)(a1 + 96);
  *(void *)(a1 + 88) = v10;
  *(void *)(a1 + 96) = v9;
  if (v11) {
    sub_216784EC4(v11);
  }
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v44);
  if (v36 < 0) {
    operator delete(__p[0]);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v43);
  if (v42) {
    sub_216784EC4(v42);
  }
  sub_216779094(&v44, ".childBnds");
  uint64_t PropertyHeader = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v6);
  uint64_t v13 = PropertyHeader;
  if (v45.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(v44);
    if (!v13) {
      goto LABEL_26;
    }
  }
  else if (!PropertyHeader)
  {
    goto LABEL_26;
  }
  uint64_t v33 = v8;
  int v34 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v39 = 0;
  int v40 = 0;
  int v37 = 0;
  int v38 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v43, &v33, &v39, &v37);
  sub_216779094(__p, ".childBnds");
  sub_2167B10BC((uint64_t)&v44, v43, (uint64_t)__p, a2, a3);
  *(_DWORD *)(a1 + 104) = v44;
  std::string::operator=((std::string *)(a1 + 112), &v45);
  uint64_t v15 = v46;
  uint64_t v14 = v47;
  if (v47) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v47 + 8), 1uLL, memory_order_relaxed);
  }
  int v16 = *(std::__shared_weak_count **)(a1 + 144);
  *(void *)(a1 + 136) = v15;
  *(void *)(a1 + 144) = v14;
  if (v16) {
    sub_216784EC4(v16);
  }
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v44);
  if (v36 < 0) {
    operator delete(__p[0]);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v43);
  if (v34) {
    sub_216784EC4(v34);
  }
LABEL_26:
  sub_216779094(&v44, ".arbGeomParams");
  uint64_t v17 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v6);
  uint64_t v18 = v17;
  if (v45.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(v44);
    if (!v18) {
      goto LABEL_40;
    }
  }
  else if (!v17)
  {
    goto LABEL_40;
  }
  uint64_t v31 = v8;
  uint64_t v32 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v39 = 0;
  int v40 = 0;
  int v37 = 0;
  int v38 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v43, &v31, &v39, &v37);
  sub_216779094(__p, ".arbGeomParams");
  int v29 = 1;
  int v30 = v48;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(&v44, v43, __p, &v29);
  *(_DWORD *)(a1 + 152) = v44;
  std::string::operator=((std::string *)(a1 + 160), &v45);
  uint64_t v20 = v46;
  uint64_t v19 = v47;
  if (v47) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v47 + 8), 1uLL, memory_order_relaxed);
  }
  int v21 = *(std::__shared_weak_count **)(a1 + 192);
  *(void *)(a1 + 184) = v20;
  *(void *)(a1 + 192) = v19;
  if (v21) {
    sub_216784EC4(v21);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v44);
  if (v36 < 0) {
    operator delete(__p[0]);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v43);
  if (v32) {
    sub_216784EC4(v32);
  }
LABEL_40:
  sub_216779094(&v44, ".userProperties");
  uint64_t v22 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader(v6);
  uint64_t v23 = v22;
  if (v45.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(v44);
    if (!v23) {
      goto LABEL_54;
    }
  }
  else if (!v22)
  {
    goto LABEL_54;
  }
  uint64_t v27 = v8;
  uint64_t v28 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v39 = 0;
  int v40 = 0;
  int v37 = 0;
  int v38 = 0;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(v43, &v27, &v39, &v37);
  sub_216779094(__p, ".userProperties");
  int v29 = 1;
  int v30 = v48;
  Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(&v44, v43, __p, &v29);
  *(_DWORD *)(a1 + 200) = v44;
  std::string::operator=((std::string *)(a1 + 208), &v45);
  uint64_t v25 = v46;
  uint64_t v24 = v47;
  if (v47) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v47 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v26 = *(std::__shared_weak_count **)(a1 + 240);
  *(void *)(a1 + 232) = v25;
  *(void *)(a1 + 240) = v24;
  if (v26) {
    sub_216784EC4(v26);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v44);
  if (v36 < 0) {
    operator delete(__p[0]);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v43);
  if (v28) {
    sub_216784EC4(v28);
  }
LABEL_54:
  if (v7) {
    sub_216784EC4(v7);
  }
  if (v50) {
    sub_216784EC4(v50);
  }
  sub_2167877AC((uint64_t)v49, (void *)v49[1]);
}

void sub_21710FEAC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&a36);
  if (a23 < 0) {
    operator delete(__p);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&a30);
  if (a11) {
    sub_216784EC4(a11);
  }
  if (v41) {
    sub_216784EC4(v41);
  }
  sub_2167A03C4(v42 - 160);
  std::string v45 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64(v42 - 96, (uint64_t)v45);
  }
  else {
    sub_21679F9F4(v42 - 96, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x21710FE8CLL);
}

void sub_21711008C(_Unwind_Exception *a1)
{
}

void sub_2171100AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,void *a34)
{
}

void sub_2171100C4()
{
}

void *sub_2171100D0(void *a1)
{
  *a1 = &unk_26C774D18;
  uint64_t v2 = (Alembic::Abc::v12::ICompoundProperty *)(a1 + 1);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 25));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 19));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 13));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 7));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v2);
  return a1;
}

void sub_21711013C(void *a1)
{
  *a1 = &unk_26C774D18;
  uint64_t v2 = (Alembic::Abc::v12::ICompoundProperty *)(a1 + 1);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 25));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 19));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 13));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 7));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v2);

  operator delete(a1);
}

void sub_2171101B8(uint64_t a1)
{
  sub_2167A13A4(a1 + 56);
  sub_2167A13A4(a1 + 104);
  sub_2167A13A4(a1 + 152);
  sub_2167A13A4(a1 + 200);

  sub_2167A13A4(a1 + 8);
}

BOOL sub_21711020C(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0)
  {
    if (!*(void *)(a1 + 24)) {
      goto LABEL_5;
    }
    return 0;
  }
  if (*(unsigned char *)(a1 + 39)) {
    return 0;
  }
LABEL_5:
  if (!*(void *)(a1 + 40)) {
    return 0;
  }
  if (*(char *)(a1 + 87) < 0)
  {
    if (*(void *)(a1 + 72)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a1 + 87))
  {
    return 0;
  }
  return *(void *)(a1 + 88) != 0;
}

uint64_t sub_217110258(unsigned int *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  unsigned int v9 = *a1;
  v13[0] = 0;
  v13[1] = 0;
  int v12 = (const void **)v13;
  unsigned int v14 = v9;
  sub_2167898D0(v15, &v12);
  v15[3] = 0;
  int v16 = 0;
  int v17 = 0;
  uint64_t v18 = 1;
  sub_2167877AC((uint64_t)&v12, v13[0]);
  sub_2167A030C(a2, (uint64_t)&v14);
  sub_2167A030C(a3, (uint64_t)&v14);
  sub_2167A030C(a4, (uint64_t)&v14);
  sub_2167A030C(a5, (uint64_t)&v14);
  uint64_t v10 = v14;
  if (v16) {
    sub_216784EC4(v16);
  }
  sub_2167877AC((uint64_t)v15, (void *)v15[1]);
  return v10;
}

void sub_217110338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

void sub_217110360(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  *((void *)&v35 + 1) = 0;
  v36[0] = 0;
  *(void *)&long long v35 = (char *)&v35 + 8;
  int v37 = 2;
  sub_2167898D0(v38, (const void ***)&v35);
  v38[3] = 0;
  int v39 = 0;
  int v40 = 0;
  uint64_t v41 = 1;
  sub_2167877AC((uint64_t)&v35, *((void **)&v35 + 1));
  sub_2167A030C(a4, (uint64_t)&v37);
  sub_2167A030C(a5, (uint64_t)&v37);
  *(_DWORD *)(a1 + 8) = v37;
  v36[34] = a1 + 8;
  v36[35] = "ISchema::ISchema::init()";
  if (*(char *)(a2 + 31) < 0)
  {
    if (*(void *)(a2 + 16)) {
      goto LABEL_18;
    }
  }
  else if (*(unsigned char *)(a2 + 31))
  {
LABEL_18:
    sub_216778A5C((uint64_t)&v35);
    sub_216779180(v36, (uint64_t)"NULL parent passed into ISchema ctor", 36);
    std::stringbuf::str();
    sub_216778E70(v33, (long long *)__p);
    if (v32 < 0) {
      operator delete(__p[0]);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    int v17 = sub_216779038(exception, (uint64_t)v33);
    __cxa_throw(v17, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  uint64_t v10 = *(void *)(a2 + 32);
  if (!v10) {
    goto LABEL_18;
  }
  uint64_t v11 = *(std::__shared_weak_count **)(a2 + 40);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v10 + 80))(v10, a3);
  if (!v12)
  {
    sub_216778A5C((uint64_t)&v35);
    uint64_t v18 = sub_216779180(v36, (uint64_t)"Nonexistent compound property: ", 31);
    int v19 = *(char *)(a3 + 23);
    if (v19 >= 0) {
      uint64_t v20 = a3;
    }
    else {
      uint64_t v20 = *(void *)a3;
    }
    if (v19 >= 0) {
      uint64_t v21 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v21 = *(void *)(a3 + 8);
    }
    sub_216779180(v18, v20, v21);
    std::stringbuf::str();
    sub_216778E70(v33, (long long *)__p);
    if (v32 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v22 = __cxa_allocate_exception(0x20uLL);
    uint64_t v23 = sub_216779038(v22, (uint64_t)v33);
    __cxa_throw(v23, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  uint64_t v13 = v12 + 32;
  if ((sub_217110900(v12 + 32, v41) & 1) == 0)
  {
    sub_216778A5C((uint64_t)&v35);
    uint64_t v24 = sub_216779180(v36, (uint64_t)"Incorrect match of schema: ", 27);
    sub_216779094(__p, "schema");
    sub_21679F2AC(v13, (const void **)__p, v33);
    if ((v34 & 0x80u) == 0) {
      uint64_t v25 = v33;
    }
    else {
      uint64_t v25 = (void **)v33[0];
    }
    if ((v34 & 0x80u) == 0) {
      uint64_t v26 = v34;
    }
    else {
      uint64_t v26 = (uint64_t)v33[1];
    }
    uint64_t v27 = sub_216779180(v24, (uint64_t)v25, v26);
    uint64_t v28 = sub_216779180(v27, (uint64_t)" to expected: ", 14);
    sub_216779180(v28, (uint64_t)"AbcGeom_Curve_v2", 16);
    if ((char)v34 < 0) {
      operator delete(v33[0]);
    }
    if (v32 < 0) {
      operator delete(__p[0]);
    }
    std::stringbuf::str();
    sub_216778E70(v33, (long long *)__p);
    if (v32 < 0) {
      operator delete(__p[0]);
    }
    int v29 = __cxa_allocate_exception(0x20uLL);
    int v30 = sub_216779038(v29, (uint64_t)v33);
    __cxa_throw(v30, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(*(void *)v10 + 104))(&v35, v10, a3);
  long long v14 = v35;
  long long v35 = 0uLL;
  uint64_t v15 = *(std::__shared_weak_count **)(a1 + 48);
  *(_OWORD *)(a1 + 40) = v14;
  if (v15)
  {
    sub_216784EC4(v15);
    if (*((void *)&v35 + 1)) {
      sub_216784EC4(*((std::__shared_weak_count **)&v35 + 1));
    }
  }
  if (v11) {
    sub_216784EC4(v11);
  }
  if (v39) {
    sub_216784EC4(v39);
  }
  sub_2167877AC((uint64_t)v38, (void *)v38[1]);
}

void sub_217110734(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24)
{
  sub_216779148((std::exception *)&__p);
  sub_216778D38((uint64_t)&a23);
  if (v25) {
    sub_216784EC4(v25);
  }
  int v29 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    uint64_t v30 = (uint64_t)v29;
    sub_2167A13A4(v24);
    sub_21679FA64(v26 - 144, v30);
  }
  else
  {
    sub_2167A13A4(v24);
    sub_21679F9F4(v26 - 144, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x2171104E8);
}

void sub_217110860()
{
  sub_2167A03C4(v0 - 128);
  JUMPOUT(0x217110890);
}

uint64_t sub_217110898(uint64_t a1)
{
  return a1;
}

void sub_2171108C4(uint64_t a1)
{
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 8));

  operator delete((void *)a1);
}

uint64_t sub_217110900(uint64_t a1, int a2)
{
  if (a2 == 1) {
    return 1;
  }
  if ((a2 & 0xFFFFFFFD) != 0) {
    return 0;
  }
  sub_216779094(__p, "schema");
  sub_21679F2AC(a1, (const void **)__p, &v9);
  if (v11 < 0)
  {
    BOOL v2 = v10 == 16 && *v9 == 0x5F6D6F6547636241 && v9[1] == 0x32765F6576727543;
    operator delete(v9);
  }
  else
  {
    BOOL v2 = v11 == 16 && v9 == (void *)0x5F6D6F6547636241 && v10 == 0x32765F6576727543;
  }
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void sub_217110A10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_217110A2C(uint64_t a1)
{
  *(_DWORD *)a1 = 2;
  sub_216779094((void *)(a1 + 8), "");
  *(_DWORD *)(a1 + 48) = 2;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  sub_216779094((void *)(a1 + 56), "");
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 2;
  sub_216779094((void *)(a1 + 104), "");
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 144) = 0;
  return a1;
}

void sub_217110AA8(_Unwind_Exception *a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v1);
  _Unwind_Resume(a1);
}

void sub_217110ACC(uint64_t a1)
{
  *(unsigned char *)(a1 + 144) = 0;
}

void *sub_217110B04(void *a1)
{
  *a1 = &unk_26C774C90;
  BOOL v2 = (Alembic::Abc::v12::IScalarProperty *)(a1 + 7);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 124));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 118));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 112));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 105));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 99));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 93));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 86));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 80));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 74));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 67));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 61));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 55));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 49));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 43));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 37));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 31));
  *a1 = &unk_26C774D18;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 25));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 19));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 13));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v2);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 1));
  return a1;
}

void *sub_217110C24(void *a1)
{
  *a1 = &unk_26C774D68;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));
  return a1;
}

void sub_217110C68(void *a1)
{
  *a1 = &unk_26C774D68;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));

  operator delete(a1);
}

void *sub_217110CBC(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  BOOL v2 = operator new(0x38uLL);
  *BOOL v2 = &unk_26C774D68;
  sub_216D467D8((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_217110D10(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_217110D24(uint64_t a1, void *a2)
{
  *a2 = &unk_26C774D68;
  return sub_216D467D8((uint64_t)(a2 + 1), a1 + 8);
}

void sub_217110D50(uint64_t a1)
{
}

void sub_217110D58(uint64_t a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 8));

  operator delete((void *)a1);
}

uint64_t sub_217110D94(uint64_t a1)
{
  return sub_2168087E8(a1 + 8) + 32;
}

uint64_t sub_217110DB4(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C774DC8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217110DF4()
{
  return &unk_26C774DC8;
}

void *sub_217110E00(void *a1)
{
  *a1 = &unk_26C774DE8;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));
  return a1;
}

void sub_217110E44(void *a1)
{
  *a1 = &unk_26C774DE8;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));

  operator delete(a1);
}

void *sub_217110E98(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  BOOL v2 = operator new(0x38uLL);
  *BOOL v2 = &unk_26C774DE8;
  sub_216D467D8((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_217110EEC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_217110F00(uint64_t a1, void *a2)
{
  *a2 = &unk_26C774DE8;
  return sub_216D467D8((uint64_t)(a2 + 1), a1 + 8);
}

void sub_217110F2C(uint64_t a1)
{
}

void sub_217110F34(uint64_t a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 8));

  operator delete((void *)a1);
}

void sub_217110F70(uint64_t a1@<X0>, double **a2@<X8>)
{
}

uint64_t sub_217110F78(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C774DC8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217110FB8()
{
  return &unk_26C774DC8;
}

void *sub_217110FC4(void *a1)
{
  *a1 = &unk_26C774E58;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));
  return a1;
}

void sub_217111008(void *a1)
{
  *a1 = &unk_26C774E58;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));

  operator delete(a1);
}

void *sub_21711105C(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  BOOL v2 = operator new(0x38uLL);
  *BOOL v2 = &unk_26C774E58;
  sub_216D467D8((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_2171110B0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2171110C4(uint64_t a1, void *a2)
{
  *a2 = &unk_26C774E58;
  return sub_216D467D8((uint64_t)(a2 + 1), a1 + 8);
}

void sub_2171110F0(uint64_t a1)
{
}

void sub_2171110F8(uint64_t a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 8));

  operator delete((void *)a1);
}

uint64_t sub_217111134(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  sub_217107808(a1 + 8, a3, &v28);
  if (v28)
  {
    uint64_t v4 = *(uint64_t **)(v28 + 16);
    uint64_t v5 = *(void *)(v28 + 24) - (void)v4;
    if (v5)
    {
      unint64_t v6 = v5 >> 3;
      if (v6 <= 1) {
        unint64_t v6 = 1;
      }
      unint64_t v7 = 1;
      do
      {
        uint64_t v8 = *v4++;
        v7 *= v8;
        --v6;
      }
      while (v6);
    }
    else
    {
      unint64_t v7 = 0;
    }
    unsigned int v9 = *(float **)v28;
    sub_2168F9ADC((uint64_t)v30, v7);
    sub_2168F9DFC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v30, v10, v11);
    uint64_t v12 = v31;
    uint64_t v13 = *(uint64_t **)(v28 + 16);
    uint64_t v14 = *(void *)(v28 + 24) - (void)v13;
    if (v14)
    {
      unint64_t v15 = v14 >> 3;
      if (v15 <= 1) {
        unint64_t v15 = 1;
      }
      uint64_t v16 = 1;
      do
      {
        uint64_t v17 = v16;
        uint64_t v19 = *v13++;
        uint64_t v18 = v19;
        v16 *= v19;
        --v15;
      }
      while (v15);
      if (v16)
      {
        uint64_t v20 = v17 * v18;
        uint64_t v21 = v31;
        do
        {
          float v22 = *v9++;
          *v21++ = v22;
          --v20;
        }
        while (v20);
      }
    }
    uint64_t v33 = &off_26C74EE30;
    uint64_t v23 = operator new(0x30uLL);
    long long v24 = v30[1];
    *(_OWORD *)uint64_t v23 = v30[0];
    *((_OWORD *)v23 + 1) = v24;
    *((void *)v23 + 4) = v12;
    if (v12)
    {
      uint64_t v25 = (atomic_ullong *)*((void *)v23 + 3);
      if (!v25) {
        uint64_t v25 = (atomic_ullong *)(v12 - 2);
      }
      atomic_fetch_add_explicit(v25, 1uLL, memory_order_relaxed);
    }
    atomic_store(0, (unsigned int *)v23 + 10);
    char v32 = v23;
    atomic_fetch_add_explicit((atomic_uint *volatile)v23 + 10, 1u, memory_order_relaxed);
    sub_2168F83DC((uint64_t)v30);
  }
  else
  {
    uint64_t v33 = 0;
  }
  uint64_t v26 = sub_2170FFC3C(a2, (uint64_t)&v32);
  sub_2168EE084((uint64_t)&v32);
  if (v29) {
    sub_216784EC4(v29);
  }
  return v26;
}

void sub_2171112D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_217111328(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C774DC8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217111368()
{
  return &unk_26C774DC8;
}

void *sub_217111374(void *a1)
{
  *a1 = &unk_26C774EC8;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));
  return a1;
}

void sub_2171113B8(void *a1)
{
  *a1 = &unk_26C774EC8;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));

  operator delete(a1);
}

void *sub_21711140C(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  BOOL v2 = operator new(0x38uLL);
  *BOOL v2 = &unk_26C774EC8;
  sub_216D467D8((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_217111460(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_217111474(uint64_t a1, void *a2)
{
  *a2 = &unk_26C774EC8;
  return sub_216D467D8((uint64_t)(a2 + 1), a1 + 8);
}

void sub_2171114A0(uint64_t a1)
{
}

void sub_2171114A8(uint64_t a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 8));

  operator delete((void *)a1);
}

uint64_t sub_2171114E4(uint64_t a1)
{
  return sub_2168087E8(a1 + 8) + 32;
}

uint64_t sub_217111504(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C774F28)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217111544()
{
  return &unk_26C774F28;
}

void *sub_217111550(void *a1)
{
  *a1 = &unk_26C774F50;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));
  return a1;
}

void sub_217111594(void *a1)
{
  *a1 = &unk_26C774F50;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));

  operator delete(a1);
}

void *sub_2171115E8(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  BOOL v2 = operator new(0x38uLL);
  *BOOL v2 = &unk_26C774F50;
  sub_216D467D8((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_21711163C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_217111650(uint64_t a1, void *a2)
{
  *a2 = &unk_26C774F50;
  return sub_216D467D8((uint64_t)(a2 + 1), a1 + 8);
}

void sub_21711167C(uint64_t a1)
{
}

void sub_217111684(uint64_t a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 8));

  operator delete((void *)a1);
}

void sub_2171116C0(uint64_t a1@<X0>, double **a2@<X8>)
{
}

uint64_t sub_2171116C8(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C774F28)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217111708()
{
  return &unk_26C774F28;
}

void *sub_217111714(void *a1)
{
  *a1 = &unk_26C774FC0;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));
  return a1;
}

void sub_217111758(void *a1)
{
  *a1 = &unk_26C774FC0;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));

  operator delete(a1);
}

void *sub_2171117AC(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  BOOL v2 = operator new(0x38uLL);
  *BOOL v2 = &unk_26C774FC0;
  sub_216D467D8((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_217111800(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_217111814(uint64_t a1, void *a2)
{
  *a2 = &unk_26C774FC0;
  return sub_216D467D8((uint64_t)(a2 + 1), a1 + 8);
}

void sub_217111840(uint64_t a1)
{
}

void sub_217111848(uint64_t a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 8));

  operator delete((void *)a1);
}

uint64_t sub_217111884(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v23[2] = *MEMORY[0x263EF8340];
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  sub_2167BAA94(a1 + 8, &v20, a3);
  sub_217103E78(&v20, v23);
  uint64_t v4 = sub_2168FDC2C((pxrInternal__aapl__pxrReserved__::VtValue *)v23);
  long long v5 = *(_OWORD *)(v4 + 16);
  long long v17 = *(_OWORD *)v4;
  long long v18 = v5;
  uint64_t v6 = *(void *)(v4 + 32);
  uint64_t v19 = v6;
  if (v6)
  {
    unint64_t v7 = (atomic_ullong *)(v6 - 16);
    if (*((void *)&v18 + 1)) {
      unint64_t v7 = (atomic_ullong *)*((void *)&v18 + 1);
    }
    atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomHermiteCurves::PointAndTangentArrays::PointAndTangentArrays(v14, &v17);
  v22[1] = off_26C74F110;
  uint64_t v8 = operator new(0x30uLL);
  long long v9 = v14[1];
  *(_OWORD *)uint64_t v8 = v14[0];
  *((_OWORD *)v8 + 1) = v9;
  uint64_t v10 = v15;
  *((void *)v8 + 4) = v15;
  if (v10)
  {
    char v11 = (atomic_ullong *)(v10 - 16);
    if (*((void *)v8 + 3)) {
      char v11 = (atomic_ullong *)*((void *)v8 + 3);
    }
    atomic_fetch_add_explicit(v11, 1uLL, memory_order_relaxed);
  }
  atomic_store(0, (unsigned int *)v8 + 10);
  v22[0] = v8;
  atomic_fetch_add_explicit((atomic_uint *volatile)v8 + 10, 1u, memory_order_relaxed);
  uint64_t v12 = sub_2170FFC3C(a2, (uint64_t)v22);
  sub_2168EE084((uint64_t)v22);
  sub_2168F83DC((uint64_t)&v16);
  sub_2168F83DC((uint64_t)v14);
  sub_2168F83DC((uint64_t)&v17);
  sub_2168EE084((uint64_t)v23);
  if (v21) {
    sub_216784EC4(v21);
  }
  return v12;
}

void sub_2171119D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_217111A60(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C774F28)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217111AA0()
{
  return &unk_26C774F28;
}

void *sub_217111AAC(void *a1)
{
  *a1 = &unk_26C775030;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));
  return a1;
}

void sub_217111AF0(void *a1)
{
  *a1 = &unk_26C775030;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));

  operator delete(a1);
}

void *sub_217111B44(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  BOOL v2 = operator new(0x38uLL);
  *BOOL v2 = &unk_26C775030;
  sub_216D467D8((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_217111B98(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_217111BAC(uint64_t a1, void *a2)
{
  *a2 = &unk_26C775030;
  return sub_216D467D8((uint64_t)(a2 + 1), a1 + 8);
}

void sub_217111BD8(uint64_t a1)
{
}

void sub_217111BE0(uint64_t a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 8));

  operator delete((void *)a1);
}

uint64_t sub_217111C1C(uint64_t a1)
{
  return sub_2168087E8(a1 + 8) + 32;
}

uint64_t sub_217111C3C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C775090)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217111C7C()
{
  return &unk_26C775090;
}

void *sub_217111C88(void *a1)
{
  *a1 = &unk_26C7750B8;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));
  return a1;
}

void sub_217111CCC(void *a1)
{
  *a1 = &unk_26C7750B8;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));

  operator delete(a1);
}

void *sub_217111D20(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  BOOL v2 = operator new(0x38uLL);
  *BOOL v2 = &unk_26C7750B8;
  sub_216D467D8((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_217111D74(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_217111D88(uint64_t a1, void *a2)
{
  *a2 = &unk_26C7750B8;
  return sub_216D467D8((uint64_t)(a2 + 1), a1 + 8);
}

void sub_217111DB4(uint64_t a1)
{
}

void sub_217111DBC(uint64_t a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 8));

  operator delete((void *)a1);
}

void sub_217111DF8(uint64_t a1@<X0>, double **a2@<X8>)
{
}

uint64_t sub_217111E00(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C775090)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217111E40()
{
  return &unk_26C775090;
}

void *sub_217111E4C(void *a1)
{
  *a1 = &unk_26C775128;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));
  return a1;
}

void sub_217111E90(void *a1)
{
  *a1 = &unk_26C775128;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));

  operator delete(a1);
}

void *sub_217111EE4(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  BOOL v2 = operator new(0x38uLL);
  *BOOL v2 = &unk_26C775128;
  sub_216D467D8((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_217111F38(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_217111F4C(uint64_t a1, void *a2)
{
  *a2 = &unk_26C775128;
  return sub_216D467D8((uint64_t)(a2 + 1), a1 + 8);
}

void sub_217111F78(uint64_t a1)
{
}

void sub_217111F80(uint64_t a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 8));

  operator delete((void *)a1);
}

uint64_t sub_217111FBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v23[2] = *MEMORY[0x263EF8340];
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  sub_2167BAA94(a1 + 8, &v20, a3);
  sub_217103E78(&v20, v23);
  uint64_t v4 = sub_2168FDC2C((pxrInternal__aapl__pxrReserved__::VtValue *)v23);
  long long v5 = *(_OWORD *)(v4 + 16);
  long long v17 = *(_OWORD *)v4;
  long long v18 = v5;
  uint64_t v6 = *(void *)(v4 + 32);
  uint64_t v19 = v6;
  if (v6)
  {
    unint64_t v7 = (atomic_ullong *)(v6 - 16);
    if (*((void *)&v18 + 1)) {
      unint64_t v7 = (atomic_ullong *)*((void *)&v18 + 1);
    }
    atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
  }
  pxrInternal__aapl__pxrReserved__::UsdGeomHermiteCurves::PointAndTangentArrays::PointAndTangentArrays(v14, &v17);
  v22[1] = off_26C74F110;
  uint64_t v8 = operator new(0x30uLL);
  long long v9 = v15[1];
  *(_OWORD *)uint64_t v8 = v15[0];
  *((_OWORD *)v8 + 1) = v9;
  uint64_t v10 = v16;
  *((void *)v8 + 4) = v16;
  if (v10)
  {
    char v11 = (atomic_ullong *)(v10 - 16);
    if (*((void *)v8 + 3)) {
      char v11 = (atomic_ullong *)*((void *)v8 + 3);
    }
    atomic_fetch_add_explicit(v11, 1uLL, memory_order_relaxed);
  }
  atomic_store(0, (unsigned int *)v8 + 10);
  v22[0] = v8;
  atomic_fetch_add_explicit((atomic_uint *volatile)v8 + 10, 1u, memory_order_relaxed);
  uint64_t v12 = sub_2170FFC3C(a2, (uint64_t)v22);
  sub_2168EE084((uint64_t)v22);
  sub_2168F83DC((uint64_t)v15);
  sub_2168F83DC((uint64_t)v14);
  sub_2168F83DC((uint64_t)&v17);
  sub_2168EE084((uint64_t)v23);
  if (v21) {
    sub_216784EC4(v21);
  }
  return v12;
}

void sub_217112110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_217112198(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C775090)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2171121D8()
{
  return &unk_26C775090;
}

uint64_t sub_2171121E4(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = a1 + 8;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_216778F24((unsigned char *)v4, *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 8);
    *(void *)(v4 + 16) = *(void *)(a2 + 24);
    *(_OWORD *)uint64_t v4 = v5;
  }
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  unint64_t v7 = (unsigned char *)(a1 + 56);
  if (*(char *)(a2 + 79) < 0)
  {
    sub_216778F24(v7, *(void **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(_OWORD *)unint64_t v7 = v8;
  }
  uint64_t v9 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  uint64_t v10 = (unsigned char *)(a1 + 104);
  if (*(char *)(a2 + 127) < 0)
  {
    sub_216778F24(v10, *(void **)(a2 + 104), *(void *)(a2 + 112));
  }
  else
  {
    long long v11 = *(_OWORD *)(a2 + 104);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(_OWORD *)uint64_t v10 = v11;
  }
  uint64_t v12 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  return a1;
}

void sub_217112300(_Unwind_Exception *a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v1);
  _Unwind_Resume(a1);
}

void *sub_217112324(void *a1)
{
  *a1 = &unk_26C775198;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 7));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));
  return a1;
}

void sub_21711237C(void *a1)
{
  *a1 = &unk_26C775198;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 7));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));

  operator delete(a1);
}

void *sub_2171123E4(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  BOOL v2 = operator new(0xA0uLL);
  *BOOL v2 = &unk_26C775198;
  sub_2171121E4((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_217112438(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21711244C(uint64_t a1, void *a2)
{
  *a2 = &unk_26C775198;
  return sub_2171121E4((uint64_t)(a2 + 1), a1 + 8);
}

void sub_217112478(uint64_t a1)
{
  BOOL v2 = (Alembic::Abc::v12::IArrayProperty *)(a1 + 8);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 104));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 56));

  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);
}

void sub_2171124C0(uint64_t a1)
{
  BOOL v2 = (Alembic::Abc::v12::IArrayProperty *)(a1 + 8);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 104));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 56));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);

  operator delete((void *)a1);
}

uint64_t sub_217112510(uint64_t a1)
{
  return sub_2171085DC(a1 + 8);
}

uint64_t sub_217112518(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7751F8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217112558()
{
  return &unk_26C7751F8;
}

uint64_t sub_217112564(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = a1 + 8;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_216778F24((unsigned char *)v4, *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 8);
    *(void *)(v4 + 16) = *(void *)(a2 + 24);
    *(_OWORD *)uint64_t v4 = v5;
  }
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  unint64_t v7 = (unsigned char *)(a1 + 56);
  if (*(char *)(a2 + 79) < 0)
  {
    sub_216778F24(v7, *(void **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(_OWORD *)unint64_t v7 = v8;
  }
  uint64_t v9 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  uint64_t v10 = (unsigned char *)(a1 + 104);
  if (*(char *)(a2 + 127) < 0)
  {
    sub_216778F24(v10, *(void **)(a2 + 104), *(void *)(a2 + 112));
  }
  else
  {
    long long v11 = *(_OWORD *)(a2 + 104);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(_OWORD *)uint64_t v10 = v11;
  }
  uint64_t v12 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  return a1;
}

void sub_217112680(_Unwind_Exception *a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v1);
  _Unwind_Resume(a1);
}

void *sub_2171126A4(void *a1)
{
  *a1 = &unk_26C775218;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 7));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));
  return a1;
}

void sub_2171126FC(void *a1)
{
  *a1 = &unk_26C775218;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 7));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));

  operator delete(a1);
}

void *sub_217112764(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  BOOL v2 = operator new(0xA0uLL);
  *BOOL v2 = &unk_26C775218;
  sub_2171121E4((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_2171127B8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2171127CC(uint64_t a1, void *a2)
{
  *a2 = &unk_26C775218;
  return sub_2171121E4((uint64_t)(a2 + 1), a1 + 8);
}

void sub_2171127F8(uint64_t a1)
{
  BOOL v2 = (Alembic::Abc::v12::IArrayProperty *)(a1 + 8);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 104));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 56));

  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);
}

void sub_217112840(uint64_t a1)
{
  BOOL v2 = (Alembic::Abc::v12::IArrayProperty *)(a1 + 8);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 104));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 56));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);

  operator delete((void *)a1);
}

void sub_217112890(uint64_t a1@<X0>, double **a2@<X8>)
{
  uint64_t v3 = (Alembic::Abc::v12::IArrayProperty *)(a1 + 8);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (sub_2171081B8(a1 + 8))
  {
    sub_2171089F4((uint64_t)v3, &v20);
    unint64_t v4 = sub_217108AA0(v3);
    if (sub_217108BB0(v3)) {
      unint64_t v5 = v4 != 0;
    }
    else {
      unint64_t v5 = v4;
    }
    if (v5)
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        double SampleTime = Alembic::AbcCoreAbstract::v12::TimeSampling::getSampleTime((double **)v20, i);
        double v8 = SampleTime;
        uint64_t v10 = a2[1];
        unint64_t v9 = (unint64_t)a2[2];
        if ((unint64_t)v10 >= v9)
        {
          uint64_t v12 = *a2;
          uint64_t v13 = v10 - *a2;
          unint64_t v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 61) {
            sub_21677CB10();
          }
          uint64_t v15 = v9 - (void)v12;
          if (v15 >> 2 > v14) {
            unint64_t v14 = v15 >> 2;
          }
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v16 = v14;
          }
          if (v16)
          {
            long long v17 = (char *)sub_21677CB28((uint64_t)(a2 + 2), v16);
            uint64_t v12 = *a2;
            uint64_t v10 = a2[1];
          }
          else
          {
            long long v17 = 0;
          }
          long long v18 = (double *)&v17[8 * v13];
          *long long v18 = v8;
          long long v11 = v18 + 1;
          while (v10 != v12)
          {
            uint64_t v19 = *((void *)v10-- - 1);
            *((void *)v18-- - 1) = v19;
          }
          *a2 = v18;
          a2[1] = v11;
          a2[2] = (double *)&v17[8 * v16];
          if (v12) {
            operator delete(v12);
          }
        }
        else
        {
          *uint64_t v10 = SampleTime;
          long long v11 = v10 + 1;
        }
        a2[1] = v11;
      }
    }
    if (v21) {
      sub_216784EC4(v21);
    }
  }
}

void sub_217112A04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v12 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + 8) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_217112A3C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7751F8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217112A7C()
{
  return &unk_26C7751F8;
}

void *sub_217112A88(void *a1)
{
  *a1 = &unk_26C775288;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 7));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));
  return a1;
}

void sub_217112AE0(void *a1)
{
  *a1 = &unk_26C775288;
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 13));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 7));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));

  operator delete(a1);
}

void *sub_217112B48(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  BOOL v2 = operator new(0xA0uLL);
  *BOOL v2 = &unk_26C775288;
  sub_2171121E4((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_217112B9C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_217112BB0(uint64_t a1, void *a2)
{
  *a2 = &unk_26C775288;
  return sub_2171121E4((uint64_t)(a2 + 1), a1 + 8);
}

void sub_217112BDC(uint64_t a1)
{
  BOOL v2 = (Alembic::Abc::v12::IArrayProperty *)(a1 + 8);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 104));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 56));

  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);
}

void sub_217112C24(uint64_t a1)
{
  BOOL v2 = (Alembic::Abc::v12::IArrayProperty *)(a1 + 8);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 104));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 56));
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v2);

  operator delete((void *)a1);
}

uint64_t sub_217112C74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v10[2] = *MEMORY[0x263EF8340];
  long long v8 = 0u;
  long long v9 = 0u;
  sub_217112DD4(a1 + 8, (uint64_t)&v8, a3);
  unint64_t v4 = (std::__shared_weak_count *)*((void *)&v8 + 1);
  long long v7 = v8;
  if (*((void *)&v8 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v8 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  sub_2171076F8((uint64_t *)&v7, v10);
  uint64_t v5 = sub_2170FFC3C(a2, (uint64_t)v10);
  sub_2168EE084((uint64_t)v10);
  if (v4) {
    sub_216784EC4(v4);
  }
  if (*((void *)&v9 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v9 + 1));
  }
  if (*((void *)&v8 + 1)) {
    sub_216784EC4(*((std::__shared_weak_count **)&v8 + 1));
  }
  return v5;
}

void sub_217112D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  sub_2168EE084(v15 - 40);
  if (v14) {
    sub_216784EC4(v14);
  }
  if (a14) {
    sub_216784EC4(a14);
  }
  if (a12) {
    sub_216784EC4(a12);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_217112D88(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7751F8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217112DC8()
{
  return &unk_26C7751F8;
}

void sub_217112DD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_2168087E8(a1);
  *(_DWORD *)(a2 + 32) = sub_2167B21C0(v6 + 32);
  *(unsigned char *)(a2 + 36) = *(unsigned char *)(a1 + 144);
  if (*(char *)(a1 + 79) < 0)
  {
    if (*(void *)(a1 + 64)) {
      goto LABEL_31;
    }
  }
  else if (*(unsigned char *)(a1 + 79))
  {
    goto LABEL_31;
  }
  if (*(void *)(a1 + 80))
  {
    sub_2171096B4(a1 + 48, a3, &v31);
    if (v31)
    {
      long long v7 = (uint64_t *)v31[2];
      uint64_t v8 = v31[3] - (void)v7;
      if (!v8) {
        goto LABEL_34;
      }
      unint64_t v9 = v8 >> 3;
      if (v9 <= 1) {
        unint64_t v9 = 1;
      }
      unint64_t v10 = 1;
      do
      {
        uint64_t v11 = *v7++;
        v10 *= v11;
        --v9;
      }
      while (v9);
      if (v10)
      {
        sub_217107808(a1, a3, &v29);
        if (v10 >> 62) {
          size_t v12 = -1;
        }
        else {
          size_t v12 = 4 * v10;
        }
        uint64_t v13 = operator new[](v12);
        unint64_t v14 = v13;
        uint64_t v15 = v29;
        unint64_t v16 = (uint64_t *)v29[2];
        uint64_t v17 = v29[3] - (void)v16;
        if (v17)
        {
          unint64_t v18 = v17 >> 3;
          if (v18 <= 1) {
            uint64_t v19 = 1;
          }
          else {
            uint64_t v19 = v18;
          }
          uint64_t v17 = 1;
          do
          {
            uint64_t v20 = *v16++;
            v17 *= v20;
            --v19;
          }
          while (v19);
        }
        uint64_t v21 = 0;
        uint64_t v22 = *v31;
        if (v10 <= 1) {
          uint64_t v23 = 1;
        }
        else {
          uint64_t v23 = v10;
        }
        do
        {
          unint64_t v24 = *(unsigned int *)(v22 + 4 * v21);
          if (v17 <= v24) {
            break;
          }
          v13[v21++] = *(_DWORD *)(*v15 + 4 * v24);
        }
        while (v23 != v21);
        unint64_t v26 = v10;
        sub_2167864B4(&__p, 1uLL, &v26);
        uint64_t v25 = operator new(0x28uLL);
        *uint64_t v25 = v14;
        v25[1] = 0x10000000ALL;
        v25[3] = 0;
        void v25[4] = 0;
        void v25[2] = 0;
        sub_21677EA60(v25 + 2, __p, (uint64_t)v28, (v28 - (unsigned char *)__p) >> 3);
        sub_217113034((void *)a2, (uint64_t)v25);
        if (__p)
        {
          uint64_t v28 = __p;
          operator delete(__p);
        }
        if (v30) {
          sub_216784EC4(v30);
        }
      }
      else
      {
LABEL_34:
        sub_2167BAB8C(a1, (void *)a2, a3);
      }
    }
    if (v32) {
      sub_216784EC4(v32);
    }
    return;
  }
LABEL_31:

  sub_2167BAB8C(a1, (void *)a2, a3);
}

void sub_217112FD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16)
{
  operator delete(v16);
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    sub_216784EC4(a14);
  }
  if (a16) {
    sub_216784EC4(a16);
  }
  _Unwind_Resume(a1);
}

void sub_217113034(void *a1, uint64_t a2)
{
  sub_21711307C(&v5, a2);
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  long long v4 = v5;
  *(void *)&long long v5 = *a1;
  *((void *)&v5 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3) {
    sub_216784EC4(v3);
  }
}

void *sub_21711307C(void *a1, uint64_t a2)
{
  *a1 = a2;
  long long v4 = operator new(0x20uLL);
  *long long v4 = &unk_26C7752F8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_2171130DC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  __cxa_begin_catch(a1);
  sub_21677EB68((int)&a13, v13);
  __cxa_rethrow();
}

void sub_2171130F4(_Unwind_Exception *a1)
{
}

void sub_21711310C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

void sub_217113134(uint64_t a1)
{
}

uint64_t sub_21711313C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C747588)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

uint64_t sub_217113180(uint64_t a1, int a2)
{
  int v3 = *(_DWORD *)(a1 + 24);
  if (v3 != 2)
  {
    if (!v3)
    {
      uint64_t v4 = a1 + 32;
      sub_216779094(v12, "podName");
      sub_21679F2AC(v4, (const void **)v12, __p);
      if (v15 < 0)
      {
        if (__p[1] != (void *)9)
        {
          uint64_t v8 = 0;
          goto LABEL_22;
        }
        long long v5 = (void **)__p[0];
      }
      else
      {
        if (v15 != 9)
        {
          uint64_t v8 = 0;
          goto LABEL_23;
        }
        long long v5 = __p;
      }
      unint64_t v9 = *v5;
      int v10 = *((unsigned __int8 *)v5 + 8);
      if (v9 == (void *)0x5F323374616F6C66 && v10 == 116)
      {
        uint64_t v8 = sub_2167BBF1C(v4, a2);
        if ((v15 & 0x80) == 0) {
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t v8 = 0;
        if ((v15 & 0x80) == 0) {
          goto LABEL_23;
        }
      }
LABEL_22:
      operator delete(__p[0]);
LABEL_23:
      if (v13 < 0) {
        operator delete(v12[0]);
      }
      return v8;
    }
    return 0;
  }
  if (*(_DWORD *)(a1 + 56) != 10) {
    return 0;
  }
  uint64_t v6 = a1 + 32;

  return sub_2167BBF1C(v6, a2);
}

void sub_2171132B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2171132EC(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  *(_DWORD *)a1 = 2;
  int v10 = (std::string *)(a1 + 8);
  sub_216779094((void *)(a1 + 8), "");
  *(_DWORD *)(a1 + 48) = 2;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  sub_216779094((void *)(a1 + 56), "");
  *(_DWORD *)(a1 + 96) = 2;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  sub_216779094((void *)(a1 + 104), "");
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  int v11 = *(_DWORD *)a2;
  *(_OWORD *)&v52.__r_.__value_.__l.__data_ = 0uLL;
  int v51 = &v52;
  int v57 = v11;
  sub_2167898D0(v58, (const void ***)&v51);
  v58[3] = 0;
  uint64_t v59 = 0;
  int v60 = 0;
  uint64_t v61 = 1;
  sub_2167877AC((uint64_t)&v51, v52.__r_.__value_.__l.__data_);
  sub_2167A030C(a4, (uint64_t)&v57);
  sub_2167A030C(a5, (uint64_t)&v57);
  *(_DWORD *)a1 = v57;
  uint64_t v55 = a1;
  uint64_t v56 = "ITypedGeomParam::ITypedGeomParam()";
  uint64_t v12 = *(void *)(a2 + 32);
  char v13 = *(std::__shared_weak_count **)(a2 + 40);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string v45 = v13;
  if (!v12)
  {
    sub_216778A5C((uint64_t)&v51);
    uint64_t v30 = sub_216779180(&v52.__r_.__value_.__l.__size_, (uint64_t)"NULL CompoundPropertyReader passed into ", 40);
    sub_216779180(v30, (uint64_t)"ITypedGeomParam ctor", 20);
    std::stringbuf::str();
    sub_216778E70(&__p, (long long *)v46);
    if (v47 < 0) {
      operator delete(v46[0]);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    char v32 = sub_216779038(exception, (uint64_t)&__p);
    __cxa_throw(v32, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v12 + 80))(v12, a3);
  if (!v14)
  {
    sub_216778A5C((uint64_t)&v51);
    uint64_t v33 = sub_216779180(&v52.__r_.__value_.__l.__size_, (uint64_t)"Nonexistent GeomParam: ", 23);
    int v34 = *(char *)(a3 + 23);
    if (v34 >= 0) {
      uint64_t v35 = a3;
    }
    else {
      uint64_t v35 = *(void *)a3;
    }
    if (v34 >= 0) {
      uint64_t v36 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      uint64_t v36 = *(void *)(a3 + 8);
    }
    sub_216779180(v33, v35, v36);
    std::stringbuf::str();
    sub_216778E70(&__p, (long long *)v46);
    if (v47 < 0) {
      operator delete(v46[0]);
    }
    int v37 = __cxa_allocate_exception(0x20uLL);
    int v38 = sub_216779038(v37, (uint64_t)&__p);
    __cxa_throw(v38, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  int v15 = *(_DWORD *)(v14 + 24);
  if (v15 == 2)
  {
    sub_2167BB9A0((uint64_t)&v51, (int *)a2, a3, a4, a5);
    *(_DWORD *)a1 = v51;
    std::string::operator=(v10, &v52);
    uint64_t v27 = v53;
    uint64_t v26 = v54;
    if (v54) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v54 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v28 = *(std::__shared_weak_count **)(a1 + 40);
    *(void *)(a1 + 32) = v27;
    *(void *)(a1 + 40) = v26;
    if (v28) {
      sub_216784EC4(v28);
    }
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v51);
    char v25 = 0;
  }
  else
  {
    if (v15)
    {
      sub_216778A5C((uint64_t)&v51);
      int v39 = sub_216779180(&v52.__r_.__value_.__l.__size_, (uint64_t)"Invalid ITypedGeomParam: ", 25);
      int v40 = *(char *)(a3 + 23);
      if (v40 >= 0) {
        uint64_t v41 = a3;
      }
      else {
        uint64_t v41 = *(void *)a3;
      }
      if (v40 >= 0) {
        uint64_t v42 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        uint64_t v42 = *(void *)(a3 + 8);
      }
      sub_216779180(v39, v41, v42);
      std::stringbuf::str();
      sub_216778E70(&__p, (long long *)v46);
      if (v47 < 0) {
        operator delete(v46[0]);
      }
      int v43 = __cxa_allocate_exception(0x20uLL);
      std::string v44 = sub_216779038(v43, (uint64_t)&__p);
      __cxa_throw(v44, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
    }
    LODWORD(__p) = 1;
    int v49 = v57;
    Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(&v51, a2, a3, &__p);
    *(_DWORD *)(a1 + 96) = v51;
    std::string::operator=((std::string *)(a1 + 104), &v52);
    uint64_t v17 = v53;
    uint64_t v16 = v54;
    if (v54) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v54 + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v18 = *(std::__shared_weak_count **)(a1 + 136);
    *(void *)(a1 + 128) = v17;
    *(void *)(a1 + 136) = v16;
    if (v18) {
      sub_216784EC4(v18);
    }
    Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v51);
    sub_216779094(&__p, ".indices");
    sub_2167BC7A0((uint64_t)&v51, (int *)(a1 + 96), (uint64_t)&__p, a4, a5);
    *(_DWORD *)(a1 + 48) = v51;
    std::string::operator=((std::string *)(a1 + 56), &v52);
    uint64_t v20 = v53;
    uint64_t v19 = v54;
    if (v54) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v54 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v21 = *(std::__shared_weak_count **)(a1 + 88);
    *(void *)(a1 + 80) = v20;
    *(void *)(a1 + 88) = v19;
    if (v21) {
      sub_216784EC4(v21);
    }
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v51);
    if (v50 < 0) {
      operator delete(__p);
    }
    sub_216779094(&__p, ".vals");
    sub_2167BB9A0((uint64_t)&v51, (int *)(a1 + 96), (uint64_t)&__p, a4, a5);
    *(_DWORD *)a1 = v51;
    std::string::operator=(v10, &v52);
    uint64_t v23 = v53;
    uint64_t v22 = v54;
    if (v54) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v54 + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v24 = *(std::__shared_weak_count **)(a1 + 40);
    *(void *)(a1 + 32) = v23;
    *(void *)(a1 + 40) = v22;
    if (v24) {
      sub_216784EC4(v24);
    }
    Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v51);
    if (v50 < 0) {
      operator delete(__p);
    }
    char v25 = 1;
  }
  *(unsigned char *)(a1 + 144) = v25;
  if (v45) {
    sub_216784EC4(v45);
  }
  if (v59) {
    sub_216784EC4(v59);
  }
  sub_2167877AC((uint64_t)v58, (void *)v58[1]);
  return a1;
}

void sub_21711382C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22)
{
  sub_216779148((std::exception *)&__p);
  sub_216778D38((uint64_t)&a22);
  if (a11) {
    sub_216784EC4(a11);
  }
  char v25 = __cxa_begin_catch(a1);
  if (a2 == 2) {
    sub_21679FA64(v22 - 168, (uint64_t)v25);
  }
  else {
    sub_21679F9F4(v22 - 168, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x217113634);
}

void sub_21711393C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, Alembic::Abc::v12::IArrayProperty *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20)
{
  sub_2167A03C4(v22 - 152);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v21);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(a9);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty(v20);
  _Unwind_Resume(a1);
}

uint64_t sub_2171139B0(uint64_t a1, int a2)
{
  if (a2 == 2)
  {
    sub_216779094(v36, "schema");
    sub_21679F2AC(a1, v36, &v38);
    if (((char)v41 & 0x80000000) == 0)
    {
      BOOL v11 = v41 == 17 && v38 == (void *)0x5F6D6F6547636241 && v39 == 0x765F73746E696F50 && v40 == 49;
      goto LABEL_78;
    }
    uint64_t v12 = v38;
    BOOL v11 = v39 == 17 && *v38 == 0x5F6D6F6547636241 && v38[1] == 0x765F73746E696F50 && *((unsigned char *)v38 + 16) == 49;
    goto LABEL_77;
  }
  if (a2 == 1) {
    return 1;
  }
  if (a2) {
    return 0;
  }
  sub_216779094(v36, "schemaObjTitle");
  sub_21679F2AC(a1, v36, &v38);
  sub_217113D24(&v35);
  uint64_t v3 = v41;
  if ((v41 & 0x80u) == 0) {
    size_t v4 = v41;
  }
  else {
    size_t v4 = v39;
  }
  std::string::size_type size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  char v6 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v35.__r_.__value_.__l.__size_;
  }
  if (v4 != size)
  {
LABEL_45:
    sub_216779094(v30, "schema");
    sub_21679F2AC(a1, (const void **)v30, &__s1);
    sub_217113D24(&__p);
    unsigned __int8 v15 = v34;
    if ((v34 & 0x80u) == 0) {
      size_t v16 = v34;
    }
    else {
      size_t v16 = __n;
    }
    std::string::size_type v17 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    int v18 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v17 = __p.__r_.__value_.__l.__size_;
    }
    if (v16 != v17)
    {
      BOOL v11 = 0;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_69;
      }
      goto LABEL_64;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((char)v34 < 0)
    {
      BOOL v11 = memcmp(__s1, p_p, __n) == 0;
    }
    else
    {
      if (!v34)
      {
        BOOL v11 = 1;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_69:
          if ((v15 & 0x80) != 0) {
            operator delete(__s1);
          }
          if (v31 < 0) {
            operator delete(v30[0]);
          }
          if ((*((unsigned char *)&v35.__r_.__value_.__s + 23) & 0x80) == 0) {
            goto LABEL_75;
          }
          goto LABEL_74;
        }
LABEL_64:
        operator delete(__p.__r_.__value_.__l.__data_);
        unsigned __int8 v15 = v34;
        goto LABEL_69;
      }
      uint64_t v20 = v34 - 1;
      p_s1 = &__s1;
      do
      {
        int v23 = *(unsigned __int8 *)p_s1;
        p_s1 = (void **)((char *)p_s1 + 1);
        int v22 = v23;
        int v25 = p_p->__r_.__value_.__s.__data_[0];
        p_p = (std::string *)((char *)p_p + 1);
        int v24 = v25;
        BOOL v27 = v20-- != 0;
        BOOL v11 = v22 == v24;
      }
      while (v22 == v24 && v27);
    }
    if ((v18 & 0x80000000) == 0) {
      goto LABEL_69;
    }
    goto LABEL_64;
  }
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v7 = &v35;
  }
  else {
    long long v7 = (std::string *)v35.__r_.__value_.__r.__words[0];
  }
  if ((v41 & 0x80) != 0)
  {
    if (memcmp(v38, v7, v39)) {
      goto LABEL_45;
    }
  }
  else if (v41)
  {
    uint64_t v8 = (unsigned __int8 *)&v38;
    while (*v8 == v7->__r_.__value_.__s.__data_[0])
    {
      ++v8;
      long long v7 = (std::string *)((char *)v7 + 1);
      if (!--v3) {
        goto LABEL_65;
      }
    }
    goto LABEL_45;
  }
LABEL_65:
  BOOL v11 = 1;
  if (v6 < 0) {
LABEL_74:
  }
    operator delete(v35.__r_.__value_.__l.__data_);
LABEL_75:
  if (((char)v41 & 0x80000000) == 0) {
    goto LABEL_78;
  }
  uint64_t v12 = v38;
LABEL_77:
  operator delete(v12);
LABEL_78:
  if (v37 < 0) {
    operator delete((void *)v36[0]);
  }
  return v11;
}

void sub_217113CA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (*(char *)(v29 - 33) < 0) {
    operator delete(*(void **)(v29 - 56));
  }
  if (*(char *)(v29 - 57) < 0) {
    operator delete(*(void **)(v29 - 80));
  }
  _Unwind_Resume(exception_object);
}

void sub_217113D24(std::string *a1@<X8>)
{
  sub_216779094(&v5, ":");
  BOOL v2 = std::string::insert(&v5, 0, "AbcGeom_Points_v1");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v6.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v6.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  size_t v4 = std::string::append(&v6, ".geom");
  *a1 = *v4;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
}

void sub_217113DD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void *sub_217113E04(void *a1)
{
  *a1 = &unk_26C775348;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));
  return a1;
}

void sub_217113E48(void *a1)
{
  *a1 = &unk_26C775348;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));

  operator delete(a1);
}

void *sub_217113E9C(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  BOOL v2 = operator new(0x38uLL);
  *BOOL v2 = &unk_26C775348;
  sub_216D467D8((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_217113EF0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_217113F04(uint64_t a1, void *a2)
{
  *a2 = &unk_26C775348;
  return sub_216D467D8((uint64_t)(a2 + 1), a1 + 8);
}

void sub_217113F30(uint64_t a1)
{
}

void sub_217113F38(uint64_t a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 8));

  operator delete((void *)a1);
}

uint64_t sub_217113F74(uint64_t a1)
{
  return sub_2168087E8(a1 + 8) + 32;
}

uint64_t sub_217113F94(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7753A8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217113FD4()
{
  return &unk_26C7753A8;
}

void *sub_217113FE0(void *a1)
{
  *a1 = &unk_26C7753C8;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));
  return a1;
}

void sub_217114024(void *a1)
{
  *a1 = &unk_26C7753C8;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));

  operator delete(a1);
}

void *sub_217114078(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  BOOL v2 = operator new(0x38uLL);
  *BOOL v2 = &unk_26C7753C8;
  sub_216D467D8((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_2171140CC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2171140E0(uint64_t a1, void *a2)
{
  *a2 = &unk_26C7753C8;
  return sub_216D467D8((uint64_t)(a2 + 1), a1 + 8);
}

void sub_21711410C(uint64_t a1)
{
}

void sub_217114114(uint64_t a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 8));

  operator delete((void *)a1);
}

void sub_217114150(uint64_t a1@<X0>, double **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (*(char *)(a1 + 39) < 0)
  {
    if (*(void *)(a1 + 24)) {
      return;
    }
  }
  else if (*(unsigned char *)(a1 + 39))
  {
    return;
  }
  if (*(void *)(a1 + 40))
  {
    long long v3 = (Alembic::Abc::v12::IArrayProperty *)(a1 + 8);
    Alembic::Abc::v12::IArrayProperty::getTimeSampling((Alembic::Abc::v12::IArrayProperty *)(a1 + 8), &v20);
    uint64_t NumSamples = Alembic::Abc::v12::IArrayProperty::getNumSamples(v3);
    if (Alembic::Abc::v12::IArrayProperty::isConstant(v3)) {
      uint64_t v5 = NumSamples != 0;
    }
    else {
      uint64_t v5 = NumSamples;
    }
    if (v5)
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        double SampleTime = Alembic::AbcCoreAbstract::v12::TimeSampling::getSampleTime((double **)v20, i);
        double v8 = SampleTime;
        int v10 = a2[1];
        unint64_t v9 = (unint64_t)a2[2];
        if ((unint64_t)v10 >= v9)
        {
          uint64_t v12 = *a2;
          uint64_t v13 = v10 - *a2;
          unint64_t v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 61) {
            sub_21677CB10();
          }
          uint64_t v15 = v9 - (void)v12;
          if (v15 >> 2 > v14) {
            unint64_t v14 = v15 >> 2;
          }
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v16 = v14;
          }
          if (v16)
          {
            std::string::size_type v17 = (char *)sub_21677CB28((uint64_t)(a2 + 2), v16);
            uint64_t v12 = *a2;
            int v10 = a2[1];
          }
          else
          {
            std::string::size_type v17 = 0;
          }
          int v18 = (double *)&v17[8 * v13];
          *int v18 = v8;
          BOOL v11 = v18 + 1;
          while (v10 != v12)
          {
            uint64_t v19 = *((void *)v10-- - 1);
            *((void *)v18-- - 1) = v19;
          }
          *a2 = v18;
          a2[1] = v11;
          a2[2] = (double *)&v17[8 * v16];
          if (v12) {
            operator delete(v12);
          }
        }
        else
        {
          *int v10 = SampleTime;
          BOOL v11 = v10 + 1;
        }
        a2[1] = v11;
      }
    }
    if (v21) {
      sub_216784EC4(v21);
    }
  }
}

void sub_2171142D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v12 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + 8) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_217114310(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7753A8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217114350()
{
  return &unk_26C7753A8;
}

void *sub_21711435C(void *a1)
{
  *a1 = &unk_26C775438;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));
  return a1;
}

void sub_2171143A0(void *a1)
{
  *a1 = &unk_26C775438;
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 1));

  operator delete(a1);
}

void *sub_2171143F4(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  BOOL v2 = operator new(0x38uLL);
  *BOOL v2 = &unk_26C775438;
  sub_216D467D8((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_217114448(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21711445C(uint64_t a1, void *a2)
{
  *a2 = &unk_26C775438;
  return sub_216D467D8((uint64_t)(a2 + 1), a1 + 8);
}

void sub_217114488(uint64_t a1)
{
}

void sub_217114490(uint64_t a1)
{
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 8));

  operator delete((void *)a1);
}

uint64_t sub_2171144CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  sub_217114708(a1 + 8, a3, &v28);
  if (v28)
  {
    size_t v4 = *(uint64_t **)(v28 + 16);
    uint64_t v5 = *(void *)(v28 + 24) - (void)v4;
    if (v5)
    {
      unint64_t v6 = v5 >> 3;
      if (v6 <= 1) {
        unint64_t v6 = 1;
      }
      unint64_t v7 = 1;
      do
      {
        uint64_t v8 = *v4++;
        v7 *= v8;
        --v6;
      }
      while (v6);
    }
    else
    {
      unint64_t v7 = 0;
    }
    unint64_t v9 = *(uint64_t **)v28;
    sub_2169AD8FC((uint64_t)v30, v7);
    sub_2169AE038((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v30, v10, v11);
    uint64_t v12 = v31;
    uint64_t v13 = *(uint64_t **)(v28 + 16);
    uint64_t v14 = *(void *)(v28 + 24) - (void)v13;
    if (v14)
    {
      unint64_t v15 = v14 >> 3;
      if (v15 <= 1) {
        unint64_t v15 = 1;
      }
      uint64_t v16 = 1;
      do
      {
        uint64_t v17 = v16;
        uint64_t v19 = *v13++;
        uint64_t v18 = v19;
        v16 *= v19;
        --v15;
      }
      while (v15);
      if (v16)
      {
        uint64_t v20 = v17 * v18;
        uint64_t v21 = v31;
        do
        {
          uint64_t v22 = *v9++;
          *v21++ = v22;
          --v20;
        }
        while (v20);
      }
    }
    uint64_t v33 = &off_26C755528;
    int v23 = operator new(0x30uLL);
    long long v24 = v30[1];
    *(_OWORD *)int v23 = v30[0];
    *((_OWORD *)v23 + 1) = v24;
    *((void *)v23 + 4) = v12;
    if (v12)
    {
      int v25 = (atomic_ullong *)*((void *)v23 + 3);
      if (!v25) {
        int v25 = v12 - 2;
      }
      atomic_fetch_add_explicit(v25, 1uLL, memory_order_relaxed);
    }
    atomic_store(0, (unsigned int *)v23 + 10);
    char v32 = v23;
    atomic_fetch_add_explicit((atomic_uint *volatile)v23 + 10, 1u, memory_order_relaxed);
    sub_2168F83DC((uint64_t)v30);
  }
  else
  {
    uint64_t v33 = 0;
  }
  uint64_t v26 = sub_2170FFC3C(a2, (uint64_t)&v32);
  sub_2168EE084((uint64_t)&v32);
  if (v29) {
    sub_216784EC4(v29);
  }
  return v26;
}

void sub_217114664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2171146BC(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7753A8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2171146FC()
{
  return &unk_26C7753A8;
}

void sub_217114708(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  sub_217114750(a1, a3, a2);
}

void sub_217114738(_Unwind_Exception *exception_object)
{
  long long v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    sub_216784EC4(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_217114750(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  Alembic::Abc::v12::IArrayProperty::get(a1, (uint64_t)&v7, a3);
  uint64_t v5 = v7;
  size_t v4 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v6 = (std::__shared_weak_count *)a2[1];
  *a2 = v5;
  a2[1] = v4;
  if (v6) {
    sub_216784EC4(v6);
  }
  if (v8) {
    sub_216784EC4(v8);
  }
}

void sub_2171147B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_216784EC4(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_2171147CC(uint64_t a1)
{
  *(void *)a1 = &unk_26C7754A8;
  *(void *)(a1 + 96) = &unk_26C749C48;
  BOOL v2 = (void **)(a1 + 440);
  sub_2167D05B4(&v2);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 392));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 344));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 296));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 248));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 200));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 152));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 104));
  Alembic::Abc::v12::IObject::~IObject((void **)a1);
}

void sub_217114880(uint64_t a1)
{
  *(void *)a1 = &unk_26C7754A8;
  *(void *)(a1 + 96) = &unk_26C749C48;
  BOOL v2 = (void **)(a1 + 440);
  sub_2167D05B4(&v2);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 392));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 344));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 296));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 248));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 200));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 152));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 104));
  Alembic::Abc::v12::IObject::~IObject((void **)a1);
}

uint64_t sub_217114934(uint64_t a1, int a2)
{
  if (a2 == 2)
  {
    sub_216779094(v36, "schema");
    sub_21679F2AC(a1, v36, &v38);
    if (((char)v41 & 0x80000000) == 0)
    {
      BOOL v11 = v41 == 17 && v38 == (void *)0x5F6D6F6547636241 && v39 == 0x765F6172656D6143 && v40 == 49;
      goto LABEL_78;
    }
    uint64_t v12 = v38;
    BOOL v11 = v39 == 17 && *v38 == 0x5F6D6F6547636241 && v38[1] == 0x765F6172656D6143 && *((unsigned char *)v38 + 16) == 49;
    goto LABEL_77;
  }
  if (a2 == 1) {
    return 1;
  }
  if (a2) {
    return 0;
  }
  sub_216779094(v36, "schemaObjTitle");
  sub_21679F2AC(a1, v36, &v38);
  sub_217114CA8(&v35);
  uint64_t v3 = v41;
  if ((v41 & 0x80u) == 0) {
    size_t v4 = v41;
  }
  else {
    size_t v4 = v39;
  }
  std::string::size_type size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  char v6 = HIBYTE(v35.__r_.__value_.__r.__words[2]);
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v35.__r_.__value_.__l.__size_;
  }
  if (v4 != size)
  {
LABEL_45:
    sub_216779094(v30, "schema");
    sub_21679F2AC(a1, (const void **)v30, &__s1);
    sub_217114CA8(&__p);
    unsigned __int8 v15 = v34;
    if ((v34 & 0x80u) == 0) {
      size_t v16 = v34;
    }
    else {
      size_t v16 = __n;
    }
    std::string::size_type v17 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    int v18 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v17 = __p.__r_.__value_.__l.__size_;
    }
    if (v16 != v17)
    {
      BOOL v11 = 0;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_69;
      }
      goto LABEL_64;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((char)v34 < 0)
    {
      BOOL v11 = memcmp(__s1, p_p, __n) == 0;
    }
    else
    {
      if (!v34)
      {
        BOOL v11 = 1;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_69:
          if ((v15 & 0x80) != 0) {
            operator delete(__s1);
          }
          if (v31 < 0) {
            operator delete(v30[0]);
          }
          if ((*((unsigned char *)&v35.__r_.__value_.__s + 23) & 0x80) == 0) {
            goto LABEL_75;
          }
          goto LABEL_74;
        }
LABEL_64:
        operator delete(__p.__r_.__value_.__l.__data_);
        unsigned __int8 v15 = v34;
        goto LABEL_69;
      }
      uint64_t v20 = v34 - 1;
      p_s1 = &__s1;
      do
      {
        int v23 = *(unsigned __int8 *)p_s1;
        p_s1 = (void **)((char *)p_s1 + 1);
        int v22 = v23;
        int v25 = p_p->__r_.__value_.__s.__data_[0];
        p_p = (std::string *)((char *)p_p + 1);
        int v24 = v25;
        BOOL v27 = v20-- != 0;
        BOOL v11 = v22 == v24;
      }
      while (v22 == v24 && v27);
    }
    if ((v18 & 0x80000000) == 0) {
      goto LABEL_69;
    }
    goto LABEL_64;
  }
  if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v7 = &v35;
  }
  else {
    uint64_t v7 = (std::string *)v35.__r_.__value_.__r.__words[0];
  }
  if ((v41 & 0x80) != 0)
  {
    if (memcmp(v38, v7, v39)) {
      goto LABEL_45;
    }
  }
  else if (v41)
  {
    uint64_t v8 = (unsigned __int8 *)&v38;
    while (*v8 == v7->__r_.__value_.__s.__data_[0])
    {
      ++v8;
      uint64_t v7 = (std::string *)((char *)v7 + 1);
      if (!--v3) {
        goto LABEL_65;
      }
    }
    goto LABEL_45;
  }
LABEL_65:
  BOOL v11 = 1;
  if (v6 < 0) {
LABEL_74:
  }
    operator delete(v35.__r_.__value_.__l.__data_);
LABEL_75:
  if (((char)v41 & 0x80000000) == 0) {
    goto LABEL_78;
  }
  uint64_t v12 = v38;
LABEL_77:
  operator delete(v12);
LABEL_78:
  if (v37 < 0) {
    operator delete((void *)v36[0]);
  }
  return v11;
}

void sub_217114C28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (*(char *)(v29 - 33) < 0) {
    operator delete(*(void **)(v29 - 56));
  }
  if (*(char *)(v29 - 57) < 0) {
    operator delete(*(void **)(v29 - 80));
  }
  _Unwind_Resume(exception_object);
}

void sub_217114CA8(std::string *a1@<X8>)
{
  sub_216779094(&v5, ":");
  BOOL v2 = std::string::insert(&v5, 0, "AbcGeom_Camera_v1");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v6.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v6.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  size_t v4 = std::string::append(&v6, ".geom");
  *a1 = *v4;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
}

void sub_217114D54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

Alembic::Abc::v12::IObject *sub_217114D88(Alembic::Abc::v12::IObject *a1, uint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  unint64_t v9 = (void *)sub_2167A2320((uint64_t)a1, a2);
  *unint64_t v9 = &unk_26C7754A8;
  uint64_t v10 = (uint64_t)(v9 + 12);
  sub_217115314((uint64_t)(v9 + 12));
  uint64_t v11 = sub_2167A2320((uint64_t)v48, a2);
  LODWORD(v33) = 0;
  int v34 = 0;
  LODWORD(__p) = 0;
  LODWORD(v31) = 0;
  *((_DWORD *)a1 + 2) = sub_2167A2218(v11, a4, a5, &v33, &__p);
  Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)v48);
  uint64_t v46 = (_DWORD *)((char *)a1 + 8);
  char v47 = "ISchemaObject::ISchemaObject( wrapflag)";
  uint64_t Header = Alembic::Abc::v12::IObject::getHeader(a1);
  LODWORD(v33) = 0;
  int v34 = 0;
  LODWORD(__p) = 0;
  LODWORD(v31) = 0;
  int v13 = sub_216807C40(a4, a5, &v33, &__p);
  uint64_t v14 = Header + 48;
  if ((sub_217114934(v14, v13) & 1) == 0)
  {
    sub_216778A5C((uint64_t)&v33);
    int v18 = sub_216779180(v35, (uint64_t)"Incorrect match of schema: ", 27);
    sub_216779094(&v44, "schemaObjTitle");
    sub_21679F2AC(v14, (const void **)&v44, &__p);
    if ((v32 & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if ((v32 & 0x80u) == 0) {
      uint64_t v20 = v32;
    }
    else {
      uint64_t v20 = v31;
    }
    uint64_t v21 = sub_216779180(v18, (uint64_t)p_p, v20);
    int v22 = sub_216779180(v21, (uint64_t)" to expected: ", 14);
    sub_217114CA8(&v43);
    if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v23 = &v43;
    }
    else {
      int v23 = (std::string *)v43.__r_.__value_.__r.__words[0];
    }
    if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v43.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v43.__r_.__value_.__l.__size_;
    }
    sub_216779180(v22, (uint64_t)v23, size);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v43.__r_.__value_.__l.__data_);
    }
    if ((char)v32 < 0) {
      operator delete(__p);
    }
    if (v45 < 0) {
      operator delete((void *)v44);
    }
    std::stringbuf::str();
    sub_216778E70(&__p, &v44);
    if (v45 < 0) {
      operator delete((void *)v44);
    }
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v26 = sub_216779038(exception, (uint64_t)&__p);
    __cxa_throw(v26, (struct type_info *)&unk_26C7470A0, (void (*)(void *))sub_216778D34);
  }
  Alembic::Abc::v12::IObject::getProperties(a1, (uint64_t)&__p);
  sub_216779094(&v44, ".geom");
  int v15 = *((_DWORD *)a1 + 2);
  LODWORD(v43.__r_.__value_.__l.__data_) = 1;
  LODWORD(v43.__r_.__value_.__r.__words[1]) = v15;
  v28[0] = 0;
  _OWORD v28[2] = 0;
  v27[0] = 0;
  v27[2] = 0;
  int v16 = sub_216807C40(a4, a5, v28, v27);
  v29[0] = 5;
  v29[2] = v16;
  sub_2167D20C8((uint64_t)&v33, (uint64_t)&__p, (uint64_t)&v44, &v43, v29);
  sub_2167D1B58(v10, (uint64_t)&v33);
  uint64_t v33 = &unk_26C749C48;
  int v49 = (void **)&v42;
  sub_2167D05B4(&v49);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)&v41);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v40);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v39);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v38);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v37);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)&v36);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v34);
  if (v45 < 0) {
    operator delete((void *)v44);
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&__p);
  return a1;
}

void sub_2171150C8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  sub_216779148((std::exception *)&__p);
  sub_216778D38((uint64_t)&a25);
  uint64_t v30 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    uint64_t v31 = (uint64_t)v30;
    sub_2167B5494(v26);
    Alembic::Abc::v12::IObject::reset(v25);
    sub_21679FA64(v27 - 184, v31);
  }
  else
  {
    sub_2167B5494(v26);
    Alembic::Abc::v12::IObject::reset(v25);
    sub_21679F9F4(v27 - 184, 0);
  }
  __cxa_end_catch();
  JUMPOUT(0x217114F74);
}

void sub_217115240()
{
}

void sub_21711524C()
{
}

void sub_21711525C(uint64_t a1)
{
  *(void *)a1 = &unk_26C7754A8;
  *(void *)(a1 + 96) = &unk_26C749C48;
  long long v3 = (void **)(a1 + 440);
  sub_2167D05B4(&v3);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 392));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 344));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 296));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 248));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 200));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 152));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 104));
  Alembic::Abc::v12::IObject::~IObject((void **)a1);
  operator delete(v2);
}

uint64_t sub_217115314(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 2;
  sub_216779094((void *)(a1 + 16), "");
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)a1 = &unk_26C749C48;
  *(_DWORD *)(a1 + 56) = 2;
  sub_216779094((void *)(a1 + 64), "");
  *(_DWORD *)(a1 + 104) = 2;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  sub_216779094((void *)(a1 + 112), "");
  *(_DWORD *)(a1 + 152) = 2;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  sub_216779094((void *)(a1 + 160), "");
  *(_DWORD *)(a1 + 200) = 2;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  sub_216779094((void *)(a1 + 208), "");
  *(_DWORD *)(a1 + 248) = 2;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  sub_216779094((void *)(a1 + 256), "");
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 2;
  sub_216779094((void *)(a1 + 304), "");
  *(void *)(a1 + 360) = 0;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  return a1;
}

void sub_217115444(_Unwind_Exception *a1)
{
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v6);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v5);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v4);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v3);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v2);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v1);
  _Unwind_Resume(a1);
}

void sub_2171154A0()
{
}

BOOL sub_2171154A8(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0)
  {
    if (*(void *)(a1 + 24)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a1 + 39))
  {
    return 0;
  }
  if (*(void *)(a1 + 40)) {
    return sub_2167CF5D8(a1 + 96);
  }
  return 0;
}

uint64_t sub_2171154D8(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v4 = a1 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_216778F24((unsigned char *)v4, *(void **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(void *)(v4 + 16) = *(void *)(a2 + 32);
    *(_OWORD *)uint64_t v4 = v5;
  }
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = &unk_26C749C48;
  uint64_t v7 = (unsigned char *)(a1 + 64);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  if (*(char *)(a2 + 87) < 0)
  {
    sub_216778F24(v7, *(void **)(a2 + 64), *(void *)(a2 + 72));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(_OWORD *)uint64_t v7 = v8;
  }
  uint64_t v9 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  uint64_t v10 = (unsigned char *)(a1 + 112);
  if (*(char *)(a2 + 135) < 0)
  {
    sub_216778F24(v10, *(void **)(a2 + 112), *(void *)(a2 + 120));
  }
  else
  {
    long long v11 = *(_OWORD *)(a2 + 112);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(_OWORD *)uint64_t v10 = v11;
  }
  uint64_t v12 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  int v13 = (unsigned char *)(a1 + 160);
  if (*(char *)(a2 + 183) < 0)
  {
    sub_216778F24(v13, *(void **)(a2 + 160), *(void *)(a2 + 168));
  }
  else
  {
    long long v14 = *(_OWORD *)(a2 + 160);
    *(void *)(a1 + 176) = *(void *)(a2 + 176);
    *(_OWORD *)int v13 = v14;
  }
  uint64_t v15 = *(void *)(a2 + 192);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  int v16 = (unsigned char *)(a1 + 208);
  if (*(char *)(a2 + 231) < 0)
  {
    sub_216778F24(v16, *(void **)(a2 + 208), *(void *)(a2 + 216));
  }
  else
  {
    long long v17 = *(_OWORD *)(a2 + 208);
    *(void *)(a1 + 224) = *(void *)(a2 + 224);
    *(_OWORD *)int v16 = v17;
  }
  uint64_t v18 = *(void *)(a2 + 240);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a1 + 240) = v18;
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  uint64_t v19 = (unsigned char *)(a1 + 256);
  if (*(char *)(a2 + 279) < 0)
  {
    sub_216778F24(v19, *(void **)(a2 + 256), *(void *)(a2 + 264));
  }
  else
  {
    long long v20 = *(_OWORD *)(a2 + 256);
    *(void *)(a1 + 272) = *(void *)(a2 + 272);
    *(_OWORD *)uint64_t v19 = v20;
  }
  uint64_t v21 = *(void *)(a2 + 288);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  *(void *)(a1 + 288) = v21;
  if (v21) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
  int v22 = (unsigned char *)(a1 + 304);
  if (*(char *)(a2 + 327) < 0)
  {
    sub_216778F24(v22, *(void **)(a2 + 304), *(void *)(a2 + 312));
  }
  else
  {
    long long v23 = *(_OWORD *)(a2 + 304);
    *(void *)(a1 + 320) = *(void *)(a2 + 320);
    *(_OWORD *)int v22 = v23;
  }
  uint64_t v24 = *(void *)(a2 + 336);
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  *(void *)(a1 + 336) = v24;
  if (v24) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  sub_2167D0E54((void *)(a1 + 344), *(void *)(a2 + 344), *(void *)(a2 + 352), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 352) - *(void *)(a2 + 344)) >> 3));
  return a1;
}

void sub_21711579C(_Unwind_Exception *a1)
{
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v6);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v5);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v4);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v3);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v2);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_217115810(uint64_t a1)
{
  *(void *)a1 = &unk_26C7754E0;
  BOOL v2 = (void **)(a1 + 8);
  *(void *)(a1 + 8) = &unk_26C7754A8;
  *(void *)(a1 + 104) = &unk_26C749C48;
  uint64_t v4 = (void **)(a1 + 448);
  sub_2167D05B4(&v4);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 400));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 208));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 112));
  Alembic::Abc::v12::IObject::~IObject(v2);
  return a1;
}

void sub_2171158E8(char *a1)
{
  *(void *)a1 = &unk_26C7754E0;
  BOOL v2 = (void **)(a1 + 8);
  *((void *)a1 + 1) = &unk_26C7754A8;
  *((void *)a1 + 13) = &unk_26C749C48;
  long long v3 = (void **)(a1 + 448);
  sub_2167D05B4(&v3);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 400));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 208));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 112));
  Alembic::Abc::v12::IObject::~IObject(v2);
  operator delete(a1);
}

void *sub_2171159C4(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  BOOL v2 = operator new(0x1D8uLL);
  *BOOL v2 = &unk_26C7754E0;
  sub_217115E78((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_217115A18(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_217115A2C(uint64_t a1, void *a2)
{
  *a2 = &unk_26C7754E0;
  return sub_217115E78((uint64_t)(a2 + 1), a1 + 8);
}

void sub_217115A58(uint64_t a1)
{
}

void sub_217115A60(void *a1)
{
  sub_2171147CC((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t sub_217115A9C(uint64_t a1)
{
  return Alembic::Abc::v12::IObject::getHeader((Alembic::Abc::v12::IObject *)(a1 + 8)) + 48;
}

uint64_t sub_217115ABC(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C775550)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217115AFC()
{
  return &unk_26C775550;
}

uint64_t sub_217115B08(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)sub_2167A2320(a1, a2);
  *uint64_t v4 = &unk_26C7754A8;
  sub_217115B6C((uint64_t)(v4 + 12), a2 + 96);
  return a1;
}

void sub_217115B58(_Unwind_Exception *a1)
{
  Alembic::Abc::v12::IObject::~IObject(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_217115B6C(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v4 = a1 + 16;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_216778F24((unsigned char *)v4, *(void **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(void *)(v4 + 16) = *(void *)(a2 + 32);
    *(_OWORD *)uint64_t v4 = v5;
  }
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = &unk_26C749C48;
  uint64_t v7 = (unsigned char *)(a1 + 64);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  if (*(char *)(a2 + 87) < 0)
  {
    sub_216778F24(v7, *(void **)(a2 + 64), *(void *)(a2 + 72));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(_OWORD *)uint64_t v7 = v8;
  }
  uint64_t v9 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  uint64_t v10 = (unsigned char *)(a1 + 112);
  if (*(char *)(a2 + 135) < 0)
  {
    sub_216778F24(v10, *(void **)(a2 + 112), *(void *)(a2 + 120));
  }
  else
  {
    long long v11 = *(_OWORD *)(a2 + 112);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(_OWORD *)uint64_t v10 = v11;
  }
  uint64_t v12 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  int v13 = (unsigned char *)(a1 + 160);
  if (*(char *)(a2 + 183) < 0)
  {
    sub_216778F24(v13, *(void **)(a2 + 160), *(void *)(a2 + 168));
  }
  else
  {
    long long v14 = *(_OWORD *)(a2 + 160);
    *(void *)(a1 + 176) = *(void *)(a2 + 176);
    *(_OWORD *)int v13 = v14;
  }
  uint64_t v15 = *(void *)(a2 + 192);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
  int v16 = (unsigned char *)(a1 + 208);
  if (*(char *)(a2 + 231) < 0)
  {
    sub_216778F24(v16, *(void **)(a2 + 208), *(void *)(a2 + 216));
  }
  else
  {
    long long v17 = *(_OWORD *)(a2 + 208);
    *(void *)(a1 + 224) = *(void *)(a2 + 224);
    *(_OWORD *)int v16 = v17;
  }
  uint64_t v18 = *(void *)(a2 + 240);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a1 + 240) = v18;
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
  uint64_t v19 = (unsigned char *)(a1 + 256);
  if (*(char *)(a2 + 279) < 0)
  {
    sub_216778F24(v19, *(void **)(a2 + 256), *(void *)(a2 + 264));
  }
  else
  {
    long long v20 = *(_OWORD *)(a2 + 256);
    *(void *)(a1 + 272) = *(void *)(a2 + 272);
    *(_OWORD *)uint64_t v19 = v20;
  }
  uint64_t v21 = *(void *)(a2 + 288);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  *(void *)(a1 + 288) = v21;
  if (v21) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
  int v22 = (unsigned char *)(a1 + 304);
  if (*(char *)(a2 + 327) < 0)
  {
    sub_216778F24(v22, *(void **)(a2 + 304), *(void *)(a2 + 312));
  }
  else
  {
    long long v23 = *(_OWORD *)(a2 + 304);
    *(void *)(a1 + 320) = *(void *)(a2 + 320);
    *(_OWORD *)int v22 = v23;
  }
  uint64_t v24 = *(void *)(a2 + 336);
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  *(void *)(a1 + 336) = v24;
  if (v24) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  uint64_t v25 = *(void *)(a2 + 352);
  *(void *)(a1 + 344) = *(void *)(a2 + 344);
  *(void *)(a1 + 352) = v25;
  *(void *)(a1 + 360) = *(void *)(a2 + 360);
  *(void *)(a2 + 344) = 0;
  *(void *)(a2 + 352) = 0;
  *(void *)(a2 + 360) = 0;
  return a1;
}

void sub_217115E14(_Unwind_Exception *a1)
{
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v6);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v5);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v4);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v3);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty(v2);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty(v1);
  _Unwind_Resume(a1);
}

void sub_217115E70()
{
}

uint64_t sub_217115E78(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)sub_2167A2320(a1, a2);
  *uint64_t v4 = &unk_26C7754A8;
  sub_2171154D8((uint64_t)(v4 + 12), a2 + 96);
  return a1;
}

void sub_217115EC8(_Unwind_Exception *a1)
{
  Alembic::Abc::v12::IObject::~IObject(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_217115EDC(uint64_t a1)
{
  *(void *)a1 = &unk_26C775578;
  BOOL v2 = (void **)(a1 + 8);
  *(void *)(a1 + 8) = &unk_26C7754A8;
  *(void *)(a1 + 104) = &unk_26C749C48;
  uint64_t v4 = (void **)(a1 + 448);
  sub_2167D05B4(&v4);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 400));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 208));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 112));
  Alembic::Abc::v12::IObject::~IObject(v2);
  return a1;
}

void sub_217115FB4(char *a1)
{
  *(void *)a1 = &unk_26C775578;
  BOOL v2 = (void **)(a1 + 8);
  *((void *)a1 + 1) = &unk_26C7754A8;
  *((void *)a1 + 13) = &unk_26C749C48;
  long long v3 = (void **)(a1 + 448);
  sub_2167D05B4(&v3);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 400));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 208));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 112));
  Alembic::Abc::v12::IObject::~IObject(v2);
  operator delete(a1);
}

void *sub_217116090(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  BOOL v2 = operator new(0x1D8uLL);
  *BOOL v2 = &unk_26C775578;
  sub_217115E78((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_2171160E4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2171160F8(uint64_t a1, void *a2)
{
  *a2 = &unk_26C775578;
  return sub_217115E78((uint64_t)(a2 + 1), a1 + 8);
}

void sub_217116124(uint64_t a1)
{
}

void sub_21711612C(void *a1)
{
  sub_2171147CC((uint64_t)a1 + 8);

  operator delete(a1);
}

void sub_217116168(uint64_t a1@<X0>, double **a2@<X8>)
{
}

uint64_t sub_217116170(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C775550)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2171161B0()
{
  return &unk_26C775550;
}

void sub_2171161BC(uint64_t a1@<X0>, double **a2@<X8>)
{
  uint64_t v4 = (Alembic::AbcGeom::v12::ICameraSchema *)(a1 + 96);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (sub_2167CF5D8(a1 + 96))
  {
    long long v5 = (Alembic::Abc::v12::IScalarProperty *)(a1 + 152);
    Alembic::Abc::v12::IScalarProperty::getTimeSampling(v5, &v22);
    uint64_t NumSamples = Alembic::Abc::v12::IScalarProperty::getNumSamples(v5);
    if (Alembic::AbcGeom::v12::ICameraSchema::isConstant(v4)) {
      uint64_t v7 = NumSamples != 0;
    }
    else {
      uint64_t v7 = NumSamples;
    }
    if (v7)
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        double SampleTime = Alembic::AbcCoreAbstract::v12::TimeSampling::getSampleTime((double **)v22, i);
        double v10 = SampleTime;
        uint64_t v12 = a2[1];
        unint64_t v11 = (unint64_t)a2[2];
        if ((unint64_t)v12 >= v11)
        {
          long long v14 = *a2;
          uint64_t v15 = v12 - *a2;
          unint64_t v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 61) {
            sub_21677CB10();
          }
          uint64_t v17 = v11 - (void)v14;
          if (v17 >> 2 > v16) {
            unint64_t v16 = v17 >> 2;
          }
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v18 = v16;
          }
          if (v18)
          {
            uint64_t v19 = (char *)sub_21677CB28((uint64_t)(a2 + 2), v18);
            long long v14 = *a2;
            uint64_t v12 = a2[1];
          }
          else
          {
            uint64_t v19 = 0;
          }
          long long v20 = (double *)&v19[8 * v15];
          *long long v20 = v10;
          int v13 = v20 + 1;
          while (v12 != v14)
          {
            uint64_t v21 = *((void *)v12-- - 1);
            *((void *)v20-- - 1) = v21;
          }
          *a2 = v20;
          a2[1] = v13;
          a2[2] = (double *)&v19[8 * v18];
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          *uint64_t v12 = SampleTime;
          int v13 = v12 + 1;
        }
        a2[1] = v13;
      }
    }
    if (v23) {
      sub_216784EC4(v23);
    }
  }
}

void sub_217116338(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v12 = *(void **)v10;
  if (*(void *)v10)
  {
    *(void *)(v10 + 8) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_217116370(uint64_t a1)
{
  *(void *)a1 = &unk_26C7755E8;
  BOOL v2 = (void **)(a1 + 8);
  *(void *)(a1 + 8) = &unk_26C7754A8;
  *(void *)(a1 + 104) = &unk_26C749C48;
  uint64_t v4 = (void **)(a1 + 448);
  sub_2167D05B4(&v4);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 400));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 208));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 112));
  Alembic::Abc::v12::IObject::~IObject(v2);
  return a1;
}

void sub_217116448(char *a1)
{
  *(void *)a1 = &unk_26C7755E8;
  BOOL v2 = (void **)(a1 + 8);
  *((void *)a1 + 1) = &unk_26C7754A8;
  *((void *)a1 + 13) = &unk_26C749C48;
  long long v3 = (void **)(a1 + 448);
  sub_2167D05B4(&v3);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 400));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 208));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 112));
  Alembic::Abc::v12::IObject::~IObject(v2);
  operator delete(a1);
}

void *sub_217116524(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  BOOL v2 = operator new(0x1D8uLL);
  *BOOL v2 = &unk_26C7755E8;
  sub_217115E78((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_217116578(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21711658C(uint64_t a1, void *a2)
{
  *a2 = &unk_26C7755E8;
  return sub_217115E78((uint64_t)(a2 + 1), a1 + 8);
}

void sub_2171165B8(uint64_t a1)
{
}

void sub_2171165C0(void *a1)
{
  sub_2171147CC((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t sub_2171165FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_2171166C8(a1 + 104, a3, (uint64_t)v7);
  float v4 = v7[0];
  uint64_t v5 = sub_21711675C(a2, v4);
  uint64_t v9 = (void **)&v8;
  sub_2167D05B4(&v9);
  return v5;
}

void sub_217116660(_Unwind_Exception *a1)
{
  *(void *)(v2 - 24) = v1 + 176;
  sub_2167D05B4((void ***)(v2 - 24));
  _Unwind_Resume(a1);
}

uint64_t sub_21711667C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C775550)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2171166BC()
{
  return &unk_26C775550;
}

void sub_2171166C8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(int64x2_t *)(a3 + 128) = vdupq_n_s64(0x7FEFFFFFFFFFFFFFuLL);
  *(_OWORD *)(a3 + 144) = xmmword_217409FA0;
  *(int64x2_t *)(a3 + 160) = vdupq_n_s64(0xFFEFFFFFFFFFFFFFLL);
  *(void *)(a3 + 176) = 0;
  *(void *)(a3 + 184) = 0;
  *(void *)(a3 + 192) = 0;
  sub_2167B3334(a3);
  Alembic::AbcGeom::v12::ICameraSchema::get(a1, a3, a2);
}

void sub_217116744(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2167D05B4((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21711675C(uint64_t a1, float a2)
{
  float v4 = a2;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1) {
    sub_2168BBB60();
  }
  uint64_t v5 = &v4;
  return ((uint64_t (*)(float **, uint64_t))off_26C775648[v2])(&v5, a1);
}

uint64_t sub_2171167AC()
{
  return 1;
}

uint64_t sub_2171167B4(int **a1, void *a2)
{
  uint64_t v2 = *a2;
  int v3 = **a1;
  uint64_t v4 = *(void *)(*a2 + 8);
  if (v4) {
    BOOL v5 = (*(void *)(*a2 + 8) & 3) == 3;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5) {
    (*(void (**)(void))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(*a2);
  }
  *(void *)(v2 + 8) = &unk_26C750A4B;
  *(_DWORD *)uint64_t v2 = v3;
  return 1;
}

BOOL sub_217116820(_DWORD **a1, uint64_t *a2)
{
  return sub_217116830(*a2, *a1);
}

BOOL sub_217116830(uint64_t a1, _DWORD *a2)
{
  int v4 = strcmp((const char *)(*(void *)(MEMORY[0x263F8C248] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4) {
    *(unsigned char *)(a1 + 25) = 1;
  }
  else {
    **(_DWORD **)(a1 + 8) = *a2;
  }
  return v4 == 0;
}

uint64_t sub_217116898(uint64_t a1, uint64_t a2)
{
  int v4 = (void *)sub_2167A2320(a1, a2);
  *int v4 = &unk_26C7754A8;
  sub_2171154D8((uint64_t)(v4 + 12), a2 + 96);
  return a1;
}

void sub_2171168E8(_Unwind_Exception *a1)
{
  Alembic::Abc::v12::IObject::~IObject(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2171168FC(uint64_t a1)
{
  *(void *)a1 = &unk_26C775670;
  uint64_t v2 = (void **)(a1 + 8);
  *(void *)(a1 + 8) = &unk_26C7754A8;
  *(void *)(a1 + 104) = &unk_26C749C48;
  int v4 = (void **)(a1 + 448);
  sub_2167D05B4(&v4);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 400));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 208));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 112));
  Alembic::Abc::v12::IObject::~IObject(v2);
  return a1;
}

void sub_2171169D4(char *a1)
{
  *(void *)a1 = &unk_26C775670;
  uint64_t v2 = (void **)(a1 + 8);
  *((void *)a1 + 1) = &unk_26C7754A8;
  *((void *)a1 + 13) = &unk_26C749C48;
  int v3 = (void **)(a1 + 448);
  sub_2167D05B4(&v3);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 400));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 208));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 112));
  Alembic::Abc::v12::IObject::~IObject(v2);
  operator delete(a1);
}

void *sub_217116AB0(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x1D8uLL);
  *uint64_t v2 = &unk_26C775670;
  sub_217116C58((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_217116B04(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_217116B18(uint64_t a1, void *a2)
{
  *a2 = &unk_26C775670;
  return sub_217116C58((uint64_t)(a2 + 1), a1 + 8);
}

void sub_217116B44(uint64_t a1)
{
}

void sub_217116B4C(void *a1)
{
  sub_2171147CC((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t sub_217116B88(uint64_t a1)
{
  return Alembic::Abc::v12::IObject::getHeader((Alembic::Abc::v12::IObject *)(a1 + 8)) + 48;
}

uint64_t sub_217116BA8(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7756D0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217116BE8()
{
  return &unk_26C7756D0;
}

uint64_t sub_217116BF4(uint64_t a1, uint64_t a2)
{
  int v4 = (void *)sub_2167A2320(a1, a2);
  *int v4 = &unk_26C7754A8;
  sub_217115B6C((uint64_t)(v4 + 12), a2 + 96);
  return a1;
}

void sub_217116C44(_Unwind_Exception *a1)
{
  Alembic::Abc::v12::IObject::~IObject(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_217116C58(uint64_t a1, uint64_t a2)
{
  int v4 = (void *)sub_2167A2320(a1, a2);
  *int v4 = &unk_26C7754A8;
  sub_2171154D8((uint64_t)(v4 + 12), a2 + 96);
  return a1;
}

void sub_217116CA8(_Unwind_Exception *a1)
{
  Alembic::Abc::v12::IObject::~IObject(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_217116CBC(uint64_t a1)
{
  *(void *)a1 = &unk_26C7756F8;
  uint64_t v2 = (void **)(a1 + 8);
  *(void *)(a1 + 8) = &unk_26C7754A8;
  *(void *)(a1 + 104) = &unk_26C749C48;
  int v4 = (void **)(a1 + 448);
  sub_2167D05B4(&v4);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 400));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 208));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 112));
  Alembic::Abc::v12::IObject::~IObject(v2);
  return a1;
}

void sub_217116D94(char *a1)
{
  *(void *)a1 = &unk_26C7756F8;
  uint64_t v2 = (void **)(a1 + 8);
  *((void *)a1 + 1) = &unk_26C7754A8;
  *((void *)a1 + 13) = &unk_26C749C48;
  int v3 = (void **)(a1 + 448);
  sub_2167D05B4(&v3);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 400));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 208));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 112));
  Alembic::Abc::v12::IObject::~IObject(v2);
  operator delete(a1);
}

void *sub_217116E70(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x1D8uLL);
  *uint64_t v2 = &unk_26C7756F8;
  sub_217116C58((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_217116EC4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_217116ED8(uint64_t a1, void *a2)
{
  *a2 = &unk_26C7756F8;
  return sub_217116C58((uint64_t)(a2 + 1), a1 + 8);
}

void sub_217116F04(uint64_t a1)
{
}

void sub_217116F0C(void *a1)
{
  sub_2171147CC((uint64_t)a1 + 8);

  operator delete(a1);
}

void sub_217116F48(uint64_t a1@<X0>, double **a2@<X8>)
{
}

uint64_t sub_217116F50(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7756D0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217116F90()
{
  return &unk_26C7756D0;
}

uint64_t sub_217116F9C(uint64_t a1)
{
  *(void *)a1 = &unk_26C775768;
  uint64_t v2 = (void **)(a1 + 8);
  *(void *)(a1 + 8) = &unk_26C7754A8;
  *(void *)(a1 + 104) = &unk_26C749C48;
  int v4 = (void **)(a1 + 448);
  sub_2167D05B4(&v4);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 400));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 208));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 112));
  Alembic::Abc::v12::IObject::~IObject(v2);
  return a1;
}

void sub_217117074(char *a1)
{
  *(void *)a1 = &unk_26C775768;
  uint64_t v2 = (void **)(a1 + 8);
  *((void *)a1 + 1) = &unk_26C7754A8;
  *((void *)a1 + 13) = &unk_26C749C48;
  int v3 = (void **)(a1 + 448);
  sub_2167D05B4(&v3);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 400));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 208));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 112));
  Alembic::Abc::v12::IObject::~IObject(v2);
  operator delete(a1);
}

void *sub_217117150(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x1D8uLL);
  *uint64_t v2 = &unk_26C775768;
  sub_217116C58((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_2171171A4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2171171B8(uint64_t a1, void *a2)
{
  *a2 = &unk_26C775768;
  return sub_217116C58((uint64_t)(a2 + 1), a1 + 8);
}

void sub_2171171E4(uint64_t a1)
{
}

void sub_2171171EC(void *a1)
{
  sub_2171147CC((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t sub_217117228(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_2171166C8(a1 + 104, a3, (uint64_t)v7);
  float v4 = v7[1] * v7[5] * 10.0;
  uint64_t v5 = sub_21711675C(a2, v4);
  uint64_t v9 = (void **)&v8;
  sub_2167D05B4(&v9);
  return v5;
}

void sub_21711729C(_Unwind_Exception *a1)
{
  *(void *)(v2 - 24) = v1 + 176;
  sub_2167D05B4((void ***)(v2 - 24));
  _Unwind_Resume(a1);
}

uint64_t sub_2171172B8(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7756D0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2171172F8()
{
  return &unk_26C7756D0;
}

uint64_t sub_217117304(uint64_t a1)
{
  *(void *)a1 = &unk_26C7757D8;
  uint64_t v2 = (void **)(a1 + 8);
  *(void *)(a1 + 8) = &unk_26C7754A8;
  *(void *)(a1 + 104) = &unk_26C749C48;
  float v4 = (void **)(a1 + 448);
  sub_2167D05B4(&v4);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 400));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 208));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 112));
  Alembic::Abc::v12::IObject::~IObject(v2);
  return a1;
}

void sub_2171173DC(char *a1)
{
  *(void *)a1 = &unk_26C7757D8;
  uint64_t v2 = (void **)(a1 + 8);
  *((void *)a1 + 1) = &unk_26C7754A8;
  *((void *)a1 + 13) = &unk_26C749C48;
  int v3 = (void **)(a1 + 448);
  sub_2167D05B4(&v3);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 400));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 208));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 112));
  Alembic::Abc::v12::IObject::~IObject(v2);
  operator delete(a1);
}

void *sub_2171174B8(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x1D8uLL);
  *uint64_t v2 = &unk_26C7757D8;
  sub_217117660((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_21711750C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_217117520(uint64_t a1, void *a2)
{
  *a2 = &unk_26C7757D8;
  return sub_217117660((uint64_t)(a2 + 1), a1 + 8);
}

void sub_21711754C(uint64_t a1)
{
}

void sub_217117554(void *a1)
{
  sub_2171147CC((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t sub_217117590(uint64_t a1)
{
  return Alembic::Abc::v12::IObject::getHeader((Alembic::Abc::v12::IObject *)(a1 + 8)) + 48;
}

uint64_t sub_2171175B0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C775838)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2171175F0()
{
  return &unk_26C775838;
}

uint64_t sub_2171175FC(uint64_t a1, uint64_t a2)
{
  float v4 = (void *)sub_2167A2320(a1, a2);
  *float v4 = &unk_26C7754A8;
  sub_217115B6C((uint64_t)(v4 + 12), a2 + 96);
  return a1;
}

void sub_21711764C(_Unwind_Exception *a1)
{
  Alembic::Abc::v12::IObject::~IObject(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_217117660(uint64_t a1, uint64_t a2)
{
  float v4 = (void *)sub_2167A2320(a1, a2);
  *float v4 = &unk_26C7754A8;
  sub_2171154D8((uint64_t)(v4 + 12), a2 + 96);
  return a1;
}

void sub_2171176B0(_Unwind_Exception *a1)
{
  Alembic::Abc::v12::IObject::~IObject(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2171176C4(uint64_t a1)
{
  *(void *)a1 = &unk_26C775860;
  uint64_t v2 = (void **)(a1 + 8);
  *(void *)(a1 + 8) = &unk_26C7754A8;
  *(void *)(a1 + 104) = &unk_26C749C48;
  float v4 = (void **)(a1 + 448);
  sub_2167D05B4(&v4);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 400));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 208));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 112));
  Alembic::Abc::v12::IObject::~IObject(v2);
  return a1;
}

void sub_21711779C(char *a1)
{
  *(void *)a1 = &unk_26C775860;
  uint64_t v2 = (void **)(a1 + 8);
  *((void *)a1 + 1) = &unk_26C7754A8;
  *((void *)a1 + 13) = &unk_26C749C48;
  int v3 = (void **)(a1 + 448);
  sub_2167D05B4(&v3);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 400));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 208));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 112));
  Alembic::Abc::v12::IObject::~IObject(v2);
  operator delete(a1);
}

void *sub_217117878(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x1D8uLL);
  *uint64_t v2 = &unk_26C775860;
  sub_217117660((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_2171178CC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2171178E0(uint64_t a1, void *a2)
{
  *a2 = &unk_26C775860;
  return sub_217117660((uint64_t)(a2 + 1), a1 + 8);
}

void sub_21711790C(uint64_t a1)
{
}

void sub_217117914(void *a1)
{
  sub_2171147CC((uint64_t)a1 + 8);

  operator delete(a1);
}

void sub_217117950(uint64_t a1@<X0>, double **a2@<X8>)
{
}

uint64_t sub_217117958(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C775838)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217117998()
{
  return &unk_26C775838;
}

uint64_t sub_2171179A4(uint64_t a1)
{
  *(void *)a1 = &unk_26C7758D0;
  uint64_t v2 = (void **)(a1 + 8);
  *(void *)(a1 + 8) = &unk_26C7754A8;
  *(void *)(a1 + 104) = &unk_26C749C48;
  float v4 = (void **)(a1 + 448);
  sub_2167D05B4(&v4);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 400));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 208));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 112));
  Alembic::Abc::v12::IObject::~IObject(v2);
  return a1;
}

void sub_217117A7C(char *a1)
{
  *(void *)a1 = &unk_26C7758D0;
  uint64_t v2 = (void **)(a1 + 8);
  *((void *)a1 + 1) = &unk_26C7754A8;
  *((void *)a1 + 13) = &unk_26C749C48;
  int v3 = (void **)(a1 + 448);
  sub_2167D05B4(&v3);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 400));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 208));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 112));
  Alembic::Abc::v12::IObject::~IObject(v2);
  operator delete(a1);
}

void *sub_217117B58(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x1D8uLL);
  *uint64_t v2 = &unk_26C7758D0;
  sub_217117660((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_217117BAC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_217117BC0(uint64_t a1, void *a2)
{
  *a2 = &unk_26C7758D0;
  return sub_217117660((uint64_t)(a2 + 1), a1 + 8);
}

void sub_217117BEC(uint64_t a1)
{
}

void sub_217117BF4(void *a1)
{
  sub_2171147CC((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t sub_217117C30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_2171166C8(a1 + 104, a3, (uint64_t)v7);
  float v4 = v7[3] * v7[5] * 10.0;
  uint64_t v5 = sub_21711675C(a2, v4);
  uint64_t v9 = (void **)&v8;
  sub_2167D05B4(&v9);
  return v5;
}

void sub_217117CA4(_Unwind_Exception *a1)
{
  *(void *)(v2 - 24) = v1 + 176;
  sub_2167D05B4((void ***)(v2 - 24));
  _Unwind_Resume(a1);
}

uint64_t sub_217117CC0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C775838)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217117D00()
{
  return &unk_26C775838;
}

uint64_t sub_217117D0C(uint64_t a1)
{
  *(void *)a1 = &unk_26C775940;
  uint64_t v2 = (void **)(a1 + 8);
  *(void *)(a1 + 8) = &unk_26C7754A8;
  *(void *)(a1 + 104) = &unk_26C749C48;
  float v4 = (void **)(a1 + 448);
  sub_2167D05B4(&v4);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 400));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 208));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 112));
  Alembic::Abc::v12::IObject::~IObject(v2);
  return a1;
}

void sub_217117DE4(char *a1)
{
  *(void *)a1 = &unk_26C775940;
  uint64_t v2 = (void **)(a1 + 8);
  *((void *)a1 + 1) = &unk_26C7754A8;
  *((void *)a1 + 13) = &unk_26C749C48;
  int v3 = (void **)(a1 + 448);
  sub_2167D05B4(&v3);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 400));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 208));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 112));
  Alembic::Abc::v12::IObject::~IObject(v2);
  operator delete(a1);
}

void *sub_217117EC0(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x1D8uLL);
  *uint64_t v2 = &unk_26C775940;
  sub_217118068((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_217117F14(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_217117F28(uint64_t a1, void *a2)
{
  *a2 = &unk_26C775940;
  return sub_217118068((uint64_t)(a2 + 1), a1 + 8);
}

void sub_217117F54(uint64_t a1)
{
}

void sub_217117F5C(void *a1)
{
  sub_2171147CC((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t sub_217117F98(uint64_t a1)
{
  return Alembic::Abc::v12::IObject::getHeader((Alembic::Abc::v12::IObject *)(a1 + 8)) + 48;
}

uint64_t sub_217117FB8(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7759A0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217117FF8()
{
  return &unk_26C7759A0;
}

uint64_t sub_217118004(uint64_t a1, uint64_t a2)
{
  float v4 = (void *)sub_2167A2320(a1, a2);
  *float v4 = &unk_26C7754A8;
  sub_217115B6C((uint64_t)(v4 + 12), a2 + 96);
  return a1;
}

void sub_217118054(_Unwind_Exception *a1)
{
  Alembic::Abc::v12::IObject::~IObject(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_217118068(uint64_t a1, uint64_t a2)
{
  float v4 = (void *)sub_2167A2320(a1, a2);
  *float v4 = &unk_26C7754A8;
  sub_2171154D8((uint64_t)(v4 + 12), a2 + 96);
  return a1;
}

void sub_2171180B8(_Unwind_Exception *a1)
{
  Alembic::Abc::v12::IObject::~IObject(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2171180CC(uint64_t a1)
{
  *(void *)a1 = &unk_26C7759C8;
  uint64_t v2 = (void **)(a1 + 8);
  *(void *)(a1 + 8) = &unk_26C7754A8;
  *(void *)(a1 + 104) = &unk_26C749C48;
  float v4 = (void **)(a1 + 448);
  sub_2167D05B4(&v4);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 400));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 208));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 112));
  Alembic::Abc::v12::IObject::~IObject(v2);
  return a1;
}

void sub_2171181A4(char *a1)
{
  *(void *)a1 = &unk_26C7759C8;
  uint64_t v2 = (void **)(a1 + 8);
  *((void *)a1 + 1) = &unk_26C7754A8;
  *((void *)a1 + 13) = &unk_26C749C48;
  int v3 = (void **)(a1 + 448);
  sub_2167D05B4(&v3);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 400));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 208));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 112));
  Alembic::Abc::v12::IObject::~IObject(v2);
  operator delete(a1);
}

void *sub_217118280(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x1D8uLL);
  *uint64_t v2 = &unk_26C7759C8;
  sub_217118068((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_2171182D4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2171182E8(uint64_t a1, void *a2)
{
  *a2 = &unk_26C7759C8;
  return sub_217118068((uint64_t)(a2 + 1), a1 + 8);
}

void sub_217118314(uint64_t a1)
{
}

void sub_21711831C(void *a1)
{
  sub_2171147CC((uint64_t)a1 + 8);

  operator delete(a1);
}

void sub_217118358(uint64_t a1@<X0>, double **a2@<X8>)
{
}

uint64_t sub_217118360(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7759A0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2171183A0()
{
  return &unk_26C7759A0;
}

uint64_t sub_2171183AC(uint64_t a1)
{
  *(void *)a1 = &unk_26C775A38;
  uint64_t v2 = (void **)(a1 + 8);
  *(void *)(a1 + 8) = &unk_26C7754A8;
  *(void *)(a1 + 104) = &unk_26C749C48;
  float v4 = (void **)(a1 + 448);
  sub_2167D05B4(&v4);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 400));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 208));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 112));
  Alembic::Abc::v12::IObject::~IObject(v2);
  return a1;
}

void sub_217118484(char *a1)
{
  *(void *)a1 = &unk_26C775A38;
  uint64_t v2 = (void **)(a1 + 8);
  *((void *)a1 + 1) = &unk_26C7754A8;
  *((void *)a1 + 13) = &unk_26C749C48;
  int v3 = (void **)(a1 + 448);
  sub_2167D05B4(&v3);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 400));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 208));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 112));
  Alembic::Abc::v12::IObject::~IObject(v2);
  operator delete(a1);
}

void *sub_217118560(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x1D8uLL);
  *uint64_t v2 = &unk_26C775A38;
  sub_217118068((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_2171185B4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2171185C8(uint64_t a1, void *a2)
{
  *a2 = &unk_26C775A38;
  return sub_217118068((uint64_t)(a2 + 1), a1 + 8);
}

void sub_2171185F4(uint64_t a1)
{
}

void sub_2171185FC(void *a1)
{
  sub_2171147CC((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t sub_217118638(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_2171166C8(a1 + 104, a3, (uint64_t)v7);
  float v4 = v7[2] * v7[5] * 10.0;
  uint64_t v5 = sub_21711675C(a2, v4);
  uint64_t v9 = (void **)&v8;
  sub_2167D05B4(&v9);
  return v5;
}

void sub_2171186AC(_Unwind_Exception *a1)
{
  *(void *)(v2 - 24) = v1 + 176;
  sub_2167D05B4((void ***)(v2 - 24));
  _Unwind_Resume(a1);
}

uint64_t sub_2171186C8(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7759A0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217118708()
{
  return &unk_26C7759A0;
}

uint64_t sub_217118714(uint64_t a1)
{
  *(void *)a1 = &unk_26C775AA8;
  uint64_t v2 = (void **)(a1 + 8);
  *(void *)(a1 + 8) = &unk_26C7754A8;
  *(void *)(a1 + 104) = &unk_26C749C48;
  float v4 = (void **)(a1 + 448);
  sub_2167D05B4(&v4);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 400));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 208));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 112));
  Alembic::Abc::v12::IObject::~IObject(v2);
  return a1;
}

void sub_2171187EC(char *a1)
{
  *(void *)a1 = &unk_26C775AA8;
  uint64_t v2 = (void **)(a1 + 8);
  *((void *)a1 + 1) = &unk_26C7754A8;
  *((void *)a1 + 13) = &unk_26C749C48;
  int v3 = (void **)(a1 + 448);
  sub_2167D05B4(&v3);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 400));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 208));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 112));
  Alembic::Abc::v12::IObject::~IObject(v2);
  operator delete(a1);
}

void *sub_2171188C8(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x1D8uLL);
  *uint64_t v2 = &unk_26C775AA8;
  sub_217118A70((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_21711891C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_217118930(uint64_t a1, void *a2)
{
  *a2 = &unk_26C775AA8;
  return sub_217118A70((uint64_t)(a2 + 1), a1 + 8);
}

void sub_21711895C(uint64_t a1)
{
}

void sub_217118964(void *a1)
{
  sub_2171147CC((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t sub_2171189A0(uint64_t a1)
{
  return Alembic::Abc::v12::IObject::getHeader((Alembic::Abc::v12::IObject *)(a1 + 8)) + 48;
}

uint64_t sub_2171189C0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C775B08)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217118A00()
{
  return &unk_26C775B08;
}

uint64_t sub_217118A0C(uint64_t a1, uint64_t a2)
{
  float v4 = (void *)sub_2167A2320(a1, a2);
  *float v4 = &unk_26C7754A8;
  sub_217115B6C((uint64_t)(v4 + 12), a2 + 96);
  return a1;
}

void sub_217118A5C(_Unwind_Exception *a1)
{
  Alembic::Abc::v12::IObject::~IObject(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_217118A70(uint64_t a1, uint64_t a2)
{
  float v4 = (void *)sub_2167A2320(a1, a2);
  *float v4 = &unk_26C7754A8;
  sub_2171154D8((uint64_t)(v4 + 12), a2 + 96);
  return a1;
}

void sub_217118AC0(_Unwind_Exception *a1)
{
  Alembic::Abc::v12::IObject::~IObject(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_217118AD4(uint64_t a1)
{
  *(void *)a1 = &unk_26C775B30;
  uint64_t v2 = (void **)(a1 + 8);
  *(void *)(a1 + 8) = &unk_26C7754A8;
  *(void *)(a1 + 104) = &unk_26C749C48;
  float v4 = (void **)(a1 + 448);
  sub_2167D05B4(&v4);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 400));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 208));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 112));
  Alembic::Abc::v12::IObject::~IObject(v2);
  return a1;
}

void sub_217118BAC(char *a1)
{
  *(void *)a1 = &unk_26C775B30;
  uint64_t v2 = (void **)(a1 + 8);
  *((void *)a1 + 1) = &unk_26C7754A8;
  *((void *)a1 + 13) = &unk_26C749C48;
  int v3 = (void **)(a1 + 448);
  sub_2167D05B4(&v3);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 400));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 208));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 112));
  Alembic::Abc::v12::IObject::~IObject(v2);
  operator delete(a1);
}

void *sub_217118C88(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x1D8uLL);
  *uint64_t v2 = &unk_26C775B30;
  sub_217118A70((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_217118CDC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_217118CF0(uint64_t a1, void *a2)
{
  *a2 = &unk_26C775B30;
  return sub_217118A70((uint64_t)(a2 + 1), a1 + 8);
}

void sub_217118D1C(uint64_t a1)
{
}

void sub_217118D24(void *a1)
{
  sub_2171147CC((uint64_t)a1 + 8);

  operator delete(a1);
}

void sub_217118D60(uint64_t a1@<X0>, double **a2@<X8>)
{
}

uint64_t sub_217118D68(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C775B08)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217118DA8()
{
  return &unk_26C775B08;
}

uint64_t sub_217118DB4(uint64_t a1)
{
  *(void *)a1 = &unk_26C775BA0;
  uint64_t v2 = (void **)(a1 + 8);
  *(void *)(a1 + 8) = &unk_26C7754A8;
  *(void *)(a1 + 104) = &unk_26C749C48;
  float v4 = (void **)(a1 + 448);
  sub_2167D05B4(&v4);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 400));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 208));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 112));
  Alembic::Abc::v12::IObject::~IObject(v2);
  return a1;
}

void sub_217118E8C(char *a1)
{
  *(void *)a1 = &unk_26C775BA0;
  uint64_t v2 = (void **)(a1 + 8);
  *((void *)a1 + 1) = &unk_26C7754A8;
  *((void *)a1 + 13) = &unk_26C749C48;
  int v3 = (void **)(a1 + 448);
  sub_2167D05B4(&v3);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 400));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 208));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 112));
  Alembic::Abc::v12::IObject::~IObject(v2);
  operator delete(a1);
}

void *sub_217118F68(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x1D8uLL);
  *uint64_t v2 = &unk_26C775BA0;
  sub_217118A70((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_217118FBC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_217118FD0(uint64_t a1, void *a2)
{
  *a2 = &unk_26C775BA0;
  return sub_217118A70((uint64_t)(a2 + 1), a1 + 8);
}

void sub_217118FFC(uint64_t a1)
{
}

void sub_217119004(void *a1)
{
  sub_2171147CC((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t sub_217119040(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_2171166C8(a1 + 104, a3, (uint64_t)v7);
  float v4 = v7[4] * v7[5] * 10.0;
  uint64_t v5 = sub_21711675C(a2, v4);
  uint64_t v9 = (void **)&v8;
  sub_2167D05B4(&v9);
  return v5;
}

void sub_2171190B0(_Unwind_Exception *a1)
{
  *(void *)(v2 - 24) = v1 + 176;
  sub_2167D05B4((void ***)(v2 - 24));
  _Unwind_Resume(a1);
}

uint64_t sub_2171190CC(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C775B08)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21711910C()
{
  return &unk_26C775B08;
}

uint64_t sub_217119118(uint64_t a1)
{
  *(void *)a1 = &unk_26C775C10;
  uint64_t v2 = (void **)(a1 + 8);
  *(void *)(a1 + 8) = &unk_26C7754A8;
  *(void *)(a1 + 104) = &unk_26C749C48;
  float v4 = (void **)(a1 + 448);
  sub_2167D05B4(&v4);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 400));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 208));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 112));
  Alembic::Abc::v12::IObject::~IObject(v2);
  return a1;
}

void sub_2171191F0(char *a1)
{
  *(void *)a1 = &unk_26C775C10;
  uint64_t v2 = (void **)(a1 + 8);
  *((void *)a1 + 1) = &unk_26C7754A8;
  *((void *)a1 + 13) = &unk_26C749C48;
  int v3 = (void **)(a1 + 448);
  sub_2167D05B4(&v3);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 400));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 208));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 112));
  Alembic::Abc::v12::IObject::~IObject(v2);
  operator delete(a1);
}

void *sub_2171192CC(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x1D8uLL);
  *uint64_t v2 = &unk_26C775C10;
  sub_217119474((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_217119320(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_217119334(uint64_t a1, void *a2)
{
  *a2 = &unk_26C775C10;
  return sub_217119474((uint64_t)(a2 + 1), a1 + 8);
}

void sub_217119360(uint64_t a1)
{
}

void sub_217119368(void *a1)
{
  sub_2171147CC((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t sub_2171193A4(uint64_t a1)
{
  return Alembic::Abc::v12::IObject::getHeader((Alembic::Abc::v12::IObject *)(a1 + 8)) + 48;
}

uint64_t sub_2171193C4(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C775C70)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217119404()
{
  return &unk_26C775C70;
}

uint64_t sub_217119410(uint64_t a1, uint64_t a2)
{
  float v4 = (void *)sub_2167A2320(a1, a2);
  *float v4 = &unk_26C7754A8;
  sub_217115B6C((uint64_t)(v4 + 12), a2 + 96);
  return a1;
}

void sub_217119460(_Unwind_Exception *a1)
{
  Alembic::Abc::v12::IObject::~IObject(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_217119474(uint64_t a1, uint64_t a2)
{
  float v4 = (void *)sub_2167A2320(a1, a2);
  *float v4 = &unk_26C7754A8;
  sub_2171154D8((uint64_t)(v4 + 12), a2 + 96);
  return a1;
}

void sub_2171194C4(_Unwind_Exception *a1)
{
  Alembic::Abc::v12::IObject::~IObject(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2171194D8(uint64_t a1)
{
  *(void *)a1 = &unk_26C775C98;
  uint64_t v2 = (void **)(a1 + 8);
  *(void *)(a1 + 8) = &unk_26C7754A8;
  *(void *)(a1 + 104) = &unk_26C749C48;
  float v4 = (void **)(a1 + 448);
  sub_2167D05B4(&v4);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 400));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 208));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 112));
  Alembic::Abc::v12::IObject::~IObject(v2);
  return a1;
}

void sub_2171195B0(char *a1)
{
  *(void *)a1 = &unk_26C775C98;
  uint64_t v2 = (void **)(a1 + 8);
  *((void *)a1 + 1) = &unk_26C7754A8;
  *((void *)a1 + 13) = &unk_26C749C48;
  int v3 = (void **)(a1 + 448);
  sub_2167D05B4(&v3);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 400));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 208));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 112));
  Alembic::Abc::v12::IObject::~IObject(v2);
  operator delete(a1);
}

void *sub_21711968C(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x1D8uLL);
  *uint64_t v2 = &unk_26C775C98;
  sub_217119474((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_2171196E0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2171196F4(uint64_t a1, void *a2)
{
  *a2 = &unk_26C775C98;
  return sub_217119474((uint64_t)(a2 + 1), a1 + 8);
}

void sub_217119720(uint64_t a1)
{
}

void sub_217119728(void *a1)
{
  sub_2171147CC((uint64_t)a1 + 8);

  operator delete(a1);
}

void sub_217119764(uint64_t a1@<X0>, double **a2@<X8>)
{
}

uint64_t sub_21711976C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C775C70)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2171197AC()
{
  return &unk_26C775C70;
}

uint64_t sub_2171197B8(uint64_t a1)
{
  *(void *)a1 = &unk_26C775D08;
  uint64_t v2 = (void **)(a1 + 8);
  *(void *)(a1 + 8) = &unk_26C7754A8;
  *(void *)(a1 + 104) = &unk_26C749C48;
  float v4 = (void **)(a1 + 448);
  sub_2167D05B4(&v4);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 400));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 208));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 112));
  Alembic::Abc::v12::IObject::~IObject(v2);
  return a1;
}

void sub_217119890(char *a1)
{
  *(void *)a1 = &unk_26C775D08;
  uint64_t v2 = (void **)(a1 + 8);
  *((void *)a1 + 1) = &unk_26C7754A8;
  *((void *)a1 + 13) = &unk_26C749C48;
  int v3 = (void **)(a1 + 448);
  sub_2167D05B4(&v3);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(a1 + 400));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 352));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 304));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 256));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 208));
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)(a1 + 160));
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)(a1 + 112));
  Alembic::Abc::v12::IObject::~IObject(v2);
  operator delete(a1);
}

void *sub_21711996C(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x1D8uLL);
  *uint64_t v2 = &unk_26C775D08;
  sub_217119474((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_2171199C0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2171199D4(uint64_t a1, void *a2)
{
  *a2 = &unk_26C775D08;
  return sub_217119474((uint64_t)(a2 + 1), a1 + 8);
}

void sub_217119A00(uint64_t a1)
{
}

void sub_217119A08(void *a1)
{
  sub_2171147CC((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t sub_217119A44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_2171166C8(a1 + 104, a3, (uint64_t)v8);
  float v4 = v8[14];
  float v5 = v8[15];
  uint64_t v6 = sub_217119B14(a2, v4, v5);
  uint64_t v10 = (void **)&v9;
  sub_2167D05B4(&v10);
  return v6;
}

void sub_217119AAC(_Unwind_Exception *a1)
{
  *(void *)(v2 - 24) = v1 + 176;
  sub_2167D05B4((void ***)(v2 - 24));
  _Unwind_Resume(a1);
}

uint64_t sub_217119AC8(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C775C70)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217119B08()
{
  return &unk_26C775C70;
}

uint64_t sub_217119B14(uint64_t a1, float a2, float a3)
{
  *(float *)uint64_t v6 = a2;
  *(float *)&v6[1] = a3;
  float v5 = v6;
  uint64_t v3 = *(unsigned int *)(a1 + 8);
  if (v3 == -1) {
    sub_2168BBB60();
  }
  uint64_t v7 = &v5;
  return ((uint64_t (*)(void **, uint64_t))*(&off_26C775D68 + v3))(&v7, a1);
}

uint64_t sub_217119B6C()
{
  return 1;
}

BOOL sub_217119B78(void ***a1, uint64_t *a2)
{
  return sub_217119BF4(*a1, *a2);
}

uint64_t sub_217119B84(uint64_t ***a1, void *a2)
{
  uint64_t v2 = (void *)*a2;
  uint64_t v3 = ***a1;
  uint64_t v4 = *(void *)(*a2 + 8);
  if (v4) {
    BOOL v5 = (*(void *)(*a2 + 8) & 3) == 3;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5) {
    (*(void (**)(void))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(*a2);
  }
  v2[1] = (char *)&off_26C74E368 + 3;
  *uint64_t v2 = v3;
  return 1;
}

BOOL sub_217119BF4(void **a1, uint64_t a2)
{
  int v4 = strcmp((const char *)(0x80000002174C2ED4 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)(a2 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4) {
    *(unsigned char *)(a2 + 25) = 1;
  }
  else {
    **(void **)(a2 + 8) = **a1;
  }
  return v4 == 0;
}

void sub_217119C64(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_217119C64(a1, *a2);
    sub_217119C64(a1, a2[1]);
    sub_2170F560C((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_217119CC0(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_217119D14(v2, (uint64_t)*v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void *sub_217119D14(void *result, uint64_t a2)
{
  uint64_t v3 = result;
  for (uint64_t i = result[1]; i != a2; i -= 80)
  {
    sub_217119D70((void *)(i - 32));
    BOOL result = sub_2170FBE90((void *)(i - 64));
  }
  v3[1] = a2;
  return result;
}

void *sub_217119D70(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_217119DF4(pxrInternal__aapl__pxrReserved__::TfToken *a1, uint64_t **a2, uint64_t *a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) == 0) {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  }
  std::operator+<char>();
  sub_21679F2AC((uint64_t)a1, (const void **)__p, v10);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0)
  {
    if (!v10[1])
    {
LABEL_13:
      operator delete(v10[0]);
      return;
    }
    uint64_t v9 = 0;
    uint64_t v6 = v10[0];
  }
  else
  {
    if (!v11) {
      return;
    }
    uint64_t v9 = 0;
    uint64_t v6 = (const char *)v10;
  }
  double v7 = strtod(v6, &v9);
  if (!*v9)
  {
    __p[1] = &unk_26C750B03;
    __p[0] = *(void **)&v7;
    uint64_t v12 = a3;
    uint64_t v8 = sub_2170F7770(a2, a3, (uint64_t)&unk_2174BFD90, &v12);
    sub_2168ED33C(v8 + 5, __p);
    sub_2168EE084((uint64_t)__p);
  }
  if (v11 < 0) {
    goto LABEL_13;
  }
}

void sub_217119F38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_217119F80(Alembic::Abc::v12::IObject *a1, uint64_t **a2)
{
  uint64_t NumChildren = Alembic::Abc::v12::IObject::getNumChildren(a1);
  if (NumChildren)
  {
    uint64_t v5 = NumChildren;
    for (uint64_t i = 0; i != v5; ++i)
    {
      uint64_t ChildHeader = Alembic::Abc::v12::IObject::getChildHeader(a1);
      LODWORD(v11) = 0;
      LODWORD(v12) = 0;
      sub_2167ECB6C((uint64_t)v13, (uint64_t)a1, ChildHeader, &v11);
      if (Alembic::Abc::v12::IObject::isInstanceRoot((Alembic::Abc::v12::IObject *)v13))
      {
        unint64_t v11 = v14;
        uint64_t v12 = v15;
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v9 = &v11;
        uint64_t v8 = sub_21711B360(a2, &v11, (uint64_t)&unk_2174BFD90, (_OWORD **)&v9);
        uint64_t v9 = v16;
        uint64_t v10 = v17;
        if (v17) {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        sub_21703DAA8(v8 + 6, (unint64_t *)&v9, (uint64_t)&v9);
        if (v10) {
          sub_216784EC4(v10);
        }
        if (v12) {
          sub_216784EC4(v12);
        }
      }
      else
      {
        sub_217119F80(v13, a2);
      }
      Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)v13);
    }
  }
}

void sub_21711A0A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, std::__shared_weak_count *a6, ...)
{
  va_start(va, a6);
  if (a6) {
    sub_216784EC4(a6);
  }
  Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)va);
  _Unwind_Resume(a1);
}

void sub_21711A0E4(uint64_t a1, Alembic::Abc::v12::IObject *a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, void *a4)
{
  v105[0] = 0;
  v105[1] = 0;
  uint64_t v104 = v105;
  uint64_t NumChildren = Alembic::Abc::v12::IObject::getNumChildren(a2);
  if (NumChildren)
  {
    for (uint64_t i = 0; i != NumChildren; ++i)
    {
      uint64_t ChildHeader = (const void **)Alembic::Abc::v12::IObject::getChildHeader(a2);
      sub_21680EE0C((uint64_t **)&v104, ChildHeader, (uint64_t)ChildHeader);
    }
  }
  uint64_t v88 = Alembic::Abc::v12::IObject::getNumChildren(a2);
  if (v88)
  {
    uint64_t v11 = 0;
    uint64_t v12 = a1 + 128;
    int v89 = (uint64_t **)(a1 + 152);
    uint64_t v90 = a1 + 136;
    uint64_t v87 = (const void **)(a1 + 112);
    uint64_t v13 = a1 + 120;
    int v84 = a3;
    uint64_t v83 = (_DWORD *)((char *)a3 + 4);
    long long v85 = (int64x2_t *)(a4 + 1);
    uint64_t v86 = a1;
    do
    {
      uint64_t v14 = Alembic::Abc::v12::IObject::getChildHeader(a2);
      *(_DWORD *)int v106 = 0;
      *(_DWORD *)&v106[8] = 0;
      sub_2167ECB6C((uint64_t)&v94, (uint64_t)a2, v14, v106);
      uint64_t Name = Alembic::Abc::v12::IObject::getName((Alembic::Abc::v12::IObject *)&v94);
      sub_2170FB8C4(Name, " _", (uint64_t)&v104, (uint64_t)&v91);
      sub_21680EE0C((uint64_t **)&v104, (const void **)&v91, (uint64_t)&v91);
      pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v106);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(a3, (const pxrInternal__aapl__pxrReserved__::TfToken *)v106, &v135);
      if ((v106[0] & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v106 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      uint64_t Header = Alembic::Abc::v12::IObject::getHeader((Alembic::Abc::v12::IObject *)&v94);
      uint64_t v17 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v17) {
        uint64_t v17 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      if ((*((void *)v17 + 56) & 0xFFFFFFFFFFFFFFF8) == 0) {
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v17);
      }
      std::operator+<char>();
      sub_21679F2AC(Header + 48, (const void **)&v140, v106);
      if (SHIBYTE(v141) < 0) {
        operator delete((void *)v140);
      }
      uint64_t v18 = v106[23];
      if (v106[23] < 0) {
        uint64_t v18 = *(void *)&v106[8];
      }
      if (v18)
      {
        long long __dst = *(_OWORD *)v106;
        uint64_t v134 = *(void *)&v106[16];
        goto LABEL_31;
      }
      uint64_t v19 = Alembic::Abc::v12::IObject::getHeader((Alembic::Abc::v12::IObject *)&v94);
      sub_216779094(__p, "schema");
      sub_21679F2AC(v19 + 48, (const void **)__p, &v140);
      if (SHIBYTE(v130) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v141) < 0)
      {
        if (!*((void *)&v140 + 1))
        {
LABEL_25:
          uint64_t v20 = Alembic::Abc::v12::IObject::getHeader((Alembic::Abc::v12::IObject *)&v94);
          sub_216779094(__p, "schemaBaseType");
          sub_21679F2AC(v20 + 48, (const void **)__p, &__dst);
          if (SHIBYTE(v130) < 0) {
            operator delete(__p[0]);
          }
          goto LABEL_27;
        }
        sub_216778F24(&__dst, (void *)v140, *((unint64_t *)&v140 + 1));
      }
      else
      {
        if (!HIBYTE(v141)) {
          goto LABEL_25;
        }
        long long __dst = v140;
        uint64_t v134 = v141;
      }
LABEL_27:
      if (SHIBYTE(v141) < 0) {
        operator delete((void *)v140);
      }
      if ((v106[23] & 0x80000000) != 0) {
        operator delete(*(void **)v106);
      }
LABEL_31:
      Fulluint64_t Name = (const void **)Alembic::Abc::v12::IObject::getFullName((Alembic::Abc::v12::IObject *)&v94);
      if (v90 == sub_21678C2D8(v12, FullName))
      {
        uint64_t v36 = (unsigned char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ABC_XFORM_PRIM_COLLAPSE);
        if (!v36) {
          pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>();
        }
        if (!*v36) {
          goto LABEL_125;
        }
        Alembic::Abc::v12::IObject::getParent((const std::string *)&v94, (uint64_t)v106);
        uint64_t v37 = Alembic::Abc::v12::IObject::getHeader((Alembic::Abc::v12::IObject *)v106);
        if (sub_2170FCAF4(v37 + 48, 0))
        {
          Alembic::Abc::v12::IObject::getProperties((Alembic::Abc::v12::IObject *)v106, (uint64_t)&v140);
          sub_216779094(&v125, ".xform");
          LODWORD(v121) = 1;
          LODWORD(v122.__r_.__value_.__l.__data_) = 0;
          Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(__p, &v140, &v125, &v121);
          if (v126.__r_.__value_.__s.__data_[15] < 0) {
            operator delete(v125);
          }
          Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v140);
          if ((v131 & 0x80000000) == 0)
          {
            if (!v131) {
              goto LABEL_84;
            }
            goto LABEL_123;
          }
          if (v130) {
            goto LABEL_123;
          }
LABEL_84:
          if (v132)
          {
            long long v44 = (const void **)Alembic::Abc::v12::IObject::getFullName((Alembic::Abc::v12::IObject *)v106);
            if (v90 == sub_21678C2D8(v12, v44)
              && (unint64_t)Alembic::Abc::v12::IObject::getNumChildren((Alembic::Abc::v12::IObject *)v106) <= 1)
            {
              LODWORD(v125) = 2;
              sub_216779094(&v126, "");
              uint64_t v127 = 0;
              BOOL v128 = 0;
              uint64_t v45 = Alembic::Abc::v12::IObject::getHeader((Alembic::Abc::v12::IObject *)&v94);
              if (sub_21711B500(v45 + 48, 0))
              {
                Alembic::Abc::v12::IObject::getProperties((Alembic::Abc::v12::IObject *)&v94, (uint64_t)&v140);
                sub_216779094(v138, ".geom");
                int v136 = 1;
                int v137 = 0;
                Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(&v121, &v140, v138, &v136);
                if (v139 < 0) {
                  operator delete(v138[0]);
                }
                goto LABEL_94;
              }
              uint64_t v46 = Alembic::Abc::v12::IObject::getHeader((Alembic::Abc::v12::IObject *)&v94);
              if (sub_217114934(v46 + 48, 2))
              {
                Alembic::Abc::v12::IObject::getProperties((Alembic::Abc::v12::IObject *)&v94, (uint64_t)&v140);
                sub_216779094(v138, ".geom");
                int v136 = 1;
                int v137 = 0;
                Alembic::Abc::v12::ICompoundProperty::ICompoundProperty(&v121, &v140, v138, &v136);
                if (v139 < 0) {
                  operator delete(v138[0]);
                }
LABEL_94:
                Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v140);
                LODWORD(v125) = v121;
                std::string::operator=(&v126, &v122);
                uint64_t v47 = v123;
                int v48 = v124;
                if (v124) {
                  atomic_fetch_add_explicit(&v124->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                int v49 = v128;
                uint64_t v127 = v47;
                BOOL v128 = v48;
                if (v49) {
                  sub_216784EC4(v49);
                }
                Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v121);
              }
              if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
              {
                if (!v126.__r_.__value_.__l.__size_)
                {
LABEL_103:
                  if (v127)
                  {
                    sub_216779094(&v140, ".arbGeomParams");
                    if (Alembic::Abc::v12::ICompoundProperty::getPropertyHeader((uint64_t)&v125))
                    {
                      sub_216779094(&v121, ".arbGeomParams");
                      BOOL v50 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader((uint64_t)__p) != 0;
                      if (v122.__r_.__value_.__s.__data_[15] < 0) {
                        operator delete(v121);
                      }
                    }
                    else
                    {
                      BOOL v50 = 0;
                    }
                    if (SHIBYTE(v141) < 0) {
                      operator delete((void *)v140);
                    }
                    if (!v50)
                    {
                      sub_216779094(&v140, ".userProperties");
                      if (Alembic::Abc::v12::ICompoundProperty::getPropertyHeader((uint64_t)&v125))
                      {
                        sub_216779094(&v121, ".userProperties");
                        BOOL v51 = Alembic::Abc::v12::ICompoundProperty::getPropertyHeader((uint64_t)__p) != 0;
                        if (v122.__r_.__value_.__s.__data_[15] < 0) {
                          operator delete(v121);
                        }
                      }
                      else
                      {
                        BOOL v51 = 0;
                      }
                      if (SHIBYTE(v141) < 0) {
                        operator delete((void *)v140);
                      }
                      if (!v51)
                      {
                        sub_2169C487C((int *)&v135, a3);
                        sub_2169C48D4((int *)&v135 + 1, v83);
                        if ((char)v93 < 0)
                        {
                          *(unsigned char *)uint64_t v91 = 0;
                          uint64_t v92 = 0;
                        }
                        else
                        {
                          LOBYTE(v91) = 0;
                          unsigned __int8 v93 = 0;
                        }
                      }
                    }
                  }
                }
              }
              else if (!*((unsigned char *)&v126.__r_.__value_.__s + 23))
              {
                goto LABEL_103;
              }
              Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&v125);
            }
          }
LABEL_123:
          Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)__p);
        }
        Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)v106);
LABEL_125:
        int v22 = 0;
        int v38 = 1;
        goto LABEL_126;
      }
      int v22 = sub_2170F5958(v89, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v135);
      long long v23 = (const void **)Alembic::Abc::v12::IObject::getFullName((Alembic::Abc::v12::IObject *)&v94);
      uint64_t v24 = sub_21678C2D8(v12, v23);
      if (v90 != v24)
      {
        uint64_t v25 = v87;
        uint64_t v26 = (char *)*v87;
        if (!*v87) {
          goto LABEL_40;
        }
        uint64_t v27 = (const void **)(v24 + 56);
        uint64_t v28 = v87;
        do
        {
          BOOL v29 = sub_21677B108(v13, (const void **)v26 + 4, v27);
          uint64_t v30 = (void **)(v26 + 8);
          if (!v29)
          {
            uint64_t v30 = (void **)v26;
            uint64_t v28 = (const void **)v26;
          }
          uint64_t v26 = (char *)*v30;
        }
        while (*v30);
        uint64_t v25 = v87;
        if (v28 == v87 || (v31 = sub_21677B108(v13, v27, v28 + 4), uint64_t v25 = v87, v31)) {
LABEL_40:
        }
          uint64_t v28 = v25;
        sub_2169C487C((int *)v22 + 44, (_DWORD *)v28 + 14);
        sub_2169C48D4((int *)v22 + 45, (_DWORD *)v28 + 15);
        *((unsigned char *)v22 + 209) = *((unsigned char *)v28 + 64);
        a1 = v86;
      }
      if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v22 + 44))
      {
        if (Alembic::Abc::v12::IObject::isInstanceRoot((Alembic::Abc::v12::IObject *)&v94))
        {
          *(_DWORD *)&v106[8] = v95;
          if (SHIBYTE(v97) < 0)
          {
            sub_216778F24(&v106[16], (void *)v96, *((unint64_t *)&v96 + 1));
          }
          else
          {
            *(_OWORD *)&v106[16] = v96;
            long long v107 = v97;
          }
          *(void *)int v106 = &unk_26C749578;
          uint64_t v108 = v98;
          uint64_t v109 = v99;
          if (v99) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v99 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v110 = v100;
          uint64_t v111 = v101;
          if (v101) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v101 + 8), 1uLL, memory_order_relaxed);
          }
          if (SHIBYTE(v103) < 0)
          {
            sub_216778F24(&v112, (void *)v102, *((unint64_t *)&v102 + 1));
          }
          else
          {
            long long v112 = v102;
            uint64_t v113 = v103;
          }
          Alembic::Abc::v12::IObject::instanceSourcePath((Alembic::Abc::v12::IObject *)v106, &v140);
          Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)v106);
        }
        else
        {
          uint64_t v39 = Alembic::Abc::v12::IObject::getFullName((Alembic::Abc::v12::IObject *)&v94);
          if (*(char *)(v39 + 23) < 0)
          {
            sub_216778F24(&v140, *(void **)v39, *(void *)(v39 + 8));
          }
          else
          {
            long long v40 = *(_OWORD *)v39;
            uint64_t v141 = *(void *)(v39 + 16);
            long long v140 = v40;
          }
        }
        *(void *)int v106 = "usdAbc/alembicReader.cpp";
        *(void *)&v106[8] = "_ReadPrim";
        *(void *)&v106[16] = 3763;
        *(void *)&v106[24] = "std::string pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ReadPrim(_ReaderCon"
                               "text &, const IObject &, const SdfPath &, std::set<std::string> *)";
        LOBYTE(v107) = 0;
        uint64_t v41 = Alembic::Abc::v12::IObject::getFullName((Alembic::Abc::v12::IObject *)&v94);
        if (*(char *)(v41 + 23) >= 0) {
          uint64_t v42 = (const char *)v41;
        }
        else {
          uint64_t v42 = *(const char **)v41;
        }
        std::string v43 = (const char *)&v140;
        if (v141 < 0) {
          std::string v43 = (const char *)v140;
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v106, 1, (pxrInternal__aapl__pxrReserved__ *)"Instance %s has no prototype at %s.", v42, v43);
        if (SHIBYTE(v141) < 0) {
          operator delete((void *)v140);
        }
        goto LABEL_125;
      }
      sub_2169C487C((int *)&v135, (_DWORD *)v22 + 44);
      sub_2169C48D4((int *)&v135 + 1, (_DWORD *)v22 + 45);
      if (*((unsigned char *)v22 + 209))
      {
        uint64_t v32 = Alembic::Abc::v12::IObject::getHeader((Alembic::Abc::v12::IObject *)&v94);
        sub_21711B79C((pxrInternal__aapl__pxrReserved__::TfToken *)(v32 + 48), (uint64_t)v22);
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v106);
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(a3, (const pxrInternal__aapl__pxrReserved__::TfToken *)v106, __p);
        if ((v106[0] & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)v106 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        sub_21710D3C4((uint64_t)v106, a1, (uint64_t)&v94, __p);
        uint64_t v33 = sub_21711BA24(*(void *)(a1 + 96), (const void **)&__dst);
        uint64_t v34 = *v33;
        uint64_t v35 = v33[1];
        while (v34 != v35)
        {
          sub_21711BB1C(v34, (uint64_t)v106);
          v34 += 32;
        }
        if (*((unsigned char *)v22 + 88))
        {
          *(void *)&long long v140 = v22 + 8;
          sub_216889A04((void ***)&v140);
          *((unsigned char *)v22 + 88) = 0;
        }
        sub_21678A498((uint64_t)&v119, v120);
        *(void *)&long long v140 = v118;
        sub_216782F20((void ***)&v140);
        *(void *)&long long v140 = v117;
        sub_216782F20((void ***)&v140);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v116);
        sub_21697C414(&v115);
        Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v114);
        Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&v106[8]);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
        sub_21697C414(__p);
      }
      int v38 = 0;
LABEL_126:
      std::string v52 = sub_2170F5958(v89, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v135);
      if (*v52) {
        int v53 = v38;
      }
      else {
        int v53 = 1;
      }
      if (v53 == 1)
      {
        uint64_t v54 = Alembic::Abc::v12::IObject::getHeader((Alembic::Abc::v12::IObject *)&v94);
        sub_21711B79C((pxrInternal__aapl__pxrReserved__::TfToken *)(v54 + 48), (uint64_t)v52);
        uint64_t v56 = (void *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v55);
        if (v135 != *v56)
        {
          sub_21710D3C4((uint64_t)v106, a1, (uint64_t)&v94, &v135);
          int v57 = sub_21711BA24(*(void *)(a1 + 96), (const void **)&__dst);
          uint64_t v59 = *v57;
          uint64_t v58 = v57[1];
          while (v59 != v58)
          {
            sub_21711BB1C(v59, (uint64_t)v106);
            v59 += 32;
          }
          sub_21678A498((uint64_t)&v119, v120);
          *(void *)&long long v140 = v118;
          sub_216782F20((void ***)&v140);
          *(void *)&long long v140 = v117;
          sub_216782F20((void ***)&v140);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v116);
          a3 = v84;
          sub_21697C414(&v115);
          Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)v114);
          Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&v106[8]);
          a1 = v86;
        }
        sub_21711A0E4(a1, &v94, &v135, v52);
        if (v38) {
          goto LABEL_146;
        }
        if (*((unsigned char *)v22 + 209))
        {
          uint64_t v60 = v52[4];
          for (uint64_t j = v52[5]; j != v60; j -= 8)
          {
            uint64_t v63 = *(void *)(j - 8);
            uint64_t v62 = v63;
            if ((v63 & 7) != 0) {
              atomic_fetch_add_explicit((atomic_uint *volatile)(v62 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
            }
          }
          v52[5] = v60;
          if (*((unsigned char *)v52 + 120))
          {
            *(void *)int v106 = v52 + 12;
            sub_216889A04((void ***)v106);
            *((unsigned char *)v52 + 120) = 0;
          }
          sub_216D61968((uint64_t)(v52 + 16), (void *)v52[17]);
          v52[16] = (uint64_t)(v52 + 17);
          v52[17] = 0;
          uint64_t v64 = (void *)v52[20];
          v52[18] = 0;
          sub_2170F5AB4((uint64_t)(v52 + 19), v64);
          v52[19] = (uint64_t)(v52 + 20);
          v52[20] = 0;
          v52[21] = 0;
          a3 = v84;
        }
        *((_DWORD *)v52 + 14) = 1;
      }
      sub_2168D2318(v22, v52);
      *((_DWORD *)v22 + 14) = 0;
LABEL_146:
      if (SHIBYTE(v134) < 0) {
        operator delete((void *)__dst);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v135 + 1);
      sub_21697C414(&v135);
      uint64_t v65 = v93;
      unsigned __int8 v66 = v93;
      if ((v93 & 0x80u) != 0) {
        uint64_t v65 = v92;
      }
      if (v65)
      {
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v140);
        uint64_t v68 = (void *)a4[2];
        unint64_t v67 = a4[3];
        if ((unint64_t)v68 >= v67)
        {
          uint64_t v71 = ((uint64_t)v68 - v85->i64[0]) >> 3;
          if ((unint64_t)(v71 + 1) >> 61) {
            sub_21677CB10();
          }
          uint64_t v72 = v67 - v85->i64[0];
          uint64_t v73 = v72 >> 2;
          if (v72 >> 2 <= (unint64_t)(v71 + 1)) {
            uint64_t v73 = v71 + 1;
          }
          if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v74 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v74 = v73;
          }
          long long v107 = a4 + 3;
          if (v74) {
            uint64_t v75 = (char *)sub_21677CB28((uint64_t)(a4 + 3), v74);
          }
          else {
            uint64_t v75 = 0;
          }
          int v76 = &v75[8 * v71];
          char v77 = &v75[8 * v74];
          *(void *)&v106[24] = v77;
          *(void *)int v76 = v140;
          unint64_t v70 = v76 + 8;
          *(void *)&long long v140 = 0;
          *(void *)&v106[16] = v76 + 8;
          int v79 = (void *)a4[1];
          uint64_t v78 = (void *)a4[2];
          if (v78 == v79)
          {
            int64x2_t v81 = vdupq_n_s64((unint64_t)v78);
          }
          else
          {
            do
            {
              uint64_t v80 = *--v78;
              *((void *)v76 - 1) = v80;
              v76 -= 8;
              *uint64_t v78 = 0;
            }
            while (v78 != v79);
            int64x2_t v81 = *v85;
            unint64_t v70 = *(void **)&v106[16];
            char v77 = *(char **)&v106[24];
          }
          a4[1] = v76;
          a4[2] = v70;
          *(int64x2_t *)&v106[8] = v81;
          uint64_t v82 = a4[3];
          a4[3] = v77;
          *(void *)&v106[24] = v82;
          *(void *)int v106 = v81.i64[0];
          sub_2168BE9D8((uint64_t)v106);
          uint64_t v69 = v140;
        }
        else
        {
          uint64_t v69 = 0;
          *uint64_t v68 = v140;
          unint64_t v70 = v68 + 1;
          *(void *)&long long v140 = 0;
        }
        a4[2] = v70;
        if ((v69 & 7) != 0) {
          atomic_fetch_add_explicit((atomic_uint *volatile)(v69 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
        }
        unsigned __int8 v66 = v93;
      }
      if ((v66 & 0x80) != 0) {
        operator delete(v91);
      }
      Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&v94);
      ++v11;
    }
    while (v11 != v88);
  }
  sub_21678A498((uint64_t)&v104, v105[0]);
}

void sub_21711AEC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  if (SLOBYTE(STACK[0x267]) < 0) {
    operator delete((void *)STACK[0x250]);
  }
  if (*(char *)(v57 - 121) < 0) {
    operator delete(*(void **)(v57 - 144));
  }
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&STACK[0x280]);
  Alembic::Abc::v12::ICompoundProperty::~ICompoundProperty((Alembic::Abc::v12::ICompoundProperty *)&STACK[0x2B0]);
  Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&a57);
  if (*(char *)(v57 - 201) < 0) {
    operator delete(*(void **)(v57 - 224));
  }
  sub_21697B754((_DWORD *)(v57 - 192));
  if (a41 < 0) {
    operator delete(a36);
  }
  Alembic::Abc::v12::IObject::~IObject((Alembic::Abc::v12::IObject *)&a42);
  sub_21678A498((uint64_t)&a54, (char *)a55);
  _Unwind_Resume(a1);
}

void sub_21711B1A0(pxrInternal__aapl__pxrReserved__::TfToken *a1, uint64_t **a2, uint64_t *a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if ((*a3 & 0xFFFFFFFFFFFFFFF8) == 0) {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  }
  std::operator+<char>();
  sub_21679F2AC((uint64_t)a1, (const void **)__p, v11);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v6 = v12;
  unsigned __int8 v7 = v12;
  if ((v12 & 0x80u) != 0) {
    unint64_t v6 = (unint64_t)v11[1];
  }
  if (v6)
  {
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v10);
    __p[0] = (void *)v10;
    __p[1] = (char *)&off_26C750C70 + 1;
    if ((v10 & 7) != 0)
    {
      uint64_t v8 = (void *)(v10 & 0xFFFFFFFFFFFFFFF8);
      if ((atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0) {
        __p[0] = v8;
      }
    }
    uint64_t v13 = a3;
    uint64_t v9 = sub_2170F7770(a2, a3, (uint64_t)&unk_2174BFD90, &v13);
    sub_2168ED33C(v9 + 5, __p);
    sub_2168EE084((uint64_t)__p);
    if ((v10 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    unsigned __int8 v7 = v12;
  }
  if ((v7 & 0x80) != 0) {
    operator delete(v11[0]);
  }
}

void sub_21711B300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if ((a9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t **sub_21711B360(uint64_t **a1, unint64_t *a2, uint64_t a3, _OWORD **a4)
{
  unsigned __int8 v7 = a1 + 1;
  unint64_t v6 = a1[1];
  uint64_t v8 = a1 + 1;
  uint64_t v9 = a1 + 1;
  if (v6)
  {
    unint64_t v10 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unint64_t v11 = v6[4];
        if (v10 >= v11) {
          break;
        }
        unint64_t v6 = *v9;
        uint64_t v8 = v9;
        if (!*v9) {
          goto LABEL_9;
        }
      }
      if (v11 >= v10) {
        break;
      }
      unint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    unsigned __int8 v12 = operator new(0x48uLL);
    v15[1] = v7;
    uint64_t v13 = *a4;
    v12[2] = **a4;
    *uint64_t v13 = 0;
    v13[1] = 0;
    *((void *)v12 + 8) = 0;
    *((void *)v12 + 7) = 0;
    *((void *)v12 + 6) = (char *)v12 + 56;
    char v16 = 1;
    sub_21677B358(a1, (uint64_t)v9, v8, (uint64_t *)v12);
    v15[0] = 0;
    sub_21711B458((uint64_t)v15, 0);
    return (uint64_t **)v12;
  }
  return v9;
}

void sub_21711B458(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_21711B4B0((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void sub_21711B4B0(uint64_t a1)
{
  sub_216BD5270(a1 + 16, *(void **)(a1 + 24));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    sub_216784EC4(v2);
  }
}

uint64_t sub_21711B500(uint64_t a1, int a2)
{
  if (a2 == 1) {
    return 1;
  }
  if ((a2 & 0xFFFFFFFD) != 0) {
    return 0;
  }
  sub_216779094(__p, "schemaBaseType");
  sub_21679F2AC(a1, (const void **)__p, &v11);
  if (v13 < 0)
  {
    BOOL v2 = *(void *)v12 == 19
      && *v11 == 0x5F6D6F6547636241
      && v11[1] == 0x657361426D6F6547
      && *(void *)((char *)v11 + 11) == 0x31765F657361426DLL;
    operator delete(v11);
  }
  else
  {
    BOOL v2 = v13 == 19
      && v11 == (void *)0x5F6D6F6547636241
      && *(void *)v12 == 0x657361426D6F6547
      && *(void *)&v12[3] == 0x31765F657361426DLL;
  }
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void sub_21711B640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *sub_21711B65C(_DWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);

  return sub_21697C414(a1);
}

uint64_t sub_21711B69C(uint64_t a1)
{
  BOOL v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_21711B6E4((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
  return a1;
}

void sub_21711B6E4(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_21697C414((_DWORD *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    BOOL v2 = *(void **)a1;
    operator delete(v2);
  }
}

void sub_21711B740(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_21711B740(a1, *a2);
    sub_21711B740(a1, a2[1]);
    sub_21711B4B0((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_21711B79C(pxrInternal__aapl__pxrReserved__::TfToken *a1, uint64_t a2)
{
  int v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4) {
    int v4 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  if ((*((void *)v4 + 39) & 0xFFFFFFFFFFFFFFF8) == 0) {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v4);
  }
  std::operator+<char>();
  sub_21679F2AC((uint64_t)a1, (const void **)__p, &v13);
  if (v14 < 0)
  {
    BOOL v5 = v13.n128_u64[1] == 4 && *(_DWORD *)v13.n128_u64[0] == 1919252079;
    operator delete((void *)v13.n128_u64[0]);
  }
  else
  {
    BOOL v5 = v14 == 4 && v13.n128_u32[0] == 1919252079;
  }
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)(a2 + 56) = v5;
  unint64_t v6 = (uint64_t *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v6) {
    unint64_t v6 = (uint64_t *)sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  sub_2170F7470(a1, (uint64_t **)(a2 + 128), v6);
  unsigned __int8 v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v7) {
    unsigned __int8 v7 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  sub_2170F7470(a1, (uint64_t **)(a2 + 128), (uint64_t *)v7 + 22);
  uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v8) {
    uint64_t v8 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  sub_2170F7604(a1, (uint64_t **)(a2 + 128), (uint64_t *)v8 + 13);
  uint64_t v9 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v9) {
    uint64_t v9 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  sub_2170F7604(a1, (uint64_t **)(a2 + 128), (uint64_t *)v9 + 17);
  char v10 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v10) {
    char v10 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  sub_21711B1A0(a1, (uint64_t **)(a2 + 128), (uint64_t *)v10 + 26);
  unint64_t v11 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v11) {
    unint64_t v11 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  sub_21711BB70(a1, (void *)v11 + 27, (uint64_t)&v13);
  sub_21711BCF8(a2 + 64, &v13);
  if (v15)
  {
    __p[0] = &v13;
    sub_216889A04((void ***)__p);
  }
  unsigned __int8 v12 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v12) {
    unsigned __int8 v12 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  }
  sub_21711BB70(a1, (void *)v12 + 34, (uint64_t)&v13);
  sub_21711BCF8(a2 + 96, &v13);
  if (v15)
  {
    __p[0] = &v13;
    sub_216889A04((void ***)__p);
  }
}

void sub_21711BA08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_21711BA24(uint64_t a1, const void **a2)
{
  uint64_t v3 = a1 + 24;
  uint64_t v4 = sub_21678C2D8(a1 + 24, a2);
  uint64_t v5 = v4;
  if (a1 + 32 != v4) {
    return (uint64_t *)(v4 + 56);
  }
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v9 = 0;
  uint64_t v7 = sub_21678C2D8(v3, (const void **)__p);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  if (v5 != v7) {
    return (uint64_t *)(v7 + 56);
  }
  if (atomic_load_explicit((atomic_uchar *volatile)&qword_267B95E08, memory_order_acquire)) {
    return &qword_267B95DF0;
  }
  if (__cxa_guard_acquire(&qword_267B95E08))
  {
    qword_267B95DF0 = 0;
    *(void *)algn_267B95DF8 = 0;
    qword_267B95E00 = 0;
    __cxa_atexit((void (*)(void *))sub_2170F565C, &qword_267B95DF0, &dword_216758000);
    __cxa_guard_release(&qword_267B95E08);
  }
  return &qword_267B95DF0;
}

uint64_t sub_21711BB1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_21683A7CC();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void sub_21711BB70(pxrInternal__aapl__pxrReserved__::TfToken *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) == 0) {
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  }
  std::operator+<char>();
  sub_21679F2AC((uint64_t)a1, (const void **)&__p, v11);
  if (v10 < 0) {
    operator delete(__p);
  }
  unint64_t v5 = v12;
  if ((v12 & 0x80u) != 0) {
    unint64_t v5 = (unint64_t)v11[1];
  }
  if (v5)
  {
    pxrInternal__aapl__pxrReserved__::TfStringTokenize((unsigned __int8 *)v11, " []", &__p);
    if (__p != v9)
    {
      long long v6 = 0uLL;
      uint64_t v7 = 0;
      sub_2168898F0(&v6, (long long *)__p, v9, 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (unsigned char *)__p) >> 3));
      *(_OWORD *)a3 = v6;
      *(void *)(a3 + 16) = v7;
      uint64_t v7 = 0;
      long long v6 = 0uLL;
      *(unsigned char *)(a3 + 24) = 1;
      __n128 v13 = (void **)&v6;
      sub_216889A04(&v13);
      *(void *)&long long v6 = &__p;
      sub_216782F20((void ***)&v6);
      goto LABEL_12;
    }
    *(void *)&long long v6 = &__p;
    sub_216782F20((void ***)&v6);
  }
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 24) = 0;
LABEL_12:
  if ((char)v12 < 0) {
    operator delete(v11[0]);
  }
}

void sub_21711BCB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  a9 = &a12;
  sub_216782F20((void ***)&a9);
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

__n128 sub_21711BCF8(uint64_t a1, __n128 *a2)
{
  if (*(unsigned __int8 *)(a1 + 24) == a2[1].n128_u8[8])
  {
    if (*(unsigned char *)(a1 + 24))
    {
      sub_216A698A4((void **)a1);
      __n128 result = *a2;
      *(__n128 *)a1 = *a2;
      *(void *)(a1 + 16) = a2[1].n128_u64[0];
      a2->n128_u64[0] = 0;
      a2->n128_u64[1] = 0;
      a2[1].n128_u64[0] = 0;
    }
  }
  else if (*(unsigned char *)(a1 + 24))
  {
    unint64_t v5 = (void **)a1;
    sub_216889A04(&v5);
    *(unsigned char *)(a1 + 24) = 0;
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    __n128 result = *a2;
    *(__n128 *)a1 = *a2;
    *(void *)(a1 + 16) = a2[1].n128_u64[0];
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  return result;
}

_DWORD *sub_21711BD9C(uint64_t **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, _DWORD **a4)
{
  long long v6 = (void **)sub_216AF190C((uint64_t)a1, &v13, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = operator new(0x40uLL);
    v11[1] = a1 + 1;
    uint64_t v9 = *a4;
    sub_216981010(v7 + 8, v9);
    sub_21698105C(v7 + 9, v9 + 1);
    *((void *)v7 + 5) = 0;
    *((void *)v7 + 6) = 0;
    *((void *)v7 + 7) = 0;
    char v12 = 1;
    sub_21677B358(a1, v13, v8, (uint64_t *)v7);
    v11[0] = 0;
    sub_21711BE64((uint64_t)v11, 0);
  }
  return v7;
}

void sub_21711BE64(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_21711BEBC((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

_DWORD *sub_21711BEBC(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));

  return sub_21697C414((_DWORD *)a1);
}

void sub_21711BF0C(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_21711BF0C(a1, *a2);
    sub_21711BF0C(a1, a2[1]);
    sub_21711BEBC((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t *sub_21711BF68(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t **a4)
{
  sub_21711C014((uint64_t)a1, a3, a4, (uint64_t)&v10);
  unint64_t v5 = (uint64_t **)sub_2168BE158((uint64_t)a1, &v9, v10 + 4);
  long long v6 = *v5;
  if (*v5)
  {
    uint64_t v7 = v10;
    char v10 = 0;
    if (v7) {
      sub_2170F7808((uint64_t)&v11, v7);
    }
  }
  else
  {
    sub_21677B358(a1, v9, v5, v10);
    return v10;
  }
  return v6;
}

void sub_21711BFF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11)
{
  if (a10) {
    sub_2170F7808((uint64_t)&a11, a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_21711C014@<X0>(uint64_t a1@<X0>, uint64_t **a2@<X2>, uint64_t **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  uint64_t v8 = (uint64_t *)operator new(0x38uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  __n128 result = sub_21711C0A0(v8 + 4, *a2, *a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_21711C084(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_2170F7808(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_21711C0A0(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a2;
  *__n128 result = *a2;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    *result &= 0xFFFFFFFFFFFFFFF8;
  }
  result[2] = (uint64_t)&off_26C750C70 + 1;
  uint64_t v4 = *a3;
  result[1] = *a3;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    result[1] &= 0xFFFFFFFFFFFFFFF8;
  }
  return result;
}

void sub_21711C10C(char *a1)
{
  if (a1)
  {
    sub_21711C10C(*(void *)a1);
    sub_21711C10C(*((void *)a1 + 1));
    if (a1[247] < 0) {
      operator delete(*((void **)a1 + 28));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)a1 + 55);
    sub_21697C414((_DWORD *)a1 + 54);
    sub_2170F5AB4((uint64_t)(a1 + 192), *((void **)a1 + 25));
    sub_216D61968((uint64_t)(a1 + 168), *((void **)a1 + 22));
    if (a1[160])
    {
      uint64_t v3 = (void **)(a1 + 136);
      sub_216889A04(&v3);
    }
    if (a1[128])
    {
      uint64_t v3 = (void **)(a1 + 104);
      sub_216889A04(&v3);
    }
    uint64_t v3 = (void **)(a1 + 72);
    sub_216889A04(&v3);
    uint64_t v3 = (void **)(a1 + 48);
    sub_216889A04(&v3);
    uint64_t v2 = *((void *)a1 + 5);
    if ((v2 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)a1 + 9);
    sub_21697C414((_DWORD *)a1 + 8);
    operator delete(a1);
  }
}

void sub_21711C208(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_21711C208(a1, *a2);
    sub_21711C208(a1, a2[1]);
    sub_21711B6E4((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t sub_21711C264(uint64_t **a1, void *a2)
{
  uint64_t v3 = sub_216AE2F1C((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3) {
    return 0;
  }
  sub_216AE2E14(a1, v3);
  return 1;
}

void *sub_21711C2AC(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  pxrInternal__aapl__pxrReserved__::SdfPath::GetAbsoluteRootOrPrimPath(this, &v10);
  unint64_t v5 = *(void **)(a1 + 160);
  uint64_t v3 = (void *)(a1 + 160);
  uint64_t v4 = v5;
  if (!v5) {
    goto LABEL_8;
  }
  long long v6 = v3;
  do
  {
    int v7 = sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)(v4 + 4), (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v10);
    uint64_t v8 = v4 + 1;
    if (!v7)
    {
      uint64_t v8 = v4;
      long long v6 = v4;
    }
    uint64_t v4 = (void *)*v8;
  }
  while (*v8);
  if (v6 == v3
    || sub_2169817E8((pxrInternal__aapl__pxrReserved__::SdfPath *)&v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 + 4)))
  {
LABEL_8:
    long long v6 = v3;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
  sub_21697C414(&v10);
  if (v6 == v3) {
    return 0;
  }
  else {
    return v6 + 5;
  }
}

void sub_21711C354(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_21697B754((int *)va);
  _Unwind_Resume(a1);
}

void *sub_21711C370(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *this)
{
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPropertyPath(this)) {
    return 0;
  }
  NameToken = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(this);
  unint64_t v5 = sub_216A8E1C4(a1 + 152, NameToken);
  if ((void *)(a1 + 160) == v5) {
    return 0;
  }
  else {
    return v5 + 5;
  }
}

uint64_t sub_21711C3D8(std::recursive_mutex **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a2 + 88);
  if (!v5) {
    return 0;
  }
  if (!*(_DWORD *)(a4 + 8)) {
    return 1;
  }
  uint64_t v8 = *a1;
  if (*a1)
  {
    std::recursive_mutex::lock(*a1);
    uint64_t v5 = *(void *)(a2 + 88);
    if (!v5) {
      sub_21683A7CC();
    }
  }
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5 + 48))(v5, a4, a3);
  if (v8) {
    std::recursive_mutex::unlock(v8);
  }
  return v10;
}

void sub_21711C48C(_Unwind_Exception *a1)
{
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_21711C4AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1) {
    sub_2168BBB60();
  }
  uint64_t v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_26C775D80[v2])(&v5, a1);
}

uint64_t sub_21711C500(uint64_t a1, int a2)
{
  int v5 = a2;
  uint64_t v4 = &v5;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1) {
    sub_2168BBB60();
  }
  long long v6 = &v4;
  return ((uint64_t (*)(int ***, uint64_t))off_26C775D98[v2])(&v6, a1);
}

uint64_t sub_21711C55C()
{
  return 1;
}

uint64_t sub_21711C564(uint64_t **a1, void **a2)
{
  return 1;
}

BOOL sub_21711C58C(uint64_t ****a1, uint64_t *a2)
{
  return sub_21711C59C(*a2, **a1);
}

BOOL sub_21711C59C(uint64_t a1, uint64_t **a2)
{
  int v4 = strcmp((const char *)(0x8000000217479096 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4)
  {
    *(unsigned char *)(a1 + 25) = 1;
  }
  else
  {
    int v5 = *(uint64_t ***)(a1 + 8);
    if (v5 != a2) {
      sub_216E26CA4(v5, *a2, a2 + 1);
    }
  }
  return v4 == 0;
}

uint64_t sub_21711C620()
{
  return 1;
}

uint64_t sub_21711C628(int ***a1, void *a2)
{
  uint64_t v2 = *a2;
  int v3 = ***a1;
  uint64_t v4 = *(void *)(*a2 + 8);
  if (v4) {
    BOOL v5 = (*(void *)(*a2 + 8) & 3) == 3;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5) {
    (*(void (**)(void))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(*a2);
  }
  *(void *)(v2 + 8) = (char *)&off_26C756E60 + 3;
  *(_DWORD *)uint64_t v2 = v3;
  return 1;
}

BOOL sub_21711C690(_DWORD ***a1, uint64_t *a2)
{
  return sub_21711C69C(*a1, *a2);
}

BOOL sub_21711C69C(_DWORD **a1, uint64_t a2)
{
  int v4 = strcmp((const char *)(0x8000000217469580 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)(a2 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4) {
    *(unsigned char *)(a2 + 25) = 1;
  }
  else {
    **(_DWORD **)(a2 + 8) = **a1;
  }
  return v4 == 0;
}

uint64_t sub_21711C70C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1) {
    sub_2168BBB60();
  }
  BOOL v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_26C775DB0[v2])(&v5, a1);
}

uint64_t sub_21711C760(uint64_t a1, int a2)
{
  int v5 = a2;
  uint64_t v4 = &v5;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1) {
    sub_2168BBB60();
  }
  long long v6 = &v4;
  return ((uint64_t (*)(int ***, uint64_t))off_26C775DC8[v2])(&v6, a1);
}

uint64_t sub_21711C7BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1) {
    sub_2168BBB60();
  }
  int v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_26C775DE0[v2])(&v5, a1);
}

uint64_t sub_21711C810(uint64_t a1, char a2)
{
  char v4 = a2;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1) {
    sub_2168BBB60();
  }
  int v5 = &v4;
  return ((uint64_t (*)(char **, uint64_t))off_26C775DF8[v2])(&v5, a1);
}

uint64_t sub_21711C864(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1) {
    sub_2168BBB60();
  }
  int v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_26C775E10[v2])(&v5, a1);
}

uint64_t sub_21711C8B8()
{
  return 1;
}

uint64_t sub_21711C8C0(uint64_t ****a1, uint64_t *a2)
{
  return 1;
}

BOOL sub_21711C8E8(uint64_t ****a1, uint64_t *a2)
{
  return sub_21711C8F8(*a2, **a1);
}

BOOL sub_21711C8F8(uint64_t a1, uint64_t **a2)
{
  int v4 = strcmp((const char *)(0x80000002174694DALL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4)
  {
    *(unsigned char *)(a1 + 25) = 1;
  }
  else
  {
    int v5 = *(uint64_t ***)(a1 + 8);
    if (v5 != a2) {
      sub_216ABF1B0(v5, *a2, a2[1], a2[1] - *a2);
    }
  }
  return v4 == 0;
}

uint64_t sub_21711C980()
{
  return 1;
}

uint64_t sub_21711C988(int ***a1, void *a2)
{
  uint64_t v2 = *a2;
  int v3 = ***a1;
  uint64_t v4 = *(void *)(*a2 + 8);
  if (v4) {
    BOOL v5 = (*(void *)(*a2 + 8) & 3) == 3;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5) {
    (*(void (**)(void))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(*a2);
  }
  *(void *)(v2 + 8) = (char *)&off_26C758118 + 3;
  *(_DWORD *)uint64_t v2 = v3;
  return 1;
}

BOOL sub_21711C9F0(_DWORD ***a1, uint64_t *a2)
{
  return sub_21711C9FC(*a1, *a2);
}

BOOL sub_21711C9FC(_DWORD **a1, uint64_t a2)
{
  int v4 = strcmp((const char *)(0x800000021746C160 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)(a2 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4) {
    *(unsigned char *)(a2 + 25) = 1;
  }
  else {
    **(_DWORD **)(a2 + 8) = **a1;
  }
  return v4 == 0;
}

uint64_t sub_21711CA6C()
{
  return 1;
}

uint64_t sub_21711CA74(const void ******a1, uint64_t *a2)
{
  return 1;
}

BOOL sub_21711CA9C(const void ******a1, uint64_t *a2)
{
  return sub_21711CAAC(*a2, **a1);
}

BOOL sub_21711CAAC(uint64_t a1, const void ****a2)
{
  int v4 = strcmp((const char *)(0x8000000217473E6ALL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4) {
    *(unsigned char *)(a1 + 25) = 1;
  }
  else {
    pxrInternal__aapl__pxrReserved__::VtDictionary::operator=(*(const void *****)(a1 + 8), a2);
  }
  return v4 == 0;
}

uint64_t sub_21711CB24()
{
  return 1;
}

uint64_t sub_21711CB2C(char **a1, void *a2)
{
  uint64_t v2 = *a2;
  char v3 = **a1;
  uint64_t v4 = *(void *)(*a2 + 8);
  if (v4) {
    BOOL v5 = (*(void *)(*a2 + 8) & 3) == 3;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5) {
    (*(void (**)(void))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(*a2);
  }
  *(void *)(v2 + 8) = &unk_26C7501AB;
  *(unsigned char *)uint64_t v2 = v3;
  return 1;
}

BOOL sub_21711CB90(unsigned char **a1, uint64_t *a2)
{
  return sub_216E158B4(*a2, *a1);
}

uint64_t sub_21711CBA0()
{
  return 1;
}

uint64_t sub_21711CBA8(uint64_t **a1, uint64_t *a2)
{
  return 1;
}

BOOL sub_21711CBD0(uint64_t **a1, uint64_t *a2)
{
  return sub_21711CBE0(*a2, **a1);
}

BOOL sub_21711CBE0(uint64_t a1, uint64_t a2)
{
  int v4 = strcmp((const char *)(0x80000002174750CCLL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4) {
    *(unsigned char *)(a1 + 25) = 1;
  }
  else {
    sub_216A992F4(*(unsigned char **)(a1 + 8), a2);
  }
  return v4 == 0;
}

void sub_21711CC58(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_2167FB780(a2 + 184, *(void **)(a2 + 192));
    sub_21711C10C(*(char **)(a2 + 160));
    sub_2167877AC(a2 + 128, *(void **)(a2 + 136));
    sub_21711C208(a2 + 104, *(void **)(a2 + 112));
    Alembic::Abc::v12::IArchive::~IArchive((Alembic::Abc::v12::IArchive *)(a2 + 48));
    sub_2168CB05C(a2 + 24, *(void **)(a2 + 32));
    operator delete((void *)a2);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAbc_TestAlembic(uint64_t a1)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  v41[0] = 0;
  v41[1] = 0;
  long long v40 = v41;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::New(&v40, &v42);
  sub_2167877AC((uint64_t)&v40, v41[0]);
  if (!v42)
  {
    fwrite("Can't create Alembic data\n", 0x1AuLL, 1uLL, (FILE *)*MEMORY[0x263EF8348]);
LABEL_29:
    uint64_t v19 = 0;
    goto LABEL_46;
  }
  uint64_t v2 = sub_2170E5AE0((uint64_t *)&v42);
  if (!pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicData::Open(v2, a1))
  {
    if (*(char *)(a1 + 23) >= 0) {
      uint64_t v18 = (const char *)a1;
    }
    else {
      uint64_t v18 = *(const char **)a1;
    }
    fprintf((FILE *)*MEMORY[0x263EF8348], "Can't open Alembic file \"%s\"\n", v18);
    goto LABEL_29;
  }
  char v3 = (FILE **)MEMORY[0x263EF8358];
  fwrite("\nWrite:\n", 8uLL, 1uLL, (FILE *)*MEMORY[0x263EF8358]);
  uint64_t v39 = &unk_26C775E38;
  v37[0] = &unk_26C775E80;
  v37[1] = &v39;
  memset(v38, 0, sizeof(v38));
  int v4 = (pxrInternal__aapl__pxrReserved__::SdfAbstractData *)sub_2170E5AE0((uint64_t *)&v42);
  pxrInternal__aapl__pxrReserved__::SdfAbstractData::VisitSpecs(v4, (pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor *)v37);
  sub_216779094(&__p, "/octopus_low/octopus_lowShape.extent");
  pxrInternal__aapl__pxrReserved__::SdfPath::SdfPath(&v35, &__p);
  if (SHIBYTE(v34) < 0) {
    operator delete(__p);
  }
  uint64_t v5 = sub_2170E5AE0((uint64_t *)&v42);
  (*(void (**)(void **__return_ptr))(*(void *)v5 + 248))(&__p);
  if (v34)
  {
    fwrite("\nExtent samples:\n", 0x11uLL, 1uLL, *v3);
    long long v6 = (double *)__p;
    if (__p != &v33)
    {
      do
      {
        double v7 = v6[4];
        uint64_t v44 = 0;
        uint64_t v8 = sub_2170E5AE0((uint64_t *)&v42);
        int v9 = (*(uint64_t (**)(uint64_t, int *, char *, double))(*(void *)v8 + 280))(v8, &v35, v43, v7);
        uint64_t v10 = *v3;
        if (v9)
        {
          sub_216928738((uint64_t)v43);
          if (v31 >= 0) {
            int v11 = (const char *)&v30;
          }
          else {
            int v11 = (const char *)v30;
          }
          fprintf(v10, "  %f: %s\n", v7, v11);
          if (v31 < 0) {
            operator delete(v30);
          }
        }
        else
        {
          fprintf(v10, "  %f: <no value>\n", v7);
        }
        sub_2168EE084((uint64_t)v43);
        char v12 = (double *)*((void *)v6 + 1);
        if (v12)
        {
          do
          {
            uint64_t v13 = v12;
            char v12 = *(double **)v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            uint64_t v13 = (double *)*((void *)v6 + 2);
            BOOL v14 = *(void *)v13 == (void)v6;
            long long v6 = v13;
          }
          while (!v14);
        }
        long long v6 = v13;
      }
      while (v13 != (double *)&v33);
    }
    if (v34 > 1)
    {
      char v15 = v33;
      double v16 = floor(*((double *)__p + 4));
      if (v33)
      {
        do
        {
          char v17 = v15;
          char v15 = (void *)v15[1];
        }
        while (v15);
      }
      else
      {
        uint64_t v20 = &v33;
        do
        {
          char v17 = v20[2];
          BOOL v14 = *v17 == (void)v20;
          uint64_t v20 = (void **)v17;
        }
        while (v14);
      }
      for (i = ceil(*((double *)v17 + 4)); v16 <= i; double v16 = v16 + 1.0)
      {
        int v22 = v33;
        if (v33)
        {
          long long v23 = &v33;
          do
          {
            uint64_t v24 = v22;
            uint64_t v25 = v23;
            double v26 = *((double *)v22 + 4);
            uint64_t v27 = v22 + 1;
            if (v26 >= v16)
            {
              uint64_t v27 = v24;
              long long v23 = (void **)v24;
            }
            int v22 = (void *)*v27;
          }
          while (v22);
          if (v23 != &v33)
          {
            if (v26 < v16) {
              uint64_t v24 = v25;
            }
            if (v16 >= *((double *)v24 + 4)) {
              continue;
            }
          }
        }
        uint64_t v28 = sub_2170E5AE0((uint64_t *)&v42);
        if ((*(unsigned int (**)(uint64_t, int *, void, double))(*(void *)v28 + 280))(v28, &v35, 0, v16))
        {
          fprintf(*v3, "  %f: <expected sample>\n", v16);
        }
      }
    }
  }
  sub_2167FB780((uint64_t)&__p, v33);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v36);
  sub_21697C414(&v35);
  v37[0] = &unk_26C775E80;
  std::string __p = v38;
  sub_216981168((void ***)&__p);
  pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor::~SdfAbstractDataSpecVisitor((pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor *)v37);
  pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor::~SdfAbstractDataSpecVisitor((pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor *)&v39);
  uint64_t v19 = 1;
LABEL_46:
  sub_2170E6118(&v42);
  return v19;
}

void sub_21711D158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,char a36)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_21711D1FC(void **a1)
{
  *a1 = &unk_26C775E80;
  uint64_t v2 = a1 + 2;
  sub_216981168(&v2);
  pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor::~SdfAbstractDataSpecVisitor((pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor *)a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAbc_WriteAlembic(uint64_t a1, uint64_t a2)
{
  v18[0] = 0;
  v18[1] = 0;
  uint64_t v19 = 0;
  pxrInternal__aapl__pxrReserved__::SdfLayer::OpenAsAnonymous(a1, 0, (uint64_t)v18, &v20);
  if (SHIBYTE(v19) < 0) {
    operator delete(v18[0]);
  }
  if (v20)
  {
    int v4 = sub_216779094(v18, ".abc");
    v14[0] = 0;
    v14[1] = 0;
    uint64_t v15 = 0;
    pxrInternal__aapl__pxrReserved__::SdfFileFormat::FindByExtension((uint64_t)v4, (uint64_t)v14, &v16);
    uint64_t v5 = sub_216979288(&v16);
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v13 = 0;
    v11[0] = 0;
    v11[1] = 0;
    uint64_t v10 = v11;
    uint64_t v6 = (*(uint64_t (**)(uint64_t, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *, uint64_t, void **, void ***))(*(void *)v5 + 64))(v5, v20, a2, __p, &v10);
    sub_2167877AC((uint64_t)&v10, v11[0]);
    if (SHIBYTE(v13) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v7 = v17;
    if (v17 && atomic_fetch_add_explicit((atomic_uint *volatile)(v17 + 8), 0xFFFFFFFF, memory_order_release) == 1) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
    if (SHIBYTE(v15) < 0) {
      operator delete(v14[0]);
    }
    if (SHIBYTE(v19) < 0) {
      operator delete(v18[0]);
    }
  }
  else
  {
    if (*(char *)(a1 + 23) >= 0) {
      uint64_t v8 = (const char *)a1;
    }
    else {
      uint64_t v8 = *(const char **)a1;
    }
    fprintf((FILE *)*MEMORY[0x263EF8348], "Can't open '%s'\n", v8);
    uint64_t v6 = 0;
  }
  sub_216ABB798(&v20);
  return v6;
}

void sub_21711D3F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_2167877AC((uint64_t)&a10, a11);
  if (a18 < 0) {
    operator delete(__p);
  }
  double v26 = *(atomic_uint **)(v24 - 56);
  if (v26 && atomic_fetch_add_explicit(v26 + 2, 0xFFFFFFFF, memory_order_release) == 1) {
    (*(void (**)(atomic_uint *))(*(void *)v26 + 8))(v26);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  if (*(char *)(v24 - 25) < 0) {
    operator delete(*(void **)(v24 - 48));
  }
  sub_216ABB798((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(v24 - 24));
  _Unwind_Resume(a1);
}

void sub_21711D498()
{
  if (*(char *)(v0 - 25) < 0) {
    operator delete(*(void **)(v0 - 48));
  }
  JUMPOUT(0x21711D490);
}

void sub_21711D4B0(pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor *a1)
{
  pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor::~SdfAbstractDataSpecVisitor(a1);

  operator delete(v1);
}

uint64_t sub_21711D4D8(pxrInternal__aapl__pxrReserved__::SdfPath *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  uint64_t v105 = *MEMORY[0x263EF8340];
  if (*(void *)a3 != *(void *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(a1))
  {
    uint64_t v5 = (FILE **)MEMORY[0x263EF8358];
    uint64_t v6 = (FILE *)*MEMORY[0x263EF8358];
    int PathElementCount = pxrInternal__aapl__pxrReserved__::SdfPath::GetPathElementCount(a3);
    fprintf(v6, "%*s", 2 * PathElementCount - 2, "");
    if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(a3))
    {
      char v12 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v12) {
        char v12 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      (*(void (**)(std::string *__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t))(*(void *)a2 + 136))(&v103, a2, a3, (uint64_t)v12 + 312);
      int v13 = sub_216A94450((pxrInternal__aapl__pxrReserved__::VtValue *)&v103);
      BOOL v14 = *v5;
      if (v13)
      {
        if ((v103.__r_.__value_.__s.__data_[8] & 4) != 0) {
          uint64_t v15 = (std::string *)(*(uint64_t (**)(std::string *))((v103.__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFF8)
        }
                                                                        + 168))(&v103);
        else {
          uint64_t v15 = &v103;
        }
        fprintf(v14, "%s ", off_26798D8B8[LODWORD(v15->__r_.__value_.__l.__data_)]);
      }
      else
      {
        fwrite("!BAD_SPEC ", 0xAuLL, 1uLL, *v5);
      }
      uint64_t v19 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v19) {
        uint64_t v19 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      }
      (*(void (**)(long long *__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t))(*(void *)a2 + 136))(&v95, a2, a3, (uint64_t)v19 + 448);
      if (sub_21695DC44((pxrInternal__aapl__pxrReserved__::VtValue *)&v95))
      {
        uint64_t v20 = *v5;
        sub_216928738((uint64_t)&v95);
        if (__p[23] >= 0) {
          uint64_t v21 = __p;
        }
        else {
          uint64_t v21 = *(const char **)__p;
        }
        fprintf(v20, "%s ", v21);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
      else if (*((void *)&v95 + 1))
      {
        fwrite("!BAD_TYPE ", 0xAuLL, 1uLL, *v5);
      }
      BOOL v50 = *v5;
      uint64_t Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName(a3);
      if (*((char *)Name + 23) >= 0) {
        std::string v52 = (const char *)Name;
      }
      else {
        std::string v52 = (const char *)*Name;
      }
      fprintf(v50, "%s\n", v52);
      sub_2168EE084((uint64_t)&v95);
      int v53 = &v103;
      goto LABEL_151;
    }
    uint64_t v8 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v8) {
      uint64_t v8 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t))(*(void *)a2 + 136))(&v101, a2, a3, (uint64_t)v8 + 64);
    if (sub_216959490((pxrInternal__aapl__pxrReserved__::VtValue *)&v101))
    {
      int v9 = *v5;
      if ((v102 & 4) != 0) {
        uint64_t v10 = (uint64_t *)(*(uint64_t (**)(uint64_t *))((v102 & 0xFFFFFFFFFFFFFFF8) + 168))(&v101);
      }
      else {
        uint64_t v10 = &v101;
      }
      if (*(unsigned char *)v10) {
        int v11 = "custom ";
      }
      else {
        int v11 = "";
      }
      fputs(v11, v9);
    }
    else if (v102)
    {
      fwrite("!BAD_CUSTOM ", 0xCuLL, 1uLL, *v5);
    }
    uint64_t v16 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v16) {
      uint64_t v16 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    (*(void (**)(void *__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t))(*(void *)a2 + 136))(v100, a2, a3, (uint64_t)v16 + 448);
    if (sub_21695DC44((pxrInternal__aapl__pxrReserved__::VtValue *)v100))
    {
      uint64_t v17 = *v5;
      sub_216928738((uint64_t)v100);
      if (__p[23] >= 0) {
        uint64_t v18 = __p;
      }
      else {
        uint64_t v18 = *(const char **)__p;
      }
      fprintf(v17, "%s ", v18);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }
    else if (v100[1])
    {
      fwrite("!BAD_TYPE ", 0xAuLL, 1uLL, *v5);
    }
    int v22 = *v5;
    long long v23 = pxrInternal__aapl__pxrReserved__::SdfPath::GetName(a3);
    if (*((char *)v23 + 23) < 0) {
      long long v23 = (uint64_t *)*v23;
    }
    fputs((const char *)v23, v22);
    uint64_t v24 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v24) {
      uint64_t v24 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t))(*(void *)a2 + 136))(&v98, a2, a3, (uint64_t)v24 + 88);
    if (v99)
    {
      if (!pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued((pxrInternal__aapl__pxrReserved__::VtValue *)&v98)) {
        goto LABEL_89;
      }
      if (sub_216A31600((pxrInternal__aapl__pxrReserved__::VtValue *)&v98))
      {
        if ((v99 & 4) != 0) {
          uint64_t v25 = (*(uint64_t (**)(uint64_t *))((v99 & 0xFFFFFFFFFFFFFFF8) + 168))(&v98);
        }
        else {
          uint64_t v25 = v98;
        }
        long long v26 = *(_OWORD *)(v25 + 16);
        *(_OWORD *)std::string __p = *(_OWORD *)v25;
        *(_OWORD *)&__p[16] = v26;
        uint64_t v27 = *(long long **)(v25 + 32);
        unsigned __int8 v93 = v27;
        if (v27)
        {
          uint64_t v28 = (atomic_ullong *)(v27 - 1);
          if (*(void *)&__p[24]) {
            uint64_t v28 = *(atomic_ullong **)&__p[24];
          }
          atomic_fetch_add_explicit(v28, 1uLL, memory_order_relaxed);
        }
        unint64_t v29 = *(void *)__p;
        if (*(void *)__p >= 6uLL)
        {
          uint64_t v30 = (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)sub_2169AA8E8((uint64_t)&v103, 5uLL);
          char v31 = (int *)v93;
          sub_2169AAF5C(v30, v32, v33);
          unint64_t v34 = (_DWORD *)v104;
          int v35 = *v31;
          *(unsigned char *)(v104 + 4) = *((unsigned char *)v31 + 4);
          *unint64_t v34 = v35;
          sub_216A31534(&v98, (uint64_t)&v103);
          sub_2168F83DC((uint64_t)&v103);
        }
        sub_2168F83DC((uint64_t)__p);
        if (v29 > 5) {
          goto LABEL_82;
        }
      }
      if (sub_2168F9F4C((pxrInternal__aapl__pxrReserved__::VtValue *)&v98))
      {
        if ((v99 & 4) != 0) {
          uint64_t v36 = (*(uint64_t (**)(uint64_t *))((v99 & 0xFFFFFFFFFFFFFFF8) + 168))(&v98);
        }
        else {
          uint64_t v36 = v98;
        }
        long long v37 = *(_OWORD *)(v36 + 16);
        *(_OWORD *)std::string __p = *(_OWORD *)v36;
        *(_OWORD *)&__p[16] = v37;
        int v38 = *(long long **)(v36 + 32);
        unsigned __int8 v93 = v38;
        if (v38)
        {
          uint64_t v39 = (atomic_ullong *)(v38 - 1);
          if (*(void *)&__p[24]) {
            uint64_t v39 = *(atomic_ullong **)&__p[24];
          }
          atomic_fetch_add_explicit(v39, 1uLL, memory_order_relaxed);
        }
        unint64_t v40 = *(void *)__p;
        if (*(void *)__p >= 6uLL)
        {
          uint64_t v41 = (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)sub_2168F9ADC((uint64_t)&v103, 5uLL);
          uint64_t v42 = v93;
          sub_2168F9DFC(v41, v43, v44);
          uint64_t v45 = (_OWORD *)v104;
          long long v46 = *v42;
          long long v47 = v42[1];
          *(void *)(v104 + 32) = *((void *)v42 + 4);
          *uint64_t v45 = v46;
          v45[1] = v47;
          sub_2168F9F84(&v98, (uint64_t)&v103);
          sub_2168F83DC((uint64_t)&v103);
        }
        sub_2168F83DC((uint64_t)__p);
        if (v40 > 5) {
          goto LABEL_82;
        }
      }
      if (sub_21711E338((pxrInternal__aapl__pxrReserved__::VtValue *)&v98)
        || sub_21711E458((pxrInternal__aapl__pxrReserved__::VtValue *)&v98)
        || sub_21711E574((pxrInternal__aapl__pxrReserved__::VtValue *)&v98)
        || sub_21711E690((pxrInternal__aapl__pxrReserved__::VtValue *)&v98)
        || sub_21711E7AC((pxrInternal__aapl__pxrReserved__::VtValue *)&v98)
        || sub_21711E8C8((pxrInternal__aapl__pxrReserved__::VtValue *)&v98)
        || sub_21711E9E8((pxrInternal__aapl__pxrReserved__::VtValue *)&v98)
        || sub_21711EB08((pxrInternal__aapl__pxrReserved__::VtValue *)&v98)
        || sub_21711EC24((pxrInternal__aapl__pxrReserved__::VtValue *)&v98)
        || sub_21711ED40((pxrInternal__aapl__pxrReserved__::VtValue *)&v98)
        || sub_21711EE5C((pxrInternal__aapl__pxrReserved__::VtValue *)&v98)
        || sub_21711EF78((pxrInternal__aapl__pxrReserved__::VtValue *)&v98)
        || sub_21711F094((pxrInternal__aapl__pxrReserved__::VtValue *)&v98)
        || sub_21711F1B0((pxrInternal__aapl__pxrReserved__::VtValue *)&v98)
        || sub_21711F2D0((pxrInternal__aapl__pxrReserved__::VtValue *)&v98)
        || sub_21711F3F0((pxrInternal__aapl__pxrReserved__::VtValue *)&v98)
        || sub_21711F50C((pxrInternal__aapl__pxrReserved__::VtValue *)&v98))
      {
LABEL_82:
        char v48 = 0;
        int v49 = "...";
      }
      else
      {
LABEL_89:
        int v49 = 0;
        char v48 = 1;
      }
      sub_216928738((uint64_t)&v98);
      if ((v48 & 1) == 0)
      {
        uint64_t v54 = __p[23];
        if (__p[23] < 0) {
          uint64_t v54 = *(void *)&__p[8];
        }
        std::string::insert((std::string *)__p, v54 - 1, v49);
      }
      if (sub_21695C360((pxrInternal__aapl__pxrReserved__::VtValue *)&v98))
      {
        sub_21711F640(34, (const void **)__p, (uint64_t)&v103);
        std::string::push_back(&v103, 34);
        *(void *)&long long v95 = v103.__r_.__value_.__l.__size_;
        std::string::size_type v55 = v103.__r_.__value_.__r.__words[0];
        *(void *)((char *)&v95 + 7) = *(std::string::size_type *)((char *)&v103.__r_.__value_.__r.__words[1] + 7);
        char v56 = HIBYTE(v103.__r_.__value_.__r.__words[2]);
        memset(&v103, 0, sizeof(v103));
        if ((__p[23] & 0x80000000) != 0)
        {
          operator delete(*(void **)__p);
          *(void *)std::string __p = v55;
          *(void *)&__p[8] = v95;
          *(void *)&__p[15] = *(void *)((char *)&v95 + 7);
          __p[23] = v56;
          if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v103.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          *(void *)std::string __p = v55;
          *(void *)&__p[8] = v95;
          *(void *)&__p[15] = *(void *)((char *)&v95 + 7);
          __p[23] = v56;
        }
      }
      uint64_t v57 = __p;
      if (__p[23] < 0) {
        uint64_t v57 = *(const char **)__p;
      }
      fprintf(*v5, " = %s\n", v57);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }
    uint64_t v58 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v58) {
      uint64_t v58 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t))(*(void *)a2 + 136))(&v96, a2, a3, (uint64_t)v58 + 432);
    (*(void (**)(unsigned char *__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *))(*(void *)a2 + 248))(__p, a2, a3);
    if (!v97)
    {
      if (*(void *)&__p[16] >= 2uLL)
      {
        uint64_t v69 = *v5;
        int v70 = pxrInternal__aapl__pxrReserved__::SdfPath::GetPathElementCount(a3);
        fprintf(v69, "%*s", 2 * v70 - 2, "");
        fprintf(*v5, "!NO_SAMPLES, want %zd\n");
      }
      goto LABEL_123;
    }
    if (sub_216995B54((pxrInternal__aapl__pxrReserved__::VtValue *)&v96))
    {
      if ((v97 & 4) != 0) {
        uint64_t v59 = (*(uint64_t (**)(uint64_t *))((v97 & 0xFFFFFFFFFFFFFFF8) + 168))(&v96);
      }
      else {
        uint64_t v59 = v96;
      }
      uint64_t v60 = *v5;
      if (*(void *)&__p[16] != *(void *)(v59 + 16))
      {
        int v73 = pxrInternal__aapl__pxrReserved__::SdfPath::GetPathElementCount(a3);
        fprintf(v60, "%*s", 2 * v73 - 2, "");
        fprintf(*v5, "!SAMPLES_MISMATCH, have %zd vs want %zd\n");
        goto LABEL_123;
      }
      int v61 = pxrInternal__aapl__pxrReserved__::SdfPath::GetPathElementCount(a3);
      fprintf(v60, "%*s", 2 * v61 - 2, "");
      fwrite("samples_at=[ ", 0xDuLL, 1uLL, *v5);
      uint64_t v62 = *(double **)__p;
      if (*(unsigned char **)__p != &__p[8])
      {
        do
        {
          fprintf(*v5, "%g ", v62[4]);
          uint64_t v63 = (double *)*((void *)v62 + 1);
          if (v63)
          {
            do
            {
              uint64_t v64 = v63;
              uint64_t v63 = *(double **)v63;
            }
            while (v63);
          }
          else
          {
            do
            {
              uint64_t v64 = (double *)*((void *)v62 + 2);
              BOOL v65 = *(void *)v64 == (void)v62;
              uint64_t v62 = v64;
            }
            while (!v65);
          }
          uint64_t v62 = v64;
        }
        while (v64 != (double *)&__p[8]);
      }
      unsigned __int8 v66 = *v5;
      unint64_t v67 = "]\n";
      size_t v68 = 2;
    }
    else
    {
      uint64_t v71 = *v5;
      int v72 = pxrInternal__aapl__pxrReserved__::SdfPath::GetPathElementCount(a3);
      fprintf(v71, "%*s", 2 * v72 - 2, "");
      unsigned __int8 v66 = *v5;
      unint64_t v67 = "!BAD_SAMPLES\n";
      size_t v68 = 13;
    }
    fwrite(v67, v68, 1uLL, v66);
LABEL_123:
    (*(void (**)(std::string *__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *))(*(void *)a2 + 176))(&v103, a2, a3);
    sub_216A8E254((uint64_t)&v95, (uint64_t *)v103.__r_.__value_.__l.__data_, (uint64_t *)v103.__r_.__value_.__l.__size_);
    unint64_t v74 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v74) {
      unint64_t v74 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    sub_21711F6D0((uint64_t **)&v95, (uint64_t *)v74 + 8);
    uint64_t v75 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v75) {
      uint64_t v75 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    sub_21711F6D0((uint64_t **)&v95, (uint64_t *)v75 + 56);
    int v76 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v76) {
      int v76 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    sub_21711F6D0((uint64_t **)&v95, (uint64_t *)v76 + 11);
    char v77 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v77) {
      char v77 = sub_21697E0E0(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    }
    sub_21711F6D0((uint64_t **)&v95, (uint64_t *)v77 + 54);
    uint64_t v78 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
    if (!v78) {
      pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
    }
    int v79 = (void *)v95;
    if ((long long *)v95 != (long long *)((char *)&v95 + 8))
    {
      do
      {
        (*(void (**)(void *__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, void *))(*(void *)a2 + 136))(v94, a2, a3, v79 + 4);
        Fallbacuint64_t k = (std::type_info *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(v78, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v79 + 4));
        if ((pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v94, Fallback, v81) & 1) == 0)
        {
          uint64_t v82 = (FILE *)*MEMORY[0x263EF8358];
          int v83 = pxrInternal__aapl__pxrReserved__::SdfPath::GetPathElementCount(a3);
          unint64_t v84 = v79[4] & 0xFFFFFFFFFFFFFFF8;
          if (v84)
          {
            long long v85 = (const char *)(v84 + 16);
            if (*(char *)(v84 + 39) < 0) {
              long long v85 = *(const char **)v85;
            }
          }
          else
          {
            long long v85 = "";
          }
          sub_216928738((uint64_t)v94);
          if (v91 >= 0) {
            uint64_t v86 = (const char *)&v90;
          }
          else {
            uint64_t v86 = (const char *)v90;
          }
          fprintf(v82, "%*s# %s = %s\n", 2 * v83 - 2, "", v85, v86);
          if (v91 < 0) {
            operator delete(v90);
          }
        }
        sub_2168EE084((uint64_t)v94);
        uint64_t v87 = (void *)v79[1];
        if (v87)
        {
          do
          {
            uint64_t v88 = v87;
            uint64_t v87 = (void *)*v87;
          }
          while (v87);
        }
        else
        {
          do
          {
            uint64_t v88 = (_OWORD *)v79[2];
            BOOL v65 = *(void *)v88 == (void)v79;
            int v79 = v88;
          }
          while (!v65);
        }
        int v79 = v88;
      }
      while (v88 != (long long *)((char *)&v95 + 8));
    }
    sub_2168CB05C((uint64_t)&v95, *((void **)&v95 + 1));
    *(void *)&long long v95 = &v103;
    sub_216889A04((void ***)&v95);
    sub_2167FB780((uint64_t)__p, *(void **)&__p[8]);
    sub_2168EE084((uint64_t)&v96);
    sub_2168EE084((uint64_t)&v98);
    sub_2168EE084((uint64_t)v100);
    int v53 = (std::string *)&v101;
LABEL_151:
    sub_2168EE084((uint64_t)v53);
  }
  return 1;
}

void sub_21711E1AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,char a33)
{
  if (a2) {
    sub_21675DB74(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_21711E338(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (!sub_2168F8860(a1)) {
    return 0;
  }
  uint64_t v2 = *((void *)a1 + 1);
  if ((v2 & 4) != 0) {
    uint64_t v3 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    uint64_t v3 = *(void *)a1;
  }
  long long v4 = *(_OWORD *)(v3 + 16);
  long long v16 = *(_OWORD *)v3;
  long long v17 = v4;
  uint64_t v5 = *(long long **)(v3 + 32);
  uint64_t v18 = v5;
  if (v5)
  {
    uint64_t v6 = (atomic_ullong *)(v5 - 1);
    if (*((void *)&v17 + 1)) {
      uint64_t v6 = (atomic_ullong *)*((void *)&v17 + 1);
    }
    atomic_fetch_add_explicit(v6, 1uLL, memory_order_relaxed);
  }
  unint64_t v7 = v16;
  if ((unint64_t)v16 >= 6)
  {
    sub_2168F8250((uint64_t)v14, 5uLL);
    uint64_t v8 = v18;
    sub_2168F8710((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v14, v9, v10);
    int v11 = (_OWORD *)v15;
    long long v12 = *v8;
    *(_DWORD *)(v15 + 16) = *((_DWORD *)v8 + 4);
    _OWORD *v11 = v12;
    sub_2168F8898(a1, (uint64_t)v14);
    sub_2168F83DC((uint64_t)v14);
  }
  sub_2168F83DC((uint64_t)&v16);
  return v7 > 5;
}

void sub_21711E428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_21711E458(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (!sub_216B8F40C(a1)) {
    return 0;
  }
  uint64_t v2 = *((void *)a1 + 1);
  if ((v2 & 4) != 0) {
    uint64_t v3 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    uint64_t v3 = *(void *)a1;
  }
  long long v4 = *(_OWORD *)(v3 + 16);
  long long v14 = *(_OWORD *)v3;
  long long v15 = v4;
  uint64_t v5 = *(char **)(v3 + 32);
  long long v16 = v5;
  if (v5)
  {
    uint64_t v6 = (atomic_ullong *)(v5 - 16);
    if (*((void *)&v15 + 1)) {
      uint64_t v6 = (atomic_ullong *)*((void *)&v15 + 1);
    }
    atomic_fetch_add_explicit(v6, 1uLL, memory_order_relaxed);
  }
  unint64_t v7 = v14;
  if ((unint64_t)v14 >= 6)
  {
    sub_2169C035C((uint64_t)v12, 5uLL);
    uint64_t v8 = v16;
    sub_2169C0A9C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v12, v9, v10);
    memmove(__dst, v8, 0xA0uLL);
    sub_216B8F444(a1, (uint64_t)v12);
    sub_2168F83DC((uint64_t)v12);
  }
  sub_2168F83DC((uint64_t)&v14);
  return v7 > 5;
}

void sub_21711E544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_21711E574(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (!sub_216B8F888(a1)) {
    return 0;
  }
  uint64_t v2 = *((void *)a1 + 1);
  if ((v2 & 4) != 0) {
    uint64_t v3 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    uint64_t v3 = *(void *)a1;
  }
  long long v4 = *(_OWORD *)(v3 + 16);
  long long v14 = *(_OWORD *)v3;
  long long v15 = v4;
  uint64_t v5 = *(char **)(v3 + 32);
  long long v16 = v5;
  if (v5)
  {
    uint64_t v6 = (atomic_ullong *)(v5 - 16);
    if (*((void *)&v15 + 1)) {
      uint64_t v6 = (atomic_ullong *)*((void *)&v15 + 1);
    }
    atomic_fetch_add_explicit(v6, 1uLL, memory_order_relaxed);
  }
  unint64_t v7 = v14;
  if ((unint64_t)v14 >= 6)
  {
    sub_2169C1040((uint64_t)v12, 5uLL);
    uint64_t v8 = v16;
    sub_2169C195C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v12, v9, v10);
    memmove(__dst, v8, 0x168uLL);
    sub_216B8F8C0(a1, (uint64_t)v12);
    sub_2168F83DC((uint64_t)v12);
  }
  sub_2168F83DC((uint64_t)&v14);
  return v7 > 5;
}

void sub_21711E660(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_21711E690(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (!sub_2169026B0(a1)) {
    return 0;
  }
  uint64_t v2 = *((void *)a1 + 1);
  if ((v2 & 4) != 0) {
    uint64_t v3 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    uint64_t v3 = *(void *)a1;
  }
  long long v4 = *(_OWORD *)(v3 + 16);
  long long v14 = *(_OWORD *)v3;
  long long v15 = v4;
  uint64_t v5 = *(char **)(v3 + 32);
  long long v16 = v5;
  if (v5)
  {
    uint64_t v6 = (atomic_ullong *)(v5 - 16);
    if (*((void *)&v15 + 1)) {
      uint64_t v6 = (atomic_ullong *)*((void *)&v15 + 1);
    }
    atomic_fetch_add_explicit(v6, 1uLL, memory_order_relaxed);
  }
  unint64_t v7 = v14;
  if ((unint64_t)v14 >= 6)
  {
    sub_2169020B0((uint64_t)v12, 5uLL);
    uint64_t v8 = v16;
    sub_216902540((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v12, v9, v10);
    memmove(__dst, v8, 0x280uLL);
    sub_2169026E8(a1, (uint64_t)v12);
    sub_2168F83DC((uint64_t)v12);
  }
  sub_2168F83DC((uint64_t)&v14);
  return v7 > 5;
}

void sub_21711E77C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_21711E7AC(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (!sub_2168FC5B0(a1)) {
    return 0;
  }
  uint64_t v2 = *((void *)a1 + 1);
  if ((v2 & 4) != 0) {
    uint64_t v3 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    uint64_t v3 = *(void *)a1;
  }
  long long v4 = *(_OWORD *)(v3 + 16);
  long long v14 = *(_OWORD *)v3;
  long long v15 = v4;
  uint64_t v5 = *(char **)(v3 + 32);
  long long v16 = v5;
  if (v5)
  {
    uint64_t v6 = (atomic_ullong *)(v5 - 16);
    if (*((void *)&v15 + 1)) {
      uint64_t v6 = (atomic_ullong *)*((void *)&v15 + 1);
    }
    atomic_fetch_add_explicit(v6, 1uLL, memory_order_relaxed);
  }
  unint64_t v7 = v14;
  if ((unint64_t)v14 >= 6)
  {
    sub_2168FC144((uint64_t)v12, 5uLL);
    uint64_t v8 = v16;
    sub_2168FC460((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v12, v9, v10);
    memmove(__dst, v8, 0x50uLL);
    sub_2168FC5E8(a1, (uint64_t)v12);
    sub_2168F83DC((uint64_t)v12);
  }
  sub_2168F83DC((uint64_t)&v14);
  return v7 > 5;
}

void sub_21711E898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_21711E8C8(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (!sub_2168FAEA0(a1)) {
    return 0;
  }
  uint64_t v2 = *((void *)a1 + 1);
  if ((v2 & 4) != 0) {
    uint64_t v3 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    uint64_t v3 = *(void *)a1;
  }
  long long v4 = *(_OWORD *)(v3 + 16);
  long long v17 = *(_OWORD *)v3;
  long long v18 = v4;
  uint64_t v5 = *(long long **)(v3 + 32);
  uint64_t v19 = v5;
  if (v5)
  {
    uint64_t v6 = (atomic_ullong *)(v5 - 1);
    if (*((void *)&v18 + 1)) {
      uint64_t v6 = (atomic_ullong *)*((void *)&v18 + 1);
    }
    atomic_fetch_add_explicit(v6, 1uLL, memory_order_relaxed);
  }
  unint64_t v7 = v17;
  if ((unint64_t)v17 >= 6)
  {
    sub_2168FA95C((uint64_t)v15, 5uLL);
    uint64_t v8 = v19;
    sub_2168FAD50((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v15, v9, v10);
    int v11 = (_OWORD *)v16;
    long long v12 = *v8;
    long long v13 = v8[1];
    *(void *)(v16 + 32) = *((void *)v8 + 4);
    _OWORD *v11 = v12;
    v11[1] = v13;
    sub_2168FAED8(a1, (uint64_t)v15);
    sub_2168F83DC((uint64_t)v15);
  }
  sub_2168F83DC((uint64_t)&v17);
  return v7 > 5;
}

void sub_21711E9B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_21711E9E8(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (!sub_216B90610(a1)) {
    return 0;
  }
  uint64_t v2 = *((void *)a1 + 1);
  if ((v2 & 4) != 0) {
    uint64_t v3 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    uint64_t v3 = *(void *)a1;
  }
  long long v4 = *(_OWORD *)(v3 + 16);
  long long v17 = *(_OWORD *)v3;
  long long v18 = v4;
  uint64_t v5 = *(long long **)(v3 + 32);
  uint64_t v19 = v5;
  if (v5)
  {
    uint64_t v6 = (atomic_ullong *)(v5 - 1);
    if (*((void *)&v18 + 1)) {
      uint64_t v6 = (atomic_ullong *)*((void *)&v18 + 1);
    }
    atomic_fetch_add_explicit(v6, 1uLL, memory_order_relaxed);
  }
  unint64_t v7 = v17;
  if ((unint64_t)v17 >= 6)
  {
    sub_2169B94DC((uint64_t)v15, 5uLL);
    uint64_t v8 = v19;
    sub_2169B9C54((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v15, v9, v10);
    int v11 = (_OWORD *)v16;
    long long v12 = *v8;
    long long v13 = v8[1];
    *(void *)(v16 + 32) = *((void *)v8 + 4);
    _OWORD *v11 = v12;
    v11[1] = v13;
    sub_216B90648(a1, (uint64_t)v15);
    sub_2168F83DC((uint64_t)v15);
  }
  sub_2168F83DC((uint64_t)&v17);
  return v7 > 5;
}

void sub_21711EAD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_21711EB08(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (!sub_2168FEEE8(a1)) {
    return 0;
  }
  uint64_t v2 = *((void *)a1 + 1);
  if ((v2 & 4) != 0) {
    uint64_t v3 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    uint64_t v3 = *(void *)a1;
  }
  long long v4 = *(_OWORD *)(v3 + 16);
  long long v14 = *(_OWORD *)v3;
  long long v15 = v4;
  uint64_t v5 = *(char **)(v3 + 32);
  uint64_t v16 = v5;
  if (v5)
  {
    uint64_t v6 = (atomic_ullong *)(v5 - 16);
    if (*((void *)&v15 + 1)) {
      uint64_t v6 = (atomic_ullong *)*((void *)&v15 + 1);
    }
    atomic_fetch_add_explicit(v6, 1uLL, memory_order_relaxed);
  }
  unint64_t v7 = v14;
  if ((unint64_t)v14 >= 6)
  {
    sub_2168FE9F8((uint64_t)v12, 5uLL);
    uint64_t v8 = v16;
    sub_2168FED88((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v12, v9, v10);
    memmove(__dst, v8, 0x78uLL);
    sub_2168FEF20(a1, (uint64_t)v12);
    sub_2168F83DC((uint64_t)v12);
  }
  sub_2168F83DC((uint64_t)&v14);
  return v7 > 5;
}

void sub_21711EBF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_21711EC24(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (!sub_2168FD6AC(a1)) {
    return 0;
  }
  uint64_t v2 = *((void *)a1 + 1);
  if ((v2 & 4) != 0) {
    uint64_t v3 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    uint64_t v3 = *(void *)a1;
  }
  long long v4 = *(_OWORD *)(v3 + 16);
  long long v14 = *(_OWORD *)v3;
  long long v15 = v4;
  uint64_t v5 = *(char **)(v3 + 32);
  uint64_t v16 = v5;
  if (v5)
  {
    uint64_t v6 = (atomic_ullong *)(v5 - 16);
    if (*((void *)&v15 + 1)) {
      uint64_t v6 = (atomic_ullong *)*((void *)&v15 + 1);
    }
    atomic_fetch_add_explicit(v6, 1uLL, memory_order_relaxed);
  }
  unint64_t v7 = v14;
  if ((unint64_t)v14 >= 6)
  {
    sub_2168FD0E8((uint64_t)v12, 5uLL);
    uint64_t v8 = v16;
    sub_2168FD54C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v12, v9, v10);
    memmove(__dst, v8, 0x3CuLL);
    sub_2168FD6E4(a1, (uint64_t)v12);
    sub_2168F83DC((uint64_t)v12);
  }
  sub_2168F83DC((uint64_t)&v14);
  return v7 > 5;
}

void sub_21711ED10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_21711ED40(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (!sub_216B91028(a1)) {
    return 0;
  }
  uint64_t v2 = *((void *)a1 + 1);
  if ((v2 & 4) != 0) {
    uint64_t v3 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    uint64_t v3 = *(void *)a1;
  }
  long long v4 = *(_OWORD *)(v3 + 16);
  long long v14 = *(_OWORD *)v3;
  long long v15 = v4;
  uint64_t v5 = *(char **)(v3 + 32);
  uint64_t v16 = v5;
  if (v5)
  {
    uint64_t v6 = (atomic_ullong *)(v5 - 16);
    if (*((void *)&v15 + 1)) {
      uint64_t v6 = (atomic_ullong *)*((void *)&v15 + 1);
    }
    atomic_fetch_add_explicit(v6, 1uLL, memory_order_relaxed);
  }
  unint64_t v7 = v14;
  if ((unint64_t)v14 >= 6)
  {
    sub_2169BB3AC((uint64_t)v12, 5uLL);
    uint64_t v8 = v16;
    sub_2169BBC60((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v12, v9, v10);
    memmove(__dst, v8, 0x3CuLL);
    sub_216B91060(a1, (uint64_t)v12);
    sub_2168F83DC((uint64_t)v12);
  }
  sub_2168F83DC((uint64_t)&v14);
  return v7 > 5;
}

void sub_21711EE2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_21711EE5C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (!sub_2169015F0(a1)) {
    return 0;
  }
  uint64_t v2 = *((void *)a1 + 1);
  if ((v2 & 4) != 0) {
    uint64_t v3 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    uint64_t v3 = *(void *)a1;
  }
  long long v4 = *(_OWORD *)(v3 + 16);
  long long v14 = *(_OWORD *)v3;
  long long v15 = v4;
  uint64_t v5 = *(char **)(v3 + 32);
  uint64_t v16 = v5;
  if (v5)
  {
    uint64_t v6 = (atomic_ullong *)(v5 - 16);
    if (*((void *)&v15 + 1)) {
      uint64_t v6 = (atomic_ullong *)*((void *)&v15 + 1);
    }
    atomic_fetch_add_explicit(v6, 1uLL, memory_order_relaxed);
  }
  unint64_t v7 = v14;
  if ((unint64_t)v14 >= 6)
  {
    sub_216901170((uint64_t)v12, 5uLL);
    uint64_t v8 = v16;
    sub_2169014A0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v12, v9, v10);
    memmove(__dst, v8, 0xA0uLL);
    sub_216901628(a1, (uint64_t)v12);
    sub_2168F83DC((uint64_t)v12);
  }
  sub_2168F83DC((uint64_t)&v14);
  return v7 > 5;
}

void sub_21711EF48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_21711EF78(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (!sub_2168FFE70(a1)) {
    return 0;
  }
  uint64_t v2 = *((void *)a1 + 1);
  if ((v2 & 4) != 0) {
    uint64_t v3 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    uint64_t v3 = *(void *)a1;
  }
  long long v4 = *(_OWORD *)(v3 + 16);
  long long v14 = *(_OWORD *)v3;
  long long v15 = v4;
  uint64_t v5 = *(char **)(v3 + 32);
  uint64_t v16 = v5;
  if (v5)
  {
    uint64_t v6 = (atomic_ullong *)(v5 - 16);
    if (*((void *)&v15 + 1)) {
      uint64_t v6 = (atomic_ullong *)*((void *)&v15 + 1);
    }
    atomic_fetch_add_explicit(v6, 1uLL, memory_order_relaxed);
  }
  unint64_t v7 = v14;
  if ((unint64_t)v14 >= 6)
  {
    sub_2168FF930((uint64_t)v12, 5uLL);
    uint64_t v8 = v16;
    sub_2168FFD20((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v12, v9, v10);
    memmove(__dst, v8, 0x50uLL);
    sub_2168FFEA8(a1, (uint64_t)v12);
    sub_2168F83DC((uint64_t)v12);
  }
  sub_2168F83DC((uint64_t)&v14);
  return v7 > 5;
}

void sub_21711F064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_21711F094(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (!sub_216B91B74(a1)) {
    return 0;
  }
  uint64_t v2 = *((void *)a1 + 1);
  if ((v2 & 4) != 0) {
    uint64_t v3 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    uint64_t v3 = *(void *)a1;
  }
  long long v4 = *(_OWORD *)(v3 + 16);
  long long v14 = *(_OWORD *)v3;
  long long v15 = v4;
  uint64_t v5 = *(char **)(v3 + 32);
  uint64_t v16 = v5;
  if (v5)
  {
    uint64_t v6 = (atomic_ullong *)(v5 - 16);
    if (*((void *)&v15 + 1)) {
      uint64_t v6 = (atomic_ullong *)*((void *)&v15 + 1);
    }
    atomic_fetch_add_explicit(v6, 1uLL, memory_order_relaxed);
  }
  unint64_t v7 = v14;
  if ((unint64_t)v14 >= 6)
  {
    sub_2169BD4D8((uint64_t)v12, 5uLL);
    uint64_t v8 = v16;
    sub_2169BDD28((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v12, v9, v10);
    memmove(__dst, v8, 0x50uLL);
    sub_216B91BAC(a1, (uint64_t)v12);
    sub_2168F83DC((uint64_t)v12);
  }
  sub_2168F83DC((uint64_t)&v14);
  return v7 > 5;
}

void sub_21711F180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_21711F1B0(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (!sub_216907880(a1)) {
    return 0;
  }
  uint64_t v2 = *((void *)a1 + 1);
  if ((v2 & 4) != 0) {
    uint64_t v3 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    uint64_t v3 = *(void *)a1;
  }
  long long v4 = *(_OWORD *)(v3 + 16);
  long long v16 = *(_OWORD *)v3;
  long long v17 = v4;
  uint64_t v5 = *(long long **)(v3 + 32);
  long long v18 = v5;
  if (v5)
  {
    uint64_t v6 = (atomic_ullong *)(v5 - 1);
    if (*((void *)&v17 + 1)) {
      uint64_t v6 = (atomic_ullong *)*((void *)&v17 + 1);
    }
    atomic_fetch_add_explicit(v6, 1uLL, memory_order_relaxed);
  }
  unint64_t v7 = v16;
  if ((unint64_t)v16 >= 6)
  {
    sub_216907954((uint64_t)v14, 5uLL);
    uint64_t v8 = v18;
    sub_216907C74((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v14, v9, v10);
    int v11 = (_OWORD *)v15;
    long long v12 = *v8;
    *(_DWORD *)(v15 + 16) = *((_DWORD *)v8 + 4);
    _OWORD *v11 = v12;
    sub_216907DC4(a1, (uint64_t)v14);
    sub_2168F83DC((uint64_t)v14);
  }
  sub_2168F83DC((uint64_t)&v16);
  return v7 > 5;
}

void sub_21711F2A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2168F83DC((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_21711F2D0(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (!sub_216998140(a1)) {
    return 0;
  }
  uint64_t v2 = *((void *)a1 + 1);
  if ((v2 & 4) != 0) {
    uint64_t v3 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    uint64_t v3 = *(void *)a1;
  }
  long long v4 = *(_OWORD *)(v3 + 16);
  long long v13 = *(_OWORD *)v3;
  long long v14 = v4;
  uint64_t v5 = *(std::string **)(v3 + 32);
  uint64_t v15 = v5;
  if (v5)
  {
    p_std::string::size_type size = (atomic_ullong *)&v5[-1].__r_.__value_.__l.__size_;
    if (*((void *)&v14 + 1)) {
      p_std::string::size_type size = (atomic_ullong *)*((void *)&v14 + 1);
    }
    atomic_fetch_add_explicit(p_size, 1uLL, memory_order_relaxed);
  }
  unint64_t v7 = v13;
  if ((unint64_t)v13 >= 6)
  {
    sub_2169B3E0C((uint64_t)v12, 5uLL);
    uint64_t v8 = v15;
    sub_2169B49FC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v12, v9, v10);
    sub_216CF5990((int)&v16, v8, v8 + 10, v12[4]);
    sub_216B8E690(a1, (uint64_t)v12);
    sub_2169B4408(v12);
  }
  sub_2169B4408(&v13);
  return v7 > 5;
}

void sub_21711F3C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2169B4408((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL sub_21711F3F0(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (!sub_216998044(a1)) {
    return 0;
  }
  uint64_t v2 = *((void *)a1 + 1);
  if ((v2 & 4) != 0) {
    uint64_t v3 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    uint64_t v3 = *(void *)a1;
  }
  long long v4 = *(_OWORD *)(v3 + 16);
  long long v13 = *(_OWORD *)v3;
  long long v14 = v4;
  uint64_t v5 = *(std::string **)(v3 + 32);
  uint64_t v15 = v5;
  if (v5)
  {
    p_std::string::size_type size = (atomic_ullong *)&v5[-1].__r_.__value_.__l.__size_;
    if (*((void *)&v14 + 1)) {
      p_std::string::size_type size = (atomic_ullong *)*((void *)&v14 + 1);
    }
    atomic_fetch_add_explicit(p_size, 1uLL, memory_order_relaxed);
  }
  unint64_t v7 = v13;
  if ((unint64_t)v13 >= 6)
  {
    sub_2169B19A0((uint64_t)v12, 5uLL);
    uint64_t v8 = v15;
    sub_2169B23EC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v12, v9, v10);
    sub_21680F908(v8, v8 + 5, v12[4]);
    sub_216A31E78(a1, (uint64_t)v12);
    sub_2169B1EE4(v12);
  }
  sub_2169B1EE4(&v13);
  return v7 > 5;
}

void sub_21711F4DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2169B1EE4((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL sub_21711F50C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  if (!sub_21699807C(a1)) {
    return 0;
  }
  uint64_t v2 = *((void *)a1 + 1);
  if ((v2 & 4) != 0) {
    uint64_t v3 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    uint64_t v3 = *(void *)a1;
  }
  long long v4 = *(_OWORD *)(v3 + 16);
  long long v15 = *(_OWORD *)v3;
  long long v16 = v4;
  uint64_t v5 = *(void *)(v3 + 32);
  uint64_t v17 = v5;
  if (v5)
  {
    uint64_t v6 = (atomic_ullong *)(v5 - 16);
    if (*((void *)&v16 + 1)) {
      uint64_t v6 = (atomic_ullong *)*((void *)&v16 + 1);
    }
    atomic_fetch_add_explicit(v6, 1uLL, memory_order_relaxed);
  }
  unint64_t v7 = v15;
  if ((unint64_t)v15 >= 6)
  {
    sub_2169B28F8((uint64_t)v14, 5uLL);
    uint64_t v8 = v17;
    sub_2169B3278((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v14, v9, v10);
    uint64_t v11 = 0;
    uint64_t v12 = v14[4];
    do
    {
      sub_2168D2318((void *)(v12 + v11), (void *)(v8 + v11));
      v11 += 8;
    }
    while (v11 != 40);
    sub_216B8E178(a1, (uint64_t)v14);
    sub_2169B2E0C(v14);
  }
  sub_2169B2E0C(&v15);
  return v7 > 5;
}

void sub_21711F610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2169B2E0C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_21711F640@<X0>(char a1@<W0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  if (*((char *)a2 + 23) >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = (size_t)a2[1];
  }
  uint64_t result = sub_2167940B4(a3, v5 + 1);
  if (*(char *)(result + 23) >= 0) {
    unint64_t v7 = (unsigned char *)result;
  }
  else {
    unint64_t v7 = *(unsigned char **)result;
  }
  *unint64_t v7 = a1;
  uint64_t v8 = v7 + 1;
  if (v5)
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v9 = a2;
    }
    else {
      uint64_t v9 = *a2;
    }
    uint64_t result = (uint64_t)memmove(v8, v9, v5);
  }
  *((unsigned char *)v8 + v5) = 0;
  return result;
}

uint64_t sub_21711F6D0(uint64_t **a1, uint64_t *a2)
{
  uint64_t v3 = sub_216A8E1C4((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3) {
    return 0;
  }
  sub_216AE2E14(a1, v3);
  return 1;
}

void sub_21711F718(void **a1)
{
  *a1 = &unk_26C775E80;
  uint64_t v3 = a1 + 2;
  sub_216981168(&v3);
  pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor::~SdfAbstractDataSpecVisitor((pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor *)a1);
  operator delete(v2);
}

uint64_t sub_21711F778(void *a1, uint64_t a2, _DWORD *a3)
{
  if (a1[1])
  {
    unint64_t v5 = a1[3];
    if (v5 >= a1[4])
    {
      uint64_t v6 = sub_216981B30(a1 + 2, a3);
    }
    else
    {
      sub_216981010((_DWORD *)a1[3], a3);
      sub_21698105C((_DWORD *)(v5 + 4), a3 + 1);
      uint64_t v6 = v5 + 8;
    }
    a1[3] = v6;
  }
  return 1;
}

_DWORD *sub_21711F7EC(_DWORD *result, uint64_t a2)
{
  if (*((void *)result + 1))
  {
    uint64_t v3 = result;
    uint64_t v4 = *((void *)result + 2);
    unint64_t v5 = (int *)*((void *)v3 + 3);
    unint64_t v6 = 126 - 2 * __clz(((uint64_t)v5 - v4) >> 3);
    if (v5 == (int *)v4) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = v6;
    }
    sub_2169D38EC(v4, v5, (uint64_t)&v14, v7, 1);
    uint64_t v8 = *((void *)v3 + 2);
    uint64_t v9 = *((void *)v3 + 3);
    while (v8 != v9)
    {
      while ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(*(void *)v3 + 32))(v3, a2, v8))
      {
        int v10 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)v3 + 1) + 16))(*((void *)v3 + 1), a2, v8);
        v8 += 8;
        if (v10) {
          BOOL v11 = v8 == v9;
        }
        else {
          BOOL v11 = 1;
        }
        if (v11) {
          goto LABEL_15;
        }
      }
      v8 += 8;
    }
LABEL_15:
    uint64_t result = (_DWORD *)(*(uint64_t (**)(void, uint64_t))(**((void **)v3 + 1) + 24))(*((void *)v3 + 1), a2);
    long long v13 = (_DWORD *)*((void *)v3 + 2);
    for (double i = (_DWORD *)*((void *)v3 + 3); i != v13; result = sub_216981128((uint64_t)(v3 + 8), i))
      i -= 2;
    *((void *)v3 + 3) = v13;
  }
  return result;
}

uint64_t sub_21711F93C()
{
  return 1;
}

void pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames_StaticTokenType::~UsdAbc_AlembicContextFlagNames_StaticTokenType(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames_StaticTokenType *this)
{
  unint64_t v5 = (void **)((char *)this + 32);
  sub_216889A04(&v5);
  uint64_t v2 = *((void *)this + 3);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 2);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *((void *)this + 1);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames_StaticTokenType *pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames_StaticTokenType::UsdAbc_AlembicContextFlagNames_StaticTokenType(atomic_uint **this)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v2 = (atomic_uint **)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "verbose", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2, "expandInstances", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 2, "disableInstancing", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 3, "promoteInstances", 0);
  uint64_t v3 = *this;
  uint64_t v17 = v3;
  if ((v3 & 7) != 0)
  {
    uint64_t v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v17 = v4;
    }
  }
  unint64_t v5 = *v2;
  long long v18 = v5;
  if ((v5 & 7) != 0)
  {
    unint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      long long v18 = v6;
    }
  }
  uint64_t v7 = this[2];
  uint64_t v19 = v7;
  if ((v7 & 7) != 0)
  {
    uint64_t v8 = (atomic_uint *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v19 = v8;
    }
  }
  uint64_t v9 = this[3];
  uint64_t v20 = v9;
  if ((v9 & 7) != 0)
  {
    int v10 = (atomic_uint *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v10, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v20 = v10;
    }
  }
  this[4] = 0;
  this[5] = 0;
  this[6] = 0;
  BOOL v11 = (atomic_uint *)operator new(0x20uLL);
  unint64_t v12 = 0;
  this[4] = v11;
  this[5] = v11;
  this[6] = v11 + 8;
  do
  {
    long long v13 = (&v17)[v12 / 2];
    *(void *)&v11[v12] = v13;
    if ((v13 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v11[v12] &= 0xFFFFFFFFFFFFFFF8;
    }
    v12 += 2;
  }
  while (v12 != 8);
  this[5] = v11 + 8;
  for (uint64_t i = 3; i != -1; --i)
  {
    long long v15 = (&v17)[i];
    if ((v15 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicContextFlagNames_StaticTokenType *)this;
}

void sub_21711FBD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  sub_216889A04(&a10);
  uint64_t v17 = 24;
  while (1)
  {
    uint64_t v18 = *(void *)(&a12 + v17);
    if ((v18 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v17 -= 8;
    if (v17 == -8)
    {
      if ((*v15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType::~UsdAbcPrimTypeNames_StaticTokenType(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *this)
{
  unint64_t v12 = (void **)((char *)this + 88);
  sub_216889A04(&v12);
  uint64_t v2 = *((void *)this + 10);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 9);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *((void *)this + 8);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *((void *)this + 7);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v6 = *((void *)this + 6);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v7 = *((void *)this + 5);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v8 = *((void *)this + 4);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v9 = *((void *)this + 3);
  if ((v9 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v10 = *((void *)this + 2);
  if ((v10 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v11 = *((void *)this + 1);
  if ((v11 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType::UsdAbcPrimTypeNames_StaticTokenType(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPrimTypeNames_StaticTokenType *this)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v19 = (uint64_t *)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "BasisCurves", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v19, "Camera", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 16, "HermiteCurves", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 24, "Mesh", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 32, "NurbsCurves", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 40, "Points", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 48, "PolyMesh", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 56, "PseudoRoot", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 64, "Scope", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 72, "Xform", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 80, "GeomSubset", 0);
  uint64_t v2 = *(void *)this;
  uint64_t v20 = v2;
  if ((v2 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v20 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v3 = *v19;
  uint64_t v21 = v3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v21 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v4 = *((void *)this + 2);
  uint64_t v22 = v4;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v22 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v5 = *((void *)this + 3);
  uint64_t v23 = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v23 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v6 = *((void *)this + 4);
  uint64_t v24 = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v24 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = *((void *)this + 5);
  uint64_t v25 = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v25 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v8 = *((void *)this + 6);
  uint64_t v26 = v8;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v26 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v9 = *((void *)this + 7);
  uint64_t v27 = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v27 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v10 = *((void *)this + 8);
  uint64_t v28 = v10;
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v28 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v11 = *((void *)this + 9);
  uint64_t v29 = v11;
  if ((v11 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v11 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v29 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v12 = *((void *)this + 10);
  uint64_t v30 = v12;
  if ((v12 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v12 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v30 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((void *)this + 11) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  long long v13 = (char *)operator new(0x58uLL);
  uint64_t v14 = 0;
  *((void *)this + 11) = v13;
  *((void *)this + 12) = v13;
  *((void *)this + 13) = v13 + 88;
  do
  {
    uint64_t v15 = *(uint64_t *)((char *)&v20 + v14);
    *(void *)&v13[v14] = v15;
    if ((v15 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v13[v14] &= 0xFFFFFFFFFFFFFFF8;
    }
    v14 += 8;
  }
  while (v14 != 88);
  *((void *)this + 12) = v13 + 88;
  for (uint64_t i = 80; i != -8; i -= 8)
  {
    uint64_t v17 = *(uint64_t *)((char *)&v20 + i);
    if ((v17 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return this;
}

void sub_2171201D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void *a10, void **a11, uint64_t a12, char a13)
{
  sub_216889A04(&a11);
  uint64_t v23 = 80;
  while (1)
  {
    uint64_t v24 = *(void *)(&a13 + v23);
    if ((v24 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v24 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v23 -= 8;
    if (v23 == -8)
    {
      if ((*v14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v22 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v21 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v21 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v20 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v20 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*a10 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*a10 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_21712035C()
{
}

void sub_217120364()
{
}

void pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType::~UsdAbcPropertyNames_StaticTokenType(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *this)
{
  uint64_t v9 = (void **)((char *)this + 64);
  sub_216889A04(&v9);
  uint64_t v2 = *((void *)this + 7);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 6);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *((void *)this + 5);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v5 = *((void *)this + 4);
  if ((v5 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v6 = *((void *)this + 3);
  if ((v6 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v7 = *((void *)this + 2);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v8 = *((void *)this + 1);
  if ((v8 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType::UsdAbcPropertyNames_StaticTokenType(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcPropertyNames_StaticTokenType *this)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v2 = (uint64_t *)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "primvars", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2, "userProperties", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 16, "materialBind", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 24, "subsetFamily:materialBind:familyType", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 32, "primvars:uv", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 40, "primvars:uv:indices", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 48, "primvars:st", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 56, "primvars:st:indices", 0);
  uint64_t v3 = *(void *)this;
  uint64_t v17 = v3;
  if ((v3 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v17 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v4 = *v2;
  uint64_t v18 = v4;
  if ((v4 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v18 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v5 = *((void *)this + 2);
  uint64_t v19 = v5;
  if ((v5 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v5 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v19 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v6 = *((void *)this + 3);
  uint64_t v20 = v6;
  if ((v6 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v6 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v20 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v7 = *((void *)this + 4);
  uint64_t v21 = v7;
  if ((v7 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v21 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v8 = *((void *)this + 5);
  uint64_t v22 = v8;
  if ((v8 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v8 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v22 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v9 = *((void *)this + 6);
  uint64_t v23 = v9;
  if ((v9 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v9 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v23 &= 0xFFFFFFFFFFFFFFF8;
  }
  uint64_t v10 = *((void *)this + 7);
  uint64_t v24 = v10;
  if ((v10 & 7) != 0
    && (atomic_fetch_add_explicit((atomic_uint *volatile)(v10 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
  {
    v24 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  uint64_t v11 = (char *)operator new(0x40uLL);
  uint64_t v12 = 0;
  *((void *)this + 8) = v11;
  *((void *)this + 9) = v11;
  *((void *)this + 10) = v11 + 64;
  do
  {
    uint64_t v13 = *(uint64_t *)((char *)&v17 + v12);
    *(void *)&v11[v12] = v13;
    if ((v13 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)(v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v11[v12] &= 0xFFFFFFFFFFFFFFF8;
    }
    v12 += 8;
  }
  while (v12 != 64);
  *((void *)this + 9) = v11 + 64;
  for (uint64_t i = 56; i != -8; i -= 8)
  {
    uint64_t v15 = *(uint64_t *)((char *)&v17 + i);
    if ((v15 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return this;
}

void sub_21712079C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  sub_216889A04(&a10);
  uint64_t v21 = 56;
  while (1)
  {
    uint64_t v22 = *(void *)(&a12 + v21);
    if ((v22 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v22 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v21 -= 8;
    if (v21 == -8)
    {
      if ((*v19 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v19 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v18 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v17 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v17 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v16 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v16 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata_StaticTokenType::~UsdAbcCustomMetadata_StaticTokenType(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata_StaticTokenType *this)
{
  uint64_t v5 = (void **)((char *)this + 32);
  sub_216889A04(&v5);
  uint64_t v2 = *((void *)this + 3);
  if ((v2 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v2 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v3 = *((void *)this + 2);
  if ((v3 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v3 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  uint64_t v4 = *((void *)this + 1);
  if ((v4 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v4 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  if ((*(void *)this & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(*(void *)this & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
}

pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata_StaticTokenType *pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata_StaticTokenType::UsdAbcCustomMetadata_StaticTokenType(atomic_uint **this)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v2 = (atomic_uint **)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "gprimDataRender", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2, "riName", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 2, "riType", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this + 3, "singleSampleAsDefault", 0);
  uint64_t v3 = *this;
  uint64_t v17 = v3;
  if ((v3 & 7) != 0)
  {
    uint64_t v4 = (atomic_uint *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v4, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v17 = v4;
    }
  }
  uint64_t v5 = *v2;
  uint64_t v18 = v5;
  if ((v5 & 7) != 0)
  {
    uint64_t v6 = (atomic_uint *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v6, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v18 = v6;
    }
  }
  uint64_t v7 = this[2];
  uint64_t v19 = v7;
  if ((v7 & 7) != 0)
  {
    uint64_t v8 = (atomic_uint *)((unint64_t)v7 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v8, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v19 = v8;
    }
  }
  uint64_t v9 = this[3];
  uint64_t v20 = v9;
  if ((v9 & 7) != 0)
  {
    uint64_t v10 = (atomic_uint *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
    if ((atomic_fetch_add_explicit(v10, 2u, memory_order_relaxed) & 1) == 0) {
      uint64_t v20 = v10;
    }
  }
  this[4] = 0;
  this[5] = 0;
  this[6] = 0;
  uint64_t v11 = (atomic_uint *)operator new(0x20uLL);
  unint64_t v12 = 0;
  this[4] = v11;
  this[5] = v11;
  this[6] = v11 + 8;
  do
  {
    uint64_t v13 = (&v17)[v12 / 2];
    *(void *)&v11[v12] = v13;
    if ((v13 & 7) != 0
      && (atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v13 & 0xFFFFFFFFFFFFFFF8), 2u, memory_order_relaxed) & 1) == 0)
    {
      *(void *)&v11[v12] &= 0xFFFFFFFFFFFFFFF8;
    }
    v12 += 2;
  }
  while (v12 != 8);
  this[5] = v11 + 8;
  for (uint64_t i = 3; i != -1; --i)
  {
    uint64_t v15 = (&v17)[i];
    if ((v15 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)((unint64_t)v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
  }
  return (pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbcCustomMetadata_StaticTokenType *)this;
}

void sub_217120B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  sub_216889A04(&a10);
  uint64_t v17 = 24;
  while (1)
  {
    uint64_t v18 = *(void *)(&a12 + v17);
    if ((v18 & 7) != 0) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v18 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
    }
    v17 -= 8;
    if (v17 == -8)
    {
      if ((*v15 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v15 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v14 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v14 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v13 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v13 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      if ((*v12 & 7) != 0) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(*v12 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
      }
      _Unwind_Resume(a1);
    }
  }
}

void pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicType::Stringify(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicType *this, const char *a2, char *a3)
{
  uint64_t v3 = *(int *)this;
  if (*((unsigned char *)this + 4) == 1)
  {
    if (v3 > 0xD) {
      uint64_t v4 = "UNKNOWN";
    }
    else {
      uint64_t v4 = off_2642946D8[v3];
    }
    if (*((unsigned char *)this + 5)) {
      uint64_t v6 = "[]";
    }
    else {
      uint64_t v6 = "";
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s%s", a2, a3, v4, v6);
  }
  else
  {
    if (v3 > 0xD) {
      uint64_t v5 = "UNKNOWN";
    }
    else {
      uint64_t v5 = off_2642946D8[v3];
    }
    if (*((unsigned char *)this + 5)) {
      uint64_t v7 = "[]";
    }
    else {
      uint64_t v7 = "";
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s[%d]%s", a2, a3, v5, *((unsigned __int8 *)this + 4), v7);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicType::operator==(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 == *(_DWORD *)a2 && *(unsigned __int8 *)(a1 + 4) == *(unsigned __int8 *)(a2 + 4)) {
    return (*(unsigned char *)(a1 + 5) == 0) ^ (*(unsigned char *)(a2 + 5) != 0);
  }
  else {
    return 0;
  }
}

BOOL pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicType::operator<(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 < *(_DWORD *)a2) {
    return 1;
  }
  if (*(_DWORD *)a2 < *(_DWORD *)a1) {
    return 0;
  }
  unsigned int v2 = *(unsigned __int8 *)(a1 + 4);
  unsigned int v3 = *(unsigned __int8 *)(a2 + 4);
  if (v2 < v3) {
    return 1;
  }
  if (v3 < v2) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 5)) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = *(unsigned char *)(a2 + 5) == 0;
  }
  return !v5;
}

void pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_FormatAlembicVersion(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil *this, const char *a2, char *a3)
{
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::_SampleForAlembic::_Holder::Error(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 23) < 0)
    {
      **(unsigned char **)a2 = 0;
      *(void *)(a2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 23) = 0;
    }
  }
  return 0;
}

void *pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::_SampleForAlembic::_EmptyHolder::_EmptyHolder(void *this)
{
  *this = &unk_26C775ED0;
  return this;
}

{
  *this = &unk_26C775ED0;
  return this;
}

void *pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::_SampleForAlembic::_ErrorHolder::_ErrorHolder(void *a1, long long *a2)
{
  *a1 = &unk_26C775F00;
  unsigned int v3 = a1 + 1;
  if (*((char *)a2 + 23) < 0)
  {
    sub_216778F24(v3, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    void v3[2] = *((void *)a2 + 2);
    *(_OWORD *)unsigned int v3 = v4;
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::_SampleForAlembic::_ErrorHolder::Error(uint64_t a1, std::string *this)
{
  if (this) {
    std::string::operator=(this, (const std::string *)(a1 + 8));
  }
  return 1;
}

void pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::_SampleForAlembic::_ErrorHolder::~_ErrorHolder(void **this)
{
  *this = &unk_26C775F00;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  *this = &unk_26C775F00;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_26C775F00;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }

  operator delete(this);
}

void pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::_SampleForAlembic::_VtValueHolder::~_VtValueHolder(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::_SampleForAlembic::_VtValueHolder *this)
{
  *(void *)this = &unk_26C775F30;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    sub_216784EC4(v1);
  }
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_26C775F30;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    sub_216784EC4(v1);
  }
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_26C775F30;
  unsigned int v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_216784EC4(v2);
  }

  operator delete(this);
}

void *pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::_ErrorSampleForAlembic@<X0>(long long *a1@<X0>, void *a2@<X8>)
{
  unsigned int v3 = a1;
  return sub_217122AF8(a2, &v3);
}

void *pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::UsdAbc_AlembicDataConversion(void *this)
{
  *this = 0;
  this[1] = 0;
  this[2] = 0;
  return this;
}

{
  *this = 0;
  this[1] = 0;
  this[2] = 0;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::FindConverter(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion *this, const pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicType *a2)
{
  uint64_t v2 = *(void *)this;
  uint64_t v3 = *((void *)this + 1);
  if (*(void *)this == v3)
  {
LABEL_6:
    pxrInternal__aapl__pxrReserved__::SdfValueTypeName::SdfValueTypeName((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v5);
    return v5;
  }
  else
  {
    while (*(_DWORD *)(v2 + 8) != *(_DWORD *)a2
         || *(unsigned __int8 *)(v2 + 12) != *((unsigned __int8 *)a2 + 4)
         || (*(unsigned char *)(v2 + 13) == 0) == (*((unsigned char *)a2 + 5) != 0))
    {
      v2 += 80;
      if (v2 == v3) {
        goto LABEL_6;
      }
    }
    return *(void *)v2;
  }
}

void **pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::GetToUsdConverter(void *a1, uint64_t a2, void **a3)
{
  uint64_t v3 = (char *)a1[1];
  if ((char *)*a1 == v3)
  {
LABEL_8:
    if (atomic_load_explicit((atomic_uchar *volatile)&qword_267B95E70, memory_order_acquire))
    {
      return (void **)&unk_267B95E50;
    }
    else
    {
      uint64_t v6 = (void **)&unk_267B95E50;
      if (__cxa_guard_acquire(&qword_267B95E70))
      {
        qword_267B95E68 = 0;
        __cxa_atexit((void (*)(void *))sub_2171212E8, &unk_267B95E50, &dword_216758000);
        __cxa_guard_release(&qword_267B95E70);
      }
    }
  }
  else
  {
    uint64_t v6 = (void **)(*a1 + 16);
    while (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(v6 - 2, a3)
         || *((_DWORD *)v6 - 2) != *(_DWORD *)a2
         || *((unsigned __int8 *)v6 - 4) != *(unsigned __int8 *)(a2 + 4)
         || (*((unsigned char *)v6 - 3) == 0) == (*(unsigned char *)(a2 + 5) != 0))
    {
      uint64_t v7 = (char *)(v6 + 8);
      v6 += 10;
      if (v7 == v3) {
        goto LABEL_8;
      }
    }
  }
  return v6;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::FindConverter(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion *this, const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a2)
{
  uint64_t v2 = *(void *)this;
  uint64_t v3 = *((void *)this + 1);
  if (*(void *)this == v3) {
    return 127;
  }
  uint64_t v5 = 127;
  while (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==((void **)v2, (void **)a2))
  {
    v2 += 80;
    if (v2 == v3) {
      return v5;
    }
  }
  return *(void *)(v2 + 8);
}

void **pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::GetConverter(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion *this, const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a2)
{
  uint64_t v2 = *(void ***)this;
  uint64_t v3 = (void **)*((void *)this + 1);
  if (*(void ***)this == v3)
  {
LABEL_4:
    if (atomic_load_explicit((atomic_uchar *volatile)&qword_267B95E98, memory_order_acquire))
    {
      return (void **)&unk_267B95E78;
    }
    else
    {
      if (__cxa_guard_acquire(&qword_267B95E98))
      {
        qword_267B95E90 = 0;
        __cxa_atexit((void (*)(void *))sub_217121414, &unk_267B95E78, &dword_216758000);
        __cxa_guard_release(&qword_267B95E98);
      }
      return (void **)&unk_267B95E78;
    }
  }
  else
  {
    while (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::operator==(v2, (void **)a2))
    {
      v2 += 10;
      if (v2 == v3) {
        goto LABEL_4;
      }
    }
    return v2 + 6;
  }
}

void *pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(uint64_t *a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  _DWORD v12[4] = *MEMORY[0x263EF8340];
  sub_217122C74(v10, a3, a2, a4, a5);
  uint64_t v6 = (void *)a1[1];
  if ((unint64_t)v6 >= a1[2])
  {
    uint64_t v8 = sub_217122D7C(a1, (uint64_t *)v10);
  }
  else
  {
    uint64_t v7 = *(void *)v10;
    *(void *)((char *)v6 + 6) = *(void *)&v10[6];
    void *v6 = v7;
    sub_2170FBF14((uint64_t)(v6 + 2), (uint64_t)v11);
    sub_217122E9C((uint64_t)(v6 + 6), (uint64_t)v12);
    uint64_t v8 = (uint64_t)(v6 + 10);
  }
  a1[1] = v8;
  sub_217119D70(v12);
  return sub_2170FBE90(v11);
}

void sub_2171214F0(_Unwind_Exception *a1)
{
  sub_217119D70((void *)(v1 + 48));
  sub_2170FBE90((void *)(v1 + 16));
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicConversions *pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicConversions::UsdAbc_AlembicConversions(pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicConversions *this, const std::type_info *a2, char *a3)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  sub_217123170((uint64_t *)this, a2, a3);
  sub_217123C60((uint64_t *)this, v4, v5);
  sub_217124844((uint64_t *)this, v6, v7);
  sub_21712543C((uint64_t *)this, v8, v9);
  sub_217126034((uint64_t *)this, v10, v11);
  sub_217126C58((uint64_t *)this, v12, v13);
  sub_21712787C((uint64_t *)this, v14, v15);
  sub_217128674((uint64_t *)this, v16, v17);
  sub_21712913C((uint64_t *)this, v18, v19);
  sub_217129D74((uint64_t *)this, v20, v21);
  sub_21712184C((uint64_t *)this, v22, v23);
  sub_2171218F8((uint64_t *)this, v24, v25);
  sub_2171219A4((uint64_t *)this, v26, v27);
  sub_217121A50((uint64_t *)this, v28, v29);
  sub_217121AFC((uint64_t *)this, v30, v31);
  sub_217121BA8((uint64_t *)this, v32, v33);
  sub_217121C54((uint64_t *)this, v34, v35);
  sub_217121D00((uint64_t *)this, v36, v37);
  sub_217121DAC((uint64_t *)this, v38, v39);
  sub_217121E58((uint64_t *)this, v40, v41);
  sub_217121F04((uint64_t *)this, v42, v43);
  sub_217121FB0((uint64_t *)this, v44, v45);
  sub_21712205C((uint64_t *)this, v46, v47);
  sub_217122108((uint64_t *)this, v48, v49);
  sub_2171221B4((uint64_t *)this, v50, v51);
  sub_217131AD8((uint64_t *)this, v52, v53);
  sub_2171324A8((uint64_t *)this, v54, v55);
  sub_217132E80((uint64_t *)this, v56, v57);
  sub_217133858((uint64_t *)this, v58, v59);
  sub_217122260((uint64_t *)this, v60, v61);
  uint64_t v62 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v62) {
    uint64_t v62 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_21712230C((uint64_t *)this, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v62 + 200));
  uint64_t v63 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v63) {
    uint64_t v63 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_21712249C((uint64_t *)this, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v63 + 208));
  uint64_t v64 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v64) {
    uint64_t v64 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_21712262C((uint64_t *)this, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v64 + 216));
  BOOL v65 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v65) {
    BOOL v65 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_21712230C((uint64_t *)this, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v65 + 248));
  unsigned __int8 v66 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v66) {
    unsigned __int8 v66 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_21712249C((uint64_t *)this, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v66 + 256));
  unint64_t v67 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v67) {
    unint64_t v67 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_21712262C((uint64_t *)this, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v67 + 264));
  size_t v68 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v68) {
    size_t v68 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_21712230C((uint64_t *)this, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v68 + 224));
  uint64_t v69 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v69) {
    uint64_t v69 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_21712249C((uint64_t *)this, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v69 + 232));
  int v70 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v70) {
    int v70 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_21712262C((uint64_t *)this, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v70 + 240));
  uint64_t v71 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v71) {
    uint64_t v71 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_21712230C((uint64_t *)this, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v71 + 272));
  int v72 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v72) {
    int v72 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_21712249C((uint64_t *)this, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v72 + 280));
  int v73 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v73) {
    int v73 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_21712262C((uint64_t *)this, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v73 + 288));
  unint64_t v74 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v74) {
    unint64_t v74 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_2171227BC((uint64_t *)this, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v74 + 368));
  uint64_t v75 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v75) {
    uint64_t v75 = sub_2169914D8((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  }
  sub_21712294C((uint64_t *)this, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v75 + 384));
  return this;
}

void sub_217121834(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_217119CC0((void ***)va);
  _Unwind_Resume(a1);
}

void *sub_21712184C(uint64_t *a1, const std::type_info *a2, char *a3)
{
  long long v4 = (atomic_ullong ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
  }
  uint64_t v5 = (const pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C720, a2, a3);
  unint64_t v7 = 0;
  uint64_t Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(v4, v5, (atomic_uint **)&v7);
  uint64_t result = sub_21712AC90(a1, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void *sub_2171218F8(uint64_t *a1, const std::type_info *a2, char *a3)
{
  long long v4 = (atomic_ullong ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
  }
  uint64_t v5 = (const pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C710, a2, a3);
  unint64_t v7 = 0;
  uint64_t Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(v4, v5, (atomic_uint **)&v7);
  uint64_t result = sub_21712B7A0(a1, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void *sub_2171219A4(uint64_t *a1, const std::type_info *a2, char *a3)
{
  long long v4 = (atomic_ullong ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
  }
  uint64_t v5 = (const pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C700, a2, a3);
  unint64_t v7 = 0;
  uint64_t Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(v4, v5, (atomic_uint **)&v7);
  uint64_t result = sub_21712294C(a1, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void *sub_217121A50(uint64_t *a1, const std::type_info *a2, char *a3)
{
  long long v4 = (atomic_ullong ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
  }
  uint64_t v5 = (const pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C6F0, a2, a3);
  unint64_t v7 = 0;
  uint64_t Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(v4, v5, (atomic_uint **)&v7);
  uint64_t result = sub_21712C330(a1, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void *sub_217121AFC(uint64_t *a1, const std::type_info *a2, char *a3)
{
  long long v4 = (atomic_ullong ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
  }
  uint64_t v5 = (const pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C760, a2, a3);
  unint64_t v7 = 0;
  uint64_t Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(v4, v5, (atomic_uint **)&v7);
  uint64_t result = sub_21712CE00(a1, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void *sub_217121BA8(uint64_t *a1, const std::type_info *a2, char *a3)
{
  long long v4 = (atomic_ullong ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
  }
  uint64_t v5 = (const pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C750, a2, a3);
  unint64_t v7 = 0;
  uint64_t Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(v4, v5, (atomic_uint **)&v7);
  uint64_t result = sub_21712230C(a1, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void *sub_217121C54(uint64_t *a1, const std::type_info *a2, char *a3)
{
  long long v4 = (atomic_ullong ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
  }
  uint64_t v5 = (const pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C740, a2, a3);
  unint64_t v7 = 0;
  uint64_t Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(v4, v5, (atomic_uint **)&v7);
  uint64_t result = sub_21712249C(a1, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void *sub_217121D00(uint64_t *a1, const std::type_info *a2, char *a3)
{
  long long v4 = (atomic_ullong ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
  }
  uint64_t v5 = (const pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C730, a2, a3);
  unint64_t v7 = 0;
  uint64_t Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(v4, v5, (atomic_uint **)&v7);
  uint64_t result = sub_21712262C(a1, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void *sub_217121DAC(uint64_t *a1, const std::type_info *a2, char *a3)
{
  long long v4 = (atomic_ullong ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
  }
  uint64_t v5 = (const pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C7A0, a2, a3);
  unint64_t v7 = 0;
  uint64_t Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(v4, v5, (atomic_uint **)&v7);
  uint64_t result = sub_21712D904(a1, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void *sub_217121E58(uint64_t *a1, const std::type_info *a2, char *a3)
{
  long long v4 = (atomic_ullong ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
  }
  uint64_t v5 = (const pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C790, a2, a3);
  unint64_t v7 = 0;
  uint64_t Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(v4, v5, (atomic_uint **)&v7);
  uint64_t result = sub_21712E3D8(a1, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void *sub_217121F04(uint64_t *a1, const std::type_info *a2, char *a3)
{
  long long v4 = (atomic_ullong ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
  }
  uint64_t v5 = (const pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C780, a2, a3);
  unint64_t v7 = 0;
  uint64_t Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(v4, v5, (atomic_uint **)&v7);
  uint64_t result = sub_21712EEE4(a1, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void *sub_217121FB0(uint64_t *a1, const std::type_info *a2, char *a3)
{
  long long v4 = (atomic_ullong ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
  }
  uint64_t v5 = (const pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C770, a2, a3);
  unint64_t v7 = 0;
  uint64_t Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(v4, v5, (atomic_uint **)&v7);
  uint64_t result = sub_21712F9BC(a1, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void *sub_21712205C(uint64_t *a1, const std::type_info *a2, char *a3)
{
  long long v4 = (atomic_ullong ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
  }
  uint64_t v5 = (const pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C600, a2, a3);
  unint64_t v7 = 0;
  uint64_t Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(v4, v5, (atomic_uint **)&v7);
  uint64_t result = sub_21713049C(a1, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void *sub_217122108(uint64_t *a1, const std::type_info *a2, char *a3)
{
  long long v4 = (atomic_ullong ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
  }
  uint64_t v5 = (const pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C5F0, a2, a3);
  unint64_t v7 = 0;
  uint64_t Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(v4, v5, (atomic_uint **)&v7);
  uint64_t result = sub_217130FB0(a1, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void *sub_2171221B4(uint64_t *a1, const std::type_info *a2, char *a3)
{
  long long v4 = (atomic_ullong ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
  }
  uint64_t v5 = (const pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C5C0, a2, a3);
  unint64_t v7 = 0;
  uint64_t Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(v4, v5, (atomic_uint **)&v7);
  uint64_t result = sub_2171227BC(a1, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void *sub_217122260(uint64_t *a1, const std::type_info *a2, char *a3)
{
  long long v4 = (atomic_ullong ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
  }
  uint64_t v5 = (const pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_26C74C5C0, a2, a3);
  unint64_t v7 = 0;
  uint64_t Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(v4, v5, (atomic_uint **)&v7);
  uint64_t result = sub_217134484(a1, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void *sub_21712230C(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  LODWORD(v6) = 9;
  WORD2(v6) = 3;
  v9[0] = &unk_26C779AB8;
  uint64_t v10 = v9;
  v7[0] = &unk_26C779B50;
  uint64_t v8 = v7;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v6, a2, (uint64_t)v9, (uint64_t)v7);
  sub_217119D70(v7);
  sub_2170FBE90(v9);
  LODWORD(v6) = 9;
  WORD2(v6) = 259;
  Arrayuint64_t Type = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(a2);
  uint64_t v8 = v7;
  v9[0] = &unk_26C779BC0;
  uint64_t v10 = v9;
  v7[0] = &unk_26C779C58;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v6, &ArrayType, (uint64_t)v9, (uint64_t)v7);
  sub_217119D70(v7);
  return sub_2170FBE90(v9);
}

void sub_217122474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_217119D70((uint64_t *)va);
  sub_2170FBE90((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void *sub_21712249C(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  LODWORD(v6) = 10;
  WORD2(v6) = 3;
  v9[0] = &unk_26C779CC8;
  uint64_t v10 = v9;
  v7[0] = &unk_26C779D60;
  uint64_t v8 = v7;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v6, a2, (uint64_t)v9, (uint64_t)v7);
  sub_217119D70(v7);
  sub_2170FBE90(v9);
  LODWORD(v6) = 10;
  WORD2(v6) = 259;
  Arrayuint64_t Type = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(a2);
  uint64_t v8 = v7;
  v9[0] = &unk_26C779DD0;
  uint64_t v10 = v9;
  v7[0] = &unk_26C779E50;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v6, &ArrayType, (uint64_t)v9, (uint64_t)v7);
  sub_217119D70(v7);
  return sub_2170FBE90(v9);
}

void sub_217122604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_217119D70((uint64_t *)va);
  sub_2170FBE90((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void *sub_21712262C(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  LODWORD(v6) = 11;
  WORD2(v6) = 3;
  v9[0] = &unk_26C779EC0;
  uint64_t v10 = v9;
  v7[0] = &unk_26C779F58;
  uint64_t v8 = v7;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v6, a2, (uint64_t)v9, (uint64_t)v7);
  sub_217119D70(v7);
  sub_2170FBE90(v9);
  LODWORD(v6) = 11;
  WORD2(v6) = 259;
  Arrayuint64_t Type = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(a2);
  uint64_t v8 = v7;
  v9[0] = &unk_26C779FC8;
  uint64_t v10 = v9;
  v7[0] = &unk_26C77A060;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v6, &ArrayType, (uint64_t)v9, (uint64_t)v7);
  sub_217119D70(v7);
  return sub_2170FBE90(v9);
}

void sub_217122794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_217119D70((uint64_t *)va);
  sub_2170FBE90((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void *sub_2171227BC(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  LODWORD(v6) = 11;
  WORD2(v6) = 16;
  v9[0] = &unk_26C77A0D0;
  uint64_t v10 = v9;
  v7[0] = &unk_26C77A150;
  uint64_t v8 = v7;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v6, a2, (uint64_t)v9, (uint64_t)v7);
  sub_217119D70(v7);
  sub_2170FBE90(v9);
  LODWORD(v6) = 11;
  WORD2(v6) = 272;
  Arrayuint64_t Type = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(a2);
  uint64_t v8 = v7;
  v9[0] = &unk_26C77A1C0;
  uint64_t v10 = v9;
  v7[0] = &unk_26C77A240;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v6, &ArrayType, (uint64_t)v9, (uint64_t)v7);
  sub_217119D70(v7);
  return sub_2170FBE90(v9);
}

void sub_217122924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_217119D70((uint64_t *)va);
  sub_2170FBE90((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void *sub_21712294C(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  LODWORD(v6) = 10;
  WORD2(v6) = 2;
  v9[0] = &unk_26C77A2B0;
  uint64_t v10 = v9;
  v7[0] = &unk_26C77A330;
  uint64_t v8 = v7;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v6, a2, (uint64_t)v9, (uint64_t)v7);
  sub_217119D70(v7);
  sub_2170FBE90(v9);
  LODWORD(v6) = 10;
  WORD2(v6) = 258;
  Arrayuint64_t Type = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(a2);
  uint64_t v8 = v7;
  v9[0] = &unk_26C77A3A0;
  uint64_t v10 = v9;
  v7[0] = &unk_26C77A438;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v6, &ArrayType, (uint64_t)v9, (uint64_t)v7);
  sub_217119D70(v7);
  return sub_2170FBE90(v9);
}

void sub_217122AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_217119D70((uint64_t *)va);
  sub_2170FBE90((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_217122AE0()
{
  return 0;
}

uint64_t sub_217122AE8()
{
  return 0;
}

uint64_t sub_217122AF0(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

void *sub_217122AF8(void *a1, long long **a2)
{
  *a1 = 0;
  long long v4 = operator new(0x20uLL);
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::_SampleForAlembic::_ErrorHolder::_ErrorHolder(v4, *a2);
  sub_217122B64(a1 + 1, (uint64_t)v4);
  a1[3] = 0;
  a1[4] = 0;
  return a1;
}

void sub_217122B50(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_217122B64(void *a1, uint64_t a2)
{
  *a1 = a2;
  long long v4 = operator new(0x20uLL);
  *long long v4 = &unk_26C775FE8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_217122BBC(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_217325240(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_217122BD8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete(v1);
}

uint64_t sub_217122C00(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_217122C30(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C776038)) {
    return a1 + 24;
  }
  else {
    return 0;
  }
}

void *sub_217122C74(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  *a1 = *a2;
  a1[1] = *a3;
  sub_2170FBD90((uint64_t)(a1 + 2), a4);
  sub_217122CE4((uint64_t)(a1 + 6), a5);
  return a1;
}

void sub_217122CD0(_Unwind_Exception *a1)
{
  sub_2170FBE90(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_217122CE4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_217122D7C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x333333333333333) {
    sub_21677CB10();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x199999999999999) {
    unint64_t v9 = 0x333333333333333;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v15[4] = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_216814BD8(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[80 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v15[3] = &v10[80 * v9];
  uint64_t v12 = *a2;
  *(void *)(v11 + 6) = *(uint64_t *)((char *)a2 + 6);
  *(void *)uint64_t v11 = v12;
  sub_2170FBF14((uint64_t)(v11 + 16), (uint64_t)(a2 + 2));
  sub_217122E9C((uint64_t)(v11 + 48), (uint64_t)(a2 + 6));
  void v15[2] = v11 + 80;
  sub_217122F1C(a1, v15);
  uint64_t v13 = a1[1];
  sub_2171230DC(v15);
  return v13;
}

void sub_217122E88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2171230DC((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_217122E9C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

uint64_t sub_217122F1C(uint64_t *a1, void *a2)
{
  uint64_t result = sub_217122F94((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_217122F94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v17 = a6;
  *((void *)&v17 + 1) = a7;
  long long v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  _OWORD v14[2] = &v17;
  char v15 = 0;
  if (a3 == a5)
  {
    uint64_t v12 = a6;
  }
  else
  {
    uint64_t v9 = a3 - 32;
    do
    {
      uint64_t v11 = v9 - 48;
      uint64_t v10 = *(void *)(v9 - 48);
      *(void *)(v7 - 74) = *(void *)(v9 - 42);
      *(void *)(v7 - 80) = v10;
      sub_2170FBF14(v7 - 64, v9 - 32);
      sub_217122E9C(v7 - 32, v9);
      uint64_t v7 = *((void *)&v17 + 1) - 80;
      *((void *)&v17 + 1) -= 80;
      v9 -= 80;
    }
    while (v11 != a5);
    uint64_t v12 = v17;
  }
  char v15 = 1;
  sub_21712305C((uint64_t)v14);
  return v12;
}

uint64_t sub_21712305C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_217123094((void *)a1);
  }
  return a1;
}

void *sub_217123094(void *result)
{
  uint64_t v1 = *(void *)(result[2] + 8);
  uint64_t v2 = *(void *)(result[1] + 8);
  while (v1 != v2)
  {
    sub_217119D70((void *)(v1 + 48));
    uint64_t result = sub_2170FBE90((void *)(v1 + 16));
    v1 += 80;
  }
  return result;
}

void **sub_2171230DC(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void *sub_217123114(void *result, uint64_t a2)
{
  uint64_t v2 = result[2];
  if (v2 != a2)
  {
    uint64_t v4 = result;
    do
    {
      v4[2] = v2 - 80;
      sub_217119D70((void *)(v2 - 32));
      uint64_t result = sub_2170FBE90((void *)(v2 - 64));
      uint64_t v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

void *sub_217123170(uint64_t *a1, const std::type_info *a2, char *a3)
{
  uint64_t v4 = (atomic_ullong ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
  }
  uint64_t v5 = (const pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C230], a2, a3);
  unint64_t v7 = 0;
  uint64_t Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(v4, v5, (atomic_uint **)&v7);
  uint64_t result = sub_21712321C(a1, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void *sub_21712321C(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  LODWORD(v6) = 0;
  WORD2(v6) = 1;
  v9[0] = &unk_26C776060;
  uint64_t v10 = v9;
  v7[0] = &unk_26C7760F0;
  uint64_t v8 = v7;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v6, a2, (uint64_t)v9, (uint64_t)v7);
  sub_217119D70(v7);
  sub_2170FBE90(v9);
  LODWORD(v6) = 0;
  WORD2(v6) = 257;
  Arrayuint64_t Type = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(a2);
  uint64_t v8 = v7;
  v9[0] = &unk_26C7761B8;
  uint64_t v10 = v9;
  v7[0] = &unk_26C776250;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v6, &ArrayType, (uint64_t)v9, (uint64_t)v7);
  sub_217119D70(v7);
  return sub_2170FBE90(v9);
}

void sub_217123378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_217119D70((uint64_t *)va);
  sub_2170FBE90((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void *sub_2171233A8()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26C776060;
  return result;
}

void sub_2171233E0(uint64_t a1, void *a2)
{
  *a2 = &unk_26C776060;
}

uint64_t sub_217123408(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_21712345C(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_217123410(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7760D0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217123450()
{
  return &unk_26C7760D0;
}

uint64_t sub_21712345C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char v11 = 0;
  v9[0] = 0;
  v9[2] = 0;
  Alembic::Abc::v12::IScalarProperty::IScalarProperty(v10, a2, a3, v9);
  Alembic::Abc::v12::IScalarProperty::get((uint64_t)v10, (uint64_t)&v11, a4, 0);
  uint64_t v7 = sub_21711C810(a5, v11 != 0);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v10);
  return v7;
}

void sub_2171234D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)va);
  _Unwind_Resume(a1);
}

void *sub_2171234F8()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26C7760F0;
  return result;
}

void sub_217123530(uint64_t a1, void *a2)
{
  *a2 = &unk_26C7760F0;
}

void *sub_217123558@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  return sub_2171235C8(a1, a2);
}

uint64_t sub_21712357C(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C7760D0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_2171235BC()
{
  return &unk_26C7760D0;
}

void *sub_2171235C8@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    a1 = (*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  char v4 = *(unsigned char *)a1;
  *a2 = 1;
  uint64_t v5 = operator new(0x10uLL);
  *(void *)uint64_t v5 = &unk_26C776170;
  _OWORD v5[8] = v4;
  uint64_t result = sub_217122B64(a2 + 1, (uint64_t)v5);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

uint64_t sub_217123654(uint64_t a1)
{
  return a1 + 8;
}

void *sub_217123664()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26C7761B8;
  return result;
}

void sub_21712369C(uint64_t a1, void *a2)
{
  *a2 = &unk_26C7761B8;
}

uint64_t sub_2171236C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_217123718(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_2171236CC(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C776230)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_21712370C()
{
  return &unk_26C776230;
}

uint64_t sub_217123718(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v36 = 0;
  long long v37 = 0;
  LODWORD(v31) = 0;
  DWORD2(v31) = 0;
  v34[0] = 0;
  v34[2] = 0;
  uint64_t v7 = Alembic::Abc::v12::IArrayProperty::IArrayProperty(v35, a2, a3, &v31, v34);
  Alembic::Abc::v12::IArrayProperty::get(v7, (uint64_t)&v36, a4);
  if (!v36)
  {
    uint64_t v13 = 0;
    goto LABEL_24;
  }
  uint64_t v8 = (uint64_t *)v36[2];
  uint64_t v9 = v36[3] - (void)v8;
  if (v9)
  {
    unint64_t v10 = v9 >> 3;
    if (v10 <= 1) {
      unint64_t v10 = 1;
    }
    unint64_t v11 = 1;
    do
    {
      uint64_t v12 = *v8++;
      v11 *= v12;
      --v10;
    }
    while (v10);
  }
  else
  {
    unint64_t v11 = 0;
  }
  sub_2169AA8E8((uint64_t)&v31, v11);
  sub_2169AAF5C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v31, v14, v15);
  uint64_t v16 = v33;
  long long v17 = (uint64_t *)v36[2];
  uint64_t v18 = v36[3] - (void)v17;
  if (v18)
  {
    uint64_t v19 = *v36;
    unint64_t v20 = v18 >> 3;
    if (v20 <= 1) {
      unint64_t v20 = 1;
    }
    uint64_t v21 = 1;
    do
    {
      uint64_t v22 = v21;
      uint64_t v24 = *v17++;
      uint64_t v23 = v24;
      v21 *= v24;
      --v20;
    }
    while (v20);
    if (v21)
    {
      uint64_t v25 = 0;
      do
      {
        *(unsigned char *)(v16 + v25) = *(unsigned char *)(v19 + v25) != 0;
        ++v25;
      }
      while (v22 * v23 != v25);
      long long v28 = v31;
      long long v29 = v32;
      uint64_t v30 = v16;
      goto LABEL_20;
    }
  }
  long long v28 = v31;
  long long v29 = v32;
  uint64_t v30 = v33;
  if (v33)
  {
LABEL_20:
    uint64_t v26 = (atomic_ullong *)(v16 - 16);
    if (*((void *)&v29 + 1)) {
      uint64_t v26 = (atomic_ullong *)*((void *)&v29 + 1);
    }
    atomic_fetch_add_explicit(v26, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = sub_2171238F8(a5, (uint64_t)&v28);
  sub_2168F83DC((uint64_t)&v28);
  sub_2168F83DC((uint64_t)&v31);
LABEL_24:
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)v35);
  if (v37) {
    sub_216784EC4(v37);
  }
  return v13;
}

void sub_2171238AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  sub_2168F83DC((uint64_t)&a9);
  sub_2168F83DC((uint64_t)&a14);
  Alembic::Abc::v12::IArrayProperty::~IArrayProperty((Alembic::Abc::v12::IArrayProperty *)(v14 - 80));
  uint64_t v16 = *(std::__shared_weak_count **)(v14 - 24);
  if (v16) {
    sub_216784EC4(v16);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2171238F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1) {
    sub_2168BBB60();
  }
  uint64_t v5 = &v4;
  return ((uint64_t (*)(uint64_t **, uint64_t))off_26C776218[v2])(&v5, a1);
}

uint64_t sub_21712394C()
{
  return 1;
}

uint64_t sub_217123954(uint64_t **a1, void **a2)
{
  return 1;
}

BOOL sub_21712397C(long long ***a1, uint64_t *a2)
{
  return sub_21712398C(*a2, **a1);
}

BOOL sub_21712398C(uint64_t a1, long long *a2)
{
  int v4 = strcmp((const char *)(0x80000002174E465ELL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4) {
    *(unsigned char *)(a1 + 25) = 1;
  }
  else {
    sub_216C42CBC(*(void *)(a1 + 8), a2);
  }
  return v4 == 0;
}

void *sub_217123A0C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26C776250;
  return result;
}

void sub_217123A44(uint64_t a1, void *a2)
{
  *a2 = &unk_26C776250;
}

void *sub_217123A6C@<X0>(uint64_t a1@<X1>, size_t *a2@<X8>)
{
  return sub_217123ADC(a1, a2);
}

uint64_t sub_217123A90(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C776230)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217123AD0()
{
  return &unk_26C776230;
}

void *sub_217123ADC@<X0>(uint64_t a1@<X1>, size_t *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if ((v3 & 4) != 0) {
    int v4 = (size_t *)(*(uint64_t (**)(uint64_t))((v3 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  }
  else {
    int v4 = *(size_t **)a1;
  }
  size_t v5 = *v4;
  uint64_t v6 = operator new[](*v4);
  uint64_t v7 = v6;
  if (v5)
  {
    bzero(v6, v5);
    uint64_t v8 = (char *)v4[4];
    size_t v9 = v5;
    unint64_t v10 = v7;
    do
    {
      char v11 = *v8++;
      *v10++ = v11;
      --v9;
    }
    while (v9);
  }
  *a2 = v5;
  uint64_t v12 = operator new(0x10uLL);
  *uint64_t v12 = &unk_26C7762C0;
  v12[1] = v7;
  uint64_t result = sub_217122B64(a2 + 1, (uint64_t)v12);
  a2[3] = 0;
  a2[4] = 0;
  return result;
}

void sub_217123B9C(_Unwind_Exception *a1)
{
  operator delete[](v1);
  _Unwind_Resume(a1);
}

void *sub_217123BB0(void *a1)
{
  uint64_t v2 = (void *)a1[1];
  *a1 = &unk_26C7762C0;
  a1[1] = 0;
  if (v2) {
    operator delete[](v2);
  }
  return a1;
}

void sub_217123BFC(void *__p)
{
  uint64_t v2 = (void *)__p[1];
  void *__p = &unk_26C7762C0;
  __p[1] = 0;
  if (v2) {
    operator delete[](v2);
  }

  operator delete(__p);
}

uint64_t sub_217123C58(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

void *sub_217123C60(uint64_t *a1, const std::type_info *a2, char *a3)
{
  int v4 = (atomic_ullong ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!v4) {
    pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance();
  }
  size_t v5 = (const pxrInternal__aapl__pxrReserved__::TfType *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x263F8C250], a2, a3);
  unint64_t v7 = 0;
  uint64_t Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(v4, v5, (atomic_uint **)&v7);
  uint64_t result = sub_217123D0C(a1, (pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
  if ((v7 & 7) != 0) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v7 & 0xFFFFFFFFFFFFFFF8), 0xFFFFFFFE, memory_order_release);
  }
  return result;
}

void *sub_217123D0C(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  LODWORD(v6) = 1;
  WORD2(v6) = 1;
  v9[0] = &unk_26C776308;
  unint64_t v10 = v9;
  v7[0] = &unk_26C7763A0;
  uint64_t v8 = v7;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v6, a2, (uint64_t)v9, (uint64_t)v7);
  sub_217119D70(v7);
  sub_2170FBE90(v9);
  LODWORD(v6) = 1;
  WORD2(v6) = 257;
  Arrayuint64_t Type = pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetArrayType(a2);
  uint64_t v8 = v7;
  v9[0] = &unk_26C776458;
  unint64_t v10 = v9;
  v7[0] = &unk_26C7764F0;
  pxrInternal__aapl__pxrReserved__::UsdAbc_AlembicUtil::UsdAbc_AlembicDataConversion::_AddConverter(a1, &v6, &ArrayType, (uint64_t)v9, (uint64_t)v7);
  sub_217119D70(v7);
  return sub_2170FBE90(v9);
}

void sub_217123E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_217119D70((uint64_t *)va);
  sub_2170FBE90((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void *sub_217123EA0()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26C776308;
  return result;
}

void sub_217123ED8(uint64_t a1, void *a2)
{
  *a2 = &unk_26C776308;
}

uint64_t sub_217123F00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_217123F54(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_217123F08(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C776380)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void *sub_217123F48()
{
  return &unk_26C776380;
}

uint64_t sub_217123F54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v9[0] = 0;
  v9[2] = 0;
  Alembic::Abc::v12::IScalarProperty::IScalarProperty(v10, a2, a3, v9);
  Alembic::Abc::v12::IScalarProperty::get((uint64_t)v10, (uint64_t)&v11, a4, 0);
  uint64_t v7 = sub_217123FDC(a5, v11);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)v10);
  return v7;
}

void sub_217123FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  Alembic::Abc::v12::IScalarProperty::~IScalarProperty((Alembic::Abc::v12::IScalarProperty *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_217123FDC(uint64_t a1, char a2)
{
  char v4 = a2;
  uint64_t v2 = *(unsigned int *)(a1 + 8);
  if (v2 == -1) {
    sub_2168BBB60();
  }
  uint64_t v5 = &v4;
  return ((uint64_t (*)(char **, uint64_t))off_26C776368[v2])(&v5, a1);
}

uint64_t sub_217124030()
{
  return 1;
}

uint64_t sub_217124038(char **a1, void *a2)
{
  uint64_t v2 = *a2;
  char v3 = **a1;
  uint64_t v4 = *(void *)(*a2 + 8);
  if (v4) {
    BOOL v5 = (*(void *)(*a2 + 8) & 3) == 3;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5) {
    (*(void (**)(void))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(*a2);
  }
  *(void *)(v2 + 8) = &unk_26C75031B;
  *(unsigned char *)uint64_t v2 = v3;
  return 1;
}

BOOL sub_21712409C(unsigned char **a1, uint64_t *a2)
{
  return sub_2171240AC(*a2, *a1);
}

BOOL sub_2171240AC(uint64_t a1, unsigned char *a2)
{
  int v4 = strcmp((const char *)(*(void *)(MEMORY[0x263F8C250] + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(*(void *)(a1 + 16) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  if (v4) {
    *(unsigned char *)(a1 + 25) = 1;
  }
  else {
    **(unsigned char **)(a1 + 8) = *a2;
  }
  return v4 == 0;
}

void *sub_21712411C()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26C7763A0;
  return result;
}

void sub_217124154(uint64_t a1, void *a2)
{
  *a2 = &unk_26C7763A0;
}

void *sub_21712417C@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  return sub_2171241EC(a1, a2);
}

uint64_t sub_2171241A0(uint64_t a1, uint64_t a2)
{
  if (sub_21677EC50(a2, (uint64_t)&unk_26C776380)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}